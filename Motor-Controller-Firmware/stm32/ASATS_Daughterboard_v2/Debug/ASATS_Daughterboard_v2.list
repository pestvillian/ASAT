
ASATS_Daughterboard_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc90  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c60  0800fe40  0800fe40  00010e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012aa0  08012aa0  0001431c  2**0
                  CONTENTS
  4 .ARM          00000008  08012aa0  08012aa0  00013aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012aa8  08012aa8  0001431c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012aa8  08012aa8  00013aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012aac  08012aac  00013aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000031c  20000000  08012ab0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001431c  2**0
                  CONTENTS
 10 .bss          000128c4  2000031c  2000031c  0001431c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012be0  20012be0  0001431c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001431c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ff98  00000000  00000000  0001434c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000051da  00000000  00000000  000342e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a98  00000000  00000000  000394c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000145c  00000000  00000000  0003af58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028c48  00000000  00000000  0003c3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022b54  00000000  00000000  00064ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7855  00000000  00000000  00087b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016f3a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007958  00000000  00000000  0016f3e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000093  00000000  00000000  00176d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000031c 	.word	0x2000031c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800fe28 	.word	0x0800fe28

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000320 	.word	0x20000320
 80001ec:	0800fe28 	.word	0x0800fe28

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <XPT2046_TouchSelect>:
}

#endif /* SOFTWARE_SPI */

static void XPT2046_TouchSelect()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2110      	movs	r1, #16
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <XPT2046_TouchSelect+0x14>)
 800059a:	f004 fd79 	bl	8005090 <HAL_GPIO_WritePin>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40020000 	.word	0x40020000

080005a8 <XPT2046_TouchUnselect>:

static void XPT2046_TouchUnselect()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2110      	movs	r1, #16
 80005b0:	4802      	ldr	r0, [pc, #8]	@ (80005bc <XPT2046_TouchUnselect+0x14>)
 80005b2:	f004 fd6d 	bl	8005090 <HAL_GPIO_WritePin>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40020000 	.word	0x40020000

080005c0 <XPT2046_TouchPressed>:

bool XPT2046_TouchPressed(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(XPT2046_IRQ_GPIO_Port, XPT2046_IRQ_Pin) == GPIO_PIN_RESET;
 80005c4:	2110      	movs	r1, #16
 80005c6:	4805      	ldr	r0, [pc, #20]	@ (80005dc <XPT2046_TouchPressed+0x1c>)
 80005c8:	f004 fd4a 	bl	8005060 <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	bf0c      	ite	eq
 80005d2:	2301      	moveq	r3, #1
 80005d4:	2300      	movne	r3, #0
 80005d6:	b2db      	uxtb	r3, r3
}
 80005d8:	4618      	mov	r0, r3
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40020400 	.word	0x40020400

080005e0 <XPT2046_TouchGetCoordinates>:

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

#endif /* SOFTWARE_SPI */

    XPT2046_TouchSelect();
 80005ea:	f7ff ffd1 	bl	8000590 <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t avg_y = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	77fb      	strb	r3, [r7, #31]

    for(uint8_t i = 0; i < NUMBER_OF_SAMPLES; i++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	77bb      	strb	r3, [r7, #30]
 80005fe:	e03f      	b.n	8000680 <XPT2046_TouchGetCoordinates+0xa0>
    {
        if(!XPT2046_TouchPressed())
 8000600:	f7ff ffde 	bl	80005c0 <XPT2046_TouchPressed>
 8000604:	4603      	mov	r3, r0
 8000606:	f083 0301 	eor.w	r3, r3, #1
 800060a:	b2db      	uxtb	r3, r3
 800060c:	2b00      	cmp	r3, #0
 800060e:	d13b      	bne.n	8000688 <XPT2046_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 8000610:	7ffb      	ldrb	r3, [r7, #31]
 8000612:	3301      	adds	r3, #1
 8000614:	77fb      	strb	r3, [r7, #31]
	   x_raw[0] = spi_read_byte();
	   x_raw[1] = spi_read_byte();

#else

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	2201      	movs	r2, #1
 800061c:	4944      	ldr	r1, [pc, #272]	@ (8000730 <XPT2046_TouchGetCoordinates+0x150>)
 800061e:	4845      	ldr	r0, [pc, #276]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000620:	f007 fbbb 	bl	8007d9a <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8000624:	f107 0210 	add.w	r2, r7, #16
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2302      	movs	r3, #2
 8000630:	4941      	ldr	r1, [pc, #260]	@ (8000738 <XPT2046_TouchGetCoordinates+0x158>)
 8000632:	4840      	ldr	r0, [pc, #256]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000634:	f007 fcf5 	bl	8008022 <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	2201      	movs	r2, #1
 800063e:	493f      	ldr	r1, [pc, #252]	@ (800073c <XPT2046_TouchGetCoordinates+0x15c>)
 8000640:	483c      	ldr	r0, [pc, #240]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000642:	f007 fbaa 	bl	8007d9a <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 8000646:	f107 020c 	add.w	r2, r7, #12
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2302      	movs	r3, #2
 8000652:	4939      	ldr	r1, [pc, #228]	@ (8000738 <XPT2046_TouchGetCoordinates+0x158>)
 8000654:	4837      	ldr	r0, [pc, #220]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000656:	f007 fce4 	bl	8008022 <HAL_SPI_TransmitReceive>

#endif /* SOFTWARE_SPI */

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 800065a:	7b3b      	ldrb	r3, [r7, #12]
 800065c:	021b      	lsls	r3, r3, #8
 800065e:	7b7a      	ldrb	r2, [r7, #13]
 8000660:	4313      	orrs	r3, r2
 8000662:	461a      	mov	r2, r3
 8000664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000666:	4413      	add	r3, r2
 8000668:	627b      	str	r3, [r7, #36]	@ 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 800066a:	7c3b      	ldrb	r3, [r7, #16]
 800066c:	021b      	lsls	r3, r3, #8
 800066e:	7c7a      	ldrb	r2, [r7, #17]
 8000670:	4313      	orrs	r3, r2
 8000672:	461a      	mov	r2, r3
 8000674:	6a3b      	ldr	r3, [r7, #32]
 8000676:	4413      	add	r3, r2
 8000678:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < NUMBER_OF_SAMPLES; i++)
 800067a:	7fbb      	ldrb	r3, [r7, #30]
 800067c:	3301      	adds	r3, #1
 800067e:	77bb      	strb	r3, [r7, #30]
 8000680:	7fbb      	ldrb	r3, [r7, #30]
 8000682:	2b07      	cmp	r3, #7
 8000684:	d9bc      	bls.n	8000600 <XPT2046_TouchGetCoordinates+0x20>
 8000686:	e000      	b.n	800068a <XPT2046_TouchGetCoordinates+0xaa>
            break;
 8000688:	bf00      	nop
    }

    XPT2046_TouchUnselect();
 800068a:	f7ff ff8d 	bl	80005a8 <XPT2046_TouchUnselect>

    if(nsamples < NUMBER_OF_SAMPLES)
 800068e:	7ffb      	ldrb	r3, [r7, #31]
 8000690:	2b07      	cmp	r3, #7
 8000692:	d801      	bhi.n	8000698 <XPT2046_TouchGetCoordinates+0xb8>
        return false;
 8000694:	2300      	movs	r3, #0
 8000696:	e046      	b.n	8000726 <XPT2046_TouchGetCoordinates+0x146>

    uint32_t raw_x = (avg_x / NUMBER_OF_SAMPLES);
 8000698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800069a:	08db      	lsrs	r3, r3, #3
 800069c:	61bb      	str	r3, [r7, #24]
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	f640 5247 	movw	r2, #3399	@ 0xd47
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d802      	bhi.n	80006ae <XPT2046_TouchGetCoordinates+0xce>
 80006a8:	f640 5348 	movw	r3, #3400	@ 0xd48
 80006ac:	61bb      	str	r3, [r7, #24]
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	f247 1248 	movw	r2, #29000	@ 0x7148
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d902      	bls.n	80006be <XPT2046_TouchGetCoordinates+0xde>
 80006b8:	f247 1348 	movw	r3, #29000	@ 0x7148
 80006bc:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / NUMBER_OF_SAMPLES);
 80006be:	6a3b      	ldr	r3, [r7, #32]
 80006c0:	08db      	lsrs	r3, r3, #3
 80006c2:	617b      	str	r3, [r7, #20]
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	f640 42e3 	movw	r2, #3299	@ 0xce3
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d802      	bhi.n	80006d4 <XPT2046_TouchGetCoordinates+0xf4>
 80006ce:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80006d2:	617b      	str	r3, [r7, #20]
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	f247 5230 	movw	r2, #30000	@ 0x7530
 80006da:	4293      	cmp	r3, r2
 80006dc:	d902      	bls.n	80006e4 <XPT2046_TouchGetCoordinates+0x104>
 80006de:	f247 5330 	movw	r3, #30000	@ 0x7530
 80006e2:	617b      	str	r3, [r7, #20]
    // Uncomment this line to calibrate touchscreen:
//    printf("raw_x = %6d, raw_y = %6d\r\n", (int) raw_x, (int) raw_y);
//    printf("\x1b[1F");

#if (ORIENTATION == 0)
	*x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 80006e4:	69ba      	ldr	r2, [r7, #24]
 80006e6:	4613      	mov	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	019b      	lsls	r3, r3, #6
 80006ee:	f5a3 1384 	sub.w	r3, r3, #1081344	@ 0x108000
 80006f2:	f5a3 53d0 	sub.w	r3, r3, #6656	@ 0x1a00
 80006f6:	4a12      	ldr	r2, [pc, #72]	@ (8000740 <XPT2046_TouchGetCoordinates+0x160>)
 80006f8:	fba2 2303 	umull	r2, r3, r2, r3
 80006fc:	0b5b      	lsrs	r3, r3, #13
 80006fe:	b29a      	uxth	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	801a      	strh	r2, [r3, #0]
	*y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 8000704:	697a      	ldr	r2, [r7, #20]
 8000706:	4613      	mov	r3, r2
 8000708:	011b      	lsls	r3, r3, #4
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	011b      	lsls	r3, r3, #4
 800070e:	f5a3 2341 	sub.w	r3, r3, #790528	@ 0xc1000
 8000712:	f5a3 63b8 	sub.w	r3, r3, #1472	@ 0x5c0
 8000716:	4a0b      	ldr	r2, [pc, #44]	@ (8000744 <XPT2046_TouchGetCoordinates+0x164>)
 8000718:	fba2 2303 	umull	r2, r3, r2, r3
 800071c:	0b5b      	lsrs	r3, r3, #13
 800071e:	b29a      	uxth	r2, r3
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	801a      	strh	r2, [r3, #0]
#elif (ORIENTATION == 3)
    *x = XPT2046_SCALE_X - (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#endif

    return true;
 8000724:	2301      	movs	r3, #1
}
 8000726:	4618      	mov	r0, r3
 8000728:	3728      	adds	r7, #40	@ 0x28
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	0801070c 	.word	0x0801070c
 8000734:	20000440 	.word	0x20000440
 8000738:	08010710 	.word	0x08010710
 800073c:	08010714 	.word	0x08010714
 8000740:	51eb851f 	.word	0x51eb851f
 8000744:	4e8b8659 	.word	0x4e8b8659

08000748 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 800074e:	2300      	movs	r3, #0
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	2301      	movs	r3, #1
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2300      	movs	r3, #0
 8000758:	2200      	movs	r2, #0
 800075a:	2101      	movs	r1, #1
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fceb 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	461a      	mov	r2, r3
 8000766:	4bae      	ldr	r3, [pc, #696]	@ (8000a20 <lcdInit+0x2d8>)
 8000768:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 800076a:	2300      	movs	r3, #0
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	2301      	movs	r3, #1
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	2300      	movs	r3, #0
 8000774:	2201      	movs	r2, #1
 8000776:	2100      	movs	r1, #0
 8000778:	2000      	movs	r0, #0
 800077a:	f000 fcdd 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	4ba8      	ldr	r3, [pc, #672]	@ (8000a24 <lcdInit+0x2dc>)
 8000784:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8000786:	2300      	movs	r3, #0
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	2301      	movs	r3, #1
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2300      	movs	r3, #0
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	2001      	movs	r0, #1
 8000796:	f000 fccf 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	461a      	mov	r2, r3
 800079e:	4ba2      	ldr	r3, [pc, #648]	@ (8000a28 <lcdInit+0x2e0>)
 80007a0:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80007a2:	2300      	movs	r3, #0
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	2301      	movs	r3, #1
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2300      	movs	r3, #0
 80007ac:	2201      	movs	r2, #1
 80007ae:	2101      	movs	r1, #1
 80007b0:	2001      	movs	r0, #1
 80007b2:	f000 fcc1 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b9c      	ldr	r3, [pc, #624]	@ (8000a2c <lcdInit+0x2e4>)
 80007bc:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 80007be:	f000 fc91 	bl	80010e4 <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 80007c2:	2028      	movs	r0, #40	@ 0x28
 80007c4:	f000 fc98 	bl	80010f8 <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 80007c8:	20cf      	movs	r0, #207	@ 0xcf
 80007ca:	f000 fc95 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 fca2 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x83);
 80007d4:	2083      	movs	r0, #131	@ 0x83
 80007d6:	f000 fc9f 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x30);
 80007da:	2030      	movs	r0, #48	@ 0x30
 80007dc:	f000 fc9c 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xED);
 80007e0:	20ed      	movs	r0, #237	@ 0xed
 80007e2:	f000 fc89 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x64);
 80007e6:	2064      	movs	r0, #100	@ 0x64
 80007e8:	f000 fc96 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x03);
 80007ec:	2003      	movs	r0, #3
 80007ee:	f000 fc93 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x12);
 80007f2:	2012      	movs	r0, #18
 80007f4:	f000 fc90 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x81);
 80007f8:	2081      	movs	r0, #129	@ 0x81
 80007fa:	f000 fc8d 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xE8);
 80007fe:	20e8      	movs	r0, #232	@ 0xe8
 8000800:	f000 fc7a 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x85);
 8000804:	2085      	movs	r0, #133	@ 0x85
 8000806:	f000 fc87 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x01);
 800080a:	2001      	movs	r0, #1
 800080c:	f000 fc84 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x79);
 8000810:	2079      	movs	r0, #121	@ 0x79
 8000812:	f000 fc81 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xCB);
 8000816:	20cb      	movs	r0, #203	@ 0xcb
 8000818:	f000 fc6e 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x39);
 800081c:	2039      	movs	r0, #57	@ 0x39
 800081e:	f000 fc7b 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x2C);
 8000822:	202c      	movs	r0, #44	@ 0x2c
 8000824:	f000 fc78 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 8000828:	2000      	movs	r0, #0
 800082a:	f000 fc75 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x34);
 800082e:	2034      	movs	r0, #52	@ 0x34
 8000830:	f000 fc72 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x02);
 8000834:	2002      	movs	r0, #2
 8000836:	f000 fc6f 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xF7);
 800083a:	20f7      	movs	r0, #247	@ 0xf7
 800083c:	f000 fc5c 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x20);
 8000840:	2020      	movs	r0, #32
 8000842:	f000 fc69 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xEA);
 8000846:	20ea      	movs	r0, #234	@ 0xea
 8000848:	f000 fc56 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 800084c:	2000      	movs	r0, #0
 800084e:	f000 fc63 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 8000852:	2000      	movs	r0, #0
 8000854:	f000 fc60 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8000858:	20c0      	movs	r0, #192	@ 0xc0
 800085a:	f000 fc4d 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x26);
 800085e:	2026      	movs	r0, #38	@ 0x26
 8000860:	f000 fc5a 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 8000864:	20c1      	movs	r0, #193	@ 0xc1
 8000866:	f000 fc47 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x11);
 800086a:	2011      	movs	r0, #17
 800086c:	f000 fc54 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 8000870:	20c5      	movs	r0, #197	@ 0xc5
 8000872:	f000 fc41 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x35);
 8000876:	2035      	movs	r0, #53	@ 0x35
 8000878:	f000 fc4e 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3E);
 800087c:	203e      	movs	r0, #62	@ 0x3e
 800087e:	f000 fc4b 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 8000882:	20c7      	movs	r0, #199	@ 0xc7
 8000884:	f000 fc38 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0xBE);
 8000888:	20be      	movs	r0, #190	@ 0xbe
 800088a:	f000 fc45 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 800088e:	2036      	movs	r0, #54	@ 0x36
 8000890:	f000 fc32 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 8000894:	4b62      	ldr	r3, [pc, #392]	@ (8000a20 <lcdInit+0x2d8>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f000 fc3d 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 800089e:	203a      	movs	r0, #58	@ 0x3a
 80008a0:	f000 fc2a 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x55);
 80008a4:	2055      	movs	r0, #85	@ 0x55
 80008a6:	f000 fc37 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 80008aa:	20b1      	movs	r0, #177	@ 0xb1
 80008ac:	f000 fc24 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80008b0:	2000      	movs	r0, #0
 80008b2:	f000 fc31 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x1B);
 80008b6:	201b      	movs	r0, #27
 80008b8:	f000 fc2e 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xF2);
 80008bc:	20f2      	movs	r0, #242	@ 0xf2
 80008be:	f000 fc1b 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x08);
 80008c2:	2008      	movs	r0, #8
 80008c4:	f000 fc28 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 80008c8:	2026      	movs	r0, #38	@ 0x26
 80008ca:	f000 fc15 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x01);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f000 fc22 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 80008d4:	20e0      	movs	r0, #224	@ 0xe0
 80008d6:	f000 fc0f 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x1F);
 80008da:	201f      	movs	r0, #31
 80008dc:	f000 fc1c 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x1A);
 80008e0:	201a      	movs	r0, #26
 80008e2:	f000 fc19 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x18);
 80008e6:	2018      	movs	r0, #24
 80008e8:	f000 fc16 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0A);
 80008ec:	200a      	movs	r0, #10
 80008ee:	f000 fc13 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0F);
 80008f2:	200f      	movs	r0, #15
 80008f4:	f000 fc10 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x06);
 80008f8:	2006      	movs	r0, #6
 80008fa:	f000 fc0d 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x45);
 80008fe:	2045      	movs	r0, #69	@ 0x45
 8000900:	f000 fc0a 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x87);
 8000904:	2087      	movs	r0, #135	@ 0x87
 8000906:	f000 fc07 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x32);
 800090a:	2032      	movs	r0, #50	@ 0x32
 800090c:	f000 fc04 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0A);
 8000910:	200a      	movs	r0, #10
 8000912:	f000 fc01 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x07);
 8000916:	2007      	movs	r0, #7
 8000918:	f000 fbfe 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x02);
 800091c:	2002      	movs	r0, #2
 800091e:	f000 fbfb 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x07);
 8000922:	2007      	movs	r0, #7
 8000924:	f000 fbf8 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x05);
 8000928:	2005      	movs	r0, #5
 800092a:	f000 fbf5 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 800092e:	2000      	movs	r0, #0
 8000930:	f000 fbf2 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8000934:	20e1      	movs	r0, #225	@ 0xe1
 8000936:	f000 fbdf 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 800093a:	2000      	movs	r0, #0
 800093c:	f000 fbec 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x25);
 8000940:	2025      	movs	r0, #37	@ 0x25
 8000942:	f000 fbe9 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x27);
 8000946:	2027      	movs	r0, #39	@ 0x27
 8000948:	f000 fbe6 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x05);
 800094c:	2005      	movs	r0, #5
 800094e:	f000 fbe3 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x10);
 8000952:	2010      	movs	r0, #16
 8000954:	f000 fbe0 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x09);
 8000958:	2009      	movs	r0, #9
 800095a:	f000 fbdd 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3A);
 800095e:	203a      	movs	r0, #58	@ 0x3a
 8000960:	f000 fbda 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x78);
 8000964:	2078      	movs	r0, #120	@ 0x78
 8000966:	f000 fbd7 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x4D);
 800096a:	204d      	movs	r0, #77	@ 0x4d
 800096c:	f000 fbd4 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x05);
 8000970:	2005      	movs	r0, #5
 8000972:	f000 fbd1 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x18);
 8000976:	2018      	movs	r0, #24
 8000978:	f000 fbce 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0D);
 800097c:	200d      	movs	r0, #13
 800097e:	f000 fbcb 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x38);
 8000982:	2038      	movs	r0, #56	@ 0x38
 8000984:	f000 fbc8 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3A);
 8000988:	203a      	movs	r0, #58	@ 0x3a
 800098a:	f000 fbc5 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x1F);
 800098e:	201f      	movs	r0, #31
 8000990:	f000 fbc2 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 8000994:	202a      	movs	r0, #42	@ 0x2a
 8000996:	f000 fbaf 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 800099a:	2000      	movs	r0, #0
 800099c:	f000 fbbc 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f000 fbb9 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f000 fbb6 	bl	8001118 <lcdWriteData>
  lcdWriteData(0xEF);
 80009ac:	20ef      	movs	r0, #239	@ 0xef
 80009ae:	f000 fbb3 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80009b2:	202b      	movs	r0, #43	@ 0x2b
 80009b4:	f000 fba0 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80009b8:	2000      	movs	r0, #0
 80009ba:	f000 fbad 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009be:	2000      	movs	r0, #0
 80009c0:	f000 fbaa 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x01);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f000 fba7 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3F);
 80009ca:	203f      	movs	r0, #63	@ 0x3f
 80009cc:	f000 fba4 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 80009d0:	20b7      	movs	r0, #183	@ 0xb7
 80009d2:	f000 fb91 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x07);
 80009d6:	2007      	movs	r0, #7
 80009d8:	f000 fb9e 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 80009dc:	20b6      	movs	r0, #182	@ 0xb6
 80009de:	f000 fb8b 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x0A);
 80009e2:	200a      	movs	r0, #10
 80009e4:	f000 fb98 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x82);
 80009e8:	2082      	movs	r0, #130	@ 0x82
 80009ea:	f000 fb95 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x27);
 80009ee:	2027      	movs	r0, #39	@ 0x27
 80009f0:	f000 fb92 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009f4:	2000      	movs	r0, #0
 80009f6:	f000 fb8f 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 80009fa:	2011      	movs	r0, #17
 80009fc:	f000 fb7c 	bl	80010f8 <lcdWriteCommand>
  HAL_Delay(100);
 8000a00:	2064      	movs	r0, #100	@ 0x64
 8000a02:	f003 fda5 	bl	8004550 <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 8000a06:	2029      	movs	r0, #41	@ 0x29
 8000a08:	f000 fb76 	bl	80010f8 <lcdWriteCommand>
  HAL_Delay(100);
 8000a0c:	2064      	movs	r0, #100	@ 0x64
 8000a0e:	f003 fd9f 	bl	8004550 <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8000a12:	202c      	movs	r0, #44	@ 0x2c
 8000a14:	f000 fb70 	bl	80010f8 <lcdWriteCommand>
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000033c 	.word	0x2000033c
 8000a24:	2000033d 	.word	0x2000033d
 8000a28:	2000033e 	.word	0x2000033e
 8000a2c:	2000033f 	.word	0x2000033f

08000a30 <lcdFillRGB>:
		}
	}
}

void lcdFillRGB(uint16_t color)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a44:	885b      	ldrh	r3, [r3, #2]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f000 fafd 	bl	800104c <lcdSetWindow>
  int dimensions = lcdProperties.width * lcdProperties.height;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a5a:	885b      	ldrh	r3, [r3, #2]
 8000a5c:	fb02 f303 	mul.w	r3, r2, r3
 8000a60:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 8000a62:	e003      	b.n	8000a6c <lcdFillRGB+0x3c>
  {
    lcdWriteData(color);
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fb56 	bl	8001118 <lcdWriteData>
  while(dimensions--)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	1e5a      	subs	r2, r3, #1
 8000a70:	60fa      	str	r2, [r7, #12]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1f6      	bne.n	8000a64 <lcdFillRGB+0x34>
  }
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000018 	.word	0x20000018

08000a84 <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80fb      	strh	r3, [r7, #6]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	80bb      	strh	r3, [r7, #4]
 8000a92:	4613      	mov	r3, r2
 8000a94:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8000a96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <lcdDrawPixel+0x44>)
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	88fa      	ldrh	r2, [r7, #6]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d20f      	bcs.n	8000ac0 <lcdDrawPixel+0x3c>
 8000aa0:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <lcdDrawPixel+0x44>)
 8000aa2:	885b      	ldrh	r3, [r3, #2]
 8000aa4:	88ba      	ldrh	r2, [r7, #4]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d20a      	bcs.n	8000ac0 <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 8000aaa:	88bb      	ldrh	r3, [r7, #4]
 8000aac:	88fa      	ldrh	r2, [r7, #6]
 8000aae:	88b9      	ldrh	r1, [r7, #4]
 8000ab0:	88f8      	ldrh	r0, [r7, #6]
 8000ab2:	f000 facb 	bl	800104c <lcdSetWindow>
    lcdWriteData(color);
 8000ab6:	887b      	ldrh	r3, [r7, #2]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 fb2d 	bl	8001118 <lcdWriteData>
 8000abe:	e000      	b.n	8000ac2 <lcdDrawPixel+0x3e>
        return;
 8000ac0:	bf00      	nop
}
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000018 	.word	0x20000018

08000acc <lcdDrawHLine>:

void lcdDrawHLine(uint16_t x0, uint16_t x1, uint16_t y, uint16_t color)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4608      	mov	r0, r1
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4623      	mov	r3, r4
 8000adc:	80fb      	strh	r3, [r7, #6]
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80bb      	strh	r3, [r7, #4]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	807b      	strh	r3, [r7, #2]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	803b      	strh	r3, [r7, #0]
  // Allows for slightly better performance than setting individual pixels

	if (x1 < x0)
 8000aea:	88ba      	ldrh	r2, [r7, #4]
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d205      	bcs.n	8000afe <lcdDrawHLine+0x32>
	{
		// Switch x1 and x0
		swap(x0, x1);
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	817b      	strh	r3, [r7, #10]
 8000af6:	88bb      	ldrh	r3, [r7, #4]
 8000af8:	80fb      	strh	r3, [r7, #6]
 8000afa:	897b      	ldrh	r3, [r7, #10]
 8000afc:	80bb      	strh	r3, [r7, #4]
	}

	// Check limits
	if (x1 >= lcdProperties.width)
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	88ba      	ldrh	r2, [r7, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d303      	bcc.n	8000b10 <lcdDrawHLine+0x44>
	{
		x1 = lcdProperties.width - 1;
 8000b08:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	80bb      	strh	r3, [r7, #4]
	}

	if (x0 >= lcdProperties.width)
 8000b10:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	88fa      	ldrh	r2, [r7, #6]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d303      	bcc.n	8000b22 <lcdDrawHLine+0x56>
	{
		x0 = lcdProperties.width - 1;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	80fb      	strh	r3, [r7, #6]
	}

	lcdSetWindow(x0, y, x1, y);
 8000b22:	887b      	ldrh	r3, [r7, #2]
 8000b24:	88ba      	ldrh	r2, [r7, #4]
 8000b26:	8879      	ldrh	r1, [r7, #2]
 8000b28:	88f8      	ldrh	r0, [r7, #6]
 8000b2a:	f000 fa8f 	bl	800104c <lcdSetWindow>

	for (int line = x0; line <= x1; line++)
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	e006      	b.n	8000b42 <lcdDrawHLine+0x76>
	{
		lcdWriteData(color);
 8000b34:	883b      	ldrh	r3, [r7, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 faee 	bl	8001118 <lcdWriteData>
	for (int line = x0; line <= x1; line++)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	88bb      	ldrh	r3, [r7, #4]
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	ddf4      	ble.n	8000b34 <lcdDrawHLine+0x68>
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd90      	pop	{r4, r7, pc}
 8000b54:	20000018 	.word	0x20000018

08000b58 <lcdDrawVLine>:

void lcdDrawVLine(uint16_t x, uint16_t y0, uint16_t y1, uint16_t color)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4604      	mov	r4, r0
 8000b60:	4608      	mov	r0, r1
 8000b62:	4611      	mov	r1, r2
 8000b64:	461a      	mov	r2, r3
 8000b66:	4623      	mov	r3, r4
 8000b68:	80fb      	strh	r3, [r7, #6]
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80bb      	strh	r3, [r7, #4]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	807b      	strh	r3, [r7, #2]
 8000b72:	4613      	mov	r3, r2
 8000b74:	803b      	strh	r3, [r7, #0]
  if (y1 < y0)
 8000b76:	887a      	ldrh	r2, [r7, #2]
 8000b78:	88bb      	ldrh	r3, [r7, #4]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d205      	bcs.n	8000b8a <lcdDrawVLine+0x32>
  {
	  swap(y0, y1);
 8000b7e:	88bb      	ldrh	r3, [r7, #4]
 8000b80:	817b      	strh	r3, [r7, #10]
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	80bb      	strh	r3, [r7, #4]
 8000b86:	897b      	ldrh	r3, [r7, #10]
 8000b88:	807b      	strh	r3, [r7, #2]
  }

  if (x >= lcdProperties.width)
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	88fa      	ldrh	r2, [r7, #6]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d303      	bcc.n	8000b9c <lcdDrawVLine+0x44>
  {
    x = lcdProperties.width - 1;
 8000b94:	4b17      	ldr	r3, [pc, #92]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	80fb      	strh	r3, [r7, #6]
  }

  if (y0 >= lcdProperties.height)
 8000b9c:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000b9e:	885b      	ldrh	r3, [r3, #2]
 8000ba0:	88ba      	ldrh	r2, [r7, #4]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d303      	bcc.n	8000bae <lcdDrawVLine+0x56>
  {
    y0 = lcdProperties.height - 1;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000ba8:	885b      	ldrh	r3, [r3, #2]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	80bb      	strh	r3, [r7, #4]
  }

  if (y1 >= lcdProperties.height)
 8000bae:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000bb0:	885b      	ldrh	r3, [r3, #2]
 8000bb2:	887a      	ldrh	r2, [r7, #2]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d303      	bcc.n	8000bc0 <lcdDrawVLine+0x68>
  {
    y1 = lcdProperties.height - 1;
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000bba:	885b      	ldrh	r3, [r3, #2]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	807b      	strh	r3, [r7, #2]
  }

  lcdSetWindow(x, y0, x, y1);
 8000bc0:	887b      	ldrh	r3, [r7, #2]
 8000bc2:	88fa      	ldrh	r2, [r7, #6]
 8000bc4:	88b9      	ldrh	r1, [r7, #4]
 8000bc6:	88f8      	ldrh	r0, [r7, #6]
 8000bc8:	f000 fa40 	bl	800104c <lcdSetWindow>

  for(int line = y0; line <= y1; line++)
 8000bcc:	88bb      	ldrh	r3, [r7, #4]
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	e006      	b.n	8000be0 <lcdDrawVLine+0x88>
  {
	  lcdWriteData(color);
 8000bd2:	883b      	ldrh	r3, [r7, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fa9f 	bl	8001118 <lcdWriteData>
  for(int line = y0; line <= y1; line++)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	887b      	ldrh	r3, [r7, #2]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	ddf4      	ble.n	8000bd2 <lcdDrawVLine+0x7a>
  }
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd90      	pop	{r4, r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000018 	.word	0x20000018

08000bf8 <lcdDrawRect>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4608      	mov	r0, r1
 8000c02:	4611      	mov	r1, r2
 8000c04:	461a      	mov	r2, r3
 8000c06:	4623      	mov	r3, r4
 8000c08:	80fb      	strh	r3, [r7, #6]
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	80bb      	strh	r3, [r7, #4]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	807b      	strh	r3, [r7, #2]
 8000c12:	4613      	mov	r3, r2
 8000c14:	803b      	strh	r3, [r7, #0]
	lcdDrawHLine(x, x + w - 1, y, color);
 8000c16:	88f8      	ldrh	r0, [r7, #6]
 8000c18:	88fa      	ldrh	r2, [r7, #6]
 8000c1a:	887b      	ldrh	r3, [r7, #2]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	3b01      	subs	r3, #1
 8000c22:	b299      	uxth	r1, r3
 8000c24:	88ba      	ldrh	r2, [r7, #4]
 8000c26:	8b3b      	ldrh	r3, [r7, #24]
 8000c28:	f7ff ff50 	bl	8000acc <lcdDrawHLine>
	lcdDrawHLine(x, x + w - 1, y + h - 1, color);
 8000c2c:	88f8      	ldrh	r0, [r7, #6]
 8000c2e:	88fa      	ldrh	r2, [r7, #6]
 8000c30:	887b      	ldrh	r3, [r7, #2]
 8000c32:	4413      	add	r3, r2
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	3b01      	subs	r3, #1
 8000c38:	b299      	uxth	r1, r3
 8000c3a:	88ba      	ldrh	r2, [r7, #4]
 8000c3c:	883b      	ldrh	r3, [r7, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	3b01      	subs	r3, #1
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	8b3b      	ldrh	r3, [r7, #24]
 8000c48:	f7ff ff40 	bl	8000acc <lcdDrawHLine>
	lcdDrawVLine(x, y, y + h - 1, color);
 8000c4c:	88f8      	ldrh	r0, [r7, #6]
 8000c4e:	88b9      	ldrh	r1, [r7, #4]
 8000c50:	88ba      	ldrh	r2, [r7, #4]
 8000c52:	883b      	ldrh	r3, [r7, #0]
 8000c54:	4413      	add	r3, r2
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	8b3b      	ldrh	r3, [r7, #24]
 8000c5e:	f7ff ff7b 	bl	8000b58 <lcdDrawVLine>
	lcdDrawVLine(x + w - 1, y, y + h - 1, color);
 8000c62:	88fa      	ldrh	r2, [r7, #6]
 8000c64:	887b      	ldrh	r3, [r7, #2]
 8000c66:	4413      	add	r3, r2
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	b298      	uxth	r0, r3
 8000c6e:	88b9      	ldrh	r1, [r7, #4]
 8000c70:	88ba      	ldrh	r2, [r7, #4]
 8000c72:	883b      	ldrh	r3, [r7, #0]
 8000c74:	4413      	add	r3, r2
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	8b3b      	ldrh	r3, [r7, #24]
 8000c7e:	f7ff ff6b 	bl	8000b58 <lcdDrawVLine>
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd90      	pop	{r4, r7, pc}
	...

08000c8c <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4604      	mov	r4, r0
 8000c94:	4608      	mov	r0, r1
 8000c96:	4611      	mov	r1, r2
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	80fb      	strh	r3, [r7, #6]
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80bb      	strh	r3, [r7, #4]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	70fb      	strb	r3, [r7, #3]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cae:	4a4a      	ldr	r2, [pc, #296]	@ (8000dd8 <lcdDrawChar+0x14c>)
 8000cb0:	8812      	ldrh	r2, [r2, #0]
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	f280 808c 	bge.w	8000dd0 <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 8000cb8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cbc:	4a46      	ldr	r2, [pc, #280]	@ (8000dd8 <lcdDrawChar+0x14c>)
 8000cbe:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	f280 8085 	bge.w	8000dd0 <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cca:	4a44      	ldr	r2, [pc, #272]	@ (8000ddc <lcdDrawChar+0x150>)
 8000ccc:	6892      	ldr	r2, [r2, #8]
 8000cce:	8892      	ldrh	r2, [r2, #4]
 8000cd0:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db7c      	blt.n	8000dd0 <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8000cd6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cda:	4a40      	ldr	r2, [pc, #256]	@ (8000ddc <lcdDrawChar+0x150>)
 8000cdc:	6892      	ldr	r2, [r2, #8]
 8000cde:	88d2      	ldrh	r2, [r2, #6]
 8000ce0:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db74      	blt.n	8000dd0 <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8000ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8000ddc <lcdDrawChar+0x150>)
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	88db      	ldrh	r3, [r3, #6]
 8000cec:	08db      	lsrs	r3, r3, #3
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73bb      	strb	r3, [r7, #14]
 8000cfa:	e061      	b.n	8000dc0 <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	733b      	strb	r3, [r7, #12]
 8000d00:	e055      	b.n	8000dae <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8000d02:	4b36      	ldr	r3, [pc, #216]	@ (8000ddc <lcdDrawChar+0x150>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	78fa      	ldrb	r2, [r7, #3]
 8000d0a:	3a20      	subs	r2, #32
 8000d0c:	4933      	ldr	r1, [pc, #204]	@ (8000ddc <lcdDrawChar+0x150>)
 8000d0e:	6889      	ldr	r1, [r1, #8]
 8000d10:	88c9      	ldrh	r1, [r1, #6]
 8000d12:	fb01 f202 	mul.w	r2, r1, r2
 8000d16:	7ab9      	ldrb	r1, [r7, #10]
 8000d18:	fb02 f101 	mul.w	r1, r2, r1
 8000d1c:	7bba      	ldrb	r2, [r7, #14]
 8000d1e:	7ab8      	ldrb	r0, [r7, #10]
 8000d20:	fb00 f202 	mul.w	r2, r0, r2
 8000d24:	4411      	add	r1, r2
 8000d26:	7b3a      	ldrb	r2, [r7, #12]
 8000d28:	440a      	add	r2, r1
 8000d2a:	4413      	add	r3, r2
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	72fb      	strb	r3, [r7, #11]
 8000d34:	e032      	b.n	8000d9c <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 8000d36:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	da12      	bge.n	8000d64 <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 8000d3e:	7afb      	ldrb	r3, [r7, #11]
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	4413      	add	r3, r2
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	4413      	add	r3, r2
 8000d4e:	b298      	uxth	r0, r3
 8000d50:	7bbb      	ldrb	r3, [r7, #14]
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	88bb      	ldrh	r3, [r7, #4]
 8000d56:	4413      	add	r3, r2
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	883a      	ldrh	r2, [r7, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f7ff fe91 	bl	8000a84 <lcdDrawPixel>
 8000d62:	e015      	b.n	8000d90 <lcdDrawChar+0x104>
				}
				else if (bg != color)
 8000d64:	8c3a      	ldrh	r2, [r7, #32]
 8000d66:	883b      	ldrh	r3, [r7, #0]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d011      	beq.n	8000d90 <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 8000d6c:	7afb      	ldrb	r3, [r7, #11]
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	4413      	add	r3, r2
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	4413      	add	r3, r2
 8000d7c:	b298      	uxth	r0, r3
 8000d7e:	7bbb      	ldrb	r3, [r7, #14]
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	88bb      	ldrh	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	8c3a      	ldrh	r2, [r7, #32]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f7ff fe7a 	bl	8000a84 <lcdDrawPixel>
				}
				line <<= 1;
 8000d90:	7b7b      	ldrb	r3, [r7, #13]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 8000d96:	7afb      	ldrb	r3, [r7, #11]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	72fb      	strb	r3, [r7, #11]
 8000d9c:	7afb      	ldrb	r3, [r7, #11]
 8000d9e:	2b07      	cmp	r3, #7
 8000da0:	d9c9      	bls.n	8000d36 <lcdDrawChar+0xaa>
			}

			xP += 8;
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	3308      	adds	r3, #8
 8000da6:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8000da8:	7b3b      	ldrb	r3, [r7, #12]
 8000daa:	3301      	adds	r3, #1
 8000dac:	733b      	strb	r3, [r7, #12]
 8000dae:	7b3a      	ldrb	r2, [r7, #12]
 8000db0:	7abb      	ldrb	r3, [r7, #10]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d3a5      	bcc.n	8000d02 <lcdDrawChar+0x76>
		}

		xP = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000dba:	7bbb      	ldrb	r3, [r7, #14]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	73bb      	strb	r3, [r7, #14]
 8000dc0:	7bbb      	ldrb	r3, [r7, #14]
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <lcdDrawChar+0x150>)
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	88db      	ldrh	r3, [r3, #6]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d396      	bcc.n	8000cfc <lcdDrawChar+0x70>
 8000dce:	e000      	b.n	8000dd2 <lcdDrawChar+0x146>
		return;
 8000dd0:	bf00      	nop
	}
}
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd90      	pop	{r4, r7, pc}
 8000dd8:	20000018 	.word	0x20000018
 8000ddc:	20000020 	.word	0x20000020

08000de0 <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8000de0:	b40f      	push	{r0, r1, r2, r3}
 8000de2:	b590      	push	{r4, r7, lr}
 8000de4:	b085      	sub	sp, #20
 8000de6:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	69b9      	ldr	r1, [r7, #24]
 8000df2:	483d      	ldr	r0, [pc, #244]	@ (8000ee8 <lcdPrintf+0x108>)
 8000df4:	f00e f8b2 	bl	800ef5c <vsiprintf>
	va_end(lst);

	p = buf;
 8000df8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee8 <lcdPrintf+0x108>)
 8000dfa:	607b      	str	r3, [r7, #4]
	while (*p)
 8000dfc:	e067      	b.n	8000ece <lcdPrintf+0xee>
	{
		if (*p == '\n')
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b0a      	cmp	r3, #10
 8000e04:	d10c      	bne.n	8000e20 <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 8000e06:	4b39      	ldr	r3, [pc, #228]	@ (8000eec <lcdPrintf+0x10c>)
 8000e08:	885a      	ldrh	r2, [r3, #2]
 8000e0a:	4b39      	ldr	r3, [pc, #228]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	88db      	ldrh	r3, [r3, #6]
 8000e10:	4413      	add	r3, r2
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	4b35      	ldr	r3, [pc, #212]	@ (8000eec <lcdPrintf+0x10c>)
 8000e16:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 8000e18:	4b34      	ldr	r3, [pc, #208]	@ (8000eec <lcdPrintf+0x10c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	801a      	strh	r2, [r3, #0]
 8000e1e:	e04a      	b.n	8000eb6 <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b0d      	cmp	r3, #13
 8000e26:	d046      	beq.n	8000eb6 <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b09      	cmp	r3, #9
 8000e2e:	d10b      	bne.n	8000e48 <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 8000e30:	4b2e      	ldr	r3, [pc, #184]	@ (8000eec <lcdPrintf+0x10c>)
 8000e32:	881a      	ldrh	r2, [r3, #0]
 8000e34:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	889b      	ldrh	r3, [r3, #4]
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	4413      	add	r3, r2
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	4b2a      	ldr	r3, [pc, #168]	@ (8000eec <lcdPrintf+0x10c>)
 8000e44:	801a      	strh	r2, [r3, #0]
 8000e46:	e036      	b.n	8000eb6 <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8000e48:	4b28      	ldr	r3, [pc, #160]	@ (8000eec <lcdPrintf+0x10c>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	b218      	sxth	r0, r3
 8000e4e:	4b27      	ldr	r3, [pc, #156]	@ (8000eec <lcdPrintf+0x10c>)
 8000e50:	885b      	ldrh	r3, [r3, #2]
 8000e52:	b219      	sxth	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	781a      	ldrb	r2, [r3, #0]
 8000e58:	4b25      	ldr	r3, [pc, #148]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	b29c      	uxth	r4, r3
 8000e5e:	4b24      	ldr	r3, [pc, #144]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	4623      	mov	r3, r4
 8000e68:	f7ff ff10 	bl	8000c8c <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <lcdPrintf+0x10c>)
 8000e6e:	881a      	ldrh	r2, [r3, #0]
 8000e70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	889b      	ldrh	r3, [r3, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <lcdPrintf+0x10c>)
 8000e7c:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e80:	7b1b      	ldrb	r3, [r3, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d017      	beq.n	8000eb6 <lcdPrintf+0xd6>
 8000e86:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <lcdPrintf+0x10c>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <lcdPrintf+0x114>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	889b      	ldrh	r3, [r3, #4]
 8000e98:	1acb      	subs	r3, r1, r3
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	dd0b      	ble.n	8000eb6 <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8000e9e:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <lcdPrintf+0x10c>)
 8000ea0:	885a      	ldrh	r2, [r3, #2]
 8000ea2:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <lcdPrintf+0x110>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	88db      	ldrh	r3, [r3, #6]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <lcdPrintf+0x10c>)
 8000eae:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <lcdPrintf+0x10c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <lcdPrintf+0x10c>)
 8000ebe:	885a      	ldrh	r2, [r3, #2]
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <lcdPrintf+0x114>)
 8000ec2:	885b      	ldrh	r3, [r3, #2]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d302      	bcc.n	8000ece <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <lcdPrintf+0x10c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	805a      	strh	r2, [r3, #2]
	while (*p)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d193      	bne.n	8000dfe <lcdPrintf+0x1e>
		}
	}
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ee2:	b004      	add	sp, #16
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000340 	.word	0x20000340
 8000eec:	20000338 	.word	0x20000338
 8000ef0:	20000020 	.word	0x20000020
 8000ef4:	20000018 	.word	0x20000018

08000ef8 <lcdSetTextFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8000f00:	4a04      	ldr	r2, [pc, #16]	@ (8000f14 <lcdSetTextFont+0x1c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6093      	str	r3, [r2, #8]
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000020 	.word	0x20000020

08000f18 <lcdSetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	460a      	mov	r2, r1
 8000f22:	80fb      	strh	r3, [r7, #6]
 8000f24:	4613      	mov	r3, r2
 8000f26:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	4a05      	ldr	r2, [pc, #20]	@ (8000f40 <lcdSetTextColor+0x28>)
 8000f2c:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8000f2e:	88bb      	ldrh	r3, [r7, #4]
 8000f30:	4a03      	ldr	r2, [pc, #12]	@ (8000f40 <lcdSetTextColor+0x28>)
 8000f32:	6053      	str	r3, [r2, #4]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	20000020 	.word	0x20000020

08000f44 <lcdSetOrientation>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 8000f4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 8000f54:	2036      	movs	r0, #54	@ 0x36
 8000f56:	f000 f8cf 	bl	80010f8 <lcdWriteCommand>

	switch (lcdProperties.orientation)
 8000f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f5c:	791b      	ldrb	r3, [r3, #4]
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d83e      	bhi.n	8000fe0 <lcdSetOrientation+0x9c>
 8000f62:	a201      	add	r2, pc, #4	@ (adr r2, 8000f68 <lcdSetOrientation+0x24>)
 8000f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f68:	08000f79 	.word	0x08000f79
 8000f6c:	08000fad 	.word	0x08000fad
 8000f70:	08000f93 	.word	0x08000f93
 8000f74:	08000fc7 	.word	0x08000fc7
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 8000f78:	4b23      	ldr	r3, [pc, #140]	@ (8001008 <lcdSetOrientation+0xc4>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f8cb 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8000f82:	4b20      	ldr	r3, [pc, #128]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f84:	22f0      	movs	r2, #240	@ 0xf0
 8000f86:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8000f88:	4b1e      	ldr	r3, [pc, #120]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f8a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000f8e:	805a      	strh	r2, [r3, #2]
			break;
 8000f90:	e027      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 8000f92:	4b1e      	ldr	r3, [pc, #120]	@ (800100c <lcdSetOrientation+0xc8>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f8be 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f9e:	22f0      	movs	r2, #240	@ 0xf0
 8000fa0:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fa4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fa8:	805a      	strh	r2, [r3, #2]
			break;
 8000faa:	e01a      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8000fac:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <lcdSetOrientation+0xcc>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 f8b1 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fb8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fbc:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fc0:	22f0      	movs	r2, #240	@ 0xf0
 8000fc2:	805a      	strh	r2, [r3, #2]
			break;
 8000fc4:	e00d      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 8000fc6:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <lcdSetOrientation+0xd0>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f8a4 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fd2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fd6:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fda:	22f0      	movs	r2, #240	@ 0xf0
 8000fdc:	805a      	strh	r2, [r3, #2]
			break;
 8000fde:	e000      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		default:
			break;
 8000fe0:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8000fe2:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fec:	885b      	ldrh	r3, [r3, #2]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 f829 	bl	800104c <lcdSetWindow>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000018 	.word	0x20000018
 8001008:	2000033c 	.word	0x2000033c
 800100c:	2000033e 	.word	0x2000033e
 8001010:	2000033d 	.word	0x2000033d
 8001014:	2000033f 	.word	0x2000033f

08001018 <lcdSetCursor>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	460a      	mov	r2, r1
 8001022:	80fb      	strh	r3, [r7, #6]
 8001024:	4613      	mov	r3, r2
 8001026:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8001028:	4a07      	ldr	r2, [pc, #28]	@ (8001048 <lcdSetCursor+0x30>)
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 800102e:	4a06      	ldr	r2, [pc, #24]	@ (8001048 <lcdSetCursor+0x30>)
 8001030:	88bb      	ldrh	r3, [r7, #4]
 8001032:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 8001034:	88bb      	ldrh	r3, [r7, #4]
 8001036:	88fa      	ldrh	r2, [r7, #6]
 8001038:	88b9      	ldrh	r1, [r7, #4]
 800103a:	88f8      	ldrh	r0, [r7, #6]
 800103c:	f000 f806 	bl	800104c <lcdSetWindow>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000338 	.word	0x20000338

0800104c <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4604      	mov	r4, r0
 8001054:	4608      	mov	r0, r1
 8001056:	4611      	mov	r1, r2
 8001058:	461a      	mov	r2, r3
 800105a:	4623      	mov	r3, r4
 800105c:	80fb      	strh	r3, [r7, #6]
 800105e:	4603      	mov	r3, r0
 8001060:	80bb      	strh	r3, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	807b      	strh	r3, [r7, #2]
 8001066:	4613      	mov	r3, r2
 8001068:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 800106a:	202a      	movs	r0, #42	@ 0x2a
 800106c:	f000 f844 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	b29b      	uxth	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f84e 	bl	8001118 <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	b29b      	uxth	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f848 	bl	8001118 <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 8001088:	887b      	ldrh	r3, [r7, #2]
 800108a:	0a1b      	lsrs	r3, r3, #8
 800108c:	b29b      	uxth	r3, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f842 	bl	8001118 <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	b29b      	uxth	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f83c 	bl	8001118 <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80010a0:	202b      	movs	r0, #43	@ 0x2b
 80010a2:	f000 f829 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 80010a6:	88bb      	ldrh	r3, [r7, #4]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f833 	bl	8001118 <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 f82d 	bl	8001118 <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 80010be:	883b      	ldrh	r3, [r7, #0]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 f827 	bl	8001118 <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 80010ca:	883b      	ldrh	r3, [r7, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f821 	bl	8001118 <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 80010d6:	202c      	movs	r0, #44	@ 0x2c
 80010d8:	f000 f80e 	bl	80010f8 <lcdWriteCommand>
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd90      	pop	{r4, r7, pc}

080010e4 <lcdReset>:
  }
  while (i < dataLength);
}

static void lcdReset(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 80010e8:	2001      	movs	r0, #1
 80010ea:	f000 f805 	bl	80010f8 <lcdWriteCommand>
	HAL_Delay(50);
 80010ee:	2032      	movs	r0, #50	@ 0x32
 80010f0:	f003 fa2e 	bl	8004550 <HAL_Delay>
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 8001102:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8001106:	79fa      	ldrb	r2, [r7, #7]
 8001108:	b292      	uxth	r2, r2
 800110a:	801a      	strh	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 8001122:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <lcdWriteData+0x1c>)
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	8013      	strh	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	60020000 	.word	0x60020000

08001138 <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 8001138:	b490      	push	{r4, r7}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	4604      	mov	r4, r0
 8001140:	4608      	mov	r0, r1
 8001142:	4611      	mov	r1, r2
 8001144:	461a      	mov	r2, r3
 8001146:	4623      	mov	r3, r4
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	4603      	mov	r3, r0
 800114c:	71bb      	strb	r3, [r7, #6]
 800114e:	460b      	mov	r3, r1
 8001150:	717b      	strb	r3, [r7, #5]
 8001152:	4613      	mov	r3, r2
 8001154:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 800115a:	7f3b      	ldrb	r3, [r7, #28]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <lcdBuildMemoryAccessControlConfig+0x30>
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8001168:	7e3b      	ldrb	r3, [r7, #24]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <lcdBuildMemoryAccessControlConfig+0x3e>
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 8001176:	793b      	ldrb	r3, [r7, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <lcdBuildMemoryAccessControlConfig+0x4c>
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	f043 0310 	orr.w	r3, r3, #16
 8001182:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 8001184:	797b      	ldrb	r3, [r7, #5]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <lcdBuildMemoryAccessControlConfig+0x5a>
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	f043 0320 	orr.w	r3, r3, #32
 8001190:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <lcdBuildMemoryAccessControlConfig+0x68>
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800119e:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <lcdBuildMemoryAccessControlConfig+0x76>
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011ac:	73fb      	strb	r3, [r7, #15]
  return value;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc90      	pop	{r4, r7}
 80011b8:	4770      	bx	lr

080011ba <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011c2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011c6:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d013      	beq.n	80011fa <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80011d2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011d6:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80011da:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00b      	beq.n	80011fa <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80011e2:	e000      	b.n	80011e6 <ITM_SendChar+0x2c>
    {
      __NOP();
 80011e4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80011e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f9      	beq.n	80011e4 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80011f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80011fa:	687b      	ldr	r3, [r7, #4]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <_write>:
uint8_t handleTouch();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	e009      	b.n	800122e <_write+0x26>
		ITM_SendChar((*ptr++));  // Send the character via ITM
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1c5a      	adds	r2, r3, #1
 800121e:	60ba      	str	r2, [r7, #8]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ffc9 	bl	80011ba <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	3301      	adds	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	429a      	cmp	r2, r3
 8001234:	dbf1      	blt.n	800121a <_write+0x12>
	}
	return len;
 8001236:	687b      	ldr	r3, [r7, #4]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <USBH_HID_EventCallback>:
static uint8_t USB_BUSY = 0;
char qr_code_data[MAX_LINES][MAX_LINE_LENGTH] = { { '\0' } }; //static initializes strings with all null characters
HID_KEYBD_Info_TypeDef *Keyboard_Info;

/***DORJEE YOU HAVE TO CHANGE USBH_HID.H WHEN YOU GENERATE CODE****/
void USBH_HID_EventCallback(USBH_HandleTypeDef *phost) { //2.6s for 54 lines
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	Keyboard_Info = USBH_HID_GetKeybdInfo(phost);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f00b f805 	bl	800c258 <USBH_HID_GetKeybdInfo>
 800124e:	4603      	mov	r3, r0
 8001250:	4a47      	ldr	r2, [pc, #284]	@ (8001370 <USBH_HID_EventCallback+0x130>)
 8001252:	6013      	str	r3, [r2, #0]
	char key = USBH_HID_GetASCIICode(Keyboard_Info);
 8001254:	4b46      	ldr	r3, [pc, #280]	@ (8001370 <USBH_HID_EventCallback+0x130>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f00b f8a5 	bl	800c3a8 <USBH_HID_GetASCIICode>
 800125e:	4603      	mov	r3, r0
 8001260:	72fb      	strb	r3, [r7, #11]
	printf("%c\n", key);
 8001262:	7afb      	ldrb	r3, [r7, #11]
 8001264:	4619      	mov	r1, r3
 8001266:	4843      	ldr	r0, [pc, #268]	@ (8001374 <USBH_HID_EventCallback+0x134>)
 8001268:	f00d fd86 	bl	800ed78 <iprintf>
	//disable the touchscreen interrupt functionality when usb transmission starts
	//after tab it calls itself one more time, so disable after i=0
	if (i == 1) {
 800126c:	4b42      	ldr	r3, [pc, #264]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d102      	bne.n	800127a <USBH_HID_EventCallback+0x3a>
		USB_BUSY = 1;
 8001274:	4b41      	ldr	r3, [pc, #260]	@ (800137c <USBH_HID_EventCallback+0x13c>)
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
	}

	//store incoming chars. ignore null characters that come in for some reason
	if ((key != NULL_CHAR) && (key != SOH)) {
 800127a:	7afb      	ldrb	r3, [r7, #11]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d011      	beq.n	80012a4 <USBH_HID_EventCallback+0x64>
 8001280:	7afb      	ldrb	r3, [r7, #11]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d00e      	beq.n	80012a4 <USBH_HID_EventCallback+0x64>
		qr_code_data[i][j] = key;
 8001286:	4b3c      	ldr	r3, [pc, #240]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b3d      	ldr	r3, [pc, #244]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	493d      	ldr	r1, [pc, #244]	@ (8001384 <USBH_HID_EventCallback+0x144>)
 8001290:	0152      	lsls	r2, r2, #5
 8001292:	440a      	add	r2, r1
 8001294:	4413      	add	r3, r2
 8001296:	7afa      	ldrb	r2, [r7, #11]
 8001298:	701a      	strb	r2, [r3, #0]
		j++;
 800129a:	4b39      	ldr	r3, [pc, #228]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	4a37      	ldr	r2, [pc, #220]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 80012a2:	6013      	str	r3, [r2, #0]
	}
	//handle new line
	if (key == NEWLINE_CHAR) {
 80012a4:	7afb      	ldrb	r3, [r7, #11]
 80012a6:	2b0a      	cmp	r3, #10
 80012a8:	d107      	bne.n	80012ba <USBH_HID_EventCallback+0x7a>
		j = 0;
 80012aa:	4b35      	ldr	r3, [pc, #212]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
		i++;
 80012b0:	4b31      	ldr	r3, [pc, #196]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	4a30      	ldr	r2, [pc, #192]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 80012b8:	6013      	str	r3, [r2, #0]
	}
	//tab is the end of the qr code
	if (key == TAB) {
 80012ba:	7afb      	ldrb	r3, [r7, #11]
 80012bc:	2b09      	cmp	r3, #9
 80012be:	d152      	bne.n	8001366 <USBH_HID_EventCallback+0x126>
		for (int a = 0; a < 15; a++) {
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	e002      	b.n	80012cc <USBH_HID_EventCallback+0x8c>
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3301      	adds	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	2b0e      	cmp	r3, #14
 80012d0:	ddf9      	ble.n	80012c6 <USBH_HID_EventCallback+0x86>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d2:	b672      	cpsid	i
}
 80012d4:	bf00      	nop
			//printf("%s", qr_code_data[a]);
		}
		__disable_irq();
		//output_protocol(qr_code_data, i + 1);
		//check if the title is (10 chars + newline char) or less
		if (strlen(qr_code_data[0]) < (MAX_TITLE_SIZE + 1)) {
 80012d6:	482b      	ldr	r0, [pc, #172]	@ (8001384 <USBH_HID_EventCallback+0x144>)
 80012d8:	f7fe ff8a 	bl	80001f0 <strlen>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b0e      	cmp	r3, #14
 80012e0:	d83b      	bhi.n	800135a <USBH_HID_EventCallback+0x11a>
			uint8_t freeSectorNumber = getFreeSector();
 80012e2:	f002 faab 	bl	800383c <getFreeSector>
 80012e6:	4603      	mov	r3, r0
 80012e8:	72bb      	strb	r3, [r7, #10]
			//printf("free sector is %d\n", freeSectorNumber);
			//only store the protocol if all memory isnt full
			if (freeSectorNumber <= 10) { //i only got 10 pages rn
 80012ea:	7abb      	ldrb	r3, [r7, #10]
 80012ec:	2b0a      	cmp	r3, #10
 80012ee:	d82a      	bhi.n	8001346 <USBH_HID_EventCallback+0x106>
				//printf("why\n");
				storeProtocol(qr_code_data, freeSectorNumber);
 80012f0:	7abb      	ldrb	r3, [r7, #10]
 80012f2:	4619      	mov	r1, r3
 80012f4:	4823      	ldr	r0, [pc, #140]	@ (8001384 <USBH_HID_EventCallback+0x144>)
 80012f6:	f002 f8db 	bl	80034b0 <storeProtocol>
				//go to the page num the new protocol is on
				page_num = freeSectorNumber;
 80012fa:	4a23      	ldr	r2, [pc, #140]	@ (8001388 <USBH_HID_EventCallback+0x148>)
 80012fc:	7abb      	ldrb	r3, [r7, #10]
 80012fe:	7013      	strb	r3, [r2, #0]
				DrawMainPage(page_num);
 8001300:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <USBH_HID_EventCallback+0x148>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fb8f 	bl	8001a28 <DrawMainPage>
				currentPage = PAGE_MAIN;
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <USBH_HID_EventCallback+0x14c>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < MAX_LINES; a++) {
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	e013      	b.n	800133e <USBH_HID_EventCallback+0xfe>
					for (int b = 0; b < MAX_LINE_LENGTH; b++) {
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	e00a      	b.n	8001332 <USBH_HID_EventCallback+0xf2>
						qr_code_data[a][b] = '\0';
 800131c:	4a19      	ldr	r2, [pc, #100]	@ (8001384 <USBH_HID_EventCallback+0x144>)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	015b      	lsls	r3, r3, #5
 8001322:	441a      	add	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
					for (int b = 0; b < MAX_LINE_LENGTH; b++) {
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3301      	adds	r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b1f      	cmp	r3, #31
 8001336:	ddf1      	ble.n	800131c <USBH_HID_EventCallback+0xdc>
				for (int a = 0; a < MAX_LINES; a++) {
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	3301      	adds	r3, #1
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	2bc7      	cmp	r3, #199	@ 0xc7
 8001342:	dde8      	ble.n	8001316 <USBH_HID_EventCallback+0xd6>
 8001344:	e004      	b.n	8001350 <USBH_HID_EventCallback+0x110>
					}
				}
			} else {
				DrawQueuePage(queueSize);
 8001346:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <USBH_HID_EventCallback+0x150>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f000 fe8e 	bl	800206c <DrawQueuePage>
  __ASM volatile ("cpsie i" : : : "memory");
 8001350:	b662      	cpsie	i
}
 8001352:	bf00      	nop
			}
			__enable_irq();
			USB_BUSY = 0;
 8001354:	4b09      	ldr	r3, [pc, #36]	@ (800137c <USBH_HID_EventCallback+0x13c>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
		}
		i = 0;
 800135a:	4b07      	ldr	r3, [pc, #28]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
		j = 0;
 8001360:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
	}

}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200118b8 	.word	0x200118b8
 8001374:	0800fe40 	.word	0x0800fe40
 8001378:	200005ac 	.word	0x200005ac
 800137c:	2000ffb5 	.word	0x2000ffb5
 8001380:	200005b0 	.word	0x200005b0
 8001384:	2000ffb8 	.word	0x2000ffb8
 8001388:	20000293 	.word	0x20000293
 800138c:	20000570 	.word	0x20000570
 8001390:	2000ffb4 	.word	0x2000ffb4

08001394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139a:	f003 f867 	bl	800446c <HAL_Init>
//	HAL_Delay(50);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139e:	f000 f907 	bl	80015b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a2:	f000 fa77 	bl	8001894 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 80013a6:	f00c ffd5 	bl	800e354 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80013aa:	f000 fa49 	bl	8001840 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80013ae:	f000 f9ef 	bl	8001790 <MX_TIM3_Init>
  MX_TIM2_Init();
 80013b2:	f000 f99f 	bl	80016f4 <MX_TIM2_Init>
  MX_SPI1_Init();
 80013b6:	f000 f965 	bl	8001684 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	printf("start program\n");
 80013ba:	486e      	ldr	r0, [pc, #440]	@ (8001574 <main+0x1e0>)
 80013bc:	f00d fd4c 	bl	800ee58 <puts>
//  	erase_sector(6);
//  	erase_sector(7);
//  	erase_sector(8);
//  	erase_sector(9);
//  	erase_sector(10);
	HAL_GPIO_WritePin(LCD_NRST_GPIO_Port, LCD_NRST_Pin, GPIO_PIN_SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	2140      	movs	r1, #64	@ 0x40
 80013c4:	486c      	ldr	r0, [pc, #432]	@ (8001578 <main+0x1e4>)
 80013c6:	f003 fe63 	bl	8005090 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80013ca:	2032      	movs	r0, #50	@ 0x32
 80013cc:	f003 f8c0 	bl	8004550 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_NRST_GPIO_Port, LCD_NRST_Pin, GPIO_PIN_SET);
 80013d0:	2201      	movs	r2, #1
 80013d2:	2140      	movs	r1, #64	@ 0x40
 80013d4:	4868      	ldr	r0, [pc, #416]	@ (8001578 <main+0x1e4>)
 80013d6:	f003 fe5b 	bl	8005090 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80013da:	2032      	movs	r0, #50	@ 0x32
 80013dc:	f003 f8b8 	bl	8004550 <HAL_Delay>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80013e0:	2104      	movs	r1, #4
 80013e2:	4866      	ldr	r0, [pc, #408]	@ (800157c <main+0x1e8>)
 80013e4:	f007 f9e0 	bl	80087a8 <HAL_TIM_PWM_Start>
	htim3.Instance->CCR2 = 50;
 80013e8:	4b64      	ldr	r3, [pc, #400]	@ (800157c <main+0x1e8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2232      	movs	r2, #50	@ 0x32
 80013ee:	639a      	str	r2, [r3, #56]	@ 0x38

	lcdInit();
 80013f0:	f7ff f9aa 	bl	8000748 <lcdInit>
	//lcdTest();
	lcdSetOrientation(LCD_ORIENTATION_LANDSCAPE);
 80013f4:	2001      	movs	r0, #1
 80013f6:	f7ff fda5 	bl	8000f44 <lcdSetOrientation>
	DrawMainPage(1);
 80013fa:	2001      	movs	r0, #1
 80013fc:	f000 fb14 	bl	8001a28 <DrawMainPage>

	HAL_GPIO_WritePin(OTG_FS_PSO_GPIO_Port, OTG_FS_PSO_Pin, GPIO_PIN_RESET); //turn fan on
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001406:	485e      	ldr	r0, [pc, #376]	@ (8001580 <main+0x1ec>)
 8001408:	f003 fe42 	bl	8005090 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800140c:	f00c ffc8 	bl	800e3a0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

		if (touchFlag) {
 8001410:	4b5c      	ldr	r3, [pc, #368]	@ (8001584 <main+0x1f0>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00a      	beq.n	800142e <main+0x9a>
			printf("touced\n");
 8001418:	485b      	ldr	r0, [pc, #364]	@ (8001588 <main+0x1f4>)
 800141a:	f00d fd1d 	bl	800ee58 <puts>
			handleTouch();
 800141e:	f001 fb69 	bl	8002af4 <handleTouch>
			touchFlag = 0;
 8001422:	4b58      	ldr	r3, [pc, #352]	@ (8001584 <main+0x1f0>)
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 8001428:	2064      	movs	r0, #100	@ 0x64
 800142a:	f003 f891 	bl	8004550 <HAL_Delay>
		}
		if (currentPage == PAGE_PROGRESS) {
 800142e:	4b57      	ldr	r3, [pc, #348]	@ (800158c <main+0x1f8>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b05      	cmp	r3, #5
 8001434:	d1ea      	bne.n	800140c <main+0x78>
			//when protocol finishes naturally, it will send a done signal

			if (HAL_UART_Receive(&huart2, &rx_byte, 1, 0) == HAL_OK) {
 8001436:	2300      	movs	r3, #0
 8001438:	2201      	movs	r2, #1
 800143a:	4955      	ldr	r1, [pc, #340]	@ (8001590 <main+0x1fc>)
 800143c:	4855      	ldr	r0, [pc, #340]	@ (8001594 <main+0x200>)
 800143e:	f008 f878 	bl	8009532 <HAL_UART_Receive>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1e1      	bne.n	800140c <main+0x78>
				//protocol starts, get the protocl title
				if (rx_byte == 'T') {
 8001448:	4b51      	ldr	r3, [pc, #324]	@ (8001590 <main+0x1fc>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b54      	cmp	r3, #84	@ 0x54
 800144e:	d111      	bne.n	8001474 <main+0xe0>
					memset(currentProtocolTitle, 0, MAX_LINE_LENGTH);
 8001450:	2220      	movs	r2, #32
 8001452:	2100      	movs	r1, #0
 8001454:	4850      	ldr	r0, [pc, #320]	@ (8001598 <main+0x204>)
 8001456:	f00d fe1f 	bl	800f098 <memset>
					HAL_UART_Receive(&huart2, (uint8_t*) currentProtocolTitle,
 800145a:	2364      	movs	r3, #100	@ 0x64
 800145c:	2214      	movs	r2, #20
 800145e:	494e      	ldr	r1, [pc, #312]	@ (8001598 <main+0x204>)
 8001460:	484c      	ldr	r0, [pc, #304]	@ (8001594 <main+0x200>)
 8001462:	f008 f866 	bl	8009532 <HAL_UART_Receive>
							sizeof(currentProtocolTitle), 100);
					DrawProgressPage("FILL", rx_byte, rx_data);
 8001466:	4b4a      	ldr	r3, [pc, #296]	@ (8001590 <main+0x1fc>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	4a4c      	ldr	r2, [pc, #304]	@ (800159c <main+0x208>)
 800146c:	4619      	mov	r1, r3
 800146e:	484c      	ldr	r0, [pc, #304]	@ (80015a0 <main+0x20c>)
 8001470:	f000 fee6 	bl	8002240 <DrawProgressPage>
				}
				//repeat update
				if (rx_byte == 'R') {
 8001474:	4b46      	ldr	r3, [pc, #280]	@ (8001590 <main+0x1fc>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b52      	cmp	r3, #82	@ 0x52
 800147a:	d139      	bne.n	80014f0 <main+0x15c>
					char repeatUpdate[2];
					HAL_UART_Receive(&huart2, (uint8_t*) repeatUpdate,
 800147c:	f107 0118 	add.w	r1, r7, #24
 8001480:	2364      	movs	r3, #100	@ 0x64
 8001482:	2202      	movs	r2, #2
 8001484:	4843      	ldr	r0, [pc, #268]	@ (8001594 <main+0x200>)
 8001486:	f008 f854 	bl	8009532 <HAL_UART_Receive>
							sizeof(repeatUpdate), 100);
					currentRepeatNum = atoi(repeatUpdate);
 800148a:	f107 0318 	add.w	r3, r7, #24
 800148e:	4618      	mov	r0, r3
 8001490:	f00d fa6a 	bl	800e968 <atoi>
 8001494:	4603      	mov	r3, r0
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b42      	ldr	r3, [pc, #264]	@ (80015a4 <main+0x210>)
 800149a:	701a      	strb	r2, [r3, #0]
					printf("%d\n", currentRepeatNum);
 800149c:	4b41      	ldr	r3, [pc, #260]	@ (80015a4 <main+0x210>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	4619      	mov	r1, r3
 80014a4:	4840      	ldr	r0, [pc, #256]	@ (80015a8 <main+0x214>)
 80014a6:	f00d fc67 	bl	800ed78 <iprintf>
					//repeat
					char repeat[20] = "";
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	f107 0308 	add.w	r3, r7, #8
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
					uint32_t repeatInt = ConvertCharsToInt('0', rx_data[12],
 80014bc:	4b37      	ldr	r3, [pc, #220]	@ (800159c <main+0x208>)
 80014be:	7b1b      	ldrb	r3, [r3, #12]
 80014c0:	4a36      	ldr	r2, [pc, #216]	@ (800159c <main+0x208>)
 80014c2:	7b52      	ldrb	r2, [r2, #13]
 80014c4:	4619      	mov	r1, r3
 80014c6:	2030      	movs	r0, #48	@ 0x30
 80014c8:	f001 f9f6 	bl	80028b8 <ConvertCharsToInt>
 80014cc:	61f8      	str	r0, [r7, #28]
							rx_data[13]);
					//sprintf(repeat, "Repeat: %c%c", rx_data[11], rx_data[12]);
					sprintf(repeat, "Repeat: %d/%d", currentRepeatNum,
 80014ce:	4b35      	ldr	r3, [pc, #212]	@ (80015a4 <main+0x210>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	1d38      	adds	r0, r7, #4
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	4934      	ldr	r1, [pc, #208]	@ (80015ac <main+0x218>)
 80014dc:	f00d fcc4 	bl	800ee68 <siprintf>
							repeatInt);
					lcdSetCursor(10, 150);
 80014e0:	2196      	movs	r1, #150	@ 0x96
 80014e2:	200a      	movs	r0, #10
 80014e4:	f7ff fd98 	bl	8001018 <lcdSetCursor>
					lcdPrintf(repeat);
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fc78 	bl	8000de0 <lcdPrintf>
				}
				//protocol starts, update progress screen
				if (rx_byte == 'B') {
 80014f0:	4b27      	ldr	r3, [pc, #156]	@ (8001590 <main+0x1fc>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b42      	cmp	r3, #66	@ 0x42
 80014f6:	d10f      	bne.n	8001518 <main+0x184>
					currentRepeatNum = 1;
 80014f8:	4b2a      	ldr	r3, [pc, #168]	@ (80015a4 <main+0x210>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive(&huart2, (uint8_t*) rx_data,
 80014fe:	2364      	movs	r3, #100	@ 0x64
 8001500:	2214      	movs	r2, #20
 8001502:	4926      	ldr	r1, [pc, #152]	@ (800159c <main+0x208>)
 8001504:	4823      	ldr	r0, [pc, #140]	@ (8001594 <main+0x200>)
 8001506:	f008 f814 	bl	8009532 <HAL_UART_Receive>
							sizeof(rx_data), 100);
					DrawProgressPage("FILL", rx_byte, rx_data);
 800150a:	4b21      	ldr	r3, [pc, #132]	@ (8001590 <main+0x1fc>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	4a23      	ldr	r2, [pc, #140]	@ (800159c <main+0x208>)
 8001510:	4619      	mov	r1, r3
 8001512:	4823      	ldr	r0, [pc, #140]	@ (80015a0 <main+0x20c>)
 8001514:	f000 fe94 	bl	8002240 <DrawProgressPage>
				}
				if (rx_byte == 'M') {
 8001518:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <main+0x1fc>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b4d      	cmp	r3, #77	@ 0x4d
 800151e:	d10c      	bne.n	800153a <main+0x1a6>
					HAL_UART_Receive(&huart2, (uint8_t*) rx_data,
 8001520:	2364      	movs	r3, #100	@ 0x64
 8001522:	2214      	movs	r2, #20
 8001524:	491d      	ldr	r1, [pc, #116]	@ (800159c <main+0x208>)
 8001526:	481b      	ldr	r0, [pc, #108]	@ (8001594 <main+0x200>)
 8001528:	f008 f803 	bl	8009532 <HAL_UART_Receive>
							sizeof(rx_data), 100);
					DrawProgressPage("FILL", rx_byte, rx_data);
 800152c:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <main+0x1fc>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4a1a      	ldr	r2, [pc, #104]	@ (800159c <main+0x208>)
 8001532:	4619      	mov	r1, r3
 8001534:	481a      	ldr	r0, [pc, #104]	@ (80015a0 <main+0x20c>)
 8001536:	f000 fe83 	bl	8002240 <DrawProgressPage>
				}
				if (rx_byte == 'P') {
 800153a:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <main+0x1fc>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b50      	cmp	r3, #80	@ 0x50
 8001540:	d10c      	bne.n	800155c <main+0x1c8>
					HAL_UART_Receive(&huart2, (uint8_t*) rx_data,
 8001542:	2364      	movs	r3, #100	@ 0x64
 8001544:	2214      	movs	r2, #20
 8001546:	4915      	ldr	r1, [pc, #84]	@ (800159c <main+0x208>)
 8001548:	4812      	ldr	r0, [pc, #72]	@ (8001594 <main+0x200>)
 800154a:	f007 fff2 	bl	8009532 <HAL_UART_Receive>
							sizeof(rx_data), 100);
					DrawProgressPage("FILL", rx_byte, rx_data);
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <main+0x1fc>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	4a12      	ldr	r2, [pc, #72]	@ (800159c <main+0x208>)
 8001554:	4619      	mov	r1, r3
 8001556:	4812      	ldr	r0, [pc, #72]	@ (80015a0 <main+0x20c>)
 8001558:	f000 fe72 	bl	8002240 <DrawProgressPage>
				}

				//protocol finishes
				if (rx_byte == 'D') {
 800155c:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <main+0x1fc>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b44      	cmp	r3, #68	@ 0x44
 8001562:	f47f af53 	bne.w	800140c <main+0x78>
					//go to success page
					currentPage = PAGE_FINISH;
 8001566:	4b09      	ldr	r3, [pc, #36]	@ (800158c <main+0x1f8>)
 8001568:	2204      	movs	r2, #4
 800156a:	701a      	strb	r2, [r3, #0]
					DrawPageFinish();
 800156c:	f001 fa80 	bl	8002a70 <DrawPageFinish>
    MX_USB_HOST_Process();
 8001570:	e74c      	b.n	800140c <main+0x78>
 8001572:	bf00      	nop
 8001574:	0800fe44 	.word	0x0800fe44
 8001578:	40020c00 	.word	0x40020c00
 800157c:	200004e0 	.word	0x200004e0
 8001580:	40020400 	.word	0x40020400
 8001584:	200005a8 	.word	0x200005a8
 8001588:	0800fe54 	.word	0x0800fe54
 800158c:	20000570 	.word	0x20000570
 8001590:	20000578 	.word	0x20000578
 8001594:	20000528 	.word	0x20000528
 8001598:	20000590 	.word	0x20000590
 800159c:	2000057c 	.word	0x2000057c
 80015a0:	0800fe5c 	.word	0x0800fe5c
 80015a4:	20000292 	.word	0x20000292
 80015a8:	0800fe64 	.word	0x0800fe64
 80015ac:	0800fe68 	.word	0x0800fe68

080015b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b094      	sub	sp, #80	@ 0x50
 80015b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	2230      	movs	r2, #48	@ 0x30
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f00d fd6a 	bl	800f098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	4b28      	ldr	r3, [pc, #160]	@ (800167c <SystemClock_Config+0xcc>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	4a27      	ldr	r2, [pc, #156]	@ (800167c <SystemClock_Config+0xcc>)
 80015de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e4:	4b25      	ldr	r3, [pc, #148]	@ (800167c <SystemClock_Config+0xcc>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f0:	2300      	movs	r3, #0
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	4b22      	ldr	r3, [pc, #136]	@ (8001680 <SystemClock_Config+0xd0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a21      	ldr	r2, [pc, #132]	@ (8001680 <SystemClock_Config+0xd0>)
 80015fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b1f      	ldr	r3, [pc, #124]	@ (8001680 <SystemClock_Config+0xd0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800160c:	2301      	movs	r3, #1
 800160e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001610:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001616:	2302      	movs	r3, #2
 8001618:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800161a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800161e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001620:	2308      	movs	r3, #8
 8001622:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001624:	23a8      	movs	r3, #168	@ 0xa8
 8001626:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001628:	2302      	movs	r3, #2
 800162a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800162c:	2307      	movs	r3, #7
 800162e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001630:	f107 0320 	add.w	r3, r7, #32
 8001634:	4618      	mov	r0, r3
 8001636:	f005 fe91 	bl	800735c <HAL_RCC_OscConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001640:	f002 fcbc 	bl	8003fbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001644:	230f      	movs	r3, #15
 8001646:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001648:	2302      	movs	r3, #2
 800164a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001650:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001654:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001656:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800165a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	2105      	movs	r1, #5
 8001662:	4618      	mov	r0, r3
 8001664:	f006 f8f2 	bl	800784c <HAL_RCC_ClockConfig>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800166e:	f002 fca5 	bl	8003fbc <Error_Handler>
  }
}
 8001672:	bf00      	nop
 8001674:	3750      	adds	r7, #80	@ 0x50
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800
 8001680:	40007000 	.word	0x40007000

08001684 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001688:	4b18      	ldr	r3, [pc, #96]	@ (80016ec <MX_SPI1_Init+0x68>)
 800168a:	4a19      	ldr	r2, [pc, #100]	@ (80016f0 <MX_SPI1_Init+0x6c>)
 800168c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800168e:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <MX_SPI1_Init+0x68>)
 8001690:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001694:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001696:	4b15      	ldr	r3, [pc, #84]	@ (80016ec <MX_SPI1_Init+0x68>)
 8001698:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800169c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800169e:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <MX_SPI1_Init+0x68>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016a4:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <MX_SPI1_Init+0x68>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016aa:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <MX_SPI1_Init+0x68>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80016b0:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <MX_SPI1_Init+0x68>)
 80016b2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80016b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <MX_SPI1_Init+0x68>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016be:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <MX_SPI1_Init+0x68>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016c4:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <MX_SPI1_Init+0x68>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ca:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <MX_SPI1_Init+0x68>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <MX_SPI1_Init+0x68>)
 80016d2:	220a      	movs	r2, #10
 80016d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016d6:	4805      	ldr	r0, [pc, #20]	@ (80016ec <MX_SPI1_Init+0x68>)
 80016d8:	f006 fad6 	bl	8007c88 <HAL_SPI_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80016e2:	f002 fc6b 	bl	8003fbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000440 	.word	0x20000440
 80016f0:	40013000 	.word	0x40013000

080016f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fa:	f107 0308 	add.w	r3, r7, #8
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001708:	463b      	mov	r3, r7
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001710:	4b1e      	ldr	r3, [pc, #120]	@ (800178c <MX_TIM2_Init+0x98>)
 8001712:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001716:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8001718:	4b1c      	ldr	r3, [pc, #112]	@ (800178c <MX_TIM2_Init+0x98>)
 800171a:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800171e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001720:	4b1a      	ldr	r3, [pc, #104]	@ (800178c <MX_TIM2_Init+0x98>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001726:	4b19      	ldr	r3, [pc, #100]	@ (800178c <MX_TIM2_Init+0x98>)
 8001728:	f242 7210 	movw	r2, #10000	@ 0x2710
 800172c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172e:	4b17      	ldr	r3, [pc, #92]	@ (800178c <MX_TIM2_Init+0x98>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001734:	4b15      	ldr	r3, [pc, #84]	@ (800178c <MX_TIM2_Init+0x98>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800173a:	4814      	ldr	r0, [pc, #80]	@ (800178c <MX_TIM2_Init+0x98>)
 800173c:	f006 fef6 	bl	800852c <HAL_TIM_Base_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001746:	f002 fc39 	bl	8003fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800174e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	4619      	mov	r1, r3
 8001756:	480d      	ldr	r0, [pc, #52]	@ (800178c <MX_TIM2_Init+0x98>)
 8001758:	f007 f9b0 	bl	8008abc <HAL_TIM_ConfigClockSource>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001762:	f002 fc2b 	bl	8003fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800176e:	463b      	mov	r3, r7
 8001770:	4619      	mov	r1, r3
 8001772:	4806      	ldr	r0, [pc, #24]	@ (800178c <MX_TIM2_Init+0x98>)
 8001774:	f007 fd86 	bl	8009284 <HAL_TIMEx_MasterConfigSynchronization>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800177e:	f002 fc1d 	bl	8003fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000498 	.word	0x20000498

08001790 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	@ 0x28
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001796:	f107 0320 	add.w	r3, r7, #32
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]
 80017ae:	615a      	str	r2, [r3, #20]
 80017b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017b2:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <MX_TIM3_Init+0xa8>)
 80017b4:	4a21      	ldr	r2, [pc, #132]	@ (800183c <MX_TIM3_Init+0xac>)
 80017b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168-1;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <MX_TIM3_Init+0xa8>)
 80017ba:	22a7      	movs	r2, #167	@ 0xa7
 80017bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017be:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <MX_TIM3_Init+0xa8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80017c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <MX_TIM3_Init+0xa8>)
 80017c6:	2263      	movs	r2, #99	@ 0x63
 80017c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <MX_TIM3_Init+0xa8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d0:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <MX_TIM3_Init+0xa8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017d6:	4818      	ldr	r0, [pc, #96]	@ (8001838 <MX_TIM3_Init+0xa8>)
 80017d8:	f006 ff97 	bl	800870a <HAL_TIM_PWM_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80017e2:	f002 fbeb 	bl	8003fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017ee:	f107 0320 	add.w	r3, r7, #32
 80017f2:	4619      	mov	r1, r3
 80017f4:	4810      	ldr	r0, [pc, #64]	@ (8001838 <MX_TIM3_Init+0xa8>)
 80017f6:	f007 fd45 	bl	8009284 <HAL_TIMEx_MasterConfigSynchronization>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001800:	f002 fbdc 	bl	8003fbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001804:	2370      	movs	r3, #112	@ 0x70
 8001806:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	2204      	movs	r2, #4
 8001818:	4619      	mov	r1, r3
 800181a:	4807      	ldr	r0, [pc, #28]	@ (8001838 <MX_TIM3_Init+0xa8>)
 800181c:	f007 f88c 	bl	8008938 <HAL_TIM_PWM_ConfigChannel>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001826:	f002 fbc9 	bl	8003fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800182a:	4803      	ldr	r0, [pc, #12]	@ (8001838 <MX_TIM3_Init+0xa8>)
 800182c:	f002 fc7e 	bl	800412c <HAL_TIM_MspPostInit>

}
 8001830:	bf00      	nop
 8001832:	3728      	adds	r7, #40	@ 0x28
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200004e0 	.word	0x200004e0
 800183c:	40000400 	.word	0x40000400

08001840 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001844:	4b11      	ldr	r3, [pc, #68]	@ (800188c <MX_USART2_UART_Init+0x4c>)
 8001846:	4a12      	ldr	r2, [pc, #72]	@ (8001890 <MX_USART2_UART_Init+0x50>)
 8001848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800184a:	4b10      	ldr	r3, [pc, #64]	@ (800188c <MX_USART2_UART_Init+0x4c>)
 800184c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001852:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <MX_USART2_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001858:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <MX_USART2_UART_Init+0x4c>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800185e:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <MX_USART2_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001864:	4b09      	ldr	r3, [pc, #36]	@ (800188c <MX_USART2_UART_Init+0x4c>)
 8001866:	220c      	movs	r2, #12
 8001868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186a:	4b08      	ldr	r3, [pc, #32]	@ (800188c <MX_USART2_UART_Init+0x4c>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <MX_USART2_UART_Init+0x4c>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001876:	4805      	ldr	r0, [pc, #20]	@ (800188c <MX_USART2_UART_Init+0x4c>)
 8001878:	f007 fd80 	bl	800937c <HAL_UART_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001882:	f002 fb9b 	bl	8003fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000528 	.word	0x20000528
 8001890:	40004400 	.word	0x40004400

08001894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	@ 0x28
 8001898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001a18 <MX_GPIO_Init+0x184>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a59      	ldr	r2, [pc, #356]	@ (8001a18 <MX_GPIO_Init+0x184>)
 80018b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b57      	ldr	r3, [pc, #348]	@ (8001a18 <MX_GPIO_Init+0x184>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b53      	ldr	r3, [pc, #332]	@ (8001a18 <MX_GPIO_Init+0x184>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	4a52      	ldr	r2, [pc, #328]	@ (8001a18 <MX_GPIO_Init+0x184>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d6:	4b50      	ldr	r3, [pc, #320]	@ (8001a18 <MX_GPIO_Init+0x184>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001a18 <MX_GPIO_Init+0x184>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	4a4b      	ldr	r2, [pc, #300]	@ (8001a18 <MX_GPIO_Init+0x184>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f2:	4b49      	ldr	r3, [pc, #292]	@ (8001a18 <MX_GPIO_Init+0x184>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	4b45      	ldr	r3, [pc, #276]	@ (8001a18 <MX_GPIO_Init+0x184>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	4a44      	ldr	r2, [pc, #272]	@ (8001a18 <MX_GPIO_Init+0x184>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	6313      	str	r3, [r2, #48]	@ 0x30
 800190e:	4b42      	ldr	r3, [pc, #264]	@ (8001a18 <MX_GPIO_Init+0x184>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	603b      	str	r3, [r7, #0]
 800191e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a18 <MX_GPIO_Init+0x184>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	4a3d      	ldr	r2, [pc, #244]	@ (8001a18 <MX_GPIO_Init+0x184>)
 8001924:	f043 0308 	orr.w	r3, r3, #8
 8001928:	6313      	str	r3, [r2, #48]	@ 0x30
 800192a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a18 <MX_GPIO_Init+0x184>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FAN_EN_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800193c:	4837      	ldr	r0, [pc, #220]	@ (8001a1c <MX_GPIO_Init+0x188>)
 800193e:	f003 fba7 	bl	8005090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_NRST_GPIO_Port, LCD_NRST_Pin, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	2140      	movs	r1, #64	@ 0x40
 8001946:	4836      	ldr	r0, [pc, #216]	@ (8001a20 <MX_GPIO_Init+0x18c>)
 8001948:	f003 fba2 	bl	8005090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PSO_GPIO_Port, OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800194c:	2200      	movs	r2, #0
 800194e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001952:	4834      	ldr	r0, [pc, #208]	@ (8001a24 <MX_GPIO_Init+0x190>)
 8001954:	f003 fb9c 	bl	8005090 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FAN_EN_Pin DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = FAN_EN_Pin|DEBUG_LED_Pin;
 8001958:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 800195c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	482a      	ldr	r0, [pc, #168]	@ (8001a1c <MX_GPIO_Init+0x188>)
 8001972:	f003 f9c9 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001976:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800197a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001988:	2305      	movs	r3, #5
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	4619      	mov	r1, r3
 8001992:	4824      	ldr	r0, [pc, #144]	@ (8001a24 <MX_GPIO_Init+0x190>)
 8001994:	f003 f9b8 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_NRST_Pin */
  GPIO_InitStruct.Pin = LCD_NRST_Pin;
 8001998:	2340      	movs	r3, #64	@ 0x40
 800199a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199c:	2301      	movs	r3, #1
 800199e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_NRST_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	4619      	mov	r1, r3
 80019ae:	481c      	ldr	r0, [pc, #112]	@ (8001a20 <MX_GPIO_Init+0x18c>)
 80019b0:	f003 f9aa 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_IRQ_Pin OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|OTG_FS_OC_Pin;
 80019b4:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80019b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019ba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	4816      	ldr	r0, [pc, #88]	@ (8001a24 <MX_GPIO_Init+0x190>)
 80019cc:	f003 f99c 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PSO_Pin;
 80019d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OTG_FS_PSO_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	480e      	ldr	r0, [pc, #56]	@ (8001a24 <MX_GPIO_Init+0x190>)
 80019ea:	f003 f98d 	bl	8004d08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	200a      	movs	r0, #10
 80019f4:	f002 feab 	bl	800474e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80019f8:	200a      	movs	r0, #10
 80019fa:	f002 fec4 	bl	8004786 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	2017      	movs	r0, #23
 8001a04:	f002 fea3 	bl	800474e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a08:	2017      	movs	r0, #23
 8001a0a:	f002 febc 	bl	8004786 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a0e:	bf00      	nop
 8001a10:	3728      	adds	r7, #40	@ 0x28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020800 	.word	0x40020800
 8001a20:	40020c00 	.word	0x40020c00
 8001a24:	40020400 	.word	0x40020400

08001a28 <DrawMainPage>:
/**
 * @brief: Draw main page and handle button label and status updates
 * @param: page_num: determines which page should be drawn from 1-10
 * @retval: none
 */
void DrawMainPage(uint8_t page_num) {
 8001a28:	b5b0      	push	{r4, r5, r7, lr}
 8001a2a:	b0a8      	sub	sp, #160	@ 0xa0
 8001a2c:	af02      	add	r7, sp, #8
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
	//Draw "Protocol Title" box
	lcdFillRGB(COLOR_WHITE);
 8001a32:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a36:	f7fe fffb 	bl	8000a30 <lcdFillRGB>
	char empty[20] = "Empty\n"; //strings from flash memory come with newline at end
 8001a3a:	4a9c      	ldr	r2, [pc, #624]	@ (8001cac <DrawMainPage+0x284>)
 8001a3c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001a40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a44:	6018      	str	r0, [r3, #0]
 8001a46:	3304      	adds	r3, #4
 8001a48:	8019      	strh	r1, [r3, #0]
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	0c0a      	lsrs	r2, r1, #16
 8001a4e:	701a      	strb	r2, [r3, #0]
 8001a50:	f107 0387 	add.w	r3, r7, #135	@ 0x87
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	731a      	strb	r2, [r3, #12]
	char pageTitle[20] = "";
 8001a5e:	2300      	movs	r3, #0
 8001a60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001a62:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
	sprintf(pageTitle, "Page %d", page_num);
 8001a70:	79fa      	ldrb	r2, [r7, #7]
 8001a72:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a76:	498e      	ldr	r1, [pc, #568]	@ (8001cb0 <DrawMainPage+0x288>)
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f00d f9f5 	bl	800ee68 <siprintf>
	lcdSetCursor(10, 10);
 8001a7e:	210a      	movs	r1, #10
 8001a80:	200a      	movs	r0, #10
 8001a82:	f7ff fac9 	bl	8001018 <lcdSetCursor>
	lcdSetTextColor(COLOR_BLACK, COLOR_WHITE);
 8001a86:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f7ff fa44 	bl	8000f18 <lcdSetTextColor>
	lcdSetTextFont(&Font20);
 8001a90:	4888      	ldr	r0, [pc, #544]	@ (8001cb4 <DrawMainPage+0x28c>)
 8001a92:	f7ff fa31 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf(pageTitle);
 8001a96:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff f9a0 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 8001aa0:	4885      	ldr	r0, [pc, #532]	@ (8001cb8 <DrawMainPage+0x290>)
 8001aa2:	f7ff fa29 	bl	8000ef8 <lcdSetTextFont>

	//get button label info from flash memory
	char readBuffer1[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001aaa:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]
 8001aba:	615a      	str	r2, [r3, #20]
 8001abc:	619a      	str	r2, [r3, #24]
	char readBuffer2[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ac2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
 8001ad0:	611a      	str	r2, [r3, #16]
 8001ad2:	615a      	str	r2, [r3, #20]
 8001ad4:	619a      	str	r2, [r3, #24]
	char readBuffer3[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	f107 0310 	add.w	r3, r7, #16
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	611a      	str	r2, [r3, #16]
 8001aea:	615a      	str	r2, [r3, #20]
 8001aec:	619a      	str	r2, [r3, #24]

	//if the protocol exists, read from it. else, name it empty
	if (read_from_flash(readBuffer1, get_sector_address(page_num))) {
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f002 f981 	bl	8003df8 <get_sector_address>
 8001af6:	4602      	mov	r2, r0
 8001af8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f001 fca1 	bl	8003446 <read_from_flash>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00a      	beq.n	8001b20 <DrawMainPage+0xf8>
		strcpy(buttons[0].label, readBuffer1);
 8001b0a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b0e:	4619      	mov	r1, r3
 8001b10:	486a      	ldr	r0, [pc, #424]	@ (8001cbc <DrawMainPage+0x294>)
 8001b12:	f00d fb4c 	bl	800f1ae <strcpy>
		buttons[0].status = NOT_EMPTY;
 8001b16:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc0 <DrawMainPage+0x298>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8001b1e:	e009      	b.n	8001b34 <DrawMainPage+0x10c>
	} else {
		strcpy(buttons[0].label, empty);
 8001b20:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001b24:	4619      	mov	r1, r3
 8001b26:	4865      	ldr	r0, [pc, #404]	@ (8001cbc <DrawMainPage+0x294>)
 8001b28:	f00d fb41 	bl	800f1ae <strcpy>
		buttons[0].status = EMPTY;
 8001b2c:	4b64      	ldr	r3, [pc, #400]	@ (8001cc0 <DrawMainPage+0x298>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}
	if (read_from_flash(readBuffer2,
			get_sector_address(page_num) + PROTOCOL_SIZE)) {
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 f95e 	bl	8003df8 <get_sector_address>
 8001b3c:	4603      	mov	r3, r0
	if (read_from_flash(readBuffer2,
 8001b3e:	f503 53bb 	add.w	r3, r3, #5984	@ 0x1760
 8001b42:	3310      	adds	r3, #16
 8001b44:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	f001 fc7b 	bl	8003446 <read_from_flash>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00a      	beq.n	8001b6c <DrawMainPage+0x144>
		strcpy(buttons[1].label, readBuffer2);
 8001b56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4859      	ldr	r0, [pc, #356]	@ (8001cc4 <DrawMainPage+0x29c>)
 8001b5e:	f00d fb26 	bl	800f1ae <strcpy>
		buttons[1].status = NOT_EMPTY;
 8001b62:	4b57      	ldr	r3, [pc, #348]	@ (8001cc0 <DrawMainPage+0x298>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8001b6a:	e009      	b.n	8001b80 <DrawMainPage+0x158>
	} else {
		strcpy(buttons[1].label, empty);
 8001b6c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001b70:	4619      	mov	r1, r3
 8001b72:	4854      	ldr	r0, [pc, #336]	@ (8001cc4 <DrawMainPage+0x29c>)
 8001b74:	f00d fb1b 	bl	800f1ae <strcpy>
		buttons[1].status = EMPTY;
 8001b78:	4b51      	ldr	r3, [pc, #324]	@ (8001cc0 <DrawMainPage+0x298>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
	}
	if (read_from_flash(readBuffer3,
			get_sector_address(page_num) + 2 * PROTOCOL_SIZE)) {
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f002 f938 	bl	8003df8 <get_sector_address>
 8001b88:	4603      	mov	r3, r0
	if (read_from_flash(readBuffer3,
 8001b8a:	f503 533b 	add.w	r3, r3, #11968	@ 0x2ec0
 8001b8e:	3320      	adds	r3, #32
 8001b90:	f107 020c 	add.w	r2, r7, #12
 8001b94:	4619      	mov	r1, r3
 8001b96:	4610      	mov	r0, r2
 8001b98:	f001 fc55 	bl	8003446 <read_from_flash>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00a      	beq.n	8001bb8 <DrawMainPage+0x190>
		strcpy(buttons[2].label, readBuffer3);
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4847      	ldr	r0, [pc, #284]	@ (8001cc8 <DrawMainPage+0x2a0>)
 8001baa:	f00d fb00 	bl	800f1ae <strcpy>
		buttons[2].status = NOT_EMPTY;
 8001bae:	4b44      	ldr	r3, [pc, #272]	@ (8001cc0 <DrawMainPage+0x298>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8001bb6:	e009      	b.n	8001bcc <DrawMainPage+0x1a4>
	} else {
		strcpy(buttons[2].label, empty);
 8001bb8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4842      	ldr	r0, [pc, #264]	@ (8001cc8 <DrawMainPage+0x2a0>)
 8001bc0:	f00d faf5 	bl	800f1ae <strcpy>
		buttons[2].status = EMPTY;
 8001bc4:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc0 <DrawMainPage+0x298>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	}

	// Draw buttons
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001bd2:	e08d      	b.n	8001cf0 <DrawMainPage+0x2c8>
		lcdDrawRect(buttons[i].x, buttons[i].y, buttons[i].w, buttons[i].h,
 8001bd4:	4a3a      	ldr	r2, [pc, #232]	@ (8001cc0 <DrawMainPage+0x298>)
 8001bd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001bda:	212a      	movs	r1, #42	@ 0x2a
 8001bdc:	fb01 f303 	mul.w	r3, r1, r3
 8001be0:	4413      	add	r3, r2
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	b218      	sxth	r0, r3
 8001be6:	4a36      	ldr	r2, [pc, #216]	@ (8001cc0 <DrawMainPage+0x298>)
 8001be8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001bec:	212a      	movs	r1, #42	@ 0x2a
 8001bee:	fb01 f303 	mul.w	r3, r1, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	b219      	sxth	r1, r3
 8001bfa:	4a31      	ldr	r2, [pc, #196]	@ (8001cc0 <DrawMainPage+0x298>)
 8001bfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c00:	242a      	movs	r4, #42	@ 0x2a
 8001c02:	fb04 f303 	mul.w	r3, r4, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	3304      	adds	r3, #4
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	b21a      	sxth	r2, r3
 8001c0e:	4c2c      	ldr	r4, [pc, #176]	@ (8001cc0 <DrawMainPage+0x298>)
 8001c10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c14:	252a      	movs	r5, #42	@ 0x2a
 8001c16:	fb05 f303 	mul.w	r3, r5, r3
 8001c1a:	4423      	add	r3, r4
 8001c1c:	3306      	adds	r3, #6
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	b21b      	sxth	r3, r3
 8001c22:	2400      	movs	r4, #0
 8001c24:	9400      	str	r4, [sp, #0]
 8001c26:	f7fe ffe7 	bl	8000bf8 <lcdDrawRect>
		COLOR_BLACK);
		buttons[i].label[strlen(buttons[i].label) - 1] = ' '; //dont display null terminator
 8001c2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c2e:	222a      	movs	r2, #42	@ 0x2a
 8001c30:	fb02 f303 	mul.w	r3, r2, r3
 8001c34:	3308      	adds	r3, #8
 8001c36:	4a22      	ldr	r2, [pc, #136]	@ (8001cc0 <DrawMainPage+0x298>)
 8001c38:	4413      	add	r3, r2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fad8 	bl	80001f0 <strlen>
 8001c40:	4603      	mov	r3, r0
 8001c42:	3b01      	subs	r3, #1
 8001c44:	491e      	ldr	r1, [pc, #120]	@ (8001cc0 <DrawMainPage+0x298>)
 8001c46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001c4a:	202a      	movs	r0, #42	@ 0x2a
 8001c4c:	fb00 f202 	mul.w	r2, r0, r2
 8001c50:	440a      	add	r2, r1
 8001c52:	4413      	add	r3, r2
 8001c54:	3308      	adds	r3, #8
 8001c56:	2220      	movs	r2, #32
 8001c58:	701a      	strb	r2, [r3, #0]
		lcdSetCursor(buttons[i].x + 10, buttons[i].y + 10);
 8001c5a:	4a19      	ldr	r2, [pc, #100]	@ (8001cc0 <DrawMainPage+0x298>)
 8001c5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c60:	212a      	movs	r1, #42	@ 0x2a
 8001c62:	fb01 f303 	mul.w	r3, r1, r3
 8001c66:	4413      	add	r3, r2
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	330a      	adds	r3, #10
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	4914      	ldr	r1, [pc, #80]	@ (8001cc0 <DrawMainPage+0x298>)
 8001c70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c74:	202a      	movs	r0, #42	@ 0x2a
 8001c76:	fb00 f303 	mul.w	r3, r0, r3
 8001c7a:	440b      	add	r3, r1
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	330a      	adds	r3, #10
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	4619      	mov	r1, r3
 8001c86:	4610      	mov	r0, r2
 8001c88:	f7ff f9c6 	bl	8001018 <lcdSetCursor>
		if (buttons[i].status == EMPTY) {
 8001c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc0 <DrawMainPage+0x298>)
 8001c8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c92:	212a      	movs	r1, #42	@ 0x2a
 8001c94:	fb01 f303 	mul.w	r3, r1, r3
 8001c98:	4413      	add	r3, r2
 8001c9a:	3328      	adds	r3, #40	@ 0x28
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d116      	bne.n	8001cd0 <DrawMainPage+0x2a8>
			lcdPrintf("EMPTY");
 8001ca2:	480a      	ldr	r0, [pc, #40]	@ (8001ccc <DrawMainPage+0x2a4>)
 8001ca4:	f7ff f89c 	bl	8000de0 <lcdPrintf>
 8001ca8:	e01d      	b.n	8001ce6 <DrawMainPage+0x2be>
 8001caa:	bf00      	nop
 8001cac:	0800fe88 	.word	0x0800fe88
 8001cb0:	0800fe78 	.word	0x0800fe78
 8001cb4:	20000010 	.word	0x20000010
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	20000038 	.word	0x20000038
 8001cc0:	20000030 	.word	0x20000030
 8001cc4:	20000062 	.word	0x20000062
 8001cc8:	2000008c 	.word	0x2000008c
 8001ccc:	0800fe80 	.word	0x0800fe80
		} else {
			lcdPrintf(buttons[i].label);
 8001cd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cd4:	222a      	movs	r2, #42	@ 0x2a
 8001cd6:	fb02 f303 	mul.w	r3, r2, r3
 8001cda:	3308      	adds	r3, #8
 8001cdc:	4a3a      	ldr	r2, [pc, #232]	@ (8001dc8 <DrawMainPage+0x3a0>)
 8001cde:	4413      	add	r3, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff f87d 	bl	8000de0 <lcdPrintf>
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8001ce6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cea:	3301      	adds	r3, #1
 8001cec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001cf0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	f77f af6d 	ble.w	8001bd4 <DrawMainPage+0x1ac>
		}
	}

	// Draw "Next" button
	if (page_num != 10) {
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	2b0a      	cmp	r3, #10
 8001cfe:	d01e      	beq.n	8001d3e <DrawMainPage+0x316>
		//BSP_LCD_SetTextColor(LCD_COLOR_RED);
		lcdDrawRect(nextButton.x, nextButton.y, nextButton.w, nextButton.h,
 8001d00:	4b32      	ldr	r3, [pc, #200]	@ (8001dcc <DrawMainPage+0x3a4>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	b218      	sxth	r0, r3
 8001d06:	4b31      	ldr	r3, [pc, #196]	@ (8001dcc <DrawMainPage+0x3a4>)
 8001d08:	885b      	ldrh	r3, [r3, #2]
 8001d0a:	b219      	sxth	r1, r3
 8001d0c:	4b2f      	ldr	r3, [pc, #188]	@ (8001dcc <DrawMainPage+0x3a4>)
 8001d0e:	889b      	ldrh	r3, [r3, #4]
 8001d10:	b21a      	sxth	r2, r3
 8001d12:	4b2e      	ldr	r3, [pc, #184]	@ (8001dcc <DrawMainPage+0x3a4>)
 8001d14:	88db      	ldrh	r3, [r3, #6]
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	2400      	movs	r4, #0
 8001d1a:	9400      	str	r4, [sp, #0]
 8001d1c:	f7fe ff6c 	bl	8000bf8 <lcdDrawRect>
		COLOR_BLACK);
		lcdSetCursor(nextButton.x + 5, nextButton.y + 5);
 8001d20:	4b2a      	ldr	r3, [pc, #168]	@ (8001dcc <DrawMainPage+0x3a4>)
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	3305      	adds	r3, #5
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	4b28      	ldr	r3, [pc, #160]	@ (8001dcc <DrawMainPage+0x3a4>)
 8001d2a:	885b      	ldrh	r3, [r3, #2]
 8001d2c:	3305      	adds	r3, #5
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	4619      	mov	r1, r3
 8001d32:	4610      	mov	r0, r2
 8001d34:	f7ff f970 	bl	8001018 <lcdSetCursor>
		lcdPrintf(nextButton.label);
 8001d38:	4825      	ldr	r0, [pc, #148]	@ (8001dd0 <DrawMainPage+0x3a8>)
 8001d3a:	f7ff f851 	bl	8000de0 <lcdPrintf>
	}

	// Draw "Back" button
	if (page_num != 1) {
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d01e      	beq.n	8001d82 <DrawMainPage+0x35a>
		lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8001d44:	4b23      	ldr	r3, [pc, #140]	@ (8001dd4 <DrawMainPage+0x3ac>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	b218      	sxth	r0, r3
 8001d4a:	4b22      	ldr	r3, [pc, #136]	@ (8001dd4 <DrawMainPage+0x3ac>)
 8001d4c:	885b      	ldrh	r3, [r3, #2]
 8001d4e:	b219      	sxth	r1, r3
 8001d50:	4b20      	ldr	r3, [pc, #128]	@ (8001dd4 <DrawMainPage+0x3ac>)
 8001d52:	889b      	ldrh	r3, [r3, #4]
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd4 <DrawMainPage+0x3ac>)
 8001d58:	88db      	ldrh	r3, [r3, #6]
 8001d5a:	b21b      	sxth	r3, r3
 8001d5c:	2400      	movs	r4, #0
 8001d5e:	9400      	str	r4, [sp, #0]
 8001d60:	f7fe ff4a 	bl	8000bf8 <lcdDrawRect>
		COLOR_BLACK);
		lcdSetCursor(backButton.x + 5, backButton.y + 5);
 8001d64:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd4 <DrawMainPage+0x3ac>)
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	3305      	adds	r3, #5
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	4b19      	ldr	r3, [pc, #100]	@ (8001dd4 <DrawMainPage+0x3ac>)
 8001d6e:	885b      	ldrh	r3, [r3, #2]
 8001d70:	3305      	adds	r3, #5
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	4619      	mov	r1, r3
 8001d76:	4610      	mov	r0, r2
 8001d78:	f7ff f94e 	bl	8001018 <lcdSetCursor>
		lcdPrintf(backButton.label);
 8001d7c:	4816      	ldr	r0, [pc, #88]	@ (8001dd8 <DrawMainPage+0x3b0>)
 8001d7e:	f7ff f82f 	bl	8000de0 <lcdPrintf>
	}
//
	//draw "Queue" button on page 1
	lcdDrawRect(queueButton.x, queueButton.y, queueButton.w, queueButton.h,
 8001d82:	4b16      	ldr	r3, [pc, #88]	@ (8001ddc <DrawMainPage+0x3b4>)
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	b218      	sxth	r0, r3
 8001d88:	4b14      	ldr	r3, [pc, #80]	@ (8001ddc <DrawMainPage+0x3b4>)
 8001d8a:	885b      	ldrh	r3, [r3, #2]
 8001d8c:	b219      	sxth	r1, r3
 8001d8e:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <DrawMainPage+0x3b4>)
 8001d90:	889b      	ldrh	r3, [r3, #4]
 8001d92:	b21a      	sxth	r2, r3
 8001d94:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <DrawMainPage+0x3b4>)
 8001d96:	88db      	ldrh	r3, [r3, #6]
 8001d98:	b21b      	sxth	r3, r3
 8001d9a:	2400      	movs	r4, #0
 8001d9c:	9400      	str	r4, [sp, #0]
 8001d9e:	f7fe ff2b 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(queueButton.x + 5, queueButton.y + 5);
 8001da2:	4b0e      	ldr	r3, [pc, #56]	@ (8001ddc <DrawMainPage+0x3b4>)
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	3305      	adds	r3, #5
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	4b0c      	ldr	r3, [pc, #48]	@ (8001ddc <DrawMainPage+0x3b4>)
 8001dac:	885b      	ldrh	r3, [r3, #2]
 8001dae:	3305      	adds	r3, #5
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	4619      	mov	r1, r3
 8001db4:	4610      	mov	r0, r2
 8001db6:	f7ff f92f 	bl	8001018 <lcdSetCursor>
	lcdPrintf(queueButton.label);
 8001dba:	4809      	ldr	r0, [pc, #36]	@ (8001de0 <DrawMainPage+0x3b8>)
 8001dbc:	f7ff f810 	bl	8000de0 <lcdPrintf>
}
 8001dc0:	bf00      	nop
 8001dc2:	3798      	adds	r7, #152	@ 0x98
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8001dc8:	20000030 	.word	0x20000030
 8001dcc:	200001e4 	.word	0x200001e4
 8001dd0:	200001ec 	.word	0x200001ec
 8001dd4:	200001b8 	.word	0x200001b8
 8001dd8:	200001c0 	.word	0x200001c0
 8001ddc:	200000b0 	.word	0x200000b0
 8001de0:	200000b8 	.word	0x200000b8

08001de4 <DrawInfoPage>:
/**
 * @brief: Draw select page with run, delete and queue buttons
 * @param: protocolTitle: title of the protocol to be displayed
 * @retval: none
 */
void DrawInfoPage(char protocolTitle[MAX_LINE_LENGTH]) {
 8001de4:	b590      	push	{r4, r7, lr}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	6078      	str	r0, [r7, #4]
	lcdFillRGB(COLOR_WHITE);
 8001dec:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001df0:	f7fe fe1e 	bl	8000a30 <lcdFillRGB>
	//Display protocol name at top of screen
	lcdSetCursor(90, 10);
 8001df4:	210a      	movs	r1, #10
 8001df6:	205a      	movs	r0, #90	@ 0x5a
 8001df8:	f7ff f90e 	bl	8001018 <lcdSetCursor>
	lcdSetTextFont(&Font20);
 8001dfc:	4853      	ldr	r0, [pc, #332]	@ (8001f4c <DrawInfoPage+0x168>)
 8001dfe:	f7ff f87b 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf(protocolTitle);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7fe ffec 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 8001e08:	4851      	ldr	r0, [pc, #324]	@ (8001f50 <DrawInfoPage+0x16c>)
 8001e0a:	f7ff f875 	bl	8000ef8 <lcdSetTextFont>

	//Draw "QueueSelect" button on select page
	lcdDrawRect(queueSelectButton.x, queueSelectButton.y, queueSelectButton.w,
 8001e0e:	4b51      	ldr	r3, [pc, #324]	@ (8001f54 <DrawInfoPage+0x170>)
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	b218      	sxth	r0, r3
 8001e14:	4b4f      	ldr	r3, [pc, #316]	@ (8001f54 <DrawInfoPage+0x170>)
 8001e16:	885b      	ldrh	r3, [r3, #2]
 8001e18:	b219      	sxth	r1, r3
 8001e1a:	4b4e      	ldr	r3, [pc, #312]	@ (8001f54 <DrawInfoPage+0x170>)
 8001e1c:	889b      	ldrh	r3, [r3, #4]
 8001e1e:	b21a      	sxth	r2, r3
			queueSelectButton.h, COLOR_BLACK);
 8001e20:	4b4c      	ldr	r3, [pc, #304]	@ (8001f54 <DrawInfoPage+0x170>)
 8001e22:	88db      	ldrh	r3, [r3, #6]
	lcdDrawRect(queueSelectButton.x, queueSelectButton.y, queueSelectButton.w,
 8001e24:	b21b      	sxth	r3, r3
 8001e26:	2400      	movs	r4, #0
 8001e28:	9400      	str	r4, [sp, #0]
 8001e2a:	f7fe fee5 	bl	8000bf8 <lcdDrawRect>
	lcdSetCursor(queueSelectButton.x + 10, queueSelectButton.y + 10);
 8001e2e:	4b49      	ldr	r3, [pc, #292]	@ (8001f54 <DrawInfoPage+0x170>)
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	330a      	adds	r3, #10
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	4b47      	ldr	r3, [pc, #284]	@ (8001f54 <DrawInfoPage+0x170>)
 8001e38:	885b      	ldrh	r3, [r3, #2]
 8001e3a:	330a      	adds	r3, #10
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4610      	mov	r0, r2
 8001e42:	f7ff f8e9 	bl	8001018 <lcdSetCursor>
	lcdPrintf(queueSelectButton.label);
 8001e46:	4844      	ldr	r0, [pc, #272]	@ (8001f58 <DrawInfoPage+0x174>)
 8001e48:	f7fe ffca 	bl	8000de0 <lcdPrintf>

	//Draw "Select" button
	lcdDrawRect(selectButton.x, selectButton.y, selectButton.w, selectButton.h,
 8001e4c:	4b43      	ldr	r3, [pc, #268]	@ (8001f5c <DrawInfoPage+0x178>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	b218      	sxth	r0, r3
 8001e52:	4b42      	ldr	r3, [pc, #264]	@ (8001f5c <DrawInfoPage+0x178>)
 8001e54:	885b      	ldrh	r3, [r3, #2]
 8001e56:	b219      	sxth	r1, r3
 8001e58:	4b40      	ldr	r3, [pc, #256]	@ (8001f5c <DrawInfoPage+0x178>)
 8001e5a:	889b      	ldrh	r3, [r3, #4]
 8001e5c:	b21a      	sxth	r2, r3
 8001e5e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f5c <DrawInfoPage+0x178>)
 8001e60:	88db      	ldrh	r3, [r3, #6]
 8001e62:	b21b      	sxth	r3, r3
 8001e64:	2400      	movs	r4, #0
 8001e66:	9400      	str	r4, [sp, #0]
 8001e68:	f7fe fec6 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(selectButton.x + 10, selectButton.y + 10);
 8001e6c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f5c <DrawInfoPage+0x178>)
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	330a      	adds	r3, #10
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	4b39      	ldr	r3, [pc, #228]	@ (8001f5c <DrawInfoPage+0x178>)
 8001e76:	885b      	ldrh	r3, [r3, #2]
 8001e78:	330a      	adds	r3, #10
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4610      	mov	r0, r2
 8001e80:	f7ff f8ca 	bl	8001018 <lcdSetCursor>
	lcdPrintf(selectButton.label);
 8001e84:	4836      	ldr	r0, [pc, #216]	@ (8001f60 <DrawInfoPage+0x17c>)
 8001e86:	f7fe ffab 	bl	8000de0 <lcdPrintf>

	//Draw "Delete" button
	lcdDrawRect(deleteButton.x, deleteButton.y, deleteButton.w, deleteButton.h,
 8001e8a:	4b36      	ldr	r3, [pc, #216]	@ (8001f64 <DrawInfoPage+0x180>)
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	b218      	sxth	r0, r3
 8001e90:	4b34      	ldr	r3, [pc, #208]	@ (8001f64 <DrawInfoPage+0x180>)
 8001e92:	885b      	ldrh	r3, [r3, #2]
 8001e94:	b219      	sxth	r1, r3
 8001e96:	4b33      	ldr	r3, [pc, #204]	@ (8001f64 <DrawInfoPage+0x180>)
 8001e98:	889b      	ldrh	r3, [r3, #4]
 8001e9a:	b21a      	sxth	r2, r3
 8001e9c:	4b31      	ldr	r3, [pc, #196]	@ (8001f64 <DrawInfoPage+0x180>)
 8001e9e:	88db      	ldrh	r3, [r3, #6]
 8001ea0:	b21b      	sxth	r3, r3
 8001ea2:	2400      	movs	r4, #0
 8001ea4:	9400      	str	r4, [sp, #0]
 8001ea6:	f7fe fea7 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(deleteButton.x + 10, deleteButton.y + 10);
 8001eaa:	4b2e      	ldr	r3, [pc, #184]	@ (8001f64 <DrawInfoPage+0x180>)
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	330a      	adds	r3, #10
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	4b2c      	ldr	r3, [pc, #176]	@ (8001f64 <DrawInfoPage+0x180>)
 8001eb4:	885b      	ldrh	r3, [r3, #2]
 8001eb6:	330a      	adds	r3, #10
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	f7ff f8ab 	bl	8001018 <lcdSetCursor>
	lcdPrintf(deleteButton.label);
 8001ec2:	4829      	ldr	r0, [pc, #164]	@ (8001f68 <DrawInfoPage+0x184>)
 8001ec4:	f7fe ff8c 	bl	8000de0 <lcdPrintf>

	// Draw "Info" button
	lcdDrawRect(protocolInfoButton.x, protocolInfoButton.y,
 8001ec8:	4b28      	ldr	r3, [pc, #160]	@ (8001f6c <DrawInfoPage+0x188>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	b218      	sxth	r0, r3
 8001ece:	4b27      	ldr	r3, [pc, #156]	@ (8001f6c <DrawInfoPage+0x188>)
 8001ed0:	885b      	ldrh	r3, [r3, #2]
 8001ed2:	b219      	sxth	r1, r3
			protocolInfoButton.w, protocolInfoButton.h,
 8001ed4:	4b25      	ldr	r3, [pc, #148]	@ (8001f6c <DrawInfoPage+0x188>)
 8001ed6:	889b      	ldrh	r3, [r3, #4]
	lcdDrawRect(protocolInfoButton.x, protocolInfoButton.y,
 8001ed8:	b21a      	sxth	r2, r3
			protocolInfoButton.w, protocolInfoButton.h,
 8001eda:	4b24      	ldr	r3, [pc, #144]	@ (8001f6c <DrawInfoPage+0x188>)
 8001edc:	88db      	ldrh	r3, [r3, #6]
	lcdDrawRect(protocolInfoButton.x, protocolInfoButton.y,
 8001ede:	b21b      	sxth	r3, r3
 8001ee0:	2400      	movs	r4, #0
 8001ee2:	9400      	str	r4, [sp, #0]
 8001ee4:	f7fe fe88 	bl	8000bf8 <lcdDrawRect>
			COLOR_BLACK);
	lcdSetCursor(protocolInfoButton.x + 10, protocolInfoButton.y + 10);
 8001ee8:	4b20      	ldr	r3, [pc, #128]	@ (8001f6c <DrawInfoPage+0x188>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	330a      	adds	r3, #10
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f6c <DrawInfoPage+0x188>)
 8001ef2:	885b      	ldrh	r3, [r3, #2]
 8001ef4:	330a      	adds	r3, #10
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4610      	mov	r0, r2
 8001efc:	f7ff f88c 	bl	8001018 <lcdSetCursor>
	lcdPrintf(protocolInfoButton.label);
 8001f00:	481b      	ldr	r0, [pc, #108]	@ (8001f70 <DrawInfoPage+0x18c>)
 8001f02:	f7fe ff6d 	bl	8000de0 <lcdPrintf>

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8001f06:	4b1b      	ldr	r3, [pc, #108]	@ (8001f74 <DrawInfoPage+0x190>)
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	b218      	sxth	r0, r3
 8001f0c:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <DrawInfoPage+0x190>)
 8001f0e:	885b      	ldrh	r3, [r3, #2]
 8001f10:	b219      	sxth	r1, r3
 8001f12:	4b18      	ldr	r3, [pc, #96]	@ (8001f74 <DrawInfoPage+0x190>)
 8001f14:	889b      	ldrh	r3, [r3, #4]
 8001f16:	b21a      	sxth	r2, r3
 8001f18:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <DrawInfoPage+0x190>)
 8001f1a:	88db      	ldrh	r3, [r3, #6]
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	2400      	movs	r4, #0
 8001f20:	9400      	str	r4, [sp, #0]
 8001f22:	f7fe fe69 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 8001f26:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <DrawInfoPage+0x190>)
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	330a      	adds	r3, #10
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <DrawInfoPage+0x190>)
 8001f30:	885b      	ldrh	r3, [r3, #2]
 8001f32:	330a      	adds	r3, #10
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4619      	mov	r1, r3
 8001f38:	4610      	mov	r0, r2
 8001f3a:	f7ff f86d 	bl	8001018 <lcdSetCursor>
	lcdPrintf(backButton.label);
 8001f3e:	480e      	ldr	r0, [pc, #56]	@ (8001f78 <DrawInfoPage+0x194>)
 8001f40:	f7fe ff4e 	bl	8000de0 <lcdPrintf>
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd90      	pop	{r4, r7, pc}
 8001f4c:	20000010 	.word	0x20000010
 8001f50:	20000008 	.word	0x20000008
 8001f54:	20000134 	.word	0x20000134
 8001f58:	2000013c 	.word	0x2000013c
 8001f5c:	20000160 	.word	0x20000160
 8001f60:	20000168 	.word	0x20000168
 8001f64:	2000018c 	.word	0x2000018c
 8001f68:	20000194 	.word	0x20000194
 8001f6c:	20000268 	.word	0x20000268
 8001f70:	20000270 	.word	0x20000270
 8001f74:	200001b8 	.word	0x200001b8
 8001f78:	200001c0 	.word	0x200001c0

08001f7c <DrawConfirmationPage>:
 * @brief: Confirmation page to delete a protocol
 * @param: sector: which sector in flash memory the protocol exists
 * @param: offset: which section of the sector the protocol exists
 * @retval: none
 */
void DrawConfirmationPage(uint32_t sector, uint32_t offset) {
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af02      	add	r7, sp, #8
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
	lcdFillRGB(COLOR_WHITE);
 8001f86:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001f8a:	f7fe fd51 	bl	8000a30 <lcdFillRGB>

	//display confirmation text
	lcdSetCursor(10, 10);
 8001f8e:	210a      	movs	r1, #10
 8001f90:	200a      	movs	r0, #10
 8001f92:	f7ff f841 	bl	8001018 <lcdSetCursor>
	lcdSetTextFont(&Font20);
 8001f96:	482c      	ldr	r0, [pc, #176]	@ (8002048 <DrawConfirmationPage+0xcc>)
 8001f98:	f7fe ffae 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf("Delete: ");
 8001f9c:	482b      	ldr	r0, [pc, #172]	@ (800204c <DrawConfirmationPage+0xd0>)
 8001f9e:	f7fe ff1f 	bl	8000de0 <lcdPrintf>
	lcdPrintf(buttons[offset].label);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	222a      	movs	r2, #42	@ 0x2a
 8001fa6:	fb02 f303 	mul.w	r3, r2, r3
 8001faa:	3308      	adds	r3, #8
 8001fac:	4a28      	ldr	r2, [pc, #160]	@ (8002050 <DrawConfirmationPage+0xd4>)
 8001fae:	4413      	add	r3, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe ff15 	bl	8000de0 <lcdPrintf>
	lcdPrintf("?");
 8001fb6:	4827      	ldr	r0, [pc, #156]	@ (8002054 <DrawConfirmationPage+0xd8>)
 8001fb8:	f7fe ff12 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 8001fbc:	4826      	ldr	r0, [pc, #152]	@ (8002058 <DrawConfirmationPage+0xdc>)
 8001fbe:	f7fe ff9b 	bl	8000ef8 <lcdSetTextFont>

	//Draw "Confirm" button
	lcdDrawRect(confirmButton.x, confirmButton.y, confirmButton.w,
 8001fc2:	4b26      	ldr	r3, [pc, #152]	@ (800205c <DrawConfirmationPage+0xe0>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	b218      	sxth	r0, r3
 8001fc8:	4b24      	ldr	r3, [pc, #144]	@ (800205c <DrawConfirmationPage+0xe0>)
 8001fca:	885b      	ldrh	r3, [r3, #2]
 8001fcc:	b219      	sxth	r1, r3
 8001fce:	4b23      	ldr	r3, [pc, #140]	@ (800205c <DrawConfirmationPage+0xe0>)
 8001fd0:	889b      	ldrh	r3, [r3, #4]
 8001fd2:	b21a      	sxth	r2, r3
			confirmButton.h, COLOR_BLACK);
 8001fd4:	4b21      	ldr	r3, [pc, #132]	@ (800205c <DrawConfirmationPage+0xe0>)
 8001fd6:	88db      	ldrh	r3, [r3, #6]
	lcdDrawRect(confirmButton.x, confirmButton.y, confirmButton.w,
 8001fd8:	b21b      	sxth	r3, r3
 8001fda:	2400      	movs	r4, #0
 8001fdc:	9400      	str	r4, [sp, #0]
 8001fde:	f7fe fe0b 	bl	8000bf8 <lcdDrawRect>
	lcdSetCursor(confirmButton.x + 10, confirmButton.y + 10);
 8001fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800205c <DrawConfirmationPage+0xe0>)
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	330a      	adds	r3, #10
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	4b1c      	ldr	r3, [pc, #112]	@ (800205c <DrawConfirmationPage+0xe0>)
 8001fec:	885b      	ldrh	r3, [r3, #2]
 8001fee:	330a      	adds	r3, #10
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	f7ff f80f 	bl	8001018 <lcdSetCursor>
	lcdPrintf(confirmButton.label);
 8001ffa:	4819      	ldr	r0, [pc, #100]	@ (8002060 <DrawConfirmationPage+0xe4>)
 8001ffc:	f7fe fef0 	bl	8000de0 <lcdPrintf>

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8002000:	4b18      	ldr	r3, [pc, #96]	@ (8002064 <DrawConfirmationPage+0xe8>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	b218      	sxth	r0, r3
 8002006:	4b17      	ldr	r3, [pc, #92]	@ (8002064 <DrawConfirmationPage+0xe8>)
 8002008:	885b      	ldrh	r3, [r3, #2]
 800200a:	b219      	sxth	r1, r3
 800200c:	4b15      	ldr	r3, [pc, #84]	@ (8002064 <DrawConfirmationPage+0xe8>)
 800200e:	889b      	ldrh	r3, [r3, #4]
 8002010:	b21a      	sxth	r2, r3
 8002012:	4b14      	ldr	r3, [pc, #80]	@ (8002064 <DrawConfirmationPage+0xe8>)
 8002014:	88db      	ldrh	r3, [r3, #6]
 8002016:	b21b      	sxth	r3, r3
 8002018:	2400      	movs	r4, #0
 800201a:	9400      	str	r4, [sp, #0]
 800201c:	f7fe fdec 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 8002020:	4b10      	ldr	r3, [pc, #64]	@ (8002064 <DrawConfirmationPage+0xe8>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	330a      	adds	r3, #10
 8002026:	b29a      	uxth	r2, r3
 8002028:	4b0e      	ldr	r3, [pc, #56]	@ (8002064 <DrawConfirmationPage+0xe8>)
 800202a:	885b      	ldrh	r3, [r3, #2]
 800202c:	330a      	adds	r3, #10
 800202e:	b29b      	uxth	r3, r3
 8002030:	4619      	mov	r1, r3
 8002032:	4610      	mov	r0, r2
 8002034:	f7fe fff0 	bl	8001018 <lcdSetCursor>
	lcdPrintf(backButton.label);
 8002038:	480b      	ldr	r0, [pc, #44]	@ (8002068 <DrawConfirmationPage+0xec>)
 800203a:	f7fe fed1 	bl	8000de0 <lcdPrintf>
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bd90      	pop	{r4, r7, pc}
 8002046:	bf00      	nop
 8002048:	20000010 	.word	0x20000010
 800204c:	0800fe9c 	.word	0x0800fe9c
 8002050:	20000030 	.word	0x20000030
 8002054:	0800fea8 	.word	0x0800fea8
 8002058:	20000008 	.word	0x20000008
 800205c:	20000108 	.word	0x20000108
 8002060:	20000110 	.word	0x20000110
 8002064:	200001b8 	.word	0x200001b8
 8002068:	200001c0 	.word	0x200001c0

0800206c <DrawQueuePage>:
/**
 * @brief: Queue page has up to 10 protocols lined up
 * @param: queueSize: number of protocols in the queue
 * @retval: none
 */
void DrawQueuePage(uint8_t queueSize) {
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b093      	sub	sp, #76	@ 0x4c
 8002070:	af02      	add	r7, sp, #8
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
	lcdFillRGB(COLOR_WHITE);
 8002076:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800207a:	f7fe fcd9 	bl	8000a30 <lcdFillRGB>
	char pageTitle[20] = "";
 800207e:	2300      	movs	r3, #0
 8002080:	623b      	str	r3, [r7, #32]
 8002082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]
	sprintf(pageTitle, "Queue Size: %d", queueSize);
 8002090:	79fa      	ldrb	r2, [r7, #7]
 8002092:	f107 0320 	add.w	r3, r7, #32
 8002096:	4960      	ldr	r1, [pc, #384]	@ (8002218 <DrawQueuePage+0x1ac>)
 8002098:	4618      	mov	r0, r3
 800209a:	f00c fee5 	bl	800ee68 <siprintf>
	//Display Queue at top of the screen
	lcdSetCursor(60, 10);
 800209e:	210a      	movs	r1, #10
 80020a0:	203c      	movs	r0, #60	@ 0x3c
 80020a2:	f7fe ffb9 	bl	8001018 <lcdSetCursor>
	lcdSetTextFont(&Font20);
 80020a6:	485d      	ldr	r0, [pc, #372]	@ (800221c <DrawQueuePage+0x1b0>)
 80020a8:	f7fe ff26 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf(pageTitle);
 80020ac:	f107 0320 	add.w	r3, r7, #32
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fe95 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 80020b6:	485a      	ldr	r0, [pc, #360]	@ (8002220 <DrawQueuePage+0x1b4>)
 80020b8:	f7fe ff1e 	bl	8000ef8 <lcdSetTextFont>

	//display protocols in queue here
	char format[20] = "";
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
	int startSpotX, startSpotY;
	for (uint8_t i = 0; i < queueSize; i++) {
 80020ce:	2300      	movs	r3, #0
 80020d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80020d4:	e055      	b.n	8002182 <DrawQueuePage+0x116>
		if (i < 5) {
 80020d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d804      	bhi.n	80020e8 <DrawQueuePage+0x7c>
			startSpotX = 10;
 80020de:	230a      	movs	r3, #10
 80020e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
			startSpotY = 50;
 80020e2:	2332      	movs	r3, #50	@ 0x32
 80020e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80020e6:	e004      	b.n	80020f2 <DrawQueuePage+0x86>
		} else {
			startSpotX = 160;
 80020e8:	23a0      	movs	r3, #160	@ 0xa0
 80020ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
			startSpotY = 50 - 100;	//convoluted ik
 80020ec:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 80020f0:	63bb      	str	r3, [r7, #56]	@ 0x38
		}
		sprintf(format, "%d.) ", i + 1);
 80020f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	f107 030c 	add.w	r3, r7, #12
 80020fc:	4949      	ldr	r1, [pc, #292]	@ (8002224 <DrawQueuePage+0x1b8>)
 80020fe:	4618      	mov	r0, r3
 8002100:	f00c feb2 	bl	800ee68 <siprintf>
		lcdSetCursor(startSpotX, startSpotY + i * 20);
 8002104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002106:	b298      	uxth	r0, r3
 8002108:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800210c:	b29b      	uxth	r3, r3
 800210e:	461a      	mov	r2, r3
 8002110:	0092      	lsls	r2, r2, #2
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	b29a      	uxth	r2, r3
 8002118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800211a:	b29b      	uxth	r3, r3
 800211c:	4413      	add	r3, r2
 800211e:	b29b      	uxth	r3, r3
 8002120:	4619      	mov	r1, r3
 8002122:	f7fe ff79 	bl	8001018 <lcdSetCursor>
		lcdSetTextFont(&Font12);
 8002126:	4840      	ldr	r0, [pc, #256]	@ (8002228 <DrawQueuePage+0x1bc>)
 8002128:	f7fe fee6 	bl	8000ef8 <lcdSetTextFont>
		lcdPrintf(format);
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe fe55 	bl	8000de0 <lcdPrintf>
		lcdSetTextFont(&Font16);
 8002136:	483a      	ldr	r0, [pc, #232]	@ (8002220 <DrawQueuePage+0x1b4>)
 8002138:	f7fe fede 	bl	8000ef8 <lcdSetTextFont>
		lcdSetCursor(startSpotX + 24, startSpotY + i * 20);
 800213c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800213e:	b29b      	uxth	r3, r3
 8002140:	3318      	adds	r3, #24
 8002142:	b298      	uxth	r0, r3
 8002144:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002148:	b29b      	uxth	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	0092      	lsls	r2, r2, #2
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	b29a      	uxth	r2, r3
 8002154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002156:	b29b      	uxth	r3, r3
 8002158:	4413      	add	r3, r2
 800215a:	b29b      	uxth	r3, r3
 800215c:	4619      	mov	r1, r3
 800215e:	f7fe ff5b 	bl	8001018 <lcdSetCursor>
		lcdPrintf(queueBuffer[i][0]);
 8002162:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002166:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 800216a:	fb02 f303 	mul.w	r3, r2, r3
 800216e:	4a2f      	ldr	r2, [pc, #188]	@ (800222c <DrawQueuePage+0x1c0>)
 8002170:	4413      	add	r3, r2
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe fe34 	bl	8000de0 <lcdPrintf>
	for (uint8_t i = 0; i < queueSize; i++) {
 8002178:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800217c:	3301      	adds	r3, #1
 800217e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002182:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	429a      	cmp	r2, r3
 800218a:	d3a4      	bcc.n	80020d6 <DrawQueuePage+0x6a>

	}

	//Draw "Run" button
	if (queueSize > 0) {
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d01e      	beq.n	80021d0 <DrawQueuePage+0x164>
		lcdDrawRect(runButton.x, runButton.y, runButton.w, runButton.h,
 8002192:	4b27      	ldr	r3, [pc, #156]	@ (8002230 <DrawQueuePage+0x1c4>)
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	b218      	sxth	r0, r3
 8002198:	4b25      	ldr	r3, [pc, #148]	@ (8002230 <DrawQueuePage+0x1c4>)
 800219a:	885b      	ldrh	r3, [r3, #2]
 800219c:	b219      	sxth	r1, r3
 800219e:	4b24      	ldr	r3, [pc, #144]	@ (8002230 <DrawQueuePage+0x1c4>)
 80021a0:	889b      	ldrh	r3, [r3, #4]
 80021a2:	b21a      	sxth	r2, r3
 80021a4:	4b22      	ldr	r3, [pc, #136]	@ (8002230 <DrawQueuePage+0x1c4>)
 80021a6:	88db      	ldrh	r3, [r3, #6]
 80021a8:	b21b      	sxth	r3, r3
 80021aa:	2400      	movs	r4, #0
 80021ac:	9400      	str	r4, [sp, #0]
 80021ae:	f7fe fd23 	bl	8000bf8 <lcdDrawRect>
		COLOR_BLACK);
		lcdSetCursor(runButton.x + 10, runButton.y + 10);
 80021b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002230 <DrawQueuePage+0x1c4>)
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	330a      	adds	r3, #10
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002230 <DrawQueuePage+0x1c4>)
 80021bc:	885b      	ldrh	r3, [r3, #2]
 80021be:	330a      	adds	r3, #10
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	4619      	mov	r1, r3
 80021c4:	4610      	mov	r0, r2
 80021c6:	f7fe ff27 	bl	8001018 <lcdSetCursor>
		lcdPrintf(runButton.label);
 80021ca:	481a      	ldr	r0, [pc, #104]	@ (8002234 <DrawQueuePage+0x1c8>)
 80021cc:	f7fe fe08 	bl	8000de0 <lcdPrintf>
	}

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 80021d0:	4b19      	ldr	r3, [pc, #100]	@ (8002238 <DrawQueuePage+0x1cc>)
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	b218      	sxth	r0, r3
 80021d6:	4b18      	ldr	r3, [pc, #96]	@ (8002238 <DrawQueuePage+0x1cc>)
 80021d8:	885b      	ldrh	r3, [r3, #2]
 80021da:	b219      	sxth	r1, r3
 80021dc:	4b16      	ldr	r3, [pc, #88]	@ (8002238 <DrawQueuePage+0x1cc>)
 80021de:	889b      	ldrh	r3, [r3, #4]
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	4b15      	ldr	r3, [pc, #84]	@ (8002238 <DrawQueuePage+0x1cc>)
 80021e4:	88db      	ldrh	r3, [r3, #6]
 80021e6:	b21b      	sxth	r3, r3
 80021e8:	2400      	movs	r4, #0
 80021ea:	9400      	str	r4, [sp, #0]
 80021ec:	f7fe fd04 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 80021f0:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <DrawQueuePage+0x1cc>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	330a      	adds	r3, #10
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002238 <DrawQueuePage+0x1cc>)
 80021fa:	885b      	ldrh	r3, [r3, #2]
 80021fc:	330a      	adds	r3, #10
 80021fe:	b29b      	uxth	r3, r3
 8002200:	4619      	mov	r1, r3
 8002202:	4610      	mov	r0, r2
 8002204:	f7fe ff08 	bl	8001018 <lcdSetCursor>
	lcdPrintf(backButton.label);
 8002208:	480c      	ldr	r0, [pc, #48]	@ (800223c <DrawQueuePage+0x1d0>)
 800220a:	f7fe fde9 	bl	8000de0 <lcdPrintf>
}
 800220e:	bf00      	nop
 8002210:	3744      	adds	r7, #68	@ 0x44
 8002212:	46bd      	mov	sp, r7
 8002214:	bd90      	pop	{r4, r7, pc}
 8002216:	bf00      	nop
 8002218:	0800feac 	.word	0x0800feac
 800221c:	20000010 	.word	0x20000010
 8002220:	20000008 	.word	0x20000008
 8002224:	0800febc 	.word	0x0800febc
 8002228:	20000000 	.word	0x20000000
 800222c:	200005b4 	.word	0x200005b4
 8002230:	200000dc 	.word	0x200000dc
 8002234:	200000e4 	.word	0x200000e4
 8002238:	200001b8 	.word	0x200001b8
 800223c:	200001c0 	.word	0x200001c0

08002240 <DrawProgressPage>:
 * @param: protocolTitle: display protocol being run
 * @param: rx_byte: current motor movement type
 * @param: rx_data: current motor movement info
 * @retval: none
 */
void DrawProgressPage(char protocolTitle[20], uint8_t rx_byte, char *rx_data) {
 8002240:	b590      	push	{r4, r7, lr}
 8002242:	b0d5      	sub	sp, #340	@ 0x154
 8002244:	af02      	add	r7, sp, #8
 8002246:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800224a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800224e:	6018      	str	r0, [r3, #0]
 8002250:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002254:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800225e:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8002262:	460a      	mov	r2, r1
 8002264:	701a      	strb	r2, [r3, #0]
	lcdFillRGB(COLOR_WHITE);
 8002266:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800226a:	f7fe fbe1 	bl	8000a30 <lcdFillRGB>

	//protocol title
	lcdSetCursor(100, 10);
 800226e:	210a      	movs	r1, #10
 8002270:	2064      	movs	r0, #100	@ 0x64
 8002272:	f7fe fed1 	bl	8001018 <lcdSetCursor>
	lcdPrintf(currentProtocolTitle);
 8002276:	48ca      	ldr	r0, [pc, #808]	@ (80025a0 <DrawProgressPage+0x360>)
 8002278:	f7fe fdb2 	bl	8000de0 <lcdPrintf>

	//bind
	if (rx_byte == 'B') {
 800227c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002280:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b42      	cmp	r3, #66	@ 0x42
 8002288:	f040 8142 	bne.w	8002510 <DrawProgressPage+0x2d0>
		//protocol type
		char protocolType[20] = "";
 800228c:	2300      	movs	r3, #0
 800228e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002292:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]
		sprintf(protocolType, "Bind");
 80022a0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022a4:	49bf      	ldr	r1, [pc, #764]	@ (80025a4 <DrawProgressPage+0x364>)
 80022a6:	4618      	mov	r0, r3
 80022a8:	f00c fdde 	bl	800ee68 <siprintf>
		lcdSetCursor(10, 30);
 80022ac:	211e      	movs	r1, #30
 80022ae:	200a      	movs	r0, #10
 80022b0:	f7fe feb2 	bl	8001018 <lcdSetCursor>
		lcdSetTextFont(&Font16);
 80022b4:	48bc      	ldr	r0, [pc, #752]	@ (80025a8 <DrawProgressPage+0x368>)
 80022b6:	f7fe fe1f 	bl	8000ef8 <lcdSetTextFont>
		lcdPrintf(protocolType);
 80022ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe fd8e 	bl	8000de0 <lcdPrintf>
		//lcdSetTextFont(&Font16);
		//speed
		char speed[20] = "";
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80022ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	605a      	str	r2, [r3, #4]
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	60da      	str	r2, [r3, #12]
		printf("start test\n");
 80022d8:	48b4      	ldr	r0, [pc, #720]	@ (80025ac <DrawProgressPage+0x36c>)
 80022da:	f00c fdbd 	bl	800ee58 <puts>
		uint32_t speedInt = ConvertCharsToInt('0', '0', rx_data[1]);
 80022de:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80022e2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	3301      	adds	r3, #1
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	2130      	movs	r1, #48	@ 0x30
 80022f0:	2030      	movs	r0, #48	@ 0x30
 80022f2:	f000 fae1 	bl	80028b8 <ConvertCharsToInt>
 80022f6:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
		sprintf(speed, "Speed: %d", speedInt);
 80022fa:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80022fe:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002302:	49ab      	ldr	r1, [pc, #684]	@ (80025b0 <DrawProgressPage+0x370>)
 8002304:	4618      	mov	r0, r3
 8002306:	f00c fdaf 	bl	800ee68 <siprintf>
		//printf("%d\n", speedInt);
		lcdSetCursor(10, 50);
 800230a:	2132      	movs	r1, #50	@ 0x32
 800230c:	200a      	movs	r0, #10
 800230e:	f7fe fe83 	bl	8001018 <lcdSetCursor>
		lcdPrintf(speed);
 8002312:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe fd62 	bl	8000de0 <lcdPrintf>
		//duration
		char duration[20] = "";
 800231c:	2300      	movs	r3, #0
 800231e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002322:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	609a      	str	r2, [r3, #8]
 800232e:	60da      	str	r2, [r3, #12]
		uint32_t durationInt = ConvertCharsToInt('0', rx_data[2], rx_data[3]);
 8002330:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002334:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	3302      	adds	r3, #2
 800233c:	7819      	ldrb	r1, [r3, #0]
 800233e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002342:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3303      	adds	r3, #3
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	2030      	movs	r0, #48	@ 0x30
 8002350:	f000 fab2 	bl	80028b8 <ConvertCharsToInt>
 8002354:	f8c7 0140 	str.w	r0, [r7, #320]	@ 0x140
		//sprintf(duration, "Duration: %c%c", rx_data[2], rx_data[3]);
		sprintf(duration, "Duration: %d", durationInt);
 8002358:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800235c:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8002360:	4994      	ldr	r1, [pc, #592]	@ (80025b4 <DrawProgressPage+0x374>)
 8002362:	4618      	mov	r0, r3
 8002364:	f00c fd80 	bl	800ee68 <siprintf>
		lcdSetCursor(10, 70);
 8002368:	2146      	movs	r1, #70	@ 0x46
 800236a:	200a      	movs	r0, #10
 800236c:	f7fe fe54 	bl	8001018 <lcdSetCursor>
		lcdPrintf(duration);
 8002370:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe fd33 	bl	8000de0 <lcdPrintf>
		//volume
		char volume[20] = "";
 800237a:	2300      	movs	r3, #0
 800237c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002380:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
		uint32_t volumeInt = ConvertCharsToInt(rx_data[4], rx_data[5],
 800238e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002392:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	3304      	adds	r3, #4
 800239a:	7818      	ldrb	r0, [r3, #0]
 800239c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80023a0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	3305      	adds	r3, #5
 80023a8:	7819      	ldrb	r1, [r3, #0]
				rx_data[6]);
 80023aa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80023ae:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	3306      	adds	r3, #6
		uint32_t volumeInt = ConvertCharsToInt(rx_data[4], rx_data[5],
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	f000 fa7d 	bl	80028b8 <ConvertCharsToInt>
 80023be:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
		//sprintf(volume, "Volume: %c%c%c", rx_data[4], rx_data[5], rx_data[6]);
		sprintf(volume, "Volume: %d", volumeInt);
 80023c2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80023c6:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80023ca:	497b      	ldr	r1, [pc, #492]	@ (80025b8 <DrawProgressPage+0x378>)
 80023cc:	4618      	mov	r0, r3
 80023ce:	f00c fd4b 	bl	800ee68 <siprintf>
		lcdSetCursor(10, 90);
 80023d2:	215a      	movs	r1, #90	@ 0x5a
 80023d4:	200a      	movs	r0, #10
 80023d6:	f7fe fe1f 	bl	8001018 <lcdSetCursor>
		lcdPrintf(volume);
 80023da:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe fcfe 	bl	8000de0 <lcdPrintf>
		//depth
		char depth[20] = "";
 80023e4:	2300      	movs	r3, #0
 80023e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80023ea:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	609a      	str	r2, [r3, #8]
 80023f6:	60da      	str	r2, [r3, #12]
		uint32_t depthInt = ConvertCharsToInt(rx_data[7], rx_data[8],
 80023f8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80023fc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	3307      	adds	r3, #7
 8002404:	7818      	ldrb	r0, [r3, #0]
 8002406:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800240a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3308      	adds	r3, #8
 8002412:	7819      	ldrb	r1, [r3, #0]
				rx_data[9]);
 8002414:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002418:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	3309      	adds	r3, #9
		uint32_t depthInt = ConvertCharsToInt(rx_data[7], rx_data[8],
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	f000 fa48 	bl	80028b8 <ConvertCharsToInt>
 8002428:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138
		//sprintf(depth, "Depth: %c%c%c", rx_data[7], rx_data[8], rx_data[9]);
		sprintf(depth, "Depth: %d", depthInt);
 800242c:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002430:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8002434:	4961      	ldr	r1, [pc, #388]	@ (80025bc <DrawProgressPage+0x37c>)
 8002436:	4618      	mov	r0, r3
 8002438:	f00c fd16 	bl	800ee68 <siprintf>
		lcdSetCursor(10, 110);
 800243c:	216e      	movs	r1, #110	@ 0x6e
 800243e:	200a      	movs	r0, #10
 8002440:	f7fe fdea 	bl	8001018 <lcdSetCursor>
		lcdPrintf(depth);
 8002444:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe fcc9 	bl	8000de0 <lcdPrintf>
		//pauseDuration
		char pauseDuration[20] = "";
 800244e:	2300      	movs	r3, #0
 8002450:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002454:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
		uint32_t pauseInt = ConvertCharsToInt('0', rx_data[10], rx_data[11]);
 8002462:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002466:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	330a      	adds	r3, #10
 800246e:	7819      	ldrb	r1, [r3, #0]
 8002470:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002474:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	330b      	adds	r3, #11
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	2030      	movs	r0, #48	@ 0x30
 8002482:	f000 fa19 	bl	80028b8 <ConvertCharsToInt>
 8002486:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
		sprintf(pauseDuration, "PauseDuration: %d", pauseInt);
 800248a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800248e:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8002492:	494b      	ldr	r1, [pc, #300]	@ (80025c0 <DrawProgressPage+0x380>)
 8002494:	4618      	mov	r0, r3
 8002496:	f00c fce7 	bl	800ee68 <siprintf>
		lcdSetCursor(10, 130);
 800249a:	2182      	movs	r1, #130	@ 0x82
 800249c:	200a      	movs	r0, #10
 800249e:	f7fe fdbb 	bl	8001018 <lcdSetCursor>
		lcdPrintf(pauseDuration);
 80024a2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fc9a 	bl	8000de0 <lcdPrintf>
		//repeat
		char repeat[20] = "";
 80024ac:	2300      	movs	r3, #0
 80024ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80024b2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	60da      	str	r2, [r3, #12]
		uint32_t repeatInt = ConvertCharsToInt('0', rx_data[12], rx_data[13]);
 80024c0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80024c4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	330c      	adds	r3, #12
 80024cc:	7819      	ldrb	r1, [r3, #0]
 80024ce:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80024d2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	330d      	adds	r3, #13
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	2030      	movs	r0, #48	@ 0x30
 80024e0:	f000 f9ea 	bl	80028b8 <ConvertCharsToInt>
 80024e4:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
		//sprintf(repeat, "Repeat: %c%c", rx_data[11], rx_data[12]);
		sprintf(repeat, "Repeat: %d/%d", currentRepeatNum, repeatInt);
 80024e8:	4b36      	ldr	r3, [pc, #216]	@ (80025c4 <DrawProgressPage+0x384>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 80024f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80024f8:	4933      	ldr	r1, [pc, #204]	@ (80025c8 <DrawProgressPage+0x388>)
 80024fa:	f00c fcb5 	bl	800ee68 <siprintf>
		lcdSetCursor(10, 150);
 80024fe:	2196      	movs	r1, #150	@ 0x96
 8002500:	200a      	movs	r0, #10
 8002502:	f7fe fd89 	bl	8001018 <lcdSetCursor>
		lcdPrintf(repeat);
 8002506:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe fc68 	bl	8000de0 <lcdPrintf>
	}

	//pause
	if (rx_byte == 'P') {
 8002510:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002514:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b50      	cmp	r3, #80	@ 0x50
 800251c:	d15c      	bne.n	80025d8 <DrawProgressPage+0x398>
		char protocolType[20] = "";
 800251e:	2300      	movs	r3, #0
 8002520:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002524:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
		sprintf(protocolType, "Pause");
 8002532:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002536:	4925      	ldr	r1, [pc, #148]	@ (80025cc <DrawProgressPage+0x38c>)
 8002538:	4618      	mov	r0, r3
 800253a:	f00c fc95 	bl	800ee68 <siprintf>
		lcdSetCursor(60, 30);
 800253e:	211e      	movs	r1, #30
 8002540:	203c      	movs	r0, #60	@ 0x3c
 8002542:	f7fe fd69 	bl	8001018 <lcdSetCursor>
		lcdSetTextFont(&Font20);
 8002546:	4822      	ldr	r0, [pc, #136]	@ (80025d0 <DrawProgressPage+0x390>)
 8002548:	f7fe fcd6 	bl	8000ef8 <lcdSetTextFont>
		lcdPrintf(protocolType);
 800254c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe fc45 	bl	8000de0 <lcdPrintf>
		lcdSetTextFont(&Font16);
 8002556:	4814      	ldr	r0, [pc, #80]	@ (80025a8 <DrawProgressPage+0x368>)
 8002558:	f7fe fcce 	bl	8000ef8 <lcdSetTextFont>
		//duration
		char duration[20] = "";
 800255c:	2300      	movs	r3, #0
 800255e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002560:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
		sprintf(duration, "Duration: %c", rx_data[1]);
 800256e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002572:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3301      	adds	r3, #1
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002582:	4914      	ldr	r1, [pc, #80]	@ (80025d4 <DrawProgressPage+0x394>)
 8002584:	4618      	mov	r0, r3
 8002586:	f00c fc6f 	bl	800ee68 <siprintf>
		lcdSetCursor(60, 50);
 800258a:	2132      	movs	r1, #50	@ 0x32
 800258c:	203c      	movs	r0, #60	@ 0x3c
 800258e:	f7fe fd43 	bl	8001018 <lcdSetCursor>
		lcdPrintf(duration);
 8002592:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fc22 	bl	8000de0 <lcdPrintf>
 800259c:	e01c      	b.n	80025d8 <DrawProgressPage+0x398>
 800259e:	bf00      	nop
 80025a0:	20000590 	.word	0x20000590
 80025a4:	0800fec4 	.word	0x0800fec4
 80025a8:	20000008 	.word	0x20000008
 80025ac:	0800fecc 	.word	0x0800fecc
 80025b0:	0800fed8 	.word	0x0800fed8
 80025b4:	0800fee4 	.word	0x0800fee4
 80025b8:	0800fef4 	.word	0x0800fef4
 80025bc:	0800ff00 	.word	0x0800ff00
 80025c0:	0800ff0c 	.word	0x0800ff0c
 80025c4:	20000292 	.word	0x20000292
 80025c8:	0800fe68 	.word	0x0800fe68
 80025cc:	0800ff20 	.word	0x0800ff20
 80025d0:	20000010 	.word	0x20000010
 80025d4:	0800ff28 	.word	0x0800ff28
	}

	//move
	if (rx_byte == 'M') {
 80025d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80025dc:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b4d      	cmp	r3, #77	@ 0x4d
 80025e4:	f040 80ca 	bne.w	800277c <DrawProgressPage+0x53c>
		char protocolType[20] = "";
 80025e8:	2300      	movs	r3, #0
 80025ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80025ec:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
		sprintf(protocolType, "Magnetize");
 80025fa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80025fe:	4974      	ldr	r1, [pc, #464]	@ (80027d0 <DrawProgressPage+0x590>)
 8002600:	4618      	mov	r0, r3
 8002602:	f00c fc31 	bl	800ee68 <siprintf>
		lcdSetCursor(60, 30);
 8002606:	211e      	movs	r1, #30
 8002608:	203c      	movs	r0, #60	@ 0x3c
 800260a:	f7fe fd05 	bl	8001018 <lcdSetCursor>
		lcdSetTextFont(&Font20);
 800260e:	4871      	ldr	r0, [pc, #452]	@ (80027d4 <DrawProgressPage+0x594>)
 8002610:	f7fe fc72 	bl	8000ef8 <lcdSetTextFont>
		lcdPrintf(protocolType);
 8002614:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002618:	4618      	mov	r0, r3
 800261a:	f7fe fbe1 	bl	8000de0 <lcdPrintf>
		lcdSetTextFont(&Font16);
 800261e:	486e      	ldr	r0, [pc, #440]	@ (80027d8 <DrawProgressPage+0x598>)
 8002620:	f7fe fc6a 	bl	8000ef8 <lcdSetTextFont>
		//init surface time
		char initTime[20] = "";
 8002624:	2300      	movs	r3, #0
 8002626:	653b      	str	r3, [r7, #80]	@ 0x50
 8002628:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	60da      	str	r2, [r3, #12]
		uint32_t initTimeInt = ConvertCharsToInt(rx_data[1], rx_data[2],
 8002636:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800263a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	3301      	adds	r3, #1
 8002642:	7818      	ldrb	r0, [r3, #0]
 8002644:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002648:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	3302      	adds	r3, #2
 8002650:	7819      	ldrb	r1, [r3, #0]
				rx_data[3]);
 8002652:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002656:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	3303      	adds	r3, #3
		uint32_t initTimeInt = ConvertCharsToInt(rx_data[1], rx_data[2],
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	f000 f929 	bl	80028b8 <ConvertCharsToInt>
 8002666:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
		sprintf(initTime, "Init Time: %d", initTimeInt);
 800266a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800266e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8002672:	495a      	ldr	r1, [pc, #360]	@ (80027dc <DrawProgressPage+0x59c>)
 8002674:	4618      	mov	r0, r3
 8002676:	f00c fbf7 	bl	800ee68 <siprintf>
		lcdSetCursor(60, 50);
 800267a:	2132      	movs	r1, #50	@ 0x32
 800267c:	203c      	movs	r0, #60	@ 0x3c
 800267e:	f7fe fccb 	bl	8001018 <lcdSetCursor>
		lcdPrintf(initTime);
 8002682:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe fbaa 	bl	8000de0 <lcdPrintf>
		//speed
		char speed[20] = "";
 800268c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002690:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	3304      	adds	r3, #4
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	609a      	str	r2, [r3, #8]
 80026a2:	60da      	str	r2, [r3, #12]
		sprintf(speed, "Speed: %d", ConvertCharsToInt('0', '0', rx_data[4]));
 80026a4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80026a8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	3304      	adds	r3, #4
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	2130      	movs	r1, #48	@ 0x30
 80026b6:	2030      	movs	r0, #48	@ 0x30
 80026b8:	f000 f8fe 	bl	80028b8 <ConvertCharsToInt>
 80026bc:	4602      	mov	r2, r0
 80026be:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80026c2:	4947      	ldr	r1, [pc, #284]	@ (80027e0 <DrawProgressPage+0x5a0>)
 80026c4:	4618      	mov	r0, r3
 80026c6:	f00c fbcf 	bl	800ee68 <siprintf>
		lcdSetCursor(60, 70);
 80026ca:	2146      	movs	r1, #70	@ 0x46
 80026cc:	203c      	movs	r0, #60	@ 0x3c
 80026ce:	f7fe fca3 	bl	8001018 <lcdSetCursor>
		lcdPrintf(speed);
 80026d2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fb82 	bl	8000de0 <lcdPrintf>
		//Stop at Sequences
		char stopNumber[20] = "";
 80026dc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80026e0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	60da      	str	r2, [r3, #12]
		sprintf(stopNumber, "Stop Number: %d",
				ConvertCharsToInt('0', '0', rx_data[5]));
 80026f4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80026f8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	3305      	adds	r3, #5
		sprintf(stopNumber, "Stop Number: %d",
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	2130      	movs	r1, #48	@ 0x30
 8002706:	2030      	movs	r0, #48	@ 0x30
 8002708:	f000 f8d6 	bl	80028b8 <ConvertCharsToInt>
 800270c:	4602      	mov	r2, r0
 800270e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002712:	4934      	ldr	r1, [pc, #208]	@ (80027e4 <DrawProgressPage+0x5a4>)
 8002714:	4618      	mov	r0, r3
 8002716:	f00c fba7 	bl	800ee68 <siprintf>
		lcdSetCursor(60, 90);
 800271a:	215a      	movs	r1, #90	@ 0x5a
 800271c:	203c      	movs	r0, #60	@ 0x3c
 800271e:	f7fe fc7b 	bl	8001018 <lcdSetCursor>
		lcdPrintf(stopNumber);
 8002722:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fb5a 	bl	8000de0 <lcdPrintf>
		//Sequence Pause Time
		char sequencePause[20] = "";
 800272c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002730:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	3304      	adds	r3, #4
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]
 8002740:	609a      	str	r2, [r3, #8]
 8002742:	60da      	str	r2, [r3, #12]
		sprintf(sequencePause, "Sequence Pause: %d",
				ConvertCharsToInt('0', '0', rx_data[6]));
 8002744:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002748:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	3306      	adds	r3, #6
		sprintf(sequencePause, "Sequence Pause: %d",
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	2130      	movs	r1, #48	@ 0x30
 8002756:	2030      	movs	r0, #48	@ 0x30
 8002758:	f000 f8ae 	bl	80028b8 <ConvertCharsToInt>
 800275c:	4602      	mov	r2, r0
 800275e:	f107 0314 	add.w	r3, r7, #20
 8002762:	4921      	ldr	r1, [pc, #132]	@ (80027e8 <DrawProgressPage+0x5a8>)
 8002764:	4618      	mov	r0, r3
 8002766:	f00c fb7f 	bl	800ee68 <siprintf>
		lcdSetCursor(60, 110);
 800276a:	216e      	movs	r1, #110	@ 0x6e
 800276c:	203c      	movs	r0, #60	@ 0x3c
 800276e:	f7fe fc53 	bl	8001018 <lcdSetCursor>
		lcdPrintf(sequencePause);
 8002772:	f107 0314 	add.w	r3, r7, #20
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fb32 	bl	8000de0 <lcdPrintf>
	//time remaining in protocol
//	char protocolTimeRemaining[25] = "";
//	sprintf(protocolTimeRemaining, "Remaining Time: %d", protocolTimer);
//	lcdSetCursor(60, 130);
//	lcdPrintf(protocolTimeRemaining);
	lcdSetCursor(10, 170);
 800277c:	21aa      	movs	r1, #170	@ 0xaa
 800277e:	200a      	movs	r0, #10
 8002780:	f7fe fc4a 	bl	8001018 <lcdSetCursor>
	DrawCountdownTime();
 8002784:	f000 f836 	bl	80027f4 <DrawCountdownTime>

	// Draw "Stop" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8002788:	4b18      	ldr	r3, [pc, #96]	@ (80027ec <DrawProgressPage+0x5ac>)
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	b218      	sxth	r0, r3
 800278e:	4b17      	ldr	r3, [pc, #92]	@ (80027ec <DrawProgressPage+0x5ac>)
 8002790:	885b      	ldrh	r3, [r3, #2]
 8002792:	b219      	sxth	r1, r3
 8002794:	4b15      	ldr	r3, [pc, #84]	@ (80027ec <DrawProgressPage+0x5ac>)
 8002796:	889b      	ldrh	r3, [r3, #4]
 8002798:	b21a      	sxth	r2, r3
 800279a:	4b14      	ldr	r3, [pc, #80]	@ (80027ec <DrawProgressPage+0x5ac>)
 800279c:	88db      	ldrh	r3, [r3, #6]
 800279e:	b21b      	sxth	r3, r3
 80027a0:	2400      	movs	r4, #0
 80027a2:	9400      	str	r4, [sp, #0]
 80027a4:	f7fe fa28 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 80027a8:	4b10      	ldr	r3, [pc, #64]	@ (80027ec <DrawProgressPage+0x5ac>)
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	330a      	adds	r3, #10
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	4b0e      	ldr	r3, [pc, #56]	@ (80027ec <DrawProgressPage+0x5ac>)
 80027b2:	885b      	ldrh	r3, [r3, #2]
 80027b4:	330a      	adds	r3, #10
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	4619      	mov	r1, r3
 80027ba:	4610      	mov	r0, r2
 80027bc:	f7fe fc2c 	bl	8001018 <lcdSetCursor>
	lcdPrintf("Stop");
 80027c0:	480b      	ldr	r0, [pc, #44]	@ (80027f0 <DrawProgressPage+0x5b0>)
 80027c2:	f7fe fb0d 	bl	8000de0 <lcdPrintf>
}
 80027c6:	bf00      	nop
 80027c8:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd90      	pop	{r4, r7, pc}
 80027d0:	0800ff38 	.word	0x0800ff38
 80027d4:	20000010 	.word	0x20000010
 80027d8:	20000008 	.word	0x20000008
 80027dc:	0800ff44 	.word	0x0800ff44
 80027e0:	0800fed8 	.word	0x0800fed8
 80027e4:	0800ff54 	.word	0x0800ff54
 80027e8:	0800ff64 	.word	0x0800ff64
 80027ec:	200001b8 	.word	0x200001b8
 80027f0:	0800ff78 	.word	0x0800ff78

080027f4 <DrawCountdownTime>:

//dont want to update the whole progress page, just the countdown timer
void DrawCountdownTime(void) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af00      	add	r7, sp, #0
	//time remaining in protocol
	uint8_t minutes = protocolTimer / 60;
 80027fa:	4b2b      	ldr	r3, [pc, #172]	@ (80028a8 <DrawCountdownTime+0xb4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a2b      	ldr	r2, [pc, #172]	@ (80028ac <DrawCountdownTime+0xb8>)
 8002800:	fb82 1203 	smull	r1, r2, r2, r3
 8002804:	441a      	add	r2, r3
 8002806:	1152      	asrs	r2, r2, #5
 8002808:	17db      	asrs	r3, r3, #31
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	77fb      	strb	r3, [r7, #31]
	uint8_t seconds = protocolTimer % 60;
 800280e:	4b26      	ldr	r3, [pc, #152]	@ (80028a8 <DrawCountdownTime+0xb4>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	4b26      	ldr	r3, [pc, #152]	@ (80028ac <DrawCountdownTime+0xb8>)
 8002814:	fb83 1302 	smull	r1, r3, r3, r2
 8002818:	4413      	add	r3, r2
 800281a:	1159      	asrs	r1, r3, #5
 800281c:	17d3      	asrs	r3, r2, #31
 800281e:	1ac9      	subs	r1, r1, r3
 8002820:	460b      	mov	r3, r1
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	1a5b      	subs	r3, r3, r1
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	1ad1      	subs	r1, r2, r3
 800282a:	460b      	mov	r3, r1
 800282c:	77bb      	strb	r3, [r7, #30]
	char protocolTimeRemaining[25] = "";
 800282e:	2300      	movs	r3, #0
 8002830:	607b      	str	r3, [r7, #4]
 8002832:	f107 0308 	add.w	r3, r7, #8
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	60da      	str	r2, [r3, #12]
 8002840:	611a      	str	r2, [r3, #16]
 8002842:	751a      	strb	r2, [r3, #20]
	if (seconds < 10) {
 8002844:	7fbb      	ldrb	r3, [r7, #30]
 8002846:	2b09      	cmp	r3, #9
 8002848:	d80c      	bhi.n	8002864 <DrawCountdownTime+0x70>
		memset(protocolTimeRemaining, 0, 25); // Sets all elements of buffer to 0
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	2219      	movs	r2, #25
 800284e:	2100      	movs	r1, #0
 8002850:	4618      	mov	r0, r3
 8002852:	f00c fc21 	bl	800f098 <memset>
		sprintf(protocolTimeRemaining, "Remaining Time: %d:0%d", minutes,
 8002856:	7ffa      	ldrb	r2, [r7, #31]
 8002858:	7fbb      	ldrb	r3, [r7, #30]
 800285a:	1d38      	adds	r0, r7, #4
 800285c:	4914      	ldr	r1, [pc, #80]	@ (80028b0 <DrawCountdownTime+0xbc>)
 800285e:	f00c fb03 	bl	800ee68 <siprintf>
 8002862:	e00b      	b.n	800287c <DrawCountdownTime+0x88>
				seconds);
	} else {
		memset(protocolTimeRemaining, 0, 25); // Sets all elements of buffer to 0
 8002864:	1d3b      	adds	r3, r7, #4
 8002866:	2219      	movs	r2, #25
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f00c fc14 	bl	800f098 <memset>
		sprintf(protocolTimeRemaining, "Remaining Time: %d:%d", minutes,
 8002870:	7ffa      	ldrb	r2, [r7, #31]
 8002872:	7fbb      	ldrb	r3, [r7, #30]
 8002874:	1d38      	adds	r0, r7, #4
 8002876:	490f      	ldr	r1, [pc, #60]	@ (80028b4 <DrawCountdownTime+0xc0>)
 8002878:	f00c faf6 	bl	800ee68 <siprintf>
				seconds);
	}
	protocolTimeRemaining[strlen(protocolTimeRemaining)] = NULL_CHAR;
 800287c:	1d3b      	adds	r3, r7, #4
 800287e:	4618      	mov	r0, r3
 8002880:	f7fd fcb6 	bl	80001f0 <strlen>
 8002884:	4603      	mov	r3, r0
 8002886:	3320      	adds	r3, #32
 8002888:	443b      	add	r3, r7
 800288a:	2200      	movs	r2, #0
 800288c:	f803 2c1c 	strb.w	r2, [r3, #-28]
	lcdSetCursor(10, 170);
 8002890:	21aa      	movs	r1, #170	@ 0xaa
 8002892:	200a      	movs	r0, #10
 8002894:	f7fe fbc0 	bl	8001018 <lcdSetCursor>
	lcdPrintf(protocolTimeRemaining);
 8002898:	1d3b      	adds	r3, r7, #4
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe faa0 	bl	8000de0 <lcdPrintf>
}
 80028a0:	bf00      	nop
 80028a2:	3720      	adds	r7, #32
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000574 	.word	0x20000574
 80028ac:	88888889 	.word	0x88888889
 80028b0:	0800ff80 	.word	0x0800ff80
 80028b4:	0800ff98 	.word	0x0800ff98

080028b8 <ConvertCharsToInt>:
 * @param: x: 100's place of the digit
 * @param: y: 10's place of the digit
 * @param: z: 1's place of the digit
 * @retval: converted integer
 */
uint32_t ConvertCharsToInt(char x, char y, char z) {
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
 80028c2:	460b      	mov	r3, r1
 80028c4:	71bb      	strb	r3, [r7, #6]
 80028c6:	4613      	mov	r3, r2
 80028c8:	717b      	strb	r3, [r7, #5]
	uint32_t returnVal = ((x - '0') * 100) + ((y - '0') * 10) + (z - '0');
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	3b30      	subs	r3, #48	@ 0x30
 80028ce:	2264      	movs	r2, #100	@ 0x64
 80028d0:	fb02 f103 	mul.w	r1, r2, r3
 80028d4:	79bb      	ldrb	r3, [r7, #6]
 80028d6:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	18ca      	adds	r2, r1, r3
 80028e4:	797b      	ldrb	r3, [r7, #5]
 80028e6:	3b30      	subs	r3, #48	@ 0x30
 80028e8:	4413      	add	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
	return returnVal;
 80028ec:	68fb      	ldr	r3, [r7, #12]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <DrawProtocolInfoPage>:
 * @param: protocolTitle: display protocol being run
 * @param: rx_byte: current motor movement type
 * @param: rx_data: current motor movement info
 * @retval: none
 */
void DrawProtocolInfoPage(uint32_t page_num, uint32_t offset) {
 80028fc:	b590      	push	{r4, r7, lr}
 80028fe:	b08b      	sub	sp, #44	@ 0x2c
 8002900:	af02      	add	r7, sp, #8
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
	lcdFillRGB(COLOR_WHITE);
 8002906:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800290a:	f7fe f891 	bl	8000a30 <lcdFillRGB>

	//protocol title
	lcdSetCursor(100, 10);
 800290e:	210a      	movs	r1, #10
 8002910:	2064      	movs	r0, #100	@ 0x64
 8002912:	f7fe fb81 	bl	8001018 <lcdSetCursor>
	char protocolTitle[20] = "";
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	f107 030c 	add.w	r3, r7, #12
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	609a      	str	r2, [r3, #8]
 8002926:	60da      	str	r2, [r3, #12]
	uint32_t current_flash_address = get_sector_address(
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f001 fa65 	bl	8003df8 <get_sector_address>
 800292e:	4602      	mov	r2, r0
			page_num) + offset * PROTOCOL_SIZE;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	f241 7170 	movw	r1, #6000	@ 0x1770
 8002936:	fb01 f303 	mul.w	r3, r1, r3
	uint32_t current_flash_address = get_sector_address(
 800293a:	4413      	add	r3, r2
 800293c:	61fb      	str	r3, [r7, #28]
	read_from_flash(protocolTitle, current_flash_address);
 800293e:	f107 0308 	add.w	r3, r7, #8
 8002942:	69f9      	ldr	r1, [r7, #28]
 8002944:	4618      	mov	r0, r3
 8002946:	f000 fd7e 	bl	8003446 <read_from_flash>
	lcdPrintf(protocolTitle);
 800294a:	f107 0308 	add.w	r3, r7, #8
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe fa46 	bl	8000de0 <lcdPrintf>

	//get the next protocol line
	current_flash_address += MAX_LINE_LENGTH;
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	3320      	adds	r3, #32
 8002958:	61fb      	str	r3, [r7, #28]
//		lcdSetCursor(60, 110);
//		lcdPrintf(sequencePause);
//	}

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 800295a:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <DrawProtocolInfoPage+0xa4>)
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	b218      	sxth	r0, r3
 8002960:	4b0f      	ldr	r3, [pc, #60]	@ (80029a0 <DrawProtocolInfoPage+0xa4>)
 8002962:	885b      	ldrh	r3, [r3, #2]
 8002964:	b219      	sxth	r1, r3
 8002966:	4b0e      	ldr	r3, [pc, #56]	@ (80029a0 <DrawProtocolInfoPage+0xa4>)
 8002968:	889b      	ldrh	r3, [r3, #4]
 800296a:	b21a      	sxth	r2, r3
 800296c:	4b0c      	ldr	r3, [pc, #48]	@ (80029a0 <DrawProtocolInfoPage+0xa4>)
 800296e:	88db      	ldrh	r3, [r3, #6]
 8002970:	b21b      	sxth	r3, r3
 8002972:	2400      	movs	r4, #0
 8002974:	9400      	str	r4, [sp, #0]
 8002976:	f7fe f93f 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 800297a:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <DrawProtocolInfoPage+0xa4>)
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	330a      	adds	r3, #10
 8002980:	b29a      	uxth	r2, r3
 8002982:	4b07      	ldr	r3, [pc, #28]	@ (80029a0 <DrawProtocolInfoPage+0xa4>)
 8002984:	885b      	ldrh	r3, [r3, #2]
 8002986:	330a      	adds	r3, #10
 8002988:	b29b      	uxth	r3, r3
 800298a:	4619      	mov	r1, r3
 800298c:	4610      	mov	r0, r2
 800298e:	f7fe fb43 	bl	8001018 <lcdSetCursor>
	lcdPrintf(backButton.label);
 8002992:	4804      	ldr	r0, [pc, #16]	@ (80029a4 <DrawProtocolInfoPage+0xa8>)
 8002994:	f7fe fa24 	bl	8000de0 <lcdPrintf>
}
 8002998:	bf00      	nop
 800299a:	3724      	adds	r7, #36	@ 0x24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd90      	pop	{r4, r7, pc}
 80029a0:	200001b8 	.word	0x200001b8
 80029a4:	200001c0 	.word	0x200001c0

080029a8 <DrawStopPage>:

void DrawStopPage(void) {
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af02      	add	r7, sp, #8
	lcdFillRGB(COLOR_WHITE);
 80029ae:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80029b2:	f7fe f83d 	bl	8000a30 <lcdFillRGB>

	//display confirmation text
	lcdSetCursor(100, 10);
 80029b6:	210a      	movs	r1, #10
 80029b8:	2064      	movs	r0, #100	@ 0x64
 80029ba:	f7fe fb2d 	bl	8001018 <lcdSetCursor>
	lcdSetTextFont(&Font20);
 80029be:	4825      	ldr	r0, [pc, #148]	@ (8002a54 <DrawStopPage+0xac>)
 80029c0:	f7fe fa9a 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf("Stop?");
 80029c4:	4824      	ldr	r0, [pc, #144]	@ (8002a58 <DrawStopPage+0xb0>)
 80029c6:	f7fe fa0b 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 80029ca:	4824      	ldr	r0, [pc, #144]	@ (8002a5c <DrawStopPage+0xb4>)
 80029cc:	f7fe fa94 	bl	8000ef8 <lcdSetTextFont>

	//Draw "Yes" button
	lcdDrawRect(yesButton.x, yesButton.y, yesButton.w, yesButton.h,
 80029d0:	4b23      	ldr	r3, [pc, #140]	@ (8002a60 <DrawStopPage+0xb8>)
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	b218      	sxth	r0, r3
 80029d6:	4b22      	ldr	r3, [pc, #136]	@ (8002a60 <DrawStopPage+0xb8>)
 80029d8:	885b      	ldrh	r3, [r3, #2]
 80029da:	b219      	sxth	r1, r3
 80029dc:	4b20      	ldr	r3, [pc, #128]	@ (8002a60 <DrawStopPage+0xb8>)
 80029de:	889b      	ldrh	r3, [r3, #4]
 80029e0:	b21a      	sxth	r2, r3
 80029e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002a60 <DrawStopPage+0xb8>)
 80029e4:	88db      	ldrh	r3, [r3, #6]
 80029e6:	b21b      	sxth	r3, r3
 80029e8:	2400      	movs	r4, #0
 80029ea:	9400      	str	r4, [sp, #0]
 80029ec:	f7fe f904 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(yesButton.x + 10, yesButton.y + 10);
 80029f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a60 <DrawStopPage+0xb8>)
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	330a      	adds	r3, #10
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	4b19      	ldr	r3, [pc, #100]	@ (8002a60 <DrawStopPage+0xb8>)
 80029fa:	885b      	ldrh	r3, [r3, #2]
 80029fc:	330a      	adds	r3, #10
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	4619      	mov	r1, r3
 8002a02:	4610      	mov	r0, r2
 8002a04:	f7fe fb08 	bl	8001018 <lcdSetCursor>
	lcdPrintf(yesButton.label);
 8002a08:	4816      	ldr	r0, [pc, #88]	@ (8002a64 <DrawStopPage+0xbc>)
 8002a0a:	f7fe f9e9 	bl	8000de0 <lcdPrintf>

	//Draw "No" button
	lcdDrawRect(noButton.x, noButton.y, noButton.w, noButton.h, COLOR_BLACK);
 8002a0e:	4b16      	ldr	r3, [pc, #88]	@ (8002a68 <DrawStopPage+0xc0>)
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	b218      	sxth	r0, r3
 8002a14:	4b14      	ldr	r3, [pc, #80]	@ (8002a68 <DrawStopPage+0xc0>)
 8002a16:	885b      	ldrh	r3, [r3, #2]
 8002a18:	b219      	sxth	r1, r3
 8002a1a:	4b13      	ldr	r3, [pc, #76]	@ (8002a68 <DrawStopPage+0xc0>)
 8002a1c:	889b      	ldrh	r3, [r3, #4]
 8002a1e:	b21a      	sxth	r2, r3
 8002a20:	4b11      	ldr	r3, [pc, #68]	@ (8002a68 <DrawStopPage+0xc0>)
 8002a22:	88db      	ldrh	r3, [r3, #6]
 8002a24:	b21b      	sxth	r3, r3
 8002a26:	2400      	movs	r4, #0
 8002a28:	9400      	str	r4, [sp, #0]
 8002a2a:	f7fe f8e5 	bl	8000bf8 <lcdDrawRect>
	lcdSetCursor(noButton.x + 10, noButton.y + 10);
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a68 <DrawStopPage+0xc0>)
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	330a      	adds	r3, #10
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	4b0c      	ldr	r3, [pc, #48]	@ (8002a68 <DrawStopPage+0xc0>)
 8002a38:	885b      	ldrh	r3, [r3, #2]
 8002a3a:	330a      	adds	r3, #10
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4610      	mov	r0, r2
 8002a42:	f7fe fae9 	bl	8001018 <lcdSetCursor>
	lcdPrintf(noButton.label);
 8002a46:	4809      	ldr	r0, [pc, #36]	@ (8002a6c <DrawStopPage+0xc4>)
 8002a48:	f7fe f9ca 	bl	8000de0 <lcdPrintf>
}
 8002a4c:	bf00      	nop
 8002a4e:	3704      	adds	r7, #4
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd90      	pop	{r4, r7, pc}
 8002a54:	20000010 	.word	0x20000010
 8002a58:	0800ffb0 	.word	0x0800ffb0
 8002a5c:	20000008 	.word	0x20000008
 8002a60:	20000210 	.word	0x20000210
 8002a64:	20000218 	.word	0x20000218
 8002a68:	2000023c 	.word	0x2000023c
 8002a6c:	20000244 	.word	0x20000244

08002a70 <DrawPageFinish>:

void DrawPageFinish(void) {
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af02      	add	r7, sp, #8
	lcdFillRGB(COLOR_WHITE);
 8002a76:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002a7a:	f7fd ffd9 	bl	8000a30 <lcdFillRGB>

	//Draw "Success!" box
	lcdSetCursor(selectButton.x + 10, selectButton.y + 10);
 8002a7e:	4b19      	ldr	r3, [pc, #100]	@ (8002ae4 <DrawPageFinish+0x74>)
 8002a80:	881b      	ldrh	r3, [r3, #0]
 8002a82:	330a      	adds	r3, #10
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	4b17      	ldr	r3, [pc, #92]	@ (8002ae4 <DrawPageFinish+0x74>)
 8002a88:	885b      	ldrh	r3, [r3, #2]
 8002a8a:	330a      	adds	r3, #10
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4610      	mov	r0, r2
 8002a92:	f7fe fac1 	bl	8001018 <lcdSetCursor>
	lcdPrintf("Success!");
 8002a96:	4814      	ldr	r0, [pc, #80]	@ (8002ae8 <DrawPageFinish+0x78>)
 8002a98:	f7fe f9a2 	bl	8000de0 <lcdPrintf>

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8002a9c:	4b13      	ldr	r3, [pc, #76]	@ (8002aec <DrawPageFinish+0x7c>)
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	b218      	sxth	r0, r3
 8002aa2:	4b12      	ldr	r3, [pc, #72]	@ (8002aec <DrawPageFinish+0x7c>)
 8002aa4:	885b      	ldrh	r3, [r3, #2]
 8002aa6:	b219      	sxth	r1, r3
 8002aa8:	4b10      	ldr	r3, [pc, #64]	@ (8002aec <DrawPageFinish+0x7c>)
 8002aaa:	889b      	ldrh	r3, [r3, #4]
 8002aac:	b21a      	sxth	r2, r3
 8002aae:	4b0f      	ldr	r3, [pc, #60]	@ (8002aec <DrawPageFinish+0x7c>)
 8002ab0:	88db      	ldrh	r3, [r3, #6]
 8002ab2:	b21b      	sxth	r3, r3
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	9400      	str	r4, [sp, #0]
 8002ab8:	f7fe f89e 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 8002abc:	4b0b      	ldr	r3, [pc, #44]	@ (8002aec <DrawPageFinish+0x7c>)
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	330a      	adds	r3, #10
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	4b09      	ldr	r3, [pc, #36]	@ (8002aec <DrawPageFinish+0x7c>)
 8002ac6:	885b      	ldrh	r3, [r3, #2]
 8002ac8:	330a      	adds	r3, #10
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	4619      	mov	r1, r3
 8002ace:	4610      	mov	r0, r2
 8002ad0:	f7fe faa2 	bl	8001018 <lcdSetCursor>
	lcdPrintf("Done");
 8002ad4:	4806      	ldr	r0, [pc, #24]	@ (8002af0 <DrawPageFinish+0x80>)
 8002ad6:	f7fe f983 	bl	8000de0 <lcdPrintf>
}
 8002ada:	bf00      	nop
 8002adc:	3704      	adds	r7, #4
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd90      	pop	{r4, r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000160 	.word	0x20000160
 8002ae8:	0800ffb8 	.word	0x0800ffb8
 8002aec:	200001b8 	.word	0x200001b8
 8002af0:	0800ffc4 	.word	0x0800ffc4

08002af4 <handleTouch>:

uint8_t handleTouch() {
 8002af4:	b590      	push	{r4, r7, lr}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
	static uint8_t protocol_num;
	static uint8_t protocol_offset = 0;
	uint16_t x = 0, y = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	80fb      	strh	r3, [r7, #6]
 8002afe:	2300      	movs	r3, #0
 8002b00:	80bb      	strh	r3, [r7, #4]
	if (!XPT2046_TouchGetCoordinates(&x, &y)) {
 8002b02:	1d3a      	adds	r2, r7, #4
 8002b04:	1dbb      	adds	r3, r7, #6
 8002b06:	4611      	mov	r1, r2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fd fd69 	bl	80005e0 <XPT2046_TouchGetCoordinates>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d102      	bne.n	8002b1a <handleTouch+0x26>
		//printf("failed\n");
		return 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	f000 bc3c 	b.w	8003392 <handleTouch+0x89e>
	}
	//map the x coordinate to be left is 0. also slight offset
	x = (TS_RIGHT - x) - 0;
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	80fb      	strh	r3, [r7, #6]
//	printf("touched\n");
//	printf("%d, %d\n", x, y);

	switch (currentPage) {
 8002b24:	4b8f      	ldr	r3, [pc, #572]	@ (8002d64 <handleTouch+0x270>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b07      	cmp	r3, #7
 8002b2a:	f200 842e 	bhi.w	800338a <handleTouch+0x896>
 8002b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b34 <handleTouch+0x40>)
 8002b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b34:	08002b55 	.word	0x08002b55
 8002b38:	08002d89 	.word	0x08002d89
 8002b3c:	08002fd9 	.word	0x08002fd9
 8002b40:	08003099 	.word	0x08003099
 8002b44:	08003323 	.word	0x08003323
 8002b48:	0800315b 	.word	0x0800315b
 8002b4c:	080032c9 	.word	0x080032c9
 8002b50:	08003215 	.word	0x08003215
	case PAGE_MAIN:
		//next button
		if ((x >= nextButton.x) && (x <= nextButton.x + nextButton.w)
 8002b54:	4b84      	ldr	r3, [pc, #528]	@ (8002d68 <handleTouch+0x274>)
 8002b56:	881a      	ldrh	r2, [r3, #0]
 8002b58:	88fb      	ldrh	r3, [r7, #6]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d828      	bhi.n	8002bb0 <handleTouch+0xbc>
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b81      	ldr	r3, [pc, #516]	@ (8002d68 <handleTouch+0x274>)
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	4619      	mov	r1, r3
 8002b68:	4b7f      	ldr	r3, [pc, #508]	@ (8002d68 <handleTouch+0x274>)
 8002b6a:	889b      	ldrh	r3, [r3, #4]
 8002b6c:	440b      	add	r3, r1
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	dc1e      	bgt.n	8002bb0 <handleTouch+0xbc>
				&& (y >= nextButton.y)
 8002b72:	4b7d      	ldr	r3, [pc, #500]	@ (8002d68 <handleTouch+0x274>)
 8002b74:	885a      	ldrh	r2, [r3, #2]
 8002b76:	88bb      	ldrh	r3, [r7, #4]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d819      	bhi.n	8002bb0 <handleTouch+0xbc>
				&& (y <= nextButton.y + nextButton.h + NEXT_BUTTON_OFFSET)
 8002b7c:	88bb      	ldrh	r3, [r7, #4]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4b79      	ldr	r3, [pc, #484]	@ (8002d68 <handleTouch+0x274>)
 8002b82:	885b      	ldrh	r3, [r3, #2]
 8002b84:	4619      	mov	r1, r3
 8002b86:	4b78      	ldr	r3, [pc, #480]	@ (8002d68 <handleTouch+0x274>)
 8002b88:	88db      	ldrh	r3, [r3, #6]
 8002b8a:	440b      	add	r3, r1
 8002b8c:	333c      	adds	r3, #60	@ 0x3c
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	dc0e      	bgt.n	8002bb0 <handleTouch+0xbc>
				&& (page_num != 10)) {
 8002b92:	4b76      	ldr	r3, [pc, #472]	@ (8002d6c <handleTouch+0x278>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b0a      	cmp	r3, #10
 8002b98:	d00a      	beq.n	8002bb0 <handleTouch+0xbc>
			//printf("touched\n");
			page_num++;
 8002b9a:	4b74      	ldr	r3, [pc, #464]	@ (8002d6c <handleTouch+0x278>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4b72      	ldr	r3, [pc, #456]	@ (8002d6c <handleTouch+0x278>)
 8002ba4:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8002ba6:	4b71      	ldr	r3, [pc, #452]	@ (8002d6c <handleTouch+0x278>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe ff3c 	bl	8001a28 <DrawMainPage>
		}
		//back button
		if ((x >= backButton.x) && (x <= backButton.x + backButton.w)
 8002bb0:	4b6f      	ldr	r3, [pc, #444]	@ (8002d70 <handleTouch+0x27c>)
 8002bb2:	881a      	ldrh	r2, [r3, #0]
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d828      	bhi.n	8002c0c <handleTouch+0x118>
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b6c      	ldr	r3, [pc, #432]	@ (8002d70 <handleTouch+0x27c>)
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4b6a      	ldr	r3, [pc, #424]	@ (8002d70 <handleTouch+0x27c>)
 8002bc6:	889b      	ldrh	r3, [r3, #4]
 8002bc8:	440b      	add	r3, r1
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	dc1e      	bgt.n	8002c0c <handleTouch+0x118>
				&& (y >= backButton.y)
 8002bce:	4b68      	ldr	r3, [pc, #416]	@ (8002d70 <handleTouch+0x27c>)
 8002bd0:	885a      	ldrh	r2, [r3, #2]
 8002bd2:	88bb      	ldrh	r3, [r7, #4]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d819      	bhi.n	8002c0c <handleTouch+0x118>
				&& (y <= backButton.y + backButton.h + BACK_BUTTON_OFFSET)
 8002bd8:	88bb      	ldrh	r3, [r7, #4]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4b64      	ldr	r3, [pc, #400]	@ (8002d70 <handleTouch+0x27c>)
 8002bde:	885b      	ldrh	r3, [r3, #2]
 8002be0:	4619      	mov	r1, r3
 8002be2:	4b63      	ldr	r3, [pc, #396]	@ (8002d70 <handleTouch+0x27c>)
 8002be4:	88db      	ldrh	r3, [r3, #6]
 8002be6:	440b      	add	r3, r1
 8002be8:	333c      	adds	r3, #60	@ 0x3c
 8002bea:	429a      	cmp	r2, r3
 8002bec:	dc0e      	bgt.n	8002c0c <handleTouch+0x118>
				&& (page_num != 1)) {
 8002bee:	4b5f      	ldr	r3, [pc, #380]	@ (8002d6c <handleTouch+0x278>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d00a      	beq.n	8002c0c <handleTouch+0x118>
			//printf("touched\n");
			page_num--;
 8002bf6:	4b5d      	ldr	r3, [pc, #372]	@ (8002d6c <handleTouch+0x278>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4b5b      	ldr	r3, [pc, #364]	@ (8002d6c <handleTouch+0x278>)
 8002c00:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8002c02:	4b5a      	ldr	r3, [pc, #360]	@ (8002d6c <handleTouch+0x278>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe ff0e 	bl	8001a28 <DrawMainPage>
		}
		//queue button
		if (x >= queueButton.x && x <= (queueButton.x + queueButton.w)
 8002c0c:	4b59      	ldr	r3, [pc, #356]	@ (8002d74 <handleTouch+0x280>)
 8002c0e:	881a      	ldrh	r2, [r3, #0]
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d821      	bhi.n	8002c5a <handleTouch+0x166>
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4b56      	ldr	r3, [pc, #344]	@ (8002d74 <handleTouch+0x280>)
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4b54      	ldr	r3, [pc, #336]	@ (8002d74 <handleTouch+0x280>)
 8002c22:	889b      	ldrh	r3, [r3, #4]
 8002c24:	440b      	add	r3, r1
 8002c26:	429a      	cmp	r2, r3
 8002c28:	dc17      	bgt.n	8002c5a <handleTouch+0x166>
				&& y >= queueButton.y
 8002c2a:	4b52      	ldr	r3, [pc, #328]	@ (8002d74 <handleTouch+0x280>)
 8002c2c:	885a      	ldrh	r2, [r3, #2]
 8002c2e:	88bb      	ldrh	r3, [r7, #4]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d812      	bhi.n	8002c5a <handleTouch+0x166>
				&& y <= (queueButton.y + queueButton.h + QUEUE_BUTTON_OFFSET)) {
 8002c34:	88bb      	ldrh	r3, [r7, #4]
 8002c36:	461a      	mov	r2, r3
 8002c38:	4b4e      	ldr	r3, [pc, #312]	@ (8002d74 <handleTouch+0x280>)
 8002c3a:	885b      	ldrh	r3, [r3, #2]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4b4d      	ldr	r3, [pc, #308]	@ (8002d74 <handleTouch+0x280>)
 8002c40:	88db      	ldrh	r3, [r3, #6]
 8002c42:	440b      	add	r3, r1
 8002c44:	3328      	adds	r3, #40	@ 0x28
 8002c46:	429a      	cmp	r2, r3
 8002c48:	dc07      	bgt.n	8002c5a <handleTouch+0x166>
			DrawQueuePage(queueSize);
 8002c4a:	4b4b      	ldr	r3, [pc, #300]	@ (8002d78 <handleTouch+0x284>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff fa0c 	bl	800206c <DrawQueuePage>
			currentPage = PAGE_QUEUE;
 8002c54:	4b43      	ldr	r3, [pc, #268]	@ (8002d64 <handleTouch+0x270>)
 8002c56:	2202      	movs	r2, #2
 8002c58:	701a      	strb	r2, [r3, #0]
		}
		//three protocol buttons
		for (int i = 0; i < NUM_BUTTONS; i++) {
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	e07c      	b.n	8002d5a <handleTouch+0x266>
			if ((x >= buttons[i].x) && (x <= buttons[i].x + buttons[i].w)
 8002c60:	4a46      	ldr	r2, [pc, #280]	@ (8002d7c <handleTouch+0x288>)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	212a      	movs	r1, #42	@ 0x2a
 8002c66:	fb01 f303 	mul.w	r3, r1, r3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	881a      	ldrh	r2, [r3, #0]
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d86f      	bhi.n	8002d54 <handleTouch+0x260>
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	4618      	mov	r0, r3
 8002c78:	4a40      	ldr	r2, [pc, #256]	@ (8002d7c <handleTouch+0x288>)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	212a      	movs	r1, #42	@ 0x2a
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	461c      	mov	r4, r3
 8002c88:	4a3c      	ldr	r2, [pc, #240]	@ (8002d7c <handleTouch+0x288>)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	212a      	movs	r1, #42	@ 0x2a
 8002c8e:	fb01 f303 	mul.w	r3, r1, r3
 8002c92:	4413      	add	r3, r2
 8002c94:	3304      	adds	r3, #4
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	4423      	add	r3, r4
 8002c9a:	4298      	cmp	r0, r3
 8002c9c:	dc5a      	bgt.n	8002d54 <handleTouch+0x260>
					&& (y >= buttons[i].y - PROTOCOL_BUTTON_OFFSET)
 8002c9e:	88bb      	ldrh	r3, [r7, #4]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	4a36      	ldr	r2, [pc, #216]	@ (8002d7c <handleTouch+0x288>)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	212a      	movs	r1, #42	@ 0x2a
 8002ca8:	fb01 f303 	mul.w	r3, r1, r3
 8002cac:	4413      	add	r3, r2
 8002cae:	3302      	adds	r3, #2
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	3b14      	subs	r3, #20
 8002cb4:	4298      	cmp	r0, r3
 8002cb6:	db4d      	blt.n	8002d54 <handleTouch+0x260>
					&& (y
							<= buttons[i].y + buttons[i].h
 8002cb8:	88bb      	ldrh	r3, [r7, #4]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	4a2f      	ldr	r2, [pc, #188]	@ (8002d7c <handleTouch+0x288>)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	212a      	movs	r1, #42	@ 0x2a
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3302      	adds	r3, #2
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	461c      	mov	r4, r3
 8002cce:	4a2b      	ldr	r2, [pc, #172]	@ (8002d7c <handleTouch+0x288>)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	212a      	movs	r1, #42	@ 0x2a
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	3306      	adds	r3, #6
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	4423      	add	r3, r4
									+ PROTOCOL_BUTTON_OFFSET)) {
 8002ce0:	3314      	adds	r3, #20
					&& (y
 8002ce2:	4298      	cmp	r0, r3
 8002ce4:	dc36      	bgt.n	8002d54 <handleTouch+0x260>
				//check which button has been pressed
				if (i == 0) {
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d106      	bne.n	8002cfa <handleTouch+0x206>
					protocol_num = 1;
 8002cec:	4b24      	ldr	r3, [pc, #144]	@ (8002d80 <handleTouch+0x28c>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]
					protocol_offset = 0;
 8002cf2:	4b24      	ldr	r3, [pc, #144]	@ (8002d84 <handleTouch+0x290>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	701a      	strb	r2, [r3, #0]
 8002cf8:	e012      	b.n	8002d20 <handleTouch+0x22c>
				} else if (i == 1) {
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d106      	bne.n	8002d0e <handleTouch+0x21a>
					protocol_num = 1;
 8002d00:	4b1f      	ldr	r3, [pc, #124]	@ (8002d80 <handleTouch+0x28c>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	701a      	strb	r2, [r3, #0]
					protocol_offset = 1;
 8002d06:	4b1f      	ldr	r3, [pc, #124]	@ (8002d84 <handleTouch+0x290>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	701a      	strb	r2, [r3, #0]
 8002d0c:	e008      	b.n	8002d20 <handleTouch+0x22c>
				} else if (i == 2) {
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d105      	bne.n	8002d20 <handleTouch+0x22c>
					protocol_num = 1;
 8002d14:	4b1a      	ldr	r3, [pc, #104]	@ (8002d80 <handleTouch+0x28c>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	701a      	strb	r2, [r3, #0]
					protocol_offset = 2;
 8002d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002d84 <handleTouch+0x290>)
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	701a      	strb	r2, [r3, #0]
				}
				//dont draw next page if the button says "Empty"
				if (buttons[i].status == NOT_EMPTY) {
 8002d20:	4a16      	ldr	r2, [pc, #88]	@ (8002d7c <handleTouch+0x288>)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	212a      	movs	r1, #42	@ 0x2a
 8002d26:	fb01 f303 	mul.w	r3, r1, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3328      	adds	r3, #40	@ 0x28
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d10c      	bne.n	8002d4e <handleTouch+0x25a>
					currentPage = PAGE_SELECT;
 8002d34:	4b0b      	ldr	r3, [pc, #44]	@ (8002d64 <handleTouch+0x270>)
 8002d36:	2201      	movs	r2, #1
 8002d38:	701a      	strb	r2, [r3, #0]
					DrawInfoPage(buttons[i].label);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	222a      	movs	r2, #42	@ 0x2a
 8002d3e:	fb02 f303 	mul.w	r3, r2, r3
 8002d42:	3308      	adds	r3, #8
 8002d44:	4a0d      	ldr	r2, [pc, #52]	@ (8002d7c <handleTouch+0x288>)
 8002d46:	4413      	add	r3, r2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff f84b 	bl	8001de4 <DrawInfoPage>
				}
				HAL_Delay(100); //delay between switch to select page
 8002d4e:	2064      	movs	r0, #100	@ 0x64
 8002d50:	f001 fbfe 	bl	8004550 <HAL_Delay>
		for (int i = 0; i < NUM_BUTTONS; i++) {
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	3301      	adds	r3, #1
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	f77f af7f 	ble.w	8002c60 <handleTouch+0x16c>
			}
		}
		break;
 8002d62:	e312      	b.n	800338a <handleTouch+0x896>
 8002d64:	20000570 	.word	0x20000570
 8002d68:	200001e4 	.word	0x200001e4
 8002d6c:	20000293 	.word	0x20000293
 8002d70:	200001b8 	.word	0x200001b8
 8002d74:	200000b0 	.word	0x200000b0
 8002d78:	2000ffb4 	.word	0x2000ffb4
 8002d7c:	20000030 	.word	0x20000030
 8002d80:	200118bc 	.word	0x200118bc
 8002d84:	200118bd 	.word	0x200118bd

	case PAGE_SELECT:
		//back button
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 8002d88:	4b83      	ldr	r3, [pc, #524]	@ (8002f98 <handleTouch+0x4a4>)
 8002d8a:	881a      	ldrh	r2, [r3, #0]
 8002d8c:	88fb      	ldrh	r3, [r7, #6]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d820      	bhi.n	8002dd4 <handleTouch+0x2e0>
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b80      	ldr	r3, [pc, #512]	@ (8002f98 <handleTouch+0x4a4>)
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4b7e      	ldr	r3, [pc, #504]	@ (8002f98 <handleTouch+0x4a4>)
 8002d9e:	889b      	ldrh	r3, [r3, #4]
 8002da0:	440b      	add	r3, r1
 8002da2:	429a      	cmp	r2, r3
 8002da4:	dc16      	bgt.n	8002dd4 <handleTouch+0x2e0>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 8002da6:	4b7c      	ldr	r3, [pc, #496]	@ (8002f98 <handleTouch+0x4a4>)
 8002da8:	885a      	ldrh	r2, [r3, #2]
 8002daa:	88bb      	ldrh	r3, [r7, #4]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d811      	bhi.n	8002dd4 <handleTouch+0x2e0>
 8002db0:	88bb      	ldrh	r3, [r7, #4]
 8002db2:	461a      	mov	r2, r3
 8002db4:	4b78      	ldr	r3, [pc, #480]	@ (8002f98 <handleTouch+0x4a4>)
 8002db6:	885b      	ldrh	r3, [r3, #2]
 8002db8:	4619      	mov	r1, r3
 8002dba:	4b77      	ldr	r3, [pc, #476]	@ (8002f98 <handleTouch+0x4a4>)
 8002dbc:	88db      	ldrh	r3, [r3, #6]
 8002dbe:	440b      	add	r3, r1
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	dc07      	bgt.n	8002dd4 <handleTouch+0x2e0>
			currentPage = PAGE_MAIN;
 8002dc4:	4b75      	ldr	r3, [pc, #468]	@ (8002f9c <handleTouch+0x4a8>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8002dca:	4b75      	ldr	r3, [pc, #468]	@ (8002fa0 <handleTouch+0x4ac>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe fe2a 	bl	8001a28 <DrawMainPage>
		}
		//queueSelect button
		if (x >= queueSelectButton.x
 8002dd4:	4b73      	ldr	r3, [pc, #460]	@ (8002fa4 <handleTouch+0x4b0>)
 8002dd6:	881a      	ldrh	r2, [r3, #0]
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d833      	bhi.n	8002e46 <handleTouch+0x352>
				&& x <= (queueSelectButton.x + queueSelectButton.w)
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	461a      	mov	r2, r3
 8002de2:	4b70      	ldr	r3, [pc, #448]	@ (8002fa4 <handleTouch+0x4b0>)
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	4619      	mov	r1, r3
 8002de8:	4b6e      	ldr	r3, [pc, #440]	@ (8002fa4 <handleTouch+0x4b0>)
 8002dea:	889b      	ldrh	r3, [r3, #4]
 8002dec:	440b      	add	r3, r1
 8002dee:	429a      	cmp	r2, r3
 8002df0:	dc29      	bgt.n	8002e46 <handleTouch+0x352>
				&& y >= queueSelectButton.y
 8002df2:	4b6c      	ldr	r3, [pc, #432]	@ (8002fa4 <handleTouch+0x4b0>)
 8002df4:	885a      	ldrh	r2, [r3, #2]
 8002df6:	88bb      	ldrh	r3, [r7, #4]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d824      	bhi.n	8002e46 <handleTouch+0x352>
				&& y <= (queueSelectButton.y + queueSelectButton.h)) {
 8002dfc:	88bb      	ldrh	r3, [r7, #4]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4b68      	ldr	r3, [pc, #416]	@ (8002fa4 <handleTouch+0x4b0>)
 8002e02:	885b      	ldrh	r3, [r3, #2]
 8002e04:	4619      	mov	r1, r3
 8002e06:	4b67      	ldr	r3, [pc, #412]	@ (8002fa4 <handleTouch+0x4b0>)
 8002e08:	88db      	ldrh	r3, [r3, #6]
 8002e0a:	440b      	add	r3, r1
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	dc1a      	bgt.n	8002e46 <handleTouch+0x352>
			//store the protocol in queueBuffer
			if (queueSize < MAX_QUEUE_SIZE) {
 8002e10:	4b65      	ldr	r3, [pc, #404]	@ (8002fa8 <handleTouch+0x4b4>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b09      	cmp	r3, #9
 8002e16:	d816      	bhi.n	8002e46 <handleTouch+0x352>

				queueProtocol(page_num, protocol_offset);
 8002e18:	4b61      	ldr	r3, [pc, #388]	@ (8002fa0 <handleTouch+0x4ac>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4b63      	ldr	r3, [pc, #396]	@ (8002fac <handleTouch+0x4b8>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	4619      	mov	r1, r3
 8002e24:	4610      	mov	r0, r2
 8002e26:	f000 fd8f 	bl	8003948 <queueProtocol>
				queueSize++;
 8002e2a:	4b5f      	ldr	r3, [pc, #380]	@ (8002fa8 <handleTouch+0x4b4>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	4b5d      	ldr	r3, [pc, #372]	@ (8002fa8 <handleTouch+0x4b4>)
 8002e34:	701a      	strb	r2, [r3, #0]
				currentPage = PAGE_QUEUE;
 8002e36:	4b59      	ldr	r3, [pc, #356]	@ (8002f9c <handleTouch+0x4a8>)
 8002e38:	2202      	movs	r2, #2
 8002e3a:	701a      	strb	r2, [r3, #0]
				DrawQueuePage(queueSize);
 8002e3c:	4b5a      	ldr	r3, [pc, #360]	@ (8002fa8 <handleTouch+0x4b4>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff f913 	bl	800206c <DrawQueuePage>
			} else {
				//handle queue buffer being full
			}
		}
		//select button
		if (x >= selectButton.x && x <= (selectButton.x + selectButton.w)
 8002e46:	4b5a      	ldr	r3, [pc, #360]	@ (8002fb0 <handleTouch+0x4bc>)
 8002e48:	881a      	ldrh	r2, [r3, #0]
 8002e4a:	88fb      	ldrh	r3, [r7, #6]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d84a      	bhi.n	8002ee6 <handleTouch+0x3f2>
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	461a      	mov	r2, r3
 8002e54:	4b56      	ldr	r3, [pc, #344]	@ (8002fb0 <handleTouch+0x4bc>)
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4b55      	ldr	r3, [pc, #340]	@ (8002fb0 <handleTouch+0x4bc>)
 8002e5c:	889b      	ldrh	r3, [r3, #4]
 8002e5e:	440b      	add	r3, r1
 8002e60:	429a      	cmp	r2, r3
 8002e62:	dc40      	bgt.n	8002ee6 <handleTouch+0x3f2>
				&& y >= selectButton.y
 8002e64:	4b52      	ldr	r3, [pc, #328]	@ (8002fb0 <handleTouch+0x4bc>)
 8002e66:	885a      	ldrh	r2, [r3, #2]
 8002e68:	88bb      	ldrh	r3, [r7, #4]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d83b      	bhi.n	8002ee6 <handleTouch+0x3f2>
				&& y <= (selectButton.y + selectButton.h)) {
 8002e6e:	88bb      	ldrh	r3, [r7, #4]
 8002e70:	461a      	mov	r2, r3
 8002e72:	4b4f      	ldr	r3, [pc, #316]	@ (8002fb0 <handleTouch+0x4bc>)
 8002e74:	885b      	ldrh	r3, [r3, #2]
 8002e76:	4619      	mov	r1, r3
 8002e78:	4b4d      	ldr	r3, [pc, #308]	@ (8002fb0 <handleTouch+0x4bc>)
 8002e7a:	88db      	ldrh	r3, [r3, #6]
 8002e7c:	440b      	add	r3, r1
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	dc31      	bgt.n	8002ee6 <handleTouch+0x3f2>
			//transmit protocol and move to finish page
			transmitProtocol(page_num, protocol_offset);
 8002e82:	4b47      	ldr	r3, [pc, #284]	@ (8002fa0 <handleTouch+0x4ac>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	4b48      	ldr	r3, [pc, #288]	@ (8002fac <handleTouch+0x4b8>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	f000 fd06 	bl	80038a0 <transmitProtocol>
			currentPage = PAGE_PROGRESS;
 8002e94:	4b41      	ldr	r3, [pc, #260]	@ (8002f9c <handleTouch+0x4a8>)
 8002e96:	2205      	movs	r2, #5
 8002e98:	701a      	strb	r2, [r3, #0]
			protocolTimer = 5999; //change this to the actual value dorjee
 8002e9a:	4b46      	ldr	r3, [pc, #280]	@ (8002fb4 <handleTouch+0x4c0>)
 8002e9c:	f241 726f 	movw	r2, #5999	@ 0x176f
 8002ea0:	601a      	str	r2, [r3, #0]
			uint32_t flash_address = get_sector_address(
 8002ea2:	4b3f      	ldr	r3, [pc, #252]	@ (8002fa0 <handleTouch+0x4ac>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 ffa6 	bl	8003df8 <get_sector_address>
 8002eac:	4603      	mov	r3, r0
					page_num) + protocol_offset * PROTOCOL_SIZE;
 8002eae:	4a3f      	ldr	r2, [pc, #252]	@ (8002fac <handleTouch+0x4b8>)
 8002eb0:	7812      	ldrb	r2, [r2, #0]
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002eb8:	fb01 f202 	mul.w	r2, r1, r2
			uint32_t flash_address = get_sector_address(
 8002ebc:	4413      	add	r3, r2
 8002ebe:	60bb      	str	r3, [r7, #8]
			read_from_flash(currentProtocolTitle, flash_address);
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	483d      	ldr	r0, [pc, #244]	@ (8002fb8 <handleTouch+0x4c4>)
 8002ec4:	f000 fabf 	bl	8003446 <read_from_flash>
			DrawProgressPage("FILL", rx_byte, rx_data);
 8002ec8:	4b3c      	ldr	r3, [pc, #240]	@ (8002fbc <handleTouch+0x4c8>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	4a3c      	ldr	r2, [pc, #240]	@ (8002fc0 <handleTouch+0x4cc>)
 8002ece:	4619      	mov	r1, r3
 8002ed0:	483c      	ldr	r0, [pc, #240]	@ (8002fc4 <handleTouch+0x4d0>)
 8002ed2:	f7ff f9b5 	bl	8002240 <DrawProgressPage>

			//start timer 2 interrupt for protocol timer count down
			HAL_TIM_Base_Start_IT(&htim2); //triggers every second
 8002ed6:	483c      	ldr	r0, [pc, #240]	@ (8002fc8 <handleTouch+0x4d4>)
 8002ed8:	f005 fb78 	bl	80085cc <HAL_TIM_Base_Start_IT>
			HAL_GPIO_WritePin(FAN_EN_GPIO_Port, FAN_EN_Pin, GPIO_PIN_SET); //turn fan on
 8002edc:	2201      	movs	r2, #1
 8002ede:	2120      	movs	r1, #32
 8002ee0:	483a      	ldr	r0, [pc, #232]	@ (8002fcc <handleTouch+0x4d8>)
 8002ee2:	f002 f8d5 	bl	8005090 <HAL_GPIO_WritePin>
		}
		//info button
		if (x >= protocolInfoButton.x
 8002ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8002fd0 <handleTouch+0x4dc>)
 8002ee8:	881a      	ldrh	r2, [r3, #0]
 8002eea:	88fb      	ldrh	r3, [r7, #6]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d824      	bhi.n	8002f3a <handleTouch+0x446>
				&& x <= (protocolInfoButton.x + protocolInfoButton.w)
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4b36      	ldr	r3, [pc, #216]	@ (8002fd0 <handleTouch+0x4dc>)
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4b35      	ldr	r3, [pc, #212]	@ (8002fd0 <handleTouch+0x4dc>)
 8002efc:	889b      	ldrh	r3, [r3, #4]
 8002efe:	440b      	add	r3, r1
 8002f00:	429a      	cmp	r2, r3
 8002f02:	dc1a      	bgt.n	8002f3a <handleTouch+0x446>
				&& y >= protocolInfoButton.y
 8002f04:	4b32      	ldr	r3, [pc, #200]	@ (8002fd0 <handleTouch+0x4dc>)
 8002f06:	885a      	ldrh	r2, [r3, #2]
 8002f08:	88bb      	ldrh	r3, [r7, #4]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d815      	bhi.n	8002f3a <handleTouch+0x446>
				&& y <= (protocolInfoButton.y + protocolInfoButton.h)) {
 8002f0e:	88bb      	ldrh	r3, [r7, #4]
 8002f10:	461a      	mov	r2, r3
 8002f12:	4b2f      	ldr	r3, [pc, #188]	@ (8002fd0 <handleTouch+0x4dc>)
 8002f14:	885b      	ldrh	r3, [r3, #2]
 8002f16:	4619      	mov	r1, r3
 8002f18:	4b2d      	ldr	r3, [pc, #180]	@ (8002fd0 <handleTouch+0x4dc>)
 8002f1a:	88db      	ldrh	r3, [r3, #6]
 8002f1c:	440b      	add	r3, r1
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	dc0b      	bgt.n	8002f3a <handleTouch+0x446>
			//move to delete confirmation page
			currentPage = PAGE_PROTOCOL_INFO;
 8002f22:	4b1e      	ldr	r3, [pc, #120]	@ (8002f9c <handleTouch+0x4a8>)
 8002f24:	2206      	movs	r2, #6
 8002f26:	701a      	strb	r2, [r3, #0]
			DrawProtocolInfoPage(page_num, protocol_offset);
 8002f28:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa0 <handleTouch+0x4ac>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8002fac <handleTouch+0x4b8>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	4619      	mov	r1, r3
 8002f34:	4610      	mov	r0, r2
 8002f36:	f7ff fce1 	bl	80028fc <DrawProtocolInfoPage>
		}
		//delete button
		if (x >= deleteButton.x && x <= (deleteButton.x + deleteButton.w)
 8002f3a:	4b26      	ldr	r3, [pc, #152]	@ (8002fd4 <handleTouch+0x4e0>)
 8002f3c:	881a      	ldrh	r2, [r3, #0]
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	f200 8215 	bhi.w	8003370 <handleTouch+0x87c>
 8002f46:	88fb      	ldrh	r3, [r7, #6]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4b22      	ldr	r3, [pc, #136]	@ (8002fd4 <handleTouch+0x4e0>)
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4b20      	ldr	r3, [pc, #128]	@ (8002fd4 <handleTouch+0x4e0>)
 8002f52:	889b      	ldrh	r3, [r3, #4]
 8002f54:	440b      	add	r3, r1
 8002f56:	429a      	cmp	r2, r3
 8002f58:	f300 820a 	bgt.w	8003370 <handleTouch+0x87c>
				&& y >= deleteButton.y
 8002f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd4 <handleTouch+0x4e0>)
 8002f5e:	885a      	ldrh	r2, [r3, #2]
 8002f60:	88bb      	ldrh	r3, [r7, #4]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	f200 8204 	bhi.w	8003370 <handleTouch+0x87c>
				&& y <= (deleteButton.y + deleteButton.h)) {
 8002f68:	88bb      	ldrh	r3, [r7, #4]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	4b19      	ldr	r3, [pc, #100]	@ (8002fd4 <handleTouch+0x4e0>)
 8002f6e:	885b      	ldrh	r3, [r3, #2]
 8002f70:	4619      	mov	r1, r3
 8002f72:	4b18      	ldr	r3, [pc, #96]	@ (8002fd4 <handleTouch+0x4e0>)
 8002f74:	88db      	ldrh	r3, [r3, #6]
 8002f76:	440b      	add	r3, r1
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	f300 81f9 	bgt.w	8003370 <handleTouch+0x87c>
			//move to delete confirmation page
			currentPage = PAGE_CONFIRMATION;
 8002f7e:	4b07      	ldr	r3, [pc, #28]	@ (8002f9c <handleTouch+0x4a8>)
 8002f80:	2203      	movs	r2, #3
 8002f82:	701a      	strb	r2, [r3, #0]
			DrawConfirmationPage(page_num, protocol_offset);
 8002f84:	4b06      	ldr	r3, [pc, #24]	@ (8002fa0 <handleTouch+0x4ac>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4b08      	ldr	r3, [pc, #32]	@ (8002fac <handleTouch+0x4b8>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4610      	mov	r0, r2
 8002f92:	f7fe fff3 	bl	8001f7c <DrawConfirmationPage>
		}
		break;
 8002f96:	e1eb      	b.n	8003370 <handleTouch+0x87c>
 8002f98:	200001b8 	.word	0x200001b8
 8002f9c:	20000570 	.word	0x20000570
 8002fa0:	20000293 	.word	0x20000293
 8002fa4:	20000134 	.word	0x20000134
 8002fa8:	2000ffb4 	.word	0x2000ffb4
 8002fac:	200118bd 	.word	0x200118bd
 8002fb0:	20000160 	.word	0x20000160
 8002fb4:	20000574 	.word	0x20000574
 8002fb8:	20000590 	.word	0x20000590
 8002fbc:	20000578 	.word	0x20000578
 8002fc0:	2000057c 	.word	0x2000057c
 8002fc4:	0800fe5c 	.word	0x0800fe5c
 8002fc8:	20000498 	.word	0x20000498
 8002fcc:	40020800 	.word	0x40020800
 8002fd0:	20000268 	.word	0x20000268
 8002fd4:	2000018c 	.word	0x2000018c

	case PAGE_QUEUE:
		//back button
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 8002fd8:	4b80      	ldr	r3, [pc, #512]	@ (80031dc <handleTouch+0x6e8>)
 8002fda:	881a      	ldrh	r2, [r3, #0]
 8002fdc:	88fb      	ldrh	r3, [r7, #6]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d820      	bhi.n	8003024 <handleTouch+0x530>
 8002fe2:	88fb      	ldrh	r3, [r7, #6]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4b7d      	ldr	r3, [pc, #500]	@ (80031dc <handleTouch+0x6e8>)
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	4619      	mov	r1, r3
 8002fec:	4b7b      	ldr	r3, [pc, #492]	@ (80031dc <handleTouch+0x6e8>)
 8002fee:	889b      	ldrh	r3, [r3, #4]
 8002ff0:	440b      	add	r3, r1
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	dc16      	bgt.n	8003024 <handleTouch+0x530>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 8002ff6:	4b79      	ldr	r3, [pc, #484]	@ (80031dc <handleTouch+0x6e8>)
 8002ff8:	885a      	ldrh	r2, [r3, #2]
 8002ffa:	88bb      	ldrh	r3, [r7, #4]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d811      	bhi.n	8003024 <handleTouch+0x530>
 8003000:	88bb      	ldrh	r3, [r7, #4]
 8003002:	461a      	mov	r2, r3
 8003004:	4b75      	ldr	r3, [pc, #468]	@ (80031dc <handleTouch+0x6e8>)
 8003006:	885b      	ldrh	r3, [r3, #2]
 8003008:	4619      	mov	r1, r3
 800300a:	4b74      	ldr	r3, [pc, #464]	@ (80031dc <handleTouch+0x6e8>)
 800300c:	88db      	ldrh	r3, [r3, #6]
 800300e:	440b      	add	r3, r1
 8003010:	429a      	cmp	r2, r3
 8003012:	dc07      	bgt.n	8003024 <handleTouch+0x530>
			currentPage = PAGE_MAIN;
 8003014:	4b72      	ldr	r3, [pc, #456]	@ (80031e0 <handleTouch+0x6ec>)
 8003016:	2200      	movs	r2, #0
 8003018:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 800301a:	4b72      	ldr	r3, [pc, #456]	@ (80031e4 <handleTouch+0x6f0>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7fe fd02 	bl	8001a28 <DrawMainPage>
		}
		//run button
		if (x >= runButton.x && x <= (runButton.x + runButton.w)
 8003024:	4b70      	ldr	r3, [pc, #448]	@ (80031e8 <handleTouch+0x6f4>)
 8003026:	881a      	ldrh	r2, [r3, #0]
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	429a      	cmp	r2, r3
 800302c:	f200 81a2 	bhi.w	8003374 <handleTouch+0x880>
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	461a      	mov	r2, r3
 8003034:	4b6c      	ldr	r3, [pc, #432]	@ (80031e8 <handleTouch+0x6f4>)
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	4619      	mov	r1, r3
 800303a:	4b6b      	ldr	r3, [pc, #428]	@ (80031e8 <handleTouch+0x6f4>)
 800303c:	889b      	ldrh	r3, [r3, #4]
 800303e:	440b      	add	r3, r1
 8003040:	429a      	cmp	r2, r3
 8003042:	f300 8197 	bgt.w	8003374 <handleTouch+0x880>
				&& y >= runButton.y && y <= (runButton.y + runButton.h)
 8003046:	4b68      	ldr	r3, [pc, #416]	@ (80031e8 <handleTouch+0x6f4>)
 8003048:	885a      	ldrh	r2, [r3, #2]
 800304a:	88bb      	ldrh	r3, [r7, #4]
 800304c:	429a      	cmp	r2, r3
 800304e:	f200 8191 	bhi.w	8003374 <handleTouch+0x880>
 8003052:	88bb      	ldrh	r3, [r7, #4]
 8003054:	461a      	mov	r2, r3
 8003056:	4b64      	ldr	r3, [pc, #400]	@ (80031e8 <handleTouch+0x6f4>)
 8003058:	885b      	ldrh	r3, [r3, #2]
 800305a:	4619      	mov	r1, r3
 800305c:	4b62      	ldr	r3, [pc, #392]	@ (80031e8 <handleTouch+0x6f4>)
 800305e:	88db      	ldrh	r3, [r3, #6]
 8003060:	440b      	add	r3, r1
 8003062:	429a      	cmp	r2, r3
 8003064:	f300 8186 	bgt.w	8003374 <handleTouch+0x880>
				&& (queueSize > 0)) {
 8003068:	4b60      	ldr	r3, [pc, #384]	@ (80031ec <handleTouch+0x6f8>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 8181 	beq.w	8003374 <handleTouch+0x880>
			//handle queue functionality here dorjee
			transmitQueuedProtocols(queueSize);
 8003072:	4b5e      	ldr	r3, [pc, #376]	@ (80031ec <handleTouch+0x6f8>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fce6 	bl	8003a48 <transmitQueuedProtocols>
			queueSize = 0;
 800307c:	4b5b      	ldr	r3, [pc, #364]	@ (80031ec <handleTouch+0x6f8>)
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
			currentPage = PAGE_PROGRESS;
 8003082:	4b57      	ldr	r3, [pc, #348]	@ (80031e0 <handleTouch+0x6ec>)
 8003084:	2205      	movs	r2, #5
 8003086:	701a      	strb	r2, [r3, #0]
			DrawProgressPage("FILL", rx_byte, rx_data);
 8003088:	4b59      	ldr	r3, [pc, #356]	@ (80031f0 <handleTouch+0x6fc>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	4a59      	ldr	r2, [pc, #356]	@ (80031f4 <handleTouch+0x700>)
 800308e:	4619      	mov	r1, r3
 8003090:	4859      	ldr	r0, [pc, #356]	@ (80031f8 <handleTouch+0x704>)
 8003092:	f7ff f8d5 	bl	8002240 <DrawProgressPage>
		}
		break;
 8003096:	e16d      	b.n	8003374 <handleTouch+0x880>

	case PAGE_CONFIRMATION:
		//back button
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 8003098:	4b50      	ldr	r3, [pc, #320]	@ (80031dc <handleTouch+0x6e8>)
 800309a:	881a      	ldrh	r2, [r3, #0]
 800309c:	88fb      	ldrh	r3, [r7, #6]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d827      	bhi.n	80030f2 <handleTouch+0x5fe>
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	461a      	mov	r2, r3
 80030a6:	4b4d      	ldr	r3, [pc, #308]	@ (80031dc <handleTouch+0x6e8>)
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	4619      	mov	r1, r3
 80030ac:	4b4b      	ldr	r3, [pc, #300]	@ (80031dc <handleTouch+0x6e8>)
 80030ae:	889b      	ldrh	r3, [r3, #4]
 80030b0:	440b      	add	r3, r1
 80030b2:	429a      	cmp	r2, r3
 80030b4:	dc1d      	bgt.n	80030f2 <handleTouch+0x5fe>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 80030b6:	4b49      	ldr	r3, [pc, #292]	@ (80031dc <handleTouch+0x6e8>)
 80030b8:	885a      	ldrh	r2, [r3, #2]
 80030ba:	88bb      	ldrh	r3, [r7, #4]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d818      	bhi.n	80030f2 <handleTouch+0x5fe>
 80030c0:	88bb      	ldrh	r3, [r7, #4]
 80030c2:	461a      	mov	r2, r3
 80030c4:	4b45      	ldr	r3, [pc, #276]	@ (80031dc <handleTouch+0x6e8>)
 80030c6:	885b      	ldrh	r3, [r3, #2]
 80030c8:	4619      	mov	r1, r3
 80030ca:	4b44      	ldr	r3, [pc, #272]	@ (80031dc <handleTouch+0x6e8>)
 80030cc:	88db      	ldrh	r3, [r3, #6]
 80030ce:	440b      	add	r3, r1
 80030d0:	429a      	cmp	r2, r3
 80030d2:	dc0e      	bgt.n	80030f2 <handleTouch+0x5fe>
			currentPage = PAGE_SELECT;
 80030d4:	4b42      	ldr	r3, [pc, #264]	@ (80031e0 <handleTouch+0x6ec>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]
			DrawInfoPage(buttons[protocol_offset].label);
 80030da:	4b48      	ldr	r3, [pc, #288]	@ (80031fc <handleTouch+0x708>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	232a      	movs	r3, #42	@ 0x2a
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	3308      	adds	r3, #8
 80030e8:	4a45      	ldr	r2, [pc, #276]	@ (8003200 <handleTouch+0x70c>)
 80030ea:	4413      	add	r3, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fe fe79 	bl	8001de4 <DrawInfoPage>
		}
		//confirm button
		if (x >= confirmButton.x && x <= (confirmButton.x + confirmButton.w)
 80030f2:	4b44      	ldr	r3, [pc, #272]	@ (8003204 <handleTouch+0x710>)
 80030f4:	881a      	ldrh	r2, [r3, #0]
 80030f6:	88fb      	ldrh	r3, [r7, #6]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	f200 813d 	bhi.w	8003378 <handleTouch+0x884>
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	461a      	mov	r2, r3
 8003102:	4b40      	ldr	r3, [pc, #256]	@ (8003204 <handleTouch+0x710>)
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	4619      	mov	r1, r3
 8003108:	4b3e      	ldr	r3, [pc, #248]	@ (8003204 <handleTouch+0x710>)
 800310a:	889b      	ldrh	r3, [r3, #4]
 800310c:	440b      	add	r3, r1
 800310e:	429a      	cmp	r2, r3
 8003110:	f300 8132 	bgt.w	8003378 <handleTouch+0x884>
				&& y >= confirmButton.y
 8003114:	4b3b      	ldr	r3, [pc, #236]	@ (8003204 <handleTouch+0x710>)
 8003116:	885a      	ldrh	r2, [r3, #2]
 8003118:	88bb      	ldrh	r3, [r7, #4]
 800311a:	429a      	cmp	r2, r3
 800311c:	f200 812c 	bhi.w	8003378 <handleTouch+0x884>
				&& y <= (confirmButton.y + confirmButton.h)) {
 8003120:	88bb      	ldrh	r3, [r7, #4]
 8003122:	461a      	mov	r2, r3
 8003124:	4b37      	ldr	r3, [pc, #220]	@ (8003204 <handleTouch+0x710>)
 8003126:	885b      	ldrh	r3, [r3, #2]
 8003128:	4619      	mov	r1, r3
 800312a:	4b36      	ldr	r3, [pc, #216]	@ (8003204 <handleTouch+0x710>)
 800312c:	88db      	ldrh	r3, [r3, #6]
 800312e:	440b      	add	r3, r1
 8003130:	429a      	cmp	r2, r3
 8003132:	f300 8121 	bgt.w	8003378 <handleTouch+0x884>
			//delete protocol and go back to main page
			deleteProtocol(page_num, protocol_offset);
 8003136:	4b2b      	ldr	r3, [pc, #172]	@ (80031e4 <handleTouch+0x6f0>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	4b2f      	ldr	r3, [pc, #188]	@ (80031fc <handleTouch+0x708>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	4619      	mov	r1, r3
 8003142:	4610      	mov	r0, r2
 8003144:	f000 fcd0 	bl	8003ae8 <deleteProtocol>
			currentPage = PAGE_MAIN;
 8003148:	4b25      	ldr	r3, [pc, #148]	@ (80031e0 <handleTouch+0x6ec>)
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 800314e:	4b25      	ldr	r3, [pc, #148]	@ (80031e4 <handleTouch+0x6f0>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fe fc68 	bl	8001a28 <DrawMainPage>
		}
		break;
 8003158:	e10e      	b.n	8003378 <handleTouch+0x884>

	case PAGE_PROGRESS:
		//stop button
		if ((x >= backButton.x) && (x <= backButton.x + backButton.w)
 800315a:	4b20      	ldr	r3, [pc, #128]	@ (80031dc <handleTouch+0x6e8>)
 800315c:	881a      	ldrh	r2, [r3, #0]
 800315e:	88fb      	ldrh	r3, [r7, #6]
 8003160:	429a      	cmp	r2, r3
 8003162:	d81e      	bhi.n	80031a2 <handleTouch+0x6ae>
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	461a      	mov	r2, r3
 8003168:	4b1c      	ldr	r3, [pc, #112]	@ (80031dc <handleTouch+0x6e8>)
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	4619      	mov	r1, r3
 800316e:	4b1b      	ldr	r3, [pc, #108]	@ (80031dc <handleTouch+0x6e8>)
 8003170:	889b      	ldrh	r3, [r3, #4]
 8003172:	440b      	add	r3, r1
 8003174:	429a      	cmp	r2, r3
 8003176:	dc14      	bgt.n	80031a2 <handleTouch+0x6ae>
				&& (y >= backButton.y)
 8003178:	4b18      	ldr	r3, [pc, #96]	@ (80031dc <handleTouch+0x6e8>)
 800317a:	885a      	ldrh	r2, [r3, #2]
 800317c:	88bb      	ldrh	r3, [r7, #4]
 800317e:	429a      	cmp	r2, r3
 8003180:	d80f      	bhi.n	80031a2 <handleTouch+0x6ae>
				&& (y <= backButton.y + backButton.h + BACK_BUTTON_OFFSET)) {
 8003182:	88bb      	ldrh	r3, [r7, #4]
 8003184:	461a      	mov	r2, r3
 8003186:	4b15      	ldr	r3, [pc, #84]	@ (80031dc <handleTouch+0x6e8>)
 8003188:	885b      	ldrh	r3, [r3, #2]
 800318a:	4619      	mov	r1, r3
 800318c:	4b13      	ldr	r3, [pc, #76]	@ (80031dc <handleTouch+0x6e8>)
 800318e:	88db      	ldrh	r3, [r3, #6]
 8003190:	440b      	add	r3, r1
 8003192:	333c      	adds	r3, #60	@ 0x3c
 8003194:	429a      	cmp	r2, r3
 8003196:	dc04      	bgt.n	80031a2 <handleTouch+0x6ae>
			//printf("touched\n");
			currentPage = PAGE_STOP;
 8003198:	4b11      	ldr	r3, [pc, #68]	@ (80031e0 <handleTouch+0x6ec>)
 800319a:	2207      	movs	r2, #7
 800319c:	701a      	strb	r2, [r3, #0]
			DrawStopPage();
 800319e:	f7ff fc03 	bl	80029a8 <DrawStopPage>
		}
		//when protocol finishes naturally, it will send a done signal
		uint8_t done_signal;
		if (HAL_UART_Receive(&huart2, &done_signal, 1, 0) == HAL_OK) {
 80031a2:	1cf9      	adds	r1, r7, #3
 80031a4:	2300      	movs	r3, #0
 80031a6:	2201      	movs	r2, #1
 80031a8:	4817      	ldr	r0, [pc, #92]	@ (8003208 <handleTouch+0x714>)
 80031aa:	f006 f9c2 	bl	8009532 <HAL_UART_Receive>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f040 80e3 	bne.w	800337c <handleTouch+0x888>
			if (done_signal == 'D') {
 80031b6:	78fb      	ldrb	r3, [r7, #3]
 80031b8:	2b44      	cmp	r3, #68	@ 0x44
 80031ba:	f040 80df 	bne.w	800337c <handleTouch+0x888>
				//go to success page
				currentPage = PAGE_FINISH;
 80031be:	4b08      	ldr	r3, [pc, #32]	@ (80031e0 <handleTouch+0x6ec>)
 80031c0:	2204      	movs	r2, #4
 80031c2:	701a      	strb	r2, [r3, #0]
				DrawPageFinish();
 80031c4:	f7ff fc54 	bl	8002a70 <DrawPageFinish>

				//stop the interrupt and turn fan off
				HAL_TIM_Base_Stop_IT(&htim2);
 80031c8:	4810      	ldr	r0, [pc, #64]	@ (800320c <handleTouch+0x718>)
 80031ca:	f005 fa6f 	bl	80086ac <HAL_TIM_Base_Stop_IT>
				HAL_GPIO_WritePin(FAN_EN_GPIO_Port, FAN_EN_Pin, GPIO_PIN_RESET);
 80031ce:	2200      	movs	r2, #0
 80031d0:	2120      	movs	r1, #32
 80031d2:	480f      	ldr	r0, [pc, #60]	@ (8003210 <handleTouch+0x71c>)
 80031d4:	f001 ff5c 	bl	8005090 <HAL_GPIO_WritePin>
			}
		}
		break;
 80031d8:	e0d0      	b.n	800337c <handleTouch+0x888>
 80031da:	bf00      	nop
 80031dc:	200001b8 	.word	0x200001b8
 80031e0:	20000570 	.word	0x20000570
 80031e4:	20000293 	.word	0x20000293
 80031e8:	200000dc 	.word	0x200000dc
 80031ec:	2000ffb4 	.word	0x2000ffb4
 80031f0:	20000578 	.word	0x20000578
 80031f4:	2000057c 	.word	0x2000057c
 80031f8:	0800fe5c 	.word	0x0800fe5c
 80031fc:	200118bd 	.word	0x200118bd
 8003200:	20000030 	.word	0x20000030
 8003204:	20000108 	.word	0x20000108
 8003208:	20000528 	.word	0x20000528
 800320c:	20000498 	.word	0x20000498
 8003210:	40020800 	.word	0x40020800

	case PAGE_STOP:
		//no button
		if (x >= noButton.x && x <= (noButton.x + noButton.w) && y >= noButton.y
 8003214:	4b61      	ldr	r3, [pc, #388]	@ (800339c <handleTouch+0x8a8>)
 8003216:	881a      	ldrh	r2, [r3, #0]
 8003218:	88fb      	ldrh	r3, [r7, #6]
 800321a:	429a      	cmp	r2, r3
 800321c:	d822      	bhi.n	8003264 <handleTouch+0x770>
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	461a      	mov	r2, r3
 8003222:	4b5e      	ldr	r3, [pc, #376]	@ (800339c <handleTouch+0x8a8>)
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	4619      	mov	r1, r3
 8003228:	4b5c      	ldr	r3, [pc, #368]	@ (800339c <handleTouch+0x8a8>)
 800322a:	889b      	ldrh	r3, [r3, #4]
 800322c:	440b      	add	r3, r1
 800322e:	429a      	cmp	r2, r3
 8003230:	dc18      	bgt.n	8003264 <handleTouch+0x770>
 8003232:	4b5a      	ldr	r3, [pc, #360]	@ (800339c <handleTouch+0x8a8>)
 8003234:	885a      	ldrh	r2, [r3, #2]
 8003236:	88bb      	ldrh	r3, [r7, #4]
 8003238:	429a      	cmp	r2, r3
 800323a:	d813      	bhi.n	8003264 <handleTouch+0x770>
				&& y <= (noButton.y + noButton.h)) {
 800323c:	88bb      	ldrh	r3, [r7, #4]
 800323e:	461a      	mov	r2, r3
 8003240:	4b56      	ldr	r3, [pc, #344]	@ (800339c <handleTouch+0x8a8>)
 8003242:	885b      	ldrh	r3, [r3, #2]
 8003244:	4619      	mov	r1, r3
 8003246:	4b55      	ldr	r3, [pc, #340]	@ (800339c <handleTouch+0x8a8>)
 8003248:	88db      	ldrh	r3, [r3, #6]
 800324a:	440b      	add	r3, r1
 800324c:	429a      	cmp	r2, r3
 800324e:	dc09      	bgt.n	8003264 <handleTouch+0x770>
			currentPage = PAGE_PROGRESS;
 8003250:	4b53      	ldr	r3, [pc, #332]	@ (80033a0 <handleTouch+0x8ac>)
 8003252:	2205      	movs	r2, #5
 8003254:	701a      	strb	r2, [r3, #0]
			DrawProgressPage("FILL", rx_byte, rx_data);
 8003256:	4b53      	ldr	r3, [pc, #332]	@ (80033a4 <handleTouch+0x8b0>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	4a53      	ldr	r2, [pc, #332]	@ (80033a8 <handleTouch+0x8b4>)
 800325c:	4619      	mov	r1, r3
 800325e:	4853      	ldr	r0, [pc, #332]	@ (80033ac <handleTouch+0x8b8>)
 8003260:	f7fe ffee 	bl	8002240 <DrawProgressPage>
		}
		//yes button
		if (x >= yesButton.x && x <= (yesButton.x + yesButton.w)
 8003264:	4b52      	ldr	r3, [pc, #328]	@ (80033b0 <handleTouch+0x8bc>)
 8003266:	881a      	ldrh	r2, [r3, #0]
 8003268:	88fb      	ldrh	r3, [r7, #6]
 800326a:	429a      	cmp	r2, r3
 800326c:	f200 8088 	bhi.w	8003380 <handleTouch+0x88c>
 8003270:	88fb      	ldrh	r3, [r7, #6]
 8003272:	461a      	mov	r2, r3
 8003274:	4b4e      	ldr	r3, [pc, #312]	@ (80033b0 <handleTouch+0x8bc>)
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	4619      	mov	r1, r3
 800327a:	4b4d      	ldr	r3, [pc, #308]	@ (80033b0 <handleTouch+0x8bc>)
 800327c:	889b      	ldrh	r3, [r3, #4]
 800327e:	440b      	add	r3, r1
 8003280:	429a      	cmp	r2, r3
 8003282:	dc7d      	bgt.n	8003380 <handleTouch+0x88c>
				&& y >= yesButton.y && y <= (yesButton.y + yesButton.h)) {
 8003284:	4b4a      	ldr	r3, [pc, #296]	@ (80033b0 <handleTouch+0x8bc>)
 8003286:	885a      	ldrh	r2, [r3, #2]
 8003288:	88bb      	ldrh	r3, [r7, #4]
 800328a:	429a      	cmp	r2, r3
 800328c:	d878      	bhi.n	8003380 <handleTouch+0x88c>
 800328e:	88bb      	ldrh	r3, [r7, #4]
 8003290:	461a      	mov	r2, r3
 8003292:	4b47      	ldr	r3, [pc, #284]	@ (80033b0 <handleTouch+0x8bc>)
 8003294:	885b      	ldrh	r3, [r3, #2]
 8003296:	4619      	mov	r1, r3
 8003298:	4b45      	ldr	r3, [pc, #276]	@ (80033b0 <handleTouch+0x8bc>)
 800329a:	88db      	ldrh	r3, [r3, #6]
 800329c:	440b      	add	r3, r1
 800329e:	429a      	cmp	r2, r3
 80032a0:	dc6e      	bgt.n	8003380 <handleTouch+0x88c>
			//Send stop signal to ESP32 and go back to main page
			SendStopMotorsMessage();
 80032a2:	f000 fd95 	bl	8003dd0 <SendStopMotorsMessage>
			currentPage = PAGE_MAIN;
 80032a6:	4b3e      	ldr	r3, [pc, #248]	@ (80033a0 <handleTouch+0x8ac>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 80032ac:	4b41      	ldr	r3, [pc, #260]	@ (80033b4 <handleTouch+0x8c0>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fe fbb9 	bl	8001a28 <DrawMainPage>

			//stop the interrupt and turn fan off
			HAL_TIM_Base_Stop_IT(&htim2);
 80032b6:	4840      	ldr	r0, [pc, #256]	@ (80033b8 <handleTouch+0x8c4>)
 80032b8:	f005 f9f8 	bl	80086ac <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(FAN_EN_GPIO_Port, FAN_EN_Pin, GPIO_PIN_RESET);
 80032bc:	2200      	movs	r2, #0
 80032be:	2120      	movs	r1, #32
 80032c0:	483e      	ldr	r0, [pc, #248]	@ (80033bc <handleTouch+0x8c8>)
 80032c2:	f001 fee5 	bl	8005090 <HAL_GPIO_WritePin>
		}
		break;
 80032c6:	e05b      	b.n	8003380 <handleTouch+0x88c>

	case PAGE_PROTOCOL_INFO:
		//back button
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 80032c8:	4b3d      	ldr	r3, [pc, #244]	@ (80033c0 <handleTouch+0x8cc>)
 80032ca:	881a      	ldrh	r2, [r3, #0]
 80032cc:	88fb      	ldrh	r3, [r7, #6]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d858      	bhi.n	8003384 <handleTouch+0x890>
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	461a      	mov	r2, r3
 80032d6:	4b3a      	ldr	r3, [pc, #232]	@ (80033c0 <handleTouch+0x8cc>)
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	4619      	mov	r1, r3
 80032dc:	4b38      	ldr	r3, [pc, #224]	@ (80033c0 <handleTouch+0x8cc>)
 80032de:	889b      	ldrh	r3, [r3, #4]
 80032e0:	440b      	add	r3, r1
 80032e2:	429a      	cmp	r2, r3
 80032e4:	dc4e      	bgt.n	8003384 <handleTouch+0x890>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 80032e6:	4b36      	ldr	r3, [pc, #216]	@ (80033c0 <handleTouch+0x8cc>)
 80032e8:	885a      	ldrh	r2, [r3, #2]
 80032ea:	88bb      	ldrh	r3, [r7, #4]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d849      	bhi.n	8003384 <handleTouch+0x890>
 80032f0:	88bb      	ldrh	r3, [r7, #4]
 80032f2:	461a      	mov	r2, r3
 80032f4:	4b32      	ldr	r3, [pc, #200]	@ (80033c0 <handleTouch+0x8cc>)
 80032f6:	885b      	ldrh	r3, [r3, #2]
 80032f8:	4619      	mov	r1, r3
 80032fa:	4b31      	ldr	r3, [pc, #196]	@ (80033c0 <handleTouch+0x8cc>)
 80032fc:	88db      	ldrh	r3, [r3, #6]
 80032fe:	440b      	add	r3, r1
 8003300:	429a      	cmp	r2, r3
 8003302:	dc3f      	bgt.n	8003384 <handleTouch+0x890>
			currentPage = PAGE_SELECT;
 8003304:	4b26      	ldr	r3, [pc, #152]	@ (80033a0 <handleTouch+0x8ac>)
 8003306:	2201      	movs	r2, #1
 8003308:	701a      	strb	r2, [r3, #0]
			DrawInfoPage(buttons[i].label);
 800330a:	4b2e      	ldr	r3, [pc, #184]	@ (80033c4 <handleTouch+0x8d0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	222a      	movs	r2, #42	@ 0x2a
 8003310:	fb02 f303 	mul.w	r3, r2, r3
 8003314:	3308      	adds	r3, #8
 8003316:	4a2c      	ldr	r2, [pc, #176]	@ (80033c8 <handleTouch+0x8d4>)
 8003318:	4413      	add	r3, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe fd62 	bl	8001de4 <DrawInfoPage>
		}
		break;
 8003320:	e030      	b.n	8003384 <handleTouch+0x890>

	case PAGE_FINISH:
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 8003322:	4b27      	ldr	r3, [pc, #156]	@ (80033c0 <handleTouch+0x8cc>)
 8003324:	881a      	ldrh	r2, [r3, #0]
 8003326:	88fb      	ldrh	r3, [r7, #6]
 8003328:	429a      	cmp	r2, r3
 800332a:	d82d      	bhi.n	8003388 <handleTouch+0x894>
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	461a      	mov	r2, r3
 8003330:	4b23      	ldr	r3, [pc, #140]	@ (80033c0 <handleTouch+0x8cc>)
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	4619      	mov	r1, r3
 8003336:	4b22      	ldr	r3, [pc, #136]	@ (80033c0 <handleTouch+0x8cc>)
 8003338:	889b      	ldrh	r3, [r3, #4]
 800333a:	440b      	add	r3, r1
 800333c:	429a      	cmp	r2, r3
 800333e:	dc23      	bgt.n	8003388 <handleTouch+0x894>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 8003340:	4b1f      	ldr	r3, [pc, #124]	@ (80033c0 <handleTouch+0x8cc>)
 8003342:	885a      	ldrh	r2, [r3, #2]
 8003344:	88bb      	ldrh	r3, [r7, #4]
 8003346:	429a      	cmp	r2, r3
 8003348:	d81e      	bhi.n	8003388 <handleTouch+0x894>
 800334a:	88bb      	ldrh	r3, [r7, #4]
 800334c:	461a      	mov	r2, r3
 800334e:	4b1c      	ldr	r3, [pc, #112]	@ (80033c0 <handleTouch+0x8cc>)
 8003350:	885b      	ldrh	r3, [r3, #2]
 8003352:	4619      	mov	r1, r3
 8003354:	4b1a      	ldr	r3, [pc, #104]	@ (80033c0 <handleTouch+0x8cc>)
 8003356:	88db      	ldrh	r3, [r3, #6]
 8003358:	440b      	add	r3, r1
 800335a:	429a      	cmp	r2, r3
 800335c:	dc14      	bgt.n	8003388 <handleTouch+0x894>
			currentPage = PAGE_MAIN;
 800335e:	4b10      	ldr	r3, [pc, #64]	@ (80033a0 <handleTouch+0x8ac>)
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8003364:	4b13      	ldr	r3, [pc, #76]	@ (80033b4 <handleTouch+0x8c0>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7fe fb5d 	bl	8001a28 <DrawMainPage>
		}
		break;
 800336e:	e00b      	b.n	8003388 <handleTouch+0x894>
		break;
 8003370:	bf00      	nop
 8003372:	e00a      	b.n	800338a <handleTouch+0x896>
		break;
 8003374:	bf00      	nop
 8003376:	e008      	b.n	800338a <handleTouch+0x896>
		break;
 8003378:	bf00      	nop
 800337a:	e006      	b.n	800338a <handleTouch+0x896>
		break;
 800337c:	bf00      	nop
 800337e:	e004      	b.n	800338a <handleTouch+0x896>
		break;
 8003380:	bf00      	nop
 8003382:	e002      	b.n	800338a <handleTouch+0x896>
		break;
 8003384:	bf00      	nop
 8003386:	e000      	b.n	800338a <handleTouch+0x896>
		break;
 8003388:	bf00      	nop
	}

	HAL_Delay(SCREEN_DELAY); //debouncing delay
 800338a:	2032      	movs	r0, #50	@ 0x32
 800338c:	f001 f8e0 	bl	8004550 <HAL_Delay>
	return 1;
 8003390:	2301      	movs	r3, #1
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	bd90      	pop	{r4, r7, pc}
 800339a:	bf00      	nop
 800339c:	2000023c 	.word	0x2000023c
 80033a0:	20000570 	.word	0x20000570
 80033a4:	20000578 	.word	0x20000578
 80033a8:	2000057c 	.word	0x2000057c
 80033ac:	0800fe5c 	.word	0x0800fe5c
 80033b0:	20000210 	.word	0x20000210
 80033b4:	20000293 	.word	0x20000293
 80033b8:	20000498 	.word	0x20000498
 80033bc:	40020800 	.word	0x40020800
 80033c0:	200001b8 	.word	0x200001b8
 80033c4:	200005ac 	.word	0x200005ac
 80033c8:	20000030 	.word	0x20000030

080033cc <erase_sector>:
/**
 * @brief: Erase the memory from an entire sector
 * @param Sector: The sector number
 * @retval: none
 */
void erase_sector(uint32_t Sector) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();  // Unlock flash to enable erasing
 80033d4:	f001 fad8 	bl	8004988 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(sector_mapping(Sector), VOLTAGE_RANGE_3);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 fd75 	bl	8003ec8 <sector_mapping>
 80033de:	4603      	mov	r3, r0
 80033e0:	2102      	movs	r1, #2
 80033e2:	4618      	mov	r0, r3
 80033e4:	f001 fc42 	bl	8004c6c <FLASH_Erase_Sector>
	HAL_FLASH_Lock();  // Lock flash after erasing
 80033e8:	f001 faf0 	bl	80049cc <HAL_FLASH_Lock>
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <write_to_flash>:
 * @param flash_address: address of string in flash memory that will be stored
 * @retval: none
 * Note: PLEASE UNLOCK AND LOCK FLASH BEFORE AND AFTER USING THIS FUNCTION,
 * IT DOES NOT DO IT ITSELF
 */
void write_to_flash(const char *data, uint32_t flash_address) {
 80033f4:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 80033f8:	b085      	sub	sp, #20
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
	//HAL_FLASH_Unlock();  // Unlock flash for writing

	for (uint8_t i = 0; i < strlen(data); i++) {
 8003400:	2300      	movs	r3, #0
 8003402:	73fb      	strb	r3, [r7, #15]
 8003404:	e012      	b.n	800342c <write_to_flash+0x38>
		//printf("%c", data[i]);
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flash_address + i, data[i]); // Write to flash
 8003406:	7bfa      	ldrb	r2, [r7, #15]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	18d1      	adds	r1, r2, r3
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	4413      	add	r3, r2
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2200      	movs	r2, #0
 8003418:	4698      	mov	r8, r3
 800341a:	4691      	mov	r9, r2
 800341c:	4642      	mov	r2, r8
 800341e:	464b      	mov	r3, r9
 8003420:	2000      	movs	r0, #0
 8003422:	f001 fa5d 	bl	80048e0 <HAL_FLASH_Program>
	for (uint8_t i = 0; i < strlen(data); i++) {
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	3301      	adds	r3, #1
 800342a:	73fb      	strb	r3, [r7, #15]
 800342c:	7bfc      	ldrb	r4, [r7, #15]
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fc fede 	bl	80001f0 <strlen>
 8003434:	4603      	mov	r3, r0
 8003436:	429c      	cmp	r4, r3
 8003438:	d3e5      	bcc.n	8003406 <write_to_flash+0x12>
	}

	//HAL_FLASH_Lock();  // Lock flash after writing
}
 800343a:	bf00      	nop
 800343c:	bf00      	nop
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

08003446 <read_from_flash>:
 * @param flash_address: address of string in flash memory that will be read
 * @retval: failure if its reading trash from flash memory.
 * it literally does not read from flash btw if it detects 0xFF at the start
 * that means your output buffer will not be updated
 */
uint8_t read_from_flash(char *output, uint32_t flash_address) {
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	6039      	str	r1, [r7, #0]
	// Read byte by byte from flash memory, get a whole string in output variable
	for (uint8_t i = 0; i < MAX_LINE_LENGTH; i++) {
 8003450:	2300      	movs	r3, #0
 8003452:	73fb      	strb	r3, [r7, #15]
 8003454:	e014      	b.n	8003480 <read_from_flash+0x3a>
		char key = *(char*) (flash_address + i);
 8003456:	7bfa      	ldrb	r2, [r7, #15]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	4413      	add	r3, r2
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	73bb      	strb	r3, [r7, #14]
		//check if reading trash (0xFF) from flash memory
		if (key == 0xFF) {
 8003460:	7bbb      	ldrb	r3, [r7, #14]
 8003462:	2bff      	cmp	r3, #255	@ 0xff
 8003464:	d104      	bne.n	8003470 <read_from_flash+0x2a>
			if (i == 0) {
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d106      	bne.n	800347a <read_from_flash+0x34>
				return 0;
 800346c:	2300      	movs	r3, #0
 800346e:	e01b      	b.n	80034a8 <read_from_flash+0x62>
			}
		} else {
			output[i] = key;
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	4413      	add	r3, r2
 8003476:	7bba      	ldrb	r2, [r7, #14]
 8003478:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX_LINE_LENGTH; i++) {
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	3301      	adds	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	2b1f      	cmp	r3, #31
 8003484:	d9e7      	bls.n	8003456 <read_from_flash+0x10>
		}
	}
	output[strlen(output)] = '\0'; //add null to the end of string for printing
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fc feb2 	bl	80001f0 <strlen>
 800348c:	4602      	mov	r2, r0
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	2200      	movs	r2, #0
 8003494:	701a      	strb	r2, [r3, #0]
	//printf("output is %s and strlen: %d\n", output, strlen(output));

	//error handling. G-codes are less than 32 chars, anything more is trash
	if (strlen(output) < MAX_LINE_LENGTH) {
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7fc feaa 	bl	80001f0 <strlen>
 800349c:	4603      	mov	r3, r0
 800349e:	2b1f      	cmp	r3, #31
 80034a0:	d801      	bhi.n	80034a6 <read_from_flash+0x60>
		return 1;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <read_from_flash+0x62>
	} else {
		return 0;
 80034a6:	2300      	movs	r3, #0
	}

}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <storeProtocol>:
 * @param gcode_file: array of G-code commands
 * @param sector: which sector to store protocol in
 * @retval: failure if sector is "full"
 */
uint8_t storeProtocol(char new_protocol[MAX_LINES][MAX_LINE_LENGTH],
		uint32_t sector) {
 80034b0:	b580      	push	{r7, lr}
 80034b2:	f5ad 4d96 	sub.w	sp, sp, #19200	@ 0x4b00
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 80034be:	f6a3 331c 	subw	r3, r3, #2844	@ 0xb1c
 80034c2:	6018      	str	r0, [r3, #0]
 80034c4:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 80034c8:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 80034cc:	6019      	str	r1, [r3, #0]

	//initialize variables
	int i = 0;  //protocol index
 80034ce:	2300      	movs	r3, #0
 80034d0:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80034d4:	f102 021c 	add.w	r2, r2, #28
 80034d8:	6013      	str	r3, [r2, #0]
	int j = 0;  //line index
 80034da:	2300      	movs	r3, #0
 80034dc:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80034e0:	f102 0218 	add.w	r2, r2, #24
 80034e4:	6013      	str	r3, [r2, #0]
	char protocolStorage[MAX_PROTOCOLS_IN_SECTOR][MAX_LINES][MAX_LINE_LENGTH] =
 80034e6:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 80034ea:	f6a3 3318 	subw	r3, r3, #2840	@ 0xb18
 80034ee:	4618      	mov	r0, r3
 80034f0:	f44f 4396 	mov.w	r3, #19200	@ 0x4b00
 80034f4:	461a      	mov	r2, r3
 80034f6:	2100      	movs	r1, #0
 80034f8:	f00b fdce 	bl	800f098 <memset>
			{ { { '\0' } } };
	uint32_t flash_address = get_sector_address(sector);
 80034fc:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8003500:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	f000 fc77 	bl	8003df8 <get_sector_address>
 800350a:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 800350e:	f103 0314 	add.w	r3, r3, #20
 8003512:	6018      	str	r0, [r3, #0]

	//check if all sectors are full before storing a protocol
	uint8_t num_protocols = get_num_protocols_in_sector(sector);
 8003514:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8003518:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 800351c:	6818      	ldr	r0, [r3, #0]
 800351e:	f000 f966 	bl	80037ee <get_num_protocols_in_sector>
 8003522:	4603      	mov	r3, r0
 8003524:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003528:	f102 0213 	add.w	r2, r2, #19
 800352c:	7013      	strb	r3, [r2, #0]
	if (num_protocols == MAX_PROTOCOLS_IN_SECTOR) {
 800352e:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003532:	f103 0313 	add.w	r3, r3, #19
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b03      	cmp	r3, #3
 800353a:	d101      	bne.n	8003540 <storeProtocol+0x90>
		return 0;
 800353c:	2300      	movs	r3, #0
 800353e:	e150      	b.n	80037e2 <storeProtocol+0x332>
	}

	//read existing protocols in sector and put into the temp protocol storage
	for (i = 0; i < num_protocols; i++) {
 8003540:	2300      	movs	r3, #0
 8003542:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003546:	f102 021c 	add.w	r2, r2, #28
 800354a:	6013      	str	r3, [r2, #0]
 800354c:	e05a      	b.n	8003604 <storeProtocol+0x154>
		for (j = 0; j < MAX_LINES; j++) {
 800354e:	2300      	movs	r3, #0
 8003550:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003554:	f102 0218 	add.w	r2, r2, #24
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e041      	b.n	80035e0 <storeProtocol+0x130>
			//get the address for the current line in the current protocol
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 800355c:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003560:	f103 031c 	add.w	r3, r3, #28
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f241 7270 	movw	r2, #6000	@ 0x1770
 800356a:	fb02 f303 	mul.w	r3, r2, r3
					+ j * MAX_LINE_LENGTH;
 800356e:	461a      	mov	r2, r3
 8003570:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003574:	f103 0318 	add.w	r3, r3, #24
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	015b      	lsls	r3, r3, #5
 800357c:	4413      	add	r3, r2
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 800357e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003582:	f102 0214 	add.w	r2, r2, #20
 8003586:	6812      	ldr	r2, [r2, #0]
 8003588:	4413      	add	r3, r2
 800358a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800358e:	f102 0208 	add.w	r2, r2, #8
 8003592:	6013      	str	r3, [r2, #0]
			//read lines from memory into buffer until you reach garbage
			read_from_flash(protocolStorage[i][j], temp_address); //only updates protocolStorage if its a valid line from memory
 8003594:	f107 0320 	add.w	r3, r7, #32
 8003598:	3b18      	subs	r3, #24
 800359a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800359e:	f102 021c 	add.w	r2, r2, #28
 80035a2:	6812      	ldr	r2, [r2, #0]
 80035a4:	21c8      	movs	r1, #200	@ 0xc8
 80035a6:	fb02 f101 	mul.w	r1, r2, r1
 80035aa:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80035ae:	f102 0218 	add.w	r2, r2, #24
 80035b2:	6812      	ldr	r2, [r2, #0]
 80035b4:	440a      	add	r2, r1
 80035b6:	0152      	lsls	r2, r2, #5
 80035b8:	4413      	add	r3, r2
 80035ba:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80035be:	f102 0208 	add.w	r2, r2, #8
 80035c2:	6811      	ldr	r1, [r2, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff ff3e 	bl	8003446 <read_from_flash>
		for (j = 0; j < MAX_LINES; j++) {
 80035ca:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80035ce:	f103 0318 	add.w	r3, r3, #24
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3301      	adds	r3, #1
 80035d6:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80035da:	f102 0218 	add.w	r2, r2, #24
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80035e4:	f103 0318 	add.w	r3, r3, #24
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2bc7      	cmp	r3, #199	@ 0xc7
 80035ec:	ddb6      	ble.n	800355c <storeProtocol+0xac>
	for (i = 0; i < num_protocols; i++) {
 80035ee:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80035f2:	f103 031c 	add.w	r3, r3, #28
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3301      	adds	r3, #1
 80035fa:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80035fe:	f102 021c 	add.w	r2, r2, #28
 8003602:	6013      	str	r3, [r2, #0]
 8003604:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003608:	f103 0313 	add.w	r3, r3, #19
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003612:	f102 021c 	add.w	r2, r2, #28
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	db98      	blt.n	800354e <storeProtocol+0x9e>
	}
	//output: we now have the existing protocols in the buffer.
	//they only have their first number of lines in. the rest of lines are null

	//put the new protocol into the temp protocol storage
	for (j = 0; j < MAX_LINES; j++) {
 800361c:	2300      	movs	r3, #0
 800361e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003622:	f102 0218 	add.w	r2, r2, #24
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	e03b      	b.n	80036a2 <storeProtocol+0x1f2>
		//copy each line into the buffer from new protocol, should be null terminated from qr scanner
		if (new_protocol[j][0] != '\0') {
 800362a:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 800362e:	f103 0318 	add.w	r3, r3, #24
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	015b      	lsls	r3, r3, #5
 8003636:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 800363a:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 800363e:	6812      	ldr	r2, [r2, #0]
 8003640:	4413      	add	r3, r2
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d021      	beq.n	800368c <storeProtocol+0x1dc>
			strcpy(protocolStorage[i][j], new_protocol[j]);
 8003648:	f107 0320 	add.w	r3, r7, #32
 800364c:	3b18      	subs	r3, #24
 800364e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003652:	f102 021c 	add.w	r2, r2, #28
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	21c8      	movs	r1, #200	@ 0xc8
 800365a:	fb02 f101 	mul.w	r1, r2, r1
 800365e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003662:	f102 0218 	add.w	r2, r2, #24
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	440a      	add	r2, r1
 800366a:	0152      	lsls	r2, r2, #5
 800366c:	1898      	adds	r0, r3, r2
 800366e:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003672:	f103 0318 	add.w	r3, r3, #24
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	015b      	lsls	r3, r3, #5
 800367a:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 800367e:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	4413      	add	r3, r2
 8003686:	4619      	mov	r1, r3
 8003688:	f00b fd91 	bl	800f1ae <strcpy>
	for (j = 0; j < MAX_LINES; j++) {
 800368c:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003690:	f103 0318 	add.w	r3, r3, #24
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3301      	adds	r3, #1
 8003698:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800369c:	f102 0218 	add.w	r2, r2, #24
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80036a6:	f103 0318 	add.w	r3, r3, #24
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2bc7      	cmp	r3, #199	@ 0xc7
 80036ae:	ddbc      	ble.n	800362a <storeProtocol+0x17a>
	}
	//we now have the new protocol in the buffer.
	//it only has the first number of lines in. the rest of lines are null

	//write existing protocols and new protocol to flash memory, string-by-string
	erase_sector(sector); //erase sector before writing
 80036b0:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 80036b4:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	f7ff fe87 	bl	80033cc <erase_sector>
	HAL_FLASH_Unlock(); // Unlock flash for writing. note: the erase_sector() unlocks and locks itself
 80036be:	f001 f963 	bl	8004988 <HAL_FLASH_Unlock>
	for (i = 0; i < (num_protocols + 1); i++) {
 80036c2:	2300      	movs	r3, #0
 80036c4:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80036c8:	f102 021c 	add.w	r2, r2, #28
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	e078      	b.n	80037c2 <storeProtocol+0x312>
		for (j = 0; j < MAX_LINES; j++) {
 80036d0:	2300      	movs	r3, #0
 80036d2:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80036d6:	f102 0218 	add.w	r2, r2, #24
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	e05f      	b.n	800379e <storeProtocol+0x2ee>
			//if first character of a line is null from qr scanner or trash from flash, ignore it
			if ((new_protocol[j][0] != '\0') && (new_protocol[j][0] != 0xFF)) {
 80036de:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80036e2:	f103 0318 	add.w	r3, r3, #24
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	015b      	lsls	r3, r3, #5
 80036ea:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 80036ee:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	4413      	add	r3, r2
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d045      	beq.n	8003788 <storeProtocol+0x2d8>
 80036fc:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003700:	f103 0318 	add.w	r3, r3, #24
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	015b      	lsls	r3, r3, #5
 8003708:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 800370c:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	4413      	add	r3, r2
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2bff      	cmp	r3, #255	@ 0xff
 8003718:	d036      	beq.n	8003788 <storeProtocol+0x2d8>
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 800371a:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 800371e:	f103 031c 	add.w	r3, r3, #28
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f241 7270 	movw	r2, #6000	@ 0x1770
 8003728:	fb02 f303 	mul.w	r3, r2, r3
						+ j * MAX_LINE_LENGTH;
 800372c:	461a      	mov	r2, r3
 800372e:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003732:	f103 0318 	add.w	r3, r3, #24
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	015b      	lsls	r3, r3, #5
 800373a:	4413      	add	r3, r2
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 800373c:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003740:	f102 0214 	add.w	r2, r2, #20
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	4413      	add	r3, r2
 8003748:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800374c:	f102 020c 	add.w	r2, r2, #12
 8003750:	6013      	str	r3, [r2, #0]
				//printf("len: %d and data: %s", strlen(protocolStorage[i][j]), protocolStorage[i][j]);
				write_to_flash(protocolStorage[i][j], temp_address);
 8003752:	f107 0320 	add.w	r3, r7, #32
 8003756:	3b18      	subs	r3, #24
 8003758:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800375c:	f102 021c 	add.w	r2, r2, #28
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	21c8      	movs	r1, #200	@ 0xc8
 8003764:	fb02 f101 	mul.w	r1, r2, r1
 8003768:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800376c:	f102 0218 	add.w	r2, r2, #24
 8003770:	6812      	ldr	r2, [r2, #0]
 8003772:	440a      	add	r2, r1
 8003774:	0152      	lsls	r2, r2, #5
 8003776:	4413      	add	r3, r2
 8003778:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800377c:	f102 020c 	add.w	r2, r2, #12
 8003780:	6811      	ldr	r1, [r2, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fe36 	bl	80033f4 <write_to_flash>
		for (j = 0; j < MAX_LINES; j++) {
 8003788:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 800378c:	f103 0318 	add.w	r3, r3, #24
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3301      	adds	r3, #1
 8003794:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003798:	f102 0218 	add.w	r2, r2, #24
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80037a2:	f103 0318 	add.w	r3, r3, #24
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2bc7      	cmp	r3, #199	@ 0xc7
 80037aa:	dd98      	ble.n	80036de <storeProtocol+0x22e>
	for (i = 0; i < (num_protocols + 1); i++) {
 80037ac:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80037b0:	f103 031c 	add.w	r3, r3, #28
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3301      	adds	r3, #1
 80037b8:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80037bc:	f102 021c 	add.w	r2, r2, #28
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80037c6:	f103 0313 	add.w	r3, r3, #19
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80037d0:	f102 021c 	add.w	r2, r2, #28
 80037d4:	6812      	ldr	r2, [r2, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	f77f af7a 	ble.w	80036d0 <storeProtocol+0x220>
			}
		}
	}
	HAL_FLASH_Lock();  // Unlock flash for writing
 80037dc:	f001 f8f6 	bl	80049cc <HAL_FLASH_Lock>

	//output:flash memory now has the lines of protocol storage in there
	//the remaining space is still 0xFF in flash
	return 1;
 80037e0:	2301      	movs	r3, #1
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	f507 4796 	add.w	r7, r7, #19200	@ 0x4b00
 80037e8:	3720      	adds	r7, #32
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <get_num_protocols_in_sector>:

//return number of protocols in the sector
uint8_t get_num_protocols_in_sector(uint32_t sector) {
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b086      	sub	sp, #24
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
	uint32_t flash_address = get_sector_address(sector);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fafe 	bl	8003df8 <get_sector_address>
 80037fc:	6138      	str	r0, [r7, #16]

	uint8_t i = 0;
 80037fe:	2300      	movs	r3, #0
 8003800:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8003802:	2300      	movs	r3, #0
 8003804:	75fb      	strb	r3, [r7, #23]
 8003806:	e011      	b.n	800382c <get_num_protocols_in_sector+0x3e>
		uint8_t first_char = *(uint8_t*) (flash_address + i * PROTOCOL_SIZE);
 8003808:	7dfb      	ldrb	r3, [r7, #23]
 800380a:	f241 7270 	movw	r2, #6000	@ 0x1770
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	461a      	mov	r2, r3
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4413      	add	r3, r2
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	73fb      	strb	r3, [r7, #15]
		//memory in flash is default 0xFF
		if (first_char == 0xFF) {
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	2bff      	cmp	r3, #255	@ 0xff
 8003820:	d101      	bne.n	8003826 <get_num_protocols_in_sector+0x38>
			return i;
 8003822:	7dfb      	ldrb	r3, [r7, #23]
 8003824:	e006      	b.n	8003834 <get_num_protocols_in_sector+0x46>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8003826:	7dfb      	ldrb	r3, [r7, #23]
 8003828:	3301      	adds	r3, #1
 800382a:	75fb      	strb	r3, [r7, #23]
 800382c:	7dfb      	ldrb	r3, [r7, #23]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d9ea      	bls.n	8003808 <get_num_protocols_in_sector+0x1a>
		}
	}
	return i;
 8003832:	7dfb      	ldrb	r3, [r7, #23]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <getFreeSector>:

//check each sector sequentially for any space.
//return the first sector number you find that has space
uint8_t getFreeSector(void) {
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
	uint8_t i = 1;
 8003842:	2301      	movs	r3, #1
 8003844:	73fb      	strb	r3, [r7, #15]
	//check every sector starting at 1
	for (i = 1; i < (NUMBER_OF_SECTORS + 1); i++) {
 8003846:	2301      	movs	r3, #1
 8003848:	73fb      	strb	r3, [r7, #15]
 800384a:	e01f      	b.n	800388c <getFreeSector+0x50>
		//check each potential protocol slot in the current sector
		for (uint8_t j = 0; j < MAX_PROTOCOLS_IN_SECTOR; j++) {
 800384c:	2300      	movs	r3, #0
 800384e:	73bb      	strb	r3, [r7, #14]
 8003850:	e016      	b.n	8003880 <getFreeSector+0x44>
			//check first char of the given protocol in the current sector
			uint32_t flash_address = get_sector_address(i) + j * PROTOCOL_SIZE;
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	4618      	mov	r0, r3
 8003856:	f000 facf 	bl	8003df8 <get_sector_address>
 800385a:	4602      	mov	r2, r0
 800385c:	7bbb      	ldrb	r3, [r7, #14]
 800385e:	f241 7170 	movw	r1, #6000	@ 0x1770
 8003862:	fb01 f303 	mul.w	r3, r1, r3
 8003866:	4413      	add	r3, r2
 8003868:	60bb      	str	r3, [r7, #8]
			char first_char = *(char*) (flash_address);
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	71fb      	strb	r3, [r7, #7]
			//if memory address is empty, this sector is free
			if (first_char == 0xFF) {
 8003870:	79fb      	ldrb	r3, [r7, #7]
 8003872:	2bff      	cmp	r3, #255	@ 0xff
 8003874:	d101      	bne.n	800387a <getFreeSector+0x3e>
				return i;
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	e00e      	b.n	8003898 <getFreeSector+0x5c>
		for (uint8_t j = 0; j < MAX_PROTOCOLS_IN_SECTOR; j++) {
 800387a:	7bbb      	ldrb	r3, [r7, #14]
 800387c:	3301      	adds	r3, #1
 800387e:	73bb      	strb	r3, [r7, #14]
 8003880:	7bbb      	ldrb	r3, [r7, #14]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d9e5      	bls.n	8003852 <getFreeSector+0x16>
	for (i = 1; i < (NUMBER_OF_SECTORS + 1); i++) {
 8003886:	7bfb      	ldrb	r3, [r7, #15]
 8003888:	3301      	adds	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	2b0e      	cmp	r3, #14
 8003890:	d9dc      	bls.n	800384c <getFreeSector+0x10>
			}
		}
	}
	//if somehow all sectors are full, return 15 or higher (16 in this case)
	return i + 1;
 8003892:	7bfb      	ldrb	r3, [r7, #15]
 8003894:	3301      	adds	r3, #1
 8003896:	b2db      	uxtb	r3, r3
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <transmitProtocol>:

/**
 * @brief: Transmit protocol from flash memory to ESP32 via UART string-by-string
 * @param sector: which sector the protocol is stored in
 */
void transmitProtocol(uint32_t sector, uint32_t offset) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08c      	sub	sp, #48	@ 0x30
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
	char output[MAX_LINE_LENGTH] = { '\0' };
 80038aa:	2300      	movs	r3, #0
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	f107 030c 	add.w	r3, r7, #12
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	605a      	str	r2, [r3, #4]
 80038b8:	609a      	str	r2, [r3, #8]
 80038ba:	60da      	str	r2, [r3, #12]
 80038bc:	611a      	str	r2, [r3, #16]
 80038be:	615a      	str	r2, [r3, #20]
 80038c0:	619a      	str	r2, [r3, #24]
	uint32_t flash_address = get_sector_address(sector) + offset * PROTOCOL_SIZE;
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fa98 	bl	8003df8 <get_sector_address>
 80038c8:	4602      	mov	r2, r0
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	f241 7170 	movw	r1, #6000	@ 0x1770
 80038d0:	fb01 f303 	mul.w	r3, r1, r3
 80038d4:	4413      	add	r3, r2
 80038d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	//printf("\nNew Protocol\n"); //just for debugging

	//we need to process up to 1028 G-code commands
	//but if we run into an invalid string, gcode file is over
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 80038d8:	2300      	movs	r3, #0
 80038da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80038de:	e028      	b.n	8003932 <transmitProtocol+0x92>
		//an alternative to resetting the temp buffer is to only read up to newline
		memset(output, 0, MAX_LINE_LENGTH); // Sets all elements of buffer to 0
 80038e0:	f107 0308 	add.w	r3, r7, #8
 80038e4:	2220      	movs	r2, #32
 80038e6:	2100      	movs	r1, #0
 80038e8:	4618      	mov	r0, r3
 80038ea:	f00b fbd5 	bl	800f098 <memset>
		if (read_from_flash(output, flash_address + i * MAX_LINE_LENGTH)) {
 80038ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80038f2:	015b      	lsls	r3, r3, #5
 80038f4:	461a      	mov	r2, r3
 80038f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f8:	441a      	add	r2, r3
 80038fa:	f107 0308 	add.w	r3, r7, #8
 80038fe:	4611      	mov	r1, r2
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff fda0 	bl	8003446 <read_from_flash>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00d      	beq.n	8003928 <transmitProtocol+0x88>
			//printf("%s", output);
			HAL_UART_Transmit(&huart2, (uint8_t*) output, strlen(output),
 800390c:	f107 0308 	add.w	r3, r7, #8
 8003910:	4618      	mov	r0, r3
 8003912:	f7fc fc6d 	bl	80001f0 <strlen>
 8003916:	4603      	mov	r3, r0
 8003918:	b29a      	uxth	r2, r3
 800391a:	f107 0108 	add.w	r1, r7, #8
 800391e:	f04f 33ff 	mov.w	r3, #4294967295
 8003922:	4808      	ldr	r0, [pc, #32]	@ (8003944 <transmitProtocol+0xa4>)
 8003924:	f005 fd7a 	bl	800941c <HAL_UART_Transmit>
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 8003928:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800392c:	3301      	adds	r3, #1
 800392e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003932:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003936:	2bc7      	cmp	r3, #199	@ 0xc7
 8003938:	d9d2      	bls.n	80038e0 <transmitProtocol+0x40>
			HAL_MAX_DELAY);
		}
	}
}
 800393a:	bf00      	nop
 800393c:	bf00      	nop
 800393e:	3730      	adds	r7, #48	@ 0x30
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000528 	.word	0x20000528

08003948 <queueProtocol>:

/**
 * @brief: Queue protocol from flash memory to RAM buffer
 * @param sector: which sector the protocol is stored in
 */
void queueProtocol(uint32_t sector, uint32_t offset) {
 8003948:	b5b0      	push	{r4, r5, r7, lr}
 800394a:	b08c      	sub	sp, #48	@ 0x30
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
	char output[MAX_LINE_LENGTH] = { '\0' };
 8003952:	2300      	movs	r3, #0
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	f107 030c 	add.w	r3, r7, #12
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	605a      	str	r2, [r3, #4]
 8003960:	609a      	str	r2, [r3, #8]
 8003962:	60da      	str	r2, [r3, #12]
 8003964:	611a      	str	r2, [r3, #16]
 8003966:	615a      	str	r2, [r3, #20]
 8003968:	619a      	str	r2, [r3, #24]
	uint32_t flash_address = get_sector_address(sector) + offset * PROTOCOL_SIZE;
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 fa44 	bl	8003df8 <get_sector_address>
 8003970:	4602      	mov	r2, r0
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	f241 7170 	movw	r1, #6000	@ 0x1770
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	4413      	add	r3, r2
 800397e:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t last_line = 0;
 8003980:	2300      	movs	r3, #0
 8003982:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 8003986:	2300      	movs	r3, #0
 8003988:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800398c:	e030      	b.n	80039f0 <queueProtocol+0xa8>
		memset(output, 0, MAX_LINE_LENGTH); // Sets all elements of buffer to 0
 800398e:	f107 0308 	add.w	r3, r7, #8
 8003992:	2220      	movs	r2, #32
 8003994:	2100      	movs	r1, #0
 8003996:	4618      	mov	r0, r3
 8003998:	f00b fb7e 	bl	800f098 <memset>
		if (read_from_flash(output, flash_address + i * MAX_LINE_LENGTH)) {
 800399c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80039a0:	015b      	lsls	r3, r3, #5
 80039a2:	461a      	mov	r2, r3
 80039a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a6:	441a      	add	r2, r3
 80039a8:	f107 0308 	add.w	r3, r7, #8
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff fd49 	bl	8003446 <read_from_flash>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d015      	beq.n	80039e6 <queueProtocol+0x9e>
			strcpy(queueBuffer[queueSize][i], output);
 80039ba:	4b21      	ldr	r3, [pc, #132]	@ (8003a40 <queueProtocol+0xf8>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	4619      	mov	r1, r3
 80039c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80039c4:	22c8      	movs	r2, #200	@ 0xc8
 80039c6:	fb01 f202 	mul.w	r2, r1, r2
 80039ca:	4413      	add	r3, r2
 80039cc:	015b      	lsls	r3, r3, #5
 80039ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003a44 <queueProtocol+0xfc>)
 80039d0:	4413      	add	r3, r2
 80039d2:	f107 0208 	add.w	r2, r7, #8
 80039d6:	4611      	mov	r1, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f00b fbe8 	bl	800f1ae <strcpy>
			last_line = i;
 80039de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80039e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 80039e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80039ea:	3301      	adds	r3, #1
 80039ec:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80039f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80039f4:	2bc7      	cmp	r3, #199	@ 0xc7
 80039f6:	d9ca      	bls.n	800398e <queueProtocol+0x46>
		}
	}
	//dont store the tab operator of protocol for queueing
	queueBuffer[queueSize][last_line][strlen(queueBuffer[queueSize][last_line])
 80039f8:	4b11      	ldr	r3, [pc, #68]	@ (8003a40 <queueProtocol+0xf8>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	461d      	mov	r5, r3
 80039fe:	f897 402f 	ldrb.w	r4, [r7, #47]	@ 0x2f
 8003a02:	4b0f      	ldr	r3, [pc, #60]	@ (8003a40 <queueProtocol+0xf8>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	4619      	mov	r1, r3
 8003a08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003a0c:	22c8      	movs	r2, #200	@ 0xc8
 8003a0e:	fb01 f202 	mul.w	r2, r1, r2
 8003a12:	4413      	add	r3, r2
 8003a14:	015b      	lsls	r3, r3, #5
 8003a16:	4a0b      	ldr	r2, [pc, #44]	@ (8003a44 <queueProtocol+0xfc>)
 8003a18:	4413      	add	r3, r2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fc fbe8 	bl	80001f0 <strlen>
 8003a20:	4603      	mov	r3, r0
			- 1] = NULL_CHAR; //strlen gives the size of string. tab operator is size-1
 8003a22:	3b01      	subs	r3, #1
 8003a24:	4907      	ldr	r1, [pc, #28]	@ (8003a44 <queueProtocol+0xfc>)
 8003a26:	22c8      	movs	r2, #200	@ 0xc8
 8003a28:	fb05 f202 	mul.w	r2, r5, r2
 8003a2c:	4422      	add	r2, r4
 8003a2e:	0152      	lsls	r2, r2, #5
 8003a30:	440a      	add	r2, r1
 8003a32:	4413      	add	r3, r2
 8003a34:	2200      	movs	r2, #0
 8003a36:	701a      	strb	r2, [r3, #0]
}
 8003a38:	bf00      	nop
 8003a3a:	3730      	adds	r7, #48	@ 0x30
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a40:	2000ffb4 	.word	0x2000ffb4
 8003a44:	200005b4 	.word	0x200005b4

08003a48 <transmitQueuedProtocols>:

/**
 * @brief: Transmit queued protocols from RAM buffer to ESP32 via UART string-by-string
 * @param queueSize:
 */
void transmitQueuedProtocols(uint8_t queueSize) {
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	71fb      	strb	r3, [r7, #7]
	//i need to send a filler title
	//printf("FillerTitle\n");
	HAL_UART_Transmit(&huart2, (uint8_t*) "Filler\r\n", strlen("Filler\r\n"),
 8003a52:	f04f 33ff 	mov.w	r3, #4294967295
 8003a56:	2208      	movs	r2, #8
 8003a58:	491f      	ldr	r1, [pc, #124]	@ (8003ad8 <transmitQueuedProtocols+0x90>)
 8003a5a:	4820      	ldr	r0, [pc, #128]	@ (8003adc <transmitQueuedProtocols+0x94>)
 8003a5c:	f005 fcde 	bl	800941c <HAL_UART_Transmit>
	HAL_MAX_DELAY);

	//transmit the queued protocols
	for (uint8_t i = 0; i < queueSize; i++) {
 8003a60:	2300      	movs	r3, #0
 8003a62:	73fb      	strb	r3, [r7, #15]
 8003a64:	e028      	b.n	8003ab8 <transmitQueuedProtocols+0x70>
		for (uint8_t j = 1; j < MAX_LINES; j++) {
 8003a66:	2301      	movs	r3, #1
 8003a68:	73bb      	strb	r3, [r7, #14]
 8003a6a:	e01f      	b.n	8003aac <transmitQueuedProtocols+0x64>
			//printf(queueBuffer[i][j]);
			HAL_UART_Transmit(&huart2, (uint8_t*) queueBuffer[i][j],
 8003a6c:	7bfa      	ldrb	r2, [r7, #15]
 8003a6e:	7bbb      	ldrb	r3, [r7, #14]
 8003a70:	21c8      	movs	r1, #200	@ 0xc8
 8003a72:	fb01 f202 	mul.w	r2, r1, r2
 8003a76:	4413      	add	r3, r2
 8003a78:	015b      	lsls	r3, r3, #5
 8003a7a:	4a19      	ldr	r2, [pc, #100]	@ (8003ae0 <transmitQueuedProtocols+0x98>)
 8003a7c:	189c      	adds	r4, r3, r2
					strlen(queueBuffer[i][j]), HAL_MAX_DELAY);
 8003a7e:	7bfa      	ldrb	r2, [r7, #15]
 8003a80:	7bbb      	ldrb	r3, [r7, #14]
 8003a82:	21c8      	movs	r1, #200	@ 0xc8
 8003a84:	fb01 f202 	mul.w	r2, r1, r2
 8003a88:	4413      	add	r3, r2
 8003a8a:	015b      	lsls	r3, r3, #5
 8003a8c:	4a14      	ldr	r2, [pc, #80]	@ (8003ae0 <transmitQueuedProtocols+0x98>)
 8003a8e:	4413      	add	r3, r2
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fc fbad 	bl	80001f0 <strlen>
 8003a96:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) queueBuffer[i][j],
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	480e      	ldr	r0, [pc, #56]	@ (8003adc <transmitQueuedProtocols+0x94>)
 8003aa2:	f005 fcbb 	bl	800941c <HAL_UART_Transmit>
		for (uint8_t j = 1; j < MAX_LINES; j++) {
 8003aa6:	7bbb      	ldrb	r3, [r7, #14]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	73bb      	strb	r3, [r7, #14]
 8003aac:	7bbb      	ldrb	r3, [r7, #14]
 8003aae:	2bc7      	cmp	r3, #199	@ 0xc7
 8003ab0:	d9dc      	bls.n	8003a6c <transmitQueuedProtocols+0x24>
	for (uint8_t i = 0; i < queueSize; i++) {
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
 8003ab8:	7bfa      	ldrb	r2, [r7, #15]
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d3d2      	bcc.n	8003a66 <transmitQueuedProtocols+0x1e>
//	//debugging print
//	for (int a = 0; a < queueSize; a++) {
//		printf("%s\n", queueBuffer[a]);
//	}
	//finish with a tab operator
	HAL_UART_Transmit(&huart2, (uint8_t*) "\t", 1, HAL_MAX_DELAY);
 8003ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	4907      	ldr	r1, [pc, #28]	@ (8003ae4 <transmitQueuedProtocols+0x9c>)
 8003ac8:	4804      	ldr	r0, [pc, #16]	@ (8003adc <transmitQueuedProtocols+0x94>)
 8003aca:	f005 fca7 	bl	800941c <HAL_UART_Transmit>
}
 8003ace:	bf00      	nop
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd90      	pop	{r4, r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	0800ffcc 	.word	0x0800ffcc
 8003adc:	20000528 	.word	0x20000528
 8003ae0:	200005b4 	.word	0x200005b4
 8003ae4:	0800ffd8 	.word	0x0800ffd8

08003ae8 <deleteProtocol>:
 * @brief: Delete protocol from flash memory to ESP32 via UART string-by-string
 * @param sector: which sector the protocol is stored in
 * @param offset: the exact slot in the sector the protocol is stored in
 * @retval: none
 */
void deleteProtocol(uint32_t sector, uint32_t offset) {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	f5ad 4d96 	sub.w	sp, sp, #19200	@ 0x4b00
 8003aee:	b09c      	sub	sp, #112	@ 0x70
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003af6:	f6a3 336c 	subw	r3, r3, #2924	@ 0xb6c
 8003afa:	6018      	str	r0, [r3, #0]
 8003afc:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003b00:	f5a3 6337 	sub.w	r3, r3, #2928	@ 0xb70
 8003b04:	6019      	str	r1, [r3, #0]
	//initialize variables
	uint8_t new_offset = offset + 1; //have it range from 1-3
 8003b06:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003b0a:	f5a3 6337 	sub.w	r3, r3, #2928	@ 0xb70
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	3301      	adds	r3, #1
 8003b14:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003b18:	f102 025f 	add.w	r2, r2, #95	@ 0x5f
 8003b1c:	7013      	strb	r3, [r2, #0]
	int i = 0;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003b24:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003b28:	6013      	str	r3, [r2, #0]
	int j = 0; //indices for moving through flash memory
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003b30:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003b34:	6013      	str	r3, [r2, #0]
	char protocolStorage[MAX_PROTOCOLS_IN_SECTOR][MAX_LINES][MAX_LINE_LENGTH] =
 8003b36:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003b3a:	f6a3 3324 	subw	r3, r3, #2852	@ 0xb24
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f44f 4396 	mov.w	r3, #19200	@ 0x4b00
 8003b44:	461a      	mov	r2, r3
 8003b46:	2100      	movs	r1, #0
 8003b48:	f00b faa6 	bl	800f098 <memset>
			{ { { '\0' } } };
	uint32_t flash_address = get_sector_address(sector);
 8003b4c:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003b50:	f6a3 336c 	subw	r3, r3, #2924	@ 0xb6c
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	f000 f94f 	bl	8003df8 <get_sector_address>
 8003b5a:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003b5e:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8003b62:	6018      	str	r0, [r3, #0]
	char trashLine[MAX_LINE_LENGTH];
	memset(trashLine, 0xFF, sizeof(trashLine));
 8003b64:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003b68:	3b44      	subs	r3, #68	@ 0x44
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	21ff      	movs	r1, #255	@ 0xff
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f00b fa92 	bl	800f098 <memset>
	char nullLine[MAX_LINE_LENGTH];
	memset(nullLine, 0x00, sizeof(nullLine));
 8003b74:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003b78:	3b64      	subs	r3, #100	@ 0x64
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f00b fa8a 	bl	800f098 <memset>
	uint8_t num_protocols = get_num_protocols_in_sector(sector);
 8003b84:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003b88:	f6a3 336c 	subw	r3, r3, #2924	@ 0xb6c
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	f7ff fe2e 	bl	80037ee <get_num_protocols_in_sector>
 8003b92:	4603      	mov	r3, r0
 8003b94:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003b98:	f102 0257 	add.w	r2, r2, #87	@ 0x57
 8003b9c:	7013      	strb	r3, [r2, #0]

	int a = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003ba4:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8003ba8:	6013      	str	r3, [r2, #0]
	int b = 0; //separate indices for protocolstorage
 8003baa:	2300      	movs	r3, #0
 8003bac:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003bb0:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003bb4:	6013      	str	r3, [r2, #0]

	//copy all protocols in sector to local buffer
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003bbc:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	e082      	b.n	8003cca <deleteProtocol+0x1e2>
		if (i != offset) {
 8003bc4:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003bc8:	f5a3 6337 	sub.w	r3, r3, #2928	@ 0xb70
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003bd2:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d06b      	beq.n	8003cb4 <deleteProtocol+0x1cc>
			//copy all lines of the protocol into the buffer
			for (j = 0; j < MAX_LINES; j++) {
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003be2:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	e04c      	b.n	8003c84 <deleteProtocol+0x19c>
				//get the address for the current line in the current protocol
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8003bea:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003bee:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f241 7270 	movw	r2, #6000	@ 0x1770
 8003bf8:	fb02 f303 	mul.w	r3, r2, r3
						+ j * MAX_LINE_LENGTH;
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003c02:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	015b      	lsls	r3, r3, #5
 8003c0a:	4413      	add	r3, r2
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8003c0c:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003c10:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8003c14:	6812      	ldr	r2, [r2, #0]
 8003c16:	4413      	add	r3, r2
 8003c18:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003c1c:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 8003c20:	6013      	str	r3, [r2, #0]
				//read lines from memory into buffer until you reach garbage
				read_from_flash(protocolStorage[a][b], temp_address); //only updates protocolStorage if its a valid line from memory
 8003c22:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003c26:	3b24      	subs	r3, #36	@ 0x24
 8003c28:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003c2c:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	21c8      	movs	r1, #200	@ 0xc8
 8003c34:	fb02 f101 	mul.w	r1, r2, r1
 8003c38:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003c3c:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003c40:	6812      	ldr	r2, [r2, #0]
 8003c42:	440a      	add	r2, r1
 8003c44:	0152      	lsls	r2, r2, #5
 8003c46:	4413      	add	r3, r2
 8003c48:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003c4c:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 8003c50:	6811      	ldr	r1, [r2, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff fbf7 	bl	8003446 <read_from_flash>
				b++;
 8003c58:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003c5c:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3301      	adds	r3, #1
 8003c64:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003c68:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003c6c:	6013      	str	r3, [r2, #0]
			for (j = 0; j < MAX_LINES; j++) {
 8003c6e:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003c72:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003c7e:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003c82:	6013      	str	r3, [r2, #0]
 8003c84:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003c88:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003c90:	ddab      	ble.n	8003bea <deleteProtocol+0x102>
			}
			a++;
 8003c92:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003c96:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003ca2:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8003ca6:	6013      	str	r3, [r2, #0]
			b = 0;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003cae:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003cb2:	6013      	str	r3, [r2, #0]
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8003cb4:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003cb8:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003cc4:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003cce:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	f77f af75 	ble.w	8003bc4 <deleteProtocol+0xdc>
		}
	}

	//write existing protocols except the one to be deleted back to flash
	erase_sector(sector); //erase sector before writing
 8003cda:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003cde:	f6a3 336c 	subw	r3, r3, #2924	@ 0xb6c
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	f7ff fb72 	bl	80033cc <erase_sector>
	HAL_FLASH_Unlock(); // Unlock flash for writing. note: the erase_sector() unlocks and locks itself
 8003ce8:	f000 fe4e 	bl	8004988 <HAL_FLASH_Unlock>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8003cec:	2300      	movs	r3, #0
 8003cee:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003cf2:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	e05a      	b.n	8003db0 <deleteProtocol+0x2c8>
		for (j = 0; j < MAX_LINES; j++) {
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003d00:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	e041      	b.n	8003d8c <deleteProtocol+0x2a4>
			//if first character of a line is null from qr scanner or trash from flash, ignore it
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8003d08:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003d0c:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f241 7270 	movw	r2, #6000	@ 0x1770
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
					+ j * MAX_LINE_LENGTH;
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003d20:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	015b      	lsls	r3, r3, #5
 8003d28:	4413      	add	r3, r2
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8003d2a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003d2e:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8003d32:	6812      	ldr	r2, [r2, #0]
 8003d34:	4413      	add	r3, r2
 8003d36:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003d3a:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 8003d3e:	6013      	str	r3, [r2, #0]
			write_to_flash(protocolStorage[i][j], temp_address);
 8003d40:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003d44:	3b24      	subs	r3, #36	@ 0x24
 8003d46:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003d4a:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	21c8      	movs	r1, #200	@ 0xc8
 8003d52:	fb02 f101 	mul.w	r1, r2, r1
 8003d56:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003d5a:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	440a      	add	r2, r1
 8003d62:	0152      	lsls	r2, r2, #5
 8003d64:	4413      	add	r3, r2
 8003d66:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003d6a:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 8003d6e:	6811      	ldr	r1, [r2, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff fb3f 	bl	80033f4 <write_to_flash>
		for (j = 0; j < MAX_LINES; j++) {
 8003d76:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003d7a:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3301      	adds	r3, #1
 8003d82:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003d86:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003d90:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2bc7      	cmp	r3, #199	@ 0xc7
 8003d98:	ddb6      	ble.n	8003d08 <deleteProtocol+0x220>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8003d9a:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003d9e:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3301      	adds	r3, #1
 8003da6:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003daa:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003db4:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	dd9d      	ble.n	8003cfa <deleteProtocol+0x212>

		}
	}
	HAL_FLASH_Lock();  // Unlock flash for writing
 8003dbe:	f000 fe05 	bl	80049cc <HAL_FLASH_Lock>
}
 8003dc2:	bf00      	nop
 8003dc4:	f507 4796 	add.w	r7, r7, #19200	@ 0x4b00
 8003dc8:	3770      	adds	r7, #112	@ 0x70
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <SendStopMotorsMessage>:
//		}
//	}
//	HAL_FLASH_Lock();  // Unlock flash for writing
//}

void SendStopMotorsMessage(void) {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
	//printf("S\n");
	HAL_UART_Transmit(&huart2, (uint8_t*) "S", 1, HAL_MAX_DELAY);
 8003dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd8:	2201      	movs	r2, #1
 8003dda:	4904      	ldr	r1, [pc, #16]	@ (8003dec <SendStopMotorsMessage+0x1c>)
 8003ddc:	4804      	ldr	r0, [pc, #16]	@ (8003df0 <SendStopMotorsMessage+0x20>)
 8003dde:	f005 fb1d 	bl	800941c <HAL_UART_Transmit>
	rx_byte = 0; //otherwise when you run a new protocol is has old info
 8003de2:	4b04      	ldr	r3, [pc, #16]	@ (8003df4 <SendStopMotorsMessage+0x24>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	701a      	strb	r2, [r3, #0]
}
 8003de8:	bf00      	nop
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	0800ffdc 	.word	0x0800ffdc
 8003df0:	20000528 	.word	0x20000528
 8003df4:	20000578 	.word	0x20000578

08003df8 <get_sector_address>:
void write_number_to_flash(uint32_t flash_address, uint32_t number) {
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flash_address, number);
}

//I name sectors from 1-14. the actual sectors are from 5-23. this functions maps them
uint32_t get_sector_address(uint32_t sector) {
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
	switch (sector) {
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	2b0d      	cmp	r3, #13
 8003e06:	d83b      	bhi.n	8003e80 <get_sector_address+0x88>
 8003e08:	a201      	add	r2, pc, #4	@ (adr r2, 8003e10 <get_sector_address+0x18>)
 8003e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0e:	bf00      	nop
 8003e10:	08003e49 	.word	0x08003e49
 8003e14:	08003e4d 	.word	0x08003e4d
 8003e18:	08003e51 	.word	0x08003e51
 8003e1c:	08003e55 	.word	0x08003e55
 8003e20:	08003e59 	.word	0x08003e59
 8003e24:	08003e5d 	.word	0x08003e5d
 8003e28:	08003e61 	.word	0x08003e61
 8003e2c:	08003e65 	.word	0x08003e65
 8003e30:	08003e69 	.word	0x08003e69
 8003e34:	08003e6d 	.word	0x08003e6d
 8003e38:	08003e71 	.word	0x08003e71
 8003e3c:	08003e75 	.word	0x08003e75
 8003e40:	08003e79 	.word	0x08003e79
 8003e44:	08003e7d 	.word	0x08003e7d
	case 1:
		return SECTOR_5;
 8003e48:	4b11      	ldr	r3, [pc, #68]	@ (8003e90 <get_sector_address+0x98>)
 8003e4a:	e01a      	b.n	8003e82 <get_sector_address+0x8a>
	case 2:
		return SECTOR_6;
 8003e4c:	4b11      	ldr	r3, [pc, #68]	@ (8003e94 <get_sector_address+0x9c>)
 8003e4e:	e018      	b.n	8003e82 <get_sector_address+0x8a>
	case 3:
		return SECTOR_7;
 8003e50:	4b11      	ldr	r3, [pc, #68]	@ (8003e98 <get_sector_address+0xa0>)
 8003e52:	e016      	b.n	8003e82 <get_sector_address+0x8a>
	case 4:
		return SECTOR_8;
 8003e54:	4b11      	ldr	r3, [pc, #68]	@ (8003e9c <get_sector_address+0xa4>)
 8003e56:	e014      	b.n	8003e82 <get_sector_address+0x8a>
	case 5:
		return SECTOR_9;
 8003e58:	4b11      	ldr	r3, [pc, #68]	@ (8003ea0 <get_sector_address+0xa8>)
 8003e5a:	e012      	b.n	8003e82 <get_sector_address+0x8a>
	case 6:
		return SECTOR_10;
 8003e5c:	4b11      	ldr	r3, [pc, #68]	@ (8003ea4 <get_sector_address+0xac>)
 8003e5e:	e010      	b.n	8003e82 <get_sector_address+0x8a>
	case 7:
		return SECTOR_11;
 8003e60:	4b11      	ldr	r3, [pc, #68]	@ (8003ea8 <get_sector_address+0xb0>)
 8003e62:	e00e      	b.n	8003e82 <get_sector_address+0x8a>
	case 8:
		return SECTOR_17;
 8003e64:	4b11      	ldr	r3, [pc, #68]	@ (8003eac <get_sector_address+0xb4>)
 8003e66:	e00c      	b.n	8003e82 <get_sector_address+0x8a>
	case 9:
		return SECTOR_18;
 8003e68:	4b11      	ldr	r3, [pc, #68]	@ (8003eb0 <get_sector_address+0xb8>)
 8003e6a:	e00a      	b.n	8003e82 <get_sector_address+0x8a>
	case 10:
		return SECTOR_19;
 8003e6c:	4b11      	ldr	r3, [pc, #68]	@ (8003eb4 <get_sector_address+0xbc>)
 8003e6e:	e008      	b.n	8003e82 <get_sector_address+0x8a>
	case 11:
		return SECTOR_20;
 8003e70:	4b11      	ldr	r3, [pc, #68]	@ (8003eb8 <get_sector_address+0xc0>)
 8003e72:	e006      	b.n	8003e82 <get_sector_address+0x8a>
	case 12:
		return SECTOR_21;
 8003e74:	4b11      	ldr	r3, [pc, #68]	@ (8003ebc <get_sector_address+0xc4>)
 8003e76:	e004      	b.n	8003e82 <get_sector_address+0x8a>
	case 13:
		return SECTOR_22;
 8003e78:	4b11      	ldr	r3, [pc, #68]	@ (8003ec0 <get_sector_address+0xc8>)
 8003e7a:	e002      	b.n	8003e82 <get_sector_address+0x8a>
	case 14:
		return SECTOR_23;
 8003e7c:	4b11      	ldr	r3, [pc, #68]	@ (8003ec4 <get_sector_address+0xcc>)
 8003e7e:	e000      	b.n	8003e82 <get_sector_address+0x8a>
	default:
		break;
 8003e80:	bf00      	nop
	}
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	08020000 	.word	0x08020000
 8003e94:	08040000 	.word	0x08040000
 8003e98:	08060000 	.word	0x08060000
 8003e9c:	08080000 	.word	0x08080000
 8003ea0:	080a0000 	.word	0x080a0000
 8003ea4:	080c0000 	.word	0x080c0000
 8003ea8:	080e0000 	.word	0x080e0000
 8003eac:	08120000 	.word	0x08120000
 8003eb0:	08140000 	.word	0x08140000
 8003eb4:	08160000 	.word	0x08160000
 8003eb8:	08180000 	.word	0x08180000
 8003ebc:	081a0000 	.word	0x081a0000
 8003ec0:	081c0000 	.word	0x081c0000
 8003ec4:	081e0000 	.word	0x081e0000

08003ec8 <sector_mapping>:

uint32_t sector_mapping(uint32_t sector) {
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
	switch (sector) {
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	2b0d      	cmp	r3, #13
 8003ed6:	d83b      	bhi.n	8003f50 <sector_mapping+0x88>
 8003ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee0 <sector_mapping+0x18>)
 8003eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ede:	bf00      	nop
 8003ee0:	08003f19 	.word	0x08003f19
 8003ee4:	08003f1d 	.word	0x08003f1d
 8003ee8:	08003f21 	.word	0x08003f21
 8003eec:	08003f25 	.word	0x08003f25
 8003ef0:	08003f29 	.word	0x08003f29
 8003ef4:	08003f2d 	.word	0x08003f2d
 8003ef8:	08003f31 	.word	0x08003f31
 8003efc:	08003f35 	.word	0x08003f35
 8003f00:	08003f39 	.word	0x08003f39
 8003f04:	08003f3d 	.word	0x08003f3d
 8003f08:	08003f41 	.word	0x08003f41
 8003f0c:	08003f45 	.word	0x08003f45
 8003f10:	08003f49 	.word	0x08003f49
 8003f14:	08003f4d 	.word	0x08003f4d
	case 1:
		return 5;
 8003f18:	2305      	movs	r3, #5
 8003f1a:	e019      	b.n	8003f50 <sector_mapping+0x88>
	case 2:
		return 6;
 8003f1c:	2306      	movs	r3, #6
 8003f1e:	e017      	b.n	8003f50 <sector_mapping+0x88>
	case 3:
		return 7;
 8003f20:	2307      	movs	r3, #7
 8003f22:	e015      	b.n	8003f50 <sector_mapping+0x88>
	case 4:
		return 8;
 8003f24:	2308      	movs	r3, #8
 8003f26:	e013      	b.n	8003f50 <sector_mapping+0x88>
	case 5:
		return 9;
 8003f28:	2309      	movs	r3, #9
 8003f2a:	e011      	b.n	8003f50 <sector_mapping+0x88>
	case 6:
		return 10;
 8003f2c:	230a      	movs	r3, #10
 8003f2e:	e00f      	b.n	8003f50 <sector_mapping+0x88>
	case 7:
		return 11;
 8003f30:	230b      	movs	r3, #11
 8003f32:	e00d      	b.n	8003f50 <sector_mapping+0x88>
	case 8:
		return 17;
 8003f34:	2311      	movs	r3, #17
 8003f36:	e00b      	b.n	8003f50 <sector_mapping+0x88>
	case 9:
		return 18;
 8003f38:	2312      	movs	r3, #18
 8003f3a:	e009      	b.n	8003f50 <sector_mapping+0x88>
	case 10:
		return 19;
 8003f3c:	2313      	movs	r3, #19
 8003f3e:	e007      	b.n	8003f50 <sector_mapping+0x88>
	case 11:
		return 20;
 8003f40:	2314      	movs	r3, #20
 8003f42:	e005      	b.n	8003f50 <sector_mapping+0x88>
	case 12:
		return 21;
 8003f44:	2315      	movs	r3, #21
 8003f46:	e003      	b.n	8003f50 <sector_mapping+0x88>
	case 13:
		return 22;
 8003f48:	2316      	movs	r3, #22
 8003f4a:	e001      	b.n	8003f50 <sector_mapping+0x88>
	case 14:
		return 23;
 8003f4c:	2317      	movs	r3, #23
 8003f4e:	e7ff      	b.n	8003f50 <sector_mapping+0x88>
	}
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_GPIO_EXTI_Callback>:

/*** Touchscreen Interrupt Handler ****/
//t_irq_pin is default high. it gets driven low while the screen is touched.
//the interrupt is triggered on falling edge.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == T_IRQ_Pin) {
 8003f66:	88fb      	ldrh	r3, [r7, #6]
 8003f68:	2b10      	cmp	r3, #16
 8003f6a:	d11d      	bne.n	8003fa8 <HAL_GPIO_EXTI_Callback+0x4c>

		uint32_t current_time = HAL_GetTick(); // ms since startup
 8003f6c:	f000 fae4 	bl	8004538 <HAL_GetTick>
 8003f70:	60f8      	str	r0, [r7, #12]

		//perform some debouncing for interrupt pin
		if ((current_time - last_interrupt_time) > DEBOUNCE_DELAY_MS) {
 8003f72:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb0 <HAL_GPIO_EXTI_Callback+0x54>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b1e      	cmp	r3, #30
 8003f7c:	d914      	bls.n	8003fa8 <HAL_GPIO_EXTI_Callback+0x4c>
			last_interrupt_time = current_time;
 8003f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8003fb0 <HAL_GPIO_EXTI_Callback+0x54>)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6013      	str	r3, [r2, #0]

			//handle the actual interrupt below
			uint8_t currentTouchedState = HAL_GPIO_ReadPin(T_IRQ_GPIO_Port,
 8003f84:	2110      	movs	r1, #16
 8003f86:	480b      	ldr	r0, [pc, #44]	@ (8003fb4 <HAL_GPIO_EXTI_Callback+0x58>)
 8003f88:	f001 f86a 	bl	8005060 <HAL_GPIO_ReadPin>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	72fb      	strb	r3, [r7, #11]
			T_IRQ_Pin);
			//printf("%d\n", currentTouchedState)
			if (XPT2046_TouchPressed() && !touchFlag) {
 8003f90:	f7fc fb16 	bl	80005c0 <XPT2046_TouchPressed>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d006      	beq.n	8003fa8 <HAL_GPIO_EXTI_Callback+0x4c>
 8003f9a:	4b07      	ldr	r3, [pc, #28]	@ (8003fb8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d102      	bne.n	8003fa8 <HAL_GPIO_EXTI_Callback+0x4c>
				touchFlag = 1;
 8003fa2:	4b05      	ldr	r3, [pc, #20]	@ (8003fb8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == OTG_FS_OC_Pin) {
		//HAL_GPIO_WritePin(OTG_FS_PSO_GPIO_Port, OTG_FS_PSO_Pin, GPIO_PIN_SET);
	}
}
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	200005a4 	.word	0x200005a4
 8003fb4:	40020400 	.word	0x40020400
 8003fb8:	200005a8 	.word	0x200005a8

08003fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003fc0:	b672      	cpsid	i
}
 8003fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003fc4:	bf00      	nop
 8003fc6:	e7fd      	b.n	8003fc4 <Error_Handler+0x8>

08003fc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fce:	2300      	movs	r3, #0
 8003fd0:	607b      	str	r3, [r7, #4]
 8003fd2:	4b10      	ldr	r3, [pc, #64]	@ (8004014 <HAL_MspInit+0x4c>)
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8004014 <HAL_MspInit+0x4c>)
 8003fd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fde:	4b0d      	ldr	r3, [pc, #52]	@ (8004014 <HAL_MspInit+0x4c>)
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fe6:	607b      	str	r3, [r7, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	603b      	str	r3, [r7, #0]
 8003fee:	4b09      	ldr	r3, [pc, #36]	@ (8004014 <HAL_MspInit+0x4c>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	4a08      	ldr	r2, [pc, #32]	@ (8004014 <HAL_MspInit+0x4c>)
 8003ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ffa:	4b06      	ldr	r3, [pc, #24]	@ (8004014 <HAL_MspInit+0x4c>)
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40023800 	.word	0x40023800

08004018 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08a      	sub	sp, #40	@ 0x28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004020:	f107 0314 	add.w	r3, r7, #20
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	605a      	str	r2, [r3, #4]
 800402a:	609a      	str	r2, [r3, #8]
 800402c:	60da      	str	r2, [r3, #12]
 800402e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a19      	ldr	r2, [pc, #100]	@ (800409c <HAL_SPI_MspInit+0x84>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d12b      	bne.n	8004092 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	613b      	str	r3, [r7, #16]
 800403e:	4b18      	ldr	r3, [pc, #96]	@ (80040a0 <HAL_SPI_MspInit+0x88>)
 8004040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004042:	4a17      	ldr	r2, [pc, #92]	@ (80040a0 <HAL_SPI_MspInit+0x88>)
 8004044:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004048:	6453      	str	r3, [r2, #68]	@ 0x44
 800404a:	4b15      	ldr	r3, [pc, #84]	@ (80040a0 <HAL_SPI_MspInit+0x88>)
 800404c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004052:	613b      	str	r3, [r7, #16]
 8004054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <HAL_SPI_MspInit+0x88>)
 800405c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405e:	4a10      	ldr	r2, [pc, #64]	@ (80040a0 <HAL_SPI_MspInit+0x88>)
 8004060:	f043 0301 	orr.w	r3, r3, #1
 8004064:	6313      	str	r3, [r2, #48]	@ 0x30
 8004066:	4b0e      	ldr	r3, [pc, #56]	@ (80040a0 <HAL_SPI_MspInit+0x88>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = T_CS_Pin|T_SCK_Pin|GPIO_PIN_7;
 8004072:	23b0      	movs	r3, #176	@ 0xb0
 8004074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004076:	2302      	movs	r3, #2
 8004078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800407e:	2303      	movs	r3, #3
 8004080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004082:	2305      	movs	r3, #5
 8004084:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004086:	f107 0314 	add.w	r3, r7, #20
 800408a:	4619      	mov	r1, r3
 800408c:	4805      	ldr	r0, [pc, #20]	@ (80040a4 <HAL_SPI_MspInit+0x8c>)
 800408e:	f000 fe3b 	bl	8004d08 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004092:	bf00      	nop
 8004094:	3728      	adds	r7, #40	@ 0x28
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40013000 	.word	0x40013000
 80040a0:	40023800 	.word	0x40023800
 80040a4:	40020000 	.word	0x40020000

080040a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b8:	d10d      	bne.n	80040d6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	4b09      	ldr	r3, [pc, #36]	@ (80040e4 <HAL_TIM_Base_MspInit+0x3c>)
 80040c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c2:	4a08      	ldr	r2, [pc, #32]	@ (80040e4 <HAL_TIM_Base_MspInit+0x3c>)
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80040ca:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <HAL_TIM_Base_MspInit+0x3c>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80040d6:	bf00      	nop
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40023800 	.word	0x40023800

080040e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a0b      	ldr	r2, [pc, #44]	@ (8004124 <HAL_TIM_PWM_MspInit+0x3c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d10d      	bne.n	8004116 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004128 <HAL_TIM_PWM_MspInit+0x40>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004102:	4a09      	ldr	r2, [pc, #36]	@ (8004128 <HAL_TIM_PWM_MspInit+0x40>)
 8004104:	f043 0302 	orr.w	r3, r3, #2
 8004108:	6413      	str	r3, [r2, #64]	@ 0x40
 800410a:	4b07      	ldr	r3, [pc, #28]	@ (8004128 <HAL_TIM_PWM_MspInit+0x40>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40000400 	.word	0x40000400
 8004128:	40023800 	.word	0x40023800

0800412c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004134:	f107 030c 	add.w	r3, r7, #12
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	609a      	str	r2, [r3, #8]
 8004140:	60da      	str	r2, [r3, #12]
 8004142:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a12      	ldr	r2, [pc, #72]	@ (8004194 <HAL_TIM_MspPostInit+0x68>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d11d      	bne.n	800418a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800414e:	2300      	movs	r3, #0
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	4b11      	ldr	r3, [pc, #68]	@ (8004198 <HAL_TIM_MspPostInit+0x6c>)
 8004154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004156:	4a10      	ldr	r2, [pc, #64]	@ (8004198 <HAL_TIM_MspPostInit+0x6c>)
 8004158:	f043 0302 	orr.w	r3, r3, #2
 800415c:	6313      	str	r3, [r2, #48]	@ 0x30
 800415e:	4b0e      	ldr	r3, [pc, #56]	@ (8004198 <HAL_TIM_MspPostInit+0x6c>)
 8004160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	60bb      	str	r3, [r7, #8]
 8004168:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = BL_PWM_Pin;
 800416a:	2320      	movs	r3, #32
 800416c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800416e:	2302      	movs	r3, #2
 8004170:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004172:	2300      	movs	r3, #0
 8004174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004176:	2300      	movs	r3, #0
 8004178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800417a:	2302      	movs	r3, #2
 800417c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_PWM_GPIO_Port, &GPIO_InitStruct);
 800417e:	f107 030c 	add.w	r3, r7, #12
 8004182:	4619      	mov	r1, r3
 8004184:	4805      	ldr	r0, [pc, #20]	@ (800419c <HAL_TIM_MspPostInit+0x70>)
 8004186:	f000 fdbf 	bl	8004d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800418a:	bf00      	nop
 800418c:	3720      	adds	r7, #32
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40000400 	.word	0x40000400
 8004198:	40023800 	.word	0x40023800
 800419c:	40020400 	.word	0x40020400

080041a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08a      	sub	sp, #40	@ 0x28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a8:	f107 0314 	add.w	r3, r7, #20
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	605a      	str	r2, [r3, #4]
 80041b2:	609a      	str	r2, [r3, #8]
 80041b4:	60da      	str	r2, [r3, #12]
 80041b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004234 <HAL_UART_MspInit+0x94>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d133      	bne.n	800422a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	4b1c      	ldr	r3, [pc, #112]	@ (8004238 <HAL_UART_MspInit+0x98>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004238 <HAL_UART_MspInit+0x98>)
 80041cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80041d2:	4b19      	ldr	r3, [pc, #100]	@ (8004238 <HAL_UART_MspInit+0x98>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	4b15      	ldr	r3, [pc, #84]	@ (8004238 <HAL_UART_MspInit+0x98>)
 80041e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e6:	4a14      	ldr	r2, [pc, #80]	@ (8004238 <HAL_UART_MspInit+0x98>)
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80041ee:	4b12      	ldr	r3, [pc, #72]	@ (8004238 <HAL_UART_MspInit+0x98>)
 80041f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80041fa:	230c      	movs	r3, #12
 80041fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041fe:	2302      	movs	r3, #2
 8004200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004202:	2300      	movs	r3, #0
 8004204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004206:	2303      	movs	r3, #3
 8004208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800420a:	2307      	movs	r3, #7
 800420c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800420e:	f107 0314 	add.w	r3, r7, #20
 8004212:	4619      	mov	r1, r3
 8004214:	4809      	ldr	r0, [pc, #36]	@ (800423c <HAL_UART_MspInit+0x9c>)
 8004216:	f000 fd77 	bl	8004d08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800421a:	2200      	movs	r2, #0
 800421c:	2100      	movs	r1, #0
 800421e:	2026      	movs	r0, #38	@ 0x26
 8004220:	f000 fa95 	bl	800474e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004224:	2026      	movs	r0, #38	@ 0x26
 8004226:	f000 faae 	bl	8004786 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800422a:	bf00      	nop
 800422c:	3728      	adds	r7, #40	@ 0x28
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40004400 	.word	0x40004400
 8004238:	40023800 	.word	0x40023800
 800423c:	40020000 	.word	0x40020000

08004240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004244:	bf00      	nop
 8004246:	e7fd      	b.n	8004244 <NMI_Handler+0x4>

08004248 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800424c:	bf00      	nop
 800424e:	e7fd      	b.n	800424c <HardFault_Handler+0x4>

08004250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004254:	bf00      	nop
 8004256:	e7fd      	b.n	8004254 <MemManage_Handler+0x4>

08004258 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800425c:	bf00      	nop
 800425e:	e7fd      	b.n	800425c <BusFault_Handler+0x4>

08004260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004264:	bf00      	nop
 8004266:	e7fd      	b.n	8004264 <UsageFault_Handler+0x4>

08004268 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800426c:	bf00      	nop
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004276:	b480      	push	{r7}
 8004278:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800427a:	bf00      	nop
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004288:	bf00      	nop
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004296:	f000 f93b 	bl	8004510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800429a:	bf00      	nop
 800429c:	bd80      	pop	{r7, pc}

0800429e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_IRQ_Pin);
 80042a2:	2010      	movs	r0, #16
 80042a4:	f000 ff0e 	bl	80050c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80042a8:	bf00      	nop
 80042aa:	bd80      	pop	{r7, pc}

080042ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OTG_FS_OC_Pin);
 80042b0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80042b4:	f000 ff06 	bl	80050c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80042b8:	bf00      	nop
 80042ba:	bd80      	pop	{r7, pc}

080042bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80042c0:	4802      	ldr	r0, [pc, #8]	@ (80042cc <USART2_IRQHandler+0x10>)
 80042c2:	f005 f9cd 	bl	8009660 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80042c6:	bf00      	nop
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000528 	.word	0x20000528

080042d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80042d4:	4802      	ldr	r0, [pc, #8]	@ (80042e0 <OTG_FS_IRQHandler+0x10>)
 80042d6:	f001 f9ed 	bl	80056b4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	200126b4 	.word	0x200126b4

080042e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	e00a      	b.n	800430c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80042f6:	f3af 8000 	nop.w
 80042fa:	4601      	mov	r1, r0
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	60ba      	str	r2, [r7, #8]
 8004302:	b2ca      	uxtb	r2, r1
 8004304:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	3301      	adds	r3, #1
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	429a      	cmp	r2, r3
 8004312:	dbf0      	blt.n	80042f6 <_read+0x12>
  }

  return len;
 8004314:	687b      	ldr	r3, [r7, #4]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <_close>:
  }
  return len;
}

int _close(int file)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004326:	f04f 33ff 	mov.w	r3, #4294967295
}
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004346:	605a      	str	r2, [r3, #4]
  return 0;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <_isatty>:

int _isatty(int file)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800435e:	2301      	movs	r3, #1
}
 8004360:	4618      	mov	r0, r3
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
	...

08004388 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004390:	4a14      	ldr	r2, [pc, #80]	@ (80043e4 <_sbrk+0x5c>)
 8004392:	4b15      	ldr	r3, [pc, #84]	@ (80043e8 <_sbrk+0x60>)
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800439c:	4b13      	ldr	r3, [pc, #76]	@ (80043ec <_sbrk+0x64>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d102      	bne.n	80043aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043a4:	4b11      	ldr	r3, [pc, #68]	@ (80043ec <_sbrk+0x64>)
 80043a6:	4a12      	ldr	r2, [pc, #72]	@ (80043f0 <_sbrk+0x68>)
 80043a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043aa:	4b10      	ldr	r3, [pc, #64]	@ (80043ec <_sbrk+0x64>)
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4413      	add	r3, r2
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d207      	bcs.n	80043c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043b8:	f00a fecc 	bl	800f154 <__errno>
 80043bc:	4603      	mov	r3, r0
 80043be:	220c      	movs	r2, #12
 80043c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043c2:	f04f 33ff 	mov.w	r3, #4294967295
 80043c6:	e009      	b.n	80043dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043c8:	4b08      	ldr	r3, [pc, #32]	@ (80043ec <_sbrk+0x64>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043ce:	4b07      	ldr	r3, [pc, #28]	@ (80043ec <_sbrk+0x64>)
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4413      	add	r3, r2
 80043d6:	4a05      	ldr	r2, [pc, #20]	@ (80043ec <_sbrk+0x64>)
 80043d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043da:	68fb      	ldr	r3, [r7, #12]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	20030000 	.word	0x20030000
 80043e8:	00000400 	.word	0x00000400
 80043ec:	200118c0 	.word	0x200118c0
 80043f0:	20012be0 	.word	0x20012be0

080043f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043f8:	4b06      	ldr	r3, [pc, #24]	@ (8004414 <SystemInit+0x20>)
 80043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fe:	4a05      	ldr	r2, [pc, #20]	@ (8004414 <SystemInit+0x20>)
 8004400:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004404:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004408:	bf00      	nop
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	e000ed00 	.word	0xe000ed00

08004418 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004418:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004450 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800441c:	f7ff ffea 	bl	80043f4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004420:	480c      	ldr	r0, [pc, #48]	@ (8004454 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004422:	490d      	ldr	r1, [pc, #52]	@ (8004458 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004424:	4a0d      	ldr	r2, [pc, #52]	@ (800445c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004428:	e002      	b.n	8004430 <LoopCopyDataInit>

0800442a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800442a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800442c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800442e:	3304      	adds	r3, #4

08004430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004434:	d3f9      	bcc.n	800442a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004436:	4a0a      	ldr	r2, [pc, #40]	@ (8004460 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004438:	4c0a      	ldr	r4, [pc, #40]	@ (8004464 <LoopFillZerobss+0x22>)
  movs r3, #0
 800443a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800443c:	e001      	b.n	8004442 <LoopFillZerobss>

0800443e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800443e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004440:	3204      	adds	r2, #4

08004442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004444:	d3fb      	bcc.n	800443e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004446:	f00a fe8b 	bl	800f160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800444a:	f7fc ffa3 	bl	8001394 <main>
  bx  lr    
 800444e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004450:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004458:	2000031c 	.word	0x2000031c
  ldr r2, =_sidata
 800445c:	08012ab0 	.word	0x08012ab0
  ldr r2, =_sbss
 8004460:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 8004464:	20012be0 	.word	0x20012be0

08004468 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004468:	e7fe      	b.n	8004468 <ADC_IRQHandler>
	...

0800446c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004470:	4b0e      	ldr	r3, [pc, #56]	@ (80044ac <HAL_Init+0x40>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a0d      	ldr	r2, [pc, #52]	@ (80044ac <HAL_Init+0x40>)
 8004476:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800447a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800447c:	4b0b      	ldr	r3, [pc, #44]	@ (80044ac <HAL_Init+0x40>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a0a      	ldr	r2, [pc, #40]	@ (80044ac <HAL_Init+0x40>)
 8004482:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004486:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004488:	4b08      	ldr	r3, [pc, #32]	@ (80044ac <HAL_Init+0x40>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a07      	ldr	r2, [pc, #28]	@ (80044ac <HAL_Init+0x40>)
 800448e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004492:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004494:	2003      	movs	r0, #3
 8004496:	f000 f94f 	bl	8004738 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800449a:	200f      	movs	r0, #15
 800449c:	f000 f808 	bl	80044b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044a0:	f7ff fd92 	bl	8003fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40023c00 	.word	0x40023c00

080044b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044b8:	4b12      	ldr	r3, [pc, #72]	@ (8004504 <HAL_InitTick+0x54>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	4b12      	ldr	r3, [pc, #72]	@ (8004508 <HAL_InitTick+0x58>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	4619      	mov	r1, r3
 80044c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80044c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80044ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 f967 	bl	80047a2 <HAL_SYSTICK_Config>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e00e      	b.n	80044fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b0f      	cmp	r3, #15
 80044e2:	d80a      	bhi.n	80044fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044e4:	2200      	movs	r2, #0
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	f04f 30ff 	mov.w	r0, #4294967295
 80044ec:	f000 f92f 	bl	800474e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044f0:	4a06      	ldr	r2, [pc, #24]	@ (800450c <HAL_InitTick+0x5c>)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	e000      	b.n	80044fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	20000294 	.word	0x20000294
 8004508:	2000029c 	.word	0x2000029c
 800450c:	20000298 	.word	0x20000298

08004510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004514:	4b06      	ldr	r3, [pc, #24]	@ (8004530 <HAL_IncTick+0x20>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	4b06      	ldr	r3, [pc, #24]	@ (8004534 <HAL_IncTick+0x24>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4413      	add	r3, r2
 8004520:	4a04      	ldr	r2, [pc, #16]	@ (8004534 <HAL_IncTick+0x24>)
 8004522:	6013      	str	r3, [r2, #0]
}
 8004524:	bf00      	nop
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	2000029c 	.word	0x2000029c
 8004534:	200118c4 	.word	0x200118c4

08004538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  return uwTick;
 800453c:	4b03      	ldr	r3, [pc, #12]	@ (800454c <HAL_GetTick+0x14>)
 800453e:	681b      	ldr	r3, [r3, #0]
}
 8004540:	4618      	mov	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	200118c4 	.word	0x200118c4

08004550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004558:	f7ff ffee 	bl	8004538 <HAL_GetTick>
 800455c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004568:	d005      	beq.n	8004576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800456a:	4b0a      	ldr	r3, [pc, #40]	@ (8004594 <HAL_Delay+0x44>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004576:	bf00      	nop
 8004578:	f7ff ffde 	bl	8004538 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	429a      	cmp	r2, r3
 8004586:	d8f7      	bhi.n	8004578 <HAL_Delay+0x28>
  {
  }
}
 8004588:	bf00      	nop
 800458a:	bf00      	nop
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	2000029c 	.word	0x2000029c

08004598 <__NVIC_SetPriorityGrouping>:
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045a8:	4b0c      	ldr	r3, [pc, #48]	@ (80045dc <__NVIC_SetPriorityGrouping+0x44>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80045b4:	4013      	ands	r3, r2
 80045b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80045c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045ca:	4a04      	ldr	r2, [pc, #16]	@ (80045dc <__NVIC_SetPriorityGrouping+0x44>)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	60d3      	str	r3, [r2, #12]
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	e000ed00 	.word	0xe000ed00

080045e0 <__NVIC_GetPriorityGrouping>:
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045e4:	4b04      	ldr	r3, [pc, #16]	@ (80045f8 <__NVIC_GetPriorityGrouping+0x18>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	0a1b      	lsrs	r3, r3, #8
 80045ea:	f003 0307 	and.w	r3, r3, #7
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	e000ed00 	.word	0xe000ed00

080045fc <__NVIC_EnableIRQ>:
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460a:	2b00      	cmp	r3, #0
 800460c:	db0b      	blt.n	8004626 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800460e:	79fb      	ldrb	r3, [r7, #7]
 8004610:	f003 021f 	and.w	r2, r3, #31
 8004614:	4907      	ldr	r1, [pc, #28]	@ (8004634 <__NVIC_EnableIRQ+0x38>)
 8004616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	2001      	movs	r0, #1
 800461e:	fa00 f202 	lsl.w	r2, r0, r2
 8004622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	e000e100 	.word	0xe000e100

08004638 <__NVIC_SetPriority>:
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	4603      	mov	r3, r0
 8004640:	6039      	str	r1, [r7, #0]
 8004642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004648:	2b00      	cmp	r3, #0
 800464a:	db0a      	blt.n	8004662 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	b2da      	uxtb	r2, r3
 8004650:	490c      	ldr	r1, [pc, #48]	@ (8004684 <__NVIC_SetPriority+0x4c>)
 8004652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004656:	0112      	lsls	r2, r2, #4
 8004658:	b2d2      	uxtb	r2, r2
 800465a:	440b      	add	r3, r1
 800465c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004660:	e00a      	b.n	8004678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	b2da      	uxtb	r2, r3
 8004666:	4908      	ldr	r1, [pc, #32]	@ (8004688 <__NVIC_SetPriority+0x50>)
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	3b04      	subs	r3, #4
 8004670:	0112      	lsls	r2, r2, #4
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	440b      	add	r3, r1
 8004676:	761a      	strb	r2, [r3, #24]
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	e000e100 	.word	0xe000e100
 8004688:	e000ed00 	.word	0xe000ed00

0800468c <NVIC_EncodePriority>:
{
 800468c:	b480      	push	{r7}
 800468e:	b089      	sub	sp, #36	@ 0x24
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f1c3 0307 	rsb	r3, r3, #7
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	bf28      	it	cs
 80046aa:	2304      	movcs	r3, #4
 80046ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	3304      	adds	r3, #4
 80046b2:	2b06      	cmp	r3, #6
 80046b4:	d902      	bls.n	80046bc <NVIC_EncodePriority+0x30>
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	3b03      	subs	r3, #3
 80046ba:	e000      	b.n	80046be <NVIC_EncodePriority+0x32>
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046c0:	f04f 32ff 	mov.w	r2, #4294967295
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43da      	mvns	r2, r3
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	401a      	ands	r2, r3
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046d4:	f04f 31ff 	mov.w	r1, #4294967295
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	fa01 f303 	lsl.w	r3, r1, r3
 80046de:	43d9      	mvns	r1, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046e4:	4313      	orrs	r3, r2
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3724      	adds	r7, #36	@ 0x24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
	...

080046f4 <SysTick_Config>:
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3b01      	subs	r3, #1
 8004700:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004704:	d301      	bcc.n	800470a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004706:	2301      	movs	r3, #1
 8004708:	e00f      	b.n	800472a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800470a:	4a0a      	ldr	r2, [pc, #40]	@ (8004734 <SysTick_Config+0x40>)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3b01      	subs	r3, #1
 8004710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004712:	210f      	movs	r1, #15
 8004714:	f04f 30ff 	mov.w	r0, #4294967295
 8004718:	f7ff ff8e 	bl	8004638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800471c:	4b05      	ldr	r3, [pc, #20]	@ (8004734 <SysTick_Config+0x40>)
 800471e:	2200      	movs	r2, #0
 8004720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004722:	4b04      	ldr	r3, [pc, #16]	@ (8004734 <SysTick_Config+0x40>)
 8004724:	2207      	movs	r2, #7
 8004726:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	e000e010 	.word	0xe000e010

08004738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff ff29 	bl	8004598 <__NVIC_SetPriorityGrouping>
}
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800474e:	b580      	push	{r7, lr}
 8004750:	b086      	sub	sp, #24
 8004752:	af00      	add	r7, sp, #0
 8004754:	4603      	mov	r3, r0
 8004756:	60b9      	str	r1, [r7, #8]
 8004758:	607a      	str	r2, [r7, #4]
 800475a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004760:	f7ff ff3e 	bl	80045e0 <__NVIC_GetPriorityGrouping>
 8004764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	68b9      	ldr	r1, [r7, #8]
 800476a:	6978      	ldr	r0, [r7, #20]
 800476c:	f7ff ff8e 	bl	800468c <NVIC_EncodePriority>
 8004770:	4602      	mov	r2, r0
 8004772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004776:	4611      	mov	r1, r2
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff ff5d 	bl	8004638 <__NVIC_SetPriority>
}
 800477e:	bf00      	nop
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
 800478c:	4603      	mov	r3, r0
 800478e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff ff31 	bl	80045fc <__NVIC_EnableIRQ>
}
 800479a:	bf00      	nop
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7ff ffa2 	bl	80046f4 <SysTick_Config>
 80047b0:	4603      	mov	r3, r0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b084      	sub	sp, #16
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80047c8:	f7ff feb6 	bl	8004538 <HAL_GetTick>
 80047cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d008      	beq.n	80047ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2280      	movs	r2, #128	@ 0x80
 80047de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e052      	b.n	8004892 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0216 	bic.w	r2, r2, #22
 80047fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695a      	ldr	r2, [r3, #20]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800480a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004810:	2b00      	cmp	r3, #0
 8004812:	d103      	bne.n	800481c <HAL_DMA_Abort+0x62>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004818:	2b00      	cmp	r3, #0
 800481a:	d007      	beq.n	800482c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0208 	bic.w	r2, r2, #8
 800482a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0201 	bic.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800483c:	e013      	b.n	8004866 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800483e:	f7ff fe7b 	bl	8004538 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b05      	cmp	r3, #5
 800484a:	d90c      	bls.n	8004866 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2203      	movs	r2, #3
 8004856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e015      	b.n	8004892 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e4      	bne.n	800483e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004878:	223f      	movs	r2, #63	@ 0x3f
 800487a:	409a      	lsls	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d004      	beq.n	80048b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2280      	movs	r2, #128	@ 0x80
 80048b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e00c      	b.n	80048d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2205      	movs	r2, #5
 80048bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0201 	bic.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
	...

080048e0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80048f2:	4b23      	ldr	r3, [pc, #140]	@ (8004980 <HAL_FLASH_Program+0xa0>)
 80048f4:	7e1b      	ldrb	r3, [r3, #24]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_FLASH_Program+0x1e>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e03b      	b.n	8004976 <HAL_FLASH_Program+0x96>
 80048fe:	4b20      	ldr	r3, [pc, #128]	@ (8004980 <HAL_FLASH_Program+0xa0>)
 8004900:	2201      	movs	r2, #1
 8004902:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004904:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004908:	f000 f870 	bl	80049ec <FLASH_WaitForLastOperation>
 800490c:	4603      	mov	r3, r0
 800490e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004910:	7dfb      	ldrb	r3, [r7, #23]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d12b      	bne.n	800496e <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d105      	bne.n	8004928 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800491c:	783b      	ldrb	r3, [r7, #0]
 800491e:	4619      	mov	r1, r3
 8004920:	68b8      	ldr	r0, [r7, #8]
 8004922:	f000 f91b 	bl	8004b5c <FLASH_Program_Byte>
 8004926:	e016      	b.n	8004956 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d105      	bne.n	800493a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800492e:	883b      	ldrh	r3, [r7, #0]
 8004930:	4619      	mov	r1, r3
 8004932:	68b8      	ldr	r0, [r7, #8]
 8004934:	f000 f8ee 	bl	8004b14 <FLASH_Program_HalfWord>
 8004938:	e00d      	b.n	8004956 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b02      	cmp	r3, #2
 800493e:	d105      	bne.n	800494c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	4619      	mov	r1, r3
 8004944:	68b8      	ldr	r0, [r7, #8]
 8004946:	f000 f8c3 	bl	8004ad0 <FLASH_Program_Word>
 800494a:	e004      	b.n	8004956 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800494c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004950:	68b8      	ldr	r0, [r7, #8]
 8004952:	f000 f88b 	bl	8004a6c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004956:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800495a:	f000 f847 	bl	80049ec <FLASH_WaitForLastOperation>
 800495e:	4603      	mov	r3, r0
 8004960:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8004962:	4b08      	ldr	r3, [pc, #32]	@ (8004984 <HAL_FLASH_Program+0xa4>)
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	4a07      	ldr	r2, [pc, #28]	@ (8004984 <HAL_FLASH_Program+0xa4>)
 8004968:	f023 0301 	bic.w	r3, r3, #1
 800496c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800496e:	4b04      	ldr	r3, [pc, #16]	@ (8004980 <HAL_FLASH_Program+0xa0>)
 8004970:	2200      	movs	r2, #0
 8004972:	761a      	strb	r2, [r3, #24]

  return status;
 8004974:	7dfb      	ldrb	r3, [r7, #23]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	200118c8 	.word	0x200118c8
 8004984:	40023c00 	.word	0x40023c00

08004988 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004992:	4b0b      	ldr	r3, [pc, #44]	@ (80049c0 <HAL_FLASH_Unlock+0x38>)
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	2b00      	cmp	r3, #0
 8004998:	da0b      	bge.n	80049b2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800499a:	4b09      	ldr	r3, [pc, #36]	@ (80049c0 <HAL_FLASH_Unlock+0x38>)
 800499c:	4a09      	ldr	r2, [pc, #36]	@ (80049c4 <HAL_FLASH_Unlock+0x3c>)
 800499e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80049a0:	4b07      	ldr	r3, [pc, #28]	@ (80049c0 <HAL_FLASH_Unlock+0x38>)
 80049a2:	4a09      	ldr	r2, [pc, #36]	@ (80049c8 <HAL_FLASH_Unlock+0x40>)
 80049a4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80049a6:	4b06      	ldr	r3, [pc, #24]	@ (80049c0 <HAL_FLASH_Unlock+0x38>)
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	da01      	bge.n	80049b2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80049b2:	79fb      	ldrb	r3, [r7, #7]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	40023c00 	.word	0x40023c00
 80049c4:	45670123 	.word	0x45670123
 80049c8:	cdef89ab 	.word	0xcdef89ab

080049cc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80049d0:	4b05      	ldr	r3, [pc, #20]	@ (80049e8 <HAL_FLASH_Lock+0x1c>)
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	4a04      	ldr	r2, [pc, #16]	@ (80049e8 <HAL_FLASH_Lock+0x1c>)
 80049d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80049da:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	40023c00 	.word	0x40023c00

080049ec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80049f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004a64 <FLASH_WaitForLastOperation+0x78>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80049fe:	f7ff fd9b 	bl	8004538 <HAL_GetTick>
 8004a02:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8004a04:	e010      	b.n	8004a28 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0c:	d00c      	beq.n	8004a28 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d007      	beq.n	8004a24 <FLASH_WaitForLastOperation+0x38>
 8004a14:	f7ff fd90 	bl	8004538 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d201      	bcs.n	8004a28 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e019      	b.n	8004a5c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8004a28:	4b0f      	ldr	r3, [pc, #60]	@ (8004a68 <FLASH_WaitForLastOperation+0x7c>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e8      	bne.n	8004a06 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004a34:	4b0c      	ldr	r3, [pc, #48]	@ (8004a68 <FLASH_WaitForLastOperation+0x7c>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004a40:	4b09      	ldr	r3, [pc, #36]	@ (8004a68 <FLASH_WaitForLastOperation+0x7c>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004a46:	4b08      	ldr	r3, [pc, #32]	@ (8004a68 <FLASH_WaitForLastOperation+0x7c>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004a52:	f000 f8a5 	bl	8004ba0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0

}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	200118c8 	.word	0x200118c8
 8004a68:	40023c00 	.word	0x40023c00

08004a6c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004a78:	4b14      	ldr	r3, [pc, #80]	@ (8004acc <FLASH_Program_DoubleWord+0x60>)
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	4a13      	ldr	r2, [pc, #76]	@ (8004acc <FLASH_Program_DoubleWord+0x60>)
 8004a7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004a84:	4b11      	ldr	r3, [pc, #68]	@ (8004acc <FLASH_Program_DoubleWord+0x60>)
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	4a10      	ldr	r2, [pc, #64]	@ (8004acc <FLASH_Program_DoubleWord+0x60>)
 8004a8a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004a8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004a90:	4b0e      	ldr	r3, [pc, #56]	@ (8004acc <FLASH_Program_DoubleWord+0x60>)
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	4a0d      	ldr	r2, [pc, #52]	@ (8004acc <FLASH_Program_DoubleWord+0x60>)
 8004a96:	f043 0301 	orr.w	r3, r3, #1
 8004a9a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004aa2:	f3bf 8f6f 	isb	sy
}
 8004aa6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8004aa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	000a      	movs	r2, r1
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	68f9      	ldr	r1, [r7, #12]
 8004aba:	3104      	adds	r1, #4
 8004abc:	4613      	mov	r3, r2
 8004abe:	600b      	str	r3, [r1, #0]
}
 8004ac0:	bf00      	nop
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	40023c00 	.word	0x40023c00

08004ad0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004ada:	4b0d      	ldr	r3, [pc, #52]	@ (8004b10 <FLASH_Program_Word+0x40>)
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	4a0c      	ldr	r2, [pc, #48]	@ (8004b10 <FLASH_Program_Word+0x40>)
 8004ae0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ae4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8004b10 <FLASH_Program_Word+0x40>)
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	4a09      	ldr	r2, [pc, #36]	@ (8004b10 <FLASH_Program_Word+0x40>)
 8004aec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004af0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004af2:	4b07      	ldr	r3, [pc, #28]	@ (8004b10 <FLASH_Program_Word+0x40>)
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	4a06      	ldr	r2, [pc, #24]	@ (8004b10 <FLASH_Program_Word+0x40>)
 8004af8:	f043 0301 	orr.w	r3, r3, #1
 8004afc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	601a      	str	r2, [r3, #0]
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	40023c00 	.word	0x40023c00

08004b14 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004b20:	4b0d      	ldr	r3, [pc, #52]	@ (8004b58 <FLASH_Program_HalfWord+0x44>)
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	4a0c      	ldr	r2, [pc, #48]	@ (8004b58 <FLASH_Program_HalfWord+0x44>)
 8004b26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b58 <FLASH_Program_HalfWord+0x44>)
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	4a09      	ldr	r2, [pc, #36]	@ (8004b58 <FLASH_Program_HalfWord+0x44>)
 8004b32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004b38:	4b07      	ldr	r3, [pc, #28]	@ (8004b58 <FLASH_Program_HalfWord+0x44>)
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	4a06      	ldr	r2, [pc, #24]	@ (8004b58 <FLASH_Program_HalfWord+0x44>)
 8004b3e:	f043 0301 	orr.w	r3, r3, #1
 8004b42:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	887a      	ldrh	r2, [r7, #2]
 8004b48:	801a      	strh	r2, [r3, #0]
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40023c00 	.word	0x40023c00

08004b5c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004b68:	4b0c      	ldr	r3, [pc, #48]	@ (8004b9c <FLASH_Program_Byte+0x40>)
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	4a0b      	ldr	r2, [pc, #44]	@ (8004b9c <FLASH_Program_Byte+0x40>)
 8004b6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004b74:	4b09      	ldr	r3, [pc, #36]	@ (8004b9c <FLASH_Program_Byte+0x40>)
 8004b76:	4a09      	ldr	r2, [pc, #36]	@ (8004b9c <FLASH_Program_Byte+0x40>)
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004b7c:	4b07      	ldr	r3, [pc, #28]	@ (8004b9c <FLASH_Program_Byte+0x40>)
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	4a06      	ldr	r2, [pc, #24]	@ (8004b9c <FLASH_Program_Byte+0x40>)
 8004b82:	f043 0301 	orr.w	r3, r3, #1
 8004b86:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	78fa      	ldrb	r2, [r7, #3]
 8004b8c:	701a      	strb	r2, [r3, #0]
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40023c00 	.word	0x40023c00

08004ba0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004ba4:	4b2f      	ldr	r3, [pc, #188]	@ (8004c64 <FLASH_SetErrorCode+0xc4>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8004c68 <FLASH_SetErrorCode+0xc8>)
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	f043 0310 	orr.w	r3, r3, #16
 8004bb8:	4a2b      	ldr	r2, [pc, #172]	@ (8004c68 <FLASH_SetErrorCode+0xc8>)
 8004bba:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004bbc:	4b29      	ldr	r3, [pc, #164]	@ (8004c64 <FLASH_SetErrorCode+0xc4>)
 8004bbe:	2210      	movs	r2, #16
 8004bc0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004bc2:	4b28      	ldr	r3, [pc, #160]	@ (8004c64 <FLASH_SetErrorCode+0xc4>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d008      	beq.n	8004be0 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004bce:	4b26      	ldr	r3, [pc, #152]	@ (8004c68 <FLASH_SetErrorCode+0xc8>)
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f043 0308 	orr.w	r3, r3, #8
 8004bd6:	4a24      	ldr	r2, [pc, #144]	@ (8004c68 <FLASH_SetErrorCode+0xc8>)
 8004bd8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004bda:	4b22      	ldr	r3, [pc, #136]	@ (8004c64 <FLASH_SetErrorCode+0xc4>)
 8004bdc:	2220      	movs	r2, #32
 8004bde:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004be0:	4b20      	ldr	r3, [pc, #128]	@ (8004c64 <FLASH_SetErrorCode+0xc4>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d008      	beq.n	8004bfe <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004bec:	4b1e      	ldr	r3, [pc, #120]	@ (8004c68 <FLASH_SetErrorCode+0xc8>)
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	f043 0304 	orr.w	r3, r3, #4
 8004bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c68 <FLASH_SetErrorCode+0xc8>)
 8004bf6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c64 <FLASH_SetErrorCode+0xc4>)
 8004bfa:	2240      	movs	r2, #64	@ 0x40
 8004bfc:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004bfe:	4b19      	ldr	r3, [pc, #100]	@ (8004c64 <FLASH_SetErrorCode+0xc4>)
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d008      	beq.n	8004c1c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004c0a:	4b17      	ldr	r3, [pc, #92]	@ (8004c68 <FLASH_SetErrorCode+0xc8>)
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	f043 0302 	orr.w	r3, r3, #2
 8004c12:	4a15      	ldr	r2, [pc, #84]	@ (8004c68 <FLASH_SetErrorCode+0xc8>)
 8004c14:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004c16:	4b13      	ldr	r3, [pc, #76]	@ (8004c64 <FLASH_SetErrorCode+0xc4>)
 8004c18:	2280      	movs	r2, #128	@ 0x80
 8004c1a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004c1c:	4b11      	ldr	r3, [pc, #68]	@ (8004c64 <FLASH_SetErrorCode+0xc4>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d009      	beq.n	8004c3c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004c28:	4b0f      	ldr	r3, [pc, #60]	@ (8004c68 <FLASH_SetErrorCode+0xc8>)
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	f043 0301 	orr.w	r3, r3, #1
 8004c30:	4a0d      	ldr	r2, [pc, #52]	@ (8004c68 <FLASH_SetErrorCode+0xc8>)
 8004c32:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004c34:	4b0b      	ldr	r3, [pc, #44]	@ (8004c64 <FLASH_SetErrorCode+0xc4>)
 8004c36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c3a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004c3c:	4b09      	ldr	r3, [pc, #36]	@ (8004c64 <FLASH_SetErrorCode+0xc4>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d008      	beq.n	8004c5a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004c48:	4b07      	ldr	r3, [pc, #28]	@ (8004c68 <FLASH_SetErrorCode+0xc8>)
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	f043 0320 	orr.w	r3, r3, #32
 8004c50:	4a05      	ldr	r2, [pc, #20]	@ (8004c68 <FLASH_SetErrorCode+0xc8>)
 8004c52:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004c54:	4b03      	ldr	r3, [pc, #12]	@ (8004c64 <FLASH_SetErrorCode+0xc4>)
 8004c56:	2202      	movs	r2, #2
 8004c58:	60da      	str	r2, [r3, #12]
  }
}
 8004c5a:	bf00      	nop
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	40023c00 	.word	0x40023c00
 8004c68:	200118c8 	.word	0x200118c8

08004c6c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	460b      	mov	r3, r1
 8004c76:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d102      	bne.n	8004c88 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	e010      	b.n	8004caa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d103      	bne.n	8004c96 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004c8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	e009      	b.n	8004caa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004c96:	78fb      	ldrb	r3, [r7, #3]
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d103      	bne.n	8004ca4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004c9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	e002      	b.n	8004caa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004ca4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004ca8:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b0b      	cmp	r3, #11
 8004cae:	d902      	bls.n	8004cb6 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004cb6:	4b13      	ldr	r3, [pc, #76]	@ (8004d04 <FLASH_Erase_Sector+0x98>)
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	4a12      	ldr	r2, [pc, #72]	@ (8004d04 <FLASH_Erase_Sector+0x98>)
 8004cbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cc0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004cc2:	4b10      	ldr	r3, [pc, #64]	@ (8004d04 <FLASH_Erase_Sector+0x98>)
 8004cc4:	691a      	ldr	r2, [r3, #16]
 8004cc6:	490f      	ldr	r1, [pc, #60]	@ (8004d04 <FLASH_Erase_Sector+0x98>)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004cce:	4b0d      	ldr	r3, [pc, #52]	@ (8004d04 <FLASH_Erase_Sector+0x98>)
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8004d04 <FLASH_Erase_Sector+0x98>)
 8004cd4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004cd8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004cda:	4b0a      	ldr	r3, [pc, #40]	@ (8004d04 <FLASH_Erase_Sector+0x98>)
 8004cdc:	691a      	ldr	r2, [r3, #16]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	4a07      	ldr	r2, [pc, #28]	@ (8004d04 <FLASH_Erase_Sector+0x98>)
 8004ce6:	f043 0302 	orr.w	r3, r3, #2
 8004cea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004cec:	4b05      	ldr	r3, [pc, #20]	@ (8004d04 <FLASH_Erase_Sector+0x98>)
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	4a04      	ldr	r2, [pc, #16]	@ (8004d04 <FLASH_Erase_Sector+0x98>)
 8004cf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cf6:	6113      	str	r3, [r2, #16]
}
 8004cf8:	bf00      	nop
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	40023c00 	.word	0x40023c00

08004d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b089      	sub	sp, #36	@ 0x24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	e177      	b.n	8005014 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d24:	2201      	movs	r2, #1
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	4013      	ands	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	f040 8166 	bne.w	800500e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d005      	beq.n	8004d5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d130      	bne.n	8004dbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	2203      	movs	r2, #3
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d90:	2201      	movs	r2, #1
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	091b      	lsrs	r3, r3, #4
 8004da6:	f003 0201 	and.w	r2, r3, #1
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f003 0303 	and.w	r3, r3, #3
 8004dc4:	2b03      	cmp	r3, #3
 8004dc6:	d017      	beq.n	8004df8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	2203      	movs	r2, #3
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d123      	bne.n	8004e4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	08da      	lsrs	r2, r3, #3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3208      	adds	r2, #8
 8004e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	220f      	movs	r2, #15
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	43db      	mvns	r3, r3
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	4013      	ands	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	691a      	ldr	r2, [r3, #16]
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	08da      	lsrs	r2, r3, #3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	3208      	adds	r2, #8
 8004e46:	69b9      	ldr	r1, [r7, #24]
 8004e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	2203      	movs	r2, #3
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	4013      	ands	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f003 0203 	and.w	r2, r3, #3
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 80c0 	beq.w	800500e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	4b66      	ldr	r3, [pc, #408]	@ (800502c <HAL_GPIO_Init+0x324>)
 8004e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e96:	4a65      	ldr	r2, [pc, #404]	@ (800502c <HAL_GPIO_Init+0x324>)
 8004e98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e9e:	4b63      	ldr	r3, [pc, #396]	@ (800502c <HAL_GPIO_Init+0x324>)
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004eaa:	4a61      	ldr	r2, [pc, #388]	@ (8005030 <HAL_GPIO_Init+0x328>)
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	089b      	lsrs	r3, r3, #2
 8004eb0:	3302      	adds	r3, #2
 8004eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	220f      	movs	r2, #15
 8004ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a58      	ldr	r2, [pc, #352]	@ (8005034 <HAL_GPIO_Init+0x32c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d037      	beq.n	8004f46 <HAL_GPIO_Init+0x23e>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a57      	ldr	r2, [pc, #348]	@ (8005038 <HAL_GPIO_Init+0x330>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d031      	beq.n	8004f42 <HAL_GPIO_Init+0x23a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a56      	ldr	r2, [pc, #344]	@ (800503c <HAL_GPIO_Init+0x334>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d02b      	beq.n	8004f3e <HAL_GPIO_Init+0x236>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a55      	ldr	r2, [pc, #340]	@ (8005040 <HAL_GPIO_Init+0x338>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d025      	beq.n	8004f3a <HAL_GPIO_Init+0x232>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a54      	ldr	r2, [pc, #336]	@ (8005044 <HAL_GPIO_Init+0x33c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d01f      	beq.n	8004f36 <HAL_GPIO_Init+0x22e>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a53      	ldr	r2, [pc, #332]	@ (8005048 <HAL_GPIO_Init+0x340>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d019      	beq.n	8004f32 <HAL_GPIO_Init+0x22a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a52      	ldr	r2, [pc, #328]	@ (800504c <HAL_GPIO_Init+0x344>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d013      	beq.n	8004f2e <HAL_GPIO_Init+0x226>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a51      	ldr	r2, [pc, #324]	@ (8005050 <HAL_GPIO_Init+0x348>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00d      	beq.n	8004f2a <HAL_GPIO_Init+0x222>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a50      	ldr	r2, [pc, #320]	@ (8005054 <HAL_GPIO_Init+0x34c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d007      	beq.n	8004f26 <HAL_GPIO_Init+0x21e>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a4f      	ldr	r2, [pc, #316]	@ (8005058 <HAL_GPIO_Init+0x350>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d101      	bne.n	8004f22 <HAL_GPIO_Init+0x21a>
 8004f1e:	2309      	movs	r3, #9
 8004f20:	e012      	b.n	8004f48 <HAL_GPIO_Init+0x240>
 8004f22:	230a      	movs	r3, #10
 8004f24:	e010      	b.n	8004f48 <HAL_GPIO_Init+0x240>
 8004f26:	2308      	movs	r3, #8
 8004f28:	e00e      	b.n	8004f48 <HAL_GPIO_Init+0x240>
 8004f2a:	2307      	movs	r3, #7
 8004f2c:	e00c      	b.n	8004f48 <HAL_GPIO_Init+0x240>
 8004f2e:	2306      	movs	r3, #6
 8004f30:	e00a      	b.n	8004f48 <HAL_GPIO_Init+0x240>
 8004f32:	2305      	movs	r3, #5
 8004f34:	e008      	b.n	8004f48 <HAL_GPIO_Init+0x240>
 8004f36:	2304      	movs	r3, #4
 8004f38:	e006      	b.n	8004f48 <HAL_GPIO_Init+0x240>
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e004      	b.n	8004f48 <HAL_GPIO_Init+0x240>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	e002      	b.n	8004f48 <HAL_GPIO_Init+0x240>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <HAL_GPIO_Init+0x240>
 8004f46:	2300      	movs	r3, #0
 8004f48:	69fa      	ldr	r2, [r7, #28]
 8004f4a:	f002 0203 	and.w	r2, r2, #3
 8004f4e:	0092      	lsls	r2, r2, #2
 8004f50:	4093      	lsls	r3, r2
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f58:	4935      	ldr	r1, [pc, #212]	@ (8005030 <HAL_GPIO_Init+0x328>)
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	089b      	lsrs	r3, r3, #2
 8004f5e:	3302      	adds	r3, #2
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f66:	4b3d      	ldr	r3, [pc, #244]	@ (800505c <HAL_GPIO_Init+0x354>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	4013      	ands	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f8a:	4a34      	ldr	r2, [pc, #208]	@ (800505c <HAL_GPIO_Init+0x354>)
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f90:	4b32      	ldr	r3, [pc, #200]	@ (800505c <HAL_GPIO_Init+0x354>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fb4:	4a29      	ldr	r2, [pc, #164]	@ (800505c <HAL_GPIO_Init+0x354>)
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004fba:	4b28      	ldr	r3, [pc, #160]	@ (800505c <HAL_GPIO_Init+0x354>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	43db      	mvns	r3, r3
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fde:	4a1f      	ldr	r2, [pc, #124]	@ (800505c <HAL_GPIO_Init+0x354>)
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800505c <HAL_GPIO_Init+0x354>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	43db      	mvns	r3, r3
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	4313      	orrs	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005008:	4a14      	ldr	r2, [pc, #80]	@ (800505c <HAL_GPIO_Init+0x354>)
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	3301      	adds	r3, #1
 8005012:	61fb      	str	r3, [r7, #28]
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	2b0f      	cmp	r3, #15
 8005018:	f67f ae84 	bls.w	8004d24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800501c:	bf00      	nop
 800501e:	bf00      	nop
 8005020:	3724      	adds	r7, #36	@ 0x24
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40023800 	.word	0x40023800
 8005030:	40013800 	.word	0x40013800
 8005034:	40020000 	.word	0x40020000
 8005038:	40020400 	.word	0x40020400
 800503c:	40020800 	.word	0x40020800
 8005040:	40020c00 	.word	0x40020c00
 8005044:	40021000 	.word	0x40021000
 8005048:	40021400 	.word	0x40021400
 800504c:	40021800 	.word	0x40021800
 8005050:	40021c00 	.word	0x40021c00
 8005054:	40022000 	.word	0x40022000
 8005058:	40022400 	.word	0x40022400
 800505c:	40013c00 	.word	0x40013c00

08005060 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691a      	ldr	r2, [r3, #16]
 8005070:	887b      	ldrh	r3, [r7, #2]
 8005072:	4013      	ands	r3, r2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005078:	2301      	movs	r3, #1
 800507a:	73fb      	strb	r3, [r7, #15]
 800507c:	e001      	b.n	8005082 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800507e:	2300      	movs	r3, #0
 8005080:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005082:	7bfb      	ldrb	r3, [r7, #15]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	460b      	mov	r3, r1
 800509a:	807b      	strh	r3, [r7, #2]
 800509c:	4613      	mov	r3, r2
 800509e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050a0:	787b      	ldrb	r3, [r7, #1]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050a6:	887a      	ldrh	r2, [r7, #2]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050ac:	e003      	b.n	80050b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050ae:	887b      	ldrh	r3, [r7, #2]
 80050b0:	041a      	lsls	r2, r3, #16
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	619a      	str	r2, [r3, #24]
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
	...

080050c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4603      	mov	r3, r0
 80050cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80050ce:	4b08      	ldr	r3, [pc, #32]	@ (80050f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050d0:	695a      	ldr	r2, [r3, #20]
 80050d2:	88fb      	ldrh	r3, [r7, #6]
 80050d4:	4013      	ands	r3, r2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d006      	beq.n	80050e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050da:	4a05      	ldr	r2, [pc, #20]	@ (80050f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050dc:	88fb      	ldrh	r3, [r7, #6]
 80050de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050e0:	88fb      	ldrh	r3, [r7, #6]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fe ff3a 	bl	8003f5c <HAL_GPIO_EXTI_Callback>
  }
}
 80050e8:	bf00      	nop
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	40013c00 	.word	0x40013c00

080050f4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af02      	add	r7, sp, #8
 80050fa:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e059      	b.n	80051ba <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	d106      	bne.n	8005126 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f009 f975 	bl	800e410 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2203      	movs	r2, #3
 800512a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005134:	d102      	bne.n	800513c <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f005 fa28 	bl	800a596 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	7c1a      	ldrb	r2, [r3, #16]
 800514e:	f88d 2000 	strb.w	r2, [sp]
 8005152:	3304      	adds	r3, #4
 8005154:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005156:	f005 f9a9 	bl	800a4ac <USB_CoreInit>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e026      	b.n	80051ba <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2101      	movs	r1, #1
 8005172:	4618      	mov	r0, r3
 8005174:	f005 fa20 	bl	800a5b8 <USB_SetCurrentMode>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d005      	beq.n	800518a <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e017      	b.n	80051ba <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	7c1a      	ldrb	r2, [r3, #16]
 8005192:	f88d 2000 	strb.w	r2, [sp]
 8005196:	3304      	adds	r3, #4
 8005198:	cb0e      	ldmia	r3, {r1, r2, r3}
 800519a:	f005 fbc3 	bl	800a924 <USB_HostInit>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d005      	beq.n	80051b0 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e004      	b.n	80051ba <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80051c2:	b590      	push	{r4, r7, lr}
 80051c4:	b08b      	sub	sp, #44	@ 0x2c
 80051c6:	af04      	add	r7, sp, #16
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	4608      	mov	r0, r1
 80051cc:	4611      	mov	r1, r2
 80051ce:	461a      	mov	r2, r3
 80051d0:	4603      	mov	r3, r0
 80051d2:	70fb      	strb	r3, [r7, #3]
 80051d4:	460b      	mov	r3, r1
 80051d6:	70bb      	strb	r3, [r7, #2]
 80051d8:	4613      	mov	r3, r2
 80051da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80051dc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80051de:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d101      	bne.n	80051ee <HAL_HCD_HC_Init+0x2c>
 80051ea:	2302      	movs	r3, #2
 80051ec:	e09d      	b.n	800532a <HAL_HCD_HC_Init+0x168>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80051f6:	78fa      	ldrb	r2, [r7, #3]
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	4613      	mov	r3, r2
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	1a9b      	subs	r3, r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	440b      	add	r3, r1
 8005204:	3319      	adds	r3, #25
 8005206:	2200      	movs	r2, #0
 8005208:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800520a:	78fa      	ldrb	r2, [r7, #3]
 800520c:	6879      	ldr	r1, [r7, #4]
 800520e:	4613      	mov	r3, r2
 8005210:	011b      	lsls	r3, r3, #4
 8005212:	1a9b      	subs	r3, r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	440b      	add	r3, r1
 8005218:	3314      	adds	r3, #20
 800521a:	787a      	ldrb	r2, [r7, #1]
 800521c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800521e:	78fa      	ldrb	r2, [r7, #3]
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	4613      	mov	r3, r2
 8005224:	011b      	lsls	r3, r3, #4
 8005226:	1a9b      	subs	r3, r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	440b      	add	r3, r1
 800522c:	3315      	adds	r3, #21
 800522e:	78fa      	ldrb	r2, [r7, #3]
 8005230:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005232:	78fa      	ldrb	r2, [r7, #3]
 8005234:	6879      	ldr	r1, [r7, #4]
 8005236:	4613      	mov	r3, r2
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	1a9b      	subs	r3, r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	440b      	add	r3, r1
 8005240:	3326      	adds	r3, #38	@ 0x26
 8005242:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8005246:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005248:	78fa      	ldrb	r2, [r7, #3]
 800524a:	78bb      	ldrb	r3, [r7, #2]
 800524c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005250:	b2d8      	uxtb	r0, r3
 8005252:	6879      	ldr	r1, [r7, #4]
 8005254:	4613      	mov	r3, r2
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	1a9b      	subs	r3, r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	440b      	add	r3, r1
 800525e:	3316      	adds	r3, #22
 8005260:	4602      	mov	r2, r0
 8005262:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8005264:	78fb      	ldrb	r3, [r7, #3]
 8005266:	4619      	mov	r1, r3
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fbc7 	bl	80059fc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800526e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005272:	2b00      	cmp	r3, #0
 8005274:	da0a      	bge.n	800528c <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005276:	78fa      	ldrb	r2, [r7, #3]
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	4613      	mov	r3, r2
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	1a9b      	subs	r3, r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	440b      	add	r3, r1
 8005284:	3317      	adds	r3, #23
 8005286:	2201      	movs	r2, #1
 8005288:	701a      	strb	r2, [r3, #0]
 800528a:	e009      	b.n	80052a0 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800528c:	78fa      	ldrb	r2, [r7, #3]
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	3317      	adds	r3, #23
 800529c:	2200      	movs	r2, #0
 800529e:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f005 fca1 	bl	800abec <USB_GetHostSpeed>
 80052aa:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80052ac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d10b      	bne.n	80052cc <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80052b4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d107      	bne.n	80052cc <HAL_HCD_HC_Init+0x10a>
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d104      	bne.n	80052cc <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2bbc      	cmp	r3, #188	@ 0xbc
 80052c6:	d901      	bls.n	80052cc <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80052c8:	23bc      	movs	r3, #188	@ 0xbc
 80052ca:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80052cc:	78fa      	ldrb	r2, [r7, #3]
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	4613      	mov	r3, r2
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	1a9b      	subs	r3, r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	3318      	adds	r3, #24
 80052dc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80052e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80052e2:	78fa      	ldrb	r2, [r7, #3]
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	b298      	uxth	r0, r3
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	4613      	mov	r3, r2
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	1a9b      	subs	r3, r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	440b      	add	r3, r1
 80052f4:	3328      	adds	r3, #40	@ 0x28
 80052f6:	4602      	mov	r2, r0
 80052f8:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6818      	ldr	r0, [r3, #0]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	b29b      	uxth	r3, r3
 8005302:	787c      	ldrb	r4, [r7, #1]
 8005304:	78ba      	ldrb	r2, [r7, #2]
 8005306:	78f9      	ldrb	r1, [r7, #3]
 8005308:	9302      	str	r3, [sp, #8]
 800530a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800530e:	9301      	str	r3, [sp, #4]
 8005310:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	4623      	mov	r3, r4
 8005318:	f005 fc90 	bl	800ac3c <USB_HC_Init>
 800531c:	4603      	mov	r3, r0
 800531e:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8005328:	7bfb      	ldrb	r3, [r7, #15]
}
 800532a:	4618      	mov	r0, r3
 800532c:	371c      	adds	r7, #28
 800532e:	46bd      	mov	sp, r7
 8005330:	bd90      	pop	{r4, r7, pc}

08005332 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	460b      	mov	r3, r1
 800533c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005348:	2b01      	cmp	r3, #1
 800534a:	d101      	bne.n	8005350 <HAL_HCD_HC_Halt+0x1e>
 800534c:	2302      	movs	r3, #2
 800534e:	e00f      	b.n	8005370 <HAL_HCD_HC_Halt+0x3e>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	78fa      	ldrb	r2, [r7, #3]
 800535e:	4611      	mov	r1, r2
 8005360:	4618      	mov	r0, r3
 8005362:	f006 f822 	bl	800b3aa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800536e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	4608      	mov	r0, r1
 8005382:	4611      	mov	r1, r2
 8005384:	461a      	mov	r2, r3
 8005386:	4603      	mov	r3, r0
 8005388:	70fb      	strb	r3, [r7, #3]
 800538a:	460b      	mov	r3, r1
 800538c:	70bb      	strb	r3, [r7, #2]
 800538e:	4613      	mov	r3, r2
 8005390:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005392:	78fa      	ldrb	r2, [r7, #3]
 8005394:	6879      	ldr	r1, [r7, #4]
 8005396:	4613      	mov	r3, r2
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	1a9b      	subs	r3, r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	440b      	add	r3, r1
 80053a0:	3317      	adds	r3, #23
 80053a2:	78ba      	ldrb	r2, [r7, #2]
 80053a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80053a6:	78fa      	ldrb	r2, [r7, #3]
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	4613      	mov	r3, r2
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	1a9b      	subs	r3, r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	440b      	add	r3, r1
 80053b4:	3326      	adds	r3, #38	@ 0x26
 80053b6:	787a      	ldrb	r2, [r7, #1]
 80053b8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80053ba:	7c3b      	ldrb	r3, [r7, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d114      	bne.n	80053ea <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80053c0:	78fa      	ldrb	r2, [r7, #3]
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	4613      	mov	r3, r2
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	1a9b      	subs	r3, r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	440b      	add	r3, r1
 80053ce:	332a      	adds	r3, #42	@ 0x2a
 80053d0:	2203      	movs	r2, #3
 80053d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80053d4:	78fa      	ldrb	r2, [r7, #3]
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	4613      	mov	r3, r2
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	1a9b      	subs	r3, r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	440b      	add	r3, r1
 80053e2:	3319      	adds	r3, #25
 80053e4:	7f3a      	ldrb	r2, [r7, #28]
 80053e6:	701a      	strb	r2, [r3, #0]
 80053e8:	e009      	b.n	80053fe <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80053ea:	78fa      	ldrb	r2, [r7, #3]
 80053ec:	6879      	ldr	r1, [r7, #4]
 80053ee:	4613      	mov	r3, r2
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	1a9b      	subs	r3, r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	440b      	add	r3, r1
 80053f8:	332a      	adds	r3, #42	@ 0x2a
 80053fa:	2202      	movs	r2, #2
 80053fc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80053fe:	787b      	ldrb	r3, [r7, #1]
 8005400:	2b03      	cmp	r3, #3
 8005402:	f200 8102 	bhi.w	800560a <HAL_HCD_HC_SubmitRequest+0x292>
 8005406:	a201      	add	r2, pc, #4	@ (adr r2, 800540c <HAL_HCD_HC_SubmitRequest+0x94>)
 8005408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540c:	0800541d 	.word	0x0800541d
 8005410:	080055f5 	.word	0x080055f5
 8005414:	080054e1 	.word	0x080054e1
 8005418:	0800556b 	.word	0x0800556b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800541c:	7c3b      	ldrb	r3, [r7, #16]
 800541e:	2b01      	cmp	r3, #1
 8005420:	f040 80f5 	bne.w	800560e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8005424:	78bb      	ldrb	r3, [r7, #2]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d12d      	bne.n	8005486 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800542a:	8b3b      	ldrh	r3, [r7, #24]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d109      	bne.n	8005444 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8005430:	78fa      	ldrb	r2, [r7, #3]
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	4613      	mov	r3, r2
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	1a9b      	subs	r3, r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	333d      	adds	r3, #61	@ 0x3d
 8005440:	2201      	movs	r2, #1
 8005442:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8005444:	78fa      	ldrb	r2, [r7, #3]
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	4613      	mov	r3, r2
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	1a9b      	subs	r3, r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	333d      	adds	r3, #61	@ 0x3d
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10a      	bne.n	8005470 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800545a:	78fa      	ldrb	r2, [r7, #3]
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	4613      	mov	r3, r2
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	1a9b      	subs	r3, r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	440b      	add	r3, r1
 8005468:	332a      	adds	r3, #42	@ 0x2a
 800546a:	2200      	movs	r2, #0
 800546c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800546e:	e0ce      	b.n	800560e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005470:	78fa      	ldrb	r2, [r7, #3]
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	4613      	mov	r3, r2
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	1a9b      	subs	r3, r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	440b      	add	r3, r1
 800547e:	332a      	adds	r3, #42	@ 0x2a
 8005480:	2202      	movs	r2, #2
 8005482:	701a      	strb	r2, [r3, #0]
      break;
 8005484:	e0c3      	b.n	800560e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8005486:	78fa      	ldrb	r2, [r7, #3]
 8005488:	6879      	ldr	r1, [r7, #4]
 800548a:	4613      	mov	r3, r2
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	1a9b      	subs	r3, r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	440b      	add	r3, r1
 8005494:	331a      	adds	r3, #26
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b01      	cmp	r3, #1
 800549a:	f040 80b8 	bne.w	800560e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800549e:	78fa      	ldrb	r2, [r7, #3]
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	1a9b      	subs	r3, r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	440b      	add	r3, r1
 80054ac:	333c      	adds	r3, #60	@ 0x3c
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10a      	bne.n	80054ca <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80054b4:	78fa      	ldrb	r2, [r7, #3]
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	4613      	mov	r3, r2
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	1a9b      	subs	r3, r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	440b      	add	r3, r1
 80054c2:	332a      	adds	r3, #42	@ 0x2a
 80054c4:	2200      	movs	r2, #0
 80054c6:	701a      	strb	r2, [r3, #0]
      break;
 80054c8:	e0a1      	b.n	800560e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80054ca:	78fa      	ldrb	r2, [r7, #3]
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	4613      	mov	r3, r2
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	1a9b      	subs	r3, r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	440b      	add	r3, r1
 80054d8:	332a      	adds	r3, #42	@ 0x2a
 80054da:	2202      	movs	r2, #2
 80054dc:	701a      	strb	r2, [r3, #0]
      break;
 80054de:	e096      	b.n	800560e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80054e0:	78bb      	ldrb	r3, [r7, #2]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d120      	bne.n	8005528 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80054e6:	78fa      	ldrb	r2, [r7, #3]
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	4613      	mov	r3, r2
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	1a9b      	subs	r3, r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	333d      	adds	r3, #61	@ 0x3d
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10a      	bne.n	8005512 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80054fc:	78fa      	ldrb	r2, [r7, #3]
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	4613      	mov	r3, r2
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	1a9b      	subs	r3, r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	332a      	adds	r3, #42	@ 0x2a
 800550c:	2200      	movs	r2, #0
 800550e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005510:	e07e      	b.n	8005610 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005512:	78fa      	ldrb	r2, [r7, #3]
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	4613      	mov	r3, r2
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	1a9b      	subs	r3, r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	440b      	add	r3, r1
 8005520:	332a      	adds	r3, #42	@ 0x2a
 8005522:	2202      	movs	r2, #2
 8005524:	701a      	strb	r2, [r3, #0]
      break;
 8005526:	e073      	b.n	8005610 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005528:	78fa      	ldrb	r2, [r7, #3]
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	4613      	mov	r3, r2
 800552e:	011b      	lsls	r3, r3, #4
 8005530:	1a9b      	subs	r3, r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	440b      	add	r3, r1
 8005536:	333c      	adds	r3, #60	@ 0x3c
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10a      	bne.n	8005554 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800553e:	78fa      	ldrb	r2, [r7, #3]
 8005540:	6879      	ldr	r1, [r7, #4]
 8005542:	4613      	mov	r3, r2
 8005544:	011b      	lsls	r3, r3, #4
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	440b      	add	r3, r1
 800554c:	332a      	adds	r3, #42	@ 0x2a
 800554e:	2200      	movs	r2, #0
 8005550:	701a      	strb	r2, [r3, #0]
      break;
 8005552:	e05d      	b.n	8005610 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005554:	78fa      	ldrb	r2, [r7, #3]
 8005556:	6879      	ldr	r1, [r7, #4]
 8005558:	4613      	mov	r3, r2
 800555a:	011b      	lsls	r3, r3, #4
 800555c:	1a9b      	subs	r3, r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	440b      	add	r3, r1
 8005562:	332a      	adds	r3, #42	@ 0x2a
 8005564:	2202      	movs	r2, #2
 8005566:	701a      	strb	r2, [r3, #0]
      break;
 8005568:	e052      	b.n	8005610 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800556a:	78bb      	ldrb	r3, [r7, #2]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d120      	bne.n	80055b2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005570:	78fa      	ldrb	r2, [r7, #3]
 8005572:	6879      	ldr	r1, [r7, #4]
 8005574:	4613      	mov	r3, r2
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	1a9b      	subs	r3, r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	440b      	add	r3, r1
 800557e:	333d      	adds	r3, #61	@ 0x3d
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005586:	78fa      	ldrb	r2, [r7, #3]
 8005588:	6879      	ldr	r1, [r7, #4]
 800558a:	4613      	mov	r3, r2
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	1a9b      	subs	r3, r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	440b      	add	r3, r1
 8005594:	332a      	adds	r3, #42	@ 0x2a
 8005596:	2200      	movs	r2, #0
 8005598:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800559a:	e039      	b.n	8005610 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800559c:	78fa      	ldrb	r2, [r7, #3]
 800559e:	6879      	ldr	r1, [r7, #4]
 80055a0:	4613      	mov	r3, r2
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	1a9b      	subs	r3, r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	440b      	add	r3, r1
 80055aa:	332a      	adds	r3, #42	@ 0x2a
 80055ac:	2202      	movs	r2, #2
 80055ae:	701a      	strb	r2, [r3, #0]
      break;
 80055b0:	e02e      	b.n	8005610 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80055b2:	78fa      	ldrb	r2, [r7, #3]
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	4613      	mov	r3, r2
 80055b8:	011b      	lsls	r3, r3, #4
 80055ba:	1a9b      	subs	r3, r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	440b      	add	r3, r1
 80055c0:	333c      	adds	r3, #60	@ 0x3c
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80055c8:	78fa      	ldrb	r2, [r7, #3]
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	4613      	mov	r3, r2
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	1a9b      	subs	r3, r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	440b      	add	r3, r1
 80055d6:	332a      	adds	r3, #42	@ 0x2a
 80055d8:	2200      	movs	r2, #0
 80055da:	701a      	strb	r2, [r3, #0]
      break;
 80055dc:	e018      	b.n	8005610 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80055de:	78fa      	ldrb	r2, [r7, #3]
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	4613      	mov	r3, r2
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	1a9b      	subs	r3, r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	440b      	add	r3, r1
 80055ec:	332a      	adds	r3, #42	@ 0x2a
 80055ee:	2202      	movs	r2, #2
 80055f0:	701a      	strb	r2, [r3, #0]
      break;
 80055f2:	e00d      	b.n	8005610 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80055f4:	78fa      	ldrb	r2, [r7, #3]
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	4613      	mov	r3, r2
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	1a9b      	subs	r3, r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	440b      	add	r3, r1
 8005602:	332a      	adds	r3, #42	@ 0x2a
 8005604:	2200      	movs	r2, #0
 8005606:	701a      	strb	r2, [r3, #0]
      break;
 8005608:	e002      	b.n	8005610 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800560a:	bf00      	nop
 800560c:	e000      	b.n	8005610 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800560e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005610:	78fa      	ldrb	r2, [r7, #3]
 8005612:	6879      	ldr	r1, [r7, #4]
 8005614:	4613      	mov	r3, r2
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	1a9b      	subs	r3, r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	440b      	add	r3, r1
 800561e:	332c      	adds	r3, #44	@ 0x2c
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005624:	78fa      	ldrb	r2, [r7, #3]
 8005626:	8b39      	ldrh	r1, [r7, #24]
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	4613      	mov	r3, r2
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	1a9b      	subs	r3, r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4403      	add	r3, r0
 8005634:	3334      	adds	r3, #52	@ 0x34
 8005636:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	334c      	adds	r3, #76	@ 0x4c
 8005648:	2200      	movs	r2, #0
 800564a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800564c:	78fa      	ldrb	r2, [r7, #3]
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	4613      	mov	r3, r2
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	1a9b      	subs	r3, r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	3338      	adds	r3, #56	@ 0x38
 800565c:	2200      	movs	r2, #0
 800565e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005660:	78fa      	ldrb	r2, [r7, #3]
 8005662:	6879      	ldr	r1, [r7, #4]
 8005664:	4613      	mov	r3, r2
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	1a9b      	subs	r3, r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	440b      	add	r3, r1
 800566e:	3315      	adds	r3, #21
 8005670:	78fa      	ldrb	r2, [r7, #3]
 8005672:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005674:	78fa      	ldrb	r2, [r7, #3]
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	4613      	mov	r3, r2
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	1a9b      	subs	r3, r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	440b      	add	r3, r1
 8005682:	334d      	adds	r3, #77	@ 0x4d
 8005684:	2200      	movs	r2, #0
 8005686:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6818      	ldr	r0, [r3, #0]
 800568c:	78fa      	ldrb	r2, [r7, #3]
 800568e:	4613      	mov	r3, r2
 8005690:	011b      	lsls	r3, r3, #4
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	3310      	adds	r3, #16
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	4413      	add	r3, r2
 800569c:	1d19      	adds	r1, r3, #4
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	799b      	ldrb	r3, [r3, #6]
 80056a2:	461a      	mov	r2, r3
 80056a4:	f005 fbf6 	bl	800ae94 <USB_HC_StartXfer>
 80056a8:	4603      	mov	r3, r0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop

080056b4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f005 f8ea 	bl	800a8a4 <USB_GetMode>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	f040 80fb 	bne.w	80058ce <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4618      	mov	r0, r3
 80056de:	f005 f8ad 	bl	800a83c <USB_ReadInterrupts>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 80f1 	beq.w	80058cc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f005 f8a4 	bl	800a83c <USB_ReadInterrupts>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056fe:	d104      	bne.n	800570a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005708:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4618      	mov	r0, r3
 8005710:	f005 f894 	bl	800a83c <USB_ReadInterrupts>
 8005714:	4603      	mov	r3, r0
 8005716:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800571a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800571e:	d104      	bne.n	800572a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005728:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4618      	mov	r0, r3
 8005730:	f005 f884 	bl	800a83c <USB_ReadInterrupts>
 8005734:	4603      	mov	r3, r0
 8005736:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800573a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800573e:	d104      	bne.n	800574a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005748:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4618      	mov	r0, r3
 8005750:	f005 f874 	bl	800a83c <USB_ReadInterrupts>
 8005754:	4603      	mov	r3, r0
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b02      	cmp	r3, #2
 800575c:	d103      	bne.n	8005766 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2202      	movs	r2, #2
 8005764:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f005 f866 	bl	800a83c <USB_ReadInterrupts>
 8005770:	4603      	mov	r3, r0
 8005772:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800577a:	d120      	bne.n	80057be <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005784:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d113      	bne.n	80057be <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005796:	2110      	movs	r1, #16
 8005798:	6938      	ldr	r0, [r7, #16]
 800579a:	f004 ff59 	bl	800a650 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800579e:	6938      	ldr	r0, [r7, #16]
 80057a0:	f004 ff88 	bl	800a6b4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	7a5b      	ldrb	r3, [r3, #9]
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d105      	bne.n	80057b8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2101      	movs	r1, #1
 80057b2:	4618      	mov	r0, r3
 80057b4:	f005 f97a 	bl	800aaac <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f008 fea7 	bl	800e50c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f005 f83a 	bl	800a83c <USB_ReadInterrupts>
 80057c8:	4603      	mov	r3, r0
 80057ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057d2:	d102      	bne.n	80057da <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f001 fd4d 	bl	8007274 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4618      	mov	r0, r3
 80057e0:	f005 f82c 	bl	800a83c <USB_ReadInterrupts>
 80057e4:	4603      	mov	r3, r0
 80057e6:	f003 0308 	and.w	r3, r3, #8
 80057ea:	2b08      	cmp	r3, #8
 80057ec:	d106      	bne.n	80057fc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f008 fe70 	bl	800e4d4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2208      	movs	r2, #8
 80057fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4618      	mov	r0, r3
 8005802:	f005 f81b 	bl	800a83c <USB_ReadInterrupts>
 8005806:	4603      	mov	r3, r0
 8005808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800580c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005810:	d139      	bne.n	8005886 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f005 fdb6 	bl	800b388 <USB_HC_ReadInterrupt>
 800581c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800581e:	2300      	movs	r3, #0
 8005820:	617b      	str	r3, [r7, #20]
 8005822:	e025      	b.n	8005870 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	fa22 f303 	lsr.w	r3, r2, r3
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	d018      	beq.n	800586a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800584a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800584e:	d106      	bne.n	800585e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	b2db      	uxtb	r3, r3
 8005854:	4619      	mov	r1, r3
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f905 	bl	8005a66 <HCD_HC_IN_IRQHandler>
 800585c:	e005      	b.n	800586a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	b2db      	uxtb	r3, r3
 8005862:	4619      	mov	r1, r3
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 ff67 	bl	8006738 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	3301      	adds	r3, #1
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	795b      	ldrb	r3, [r3, #5]
 8005874:	461a      	mov	r2, r3
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	4293      	cmp	r3, r2
 800587a:	d3d3      	bcc.n	8005824 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005884:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f004 ffd6 	bl	800a83c <USB_ReadInterrupts>
 8005890:	4603      	mov	r3, r0
 8005892:	f003 0310 	and.w	r3, r3, #16
 8005896:	2b10      	cmp	r3, #16
 8005898:	d101      	bne.n	800589e <HAL_HCD_IRQHandler+0x1ea>
 800589a:	2301      	movs	r3, #1
 800589c:	e000      	b.n	80058a0 <HAL_HCD_IRQHandler+0x1ec>
 800589e:	2300      	movs	r3, #0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d014      	beq.n	80058ce <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	699a      	ldr	r2, [r3, #24]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 0210 	bic.w	r2, r2, #16
 80058b2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f001 fbfe 	bl	80070b6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	699a      	ldr	r2, [r3, #24]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 0210 	orr.w	r2, r2, #16
 80058c8:	619a      	str	r2, [r3, #24]
 80058ca:	e000      	b.n	80058ce <HAL_HCD_IRQHandler+0x21a>
      return;
 80058cc:	bf00      	nop
    }
  }
}
 80058ce:	3718      	adds	r7, #24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d101      	bne.n	80058ea <HAL_HCD_Start+0x16>
 80058e6:	2302      	movs	r3, #2
 80058e8:	e013      	b.n	8005912 <HAL_HCD_Start+0x3e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2101      	movs	r1, #1
 80058f8:	4618      	mov	r0, r3
 80058fa:	f005 f93e 	bl	800ab7a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4618      	mov	r0, r3
 8005904:	f004 fe36 	bl	800a574 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b082      	sub	sp, #8
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_HCD_Stop+0x16>
 800592c:	2302      	movs	r3, #2
 800592e:	e00d      	b.n	800594c <HAL_HCD_Stop+0x32>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4618      	mov	r0, r3
 800593e:	f005 fe91 	bl	800b664 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4618      	mov	r0, r3
 8005962:	f005 f8e0 	bl	800ab26 <USB_ResetPort>
 8005966:	4603      	mov	r3, r0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800597c:	78fa      	ldrb	r2, [r7, #3]
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	4613      	mov	r3, r2
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	1a9b      	subs	r3, r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	440b      	add	r3, r1
 800598a:	334c      	adds	r3, #76	@ 0x4c
 800598c:	781b      	ldrb	r3, [r3, #0]
}
 800598e:	4618      	mov	r0, r3
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	460b      	mov	r3, r1
 80059a4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80059a6:	78fa      	ldrb	r2, [r7, #3]
 80059a8:	6879      	ldr	r1, [r7, #4]
 80059aa:	4613      	mov	r3, r2
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	1a9b      	subs	r3, r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	440b      	add	r3, r1
 80059b4:	3338      	adds	r3, #56	@ 0x38
 80059b6:	681b      	ldr	r3, [r3, #0]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f005 f922 	bl	800ac1a <USB_GetCurrentFrame>
 80059d6:	4603      	mov	r3, r0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f005 f8fd 	bl	800abec <USB_GetHostSpeed>
 80059f2:	4603      	mov	r3, r0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	460b      	mov	r3, r1
 8005a06:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8005a08:	78fa      	ldrb	r2, [r7, #3]
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	1a9b      	subs	r3, r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	331a      	adds	r3, #26
 8005a18:	2200      	movs	r2, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8005a1c:	78fa      	ldrb	r2, [r7, #3]
 8005a1e:	6879      	ldr	r1, [r7, #4]
 8005a20:	4613      	mov	r3, r2
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	1a9b      	subs	r3, r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	440b      	add	r3, r1
 8005a2a:	331b      	adds	r3, #27
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8005a30:	78fa      	ldrb	r2, [r7, #3]
 8005a32:	6879      	ldr	r1, [r7, #4]
 8005a34:	4613      	mov	r3, r2
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	1a9b      	subs	r3, r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	3325      	adds	r3, #37	@ 0x25
 8005a40:	2200      	movs	r2, #0
 8005a42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8005a44:	78fa      	ldrb	r2, [r7, #3]
 8005a46:	6879      	ldr	r1, [r7, #4]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	1a9b      	subs	r3, r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	440b      	add	r3, r1
 8005a52:	3324      	adds	r3, #36	@ 0x24
 8005a54:	2200      	movs	r2, #0
 8005a56:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b086      	sub	sp, #24
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	78fa      	ldrb	r2, [r7, #3]
 8005a82:	4611      	mov	r1, r2
 8005a84:	4618      	mov	r0, r3
 8005a86:	f004 feec 	bl	800a862 <USB_ReadChInterrupts>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	d11a      	bne.n	8005aca <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	2304      	movs	r3, #4
 8005aa4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005aa6:	78fa      	ldrb	r2, [r7, #3]
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	011b      	lsls	r3, r3, #4
 8005aae:	1a9b      	subs	r3, r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	440b      	add	r3, r1
 8005ab4:	334d      	adds	r3, #77	@ 0x4d
 8005ab6:	2207      	movs	r2, #7
 8005ab8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	78fa      	ldrb	r2, [r7, #3]
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f005 fc71 	bl	800b3aa <USB_HC_Halt>
 8005ac8:	e09e      	b.n	8005c08 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	78fa      	ldrb	r2, [r7, #3]
 8005ad0:	4611      	mov	r1, r2
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f004 fec5 	bl	800a862 <USB_ReadChInterrupts>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ae2:	d11b      	bne.n	8005b1c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8005ae4:	78fb      	ldrb	r3, [r7, #3]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005af0:	461a      	mov	r2, r3
 8005af2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005af6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8005af8:	78fa      	ldrb	r2, [r7, #3]
 8005afa:	6879      	ldr	r1, [r7, #4]
 8005afc:	4613      	mov	r3, r2
 8005afe:	011b      	lsls	r3, r3, #4
 8005b00:	1a9b      	subs	r3, r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	440b      	add	r3, r1
 8005b06:	334d      	adds	r3, #77	@ 0x4d
 8005b08:	2208      	movs	r2, #8
 8005b0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	78fa      	ldrb	r2, [r7, #3]
 8005b12:	4611      	mov	r1, r2
 8005b14:	4618      	mov	r0, r3
 8005b16:	f005 fc48 	bl	800b3aa <USB_HC_Halt>
 8005b1a:	e075      	b.n	8005c08 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	78fa      	ldrb	r2, [r7, #3]
 8005b22:	4611      	mov	r1, r2
 8005b24:	4618      	mov	r0, r3
 8005b26:	f004 fe9c 	bl	800a862 <USB_ReadChInterrupts>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	f003 0308 	and.w	r3, r3, #8
 8005b30:	2b08      	cmp	r3, #8
 8005b32:	d11a      	bne.n	8005b6a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005b34:	78fb      	ldrb	r3, [r7, #3]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b40:	461a      	mov	r2, r3
 8005b42:	2308      	movs	r3, #8
 8005b44:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005b46:	78fa      	ldrb	r2, [r7, #3]
 8005b48:	6879      	ldr	r1, [r7, #4]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	011b      	lsls	r3, r3, #4
 8005b4e:	1a9b      	subs	r3, r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	440b      	add	r3, r1
 8005b54:	334d      	adds	r3, #77	@ 0x4d
 8005b56:	2206      	movs	r2, #6
 8005b58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	78fa      	ldrb	r2, [r7, #3]
 8005b60:	4611      	mov	r1, r2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f005 fc21 	bl	800b3aa <USB_HC_Halt>
 8005b68:	e04e      	b.n	8005c08 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	78fa      	ldrb	r2, [r7, #3]
 8005b70:	4611      	mov	r1, r2
 8005b72:	4618      	mov	r0, r3
 8005b74:	f004 fe75 	bl	800a862 <USB_ReadChInterrupts>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b82:	d11b      	bne.n	8005bbc <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005b84:	78fb      	ldrb	r3, [r7, #3]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b90:	461a      	mov	r2, r3
 8005b92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b96:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005b98:	78fa      	ldrb	r2, [r7, #3]
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	1a9b      	subs	r3, r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	334d      	adds	r3, #77	@ 0x4d
 8005ba8:	2209      	movs	r2, #9
 8005baa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	78fa      	ldrb	r2, [r7, #3]
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f005 fbf8 	bl	800b3aa <USB_HC_Halt>
 8005bba:	e025      	b.n	8005c08 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	78fa      	ldrb	r2, [r7, #3]
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f004 fe4c 	bl	800a862 <USB_ReadChInterrupts>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bd0:	2b80      	cmp	r3, #128	@ 0x80
 8005bd2:	d119      	bne.n	8005c08 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005bd4:	78fb      	ldrb	r3, [r7, #3]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005be0:	461a      	mov	r2, r3
 8005be2:	2380      	movs	r3, #128	@ 0x80
 8005be4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005be6:	78fa      	ldrb	r2, [r7, #3]
 8005be8:	6879      	ldr	r1, [r7, #4]
 8005bea:	4613      	mov	r3, r2
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	1a9b      	subs	r3, r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	440b      	add	r3, r1
 8005bf4:	334d      	adds	r3, #77	@ 0x4d
 8005bf6:	2207      	movs	r2, #7
 8005bf8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	78fa      	ldrb	r2, [r7, #3]
 8005c00:	4611      	mov	r1, r2
 8005c02:	4618      	mov	r0, r3
 8005c04:	f005 fbd1 	bl	800b3aa <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	78fa      	ldrb	r2, [r7, #3]
 8005c0e:	4611      	mov	r1, r2
 8005c10:	4618      	mov	r0, r3
 8005c12:	f004 fe26 	bl	800a862 <USB_ReadChInterrupts>
 8005c16:	4603      	mov	r3, r0
 8005c18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c20:	d112      	bne.n	8005c48 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	78fa      	ldrb	r2, [r7, #3]
 8005c28:	4611      	mov	r1, r2
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f005 fbbd 	bl	800b3aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c42:	6093      	str	r3, [r2, #8]
 8005c44:	f000 bd75 	b.w	8006732 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	78fa      	ldrb	r2, [r7, #3]
 8005c4e:	4611      	mov	r1, r2
 8005c50:	4618      	mov	r0, r3
 8005c52:	f004 fe06 	bl	800a862 <USB_ReadChInterrupts>
 8005c56:	4603      	mov	r3, r0
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	f040 8128 	bne.w	8005eb2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005c62:	78fb      	ldrb	r3, [r7, #3]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c6e:	461a      	mov	r2, r3
 8005c70:	2320      	movs	r3, #32
 8005c72:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005c74:	78fa      	ldrb	r2, [r7, #3]
 8005c76:	6879      	ldr	r1, [r7, #4]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	1a9b      	subs	r3, r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	440b      	add	r3, r1
 8005c82:	331b      	adds	r3, #27
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d119      	bne.n	8005cbe <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005c8a:	78fa      	ldrb	r2, [r7, #3]
 8005c8c:	6879      	ldr	r1, [r7, #4]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	011b      	lsls	r3, r3, #4
 8005c92:	1a9b      	subs	r3, r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	440b      	add	r3, r1
 8005c98:	331b      	adds	r3, #27
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005c9e:	78fb      	ldrb	r3, [r7, #3]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	78fa      	ldrb	r2, [r7, #3]
 8005cae:	0151      	lsls	r1, r2, #5
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	440a      	add	r2, r1
 8005cb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cbc:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	799b      	ldrb	r3, [r3, #6]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d01b      	beq.n	8005cfe <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005cc6:	78fa      	ldrb	r2, [r7, #3]
 8005cc8:	6879      	ldr	r1, [r7, #4]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	1a9b      	subs	r3, r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	440b      	add	r3, r1
 8005cd4:	3330      	adds	r3, #48	@ 0x30
 8005cd6:	6819      	ldr	r1, [r3, #0]
 8005cd8:	78fb      	ldrb	r3, [r7, #3]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cea:	78fa      	ldrb	r2, [r7, #3]
 8005cec:	1ac9      	subs	r1, r1, r3
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	1a9b      	subs	r3, r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4403      	add	r3, r0
 8005cfa:	3338      	adds	r3, #56	@ 0x38
 8005cfc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8005cfe:	78fa      	ldrb	r2, [r7, #3]
 8005d00:	6879      	ldr	r1, [r7, #4]
 8005d02:	4613      	mov	r3, r2
 8005d04:	011b      	lsls	r3, r3, #4
 8005d06:	1a9b      	subs	r3, r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	440b      	add	r3, r1
 8005d0c:	334d      	adds	r3, #77	@ 0x4d
 8005d0e:	2201      	movs	r2, #1
 8005d10:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8005d12:	78fa      	ldrb	r2, [r7, #3]
 8005d14:	6879      	ldr	r1, [r7, #4]
 8005d16:	4613      	mov	r3, r2
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	1a9b      	subs	r3, r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	440b      	add	r3, r1
 8005d20:	3344      	adds	r3, #68	@ 0x44
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005d26:	78fb      	ldrb	r3, [r7, #3]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d32:	461a      	mov	r2, r3
 8005d34:	2301      	movs	r3, #1
 8005d36:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d38:	78fa      	ldrb	r2, [r7, #3]
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	1a9b      	subs	r3, r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	440b      	add	r3, r1
 8005d46:	3326      	adds	r3, #38	@ 0x26
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005d4e:	78fa      	ldrb	r2, [r7, #3]
 8005d50:	6879      	ldr	r1, [r7, #4]
 8005d52:	4613      	mov	r3, r2
 8005d54:	011b      	lsls	r3, r3, #4
 8005d56:	1a9b      	subs	r3, r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	440b      	add	r3, r1
 8005d5c:	3326      	adds	r3, #38	@ 0x26
 8005d5e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d110      	bne.n	8005d86 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	78fa      	ldrb	r2, [r7, #3]
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f005 fb1c 	bl	800b3aa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005d72:	78fb      	ldrb	r3, [r7, #3]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d7e:	461a      	mov	r2, r3
 8005d80:	2310      	movs	r3, #16
 8005d82:	6093      	str	r3, [r2, #8]
 8005d84:	e03d      	b.n	8005e02 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005d86:	78fa      	ldrb	r2, [r7, #3]
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	1a9b      	subs	r3, r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	440b      	add	r3, r1
 8005d94:	3326      	adds	r3, #38	@ 0x26
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b03      	cmp	r3, #3
 8005d9a:	d00a      	beq.n	8005db2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005d9c:	78fa      	ldrb	r2, [r7, #3]
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	4613      	mov	r3, r2
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	1a9b      	subs	r3, r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	440b      	add	r3, r1
 8005daa:	3326      	adds	r3, #38	@ 0x26
 8005dac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d127      	bne.n	8005e02 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005db2:	78fb      	ldrb	r3, [r7, #3]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	78fa      	ldrb	r2, [r7, #3]
 8005dc2:	0151      	lsls	r1, r2, #5
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	440a      	add	r2, r1
 8005dc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dcc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005dd0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005dd2:	78fa      	ldrb	r2, [r7, #3]
 8005dd4:	6879      	ldr	r1, [r7, #4]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	011b      	lsls	r3, r3, #4
 8005dda:	1a9b      	subs	r3, r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	440b      	add	r3, r1
 8005de0:	334c      	adds	r3, #76	@ 0x4c
 8005de2:	2201      	movs	r2, #1
 8005de4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005de6:	78fa      	ldrb	r2, [r7, #3]
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	4613      	mov	r3, r2
 8005dec:	011b      	lsls	r3, r3, #4
 8005dee:	1a9b      	subs	r3, r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	440b      	add	r3, r1
 8005df4:	334c      	adds	r3, #76	@ 0x4c
 8005df6:	781a      	ldrb	r2, [r3, #0]
 8005df8:	78fb      	ldrb	r3, [r7, #3]
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f008 fb93 	bl	800e528 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	799b      	ldrb	r3, [r3, #6]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d13b      	bne.n	8005e82 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8005e0a:	78fa      	ldrb	r2, [r7, #3]
 8005e0c:	6879      	ldr	r1, [r7, #4]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	011b      	lsls	r3, r3, #4
 8005e12:	1a9b      	subs	r3, r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	440b      	add	r3, r1
 8005e18:	3338      	adds	r3, #56	@ 0x38
 8005e1a:	6819      	ldr	r1, [r3, #0]
 8005e1c:	78fa      	ldrb	r2, [r7, #3]
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	4613      	mov	r3, r2
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	1a9b      	subs	r3, r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4403      	add	r3, r0
 8005e2a:	3328      	adds	r3, #40	@ 0x28
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	440b      	add	r3, r1
 8005e30:	1e59      	subs	r1, r3, #1
 8005e32:	78fa      	ldrb	r2, [r7, #3]
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	4613      	mov	r3, r2
 8005e38:	011b      	lsls	r3, r3, #4
 8005e3a:	1a9b      	subs	r3, r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4403      	add	r3, r0
 8005e40:	3328      	adds	r3, #40	@ 0x28
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 8470 	beq.w	8006732 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8005e52:	78fa      	ldrb	r2, [r7, #3]
 8005e54:	6879      	ldr	r1, [r7, #4]
 8005e56:	4613      	mov	r3, r2
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	1a9b      	subs	r3, r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	440b      	add	r3, r1
 8005e60:	333c      	adds	r3, #60	@ 0x3c
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	78fa      	ldrb	r2, [r7, #3]
 8005e66:	f083 0301 	eor.w	r3, r3, #1
 8005e6a:	b2d8      	uxtb	r0, r3
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	011b      	lsls	r3, r3, #4
 8005e72:	1a9b      	subs	r3, r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	440b      	add	r3, r1
 8005e78:	333c      	adds	r3, #60	@ 0x3c
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	701a      	strb	r2, [r3, #0]
 8005e7e:	f000 bc58 	b.w	8006732 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8005e82:	78fa      	ldrb	r2, [r7, #3]
 8005e84:	6879      	ldr	r1, [r7, #4]
 8005e86:	4613      	mov	r3, r2
 8005e88:	011b      	lsls	r3, r3, #4
 8005e8a:	1a9b      	subs	r3, r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	440b      	add	r3, r1
 8005e90:	333c      	adds	r3, #60	@ 0x3c
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	78fa      	ldrb	r2, [r7, #3]
 8005e96:	f083 0301 	eor.w	r3, r3, #1
 8005e9a:	b2d8      	uxtb	r0, r3
 8005e9c:	6879      	ldr	r1, [r7, #4]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	011b      	lsls	r3, r3, #4
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	333c      	adds	r3, #60	@ 0x3c
 8005eaa:	4602      	mov	r2, r0
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	f000 bc40 	b.w	8006732 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	78fa      	ldrb	r2, [r7, #3]
 8005eb8:	4611      	mov	r1, r2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f004 fcd1 	bl	800a862 <USB_ReadChInterrupts>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b20      	cmp	r3, #32
 8005ec8:	d131      	bne.n	8005f2e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005eca:	78fb      	ldrb	r3, [r7, #3]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	2320      	movs	r3, #32
 8005eda:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005edc:	78fa      	ldrb	r2, [r7, #3]
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	1a9b      	subs	r3, r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	440b      	add	r3, r1
 8005eea:	331a      	adds	r3, #26
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	f040 841f 	bne.w	8006732 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8005ef4:	78fa      	ldrb	r2, [r7, #3]
 8005ef6:	6879      	ldr	r1, [r7, #4]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	1a9b      	subs	r3, r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	440b      	add	r3, r1
 8005f02:	331b      	adds	r3, #27
 8005f04:	2201      	movs	r2, #1
 8005f06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005f08:	78fa      	ldrb	r2, [r7, #3]
 8005f0a:	6879      	ldr	r1, [r7, #4]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	011b      	lsls	r3, r3, #4
 8005f10:	1a9b      	subs	r3, r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	440b      	add	r3, r1
 8005f16:	334d      	adds	r3, #77	@ 0x4d
 8005f18:	2203      	movs	r2, #3
 8005f1a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	78fa      	ldrb	r2, [r7, #3]
 8005f22:	4611      	mov	r1, r2
 8005f24:	4618      	mov	r0, r3
 8005f26:	f005 fa40 	bl	800b3aa <USB_HC_Halt>
 8005f2a:	f000 bc02 	b.w	8006732 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	78fa      	ldrb	r2, [r7, #3]
 8005f34:	4611      	mov	r1, r2
 8005f36:	4618      	mov	r0, r3
 8005f38:	f004 fc93 	bl	800a862 <USB_ReadChInterrupts>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	f040 8305 	bne.w	8006552 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005f48:	78fb      	ldrb	r3, [r7, #3]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f54:	461a      	mov	r2, r3
 8005f56:	2302      	movs	r3, #2
 8005f58:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005f5a:	78fa      	ldrb	r2, [r7, #3]
 8005f5c:	6879      	ldr	r1, [r7, #4]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	011b      	lsls	r3, r3, #4
 8005f62:	1a9b      	subs	r3, r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	440b      	add	r3, r1
 8005f68:	334d      	adds	r3, #77	@ 0x4d
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d114      	bne.n	8005f9a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f70:	78fa      	ldrb	r2, [r7, #3]
 8005f72:	6879      	ldr	r1, [r7, #4]
 8005f74:	4613      	mov	r3, r2
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	1a9b      	subs	r3, r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	440b      	add	r3, r1
 8005f7e:	334d      	adds	r3, #77	@ 0x4d
 8005f80:	2202      	movs	r2, #2
 8005f82:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005f84:	78fa      	ldrb	r2, [r7, #3]
 8005f86:	6879      	ldr	r1, [r7, #4]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	011b      	lsls	r3, r3, #4
 8005f8c:	1a9b      	subs	r3, r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	440b      	add	r3, r1
 8005f92:	334c      	adds	r3, #76	@ 0x4c
 8005f94:	2201      	movs	r2, #1
 8005f96:	701a      	strb	r2, [r3, #0]
 8005f98:	e2cc      	b.n	8006534 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005f9a:	78fa      	ldrb	r2, [r7, #3]
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	1a9b      	subs	r3, r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	440b      	add	r3, r1
 8005fa8:	334d      	adds	r3, #77	@ 0x4d
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b06      	cmp	r3, #6
 8005fae:	d114      	bne.n	8005fda <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005fb0:	78fa      	ldrb	r2, [r7, #3]
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	011b      	lsls	r3, r3, #4
 8005fb8:	1a9b      	subs	r3, r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	440b      	add	r3, r1
 8005fbe:	334d      	adds	r3, #77	@ 0x4d
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8005fc4:	78fa      	ldrb	r2, [r7, #3]
 8005fc6:	6879      	ldr	r1, [r7, #4]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	1a9b      	subs	r3, r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	440b      	add	r3, r1
 8005fd2:	334c      	adds	r3, #76	@ 0x4c
 8005fd4:	2205      	movs	r2, #5
 8005fd6:	701a      	strb	r2, [r3, #0]
 8005fd8:	e2ac      	b.n	8006534 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005fda:	78fa      	ldrb	r2, [r7, #3]
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	011b      	lsls	r3, r3, #4
 8005fe2:	1a9b      	subs	r3, r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	440b      	add	r3, r1
 8005fe8:	334d      	adds	r3, #77	@ 0x4d
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b07      	cmp	r3, #7
 8005fee:	d00b      	beq.n	8006008 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005ff0:	78fa      	ldrb	r2, [r7, #3]
 8005ff2:	6879      	ldr	r1, [r7, #4]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	1a9b      	subs	r3, r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	440b      	add	r3, r1
 8005ffe:	334d      	adds	r3, #77	@ 0x4d
 8006000:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006002:	2b09      	cmp	r3, #9
 8006004:	f040 80a6 	bne.w	8006154 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006008:	78fa      	ldrb	r2, [r7, #3]
 800600a:	6879      	ldr	r1, [r7, #4]
 800600c:	4613      	mov	r3, r2
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	1a9b      	subs	r3, r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	440b      	add	r3, r1
 8006016:	334d      	adds	r3, #77	@ 0x4d
 8006018:	2202      	movs	r2, #2
 800601a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800601c:	78fa      	ldrb	r2, [r7, #3]
 800601e:	6879      	ldr	r1, [r7, #4]
 8006020:	4613      	mov	r3, r2
 8006022:	011b      	lsls	r3, r3, #4
 8006024:	1a9b      	subs	r3, r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	440b      	add	r3, r1
 800602a:	3344      	adds	r3, #68	@ 0x44
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	1c59      	adds	r1, r3, #1
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	4613      	mov	r3, r2
 8006034:	011b      	lsls	r3, r3, #4
 8006036:	1a9b      	subs	r3, r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4403      	add	r3, r0
 800603c:	3344      	adds	r3, #68	@ 0x44
 800603e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006040:	78fa      	ldrb	r2, [r7, #3]
 8006042:	6879      	ldr	r1, [r7, #4]
 8006044:	4613      	mov	r3, r2
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	1a9b      	subs	r3, r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	440b      	add	r3, r1
 800604e:	3344      	adds	r3, #68	@ 0x44
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b02      	cmp	r3, #2
 8006054:	d943      	bls.n	80060de <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006056:	78fa      	ldrb	r2, [r7, #3]
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	4613      	mov	r3, r2
 800605c:	011b      	lsls	r3, r3, #4
 800605e:	1a9b      	subs	r3, r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	440b      	add	r3, r1
 8006064:	3344      	adds	r3, #68	@ 0x44
 8006066:	2200      	movs	r2, #0
 8006068:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800606a:	78fa      	ldrb	r2, [r7, #3]
 800606c:	6879      	ldr	r1, [r7, #4]
 800606e:	4613      	mov	r3, r2
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	1a9b      	subs	r3, r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	440b      	add	r3, r1
 8006078:	331a      	adds	r3, #26
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d123      	bne.n	80060c8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8006080:	78fa      	ldrb	r2, [r7, #3]
 8006082:	6879      	ldr	r1, [r7, #4]
 8006084:	4613      	mov	r3, r2
 8006086:	011b      	lsls	r3, r3, #4
 8006088:	1a9b      	subs	r3, r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	440b      	add	r3, r1
 800608e:	331b      	adds	r3, #27
 8006090:	2200      	movs	r2, #0
 8006092:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8006094:	78fa      	ldrb	r2, [r7, #3]
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	4613      	mov	r3, r2
 800609a:	011b      	lsls	r3, r3, #4
 800609c:	1a9b      	subs	r3, r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	440b      	add	r3, r1
 80060a2:	331c      	adds	r3, #28
 80060a4:	2200      	movs	r2, #0
 80060a6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80060a8:	78fb      	ldrb	r3, [r7, #3]
 80060aa:	015a      	lsls	r2, r3, #5
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	78fa      	ldrb	r2, [r7, #3]
 80060b8:	0151      	lsls	r1, r2, #5
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	440a      	add	r2, r1
 80060be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060c6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80060c8:	78fa      	ldrb	r2, [r7, #3]
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	4613      	mov	r3, r2
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	1a9b      	subs	r3, r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	440b      	add	r3, r1
 80060d6:	334c      	adds	r3, #76	@ 0x4c
 80060d8:	2204      	movs	r2, #4
 80060da:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80060dc:	e229      	b.n	8006532 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80060de:	78fa      	ldrb	r2, [r7, #3]
 80060e0:	6879      	ldr	r1, [r7, #4]
 80060e2:	4613      	mov	r3, r2
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	1a9b      	subs	r3, r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	440b      	add	r3, r1
 80060ec:	334c      	adds	r3, #76	@ 0x4c
 80060ee:	2202      	movs	r2, #2
 80060f0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80060f2:	78fa      	ldrb	r2, [r7, #3]
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	4613      	mov	r3, r2
 80060f8:	011b      	lsls	r3, r3, #4
 80060fa:	1a9b      	subs	r3, r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	440b      	add	r3, r1
 8006100:	3326      	adds	r3, #38	@ 0x26
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00b      	beq.n	8006120 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006108:	78fa      	ldrb	r2, [r7, #3]
 800610a:	6879      	ldr	r1, [r7, #4]
 800610c:	4613      	mov	r3, r2
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	1a9b      	subs	r3, r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	440b      	add	r3, r1
 8006116:	3326      	adds	r3, #38	@ 0x26
 8006118:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800611a:	2b02      	cmp	r3, #2
 800611c:	f040 8209 	bne.w	8006532 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006120:	78fb      	ldrb	r3, [r7, #3]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	4413      	add	r3, r2
 8006128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006136:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800613e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	4413      	add	r3, r2
 8006148:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800614c:	461a      	mov	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006152:	e1ee      	b.n	8006532 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006154:	78fa      	ldrb	r2, [r7, #3]
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	4613      	mov	r3, r2
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	1a9b      	subs	r3, r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	334d      	adds	r3, #77	@ 0x4d
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b05      	cmp	r3, #5
 8006168:	f040 80c8 	bne.w	80062fc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800616c:	78fa      	ldrb	r2, [r7, #3]
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	4613      	mov	r3, r2
 8006172:	011b      	lsls	r3, r3, #4
 8006174:	1a9b      	subs	r3, r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	440b      	add	r3, r1
 800617a:	334d      	adds	r3, #77	@ 0x4d
 800617c:	2202      	movs	r2, #2
 800617e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006180:	78fa      	ldrb	r2, [r7, #3]
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	4613      	mov	r3, r2
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	1a9b      	subs	r3, r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	440b      	add	r3, r1
 800618e:	331b      	adds	r3, #27
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	2b01      	cmp	r3, #1
 8006194:	f040 81ce 	bne.w	8006534 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006198:	78fa      	ldrb	r2, [r7, #3]
 800619a:	6879      	ldr	r1, [r7, #4]
 800619c:	4613      	mov	r3, r2
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	1a9b      	subs	r3, r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	3326      	adds	r3, #38	@ 0x26
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d16b      	bne.n	8006286 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80061ae:	78fa      	ldrb	r2, [r7, #3]
 80061b0:	6879      	ldr	r1, [r7, #4]
 80061b2:	4613      	mov	r3, r2
 80061b4:	011b      	lsls	r3, r3, #4
 80061b6:	1a9b      	subs	r3, r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	440b      	add	r3, r1
 80061bc:	3348      	adds	r3, #72	@ 0x48
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	1c59      	adds	r1, r3, #1
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	4613      	mov	r3, r2
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	1a9b      	subs	r3, r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4403      	add	r3, r0
 80061ce:	3348      	adds	r3, #72	@ 0x48
 80061d0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80061d2:	78fa      	ldrb	r2, [r7, #3]
 80061d4:	6879      	ldr	r1, [r7, #4]
 80061d6:	4613      	mov	r3, r2
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	1a9b      	subs	r3, r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	440b      	add	r3, r1
 80061e0:	3348      	adds	r3, #72	@ 0x48
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d943      	bls.n	8006270 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80061e8:	78fa      	ldrb	r2, [r7, #3]
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	4613      	mov	r3, r2
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	1a9b      	subs	r3, r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	440b      	add	r3, r1
 80061f6:	3348      	adds	r3, #72	@ 0x48
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80061fc:	78fa      	ldrb	r2, [r7, #3]
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	4613      	mov	r3, r2
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	1a9b      	subs	r3, r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	440b      	add	r3, r1
 800620a:	331b      	adds	r3, #27
 800620c:	2200      	movs	r2, #0
 800620e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8006210:	78fa      	ldrb	r2, [r7, #3]
 8006212:	6879      	ldr	r1, [r7, #4]
 8006214:	4613      	mov	r3, r2
 8006216:	011b      	lsls	r3, r3, #4
 8006218:	1a9b      	subs	r3, r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	440b      	add	r3, r1
 800621e:	3344      	adds	r3, #68	@ 0x44
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b02      	cmp	r3, #2
 8006224:	d809      	bhi.n	800623a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8006226:	78fa      	ldrb	r2, [r7, #3]
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	4613      	mov	r3, r2
 800622c:	011b      	lsls	r3, r3, #4
 800622e:	1a9b      	subs	r3, r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	440b      	add	r3, r1
 8006234:	331c      	adds	r3, #28
 8006236:	2201      	movs	r2, #1
 8006238:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800623a:	78fb      	ldrb	r3, [r7, #3]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	4413      	add	r3, r2
 8006242:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	78fa      	ldrb	r2, [r7, #3]
 800624a:	0151      	lsls	r1, r2, #5
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	440a      	add	r2, r1
 8006250:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006254:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006258:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800625a:	78fa      	ldrb	r2, [r7, #3]
 800625c:	6879      	ldr	r1, [r7, #4]
 800625e:	4613      	mov	r3, r2
 8006260:	011b      	lsls	r3, r3, #4
 8006262:	1a9b      	subs	r3, r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	440b      	add	r3, r1
 8006268:	334c      	adds	r3, #76	@ 0x4c
 800626a:	2204      	movs	r2, #4
 800626c:	701a      	strb	r2, [r3, #0]
 800626e:	e014      	b.n	800629a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006270:	78fa      	ldrb	r2, [r7, #3]
 8006272:	6879      	ldr	r1, [r7, #4]
 8006274:	4613      	mov	r3, r2
 8006276:	011b      	lsls	r3, r3, #4
 8006278:	1a9b      	subs	r3, r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	440b      	add	r3, r1
 800627e:	334c      	adds	r3, #76	@ 0x4c
 8006280:	2202      	movs	r2, #2
 8006282:	701a      	strb	r2, [r3, #0]
 8006284:	e009      	b.n	800629a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006286:	78fa      	ldrb	r2, [r7, #3]
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	4613      	mov	r3, r2
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	1a9b      	subs	r3, r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	440b      	add	r3, r1
 8006294:	334c      	adds	r3, #76	@ 0x4c
 8006296:	2202      	movs	r2, #2
 8006298:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800629a:	78fa      	ldrb	r2, [r7, #3]
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	4613      	mov	r3, r2
 80062a0:	011b      	lsls	r3, r3, #4
 80062a2:	1a9b      	subs	r3, r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	440b      	add	r3, r1
 80062a8:	3326      	adds	r3, #38	@ 0x26
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00b      	beq.n	80062c8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80062b0:	78fa      	ldrb	r2, [r7, #3]
 80062b2:	6879      	ldr	r1, [r7, #4]
 80062b4:	4613      	mov	r3, r2
 80062b6:	011b      	lsls	r3, r3, #4
 80062b8:	1a9b      	subs	r3, r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	440b      	add	r3, r1
 80062be:	3326      	adds	r3, #38	@ 0x26
 80062c0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	f040 8136 	bne.w	8006534 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80062c8:	78fb      	ldrb	r3, [r7, #3]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80062de:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80062e6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80062e8:	78fb      	ldrb	r3, [r7, #3]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062f4:	461a      	mov	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6013      	str	r3, [r2, #0]
 80062fa:	e11b      	b.n	8006534 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80062fc:	78fa      	ldrb	r2, [r7, #3]
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	4613      	mov	r3, r2
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	1a9b      	subs	r3, r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	440b      	add	r3, r1
 800630a:	334d      	adds	r3, #77	@ 0x4d
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	2b03      	cmp	r3, #3
 8006310:	f040 8081 	bne.w	8006416 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006314:	78fa      	ldrb	r2, [r7, #3]
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	4613      	mov	r3, r2
 800631a:	011b      	lsls	r3, r3, #4
 800631c:	1a9b      	subs	r3, r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	440b      	add	r3, r1
 8006322:	334d      	adds	r3, #77	@ 0x4d
 8006324:	2202      	movs	r2, #2
 8006326:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006328:	78fa      	ldrb	r2, [r7, #3]
 800632a:	6879      	ldr	r1, [r7, #4]
 800632c:	4613      	mov	r3, r2
 800632e:	011b      	lsls	r3, r3, #4
 8006330:	1a9b      	subs	r3, r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	440b      	add	r3, r1
 8006336:	331b      	adds	r3, #27
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	2b01      	cmp	r3, #1
 800633c:	f040 80fa 	bne.w	8006534 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006340:	78fa      	ldrb	r2, [r7, #3]
 8006342:	6879      	ldr	r1, [r7, #4]
 8006344:	4613      	mov	r3, r2
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	1a9b      	subs	r3, r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	440b      	add	r3, r1
 800634e:	334c      	adds	r3, #76	@ 0x4c
 8006350:	2202      	movs	r2, #2
 8006352:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006354:	78fb      	ldrb	r3, [r7, #3]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	4413      	add	r3, r2
 800635c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	78fa      	ldrb	r2, [r7, #3]
 8006364:	0151      	lsls	r1, r2, #5
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	440a      	add	r2, r1
 800636a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800636e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006372:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006374:	78fb      	ldrb	r3, [r7, #3]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	4413      	add	r3, r2
 800637c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	78fa      	ldrb	r2, [r7, #3]
 8006384:	0151      	lsls	r1, r2, #5
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	440a      	add	r2, r1
 800638a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800638e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006392:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8006394:	78fb      	ldrb	r3, [r7, #3]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	4413      	add	r3, r2
 800639c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	78fa      	ldrb	r2, [r7, #3]
 80063a4:	0151      	lsls	r1, r2, #5
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	440a      	add	r2, r1
 80063aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063ae:	f023 0320 	bic.w	r3, r3, #32
 80063b2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80063b4:	78fa      	ldrb	r2, [r7, #3]
 80063b6:	6879      	ldr	r1, [r7, #4]
 80063b8:	4613      	mov	r3, r2
 80063ba:	011b      	lsls	r3, r3, #4
 80063bc:	1a9b      	subs	r3, r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	440b      	add	r3, r1
 80063c2:	3326      	adds	r3, #38	@ 0x26
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00b      	beq.n	80063e2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80063ca:	78fa      	ldrb	r2, [r7, #3]
 80063cc:	6879      	ldr	r1, [r7, #4]
 80063ce:	4613      	mov	r3, r2
 80063d0:	011b      	lsls	r3, r3, #4
 80063d2:	1a9b      	subs	r3, r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	440b      	add	r3, r1
 80063d8:	3326      	adds	r3, #38	@ 0x26
 80063da:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80063dc:	2b02      	cmp	r3, #2
 80063de:	f040 80a9 	bne.w	8006534 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80063e2:	78fb      	ldrb	r3, [r7, #3]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80063f8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006400:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006402:	78fb      	ldrb	r3, [r7, #3]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	4413      	add	r3, r2
 800640a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800640e:	461a      	mov	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6013      	str	r3, [r2, #0]
 8006414:	e08e      	b.n	8006534 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006416:	78fa      	ldrb	r2, [r7, #3]
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	4613      	mov	r3, r2
 800641c:	011b      	lsls	r3, r3, #4
 800641e:	1a9b      	subs	r3, r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	440b      	add	r3, r1
 8006424:	334d      	adds	r3, #77	@ 0x4d
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	2b04      	cmp	r3, #4
 800642a:	d143      	bne.n	80064b4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800642c:	78fa      	ldrb	r2, [r7, #3]
 800642e:	6879      	ldr	r1, [r7, #4]
 8006430:	4613      	mov	r3, r2
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	1a9b      	subs	r3, r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	440b      	add	r3, r1
 800643a:	334d      	adds	r3, #77	@ 0x4d
 800643c:	2202      	movs	r2, #2
 800643e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006440:	78fa      	ldrb	r2, [r7, #3]
 8006442:	6879      	ldr	r1, [r7, #4]
 8006444:	4613      	mov	r3, r2
 8006446:	011b      	lsls	r3, r3, #4
 8006448:	1a9b      	subs	r3, r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	440b      	add	r3, r1
 800644e:	334c      	adds	r3, #76	@ 0x4c
 8006450:	2202      	movs	r2, #2
 8006452:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006454:	78fa      	ldrb	r2, [r7, #3]
 8006456:	6879      	ldr	r1, [r7, #4]
 8006458:	4613      	mov	r3, r2
 800645a:	011b      	lsls	r3, r3, #4
 800645c:	1a9b      	subs	r3, r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	440b      	add	r3, r1
 8006462:	3326      	adds	r3, #38	@ 0x26
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00a      	beq.n	8006480 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800646a:	78fa      	ldrb	r2, [r7, #3]
 800646c:	6879      	ldr	r1, [r7, #4]
 800646e:	4613      	mov	r3, r2
 8006470:	011b      	lsls	r3, r3, #4
 8006472:	1a9b      	subs	r3, r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	440b      	add	r3, r1
 8006478:	3326      	adds	r3, #38	@ 0x26
 800647a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800647c:	2b02      	cmp	r3, #2
 800647e:	d159      	bne.n	8006534 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006480:	78fb      	ldrb	r3, [r7, #3]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	4413      	add	r3, r2
 8006488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006496:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800649e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064ac:	461a      	mov	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	e03f      	b.n	8006534 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80064b4:	78fa      	ldrb	r2, [r7, #3]
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	4613      	mov	r3, r2
 80064ba:	011b      	lsls	r3, r3, #4
 80064bc:	1a9b      	subs	r3, r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	440b      	add	r3, r1
 80064c2:	334d      	adds	r3, #77	@ 0x4d
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	d126      	bne.n	8006518 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80064ca:	78fa      	ldrb	r2, [r7, #3]
 80064cc:	6879      	ldr	r1, [r7, #4]
 80064ce:	4613      	mov	r3, r2
 80064d0:	011b      	lsls	r3, r3, #4
 80064d2:	1a9b      	subs	r3, r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	440b      	add	r3, r1
 80064d8:	334d      	adds	r3, #77	@ 0x4d
 80064da:	2202      	movs	r2, #2
 80064dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80064de:	78fa      	ldrb	r2, [r7, #3]
 80064e0:	6879      	ldr	r1, [r7, #4]
 80064e2:	4613      	mov	r3, r2
 80064e4:	011b      	lsls	r3, r3, #4
 80064e6:	1a9b      	subs	r3, r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	440b      	add	r3, r1
 80064ec:	3344      	adds	r3, #68	@ 0x44
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	1c59      	adds	r1, r3, #1
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	4613      	mov	r3, r2
 80064f6:	011b      	lsls	r3, r3, #4
 80064f8:	1a9b      	subs	r3, r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4403      	add	r3, r0
 80064fe:	3344      	adds	r3, #68	@ 0x44
 8006500:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8006502:	78fa      	ldrb	r2, [r7, #3]
 8006504:	6879      	ldr	r1, [r7, #4]
 8006506:	4613      	mov	r3, r2
 8006508:	011b      	lsls	r3, r3, #4
 800650a:	1a9b      	subs	r3, r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	440b      	add	r3, r1
 8006510:	334c      	adds	r3, #76	@ 0x4c
 8006512:	2204      	movs	r2, #4
 8006514:	701a      	strb	r2, [r3, #0]
 8006516:	e00d      	b.n	8006534 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8006518:	78fa      	ldrb	r2, [r7, #3]
 800651a:	6879      	ldr	r1, [r7, #4]
 800651c:	4613      	mov	r3, r2
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	1a9b      	subs	r3, r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	440b      	add	r3, r1
 8006526:	334d      	adds	r3, #77	@ 0x4d
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	2b02      	cmp	r3, #2
 800652c:	f000 8100 	beq.w	8006730 <HCD_HC_IN_IRQHandler+0xcca>
 8006530:	e000      	b.n	8006534 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006532:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006534:	78fa      	ldrb	r2, [r7, #3]
 8006536:	6879      	ldr	r1, [r7, #4]
 8006538:	4613      	mov	r3, r2
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	1a9b      	subs	r3, r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	440b      	add	r3, r1
 8006542:	334c      	adds	r3, #76	@ 0x4c
 8006544:	781a      	ldrb	r2, [r3, #0]
 8006546:	78fb      	ldrb	r3, [r7, #3]
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f007 ffec 	bl	800e528 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006550:	e0ef      	b.n	8006732 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	78fa      	ldrb	r2, [r7, #3]
 8006558:	4611      	mov	r1, r2
 800655a:	4618      	mov	r0, r3
 800655c:	f004 f981 	bl	800a862 <USB_ReadChInterrupts>
 8006560:	4603      	mov	r3, r0
 8006562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006566:	2b40      	cmp	r3, #64	@ 0x40
 8006568:	d12f      	bne.n	80065ca <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800656a:	78fb      	ldrb	r3, [r7, #3]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	4413      	add	r3, r2
 8006572:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006576:	461a      	mov	r2, r3
 8006578:	2340      	movs	r3, #64	@ 0x40
 800657a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800657c:	78fa      	ldrb	r2, [r7, #3]
 800657e:	6879      	ldr	r1, [r7, #4]
 8006580:	4613      	mov	r3, r2
 8006582:	011b      	lsls	r3, r3, #4
 8006584:	1a9b      	subs	r3, r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	440b      	add	r3, r1
 800658a:	334d      	adds	r3, #77	@ 0x4d
 800658c:	2205      	movs	r2, #5
 800658e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8006590:	78fa      	ldrb	r2, [r7, #3]
 8006592:	6879      	ldr	r1, [r7, #4]
 8006594:	4613      	mov	r3, r2
 8006596:	011b      	lsls	r3, r3, #4
 8006598:	1a9b      	subs	r3, r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	440b      	add	r3, r1
 800659e:	331a      	adds	r3, #26
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d109      	bne.n	80065ba <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80065a6:	78fa      	ldrb	r2, [r7, #3]
 80065a8:	6879      	ldr	r1, [r7, #4]
 80065aa:	4613      	mov	r3, r2
 80065ac:	011b      	lsls	r3, r3, #4
 80065ae:	1a9b      	subs	r3, r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	440b      	add	r3, r1
 80065b4:	3344      	adds	r3, #68	@ 0x44
 80065b6:	2200      	movs	r2, #0
 80065b8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	78fa      	ldrb	r2, [r7, #3]
 80065c0:	4611      	mov	r1, r2
 80065c2:	4618      	mov	r0, r3
 80065c4:	f004 fef1 	bl	800b3aa <USB_HC_Halt>
 80065c8:	e0b3      	b.n	8006732 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	78fa      	ldrb	r2, [r7, #3]
 80065d0:	4611      	mov	r1, r2
 80065d2:	4618      	mov	r0, r3
 80065d4:	f004 f945 	bl	800a862 <USB_ReadChInterrupts>
 80065d8:	4603      	mov	r3, r0
 80065da:	f003 0310 	and.w	r3, r3, #16
 80065de:	2b10      	cmp	r3, #16
 80065e0:	f040 80a7 	bne.w	8006732 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80065e4:	78fa      	ldrb	r2, [r7, #3]
 80065e6:	6879      	ldr	r1, [r7, #4]
 80065e8:	4613      	mov	r3, r2
 80065ea:	011b      	lsls	r3, r3, #4
 80065ec:	1a9b      	subs	r3, r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	440b      	add	r3, r1
 80065f2:	3326      	adds	r3, #38	@ 0x26
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	d11b      	bne.n	8006632 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80065fa:	78fa      	ldrb	r2, [r7, #3]
 80065fc:	6879      	ldr	r1, [r7, #4]
 80065fe:	4613      	mov	r3, r2
 8006600:	011b      	lsls	r3, r3, #4
 8006602:	1a9b      	subs	r3, r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	440b      	add	r3, r1
 8006608:	3344      	adds	r3, #68	@ 0x44
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800660e:	78fa      	ldrb	r2, [r7, #3]
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	4613      	mov	r3, r2
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	1a9b      	subs	r3, r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	440b      	add	r3, r1
 800661c:	334d      	adds	r3, #77	@ 0x4d
 800661e:	2204      	movs	r2, #4
 8006620:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	78fa      	ldrb	r2, [r7, #3]
 8006628:	4611      	mov	r1, r2
 800662a:	4618      	mov	r0, r3
 800662c:	f004 febd 	bl	800b3aa <USB_HC_Halt>
 8006630:	e03f      	b.n	80066b2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006632:	78fa      	ldrb	r2, [r7, #3]
 8006634:	6879      	ldr	r1, [r7, #4]
 8006636:	4613      	mov	r3, r2
 8006638:	011b      	lsls	r3, r3, #4
 800663a:	1a9b      	subs	r3, r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	440b      	add	r3, r1
 8006640:	3326      	adds	r3, #38	@ 0x26
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00a      	beq.n	800665e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006648:	78fa      	ldrb	r2, [r7, #3]
 800664a:	6879      	ldr	r1, [r7, #4]
 800664c:	4613      	mov	r3, r2
 800664e:	011b      	lsls	r3, r3, #4
 8006650:	1a9b      	subs	r3, r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	440b      	add	r3, r1
 8006656:	3326      	adds	r3, #38	@ 0x26
 8006658:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800665a:	2b02      	cmp	r3, #2
 800665c:	d129      	bne.n	80066b2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800665e:	78fa      	ldrb	r2, [r7, #3]
 8006660:	6879      	ldr	r1, [r7, #4]
 8006662:	4613      	mov	r3, r2
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	1a9b      	subs	r3, r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	440b      	add	r3, r1
 800666c:	3344      	adds	r3, #68	@ 0x44
 800666e:	2200      	movs	r2, #0
 8006670:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	799b      	ldrb	r3, [r3, #6]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <HCD_HC_IN_IRQHandler+0xc2a>
 800667a:	78fa      	ldrb	r2, [r7, #3]
 800667c:	6879      	ldr	r1, [r7, #4]
 800667e:	4613      	mov	r3, r2
 8006680:	011b      	lsls	r3, r3, #4
 8006682:	1a9b      	subs	r3, r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	440b      	add	r3, r1
 8006688:	331b      	adds	r3, #27
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d110      	bne.n	80066b2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8006690:	78fa      	ldrb	r2, [r7, #3]
 8006692:	6879      	ldr	r1, [r7, #4]
 8006694:	4613      	mov	r3, r2
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	1a9b      	subs	r3, r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	440b      	add	r3, r1
 800669e:	334d      	adds	r3, #77	@ 0x4d
 80066a0:	2204      	movs	r2, #4
 80066a2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	78fa      	ldrb	r2, [r7, #3]
 80066aa:	4611      	mov	r1, r2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f004 fe7c 	bl	800b3aa <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80066b2:	78fa      	ldrb	r2, [r7, #3]
 80066b4:	6879      	ldr	r1, [r7, #4]
 80066b6:	4613      	mov	r3, r2
 80066b8:	011b      	lsls	r3, r3, #4
 80066ba:	1a9b      	subs	r3, r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	440b      	add	r3, r1
 80066c0:	331b      	adds	r3, #27
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d129      	bne.n	800671c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80066c8:	78fa      	ldrb	r2, [r7, #3]
 80066ca:	6879      	ldr	r1, [r7, #4]
 80066cc:	4613      	mov	r3, r2
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	1a9b      	subs	r3, r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	440b      	add	r3, r1
 80066d6:	331b      	adds	r3, #27
 80066d8:	2200      	movs	r2, #0
 80066da:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80066dc:	78fb      	ldrb	r3, [r7, #3]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	78fa      	ldrb	r2, [r7, #3]
 80066ec:	0151      	lsls	r1, r2, #5
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	440a      	add	r2, r1
 80066f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066fa:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80066fc:	78fb      	ldrb	r3, [r7, #3]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	4413      	add	r3, r2
 8006704:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	78fa      	ldrb	r2, [r7, #3]
 800670c:	0151      	lsls	r1, r2, #5
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	440a      	add	r2, r1
 8006712:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006716:	f043 0320 	orr.w	r3, r3, #32
 800671a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800671c:	78fb      	ldrb	r3, [r7, #3]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	4413      	add	r3, r2
 8006724:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006728:	461a      	mov	r2, r3
 800672a:	2310      	movs	r3, #16
 800672c:	6093      	str	r3, [r2, #8]
 800672e:	e000      	b.n	8006732 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8006730:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	460b      	mov	r3, r1
 8006742:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	78fa      	ldrb	r2, [r7, #3]
 8006754:	4611      	mov	r1, r2
 8006756:	4618      	mov	r0, r3
 8006758:	f004 f883 	bl	800a862 <USB_ReadChInterrupts>
 800675c:	4603      	mov	r3, r0
 800675e:	f003 0304 	and.w	r3, r3, #4
 8006762:	2b04      	cmp	r3, #4
 8006764:	d11b      	bne.n	800679e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006766:	78fb      	ldrb	r3, [r7, #3]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	4413      	add	r3, r2
 800676e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006772:	461a      	mov	r2, r3
 8006774:	2304      	movs	r3, #4
 8006776:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006778:	78fa      	ldrb	r2, [r7, #3]
 800677a:	6879      	ldr	r1, [r7, #4]
 800677c:	4613      	mov	r3, r2
 800677e:	011b      	lsls	r3, r3, #4
 8006780:	1a9b      	subs	r3, r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	440b      	add	r3, r1
 8006786:	334d      	adds	r3, #77	@ 0x4d
 8006788:	2207      	movs	r2, #7
 800678a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	78fa      	ldrb	r2, [r7, #3]
 8006792:	4611      	mov	r1, r2
 8006794:	4618      	mov	r0, r3
 8006796:	f004 fe08 	bl	800b3aa <USB_HC_Halt>
 800679a:	f000 bc89 	b.w	80070b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	78fa      	ldrb	r2, [r7, #3]
 80067a4:	4611      	mov	r1, r2
 80067a6:	4618      	mov	r0, r3
 80067a8:	f004 f85b 	bl	800a862 <USB_ReadChInterrupts>
 80067ac:	4603      	mov	r3, r0
 80067ae:	f003 0320 	and.w	r3, r3, #32
 80067b2:	2b20      	cmp	r3, #32
 80067b4:	f040 8082 	bne.w	80068bc <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80067b8:	78fb      	ldrb	r3, [r7, #3]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067c4:	461a      	mov	r2, r3
 80067c6:	2320      	movs	r3, #32
 80067c8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80067ca:	78fa      	ldrb	r2, [r7, #3]
 80067cc:	6879      	ldr	r1, [r7, #4]
 80067ce:	4613      	mov	r3, r2
 80067d0:	011b      	lsls	r3, r3, #4
 80067d2:	1a9b      	subs	r3, r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	440b      	add	r3, r1
 80067d8:	3319      	adds	r3, #25
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d124      	bne.n	800682a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80067e0:	78fa      	ldrb	r2, [r7, #3]
 80067e2:	6879      	ldr	r1, [r7, #4]
 80067e4:	4613      	mov	r3, r2
 80067e6:	011b      	lsls	r3, r3, #4
 80067e8:	1a9b      	subs	r3, r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	440b      	add	r3, r1
 80067ee:	3319      	adds	r3, #25
 80067f0:	2200      	movs	r2, #0
 80067f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80067f4:	78fa      	ldrb	r2, [r7, #3]
 80067f6:	6879      	ldr	r1, [r7, #4]
 80067f8:	4613      	mov	r3, r2
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	1a9b      	subs	r3, r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	440b      	add	r3, r1
 8006802:	334c      	adds	r3, #76	@ 0x4c
 8006804:	2202      	movs	r2, #2
 8006806:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8006808:	78fa      	ldrb	r2, [r7, #3]
 800680a:	6879      	ldr	r1, [r7, #4]
 800680c:	4613      	mov	r3, r2
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	1a9b      	subs	r3, r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	440b      	add	r3, r1
 8006816:	334d      	adds	r3, #77	@ 0x4d
 8006818:	2203      	movs	r2, #3
 800681a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	78fa      	ldrb	r2, [r7, #3]
 8006822:	4611      	mov	r1, r2
 8006824:	4618      	mov	r0, r3
 8006826:	f004 fdc0 	bl	800b3aa <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800682a:	78fa      	ldrb	r2, [r7, #3]
 800682c:	6879      	ldr	r1, [r7, #4]
 800682e:	4613      	mov	r3, r2
 8006830:	011b      	lsls	r3, r3, #4
 8006832:	1a9b      	subs	r3, r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	440b      	add	r3, r1
 8006838:	331a      	adds	r3, #26
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2b01      	cmp	r3, #1
 800683e:	f040 8437 	bne.w	80070b0 <HCD_HC_OUT_IRQHandler+0x978>
 8006842:	78fa      	ldrb	r2, [r7, #3]
 8006844:	6879      	ldr	r1, [r7, #4]
 8006846:	4613      	mov	r3, r2
 8006848:	011b      	lsls	r3, r3, #4
 800684a:	1a9b      	subs	r3, r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	440b      	add	r3, r1
 8006850:	331b      	adds	r3, #27
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	f040 842b 	bne.w	80070b0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800685a:	78fa      	ldrb	r2, [r7, #3]
 800685c:	6879      	ldr	r1, [r7, #4]
 800685e:	4613      	mov	r3, r2
 8006860:	011b      	lsls	r3, r3, #4
 8006862:	1a9b      	subs	r3, r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	440b      	add	r3, r1
 8006868:	3326      	adds	r3, #38	@ 0x26
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d009      	beq.n	8006884 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8006870:	78fa      	ldrb	r2, [r7, #3]
 8006872:	6879      	ldr	r1, [r7, #4]
 8006874:	4613      	mov	r3, r2
 8006876:	011b      	lsls	r3, r3, #4
 8006878:	1a9b      	subs	r3, r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	440b      	add	r3, r1
 800687e:	331b      	adds	r3, #27
 8006880:	2201      	movs	r2, #1
 8006882:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8006884:	78fa      	ldrb	r2, [r7, #3]
 8006886:	6879      	ldr	r1, [r7, #4]
 8006888:	4613      	mov	r3, r2
 800688a:	011b      	lsls	r3, r3, #4
 800688c:	1a9b      	subs	r3, r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	440b      	add	r3, r1
 8006892:	334d      	adds	r3, #77	@ 0x4d
 8006894:	2203      	movs	r2, #3
 8006896:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	78fa      	ldrb	r2, [r7, #3]
 800689e:	4611      	mov	r1, r2
 80068a0:	4618      	mov	r0, r3
 80068a2:	f004 fd82 	bl	800b3aa <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80068a6:	78fa      	ldrb	r2, [r7, #3]
 80068a8:	6879      	ldr	r1, [r7, #4]
 80068aa:	4613      	mov	r3, r2
 80068ac:	011b      	lsls	r3, r3, #4
 80068ae:	1a9b      	subs	r3, r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	440b      	add	r3, r1
 80068b4:	3344      	adds	r3, #68	@ 0x44
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	e3f9      	b.n	80070b0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	78fa      	ldrb	r2, [r7, #3]
 80068c2:	4611      	mov	r1, r2
 80068c4:	4618      	mov	r0, r3
 80068c6:	f003 ffcc 	bl	800a862 <USB_ReadChInterrupts>
 80068ca:	4603      	mov	r3, r0
 80068cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068d4:	d111      	bne.n	80068fa <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80068d6:	78fb      	ldrb	r3, [r7, #3]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e2:	461a      	mov	r2, r3
 80068e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068e8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	78fa      	ldrb	r2, [r7, #3]
 80068f0:	4611      	mov	r1, r2
 80068f2:	4618      	mov	r0, r3
 80068f4:	f004 fd59 	bl	800b3aa <USB_HC_Halt>
 80068f8:	e3da      	b.n	80070b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	78fa      	ldrb	r2, [r7, #3]
 8006900:	4611      	mov	r1, r2
 8006902:	4618      	mov	r0, r3
 8006904:	f003 ffad 	bl	800a862 <USB_ReadChInterrupts>
 8006908:	4603      	mov	r3, r0
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b01      	cmp	r3, #1
 8006910:	d168      	bne.n	80069e4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006912:	78fa      	ldrb	r2, [r7, #3]
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	4613      	mov	r3, r2
 8006918:	011b      	lsls	r3, r3, #4
 800691a:	1a9b      	subs	r3, r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	440b      	add	r3, r1
 8006920:	3344      	adds	r3, #68	@ 0x44
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	78fa      	ldrb	r2, [r7, #3]
 800692c:	4611      	mov	r1, r2
 800692e:	4618      	mov	r0, r3
 8006930:	f003 ff97 	bl	800a862 <USB_ReadChInterrupts>
 8006934:	4603      	mov	r3, r0
 8006936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800693a:	2b40      	cmp	r3, #64	@ 0x40
 800693c:	d112      	bne.n	8006964 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800693e:	78fa      	ldrb	r2, [r7, #3]
 8006940:	6879      	ldr	r1, [r7, #4]
 8006942:	4613      	mov	r3, r2
 8006944:	011b      	lsls	r3, r3, #4
 8006946:	1a9b      	subs	r3, r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	440b      	add	r3, r1
 800694c:	3319      	adds	r3, #25
 800694e:	2201      	movs	r2, #1
 8006950:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006952:	78fb      	ldrb	r3, [r7, #3]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	4413      	add	r3, r2
 800695a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800695e:	461a      	mov	r2, r3
 8006960:	2340      	movs	r3, #64	@ 0x40
 8006962:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8006964:	78fa      	ldrb	r2, [r7, #3]
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	4613      	mov	r3, r2
 800696a:	011b      	lsls	r3, r3, #4
 800696c:	1a9b      	subs	r3, r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	440b      	add	r3, r1
 8006972:	331b      	adds	r3, #27
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d019      	beq.n	80069ae <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800697a:	78fa      	ldrb	r2, [r7, #3]
 800697c:	6879      	ldr	r1, [r7, #4]
 800697e:	4613      	mov	r3, r2
 8006980:	011b      	lsls	r3, r3, #4
 8006982:	1a9b      	subs	r3, r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	440b      	add	r3, r1
 8006988:	331b      	adds	r3, #27
 800698a:	2200      	movs	r2, #0
 800698c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800698e:	78fb      	ldrb	r3, [r7, #3]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	4413      	add	r3, r2
 8006996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	78fa      	ldrb	r2, [r7, #3]
 800699e:	0151      	lsls	r1, r2, #5
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	440a      	add	r2, r1
 80069a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069ac:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80069ae:	78fb      	ldrb	r3, [r7, #3]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069ba:	461a      	mov	r2, r3
 80069bc:	2301      	movs	r3, #1
 80069be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80069c0:	78fa      	ldrb	r2, [r7, #3]
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	4613      	mov	r3, r2
 80069c6:	011b      	lsls	r3, r3, #4
 80069c8:	1a9b      	subs	r3, r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	440b      	add	r3, r1
 80069ce:	334d      	adds	r3, #77	@ 0x4d
 80069d0:	2201      	movs	r2, #1
 80069d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	78fa      	ldrb	r2, [r7, #3]
 80069da:	4611      	mov	r1, r2
 80069dc:	4618      	mov	r0, r3
 80069de:	f004 fce4 	bl	800b3aa <USB_HC_Halt>
 80069e2:	e365      	b.n	80070b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	78fa      	ldrb	r2, [r7, #3]
 80069ea:	4611      	mov	r1, r2
 80069ec:	4618      	mov	r0, r3
 80069ee:	f003 ff38 	bl	800a862 <USB_ReadChInterrupts>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f8:	2b40      	cmp	r3, #64	@ 0x40
 80069fa:	d139      	bne.n	8006a70 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80069fc:	78fa      	ldrb	r2, [r7, #3]
 80069fe:	6879      	ldr	r1, [r7, #4]
 8006a00:	4613      	mov	r3, r2
 8006a02:	011b      	lsls	r3, r3, #4
 8006a04:	1a9b      	subs	r3, r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	440b      	add	r3, r1
 8006a0a:	334d      	adds	r3, #77	@ 0x4d
 8006a0c:	2205      	movs	r2, #5
 8006a0e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8006a10:	78fa      	ldrb	r2, [r7, #3]
 8006a12:	6879      	ldr	r1, [r7, #4]
 8006a14:	4613      	mov	r3, r2
 8006a16:	011b      	lsls	r3, r3, #4
 8006a18:	1a9b      	subs	r3, r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	440b      	add	r3, r1
 8006a1e:	331a      	adds	r3, #26
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d109      	bne.n	8006a3a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8006a26:	78fa      	ldrb	r2, [r7, #3]
 8006a28:	6879      	ldr	r1, [r7, #4]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	011b      	lsls	r3, r3, #4
 8006a2e:	1a9b      	subs	r3, r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	440b      	add	r3, r1
 8006a34:	3319      	adds	r3, #25
 8006a36:	2201      	movs	r2, #1
 8006a38:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8006a3a:	78fa      	ldrb	r2, [r7, #3]
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	011b      	lsls	r3, r3, #4
 8006a42:	1a9b      	subs	r3, r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	440b      	add	r3, r1
 8006a48:	3344      	adds	r3, #68	@ 0x44
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	78fa      	ldrb	r2, [r7, #3]
 8006a54:	4611      	mov	r1, r2
 8006a56:	4618      	mov	r0, r3
 8006a58:	f004 fca7 	bl	800b3aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006a5c:	78fb      	ldrb	r3, [r7, #3]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a68:	461a      	mov	r2, r3
 8006a6a:	2340      	movs	r3, #64	@ 0x40
 8006a6c:	6093      	str	r3, [r2, #8]
 8006a6e:	e31f      	b.n	80070b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	78fa      	ldrb	r2, [r7, #3]
 8006a76:	4611      	mov	r1, r2
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f003 fef2 	bl	800a862 <USB_ReadChInterrupts>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f003 0308 	and.w	r3, r3, #8
 8006a84:	2b08      	cmp	r3, #8
 8006a86:	d11a      	bne.n	8006abe <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a94:	461a      	mov	r2, r3
 8006a96:	2308      	movs	r3, #8
 8006a98:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006a9a:	78fa      	ldrb	r2, [r7, #3]
 8006a9c:	6879      	ldr	r1, [r7, #4]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	011b      	lsls	r3, r3, #4
 8006aa2:	1a9b      	subs	r3, r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	440b      	add	r3, r1
 8006aa8:	334d      	adds	r3, #77	@ 0x4d
 8006aaa:	2206      	movs	r2, #6
 8006aac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	78fa      	ldrb	r2, [r7, #3]
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f004 fc77 	bl	800b3aa <USB_HC_Halt>
 8006abc:	e2f8      	b.n	80070b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	78fa      	ldrb	r2, [r7, #3]
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f003 fecb 	bl	800a862 <USB_ReadChInterrupts>
 8006acc:	4603      	mov	r3, r0
 8006ace:	f003 0310 	and.w	r3, r3, #16
 8006ad2:	2b10      	cmp	r3, #16
 8006ad4:	d144      	bne.n	8006b60 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006ad6:	78fa      	ldrb	r2, [r7, #3]
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	4613      	mov	r3, r2
 8006adc:	011b      	lsls	r3, r3, #4
 8006ade:	1a9b      	subs	r3, r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	440b      	add	r3, r1
 8006ae4:	3344      	adds	r3, #68	@ 0x44
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8006aea:	78fa      	ldrb	r2, [r7, #3]
 8006aec:	6879      	ldr	r1, [r7, #4]
 8006aee:	4613      	mov	r3, r2
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	1a9b      	subs	r3, r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	440b      	add	r3, r1
 8006af8:	334d      	adds	r3, #77	@ 0x4d
 8006afa:	2204      	movs	r2, #4
 8006afc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8006afe:	78fa      	ldrb	r2, [r7, #3]
 8006b00:	6879      	ldr	r1, [r7, #4]
 8006b02:	4613      	mov	r3, r2
 8006b04:	011b      	lsls	r3, r3, #4
 8006b06:	1a9b      	subs	r3, r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	440b      	add	r3, r1
 8006b0c:	3319      	adds	r3, #25
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d114      	bne.n	8006b3e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8006b14:	78fa      	ldrb	r2, [r7, #3]
 8006b16:	6879      	ldr	r1, [r7, #4]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	011b      	lsls	r3, r3, #4
 8006b1c:	1a9b      	subs	r3, r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	440b      	add	r3, r1
 8006b22:	3318      	adds	r3, #24
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d109      	bne.n	8006b3e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8006b2a:	78fa      	ldrb	r2, [r7, #3]
 8006b2c:	6879      	ldr	r1, [r7, #4]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	011b      	lsls	r3, r3, #4
 8006b32:	1a9b      	subs	r3, r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	440b      	add	r3, r1
 8006b38:	3319      	adds	r3, #25
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	78fa      	ldrb	r2, [r7, #3]
 8006b44:	4611      	mov	r1, r2
 8006b46:	4618      	mov	r0, r3
 8006b48:	f004 fc2f 	bl	800b3aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006b4c:	78fb      	ldrb	r3, [r7, #3]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b58:	461a      	mov	r2, r3
 8006b5a:	2310      	movs	r3, #16
 8006b5c:	6093      	str	r3, [r2, #8]
 8006b5e:	e2a7      	b.n	80070b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	78fa      	ldrb	r2, [r7, #3]
 8006b66:	4611      	mov	r1, r2
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f003 fe7a 	bl	800a862 <USB_ReadChInterrupts>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b74:	2b80      	cmp	r3, #128	@ 0x80
 8006b76:	f040 8083 	bne.w	8006c80 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	799b      	ldrb	r3, [r3, #6]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d111      	bne.n	8006ba6 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8006b82:	78fa      	ldrb	r2, [r7, #3]
 8006b84:	6879      	ldr	r1, [r7, #4]
 8006b86:	4613      	mov	r3, r2
 8006b88:	011b      	lsls	r3, r3, #4
 8006b8a:	1a9b      	subs	r3, r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	440b      	add	r3, r1
 8006b90:	334d      	adds	r3, #77	@ 0x4d
 8006b92:	2207      	movs	r2, #7
 8006b94:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	78fa      	ldrb	r2, [r7, #3]
 8006b9c:	4611      	mov	r1, r2
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f004 fc03 	bl	800b3aa <USB_HC_Halt>
 8006ba4:	e062      	b.n	8006c6c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8006ba6:	78fa      	ldrb	r2, [r7, #3]
 8006ba8:	6879      	ldr	r1, [r7, #4]
 8006baa:	4613      	mov	r3, r2
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	1a9b      	subs	r3, r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	440b      	add	r3, r1
 8006bb4:	3344      	adds	r3, #68	@ 0x44
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	1c59      	adds	r1, r3, #1
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	011b      	lsls	r3, r3, #4
 8006bc0:	1a9b      	subs	r3, r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4403      	add	r3, r0
 8006bc6:	3344      	adds	r3, #68	@ 0x44
 8006bc8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006bca:	78fa      	ldrb	r2, [r7, #3]
 8006bcc:	6879      	ldr	r1, [r7, #4]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	011b      	lsls	r3, r3, #4
 8006bd2:	1a9b      	subs	r3, r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	440b      	add	r3, r1
 8006bd8:	3344      	adds	r3, #68	@ 0x44
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d922      	bls.n	8006c26 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006be0:	78fa      	ldrb	r2, [r7, #3]
 8006be2:	6879      	ldr	r1, [r7, #4]
 8006be4:	4613      	mov	r3, r2
 8006be6:	011b      	lsls	r3, r3, #4
 8006be8:	1a9b      	subs	r3, r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	440b      	add	r3, r1
 8006bee:	3344      	adds	r3, #68	@ 0x44
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006bf4:	78fa      	ldrb	r2, [r7, #3]
 8006bf6:	6879      	ldr	r1, [r7, #4]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	011b      	lsls	r3, r3, #4
 8006bfc:	1a9b      	subs	r3, r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	440b      	add	r3, r1
 8006c02:	334c      	adds	r3, #76	@ 0x4c
 8006c04:	2204      	movs	r2, #4
 8006c06:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006c08:	78fa      	ldrb	r2, [r7, #3]
 8006c0a:	6879      	ldr	r1, [r7, #4]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	1a9b      	subs	r3, r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	440b      	add	r3, r1
 8006c16:	334c      	adds	r3, #76	@ 0x4c
 8006c18:	781a      	ldrb	r2, [r3, #0]
 8006c1a:	78fb      	ldrb	r3, [r7, #3]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f007 fc82 	bl	800e528 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006c24:	e022      	b.n	8006c6c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006c26:	78fa      	ldrb	r2, [r7, #3]
 8006c28:	6879      	ldr	r1, [r7, #4]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	011b      	lsls	r3, r3, #4
 8006c2e:	1a9b      	subs	r3, r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	440b      	add	r3, r1
 8006c34:	334c      	adds	r3, #76	@ 0x4c
 8006c36:	2202      	movs	r2, #2
 8006c38:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006c3a:	78fb      	ldrb	r3, [r7, #3]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006c50:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c58:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006c5a:	78fb      	ldrb	r3, [r7, #3]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c66:	461a      	mov	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006c6c:	78fb      	ldrb	r3, [r7, #3]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c78:	461a      	mov	r2, r3
 8006c7a:	2380      	movs	r3, #128	@ 0x80
 8006c7c:	6093      	str	r3, [r2, #8]
 8006c7e:	e217      	b.n	80070b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	78fa      	ldrb	r2, [r7, #3]
 8006c86:	4611      	mov	r1, r2
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f003 fdea 	bl	800a862 <USB_ReadChInterrupts>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c98:	d11b      	bne.n	8006cd2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006c9a:	78fa      	ldrb	r2, [r7, #3]
 8006c9c:	6879      	ldr	r1, [r7, #4]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	011b      	lsls	r3, r3, #4
 8006ca2:	1a9b      	subs	r3, r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	440b      	add	r3, r1
 8006ca8:	334d      	adds	r3, #77	@ 0x4d
 8006caa:	2209      	movs	r2, #9
 8006cac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	78fa      	ldrb	r2, [r7, #3]
 8006cb4:	4611      	mov	r1, r2
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f004 fb77 	bl	800b3aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006cbc:	78fb      	ldrb	r3, [r7, #3]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cc8:	461a      	mov	r2, r3
 8006cca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006cce:	6093      	str	r3, [r2, #8]
 8006cd0:	e1ee      	b.n	80070b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	78fa      	ldrb	r2, [r7, #3]
 8006cd8:	4611      	mov	r1, r2
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f003 fdc1 	bl	800a862 <USB_ReadChInterrupts>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	f040 81df 	bne.w	80070aa <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006cec:	78fb      	ldrb	r3, [r7, #3]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006cfe:	78fa      	ldrb	r2, [r7, #3]
 8006d00:	6879      	ldr	r1, [r7, #4]
 8006d02:	4613      	mov	r3, r2
 8006d04:	011b      	lsls	r3, r3, #4
 8006d06:	1a9b      	subs	r3, r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	440b      	add	r3, r1
 8006d0c:	334d      	adds	r3, #77	@ 0x4d
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	f040 8093 	bne.w	8006e3c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006d16:	78fa      	ldrb	r2, [r7, #3]
 8006d18:	6879      	ldr	r1, [r7, #4]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	011b      	lsls	r3, r3, #4
 8006d1e:	1a9b      	subs	r3, r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	440b      	add	r3, r1
 8006d24:	334d      	adds	r3, #77	@ 0x4d
 8006d26:	2202      	movs	r2, #2
 8006d28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006d2a:	78fa      	ldrb	r2, [r7, #3]
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	011b      	lsls	r3, r3, #4
 8006d32:	1a9b      	subs	r3, r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	440b      	add	r3, r1
 8006d38:	334c      	adds	r3, #76	@ 0x4c
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006d3e:	78fa      	ldrb	r2, [r7, #3]
 8006d40:	6879      	ldr	r1, [r7, #4]
 8006d42:	4613      	mov	r3, r2
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	1a9b      	subs	r3, r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	440b      	add	r3, r1
 8006d4c:	3326      	adds	r3, #38	@ 0x26
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d00b      	beq.n	8006d6c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8006d54:	78fa      	ldrb	r2, [r7, #3]
 8006d56:	6879      	ldr	r1, [r7, #4]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	011b      	lsls	r3, r3, #4
 8006d5c:	1a9b      	subs	r3, r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	440b      	add	r3, r1
 8006d62:	3326      	adds	r3, #38	@ 0x26
 8006d64:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	f040 8190 	bne.w	800708c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	799b      	ldrb	r3, [r3, #6]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d115      	bne.n	8006da0 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8006d74:	78fa      	ldrb	r2, [r7, #3]
 8006d76:	6879      	ldr	r1, [r7, #4]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	011b      	lsls	r3, r3, #4
 8006d7c:	1a9b      	subs	r3, r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	440b      	add	r3, r1
 8006d82:	333d      	adds	r3, #61	@ 0x3d
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	78fa      	ldrb	r2, [r7, #3]
 8006d88:	f083 0301 	eor.w	r3, r3, #1
 8006d8c:	b2d8      	uxtb	r0, r3
 8006d8e:	6879      	ldr	r1, [r7, #4]
 8006d90:	4613      	mov	r3, r2
 8006d92:	011b      	lsls	r3, r3, #4
 8006d94:	1a9b      	subs	r3, r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	440b      	add	r3, r1
 8006d9a:	333d      	adds	r3, #61	@ 0x3d
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	799b      	ldrb	r3, [r3, #6]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	f040 8171 	bne.w	800708c <HCD_HC_OUT_IRQHandler+0x954>
 8006daa:	78fa      	ldrb	r2, [r7, #3]
 8006dac:	6879      	ldr	r1, [r7, #4]
 8006dae:	4613      	mov	r3, r2
 8006db0:	011b      	lsls	r3, r3, #4
 8006db2:	1a9b      	subs	r3, r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	440b      	add	r3, r1
 8006db8:	3334      	adds	r3, #52	@ 0x34
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 8165 	beq.w	800708c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8006dc2:	78fa      	ldrb	r2, [r7, #3]
 8006dc4:	6879      	ldr	r1, [r7, #4]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	011b      	lsls	r3, r3, #4
 8006dca:	1a9b      	subs	r3, r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	440b      	add	r3, r1
 8006dd0:	3334      	adds	r3, #52	@ 0x34
 8006dd2:	6819      	ldr	r1, [r3, #0]
 8006dd4:	78fa      	ldrb	r2, [r7, #3]
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	011b      	lsls	r3, r3, #4
 8006ddc:	1a9b      	subs	r3, r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4403      	add	r3, r0
 8006de2:	3328      	adds	r3, #40	@ 0x28
 8006de4:	881b      	ldrh	r3, [r3, #0]
 8006de6:	440b      	add	r3, r1
 8006de8:	1e59      	subs	r1, r3, #1
 8006dea:	78fa      	ldrb	r2, [r7, #3]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	4613      	mov	r3, r2
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	1a9b      	subs	r3, r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4403      	add	r3, r0
 8006df8:	3328      	adds	r3, #40	@ 0x28
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e00:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f003 0301 	and.w	r3, r3, #1
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 813f 	beq.w	800708c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006e0e:	78fa      	ldrb	r2, [r7, #3]
 8006e10:	6879      	ldr	r1, [r7, #4]
 8006e12:	4613      	mov	r3, r2
 8006e14:	011b      	lsls	r3, r3, #4
 8006e16:	1a9b      	subs	r3, r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	440b      	add	r3, r1
 8006e1c:	333d      	adds	r3, #61	@ 0x3d
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	78fa      	ldrb	r2, [r7, #3]
 8006e22:	f083 0301 	eor.w	r3, r3, #1
 8006e26:	b2d8      	uxtb	r0, r3
 8006e28:	6879      	ldr	r1, [r7, #4]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	011b      	lsls	r3, r3, #4
 8006e2e:	1a9b      	subs	r3, r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	440b      	add	r3, r1
 8006e34:	333d      	adds	r3, #61	@ 0x3d
 8006e36:	4602      	mov	r2, r0
 8006e38:	701a      	strb	r2, [r3, #0]
 8006e3a:	e127      	b.n	800708c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006e3c:	78fa      	ldrb	r2, [r7, #3]
 8006e3e:	6879      	ldr	r1, [r7, #4]
 8006e40:	4613      	mov	r3, r2
 8006e42:	011b      	lsls	r3, r3, #4
 8006e44:	1a9b      	subs	r3, r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	440b      	add	r3, r1
 8006e4a:	334d      	adds	r3, #77	@ 0x4d
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	d120      	bne.n	8006e94 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006e52:	78fa      	ldrb	r2, [r7, #3]
 8006e54:	6879      	ldr	r1, [r7, #4]
 8006e56:	4613      	mov	r3, r2
 8006e58:	011b      	lsls	r3, r3, #4
 8006e5a:	1a9b      	subs	r3, r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	440b      	add	r3, r1
 8006e60:	334d      	adds	r3, #77	@ 0x4d
 8006e62:	2202      	movs	r2, #2
 8006e64:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006e66:	78fa      	ldrb	r2, [r7, #3]
 8006e68:	6879      	ldr	r1, [r7, #4]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	011b      	lsls	r3, r3, #4
 8006e6e:	1a9b      	subs	r3, r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	440b      	add	r3, r1
 8006e74:	331b      	adds	r3, #27
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	f040 8107 	bne.w	800708c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006e7e:	78fa      	ldrb	r2, [r7, #3]
 8006e80:	6879      	ldr	r1, [r7, #4]
 8006e82:	4613      	mov	r3, r2
 8006e84:	011b      	lsls	r3, r3, #4
 8006e86:	1a9b      	subs	r3, r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	440b      	add	r3, r1
 8006e8c:	334c      	adds	r3, #76	@ 0x4c
 8006e8e:	2202      	movs	r2, #2
 8006e90:	701a      	strb	r2, [r3, #0]
 8006e92:	e0fb      	b.n	800708c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006e94:	78fa      	ldrb	r2, [r7, #3]
 8006e96:	6879      	ldr	r1, [r7, #4]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	011b      	lsls	r3, r3, #4
 8006e9c:	1a9b      	subs	r3, r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	440b      	add	r3, r1
 8006ea2:	334d      	adds	r3, #77	@ 0x4d
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	2b04      	cmp	r3, #4
 8006ea8:	d13a      	bne.n	8006f20 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006eaa:	78fa      	ldrb	r2, [r7, #3]
 8006eac:	6879      	ldr	r1, [r7, #4]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	011b      	lsls	r3, r3, #4
 8006eb2:	1a9b      	subs	r3, r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	440b      	add	r3, r1
 8006eb8:	334d      	adds	r3, #77	@ 0x4d
 8006eba:	2202      	movs	r2, #2
 8006ebc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006ebe:	78fa      	ldrb	r2, [r7, #3]
 8006ec0:	6879      	ldr	r1, [r7, #4]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	1a9b      	subs	r3, r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	440b      	add	r3, r1
 8006ecc:	334c      	adds	r3, #76	@ 0x4c
 8006ece:	2202      	movs	r2, #2
 8006ed0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006ed2:	78fa      	ldrb	r2, [r7, #3]
 8006ed4:	6879      	ldr	r1, [r7, #4]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	011b      	lsls	r3, r3, #4
 8006eda:	1a9b      	subs	r3, r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	440b      	add	r3, r1
 8006ee0:	331b      	adds	r3, #27
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	f040 80d1 	bne.w	800708c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8006eea:	78fa      	ldrb	r2, [r7, #3]
 8006eec:	6879      	ldr	r1, [r7, #4]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	011b      	lsls	r3, r3, #4
 8006ef2:	1a9b      	subs	r3, r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	440b      	add	r3, r1
 8006ef8:	331b      	adds	r3, #27
 8006efa:	2200      	movs	r2, #0
 8006efc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006efe:	78fb      	ldrb	r3, [r7, #3]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	78fa      	ldrb	r2, [r7, #3]
 8006f0e:	0151      	lsls	r1, r2, #5
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	440a      	add	r2, r1
 8006f14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f1c:	6053      	str	r3, [r2, #4]
 8006f1e:	e0b5      	b.n	800708c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006f20:	78fa      	ldrb	r2, [r7, #3]
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	4613      	mov	r3, r2
 8006f26:	011b      	lsls	r3, r3, #4
 8006f28:	1a9b      	subs	r3, r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	440b      	add	r3, r1
 8006f2e:	334d      	adds	r3, #77	@ 0x4d
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	2b05      	cmp	r3, #5
 8006f34:	d114      	bne.n	8006f60 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006f36:	78fa      	ldrb	r2, [r7, #3]
 8006f38:	6879      	ldr	r1, [r7, #4]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	011b      	lsls	r3, r3, #4
 8006f3e:	1a9b      	subs	r3, r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	440b      	add	r3, r1
 8006f44:	334d      	adds	r3, #77	@ 0x4d
 8006f46:	2202      	movs	r2, #2
 8006f48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8006f4a:	78fa      	ldrb	r2, [r7, #3]
 8006f4c:	6879      	ldr	r1, [r7, #4]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	011b      	lsls	r3, r3, #4
 8006f52:	1a9b      	subs	r3, r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	440b      	add	r3, r1
 8006f58:	334c      	adds	r3, #76	@ 0x4c
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	701a      	strb	r2, [r3, #0]
 8006f5e:	e095      	b.n	800708c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006f60:	78fa      	ldrb	r2, [r7, #3]
 8006f62:	6879      	ldr	r1, [r7, #4]
 8006f64:	4613      	mov	r3, r2
 8006f66:	011b      	lsls	r3, r3, #4
 8006f68:	1a9b      	subs	r3, r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	440b      	add	r3, r1
 8006f6e:	334d      	adds	r3, #77	@ 0x4d
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	2b06      	cmp	r3, #6
 8006f74:	d114      	bne.n	8006fa0 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006f76:	78fa      	ldrb	r2, [r7, #3]
 8006f78:	6879      	ldr	r1, [r7, #4]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	011b      	lsls	r3, r3, #4
 8006f7e:	1a9b      	subs	r3, r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	440b      	add	r3, r1
 8006f84:	334d      	adds	r3, #77	@ 0x4d
 8006f86:	2202      	movs	r2, #2
 8006f88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8006f8a:	78fa      	ldrb	r2, [r7, #3]
 8006f8c:	6879      	ldr	r1, [r7, #4]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	011b      	lsls	r3, r3, #4
 8006f92:	1a9b      	subs	r3, r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	440b      	add	r3, r1
 8006f98:	334c      	adds	r3, #76	@ 0x4c
 8006f9a:	2205      	movs	r2, #5
 8006f9c:	701a      	strb	r2, [r3, #0]
 8006f9e:	e075      	b.n	800708c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006fa0:	78fa      	ldrb	r2, [r7, #3]
 8006fa2:	6879      	ldr	r1, [r7, #4]
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	011b      	lsls	r3, r3, #4
 8006fa8:	1a9b      	subs	r3, r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	440b      	add	r3, r1
 8006fae:	334d      	adds	r3, #77	@ 0x4d
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	2b07      	cmp	r3, #7
 8006fb4:	d00a      	beq.n	8006fcc <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006fb6:	78fa      	ldrb	r2, [r7, #3]
 8006fb8:	6879      	ldr	r1, [r7, #4]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	011b      	lsls	r3, r3, #4
 8006fbe:	1a9b      	subs	r3, r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	440b      	add	r3, r1
 8006fc4:	334d      	adds	r3, #77	@ 0x4d
 8006fc6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006fc8:	2b09      	cmp	r3, #9
 8006fca:	d170      	bne.n	80070ae <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006fcc:	78fa      	ldrb	r2, [r7, #3]
 8006fce:	6879      	ldr	r1, [r7, #4]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	011b      	lsls	r3, r3, #4
 8006fd4:	1a9b      	subs	r3, r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	440b      	add	r3, r1
 8006fda:	334d      	adds	r3, #77	@ 0x4d
 8006fdc:	2202      	movs	r2, #2
 8006fde:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006fe0:	78fa      	ldrb	r2, [r7, #3]
 8006fe2:	6879      	ldr	r1, [r7, #4]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	011b      	lsls	r3, r3, #4
 8006fe8:	1a9b      	subs	r3, r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	440b      	add	r3, r1
 8006fee:	3344      	adds	r3, #68	@ 0x44
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	1c59      	adds	r1, r3, #1
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	011b      	lsls	r3, r3, #4
 8006ffa:	1a9b      	subs	r3, r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4403      	add	r3, r0
 8007000:	3344      	adds	r3, #68	@ 0x44
 8007002:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007004:	78fa      	ldrb	r2, [r7, #3]
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	4613      	mov	r3, r2
 800700a:	011b      	lsls	r3, r3, #4
 800700c:	1a9b      	subs	r3, r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	440b      	add	r3, r1
 8007012:	3344      	adds	r3, #68	@ 0x44
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b02      	cmp	r3, #2
 8007018:	d914      	bls.n	8007044 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800701a:	78fa      	ldrb	r2, [r7, #3]
 800701c:	6879      	ldr	r1, [r7, #4]
 800701e:	4613      	mov	r3, r2
 8007020:	011b      	lsls	r3, r3, #4
 8007022:	1a9b      	subs	r3, r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	440b      	add	r3, r1
 8007028:	3344      	adds	r3, #68	@ 0x44
 800702a:	2200      	movs	r2, #0
 800702c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800702e:	78fa      	ldrb	r2, [r7, #3]
 8007030:	6879      	ldr	r1, [r7, #4]
 8007032:	4613      	mov	r3, r2
 8007034:	011b      	lsls	r3, r3, #4
 8007036:	1a9b      	subs	r3, r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	440b      	add	r3, r1
 800703c:	334c      	adds	r3, #76	@ 0x4c
 800703e:	2204      	movs	r2, #4
 8007040:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007042:	e022      	b.n	800708a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007044:	78fa      	ldrb	r2, [r7, #3]
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	4613      	mov	r3, r2
 800704a:	011b      	lsls	r3, r3, #4
 800704c:	1a9b      	subs	r3, r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	440b      	add	r3, r1
 8007052:	334c      	adds	r3, #76	@ 0x4c
 8007054:	2202      	movs	r2, #2
 8007056:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	4413      	add	r3, r2
 8007060:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800706e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007076:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007078:	78fb      	ldrb	r3, [r7, #3]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	4413      	add	r3, r2
 8007080:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007084:	461a      	mov	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800708a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800708c:	78fa      	ldrb	r2, [r7, #3]
 800708e:	6879      	ldr	r1, [r7, #4]
 8007090:	4613      	mov	r3, r2
 8007092:	011b      	lsls	r3, r3, #4
 8007094:	1a9b      	subs	r3, r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	440b      	add	r3, r1
 800709a:	334c      	adds	r3, #76	@ 0x4c
 800709c:	781a      	ldrb	r2, [r3, #0]
 800709e:	78fb      	ldrb	r3, [r7, #3]
 80070a0:	4619      	mov	r1, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f007 fa40 	bl	800e528 <HAL_HCD_HC_NotifyURBChange_Callback>
 80070a8:	e002      	b.n	80070b0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80070aa:	bf00      	nop
 80070ac:	e000      	b.n	80070b0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80070ae:	bf00      	nop
  }
}
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b08a      	sub	sp, #40	@ 0x28
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	0c5b      	lsrs	r3, r3, #17
 80070dc:	f003 030f 	and.w	r3, r3, #15
 80070e0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	091b      	lsrs	r3, r3, #4
 80070e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070ea:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d004      	beq.n	80070fc <HCD_RXQLVL_IRQHandler+0x46>
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	2b05      	cmp	r3, #5
 80070f6:	f000 80b6 	beq.w	8007266 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80070fa:	e0b7      	b.n	800726c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 80b3 	beq.w	800726a <HCD_RXQLVL_IRQHandler+0x1b4>
 8007104:	6879      	ldr	r1, [r7, #4]
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	4613      	mov	r3, r2
 800710a:	011b      	lsls	r3, r3, #4
 800710c:	1a9b      	subs	r3, r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	440b      	add	r3, r1
 8007112:	332c      	adds	r3, #44	@ 0x2c
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	f000 80a7 	beq.w	800726a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800711c:	6879      	ldr	r1, [r7, #4]
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	4613      	mov	r3, r2
 8007122:	011b      	lsls	r3, r3, #4
 8007124:	1a9b      	subs	r3, r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	440b      	add	r3, r1
 800712a:	3338      	adds	r3, #56	@ 0x38
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	18d1      	adds	r1, r2, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	4613      	mov	r3, r2
 8007138:	011b      	lsls	r3, r3, #4
 800713a:	1a9b      	subs	r3, r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4403      	add	r3, r0
 8007140:	3334      	adds	r3, #52	@ 0x34
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4299      	cmp	r1, r3
 8007146:	f200 8083 	bhi.w	8007250 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6818      	ldr	r0, [r3, #0]
 800714e:	6879      	ldr	r1, [r7, #4]
 8007150:	69ba      	ldr	r2, [r7, #24]
 8007152:	4613      	mov	r3, r2
 8007154:	011b      	lsls	r3, r3, #4
 8007156:	1a9b      	subs	r3, r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	440b      	add	r3, r1
 800715c:	332c      	adds	r3, #44	@ 0x2c
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	b292      	uxth	r2, r2
 8007164:	4619      	mov	r1, r3
 8007166:	f003 fb11 	bl	800a78c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800716a:	6879      	ldr	r1, [r7, #4]
 800716c:	69ba      	ldr	r2, [r7, #24]
 800716e:	4613      	mov	r3, r2
 8007170:	011b      	lsls	r3, r3, #4
 8007172:	1a9b      	subs	r3, r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	440b      	add	r3, r1
 8007178:	332c      	adds	r3, #44	@ 0x2c
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	18d1      	adds	r1, r2, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	4613      	mov	r3, r2
 8007186:	011b      	lsls	r3, r3, #4
 8007188:	1a9b      	subs	r3, r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4403      	add	r3, r0
 800718e:	332c      	adds	r3, #44	@ 0x2c
 8007190:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8007192:	6879      	ldr	r1, [r7, #4]
 8007194:	69ba      	ldr	r2, [r7, #24]
 8007196:	4613      	mov	r3, r2
 8007198:	011b      	lsls	r3, r3, #4
 800719a:	1a9b      	subs	r3, r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	440b      	add	r3, r1
 80071a0:	3338      	adds	r3, #56	@ 0x38
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	18d1      	adds	r1, r2, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	69ba      	ldr	r2, [r7, #24]
 80071ac:	4613      	mov	r3, r2
 80071ae:	011b      	lsls	r3, r3, #4
 80071b0:	1a9b      	subs	r3, r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4403      	add	r3, r0
 80071b6:	3338      	adds	r3, #56	@ 0x38
 80071b8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	015a      	lsls	r2, r3, #5
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	0cdb      	lsrs	r3, r3, #19
 80071ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071ce:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80071d0:	6879      	ldr	r1, [r7, #4]
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	4613      	mov	r3, r2
 80071d6:	011b      	lsls	r3, r3, #4
 80071d8:	1a9b      	subs	r3, r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	440b      	add	r3, r1
 80071de:	3328      	adds	r3, #40	@ 0x28
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d13f      	bne.n	800726a <HCD_RXQLVL_IRQHandler+0x1b4>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d03c      	beq.n	800726a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	015a      	lsls	r2, r3, #5
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007206:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800720e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	4413      	add	r3, r2
 8007218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800721c:	461a      	mov	r2, r3
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8007222:	6879      	ldr	r1, [r7, #4]
 8007224:	69ba      	ldr	r2, [r7, #24]
 8007226:	4613      	mov	r3, r2
 8007228:	011b      	lsls	r3, r3, #4
 800722a:	1a9b      	subs	r3, r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	440b      	add	r3, r1
 8007230:	333c      	adds	r3, #60	@ 0x3c
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	f083 0301 	eor.w	r3, r3, #1
 8007238:	b2d8      	uxtb	r0, r3
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	69ba      	ldr	r2, [r7, #24]
 800723e:	4613      	mov	r3, r2
 8007240:	011b      	lsls	r3, r3, #4
 8007242:	1a9b      	subs	r3, r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	440b      	add	r3, r1
 8007248:	333c      	adds	r3, #60	@ 0x3c
 800724a:	4602      	mov	r2, r0
 800724c:	701a      	strb	r2, [r3, #0]
      break;
 800724e:	e00c      	b.n	800726a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8007250:	6879      	ldr	r1, [r7, #4]
 8007252:	69ba      	ldr	r2, [r7, #24]
 8007254:	4613      	mov	r3, r2
 8007256:	011b      	lsls	r3, r3, #4
 8007258:	1a9b      	subs	r3, r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	440b      	add	r3, r1
 800725e:	334c      	adds	r3, #76	@ 0x4c
 8007260:	2204      	movs	r2, #4
 8007262:	701a      	strb	r2, [r3, #0]
      break;
 8007264:	e001      	b.n	800726a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8007266:	bf00      	nop
 8007268:	e000      	b.n	800726c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800726a:	bf00      	nop
  }
}
 800726c:	bf00      	nop
 800726e:	3728      	adds	r7, #40	@ 0x28
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80072a0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f003 0302 	and.w	r3, r3, #2
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d10b      	bne.n	80072c4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d102      	bne.n	80072bc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f007 f91a 	bl	800e4f0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f043 0302 	orr.w	r3, r3, #2
 80072c2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f003 0308 	and.w	r3, r3, #8
 80072ca:	2b08      	cmp	r3, #8
 80072cc:	d132      	bne.n	8007334 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	f043 0308 	orr.w	r3, r3, #8
 80072d4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f003 0304 	and.w	r3, r3, #4
 80072dc:	2b04      	cmp	r3, #4
 80072de:	d126      	bne.n	800732e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	7a5b      	ldrb	r3, [r3, #9]
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d113      	bne.n	8007310 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80072ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80072f2:	d106      	bne.n	8007302 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2102      	movs	r1, #2
 80072fa:	4618      	mov	r0, r3
 80072fc:	f003 fbd6 	bl	800aaac <USB_InitFSLSPClkSel>
 8007300:	e011      	b.n	8007326 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2101      	movs	r1, #1
 8007308:	4618      	mov	r0, r3
 800730a:	f003 fbcf 	bl	800aaac <USB_InitFSLSPClkSel>
 800730e:	e00a      	b.n	8007326 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	79db      	ldrb	r3, [r3, #7]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d106      	bne.n	8007326 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800731e:	461a      	mov	r2, r3
 8007320:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8007324:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f007 f90c 	bl	800e544 <HAL_HCD_PortEnabled_Callback>
 800732c:	e002      	b.n	8007334 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f007 f916 	bl	800e560 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f003 0320 	and.w	r3, r3, #32
 800733a:	2b20      	cmp	r3, #32
 800733c:	d103      	bne.n	8007346 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	f043 0320 	orr.w	r3, r3, #32
 8007344:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800734c:	461a      	mov	r2, r3
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	6013      	str	r3, [r2, #0]
}
 8007352:	bf00      	nop
 8007354:	3718      	adds	r7, #24
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
	...

0800735c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e267      	b.n	800783e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d075      	beq.n	8007466 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800737a:	4b88      	ldr	r3, [pc, #544]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f003 030c 	and.w	r3, r3, #12
 8007382:	2b04      	cmp	r3, #4
 8007384:	d00c      	beq.n	80073a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007386:	4b85      	ldr	r3, [pc, #532]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800738e:	2b08      	cmp	r3, #8
 8007390:	d112      	bne.n	80073b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007392:	4b82      	ldr	r3, [pc, #520]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800739a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800739e:	d10b      	bne.n	80073b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073a0:	4b7e      	ldr	r3, [pc, #504]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d05b      	beq.n	8007464 <HAL_RCC_OscConfig+0x108>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d157      	bne.n	8007464 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e242      	b.n	800783e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073c0:	d106      	bne.n	80073d0 <HAL_RCC_OscConfig+0x74>
 80073c2:	4b76      	ldr	r3, [pc, #472]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a75      	ldr	r2, [pc, #468]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 80073c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073cc:	6013      	str	r3, [r2, #0]
 80073ce:	e01d      	b.n	800740c <HAL_RCC_OscConfig+0xb0>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073d8:	d10c      	bne.n	80073f4 <HAL_RCC_OscConfig+0x98>
 80073da:	4b70      	ldr	r3, [pc, #448]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a6f      	ldr	r2, [pc, #444]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 80073e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80073e4:	6013      	str	r3, [r2, #0]
 80073e6:	4b6d      	ldr	r3, [pc, #436]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a6c      	ldr	r2, [pc, #432]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 80073ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073f0:	6013      	str	r3, [r2, #0]
 80073f2:	e00b      	b.n	800740c <HAL_RCC_OscConfig+0xb0>
 80073f4:	4b69      	ldr	r3, [pc, #420]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a68      	ldr	r2, [pc, #416]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 80073fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073fe:	6013      	str	r3, [r2, #0]
 8007400:	4b66      	ldr	r3, [pc, #408]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a65      	ldr	r2, [pc, #404]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 8007406:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800740a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d013      	beq.n	800743c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007414:	f7fd f890 	bl	8004538 <HAL_GetTick>
 8007418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800741a:	e008      	b.n	800742e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800741c:	f7fd f88c 	bl	8004538 <HAL_GetTick>
 8007420:	4602      	mov	r2, r0
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	2b64      	cmp	r3, #100	@ 0x64
 8007428:	d901      	bls.n	800742e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e207      	b.n	800783e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800742e:	4b5b      	ldr	r3, [pc, #364]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0f0      	beq.n	800741c <HAL_RCC_OscConfig+0xc0>
 800743a:	e014      	b.n	8007466 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800743c:	f7fd f87c 	bl	8004538 <HAL_GetTick>
 8007440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007442:	e008      	b.n	8007456 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007444:	f7fd f878 	bl	8004538 <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	2b64      	cmp	r3, #100	@ 0x64
 8007450:	d901      	bls.n	8007456 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e1f3      	b.n	800783e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007456:	4b51      	ldr	r3, [pc, #324]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1f0      	bne.n	8007444 <HAL_RCC_OscConfig+0xe8>
 8007462:	e000      	b.n	8007466 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d063      	beq.n	800753a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007472:	4b4a      	ldr	r3, [pc, #296]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f003 030c 	and.w	r3, r3, #12
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00b      	beq.n	8007496 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800747e:	4b47      	ldr	r3, [pc, #284]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007486:	2b08      	cmp	r3, #8
 8007488:	d11c      	bne.n	80074c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800748a:	4b44      	ldr	r3, [pc, #272]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d116      	bne.n	80074c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007496:	4b41      	ldr	r3, [pc, #260]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d005      	beq.n	80074ae <HAL_RCC_OscConfig+0x152>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d001      	beq.n	80074ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e1c7      	b.n	800783e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074ae:	4b3b      	ldr	r3, [pc, #236]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	00db      	lsls	r3, r3, #3
 80074bc:	4937      	ldr	r1, [pc, #220]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074c2:	e03a      	b.n	800753a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d020      	beq.n	800750e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074cc:	4b34      	ldr	r3, [pc, #208]	@ (80075a0 <HAL_RCC_OscConfig+0x244>)
 80074ce:	2201      	movs	r2, #1
 80074d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d2:	f7fd f831 	bl	8004538 <HAL_GetTick>
 80074d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074d8:	e008      	b.n	80074ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074da:	f7fd f82d 	bl	8004538 <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d901      	bls.n	80074ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e1a8      	b.n	800783e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074ec:	4b2b      	ldr	r3, [pc, #172]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d0f0      	beq.n	80074da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074f8:	4b28      	ldr	r3, [pc, #160]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	00db      	lsls	r3, r3, #3
 8007506:	4925      	ldr	r1, [pc, #148]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 8007508:	4313      	orrs	r3, r2
 800750a:	600b      	str	r3, [r1, #0]
 800750c:	e015      	b.n	800753a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800750e:	4b24      	ldr	r3, [pc, #144]	@ (80075a0 <HAL_RCC_OscConfig+0x244>)
 8007510:	2200      	movs	r2, #0
 8007512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007514:	f7fd f810 	bl	8004538 <HAL_GetTick>
 8007518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800751a:	e008      	b.n	800752e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800751c:	f7fd f80c 	bl	8004538 <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	2b02      	cmp	r3, #2
 8007528:	d901      	bls.n	800752e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e187      	b.n	800783e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800752e:	4b1b      	ldr	r3, [pc, #108]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1f0      	bne.n	800751c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0308 	and.w	r3, r3, #8
 8007542:	2b00      	cmp	r3, #0
 8007544:	d036      	beq.n	80075b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d016      	beq.n	800757c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800754e:	4b15      	ldr	r3, [pc, #84]	@ (80075a4 <HAL_RCC_OscConfig+0x248>)
 8007550:	2201      	movs	r2, #1
 8007552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007554:	f7fc fff0 	bl	8004538 <HAL_GetTick>
 8007558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800755a:	e008      	b.n	800756e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800755c:	f7fc ffec 	bl	8004538 <HAL_GetTick>
 8007560:	4602      	mov	r2, r0
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	2b02      	cmp	r3, #2
 8007568:	d901      	bls.n	800756e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e167      	b.n	800783e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800756e:	4b0b      	ldr	r3, [pc, #44]	@ (800759c <HAL_RCC_OscConfig+0x240>)
 8007570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007572:	f003 0302 	and.w	r3, r3, #2
 8007576:	2b00      	cmp	r3, #0
 8007578:	d0f0      	beq.n	800755c <HAL_RCC_OscConfig+0x200>
 800757a:	e01b      	b.n	80075b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800757c:	4b09      	ldr	r3, [pc, #36]	@ (80075a4 <HAL_RCC_OscConfig+0x248>)
 800757e:	2200      	movs	r2, #0
 8007580:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007582:	f7fc ffd9 	bl	8004538 <HAL_GetTick>
 8007586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007588:	e00e      	b.n	80075a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800758a:	f7fc ffd5 	bl	8004538 <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	2b02      	cmp	r3, #2
 8007596:	d907      	bls.n	80075a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e150      	b.n	800783e <HAL_RCC_OscConfig+0x4e2>
 800759c:	40023800 	.word	0x40023800
 80075a0:	42470000 	.word	0x42470000
 80075a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075a8:	4b88      	ldr	r3, [pc, #544]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 80075aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075ac:	f003 0302 	and.w	r3, r3, #2
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1ea      	bne.n	800758a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0304 	and.w	r3, r3, #4
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 8097 	beq.w	80076f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075c2:	2300      	movs	r3, #0
 80075c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075c6:	4b81      	ldr	r3, [pc, #516]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 80075c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10f      	bne.n	80075f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075d2:	2300      	movs	r3, #0
 80075d4:	60bb      	str	r3, [r7, #8]
 80075d6:	4b7d      	ldr	r3, [pc, #500]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 80075d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075da:	4a7c      	ldr	r2, [pc, #496]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 80075dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80075e2:	4b7a      	ldr	r3, [pc, #488]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 80075e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075ea:	60bb      	str	r3, [r7, #8]
 80075ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075ee:	2301      	movs	r3, #1
 80075f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075f2:	4b77      	ldr	r3, [pc, #476]	@ (80077d0 <HAL_RCC_OscConfig+0x474>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d118      	bne.n	8007630 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075fe:	4b74      	ldr	r3, [pc, #464]	@ (80077d0 <HAL_RCC_OscConfig+0x474>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a73      	ldr	r2, [pc, #460]	@ (80077d0 <HAL_RCC_OscConfig+0x474>)
 8007604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800760a:	f7fc ff95 	bl	8004538 <HAL_GetTick>
 800760e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007610:	e008      	b.n	8007624 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007612:	f7fc ff91 	bl	8004538 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	2b02      	cmp	r3, #2
 800761e:	d901      	bls.n	8007624 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e10c      	b.n	800783e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007624:	4b6a      	ldr	r3, [pc, #424]	@ (80077d0 <HAL_RCC_OscConfig+0x474>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800762c:	2b00      	cmp	r3, #0
 800762e:	d0f0      	beq.n	8007612 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d106      	bne.n	8007646 <HAL_RCC_OscConfig+0x2ea>
 8007638:	4b64      	ldr	r3, [pc, #400]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 800763a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800763c:	4a63      	ldr	r2, [pc, #396]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 800763e:	f043 0301 	orr.w	r3, r3, #1
 8007642:	6713      	str	r3, [r2, #112]	@ 0x70
 8007644:	e01c      	b.n	8007680 <HAL_RCC_OscConfig+0x324>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	2b05      	cmp	r3, #5
 800764c:	d10c      	bne.n	8007668 <HAL_RCC_OscConfig+0x30c>
 800764e:	4b5f      	ldr	r3, [pc, #380]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 8007650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007652:	4a5e      	ldr	r2, [pc, #376]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 8007654:	f043 0304 	orr.w	r3, r3, #4
 8007658:	6713      	str	r3, [r2, #112]	@ 0x70
 800765a:	4b5c      	ldr	r3, [pc, #368]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 800765c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800765e:	4a5b      	ldr	r2, [pc, #364]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 8007660:	f043 0301 	orr.w	r3, r3, #1
 8007664:	6713      	str	r3, [r2, #112]	@ 0x70
 8007666:	e00b      	b.n	8007680 <HAL_RCC_OscConfig+0x324>
 8007668:	4b58      	ldr	r3, [pc, #352]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 800766a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800766c:	4a57      	ldr	r2, [pc, #348]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 800766e:	f023 0301 	bic.w	r3, r3, #1
 8007672:	6713      	str	r3, [r2, #112]	@ 0x70
 8007674:	4b55      	ldr	r3, [pc, #340]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 8007676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007678:	4a54      	ldr	r2, [pc, #336]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 800767a:	f023 0304 	bic.w	r3, r3, #4
 800767e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d015      	beq.n	80076b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007688:	f7fc ff56 	bl	8004538 <HAL_GetTick>
 800768c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800768e:	e00a      	b.n	80076a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007690:	f7fc ff52 	bl	8004538 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800769e:	4293      	cmp	r3, r2
 80076a0:	d901      	bls.n	80076a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e0cb      	b.n	800783e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076a6:	4b49      	ldr	r3, [pc, #292]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 80076a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d0ee      	beq.n	8007690 <HAL_RCC_OscConfig+0x334>
 80076b2:	e014      	b.n	80076de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076b4:	f7fc ff40 	bl	8004538 <HAL_GetTick>
 80076b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076ba:	e00a      	b.n	80076d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076bc:	f7fc ff3c 	bl	8004538 <HAL_GetTick>
 80076c0:	4602      	mov	r2, r0
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d901      	bls.n	80076d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e0b5      	b.n	800783e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076d2:	4b3e      	ldr	r3, [pc, #248]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 80076d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076d6:	f003 0302 	and.w	r3, r3, #2
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1ee      	bne.n	80076bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80076de:	7dfb      	ldrb	r3, [r7, #23]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d105      	bne.n	80076f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076e4:	4b39      	ldr	r3, [pc, #228]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 80076e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e8:	4a38      	ldr	r2, [pc, #224]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 80076ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 80a1 	beq.w	800783c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80076fa:	4b34      	ldr	r3, [pc, #208]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f003 030c 	and.w	r3, r3, #12
 8007702:	2b08      	cmp	r3, #8
 8007704:	d05c      	beq.n	80077c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	2b02      	cmp	r3, #2
 800770c:	d141      	bne.n	8007792 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800770e:	4b31      	ldr	r3, [pc, #196]	@ (80077d4 <HAL_RCC_OscConfig+0x478>)
 8007710:	2200      	movs	r2, #0
 8007712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007714:	f7fc ff10 	bl	8004538 <HAL_GetTick>
 8007718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800771a:	e008      	b.n	800772e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800771c:	f7fc ff0c 	bl	8004538 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	2b02      	cmp	r3, #2
 8007728:	d901      	bls.n	800772e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e087      	b.n	800783e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800772e:	4b27      	ldr	r3, [pc, #156]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1f0      	bne.n	800771c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	69da      	ldr	r2, [r3, #28]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	431a      	orrs	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007748:	019b      	lsls	r3, r3, #6
 800774a:	431a      	orrs	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007750:	085b      	lsrs	r3, r3, #1
 8007752:	3b01      	subs	r3, #1
 8007754:	041b      	lsls	r3, r3, #16
 8007756:	431a      	orrs	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800775c:	061b      	lsls	r3, r3, #24
 800775e:	491b      	ldr	r1, [pc, #108]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 8007760:	4313      	orrs	r3, r2
 8007762:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007764:	4b1b      	ldr	r3, [pc, #108]	@ (80077d4 <HAL_RCC_OscConfig+0x478>)
 8007766:	2201      	movs	r2, #1
 8007768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800776a:	f7fc fee5 	bl	8004538 <HAL_GetTick>
 800776e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007770:	e008      	b.n	8007784 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007772:	f7fc fee1 	bl	8004538 <HAL_GetTick>
 8007776:	4602      	mov	r2, r0
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	2b02      	cmp	r3, #2
 800777e:	d901      	bls.n	8007784 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e05c      	b.n	800783e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007784:	4b11      	ldr	r3, [pc, #68]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d0f0      	beq.n	8007772 <HAL_RCC_OscConfig+0x416>
 8007790:	e054      	b.n	800783c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007792:	4b10      	ldr	r3, [pc, #64]	@ (80077d4 <HAL_RCC_OscConfig+0x478>)
 8007794:	2200      	movs	r2, #0
 8007796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007798:	f7fc fece 	bl	8004538 <HAL_GetTick>
 800779c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800779e:	e008      	b.n	80077b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077a0:	f7fc feca 	bl	8004538 <HAL_GetTick>
 80077a4:	4602      	mov	r2, r0
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d901      	bls.n	80077b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e045      	b.n	800783e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077b2:	4b06      	ldr	r3, [pc, #24]	@ (80077cc <HAL_RCC_OscConfig+0x470>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1f0      	bne.n	80077a0 <HAL_RCC_OscConfig+0x444>
 80077be:	e03d      	b.n	800783c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d107      	bne.n	80077d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e038      	b.n	800783e <HAL_RCC_OscConfig+0x4e2>
 80077cc:	40023800 	.word	0x40023800
 80077d0:	40007000 	.word	0x40007000
 80077d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80077d8:	4b1b      	ldr	r3, [pc, #108]	@ (8007848 <HAL_RCC_OscConfig+0x4ec>)
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d028      	beq.n	8007838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d121      	bne.n	8007838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077fe:	429a      	cmp	r2, r3
 8007800:	d11a      	bne.n	8007838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007808:	4013      	ands	r3, r2
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800780e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007810:	4293      	cmp	r3, r2
 8007812:	d111      	bne.n	8007838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781e:	085b      	lsrs	r3, r3, #1
 8007820:	3b01      	subs	r3, #1
 8007822:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007824:	429a      	cmp	r2, r3
 8007826:	d107      	bne.n	8007838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007832:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007834:	429a      	cmp	r2, r3
 8007836:	d001      	beq.n	800783c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e000      	b.n	800783e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	40023800 	.word	0x40023800

0800784c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d101      	bne.n	8007860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e0cc      	b.n	80079fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007860:	4b68      	ldr	r3, [pc, #416]	@ (8007a04 <HAL_RCC_ClockConfig+0x1b8>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 030f 	and.w	r3, r3, #15
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	429a      	cmp	r2, r3
 800786c:	d90c      	bls.n	8007888 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800786e:	4b65      	ldr	r3, [pc, #404]	@ (8007a04 <HAL_RCC_ClockConfig+0x1b8>)
 8007870:	683a      	ldr	r2, [r7, #0]
 8007872:	b2d2      	uxtb	r2, r2
 8007874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007876:	4b63      	ldr	r3, [pc, #396]	@ (8007a04 <HAL_RCC_ClockConfig+0x1b8>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 030f 	and.w	r3, r3, #15
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	429a      	cmp	r2, r3
 8007882:	d001      	beq.n	8007888 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e0b8      	b.n	80079fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0302 	and.w	r3, r3, #2
 8007890:	2b00      	cmp	r3, #0
 8007892:	d020      	beq.n	80078d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0304 	and.w	r3, r3, #4
 800789c:	2b00      	cmp	r3, #0
 800789e:	d005      	beq.n	80078ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078a0:	4b59      	ldr	r3, [pc, #356]	@ (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	4a58      	ldr	r2, [pc, #352]	@ (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80078a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80078aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0308 	and.w	r3, r3, #8
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d005      	beq.n	80078c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078b8:	4b53      	ldr	r3, [pc, #332]	@ (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	4a52      	ldr	r2, [pc, #328]	@ (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80078be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80078c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078c4:	4b50      	ldr	r3, [pc, #320]	@ (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	494d      	ldr	r1, [pc, #308]	@ (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d044      	beq.n	800796c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d107      	bne.n	80078fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078ea:	4b47      	ldr	r3, [pc, #284]	@ (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d119      	bne.n	800792a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e07f      	b.n	80079fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d003      	beq.n	800790a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007906:	2b03      	cmp	r3, #3
 8007908:	d107      	bne.n	800791a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800790a:	4b3f      	ldr	r3, [pc, #252]	@ (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d109      	bne.n	800792a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e06f      	b.n	80079fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800791a:	4b3b      	ldr	r3, [pc, #236]	@ (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e067      	b.n	80079fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800792a:	4b37      	ldr	r3, [pc, #220]	@ (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f023 0203 	bic.w	r2, r3, #3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	4934      	ldr	r1, [pc, #208]	@ (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 8007938:	4313      	orrs	r3, r2
 800793a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800793c:	f7fc fdfc 	bl	8004538 <HAL_GetTick>
 8007940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007942:	e00a      	b.n	800795a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007944:	f7fc fdf8 	bl	8004538 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007952:	4293      	cmp	r3, r2
 8007954:	d901      	bls.n	800795a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e04f      	b.n	80079fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800795a:	4b2b      	ldr	r3, [pc, #172]	@ (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f003 020c 	and.w	r2, r3, #12
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	429a      	cmp	r2, r3
 800796a:	d1eb      	bne.n	8007944 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800796c:	4b25      	ldr	r3, [pc, #148]	@ (8007a04 <HAL_RCC_ClockConfig+0x1b8>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 030f 	and.w	r3, r3, #15
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	429a      	cmp	r2, r3
 8007978:	d20c      	bcs.n	8007994 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800797a:	4b22      	ldr	r3, [pc, #136]	@ (8007a04 <HAL_RCC_ClockConfig+0x1b8>)
 800797c:	683a      	ldr	r2, [r7, #0]
 800797e:	b2d2      	uxtb	r2, r2
 8007980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007982:	4b20      	ldr	r3, [pc, #128]	@ (8007a04 <HAL_RCC_ClockConfig+0x1b8>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 030f 	and.w	r3, r3, #15
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	429a      	cmp	r2, r3
 800798e:	d001      	beq.n	8007994 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e032      	b.n	80079fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0304 	and.w	r3, r3, #4
 800799c:	2b00      	cmp	r3, #0
 800799e:	d008      	beq.n	80079b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079a0:	4b19      	ldr	r3, [pc, #100]	@ (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	4916      	ldr	r1, [pc, #88]	@ (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0308 	and.w	r3, r3, #8
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d009      	beq.n	80079d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079be:	4b12      	ldr	r3, [pc, #72]	@ (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	00db      	lsls	r3, r3, #3
 80079cc:	490e      	ldr	r1, [pc, #56]	@ (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80079ce:	4313      	orrs	r3, r2
 80079d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80079d2:	f000 f821 	bl	8007a18 <HAL_RCC_GetSysClockFreq>
 80079d6:	4602      	mov	r2, r0
 80079d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	091b      	lsrs	r3, r3, #4
 80079de:	f003 030f 	and.w	r3, r3, #15
 80079e2:	490a      	ldr	r1, [pc, #40]	@ (8007a0c <HAL_RCC_ClockConfig+0x1c0>)
 80079e4:	5ccb      	ldrb	r3, [r1, r3]
 80079e6:	fa22 f303 	lsr.w	r3, r2, r3
 80079ea:	4a09      	ldr	r2, [pc, #36]	@ (8007a10 <HAL_RCC_ClockConfig+0x1c4>)
 80079ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80079ee:	4b09      	ldr	r3, [pc, #36]	@ (8007a14 <HAL_RCC_ClockConfig+0x1c8>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fc fd5c 	bl	80044b0 <HAL_InitTick>

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	40023c00 	.word	0x40023c00
 8007a08:	40023800 	.word	0x40023800
 8007a0c:	08012644 	.word	0x08012644
 8007a10:	20000294 	.word	0x20000294
 8007a14:	20000298 	.word	0x20000298

08007a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a1c:	b094      	sub	sp, #80	@ 0x50
 8007a1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007a20:	2300      	movs	r3, #0
 8007a22:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a30:	4b79      	ldr	r3, [pc, #484]	@ (8007c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f003 030c 	and.w	r3, r3, #12
 8007a38:	2b08      	cmp	r3, #8
 8007a3a:	d00d      	beq.n	8007a58 <HAL_RCC_GetSysClockFreq+0x40>
 8007a3c:	2b08      	cmp	r3, #8
 8007a3e:	f200 80e1 	bhi.w	8007c04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d002      	beq.n	8007a4c <HAL_RCC_GetSysClockFreq+0x34>
 8007a46:	2b04      	cmp	r3, #4
 8007a48:	d003      	beq.n	8007a52 <HAL_RCC_GetSysClockFreq+0x3a>
 8007a4a:	e0db      	b.n	8007c04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a4c:	4b73      	ldr	r3, [pc, #460]	@ (8007c1c <HAL_RCC_GetSysClockFreq+0x204>)
 8007a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007a50:	e0db      	b.n	8007c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a52:	4b72      	ldr	r3, [pc, #456]	@ (8007c1c <HAL_RCC_GetSysClockFreq+0x204>)
 8007a54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007a56:	e0d8      	b.n	8007c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a58:	4b6f      	ldr	r3, [pc, #444]	@ (8007c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a60:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a62:	4b6d      	ldr	r3, [pc, #436]	@ (8007c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d063      	beq.n	8007b36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a6e:	4b6a      	ldr	r3, [pc, #424]	@ (8007c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	099b      	lsrs	r3, r3, #6
 8007a74:	2200      	movs	r2, #0
 8007a76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a80:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a82:	2300      	movs	r3, #0
 8007a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007a8a:	4622      	mov	r2, r4
 8007a8c:	462b      	mov	r3, r5
 8007a8e:	f04f 0000 	mov.w	r0, #0
 8007a92:	f04f 0100 	mov.w	r1, #0
 8007a96:	0159      	lsls	r1, r3, #5
 8007a98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a9c:	0150      	lsls	r0, r2, #5
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	1a51      	subs	r1, r2, r1
 8007aa6:	6139      	str	r1, [r7, #16]
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	eb63 0301 	sbc.w	r3, r3, r1
 8007aae:	617b      	str	r3, [r7, #20]
 8007ab0:	f04f 0200 	mov.w	r2, #0
 8007ab4:	f04f 0300 	mov.w	r3, #0
 8007ab8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007abc:	4659      	mov	r1, fp
 8007abe:	018b      	lsls	r3, r1, #6
 8007ac0:	4651      	mov	r1, sl
 8007ac2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007ac6:	4651      	mov	r1, sl
 8007ac8:	018a      	lsls	r2, r1, #6
 8007aca:	4651      	mov	r1, sl
 8007acc:	ebb2 0801 	subs.w	r8, r2, r1
 8007ad0:	4659      	mov	r1, fp
 8007ad2:	eb63 0901 	sbc.w	r9, r3, r1
 8007ad6:	f04f 0200 	mov.w	r2, #0
 8007ada:	f04f 0300 	mov.w	r3, #0
 8007ade:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ae2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ae6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007aea:	4690      	mov	r8, r2
 8007aec:	4699      	mov	r9, r3
 8007aee:	4623      	mov	r3, r4
 8007af0:	eb18 0303 	adds.w	r3, r8, r3
 8007af4:	60bb      	str	r3, [r7, #8]
 8007af6:	462b      	mov	r3, r5
 8007af8:	eb49 0303 	adc.w	r3, r9, r3
 8007afc:	60fb      	str	r3, [r7, #12]
 8007afe:	f04f 0200 	mov.w	r2, #0
 8007b02:	f04f 0300 	mov.w	r3, #0
 8007b06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	028b      	lsls	r3, r1, #10
 8007b0e:	4621      	mov	r1, r4
 8007b10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b14:	4621      	mov	r1, r4
 8007b16:	028a      	lsls	r2, r1, #10
 8007b18:	4610      	mov	r0, r2
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b1e:	2200      	movs	r2, #0
 8007b20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007b28:	f7f8 fbba 	bl	80002a0 <__aeabi_uldivmod>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4613      	mov	r3, r2
 8007b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b34:	e058      	b.n	8007be8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b36:	4b38      	ldr	r3, [pc, #224]	@ (8007c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	099b      	lsrs	r3, r3, #6
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	4618      	mov	r0, r3
 8007b40:	4611      	mov	r1, r2
 8007b42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007b46:	623b      	str	r3, [r7, #32]
 8007b48:	2300      	movs	r3, #0
 8007b4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007b50:	4642      	mov	r2, r8
 8007b52:	464b      	mov	r3, r9
 8007b54:	f04f 0000 	mov.w	r0, #0
 8007b58:	f04f 0100 	mov.w	r1, #0
 8007b5c:	0159      	lsls	r1, r3, #5
 8007b5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b62:	0150      	lsls	r0, r2, #5
 8007b64:	4602      	mov	r2, r0
 8007b66:	460b      	mov	r3, r1
 8007b68:	4641      	mov	r1, r8
 8007b6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8007b6e:	4649      	mov	r1, r9
 8007b70:	eb63 0b01 	sbc.w	fp, r3, r1
 8007b74:	f04f 0200 	mov.w	r2, #0
 8007b78:	f04f 0300 	mov.w	r3, #0
 8007b7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007b80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007b84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007b88:	ebb2 040a 	subs.w	r4, r2, sl
 8007b8c:	eb63 050b 	sbc.w	r5, r3, fp
 8007b90:	f04f 0200 	mov.w	r2, #0
 8007b94:	f04f 0300 	mov.w	r3, #0
 8007b98:	00eb      	lsls	r3, r5, #3
 8007b9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b9e:	00e2      	lsls	r2, r4, #3
 8007ba0:	4614      	mov	r4, r2
 8007ba2:	461d      	mov	r5, r3
 8007ba4:	4643      	mov	r3, r8
 8007ba6:	18e3      	adds	r3, r4, r3
 8007ba8:	603b      	str	r3, [r7, #0]
 8007baa:	464b      	mov	r3, r9
 8007bac:	eb45 0303 	adc.w	r3, r5, r3
 8007bb0:	607b      	str	r3, [r7, #4]
 8007bb2:	f04f 0200 	mov.w	r2, #0
 8007bb6:	f04f 0300 	mov.w	r3, #0
 8007bba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007bbe:	4629      	mov	r1, r5
 8007bc0:	028b      	lsls	r3, r1, #10
 8007bc2:	4621      	mov	r1, r4
 8007bc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007bc8:	4621      	mov	r1, r4
 8007bca:	028a      	lsls	r2, r1, #10
 8007bcc:	4610      	mov	r0, r2
 8007bce:	4619      	mov	r1, r3
 8007bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	61bb      	str	r3, [r7, #24]
 8007bd6:	61fa      	str	r2, [r7, #28]
 8007bd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bdc:	f7f8 fb60 	bl	80002a0 <__aeabi_uldivmod>
 8007be0:	4602      	mov	r2, r0
 8007be2:	460b      	mov	r3, r1
 8007be4:	4613      	mov	r3, r2
 8007be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007be8:	4b0b      	ldr	r3, [pc, #44]	@ (8007c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	0c1b      	lsrs	r3, r3, #16
 8007bee:	f003 0303 	and.w	r3, r3, #3
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	005b      	lsls	r3, r3, #1
 8007bf6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007bf8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007bfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007c02:	e002      	b.n	8007c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c04:	4b05      	ldr	r3, [pc, #20]	@ (8007c1c <HAL_RCC_GetSysClockFreq+0x204>)
 8007c06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3750      	adds	r7, #80	@ 0x50
 8007c10:	46bd      	mov	sp, r7
 8007c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c16:	bf00      	nop
 8007c18:	40023800 	.word	0x40023800
 8007c1c:	00f42400 	.word	0x00f42400

08007c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c20:	b480      	push	{r7}
 8007c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c24:	4b03      	ldr	r3, [pc, #12]	@ (8007c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c26:	681b      	ldr	r3, [r3, #0]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	20000294 	.word	0x20000294

08007c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007c3c:	f7ff fff0 	bl	8007c20 <HAL_RCC_GetHCLKFreq>
 8007c40:	4602      	mov	r2, r0
 8007c42:	4b05      	ldr	r3, [pc, #20]	@ (8007c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	0a9b      	lsrs	r3, r3, #10
 8007c48:	f003 0307 	and.w	r3, r3, #7
 8007c4c:	4903      	ldr	r1, [pc, #12]	@ (8007c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c4e:	5ccb      	ldrb	r3, [r1, r3]
 8007c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	40023800 	.word	0x40023800
 8007c5c:	08012654 	.word	0x08012654

08007c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007c64:	f7ff ffdc 	bl	8007c20 <HAL_RCC_GetHCLKFreq>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	4b05      	ldr	r3, [pc, #20]	@ (8007c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	0b5b      	lsrs	r3, r3, #13
 8007c70:	f003 0307 	and.w	r3, r3, #7
 8007c74:	4903      	ldr	r1, [pc, #12]	@ (8007c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c76:	5ccb      	ldrb	r3, [r1, r3]
 8007c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	40023800 	.word	0x40023800
 8007c84:	08012654 	.word	0x08012654

08007c88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e07b      	b.n	8007d92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d108      	bne.n	8007cb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007caa:	d009      	beq.n	8007cc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	61da      	str	r2, [r3, #28]
 8007cb2:	e005      	b.n	8007cc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d106      	bne.n	8007ce0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f7fc f99c 	bl	8004018 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cf6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007d08:	431a      	orrs	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d12:	431a      	orrs	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	f003 0302 	and.w	r3, r3, #2
 8007d1c:	431a      	orrs	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	f003 0301 	and.w	r3, r3, #1
 8007d26:	431a      	orrs	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d30:	431a      	orrs	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	69db      	ldr	r3, [r3, #28]
 8007d36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a1b      	ldr	r3, [r3, #32]
 8007d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d44:	ea42 0103 	orr.w	r1, r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d4c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	430a      	orrs	r2, r1
 8007d56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	0c1b      	lsrs	r3, r3, #16
 8007d5e:	f003 0104 	and.w	r1, r3, #4
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d66:	f003 0210 	and.w	r2, r3, #16
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	69da      	ldr	r2, [r3, #28]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b088      	sub	sp, #32
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	60f8      	str	r0, [r7, #12]
 8007da2:	60b9      	str	r1, [r7, #8]
 8007da4:	603b      	str	r3, [r7, #0]
 8007da6:	4613      	mov	r3, r2
 8007da8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007daa:	f7fc fbc5 	bl	8004538 <HAL_GetTick>
 8007dae:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007db0:	88fb      	ldrh	r3, [r7, #6]
 8007db2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d001      	beq.n	8007dc4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	e12a      	b.n	800801a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <HAL_SPI_Transmit+0x36>
 8007dca:	88fb      	ldrh	r3, [r7, #6]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e122      	b.n	800801a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d101      	bne.n	8007de2 <HAL_SPI_Transmit+0x48>
 8007dde:	2302      	movs	r3, #2
 8007de0:	e11b      	b.n	800801a <HAL_SPI_Transmit+0x280>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2203      	movs	r2, #3
 8007dee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	88fa      	ldrh	r2, [r7, #6]
 8007e02:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	88fa      	ldrh	r2, [r7, #6]
 8007e08:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e30:	d10f      	bne.n	8007e52 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e5c:	2b40      	cmp	r3, #64	@ 0x40
 8007e5e:	d007      	beq.n	8007e70 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e78:	d152      	bne.n	8007f20 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d002      	beq.n	8007e88 <HAL_SPI_Transmit+0xee>
 8007e82:	8b7b      	ldrh	r3, [r7, #26]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d145      	bne.n	8007f14 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e8c:	881a      	ldrh	r2, [r3, #0]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e98:	1c9a      	adds	r2, r3, #2
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007eac:	e032      	b.n	8007f14 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	f003 0302 	and.w	r3, r3, #2
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d112      	bne.n	8007ee2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ec0:	881a      	ldrh	r2, [r3, #0]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ecc:	1c9a      	adds	r2, r3, #2
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007ee0:	e018      	b.n	8007f14 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ee2:	f7fc fb29 	bl	8004538 <HAL_GetTick>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d803      	bhi.n	8007efa <HAL_SPI_Transmit+0x160>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef8:	d102      	bne.n	8007f00 <HAL_SPI_Transmit+0x166>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d109      	bne.n	8007f14 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007f10:	2303      	movs	r3, #3
 8007f12:	e082      	b.n	800801a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1c7      	bne.n	8007eae <HAL_SPI_Transmit+0x114>
 8007f1e:	e053      	b.n	8007fc8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d002      	beq.n	8007f2e <HAL_SPI_Transmit+0x194>
 8007f28:	8b7b      	ldrh	r3, [r7, #26]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d147      	bne.n	8007fbe <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	330c      	adds	r3, #12
 8007f38:	7812      	ldrb	r2, [r2, #0]
 8007f3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f40:	1c5a      	adds	r2, r3, #1
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007f54:	e033      	b.n	8007fbe <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f003 0302 	and.w	r3, r3, #2
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d113      	bne.n	8007f8c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	330c      	adds	r3, #12
 8007f6e:	7812      	ldrb	r2, [r2, #0]
 8007f70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f76:	1c5a      	adds	r2, r3, #1
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	3b01      	subs	r3, #1
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007f8a:	e018      	b.n	8007fbe <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f8c:	f7fc fad4 	bl	8004538 <HAL_GetTick>
 8007f90:	4602      	mov	r2, r0
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d803      	bhi.n	8007fa4 <HAL_SPI_Transmit+0x20a>
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa2:	d102      	bne.n	8007faa <HAL_SPI_Transmit+0x210>
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d109      	bne.n	8007fbe <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e02d      	b.n	800801a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1c6      	bne.n	8007f56 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fc8:	69fa      	ldr	r2, [r7, #28]
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 fa59 	bl	8008484 <SPI_EndRxTxTransaction>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10a      	bne.n	8007ffc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	617b      	str	r3, [r7, #20]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	617b      	str	r3, [r7, #20]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	617b      	str	r3, [r7, #20]
 8007ffa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e000      	b.n	800801a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008018:	2300      	movs	r3, #0
  }
}
 800801a:	4618      	mov	r0, r3
 800801c:	3720      	adds	r7, #32
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b08a      	sub	sp, #40	@ 0x28
 8008026:	af00      	add	r7, sp, #0
 8008028:	60f8      	str	r0, [r7, #12]
 800802a:	60b9      	str	r1, [r7, #8]
 800802c:	607a      	str	r2, [r7, #4]
 800802e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008030:	2301      	movs	r3, #1
 8008032:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008034:	f7fc fa80 	bl	8004538 <HAL_GetTick>
 8008038:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008040:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008048:	887b      	ldrh	r3, [r7, #2]
 800804a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800804c:	7ffb      	ldrb	r3, [r7, #31]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d00c      	beq.n	800806c <HAL_SPI_TransmitReceive+0x4a>
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008058:	d106      	bne.n	8008068 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d102      	bne.n	8008068 <HAL_SPI_TransmitReceive+0x46>
 8008062:	7ffb      	ldrb	r3, [r7, #31]
 8008064:	2b04      	cmp	r3, #4
 8008066:	d001      	beq.n	800806c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8008068:	2302      	movs	r3, #2
 800806a:	e17f      	b.n	800836c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d005      	beq.n	800807e <HAL_SPI_TransmitReceive+0x5c>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <HAL_SPI_TransmitReceive+0x5c>
 8008078:	887b      	ldrh	r3, [r7, #2]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d101      	bne.n	8008082 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e174      	b.n	800836c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008088:	2b01      	cmp	r3, #1
 800808a:	d101      	bne.n	8008090 <HAL_SPI_TransmitReceive+0x6e>
 800808c:	2302      	movs	r3, #2
 800808e:	e16d      	b.n	800836c <HAL_SPI_TransmitReceive+0x34a>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b04      	cmp	r3, #4
 80080a2:	d003      	beq.n	80080ac <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2205      	movs	r2, #5
 80080a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	887a      	ldrh	r2, [r7, #2]
 80080bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	887a      	ldrh	r2, [r7, #2]
 80080c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	887a      	ldrh	r2, [r7, #2]
 80080ce:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	887a      	ldrh	r2, [r7, #2]
 80080d4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ec:	2b40      	cmp	r3, #64	@ 0x40
 80080ee:	d007      	beq.n	8008100 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80080fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008108:	d17e      	bne.n	8008208 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <HAL_SPI_TransmitReceive+0xf6>
 8008112:	8afb      	ldrh	r3, [r7, #22]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d16c      	bne.n	80081f2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800811c:	881a      	ldrh	r2, [r3, #0]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008128:	1c9a      	adds	r2, r3, #2
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008132:	b29b      	uxth	r3, r3
 8008134:	3b01      	subs	r3, #1
 8008136:	b29a      	uxth	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800813c:	e059      	b.n	80081f2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f003 0302 	and.w	r3, r3, #2
 8008148:	2b02      	cmp	r3, #2
 800814a:	d11b      	bne.n	8008184 <HAL_SPI_TransmitReceive+0x162>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008150:	b29b      	uxth	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d016      	beq.n	8008184 <HAL_SPI_TransmitReceive+0x162>
 8008156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008158:	2b01      	cmp	r3, #1
 800815a:	d113      	bne.n	8008184 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008160:	881a      	ldrh	r2, [r3, #0]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800816c:	1c9a      	adds	r2, r3, #2
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008176:	b29b      	uxth	r3, r3
 8008178:	3b01      	subs	r3, #1
 800817a:	b29a      	uxth	r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008180:	2300      	movs	r3, #0
 8008182:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	2b01      	cmp	r3, #1
 8008190:	d119      	bne.n	80081c6 <HAL_SPI_TransmitReceive+0x1a4>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008196:	b29b      	uxth	r3, r3
 8008198:	2b00      	cmp	r3, #0
 800819a:	d014      	beq.n	80081c6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68da      	ldr	r2, [r3, #12]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a6:	b292      	uxth	r2, r2
 80081a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ae:	1c9a      	adds	r2, r3, #2
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	3b01      	subs	r3, #1
 80081bc:	b29a      	uxth	r2, r3
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80081c2:	2301      	movs	r3, #1
 80081c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80081c6:	f7fc f9b7 	bl	8004538 <HAL_GetTick>
 80081ca:	4602      	mov	r2, r0
 80081cc:	6a3b      	ldr	r3, [r7, #32]
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d80d      	bhi.n	80081f2 <HAL_SPI_TransmitReceive+0x1d0>
 80081d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081dc:	d009      	beq.n	80081f2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80081ee:	2303      	movs	r3, #3
 80081f0:	e0bc      	b.n	800836c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1a0      	bne.n	800813e <HAL_SPI_TransmitReceive+0x11c>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008200:	b29b      	uxth	r3, r3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d19b      	bne.n	800813e <HAL_SPI_TransmitReceive+0x11c>
 8008206:	e082      	b.n	800830e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d002      	beq.n	8008216 <HAL_SPI_TransmitReceive+0x1f4>
 8008210:	8afb      	ldrh	r3, [r7, #22]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d171      	bne.n	80082fa <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	330c      	adds	r3, #12
 8008220:	7812      	ldrb	r2, [r2, #0]
 8008222:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008228:	1c5a      	adds	r2, r3, #1
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008232:	b29b      	uxth	r3, r3
 8008234:	3b01      	subs	r3, #1
 8008236:	b29a      	uxth	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800823c:	e05d      	b.n	80082fa <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f003 0302 	and.w	r3, r3, #2
 8008248:	2b02      	cmp	r3, #2
 800824a:	d11c      	bne.n	8008286 <HAL_SPI_TransmitReceive+0x264>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008250:	b29b      	uxth	r3, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d017      	beq.n	8008286 <HAL_SPI_TransmitReceive+0x264>
 8008256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008258:	2b01      	cmp	r3, #1
 800825a:	d114      	bne.n	8008286 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	330c      	adds	r3, #12
 8008266:	7812      	ldrb	r2, [r2, #0]
 8008268:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800826e:	1c5a      	adds	r2, r3, #1
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008278:	b29b      	uxth	r3, r3
 800827a:	3b01      	subs	r3, #1
 800827c:	b29a      	uxth	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b01      	cmp	r3, #1
 8008292:	d119      	bne.n	80082c8 <HAL_SPI_TransmitReceive+0x2a6>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008298:	b29b      	uxth	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d014      	beq.n	80082c8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68da      	ldr	r2, [r3, #12]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082a8:	b2d2      	uxtb	r2, r2
 80082aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	3b01      	subs	r3, #1
 80082be:	b29a      	uxth	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80082c4:	2301      	movs	r3, #1
 80082c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80082c8:	f7fc f936 	bl	8004538 <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	6a3b      	ldr	r3, [r7, #32]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d803      	bhi.n	80082e0 <HAL_SPI_TransmitReceive+0x2be>
 80082d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082de:	d102      	bne.n	80082e6 <HAL_SPI_TransmitReceive+0x2c4>
 80082e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d109      	bne.n	80082fa <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e038      	b.n	800836c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082fe:	b29b      	uxth	r3, r3
 8008300:	2b00      	cmp	r3, #0
 8008302:	d19c      	bne.n	800823e <HAL_SPI_TransmitReceive+0x21c>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008308:	b29b      	uxth	r3, r3
 800830a:	2b00      	cmp	r3, #0
 800830c:	d197      	bne.n	800823e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800830e:	6a3a      	ldr	r2, [r7, #32]
 8008310:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 f8b6 	bl	8008484 <SPI_EndRxTxTransaction>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d008      	beq.n	8008330 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2220      	movs	r2, #32
 8008322:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e01d      	b.n	800836c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10a      	bne.n	800834e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008338:	2300      	movs	r3, #0
 800833a:	613b      	str	r3, [r7, #16]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	613b      	str	r3, [r7, #16]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	613b      	str	r3, [r7, #16]
 800834c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2201      	movs	r2, #1
 8008352:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e000      	b.n	800836c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800836a:	2300      	movs	r3, #0
  }
}
 800836c:	4618      	mov	r0, r3
 800836e:	3728      	adds	r7, #40	@ 0x28
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b088      	sub	sp, #32
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	603b      	str	r3, [r7, #0]
 8008380:	4613      	mov	r3, r2
 8008382:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008384:	f7fc f8d8 	bl	8004538 <HAL_GetTick>
 8008388:	4602      	mov	r2, r0
 800838a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838c:	1a9b      	subs	r3, r3, r2
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	4413      	add	r3, r2
 8008392:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008394:	f7fc f8d0 	bl	8004538 <HAL_GetTick>
 8008398:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800839a:	4b39      	ldr	r3, [pc, #228]	@ (8008480 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	015b      	lsls	r3, r3, #5
 80083a0:	0d1b      	lsrs	r3, r3, #20
 80083a2:	69fa      	ldr	r2, [r7, #28]
 80083a4:	fb02 f303 	mul.w	r3, r2, r3
 80083a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083aa:	e054      	b.n	8008456 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b2:	d050      	beq.n	8008456 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083b4:	f7fc f8c0 	bl	8004538 <HAL_GetTick>
 80083b8:	4602      	mov	r2, r0
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	69fa      	ldr	r2, [r7, #28]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d902      	bls.n	80083ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d13d      	bne.n	8008446 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	685a      	ldr	r2, [r3, #4]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80083d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80083e2:	d111      	bne.n	8008408 <SPI_WaitFlagStateUntilTimeout+0x94>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083ec:	d004      	beq.n	80083f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083f6:	d107      	bne.n	8008408 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008406:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800840c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008410:	d10f      	bne.n	8008432 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008420:	601a      	str	r2, [r3, #0]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008430:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2201      	movs	r2, #1
 8008436:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e017      	b.n	8008476 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d101      	bne.n	8008450 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800844c:	2300      	movs	r3, #0
 800844e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	3b01      	subs	r3, #1
 8008454:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	4013      	ands	r3, r2
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	429a      	cmp	r2, r3
 8008464:	bf0c      	ite	eq
 8008466:	2301      	moveq	r3, #1
 8008468:	2300      	movne	r3, #0
 800846a:	b2db      	uxtb	r3, r3
 800846c:	461a      	mov	r2, r3
 800846e:	79fb      	ldrb	r3, [r7, #7]
 8008470:	429a      	cmp	r2, r3
 8008472:	d19b      	bne.n	80083ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3720      	adds	r7, #32
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	20000294 	.word	0x20000294

08008484 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b088      	sub	sp, #32
 8008488:	af02      	add	r7, sp, #8
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	9300      	str	r3, [sp, #0]
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	2201      	movs	r2, #1
 8008498:	2102      	movs	r1, #2
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f7ff ff6a 	bl	8008374 <SPI_WaitFlagStateUntilTimeout>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d007      	beq.n	80084b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084aa:	f043 0220 	orr.w	r2, r3, #32
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e032      	b.n	800851c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80084b6:	4b1b      	ldr	r3, [pc, #108]	@ (8008524 <SPI_EndRxTxTransaction+0xa0>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a1b      	ldr	r2, [pc, #108]	@ (8008528 <SPI_EndRxTxTransaction+0xa4>)
 80084bc:	fba2 2303 	umull	r2, r3, r2, r3
 80084c0:	0d5b      	lsrs	r3, r3, #21
 80084c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80084c6:	fb02 f303 	mul.w	r3, r2, r3
 80084ca:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084d4:	d112      	bne.n	80084fc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	2200      	movs	r2, #0
 80084de:	2180      	movs	r1, #128	@ 0x80
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f7ff ff47 	bl	8008374 <SPI_WaitFlagStateUntilTimeout>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d016      	beq.n	800851a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084f0:	f043 0220 	orr.w	r2, r3, #32
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80084f8:	2303      	movs	r3, #3
 80084fa:	e00f      	b.n	800851c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00a      	beq.n	8008518 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	3b01      	subs	r3, #1
 8008506:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008512:	2b80      	cmp	r3, #128	@ 0x80
 8008514:	d0f2      	beq.n	80084fc <SPI_EndRxTxTransaction+0x78>
 8008516:	e000      	b.n	800851a <SPI_EndRxTxTransaction+0x96>
        break;
 8008518:	bf00      	nop
  }

  return HAL_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	20000294 	.word	0x20000294
 8008528:	165e9f81 	.word	0x165e9f81

0800852c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e041      	b.n	80085c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d106      	bne.n	8008558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7fb fda8 	bl	80040a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2202      	movs	r2, #2
 800855c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	3304      	adds	r3, #4
 8008568:	4619      	mov	r1, r3
 800856a:	4610      	mov	r0, r2
 800856c:	f000 fb6e 	bl	8008c4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
	...

080085cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d001      	beq.n	80085e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e04e      	b.n	8008682 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2202      	movs	r2, #2
 80085e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68da      	ldr	r2, [r3, #12]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f042 0201 	orr.w	r2, r2, #1
 80085fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a23      	ldr	r2, [pc, #140]	@ (8008690 <HAL_TIM_Base_Start_IT+0xc4>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d022      	beq.n	800864c <HAL_TIM_Base_Start_IT+0x80>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800860e:	d01d      	beq.n	800864c <HAL_TIM_Base_Start_IT+0x80>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a1f      	ldr	r2, [pc, #124]	@ (8008694 <HAL_TIM_Base_Start_IT+0xc8>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d018      	beq.n	800864c <HAL_TIM_Base_Start_IT+0x80>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a1e      	ldr	r2, [pc, #120]	@ (8008698 <HAL_TIM_Base_Start_IT+0xcc>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d013      	beq.n	800864c <HAL_TIM_Base_Start_IT+0x80>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a1c      	ldr	r2, [pc, #112]	@ (800869c <HAL_TIM_Base_Start_IT+0xd0>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d00e      	beq.n	800864c <HAL_TIM_Base_Start_IT+0x80>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a1b      	ldr	r2, [pc, #108]	@ (80086a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d009      	beq.n	800864c <HAL_TIM_Base_Start_IT+0x80>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a19      	ldr	r2, [pc, #100]	@ (80086a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d004      	beq.n	800864c <HAL_TIM_Base_Start_IT+0x80>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a18      	ldr	r2, [pc, #96]	@ (80086a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d111      	bne.n	8008670 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f003 0307 	and.w	r3, r3, #7
 8008656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b06      	cmp	r3, #6
 800865c:	d010      	beq.n	8008680 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f042 0201 	orr.w	r2, r2, #1
 800866c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800866e:	e007      	b.n	8008680 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f042 0201 	orr.w	r2, r2, #1
 800867e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3714      	adds	r7, #20
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	40010000 	.word	0x40010000
 8008694:	40000400 	.word	0x40000400
 8008698:	40000800 	.word	0x40000800
 800869c:	40000c00 	.word	0x40000c00
 80086a0:	40010400 	.word	0x40010400
 80086a4:	40014000 	.word	0x40014000
 80086a8:	40001800 	.word	0x40001800

080086ac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68da      	ldr	r2, [r3, #12]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f022 0201 	bic.w	r2, r2, #1
 80086c2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6a1a      	ldr	r2, [r3, #32]
 80086ca:	f241 1311 	movw	r3, #4369	@ 0x1111
 80086ce:	4013      	ands	r3, r2
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10f      	bne.n	80086f4 <HAL_TIM_Base_Stop_IT+0x48>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6a1a      	ldr	r2, [r3, #32]
 80086da:	f240 4344 	movw	r3, #1092	@ 0x444
 80086de:	4013      	ands	r3, r2
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d107      	bne.n	80086f4 <HAL_TIM_Base_Stop_IT+0x48>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f022 0201 	bic.w	r2, r2, #1
 80086f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b082      	sub	sp, #8
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d101      	bne.n	800871c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e041      	b.n	80087a0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008722:	b2db      	uxtb	r3, r3
 8008724:	2b00      	cmp	r3, #0
 8008726:	d106      	bne.n	8008736 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7fb fcd9 	bl	80040e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2202      	movs	r2, #2
 800873a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	3304      	adds	r3, #4
 8008746:	4619      	mov	r1, r3
 8008748:	4610      	mov	r0, r2
 800874a:	f000 fa7f 	bl	8008c4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d109      	bne.n	80087cc <HAL_TIM_PWM_Start+0x24>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	bf14      	ite	ne
 80087c4:	2301      	movne	r3, #1
 80087c6:	2300      	moveq	r3, #0
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	e022      	b.n	8008812 <HAL_TIM_PWM_Start+0x6a>
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	2b04      	cmp	r3, #4
 80087d0:	d109      	bne.n	80087e6 <HAL_TIM_PWM_Start+0x3e>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	2b01      	cmp	r3, #1
 80087dc:	bf14      	ite	ne
 80087de:	2301      	movne	r3, #1
 80087e0:	2300      	moveq	r3, #0
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	e015      	b.n	8008812 <HAL_TIM_PWM_Start+0x6a>
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	2b08      	cmp	r3, #8
 80087ea:	d109      	bne.n	8008800 <HAL_TIM_PWM_Start+0x58>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	bf14      	ite	ne
 80087f8:	2301      	movne	r3, #1
 80087fa:	2300      	moveq	r3, #0
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	e008      	b.n	8008812 <HAL_TIM_PWM_Start+0x6a>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b01      	cmp	r3, #1
 800880a:	bf14      	ite	ne
 800880c:	2301      	movne	r3, #1
 800880e:	2300      	moveq	r3, #0
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e07c      	b.n	8008914 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d104      	bne.n	800882a <HAL_TIM_PWM_Start+0x82>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2202      	movs	r2, #2
 8008824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008828:	e013      	b.n	8008852 <HAL_TIM_PWM_Start+0xaa>
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	2b04      	cmp	r3, #4
 800882e:	d104      	bne.n	800883a <HAL_TIM_PWM_Start+0x92>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2202      	movs	r2, #2
 8008834:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008838:	e00b      	b.n	8008852 <HAL_TIM_PWM_Start+0xaa>
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	2b08      	cmp	r3, #8
 800883e:	d104      	bne.n	800884a <HAL_TIM_PWM_Start+0xa2>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2202      	movs	r2, #2
 8008844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008848:	e003      	b.n	8008852 <HAL_TIM_PWM_Start+0xaa>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2202      	movs	r2, #2
 800884e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2201      	movs	r2, #1
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	4618      	mov	r0, r3
 800885c:	f000 fcec 	bl	8009238 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a2d      	ldr	r2, [pc, #180]	@ (800891c <HAL_TIM_PWM_Start+0x174>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d004      	beq.n	8008874 <HAL_TIM_PWM_Start+0xcc>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a2c      	ldr	r2, [pc, #176]	@ (8008920 <HAL_TIM_PWM_Start+0x178>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d101      	bne.n	8008878 <HAL_TIM_PWM_Start+0xd0>
 8008874:	2301      	movs	r3, #1
 8008876:	e000      	b.n	800887a <HAL_TIM_PWM_Start+0xd2>
 8008878:	2300      	movs	r3, #0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d007      	beq.n	800888e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800888c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a22      	ldr	r2, [pc, #136]	@ (800891c <HAL_TIM_PWM_Start+0x174>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d022      	beq.n	80088de <HAL_TIM_PWM_Start+0x136>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088a0:	d01d      	beq.n	80088de <HAL_TIM_PWM_Start+0x136>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a1f      	ldr	r2, [pc, #124]	@ (8008924 <HAL_TIM_PWM_Start+0x17c>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d018      	beq.n	80088de <HAL_TIM_PWM_Start+0x136>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a1d      	ldr	r2, [pc, #116]	@ (8008928 <HAL_TIM_PWM_Start+0x180>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d013      	beq.n	80088de <HAL_TIM_PWM_Start+0x136>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a1c      	ldr	r2, [pc, #112]	@ (800892c <HAL_TIM_PWM_Start+0x184>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d00e      	beq.n	80088de <HAL_TIM_PWM_Start+0x136>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a16      	ldr	r2, [pc, #88]	@ (8008920 <HAL_TIM_PWM_Start+0x178>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d009      	beq.n	80088de <HAL_TIM_PWM_Start+0x136>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a18      	ldr	r2, [pc, #96]	@ (8008930 <HAL_TIM_PWM_Start+0x188>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d004      	beq.n	80088de <HAL_TIM_PWM_Start+0x136>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a16      	ldr	r2, [pc, #88]	@ (8008934 <HAL_TIM_PWM_Start+0x18c>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d111      	bne.n	8008902 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f003 0307 	and.w	r3, r3, #7
 80088e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2b06      	cmp	r3, #6
 80088ee:	d010      	beq.n	8008912 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f042 0201 	orr.w	r2, r2, #1
 80088fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008900:	e007      	b.n	8008912 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f042 0201 	orr.w	r2, r2, #1
 8008910:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	40010000 	.word	0x40010000
 8008920:	40010400 	.word	0x40010400
 8008924:	40000400 	.word	0x40000400
 8008928:	40000800 	.word	0x40000800
 800892c:	40000c00 	.word	0x40000c00
 8008930:	40014000 	.word	0x40014000
 8008934:	40001800 	.word	0x40001800

08008938 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008944:	2300      	movs	r3, #0
 8008946:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800894e:	2b01      	cmp	r3, #1
 8008950:	d101      	bne.n	8008956 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008952:	2302      	movs	r3, #2
 8008954:	e0ae      	b.n	8008ab4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2b0c      	cmp	r3, #12
 8008962:	f200 809f 	bhi.w	8008aa4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008966:	a201      	add	r2, pc, #4	@ (adr r2, 800896c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896c:	080089a1 	.word	0x080089a1
 8008970:	08008aa5 	.word	0x08008aa5
 8008974:	08008aa5 	.word	0x08008aa5
 8008978:	08008aa5 	.word	0x08008aa5
 800897c:	080089e1 	.word	0x080089e1
 8008980:	08008aa5 	.word	0x08008aa5
 8008984:	08008aa5 	.word	0x08008aa5
 8008988:	08008aa5 	.word	0x08008aa5
 800898c:	08008a23 	.word	0x08008a23
 8008990:	08008aa5 	.word	0x08008aa5
 8008994:	08008aa5 	.word	0x08008aa5
 8008998:	08008aa5 	.word	0x08008aa5
 800899c:	08008a63 	.word	0x08008a63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68b9      	ldr	r1, [r7, #8]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f000 f9fc 	bl	8008da4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	699a      	ldr	r2, [r3, #24]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f042 0208 	orr.w	r2, r2, #8
 80089ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	699a      	ldr	r2, [r3, #24]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f022 0204 	bic.w	r2, r2, #4
 80089ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6999      	ldr	r1, [r3, #24]
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	691a      	ldr	r2, [r3, #16]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	430a      	orrs	r2, r1
 80089dc:	619a      	str	r2, [r3, #24]
      break;
 80089de:	e064      	b.n	8008aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68b9      	ldr	r1, [r7, #8]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 fa4c 	bl	8008e84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	699a      	ldr	r2, [r3, #24]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	699a      	ldr	r2, [r3, #24]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6999      	ldr	r1, [r3, #24]
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	021a      	lsls	r2, r3, #8
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	430a      	orrs	r2, r1
 8008a1e:	619a      	str	r2, [r3, #24]
      break;
 8008a20:	e043      	b.n	8008aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68b9      	ldr	r1, [r7, #8]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f000 faa1 	bl	8008f70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	69da      	ldr	r2, [r3, #28]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f042 0208 	orr.w	r2, r2, #8
 8008a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	69da      	ldr	r2, [r3, #28]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f022 0204 	bic.w	r2, r2, #4
 8008a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	69d9      	ldr	r1, [r3, #28]
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	691a      	ldr	r2, [r3, #16]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	430a      	orrs	r2, r1
 8008a5e:	61da      	str	r2, [r3, #28]
      break;
 8008a60:	e023      	b.n	8008aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68b9      	ldr	r1, [r7, #8]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 faf5 	bl	8009058 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	69da      	ldr	r2, [r3, #28]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	69da      	ldr	r2, [r3, #28]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	69d9      	ldr	r1, [r3, #28]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	021a      	lsls	r2, r3, #8
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	61da      	str	r2, [r3, #28]
      break;
 8008aa2:	e002      	b.n	8008aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8008aa8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3718      	adds	r7, #24
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d101      	bne.n	8008ad8 <HAL_TIM_ConfigClockSource+0x1c>
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	e0b4      	b.n	8008c42 <HAL_TIM_ConfigClockSource+0x186>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2202      	movs	r2, #2
 8008ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008afe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68ba      	ldr	r2, [r7, #8]
 8008b06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b10:	d03e      	beq.n	8008b90 <HAL_TIM_ConfigClockSource+0xd4>
 8008b12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b16:	f200 8087 	bhi.w	8008c28 <HAL_TIM_ConfigClockSource+0x16c>
 8008b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b1e:	f000 8086 	beq.w	8008c2e <HAL_TIM_ConfigClockSource+0x172>
 8008b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b26:	d87f      	bhi.n	8008c28 <HAL_TIM_ConfigClockSource+0x16c>
 8008b28:	2b70      	cmp	r3, #112	@ 0x70
 8008b2a:	d01a      	beq.n	8008b62 <HAL_TIM_ConfigClockSource+0xa6>
 8008b2c:	2b70      	cmp	r3, #112	@ 0x70
 8008b2e:	d87b      	bhi.n	8008c28 <HAL_TIM_ConfigClockSource+0x16c>
 8008b30:	2b60      	cmp	r3, #96	@ 0x60
 8008b32:	d050      	beq.n	8008bd6 <HAL_TIM_ConfigClockSource+0x11a>
 8008b34:	2b60      	cmp	r3, #96	@ 0x60
 8008b36:	d877      	bhi.n	8008c28 <HAL_TIM_ConfigClockSource+0x16c>
 8008b38:	2b50      	cmp	r3, #80	@ 0x50
 8008b3a:	d03c      	beq.n	8008bb6 <HAL_TIM_ConfigClockSource+0xfa>
 8008b3c:	2b50      	cmp	r3, #80	@ 0x50
 8008b3e:	d873      	bhi.n	8008c28 <HAL_TIM_ConfigClockSource+0x16c>
 8008b40:	2b40      	cmp	r3, #64	@ 0x40
 8008b42:	d058      	beq.n	8008bf6 <HAL_TIM_ConfigClockSource+0x13a>
 8008b44:	2b40      	cmp	r3, #64	@ 0x40
 8008b46:	d86f      	bhi.n	8008c28 <HAL_TIM_ConfigClockSource+0x16c>
 8008b48:	2b30      	cmp	r3, #48	@ 0x30
 8008b4a:	d064      	beq.n	8008c16 <HAL_TIM_ConfigClockSource+0x15a>
 8008b4c:	2b30      	cmp	r3, #48	@ 0x30
 8008b4e:	d86b      	bhi.n	8008c28 <HAL_TIM_ConfigClockSource+0x16c>
 8008b50:	2b20      	cmp	r3, #32
 8008b52:	d060      	beq.n	8008c16 <HAL_TIM_ConfigClockSource+0x15a>
 8008b54:	2b20      	cmp	r3, #32
 8008b56:	d867      	bhi.n	8008c28 <HAL_TIM_ConfigClockSource+0x16c>
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d05c      	beq.n	8008c16 <HAL_TIM_ConfigClockSource+0x15a>
 8008b5c:	2b10      	cmp	r3, #16
 8008b5e:	d05a      	beq.n	8008c16 <HAL_TIM_ConfigClockSource+0x15a>
 8008b60:	e062      	b.n	8008c28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b72:	f000 fb41 	bl	80091f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008b84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	609a      	str	r2, [r3, #8]
      break;
 8008b8e:	e04f      	b.n	8008c30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ba0:	f000 fb2a 	bl	80091f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	689a      	ldr	r2, [r3, #8]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008bb2:	609a      	str	r2, [r3, #8]
      break;
 8008bb4:	e03c      	b.n	8008c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	f000 fa9e 	bl	8009104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2150      	movs	r1, #80	@ 0x50
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 faf7 	bl	80091c2 <TIM_ITRx_SetConfig>
      break;
 8008bd4:	e02c      	b.n	8008c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008be2:	461a      	mov	r2, r3
 8008be4:	f000 fabd 	bl	8009162 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2160      	movs	r1, #96	@ 0x60
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f000 fae7 	bl	80091c2 <TIM_ITRx_SetConfig>
      break;
 8008bf4:	e01c      	b.n	8008c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c02:	461a      	mov	r2, r3
 8008c04:	f000 fa7e 	bl	8009104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2140      	movs	r1, #64	@ 0x40
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 fad7 	bl	80091c2 <TIM_ITRx_SetConfig>
      break;
 8008c14:	e00c      	b.n	8008c30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	4610      	mov	r0, r2
 8008c22:	f000 face 	bl	80091c2 <TIM_ITRx_SetConfig>
      break;
 8008c26:	e003      	b.n	8008c30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c2c:	e000      	b.n	8008c30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008c2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
	...

08008c4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a46      	ldr	r2, [pc, #280]	@ (8008d78 <TIM_Base_SetConfig+0x12c>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d013      	beq.n	8008c8c <TIM_Base_SetConfig+0x40>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c6a:	d00f      	beq.n	8008c8c <TIM_Base_SetConfig+0x40>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a43      	ldr	r2, [pc, #268]	@ (8008d7c <TIM_Base_SetConfig+0x130>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d00b      	beq.n	8008c8c <TIM_Base_SetConfig+0x40>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a42      	ldr	r2, [pc, #264]	@ (8008d80 <TIM_Base_SetConfig+0x134>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d007      	beq.n	8008c8c <TIM_Base_SetConfig+0x40>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a41      	ldr	r2, [pc, #260]	@ (8008d84 <TIM_Base_SetConfig+0x138>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d003      	beq.n	8008c8c <TIM_Base_SetConfig+0x40>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a40      	ldr	r2, [pc, #256]	@ (8008d88 <TIM_Base_SetConfig+0x13c>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d108      	bne.n	8008c9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a35      	ldr	r2, [pc, #212]	@ (8008d78 <TIM_Base_SetConfig+0x12c>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d02b      	beq.n	8008cfe <TIM_Base_SetConfig+0xb2>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cac:	d027      	beq.n	8008cfe <TIM_Base_SetConfig+0xb2>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a32      	ldr	r2, [pc, #200]	@ (8008d7c <TIM_Base_SetConfig+0x130>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d023      	beq.n	8008cfe <TIM_Base_SetConfig+0xb2>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a31      	ldr	r2, [pc, #196]	@ (8008d80 <TIM_Base_SetConfig+0x134>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d01f      	beq.n	8008cfe <TIM_Base_SetConfig+0xb2>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a30      	ldr	r2, [pc, #192]	@ (8008d84 <TIM_Base_SetConfig+0x138>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d01b      	beq.n	8008cfe <TIM_Base_SetConfig+0xb2>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a2f      	ldr	r2, [pc, #188]	@ (8008d88 <TIM_Base_SetConfig+0x13c>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d017      	beq.n	8008cfe <TIM_Base_SetConfig+0xb2>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a2e      	ldr	r2, [pc, #184]	@ (8008d8c <TIM_Base_SetConfig+0x140>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d013      	beq.n	8008cfe <TIM_Base_SetConfig+0xb2>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a2d      	ldr	r2, [pc, #180]	@ (8008d90 <TIM_Base_SetConfig+0x144>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d00f      	beq.n	8008cfe <TIM_Base_SetConfig+0xb2>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a2c      	ldr	r2, [pc, #176]	@ (8008d94 <TIM_Base_SetConfig+0x148>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d00b      	beq.n	8008cfe <TIM_Base_SetConfig+0xb2>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a2b      	ldr	r2, [pc, #172]	@ (8008d98 <TIM_Base_SetConfig+0x14c>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d007      	beq.n	8008cfe <TIM_Base_SetConfig+0xb2>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a2a      	ldr	r2, [pc, #168]	@ (8008d9c <TIM_Base_SetConfig+0x150>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d003      	beq.n	8008cfe <TIM_Base_SetConfig+0xb2>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a29      	ldr	r2, [pc, #164]	@ (8008da0 <TIM_Base_SetConfig+0x154>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d108      	bne.n	8008d10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	689a      	ldr	r2, [r3, #8]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a10      	ldr	r2, [pc, #64]	@ (8008d78 <TIM_Base_SetConfig+0x12c>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d003      	beq.n	8008d44 <TIM_Base_SetConfig+0xf8>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a12      	ldr	r2, [pc, #72]	@ (8008d88 <TIM_Base_SetConfig+0x13c>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d103      	bne.n	8008d4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	691a      	ldr	r2, [r3, #16]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	f003 0301 	and.w	r3, r3, #1
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d105      	bne.n	8008d6a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	f023 0201 	bic.w	r2, r3, #1
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	611a      	str	r2, [r3, #16]
  }
}
 8008d6a:	bf00      	nop
 8008d6c:	3714      	adds	r7, #20
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	40010000 	.word	0x40010000
 8008d7c:	40000400 	.word	0x40000400
 8008d80:	40000800 	.word	0x40000800
 8008d84:	40000c00 	.word	0x40000c00
 8008d88:	40010400 	.word	0x40010400
 8008d8c:	40014000 	.word	0x40014000
 8008d90:	40014400 	.word	0x40014400
 8008d94:	40014800 	.word	0x40014800
 8008d98:	40001800 	.word	0x40001800
 8008d9c:	40001c00 	.word	0x40001c00
 8008da0:	40002000 	.word	0x40002000

08008da4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b087      	sub	sp, #28
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a1b      	ldr	r3, [r3, #32]
 8008db2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a1b      	ldr	r3, [r3, #32]
 8008db8:	f023 0201 	bic.w	r2, r3, #1
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f023 0303 	bic.w	r3, r3, #3
 8008dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f023 0302 	bic.w	r3, r3, #2
 8008dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	697a      	ldr	r2, [r7, #20]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a20      	ldr	r2, [pc, #128]	@ (8008e7c <TIM_OC1_SetConfig+0xd8>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d003      	beq.n	8008e08 <TIM_OC1_SetConfig+0x64>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a1f      	ldr	r2, [pc, #124]	@ (8008e80 <TIM_OC1_SetConfig+0xdc>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d10c      	bne.n	8008e22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	f023 0308 	bic.w	r3, r3, #8
 8008e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	f023 0304 	bic.w	r3, r3, #4
 8008e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a15      	ldr	r2, [pc, #84]	@ (8008e7c <TIM_OC1_SetConfig+0xd8>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d003      	beq.n	8008e32 <TIM_OC1_SetConfig+0x8e>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a14      	ldr	r2, [pc, #80]	@ (8008e80 <TIM_OC1_SetConfig+0xdc>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d111      	bne.n	8008e56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	695b      	ldr	r3, [r3, #20]
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	693a      	ldr	r2, [r7, #16]
 8008e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	697a      	ldr	r2, [r7, #20]
 8008e6e:	621a      	str	r2, [r3, #32]
}
 8008e70:	bf00      	nop
 8008e72:	371c      	adds	r7, #28
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	40010000 	.word	0x40010000
 8008e80:	40010400 	.word	0x40010400

08008e84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b087      	sub	sp, #28
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a1b      	ldr	r3, [r3, #32]
 8008e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a1b      	ldr	r3, [r3, #32]
 8008e98:	f023 0210 	bic.w	r2, r3, #16
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	021b      	lsls	r3, r3, #8
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	f023 0320 	bic.w	r3, r3, #32
 8008ece:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	011b      	lsls	r3, r3, #4
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a22      	ldr	r2, [pc, #136]	@ (8008f68 <TIM_OC2_SetConfig+0xe4>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d003      	beq.n	8008eec <TIM_OC2_SetConfig+0x68>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a21      	ldr	r2, [pc, #132]	@ (8008f6c <TIM_OC2_SetConfig+0xe8>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d10d      	bne.n	8008f08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	011b      	lsls	r3, r3, #4
 8008efa:	697a      	ldr	r2, [r7, #20]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a17      	ldr	r2, [pc, #92]	@ (8008f68 <TIM_OC2_SetConfig+0xe4>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d003      	beq.n	8008f18 <TIM_OC2_SetConfig+0x94>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a16      	ldr	r2, [pc, #88]	@ (8008f6c <TIM_OC2_SetConfig+0xe8>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d113      	bne.n	8008f40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	695b      	ldr	r3, [r3, #20]
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	693a      	ldr	r2, [r7, #16]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	693a      	ldr	r2, [r7, #16]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685a      	ldr	r2, [r3, #4]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	621a      	str	r2, [r3, #32]
}
 8008f5a:	bf00      	nop
 8008f5c:	371c      	adds	r7, #28
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	40010000 	.word	0x40010000
 8008f6c:	40010400 	.word	0x40010400

08008f70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b087      	sub	sp, #28
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a1b      	ldr	r3, [r3, #32]
 8008f7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a1b      	ldr	r3, [r3, #32]
 8008f84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	69db      	ldr	r3, [r3, #28]
 8008f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f023 0303 	bic.w	r3, r3, #3
 8008fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	021b      	lsls	r3, r3, #8
 8008fc0:	697a      	ldr	r2, [r7, #20]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a21      	ldr	r2, [pc, #132]	@ (8009050 <TIM_OC3_SetConfig+0xe0>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d003      	beq.n	8008fd6 <TIM_OC3_SetConfig+0x66>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a20      	ldr	r2, [pc, #128]	@ (8009054 <TIM_OC3_SetConfig+0xe4>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d10d      	bne.n	8008ff2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	021b      	lsls	r3, r3, #8
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a16      	ldr	r2, [pc, #88]	@ (8009050 <TIM_OC3_SetConfig+0xe0>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d003      	beq.n	8009002 <TIM_OC3_SetConfig+0x92>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a15      	ldr	r2, [pc, #84]	@ (8009054 <TIM_OC3_SetConfig+0xe4>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d113      	bne.n	800902a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	011b      	lsls	r3, r3, #4
 8009018:	693a      	ldr	r2, [r7, #16]
 800901a:	4313      	orrs	r3, r2
 800901c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	699b      	ldr	r3, [r3, #24]
 8009022:	011b      	lsls	r3, r3, #4
 8009024:	693a      	ldr	r2, [r7, #16]
 8009026:	4313      	orrs	r3, r2
 8009028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	685a      	ldr	r2, [r3, #4]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	697a      	ldr	r2, [r7, #20]
 8009042:	621a      	str	r2, [r3, #32]
}
 8009044:	bf00      	nop
 8009046:	371c      	adds	r7, #28
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr
 8009050:	40010000 	.word	0x40010000
 8009054:	40010400 	.word	0x40010400

08009058 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a1b      	ldr	r3, [r3, #32]
 8009066:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a1b      	ldr	r3, [r3, #32]
 800906c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	69db      	ldr	r3, [r3, #28]
 800907e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800908e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	021b      	lsls	r3, r3, #8
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	4313      	orrs	r3, r2
 800909a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80090a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	031b      	lsls	r3, r3, #12
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a12      	ldr	r2, [pc, #72]	@ (80090fc <TIM_OC4_SetConfig+0xa4>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d003      	beq.n	80090c0 <TIM_OC4_SetConfig+0x68>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a11      	ldr	r2, [pc, #68]	@ (8009100 <TIM_OC4_SetConfig+0xa8>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d109      	bne.n	80090d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	695b      	ldr	r3, [r3, #20]
 80090cc:	019b      	lsls	r3, r3, #6
 80090ce:	697a      	ldr	r2, [r7, #20]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	685a      	ldr	r2, [r3, #4]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	693a      	ldr	r2, [r7, #16]
 80090ec:	621a      	str	r2, [r3, #32]
}
 80090ee:	bf00      	nop
 80090f0:	371c      	adds	r7, #28
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	40010000 	.word	0x40010000
 8009100:	40010400 	.word	0x40010400

08009104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009104:	b480      	push	{r7}
 8009106:	b087      	sub	sp, #28
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6a1b      	ldr	r3, [r3, #32]
 8009114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6a1b      	ldr	r3, [r3, #32]
 800911a:	f023 0201 	bic.w	r2, r3, #1
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	699b      	ldr	r3, [r3, #24]
 8009126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800912e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	011b      	lsls	r3, r3, #4
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	4313      	orrs	r3, r2
 8009138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	f023 030a 	bic.w	r3, r3, #10
 8009140:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009142:	697a      	ldr	r2, [r7, #20]
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	4313      	orrs	r3, r2
 8009148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	693a      	ldr	r2, [r7, #16]
 800914e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	697a      	ldr	r2, [r7, #20]
 8009154:	621a      	str	r2, [r3, #32]
}
 8009156:	bf00      	nop
 8009158:	371c      	adds	r7, #28
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr

08009162 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009162:	b480      	push	{r7}
 8009164:	b087      	sub	sp, #28
 8009166:	af00      	add	r7, sp, #0
 8009168:	60f8      	str	r0, [r7, #12]
 800916a:	60b9      	str	r1, [r7, #8]
 800916c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6a1b      	ldr	r3, [r3, #32]
 8009178:	f023 0210 	bic.w	r2, r3, #16
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	699b      	ldr	r3, [r3, #24]
 8009184:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800918c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	031b      	lsls	r3, r3, #12
 8009192:	693a      	ldr	r2, [r7, #16]
 8009194:	4313      	orrs	r3, r2
 8009196:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800919e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	011b      	lsls	r3, r3, #4
 80091a4:	697a      	ldr	r2, [r7, #20]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	697a      	ldr	r2, [r7, #20]
 80091b4:	621a      	str	r2, [r3, #32]
}
 80091b6:	bf00      	nop
 80091b8:	371c      	adds	r7, #28
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr

080091c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091c2:	b480      	push	{r7}
 80091c4:	b085      	sub	sp, #20
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
 80091ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80091da:	683a      	ldr	r2, [r7, #0]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	4313      	orrs	r3, r2
 80091e0:	f043 0307 	orr.w	r3, r3, #7
 80091e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	609a      	str	r2, [r3, #8]
}
 80091ec:	bf00      	nop
 80091ee:	3714      	adds	r7, #20
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b087      	sub	sp, #28
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	607a      	str	r2, [r7, #4]
 8009204:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009212:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	021a      	lsls	r2, r3, #8
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	431a      	orrs	r2, r3
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	4313      	orrs	r3, r2
 8009220:	697a      	ldr	r2, [r7, #20]
 8009222:	4313      	orrs	r3, r2
 8009224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	609a      	str	r2, [r3, #8]
}
 800922c:	bf00      	nop
 800922e:	371c      	adds	r7, #28
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009238:	b480      	push	{r7}
 800923a:	b087      	sub	sp, #28
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f003 031f 	and.w	r3, r3, #31
 800924a:	2201      	movs	r2, #1
 800924c:	fa02 f303 	lsl.w	r3, r2, r3
 8009250:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6a1a      	ldr	r2, [r3, #32]
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	43db      	mvns	r3, r3
 800925a:	401a      	ands	r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6a1a      	ldr	r2, [r3, #32]
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	f003 031f 	and.w	r3, r3, #31
 800926a:	6879      	ldr	r1, [r7, #4]
 800926c:	fa01 f303 	lsl.w	r3, r1, r3
 8009270:	431a      	orrs	r2, r3
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	621a      	str	r2, [r3, #32]
}
 8009276:	bf00      	nop
 8009278:	371c      	adds	r7, #28
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
	...

08009284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009294:	2b01      	cmp	r3, #1
 8009296:	d101      	bne.n	800929c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009298:	2302      	movs	r3, #2
 800929a:	e05a      	b.n	8009352 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2202      	movs	r2, #2
 80092a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a21      	ldr	r2, [pc, #132]	@ (8009360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d022      	beq.n	8009326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092e8:	d01d      	beq.n	8009326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a1d      	ldr	r2, [pc, #116]	@ (8009364 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d018      	beq.n	8009326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a1b      	ldr	r2, [pc, #108]	@ (8009368 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d013      	beq.n	8009326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a1a      	ldr	r2, [pc, #104]	@ (800936c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d00e      	beq.n	8009326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a18      	ldr	r2, [pc, #96]	@ (8009370 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d009      	beq.n	8009326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a17      	ldr	r2, [pc, #92]	@ (8009374 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d004      	beq.n	8009326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a15      	ldr	r2, [pc, #84]	@ (8009378 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d10c      	bne.n	8009340 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800932c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	4313      	orrs	r3, r2
 8009336:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	40010000 	.word	0x40010000
 8009364:	40000400 	.word	0x40000400
 8009368:	40000800 	.word	0x40000800
 800936c:	40000c00 	.word	0x40000c00
 8009370:	40010400 	.word	0x40010400
 8009374:	40014000 	.word	0x40014000
 8009378:	40001800 	.word	0x40001800

0800937c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d101      	bne.n	800938e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	e042      	b.n	8009414 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009394:	b2db      	uxtb	r3, r3
 8009396:	2b00      	cmp	r3, #0
 8009398:	d106      	bne.n	80093a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f7fa fefc 	bl	80041a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2224      	movs	r2, #36	@ 0x24
 80093ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68da      	ldr	r2, [r3, #12]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80093be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 fdff 	bl	8009fc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	691a      	ldr	r2, [r3, #16]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80093d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	695a      	ldr	r2, [r3, #20]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80093e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68da      	ldr	r2, [r3, #12]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80093f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2220      	movs	r2, #32
 8009400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2220      	movs	r2, #32
 8009408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b08a      	sub	sp, #40	@ 0x28
 8009420:	af02      	add	r7, sp, #8
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	603b      	str	r3, [r7, #0]
 8009428:	4613      	mov	r3, r2
 800942a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800942c:	2300      	movs	r3, #0
 800942e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2b20      	cmp	r3, #32
 800943a:	d175      	bne.n	8009528 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d002      	beq.n	8009448 <HAL_UART_Transmit+0x2c>
 8009442:	88fb      	ldrh	r3, [r7, #6]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d101      	bne.n	800944c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	e06e      	b.n	800952a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2200      	movs	r2, #0
 8009450:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2221      	movs	r2, #33	@ 0x21
 8009456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800945a:	f7fb f86d 	bl	8004538 <HAL_GetTick>
 800945e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	88fa      	ldrh	r2, [r7, #6]
 8009464:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	88fa      	ldrh	r2, [r7, #6]
 800946a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009474:	d108      	bne.n	8009488 <HAL_UART_Transmit+0x6c>
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d104      	bne.n	8009488 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800947e:	2300      	movs	r3, #0
 8009480:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	61bb      	str	r3, [r7, #24]
 8009486:	e003      	b.n	8009490 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800948c:	2300      	movs	r3, #0
 800948e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009490:	e02e      	b.n	80094f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	2200      	movs	r2, #0
 800949a:	2180      	movs	r1, #128	@ 0x80
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f000 fb9b 	bl	8009bd8 <UART_WaitOnFlagUntilTimeout>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d005      	beq.n	80094b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2220      	movs	r2, #32
 80094ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80094b0:	2303      	movs	r3, #3
 80094b2:	e03a      	b.n	800952a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10b      	bne.n	80094d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	881b      	ldrh	r3, [r3, #0]
 80094be:	461a      	mov	r2, r3
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	3302      	adds	r3, #2
 80094ce:	61bb      	str	r3, [r7, #24]
 80094d0:	e007      	b.n	80094e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	781a      	ldrb	r2, [r3, #0]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	3301      	adds	r3, #1
 80094e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	3b01      	subs	r3, #1
 80094ea:	b29a      	uxth	r2, r3
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1cb      	bne.n	8009492 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	2200      	movs	r2, #0
 8009502:	2140      	movs	r1, #64	@ 0x40
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f000 fb67 	bl	8009bd8 <UART_WaitOnFlagUntilTimeout>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d005      	beq.n	800951c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2220      	movs	r2, #32
 8009514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009518:	2303      	movs	r3, #3
 800951a:	e006      	b.n	800952a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2220      	movs	r2, #32
 8009520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009524:	2300      	movs	r3, #0
 8009526:	e000      	b.n	800952a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009528:	2302      	movs	r3, #2
  }
}
 800952a:	4618      	mov	r0, r3
 800952c:	3720      	adds	r7, #32
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b08a      	sub	sp, #40	@ 0x28
 8009536:	af02      	add	r7, sp, #8
 8009538:	60f8      	str	r0, [r7, #12]
 800953a:	60b9      	str	r1, [r7, #8]
 800953c:	603b      	str	r3, [r7, #0]
 800953e:	4613      	mov	r3, r2
 8009540:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009542:	2300      	movs	r3, #0
 8009544:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800954c:	b2db      	uxtb	r3, r3
 800954e:	2b20      	cmp	r3, #32
 8009550:	f040 8081 	bne.w	8009656 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d002      	beq.n	8009560 <HAL_UART_Receive+0x2e>
 800955a:	88fb      	ldrh	r3, [r7, #6]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d101      	bne.n	8009564 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e079      	b.n	8009658 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2222      	movs	r2, #34	@ 0x22
 800956e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009578:	f7fa ffde 	bl	8004538 <HAL_GetTick>
 800957c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	88fa      	ldrh	r2, [r7, #6]
 8009582:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	88fa      	ldrh	r2, [r7, #6]
 8009588:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009592:	d108      	bne.n	80095a6 <HAL_UART_Receive+0x74>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d104      	bne.n	80095a6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800959c:	2300      	movs	r3, #0
 800959e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	61bb      	str	r3, [r7, #24]
 80095a4:	e003      	b.n	80095ae <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80095aa:	2300      	movs	r3, #0
 80095ac:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80095ae:	e047      	b.n	8009640 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	2200      	movs	r2, #0
 80095b8:	2120      	movs	r1, #32
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f000 fb0c 	bl	8009bd8 <UART_WaitOnFlagUntilTimeout>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d005      	beq.n	80095d2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2220      	movs	r2, #32
 80095ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80095ce:	2303      	movs	r3, #3
 80095d0:	e042      	b.n	8009658 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10c      	bne.n	80095f2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	b29b      	uxth	r3, r3
 80095e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	3302      	adds	r3, #2
 80095ee:	61bb      	str	r3, [r7, #24]
 80095f0:	e01f      	b.n	8009632 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095fa:	d007      	beq.n	800960c <HAL_UART_Receive+0xda>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10a      	bne.n	800961a <HAL_UART_Receive+0xe8>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d106      	bne.n	800961a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	b2da      	uxtb	r2, r3
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	701a      	strb	r2, [r3, #0]
 8009618:	e008      	b.n	800962c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	b2db      	uxtb	r3, r3
 8009622:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009626:	b2da      	uxtb	r2, r3
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	3301      	adds	r3, #1
 8009630:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009636:	b29b      	uxth	r3, r3
 8009638:	3b01      	subs	r3, #1
 800963a:	b29a      	uxth	r2, r3
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009644:	b29b      	uxth	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1b2      	bne.n	80095b0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2220      	movs	r2, #32
 800964e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8009652:	2300      	movs	r3, #0
 8009654:	e000      	b.n	8009658 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009656:	2302      	movs	r3, #2
  }
}
 8009658:	4618      	mov	r0, r3
 800965a:	3720      	adds	r7, #32
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b0ba      	sub	sp, #232	@ 0xe8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009686:	2300      	movs	r3, #0
 8009688:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800968c:	2300      	movs	r3, #0
 800968e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009696:	f003 030f 	and.w	r3, r3, #15
 800969a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800969e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d10f      	bne.n	80096c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80096a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096aa:	f003 0320 	and.w	r3, r3, #32
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d009      	beq.n	80096c6 <HAL_UART_IRQHandler+0x66>
 80096b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096b6:	f003 0320 	and.w	r3, r3, #32
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d003      	beq.n	80096c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 fbc2 	bl	8009e48 <UART_Receive_IT>
      return;
 80096c4:	e25b      	b.n	8009b7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80096c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	f000 80de 	beq.w	800988c <HAL_UART_IRQHandler+0x22c>
 80096d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096d4:	f003 0301 	and.w	r3, r3, #1
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d106      	bne.n	80096ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80096dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f000 80d1 	beq.w	800988c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80096ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096ee:	f003 0301 	and.w	r3, r3, #1
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00b      	beq.n	800970e <HAL_UART_IRQHandler+0xae>
 80096f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d005      	beq.n	800970e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009706:	f043 0201 	orr.w	r2, r3, #1
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800970e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009712:	f003 0304 	and.w	r3, r3, #4
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00b      	beq.n	8009732 <HAL_UART_IRQHandler+0xd2>
 800971a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800971e:	f003 0301 	and.w	r3, r3, #1
 8009722:	2b00      	cmp	r3, #0
 8009724:	d005      	beq.n	8009732 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800972a:	f043 0202 	orr.w	r2, r3, #2
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009736:	f003 0302 	and.w	r3, r3, #2
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00b      	beq.n	8009756 <HAL_UART_IRQHandler+0xf6>
 800973e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009742:	f003 0301 	and.w	r3, r3, #1
 8009746:	2b00      	cmp	r3, #0
 8009748:	d005      	beq.n	8009756 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800974e:	f043 0204 	orr.w	r2, r3, #4
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800975a:	f003 0308 	and.w	r3, r3, #8
 800975e:	2b00      	cmp	r3, #0
 8009760:	d011      	beq.n	8009786 <HAL_UART_IRQHandler+0x126>
 8009762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009766:	f003 0320 	and.w	r3, r3, #32
 800976a:	2b00      	cmp	r3, #0
 800976c:	d105      	bne.n	800977a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800976e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009772:	f003 0301 	and.w	r3, r3, #1
 8009776:	2b00      	cmp	r3, #0
 8009778:	d005      	beq.n	8009786 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800977e:	f043 0208 	orr.w	r2, r3, #8
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800978a:	2b00      	cmp	r3, #0
 800978c:	f000 81f2 	beq.w	8009b74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009794:	f003 0320 	and.w	r3, r3, #32
 8009798:	2b00      	cmp	r3, #0
 800979a:	d008      	beq.n	80097ae <HAL_UART_IRQHandler+0x14e>
 800979c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097a0:	f003 0320 	and.w	r3, r3, #32
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d002      	beq.n	80097ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 fb4d 	bl	8009e48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	695b      	ldr	r3, [r3, #20]
 80097b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097b8:	2b40      	cmp	r3, #64	@ 0x40
 80097ba:	bf0c      	ite	eq
 80097bc:	2301      	moveq	r3, #1
 80097be:	2300      	movne	r3, #0
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097ca:	f003 0308 	and.w	r3, r3, #8
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d103      	bne.n	80097da <HAL_UART_IRQHandler+0x17a>
 80097d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d04f      	beq.n	800987a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 fa55 	bl	8009c8a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	695b      	ldr	r3, [r3, #20]
 80097e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097ea:	2b40      	cmp	r3, #64	@ 0x40
 80097ec:	d141      	bne.n	8009872 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	3314      	adds	r3, #20
 80097f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80097fc:	e853 3f00 	ldrex	r3, [r3]
 8009800:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009804:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800980c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3314      	adds	r3, #20
 8009816:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800981a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800981e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009822:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009826:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800982a:	e841 2300 	strex	r3, r2, [r1]
 800982e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009832:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1d9      	bne.n	80097ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800983e:	2b00      	cmp	r3, #0
 8009840:	d013      	beq.n	800986a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009846:	4a7e      	ldr	r2, [pc, #504]	@ (8009a40 <HAL_UART_IRQHandler+0x3e0>)
 8009848:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800984e:	4618      	mov	r0, r3
 8009850:	f7fb f823 	bl	800489a <HAL_DMA_Abort_IT>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d016      	beq.n	8009888 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800985e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009864:	4610      	mov	r0, r2
 8009866:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009868:	e00e      	b.n	8009888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f99e 	bl	8009bac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009870:	e00a      	b.n	8009888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f99a 	bl	8009bac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009878:	e006      	b.n	8009888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f996 	bl	8009bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009886:	e175      	b.n	8009b74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009888:	bf00      	nop
    return;
 800988a:	e173      	b.n	8009b74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009890:	2b01      	cmp	r3, #1
 8009892:	f040 814f 	bne.w	8009b34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800989a:	f003 0310 	and.w	r3, r3, #16
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f000 8148 	beq.w	8009b34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80098a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098a8:	f003 0310 	and.w	r3, r3, #16
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f000 8141 	beq.w	8009b34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80098b2:	2300      	movs	r3, #0
 80098b4:	60bb      	str	r3, [r7, #8]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	60bb      	str	r3, [r7, #8]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	60bb      	str	r3, [r7, #8]
 80098c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	695b      	ldr	r3, [r3, #20]
 80098ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098d2:	2b40      	cmp	r3, #64	@ 0x40
 80098d4:	f040 80b6 	bne.w	8009a44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80098e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f000 8145 	beq.w	8009b78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80098f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80098f6:	429a      	cmp	r2, r3
 80098f8:	f080 813e 	bcs.w	8009b78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009902:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009908:	69db      	ldr	r3, [r3, #28]
 800990a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800990e:	f000 8088 	beq.w	8009a22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	330c      	adds	r3, #12
 8009918:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009920:	e853 3f00 	ldrex	r3, [r3]
 8009924:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009928:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800992c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009930:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	330c      	adds	r3, #12
 800993a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800993e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009942:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009946:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800994a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800994e:	e841 2300 	strex	r3, r2, [r1]
 8009952:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009956:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1d9      	bne.n	8009912 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3314      	adds	r3, #20
 8009964:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009966:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009968:	e853 3f00 	ldrex	r3, [r3]
 800996c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800996e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009970:	f023 0301 	bic.w	r3, r3, #1
 8009974:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	3314      	adds	r3, #20
 800997e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009982:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009986:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009988:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800998a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800998e:	e841 2300 	strex	r3, r2, [r1]
 8009992:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009994:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1e1      	bne.n	800995e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	3314      	adds	r3, #20
 80099a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80099a4:	e853 3f00 	ldrex	r3, [r3]
 80099a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80099aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80099ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	3314      	adds	r3, #20
 80099ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80099be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80099c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80099c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80099c6:	e841 2300 	strex	r3, r2, [r1]
 80099ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80099cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1e3      	bne.n	800999a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2220      	movs	r2, #32
 80099d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	330c      	adds	r3, #12
 80099e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099ea:	e853 3f00 	ldrex	r3, [r3]
 80099ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80099f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099f2:	f023 0310 	bic.w	r3, r3, #16
 80099f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	330c      	adds	r3, #12
 8009a00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009a04:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009a06:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a0c:	e841 2300 	strex	r3, r2, [r1]
 8009a10:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1e3      	bne.n	80099e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7fa fecc 	bl	80047ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2202      	movs	r2, #2
 8009a26:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	4619      	mov	r1, r3
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 f8c1 	bl	8009bc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009a3e:	e09b      	b.n	8009b78 <HAL_UART_IRQHandler+0x518>
 8009a40:	08009d51 	.word	0x08009d51
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	1ad3      	subs	r3, r2, r3
 8009a50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f000 808e 	beq.w	8009b7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009a60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f000 8089 	beq.w	8009b7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	330c      	adds	r3, #12
 8009a70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	330c      	adds	r3, #12
 8009a8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009a8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009a90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a96:	e841 2300 	strex	r3, r2, [r1]
 8009a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1e3      	bne.n	8009a6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3314      	adds	r3, #20
 8009aa8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aac:	e853 3f00 	ldrex	r3, [r3]
 8009ab0:	623b      	str	r3, [r7, #32]
   return(result);
 8009ab2:	6a3b      	ldr	r3, [r7, #32]
 8009ab4:	f023 0301 	bic.w	r3, r3, #1
 8009ab8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	3314      	adds	r3, #20
 8009ac2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009ac6:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ace:	e841 2300 	strex	r3, r2, [r1]
 8009ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1e3      	bne.n	8009aa2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2220      	movs	r2, #32
 8009ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	330c      	adds	r3, #12
 8009aee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	e853 3f00 	ldrex	r3, [r3]
 8009af6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f023 0310 	bic.w	r3, r3, #16
 8009afe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	330c      	adds	r3, #12
 8009b08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009b0c:	61fa      	str	r2, [r7, #28]
 8009b0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b10:	69b9      	ldr	r1, [r7, #24]
 8009b12:	69fa      	ldr	r2, [r7, #28]
 8009b14:	e841 2300 	strex	r3, r2, [r1]
 8009b18:	617b      	str	r3, [r7, #20]
   return(result);
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1e3      	bne.n	8009ae8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2202      	movs	r2, #2
 8009b24:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009b26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f847 	bl	8009bc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009b32:	e023      	b.n	8009b7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d009      	beq.n	8009b54 <HAL_UART_IRQHandler+0x4f4>
 8009b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d003      	beq.n	8009b54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 f913 	bl	8009d78 <UART_Transmit_IT>
    return;
 8009b52:	e014      	b.n	8009b7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d00e      	beq.n	8009b7e <HAL_UART_IRQHandler+0x51e>
 8009b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d008      	beq.n	8009b7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 f953 	bl	8009e18 <UART_EndTransmit_IT>
    return;
 8009b72:	e004      	b.n	8009b7e <HAL_UART_IRQHandler+0x51e>
    return;
 8009b74:	bf00      	nop
 8009b76:	e002      	b.n	8009b7e <HAL_UART_IRQHandler+0x51e>
      return;
 8009b78:	bf00      	nop
 8009b7a:	e000      	b.n	8009b7e <HAL_UART_IRQHandler+0x51e>
      return;
 8009b7c:	bf00      	nop
  }
}
 8009b7e:	37e8      	adds	r7, #232	@ 0xe8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009b8c:	bf00      	nop
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	460b      	mov	r3, r1
 8009bca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b086      	sub	sp, #24
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	603b      	str	r3, [r7, #0]
 8009be4:	4613      	mov	r3, r2
 8009be6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009be8:	e03b      	b.n	8009c62 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bea:	6a3b      	ldr	r3, [r7, #32]
 8009bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bf0:	d037      	beq.n	8009c62 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bf2:	f7fa fca1 	bl	8004538 <HAL_GetTick>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	6a3a      	ldr	r2, [r7, #32]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d302      	bcc.n	8009c08 <UART_WaitOnFlagUntilTimeout+0x30>
 8009c02:	6a3b      	ldr	r3, [r7, #32]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d101      	bne.n	8009c0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009c08:	2303      	movs	r3, #3
 8009c0a:	e03a      	b.n	8009c82 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	f003 0304 	and.w	r3, r3, #4
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d023      	beq.n	8009c62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	2b80      	cmp	r3, #128	@ 0x80
 8009c1e:	d020      	beq.n	8009c62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	2b40      	cmp	r3, #64	@ 0x40
 8009c24:	d01d      	beq.n	8009c62 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 0308 	and.w	r3, r3, #8
 8009c30:	2b08      	cmp	r3, #8
 8009c32:	d116      	bne.n	8009c62 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009c34:	2300      	movs	r3, #0
 8009c36:	617b      	str	r3, [r7, #20]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	617b      	str	r3, [r7, #20]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	617b      	str	r3, [r7, #20]
 8009c48:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f000 f81d 	bl	8009c8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2208      	movs	r2, #8
 8009c54:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e00f      	b.n	8009c82 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	bf0c      	ite	eq
 8009c72:	2301      	moveq	r3, #1
 8009c74:	2300      	movne	r3, #0
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	461a      	mov	r2, r3
 8009c7a:	79fb      	ldrb	r3, [r7, #7]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d0b4      	beq.n	8009bea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3718      	adds	r7, #24
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c8a:	b480      	push	{r7}
 8009c8c:	b095      	sub	sp, #84	@ 0x54
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	330c      	adds	r3, #12
 8009c98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c9c:	e853 3f00 	ldrex	r3, [r3]
 8009ca0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	330c      	adds	r3, #12
 8009cb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009cb2:	643a      	str	r2, [r7, #64]	@ 0x40
 8009cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009cb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009cba:	e841 2300 	strex	r3, r2, [r1]
 8009cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1e5      	bne.n	8009c92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	3314      	adds	r3, #20
 8009ccc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cce:	6a3b      	ldr	r3, [r7, #32]
 8009cd0:	e853 3f00 	ldrex	r3, [r3]
 8009cd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	f023 0301 	bic.w	r3, r3, #1
 8009cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	3314      	adds	r3, #20
 8009ce4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ce6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cee:	e841 2300 	strex	r3, r2, [r1]
 8009cf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1e5      	bne.n	8009cc6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d119      	bne.n	8009d36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	330c      	adds	r3, #12
 8009d08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	e853 3f00 	ldrex	r3, [r3]
 8009d10:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	f023 0310 	bic.w	r3, r3, #16
 8009d18:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	330c      	adds	r3, #12
 8009d20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d22:	61ba      	str	r2, [r7, #24]
 8009d24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d26:	6979      	ldr	r1, [r7, #20]
 8009d28:	69ba      	ldr	r2, [r7, #24]
 8009d2a:	e841 2300 	strex	r3, r2, [r1]
 8009d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1e5      	bne.n	8009d02 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2220      	movs	r2, #32
 8009d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009d44:	bf00      	nop
 8009d46:	3754      	adds	r7, #84	@ 0x54
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f7ff ff1e 	bl	8009bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d70:	bf00      	nop
 8009d72:	3710      	adds	r7, #16
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	2b21      	cmp	r3, #33	@ 0x21
 8009d8a:	d13e      	bne.n	8009e0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d94:	d114      	bne.n	8009dc0 <UART_Transmit_IT+0x48>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d110      	bne.n	8009dc0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a1b      	ldr	r3, [r3, #32]
 8009da2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	881b      	ldrh	r3, [r3, #0]
 8009da8:	461a      	mov	r2, r3
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009db2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6a1b      	ldr	r3, [r3, #32]
 8009db8:	1c9a      	adds	r2, r3, #2
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	621a      	str	r2, [r3, #32]
 8009dbe:	e008      	b.n	8009dd2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6a1b      	ldr	r3, [r3, #32]
 8009dc4:	1c59      	adds	r1, r3, #1
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	6211      	str	r1, [r2, #32]
 8009dca:	781a      	ldrb	r2, [r3, #0]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	4619      	mov	r1, r3
 8009de0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10f      	bne.n	8009e06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68da      	ldr	r2, [r3, #12]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009df4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68da      	ldr	r2, [r3, #12]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009e06:	2300      	movs	r3, #0
 8009e08:	e000      	b.n	8009e0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009e0a:	2302      	movs	r3, #2
  }
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3714      	adds	r7, #20
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	68da      	ldr	r2, [r3, #12]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2220      	movs	r2, #32
 8009e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f7ff fea3 	bl	8009b84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b08c      	sub	sp, #48	@ 0x30
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	2b22      	cmp	r3, #34	@ 0x22
 8009e5a:	f040 80ae 	bne.w	8009fba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e66:	d117      	bne.n	8009e98 <UART_Receive_IT+0x50>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d113      	bne.n	8009e98 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009e70:	2300      	movs	r3, #0
 8009e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e78:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e86:	b29a      	uxth	r2, r3
 8009e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e90:	1c9a      	adds	r2, r3, #2
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	629a      	str	r2, [r3, #40]	@ 0x28
 8009e96:	e026      	b.n	8009ee6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009eaa:	d007      	beq.n	8009ebc <UART_Receive_IT+0x74>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10a      	bne.n	8009eca <UART_Receive_IT+0x82>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d106      	bne.n	8009eca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	b2da      	uxtb	r2, r3
 8009ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ec6:	701a      	strb	r2, [r3, #0]
 8009ec8:	e008      	b.n	8009edc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ed6:	b2da      	uxtb	r2, r3
 8009ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eda:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee0:	1c5a      	adds	r2, r3, #1
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	3b01      	subs	r3, #1
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d15d      	bne.n	8009fb6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68da      	ldr	r2, [r3, #12]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f022 0220 	bic.w	r2, r2, #32
 8009f08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	68da      	ldr	r2, [r3, #12]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009f18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	695a      	ldr	r2, [r3, #20]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f022 0201 	bic.w	r2, r2, #1
 8009f28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d135      	bne.n	8009fac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	330c      	adds	r3, #12
 8009f4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	e853 3f00 	ldrex	r3, [r3]
 8009f54:	613b      	str	r3, [r7, #16]
   return(result);
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	f023 0310 	bic.w	r3, r3, #16
 8009f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	330c      	adds	r3, #12
 8009f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f66:	623a      	str	r2, [r7, #32]
 8009f68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6a:	69f9      	ldr	r1, [r7, #28]
 8009f6c:	6a3a      	ldr	r2, [r7, #32]
 8009f6e:	e841 2300 	strex	r3, r2, [r1]
 8009f72:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1e5      	bne.n	8009f46 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f003 0310 	and.w	r3, r3, #16
 8009f84:	2b10      	cmp	r3, #16
 8009f86:	d10a      	bne.n	8009f9e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f88:	2300      	movs	r3, #0
 8009f8a:	60fb      	str	r3, [r7, #12]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	60fb      	str	r3, [r7, #12]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	60fb      	str	r3, [r7, #12]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f7ff fe0b 	bl	8009bc0 <HAL_UARTEx_RxEventCallback>
 8009faa:	e002      	b.n	8009fb2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f7ff fdf3 	bl	8009b98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	e002      	b.n	8009fbc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	e000      	b.n	8009fbc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009fba:	2302      	movs	r3, #2
  }
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3730      	adds	r7, #48	@ 0x30
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fc8:	b0c0      	sub	sp, #256	@ 0x100
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	691b      	ldr	r3, [r3, #16]
 8009fd8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fe0:	68d9      	ldr	r1, [r3, #12]
 8009fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	ea40 0301 	orr.w	r3, r0, r1
 8009fec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ff2:	689a      	ldr	r2, [r3, #8]
 8009ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	431a      	orrs	r2, r3
 8009ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a000:	695b      	ldr	r3, [r3, #20]
 800a002:	431a      	orrs	r2, r3
 800a004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a008:	69db      	ldr	r3, [r3, #28]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a01c:	f021 010c 	bic.w	r1, r1, #12
 800a020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a02a:	430b      	orrs	r3, r1
 800a02c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a02e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	695b      	ldr	r3, [r3, #20]
 800a036:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a03a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a03e:	6999      	ldr	r1, [r3, #24]
 800a040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	ea40 0301 	orr.w	r3, r0, r1
 800a04a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a04c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	4b8f      	ldr	r3, [pc, #572]	@ (800a290 <UART_SetConfig+0x2cc>)
 800a054:	429a      	cmp	r2, r3
 800a056:	d005      	beq.n	800a064 <UART_SetConfig+0xa0>
 800a058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	4b8d      	ldr	r3, [pc, #564]	@ (800a294 <UART_SetConfig+0x2d0>)
 800a060:	429a      	cmp	r2, r3
 800a062:	d104      	bne.n	800a06e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a064:	f7fd fdfc 	bl	8007c60 <HAL_RCC_GetPCLK2Freq>
 800a068:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a06c:	e003      	b.n	800a076 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a06e:	f7fd fde3 	bl	8007c38 <HAL_RCC_GetPCLK1Freq>
 800a072:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a07a:	69db      	ldr	r3, [r3, #28]
 800a07c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a080:	f040 810c 	bne.w	800a29c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a088:	2200      	movs	r2, #0
 800a08a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a08e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a092:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a096:	4622      	mov	r2, r4
 800a098:	462b      	mov	r3, r5
 800a09a:	1891      	adds	r1, r2, r2
 800a09c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a09e:	415b      	adcs	r3, r3
 800a0a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a0a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	eb12 0801 	adds.w	r8, r2, r1
 800a0ac:	4629      	mov	r1, r5
 800a0ae:	eb43 0901 	adc.w	r9, r3, r1
 800a0b2:	f04f 0200 	mov.w	r2, #0
 800a0b6:	f04f 0300 	mov.w	r3, #0
 800a0ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a0be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a0c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a0c6:	4690      	mov	r8, r2
 800a0c8:	4699      	mov	r9, r3
 800a0ca:	4623      	mov	r3, r4
 800a0cc:	eb18 0303 	adds.w	r3, r8, r3
 800a0d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a0d4:	462b      	mov	r3, r5
 800a0d6:	eb49 0303 	adc.w	r3, r9, r3
 800a0da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a0de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a0ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a0ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	18db      	adds	r3, r3, r3
 800a0f6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	eb42 0303 	adc.w	r3, r2, r3
 800a0fe:	657b      	str	r3, [r7, #84]	@ 0x54
 800a100:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a104:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a108:	f7f6 f8ca 	bl	80002a0 <__aeabi_uldivmod>
 800a10c:	4602      	mov	r2, r0
 800a10e:	460b      	mov	r3, r1
 800a110:	4b61      	ldr	r3, [pc, #388]	@ (800a298 <UART_SetConfig+0x2d4>)
 800a112:	fba3 2302 	umull	r2, r3, r3, r2
 800a116:	095b      	lsrs	r3, r3, #5
 800a118:	011c      	lsls	r4, r3, #4
 800a11a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a11e:	2200      	movs	r2, #0
 800a120:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a124:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a128:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a12c:	4642      	mov	r2, r8
 800a12e:	464b      	mov	r3, r9
 800a130:	1891      	adds	r1, r2, r2
 800a132:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a134:	415b      	adcs	r3, r3
 800a136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a138:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a13c:	4641      	mov	r1, r8
 800a13e:	eb12 0a01 	adds.w	sl, r2, r1
 800a142:	4649      	mov	r1, r9
 800a144:	eb43 0b01 	adc.w	fp, r3, r1
 800a148:	f04f 0200 	mov.w	r2, #0
 800a14c:	f04f 0300 	mov.w	r3, #0
 800a150:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a154:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a158:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a15c:	4692      	mov	sl, r2
 800a15e:	469b      	mov	fp, r3
 800a160:	4643      	mov	r3, r8
 800a162:	eb1a 0303 	adds.w	r3, sl, r3
 800a166:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a16a:	464b      	mov	r3, r9
 800a16c:	eb4b 0303 	adc.w	r3, fp, r3
 800a170:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a180:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a184:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a188:	460b      	mov	r3, r1
 800a18a:	18db      	adds	r3, r3, r3
 800a18c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a18e:	4613      	mov	r3, r2
 800a190:	eb42 0303 	adc.w	r3, r2, r3
 800a194:	647b      	str	r3, [r7, #68]	@ 0x44
 800a196:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a19a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a19e:	f7f6 f87f 	bl	80002a0 <__aeabi_uldivmod>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	4611      	mov	r1, r2
 800a1a8:	4b3b      	ldr	r3, [pc, #236]	@ (800a298 <UART_SetConfig+0x2d4>)
 800a1aa:	fba3 2301 	umull	r2, r3, r3, r1
 800a1ae:	095b      	lsrs	r3, r3, #5
 800a1b0:	2264      	movs	r2, #100	@ 0x64
 800a1b2:	fb02 f303 	mul.w	r3, r2, r3
 800a1b6:	1acb      	subs	r3, r1, r3
 800a1b8:	00db      	lsls	r3, r3, #3
 800a1ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a1be:	4b36      	ldr	r3, [pc, #216]	@ (800a298 <UART_SetConfig+0x2d4>)
 800a1c0:	fba3 2302 	umull	r2, r3, r3, r2
 800a1c4:	095b      	lsrs	r3, r3, #5
 800a1c6:	005b      	lsls	r3, r3, #1
 800a1c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a1cc:	441c      	add	r4, r3
 800a1ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a1d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a1dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a1e0:	4642      	mov	r2, r8
 800a1e2:	464b      	mov	r3, r9
 800a1e4:	1891      	adds	r1, r2, r2
 800a1e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a1e8:	415b      	adcs	r3, r3
 800a1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a1f0:	4641      	mov	r1, r8
 800a1f2:	1851      	adds	r1, r2, r1
 800a1f4:	6339      	str	r1, [r7, #48]	@ 0x30
 800a1f6:	4649      	mov	r1, r9
 800a1f8:	414b      	adcs	r3, r1
 800a1fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1fc:	f04f 0200 	mov.w	r2, #0
 800a200:	f04f 0300 	mov.w	r3, #0
 800a204:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a208:	4659      	mov	r1, fp
 800a20a:	00cb      	lsls	r3, r1, #3
 800a20c:	4651      	mov	r1, sl
 800a20e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a212:	4651      	mov	r1, sl
 800a214:	00ca      	lsls	r2, r1, #3
 800a216:	4610      	mov	r0, r2
 800a218:	4619      	mov	r1, r3
 800a21a:	4603      	mov	r3, r0
 800a21c:	4642      	mov	r2, r8
 800a21e:	189b      	adds	r3, r3, r2
 800a220:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a224:	464b      	mov	r3, r9
 800a226:	460a      	mov	r2, r1
 800a228:	eb42 0303 	adc.w	r3, r2, r3
 800a22c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a23c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a240:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a244:	460b      	mov	r3, r1
 800a246:	18db      	adds	r3, r3, r3
 800a248:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a24a:	4613      	mov	r3, r2
 800a24c:	eb42 0303 	adc.w	r3, r2, r3
 800a250:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a252:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a256:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a25a:	f7f6 f821 	bl	80002a0 <__aeabi_uldivmod>
 800a25e:	4602      	mov	r2, r0
 800a260:	460b      	mov	r3, r1
 800a262:	4b0d      	ldr	r3, [pc, #52]	@ (800a298 <UART_SetConfig+0x2d4>)
 800a264:	fba3 1302 	umull	r1, r3, r3, r2
 800a268:	095b      	lsrs	r3, r3, #5
 800a26a:	2164      	movs	r1, #100	@ 0x64
 800a26c:	fb01 f303 	mul.w	r3, r1, r3
 800a270:	1ad3      	subs	r3, r2, r3
 800a272:	00db      	lsls	r3, r3, #3
 800a274:	3332      	adds	r3, #50	@ 0x32
 800a276:	4a08      	ldr	r2, [pc, #32]	@ (800a298 <UART_SetConfig+0x2d4>)
 800a278:	fba2 2303 	umull	r2, r3, r2, r3
 800a27c:	095b      	lsrs	r3, r3, #5
 800a27e:	f003 0207 	and.w	r2, r3, #7
 800a282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4422      	add	r2, r4
 800a28a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a28c:	e106      	b.n	800a49c <UART_SetConfig+0x4d8>
 800a28e:	bf00      	nop
 800a290:	40011000 	.word	0x40011000
 800a294:	40011400 	.word	0x40011400
 800a298:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a29c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a2a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a2aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a2ae:	4642      	mov	r2, r8
 800a2b0:	464b      	mov	r3, r9
 800a2b2:	1891      	adds	r1, r2, r2
 800a2b4:	6239      	str	r1, [r7, #32]
 800a2b6:	415b      	adcs	r3, r3
 800a2b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a2be:	4641      	mov	r1, r8
 800a2c0:	1854      	adds	r4, r2, r1
 800a2c2:	4649      	mov	r1, r9
 800a2c4:	eb43 0501 	adc.w	r5, r3, r1
 800a2c8:	f04f 0200 	mov.w	r2, #0
 800a2cc:	f04f 0300 	mov.w	r3, #0
 800a2d0:	00eb      	lsls	r3, r5, #3
 800a2d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a2d6:	00e2      	lsls	r2, r4, #3
 800a2d8:	4614      	mov	r4, r2
 800a2da:	461d      	mov	r5, r3
 800a2dc:	4643      	mov	r3, r8
 800a2de:	18e3      	adds	r3, r4, r3
 800a2e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a2e4:	464b      	mov	r3, r9
 800a2e6:	eb45 0303 	adc.w	r3, r5, r3
 800a2ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a2ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a2fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a2fe:	f04f 0200 	mov.w	r2, #0
 800a302:	f04f 0300 	mov.w	r3, #0
 800a306:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a30a:	4629      	mov	r1, r5
 800a30c:	008b      	lsls	r3, r1, #2
 800a30e:	4621      	mov	r1, r4
 800a310:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a314:	4621      	mov	r1, r4
 800a316:	008a      	lsls	r2, r1, #2
 800a318:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a31c:	f7f5 ffc0 	bl	80002a0 <__aeabi_uldivmod>
 800a320:	4602      	mov	r2, r0
 800a322:	460b      	mov	r3, r1
 800a324:	4b60      	ldr	r3, [pc, #384]	@ (800a4a8 <UART_SetConfig+0x4e4>)
 800a326:	fba3 2302 	umull	r2, r3, r3, r2
 800a32a:	095b      	lsrs	r3, r3, #5
 800a32c:	011c      	lsls	r4, r3, #4
 800a32e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a332:	2200      	movs	r2, #0
 800a334:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a338:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a33c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a340:	4642      	mov	r2, r8
 800a342:	464b      	mov	r3, r9
 800a344:	1891      	adds	r1, r2, r2
 800a346:	61b9      	str	r1, [r7, #24]
 800a348:	415b      	adcs	r3, r3
 800a34a:	61fb      	str	r3, [r7, #28]
 800a34c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a350:	4641      	mov	r1, r8
 800a352:	1851      	adds	r1, r2, r1
 800a354:	6139      	str	r1, [r7, #16]
 800a356:	4649      	mov	r1, r9
 800a358:	414b      	adcs	r3, r1
 800a35a:	617b      	str	r3, [r7, #20]
 800a35c:	f04f 0200 	mov.w	r2, #0
 800a360:	f04f 0300 	mov.w	r3, #0
 800a364:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a368:	4659      	mov	r1, fp
 800a36a:	00cb      	lsls	r3, r1, #3
 800a36c:	4651      	mov	r1, sl
 800a36e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a372:	4651      	mov	r1, sl
 800a374:	00ca      	lsls	r2, r1, #3
 800a376:	4610      	mov	r0, r2
 800a378:	4619      	mov	r1, r3
 800a37a:	4603      	mov	r3, r0
 800a37c:	4642      	mov	r2, r8
 800a37e:	189b      	adds	r3, r3, r2
 800a380:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a384:	464b      	mov	r3, r9
 800a386:	460a      	mov	r2, r1
 800a388:	eb42 0303 	adc.w	r3, r2, r3
 800a38c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a39a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a39c:	f04f 0200 	mov.w	r2, #0
 800a3a0:	f04f 0300 	mov.w	r3, #0
 800a3a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a3a8:	4649      	mov	r1, r9
 800a3aa:	008b      	lsls	r3, r1, #2
 800a3ac:	4641      	mov	r1, r8
 800a3ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3b2:	4641      	mov	r1, r8
 800a3b4:	008a      	lsls	r2, r1, #2
 800a3b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a3ba:	f7f5 ff71 	bl	80002a0 <__aeabi_uldivmod>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	4b38      	ldr	r3, [pc, #224]	@ (800a4a8 <UART_SetConfig+0x4e4>)
 800a3c6:	fba3 2301 	umull	r2, r3, r3, r1
 800a3ca:	095b      	lsrs	r3, r3, #5
 800a3cc:	2264      	movs	r2, #100	@ 0x64
 800a3ce:	fb02 f303 	mul.w	r3, r2, r3
 800a3d2:	1acb      	subs	r3, r1, r3
 800a3d4:	011b      	lsls	r3, r3, #4
 800a3d6:	3332      	adds	r3, #50	@ 0x32
 800a3d8:	4a33      	ldr	r2, [pc, #204]	@ (800a4a8 <UART_SetConfig+0x4e4>)
 800a3da:	fba2 2303 	umull	r2, r3, r2, r3
 800a3de:	095b      	lsrs	r3, r3, #5
 800a3e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a3e4:	441c      	add	r4, r3
 800a3e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	673b      	str	r3, [r7, #112]	@ 0x70
 800a3ee:	677a      	str	r2, [r7, #116]	@ 0x74
 800a3f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a3f4:	4642      	mov	r2, r8
 800a3f6:	464b      	mov	r3, r9
 800a3f8:	1891      	adds	r1, r2, r2
 800a3fa:	60b9      	str	r1, [r7, #8]
 800a3fc:	415b      	adcs	r3, r3
 800a3fe:	60fb      	str	r3, [r7, #12]
 800a400:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a404:	4641      	mov	r1, r8
 800a406:	1851      	adds	r1, r2, r1
 800a408:	6039      	str	r1, [r7, #0]
 800a40a:	4649      	mov	r1, r9
 800a40c:	414b      	adcs	r3, r1
 800a40e:	607b      	str	r3, [r7, #4]
 800a410:	f04f 0200 	mov.w	r2, #0
 800a414:	f04f 0300 	mov.w	r3, #0
 800a418:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a41c:	4659      	mov	r1, fp
 800a41e:	00cb      	lsls	r3, r1, #3
 800a420:	4651      	mov	r1, sl
 800a422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a426:	4651      	mov	r1, sl
 800a428:	00ca      	lsls	r2, r1, #3
 800a42a:	4610      	mov	r0, r2
 800a42c:	4619      	mov	r1, r3
 800a42e:	4603      	mov	r3, r0
 800a430:	4642      	mov	r2, r8
 800a432:	189b      	adds	r3, r3, r2
 800a434:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a436:	464b      	mov	r3, r9
 800a438:	460a      	mov	r2, r1
 800a43a:	eb42 0303 	adc.w	r3, r2, r3
 800a43e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	663b      	str	r3, [r7, #96]	@ 0x60
 800a44a:	667a      	str	r2, [r7, #100]	@ 0x64
 800a44c:	f04f 0200 	mov.w	r2, #0
 800a450:	f04f 0300 	mov.w	r3, #0
 800a454:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a458:	4649      	mov	r1, r9
 800a45a:	008b      	lsls	r3, r1, #2
 800a45c:	4641      	mov	r1, r8
 800a45e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a462:	4641      	mov	r1, r8
 800a464:	008a      	lsls	r2, r1, #2
 800a466:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a46a:	f7f5 ff19 	bl	80002a0 <__aeabi_uldivmod>
 800a46e:	4602      	mov	r2, r0
 800a470:	460b      	mov	r3, r1
 800a472:	4b0d      	ldr	r3, [pc, #52]	@ (800a4a8 <UART_SetConfig+0x4e4>)
 800a474:	fba3 1302 	umull	r1, r3, r3, r2
 800a478:	095b      	lsrs	r3, r3, #5
 800a47a:	2164      	movs	r1, #100	@ 0x64
 800a47c:	fb01 f303 	mul.w	r3, r1, r3
 800a480:	1ad3      	subs	r3, r2, r3
 800a482:	011b      	lsls	r3, r3, #4
 800a484:	3332      	adds	r3, #50	@ 0x32
 800a486:	4a08      	ldr	r2, [pc, #32]	@ (800a4a8 <UART_SetConfig+0x4e4>)
 800a488:	fba2 2303 	umull	r2, r3, r2, r3
 800a48c:	095b      	lsrs	r3, r3, #5
 800a48e:	f003 020f 	and.w	r2, r3, #15
 800a492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4422      	add	r2, r4
 800a49a:	609a      	str	r2, [r3, #8]
}
 800a49c:	bf00      	nop
 800a49e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4a8:	51eb851f 	.word	0x51eb851f

0800a4ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4ac:	b084      	sub	sp, #16
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b084      	sub	sp, #16
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
 800a4b6:	f107 001c 	add.w	r0, r7, #28
 800a4ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a4be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d123      	bne.n	800a50e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a4da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	68db      	ldr	r3, [r3, #12]
 800a4e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a4ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d105      	bne.n	800a502 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 f9dc 	bl	800a8c0 <USB_CoreReset>
 800a508:	4603      	mov	r3, r0
 800a50a:	73fb      	strb	r3, [r7, #15]
 800a50c:	e01b      	b.n	800a546 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	68db      	ldr	r3, [r3, #12]
 800a512:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f9d0 	bl	800a8c0 <USB_CoreReset>
 800a520:	4603      	mov	r3, r0
 800a522:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a524:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d106      	bne.n	800a53a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a530:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	639a      	str	r2, [r3, #56]	@ 0x38
 800a538:	e005      	b.n	800a546 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a53e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a546:	7fbb      	ldrb	r3, [r7, #30]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d10b      	bne.n	800a564 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	f043 0206 	orr.w	r2, r3, #6
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	f043 0220 	orr.w	r2, r3, #32
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a564:	7bfb      	ldrb	r3, [r7, #15]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a570:	b004      	add	sp, #16
 800a572:	4770      	bx	lr

0800a574 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	f043 0201 	orr.w	r2, r3, #1
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	370c      	adds	r7, #12
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a596:	b480      	push	{r7}
 800a598:	b083      	sub	sp, #12
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	f023 0201 	bic.w	r2, r3, #1
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a5d4:	78fb      	ldrb	r3, [r7, #3]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d115      	bne.n	800a606 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a5e6:	200a      	movs	r0, #10
 800a5e8:	f7f9 ffb2 	bl	8004550 <HAL_Delay>
      ms += 10U;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	330a      	adds	r3, #10
 800a5f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 f956 	bl	800a8a4 <USB_GetMode>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d01e      	beq.n	800a63c <USB_SetCurrentMode+0x84>
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2bc7      	cmp	r3, #199	@ 0xc7
 800a602:	d9f0      	bls.n	800a5e6 <USB_SetCurrentMode+0x2e>
 800a604:	e01a      	b.n	800a63c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a606:	78fb      	ldrb	r3, [r7, #3]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d115      	bne.n	800a638 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a618:	200a      	movs	r0, #10
 800a61a:	f7f9 ff99 	bl	8004550 <HAL_Delay>
      ms += 10U;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	330a      	adds	r3, #10
 800a622:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 f93d 	bl	800a8a4 <USB_GetMode>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d005      	beq.n	800a63c <USB_SetCurrentMode+0x84>
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2bc7      	cmp	r3, #199	@ 0xc7
 800a634:	d9f0      	bls.n	800a618 <USB_SetCurrentMode+0x60>
 800a636:	e001      	b.n	800a63c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a638:	2301      	movs	r3, #1
 800a63a:	e005      	b.n	800a648 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2bc8      	cmp	r3, #200	@ 0xc8
 800a640:	d101      	bne.n	800a646 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a642:	2301      	movs	r3, #1
 800a644:	e000      	b.n	800a648 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a65a:	2300      	movs	r3, #0
 800a65c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	3301      	adds	r3, #1
 800a662:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a66a:	d901      	bls.n	800a670 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a66c:	2303      	movs	r3, #3
 800a66e:	e01b      	b.n	800a6a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	691b      	ldr	r3, [r3, #16]
 800a674:	2b00      	cmp	r3, #0
 800a676:	daf2      	bge.n	800a65e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a678:	2300      	movs	r3, #0
 800a67a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	019b      	lsls	r3, r3, #6
 800a680:	f043 0220 	orr.w	r2, r3, #32
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	3301      	adds	r3, #1
 800a68c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a694:	d901      	bls.n	800a69a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a696:	2303      	movs	r3, #3
 800a698:	e006      	b.n	800a6a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	f003 0320 	and.w	r3, r3, #32
 800a6a2:	2b20      	cmp	r3, #32
 800a6a4:	d0f0      	beq.n	800a688 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3714      	adds	r7, #20
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a6cc:	d901      	bls.n	800a6d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a6ce:	2303      	movs	r3, #3
 800a6d0:	e018      	b.n	800a704 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	691b      	ldr	r3, [r3, #16]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	daf2      	bge.n	800a6c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2210      	movs	r2, #16
 800a6e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a6f0:	d901      	bls.n	800a6f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a6f2:	2303      	movs	r3, #3
 800a6f4:	e006      	b.n	800a704 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	f003 0310 	and.w	r3, r3, #16
 800a6fe:	2b10      	cmp	r3, #16
 800a700:	d0f0      	beq.n	800a6e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3714      	adds	r7, #20
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a710:	b480      	push	{r7}
 800a712:	b089      	sub	sp, #36	@ 0x24
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	4611      	mov	r1, r2
 800a71c:	461a      	mov	r2, r3
 800a71e:	460b      	mov	r3, r1
 800a720:	71fb      	strb	r3, [r7, #7]
 800a722:	4613      	mov	r3, r2
 800a724:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a72e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a732:	2b00      	cmp	r3, #0
 800a734:	d123      	bne.n	800a77e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a736:	88bb      	ldrh	r3, [r7, #4]
 800a738:	3303      	adds	r3, #3
 800a73a:	089b      	lsrs	r3, r3, #2
 800a73c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a73e:	2300      	movs	r3, #0
 800a740:	61bb      	str	r3, [r7, #24]
 800a742:	e018      	b.n	800a776 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a744:	79fb      	ldrb	r3, [r7, #7]
 800a746:	031a      	lsls	r2, r3, #12
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	4413      	add	r3, r2
 800a74c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a750:	461a      	mov	r2, r3
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	3301      	adds	r3, #1
 800a75c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	3301      	adds	r3, #1
 800a762:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	3301      	adds	r3, #1
 800a768:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	3301      	adds	r3, #1
 800a76e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	3301      	adds	r3, #1
 800a774:	61bb      	str	r3, [r7, #24]
 800a776:	69ba      	ldr	r2, [r7, #24]
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d3e2      	bcc.n	800a744 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	3724      	adds	r7, #36	@ 0x24
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b08b      	sub	sp, #44	@ 0x2c
 800a790:	af00      	add	r7, sp, #0
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
 800a796:	4613      	mov	r3, r2
 800a798:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a7a2:	88fb      	ldrh	r3, [r7, #6]
 800a7a4:	089b      	lsrs	r3, r3, #2
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a7aa:	88fb      	ldrh	r3, [r7, #6]
 800a7ac:	f003 0303 	and.w	r3, r3, #3
 800a7b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	623b      	str	r3, [r7, #32]
 800a7b6:	e014      	b.n	800a7e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c2:	601a      	str	r2, [r3, #0]
    pDest++;
 800a7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d8:	3301      	adds	r3, #1
 800a7da:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a7dc:	6a3b      	ldr	r3, [r7, #32]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	623b      	str	r3, [r7, #32]
 800a7e2:	6a3a      	ldr	r2, [r7, #32]
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d3e6      	bcc.n	800a7b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a7ea:	8bfb      	ldrh	r3, [r7, #30]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d01e      	beq.n	800a82e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	f107 0310 	add.w	r3, r7, #16
 800a800:	6812      	ldr	r2, [r2, #0]
 800a802:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a804:	693a      	ldr	r2, [r7, #16]
 800a806:	6a3b      	ldr	r3, [r7, #32]
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	00db      	lsls	r3, r3, #3
 800a80c:	fa22 f303 	lsr.w	r3, r2, r3
 800a810:	b2da      	uxtb	r2, r3
 800a812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a814:	701a      	strb	r2, [r3, #0]
      i++;
 800a816:	6a3b      	ldr	r3, [r7, #32]
 800a818:	3301      	adds	r3, #1
 800a81a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a81e:	3301      	adds	r3, #1
 800a820:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a822:	8bfb      	ldrh	r3, [r7, #30]
 800a824:	3b01      	subs	r3, #1
 800a826:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a828:	8bfb      	ldrh	r3, [r7, #30]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1ea      	bne.n	800a804 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a830:	4618      	mov	r0, r3
 800a832:	372c      	adds	r7, #44	@ 0x2c
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	695b      	ldr	r3, [r3, #20]
 800a848:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	699b      	ldr	r3, [r3, #24]
 800a84e:	68fa      	ldr	r2, [r7, #12]
 800a850:	4013      	ands	r3, r2
 800a852:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a854:	68fb      	ldr	r3, [r7, #12]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3714      	adds	r7, #20
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800a862:	b480      	push	{r7}
 800a864:	b085      	sub	sp, #20
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
 800a86a:	460b      	mov	r3, r1
 800a86c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800a872:	78fb      	ldrb	r3, [r7, #3]
 800a874:	015a      	lsls	r2, r3, #5
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	4413      	add	r3, r2
 800a87a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800a882:	78fb      	ldrb	r3, [r7, #3]
 800a884:	015a      	lsls	r2, r3, #5
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	4413      	add	r3, r2
 800a88a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	68ba      	ldr	r2, [r7, #8]
 800a892:	4013      	ands	r3, r2
 800a894:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a896:	68bb      	ldr	r3, [r7, #8]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3714      	adds	r7, #20
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	695b      	ldr	r3, [r3, #20]
 800a8b0:	f003 0301 	and.w	r3, r3, #1
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b085      	sub	sp, #20
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8d8:	d901      	bls.n	800a8de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a8da:	2303      	movs	r3, #3
 800a8dc:	e01b      	b.n	800a916 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	daf2      	bge.n	800a8cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	f043 0201 	orr.w	r2, r3, #1
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a902:	d901      	bls.n	800a908 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a904:	2303      	movs	r3, #3
 800a906:	e006      	b.n	800a916 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	691b      	ldr	r3, [r3, #16]
 800a90c:	f003 0301 	and.w	r3, r3, #1
 800a910:	2b01      	cmp	r3, #1
 800a912:	d0f0      	beq.n	800a8f6 <USB_CoreReset+0x36>

  return HAL_OK;
 800a914:	2300      	movs	r3, #0
}
 800a916:	4618      	mov	r0, r3
 800a918:	3714      	adds	r7, #20
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr
	...

0800a924 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a924:	b084      	sub	sp, #16
 800a926:	b580      	push	{r7, lr}
 800a928:	b086      	sub	sp, #24
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
 800a92e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a944:	461a      	mov	r2, r3
 800a946:	2300      	movs	r3, #0
 800a948:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a94e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a95a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a966:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a976:	2b00      	cmp	r3, #0
 800a978:	d119      	bne.n	800a9ae <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a97a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d10a      	bne.n	800a998 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a990:	f043 0304 	orr.w	r3, r3, #4
 800a994:	6013      	str	r3, [r2, #0]
 800a996:	e014      	b.n	800a9c2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a9a6:	f023 0304 	bic.w	r3, r3, #4
 800a9aa:	6013      	str	r3, [r2, #0]
 800a9ac:	e009      	b.n	800a9c2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a9bc:	f023 0304 	bic.w	r3, r3, #4
 800a9c0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a9c2:	2110      	movs	r1, #16
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f7ff fe43 	bl	800a650 <USB_FlushTxFifo>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d001      	beq.n	800a9d4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f7ff fe6d 	bl	800a6b4 <USB_FlushRxFifo>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d001      	beq.n	800a9e4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	613b      	str	r3, [r7, #16]
 800a9e8:	e015      	b.n	800aa16 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	015a      	lsls	r2, r3, #5
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9fc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	015a      	lsls	r2, r3, #5
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	4413      	add	r3, r2
 800aa06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	3301      	adds	r3, #1
 800aa14:	613b      	str	r3, [r7, #16]
 800aa16:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d3e3      	bcc.n	800a9ea <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa2e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4a18      	ldr	r2, [pc, #96]	@ (800aa94 <USB_HostInit+0x170>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d10b      	bne.n	800aa50 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aa3e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4a15      	ldr	r2, [pc, #84]	@ (800aa98 <USB_HostInit+0x174>)
 800aa44:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a14      	ldr	r2, [pc, #80]	@ (800aa9c <USB_HostInit+0x178>)
 800aa4a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800aa4e:	e009      	b.n	800aa64 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2280      	movs	r2, #128	@ 0x80
 800aa54:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a11      	ldr	r2, [pc, #68]	@ (800aaa0 <USB_HostInit+0x17c>)
 800aa5a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a11      	ldr	r2, [pc, #68]	@ (800aaa4 <USB_HostInit+0x180>)
 800aa60:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aa64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d105      	bne.n	800aa78 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	699b      	ldr	r3, [r3, #24]
 800aa70:	f043 0210 	orr.w	r2, r3, #16
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	699a      	ldr	r2, [r3, #24]
 800aa7c:	4b0a      	ldr	r3, [pc, #40]	@ (800aaa8 <USB_HostInit+0x184>)
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800aa84:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3718      	adds	r7, #24
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa90:	b004      	add	sp, #16
 800aa92:	4770      	bx	lr
 800aa94:	40040000 	.word	0x40040000
 800aa98:	01000200 	.word	0x01000200
 800aa9c:	00e00300 	.word	0x00e00300
 800aaa0:	00600080 	.word	0x00600080
 800aaa4:	004000e0 	.word	0x004000e0
 800aaa8:	a3200008 	.word	0xa3200008

0800aaac <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b085      	sub	sp, #20
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	460b      	mov	r3, r1
 800aab6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aaca:	f023 0303 	bic.w	r3, r3, #3
 800aace:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	78fb      	ldrb	r3, [r7, #3]
 800aada:	f003 0303 	and.w	r3, r3, #3
 800aade:	68f9      	ldr	r1, [r7, #12]
 800aae0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800aae4:	4313      	orrs	r3, r2
 800aae6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800aae8:	78fb      	ldrb	r3, [r7, #3]
 800aaea:	2b01      	cmp	r3, #1
 800aaec:	d107      	bne.n	800aafe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800aafa:	6053      	str	r3, [r2, #4]
 800aafc:	e00c      	b.n	800ab18 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800aafe:	78fb      	ldrb	r3, [r7, #3]
 800ab00:	2b02      	cmp	r3, #2
 800ab02:	d107      	bne.n	800ab14 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	f241 7370 	movw	r3, #6000	@ 0x1770
 800ab10:	6053      	str	r3, [r2, #4]
 800ab12:	e001      	b.n	800ab18 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800ab14:	2301      	movs	r3, #1
 800ab16:	e000      	b.n	800ab1a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800ab18:	2300      	movs	r3, #0
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3714      	adds	r7, #20
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr

0800ab26 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b084      	sub	sp, #16
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800ab32:	2300      	movs	r3, #0
 800ab34:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800ab46:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	68fa      	ldr	r2, [r7, #12]
 800ab4c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ab50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ab54:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800ab56:	2064      	movs	r0, #100	@ 0x64
 800ab58:	f7f9 fcfa 	bl	8004550 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ab64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab68:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800ab6a:	200a      	movs	r0, #10
 800ab6c:	f7f9 fcf0 	bl	8004550 <HAL_Delay>

  return HAL_OK;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800ab7a:	b480      	push	{r7}
 800ab7c:	b085      	sub	sp, #20
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
 800ab82:	460b      	mov	r3, r1
 800ab84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800ab9e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d109      	bne.n	800abbe <USB_DriveVbus+0x44>
 800abaa:	78fb      	ldrb	r3, [r7, #3]
 800abac:	2b01      	cmp	r3, #1
 800abae:	d106      	bne.n	800abbe <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800abb8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800abbc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800abc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abc8:	d109      	bne.n	800abde <USB_DriveVbus+0x64>
 800abca:	78fb      	ldrb	r3, [r7, #3]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d106      	bne.n	800abde <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	68fa      	ldr	r2, [r7, #12]
 800abd4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800abd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800abdc:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3714      	adds	r7, #20
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800abf8:	2300      	movs	r3, #0
 800abfa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	0c5b      	lsrs	r3, r3, #17
 800ac0a:	f003 0303 	and.w	r3, r3, #3
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3714      	adds	r7, #20
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr

0800ac1a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800ac1a:	b480      	push	{r7}
 800ac1c:	b085      	sub	sp, #20
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	b29b      	uxth	r3, r3
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3714      	adds	r7, #20
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b088      	sub	sp, #32
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	4608      	mov	r0, r1
 800ac46:	4611      	mov	r1, r2
 800ac48:	461a      	mov	r2, r3
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	70fb      	strb	r3, [r7, #3]
 800ac4e:	460b      	mov	r3, r1
 800ac50:	70bb      	strb	r3, [r7, #2]
 800ac52:	4613      	mov	r3, r2
 800ac54:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ac56:	2300      	movs	r3, #0
 800ac58:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800ac5e:	78fb      	ldrb	r3, [r7, #3]
 800ac60:	015a      	lsls	r2, r3, #5
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	4413      	add	r3, r2
 800ac66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac70:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ac72:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ac76:	2b03      	cmp	r3, #3
 800ac78:	d87c      	bhi.n	800ad74 <USB_HC_Init+0x138>
 800ac7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac80 <USB_HC_Init+0x44>)
 800ac7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac80:	0800ac91 	.word	0x0800ac91
 800ac84:	0800ad37 	.word	0x0800ad37
 800ac88:	0800ac91 	.word	0x0800ac91
 800ac8c:	0800acf9 	.word	0x0800acf9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ac90:	78fb      	ldrb	r3, [r7, #3]
 800ac92:	015a      	lsls	r2, r3, #5
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	4413      	add	r3, r2
 800ac98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	f240 439d 	movw	r3, #1181	@ 0x49d
 800aca2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800aca4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	da10      	bge.n	800acce <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800acac:	78fb      	ldrb	r3, [r7, #3]
 800acae:	015a      	lsls	r2, r3, #5
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	4413      	add	r3, r2
 800acb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	78fa      	ldrb	r2, [r7, #3]
 800acbc:	0151      	lsls	r1, r2, #5
 800acbe:	693a      	ldr	r2, [r7, #16]
 800acc0:	440a      	add	r2, r1
 800acc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800acc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800acca:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800accc:	e055      	b.n	800ad7a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4a6f      	ldr	r2, [pc, #444]	@ (800ae90 <USB_HC_Init+0x254>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d151      	bne.n	800ad7a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800acd6:	78fb      	ldrb	r3, [r7, #3]
 800acd8:	015a      	lsls	r2, r3, #5
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	4413      	add	r3, r2
 800acde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	78fa      	ldrb	r2, [r7, #3]
 800ace6:	0151      	lsls	r1, r2, #5
 800ace8:	693a      	ldr	r2, [r7, #16]
 800acea:	440a      	add	r2, r1
 800acec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800acf0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800acf4:	60d3      	str	r3, [r2, #12]
      break;
 800acf6:	e040      	b.n	800ad7a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800acf8:	78fb      	ldrb	r3, [r7, #3]
 800acfa:	015a      	lsls	r2, r3, #5
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	4413      	add	r3, r2
 800ad00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad04:	461a      	mov	r2, r3
 800ad06:	f240 639d 	movw	r3, #1693	@ 0x69d
 800ad0a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ad0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	da34      	bge.n	800ad7e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ad14:	78fb      	ldrb	r3, [r7, #3]
 800ad16:	015a      	lsls	r2, r3, #5
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	78fa      	ldrb	r2, [r7, #3]
 800ad24:	0151      	lsls	r1, r2, #5
 800ad26:	693a      	ldr	r2, [r7, #16]
 800ad28:	440a      	add	r2, r1
 800ad2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ad2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad32:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ad34:	e023      	b.n	800ad7e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ad36:	78fb      	ldrb	r3, [r7, #3]
 800ad38:	015a      	lsls	r2, r3, #5
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad42:	461a      	mov	r2, r3
 800ad44:	f240 2325 	movw	r3, #549	@ 0x225
 800ad48:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ad4a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	da17      	bge.n	800ad82 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ad52:	78fb      	ldrb	r3, [r7, #3]
 800ad54:	015a      	lsls	r2, r3, #5
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	4413      	add	r3, r2
 800ad5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	78fa      	ldrb	r2, [r7, #3]
 800ad62:	0151      	lsls	r1, r2, #5
 800ad64:	693a      	ldr	r2, [r7, #16]
 800ad66:	440a      	add	r2, r1
 800ad68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ad6c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800ad70:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ad72:	e006      	b.n	800ad82 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	77fb      	strb	r3, [r7, #31]
      break;
 800ad78:	e004      	b.n	800ad84 <USB_HC_Init+0x148>
      break;
 800ad7a:	bf00      	nop
 800ad7c:	e002      	b.n	800ad84 <USB_HC_Init+0x148>
      break;
 800ad7e:	bf00      	nop
 800ad80:	e000      	b.n	800ad84 <USB_HC_Init+0x148>
      break;
 800ad82:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800ad84:	78fb      	ldrb	r3, [r7, #3]
 800ad86:	015a      	lsls	r2, r3, #5
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad90:	461a      	mov	r2, r3
 800ad92:	2300      	movs	r3, #0
 800ad94:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800ad96:	78fb      	ldrb	r3, [r7, #3]
 800ad98:	015a      	lsls	r2, r3, #5
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	78fa      	ldrb	r2, [r7, #3]
 800ada6:	0151      	lsls	r1, r2, #5
 800ada8:	693a      	ldr	r2, [r7, #16]
 800adaa:	440a      	add	r2, r1
 800adac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800adb0:	f043 0302 	orr.w	r3, r3, #2
 800adb4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800adbc:	699a      	ldr	r2, [r3, #24]
 800adbe:	78fb      	ldrb	r3, [r7, #3]
 800adc0:	f003 030f 	and.w	r3, r3, #15
 800adc4:	2101      	movs	r1, #1
 800adc6:	fa01 f303 	lsl.w	r3, r1, r3
 800adca:	6939      	ldr	r1, [r7, #16]
 800adcc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800add0:	4313      	orrs	r3, r2
 800add2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	699b      	ldr	r3, [r3, #24]
 800add8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ade0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	da03      	bge.n	800adf0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ade8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800adec:	61bb      	str	r3, [r7, #24]
 800adee:	e001      	b.n	800adf4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800adf0:	2300      	movs	r3, #0
 800adf2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f7ff fef9 	bl	800abec <USB_GetHostSpeed>
 800adfa:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800adfc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ae00:	2b02      	cmp	r3, #2
 800ae02:	d106      	bne.n	800ae12 <USB_HC_Init+0x1d6>
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2b02      	cmp	r3, #2
 800ae08:	d003      	beq.n	800ae12 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ae0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ae0e:	617b      	str	r3, [r7, #20]
 800ae10:	e001      	b.n	800ae16 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800ae12:	2300      	movs	r3, #0
 800ae14:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ae16:	787b      	ldrb	r3, [r7, #1]
 800ae18:	059b      	lsls	r3, r3, #22
 800ae1a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ae1e:	78bb      	ldrb	r3, [r7, #2]
 800ae20:	02db      	lsls	r3, r3, #11
 800ae22:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ae26:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ae28:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ae2c:	049b      	lsls	r3, r3, #18
 800ae2e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ae32:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800ae34:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800ae36:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ae3a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	431a      	orrs	r2, r3
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ae44:	78fa      	ldrb	r2, [r7, #3]
 800ae46:	0151      	lsls	r1, r2, #5
 800ae48:	693a      	ldr	r2, [r7, #16]
 800ae4a:	440a      	add	r2, r1
 800ae4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800ae50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ae54:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800ae56:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ae5a:	2b03      	cmp	r3, #3
 800ae5c:	d003      	beq.n	800ae66 <USB_HC_Init+0x22a>
 800ae5e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d10f      	bne.n	800ae86 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800ae66:	78fb      	ldrb	r3, [r7, #3]
 800ae68:	015a      	lsls	r2, r3, #5
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	78fa      	ldrb	r2, [r7, #3]
 800ae76:	0151      	lsls	r1, r2, #5
 800ae78:	693a      	ldr	r2, [r7, #16]
 800ae7a:	440a      	add	r2, r1
 800ae7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ae84:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ae86:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3720      	adds	r7, #32
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	40040000 	.word	0x40040000

0800ae94 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b08c      	sub	sp, #48	@ 0x30
 800ae98:	af02      	add	r7, sp, #8
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	4613      	mov	r3, r2
 800aea0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	785b      	ldrb	r3, [r3, #1]
 800aeaa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800aeac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aeb0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	4a5d      	ldr	r2, [pc, #372]	@ (800b02c <USB_HC_StartXfer+0x198>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d12f      	bne.n	800af1a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800aeba:	79fb      	ldrb	r3, [r7, #7]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d11c      	bne.n	800aefa <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	7c9b      	ldrb	r3, [r3, #18]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d003      	beq.n	800aed0 <USB_HC_StartXfer+0x3c>
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	7c9b      	ldrb	r3, [r3, #18]
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d124      	bne.n	800af1a <USB_HC_StartXfer+0x86>
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	799b      	ldrb	r3, [r3, #6]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d120      	bne.n	800af1a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800aed8:	69fb      	ldr	r3, [r7, #28]
 800aeda:	015a      	lsls	r2, r3, #5
 800aedc:	6a3b      	ldr	r3, [r7, #32]
 800aede:	4413      	add	r3, r2
 800aee0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aee4:	68db      	ldr	r3, [r3, #12]
 800aee6:	69fa      	ldr	r2, [r7, #28]
 800aee8:	0151      	lsls	r1, r2, #5
 800aeea:	6a3a      	ldr	r2, [r7, #32]
 800aeec:	440a      	add	r2, r1
 800aeee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aef6:	60d3      	str	r3, [r2, #12]
 800aef8:	e00f      	b.n	800af1a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	791b      	ldrb	r3, [r3, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d10b      	bne.n	800af1a <USB_HC_StartXfer+0x86>
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	795b      	ldrb	r3, [r3, #5]
 800af06:	2b01      	cmp	r3, #1
 800af08:	d107      	bne.n	800af1a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	785b      	ldrb	r3, [r3, #1]
 800af0e:	4619      	mov	r1, r3
 800af10:	68f8      	ldr	r0, [r7, #12]
 800af12:	f000 fb6b 	bl	800b5ec <USB_DoPing>
        return HAL_OK;
 800af16:	2300      	movs	r3, #0
 800af18:	e232      	b.n	800b380 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	799b      	ldrb	r3, [r3, #6]
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d158      	bne.n	800afd4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800af22:	2301      	movs	r3, #1
 800af24:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	78db      	ldrb	r3, [r3, #3]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d007      	beq.n	800af3e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800af2e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	8a92      	ldrh	r2, [r2, #20]
 800af34:	fb03 f202 	mul.w	r2, r3, r2
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	61da      	str	r2, [r3, #28]
 800af3c:	e07c      	b.n	800b038 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	7c9b      	ldrb	r3, [r3, #18]
 800af42:	2b01      	cmp	r3, #1
 800af44:	d130      	bne.n	800afa8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	6a1b      	ldr	r3, [r3, #32]
 800af4a:	2bbc      	cmp	r3, #188	@ 0xbc
 800af4c:	d918      	bls.n	800af80 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	8a9b      	ldrh	r3, [r3, #20]
 800af52:	461a      	mov	r2, r3
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	69da      	ldr	r2, [r3, #28]
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	68db      	ldr	r3, [r3, #12]
 800af64:	2b01      	cmp	r3, #1
 800af66:	d003      	beq.n	800af70 <USB_HC_StartXfer+0xdc>
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	2b02      	cmp	r3, #2
 800af6e:	d103      	bne.n	800af78 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	2202      	movs	r2, #2
 800af74:	60da      	str	r2, [r3, #12]
 800af76:	e05f      	b.n	800b038 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	2201      	movs	r2, #1
 800af7c:	60da      	str	r2, [r3, #12]
 800af7e:	e05b      	b.n	800b038 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	6a1a      	ldr	r2, [r3, #32]
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	68db      	ldr	r3, [r3, #12]
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d007      	beq.n	800afa0 <USB_HC_StartXfer+0x10c>
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	68db      	ldr	r3, [r3, #12]
 800af94:	2b02      	cmp	r3, #2
 800af96:	d003      	beq.n	800afa0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	2204      	movs	r2, #4
 800af9c:	60da      	str	r2, [r3, #12]
 800af9e:	e04b      	b.n	800b038 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	2203      	movs	r2, #3
 800afa4:	60da      	str	r2, [r3, #12]
 800afa6:	e047      	b.n	800b038 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800afa8:	79fb      	ldrb	r3, [r7, #7]
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d10d      	bne.n	800afca <USB_HC_StartXfer+0x136>
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	6a1b      	ldr	r3, [r3, #32]
 800afb2:	68ba      	ldr	r2, [r7, #8]
 800afb4:	8a92      	ldrh	r2, [r2, #20]
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d907      	bls.n	800afca <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800afba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800afbc:	68ba      	ldr	r2, [r7, #8]
 800afbe:	8a92      	ldrh	r2, [r2, #20]
 800afc0:	fb03 f202 	mul.w	r2, r3, r2
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	61da      	str	r2, [r3, #28]
 800afc8:	e036      	b.n	800b038 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	6a1a      	ldr	r2, [r3, #32]
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	61da      	str	r2, [r3, #28]
 800afd2:	e031      	b.n	800b038 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	6a1b      	ldr	r3, [r3, #32]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d018      	beq.n	800b00e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	6a1b      	ldr	r3, [r3, #32]
 800afe0:	68ba      	ldr	r2, [r7, #8]
 800afe2:	8a92      	ldrh	r2, [r2, #20]
 800afe4:	4413      	add	r3, r2
 800afe6:	3b01      	subs	r3, #1
 800afe8:	68ba      	ldr	r2, [r7, #8]
 800afea:	8a92      	ldrh	r2, [r2, #20]
 800afec:	fbb3 f3f2 	udiv	r3, r3, r2
 800aff0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800aff2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800aff4:	8b7b      	ldrh	r3, [r7, #26]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d90b      	bls.n	800b012 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800affa:	8b7b      	ldrh	r3, [r7, #26]
 800affc:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800affe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b000:	68ba      	ldr	r2, [r7, #8]
 800b002:	8a92      	ldrh	r2, [r2, #20]
 800b004:	fb03 f202 	mul.w	r2, r3, r2
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	61da      	str	r2, [r3, #28]
 800b00c:	e001      	b.n	800b012 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800b00e:	2301      	movs	r3, #1
 800b010:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	78db      	ldrb	r3, [r3, #3]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d00a      	beq.n	800b030 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b01a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b01c:	68ba      	ldr	r2, [r7, #8]
 800b01e:	8a92      	ldrh	r2, [r2, #20]
 800b020:	fb03 f202 	mul.w	r2, r3, r2
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	61da      	str	r2, [r3, #28]
 800b028:	e006      	b.n	800b038 <USB_HC_StartXfer+0x1a4>
 800b02a:	bf00      	nop
 800b02c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	6a1a      	ldr	r2, [r3, #32]
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	69db      	ldr	r3, [r3, #28]
 800b03c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b040:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b042:	04d9      	lsls	r1, r3, #19
 800b044:	4ba3      	ldr	r3, [pc, #652]	@ (800b2d4 <USB_HC_StartXfer+0x440>)
 800b046:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b048:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	7d9b      	ldrb	r3, [r3, #22]
 800b04e:	075b      	lsls	r3, r3, #29
 800b050:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b054:	69f9      	ldr	r1, [r7, #28]
 800b056:	0148      	lsls	r0, r1, #5
 800b058:	6a39      	ldr	r1, [r7, #32]
 800b05a:	4401      	add	r1, r0
 800b05c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b060:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b062:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b064:	79fb      	ldrb	r3, [r7, #7]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d009      	beq.n	800b07e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	6999      	ldr	r1, [r3, #24]
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	015a      	lsls	r2, r3, #5
 800b072:	6a3b      	ldr	r3, [r7, #32]
 800b074:	4413      	add	r3, r2
 800b076:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b07a:	460a      	mov	r2, r1
 800b07c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b07e:	6a3b      	ldr	r3, [r7, #32]
 800b080:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	f003 0301 	and.w	r3, r3, #1
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	bf0c      	ite	eq
 800b08e:	2301      	moveq	r3, #1
 800b090:	2300      	movne	r3, #0
 800b092:	b2db      	uxtb	r3, r3
 800b094:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	015a      	lsls	r2, r3, #5
 800b09a:	6a3b      	ldr	r3, [r7, #32]
 800b09c:	4413      	add	r3, r2
 800b09e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	69fa      	ldr	r2, [r7, #28]
 800b0a6:	0151      	lsls	r1, r2, #5
 800b0a8:	6a3a      	ldr	r2, [r7, #32]
 800b0aa:	440a      	add	r2, r1
 800b0ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b0b0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b0b4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	015a      	lsls	r2, r3, #5
 800b0ba:	6a3b      	ldr	r3, [r7, #32]
 800b0bc:	4413      	add	r3, r2
 800b0be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	7e7b      	ldrb	r3, [r7, #25]
 800b0c6:	075b      	lsls	r3, r3, #29
 800b0c8:	69f9      	ldr	r1, [r7, #28]
 800b0ca:	0148      	lsls	r0, r1, #5
 800b0cc:	6a39      	ldr	r1, [r7, #32]
 800b0ce:	4401      	add	r1, r0
 800b0d0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	799b      	ldrb	r3, [r3, #6]
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	f040 80c3 	bne.w	800b268 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	7c5b      	ldrb	r3, [r3, #17]
 800b0e6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b0e8:	68ba      	ldr	r2, [r7, #8]
 800b0ea:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	69fa      	ldr	r2, [r7, #28]
 800b0f0:	0151      	lsls	r1, r2, #5
 800b0f2:	6a3a      	ldr	r2, [r7, #32]
 800b0f4:	440a      	add	r2, r1
 800b0f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b0fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b0fe:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800b100:	69fb      	ldr	r3, [r7, #28]
 800b102:	015a      	lsls	r2, r3, #5
 800b104:	6a3b      	ldr	r3, [r7, #32]
 800b106:	4413      	add	r3, r2
 800b108:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	69fa      	ldr	r2, [r7, #28]
 800b110:	0151      	lsls	r1, r2, #5
 800b112:	6a3a      	ldr	r2, [r7, #32]
 800b114:	440a      	add	r2, r1
 800b116:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b11a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b11e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	79db      	ldrb	r3, [r3, #7]
 800b124:	2b01      	cmp	r3, #1
 800b126:	d123      	bne.n	800b170 <USB_HC_StartXfer+0x2dc>
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	78db      	ldrb	r3, [r3, #3]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d11f      	bne.n	800b170 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	015a      	lsls	r2, r3, #5
 800b134:	6a3b      	ldr	r3, [r7, #32]
 800b136:	4413      	add	r3, r2
 800b138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	69fa      	ldr	r2, [r7, #28]
 800b140:	0151      	lsls	r1, r2, #5
 800b142:	6a3a      	ldr	r2, [r7, #32]
 800b144:	440a      	add	r2, r1
 800b146:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b14a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b14e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	015a      	lsls	r2, r3, #5
 800b154:	6a3b      	ldr	r3, [r7, #32]
 800b156:	4413      	add	r3, r2
 800b158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	69fa      	ldr	r2, [r7, #28]
 800b160:	0151      	lsls	r1, r2, #5
 800b162:	6a3a      	ldr	r2, [r7, #32]
 800b164:	440a      	add	r2, r1
 800b166:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b16a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b16e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	7c9b      	ldrb	r3, [r3, #18]
 800b174:	2b01      	cmp	r3, #1
 800b176:	d003      	beq.n	800b180 <USB_HC_StartXfer+0x2ec>
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	7c9b      	ldrb	r3, [r3, #18]
 800b17c:	2b03      	cmp	r3, #3
 800b17e:	d117      	bne.n	800b1b0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b184:	2b01      	cmp	r3, #1
 800b186:	d113      	bne.n	800b1b0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	78db      	ldrb	r3, [r3, #3]
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d10f      	bne.n	800b1b0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b190:	69fb      	ldr	r3, [r7, #28]
 800b192:	015a      	lsls	r2, r3, #5
 800b194:	6a3b      	ldr	r3, [r7, #32]
 800b196:	4413      	add	r3, r2
 800b198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	69fa      	ldr	r2, [r7, #28]
 800b1a0:	0151      	lsls	r1, r2, #5
 800b1a2:	6a3a      	ldr	r2, [r7, #32]
 800b1a4:	440a      	add	r2, r1
 800b1a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b1aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b1ae:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	7c9b      	ldrb	r3, [r3, #18]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d162      	bne.n	800b27e <USB_HC_StartXfer+0x3ea>
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	78db      	ldrb	r3, [r3, #3]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d15e      	bne.n	800b27e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	3b01      	subs	r3, #1
 800b1c6:	2b03      	cmp	r3, #3
 800b1c8:	d858      	bhi.n	800b27c <USB_HC_StartXfer+0x3e8>
 800b1ca:	a201      	add	r2, pc, #4	@ (adr r2, 800b1d0 <USB_HC_StartXfer+0x33c>)
 800b1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d0:	0800b1e1 	.word	0x0800b1e1
 800b1d4:	0800b203 	.word	0x0800b203
 800b1d8:	0800b225 	.word	0x0800b225
 800b1dc:	0800b247 	.word	0x0800b247
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800b1e0:	69fb      	ldr	r3, [r7, #28]
 800b1e2:	015a      	lsls	r2, r3, #5
 800b1e4:	6a3b      	ldr	r3, [r7, #32]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	69fa      	ldr	r2, [r7, #28]
 800b1f0:	0151      	lsls	r1, r2, #5
 800b1f2:	6a3a      	ldr	r2, [r7, #32]
 800b1f4:	440a      	add	r2, r1
 800b1f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b1fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b1fe:	6053      	str	r3, [r2, #4]
          break;
 800b200:	e03d      	b.n	800b27e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	015a      	lsls	r2, r3, #5
 800b206:	6a3b      	ldr	r3, [r7, #32]
 800b208:	4413      	add	r3, r2
 800b20a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	69fa      	ldr	r2, [r7, #28]
 800b212:	0151      	lsls	r1, r2, #5
 800b214:	6a3a      	ldr	r2, [r7, #32]
 800b216:	440a      	add	r2, r1
 800b218:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b21c:	f043 030e 	orr.w	r3, r3, #14
 800b220:	6053      	str	r3, [r2, #4]
          break;
 800b222:	e02c      	b.n	800b27e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	015a      	lsls	r2, r3, #5
 800b228:	6a3b      	ldr	r3, [r7, #32]
 800b22a:	4413      	add	r3, r2
 800b22c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	69fa      	ldr	r2, [r7, #28]
 800b234:	0151      	lsls	r1, r2, #5
 800b236:	6a3a      	ldr	r2, [r7, #32]
 800b238:	440a      	add	r2, r1
 800b23a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b23e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b242:	6053      	str	r3, [r2, #4]
          break;
 800b244:	e01b      	b.n	800b27e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	015a      	lsls	r2, r3, #5
 800b24a:	6a3b      	ldr	r3, [r7, #32]
 800b24c:	4413      	add	r3, r2
 800b24e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	69fa      	ldr	r2, [r7, #28]
 800b256:	0151      	lsls	r1, r2, #5
 800b258:	6a3a      	ldr	r2, [r7, #32]
 800b25a:	440a      	add	r2, r1
 800b25c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b260:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b264:	6053      	str	r3, [r2, #4]
          break;
 800b266:	e00a      	b.n	800b27e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	015a      	lsls	r2, r3, #5
 800b26c:	6a3b      	ldr	r3, [r7, #32]
 800b26e:	4413      	add	r3, r2
 800b270:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b274:	461a      	mov	r2, r3
 800b276:	2300      	movs	r3, #0
 800b278:	6053      	str	r3, [r2, #4]
 800b27a:	e000      	b.n	800b27e <USB_HC_StartXfer+0x3ea>
          break;
 800b27c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b27e:	69fb      	ldr	r3, [r7, #28]
 800b280:	015a      	lsls	r2, r3, #5
 800b282:	6a3b      	ldr	r3, [r7, #32]
 800b284:	4413      	add	r3, r2
 800b286:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b294:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	78db      	ldrb	r3, [r3, #3]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d004      	beq.n	800b2a8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2a4:	613b      	str	r3, [r7, #16]
 800b2a6:	e003      	b.n	800b2b0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b2ae:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b2b6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	015a      	lsls	r2, r3, #5
 800b2bc:	6a3b      	ldr	r3, [r7, #32]
 800b2be:	4413      	add	r3, r2
 800b2c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b2ca:	79fb      	ldrb	r3, [r7, #7]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d003      	beq.n	800b2d8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	e055      	b.n	800b380 <USB_HC_StartXfer+0x4ec>
 800b2d4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	78db      	ldrb	r3, [r3, #3]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d14e      	bne.n	800b37e <USB_HC_StartXfer+0x4ea>
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	6a1b      	ldr	r3, [r3, #32]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d04a      	beq.n	800b37e <USB_HC_StartXfer+0x4ea>
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	79db      	ldrb	r3, [r3, #7]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d146      	bne.n	800b37e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	7c9b      	ldrb	r3, [r3, #18]
 800b2f4:	2b03      	cmp	r3, #3
 800b2f6:	d831      	bhi.n	800b35c <USB_HC_StartXfer+0x4c8>
 800b2f8:	a201      	add	r2, pc, #4	@ (adr r2, 800b300 <USB_HC_StartXfer+0x46c>)
 800b2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2fe:	bf00      	nop
 800b300:	0800b311 	.word	0x0800b311
 800b304:	0800b335 	.word	0x0800b335
 800b308:	0800b311 	.word	0x0800b311
 800b30c:	0800b335 	.word	0x0800b335
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	6a1b      	ldr	r3, [r3, #32]
 800b314:	3303      	adds	r3, #3
 800b316:	089b      	lsrs	r3, r3, #2
 800b318:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b31a:	8afa      	ldrh	r2, [r7, #22]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b320:	b29b      	uxth	r3, r3
 800b322:	429a      	cmp	r2, r3
 800b324:	d91c      	bls.n	800b360 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	699b      	ldr	r3, [r3, #24]
 800b32a:	f043 0220 	orr.w	r2, r3, #32
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	619a      	str	r2, [r3, #24]
        }
        break;
 800b332:	e015      	b.n	800b360 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	6a1b      	ldr	r3, [r3, #32]
 800b338:	3303      	adds	r3, #3
 800b33a:	089b      	lsrs	r3, r3, #2
 800b33c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b33e:	8afa      	ldrh	r2, [r7, #22]
 800b340:	6a3b      	ldr	r3, [r7, #32]
 800b342:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b346:	691b      	ldr	r3, [r3, #16]
 800b348:	b29b      	uxth	r3, r3
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d90a      	bls.n	800b364 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	699b      	ldr	r3, [r3, #24]
 800b352:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	619a      	str	r2, [r3, #24]
        }
        break;
 800b35a:	e003      	b.n	800b364 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800b35c:	bf00      	nop
 800b35e:	e002      	b.n	800b366 <USB_HC_StartXfer+0x4d2>
        break;
 800b360:	bf00      	nop
 800b362:	e000      	b.n	800b366 <USB_HC_StartXfer+0x4d2>
        break;
 800b364:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	6999      	ldr	r1, [r3, #24]
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	785a      	ldrb	r2, [r3, #1]
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	6a1b      	ldr	r3, [r3, #32]
 800b372:	b29b      	uxth	r3, r3
 800b374:	2000      	movs	r0, #0
 800b376:	9000      	str	r0, [sp, #0]
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	f7ff f9c9 	bl	800a710 <USB_WritePacket>
  }

  return HAL_OK;
 800b37e:	2300      	movs	r3, #0
}
 800b380:	4618      	mov	r0, r3
 800b382:	3728      	adds	r7, #40	@ 0x28
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b39a:	695b      	ldr	r3, [r3, #20]
 800b39c:	b29b      	uxth	r3, r3
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3714      	adds	r7, #20
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr

0800b3aa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b3aa:	b480      	push	{r7}
 800b3ac:	b089      	sub	sp, #36	@ 0x24
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800b3ba:	78fb      	ldrb	r3, [r7, #3]
 800b3bc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b3c2:	69bb      	ldr	r3, [r7, #24]
 800b3c4:	015a      	lsls	r2, r3, #5
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	0c9b      	lsrs	r3, r3, #18
 800b3d2:	f003 0303 	and.w	r3, r3, #3
 800b3d6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	015a      	lsls	r2, r3, #5
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	4413      	add	r3, r2
 800b3e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	0fdb      	lsrs	r3, r3, #31
 800b3e8:	f003 0301 	and.w	r3, r3, #1
 800b3ec:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800b3ee:	69bb      	ldr	r3, [r7, #24]
 800b3f0:	015a      	lsls	r2, r3, #5
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	0fdb      	lsrs	r3, r3, #31
 800b3fe:	f003 0301 	and.w	r3, r3, #1
 800b402:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	f003 0320 	and.w	r3, r3, #32
 800b40c:	2b20      	cmp	r3, #32
 800b40e:	d10d      	bne.n	800b42c <USB_HC_Halt+0x82>
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d10a      	bne.n	800b42c <USB_HC_Halt+0x82>
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d005      	beq.n	800b428 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	2b01      	cmp	r3, #1
 800b420:	d002      	beq.n	800b428 <USB_HC_Halt+0x7e>
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	2b03      	cmp	r3, #3
 800b426:	d101      	bne.n	800b42c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800b428:	2300      	movs	r3, #0
 800b42a:	e0d8      	b.n	800b5de <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d002      	beq.n	800b438 <USB_HC_Halt+0x8e>
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	2b02      	cmp	r3, #2
 800b436:	d173      	bne.n	800b520 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	015a      	lsls	r2, r3, #5
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	4413      	add	r3, r2
 800b440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	69ba      	ldr	r2, [r7, #24]
 800b448:	0151      	lsls	r1, r2, #5
 800b44a:	69fa      	ldr	r2, [r7, #28]
 800b44c:	440a      	add	r2, r1
 800b44e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b452:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b456:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	f003 0320 	and.w	r3, r3, #32
 800b460:	2b00      	cmp	r3, #0
 800b462:	d14a      	bne.n	800b4fa <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b468:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d133      	bne.n	800b4d8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	015a      	lsls	r2, r3, #5
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	4413      	add	r3, r2
 800b478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	69ba      	ldr	r2, [r7, #24]
 800b480:	0151      	lsls	r1, r2, #5
 800b482:	69fa      	ldr	r2, [r7, #28]
 800b484:	440a      	add	r2, r1
 800b486:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b48a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b48e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b490:	69bb      	ldr	r3, [r7, #24]
 800b492:	015a      	lsls	r2, r3, #5
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	4413      	add	r3, r2
 800b498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	69ba      	ldr	r2, [r7, #24]
 800b4a0:	0151      	lsls	r1, r2, #5
 800b4a2:	69fa      	ldr	r2, [r7, #28]
 800b4a4:	440a      	add	r2, r1
 800b4a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b4aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b4ae:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b4bc:	d82e      	bhi.n	800b51c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b4be:	69bb      	ldr	r3, [r7, #24]
 800b4c0:	015a      	lsls	r2, r3, #5
 800b4c2:	69fb      	ldr	r3, [r7, #28]
 800b4c4:	4413      	add	r3, r2
 800b4c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b4d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b4d4:	d0ec      	beq.n	800b4b0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b4d6:	e081      	b.n	800b5dc <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	015a      	lsls	r2, r3, #5
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	4413      	add	r3, r2
 800b4e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	69ba      	ldr	r2, [r7, #24]
 800b4e8:	0151      	lsls	r1, r2, #5
 800b4ea:	69fa      	ldr	r2, [r7, #28]
 800b4ec:	440a      	add	r2, r1
 800b4ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b4f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b4f6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b4f8:	e070      	b.n	800b5dc <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	015a      	lsls	r2, r3, #5
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	4413      	add	r3, r2
 800b502:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	69ba      	ldr	r2, [r7, #24]
 800b50a:	0151      	lsls	r1, r2, #5
 800b50c:	69fa      	ldr	r2, [r7, #28]
 800b50e:	440a      	add	r2, r1
 800b510:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b514:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b518:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b51a:	e05f      	b.n	800b5dc <USB_HC_Halt+0x232>
            break;
 800b51c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b51e:	e05d      	b.n	800b5dc <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b520:	69bb      	ldr	r3, [r7, #24]
 800b522:	015a      	lsls	r2, r3, #5
 800b524:	69fb      	ldr	r3, [r7, #28]
 800b526:	4413      	add	r3, r2
 800b528:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	69ba      	ldr	r2, [r7, #24]
 800b530:	0151      	lsls	r1, r2, #5
 800b532:	69fa      	ldr	r2, [r7, #28]
 800b534:	440a      	add	r2, r1
 800b536:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b53a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b53e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b546:	691b      	ldr	r3, [r3, #16]
 800b548:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d133      	bne.n	800b5b8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	015a      	lsls	r2, r3, #5
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	4413      	add	r3, r2
 800b558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	69ba      	ldr	r2, [r7, #24]
 800b560:	0151      	lsls	r1, r2, #5
 800b562:	69fa      	ldr	r2, [r7, #28]
 800b564:	440a      	add	r2, r1
 800b566:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b56a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b56e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b570:	69bb      	ldr	r3, [r7, #24]
 800b572:	015a      	lsls	r2, r3, #5
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	4413      	add	r3, r2
 800b578:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	69ba      	ldr	r2, [r7, #24]
 800b580:	0151      	lsls	r1, r2, #5
 800b582:	69fa      	ldr	r2, [r7, #28]
 800b584:	440a      	add	r2, r1
 800b586:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b58a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b58e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	3301      	adds	r3, #1
 800b594:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b59c:	d81d      	bhi.n	800b5da <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	015a      	lsls	r2, r3, #5
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b5b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5b4:	d0ec      	beq.n	800b590 <USB_HC_Halt+0x1e6>
 800b5b6:	e011      	b.n	800b5dc <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	015a      	lsls	r2, r3, #5
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	4413      	add	r3, r2
 800b5c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	69ba      	ldr	r2, [r7, #24]
 800b5c8:	0151      	lsls	r1, r2, #5
 800b5ca:	69fa      	ldr	r2, [r7, #28]
 800b5cc:	440a      	add	r2, r1
 800b5ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b5d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b5d6:	6013      	str	r3, [r2, #0]
 800b5d8:	e000      	b.n	800b5dc <USB_HC_Halt+0x232>
          break;
 800b5da:	bf00      	nop
    }
  }

  return HAL_OK;
 800b5dc:	2300      	movs	r3, #0
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3724      	adds	r7, #36	@ 0x24
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr
	...

0800b5ec <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b087      	sub	sp, #28
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b5fc:	78fb      	ldrb	r3, [r7, #3]
 800b5fe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b600:	2301      	movs	r3, #1
 800b602:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	04da      	lsls	r2, r3, #19
 800b608:	4b15      	ldr	r3, [pc, #84]	@ (800b660 <USB_DoPing+0x74>)
 800b60a:	4013      	ands	r3, r2
 800b60c:	693a      	ldr	r2, [r7, #16]
 800b60e:	0151      	lsls	r1, r2, #5
 800b610:	697a      	ldr	r2, [r7, #20]
 800b612:	440a      	add	r2, r1
 800b614:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b618:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b61c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	015a      	lsls	r2, r3, #5
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	4413      	add	r3, r2
 800b626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b634:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b63c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	015a      	lsls	r2, r3, #5
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	4413      	add	r3, r2
 800b646:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b64a:	461a      	mov	r2, r3
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b650:	2300      	movs	r3, #0
}
 800b652:	4618      	mov	r0, r3
 800b654:	371c      	adds	r7, #28
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr
 800b65e:	bf00      	nop
 800b660:	1ff80000 	.word	0x1ff80000

0800b664 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b088      	sub	sp, #32
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b66c:	2300      	movs	r3, #0
 800b66e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800b674:	2300      	movs	r3, #0
 800b676:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f7fe ff8c 	bl	800a596 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b67e:	2110      	movs	r1, #16
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f7fe ffe5 	bl	800a650 <USB_FlushTxFifo>
 800b686:	4603      	mov	r3, r0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d001      	beq.n	800b690 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800b68c:	2301      	movs	r3, #1
 800b68e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f7ff f80f 	bl	800a6b4 <USB_FlushRxFifo>
 800b696:	4603      	mov	r3, r0
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d001      	beq.n	800b6a0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	61bb      	str	r3, [r7, #24]
 800b6a4:	e01f      	b.n	800b6e6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800b6a6:	69bb      	ldr	r3, [r7, #24]
 800b6a8:	015a      	lsls	r2, r3, #5
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	4413      	add	r3, r2
 800b6ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b6bc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b6c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b6cc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	015a      	lsls	r2, r3, #5
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6da:	461a      	mov	r2, r3
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b6e0:	69bb      	ldr	r3, [r7, #24]
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	61bb      	str	r3, [r7, #24]
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	2b0f      	cmp	r3, #15
 800b6ea:	d9dc      	bls.n	800b6a6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	61bb      	str	r3, [r7, #24]
 800b6f0:	e034      	b.n	800b75c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	015a      	lsls	r2, r3, #5
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	4413      	add	r3, r2
 800b6fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b708:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b710:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b718:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	015a      	lsls	r2, r3, #5
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	4413      	add	r3, r2
 800b722:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b726:	461a      	mov	r2, r3
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	3301      	adds	r3, #1
 800b730:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b738:	d80c      	bhi.n	800b754 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b73a:	69bb      	ldr	r3, [r7, #24]
 800b73c:	015a      	lsls	r2, r3, #5
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	4413      	add	r3, r2
 800b742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b74c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b750:	d0ec      	beq.n	800b72c <USB_StopHost+0xc8>
 800b752:	e000      	b.n	800b756 <USB_StopHost+0xf2>
        break;
 800b754:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	3301      	adds	r3, #1
 800b75a:	61bb      	str	r3, [r7, #24]
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	2b0f      	cmp	r3, #15
 800b760:	d9c7      	bls.n	800b6f2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b768:	461a      	mov	r2, r3
 800b76a:	f04f 33ff 	mov.w	r3, #4294967295
 800b76e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f04f 32ff 	mov.w	r2, #4294967295
 800b776:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f7fe fefb 	bl	800a574 <USB_EnableGlobalInt>

  return ret;
 800b77e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b780:	4618      	mov	r0, r3
 800b782:	3720      	adds	r7, #32
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b788:	b590      	push	{r4, r7, lr}
 800b78a:	b08b      	sub	sp, #44	@ 0x2c
 800b78c:	af04      	add	r7, sp, #16
 800b78e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint16_t ep_mps;
  uint8_t max_ep;
  uint8_t num = 0U;
 800b790:	2300      	movs	r3, #0
 800b792:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800b79a:	7919      	ldrb	r1, [r3, #4]
 800b79c:	23ff      	movs	r3, #255	@ 0xff
 800b79e:	2201      	movs	r2, #1
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f001 f879 	bl	800c898 <USBH_FindInterface>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b7aa:	7dbb      	ldrb	r3, [r7, #22]
 800b7ac:	2bff      	cmp	r3, #255	@ 0xff
 800b7ae:	d002      	beq.n	800b7b6 <USBH_HID_InterfaceInit+0x2e>
 800b7b0:	7dbb      	ldrb	r3, [r7, #22]
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d90f      	bls.n	800b7d6 <USBH_HID_InterfaceInit+0x4e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 800b7b6:	48a9      	ldr	r0, [pc, #676]	@ (800ba5c <USBH_HID_InterfaceInit+0x2d4>)
 800b7b8:	f003 fade 	bl	800ed78 <iprintf>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	48a6      	ldr	r0, [pc, #664]	@ (800ba60 <USBH_HID_InterfaceInit+0x2d8>)
 800b7c8:	f003 fad6 	bl	800ed78 <iprintf>
 800b7cc:	200a      	movs	r0, #10
 800b7ce:	f003 fae5 	bl	800ed9c <putchar>
    return USBH_FAIL;
 800b7d2:	2302      	movs	r3, #2
 800b7d4:	e13d      	b.n	800ba52 <USBH_HID_InterfaceInit+0x2ca>
  }

  status = USBH_SelectInterface(phost, interface);
 800b7d6:	7dbb      	ldrb	r3, [r7, #22]
 800b7d8:	4619      	mov	r1, r3
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 fff4 	bl	800c7c8 <USBH_SelectInterface>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 800b7e4:	7d7b      	ldrb	r3, [r7, #21]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d001      	beq.n	800b7ee <USBH_HID_InterfaceInit+0x66>
  {
    return USBH_FAIL;
 800b7ea:	2302      	movs	r3, #2
 800b7ec:	e131      	b.n	800ba52 <USBH_HID_InterfaceInit+0x2ca>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8d3 4d34 	ldr.w	r4, [r3, #3380]	@ 0xd34
 800b7f4:	2034      	movs	r0, #52	@ 0x34
 800b7f6:	f003 f8bb 	bl	800e970 <malloc>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800b804:	69db      	ldr	r3, [r3, #28]
 800b806:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d10a      	bne.n	800b824 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
 800b80e:	4893      	ldr	r0, [pc, #588]	@ (800ba5c <USBH_HID_InterfaceInit+0x2d4>)
 800b810:	f003 fab2 	bl	800ed78 <iprintf>
 800b814:	4893      	ldr	r0, [pc, #588]	@ (800ba64 <USBH_HID_InterfaceInit+0x2dc>)
 800b816:	f003 faaf 	bl	800ed78 <iprintf>
 800b81a:	200a      	movs	r0, #10
 800b81c:	f003 fabe 	bl	800ed9c <putchar>
    return USBH_FAIL;
 800b820:	2302      	movs	r3, #2
 800b822:	e116      	b.n	800ba52 <USBH_HID_InterfaceInit+0x2ca>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 800b824:	2234      	movs	r2, #52	@ 0x34
 800b826:	2100      	movs	r1, #0
 800b828:	6938      	ldr	r0, [r7, #16]
 800b82a:	f003 fc35 	bl	800f098 <memset>

  HID_Handle->state = USBH_HID_ERROR;
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	2207      	movs	r2, #7
 800b832:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800b834:	7dbb      	ldrb	r3, [r7, #22]
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	211a      	movs	r1, #26
 800b83a:	fb01 f303 	mul.w	r3, r1, r3
 800b83e:	4413      	add	r3, r2
 800b840:	f603 5301 	addw	r3, r3, #3329	@ 0xd01
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	2b01      	cmp	r3, #1
 800b848:	d109      	bne.n	800b85e <USBH_HID_InterfaceInit+0xd6>
  {
    USBH_UsrLog("KeyBoard device found!");
 800b84a:	4887      	ldr	r0, [pc, #540]	@ (800ba68 <USBH_HID_InterfaceInit+0x2e0>)
 800b84c:	f003 fa94 	bl	800ed78 <iprintf>
 800b850:	200a      	movs	r0, #10
 800b852:	f003 faa3 	bl	800ed9c <putchar>
    HID_Handle->Init = USBH_HID_KeybdInit;
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	4a84      	ldr	r2, [pc, #528]	@ (800ba6c <USBH_HID_InterfaceInit+0x2e4>)
 800b85a:	631a      	str	r2, [r3, #48]	@ 0x30
 800b85c:	e01c      	b.n	800b898 <USBH_HID_InterfaceInit+0x110>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 800b85e:	7dbb      	ldrb	r3, [r7, #22]
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	211a      	movs	r1, #26
 800b864:	fb01 f303 	mul.w	r3, r1, r3
 800b868:	4413      	add	r3, r2
 800b86a:	f603 5301 	addw	r3, r3, #3329	@ 0xd01
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	2b02      	cmp	r3, #2
 800b872:	d109      	bne.n	800b888 <USBH_HID_InterfaceInit+0x100>
  {
    USBH_UsrLog("Mouse device found!");
 800b874:	487e      	ldr	r0, [pc, #504]	@ (800ba70 <USBH_HID_InterfaceInit+0x2e8>)
 800b876:	f003 fa7f 	bl	800ed78 <iprintf>
 800b87a:	200a      	movs	r0, #10
 800b87c:	f003 fa8e 	bl	800ed9c <putchar>
    HID_Handle->Init = USBH_HID_MouseInit;
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	4a7c      	ldr	r2, [pc, #496]	@ (800ba74 <USBH_HID_InterfaceInit+0x2ec>)
 800b884:	631a      	str	r2, [r3, #48]	@ 0x30
 800b886:	e007      	b.n	800b898 <USBH_HID_InterfaceInit+0x110>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
 800b888:	487b      	ldr	r0, [pc, #492]	@ (800ba78 <USBH_HID_InterfaceInit+0x2f0>)
 800b88a:	f003 fa75 	bl	800ed78 <iprintf>
 800b88e:	200a      	movs	r0, #10
 800b890:	f003 fa84 	bl	800ed9c <putchar>
    return USBH_FAIL;
 800b894:	2302      	movs	r3, #2
 800b896:	e0dc      	b.n	800ba52 <USBH_HID_InterfaceInit+0x2ca>
  }

  HID_Handle->state     = USBH_HID_INIT;
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	2200      	movs	r2, #0
 800b89c:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = USBH_HID_REQ_INIT;
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b8a4:	7dbb      	ldrb	r3, [r7, #22]
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	211a      	movs	r1, #26
 800b8aa:	fb01 f303 	mul.w	r3, r1, r3
 800b8ae:	4413      	add	r3, r2
 800b8b0:	f603 5306 	addw	r3, r3, #3334	@ 0xd06
 800b8b4:	781a      	ldrb	r2, [r3, #0]
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b8ba:	7dbb      	ldrb	r3, [r7, #22]
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	211a      	movs	r1, #26
 800b8c0:	fb01 f303 	mul.w	r3, r1, r3
 800b8c4:	4413      	add	r3, r2
 800b8c6:	f603 5308 	addw	r3, r3, #3336	@ 0xd08
 800b8ca:	881a      	ldrh	r2, [r3, #0]
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800b8d0:	7dbb      	ldrb	r3, [r7, #22]
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	211a      	movs	r1, #26
 800b8d6:	fb01 f303 	mul.w	r3, r1, r3
 800b8da:	4413      	add	r3, r2
 800b8dc:	f603 530a 	addw	r3, r3, #3338	@ 0xd0a
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll < HID_MIN_POLL)
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	8b9b      	ldrh	r3, [r3, #28]
 800b8ec:	2b09      	cmp	r3, #9
 800b8ee:	d802      	bhi.n	800b8f6 <USBH_HID_InterfaceInit+0x16e>
  {
    HID_Handle->poll = HID_MIN_POLL;
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	220a      	movs	r2, #10
 800b8f4:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 800b8f6:	7dbb      	ldrb	r3, [r7, #22]
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	211a      	movs	r1, #26
 800b8fc:	fb01 f303 	mul.w	r3, r1, r3
 800b900:	4413      	add	r3, r2
 800b902:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	2b02      	cmp	r3, #2
 800b90a:	bf28      	it	cs
 800b90c:	2302      	movcs	r3, #2
 800b90e:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 800b910:	2300      	movs	r3, #0
 800b912:	75fb      	strb	r3, [r7, #23]
 800b914:	e097      	b.n	800ba46 <USBH_HID_InterfaceInit+0x2be>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 800b916:	7dbb      	ldrb	r3, [r7, #22]
 800b918:	7df9      	ldrb	r1, [r7, #23]
 800b91a:	687a      	ldr	r2, [r7, #4]
 800b91c:	3101      	adds	r1, #1
 800b91e:	00c9      	lsls	r1, r1, #3
 800b920:	201a      	movs	r0, #26
 800b922:	fb00 f303 	mul.w	r3, r0, r3
 800b926:	440b      	add	r3, r1
 800b928:	4413      	add	r3, r2
 800b92a:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	b25b      	sxtb	r3, r3
 800b932:	2b00      	cmp	r3, #0
 800b934:	da42      	bge.n	800b9bc <USBH_HID_InterfaceInit+0x234>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800b936:	7dbb      	ldrb	r3, [r7, #22]
 800b938:	7df9      	ldrb	r1, [r7, #23]
 800b93a:	687a      	ldr	r2, [r7, #4]
 800b93c:	3101      	adds	r1, #1
 800b93e:	00c9      	lsls	r1, r1, #3
 800b940:	201a      	movs	r0, #26
 800b942:	fb00 f303 	mul.w	r3, r0, r3
 800b946:	440b      	add	r3, r1
 800b948:	4413      	add	r3, r2
 800b94a:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800b94e:	781a      	ldrb	r2, [r3, #0]
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	791b      	ldrb	r3, [r3, #4]
 800b958:	4619      	mov	r1, r3
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f002 fc93 	bl	800e286 <USBH_AllocPipe>
 800b960:	4603      	mov	r3, r0
 800b962:	461a      	mov	r2, r3
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	705a      	strb	r2, [r3, #1]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800b968:	7dbb      	ldrb	r3, [r7, #22]
 800b96a:	7df9      	ldrb	r1, [r7, #23]
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	3101      	adds	r1, #1
 800b970:	00c9      	lsls	r1, r1, #3
 800b972:	201a      	movs	r0, #26
 800b974:	fb00 f303 	mul.w	r3, r0, r3
 800b978:	440b      	add	r3, r1
 800b97a:	4413      	add	r3, r2
 800b97c:	f503 6350 	add.w	r3, r3, #3328	@ 0xd00
 800b980:	881b      	ldrh	r3, [r3, #0]
 800b982:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	7859      	ldrb	r1, [r3, #1]
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	7918      	ldrb	r0, [r3, #4]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f893 4cd4 	ldrb.w	r4, [r3, #3284]	@ 0xcd4
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800b998:	89ba      	ldrh	r2, [r7, #12]
 800b99a:	9202      	str	r2, [sp, #8]
 800b99c:	2203      	movs	r2, #3
 800b99e:	9201      	str	r2, [sp, #4]
 800b9a0:	9300      	str	r3, [sp, #0]
 800b9a2:	4623      	mov	r3, r4
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f002 fc3e 	bl	800e228 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	785b      	ldrb	r3, [r3, #1]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f002 ff51 	bl	800e85c <USBH_LL_SetToggle>
 800b9ba:	e041      	b.n	800ba40 <USBH_HID_InterfaceInit+0x2b8>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800b9bc:	7dbb      	ldrb	r3, [r7, #22]
 800b9be:	7df9      	ldrb	r1, [r7, #23]
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	3101      	adds	r1, #1
 800b9c4:	00c9      	lsls	r1, r1, #3
 800b9c6:	201a      	movs	r0, #26
 800b9c8:	fb00 f303 	mul.w	r3, r0, r3
 800b9cc:	440b      	add	r3, r1
 800b9ce:	4413      	add	r3, r2
 800b9d0:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800b9d4:	781a      	ldrb	r2, [r3, #0]
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe = USBH_AllocPipe(phost, HID_Handle->OutEp);
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	78db      	ldrb	r3, [r3, #3]
 800b9de:	4619      	mov	r1, r3
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f002 fc50 	bl	800e286 <USBH_AllocPipe>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	701a      	strb	r2, [r3, #0]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800b9ee:	7dbb      	ldrb	r3, [r7, #22]
 800b9f0:	7df9      	ldrb	r1, [r7, #23]
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	3101      	adds	r1, #1
 800b9f6:	00c9      	lsls	r1, r1, #3
 800b9f8:	201a      	movs	r0, #26
 800b9fa:	fb00 f303 	mul.w	r3, r0, r3
 800b9fe:	440b      	add	r3, r1
 800ba00:	4413      	add	r3, r2
 800ba02:	f503 6350 	add.w	r3, r3, #3328	@ 0xd00
 800ba06:	881b      	ldrh	r3, [r3, #0]
 800ba08:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	7819      	ldrb	r1, [r3, #0]
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	78d8      	ldrb	r0, [r3, #3]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f893 4cd4 	ldrb.w	r4, [r3, #3284]	@ 0xcd4
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800ba1e:	89ba      	ldrh	r2, [r7, #12]
 800ba20:	9202      	str	r2, [sp, #8]
 800ba22:	2203      	movs	r2, #3
 800ba24:	9201      	str	r2, [sp, #4]
 800ba26:	9300      	str	r3, [sp, #0]
 800ba28:	4623      	mov	r3, r4
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f002 fbfb 	bl	800e228 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	2200      	movs	r2, #0
 800ba38:	4619      	mov	r1, r3
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f002 ff0e 	bl	800e85c <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 800ba40:	7dfb      	ldrb	r3, [r7, #23]
 800ba42:	3301      	adds	r3, #1
 800ba44:	75fb      	strb	r3, [r7, #23]
 800ba46:	7dfa      	ldrb	r2, [r7, #23]
 800ba48:	7bfb      	ldrb	r3, [r7, #15]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	f4ff af63 	bcc.w	800b916 <USBH_HID_InterfaceInit+0x18e>
    }
  }

  return USBH_OK;
 800ba50:	2300      	movs	r3, #0
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	371c      	adds	r7, #28
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd90      	pop	{r4, r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	0800ffe4 	.word	0x0800ffe4
 800ba60:	0800fff0 	.word	0x0800fff0
 800ba64:	08010018 	.word	0x08010018
 800ba68:	08010040 	.word	0x08010040
 800ba6c:	0800c1b1 	.word	0x0800c1b1
 800ba70:	08010058 	.word	0x08010058
 800ba74:	0800c401 	.word	0x0800c401
 800ba78:	0801006c 	.word	0x0801006c

0800ba7c <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800ba8a:	69db      	ldr	r3, [r3, #28]
 800ba8c:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	785b      	ldrb	r3, [r3, #1]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d00e      	beq.n	800bab4 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	785b      	ldrb	r3, [r3, #1]
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f002 fbe2 	bl	800e266 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	785b      	ldrb	r3, [r3, #1]
 800baa6:	4619      	mov	r1, r3
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f002 fc0e 	bl	800e2ca <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2200      	movs	r2, #0
 800bab2:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d00e      	beq.n	800bada <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	4619      	mov	r1, r3
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f002 fbcf 	bl	800e266 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	4619      	mov	r1, r3
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f002 fbfb 	bl	800e2ca <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2200      	movs	r2, #0
 800bad8:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800bae0:	69db      	ldr	r3, [r3, #28]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d00b      	beq.n	800bafe <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800baec:	69db      	ldr	r3, [r3, #28]
 800baee:	4618      	mov	r0, r3
 800baf0:	f002 ff46 	bl	800e980 <free>
    phost->pActiveClass->pData = 0U;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800bafa:	2200      	movs	r2, #0
 800bafc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800bafe:	2300      	movs	r3, #0
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3710      	adds	r7, #16
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b084      	sub	sp, #16
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 800bb10:	2301      	movs	r3, #1
 800bb12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 800bb14:	2301      	movs	r3, #1
 800bb16:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800bb1e:	69db      	ldr	r3, [r3, #28]
 800bb20:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	795b      	ldrb	r3, [r3, #5]
 800bb26:	2b05      	cmp	r3, #5
 800bb28:	d872      	bhi.n	800bc10 <USBH_HID_ClassRequest+0x108>
 800bb2a:	a201      	add	r2, pc, #4	@ (adr r2, 800bb30 <USBH_HID_ClassRequest+0x28>)
 800bb2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb30:	0800bb49 	.word	0x0800bb49
 800bb34:	0800bc11 	.word	0x0800bc11
 800bb38:	0800bb63 	.word	0x0800bb63
 800bb3c:	0800bb49 	.word	0x0800bb49
 800bb40:	0800bb9f 	.word	0x0800bb9f
 800bb44:	0800bbc9 	.word	0x0800bbc9
  {
    case USBH_HID_REQ_INIT:
    case USBH_HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	331c      	adds	r3, #28
 800bb52:	4619      	mov	r1, r3
 800bb54:	4610      	mov	r0, r2
 800bb56:	f000 fa17 	bl	800bf88 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = USBH_HID_REQ_GET_REPORT_DESC;
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	2202      	movs	r2, #2
 800bb5e:	715a      	strb	r2, [r3, #5]

      break;
 800bb60:	e05d      	b.n	800bc1e <USBH_HID_ClassRequest+0x116>
    case USBH_HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bb66:	4619      	mov	r1, r3
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 f965 	bl	800be38 <USBH_HID_GetHIDReportDescriptor>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800bb72:	7bbb      	ldrb	r3, [r7, #14]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d103      	bne.n	800bb80 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = USBH_HID_REQ_SET_IDLE;
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	2204      	movs	r2, #4
 800bb7c:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 800bb7e:	e049      	b.n	800bc14 <USBH_HID_ClassRequest+0x10c>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800bb80:	7bbb      	ldrb	r3, [r7, #14]
 800bb82:	2b03      	cmp	r3, #3
 800bb84:	d146      	bne.n	800bc14 <USBH_HID_ClassRequest+0x10c>
        USBH_ErrLog("Control error: HID: Device Get Report Descriptor request failed");
 800bb86:	4828      	ldr	r0, [pc, #160]	@ (800bc28 <USBH_HID_ClassRequest+0x120>)
 800bb88:	f003 f8f6 	bl	800ed78 <iprintf>
 800bb8c:	4827      	ldr	r0, [pc, #156]	@ (800bc2c <USBH_HID_ClassRequest+0x124>)
 800bb8e:	f003 f8f3 	bl	800ed78 <iprintf>
 800bb92:	200a      	movs	r0, #10
 800bb94:	f003 f902 	bl	800ed9c <putchar>
        status = USBH_FAIL;
 800bb98:	2302      	movs	r3, #2
 800bb9a:	73fb      	strb	r3, [r7, #15]
      break;
 800bb9c:	e03a      	b.n	800bc14 <USBH_HID_ClassRequest+0x10c>

    case USBH_HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 800bb9e:	2200      	movs	r2, #0
 800bba0:	2100      	movs	r1, #0
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 f976 	bl	800be94 <USBH_HID_SetIdle>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 800bbac:	7bbb      	ldrb	r3, [r7, #14]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d103      	bne.n	800bbba <USBH_HID_ClassRequest+0xb2>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	2205      	movs	r2, #5
 800bbb6:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 800bbb8:	e02e      	b.n	800bc18 <USBH_HID_ClassRequest+0x110>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 800bbba:	7bbb      	ldrb	r3, [r7, #14]
 800bbbc:	2b03      	cmp	r3, #3
 800bbbe:	d12b      	bne.n	800bc18 <USBH_HID_ClassRequest+0x110>
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	2205      	movs	r2, #5
 800bbc4:	715a      	strb	r2, [r3, #5]
      break;
 800bbc6:	e027      	b.n	800bc18 <USBH_HID_ClassRequest+0x110>

    case USBH_HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 800bbc8:	2100      	movs	r1, #0
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 f9b6 	bl	800bf3c <USBH_HID_SetProtocol>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800bbd4:	7bbb      	ldrb	r3, [r7, #14]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d10b      	bne.n	800bbf2 <USBH_HID_ClassRequest+0xea>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_IDLE;
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	2201      	movs	r2, #1
 800bbde:	715a      	strb	r2, [r3, #5]

        /* all requests performed */
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800bbe6:	2102      	movs	r1, #2
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	4798      	blx	r3
        status = USBH_OK;
 800bbec:	2300      	movs	r3, #0
 800bbee:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 800bbf0:	e014      	b.n	800bc1c <USBH_HID_ClassRequest+0x114>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800bbf2:	7bbb      	ldrb	r3, [r7, #14]
 800bbf4:	2b03      	cmp	r3, #3
 800bbf6:	d111      	bne.n	800bc1c <USBH_HID_ClassRequest+0x114>
        USBH_ErrLog("Control error: HID: Device Set protocol request failed");
 800bbf8:	480b      	ldr	r0, [pc, #44]	@ (800bc28 <USBH_HID_ClassRequest+0x120>)
 800bbfa:	f003 f8bd 	bl	800ed78 <iprintf>
 800bbfe:	480c      	ldr	r0, [pc, #48]	@ (800bc30 <USBH_HID_ClassRequest+0x128>)
 800bc00:	f003 f8ba 	bl	800ed78 <iprintf>
 800bc04:	200a      	movs	r0, #10
 800bc06:	f003 f8c9 	bl	800ed9c <putchar>
        status = USBH_FAIL;
 800bc0a:	2302      	movs	r3, #2
 800bc0c:	73fb      	strb	r3, [r7, #15]
      break;
 800bc0e:	e005      	b.n	800bc1c <USBH_HID_ClassRequest+0x114>

    case USBH_HID_REQ_IDLE:
    default:
      break;
 800bc10:	bf00      	nop
 800bc12:	e004      	b.n	800bc1e <USBH_HID_ClassRequest+0x116>
      break;
 800bc14:	bf00      	nop
 800bc16:	e002      	b.n	800bc1e <USBH_HID_ClassRequest+0x116>
      break;
 800bc18:	bf00      	nop
 800bc1a:	e000      	b.n	800bc1e <USBH_HID_ClassRequest+0x116>
      break;
 800bc1c:	bf00      	nop
  }

  return status;
 800bc1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3710      	adds	r7, #16
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	08010084 	.word	0x08010084
 800bc2c:	0801008c 	.word	0x0801008c
 800bc30:	080100cc 	.word	0x080100cc

0800bc34 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b088      	sub	sp, #32
 800bc38:	af02      	add	r7, sp, #8
 800bc3a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800bc46:	69db      	ldr	r3, [r3, #28]
 800bc48:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	789b      	ldrb	r3, [r3, #2]
 800bc4e:	2b06      	cmp	r3, #6
 800bc50:	f200 80c1 	bhi.w	800bdd6 <USBH_HID_Process+0x1a2>
 800bc54:	a201      	add	r2, pc, #4	@ (adr r2, 800bc5c <USBH_HID_Process+0x28>)
 800bc56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc5a:	bf00      	nop
 800bc5c:	0800bc79 	.word	0x0800bc79
 800bc60:	0800bcb1 	.word	0x0800bcb1
 800bc64:	0800bdd7 	.word	0x0800bdd7
 800bc68:	0800bdd7 	.word	0x0800bdd7
 800bc6c:	0800bd21 	.word	0x0800bd21
 800bc70:	0800bd0b 	.word	0x0800bd0b
 800bc74:	0800bd4f 	.word	0x0800bd4f
  {
    case USBH_HID_INIT:
      status = HID_Handle->Init(phost);
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	4798      	blx	r3
 800bc80:	4603      	mov	r3, r0
 800bc82:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800bc84:	7dfb      	ldrb	r3, [r7, #23]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d103      	bne.n	800bc92 <USBH_HID_Process+0x5e>
      {
        HID_Handle->state = USBH_HID_IDLE;
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bc90:	e0a6      	b.n	800bde0 <USBH_HID_Process+0x1ac>
        USBH_ErrLog("HID Class Init failed");
 800bc92:	4856      	ldr	r0, [pc, #344]	@ (800bdec <USBH_HID_Process+0x1b8>)
 800bc94:	f003 f870 	bl	800ed78 <iprintf>
 800bc98:	4855      	ldr	r0, [pc, #340]	@ (800bdf0 <USBH_HID_Process+0x1bc>)
 800bc9a:	f003 f86d 	bl	800ed78 <iprintf>
 800bc9e:	200a      	movs	r0, #10
 800bca0:	f003 f87c 	bl	800ed9c <putchar>
        HID_Handle->state = USBH_HID_ERROR;
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	2207      	movs	r2, #7
 800bca8:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800bcaa:	2302      	movs	r3, #2
 800bcac:	75fb      	strb	r3, [r7, #23]
      break;
 800bcae:	e097      	b.n	800bde0 <USBH_HID_Process+0x1ac>

    case USBH_HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	695a      	ldr	r2, [r3, #20]
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	8b1b      	ldrh	r3, [r3, #24]
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	9300      	str	r3, [sp, #0]
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	2101      	movs	r1, #1
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 f90e 	bl	800bee4 <USBH_HID_GetReport>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800bccc:	7dfb      	ldrb	r3, [r7, #23]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d103      	bne.n	800bcda <USBH_HID_Process+0xa6>
      {
        HID_Handle->state = USBH_HID_SYNC;
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	2205      	movs	r2, #5
 800bcd6:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bcd8:	e082      	b.n	800bde0 <USBH_HID_Process+0x1ac>
      else if (status == USBH_BUSY)
 800bcda:	7dfb      	ldrb	r3, [r7, #23]
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d105      	bne.n	800bcec <USBH_HID_Process+0xb8>
        HID_Handle->state = USBH_HID_IDLE;
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	2201      	movs	r2, #1
 800bce4:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800bce6:	2300      	movs	r3, #0
 800bce8:	75fb      	strb	r3, [r7, #23]
      break;
 800bcea:	e079      	b.n	800bde0 <USBH_HID_Process+0x1ac>
      else if (status == USBH_NOT_SUPPORTED)
 800bcec:	7dfb      	ldrb	r3, [r7, #23]
 800bcee:	2b03      	cmp	r3, #3
 800bcf0:	d105      	bne.n	800bcfe <USBH_HID_Process+0xca>
        HID_Handle->state = USBH_HID_SYNC;
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	2205      	movs	r2, #5
 800bcf6:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	75fb      	strb	r3, [r7, #23]
      break;
 800bcfc:	e070      	b.n	800bde0 <USBH_HID_Process+0x1ac>
        HID_Handle->state = USBH_HID_ERROR;
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	2207      	movs	r2, #7
 800bd02:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800bd04:	2302      	movs	r3, #2
 800bd06:	75fb      	strb	r3, [r7, #23]
      break;
 800bd08:	e06a      	b.n	800bde0 <USBH_HID_Process+0x1ac>

    case USBH_HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 800bd10:	f003 0301 	and.w	r3, r3, #1
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d060      	beq.n	800bdda <USBH_HID_Process+0x1a6>
      {
        HID_Handle->state = USBH_HID_GET_DATA;
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	2204      	movs	r2, #4
 800bd1c:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bd1e:	e05c      	b.n	800bdda <USBH_HID_Process+0x1a6>

    case USBH_HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800bd28:	b2da      	uxtb	r2, r3
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	785b      	ldrb	r3, [r3, #1]
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f002 fa5b 	bl	800e1ea <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = USBH_HID_POLL;
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	2206      	movs	r2, #6
 800bd38:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 2d7c 	ldr.w	r2, [r3, #3452]	@ 0xd7c
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	2200      	movs	r2, #0
 800bd48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      break;
 800bd4c:	e048      	b.n	800bde0 <USBH_HID_Process+0x1ac>

    case USBH_HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	785b      	ldrb	r3, [r3, #1]
 800bd52:	4619      	mov	r1, r3
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f002 fd57 	bl	800e808 <USBH_LL_GetURBState>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d124      	bne.n	800bdaa <USBH_HID_Process+0x176>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	785b      	ldrb	r3, [r3, #1]
 800bd64:	4619      	mov	r1, r3
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f002 fcbc 	bl	800e6e4 <USBH_LL_GetLastXferSize>
 800bd6c:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U) && (HID_Handle->fifo.buf != NULL))
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d132      	bne.n	800bdde <USBH_HID_Process+0x1aa>
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d02f      	beq.n	800bdde <USBH_HID_Process+0x1aa>
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	689b      	ldr	r3, [r3, #8]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d02b      	beq.n	800bdde <USBH_HID_Process+0x1aa>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	f103 0008 	add.w	r0, r3, #8
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	6959      	ldr	r1, [r3, #20]
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	8b1b      	ldrh	r3, [r3, #24]
 800bd94:	461a      	mov	r2, r3
 800bd96:	f000 f9b7 	bl	800c108 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          USBH_HID_EventCallback(phost);
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f7f5 fa4c 	bl	8001240 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = USBH_HID_GET_DATA;
          }
        }
      }
      break;
 800bda8:	e019      	b.n	800bdde <USBH_HID_Process+0x1aa>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	785b      	ldrb	r3, [r3, #1]
 800bdae:	4619      	mov	r1, r3
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f002 fd29 	bl	800e808 <USBH_LL_GetURBState>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b05      	cmp	r3, #5
 800bdba:	d110      	bne.n	800bdde <USBH_HID_Process+0x1aa>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	7e9b      	ldrb	r3, [r3, #26]
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f001 fcbe 	bl	800d744 <USBH_ClrFeature>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d107      	bne.n	800bdde <USBH_HID_Process+0x1aa>
            HID_Handle->state = USBH_HID_GET_DATA;
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	2204      	movs	r2, #4
 800bdd2:	709a      	strb	r2, [r3, #2]
      break;
 800bdd4:	e003      	b.n	800bdde <USBH_HID_Process+0x1aa>

    default:
      break;
 800bdd6:	bf00      	nop
 800bdd8:	e002      	b.n	800bde0 <USBH_HID_Process+0x1ac>
      break;
 800bdda:	bf00      	nop
 800bddc:	e000      	b.n	800bde0 <USBH_HID_Process+0x1ac>
      break;
 800bdde:	bf00      	nop
  }

  return status;
 800bde0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3718      	adds	r7, #24
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	08010084 	.word	0x08010084
 800bdf0:	08010104 	.word	0x08010104

0800bdf4 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b085      	sub	sp, #20
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800be02:	69db      	ldr	r3, [r3, #28]
 800be04:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == USBH_HID_POLL)
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	789b      	ldrb	r3, [r3, #2]
 800be0a:	2b06      	cmp	r3, #6
 800be0c:	d10c      	bne.n	800be28 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8d3 2d7c 	ldr.w	r2, [r3, #3452]	@ 0xd7c
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	6a1b      	ldr	r3, [r3, #32]
 800be18:	1ad3      	subs	r3, r2, r3
 800be1a:	68fa      	ldr	r2, [r7, #12]
 800be1c:	8b92      	ldrh	r2, [r2, #28]
 800be1e:	4293      	cmp	r3, r2
 800be20:	d302      	bcc.n	800be28 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = USBH_HID_GET_DATA;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2204      	movs	r2, #4
 800be26:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 800be28:	2300      	movs	r3, #0
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3714      	adds	r7, #20
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr
	...

0800be38 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b086      	sub	sp, #24
 800be3c:	af02      	add	r7, sp, #8
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	460b      	mov	r3, r1
 800be42:	807b      	strh	r3, [r7, #2]

  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800be44:	887b      	ldrh	r3, [r7, #2]
 800be46:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d90a      	bls.n	800be64 <USBH_HID_GetHIDReportDescriptor+0x2c>
  {
    USBH_ErrLog("Control error: Get HID Report Descriptor failed, data buffer size issue");
 800be4e:	480f      	ldr	r0, [pc, #60]	@ (800be8c <USBH_HID_GetHIDReportDescriptor+0x54>)
 800be50:	f002 ff92 	bl	800ed78 <iprintf>
 800be54:	480e      	ldr	r0, [pc, #56]	@ (800be90 <USBH_HID_GetHIDReportDescriptor+0x58>)
 800be56:	f002 ff8f 	bl	800ed78 <iprintf>
 800be5a:	200a      	movs	r0, #10
 800be5c:	f002 ff9e 	bl	800ed9c <putchar>
    return USBH_NOT_SUPPORTED;
 800be60:	2303      	movs	r3, #3
 800be62:	e00e      	b.n	800be82 <USBH_HID_GetHIDReportDescriptor+0x4a>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800be6a:	887b      	ldrh	r3, [r7, #2]
 800be6c:	9300      	str	r3, [sp, #0]
 800be6e:	4613      	mov	r3, r2
 800be70:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
 800be74:	2101      	movs	r1, #1
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f001 fbc4 	bl	800d604 <USBH_GetDescriptor>
 800be7c:	4603      	mov	r3, r0
 800be7e:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800be80:	7bfb      	ldrb	r3, [r7, #15]
}
 800be82:	4618      	mov	r0, r3
 800be84:	3710      	adds	r7, #16
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	08010084 	.word	0x08010084
 800be90:	0801011c 	.word	0x0801011c

0800be94 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	460b      	mov	r3, r1
 800be9e:	70fb      	strb	r3, [r7, #3]
 800bea0:	4613      	mov	r3, r2
 800bea2:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2221      	movs	r2, #33	@ 0x21
 800bea8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	220a      	movs	r2, #10
 800beae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 800beb0:	78fb      	ldrb	r3, [r7, #3]
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	021b      	lsls	r3, r3, #8
 800beb6:	b29a      	uxth	r2, r3
 800beb8:	78bb      	ldrb	r3, [r7, #2]
 800beba:	b29b      	uxth	r3, r3
 800bebc:	4313      	orrs	r3, r2
 800bebe:	b29a      	uxth	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2200      	movs	r2, #0
 800bec8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2200      	movs	r2, #0
 800bece:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800bed0:	2200      	movs	r2, #0
 800bed2:	2100      	movs	r1, #0
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f001 ff6b 	bl	800ddb0 <USBH_CtlReq>
 800beda:	4603      	mov	r3, r0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	607b      	str	r3, [r7, #4]
 800beee:	460b      	mov	r3, r1
 800bef0:	72fb      	strb	r3, [r7, #11]
 800bef2:	4613      	mov	r3, r2
 800bef4:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	22a1      	movs	r2, #161	@ 0xa1
 800befa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2201      	movs	r2, #1
 800bf00:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800bf02:	7afb      	ldrb	r3, [r7, #11]
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	021b      	lsls	r3, r3, #8
 800bf08:	b29a      	uxth	r2, r3
 800bf0a:	7abb      	ldrb	r3, [r7, #10]
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	b29a      	uxth	r2, r3
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800bf1c:	7e3b      	ldrb	r3, [r7, #24]
 800bf1e:	b29a      	uxth	r2, r3
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800bf24:	7e3b      	ldrb	r3, [r7, #24]
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	461a      	mov	r2, r3
 800bf2a:	6879      	ldr	r1, [r7, #4]
 800bf2c:	68f8      	ldr	r0, [r7, #12]
 800bf2e:	f001 ff3f 	bl	800ddb0 <USBH_CtlReq>
 800bf32:	4603      	mov	r3, r0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	460b      	mov	r3, r1
 800bf46:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2221      	movs	r2, #33	@ 0x21
 800bf4c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	220b      	movs	r2, #11
 800bf52:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 800bf54:	78fb      	ldrb	r3, [r7, #3]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d003      	beq.n	800bf62 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	825a      	strh	r2, [r3, #18]
 800bf60:	e002      	b.n	800bf68 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2201      	movs	r2, #1
 800bf66:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2200      	movs	r2, #0
 800bf72:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800bf74:	2200      	movs	r2, #0
 800bf76:	2100      	movs	r1, #0
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f001 ff19 	bl	800ddb0 <USBH_CtlReq>
 800bf7e:	4603      	mov	r3, r0

}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3708      	adds	r7, #8
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	3302      	adds	r3, #2
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	3303      	adds	r3, #3
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	021b      	lsls	r3, r3, #8
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800bfac:	897b      	ldrh	r3, [r7, #10]
 800bfae:	2b09      	cmp	r3, #9
 800bfb0:	d941      	bls.n	800c036 <USBH_HID_ParseHIDDesc+0xae>
  {
    ptr = USB_LEN_CFG_DESC;
 800bfb2:	2309      	movs	r3, #9
 800bfb4:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 800bfb6:	e03a      	b.n	800c02e <USBH_HID_ParseHIDDesc+0xa6>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bfb8:	f107 0308 	add.w	r3, r7, #8
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	68f8      	ldr	r0, [r7, #12]
 800bfc0:	f001 fedc 	bl	800dd7c <USBH_GetNextDesc>
 800bfc4:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	785b      	ldrb	r3, [r3, #1]
 800bfca:	2b21      	cmp	r3, #33	@ 0x21
 800bfcc:	d12f      	bne.n	800c02e <USBH_HID_ParseHIDDesc+0xa6>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	781a      	ldrb	r2, [r3, #0]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	785a      	ldrb	r2, [r3, #1]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	3302      	adds	r3, #2
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	3303      	adds	r3, #3
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	021b      	lsls	r3, r3, #8
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	4313      	orrs	r3, r2
 800bff2:	b29a      	uxth	r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	791a      	ldrb	r2, [r3, #4]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	795a      	ldrb	r2, [r3, #5]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	799a      	ldrb	r2, [r3, #6]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	3307      	adds	r3, #7
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	461a      	mov	r2, r3
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	3308      	adds	r3, #8
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	021b      	lsls	r3, r3, #8
 800c020:	b29b      	uxth	r3, r3
 800c022:	4313      	orrs	r3, r2
 800c024:	b29a      	uxth	r2, r3
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	811a      	strh	r2, [r3, #8]
        break;
 800c02a:	bf00      	nop
      }
    }
  }
}
 800c02c:	e003      	b.n	800c036 <USBH_HID_ParseHIDDesc+0xae>
    while (ptr < CfgDescLen)
 800c02e:	893b      	ldrh	r3, [r7, #8]
 800c030:	897a      	ldrh	r2, [r7, #10]
 800c032:	429a      	cmp	r2, r3
 800c034:	d8c0      	bhi.n	800bfb8 <USBH_HID_ParseHIDDesc+0x30>
}
 800c036:	bf00      	nop
 800c038:	3710      	adds	r7, #16
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 800c03e:	b480      	push	{r7}
 800c040:	b085      	sub	sp, #20
 800c042:	af00      	add	r7, sp, #0
 800c044:	60f8      	str	r0, [r7, #12]
 800c046:	60b9      	str	r1, [r7, #8]
 800c048:	4613      	mov	r3, r2
 800c04a:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2200      	movs	r2, #0
 800c050:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2200      	movs	r2, #0
 800c056:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2200      	movs	r2, #0
 800c05c:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	88fa      	ldrh	r2, [r7, #6]
 800c062:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	68ba      	ldr	r2, [r7, #8]
 800c068:	601a      	str	r2, [r3, #0]
}
 800c06a:	bf00      	nop
 800c06c:	3714      	adds	r7, #20
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr

0800c076 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 800c076:	b480      	push	{r7}
 800c078:	b087      	sub	sp, #28
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	60f8      	str	r0, [r7, #12]
 800c07e:	60b9      	str	r1, [r7, #8]
 800c080:	4613      	mov	r3, r2
 800c082:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	7a9b      	ldrb	r3, [r3, #10]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d131      	bne.n	800c0f4 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2201      	movs	r2, #1
 800c094:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800c096:	2300      	movs	r3, #0
 800c098:	82fb      	strh	r3, [r7, #22]
 800c09a:	e027      	b.n	800c0ec <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	88da      	ldrh	r2, [r3, #6]
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	889b      	ldrh	r3, [r3, #4]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d019      	beq.n	800c0dc <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	68fa      	ldr	r2, [r7, #12]
 800c0ae:	88d2      	ldrh	r2, [r2, #6]
 800c0b0:	441a      	add	r2, r3
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	1c59      	adds	r1, r3, #1
 800c0b6:	6139      	str	r1, [r7, #16]
 800c0b8:	7812      	ldrb	r2, [r2, #0]
 800c0ba:	701a      	strb	r2, [r3, #0]
        f->tail++;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	88db      	ldrh	r3, [r3, #6]
 800c0c0:	3301      	adds	r3, #1
 800c0c2:	b29a      	uxth	r2, r3
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	88da      	ldrh	r2, [r3, #6]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	891b      	ldrh	r3, [r3, #8]
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d108      	bne.n	800c0e6 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	80da      	strh	r2, [r3, #6]
 800c0da:	e004      	b.n	800c0e6 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	729a      	strb	r2, [r3, #10]
        return i;
 800c0e2:	8afb      	ldrh	r3, [r7, #22]
 800c0e4:	e00a      	b.n	800c0fc <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 800c0e6:	8afb      	ldrh	r3, [r7, #22]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	82fb      	strh	r3, [r7, #22]
 800c0ec:	8afa      	ldrh	r2, [r7, #22]
 800c0ee:	88fb      	ldrh	r3, [r7, #6]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d3d3      	bcc.n	800c09c <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800c0fa:	88fb      	ldrh	r3, [r7, #6]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	371c      	adds	r7, #28
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800c108:	b480      	push	{r7}
 800c10a:	b087      	sub	sp, #28
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	60b9      	str	r1, [r7, #8]
 800c112:	4613      	mov	r3, r2
 800c114:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	7a9b      	ldrb	r3, [r3, #10]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d13c      	bne.n	800c19c <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2201      	movs	r2, #1
 800c126:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800c128:	2300      	movs	r3, #0
 800c12a:	82fb      	strh	r3, [r7, #22]
 800c12c:	e032      	b.n	800c194 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	889b      	ldrh	r3, [r3, #4]
 800c132:	3301      	adds	r3, #1
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	88d2      	ldrh	r2, [r2, #6]
 800c138:	4293      	cmp	r3, r2
 800c13a:	d00a      	beq.n	800c152 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	889b      	ldrh	r3, [r3, #4]
 800c140:	3301      	adds	r3, #1
 800c142:	68fa      	ldr	r2, [r7, #12]
 800c144:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 800c146:	4293      	cmp	r3, r2
 800c148:	d108      	bne.n	800c15c <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	88db      	ldrh	r3, [r3, #6]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d104      	bne.n	800c15c <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2200      	movs	r2, #0
 800c156:	729a      	strb	r2, [r3, #10]
        return i;
 800c158:	8afb      	ldrh	r3, [r7, #22]
 800c15a:	e023      	b.n	800c1a4 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	1c5a      	adds	r2, r3, #1
 800c160:	613a      	str	r2, [r7, #16]
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	6812      	ldr	r2, [r2, #0]
 800c166:	68f9      	ldr	r1, [r7, #12]
 800c168:	8889      	ldrh	r1, [r1, #4]
 800c16a:	440a      	add	r2, r1
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	7013      	strb	r3, [r2, #0]
        f->head++;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	889b      	ldrh	r3, [r3, #4]
 800c174:	3301      	adds	r3, #1
 800c176:	b29a      	uxth	r2, r3
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	889a      	ldrh	r2, [r3, #4]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	891b      	ldrh	r3, [r3, #8]
 800c184:	429a      	cmp	r2, r3
 800c186:	d102      	bne.n	800c18e <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2200      	movs	r2, #0
 800c18c:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 800c18e:	8afb      	ldrh	r3, [r7, #22]
 800c190:	3301      	adds	r3, #1
 800c192:	82fb      	strh	r3, [r7, #22]
 800c194:	8afa      	ldrh	r2, [r7, #22]
 800c196:	88fb      	ldrh	r3, [r7, #6]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d3c8      	bcc.n	800c12e <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800c1a2:	88fb      	ldrh	r3, [r7, #6]
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	371c      	adds	r7, #28
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr

0800c1b0 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800c1be:	69db      	ldr	r3, [r3, #28]
 800c1c0:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 800c1c2:	4b22      	ldr	r3, [pc, #136]	@ (800c24c <USBH_HID_KeybdInit+0x9c>)
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 800c1c8:	4b20      	ldr	r3, [pc, #128]	@ (800c24c <USBH_HID_KeybdInit+0x9c>)
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 800c1ce:	4b1f      	ldr	r3, [pc, #124]	@ (800c24c <USBH_HID_KeybdInit+0x9c>)
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 800c1d4:	4b1d      	ldr	r3, [pc, #116]	@ (800c24c <USBH_HID_KeybdInit+0x9c>)
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 800c1da:	4b1c      	ldr	r3, [pc, #112]	@ (800c24c <USBH_HID_KeybdInit+0x9c>)
 800c1dc:	2200      	movs	r2, #0
 800c1de:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 800c1e0:	4b1a      	ldr	r3, [pc, #104]	@ (800c24c <USBH_HID_KeybdInit+0x9c>)
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 800c1e6:	4b19      	ldr	r3, [pc, #100]	@ (800c24c <USBH_HID_KeybdInit+0x9c>)
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 800c1ec:	4b17      	ldr	r3, [pc, #92]	@ (800c24c <USBH_HID_KeybdInit+0x9c>)
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	721a      	strb	r2, [r3, #8]

  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	60fb      	str	r3, [r7, #12]
 800c1f6:	e00c      	b.n	800c212 <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 800c1f8:	4a15      	ldr	r2, [pc, #84]	@ (800c250 <USBH_HID_KeybdInit+0xa0>)
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	2200      	movs	r2, #0
 800c200:	701a      	strb	r2, [r3, #0]
    keybd_rx_report_buf[x] = 0U;
 800c202:	4a14      	ldr	r2, [pc, #80]	@ (800c254 <USBH_HID_KeybdInit+0xa4>)
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	4413      	add	r3, r2
 800c208:	2200      	movs	r2, #0
 800c20a:	701a      	strb	r2, [r3, #0]
  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	3301      	adds	r3, #1
 800c210:	60fb      	str	r3, [r7, #12]
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2b07      	cmp	r3, #7
 800c216:	d9ef      	bls.n	800c1f8 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	8b1b      	ldrh	r3, [r3, #24]
 800c21c:	2b08      	cmp	r3, #8
 800c21e:	d902      	bls.n	800c226 <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	2208      	movs	r2, #8
 800c224:	831a      	strh	r2, [r3, #24]
  }

  HID_Handle->pData = keybd_rx_report_buf;
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	4a0a      	ldr	r2, [pc, #40]	@ (800c254 <USBH_HID_KeybdInit+0xa4>)
 800c22a:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	f103 0008 	add.w	r0, r3, #8
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c238:	2250      	movs	r2, #80	@ 0x50
 800c23a:	4619      	mov	r1, r3
 800c23c:	f7ff feff 	bl	800c03e <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800c240:	2300      	movs	r3, #0
}
 800c242:	4618      	mov	r0, r3
 800c244:	3710      	adds	r7, #16
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	200118e8 	.word	0x200118e8
 800c250:	20011900 	.word	0x20011900
 800c254:	200118f8 	.word	0x200118f8

0800c258 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f000 f80d 	bl	800c280 <USBH_HID_KeybdDecode>
 800c266:	4603      	mov	r3, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d101      	bne.n	800c270 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 800c26c:	4b03      	ldr	r3, [pc, #12]	@ (800c27c <USBH_HID_GetKeybdInfo+0x24>)
 800c26e:	e000      	b.n	800c272 <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800c270:	2300      	movs	r3, #0
  }
}
 800c272:	4618      	mov	r0, r3
 800c274:	3708      	adds	r7, #8
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	bf00      	nop
 800c27c:	200118e8 	.word	0x200118e8

0800c280 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800c28e:	69db      	ldr	r3, [r3, #28]
 800c290:	60bb      	str	r3, [r7, #8]

  if ((HID_Handle->length == 0U) || (HID_Handle->fifo.buf == NULL))
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	8b1b      	ldrh	r3, [r3, #24]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d003      	beq.n	800c2a2 <USBH_HID_KeybdDecode+0x22>
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d101      	bne.n	800c2a6 <USBH_HID_KeybdDecode+0x26>
  {
    return USBH_FAIL;
 800c2a2:	2302      	movs	r3, #2
 800c2a4:	e066      	b.n	800c374 <USBH_HID_KeybdDecode+0xf4>
  }

  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	f103 0008 	add.w	r0, r3, #8
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	8b1b      	ldrh	r3, [r3, #24]
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	4932      	ldr	r1, [pc, #200]	@ (800c37c <USBH_HID_KeybdDecode+0xfc>)
 800c2b4:	f7ff fedf 	bl	800c076 <USBH_HID_FifoRead>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	8b1b      	ldrh	r3, [r3, #24]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d156      	bne.n	800c372 <USBH_HID_KeybdDecode+0xf2>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 800c2c4:	2100      	movs	r1, #0
 800c2c6:	482e      	ldr	r0, [pc, #184]	@ (800c380 <USBH_HID_KeybdDecode+0x100>)
 800c2c8:	f000 f8e4 	bl	800c494 <HID_ReadItem>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	b2da      	uxtb	r2, r3
 800c2d0:	4b2c      	ldr	r3, [pc, #176]	@ (800c384 <USBH_HID_KeybdDecode+0x104>)
 800c2d2:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800c2d4:	2100      	movs	r1, #0
 800c2d6:	482c      	ldr	r0, [pc, #176]	@ (800c388 <USBH_HID_KeybdDecode+0x108>)
 800c2d8:	f000 f8dc 	bl	800c494 <HID_ReadItem>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	b2da      	uxtb	r2, r3
 800c2e0:	4b28      	ldr	r3, [pc, #160]	@ (800c384 <USBH_HID_KeybdDecode+0x104>)
 800c2e2:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 800c2e4:	2100      	movs	r1, #0
 800c2e6:	4829      	ldr	r0, [pc, #164]	@ (800c38c <USBH_HID_KeybdDecode+0x10c>)
 800c2e8:	f000 f8d4 	bl	800c494 <HID_ReadItem>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	b2da      	uxtb	r2, r3
 800c2f0:	4b24      	ldr	r3, [pc, #144]	@ (800c384 <USBH_HID_KeybdDecode+0x104>)
 800c2f2:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800c2f4:	2100      	movs	r1, #0
 800c2f6:	4826      	ldr	r0, [pc, #152]	@ (800c390 <USBH_HID_KeybdDecode+0x110>)
 800c2f8:	f000 f8cc 	bl	800c494 <HID_ReadItem>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	b2da      	uxtb	r2, r3
 800c300:	4b20      	ldr	r3, [pc, #128]	@ (800c384 <USBH_HID_KeybdDecode+0x104>)
 800c302:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800c304:	2100      	movs	r1, #0
 800c306:	4823      	ldr	r0, [pc, #140]	@ (800c394 <USBH_HID_KeybdDecode+0x114>)
 800c308:	f000 f8c4 	bl	800c494 <HID_ReadItem>
 800c30c:	4603      	mov	r3, r0
 800c30e:	b2da      	uxtb	r2, r3
 800c310:	4b1c      	ldr	r3, [pc, #112]	@ (800c384 <USBH_HID_KeybdDecode+0x104>)
 800c312:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 800c314:	2100      	movs	r1, #0
 800c316:	4820      	ldr	r0, [pc, #128]	@ (800c398 <USBH_HID_KeybdDecode+0x118>)
 800c318:	f000 f8bc 	bl	800c494 <HID_ReadItem>
 800c31c:	4603      	mov	r3, r0
 800c31e:	b2da      	uxtb	r2, r3
 800c320:	4b18      	ldr	r3, [pc, #96]	@ (800c384 <USBH_HID_KeybdDecode+0x104>)
 800c322:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 800c324:	2100      	movs	r1, #0
 800c326:	481d      	ldr	r0, [pc, #116]	@ (800c39c <USBH_HID_KeybdDecode+0x11c>)
 800c328:	f000 f8b4 	bl	800c494 <HID_ReadItem>
 800c32c:	4603      	mov	r3, r0
 800c32e:	b2da      	uxtb	r2, r3
 800c330:	4b14      	ldr	r3, [pc, #80]	@ (800c384 <USBH_HID_KeybdDecode+0x104>)
 800c332:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 800c334:	2100      	movs	r1, #0
 800c336:	481a      	ldr	r0, [pc, #104]	@ (800c3a0 <USBH_HID_KeybdDecode+0x120>)
 800c338:	f000 f8ac 	bl	800c494 <HID_ReadItem>
 800c33c:	4603      	mov	r3, r0
 800c33e:	b2da      	uxtb	r2, r3
 800c340:	4b10      	ldr	r3, [pc, #64]	@ (800c384 <USBH_HID_KeybdDecode+0x104>)
 800c342:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800c344:	2300      	movs	r3, #0
 800c346:	73fb      	strb	r3, [r7, #15]
 800c348:	e00e      	b.n	800c368 <USBH_HID_KeybdDecode+0xe8>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800c34a:	7bfb      	ldrb	r3, [r7, #15]
 800c34c:	4619      	mov	r1, r3
 800c34e:	4815      	ldr	r0, [pc, #84]	@ (800c3a4 <USBH_HID_KeybdDecode+0x124>)
 800c350:	f000 f8a0 	bl	800c494 <HID_ReadItem>
 800c354:	4602      	mov	r2, r0
 800c356:	7bfb      	ldrb	r3, [r7, #15]
 800c358:	b2d1      	uxtb	r1, r2
 800c35a:	4a0a      	ldr	r2, [pc, #40]	@ (800c384 <USBH_HID_KeybdDecode+0x104>)
 800c35c:	4413      	add	r3, r2
 800c35e:	460a      	mov	r2, r1
 800c360:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800c362:	7bfb      	ldrb	r3, [r7, #15]
 800c364:	3301      	adds	r3, #1
 800c366:	73fb      	strb	r3, [r7, #15]
 800c368:	7bfb      	ldrb	r3, [r7, #15]
 800c36a:	2b05      	cmp	r3, #5
 800c36c:	d9ed      	bls.n	800c34a <USBH_HID_KeybdDecode+0xca>
    }

    return USBH_OK;
 800c36e:	2300      	movs	r3, #0
 800c370:	e000      	b.n	800c374 <USBH_HID_KeybdDecode+0xf4>
  }
  return   USBH_FAIL;
 800c372:	2302      	movs	r3, #2
}
 800c374:	4618      	mov	r0, r3
 800c376:	3710      	adds	r7, #16
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	20011900 	.word	0x20011900
 800c380:	0801265c 	.word	0x0801265c
 800c384:	200118e8 	.word	0x200118e8
 800c388:	0801267c 	.word	0x0801267c
 800c38c:	0801269c 	.word	0x0801269c
 800c390:	080126bc 	.word	0x080126bc
 800c394:	080126dc 	.word	0x080126dc
 800c398:	080126fc 	.word	0x080126fc
 800c39c:	0801271c 	.word	0x0801271c
 800c3a0:	0801273c 	.word	0x0801273c
 800c3a4:	0801275c 	.word	0x0801275c

0800c3a8 <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	789b      	ldrb	r3, [r3, #2]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d103      	bne.n	800c3c0 <USBH_HID_GetASCIICode+0x18>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	799b      	ldrb	r3, [r3, #6]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d009      	beq.n	800c3d4 <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	7a5b      	ldrb	r3, [r3, #9]
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	4b0b      	ldr	r3, [pc, #44]	@ (800c3f4 <USBH_HID_GetASCIICode+0x4c>)
 800c3c8:	5c9b      	ldrb	r3, [r3, r2]
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c3f8 <USBH_HID_GetASCIICode+0x50>)
 800c3ce:	5c9b      	ldrb	r3, [r3, r2]
 800c3d0:	73fb      	strb	r3, [r7, #15]
 800c3d2:	e008      	b.n	800c3e6 <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	7a5b      	ldrb	r3, [r3, #9]
 800c3d8:	461a      	mov	r2, r3
 800c3da:	4b06      	ldr	r3, [pc, #24]	@ (800c3f4 <USBH_HID_GetASCIICode+0x4c>)
 800c3dc:	5c9b      	ldrb	r3, [r3, r2]
 800c3de:	461a      	mov	r2, r3
 800c3e0:	4b06      	ldr	r3, [pc, #24]	@ (800c3fc <USBH_HID_GetASCIICode+0x54>)
 800c3e2:	5c9b      	ldrb	r3, [r3, r2]
 800c3e4:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 800c3e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3714      	adds	r7, #20
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr
 800c3f4:	08012884 	.word	0x08012884
 800c3f8:	08012800 	.word	0x08012800
 800c3fc:	0801277c 	.word	0x0801277c

0800c400 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800c40e:	69db      	ldr	r3, [r3, #28]
 800c410:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 800c412:	4b1d      	ldr	r3, [pc, #116]	@ (800c488 <USBH_HID_MouseInit+0x88>)
 800c414:	2200      	movs	r2, #0
 800c416:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 800c418:	4b1b      	ldr	r3, [pc, #108]	@ (800c488 <USBH_HID_MouseInit+0x88>)
 800c41a:	2200      	movs	r2, #0
 800c41c:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 800c41e:	4b1a      	ldr	r3, [pc, #104]	@ (800c488 <USBH_HID_MouseInit+0x88>)
 800c420:	2200      	movs	r2, #0
 800c422:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 800c424:	4b18      	ldr	r3, [pc, #96]	@ (800c488 <USBH_HID_MouseInit+0x88>)
 800c426:	2200      	movs	r2, #0
 800c428:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 800c42a:	4b17      	ldr	r3, [pc, #92]	@ (800c488 <USBH_HID_MouseInit+0x88>)
 800c42c:	2200      	movs	r2, #0
 800c42e:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800c430:	2300      	movs	r3, #0
 800c432:	60fb      	str	r3, [r7, #12]
 800c434:	e00c      	b.n	800c450 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 800c436:	4a15      	ldr	r2, [pc, #84]	@ (800c48c <USBH_HID_MouseInit+0x8c>)
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	4413      	add	r3, r2
 800c43c:	2200      	movs	r2, #0
 800c43e:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 800c440:	4a13      	ldr	r2, [pc, #76]	@ (800c490 <USBH_HID_MouseInit+0x90>)
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	4413      	add	r3, r2
 800c446:	2200      	movs	r2, #0
 800c448:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	3301      	adds	r3, #1
 800c44e:	60fb      	str	r3, [r7, #12]
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2b07      	cmp	r3, #7
 800c454:	d9ef      	bls.n	800c436 <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	8b1b      	ldrh	r3, [r3, #24]
 800c45a:	2b08      	cmp	r3, #8
 800c45c:	d902      	bls.n	800c464 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	2208      	movs	r2, #8
 800c462:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = mouse_rx_report_buf;
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	4a0a      	ldr	r2, [pc, #40]	@ (800c490 <USBH_HID_MouseInit+0x90>)
 800c468:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	f103 0008 	add.w	r0, r3, #8
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c476:	2250      	movs	r2, #80	@ 0x50
 800c478:	4619      	mov	r1, r3
 800c47a:	f7ff fde0 	bl	800c03e <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800c47e:	2300      	movs	r3, #0
}
 800c480:	4618      	mov	r0, r3
 800c482:	3710      	adds	r7, #16
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	20011908 	.word	0x20011908
 800c48c:	20011910 	.word	0x20011910
 800c490:	20011918 	.word	0x20011918

0800c494 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800c494:	b480      	push	{r7}
 800c496:	b089      	sub	sp, #36	@ 0x24
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	460b      	mov	r3, r1
 800c49e:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	7a1b      	ldrb	r3, [r3, #8]
 800c4b2:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, we may need to offset ri->data.*/
  if (ri->count > 0U)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	7a5b      	ldrb	r3, [r3, #9]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d01a      	beq.n	800c4f2 <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	7a5b      	ldrb	r3, [r3, #9]
 800c4c0:	78fa      	ldrb	r2, [r7, #3]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d301      	bcc.n	800c4ca <HID_ReadItem+0x36>
    {
      return (0U);
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	e078      	b.n	800c5bc <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800c4ca:	78fb      	ldrb	r3, [r7, #3]
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	6852      	ldr	r2, [r2, #4]
 800c4d0:	fb02 f303 	mul.w	r3, r2, r3
 800c4d4:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800c4d6:	7cfb      	ldrb	r3, [r7, #19]
 800c4d8:	68fa      	ldr	r2, [r7, #12]
 800c4da:	4413      	add	r3, r2
 800c4dc:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	08db      	lsrs	r3, r3, #3
 800c4e2:	697a      	ldr	r2, [r7, #20]
 800c4e4:	4413      	add	r3, r2
 800c4e6:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	f003 0307 	and.w	r3, r3, #7
 800c4f0:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	61bb      	str	r3, [r7, #24]
 800c4f6:	e00a      	b.n	800c50e <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	69bb      	ldr	r3, [r7, #24]
 800c500:	00db      	lsls	r3, r3, #3
 800c502:	fa02 f303 	lsl.w	r3, r2, r3
 800c506:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800c508:	69bb      	ldr	r3, [r7, #24]
 800c50a:	3301      	adds	r3, #1
 800c50c:	61bb      	str	r3, [r7, #24]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	685b      	ldr	r3, [r3, #4]
 800c512:	f003 0307 	and.w	r3, r3, #7
 800c516:	2b00      	cmp	r3, #0
 800c518:	d004      	beq.n	800c524 <HID_ReadItem+0x90>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	08db      	lsrs	r3, r3, #3
 800c520:	3301      	adds	r3, #1
 800c522:	e002      	b.n	800c52a <HID_ReadItem+0x96>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	08db      	lsrs	r3, r3, #3
 800c52a:	69ba      	ldr	r2, [r7, #24]
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d8e3      	bhi.n	800c4f8 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 800c530:	7cfb      	ldrb	r3, [r7, #19]
 800c532:	69fa      	ldr	r2, [r7, #28]
 800c534:	40da      	lsrs	r2, r3
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	685b      	ldr	r3, [r3, #4]
 800c53a:	f04f 31ff 	mov.w	r1, #4294967295
 800c53e:	fa01 f303 	lsl.w	r3, r1, r3
 800c542:	43db      	mvns	r3, r3
 800c544:	4013      	ands	r3, r2
 800c546:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	68db      	ldr	r3, [r3, #12]
 800c54c:	69fa      	ldr	r2, [r7, #28]
 800c54e:	429a      	cmp	r2, r3
 800c550:	d304      	bcc.n	800c55c <HID_ReadItem+0xc8>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	691b      	ldr	r3, [r3, #16]
 800c556:	69fa      	ldr	r2, [r7, #28]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d901      	bls.n	800c560 <HID_ReadItem+0xcc>
  {
    return (0U);
 800c55c:	2300      	movs	r3, #0
 800c55e:	e02d      	b.n	800c5bc <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	7a9b      	ldrb	r3, [r3, #10]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d01e      	beq.n	800c5a6 <HID_ReadItem+0x112>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	3b01      	subs	r3, #1
 800c56e:	69fa      	ldr	r2, [r7, #28]
 800c570:	fa22 f303 	lsr.w	r3, r2, r3
 800c574:	f003 0301 	and.w	r3, r3, #1
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d014      	beq.n	800c5a6 <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	2201      	movs	r2, #1
 800c582:	fa02 f303 	lsl.w	r3, r2, r3
 800c586:	425b      	negs	r3, r3
 800c588:	69fa      	ldr	r2, [r7, #28]
 800c58a:	4313      	orrs	r3, r2
 800c58c:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	69db      	ldr	r3, [r3, #28]
 800c592:	2b01      	cmp	r3, #1
 800c594:	d101      	bne.n	800c59a <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	e010      	b.n	800c5bc <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	69db      	ldr	r3, [r3, #28]
 800c59e:	68ba      	ldr	r2, [r7, #8]
 800c5a0:	fb02 f303 	mul.w	r3, r2, r3
 800c5a4:	e00a      	b.n	800c5bc <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	69db      	ldr	r3, [r3, #28]
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	d101      	bne.n	800c5b2 <HID_ReadItem+0x11e>
    {
      return (val);
 800c5ae:	69fb      	ldr	r3, [r7, #28]
 800c5b0:	e004      	b.n	800c5bc <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	69db      	ldr	r3, [r3, #28]
 800c5b6:	69fa      	ldr	r2, [r7, #28]
 800c5b8:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3724      	adds	r7, #36	@ 0x24
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr

0800c5c8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d10a      	bne.n	800c5f2 <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800c5dc:	481c      	ldr	r0, [pc, #112]	@ (800c650 <USBH_Init+0x88>)
 800c5de:	f002 fbcb 	bl	800ed78 <iprintf>
 800c5e2:	481c      	ldr	r0, [pc, #112]	@ (800c654 <USBH_Init+0x8c>)
 800c5e4:	f002 fbc8 	bl	800ed78 <iprintf>
 800c5e8:	200a      	movs	r0, #10
 800c5ea:	f002 fbd7 	bl	800ed9c <putchar>
    return USBH_FAIL;
 800c5ee:	2302      	movs	r3, #2
 800c5f0:	e029      	b.n	800c646 <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	79fa      	ldrb	r2, [r7, #7]
 800c5f6:	f883 2d84 	strb.w	r2, [r3, #3460]	@ 0xd84

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
  phost->ClassNumber = 0U;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2200      	movs	r2, #0
 800c606:	f8c3 2d38 	str.w	r2, [r3, #3384]	@ 0xd38

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c60a:	68f8      	ldr	r0, [r7, #12]
 800c60c:	f000 f824 	bl	800c658 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2200      	movs	r2, #0
 800c614:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb
  phost->device.is_connected = 0U;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f883 2cd8 	strb.w	r2, [r3, #3288]	@ 0xcd8
  phost->device.is_disconnected = 0U;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2200      	movs	r2, #0
 800c624:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9
  phost->device.is_ReEnumerated = 0U;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2200      	movs	r2, #0
 800c62c:	f883 2cda 	strb.w	r2, [r3, #3290]	@ 0xcda

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d003      	beq.n	800c63e <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	68ba      	ldr	r2, [r7, #8]
 800c63a:	f8c3 2d8c 	str.w	r2, [r3, #3468]	@ 0xd8c

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800c63e:	68f8      	ldr	r0, [r7, #12]
 800c640:	f001 ff9c 	bl	800e57c <USBH_LL_Init>

  return USBH_OK;
 800c644:	2300      	movs	r3, #0
}
 800c646:	4618      	mov	r0, r3
 800c648:	3710      	adds	r7, #16
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	080101a8 	.word	0x080101a8
 800c654:	080101b0 	.word	0x080101b0

0800c658 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c660:	2300      	movs	r3, #0
 800c662:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c664:	2300      	movs	r3, #0
 800c666:	60fb      	str	r3, [r7, #12]
 800c668:	e00a      	b.n	800c680 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	4413      	add	r3, r2
 800c676:	2200      	movs	r2, #0
 800c678:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	3301      	adds	r3, #1
 800c67e:	60fb      	str	r3, [r7, #12]
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2b0f      	cmp	r3, #15
 800c684:	d9f1      	bls.n	800c66a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c686:	2300      	movs	r3, #0
 800c688:	60fb      	str	r3, [r7, #12]
 800c68a:	e009      	b.n	800c6a0 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	4413      	add	r3, r2
 800c692:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c696:	2200      	movs	r2, #0
 800c698:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	3301      	adds	r3, #1
 800c69e:	60fb      	str	r3, [r7, #12]
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d9f0      	bls.n	800c68c <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f8c3 2d7c 	str.w	r2, [r3, #3452]	@ 0xd7c

  phost->Control.state = CTRL_SETUP;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2240      	movs	r2, #64	@ 0x40
 800c6ce:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f883 2cd4 	strb.w	r2, [r3, #3284]	@ 0xcd4
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	f883 2cd5 	strb.w	r2, [r3, #3285]	@ 0xcd5
  phost->device.RstCnt = 0U;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	f883 2cd7 	strb.w	r2, [r3, #3287]	@ 0xcd7
  phost->device.EnumCnt = 0U;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	331c      	adds	r3, #28
 800c6fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c6fe:	2100      	movs	r1, #0
 800c700:	4618      	mov	r0, r3
 800c702:	f002 fcc9 	bl	800f098 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c70c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800c710:	2100      	movs	r1, #0
 800c712:	4618      	mov	r0, r3
 800c714:	f002 fcc0 	bl	800f098 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f603 43de 	addw	r3, r3, #3294	@ 0xcde
 800c71e:	2212      	movs	r2, #18
 800c720:	2100      	movs	r1, #0
 800c722:	4618      	mov	r0, r3
 800c724:	f002 fcb8 	bl	800f098 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 800c72e:	223e      	movs	r2, #62	@ 0x3e
 800c730:	2100      	movs	r1, #0
 800c732:	4618      	mov	r0, r3
 800c734:	f002 fcb0 	bl	800f098 <memset>

  return USBH_OK;
 800c738:	2300      	movs	r3, #0
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
	...

0800c744 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c74e:	2300      	movs	r3, #0
 800c750:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d020      	beq.n	800c79a <USBH_RegisterClass+0x56>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	@ 0xd38
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d10f      	bne.n	800c782 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	@ 0xd38
 800c768:	1c59      	adds	r1, r3, #1
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	f8c2 1d38 	str.w	r1, [r2, #3384]	@ 0xd38
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 800c776:	6839      	ldr	r1, [r7, #0]
 800c778:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c77c:	2300      	movs	r3, #0
 800c77e:	73fb      	strb	r3, [r7, #15]
 800c780:	e016      	b.n	800c7b0 <USBH_RegisterClass+0x6c>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800c782:	480e      	ldr	r0, [pc, #56]	@ (800c7bc <USBH_RegisterClass+0x78>)
 800c784:	f002 faf8 	bl	800ed78 <iprintf>
 800c788:	480d      	ldr	r0, [pc, #52]	@ (800c7c0 <USBH_RegisterClass+0x7c>)
 800c78a:	f002 faf5 	bl	800ed78 <iprintf>
 800c78e:	200a      	movs	r0, #10
 800c790:	f002 fb04 	bl	800ed9c <putchar>
      status = USBH_FAIL;
 800c794:	2302      	movs	r3, #2
 800c796:	73fb      	strb	r3, [r7, #15]
 800c798:	e00a      	b.n	800c7b0 <USBH_RegisterClass+0x6c>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800c79a:	4808      	ldr	r0, [pc, #32]	@ (800c7bc <USBH_RegisterClass+0x78>)
 800c79c:	f002 faec 	bl	800ed78 <iprintf>
 800c7a0:	4808      	ldr	r0, [pc, #32]	@ (800c7c4 <USBH_RegisterClass+0x80>)
 800c7a2:	f002 fae9 	bl	800ed78 <iprintf>
 800c7a6:	200a      	movs	r0, #10
 800c7a8:	f002 faf8 	bl	800ed9c <putchar>
    status = USBH_FAIL;
 800c7ac:	2302      	movs	r3, #2
 800c7ae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3710      	adds	r7, #16
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	080101a8 	.word	0x080101a8
 800c7c0:	080101c4 	.word	0x080101c4
 800c7c4:	080101e0 	.word	0x080101e0

0800c7c8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	460b      	mov	r3, r1
 800c7d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f893 3cf4 	ldrb.w	r3, [r3, #3316]	@ 0xcf4
 800c7de:	78fa      	ldrb	r2, [r7, #3]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d23c      	bcs.n	800c85e <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	78fa      	ldrb	r2, [r7, #3]
 800c7e8:	f883 2cdc 	strb.w	r2, [r3, #3292]	@ 0xcdc
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800c7ec:	78fb      	ldrb	r3, [r7, #3]
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	4823      	ldr	r0, [pc, #140]	@ (800c880 <USBH_SelectInterface+0xb8>)
 800c7f2:	f002 fac1 	bl	800ed78 <iprintf>
 800c7f6:	200a      	movs	r0, #10
 800c7f8:	f002 fad0 	bl	800ed9c <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800c7fc:	78fb      	ldrb	r3, [r7, #3]
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	211a      	movs	r1, #26
 800c802:	fb01 f303 	mul.w	r3, r1, r3
 800c806:	4413      	add	r3, r2
 800c808:	f603 43ff 	addw	r3, r3, #3327	@ 0xcff
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	4619      	mov	r1, r3
 800c810:	481c      	ldr	r0, [pc, #112]	@ (800c884 <USBH_SelectInterface+0xbc>)
 800c812:	f002 fab1 	bl	800ed78 <iprintf>
 800c816:	200a      	movs	r0, #10
 800c818:	f002 fac0 	bl	800ed9c <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800c81c:	78fb      	ldrb	r3, [r7, #3]
 800c81e:	687a      	ldr	r2, [r7, #4]
 800c820:	211a      	movs	r1, #26
 800c822:	fb01 f303 	mul.w	r3, r1, r3
 800c826:	4413      	add	r3, r2
 800c828:	f503 6350 	add.w	r3, r3, #3328	@ 0xd00
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	4619      	mov	r1, r3
 800c830:	4815      	ldr	r0, [pc, #84]	@ (800c888 <USBH_SelectInterface+0xc0>)
 800c832:	f002 faa1 	bl	800ed78 <iprintf>
 800c836:	200a      	movs	r0, #10
 800c838:	f002 fab0 	bl	800ed9c <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800c83c:	78fb      	ldrb	r3, [r7, #3]
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	211a      	movs	r1, #26
 800c842:	fb01 f303 	mul.w	r3, r1, r3
 800c846:	4413      	add	r3, r2
 800c848:	f603 5301 	addw	r3, r3, #3329	@ 0xd01
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	4619      	mov	r1, r3
 800c850:	480e      	ldr	r0, [pc, #56]	@ (800c88c <USBH_SelectInterface+0xc4>)
 800c852:	f002 fa91 	bl	800ed78 <iprintf>
 800c856:	200a      	movs	r0, #10
 800c858:	f002 faa0 	bl	800ed9c <putchar>
 800c85c:	e00a      	b.n	800c874 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800c85e:	480c      	ldr	r0, [pc, #48]	@ (800c890 <USBH_SelectInterface+0xc8>)
 800c860:	f002 fa8a 	bl	800ed78 <iprintf>
 800c864:	480b      	ldr	r0, [pc, #44]	@ (800c894 <USBH_SelectInterface+0xcc>)
 800c866:	f002 fa87 	bl	800ed78 <iprintf>
 800c86a:	200a      	movs	r0, #10
 800c86c:	f002 fa96 	bl	800ed9c <putchar>
    status = USBH_FAIL;
 800c870:	2302      	movs	r3, #2
 800c872:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c874:	7bfb      	ldrb	r3, [r7, #15]
}
 800c876:	4618      	mov	r0, r3
 800c878:	3710      	adds	r7, #16
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	080101f8 	.word	0x080101f8
 800c884:	08010218 	.word	0x08010218
 800c888:	08010228 	.word	0x08010228
 800c88c:	08010238 	.word	0x08010238
 800c890:	080101a8 	.word	0x080101a8
 800c894:	08010248 	.word	0x08010248

0800c898 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c898:	b480      	push	{r7}
 800c89a:	b087      	sub	sp, #28
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	4608      	mov	r0, r1
 800c8a2:	4611      	mov	r1, r2
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	70fb      	strb	r3, [r7, #3]
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	70bb      	strb	r3, [r7, #2]
 800c8ae:	4613      	mov	r3, r2
 800c8b0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 800c8c0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c8c2:	e025      	b.n	800c910 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c8c4:	7dfb      	ldrb	r3, [r7, #23]
 800c8c6:	221a      	movs	r2, #26
 800c8c8:	fb02 f303 	mul.w	r3, r2, r3
 800c8cc:	3308      	adds	r3, #8
 800c8ce:	68fa      	ldr	r2, [r7, #12]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	3302      	adds	r3, #2
 800c8d4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	795b      	ldrb	r3, [r3, #5]
 800c8da:	78fa      	ldrb	r2, [r7, #3]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d002      	beq.n	800c8e6 <USBH_FindInterface+0x4e>
 800c8e0:	78fb      	ldrb	r3, [r7, #3]
 800c8e2:	2bff      	cmp	r3, #255	@ 0xff
 800c8e4:	d111      	bne.n	800c90a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c8ea:	78ba      	ldrb	r2, [r7, #2]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d002      	beq.n	800c8f6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c8f0:	78bb      	ldrb	r3, [r7, #2]
 800c8f2:	2bff      	cmp	r3, #255	@ 0xff
 800c8f4:	d109      	bne.n	800c90a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c8fa:	787a      	ldrb	r2, [r7, #1]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d002      	beq.n	800c906 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c900:	787b      	ldrb	r3, [r7, #1]
 800c902:	2bff      	cmp	r3, #255	@ 0xff
 800c904:	d101      	bne.n	800c90a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c906:	7dfb      	ldrb	r3, [r7, #23]
 800c908:	e006      	b.n	800c918 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c90a:	7dfb      	ldrb	r3, [r7, #23]
 800c90c:	3301      	adds	r3, #1
 800c90e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c910:	7dfb      	ldrb	r3, [r7, #23]
 800c912:	2b01      	cmp	r3, #1
 800c914:	d9d6      	bls.n	800c8c4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c916:	23ff      	movs	r3, #255	@ 0xff
}
 800c918:	4618      	mov	r0, r3
 800c91a:	371c      	adds	r7, #28
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr

0800c924 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f001 fe61 	bl	800e5f4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c932:	2101      	movs	r1, #1
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f001 ff7a 	bl	800e82e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c93a:	2300      	movs	r3, #0
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b088      	sub	sp, #32
 800c948:	af04      	add	r7, sp, #16
 800c94a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c94c:	2302      	movs	r3, #2
 800c94e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c950:	2300      	movs	r3, #0
 800c952:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f893 3cd9 	ldrb.w	r3, [r3, #3289]	@ 0xcd9
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	2b01      	cmp	r3, #1
 800c95e:	d102      	bne.n	800c966 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2203      	movs	r2, #3
 800c964:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	2b0b      	cmp	r3, #11
 800c96e:	f200 8239 	bhi.w	800cde4 <USBH_Process+0x4a0>
 800c972:	a201      	add	r2, pc, #4	@ (adr r2, 800c978 <USBH_Process+0x34>)
 800c974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c978:	0800c9a9 	.word	0x0800c9a9
 800c97c:	0800c9e7 	.word	0x0800c9e7
 800c980:	0800ca67 	.word	0x0800ca67
 800c984:	0800cd73 	.word	0x0800cd73
 800c988:	0800cde5 	.word	0x0800cde5
 800c98c:	0800cb07 	.word	0x0800cb07
 800c990:	0800ccf5 	.word	0x0800ccf5
 800c994:	0800cb55 	.word	0x0800cb55
 800c998:	0800cb75 	.word	0x0800cb75
 800c99c:	0800cb9f 	.word	0x0800cb9f
 800c9a0:	0800cbfb 	.word	0x0800cbfb
 800c9a4:	0800cd5b 	.word	0x0800cd5b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f893 3cd8 	ldrb.w	r3, [r3, #3288]	@ 0xcd8
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	f000 8219 	beq.w	800cde8 <USBH_Process+0x4a4>
      {
        USBH_UsrLog("USB Device Connected");
 800c9b6:	48a5      	ldr	r0, [pc, #660]	@ (800cc4c <USBH_Process+0x308>)
 800c9b8:	f002 f9de 	bl	800ed78 <iprintf>
 800c9bc:	200a      	movs	r0, #10
 800c9be:	f002 f9ed 	bl	800ed9c <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c9c8:	20c8      	movs	r0, #200	@ 0xc8
 800c9ca:	f001 ff7a 	bl	800e8c2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f001 fe6d 	bl	800e6ae <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	f883 2cd4 	strb.w	r2, [r3, #3284]	@ 0xcd4
        phost->Timeout = 0U;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f8c3 2d80 	str.w	r2, [r3, #3456]	@ 0xd80
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c9e4:	e200      	b.n	800cde8 <USBH_Process+0x4a4>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f893 3cdb 	ldrb.w	r3, [r3, #3291]	@ 0xcdb
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d10d      	bne.n	800ca0c <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800c9f0:	4897      	ldr	r0, [pc, #604]	@ (800cc50 <USBH_Process+0x30c>)
 800c9f2:	f002 f9c1 	bl	800ed78 <iprintf>
 800c9f6:	200a      	movs	r0, #10
 800c9f8:	f002 f9d0 	bl	800ed9c <putchar>
        phost->device.RstCnt = 0U;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	f883 2cd7 	strb.w	r2, [r3, #3287]	@ 0xcd7
        phost->gState = HOST_DEV_ATTACHED;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2202      	movs	r2, #2
 800ca08:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ca0a:	e1fa      	b.n	800ce02 <USBH_Process+0x4be>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8d3 3d80 	ldr.w	r3, [r3, #3456]	@ 0xd80
 800ca12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ca16:	d91a      	bls.n	800ca4e <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f893 3cd7 	ldrb.w	r3, [r3, #3287]	@ 0xcd7
 800ca1e:	3301      	adds	r3, #1
 800ca20:	b2da      	uxtb	r2, r3
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f883 2cd7 	strb.w	r2, [r3, #3287]	@ 0xcd7
          if (phost->device.RstCnt > 3U)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f893 3cd7 	ldrb.w	r3, [r3, #3287]	@ 0xcd7
 800ca2e:	2b03      	cmp	r3, #3
 800ca30:	d909      	bls.n	800ca46 <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800ca32:	4888      	ldr	r0, [pc, #544]	@ (800cc54 <USBH_Process+0x310>)
 800ca34:	f002 f9a0 	bl	800ed78 <iprintf>
 800ca38:	200a      	movs	r0, #10
 800ca3a:	f002 f9af 	bl	800ed9c <putchar>
            phost->gState = HOST_ABORT_STATE;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	220d      	movs	r2, #13
 800ca42:	701a      	strb	r2, [r3, #0]
      break;
 800ca44:	e1dd      	b.n	800ce02 <USBH_Process+0x4be>
            phost->gState = HOST_IDLE;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	701a      	strb	r2, [r3, #0]
      break;
 800ca4c:	e1d9      	b.n	800ce02 <USBH_Process+0x4be>
          phost->Timeout += 10U;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f8d3 3d80 	ldr.w	r3, [r3, #3456]	@ 0xd80
 800ca54:	f103 020a 	add.w	r2, r3, #10
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8c3 2d80 	str.w	r2, [r3, #3456]	@ 0xd80
          USBH_Delay(10U);
 800ca5e:	200a      	movs	r0, #10
 800ca60:	f001 ff2f 	bl	800e8c2 <USBH_Delay>
      break;
 800ca64:	e1cd      	b.n	800ce02 <USBH_Process+0x4be>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d005      	beq.n	800ca7c <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800ca76:	2104      	movs	r1, #4
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ca7c:	2064      	movs	r0, #100	@ 0x64
 800ca7e:	f001 ff20 	bl	800e8c2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f001 fdec 	bl	800e660 <USBH_LL_GetSpeed>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f883 2cd5 	strb.w	r2, [r3, #3285]	@ 0xcd5

      phost->gState = HOST_ENUMERATION;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2205      	movs	r2, #5
 800ca96:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ca98:	2100      	movs	r1, #0
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f001 fbf3 	bl	800e286 <USBH_AllocPipe>
 800caa0:	4603      	mov	r3, r0
 800caa2:	461a      	mov	r2, r3
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800caa8:	2180      	movs	r1, #128	@ 0x80
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f001 fbeb 	bl	800e286 <USBH_AllocPipe>
 800cab0:	4603      	mov	r3, r0
 800cab2:	461a      	mov	r2, r3
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	7919      	ldrb	r1, [r3, #4]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cac8:	687a      	ldr	r2, [r7, #4]
 800caca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cacc:	9202      	str	r2, [sp, #8]
 800cace:	2200      	movs	r2, #0
 800cad0:	9201      	str	r2, [sp, #4]
 800cad2:	9300      	str	r3, [sp, #0]
 800cad4:	4603      	mov	r3, r0
 800cad6:	2280      	movs	r2, #128	@ 0x80
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f001 fba5 	bl	800e228 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	7959      	ldrb	r1, [r3, #5]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800caf2:	9202      	str	r2, [sp, #8]
 800caf4:	2200      	movs	r2, #0
 800caf6:	9201      	str	r2, [sp, #4]
 800caf8:	9300      	str	r3, [sp, #0]
 800cafa:	4603      	mov	r3, r0
 800cafc:	2200      	movs	r2, #0
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f001 fb92 	bl	800e228 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cb04:	e17d      	b.n	800ce02 <USBH_Process+0x4be>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 f98e 	bl	800ce28 <USBH_HandleEnum>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800cb10:	7bbb      	ldrb	r3, [r7, #14]
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	f040 8169 	bne.w	800cdec <USBH_Process+0x4a8>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800cb1a:	484f      	ldr	r0, [pc, #316]	@ (800cc58 <USBH_Process+0x314>)
 800cb1c:	f002 f92c 	bl	800ed78 <iprintf>
 800cb20:	200a      	movs	r0, #10
 800cb22:	f002 f93b 	bl	800ed9c <putchar>

        phost->device.current_interface = 0U;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	f883 2cdc 	strb.w	r2, [r3, #3292]	@ 0xcdc

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f893 3cef 	ldrb.w	r3, [r3, #3311]	@ 0xcef
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d109      	bne.n	800cb4c <USBH_Process+0x208>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800cb38:	4848      	ldr	r0, [pc, #288]	@ (800cc5c <USBH_Process+0x318>)
 800cb3a:	f002 f91d 	bl	800ed78 <iprintf>
 800cb3e:	200a      	movs	r0, #10
 800cb40:	f002 f92c 	bl	800ed9c <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2208      	movs	r2, #8
 800cb48:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cb4a:	e14f      	b.n	800cdec <USBH_Process+0x4a8>
          phost->gState = HOST_INPUT;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2207      	movs	r2, #7
 800cb50:	701a      	strb	r2, [r3, #0]
      break;
 800cb52:	e14b      	b.n	800cdec <USBH_Process+0x4a8>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	f000 8148 	beq.w	800cdf0 <USBH_Process+0x4ac>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800cb66:	2101      	movs	r1, #1
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2208      	movs	r2, #8
 800cb70:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800cb72:	e13d      	b.n	800cdf0 <USBH_Process+0x4ac>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f893 3cf5 	ldrb.w	r3, [r3, #3317]	@ 0xcf5
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 fd9a 	bl	800d6b6 <USBH_SetCfg>
 800cb82:	4603      	mov	r3, r0
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	f040 8135 	bne.w	800cdf4 <USBH_Process+0x4b0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2209      	movs	r2, #9
 800cb8e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800cb90:	4833      	ldr	r0, [pc, #204]	@ (800cc60 <USBH_Process+0x31c>)
 800cb92:	f002 f8f1 	bl	800ed78 <iprintf>
 800cb96:	200a      	movs	r0, #10
 800cb98:	f002 f900 	bl	800ed9c <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cb9c:	e12a      	b.n	800cdf4 <USBH_Process+0x4b0>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f893 3cf7 	ldrb.w	r3, [r3, #3319]	@ 0xcf7
 800cba4:	f003 0320 	and.w	r3, r3, #32
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d022      	beq.n	800cbf2 <USBH_Process+0x2ae>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800cbac:	2101      	movs	r1, #1
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 fda4 	bl	800d6fc <USBH_SetFeature>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cbb8:	7bbb      	ldrb	r3, [r7, #14]
 800cbba:	b2db      	uxtb	r3, r3
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d109      	bne.n	800cbd4 <USBH_Process+0x290>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800cbc0:	4828      	ldr	r0, [pc, #160]	@ (800cc64 <USBH_Process+0x320>)
 800cbc2:	f002 f8d9 	bl	800ed78 <iprintf>
 800cbc6:	200a      	movs	r0, #10
 800cbc8:	f002 f8e8 	bl	800ed9c <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	220a      	movs	r2, #10
 800cbd0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cbd2:	e111      	b.n	800cdf8 <USBH_Process+0x4b4>
        else if (status == USBH_NOT_SUPPORTED)
 800cbd4:	7bbb      	ldrb	r3, [r7, #14]
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	2b03      	cmp	r3, #3
 800cbda:	f040 810d 	bne.w	800cdf8 <USBH_Process+0x4b4>
          USBH_UsrLog("Remote wakeup not supported by the device");
 800cbde:	4822      	ldr	r0, [pc, #136]	@ (800cc68 <USBH_Process+0x324>)
 800cbe0:	f002 f8ca 	bl	800ed78 <iprintf>
 800cbe4:	200a      	movs	r0, #10
 800cbe6:	f002 f8d9 	bl	800ed9c <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	220a      	movs	r2, #10
 800cbee:	701a      	strb	r2, [r3, #0]
      break;
 800cbf0:	e102      	b.n	800cdf8 <USBH_Process+0x4b4>
        phost->gState = HOST_CHECK_CLASS;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	220a      	movs	r2, #10
 800cbf6:	701a      	strb	r2, [r3, #0]
      break;
 800cbf8:	e0fe      	b.n	800cdf8 <USBH_Process+0x4b4>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	@ 0xd38
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d106      	bne.n	800cc12 <USBH_Process+0x2ce>
      {
        USBH_UsrLog("No Class has been registered.");
 800cc04:	4819      	ldr	r0, [pc, #100]	@ (800cc6c <USBH_Process+0x328>)
 800cc06:	f002 f8b7 	bl	800ed78 <iprintf>
 800cc0a:	200a      	movs	r0, #10
 800cc0c:	f002 f8c6 	bl	800ed9c <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cc10:	e0f7      	b.n	800ce02 <USBH_Process+0x4be>
        phost->pActiveClass = NULL;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	73fb      	strb	r3, [r7, #15]
 800cc1e:	e02a      	b.n	800cc76 <USBH_Process+0x332>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cc20:	7bfa      	ldrb	r2, [r7, #15]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f502 7253 	add.w	r2, r2, #844	@ 0x34c
 800cc28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc2c:	791a      	ldrb	r2, [r3, #4]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f893 3cff 	ldrb.w	r3, [r3, #3327]	@ 0xcff
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d11b      	bne.n	800cc70 <USBH_Process+0x32c>
            phost->pActiveClass = phost->pClass[idx];
 800cc38:	7bfa      	ldrb	r2, [r7, #15]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f502 7253 	add.w	r2, r2, #844	@ 0x34c
 800cc40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
            break;
 800cc4a:	e017      	b.n	800cc7c <USBH_Process+0x338>
 800cc4c:	08010268 	.word	0x08010268
 800cc50:	08010280 	.word	0x08010280
 800cc54:	0801029c 	.word	0x0801029c
 800cc58:	080102c8 	.word	0x080102c8
 800cc5c:	080102dc 	.word	0x080102dc
 800cc60:	08010304 	.word	0x08010304
 800cc64:	08010320 	.word	0x08010320
 800cc68:	08010340 	.word	0x08010340
 800cc6c:	0801036c 	.word	0x0801036c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cc70:	7bfb      	ldrb	r3, [r7, #15]
 800cc72:	3301      	adds	r3, #1
 800cc74:	73fb      	strb	r3, [r7, #15]
 800cc76:	7bfb      	ldrb	r3, [r7, #15]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d0d1      	beq.n	800cc20 <USBH_Process+0x2dc>
        if (phost->pActiveClass != NULL)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d02c      	beq.n	800cce0 <USBH_Process+0x39c>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800cc8c:	689b      	ldr	r3, [r3, #8]
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	4798      	blx	r3
 800cc92:	4603      	mov	r3, r0
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d114      	bne.n	800ccc2 <USBH_Process+0x37e>
            phost->gState = HOST_CLASS_REQUEST;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2206      	movs	r2, #6
 800cc9c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4619      	mov	r1, r3
 800cca8:	4858      	ldr	r0, [pc, #352]	@ (800ce0c <USBH_Process+0x4c8>)
 800ccaa:	f002 f865 	bl	800ed78 <iprintf>
 800ccae:	200a      	movs	r0, #10
 800ccb0:	f002 f874 	bl	800ed9c <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800ccba:	2103      	movs	r1, #3
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	4798      	blx	r3
      break;
 800ccc0:	e09f      	b.n	800ce02 <USBH_Process+0x4be>
            phost->gState = HOST_ABORT_STATE;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	220d      	movs	r2, #13
 800ccc6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	484f      	ldr	r0, [pc, #316]	@ (800ce10 <USBH_Process+0x4cc>)
 800ccd4:	f002 f850 	bl	800ed78 <iprintf>
 800ccd8:	200a      	movs	r0, #10
 800ccda:	f002 f85f 	bl	800ed9c <putchar>
      break;
 800ccde:	e090      	b.n	800ce02 <USBH_Process+0x4be>
          phost->gState = HOST_ABORT_STATE;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	220d      	movs	r2, #13
 800cce4:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800cce6:	484b      	ldr	r0, [pc, #300]	@ (800ce14 <USBH_Process+0x4d0>)
 800cce8:	f002 f846 	bl	800ed78 <iprintf>
 800ccec:	200a      	movs	r0, #10
 800ccee:	f002 f855 	bl	800ed9c <putchar>
      break;
 800ccf2:	e086      	b.n	800ce02 <USBH_Process+0x4be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d020      	beq.n	800cd40 <USBH_Process+0x3fc>
      {
        status = phost->pActiveClass->Requests(phost);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800cd04:	691b      	ldr	r3, [r3, #16]
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	4798      	blx	r3
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cd0e:	7bbb      	ldrb	r3, [r7, #14]
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d103      	bne.n	800cd1e <USBH_Process+0x3da>
        {
          phost->gState = HOST_CLASS;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	220b      	movs	r2, #11
 800cd1a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cd1c:	e06e      	b.n	800cdfc <USBH_Process+0x4b8>
        else if (status == USBH_FAIL)
 800cd1e:	7bbb      	ldrb	r3, [r7, #14]
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	2b02      	cmp	r3, #2
 800cd24:	d16a      	bne.n	800cdfc <USBH_Process+0x4b8>
          phost->gState = HOST_ABORT_STATE;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	220d      	movs	r2, #13
 800cd2a:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800cd2c:	483a      	ldr	r0, [pc, #232]	@ (800ce18 <USBH_Process+0x4d4>)
 800cd2e:	f002 f823 	bl	800ed78 <iprintf>
 800cd32:	483a      	ldr	r0, [pc, #232]	@ (800ce1c <USBH_Process+0x4d8>)
 800cd34:	f002 f820 	bl	800ed78 <iprintf>
 800cd38:	200a      	movs	r0, #10
 800cd3a:	f002 f82f 	bl	800ed9c <putchar>
      break;
 800cd3e:	e05d      	b.n	800cdfc <USBH_Process+0x4b8>
        phost->gState = HOST_ABORT_STATE;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	220d      	movs	r2, #13
 800cd44:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800cd46:	4834      	ldr	r0, [pc, #208]	@ (800ce18 <USBH_Process+0x4d4>)
 800cd48:	f002 f816 	bl	800ed78 <iprintf>
 800cd4c:	4834      	ldr	r0, [pc, #208]	@ (800ce20 <USBH_Process+0x4dc>)
 800cd4e:	f002 f813 	bl	800ed78 <iprintf>
 800cd52:	200a      	movs	r0, #10
 800cd54:	f002 f822 	bl	800ed9c <putchar>
      break;
 800cd58:	e050      	b.n	800cdfc <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d04d      	beq.n	800ce00 <USBH_Process+0x4bc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800cd6a:	695b      	ldr	r3, [r3, #20]
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	4798      	blx	r3
      }
      break;
 800cd70:	e046      	b.n	800ce00 <USBH_Process+0x4bc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2200      	movs	r2, #0
 800cd76:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9

      (void)DeInitStateMachine(phost);
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f7ff fc6c 	bl	800c658 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d009      	beq.n	800cd9e <USBH_Process+0x45a>
      {
        phost->pActiveClass->DeInit(phost);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800cd90:	68db      	ldr	r3, [r3, #12]
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
      }

      if (phost->pUser != NULL)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d005      	beq.n	800cdb4 <USBH_Process+0x470>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800cdae:	2105      	movs	r1, #5
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800cdb4:	481b      	ldr	r0, [pc, #108]	@ (800ce24 <USBH_Process+0x4e0>)
 800cdb6:	f001 ffdf 	bl	800ed78 <iprintf>
 800cdba:	200a      	movs	r0, #10
 800cdbc:	f001 ffee 	bl	800ed9c <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f893 3cda 	ldrb.w	r3, [r3, #3290]	@ 0xcda
 800cdc6:	b2db      	uxtb	r3, r3
 800cdc8:	2b01      	cmp	r3, #1
 800cdca:	d107      	bne.n	800cddc <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	f883 2cda 	strb.w	r2, [r3, #3290]	@ 0xcda

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f7ff fda5 	bl	800c924 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cdda:	e012      	b.n	800ce02 <USBH_Process+0x4be>
        (void)USBH_LL_Start(phost);
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f001 fc09 	bl	800e5f4 <USBH_LL_Start>
      break;
 800cde2:	e00e      	b.n	800ce02 <USBH_Process+0x4be>

    case HOST_ABORT_STATE:
    default :
      break;
 800cde4:	bf00      	nop
 800cde6:	e00c      	b.n	800ce02 <USBH_Process+0x4be>
      break;
 800cde8:	bf00      	nop
 800cdea:	e00a      	b.n	800ce02 <USBH_Process+0x4be>
      break;
 800cdec:	bf00      	nop
 800cdee:	e008      	b.n	800ce02 <USBH_Process+0x4be>
    break;
 800cdf0:	bf00      	nop
 800cdf2:	e006      	b.n	800ce02 <USBH_Process+0x4be>
      break;
 800cdf4:	bf00      	nop
 800cdf6:	e004      	b.n	800ce02 <USBH_Process+0x4be>
      break;
 800cdf8:	bf00      	nop
 800cdfa:	e002      	b.n	800ce02 <USBH_Process+0x4be>
      break;
 800cdfc:	bf00      	nop
 800cdfe:	e000      	b.n	800ce02 <USBH_Process+0x4be>
      break;
 800ce00:	bf00      	nop
  }
  return USBH_OK;
 800ce02:	2300      	movs	r3, #0
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3710      	adds	r7, #16
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	0801038c 	.word	0x0801038c
 800ce10:	080103a0 	.word	0x080103a0
 800ce14:	080103c0 	.word	0x080103c0
 800ce18:	080101a8 	.word	0x080101a8
 800ce1c:	080103e8 	.word	0x080103e8
 800ce20:	08010410 	.word	0x08010410
 800ce24:	08010428 	.word	0x08010428

0800ce28 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b088      	sub	sp, #32
 800ce2c:	af04      	add	r7, sp, #16
 800ce2e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ce30:	2301      	movs	r3, #1
 800ce32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ce34:	2301      	movs	r3, #1
 800ce36:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	785b      	ldrb	r3, [r3, #1]
 800ce3c:	2b07      	cmp	r3, #7
 800ce3e:	f200 827b 	bhi.w	800d338 <USBH_HandleEnum+0x510>
 800ce42:	a201      	add	r2, pc, #4	@ (adr r2, 800ce48 <USBH_HandleEnum+0x20>)
 800ce44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce48:	0800ce69 	.word	0x0800ce69
 800ce4c:	0800cf41 	.word	0x0800cf41
 800ce50:	0800cff1 	.word	0x0800cff1
 800ce54:	0800d0ad 	.word	0x0800d0ad
 800ce58:	0800d135 	.word	0x0800d135
 800ce5c:	0800d1e7 	.word	0x0800d1e7
 800ce60:	0800d25b 	.word	0x0800d25b
 800ce64:	0800d2cd 	.word	0x0800d2cd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ce68:	2108      	movs	r1, #8
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f000 fb16 	bl	800d49c <USBH_Get_DevDesc>
 800ce70:	4603      	mov	r3, r0
 800ce72:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ce74:	7bbb      	ldrb	r3, [r7, #14]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d12e      	bne.n	800ced8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f893 2ce5 	ldrb.w	r2, [r3, #3301]	@ 0xce5
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2201      	movs	r2, #1
 800ce88:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	7919      	ldrb	r1, [r3, #4]
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ce9e:	9202      	str	r2, [sp, #8]
 800cea0:	2200      	movs	r2, #0
 800cea2:	9201      	str	r2, [sp, #4]
 800cea4:	9300      	str	r3, [sp, #0]
 800cea6:	4603      	mov	r3, r0
 800cea8:	2280      	movs	r2, #128	@ 0x80
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f001 f9bc 	bl	800e228 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	7959      	ldrb	r1, [r3, #5]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cec4:	9202      	str	r2, [sp, #8]
 800cec6:	2200      	movs	r2, #0
 800cec8:	9201      	str	r2, [sp, #4]
 800ceca:	9300      	str	r3, [sp, #0]
 800cecc:	4603      	mov	r3, r0
 800cece:	2200      	movs	r2, #0
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f001 f9a9 	bl	800e228 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ced6:	e231      	b.n	800d33c <USBH_HandleEnum+0x514>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ced8:	7bbb      	ldrb	r3, [r7, #14]
 800ceda:	2b03      	cmp	r3, #3
 800cedc:	f040 822e 	bne.w	800d33c <USBH_HandleEnum+0x514>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800cee0:	48ae      	ldr	r0, [pc, #696]	@ (800d19c <USBH_HandleEnum+0x374>)
 800cee2:	f001 ff49 	bl	800ed78 <iprintf>
 800cee6:	48ae      	ldr	r0, [pc, #696]	@ (800d1a0 <USBH_HandleEnum+0x378>)
 800cee8:	f001 ff46 	bl	800ed78 <iprintf>
 800ceec:	200a      	movs	r0, #10
 800ceee:	f001 ff55 	bl	800ed9c <putchar>
        phost->device.EnumCnt++;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800cef8:	3301      	adds	r3, #1
 800cefa:	b2da      	uxtb	r2, r3
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800cf08:	2b03      	cmp	r3, #3
 800cf0a:	d909      	bls.n	800cf20 <USBH_HandleEnum+0xf8>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800cf0c:	48a5      	ldr	r0, [pc, #660]	@ (800d1a4 <USBH_HandleEnum+0x37c>)
 800cf0e:	f001 ff33 	bl	800ed78 <iprintf>
 800cf12:	200a      	movs	r0, #10
 800cf14:	f001 ff42 	bl	800ed9c <putchar>
          phost->gState = HOST_ABORT_STATE;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	220d      	movs	r2, #13
 800cf1c:	701a      	strb	r2, [r3, #0]
      break;
 800cf1e:	e20d      	b.n	800d33c <USBH_HandleEnum+0x514>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	795b      	ldrb	r3, [r3, #5]
 800cf24:	4619      	mov	r1, r3
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f001 f9cf 	bl	800e2ca <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	791b      	ldrb	r3, [r3, #4]
 800cf30:	4619      	mov	r1, r3
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f001 f9c9 	bl	800e2ca <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	701a      	strb	r2, [r3, #0]
      break;
 800cf3e:	e1fd      	b.n	800d33c <USBH_HandleEnum+0x514>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800cf40:	2112      	movs	r1, #18
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 faaa 	bl	800d49c <USBH_Get_DevDesc>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cf4c:	7bbb      	ldrb	r3, [r7, #14]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d117      	bne.n	800cf82 <USBH_HandleEnum+0x15a>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f8b3 3ce8 	ldrh.w	r3, [r3, #3304]	@ 0xce8
 800cf58:	4619      	mov	r1, r3
 800cf5a:	4893      	ldr	r0, [pc, #588]	@ (800d1a8 <USBH_HandleEnum+0x380>)
 800cf5c:	f001 ff0c 	bl	800ed78 <iprintf>
 800cf60:	200a      	movs	r0, #10
 800cf62:	f001 ff1b 	bl	800ed9c <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8b3 3ce6 	ldrh.w	r3, [r3, #3302]	@ 0xce6
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	488f      	ldr	r0, [pc, #572]	@ (800d1ac <USBH_HandleEnum+0x384>)
 800cf70:	f001 ff02 	bl	800ed78 <iprintf>
 800cf74:	200a      	movs	r0, #10
 800cf76:	f001 ff11 	bl	800ed9c <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2202      	movs	r2, #2
 800cf7e:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cf80:	e1de      	b.n	800d340 <USBH_HandleEnum+0x518>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf82:	7bbb      	ldrb	r3, [r7, #14]
 800cf84:	2b03      	cmp	r3, #3
 800cf86:	f040 81db 	bne.w	800d340 <USBH_HandleEnum+0x518>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800cf8a:	4884      	ldr	r0, [pc, #528]	@ (800d19c <USBH_HandleEnum+0x374>)
 800cf8c:	f001 fef4 	bl	800ed78 <iprintf>
 800cf90:	4887      	ldr	r0, [pc, #540]	@ (800d1b0 <USBH_HandleEnum+0x388>)
 800cf92:	f001 fef1 	bl	800ed78 <iprintf>
 800cf96:	200a      	movs	r0, #10
 800cf98:	f001 ff00 	bl	800ed9c <putchar>
        phost->device.EnumCnt++;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	b2da      	uxtb	r2, r3
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800cfb2:	2b03      	cmp	r3, #3
 800cfb4:	d909      	bls.n	800cfca <USBH_HandleEnum+0x1a2>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800cfb6:	487b      	ldr	r0, [pc, #492]	@ (800d1a4 <USBH_HandleEnum+0x37c>)
 800cfb8:	f001 fede 	bl	800ed78 <iprintf>
 800cfbc:	200a      	movs	r0, #10
 800cfbe:	f001 feed 	bl	800ed9c <putchar>
          phost->gState = HOST_ABORT_STATE;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	220d      	movs	r2, #13
 800cfc6:	701a      	strb	r2, [r3, #0]
      break;
 800cfc8:	e1ba      	b.n	800d340 <USBH_HandleEnum+0x518>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	795b      	ldrb	r3, [r3, #5]
 800cfce:	4619      	mov	r1, r3
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f001 f97a 	bl	800e2ca <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	791b      	ldrb	r3, [r3, #4]
 800cfda:	4619      	mov	r1, r3
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f001 f974 	bl	800e2ca <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2200      	movs	r2, #0
 800cfec:	701a      	strb	r2, [r3, #0]
      break;
 800cfee:	e1a7      	b.n	800d340 <USBH_HandleEnum+0x518>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800cff0:	2101      	movs	r1, #1
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 fb3b 	bl	800d66e <USBH_SetAddress>
 800cff8:	4603      	mov	r3, r0
 800cffa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cffc:	7bbb      	ldrb	r3, [r7, #14]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d13a      	bne.n	800d078 <USBH_HandleEnum+0x250>
      {
        USBH_Delay(2U);
 800d002:	2002      	movs	r0, #2
 800d004:	f001 fc5d 	bl	800e8c2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2201      	movs	r2, #1
 800d00c:	f883 2cd4 	strb.w	r2, [r3, #3284]	@ 0xcd4

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f893 3cd4 	ldrb.w	r3, [r3, #3284]	@ 0xcd4
 800d016:	4619      	mov	r1, r3
 800d018:	4866      	ldr	r0, [pc, #408]	@ (800d1b4 <USBH_HandleEnum+0x38c>)
 800d01a:	f001 fead 	bl	800ed78 <iprintf>
 800d01e:	200a      	movs	r0, #10
 800d020:	f001 febc 	bl	800ed9c <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2203      	movs	r2, #3
 800d028:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	7919      	ldrb	r1, [r3, #4]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d03e:	9202      	str	r2, [sp, #8]
 800d040:	2200      	movs	r2, #0
 800d042:	9201      	str	r2, [sp, #4]
 800d044:	9300      	str	r3, [sp, #0]
 800d046:	4603      	mov	r3, r0
 800d048:	2280      	movs	r2, #128	@ 0x80
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f001 f8ec 	bl	800e228 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	7959      	ldrb	r1, [r3, #5]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d060:	687a      	ldr	r2, [r7, #4]
 800d062:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d064:	9202      	str	r2, [sp, #8]
 800d066:	2200      	movs	r2, #0
 800d068:	9201      	str	r2, [sp, #4]
 800d06a:	9300      	str	r3, [sp, #0]
 800d06c:	4603      	mov	r3, r0
 800d06e:	2200      	movs	r2, #0
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f001 f8d9 	bl	800e228 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d076:	e165      	b.n	800d344 <USBH_HandleEnum+0x51c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d078:	7bbb      	ldrb	r3, [r7, #14]
 800d07a:	2b03      	cmp	r3, #3
 800d07c:	f040 8162 	bne.w	800d344 <USBH_HandleEnum+0x51c>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800d080:	4846      	ldr	r0, [pc, #280]	@ (800d19c <USBH_HandleEnum+0x374>)
 800d082:	f001 fe79 	bl	800ed78 <iprintf>
 800d086:	484c      	ldr	r0, [pc, #304]	@ (800d1b8 <USBH_HandleEnum+0x390>)
 800d088:	f001 fe76 	bl	800ed78 <iprintf>
 800d08c:	200a      	movs	r0, #10
 800d08e:	f001 fe85 	bl	800ed9c <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d092:	4844      	ldr	r0, [pc, #272]	@ (800d1a4 <USBH_HandleEnum+0x37c>)
 800d094:	f001 fe70 	bl	800ed78 <iprintf>
 800d098:	200a      	movs	r0, #10
 800d09a:	f001 fe7f 	bl	800ed9c <putchar>
        phost->gState = HOST_ABORT_STATE;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	220d      	movs	r2, #13
 800d0a2:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	705a      	strb	r2, [r3, #1]
      break;
 800d0aa:	e14b      	b.n	800d344 <USBH_HandleEnum+0x51c>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d0ac:	2109      	movs	r1, #9
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f000 fa2e 	bl	800d510 <USBH_Get_CfgDesc>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d0b8:	7bbb      	ldrb	r3, [r7, #14]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d103      	bne.n	800d0c6 <USBH_HandleEnum+0x29e>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2204      	movs	r2, #4
 800d0c2:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d0c4:	e140      	b.n	800d348 <USBH_HandleEnum+0x520>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d0c6:	7bbb      	ldrb	r3, [r7, #14]
 800d0c8:	2b03      	cmp	r3, #3
 800d0ca:	f040 813d 	bne.w	800d348 <USBH_HandleEnum+0x520>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800d0ce:	4833      	ldr	r0, [pc, #204]	@ (800d19c <USBH_HandleEnum+0x374>)
 800d0d0:	f001 fe52 	bl	800ed78 <iprintf>
 800d0d4:	4839      	ldr	r0, [pc, #228]	@ (800d1bc <USBH_HandleEnum+0x394>)
 800d0d6:	f001 fe4f 	bl	800ed78 <iprintf>
 800d0da:	200a      	movs	r0, #10
 800d0dc:	f001 fe5e 	bl	800ed9c <putchar>
        phost->device.EnumCnt++;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800d0e6:	3301      	adds	r3, #1
 800d0e8:	b2da      	uxtb	r2, r3
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800d0f6:	2b03      	cmp	r3, #3
 800d0f8:	d909      	bls.n	800d10e <USBH_HandleEnum+0x2e6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d0fa:	482a      	ldr	r0, [pc, #168]	@ (800d1a4 <USBH_HandleEnum+0x37c>)
 800d0fc:	f001 fe3c 	bl	800ed78 <iprintf>
 800d100:	200a      	movs	r0, #10
 800d102:	f001 fe4b 	bl	800ed9c <putchar>
          phost->gState = HOST_ABORT_STATE;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	220d      	movs	r2, #13
 800d10a:	701a      	strb	r2, [r3, #0]
      break;
 800d10c:	e11c      	b.n	800d348 <USBH_HandleEnum+0x520>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	795b      	ldrb	r3, [r3, #5]
 800d112:	4619      	mov	r1, r3
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f001 f8d8 	bl	800e2ca <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	791b      	ldrb	r3, [r3, #4]
 800d11e:	4619      	mov	r1, r3
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f001 f8d2 	bl	800e2ca <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2200      	movs	r2, #0
 800d12a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2200      	movs	r2, #0
 800d130:	701a      	strb	r2, [r3, #0]
      break;
 800d132:	e109      	b.n	800d348 <USBH_HandleEnum+0x520>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8b3 3cf2 	ldrh.w	r3, [r3, #3314]	@ 0xcf2
 800d13a:	4619      	mov	r1, r3
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 f9e7 	bl	800d510 <USBH_Get_CfgDesc>
 800d142:	4603      	mov	r3, r0
 800d144:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d146:	7bbb      	ldrb	r3, [r7, #14]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d103      	bne.n	800d154 <USBH_HandleEnum+0x32c>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2205      	movs	r2, #5
 800d150:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d152:	e0fb      	b.n	800d34c <USBH_HandleEnum+0x524>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d154:	7bbb      	ldrb	r3, [r7, #14]
 800d156:	2b03      	cmp	r3, #3
 800d158:	f040 80f8 	bne.w	800d34c <USBH_HandleEnum+0x524>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800d15c:	480f      	ldr	r0, [pc, #60]	@ (800d19c <USBH_HandleEnum+0x374>)
 800d15e:	f001 fe0b 	bl	800ed78 <iprintf>
 800d162:	4816      	ldr	r0, [pc, #88]	@ (800d1bc <USBH_HandleEnum+0x394>)
 800d164:	f001 fe08 	bl	800ed78 <iprintf>
 800d168:	200a      	movs	r0, #10
 800d16a:	f001 fe17 	bl	800ed9c <putchar>
        phost->device.EnumCnt++;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800d174:	3301      	adds	r3, #1
 800d176:	b2da      	uxtb	r2, r3
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800d184:	2b03      	cmp	r3, #3
 800d186:	d91b      	bls.n	800d1c0 <USBH_HandleEnum+0x398>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d188:	4806      	ldr	r0, [pc, #24]	@ (800d1a4 <USBH_HandleEnum+0x37c>)
 800d18a:	f001 fdf5 	bl	800ed78 <iprintf>
 800d18e:	200a      	movs	r0, #10
 800d190:	f001 fe04 	bl	800ed9c <putchar>
          phost->gState = HOST_ABORT_STATE;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	220d      	movs	r2, #13
 800d198:	701a      	strb	r2, [r3, #0]
      break;
 800d19a:	e0d7      	b.n	800d34c <USBH_HandleEnum+0x524>
 800d19c:	080101a8 	.word	0x080101a8
 800d1a0:	08010440 	.word	0x08010440
 800d1a4:	08010474 	.word	0x08010474
 800d1a8:	080104b4 	.word	0x080104b4
 800d1ac:	080104c0 	.word	0x080104c0
 800d1b0:	080104cc 	.word	0x080104cc
 800d1b4:	08010508 	.word	0x08010508
 800d1b8:	08010520 	.word	0x08010520
 800d1bc:	08010554 	.word	0x08010554
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	795b      	ldrb	r3, [r3, #5]
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f001 f87f 	bl	800e2ca <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	791b      	ldrb	r3, [r3, #4]
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f001 f879 	bl	800e2ca <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	701a      	strb	r2, [r3, #0]
      break;
 800d1e4:	e0b2      	b.n	800d34c <USBH_HandleEnum+0x524>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f893 3cec 	ldrb.w	r3, [r3, #3308]	@ 0xcec
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d02a      	beq.n	800d246 <USBH_HandleEnum+0x41e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f893 1cec 	ldrb.w	r1, [r3, #3308]	@ 0xcec
                                        phost->device.Data, 0xFFU);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d1fc:	23ff      	movs	r3, #255	@ 0xff
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f000 f9be 	bl	800d580 <USBH_Get_StringDesc>
 800d204:	4603      	mov	r3, r0
 800d206:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d208:	7bbb      	ldrb	r3, [r7, #14]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d10d      	bne.n	800d22a <USBH_HandleEnum+0x402>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d214:	4619      	mov	r1, r3
 800d216:	4853      	ldr	r0, [pc, #332]	@ (800d364 <USBH_HandleEnum+0x53c>)
 800d218:	f001 fdae 	bl	800ed78 <iprintf>
 800d21c:	200a      	movs	r0, #10
 800d21e:	f001 fdbd 	bl	800ed9c <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2206      	movs	r2, #6
 800d226:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d228:	e092      	b.n	800d350 <USBH_HandleEnum+0x528>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d22a:	7bbb      	ldrb	r3, [r7, #14]
 800d22c:	2b03      	cmp	r3, #3
 800d22e:	f040 808f 	bne.w	800d350 <USBH_HandleEnum+0x528>
          USBH_UsrLog("Manufacturer : N/A");
 800d232:	484d      	ldr	r0, [pc, #308]	@ (800d368 <USBH_HandleEnum+0x540>)
 800d234:	f001 fda0 	bl	800ed78 <iprintf>
 800d238:	200a      	movs	r0, #10
 800d23a:	f001 fdaf 	bl	800ed9c <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2206      	movs	r2, #6
 800d242:	705a      	strb	r2, [r3, #1]
      break;
 800d244:	e084      	b.n	800d350 <USBH_HandleEnum+0x528>
        USBH_UsrLog("Manufacturer : N/A");
 800d246:	4848      	ldr	r0, [pc, #288]	@ (800d368 <USBH_HandleEnum+0x540>)
 800d248:	f001 fd96 	bl	800ed78 <iprintf>
 800d24c:	200a      	movs	r0, #10
 800d24e:	f001 fda5 	bl	800ed9c <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2206      	movs	r2, #6
 800d256:	705a      	strb	r2, [r3, #1]
      break;
 800d258:	e07a      	b.n	800d350 <USBH_HandleEnum+0x528>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f893 3ced 	ldrb.w	r3, [r3, #3309]	@ 0xced
 800d260:	2b00      	cmp	r3, #0
 800d262:	d029      	beq.n	800d2b8 <USBH_HandleEnum+0x490>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f893 1ced 	ldrb.w	r1, [r3, #3309]	@ 0xced
                                        phost->device.Data, 0xFFU);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d270:	23ff      	movs	r3, #255	@ 0xff
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f000 f984 	bl	800d580 <USBH_Get_StringDesc>
 800d278:	4603      	mov	r3, r0
 800d27a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d27c:	7bbb      	ldrb	r3, [r7, #14]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d10d      	bne.n	800d29e <USBH_HandleEnum+0x476>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d288:	4619      	mov	r1, r3
 800d28a:	4838      	ldr	r0, [pc, #224]	@ (800d36c <USBH_HandleEnum+0x544>)
 800d28c:	f001 fd74 	bl	800ed78 <iprintf>
 800d290:	200a      	movs	r0, #10
 800d292:	f001 fd83 	bl	800ed9c <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2207      	movs	r2, #7
 800d29a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d29c:	e05a      	b.n	800d354 <USBH_HandleEnum+0x52c>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d29e:	7bbb      	ldrb	r3, [r7, #14]
 800d2a0:	2b03      	cmp	r3, #3
 800d2a2:	d157      	bne.n	800d354 <USBH_HandleEnum+0x52c>
          USBH_UsrLog("Product : N/A");
 800d2a4:	4832      	ldr	r0, [pc, #200]	@ (800d370 <USBH_HandleEnum+0x548>)
 800d2a6:	f001 fd67 	bl	800ed78 <iprintf>
 800d2aa:	200a      	movs	r0, #10
 800d2ac:	f001 fd76 	bl	800ed9c <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2207      	movs	r2, #7
 800d2b4:	705a      	strb	r2, [r3, #1]
      break;
 800d2b6:	e04d      	b.n	800d354 <USBH_HandleEnum+0x52c>
        USBH_UsrLog("Product : N/A");
 800d2b8:	482d      	ldr	r0, [pc, #180]	@ (800d370 <USBH_HandleEnum+0x548>)
 800d2ba:	f001 fd5d 	bl	800ed78 <iprintf>
 800d2be:	200a      	movs	r0, #10
 800d2c0:	f001 fd6c 	bl	800ed9c <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2207      	movs	r2, #7
 800d2c8:	705a      	strb	r2, [r3, #1]
      break;
 800d2ca:	e043      	b.n	800d354 <USBH_HandleEnum+0x52c>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f893 3cee 	ldrb.w	r3, [r3, #3310]	@ 0xcee
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d027      	beq.n	800d326 <USBH_HandleEnum+0x4fe>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f893 1cee 	ldrb.w	r1, [r3, #3310]	@ 0xcee
                                        phost->device.Data, 0xFFU);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d2e2:	23ff      	movs	r3, #255	@ 0xff
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 f94b 	bl	800d580 <USBH_Get_StringDesc>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d2ee:	7bbb      	ldrb	r3, [r7, #14]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d10c      	bne.n	800d30e <USBH_HandleEnum+0x4e6>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	481d      	ldr	r0, [pc, #116]	@ (800d374 <USBH_HandleEnum+0x54c>)
 800d2fe:	f001 fd3b 	bl	800ed78 <iprintf>
 800d302:	200a      	movs	r0, #10
 800d304:	f001 fd4a 	bl	800ed9c <putchar>
          Status = USBH_OK;
 800d308:	2300      	movs	r3, #0
 800d30a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d30c:	e024      	b.n	800d358 <USBH_HandleEnum+0x530>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d30e:	7bbb      	ldrb	r3, [r7, #14]
 800d310:	2b03      	cmp	r3, #3
 800d312:	d121      	bne.n	800d358 <USBH_HandleEnum+0x530>
          USBH_UsrLog("Serial Number : N/A");
 800d314:	4818      	ldr	r0, [pc, #96]	@ (800d378 <USBH_HandleEnum+0x550>)
 800d316:	f001 fd2f 	bl	800ed78 <iprintf>
 800d31a:	200a      	movs	r0, #10
 800d31c:	f001 fd3e 	bl	800ed9c <putchar>
          Status = USBH_OK;
 800d320:	2300      	movs	r3, #0
 800d322:	73fb      	strb	r3, [r7, #15]
      break;
 800d324:	e018      	b.n	800d358 <USBH_HandleEnum+0x530>
        USBH_UsrLog("Serial Number : N/A");
 800d326:	4814      	ldr	r0, [pc, #80]	@ (800d378 <USBH_HandleEnum+0x550>)
 800d328:	f001 fd26 	bl	800ed78 <iprintf>
 800d32c:	200a      	movs	r0, #10
 800d32e:	f001 fd35 	bl	800ed9c <putchar>
        Status = USBH_OK;
 800d332:	2300      	movs	r3, #0
 800d334:	73fb      	strb	r3, [r7, #15]
      break;
 800d336:	e00f      	b.n	800d358 <USBH_HandleEnum+0x530>

    default:
      break;
 800d338:	bf00      	nop
 800d33a:	e00e      	b.n	800d35a <USBH_HandleEnum+0x532>
      break;
 800d33c:	bf00      	nop
 800d33e:	e00c      	b.n	800d35a <USBH_HandleEnum+0x532>
      break;
 800d340:	bf00      	nop
 800d342:	e00a      	b.n	800d35a <USBH_HandleEnum+0x532>
      break;
 800d344:	bf00      	nop
 800d346:	e008      	b.n	800d35a <USBH_HandleEnum+0x532>
      break;
 800d348:	bf00      	nop
 800d34a:	e006      	b.n	800d35a <USBH_HandleEnum+0x532>
      break;
 800d34c:	bf00      	nop
 800d34e:	e004      	b.n	800d35a <USBH_HandleEnum+0x532>
      break;
 800d350:	bf00      	nop
 800d352:	e002      	b.n	800d35a <USBH_HandleEnum+0x532>
      break;
 800d354:	bf00      	nop
 800d356:	e000      	b.n	800d35a <USBH_HandleEnum+0x532>
      break;
 800d358:	bf00      	nop
  }
  return Status;
 800d35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3710      	adds	r7, #16
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}
 800d364:	08010598 	.word	0x08010598
 800d368:	080105ac 	.word	0x080105ac
 800d36c:	080105c0 	.word	0x080105c0
 800d370:	080105d0 	.word	0x080105d0
 800d374:	080105e0 	.word	0x080105e0
 800d378:	080105f4 	.word	0x080105f4

0800d37c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b083      	sub	sp, #12
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	683a      	ldr	r2, [r7, #0]
 800d38a:	f8c3 2d7c 	str.w	r2, [r3, #3452]	@ 0xd7c
}
 800d38e:	bf00      	nop
 800d390:	370c      	adds	r7, #12
 800d392:	46bd      	mov	sp, r7
 800d394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d398:	4770      	bx	lr

0800d39a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d39a:	b580      	push	{r7, lr}
 800d39c:	b082      	sub	sp, #8
 800d39e:	af00      	add	r7, sp, #0
 800d3a0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 800d3a8:	1c5a      	adds	r2, r3, #1
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8c3 2d7c 	str.w	r2, [r3, #3452]	@ 0xd7c
  USBH_HandleSof(phost);
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f000 f804 	bl	800d3be <USBH_HandleSof>
}
 800d3b6:	bf00      	nop
 800d3b8:	3708      	adds	r7, #8
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}

0800d3be <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d3be:	b580      	push	{r7, lr}
 800d3c0:	b082      	sub	sp, #8
 800d3c2:	af00      	add	r7, sp, #0
 800d3c4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	b2db      	uxtb	r3, r3
 800d3cc:	2b0b      	cmp	r3, #11
 800d3ce:	d10a      	bne.n	800d3e6 <USBH_HandleSof+0x28>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d005      	beq.n	800d3e6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800d3e0:	699b      	ldr	r3, [r3, #24]
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	4798      	blx	r3
  }
}
 800d3e6:	bf00      	nop
 800d3e8:	3708      	adds	r7, #8
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}

0800d3ee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d3ee:	b480      	push	{r7}
 800d3f0:	b083      	sub	sp, #12
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2201      	movs	r2, #1
 800d3fa:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800d3fe:	bf00      	nop
}
 800d400:	370c      	adds	r7, #12
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr

0800d40a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d40a:	b480      	push	{r7}
 800d40c:	b083      	sub	sp, #12
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2200      	movs	r2, #0
 800d416:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb

  return;
 800d41a:	bf00      	nop
}
 800d41c:	370c      	adds	r7, #12
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr

0800d426 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d426:	b480      	push	{r7}
 800d428:	b083      	sub	sp, #12
 800d42a:	af00      	add	r7, sp, #0
 800d42c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2201      	movs	r2, #1
 800d432:	f883 2cd8 	strb.w	r2, [r3, #3288]	@ 0xcd8
  phost->device.is_disconnected = 0U;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2200      	movs	r2, #0
 800d43a:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9
  phost->device.is_ReEnumerated = 0U;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2200      	movs	r2, #0
 800d442:	f883 2cda 	strb.w	r2, [r3, #3290]	@ 0xcda
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d446:	2300      	movs	r3, #0
}
 800d448:	4618      	mov	r0, r3
 800d44a:	370c      	adds	r7, #12
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr

0800d454 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b082      	sub	sp, #8
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2201      	movs	r2, #1
 800d460:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9
  phost->device.is_connected = 0U;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	f883 2cd8 	strb.w	r2, [r3, #3288]	@ 0xcd8
  phost->device.PortEnabled = 0U;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2200      	movs	r2, #0
 800d470:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f001 f8d8 	bl	800e62a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	791b      	ldrb	r3, [r3, #4]
 800d47e:	4619      	mov	r1, r3
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 ff22 	bl	800e2ca <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	795b      	ldrb	r3, [r3, #5]
 800d48a:	4619      	mov	r1, r3
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 ff1c 	bl	800e2ca <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d492:	2300      	movs	r3, #0
}
 800d494:	4618      	mov	r0, r3
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b086      	sub	sp, #24
 800d4a0:	af02      	add	r7, sp, #8
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800d4a8:	887b      	ldrh	r3, [r7, #2]
 800d4aa:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d90a      	bls.n	800d4c8 <USBH_Get_DevDesc+0x2c>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
 800d4b2:	4815      	ldr	r0, [pc, #84]	@ (800d508 <USBH_Get_DevDesc+0x6c>)
 800d4b4:	f001 fc60 	bl	800ed78 <iprintf>
 800d4b8:	4814      	ldr	r0, [pc, #80]	@ (800d50c <USBH_Get_DevDesc+0x70>)
 800d4ba:	f001 fc5d 	bl	800ed78 <iprintf>
 800d4be:	200a      	movs	r0, #10
 800d4c0:	f001 fc6c 	bl	800ed9c <putchar>
    return USBH_NOT_SUPPORTED;
 800d4c4:	2303      	movs	r3, #3
 800d4c6:	e01b      	b.n	800d500 <USBH_Get_DevDesc+0x64>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d4ce:	887b      	ldrh	r3, [r7, #2]
 800d4d0:	9300      	str	r3, [sp, #0]
 800d4d2:	4613      	mov	r3, r2
 800d4d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d4d8:	2100      	movs	r1, #0
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 f892 	bl	800d604 <USBH_GetDescriptor>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800d4e4:	7bfb      	ldrb	r3, [r7, #15]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d109      	bne.n	800d4fe <USBH_Get_DevDesc+0x62>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d4f0:	887a      	ldrh	r2, [r7, #2]
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f000 f949 	bl	800d78c <USBH_ParseDevDesc>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d500:	4618      	mov	r0, r3
 800d502:	3710      	adds	r7, #16
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}
 800d508:	08010608 	.word	0x08010608
 800d50c:	08010610 	.word	0x08010610

0800d510 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b086      	sub	sp, #24
 800d514:	af02      	add	r7, sp, #8
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	460b      	mov	r3, r1
 800d51a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	331c      	adds	r3, #28
 800d520:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800d522:	887b      	ldrh	r3, [r7, #2]
 800d524:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d528:	d90a      	bls.n	800d540 <USBH_Get_CfgDesc+0x30>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
 800d52a:	4813      	ldr	r0, [pc, #76]	@ (800d578 <USBH_Get_CfgDesc+0x68>)
 800d52c:	f001 fc24 	bl	800ed78 <iprintf>
 800d530:	4812      	ldr	r0, [pc, #72]	@ (800d57c <USBH_Get_CfgDesc+0x6c>)
 800d532:	f001 fc21 	bl	800ed78 <iprintf>
 800d536:	200a      	movs	r0, #10
 800d538:	f001 fc30 	bl	800ed9c <putchar>
    return USBH_NOT_SUPPORTED;
 800d53c:	2303      	movs	r3, #3
 800d53e:	e016      	b.n	800d56e <USBH_Get_CfgDesc+0x5e>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d540:	887b      	ldrh	r3, [r7, #2]
 800d542:	9300      	str	r3, [sp, #0]
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d54a:	2100      	movs	r1, #0
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f000 f859 	bl	800d604 <USBH_GetDescriptor>
 800d552:	4603      	mov	r3, r0
 800d554:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800d556:	7bfb      	ldrb	r3, [r7, #15]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d107      	bne.n	800d56c <USBH_Get_CfgDesc+0x5c>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800d55c:	887b      	ldrh	r3, [r7, #2]
 800d55e:	461a      	mov	r2, r3
 800d560:	68b9      	ldr	r1, [r7, #8]
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 f9c2 	bl	800d8ec <USBH_ParseCfgDesc>
 800d568:	4603      	mov	r3, r0
 800d56a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d56c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3710      	adds	r7, #16
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	08010608 	.word	0x08010608
 800d57c:	08010654 	.word	0x08010654

0800d580 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b088      	sub	sp, #32
 800d584:	af02      	add	r7, sp, #8
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	607a      	str	r2, [r7, #4]
 800d58a:	461a      	mov	r2, r3
 800d58c:	460b      	mov	r3, r1
 800d58e:	72fb      	strb	r3, [r7, #11]
 800d590:	4613      	mov	r3, r2
 800d592:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800d594:	893b      	ldrh	r3, [r7, #8]
 800d596:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d802      	bhi.n	800d5a4 <USBH_Get_StringDesc+0x24>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d10a      	bne.n	800d5ba <USBH_Get_StringDesc+0x3a>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
 800d5a4:	4815      	ldr	r0, [pc, #84]	@ (800d5fc <USBH_Get_StringDesc+0x7c>)
 800d5a6:	f001 fbe7 	bl	800ed78 <iprintf>
 800d5aa:	4815      	ldr	r0, [pc, #84]	@ (800d600 <USBH_Get_StringDesc+0x80>)
 800d5ac:	f001 fbe4 	bl	800ed78 <iprintf>
 800d5b0:	200a      	movs	r0, #10
 800d5b2:	f001 fbf3 	bl	800ed9c <putchar>
    return USBH_NOT_SUPPORTED;
 800d5b6:	2303      	movs	r3, #3
 800d5b8:	e01c      	b.n	800d5f4 <USBH_Get_StringDesc+0x74>
  }

  status = USBH_GetDescriptor(phost,
 800d5ba:	7afb      	ldrb	r3, [r7, #11]
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800d5c2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d5ca:	893b      	ldrh	r3, [r7, #8]
 800d5cc:	9300      	str	r3, [sp, #0]
 800d5ce:	460b      	mov	r3, r1
 800d5d0:	2100      	movs	r1, #0
 800d5d2:	68f8      	ldr	r0, [r7, #12]
 800d5d4:	f000 f816 	bl	800d604 <USBH_GetDescriptor>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800d5dc:	7dfb      	ldrb	r3, [r7, #23]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d107      	bne.n	800d5f2 <USBH_Get_StringDesc+0x72>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d5e8:	893a      	ldrh	r2, [r7, #8]
 800d5ea:	6879      	ldr	r1, [r7, #4]
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f000 fb92 	bl	800dd16 <USBH_ParseStringDesc>
  }

  return status;
 800d5f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3718      	adds	r7, #24
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}
 800d5fc:	08010608 	.word	0x08010608
 800d600:	080106a0 	.word	0x080106a0

0800d604 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b084      	sub	sp, #16
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	607b      	str	r3, [r7, #4]
 800d60e:	460b      	mov	r3, r1
 800d610:	72fb      	strb	r3, [r7, #11]
 800d612:	4613      	mov	r3, r2
 800d614:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	789b      	ldrb	r3, [r3, #2]
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	d11c      	bne.n	800d658 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d61e:	7afb      	ldrb	r3, [r7, #11]
 800d620:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d624:	b2da      	uxtb	r2, r3
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2206      	movs	r2, #6
 800d62e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	893a      	ldrh	r2, [r7, #8]
 800d634:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d636:	893b      	ldrh	r3, [r7, #8]
 800d638:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d63c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d640:	d104      	bne.n	800d64c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	f240 4209 	movw	r2, #1033	@ 0x409
 800d648:	829a      	strh	r2, [r3, #20]
 800d64a:	e002      	b.n	800d652 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2200      	movs	r2, #0
 800d650:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	8b3a      	ldrh	r2, [r7, #24]
 800d656:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d658:	8b3b      	ldrh	r3, [r7, #24]
 800d65a:	461a      	mov	r2, r3
 800d65c:	6879      	ldr	r1, [r7, #4]
 800d65e:	68f8      	ldr	r0, [r7, #12]
 800d660:	f000 fba6 	bl	800ddb0 <USBH_CtlReq>
 800d664:	4603      	mov	r3, r0
}
 800d666:	4618      	mov	r0, r3
 800d668:	3710      	adds	r7, #16
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}

0800d66e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d66e:	b580      	push	{r7, lr}
 800d670:	b082      	sub	sp, #8
 800d672:	af00      	add	r7, sp, #0
 800d674:	6078      	str	r0, [r7, #4]
 800d676:	460b      	mov	r3, r1
 800d678:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	789b      	ldrb	r3, [r3, #2]
 800d67e:	2b01      	cmp	r3, #1
 800d680:	d10f      	bne.n	800d6a2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2205      	movs	r2, #5
 800d68c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d68e:	78fb      	ldrb	r3, [r7, #3]
 800d690:	b29a      	uxth	r2, r3
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2200      	movs	r2, #0
 800d69a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	2100      	movs	r1, #0
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 fb82 	bl	800ddb0 <USBH_CtlReq>
 800d6ac:	4603      	mov	r3, r0
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3708      	adds	r7, #8
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}

0800d6b6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b082      	sub	sp, #8
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	6078      	str	r0, [r7, #4]
 800d6be:	460b      	mov	r3, r1
 800d6c0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	789b      	ldrb	r3, [r3, #2]
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	d10e      	bne.n	800d6e8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2209      	movs	r2, #9
 800d6d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	887a      	ldrh	r2, [r7, #2]
 800d6da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f000 fb5f 	bl	800ddb0 <USBH_CtlReq>
 800d6f2:	4603      	mov	r3, r0
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3708      	adds	r7, #8
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b082      	sub	sp, #8
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	460b      	mov	r3, r1
 800d706:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	789b      	ldrb	r3, [r3, #2]
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	d10f      	bne.n	800d730 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2200      	movs	r2, #0
 800d714:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2203      	movs	r2, #3
 800d71a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d71c:	78fb      	ldrb	r3, [r7, #3]
 800d71e:	b29a      	uxth	r2, r3
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2200      	movs	r2, #0
 800d728:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2200      	movs	r2, #0
 800d72e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d730:	2200      	movs	r2, #0
 800d732:	2100      	movs	r1, #0
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f000 fb3b 	bl	800ddb0 <USBH_CtlReq>
 800d73a:	4603      	mov	r3, r0
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3708      	adds	r7, #8
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}

0800d744 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	460b      	mov	r3, r1
 800d74e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	789b      	ldrb	r3, [r3, #2]
 800d754:	2b01      	cmp	r3, #1
 800d756:	d10f      	bne.n	800d778 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2202      	movs	r2, #2
 800d75c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2201      	movs	r2, #1
 800d762:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2200      	movs	r2, #0
 800d768:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d76a:	78fb      	ldrb	r3, [r7, #3]
 800d76c:	b29a      	uxth	r2, r3
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2200      	movs	r2, #0
 800d776:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d778:	2200      	movs	r2, #0
 800d77a:	2100      	movs	r1, #0
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f000 fb17 	bl	800ddb0 <USBH_CtlReq>
 800d782:	4603      	mov	r3, r0
}
 800d784:	4618      	mov	r0, r3
 800d786:	3708      	adds	r7, #8
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}

0800d78c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b087      	sub	sp, #28
 800d790:	af00      	add	r7, sp, #0
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	4613      	mov	r3, r2
 800d798:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f603 43de 	addw	r3, r3, #3294	@ 0xcde
 800d7a0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d101      	bne.n	800d7b0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800d7ac:	2302      	movs	r3, #2
 800d7ae:	e094      	b.n	800d8da <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	781a      	ldrb	r2, [r3, #0]
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	785a      	ldrb	r2, [r3, #1]
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	3302      	adds	r3, #2
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	3303      	adds	r3, #3
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	021b      	lsls	r3, r3, #8
 800d7d0:	b29b      	uxth	r3, r3
 800d7d2:	4313      	orrs	r3, r2
 800d7d4:	b29a      	uxth	r2, r3
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	791a      	ldrb	r2, [r3, #4]
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	795a      	ldrb	r2, [r3, #5]
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	799a      	ldrb	r2, [r3, #6]
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	79da      	ldrb	r2, [r3, #7]
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800d800:	2b00      	cmp	r3, #0
 800d802:	d004      	beq.n	800d80e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d80a:	2b01      	cmp	r3, #1
 800d80c:	d11b      	bne.n	800d846 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	79db      	ldrb	r3, [r3, #7]
 800d812:	2b20      	cmp	r3, #32
 800d814:	dc0f      	bgt.n	800d836 <USBH_ParseDevDesc+0xaa>
 800d816:	2b08      	cmp	r3, #8
 800d818:	db0f      	blt.n	800d83a <USBH_ParseDevDesc+0xae>
 800d81a:	3b08      	subs	r3, #8
 800d81c:	4a32      	ldr	r2, [pc, #200]	@ (800d8e8 <USBH_ParseDevDesc+0x15c>)
 800d81e:	fa22 f303 	lsr.w	r3, r2, r3
 800d822:	f003 0301 	and.w	r3, r3, #1
 800d826:	2b00      	cmp	r3, #0
 800d828:	bf14      	ite	ne
 800d82a:	2301      	movne	r3, #1
 800d82c:	2300      	moveq	r3, #0
 800d82e:	b2db      	uxtb	r3, r3
 800d830:	2b00      	cmp	r3, #0
 800d832:	d106      	bne.n	800d842 <USBH_ParseDevDesc+0xb6>
 800d834:	e001      	b.n	800d83a <USBH_ParseDevDesc+0xae>
 800d836:	2b40      	cmp	r3, #64	@ 0x40
 800d838:	d003      	beq.n	800d842 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	2208      	movs	r2, #8
 800d83e:	71da      	strb	r2, [r3, #7]
        break;
 800d840:	e000      	b.n	800d844 <USBH_ParseDevDesc+0xb8>
        break;
 800d842:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800d844:	e00e      	b.n	800d864 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800d84c:	2b02      	cmp	r3, #2
 800d84e:	d107      	bne.n	800d860 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	79db      	ldrb	r3, [r3, #7]
 800d854:	2b08      	cmp	r3, #8
 800d856:	d005      	beq.n	800d864 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	2208      	movs	r2, #8
 800d85c:	71da      	strb	r2, [r3, #7]
 800d85e:	e001      	b.n	800d864 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d860:	2303      	movs	r3, #3
 800d862:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800d864:	88fb      	ldrh	r3, [r7, #6]
 800d866:	2b08      	cmp	r3, #8
 800d868:	d936      	bls.n	800d8d8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	3308      	adds	r3, #8
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	461a      	mov	r2, r3
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	3309      	adds	r3, #9
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	021b      	lsls	r3, r3, #8
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	4313      	orrs	r3, r2
 800d87e:	b29a      	uxth	r2, r3
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	330a      	adds	r3, #10
 800d888:	781b      	ldrb	r3, [r3, #0]
 800d88a:	461a      	mov	r2, r3
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	330b      	adds	r3, #11
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	021b      	lsls	r3, r3, #8
 800d894:	b29b      	uxth	r3, r3
 800d896:	4313      	orrs	r3, r2
 800d898:	b29a      	uxth	r2, r3
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	330c      	adds	r3, #12
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	461a      	mov	r2, r3
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	330d      	adds	r3, #13
 800d8aa:	781b      	ldrb	r3, [r3, #0]
 800d8ac:	021b      	lsls	r3, r3, #8
 800d8ae:	b29b      	uxth	r3, r3
 800d8b0:	4313      	orrs	r3, r2
 800d8b2:	b29a      	uxth	r2, r3
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	7b9a      	ldrb	r2, [r3, #14]
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	7bda      	ldrb	r2, [r3, #15]
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	7c1a      	ldrb	r2, [r3, #16]
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	7c5a      	ldrb	r2, [r3, #17]
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800d8d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	371c      	adds	r7, #28
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e4:	4770      	bx	lr
 800d8e6:	bf00      	nop
 800d8e8:	01000101 	.word	0x01000101

0800d8ec <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b08c      	sub	sp, #48	@ 0x30
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	60f8      	str	r0, [r7, #12]
 800d8f4:	60b9      	str	r1, [r7, #8]
 800d8f6:	4613      	mov	r3, r2
 800d8f8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 800d900:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d902:	2300      	movs	r3, #0
 800d904:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d908:	2300      	movs	r3, #0
 800d90a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800d90e:	2300      	movs	r3, #0
 800d910:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d101      	bne.n	800d91e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800d91a:	2302      	movs	r3, #2
 800d91c:	e0da      	b.n	800dad4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800d922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d924:	781b      	ldrb	r3, [r3, #0]
 800d926:	2b09      	cmp	r3, #9
 800d928:	d002      	beq.n	800d930 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d92a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d92c:	2209      	movs	r2, #9
 800d92e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	781a      	ldrb	r2, [r3, #0]
 800d934:	6a3b      	ldr	r3, [r7, #32]
 800d936:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	785a      	ldrb	r2, [r3, #1]
 800d93c:	6a3b      	ldr	r3, [r7, #32]
 800d93e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	3302      	adds	r3, #2
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	461a      	mov	r2, r3
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	3303      	adds	r3, #3
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	021b      	lsls	r3, r3, #8
 800d950:	b29b      	uxth	r3, r3
 800d952:	4313      	orrs	r3, r2
 800d954:	b29b      	uxth	r3, r3
 800d956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d95a:	bf28      	it	cs
 800d95c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800d960:	b29a      	uxth	r2, r3
 800d962:	6a3b      	ldr	r3, [r7, #32]
 800d964:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	791a      	ldrb	r2, [r3, #4]
 800d96a:	6a3b      	ldr	r3, [r7, #32]
 800d96c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	795a      	ldrb	r2, [r3, #5]
 800d972:	6a3b      	ldr	r3, [r7, #32]
 800d974:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	799a      	ldrb	r2, [r3, #6]
 800d97a:	6a3b      	ldr	r3, [r7, #32]
 800d97c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	79da      	ldrb	r2, [r3, #7]
 800d982:	6a3b      	ldr	r3, [r7, #32]
 800d984:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	7a1a      	ldrb	r2, [r3, #8]
 800d98a:	6a3b      	ldr	r3, [r7, #32]
 800d98c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d98e:	88fb      	ldrh	r3, [r7, #6]
 800d990:	2b09      	cmp	r3, #9
 800d992:	f240 809d 	bls.w	800dad0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800d996:	2309      	movs	r3, #9
 800d998:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d99a:	2300      	movs	r3, #0
 800d99c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d99e:	e081      	b.n	800daa4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d9a0:	f107 0316 	add.w	r3, r7, #22
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9a8:	f000 f9e8 	bl	800dd7c <USBH_GetNextDesc>
 800d9ac:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9b0:	785b      	ldrb	r3, [r3, #1]
 800d9b2:	2b04      	cmp	r3, #4
 800d9b4:	d176      	bne.n	800daa4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d9b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9b8:	781b      	ldrb	r3, [r3, #0]
 800d9ba:	2b09      	cmp	r3, #9
 800d9bc:	d002      	beq.n	800d9c4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9c0:	2209      	movs	r2, #9
 800d9c2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d9c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d9c8:	221a      	movs	r2, #26
 800d9ca:	fb02 f303 	mul.w	r3, r2, r3
 800d9ce:	3308      	adds	r3, #8
 800d9d0:	6a3a      	ldr	r2, [r7, #32]
 800d9d2:	4413      	add	r3, r2
 800d9d4:	3302      	adds	r3, #2
 800d9d6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d9d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d9da:	69f8      	ldr	r0, [r7, #28]
 800d9dc:	f000 f87e 	bl	800dadc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d9ea:	e043      	b.n	800da74 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d9ec:	f107 0316 	add.w	r3, r7, #22
 800d9f0:	4619      	mov	r1, r3
 800d9f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9f4:	f000 f9c2 	bl	800dd7c <USBH_GetNextDesc>
 800d9f8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9fc:	785b      	ldrb	r3, [r3, #1]
 800d9fe:	2b05      	cmp	r3, #5
 800da00:	d138      	bne.n	800da74 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800da02:	69fb      	ldr	r3, [r7, #28]
 800da04:	795b      	ldrb	r3, [r3, #5]
 800da06:	2b01      	cmp	r3, #1
 800da08:	d113      	bne.n	800da32 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800da0a:	69fb      	ldr	r3, [r7, #28]
 800da0c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800da0e:	2b02      	cmp	r3, #2
 800da10:	d003      	beq.n	800da1a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800da12:	69fb      	ldr	r3, [r7, #28]
 800da14:	799b      	ldrb	r3, [r3, #6]
 800da16:	2b03      	cmp	r3, #3
 800da18:	d10b      	bne.n	800da32 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800da1a:	69fb      	ldr	r3, [r7, #28]
 800da1c:	79db      	ldrb	r3, [r3, #7]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d10b      	bne.n	800da3a <USBH_ParseCfgDesc+0x14e>
 800da22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	2b09      	cmp	r3, #9
 800da28:	d007      	beq.n	800da3a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800da2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da2c:	2209      	movs	r2, #9
 800da2e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800da30:	e003      	b.n	800da3a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800da32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da34:	2207      	movs	r2, #7
 800da36:	701a      	strb	r2, [r3, #0]
 800da38:	e000      	b.n	800da3c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800da3a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800da3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da40:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800da44:	3201      	adds	r2, #1
 800da46:	00d2      	lsls	r2, r2, #3
 800da48:	211a      	movs	r1, #26
 800da4a:	fb01 f303 	mul.w	r3, r1, r3
 800da4e:	4413      	add	r3, r2
 800da50:	3308      	adds	r3, #8
 800da52:	6a3a      	ldr	r2, [r7, #32]
 800da54:	4413      	add	r3, r2
 800da56:	3304      	adds	r3, #4
 800da58:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800da5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da5c:	69b9      	ldr	r1, [r7, #24]
 800da5e:	68f8      	ldr	r0, [r7, #12]
 800da60:	f000 f870 	bl	800db44 <USBH_ParseEPDesc>
 800da64:	4603      	mov	r3, r0
 800da66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800da6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800da6e:	3301      	adds	r3, #1
 800da70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800da74:	69fb      	ldr	r3, [r7, #28]
 800da76:	791b      	ldrb	r3, [r3, #4]
 800da78:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d204      	bcs.n	800da8a <USBH_ParseCfgDesc+0x19e>
 800da80:	6a3b      	ldr	r3, [r7, #32]
 800da82:	885a      	ldrh	r2, [r3, #2]
 800da84:	8afb      	ldrh	r3, [r7, #22]
 800da86:	429a      	cmp	r2, r3
 800da88:	d8b0      	bhi.n	800d9ec <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800da8a:	69fb      	ldr	r3, [r7, #28]
 800da8c:	791b      	ldrb	r3, [r3, #4]
 800da8e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800da92:	429a      	cmp	r2, r3
 800da94:	d201      	bcs.n	800da9a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800da96:	2303      	movs	r3, #3
 800da98:	e01c      	b.n	800dad4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800da9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da9e:	3301      	adds	r3, #1
 800daa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800daa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d805      	bhi.n	800dab8 <USBH_ParseCfgDesc+0x1cc>
 800daac:	6a3b      	ldr	r3, [r7, #32]
 800daae:	885a      	ldrh	r2, [r3, #2]
 800dab0:	8afb      	ldrh	r3, [r7, #22]
 800dab2:	429a      	cmp	r2, r3
 800dab4:	f63f af74 	bhi.w	800d9a0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800dab8:	6a3b      	ldr	r3, [r7, #32]
 800daba:	791b      	ldrb	r3, [r3, #4]
 800dabc:	2b02      	cmp	r3, #2
 800dabe:	bf28      	it	cs
 800dac0:	2302      	movcs	r3, #2
 800dac2:	b2db      	uxtb	r3, r3
 800dac4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800dac8:	429a      	cmp	r2, r3
 800daca:	d201      	bcs.n	800dad0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800dacc:	2303      	movs	r3, #3
 800dace:	e001      	b.n	800dad4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800dad0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3730      	adds	r7, #48	@ 0x30
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800dadc:	b480      	push	{r7}
 800dade:	b083      	sub	sp, #12
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	781a      	ldrb	r2, [r3, #0]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	785a      	ldrb	r2, [r3, #1]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	789a      	ldrb	r2, [r3, #2]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	78da      	ldrb	r2, [r3, #3]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	3304      	adds	r3, #4
 800db0a:	781b      	ldrb	r3, [r3, #0]
 800db0c:	2b02      	cmp	r3, #2
 800db0e:	bf28      	it	cs
 800db10:	2302      	movcs	r3, #2
 800db12:	b2da      	uxtb	r2, r3
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	795a      	ldrb	r2, [r3, #5]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	799a      	ldrb	r2, [r3, #6]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	79da      	ldrb	r2, [r3, #7]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	7a1a      	ldrb	r2, [r3, #8]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	721a      	strb	r2, [r3, #8]
}
 800db38:	bf00      	nop
 800db3a:	370c      	adds	r7, #12
 800db3c:	46bd      	mov	sp, r7
 800db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db42:	4770      	bx	lr

0800db44 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800db44:	b480      	push	{r7}
 800db46:	b087      	sub	sp, #28
 800db48:	af00      	add	r7, sp, #0
 800db4a:	60f8      	str	r0, [r7, #12]
 800db4c:	60b9      	str	r1, [r7, #8]
 800db4e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800db50:	2300      	movs	r3, #0
 800db52:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	781a      	ldrb	r2, [r3, #0]
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	785a      	ldrb	r2, [r3, #1]
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	789a      	ldrb	r2, [r3, #2]
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	78da      	ldrb	r2, [r3, #3]
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	3304      	adds	r3, #4
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	461a      	mov	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	3305      	adds	r3, #5
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	021b      	lsls	r3, r3, #8
 800db84:	b29b      	uxth	r3, r3
 800db86:	4313      	orrs	r3, r2
 800db88:	b29a      	uxth	r2, r3
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	799a      	ldrb	r2, [r3, #6]
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	889b      	ldrh	r3, [r3, #4]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d00a      	beq.n	800dbb4 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800dba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dba6:	d805      	bhi.n	800dbb4 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800dbac:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d901      	bls.n	800dbb8 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800dbb4:	2303      	movs	r3, #3
 800dbb6:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d136      	bne.n	800dc30 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	78db      	ldrb	r3, [r3, #3]
 800dbc6:	f003 0303 	and.w	r3, r3, #3
 800dbca:	2b02      	cmp	r3, #2
 800dbcc:	d108      	bne.n	800dbe0 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	889b      	ldrh	r3, [r3, #4]
 800dbd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dbd6:	f240 8097 	bls.w	800dd08 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800dbda:	2303      	movs	r3, #3
 800dbdc:	75fb      	strb	r3, [r7, #23]
 800dbde:	e093      	b.n	800dd08 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	78db      	ldrb	r3, [r3, #3]
 800dbe4:	f003 0303 	and.w	r3, r3, #3
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d107      	bne.n	800dbfc <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	889b      	ldrh	r3, [r3, #4]
 800dbf0:	2b40      	cmp	r3, #64	@ 0x40
 800dbf2:	f240 8089 	bls.w	800dd08 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800dbf6:	2303      	movs	r3, #3
 800dbf8:	75fb      	strb	r3, [r7, #23]
 800dbfa:	e085      	b.n	800dd08 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	78db      	ldrb	r3, [r3, #3]
 800dc00:	f003 0303 	and.w	r3, r3, #3
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d005      	beq.n	800dc14 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	78db      	ldrb	r3, [r3, #3]
 800dc0c:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800dc10:	2b03      	cmp	r3, #3
 800dc12:	d10a      	bne.n	800dc2a <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	799b      	ldrb	r3, [r3, #6]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d003      	beq.n	800dc24 <USBH_ParseEPDesc+0xe0>
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	799b      	ldrb	r3, [r3, #6]
 800dc20:	2b10      	cmp	r3, #16
 800dc22:	d970      	bls.n	800dd06 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dc24:	2303      	movs	r3, #3
 800dc26:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800dc28:	e06d      	b.n	800dd06 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800dc2a:	2303      	movs	r3, #3
 800dc2c:	75fb      	strb	r3, [r7, #23]
 800dc2e:	e06b      	b.n	800dd08 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	d13c      	bne.n	800dcb4 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	78db      	ldrb	r3, [r3, #3]
 800dc3e:	f003 0303 	and.w	r3, r3, #3
 800dc42:	2b02      	cmp	r3, #2
 800dc44:	d005      	beq.n	800dc52 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	78db      	ldrb	r3, [r3, #3]
 800dc4a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d106      	bne.n	800dc60 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	889b      	ldrh	r3, [r3, #4]
 800dc56:	2b40      	cmp	r3, #64	@ 0x40
 800dc58:	d956      	bls.n	800dd08 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800dc5a:	2303      	movs	r3, #3
 800dc5c:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800dc5e:	e053      	b.n	800dd08 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	78db      	ldrb	r3, [r3, #3]
 800dc64:	f003 0303 	and.w	r3, r3, #3
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d10e      	bne.n	800dc8a <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	799b      	ldrb	r3, [r3, #6]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d007      	beq.n	800dc84 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800dc78:	2b10      	cmp	r3, #16
 800dc7a:	d803      	bhi.n	800dc84 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800dc80:	2b40      	cmp	r3, #64	@ 0x40
 800dc82:	d941      	bls.n	800dd08 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800dc84:	2303      	movs	r3, #3
 800dc86:	75fb      	strb	r3, [r7, #23]
 800dc88:	e03e      	b.n	800dd08 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	78db      	ldrb	r3, [r3, #3]
 800dc8e:	f003 0303 	and.w	r3, r3, #3
 800dc92:	2b03      	cmp	r3, #3
 800dc94:	d10b      	bne.n	800dcae <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	799b      	ldrb	r3, [r3, #6]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d004      	beq.n	800dca8 <USBH_ParseEPDesc+0x164>
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	889b      	ldrh	r3, [r3, #4]
 800dca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dca6:	d32f      	bcc.n	800dd08 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800dca8:	2303      	movs	r3, #3
 800dcaa:	75fb      	strb	r3, [r7, #23]
 800dcac:	e02c      	b.n	800dd08 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800dcae:	2303      	movs	r3, #3
 800dcb0:	75fb      	strb	r3, [r7, #23]
 800dcb2:	e029      	b.n	800dd08 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800dcba:	2b02      	cmp	r3, #2
 800dcbc:	d120      	bne.n	800dd00 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	78db      	ldrb	r3, [r3, #3]
 800dcc2:	f003 0303 	and.w	r3, r3, #3
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d106      	bne.n	800dcd8 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	889b      	ldrh	r3, [r3, #4]
 800dcce:	2b08      	cmp	r3, #8
 800dcd0:	d01a      	beq.n	800dd08 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800dcd2:	2303      	movs	r3, #3
 800dcd4:	75fb      	strb	r3, [r7, #23]
 800dcd6:	e017      	b.n	800dd08 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	78db      	ldrb	r3, [r3, #3]
 800dcdc:	f003 0303 	and.w	r3, r3, #3
 800dce0:	2b03      	cmp	r3, #3
 800dce2:	d10a      	bne.n	800dcfa <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	799b      	ldrb	r3, [r3, #6]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d003      	beq.n	800dcf4 <USBH_ParseEPDesc+0x1b0>
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	889b      	ldrh	r3, [r3, #4]
 800dcf0:	2b08      	cmp	r3, #8
 800dcf2:	d909      	bls.n	800dd08 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800dcf4:	2303      	movs	r3, #3
 800dcf6:	75fb      	strb	r3, [r7, #23]
 800dcf8:	e006      	b.n	800dd08 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800dcfa:	2303      	movs	r3, #3
 800dcfc:	75fb      	strb	r3, [r7, #23]
 800dcfe:	e003      	b.n	800dd08 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800dd00:	2303      	movs	r3, #3
 800dd02:	75fb      	strb	r3, [r7, #23]
 800dd04:	e000      	b.n	800dd08 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800dd06:	bf00      	nop
  }

  return status;
 800dd08:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	371c      	adds	r7, #28
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd14:	4770      	bx	lr

0800dd16 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800dd16:	b480      	push	{r7}
 800dd18:	b087      	sub	sp, #28
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	60f8      	str	r0, [r7, #12]
 800dd1e:	60b9      	str	r1, [r7, #8]
 800dd20:	4613      	mov	r3, r2
 800dd22:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	3301      	adds	r3, #1
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	2b03      	cmp	r3, #3
 800dd2c:	d120      	bne.n	800dd70 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	1e9a      	subs	r2, r3, #2
 800dd34:	88fb      	ldrh	r3, [r7, #6]
 800dd36:	4293      	cmp	r3, r2
 800dd38:	bf28      	it	cs
 800dd3a:	4613      	movcs	r3, r2
 800dd3c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	3302      	adds	r3, #2
 800dd42:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800dd44:	2300      	movs	r3, #0
 800dd46:	82fb      	strh	r3, [r7, #22]
 800dd48:	e00b      	b.n	800dd62 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800dd4a:	8afb      	ldrh	r3, [r7, #22]
 800dd4c:	68fa      	ldr	r2, [r7, #12]
 800dd4e:	4413      	add	r3, r2
 800dd50:	781a      	ldrb	r2, [r3, #0]
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	701a      	strb	r2, [r3, #0]
      pdest++;
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	3301      	adds	r3, #1
 800dd5a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800dd5c:	8afb      	ldrh	r3, [r7, #22]
 800dd5e:	3302      	adds	r3, #2
 800dd60:	82fb      	strh	r3, [r7, #22]
 800dd62:	8afa      	ldrh	r2, [r7, #22]
 800dd64:	8abb      	ldrh	r3, [r7, #20]
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d3ef      	bcc.n	800dd4a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	701a      	strb	r2, [r3, #0]
  }
}
 800dd70:	bf00      	nop
 800dd72:	371c      	adds	r7, #28
 800dd74:	46bd      	mov	sp, r7
 800dd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7a:	4770      	bx	lr

0800dd7c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	b085      	sub	sp, #20
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	881b      	ldrh	r3, [r3, #0]
 800dd8a:	687a      	ldr	r2, [r7, #4]
 800dd8c:	7812      	ldrb	r2, [r2, #0]
 800dd8e:	4413      	add	r3, r2
 800dd90:	b29a      	uxth	r2, r3
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	4413      	add	r3, r2
 800dda0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dda2:	68fb      	ldr	r3, [r7, #12]
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3714      	adds	r7, #20
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b086      	sub	sp, #24
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	60f8      	str	r0, [r7, #12]
 800ddb8:	60b9      	str	r1, [r7, #8]
 800ddba:	4613      	mov	r3, r2
 800ddbc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	789b      	ldrb	r3, [r3, #2]
 800ddc6:	2b01      	cmp	r3, #1
 800ddc8:	d002      	beq.n	800ddd0 <USBH_CtlReq+0x20>
 800ddca:	2b02      	cmp	r3, #2
 800ddcc:	d00f      	beq.n	800ddee <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ddce:	e027      	b.n	800de20 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	68ba      	ldr	r2, [r7, #8]
 800ddd4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	88fa      	ldrh	r2, [r7, #6]
 800ddda:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	2201      	movs	r2, #1
 800dde0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	2202      	movs	r2, #2
 800dde6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800dde8:	2301      	movs	r3, #1
 800ddea:	75fb      	strb	r3, [r7, #23]
      break;
 800ddec:	e018      	b.n	800de20 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ddee:	68f8      	ldr	r0, [r7, #12]
 800ddf0:	f000 f81c 	bl	800de2c <USBH_HandleControl>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ddf8:	7dfb      	ldrb	r3, [r7, #23]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d002      	beq.n	800de04 <USBH_CtlReq+0x54>
 800ddfe:	7dfb      	ldrb	r3, [r7, #23]
 800de00:	2b03      	cmp	r3, #3
 800de02:	d106      	bne.n	800de12 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	2201      	movs	r2, #1
 800de08:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	2200      	movs	r2, #0
 800de0e:	761a      	strb	r2, [r3, #24]
      break;
 800de10:	e005      	b.n	800de1e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800de12:	7dfb      	ldrb	r3, [r7, #23]
 800de14:	2b02      	cmp	r3, #2
 800de16:	d102      	bne.n	800de1e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2201      	movs	r2, #1
 800de1c:	709a      	strb	r2, [r3, #2]
      break;
 800de1e:	bf00      	nop
  }
  return status;
 800de20:	7dfb      	ldrb	r3, [r7, #23]
}
 800de22:	4618      	mov	r0, r3
 800de24:	3718      	adds	r7, #24
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
	...

0800de2c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b086      	sub	sp, #24
 800de30:	af02      	add	r7, sp, #8
 800de32:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800de34:	2301      	movs	r3, #1
 800de36:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800de38:	2300      	movs	r3, #0
 800de3a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	7e1b      	ldrb	r3, [r3, #24]
 800de40:	3b01      	subs	r3, #1
 800de42:	2b0a      	cmp	r3, #10
 800de44:	f200 815f 	bhi.w	800e106 <USBH_HandleControl+0x2da>
 800de48:	a201      	add	r2, pc, #4	@ (adr r2, 800de50 <USBH_HandleControl+0x24>)
 800de4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de4e:	bf00      	nop
 800de50:	0800de7d 	.word	0x0800de7d
 800de54:	0800de97 	.word	0x0800de97
 800de58:	0800df01 	.word	0x0800df01
 800de5c:	0800df27 	.word	0x0800df27
 800de60:	0800df5f 	.word	0x0800df5f
 800de64:	0800df89 	.word	0x0800df89
 800de68:	0800dfdb 	.word	0x0800dfdb
 800de6c:	0800dffd 	.word	0x0800dffd
 800de70:	0800e039 	.word	0x0800e039
 800de74:	0800e05f 	.word	0x0800e05f
 800de78:	0800e09d 	.word	0x0800e09d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f103 0110 	add.w	r1, r3, #16
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	795b      	ldrb	r3, [r3, #5]
 800de86:	461a      	mov	r2, r3
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f000 f951 	bl	800e130 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2202      	movs	r2, #2
 800de92:	761a      	strb	r2, [r3, #24]
      break;
 800de94:	e142      	b.n	800e11c <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	795b      	ldrb	r3, [r3, #5]
 800de9a:	4619      	mov	r1, r3
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f000 fcb3 	bl	800e808 <USBH_LL_GetURBState>
 800dea2:	4603      	mov	r3, r0
 800dea4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800dea6:	7bbb      	ldrb	r3, [r7, #14]
 800dea8:	2b01      	cmp	r3, #1
 800deaa:	d11e      	bne.n	800deea <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	7c1b      	ldrb	r3, [r3, #16]
 800deb0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800deb4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	8adb      	ldrh	r3, [r3, #22]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d00a      	beq.n	800ded4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800debe:	7b7b      	ldrb	r3, [r7, #13]
 800dec0:	2b80      	cmp	r3, #128	@ 0x80
 800dec2:	d103      	bne.n	800decc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2203      	movs	r2, #3
 800dec8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800deca:	e11e      	b.n	800e10a <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2205      	movs	r2, #5
 800ded0:	761a      	strb	r2, [r3, #24]
      break;
 800ded2:	e11a      	b.n	800e10a <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 800ded4:	7b7b      	ldrb	r3, [r7, #13]
 800ded6:	2b80      	cmp	r3, #128	@ 0x80
 800ded8:	d103      	bne.n	800dee2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2209      	movs	r2, #9
 800dede:	761a      	strb	r2, [r3, #24]
      break;
 800dee0:	e113      	b.n	800e10a <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2207      	movs	r2, #7
 800dee6:	761a      	strb	r2, [r3, #24]
      break;
 800dee8:	e10f      	b.n	800e10a <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800deea:	7bbb      	ldrb	r3, [r7, #14]
 800deec:	2b04      	cmp	r3, #4
 800deee:	d003      	beq.n	800def8 <USBH_HandleControl+0xcc>
 800def0:	7bbb      	ldrb	r3, [r7, #14]
 800def2:	2b02      	cmp	r3, #2
 800def4:	f040 8109 	bne.w	800e10a <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	220b      	movs	r2, #11
 800defc:	761a      	strb	r2, [r3, #24]
      break;
 800defe:	e104      	b.n	800e10a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 800df06:	b29a      	uxth	r2, r3
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6899      	ldr	r1, [r3, #8]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	899a      	ldrh	r2, [r3, #12]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	791b      	ldrb	r3, [r3, #4]
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f000 f948 	bl	800e1ae <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2204      	movs	r2, #4
 800df22:	761a      	strb	r2, [r3, #24]
      break;
 800df24:	e0fa      	b.n	800e11c <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	791b      	ldrb	r3, [r3, #4]
 800df2a:	4619      	mov	r1, r3
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f000 fc6b 	bl	800e808 <USBH_LL_GetURBState>
 800df32:	4603      	mov	r3, r0
 800df34:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800df36:	7bbb      	ldrb	r3, [r7, #14]
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d102      	bne.n	800df42 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2209      	movs	r2, #9
 800df40:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800df42:	7bbb      	ldrb	r3, [r7, #14]
 800df44:	2b05      	cmp	r3, #5
 800df46:	d102      	bne.n	800df4e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800df48:	2303      	movs	r3, #3
 800df4a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800df4c:	e0df      	b.n	800e10e <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800df4e:	7bbb      	ldrb	r3, [r7, #14]
 800df50:	2b04      	cmp	r3, #4
 800df52:	f040 80dc 	bne.w	800e10e <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	220b      	movs	r2, #11
 800df5a:	761a      	strb	r2, [r3, #24]
      break;
 800df5c:	e0d7      	b.n	800e10e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6899      	ldr	r1, [r3, #8]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	899a      	ldrh	r2, [r3, #12]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	795b      	ldrb	r3, [r3, #5]
 800df6a:	2001      	movs	r0, #1
 800df6c:	9000      	str	r0, [sp, #0]
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f000 f8f8 	bl	800e164 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 800df7a:	b29a      	uxth	r2, r3
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2206      	movs	r2, #6
 800df84:	761a      	strb	r2, [r3, #24]
      break;
 800df86:	e0c9      	b.n	800e11c <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	795b      	ldrb	r3, [r3, #5]
 800df8c:	4619      	mov	r1, r3
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f000 fc3a 	bl	800e808 <USBH_LL_GetURBState>
 800df94:	4603      	mov	r3, r0
 800df96:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800df98:	7bbb      	ldrb	r3, [r7, #14]
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d103      	bne.n	800dfa6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2207      	movs	r2, #7
 800dfa2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dfa4:	e0b5      	b.n	800e112 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 800dfa6:	7bbb      	ldrb	r3, [r7, #14]
 800dfa8:	2b05      	cmp	r3, #5
 800dfaa:	d105      	bne.n	800dfb8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	220c      	movs	r2, #12
 800dfb0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800dfb2:	2303      	movs	r3, #3
 800dfb4:	73fb      	strb	r3, [r7, #15]
      break;
 800dfb6:	e0ac      	b.n	800e112 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dfb8:	7bbb      	ldrb	r3, [r7, #14]
 800dfba:	2b02      	cmp	r3, #2
 800dfbc:	d103      	bne.n	800dfc6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2205      	movs	r2, #5
 800dfc2:	761a      	strb	r2, [r3, #24]
      break;
 800dfc4:	e0a5      	b.n	800e112 <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 800dfc6:	7bbb      	ldrb	r3, [r7, #14]
 800dfc8:	2b04      	cmp	r3, #4
 800dfca:	f040 80a2 	bne.w	800e112 <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	220b      	movs	r2, #11
 800dfd2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800dfd4:	2302      	movs	r3, #2
 800dfd6:	73fb      	strb	r3, [r7, #15]
      break;
 800dfd8:	e09b      	b.n	800e112 <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	791b      	ldrb	r3, [r3, #4]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	2100      	movs	r1, #0
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f000 f8e3 	bl	800e1ae <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 800dfee:	b29a      	uxth	r2, r3
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2208      	movs	r2, #8
 800dff8:	761a      	strb	r2, [r3, #24]

      break;
 800dffa:	e08f      	b.n	800e11c <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	791b      	ldrb	r3, [r3, #4]
 800e000:	4619      	mov	r1, r3
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 fc00 	bl	800e808 <USBH_LL_GetURBState>
 800e008:	4603      	mov	r3, r0
 800e00a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e00c:	7bbb      	ldrb	r3, [r7, #14]
 800e00e:	2b01      	cmp	r3, #1
 800e010:	d105      	bne.n	800e01e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	220d      	movs	r2, #13
 800e016:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e018:	2300      	movs	r3, #0
 800e01a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e01c:	e07b      	b.n	800e116 <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 800e01e:	7bbb      	ldrb	r3, [r7, #14]
 800e020:	2b04      	cmp	r3, #4
 800e022:	d103      	bne.n	800e02c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	220b      	movs	r2, #11
 800e028:	761a      	strb	r2, [r3, #24]
      break;
 800e02a:	e074      	b.n	800e116 <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 800e02c:	7bbb      	ldrb	r3, [r7, #14]
 800e02e:	2b05      	cmp	r3, #5
 800e030:	d171      	bne.n	800e116 <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 800e032:	2303      	movs	r3, #3
 800e034:	73fb      	strb	r3, [r7, #15]
      break;
 800e036:	e06e      	b.n	800e116 <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	795b      	ldrb	r3, [r3, #5]
 800e03c:	2201      	movs	r2, #1
 800e03e:	9200      	str	r2, [sp, #0]
 800e040:	2200      	movs	r2, #0
 800e042:	2100      	movs	r1, #0
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f000 f88d 	bl	800e164 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 800e050:	b29a      	uxth	r2, r3
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	220a      	movs	r2, #10
 800e05a:	761a      	strb	r2, [r3, #24]
      break;
 800e05c:	e05e      	b.n	800e11c <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	795b      	ldrb	r3, [r3, #5]
 800e062:	4619      	mov	r1, r3
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f000 fbcf 	bl	800e808 <USBH_LL_GetURBState>
 800e06a:	4603      	mov	r3, r0
 800e06c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e06e:	7bbb      	ldrb	r3, [r7, #14]
 800e070:	2b01      	cmp	r3, #1
 800e072:	d105      	bne.n	800e080 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e074:	2300      	movs	r3, #0
 800e076:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	220d      	movs	r2, #13
 800e07c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e07e:	e04c      	b.n	800e11a <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e080:	7bbb      	ldrb	r3, [r7, #14]
 800e082:	2b02      	cmp	r3, #2
 800e084:	d103      	bne.n	800e08e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2209      	movs	r2, #9
 800e08a:	761a      	strb	r2, [r3, #24]
      break;
 800e08c:	e045      	b.n	800e11a <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800e08e:	7bbb      	ldrb	r3, [r7, #14]
 800e090:	2b04      	cmp	r3, #4
 800e092:	d142      	bne.n	800e11a <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	220b      	movs	r2, #11
 800e098:	761a      	strb	r2, [r3, #24]
      break;
 800e09a:	e03e      	b.n	800e11a <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	7e5b      	ldrb	r3, [r3, #25]
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	b2da      	uxtb	r2, r3
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	765a      	strb	r2, [r3, #25]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	7e5b      	ldrb	r3, [r3, #25]
 800e0ac:	2b02      	cmp	r3, #2
 800e0ae:	d806      	bhi.n	800e0be <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2201      	movs	r2, #1
 800e0ba:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e0bc:	e02e      	b.n	800e11c <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800e0c4:	2106      	movs	r1, #6
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800e0d0:	4815      	ldr	r0, [pc, #84]	@ (800e128 <USBH_HandleControl+0x2fc>)
 800e0d2:	f000 fe51 	bl	800ed78 <iprintf>
 800e0d6:	4815      	ldr	r0, [pc, #84]	@ (800e12c <USBH_HandleControl+0x300>)
 800e0d8:	f000 fe4e 	bl	800ed78 <iprintf>
 800e0dc:	200a      	movs	r0, #10
 800e0de:	f000 fe5d 	bl	800ed9c <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	795b      	ldrb	r3, [r3, #5]
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f000 f8ee 	bl	800e2ca <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	791b      	ldrb	r3, [r3, #4]
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f000 f8e8 	bl	800e2ca <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e100:	2302      	movs	r3, #2
 800e102:	73fb      	strb	r3, [r7, #15]
      break;
 800e104:	e00a      	b.n	800e11c <USBH_HandleControl+0x2f0>

    default:
      break;
 800e106:	bf00      	nop
 800e108:	e008      	b.n	800e11c <USBH_HandleControl+0x2f0>
      break;
 800e10a:	bf00      	nop
 800e10c:	e006      	b.n	800e11c <USBH_HandleControl+0x2f0>
      break;
 800e10e:	bf00      	nop
 800e110:	e004      	b.n	800e11c <USBH_HandleControl+0x2f0>
      break;
 800e112:	bf00      	nop
 800e114:	e002      	b.n	800e11c <USBH_HandleControl+0x2f0>
      break;
 800e116:	bf00      	nop
 800e118:	e000      	b.n	800e11c <USBH_HandleControl+0x2f0>
      break;
 800e11a:	bf00      	nop
  }

  return status;
 800e11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3710      	adds	r7, #16
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
 800e126:	bf00      	nop
 800e128:	08010608 	.word	0x08010608
 800e12c:	080106e4 	.word	0x080106e4

0800e130 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b088      	sub	sp, #32
 800e134:	af04      	add	r7, sp, #16
 800e136:	60f8      	str	r0, [r7, #12]
 800e138:	60b9      	str	r1, [r7, #8]
 800e13a:	4613      	mov	r3, r2
 800e13c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e13e:	79f9      	ldrb	r1, [r7, #7]
 800e140:	2300      	movs	r3, #0
 800e142:	9303      	str	r3, [sp, #12]
 800e144:	2308      	movs	r3, #8
 800e146:	9302      	str	r3, [sp, #8]
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	9301      	str	r3, [sp, #4]
 800e14c:	2300      	movs	r3, #0
 800e14e:	9300      	str	r3, [sp, #0]
 800e150:	2300      	movs	r3, #0
 800e152:	2200      	movs	r2, #0
 800e154:	68f8      	ldr	r0, [r7, #12]
 800e156:	f000 fb26 	bl	800e7a6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e15a:	2300      	movs	r3, #0
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3710      	adds	r7, #16
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b088      	sub	sp, #32
 800e168:	af04      	add	r7, sp, #16
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	4611      	mov	r1, r2
 800e170:	461a      	mov	r2, r3
 800e172:	460b      	mov	r3, r1
 800e174:	80fb      	strh	r3, [r7, #6]
 800e176:	4613      	mov	r3, r2
 800e178:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800e180:	2b00      	cmp	r3, #0
 800e182:	d001      	beq.n	800e188 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e184:	2300      	movs	r3, #0
 800e186:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e188:	7979      	ldrb	r1, [r7, #5]
 800e18a:	7e3b      	ldrb	r3, [r7, #24]
 800e18c:	9303      	str	r3, [sp, #12]
 800e18e:	88fb      	ldrh	r3, [r7, #6]
 800e190:	9302      	str	r3, [sp, #8]
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	9301      	str	r3, [sp, #4]
 800e196:	2301      	movs	r3, #1
 800e198:	9300      	str	r3, [sp, #0]
 800e19a:	2300      	movs	r3, #0
 800e19c:	2200      	movs	r2, #0
 800e19e:	68f8      	ldr	r0, [r7, #12]
 800e1a0:	f000 fb01 	bl	800e7a6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e1a4:	2300      	movs	r3, #0
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3710      	adds	r7, #16
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}

0800e1ae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e1ae:	b580      	push	{r7, lr}
 800e1b0:	b088      	sub	sp, #32
 800e1b2:	af04      	add	r7, sp, #16
 800e1b4:	60f8      	str	r0, [r7, #12]
 800e1b6:	60b9      	str	r1, [r7, #8]
 800e1b8:	4611      	mov	r1, r2
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	460b      	mov	r3, r1
 800e1be:	80fb      	strh	r3, [r7, #6]
 800e1c0:	4613      	mov	r3, r2
 800e1c2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e1c4:	7979      	ldrb	r1, [r7, #5]
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	9303      	str	r3, [sp, #12]
 800e1ca:	88fb      	ldrh	r3, [r7, #6]
 800e1cc:	9302      	str	r3, [sp, #8]
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	9301      	str	r3, [sp, #4]
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	9300      	str	r3, [sp, #0]
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	2201      	movs	r2, #1
 800e1da:	68f8      	ldr	r0, [r7, #12]
 800e1dc:	f000 fae3 	bl	800e7a6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e1e0:	2300      	movs	r3, #0

}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3710      	adds	r7, #16
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}

0800e1ea <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800e1ea:	b580      	push	{r7, lr}
 800e1ec:	b088      	sub	sp, #32
 800e1ee:	af04      	add	r7, sp, #16
 800e1f0:	60f8      	str	r0, [r7, #12]
 800e1f2:	60b9      	str	r1, [r7, #8]
 800e1f4:	4611      	mov	r1, r2
 800e1f6:	461a      	mov	r2, r3
 800e1f8:	460b      	mov	r3, r1
 800e1fa:	71fb      	strb	r3, [r7, #7]
 800e1fc:	4613      	mov	r3, r2
 800e1fe:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e200:	79fb      	ldrb	r3, [r7, #7]
 800e202:	b29b      	uxth	r3, r3
 800e204:	79b9      	ldrb	r1, [r7, #6]
 800e206:	2200      	movs	r2, #0
 800e208:	9203      	str	r2, [sp, #12]
 800e20a:	9302      	str	r3, [sp, #8]
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	9301      	str	r3, [sp, #4]
 800e210:	2301      	movs	r3, #1
 800e212:	9300      	str	r3, [sp, #0]
 800e214:	2303      	movs	r3, #3
 800e216:	2201      	movs	r2, #1
 800e218:	68f8      	ldr	r0, [r7, #12]
 800e21a:	f000 fac4 	bl	800e7a6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800e21e:	2300      	movs	r3, #0
}
 800e220:	4618      	mov	r0, r3
 800e222:	3710      	adds	r7, #16
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b086      	sub	sp, #24
 800e22c:	af04      	add	r7, sp, #16
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	4608      	mov	r0, r1
 800e232:	4611      	mov	r1, r2
 800e234:	461a      	mov	r2, r3
 800e236:	4603      	mov	r3, r0
 800e238:	70fb      	strb	r3, [r7, #3]
 800e23a:	460b      	mov	r3, r1
 800e23c:	70bb      	strb	r3, [r7, #2]
 800e23e:	4613      	mov	r3, r2
 800e240:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e242:	7878      	ldrb	r0, [r7, #1]
 800e244:	78ba      	ldrb	r2, [r7, #2]
 800e246:	78f9      	ldrb	r1, [r7, #3]
 800e248:	8b3b      	ldrh	r3, [r7, #24]
 800e24a:	9302      	str	r3, [sp, #8]
 800e24c:	7d3b      	ldrb	r3, [r7, #20]
 800e24e:	9301      	str	r3, [sp, #4]
 800e250:	7c3b      	ldrb	r3, [r7, #16]
 800e252:	9300      	str	r3, [sp, #0]
 800e254:	4603      	mov	r3, r0
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f000 fa57 	bl	800e70a <USBH_LL_OpenPipe>

  return USBH_OK;
 800e25c:	2300      	movs	r3, #0
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3708      	adds	r7, #8
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}

0800e266 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e266:	b580      	push	{r7, lr}
 800e268:	b082      	sub	sp, #8
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]
 800e26e:	460b      	mov	r3, r1
 800e270:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e272:	78fb      	ldrb	r3, [r7, #3]
 800e274:	4619      	mov	r1, r3
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 fa76 	bl	800e768 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e27c:	2300      	movs	r3, #0
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3708      	adds	r7, #8
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}

0800e286 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e286:	b580      	push	{r7, lr}
 800e288:	b084      	sub	sp, #16
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	6078      	str	r0, [r7, #4]
 800e28e:	460b      	mov	r3, r1
 800e290:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f000 f839 	bl	800e30a <USBH_GetFreePipe>
 800e298:	4603      	mov	r3, r0
 800e29a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e29c:	89fb      	ldrh	r3, [r7, #14]
 800e29e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d00b      	beq.n	800e2be <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e2a6:	78fa      	ldrb	r2, [r7, #3]
 800e2a8:	89fb      	ldrh	r3, [r7, #14]
 800e2aa:	f003 030f 	and.w	r3, r3, #15
 800e2ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e2b2:	6879      	ldr	r1, [r7, #4]
 800e2b4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e2b8:	009b      	lsls	r3, r3, #2
 800e2ba:	440b      	add	r3, r1
 800e2bc:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e2be:	89fb      	ldrh	r3, [r7, #14]
 800e2c0:	b2db      	uxtb	r3, r3
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3710      	adds	r7, #16
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}

0800e2ca <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e2ca:	b480      	push	{r7}
 800e2cc:	b083      	sub	sp, #12
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	6078      	str	r0, [r7, #4]
 800e2d2:	460b      	mov	r3, r1
 800e2d4:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e2d6:	78fb      	ldrb	r3, [r7, #3]
 800e2d8:	2b0f      	cmp	r3, #15
 800e2da:	d80f      	bhi.n	800e2fc <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e2dc:	78fb      	ldrb	r3, [r7, #3]
 800e2de:	687a      	ldr	r2, [r7, #4]
 800e2e0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e2e4:	009b      	lsls	r3, r3, #2
 800e2e6:	4413      	add	r3, r2
 800e2e8:	685a      	ldr	r2, [r3, #4]
 800e2ea:	78fb      	ldrb	r3, [r7, #3]
 800e2ec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e2f0:	6879      	ldr	r1, [r7, #4]
 800e2f2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e2f6:	009b      	lsls	r3, r3, #2
 800e2f8:	440b      	add	r3, r1
 800e2fa:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e2fc:	2300      	movs	r3, #0
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	370c      	adds	r7, #12
 800e302:	46bd      	mov	sp, r7
 800e304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e308:	4770      	bx	lr

0800e30a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e30a:	b480      	push	{r7}
 800e30c:	b085      	sub	sp, #20
 800e30e:	af00      	add	r7, sp, #0
 800e310:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e312:	2300      	movs	r3, #0
 800e314:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e316:	2300      	movs	r3, #0
 800e318:	73fb      	strb	r3, [r7, #15]
 800e31a:	e010      	b.n	800e33e <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e31c:	7bfb      	ldrb	r3, [r7, #15]
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	4413      	add	r3, r2
 800e328:	685b      	ldr	r3, [r3, #4]
 800e32a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d102      	bne.n	800e338 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800e332:	7bfb      	ldrb	r3, [r7, #15]
 800e334:	b29b      	uxth	r3, r3
 800e336:	e007      	b.n	800e348 <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e338:	7bfb      	ldrb	r3, [r7, #15]
 800e33a:	3301      	adds	r3, #1
 800e33c:	73fb      	strb	r3, [r7, #15]
 800e33e:	7bfb      	ldrb	r3, [r7, #15]
 800e340:	2b0f      	cmp	r3, #15
 800e342:	d9eb      	bls.n	800e31c <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e344:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3714      	adds	r7, #20
 800e34c:	46bd      	mov	sp, r7
 800e34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e352:	4770      	bx	lr

0800e354 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e358:	2201      	movs	r2, #1
 800e35a:	490e      	ldr	r1, [pc, #56]	@ (800e394 <MX_USB_HOST_Init+0x40>)
 800e35c:	480e      	ldr	r0, [pc, #56]	@ (800e398 <MX_USB_HOST_Init+0x44>)
 800e35e:	f7fe f933 	bl	800c5c8 <USBH_Init>
 800e362:	4603      	mov	r3, r0
 800e364:	2b00      	cmp	r3, #0
 800e366:	d001      	beq.n	800e36c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e368:	f7f5 fe28 	bl	8003fbc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800e36c:	490b      	ldr	r1, [pc, #44]	@ (800e39c <MX_USB_HOST_Init+0x48>)
 800e36e:	480a      	ldr	r0, [pc, #40]	@ (800e398 <MX_USB_HOST_Init+0x44>)
 800e370:	f7fe f9e8 	bl	800c744 <USBH_RegisterClass>
 800e374:	4603      	mov	r3, r0
 800e376:	2b00      	cmp	r3, #0
 800e378:	d001      	beq.n	800e37e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e37a:	f7f5 fe1f 	bl	8003fbc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e37e:	4806      	ldr	r0, [pc, #24]	@ (800e398 <MX_USB_HOST_Init+0x44>)
 800e380:	f7fe fad0 	bl	800c924 <USBH_Start>
 800e384:	4603      	mov	r3, r0
 800e386:	2b00      	cmp	r3, #0
 800e388:	d001      	beq.n	800e38e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e38a:	f7f5 fe17 	bl	8003fbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e38e:	bf00      	nop
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	0800e3b5 	.word	0x0800e3b5
 800e398:	20011920 	.word	0x20011920
 800e39c:	200002a0 	.word	0x200002a0

0800e3a0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800e3a4:	4802      	ldr	r0, [pc, #8]	@ (800e3b0 <MX_USB_HOST_Process+0x10>)
 800e3a6:	f7fe facd 	bl	800c944 <USBH_Process>
}
 800e3aa:	bf00      	nop
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	20011920 	.word	0x20011920

0800e3b4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	b083      	sub	sp, #12
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	460b      	mov	r3, r1
 800e3be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e3c0:	78fb      	ldrb	r3, [r7, #3]
 800e3c2:	3b01      	subs	r3, #1
 800e3c4:	2b04      	cmp	r3, #4
 800e3c6:	d819      	bhi.n	800e3fc <USBH_UserProcess+0x48>
 800e3c8:	a201      	add	r2, pc, #4	@ (adr r2, 800e3d0 <USBH_UserProcess+0x1c>)
 800e3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ce:	bf00      	nop
 800e3d0:	0800e3fd 	.word	0x0800e3fd
 800e3d4:	0800e3ed 	.word	0x0800e3ed
 800e3d8:	0800e3fd 	.word	0x0800e3fd
 800e3dc:	0800e3f5 	.word	0x0800e3f5
 800e3e0:	0800e3e5 	.word	0x0800e3e5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e3e4:	4b09      	ldr	r3, [pc, #36]	@ (800e40c <USBH_UserProcess+0x58>)
 800e3e6:	2203      	movs	r2, #3
 800e3e8:	701a      	strb	r2, [r3, #0]
  break;
 800e3ea:	e008      	b.n	800e3fe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e3ec:	4b07      	ldr	r3, [pc, #28]	@ (800e40c <USBH_UserProcess+0x58>)
 800e3ee:	2202      	movs	r2, #2
 800e3f0:	701a      	strb	r2, [r3, #0]
  break;
 800e3f2:	e004      	b.n	800e3fe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e3f4:	4b05      	ldr	r3, [pc, #20]	@ (800e40c <USBH_UserProcess+0x58>)
 800e3f6:	2201      	movs	r2, #1
 800e3f8:	701a      	strb	r2, [r3, #0]
  break;
 800e3fa:	e000      	b.n	800e3fe <USBH_UserProcess+0x4a>

  default:
  break;
 800e3fc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e3fe:	bf00      	nop
 800e400:	370c      	adds	r7, #12
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr
 800e40a:	bf00      	nop
 800e40c:	200126b0 	.word	0x200126b0

0800e410 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b08a      	sub	sp, #40	@ 0x28
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e418:	f107 0314 	add.w	r3, r7, #20
 800e41c:	2200      	movs	r2, #0
 800e41e:	601a      	str	r2, [r3, #0]
 800e420:	605a      	str	r2, [r3, #4]
 800e422:	609a      	str	r2, [r3, #8]
 800e424:	60da      	str	r2, [r3, #12]
 800e426:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e430:	d147      	bne.n	800e4c2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e432:	2300      	movs	r3, #0
 800e434:	613b      	str	r3, [r7, #16]
 800e436:	4b25      	ldr	r3, [pc, #148]	@ (800e4cc <HAL_HCD_MspInit+0xbc>)
 800e438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e43a:	4a24      	ldr	r2, [pc, #144]	@ (800e4cc <HAL_HCD_MspInit+0xbc>)
 800e43c:	f043 0301 	orr.w	r3, r3, #1
 800e440:	6313      	str	r3, [r2, #48]	@ 0x30
 800e442:	4b22      	ldr	r3, [pc, #136]	@ (800e4cc <HAL_HCD_MspInit+0xbc>)
 800e444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e446:	f003 0301 	and.w	r3, r3, #1
 800e44a:	613b      	str	r3, [r7, #16]
 800e44c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e44e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e454:	2300      	movs	r3, #0
 800e456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e458:	2300      	movs	r3, #0
 800e45a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e45c:	f107 0314 	add.w	r3, r7, #20
 800e460:	4619      	mov	r1, r3
 800e462:	481b      	ldr	r0, [pc, #108]	@ (800e4d0 <HAL_HCD_MspInit+0xc0>)
 800e464:	f7f6 fc50 	bl	8004d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e468:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e46c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e46e:	2302      	movs	r3, #2
 800e470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e472:	2300      	movs	r3, #0
 800e474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e476:	2300      	movs	r3, #0
 800e478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e47a:	230a      	movs	r3, #10
 800e47c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e47e:	f107 0314 	add.w	r3, r7, #20
 800e482:	4619      	mov	r1, r3
 800e484:	4812      	ldr	r0, [pc, #72]	@ (800e4d0 <HAL_HCD_MspInit+0xc0>)
 800e486:	f7f6 fc3f 	bl	8004d08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e48a:	4b10      	ldr	r3, [pc, #64]	@ (800e4cc <HAL_HCD_MspInit+0xbc>)
 800e48c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e48e:	4a0f      	ldr	r2, [pc, #60]	@ (800e4cc <HAL_HCD_MspInit+0xbc>)
 800e490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e494:	6353      	str	r3, [r2, #52]	@ 0x34
 800e496:	2300      	movs	r3, #0
 800e498:	60fb      	str	r3, [r7, #12]
 800e49a:	4b0c      	ldr	r3, [pc, #48]	@ (800e4cc <HAL_HCD_MspInit+0xbc>)
 800e49c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e49e:	4a0b      	ldr	r2, [pc, #44]	@ (800e4cc <HAL_HCD_MspInit+0xbc>)
 800e4a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e4a4:	6453      	str	r3, [r2, #68]	@ 0x44
 800e4a6:	4b09      	ldr	r3, [pc, #36]	@ (800e4cc <HAL_HCD_MspInit+0xbc>)
 800e4a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e4ae:	60fb      	str	r3, [r7, #12]
 800e4b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	2100      	movs	r1, #0
 800e4b6:	2043      	movs	r0, #67	@ 0x43
 800e4b8:	f7f6 f949 	bl	800474e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e4bc:	2043      	movs	r0, #67	@ 0x43
 800e4be:	f7f6 f962 	bl	8004786 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e4c2:	bf00      	nop
 800e4c4:	3728      	adds	r7, #40	@ 0x28
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	40023800 	.word	0x40023800
 800e4d0:	40020000 	.word	0x40020000

0800e4d4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b082      	sub	sp, #8
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f7fe ff59 	bl	800d39a <USBH_LL_IncTimer>
}
 800e4e8:	bf00      	nop
 800e4ea:	3708      	adds	r7, #8
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7fe ff91 	bl	800d426 <USBH_LL_Connect>
}
 800e504:	bf00      	nop
 800e506:	3708      	adds	r7, #8
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7fe ff9a 	bl	800d454 <USBH_LL_Disconnect>
}
 800e520:	bf00      	nop
 800e522:	3708      	adds	r7, #8
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}

0800e528 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e528:	b480      	push	{r7}
 800e52a:	b083      	sub	sp, #12
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	460b      	mov	r3, r1
 800e532:	70fb      	strb	r3, [r7, #3]
 800e534:	4613      	mov	r3, r2
 800e536:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e538:	bf00      	nop
 800e53a:	370c      	adds	r7, #12
 800e53c:	46bd      	mov	sp, r7
 800e53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e542:	4770      	bx	lr

0800e544 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b082      	sub	sp, #8
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e552:	4618      	mov	r0, r3
 800e554:	f7fe ff4b 	bl	800d3ee <USBH_LL_PortEnabled>
}
 800e558:	bf00      	nop
 800e55a:	3708      	adds	r7, #8
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}

0800e560 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b082      	sub	sp, #8
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e56e:	4618      	mov	r0, r3
 800e570:	f7fe ff4b 	bl	800d40a <USBH_LL_PortDisabled>
}
 800e574:	bf00      	nop
 800e576:	3708      	adds	r7, #8
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}

0800e57c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b082      	sub	sp, #8
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f893 3d84 	ldrb.w	r3, [r3, #3460]	@ 0xd84
 800e58a:	2b01      	cmp	r3, #1
 800e58c:	d12a      	bne.n	800e5e4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e58e:	4a18      	ldr	r2, [pc, #96]	@ (800e5f0 <USBH_LL_Init+0x74>)
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	4a15      	ldr	r2, [pc, #84]	@ (800e5f0 <USBH_LL_Init+0x74>)
 800e59a:	f8c3 2d88 	str.w	r2, [r3, #3464]	@ 0xd88

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e59e:	4b14      	ldr	r3, [pc, #80]	@ (800e5f0 <USBH_LL_Init+0x74>)
 800e5a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e5a4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e5a6:	4b12      	ldr	r3, [pc, #72]	@ (800e5f0 <USBH_LL_Init+0x74>)
 800e5a8:	2208      	movs	r2, #8
 800e5aa:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e5ac:	4b10      	ldr	r3, [pc, #64]	@ (800e5f0 <USBH_LL_Init+0x74>)
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e5b2:	4b0f      	ldr	r3, [pc, #60]	@ (800e5f0 <USBH_LL_Init+0x74>)
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e5b8:	4b0d      	ldr	r3, [pc, #52]	@ (800e5f0 <USBH_LL_Init+0x74>)
 800e5ba:	2202      	movs	r2, #2
 800e5bc:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e5be:	4b0c      	ldr	r3, [pc, #48]	@ (800e5f0 <USBH_LL_Init+0x74>)
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e5c4:	480a      	ldr	r0, [pc, #40]	@ (800e5f0 <USBH_LL_Init+0x74>)
 800e5c6:	f7f6 fd95 	bl	80050f4 <HAL_HCD_Init>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d001      	beq.n	800e5d4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e5d0:	f7f5 fcf4 	bl	8003fbc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e5d4:	4806      	ldr	r0, [pc, #24]	@ (800e5f0 <USBH_LL_Init+0x74>)
 800e5d6:	f7f7 f9f5 	bl	80059c4 <HAL_HCD_GetCurrentFrame>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	4619      	mov	r1, r3
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f7fe fecc 	bl	800d37c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e5e4:	2300      	movs	r3, #0
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3708      	adds	r7, #8
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	200126b4 	.word	0x200126b4

0800e5f4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b084      	sub	sp, #16
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e600:	2300      	movs	r3, #0
 800e602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7f7 f962 	bl	80058d4 <HAL_HCD_Start>
 800e610:	4603      	mov	r3, r0
 800e612:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e614:	7bfb      	ldrb	r3, [r7, #15]
 800e616:	4618      	mov	r0, r3
 800e618:	f000 f95e 	bl	800e8d8 <USBH_Get_USB_Status>
 800e61c:	4603      	mov	r3, r0
 800e61e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e620:	7bbb      	ldrb	r3, [r7, #14]
}
 800e622:	4618      	mov	r0, r3
 800e624:	3710      	adds	r7, #16
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}

0800e62a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e62a:	b580      	push	{r7, lr}
 800e62c:	b084      	sub	sp, #16
 800e62e:	af00      	add	r7, sp, #0
 800e630:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e632:	2300      	movs	r3, #0
 800e634:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e636:	2300      	movs	r3, #0
 800e638:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 800e640:	4618      	mov	r0, r3
 800e642:	f7f7 f96a 	bl	800591a <HAL_HCD_Stop>
 800e646:	4603      	mov	r3, r0
 800e648:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e64a:	7bfb      	ldrb	r3, [r7, #15]
 800e64c:	4618      	mov	r0, r3
 800e64e:	f000 f943 	bl	800e8d8 <USBH_Get_USB_Status>
 800e652:	4603      	mov	r3, r0
 800e654:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e656:	7bbb      	ldrb	r3, [r7, #14]
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3710      	adds	r7, #16
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b084      	sub	sp, #16
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e668:	2301      	movs	r3, #1
 800e66a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 800e672:	4618      	mov	r0, r3
 800e674:	f7f7 f9b4 	bl	80059e0 <HAL_HCD_GetCurrentSpeed>
 800e678:	4603      	mov	r3, r0
 800e67a:	2b02      	cmp	r3, #2
 800e67c:	d00c      	beq.n	800e698 <USBH_LL_GetSpeed+0x38>
 800e67e:	2b02      	cmp	r3, #2
 800e680:	d80d      	bhi.n	800e69e <USBH_LL_GetSpeed+0x3e>
 800e682:	2b00      	cmp	r3, #0
 800e684:	d002      	beq.n	800e68c <USBH_LL_GetSpeed+0x2c>
 800e686:	2b01      	cmp	r3, #1
 800e688:	d003      	beq.n	800e692 <USBH_LL_GetSpeed+0x32>
 800e68a:	e008      	b.n	800e69e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e68c:	2300      	movs	r3, #0
 800e68e:	73fb      	strb	r3, [r7, #15]
    break;
 800e690:	e008      	b.n	800e6a4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e692:	2301      	movs	r3, #1
 800e694:	73fb      	strb	r3, [r7, #15]
    break;
 800e696:	e005      	b.n	800e6a4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e698:	2302      	movs	r3, #2
 800e69a:	73fb      	strb	r3, [r7, #15]
    break;
 800e69c:	e002      	b.n	800e6a4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e69e:	2301      	movs	r3, #1
 800e6a0:	73fb      	strb	r3, [r7, #15]
    break;
 800e6a2:	bf00      	nop
  }
  return  speed;
 800e6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3710      	adds	r7, #16
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}

0800e6ae <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e6ae:	b580      	push	{r7, lr}
 800e6b0:	b084      	sub	sp, #16
 800e6b2:	af00      	add	r7, sp, #0
 800e6b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f7f7 f945 	bl	8005954 <HAL_HCD_ResetPort>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e6ce:	7bfb      	ldrb	r3, [r7, #15]
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f000 f901 	bl	800e8d8 <USBH_Get_USB_Status>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6da:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	3710      	adds	r7, #16
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b082      	sub	sp, #8
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	460b      	mov	r3, r1
 800e6ee:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 800e6f6:	78fa      	ldrb	r2, [r7, #3]
 800e6f8:	4611      	mov	r1, r2
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7f7 f94d 	bl	800599a <HAL_HCD_HC_GetXferCount>
 800e700:	4603      	mov	r3, r0
}
 800e702:	4618      	mov	r0, r3
 800e704:	3708      	adds	r7, #8
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}

0800e70a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e70a:	b590      	push	{r4, r7, lr}
 800e70c:	b089      	sub	sp, #36	@ 0x24
 800e70e:	af04      	add	r7, sp, #16
 800e710:	6078      	str	r0, [r7, #4]
 800e712:	4608      	mov	r0, r1
 800e714:	4611      	mov	r1, r2
 800e716:	461a      	mov	r2, r3
 800e718:	4603      	mov	r3, r0
 800e71a:	70fb      	strb	r3, [r7, #3]
 800e71c:	460b      	mov	r3, r1
 800e71e:	70bb      	strb	r3, [r7, #2]
 800e720:	4613      	mov	r3, r2
 800e722:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e724:	2300      	movs	r3, #0
 800e726:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e728:	2300      	movs	r3, #0
 800e72a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f8d3 0d88 	ldr.w	r0, [r3, #3464]	@ 0xd88
 800e732:	787c      	ldrb	r4, [r7, #1]
 800e734:	78ba      	ldrb	r2, [r7, #2]
 800e736:	78f9      	ldrb	r1, [r7, #3]
 800e738:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e73a:	9302      	str	r3, [sp, #8]
 800e73c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e740:	9301      	str	r3, [sp, #4]
 800e742:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e746:	9300      	str	r3, [sp, #0]
 800e748:	4623      	mov	r3, r4
 800e74a:	f7f6 fd3a 	bl	80051c2 <HAL_HCD_HC_Init>
 800e74e:	4603      	mov	r3, r0
 800e750:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e752:	7bfb      	ldrb	r3, [r7, #15]
 800e754:	4618      	mov	r0, r3
 800e756:	f000 f8bf 	bl	800e8d8 <USBH_Get_USB_Status>
 800e75a:	4603      	mov	r3, r0
 800e75c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e75e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e760:	4618      	mov	r0, r3
 800e762:	3714      	adds	r7, #20
 800e764:	46bd      	mov	sp, r7
 800e766:	bd90      	pop	{r4, r7, pc}

0800e768 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b084      	sub	sp, #16
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
 800e770:	460b      	mov	r3, r1
 800e772:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e774:	2300      	movs	r3, #0
 800e776:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e778:	2300      	movs	r3, #0
 800e77a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 800e782:	78fa      	ldrb	r2, [r7, #3]
 800e784:	4611      	mov	r1, r2
 800e786:	4618      	mov	r0, r3
 800e788:	f7f6 fdd3 	bl	8005332 <HAL_HCD_HC_Halt>
 800e78c:	4603      	mov	r3, r0
 800e78e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e790:	7bfb      	ldrb	r3, [r7, #15]
 800e792:	4618      	mov	r0, r3
 800e794:	f000 f8a0 	bl	800e8d8 <USBH_Get_USB_Status>
 800e798:	4603      	mov	r3, r0
 800e79a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e79c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3710      	adds	r7, #16
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}

0800e7a6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e7a6:	b590      	push	{r4, r7, lr}
 800e7a8:	b089      	sub	sp, #36	@ 0x24
 800e7aa:	af04      	add	r7, sp, #16
 800e7ac:	6078      	str	r0, [r7, #4]
 800e7ae:	4608      	mov	r0, r1
 800e7b0:	4611      	mov	r1, r2
 800e7b2:	461a      	mov	r2, r3
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	70fb      	strb	r3, [r7, #3]
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	70bb      	strb	r3, [r7, #2]
 800e7bc:	4613      	mov	r3, r2
 800e7be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8d3 0d88 	ldr.w	r0, [r3, #3464]	@ 0xd88
 800e7ce:	787c      	ldrb	r4, [r7, #1]
 800e7d0:	78ba      	ldrb	r2, [r7, #2]
 800e7d2:	78f9      	ldrb	r1, [r7, #3]
 800e7d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e7d8:	9303      	str	r3, [sp, #12]
 800e7da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e7dc:	9302      	str	r3, [sp, #8]
 800e7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7e0:	9301      	str	r3, [sp, #4]
 800e7e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e7e6:	9300      	str	r3, [sp, #0]
 800e7e8:	4623      	mov	r3, r4
 800e7ea:	f7f6 fdc5 	bl	8005378 <HAL_HCD_HC_SubmitRequest>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e7f2:	7bfb      	ldrb	r3, [r7, #15]
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f000 f86f 	bl	800e8d8 <USBH_Get_USB_Status>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800e800:	4618      	mov	r0, r3
 800e802:	3714      	adds	r7, #20
 800e804:	46bd      	mov	sp, r7
 800e806:	bd90      	pop	{r4, r7, pc}

0800e808 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	460b      	mov	r3, r1
 800e812:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 800e81a:	78fa      	ldrb	r2, [r7, #3]
 800e81c:	4611      	mov	r1, r2
 800e81e:	4618      	mov	r0, r3
 800e820:	f7f7 f8a6 	bl	8005970 <HAL_HCD_HC_GetURBState>
 800e824:	4603      	mov	r3, r0
}
 800e826:	4618      	mov	r0, r3
 800e828:	3708      	adds	r7, #8
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}

0800e82e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e82e:	b580      	push	{r7, lr}
 800e830:	b082      	sub	sp, #8
 800e832:	af00      	add	r7, sp, #0
 800e834:	6078      	str	r0, [r7, #4]
 800e836:	460b      	mov	r3, r1
 800e838:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f893 3d84 	ldrb.w	r3, [r3, #3460]	@ 0xd84
 800e840:	2b01      	cmp	r3, #1
 800e842:	d103      	bne.n	800e84c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e844:	78fb      	ldrb	r3, [r7, #3]
 800e846:	4618      	mov	r0, r3
 800e848:	f000 f872 	bl	800e930 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e84c:	20c8      	movs	r0, #200	@ 0xc8
 800e84e:	f7f5 fe7f 	bl	8004550 <HAL_Delay>
  return USBH_OK;
 800e852:	2300      	movs	r3, #0
}
 800e854:	4618      	mov	r0, r3
 800e856:	3708      	adds	r7, #8
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}

0800e85c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b085      	sub	sp, #20
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	460b      	mov	r3, r1
 800e866:	70fb      	strb	r3, [r7, #3]
 800e868:	4613      	mov	r3, r2
 800e86a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 800e872:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e874:	78fa      	ldrb	r2, [r7, #3]
 800e876:	68f9      	ldr	r1, [r7, #12]
 800e878:	4613      	mov	r3, r2
 800e87a:	011b      	lsls	r3, r3, #4
 800e87c:	1a9b      	subs	r3, r3, r2
 800e87e:	009b      	lsls	r3, r3, #2
 800e880:	440b      	add	r3, r1
 800e882:	3317      	adds	r3, #23
 800e884:	781b      	ldrb	r3, [r3, #0]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d00a      	beq.n	800e8a0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e88a:	78fa      	ldrb	r2, [r7, #3]
 800e88c:	68f9      	ldr	r1, [r7, #12]
 800e88e:	4613      	mov	r3, r2
 800e890:	011b      	lsls	r3, r3, #4
 800e892:	1a9b      	subs	r3, r3, r2
 800e894:	009b      	lsls	r3, r3, #2
 800e896:	440b      	add	r3, r1
 800e898:	333c      	adds	r3, #60	@ 0x3c
 800e89a:	78ba      	ldrb	r2, [r7, #2]
 800e89c:	701a      	strb	r2, [r3, #0]
 800e89e:	e009      	b.n	800e8b4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e8a0:	78fa      	ldrb	r2, [r7, #3]
 800e8a2:	68f9      	ldr	r1, [r7, #12]
 800e8a4:	4613      	mov	r3, r2
 800e8a6:	011b      	lsls	r3, r3, #4
 800e8a8:	1a9b      	subs	r3, r3, r2
 800e8aa:	009b      	lsls	r3, r3, #2
 800e8ac:	440b      	add	r3, r1
 800e8ae:	333d      	adds	r3, #61	@ 0x3d
 800e8b0:	78ba      	ldrb	r2, [r7, #2]
 800e8b2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e8b4:	2300      	movs	r3, #0
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3714      	adds	r7, #20
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c0:	4770      	bx	lr

0800e8c2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e8c2:	b580      	push	{r7, lr}
 800e8c4:	b082      	sub	sp, #8
 800e8c6:	af00      	add	r7, sp, #0
 800e8c8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f7f5 fe40 	bl	8004550 <HAL_Delay>
}
 800e8d0:	bf00      	nop
 800e8d2:	3708      	adds	r7, #8
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}

0800e8d8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b085      	sub	sp, #20
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	4603      	mov	r3, r0
 800e8e0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e8e6:	79fb      	ldrb	r3, [r7, #7]
 800e8e8:	2b03      	cmp	r3, #3
 800e8ea:	d817      	bhi.n	800e91c <USBH_Get_USB_Status+0x44>
 800e8ec:	a201      	add	r2, pc, #4	@ (adr r2, 800e8f4 <USBH_Get_USB_Status+0x1c>)
 800e8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8f2:	bf00      	nop
 800e8f4:	0800e905 	.word	0x0800e905
 800e8f8:	0800e90b 	.word	0x0800e90b
 800e8fc:	0800e911 	.word	0x0800e911
 800e900:	0800e917 	.word	0x0800e917
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e904:	2300      	movs	r3, #0
 800e906:	73fb      	strb	r3, [r7, #15]
    break;
 800e908:	e00b      	b.n	800e922 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e90a:	2302      	movs	r3, #2
 800e90c:	73fb      	strb	r3, [r7, #15]
    break;
 800e90e:	e008      	b.n	800e922 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e910:	2301      	movs	r3, #1
 800e912:	73fb      	strb	r3, [r7, #15]
    break;
 800e914:	e005      	b.n	800e922 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e916:	2302      	movs	r3, #2
 800e918:	73fb      	strb	r3, [r7, #15]
    break;
 800e91a:	e002      	b.n	800e922 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e91c:	2302      	movs	r3, #2
 800e91e:	73fb      	strb	r3, [r7, #15]
    break;
 800e920:	bf00      	nop
  }
  return usb_status;
 800e922:	7bfb      	ldrb	r3, [r7, #15]
}
 800e924:	4618      	mov	r0, r3
 800e926:	3714      	adds	r7, #20
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr

0800e930 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b084      	sub	sp, #16
 800e934:	af00      	add	r7, sp, #0
 800e936:	4603      	mov	r3, r0
 800e938:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e93a:	79fb      	ldrb	r3, [r7, #7]
 800e93c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e93e:	79fb      	ldrb	r3, [r7, #7]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d102      	bne.n	800e94a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800e944:	2300      	movs	r3, #0
 800e946:	73fb      	strb	r3, [r7, #15]
 800e948:	e001      	b.n	800e94e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800e94a:	2301      	movs	r3, #1
 800e94c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,(GPIO_PinState)data);
 800e94e:	7bfb      	ldrb	r3, [r7, #15]
 800e950:	461a      	mov	r2, r3
 800e952:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e956:	4803      	ldr	r0, [pc, #12]	@ (800e964 <MX_DriverVbusFS+0x34>)
 800e958:	f7f6 fb9a 	bl	8005090 <HAL_GPIO_WritePin>
}
 800e95c:	bf00      	nop
 800e95e:	3710      	adds	r7, #16
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}
 800e964:	40020400 	.word	0x40020400

0800e968 <atoi>:
 800e968:	220a      	movs	r2, #10
 800e96a:	2100      	movs	r1, #0
 800e96c:	f000 b938 	b.w	800ebe0 <strtol>

0800e970 <malloc>:
 800e970:	4b02      	ldr	r3, [pc, #8]	@ (800e97c <malloc+0xc>)
 800e972:	4601      	mov	r1, r0
 800e974:	6818      	ldr	r0, [r3, #0]
 800e976:	f000 b82d 	b.w	800e9d4 <_malloc_r>
 800e97a:	bf00      	nop
 800e97c:	200002cc 	.word	0x200002cc

0800e980 <free>:
 800e980:	4b02      	ldr	r3, [pc, #8]	@ (800e98c <free+0xc>)
 800e982:	4601      	mov	r1, r0
 800e984:	6818      	ldr	r0, [r3, #0]
 800e986:	f000 bc1b 	b.w	800f1c0 <_free_r>
 800e98a:	bf00      	nop
 800e98c:	200002cc 	.word	0x200002cc

0800e990 <sbrk_aligned>:
 800e990:	b570      	push	{r4, r5, r6, lr}
 800e992:	4e0f      	ldr	r6, [pc, #60]	@ (800e9d0 <sbrk_aligned+0x40>)
 800e994:	460c      	mov	r4, r1
 800e996:	6831      	ldr	r1, [r6, #0]
 800e998:	4605      	mov	r5, r0
 800e99a:	b911      	cbnz	r1, 800e9a2 <sbrk_aligned+0x12>
 800e99c:	f000 fbb8 	bl	800f110 <_sbrk_r>
 800e9a0:	6030      	str	r0, [r6, #0]
 800e9a2:	4621      	mov	r1, r4
 800e9a4:	4628      	mov	r0, r5
 800e9a6:	f000 fbb3 	bl	800f110 <_sbrk_r>
 800e9aa:	1c43      	adds	r3, r0, #1
 800e9ac:	d103      	bne.n	800e9b6 <sbrk_aligned+0x26>
 800e9ae:	f04f 34ff 	mov.w	r4, #4294967295
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	bd70      	pop	{r4, r5, r6, pc}
 800e9b6:	1cc4      	adds	r4, r0, #3
 800e9b8:	f024 0403 	bic.w	r4, r4, #3
 800e9bc:	42a0      	cmp	r0, r4
 800e9be:	d0f8      	beq.n	800e9b2 <sbrk_aligned+0x22>
 800e9c0:	1a21      	subs	r1, r4, r0
 800e9c2:	4628      	mov	r0, r5
 800e9c4:	f000 fba4 	bl	800f110 <_sbrk_r>
 800e9c8:	3001      	adds	r0, #1
 800e9ca:	d1f2      	bne.n	800e9b2 <sbrk_aligned+0x22>
 800e9cc:	e7ef      	b.n	800e9ae <sbrk_aligned+0x1e>
 800e9ce:	bf00      	nop
 800e9d0:	20012a94 	.word	0x20012a94

0800e9d4 <_malloc_r>:
 800e9d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9d8:	1ccd      	adds	r5, r1, #3
 800e9da:	f025 0503 	bic.w	r5, r5, #3
 800e9de:	3508      	adds	r5, #8
 800e9e0:	2d0c      	cmp	r5, #12
 800e9e2:	bf38      	it	cc
 800e9e4:	250c      	movcc	r5, #12
 800e9e6:	2d00      	cmp	r5, #0
 800e9e8:	4606      	mov	r6, r0
 800e9ea:	db01      	blt.n	800e9f0 <_malloc_r+0x1c>
 800e9ec:	42a9      	cmp	r1, r5
 800e9ee:	d904      	bls.n	800e9fa <_malloc_r+0x26>
 800e9f0:	230c      	movs	r3, #12
 800e9f2:	6033      	str	r3, [r6, #0]
 800e9f4:	2000      	movs	r0, #0
 800e9f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ead0 <_malloc_r+0xfc>
 800e9fe:	f000 f869 	bl	800ead4 <__malloc_lock>
 800ea02:	f8d8 3000 	ldr.w	r3, [r8]
 800ea06:	461c      	mov	r4, r3
 800ea08:	bb44      	cbnz	r4, 800ea5c <_malloc_r+0x88>
 800ea0a:	4629      	mov	r1, r5
 800ea0c:	4630      	mov	r0, r6
 800ea0e:	f7ff ffbf 	bl	800e990 <sbrk_aligned>
 800ea12:	1c43      	adds	r3, r0, #1
 800ea14:	4604      	mov	r4, r0
 800ea16:	d158      	bne.n	800eaca <_malloc_r+0xf6>
 800ea18:	f8d8 4000 	ldr.w	r4, [r8]
 800ea1c:	4627      	mov	r7, r4
 800ea1e:	2f00      	cmp	r7, #0
 800ea20:	d143      	bne.n	800eaaa <_malloc_r+0xd6>
 800ea22:	2c00      	cmp	r4, #0
 800ea24:	d04b      	beq.n	800eabe <_malloc_r+0xea>
 800ea26:	6823      	ldr	r3, [r4, #0]
 800ea28:	4639      	mov	r1, r7
 800ea2a:	4630      	mov	r0, r6
 800ea2c:	eb04 0903 	add.w	r9, r4, r3
 800ea30:	f000 fb6e 	bl	800f110 <_sbrk_r>
 800ea34:	4581      	cmp	r9, r0
 800ea36:	d142      	bne.n	800eabe <_malloc_r+0xea>
 800ea38:	6821      	ldr	r1, [r4, #0]
 800ea3a:	1a6d      	subs	r5, r5, r1
 800ea3c:	4629      	mov	r1, r5
 800ea3e:	4630      	mov	r0, r6
 800ea40:	f7ff ffa6 	bl	800e990 <sbrk_aligned>
 800ea44:	3001      	adds	r0, #1
 800ea46:	d03a      	beq.n	800eabe <_malloc_r+0xea>
 800ea48:	6823      	ldr	r3, [r4, #0]
 800ea4a:	442b      	add	r3, r5
 800ea4c:	6023      	str	r3, [r4, #0]
 800ea4e:	f8d8 3000 	ldr.w	r3, [r8]
 800ea52:	685a      	ldr	r2, [r3, #4]
 800ea54:	bb62      	cbnz	r2, 800eab0 <_malloc_r+0xdc>
 800ea56:	f8c8 7000 	str.w	r7, [r8]
 800ea5a:	e00f      	b.n	800ea7c <_malloc_r+0xa8>
 800ea5c:	6822      	ldr	r2, [r4, #0]
 800ea5e:	1b52      	subs	r2, r2, r5
 800ea60:	d420      	bmi.n	800eaa4 <_malloc_r+0xd0>
 800ea62:	2a0b      	cmp	r2, #11
 800ea64:	d917      	bls.n	800ea96 <_malloc_r+0xc2>
 800ea66:	1961      	adds	r1, r4, r5
 800ea68:	42a3      	cmp	r3, r4
 800ea6a:	6025      	str	r5, [r4, #0]
 800ea6c:	bf18      	it	ne
 800ea6e:	6059      	strne	r1, [r3, #4]
 800ea70:	6863      	ldr	r3, [r4, #4]
 800ea72:	bf08      	it	eq
 800ea74:	f8c8 1000 	streq.w	r1, [r8]
 800ea78:	5162      	str	r2, [r4, r5]
 800ea7a:	604b      	str	r3, [r1, #4]
 800ea7c:	4630      	mov	r0, r6
 800ea7e:	f000 f82f 	bl	800eae0 <__malloc_unlock>
 800ea82:	f104 000b 	add.w	r0, r4, #11
 800ea86:	1d23      	adds	r3, r4, #4
 800ea88:	f020 0007 	bic.w	r0, r0, #7
 800ea8c:	1ac2      	subs	r2, r0, r3
 800ea8e:	bf1c      	itt	ne
 800ea90:	1a1b      	subne	r3, r3, r0
 800ea92:	50a3      	strne	r3, [r4, r2]
 800ea94:	e7af      	b.n	800e9f6 <_malloc_r+0x22>
 800ea96:	6862      	ldr	r2, [r4, #4]
 800ea98:	42a3      	cmp	r3, r4
 800ea9a:	bf0c      	ite	eq
 800ea9c:	f8c8 2000 	streq.w	r2, [r8]
 800eaa0:	605a      	strne	r2, [r3, #4]
 800eaa2:	e7eb      	b.n	800ea7c <_malloc_r+0xa8>
 800eaa4:	4623      	mov	r3, r4
 800eaa6:	6864      	ldr	r4, [r4, #4]
 800eaa8:	e7ae      	b.n	800ea08 <_malloc_r+0x34>
 800eaaa:	463c      	mov	r4, r7
 800eaac:	687f      	ldr	r7, [r7, #4]
 800eaae:	e7b6      	b.n	800ea1e <_malloc_r+0x4a>
 800eab0:	461a      	mov	r2, r3
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	42a3      	cmp	r3, r4
 800eab6:	d1fb      	bne.n	800eab0 <_malloc_r+0xdc>
 800eab8:	2300      	movs	r3, #0
 800eaba:	6053      	str	r3, [r2, #4]
 800eabc:	e7de      	b.n	800ea7c <_malloc_r+0xa8>
 800eabe:	230c      	movs	r3, #12
 800eac0:	6033      	str	r3, [r6, #0]
 800eac2:	4630      	mov	r0, r6
 800eac4:	f000 f80c 	bl	800eae0 <__malloc_unlock>
 800eac8:	e794      	b.n	800e9f4 <_malloc_r+0x20>
 800eaca:	6005      	str	r5, [r0, #0]
 800eacc:	e7d6      	b.n	800ea7c <_malloc_r+0xa8>
 800eace:	bf00      	nop
 800ead0:	20012a98 	.word	0x20012a98

0800ead4 <__malloc_lock>:
 800ead4:	4801      	ldr	r0, [pc, #4]	@ (800eadc <__malloc_lock+0x8>)
 800ead6:	f000 bb68 	b.w	800f1aa <__retarget_lock_acquire_recursive>
 800eada:	bf00      	nop
 800eadc:	20012bdc 	.word	0x20012bdc

0800eae0 <__malloc_unlock>:
 800eae0:	4801      	ldr	r0, [pc, #4]	@ (800eae8 <__malloc_unlock+0x8>)
 800eae2:	f000 bb63 	b.w	800f1ac <__retarget_lock_release_recursive>
 800eae6:	bf00      	nop
 800eae8:	20012bdc 	.word	0x20012bdc

0800eaec <_strtol_l.constprop.0>:
 800eaec:	2b24      	cmp	r3, #36	@ 0x24
 800eaee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eaf2:	4686      	mov	lr, r0
 800eaf4:	4690      	mov	r8, r2
 800eaf6:	d801      	bhi.n	800eafc <_strtol_l.constprop.0+0x10>
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	d106      	bne.n	800eb0a <_strtol_l.constprop.0+0x1e>
 800eafc:	f000 fb2a 	bl	800f154 <__errno>
 800eb00:	2316      	movs	r3, #22
 800eb02:	6003      	str	r3, [r0, #0]
 800eb04:	2000      	movs	r0, #0
 800eb06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb0a:	4834      	ldr	r0, [pc, #208]	@ (800ebdc <_strtol_l.constprop.0+0xf0>)
 800eb0c:	460d      	mov	r5, r1
 800eb0e:	462a      	mov	r2, r5
 800eb10:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eb14:	5d06      	ldrb	r6, [r0, r4]
 800eb16:	f016 0608 	ands.w	r6, r6, #8
 800eb1a:	d1f8      	bne.n	800eb0e <_strtol_l.constprop.0+0x22>
 800eb1c:	2c2d      	cmp	r4, #45	@ 0x2d
 800eb1e:	d12d      	bne.n	800eb7c <_strtol_l.constprop.0+0x90>
 800eb20:	782c      	ldrb	r4, [r5, #0]
 800eb22:	2601      	movs	r6, #1
 800eb24:	1c95      	adds	r5, r2, #2
 800eb26:	f033 0210 	bics.w	r2, r3, #16
 800eb2a:	d109      	bne.n	800eb40 <_strtol_l.constprop.0+0x54>
 800eb2c:	2c30      	cmp	r4, #48	@ 0x30
 800eb2e:	d12a      	bne.n	800eb86 <_strtol_l.constprop.0+0x9a>
 800eb30:	782a      	ldrb	r2, [r5, #0]
 800eb32:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800eb36:	2a58      	cmp	r2, #88	@ 0x58
 800eb38:	d125      	bne.n	800eb86 <_strtol_l.constprop.0+0x9a>
 800eb3a:	786c      	ldrb	r4, [r5, #1]
 800eb3c:	2310      	movs	r3, #16
 800eb3e:	3502      	adds	r5, #2
 800eb40:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800eb44:	f10c 3cff 	add.w	ip, ip, #4294967295
 800eb48:	2200      	movs	r2, #0
 800eb4a:	fbbc f9f3 	udiv	r9, ip, r3
 800eb4e:	4610      	mov	r0, r2
 800eb50:	fb03 ca19 	mls	sl, r3, r9, ip
 800eb54:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800eb58:	2f09      	cmp	r7, #9
 800eb5a:	d81b      	bhi.n	800eb94 <_strtol_l.constprop.0+0xa8>
 800eb5c:	463c      	mov	r4, r7
 800eb5e:	42a3      	cmp	r3, r4
 800eb60:	dd27      	ble.n	800ebb2 <_strtol_l.constprop.0+0xc6>
 800eb62:	1c57      	adds	r7, r2, #1
 800eb64:	d007      	beq.n	800eb76 <_strtol_l.constprop.0+0x8a>
 800eb66:	4581      	cmp	r9, r0
 800eb68:	d320      	bcc.n	800ebac <_strtol_l.constprop.0+0xc0>
 800eb6a:	d101      	bne.n	800eb70 <_strtol_l.constprop.0+0x84>
 800eb6c:	45a2      	cmp	sl, r4
 800eb6e:	db1d      	blt.n	800ebac <_strtol_l.constprop.0+0xc0>
 800eb70:	fb00 4003 	mla	r0, r0, r3, r4
 800eb74:	2201      	movs	r2, #1
 800eb76:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eb7a:	e7eb      	b.n	800eb54 <_strtol_l.constprop.0+0x68>
 800eb7c:	2c2b      	cmp	r4, #43	@ 0x2b
 800eb7e:	bf04      	itt	eq
 800eb80:	782c      	ldrbeq	r4, [r5, #0]
 800eb82:	1c95      	addeq	r5, r2, #2
 800eb84:	e7cf      	b.n	800eb26 <_strtol_l.constprop.0+0x3a>
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d1da      	bne.n	800eb40 <_strtol_l.constprop.0+0x54>
 800eb8a:	2c30      	cmp	r4, #48	@ 0x30
 800eb8c:	bf0c      	ite	eq
 800eb8e:	2308      	moveq	r3, #8
 800eb90:	230a      	movne	r3, #10
 800eb92:	e7d5      	b.n	800eb40 <_strtol_l.constprop.0+0x54>
 800eb94:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800eb98:	2f19      	cmp	r7, #25
 800eb9a:	d801      	bhi.n	800eba0 <_strtol_l.constprop.0+0xb4>
 800eb9c:	3c37      	subs	r4, #55	@ 0x37
 800eb9e:	e7de      	b.n	800eb5e <_strtol_l.constprop.0+0x72>
 800eba0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800eba4:	2f19      	cmp	r7, #25
 800eba6:	d804      	bhi.n	800ebb2 <_strtol_l.constprop.0+0xc6>
 800eba8:	3c57      	subs	r4, #87	@ 0x57
 800ebaa:	e7d8      	b.n	800eb5e <_strtol_l.constprop.0+0x72>
 800ebac:	f04f 32ff 	mov.w	r2, #4294967295
 800ebb0:	e7e1      	b.n	800eb76 <_strtol_l.constprop.0+0x8a>
 800ebb2:	1c53      	adds	r3, r2, #1
 800ebb4:	d108      	bne.n	800ebc8 <_strtol_l.constprop.0+0xdc>
 800ebb6:	2322      	movs	r3, #34	@ 0x22
 800ebb8:	f8ce 3000 	str.w	r3, [lr]
 800ebbc:	4660      	mov	r0, ip
 800ebbe:	f1b8 0f00 	cmp.w	r8, #0
 800ebc2:	d0a0      	beq.n	800eb06 <_strtol_l.constprop.0+0x1a>
 800ebc4:	1e69      	subs	r1, r5, #1
 800ebc6:	e006      	b.n	800ebd6 <_strtol_l.constprop.0+0xea>
 800ebc8:	b106      	cbz	r6, 800ebcc <_strtol_l.constprop.0+0xe0>
 800ebca:	4240      	negs	r0, r0
 800ebcc:	f1b8 0f00 	cmp.w	r8, #0
 800ebd0:	d099      	beq.n	800eb06 <_strtol_l.constprop.0+0x1a>
 800ebd2:	2a00      	cmp	r2, #0
 800ebd4:	d1f6      	bne.n	800ebc4 <_strtol_l.constprop.0+0xd8>
 800ebd6:	f8c8 1000 	str.w	r1, [r8]
 800ebda:	e794      	b.n	800eb06 <_strtol_l.constprop.0+0x1a>
 800ebdc:	0801296d 	.word	0x0801296d

0800ebe0 <strtol>:
 800ebe0:	4613      	mov	r3, r2
 800ebe2:	460a      	mov	r2, r1
 800ebe4:	4601      	mov	r1, r0
 800ebe6:	4802      	ldr	r0, [pc, #8]	@ (800ebf0 <strtol+0x10>)
 800ebe8:	6800      	ldr	r0, [r0, #0]
 800ebea:	f7ff bf7f 	b.w	800eaec <_strtol_l.constprop.0>
 800ebee:	bf00      	nop
 800ebf0:	200002cc 	.word	0x200002cc

0800ebf4 <std>:
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	b510      	push	{r4, lr}
 800ebf8:	4604      	mov	r4, r0
 800ebfa:	e9c0 3300 	strd	r3, r3, [r0]
 800ebfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec02:	6083      	str	r3, [r0, #8]
 800ec04:	8181      	strh	r1, [r0, #12]
 800ec06:	6643      	str	r3, [r0, #100]	@ 0x64
 800ec08:	81c2      	strh	r2, [r0, #14]
 800ec0a:	6183      	str	r3, [r0, #24]
 800ec0c:	4619      	mov	r1, r3
 800ec0e:	2208      	movs	r2, #8
 800ec10:	305c      	adds	r0, #92	@ 0x5c
 800ec12:	f000 fa41 	bl	800f098 <memset>
 800ec16:	4b0d      	ldr	r3, [pc, #52]	@ (800ec4c <std+0x58>)
 800ec18:	6263      	str	r3, [r4, #36]	@ 0x24
 800ec1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ec50 <std+0x5c>)
 800ec1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ec1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ec54 <std+0x60>)
 800ec20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ec22:	4b0d      	ldr	r3, [pc, #52]	@ (800ec58 <std+0x64>)
 800ec24:	6323      	str	r3, [r4, #48]	@ 0x30
 800ec26:	4b0d      	ldr	r3, [pc, #52]	@ (800ec5c <std+0x68>)
 800ec28:	6224      	str	r4, [r4, #32]
 800ec2a:	429c      	cmp	r4, r3
 800ec2c:	d006      	beq.n	800ec3c <std+0x48>
 800ec2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ec32:	4294      	cmp	r4, r2
 800ec34:	d002      	beq.n	800ec3c <std+0x48>
 800ec36:	33d0      	adds	r3, #208	@ 0xd0
 800ec38:	429c      	cmp	r4, r3
 800ec3a:	d105      	bne.n	800ec48 <std+0x54>
 800ec3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ec40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec44:	f000 bab0 	b.w	800f1a8 <__retarget_lock_init_recursive>
 800ec48:	bd10      	pop	{r4, pc}
 800ec4a:	bf00      	nop
 800ec4c:	0800eea9 	.word	0x0800eea9
 800ec50:	0800eecb 	.word	0x0800eecb
 800ec54:	0800ef03 	.word	0x0800ef03
 800ec58:	0800ef27 	.word	0x0800ef27
 800ec5c:	20012a9c 	.word	0x20012a9c

0800ec60 <stdio_exit_handler>:
 800ec60:	4a02      	ldr	r2, [pc, #8]	@ (800ec6c <stdio_exit_handler+0xc>)
 800ec62:	4903      	ldr	r1, [pc, #12]	@ (800ec70 <stdio_exit_handler+0x10>)
 800ec64:	4803      	ldr	r0, [pc, #12]	@ (800ec74 <stdio_exit_handler+0x14>)
 800ec66:	f000 b869 	b.w	800ed3c <_fwalk_sglue>
 800ec6a:	bf00      	nop
 800ec6c:	200002c0 	.word	0x200002c0
 800ec70:	0800fbad 	.word	0x0800fbad
 800ec74:	200002d0 	.word	0x200002d0

0800ec78 <cleanup_stdio>:
 800ec78:	6841      	ldr	r1, [r0, #4]
 800ec7a:	4b0c      	ldr	r3, [pc, #48]	@ (800ecac <cleanup_stdio+0x34>)
 800ec7c:	4299      	cmp	r1, r3
 800ec7e:	b510      	push	{r4, lr}
 800ec80:	4604      	mov	r4, r0
 800ec82:	d001      	beq.n	800ec88 <cleanup_stdio+0x10>
 800ec84:	f000 ff92 	bl	800fbac <_fflush_r>
 800ec88:	68a1      	ldr	r1, [r4, #8]
 800ec8a:	4b09      	ldr	r3, [pc, #36]	@ (800ecb0 <cleanup_stdio+0x38>)
 800ec8c:	4299      	cmp	r1, r3
 800ec8e:	d002      	beq.n	800ec96 <cleanup_stdio+0x1e>
 800ec90:	4620      	mov	r0, r4
 800ec92:	f000 ff8b 	bl	800fbac <_fflush_r>
 800ec96:	68e1      	ldr	r1, [r4, #12]
 800ec98:	4b06      	ldr	r3, [pc, #24]	@ (800ecb4 <cleanup_stdio+0x3c>)
 800ec9a:	4299      	cmp	r1, r3
 800ec9c:	d004      	beq.n	800eca8 <cleanup_stdio+0x30>
 800ec9e:	4620      	mov	r0, r4
 800eca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eca4:	f000 bf82 	b.w	800fbac <_fflush_r>
 800eca8:	bd10      	pop	{r4, pc}
 800ecaa:	bf00      	nop
 800ecac:	20012a9c 	.word	0x20012a9c
 800ecb0:	20012b04 	.word	0x20012b04
 800ecb4:	20012b6c 	.word	0x20012b6c

0800ecb8 <global_stdio_init.part.0>:
 800ecb8:	b510      	push	{r4, lr}
 800ecba:	4b0b      	ldr	r3, [pc, #44]	@ (800ece8 <global_stdio_init.part.0+0x30>)
 800ecbc:	4c0b      	ldr	r4, [pc, #44]	@ (800ecec <global_stdio_init.part.0+0x34>)
 800ecbe:	4a0c      	ldr	r2, [pc, #48]	@ (800ecf0 <global_stdio_init.part.0+0x38>)
 800ecc0:	601a      	str	r2, [r3, #0]
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	2104      	movs	r1, #4
 800ecc8:	f7ff ff94 	bl	800ebf4 <std>
 800eccc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ecd0:	2201      	movs	r2, #1
 800ecd2:	2109      	movs	r1, #9
 800ecd4:	f7ff ff8e 	bl	800ebf4 <std>
 800ecd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ecdc:	2202      	movs	r2, #2
 800ecde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ece2:	2112      	movs	r1, #18
 800ece4:	f7ff bf86 	b.w	800ebf4 <std>
 800ece8:	20012bd4 	.word	0x20012bd4
 800ecec:	20012a9c 	.word	0x20012a9c
 800ecf0:	0800ec61 	.word	0x0800ec61

0800ecf4 <__sfp_lock_acquire>:
 800ecf4:	4801      	ldr	r0, [pc, #4]	@ (800ecfc <__sfp_lock_acquire+0x8>)
 800ecf6:	f000 ba58 	b.w	800f1aa <__retarget_lock_acquire_recursive>
 800ecfa:	bf00      	nop
 800ecfc:	20012bdd 	.word	0x20012bdd

0800ed00 <__sfp_lock_release>:
 800ed00:	4801      	ldr	r0, [pc, #4]	@ (800ed08 <__sfp_lock_release+0x8>)
 800ed02:	f000 ba53 	b.w	800f1ac <__retarget_lock_release_recursive>
 800ed06:	bf00      	nop
 800ed08:	20012bdd 	.word	0x20012bdd

0800ed0c <__sinit>:
 800ed0c:	b510      	push	{r4, lr}
 800ed0e:	4604      	mov	r4, r0
 800ed10:	f7ff fff0 	bl	800ecf4 <__sfp_lock_acquire>
 800ed14:	6a23      	ldr	r3, [r4, #32]
 800ed16:	b11b      	cbz	r3, 800ed20 <__sinit+0x14>
 800ed18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed1c:	f7ff bff0 	b.w	800ed00 <__sfp_lock_release>
 800ed20:	4b04      	ldr	r3, [pc, #16]	@ (800ed34 <__sinit+0x28>)
 800ed22:	6223      	str	r3, [r4, #32]
 800ed24:	4b04      	ldr	r3, [pc, #16]	@ (800ed38 <__sinit+0x2c>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d1f5      	bne.n	800ed18 <__sinit+0xc>
 800ed2c:	f7ff ffc4 	bl	800ecb8 <global_stdio_init.part.0>
 800ed30:	e7f2      	b.n	800ed18 <__sinit+0xc>
 800ed32:	bf00      	nop
 800ed34:	0800ec79 	.word	0x0800ec79
 800ed38:	20012bd4 	.word	0x20012bd4

0800ed3c <_fwalk_sglue>:
 800ed3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed40:	4607      	mov	r7, r0
 800ed42:	4688      	mov	r8, r1
 800ed44:	4614      	mov	r4, r2
 800ed46:	2600      	movs	r6, #0
 800ed48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed4c:	f1b9 0901 	subs.w	r9, r9, #1
 800ed50:	d505      	bpl.n	800ed5e <_fwalk_sglue+0x22>
 800ed52:	6824      	ldr	r4, [r4, #0]
 800ed54:	2c00      	cmp	r4, #0
 800ed56:	d1f7      	bne.n	800ed48 <_fwalk_sglue+0xc>
 800ed58:	4630      	mov	r0, r6
 800ed5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed5e:	89ab      	ldrh	r3, [r5, #12]
 800ed60:	2b01      	cmp	r3, #1
 800ed62:	d907      	bls.n	800ed74 <_fwalk_sglue+0x38>
 800ed64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed68:	3301      	adds	r3, #1
 800ed6a:	d003      	beq.n	800ed74 <_fwalk_sglue+0x38>
 800ed6c:	4629      	mov	r1, r5
 800ed6e:	4638      	mov	r0, r7
 800ed70:	47c0      	blx	r8
 800ed72:	4306      	orrs	r6, r0
 800ed74:	3568      	adds	r5, #104	@ 0x68
 800ed76:	e7e9      	b.n	800ed4c <_fwalk_sglue+0x10>

0800ed78 <iprintf>:
 800ed78:	b40f      	push	{r0, r1, r2, r3}
 800ed7a:	b507      	push	{r0, r1, r2, lr}
 800ed7c:	4906      	ldr	r1, [pc, #24]	@ (800ed98 <iprintf+0x20>)
 800ed7e:	ab04      	add	r3, sp, #16
 800ed80:	6808      	ldr	r0, [r1, #0]
 800ed82:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed86:	6881      	ldr	r1, [r0, #8]
 800ed88:	9301      	str	r3, [sp, #4]
 800ed8a:	f000 fbe5 	bl	800f558 <_vfiprintf_r>
 800ed8e:	b003      	add	sp, #12
 800ed90:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed94:	b004      	add	sp, #16
 800ed96:	4770      	bx	lr
 800ed98:	200002cc 	.word	0x200002cc

0800ed9c <putchar>:
 800ed9c:	4b02      	ldr	r3, [pc, #8]	@ (800eda8 <putchar+0xc>)
 800ed9e:	4601      	mov	r1, r0
 800eda0:	6818      	ldr	r0, [r3, #0]
 800eda2:	6882      	ldr	r2, [r0, #8]
 800eda4:	f000 bf8c 	b.w	800fcc0 <_putc_r>
 800eda8:	200002cc 	.word	0x200002cc

0800edac <_puts_r>:
 800edac:	6a03      	ldr	r3, [r0, #32]
 800edae:	b570      	push	{r4, r5, r6, lr}
 800edb0:	6884      	ldr	r4, [r0, #8]
 800edb2:	4605      	mov	r5, r0
 800edb4:	460e      	mov	r6, r1
 800edb6:	b90b      	cbnz	r3, 800edbc <_puts_r+0x10>
 800edb8:	f7ff ffa8 	bl	800ed0c <__sinit>
 800edbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800edbe:	07db      	lsls	r3, r3, #31
 800edc0:	d405      	bmi.n	800edce <_puts_r+0x22>
 800edc2:	89a3      	ldrh	r3, [r4, #12]
 800edc4:	0598      	lsls	r0, r3, #22
 800edc6:	d402      	bmi.n	800edce <_puts_r+0x22>
 800edc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800edca:	f000 f9ee 	bl	800f1aa <__retarget_lock_acquire_recursive>
 800edce:	89a3      	ldrh	r3, [r4, #12]
 800edd0:	0719      	lsls	r1, r3, #28
 800edd2:	d502      	bpl.n	800edda <_puts_r+0x2e>
 800edd4:	6923      	ldr	r3, [r4, #16]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d135      	bne.n	800ee46 <_puts_r+0x9a>
 800edda:	4621      	mov	r1, r4
 800eddc:	4628      	mov	r0, r5
 800edde:	f000 f905 	bl	800efec <__swsetup_r>
 800ede2:	b380      	cbz	r0, 800ee46 <_puts_r+0x9a>
 800ede4:	f04f 35ff 	mov.w	r5, #4294967295
 800ede8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800edea:	07da      	lsls	r2, r3, #31
 800edec:	d405      	bmi.n	800edfa <_puts_r+0x4e>
 800edee:	89a3      	ldrh	r3, [r4, #12]
 800edf0:	059b      	lsls	r3, r3, #22
 800edf2:	d402      	bmi.n	800edfa <_puts_r+0x4e>
 800edf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800edf6:	f000 f9d9 	bl	800f1ac <__retarget_lock_release_recursive>
 800edfa:	4628      	mov	r0, r5
 800edfc:	bd70      	pop	{r4, r5, r6, pc}
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	da04      	bge.n	800ee0c <_puts_r+0x60>
 800ee02:	69a2      	ldr	r2, [r4, #24]
 800ee04:	429a      	cmp	r2, r3
 800ee06:	dc17      	bgt.n	800ee38 <_puts_r+0x8c>
 800ee08:	290a      	cmp	r1, #10
 800ee0a:	d015      	beq.n	800ee38 <_puts_r+0x8c>
 800ee0c:	6823      	ldr	r3, [r4, #0]
 800ee0e:	1c5a      	adds	r2, r3, #1
 800ee10:	6022      	str	r2, [r4, #0]
 800ee12:	7019      	strb	r1, [r3, #0]
 800ee14:	68a3      	ldr	r3, [r4, #8]
 800ee16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ee1a:	3b01      	subs	r3, #1
 800ee1c:	60a3      	str	r3, [r4, #8]
 800ee1e:	2900      	cmp	r1, #0
 800ee20:	d1ed      	bne.n	800edfe <_puts_r+0x52>
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	da11      	bge.n	800ee4a <_puts_r+0x9e>
 800ee26:	4622      	mov	r2, r4
 800ee28:	210a      	movs	r1, #10
 800ee2a:	4628      	mov	r0, r5
 800ee2c:	f000 f8a0 	bl	800ef70 <__swbuf_r>
 800ee30:	3001      	adds	r0, #1
 800ee32:	d0d7      	beq.n	800ede4 <_puts_r+0x38>
 800ee34:	250a      	movs	r5, #10
 800ee36:	e7d7      	b.n	800ede8 <_puts_r+0x3c>
 800ee38:	4622      	mov	r2, r4
 800ee3a:	4628      	mov	r0, r5
 800ee3c:	f000 f898 	bl	800ef70 <__swbuf_r>
 800ee40:	3001      	adds	r0, #1
 800ee42:	d1e7      	bne.n	800ee14 <_puts_r+0x68>
 800ee44:	e7ce      	b.n	800ede4 <_puts_r+0x38>
 800ee46:	3e01      	subs	r6, #1
 800ee48:	e7e4      	b.n	800ee14 <_puts_r+0x68>
 800ee4a:	6823      	ldr	r3, [r4, #0]
 800ee4c:	1c5a      	adds	r2, r3, #1
 800ee4e:	6022      	str	r2, [r4, #0]
 800ee50:	220a      	movs	r2, #10
 800ee52:	701a      	strb	r2, [r3, #0]
 800ee54:	e7ee      	b.n	800ee34 <_puts_r+0x88>
	...

0800ee58 <puts>:
 800ee58:	4b02      	ldr	r3, [pc, #8]	@ (800ee64 <puts+0xc>)
 800ee5a:	4601      	mov	r1, r0
 800ee5c:	6818      	ldr	r0, [r3, #0]
 800ee5e:	f7ff bfa5 	b.w	800edac <_puts_r>
 800ee62:	bf00      	nop
 800ee64:	200002cc 	.word	0x200002cc

0800ee68 <siprintf>:
 800ee68:	b40e      	push	{r1, r2, r3}
 800ee6a:	b500      	push	{lr}
 800ee6c:	b09c      	sub	sp, #112	@ 0x70
 800ee6e:	ab1d      	add	r3, sp, #116	@ 0x74
 800ee70:	9002      	str	r0, [sp, #8]
 800ee72:	9006      	str	r0, [sp, #24]
 800ee74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ee78:	4809      	ldr	r0, [pc, #36]	@ (800eea0 <siprintf+0x38>)
 800ee7a:	9107      	str	r1, [sp, #28]
 800ee7c:	9104      	str	r1, [sp, #16]
 800ee7e:	4909      	ldr	r1, [pc, #36]	@ (800eea4 <siprintf+0x3c>)
 800ee80:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee84:	9105      	str	r1, [sp, #20]
 800ee86:	6800      	ldr	r0, [r0, #0]
 800ee88:	9301      	str	r3, [sp, #4]
 800ee8a:	a902      	add	r1, sp, #8
 800ee8c:	f000 fa3e 	bl	800f30c <_svfiprintf_r>
 800ee90:	9b02      	ldr	r3, [sp, #8]
 800ee92:	2200      	movs	r2, #0
 800ee94:	701a      	strb	r2, [r3, #0]
 800ee96:	b01c      	add	sp, #112	@ 0x70
 800ee98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee9c:	b003      	add	sp, #12
 800ee9e:	4770      	bx	lr
 800eea0:	200002cc 	.word	0x200002cc
 800eea4:	ffff0208 	.word	0xffff0208

0800eea8 <__sread>:
 800eea8:	b510      	push	{r4, lr}
 800eeaa:	460c      	mov	r4, r1
 800eeac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeb0:	f000 f91c 	bl	800f0ec <_read_r>
 800eeb4:	2800      	cmp	r0, #0
 800eeb6:	bfab      	itete	ge
 800eeb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eeba:	89a3      	ldrhlt	r3, [r4, #12]
 800eebc:	181b      	addge	r3, r3, r0
 800eebe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eec2:	bfac      	ite	ge
 800eec4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eec6:	81a3      	strhlt	r3, [r4, #12]
 800eec8:	bd10      	pop	{r4, pc}

0800eeca <__swrite>:
 800eeca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eece:	461f      	mov	r7, r3
 800eed0:	898b      	ldrh	r3, [r1, #12]
 800eed2:	05db      	lsls	r3, r3, #23
 800eed4:	4605      	mov	r5, r0
 800eed6:	460c      	mov	r4, r1
 800eed8:	4616      	mov	r6, r2
 800eeda:	d505      	bpl.n	800eee8 <__swrite+0x1e>
 800eedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eee0:	2302      	movs	r3, #2
 800eee2:	2200      	movs	r2, #0
 800eee4:	f000 f8f0 	bl	800f0c8 <_lseek_r>
 800eee8:	89a3      	ldrh	r3, [r4, #12]
 800eeea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eeee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eef2:	81a3      	strh	r3, [r4, #12]
 800eef4:	4632      	mov	r2, r6
 800eef6:	463b      	mov	r3, r7
 800eef8:	4628      	mov	r0, r5
 800eefa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eefe:	f000 b917 	b.w	800f130 <_write_r>

0800ef02 <__sseek>:
 800ef02:	b510      	push	{r4, lr}
 800ef04:	460c      	mov	r4, r1
 800ef06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef0a:	f000 f8dd 	bl	800f0c8 <_lseek_r>
 800ef0e:	1c43      	adds	r3, r0, #1
 800ef10:	89a3      	ldrh	r3, [r4, #12]
 800ef12:	bf15      	itete	ne
 800ef14:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ef16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ef1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ef1e:	81a3      	strheq	r3, [r4, #12]
 800ef20:	bf18      	it	ne
 800ef22:	81a3      	strhne	r3, [r4, #12]
 800ef24:	bd10      	pop	{r4, pc}

0800ef26 <__sclose>:
 800ef26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef2a:	f000 b8bd 	b.w	800f0a8 <_close_r>
	...

0800ef30 <_vsiprintf_r>:
 800ef30:	b500      	push	{lr}
 800ef32:	b09b      	sub	sp, #108	@ 0x6c
 800ef34:	9100      	str	r1, [sp, #0]
 800ef36:	9104      	str	r1, [sp, #16]
 800ef38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ef3c:	9105      	str	r1, [sp, #20]
 800ef3e:	9102      	str	r1, [sp, #8]
 800ef40:	4905      	ldr	r1, [pc, #20]	@ (800ef58 <_vsiprintf_r+0x28>)
 800ef42:	9103      	str	r1, [sp, #12]
 800ef44:	4669      	mov	r1, sp
 800ef46:	f000 f9e1 	bl	800f30c <_svfiprintf_r>
 800ef4a:	9b00      	ldr	r3, [sp, #0]
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	701a      	strb	r2, [r3, #0]
 800ef50:	b01b      	add	sp, #108	@ 0x6c
 800ef52:	f85d fb04 	ldr.w	pc, [sp], #4
 800ef56:	bf00      	nop
 800ef58:	ffff0208 	.word	0xffff0208

0800ef5c <vsiprintf>:
 800ef5c:	4613      	mov	r3, r2
 800ef5e:	460a      	mov	r2, r1
 800ef60:	4601      	mov	r1, r0
 800ef62:	4802      	ldr	r0, [pc, #8]	@ (800ef6c <vsiprintf+0x10>)
 800ef64:	6800      	ldr	r0, [r0, #0]
 800ef66:	f7ff bfe3 	b.w	800ef30 <_vsiprintf_r>
 800ef6a:	bf00      	nop
 800ef6c:	200002cc 	.word	0x200002cc

0800ef70 <__swbuf_r>:
 800ef70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef72:	460e      	mov	r6, r1
 800ef74:	4614      	mov	r4, r2
 800ef76:	4605      	mov	r5, r0
 800ef78:	b118      	cbz	r0, 800ef82 <__swbuf_r+0x12>
 800ef7a:	6a03      	ldr	r3, [r0, #32]
 800ef7c:	b90b      	cbnz	r3, 800ef82 <__swbuf_r+0x12>
 800ef7e:	f7ff fec5 	bl	800ed0c <__sinit>
 800ef82:	69a3      	ldr	r3, [r4, #24]
 800ef84:	60a3      	str	r3, [r4, #8]
 800ef86:	89a3      	ldrh	r3, [r4, #12]
 800ef88:	071a      	lsls	r2, r3, #28
 800ef8a:	d501      	bpl.n	800ef90 <__swbuf_r+0x20>
 800ef8c:	6923      	ldr	r3, [r4, #16]
 800ef8e:	b943      	cbnz	r3, 800efa2 <__swbuf_r+0x32>
 800ef90:	4621      	mov	r1, r4
 800ef92:	4628      	mov	r0, r5
 800ef94:	f000 f82a 	bl	800efec <__swsetup_r>
 800ef98:	b118      	cbz	r0, 800efa2 <__swbuf_r+0x32>
 800ef9a:	f04f 37ff 	mov.w	r7, #4294967295
 800ef9e:	4638      	mov	r0, r7
 800efa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efa2:	6823      	ldr	r3, [r4, #0]
 800efa4:	6922      	ldr	r2, [r4, #16]
 800efa6:	1a98      	subs	r0, r3, r2
 800efa8:	6963      	ldr	r3, [r4, #20]
 800efaa:	b2f6      	uxtb	r6, r6
 800efac:	4283      	cmp	r3, r0
 800efae:	4637      	mov	r7, r6
 800efb0:	dc05      	bgt.n	800efbe <__swbuf_r+0x4e>
 800efb2:	4621      	mov	r1, r4
 800efb4:	4628      	mov	r0, r5
 800efb6:	f000 fdf9 	bl	800fbac <_fflush_r>
 800efba:	2800      	cmp	r0, #0
 800efbc:	d1ed      	bne.n	800ef9a <__swbuf_r+0x2a>
 800efbe:	68a3      	ldr	r3, [r4, #8]
 800efc0:	3b01      	subs	r3, #1
 800efc2:	60a3      	str	r3, [r4, #8]
 800efc4:	6823      	ldr	r3, [r4, #0]
 800efc6:	1c5a      	adds	r2, r3, #1
 800efc8:	6022      	str	r2, [r4, #0]
 800efca:	701e      	strb	r6, [r3, #0]
 800efcc:	6962      	ldr	r2, [r4, #20]
 800efce:	1c43      	adds	r3, r0, #1
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d004      	beq.n	800efde <__swbuf_r+0x6e>
 800efd4:	89a3      	ldrh	r3, [r4, #12]
 800efd6:	07db      	lsls	r3, r3, #31
 800efd8:	d5e1      	bpl.n	800ef9e <__swbuf_r+0x2e>
 800efda:	2e0a      	cmp	r6, #10
 800efdc:	d1df      	bne.n	800ef9e <__swbuf_r+0x2e>
 800efde:	4621      	mov	r1, r4
 800efe0:	4628      	mov	r0, r5
 800efe2:	f000 fde3 	bl	800fbac <_fflush_r>
 800efe6:	2800      	cmp	r0, #0
 800efe8:	d0d9      	beq.n	800ef9e <__swbuf_r+0x2e>
 800efea:	e7d6      	b.n	800ef9a <__swbuf_r+0x2a>

0800efec <__swsetup_r>:
 800efec:	b538      	push	{r3, r4, r5, lr}
 800efee:	4b29      	ldr	r3, [pc, #164]	@ (800f094 <__swsetup_r+0xa8>)
 800eff0:	4605      	mov	r5, r0
 800eff2:	6818      	ldr	r0, [r3, #0]
 800eff4:	460c      	mov	r4, r1
 800eff6:	b118      	cbz	r0, 800f000 <__swsetup_r+0x14>
 800eff8:	6a03      	ldr	r3, [r0, #32]
 800effa:	b90b      	cbnz	r3, 800f000 <__swsetup_r+0x14>
 800effc:	f7ff fe86 	bl	800ed0c <__sinit>
 800f000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f004:	0719      	lsls	r1, r3, #28
 800f006:	d422      	bmi.n	800f04e <__swsetup_r+0x62>
 800f008:	06da      	lsls	r2, r3, #27
 800f00a:	d407      	bmi.n	800f01c <__swsetup_r+0x30>
 800f00c:	2209      	movs	r2, #9
 800f00e:	602a      	str	r2, [r5, #0]
 800f010:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f014:	81a3      	strh	r3, [r4, #12]
 800f016:	f04f 30ff 	mov.w	r0, #4294967295
 800f01a:	e033      	b.n	800f084 <__swsetup_r+0x98>
 800f01c:	0758      	lsls	r0, r3, #29
 800f01e:	d512      	bpl.n	800f046 <__swsetup_r+0x5a>
 800f020:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f022:	b141      	cbz	r1, 800f036 <__swsetup_r+0x4a>
 800f024:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f028:	4299      	cmp	r1, r3
 800f02a:	d002      	beq.n	800f032 <__swsetup_r+0x46>
 800f02c:	4628      	mov	r0, r5
 800f02e:	f000 f8c7 	bl	800f1c0 <_free_r>
 800f032:	2300      	movs	r3, #0
 800f034:	6363      	str	r3, [r4, #52]	@ 0x34
 800f036:	89a3      	ldrh	r3, [r4, #12]
 800f038:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f03c:	81a3      	strh	r3, [r4, #12]
 800f03e:	2300      	movs	r3, #0
 800f040:	6063      	str	r3, [r4, #4]
 800f042:	6923      	ldr	r3, [r4, #16]
 800f044:	6023      	str	r3, [r4, #0]
 800f046:	89a3      	ldrh	r3, [r4, #12]
 800f048:	f043 0308 	orr.w	r3, r3, #8
 800f04c:	81a3      	strh	r3, [r4, #12]
 800f04e:	6923      	ldr	r3, [r4, #16]
 800f050:	b94b      	cbnz	r3, 800f066 <__swsetup_r+0x7a>
 800f052:	89a3      	ldrh	r3, [r4, #12]
 800f054:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f05c:	d003      	beq.n	800f066 <__swsetup_r+0x7a>
 800f05e:	4621      	mov	r1, r4
 800f060:	4628      	mov	r0, r5
 800f062:	f000 fdf1 	bl	800fc48 <__smakebuf_r>
 800f066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f06a:	f013 0201 	ands.w	r2, r3, #1
 800f06e:	d00a      	beq.n	800f086 <__swsetup_r+0x9a>
 800f070:	2200      	movs	r2, #0
 800f072:	60a2      	str	r2, [r4, #8]
 800f074:	6962      	ldr	r2, [r4, #20]
 800f076:	4252      	negs	r2, r2
 800f078:	61a2      	str	r2, [r4, #24]
 800f07a:	6922      	ldr	r2, [r4, #16]
 800f07c:	b942      	cbnz	r2, 800f090 <__swsetup_r+0xa4>
 800f07e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f082:	d1c5      	bne.n	800f010 <__swsetup_r+0x24>
 800f084:	bd38      	pop	{r3, r4, r5, pc}
 800f086:	0799      	lsls	r1, r3, #30
 800f088:	bf58      	it	pl
 800f08a:	6962      	ldrpl	r2, [r4, #20]
 800f08c:	60a2      	str	r2, [r4, #8]
 800f08e:	e7f4      	b.n	800f07a <__swsetup_r+0x8e>
 800f090:	2000      	movs	r0, #0
 800f092:	e7f7      	b.n	800f084 <__swsetup_r+0x98>
 800f094:	200002cc 	.word	0x200002cc

0800f098 <memset>:
 800f098:	4402      	add	r2, r0
 800f09a:	4603      	mov	r3, r0
 800f09c:	4293      	cmp	r3, r2
 800f09e:	d100      	bne.n	800f0a2 <memset+0xa>
 800f0a0:	4770      	bx	lr
 800f0a2:	f803 1b01 	strb.w	r1, [r3], #1
 800f0a6:	e7f9      	b.n	800f09c <memset+0x4>

0800f0a8 <_close_r>:
 800f0a8:	b538      	push	{r3, r4, r5, lr}
 800f0aa:	4d06      	ldr	r5, [pc, #24]	@ (800f0c4 <_close_r+0x1c>)
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	4604      	mov	r4, r0
 800f0b0:	4608      	mov	r0, r1
 800f0b2:	602b      	str	r3, [r5, #0]
 800f0b4:	f7f5 f933 	bl	800431e <_close>
 800f0b8:	1c43      	adds	r3, r0, #1
 800f0ba:	d102      	bne.n	800f0c2 <_close_r+0x1a>
 800f0bc:	682b      	ldr	r3, [r5, #0]
 800f0be:	b103      	cbz	r3, 800f0c2 <_close_r+0x1a>
 800f0c0:	6023      	str	r3, [r4, #0]
 800f0c2:	bd38      	pop	{r3, r4, r5, pc}
 800f0c4:	20012bd8 	.word	0x20012bd8

0800f0c8 <_lseek_r>:
 800f0c8:	b538      	push	{r3, r4, r5, lr}
 800f0ca:	4d07      	ldr	r5, [pc, #28]	@ (800f0e8 <_lseek_r+0x20>)
 800f0cc:	4604      	mov	r4, r0
 800f0ce:	4608      	mov	r0, r1
 800f0d0:	4611      	mov	r1, r2
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	602a      	str	r2, [r5, #0]
 800f0d6:	461a      	mov	r2, r3
 800f0d8:	f7f5 f948 	bl	800436c <_lseek>
 800f0dc:	1c43      	adds	r3, r0, #1
 800f0de:	d102      	bne.n	800f0e6 <_lseek_r+0x1e>
 800f0e0:	682b      	ldr	r3, [r5, #0]
 800f0e2:	b103      	cbz	r3, 800f0e6 <_lseek_r+0x1e>
 800f0e4:	6023      	str	r3, [r4, #0]
 800f0e6:	bd38      	pop	{r3, r4, r5, pc}
 800f0e8:	20012bd8 	.word	0x20012bd8

0800f0ec <_read_r>:
 800f0ec:	b538      	push	{r3, r4, r5, lr}
 800f0ee:	4d07      	ldr	r5, [pc, #28]	@ (800f10c <_read_r+0x20>)
 800f0f0:	4604      	mov	r4, r0
 800f0f2:	4608      	mov	r0, r1
 800f0f4:	4611      	mov	r1, r2
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	602a      	str	r2, [r5, #0]
 800f0fa:	461a      	mov	r2, r3
 800f0fc:	f7f5 f8f2 	bl	80042e4 <_read>
 800f100:	1c43      	adds	r3, r0, #1
 800f102:	d102      	bne.n	800f10a <_read_r+0x1e>
 800f104:	682b      	ldr	r3, [r5, #0]
 800f106:	b103      	cbz	r3, 800f10a <_read_r+0x1e>
 800f108:	6023      	str	r3, [r4, #0]
 800f10a:	bd38      	pop	{r3, r4, r5, pc}
 800f10c:	20012bd8 	.word	0x20012bd8

0800f110 <_sbrk_r>:
 800f110:	b538      	push	{r3, r4, r5, lr}
 800f112:	4d06      	ldr	r5, [pc, #24]	@ (800f12c <_sbrk_r+0x1c>)
 800f114:	2300      	movs	r3, #0
 800f116:	4604      	mov	r4, r0
 800f118:	4608      	mov	r0, r1
 800f11a:	602b      	str	r3, [r5, #0]
 800f11c:	f7f5 f934 	bl	8004388 <_sbrk>
 800f120:	1c43      	adds	r3, r0, #1
 800f122:	d102      	bne.n	800f12a <_sbrk_r+0x1a>
 800f124:	682b      	ldr	r3, [r5, #0]
 800f126:	b103      	cbz	r3, 800f12a <_sbrk_r+0x1a>
 800f128:	6023      	str	r3, [r4, #0]
 800f12a:	bd38      	pop	{r3, r4, r5, pc}
 800f12c:	20012bd8 	.word	0x20012bd8

0800f130 <_write_r>:
 800f130:	b538      	push	{r3, r4, r5, lr}
 800f132:	4d07      	ldr	r5, [pc, #28]	@ (800f150 <_write_r+0x20>)
 800f134:	4604      	mov	r4, r0
 800f136:	4608      	mov	r0, r1
 800f138:	4611      	mov	r1, r2
 800f13a:	2200      	movs	r2, #0
 800f13c:	602a      	str	r2, [r5, #0]
 800f13e:	461a      	mov	r2, r3
 800f140:	f7f2 f862 	bl	8001208 <_write>
 800f144:	1c43      	adds	r3, r0, #1
 800f146:	d102      	bne.n	800f14e <_write_r+0x1e>
 800f148:	682b      	ldr	r3, [r5, #0]
 800f14a:	b103      	cbz	r3, 800f14e <_write_r+0x1e>
 800f14c:	6023      	str	r3, [r4, #0]
 800f14e:	bd38      	pop	{r3, r4, r5, pc}
 800f150:	20012bd8 	.word	0x20012bd8

0800f154 <__errno>:
 800f154:	4b01      	ldr	r3, [pc, #4]	@ (800f15c <__errno+0x8>)
 800f156:	6818      	ldr	r0, [r3, #0]
 800f158:	4770      	bx	lr
 800f15a:	bf00      	nop
 800f15c:	200002cc 	.word	0x200002cc

0800f160 <__libc_init_array>:
 800f160:	b570      	push	{r4, r5, r6, lr}
 800f162:	4d0d      	ldr	r5, [pc, #52]	@ (800f198 <__libc_init_array+0x38>)
 800f164:	4c0d      	ldr	r4, [pc, #52]	@ (800f19c <__libc_init_array+0x3c>)
 800f166:	1b64      	subs	r4, r4, r5
 800f168:	10a4      	asrs	r4, r4, #2
 800f16a:	2600      	movs	r6, #0
 800f16c:	42a6      	cmp	r6, r4
 800f16e:	d109      	bne.n	800f184 <__libc_init_array+0x24>
 800f170:	4d0b      	ldr	r5, [pc, #44]	@ (800f1a0 <__libc_init_array+0x40>)
 800f172:	4c0c      	ldr	r4, [pc, #48]	@ (800f1a4 <__libc_init_array+0x44>)
 800f174:	f000 fe58 	bl	800fe28 <_init>
 800f178:	1b64      	subs	r4, r4, r5
 800f17a:	10a4      	asrs	r4, r4, #2
 800f17c:	2600      	movs	r6, #0
 800f17e:	42a6      	cmp	r6, r4
 800f180:	d105      	bne.n	800f18e <__libc_init_array+0x2e>
 800f182:	bd70      	pop	{r4, r5, r6, pc}
 800f184:	f855 3b04 	ldr.w	r3, [r5], #4
 800f188:	4798      	blx	r3
 800f18a:	3601      	adds	r6, #1
 800f18c:	e7ee      	b.n	800f16c <__libc_init_array+0xc>
 800f18e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f192:	4798      	blx	r3
 800f194:	3601      	adds	r6, #1
 800f196:	e7f2      	b.n	800f17e <__libc_init_array+0x1e>
 800f198:	08012aa8 	.word	0x08012aa8
 800f19c:	08012aa8 	.word	0x08012aa8
 800f1a0:	08012aa8 	.word	0x08012aa8
 800f1a4:	08012aac 	.word	0x08012aac

0800f1a8 <__retarget_lock_init_recursive>:
 800f1a8:	4770      	bx	lr

0800f1aa <__retarget_lock_acquire_recursive>:
 800f1aa:	4770      	bx	lr

0800f1ac <__retarget_lock_release_recursive>:
 800f1ac:	4770      	bx	lr

0800f1ae <strcpy>:
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1b4:	f803 2b01 	strb.w	r2, [r3], #1
 800f1b8:	2a00      	cmp	r2, #0
 800f1ba:	d1f9      	bne.n	800f1b0 <strcpy+0x2>
 800f1bc:	4770      	bx	lr
	...

0800f1c0 <_free_r>:
 800f1c0:	b538      	push	{r3, r4, r5, lr}
 800f1c2:	4605      	mov	r5, r0
 800f1c4:	2900      	cmp	r1, #0
 800f1c6:	d041      	beq.n	800f24c <_free_r+0x8c>
 800f1c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1cc:	1f0c      	subs	r4, r1, #4
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	bfb8      	it	lt
 800f1d2:	18e4      	addlt	r4, r4, r3
 800f1d4:	f7ff fc7e 	bl	800ead4 <__malloc_lock>
 800f1d8:	4a1d      	ldr	r2, [pc, #116]	@ (800f250 <_free_r+0x90>)
 800f1da:	6813      	ldr	r3, [r2, #0]
 800f1dc:	b933      	cbnz	r3, 800f1ec <_free_r+0x2c>
 800f1de:	6063      	str	r3, [r4, #4]
 800f1e0:	6014      	str	r4, [r2, #0]
 800f1e2:	4628      	mov	r0, r5
 800f1e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1e8:	f7ff bc7a 	b.w	800eae0 <__malloc_unlock>
 800f1ec:	42a3      	cmp	r3, r4
 800f1ee:	d908      	bls.n	800f202 <_free_r+0x42>
 800f1f0:	6820      	ldr	r0, [r4, #0]
 800f1f2:	1821      	adds	r1, r4, r0
 800f1f4:	428b      	cmp	r3, r1
 800f1f6:	bf01      	itttt	eq
 800f1f8:	6819      	ldreq	r1, [r3, #0]
 800f1fa:	685b      	ldreq	r3, [r3, #4]
 800f1fc:	1809      	addeq	r1, r1, r0
 800f1fe:	6021      	streq	r1, [r4, #0]
 800f200:	e7ed      	b.n	800f1de <_free_r+0x1e>
 800f202:	461a      	mov	r2, r3
 800f204:	685b      	ldr	r3, [r3, #4]
 800f206:	b10b      	cbz	r3, 800f20c <_free_r+0x4c>
 800f208:	42a3      	cmp	r3, r4
 800f20a:	d9fa      	bls.n	800f202 <_free_r+0x42>
 800f20c:	6811      	ldr	r1, [r2, #0]
 800f20e:	1850      	adds	r0, r2, r1
 800f210:	42a0      	cmp	r0, r4
 800f212:	d10b      	bne.n	800f22c <_free_r+0x6c>
 800f214:	6820      	ldr	r0, [r4, #0]
 800f216:	4401      	add	r1, r0
 800f218:	1850      	adds	r0, r2, r1
 800f21a:	4283      	cmp	r3, r0
 800f21c:	6011      	str	r1, [r2, #0]
 800f21e:	d1e0      	bne.n	800f1e2 <_free_r+0x22>
 800f220:	6818      	ldr	r0, [r3, #0]
 800f222:	685b      	ldr	r3, [r3, #4]
 800f224:	6053      	str	r3, [r2, #4]
 800f226:	4408      	add	r0, r1
 800f228:	6010      	str	r0, [r2, #0]
 800f22a:	e7da      	b.n	800f1e2 <_free_r+0x22>
 800f22c:	d902      	bls.n	800f234 <_free_r+0x74>
 800f22e:	230c      	movs	r3, #12
 800f230:	602b      	str	r3, [r5, #0]
 800f232:	e7d6      	b.n	800f1e2 <_free_r+0x22>
 800f234:	6820      	ldr	r0, [r4, #0]
 800f236:	1821      	adds	r1, r4, r0
 800f238:	428b      	cmp	r3, r1
 800f23a:	bf04      	itt	eq
 800f23c:	6819      	ldreq	r1, [r3, #0]
 800f23e:	685b      	ldreq	r3, [r3, #4]
 800f240:	6063      	str	r3, [r4, #4]
 800f242:	bf04      	itt	eq
 800f244:	1809      	addeq	r1, r1, r0
 800f246:	6021      	streq	r1, [r4, #0]
 800f248:	6054      	str	r4, [r2, #4]
 800f24a:	e7ca      	b.n	800f1e2 <_free_r+0x22>
 800f24c:	bd38      	pop	{r3, r4, r5, pc}
 800f24e:	bf00      	nop
 800f250:	20012a98 	.word	0x20012a98

0800f254 <__ssputs_r>:
 800f254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f258:	688e      	ldr	r6, [r1, #8]
 800f25a:	461f      	mov	r7, r3
 800f25c:	42be      	cmp	r6, r7
 800f25e:	680b      	ldr	r3, [r1, #0]
 800f260:	4682      	mov	sl, r0
 800f262:	460c      	mov	r4, r1
 800f264:	4690      	mov	r8, r2
 800f266:	d82d      	bhi.n	800f2c4 <__ssputs_r+0x70>
 800f268:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f26c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f270:	d026      	beq.n	800f2c0 <__ssputs_r+0x6c>
 800f272:	6965      	ldr	r5, [r4, #20]
 800f274:	6909      	ldr	r1, [r1, #16]
 800f276:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f27a:	eba3 0901 	sub.w	r9, r3, r1
 800f27e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f282:	1c7b      	adds	r3, r7, #1
 800f284:	444b      	add	r3, r9
 800f286:	106d      	asrs	r5, r5, #1
 800f288:	429d      	cmp	r5, r3
 800f28a:	bf38      	it	cc
 800f28c:	461d      	movcc	r5, r3
 800f28e:	0553      	lsls	r3, r2, #21
 800f290:	d527      	bpl.n	800f2e2 <__ssputs_r+0x8e>
 800f292:	4629      	mov	r1, r5
 800f294:	f7ff fb9e 	bl	800e9d4 <_malloc_r>
 800f298:	4606      	mov	r6, r0
 800f29a:	b360      	cbz	r0, 800f2f6 <__ssputs_r+0xa2>
 800f29c:	6921      	ldr	r1, [r4, #16]
 800f29e:	464a      	mov	r2, r9
 800f2a0:	f000 fd7e 	bl	800fda0 <memcpy>
 800f2a4:	89a3      	ldrh	r3, [r4, #12]
 800f2a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f2aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2ae:	81a3      	strh	r3, [r4, #12]
 800f2b0:	6126      	str	r6, [r4, #16]
 800f2b2:	6165      	str	r5, [r4, #20]
 800f2b4:	444e      	add	r6, r9
 800f2b6:	eba5 0509 	sub.w	r5, r5, r9
 800f2ba:	6026      	str	r6, [r4, #0]
 800f2bc:	60a5      	str	r5, [r4, #8]
 800f2be:	463e      	mov	r6, r7
 800f2c0:	42be      	cmp	r6, r7
 800f2c2:	d900      	bls.n	800f2c6 <__ssputs_r+0x72>
 800f2c4:	463e      	mov	r6, r7
 800f2c6:	6820      	ldr	r0, [r4, #0]
 800f2c8:	4632      	mov	r2, r6
 800f2ca:	4641      	mov	r1, r8
 800f2cc:	f000 fd2c 	bl	800fd28 <memmove>
 800f2d0:	68a3      	ldr	r3, [r4, #8]
 800f2d2:	1b9b      	subs	r3, r3, r6
 800f2d4:	60a3      	str	r3, [r4, #8]
 800f2d6:	6823      	ldr	r3, [r4, #0]
 800f2d8:	4433      	add	r3, r6
 800f2da:	6023      	str	r3, [r4, #0]
 800f2dc:	2000      	movs	r0, #0
 800f2de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2e2:	462a      	mov	r2, r5
 800f2e4:	f000 fd6a 	bl	800fdbc <_realloc_r>
 800f2e8:	4606      	mov	r6, r0
 800f2ea:	2800      	cmp	r0, #0
 800f2ec:	d1e0      	bne.n	800f2b0 <__ssputs_r+0x5c>
 800f2ee:	6921      	ldr	r1, [r4, #16]
 800f2f0:	4650      	mov	r0, sl
 800f2f2:	f7ff ff65 	bl	800f1c0 <_free_r>
 800f2f6:	230c      	movs	r3, #12
 800f2f8:	f8ca 3000 	str.w	r3, [sl]
 800f2fc:	89a3      	ldrh	r3, [r4, #12]
 800f2fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f302:	81a3      	strh	r3, [r4, #12]
 800f304:	f04f 30ff 	mov.w	r0, #4294967295
 800f308:	e7e9      	b.n	800f2de <__ssputs_r+0x8a>
	...

0800f30c <_svfiprintf_r>:
 800f30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f310:	4698      	mov	r8, r3
 800f312:	898b      	ldrh	r3, [r1, #12]
 800f314:	061b      	lsls	r3, r3, #24
 800f316:	b09d      	sub	sp, #116	@ 0x74
 800f318:	4607      	mov	r7, r0
 800f31a:	460d      	mov	r5, r1
 800f31c:	4614      	mov	r4, r2
 800f31e:	d510      	bpl.n	800f342 <_svfiprintf_r+0x36>
 800f320:	690b      	ldr	r3, [r1, #16]
 800f322:	b973      	cbnz	r3, 800f342 <_svfiprintf_r+0x36>
 800f324:	2140      	movs	r1, #64	@ 0x40
 800f326:	f7ff fb55 	bl	800e9d4 <_malloc_r>
 800f32a:	6028      	str	r0, [r5, #0]
 800f32c:	6128      	str	r0, [r5, #16]
 800f32e:	b930      	cbnz	r0, 800f33e <_svfiprintf_r+0x32>
 800f330:	230c      	movs	r3, #12
 800f332:	603b      	str	r3, [r7, #0]
 800f334:	f04f 30ff 	mov.w	r0, #4294967295
 800f338:	b01d      	add	sp, #116	@ 0x74
 800f33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f33e:	2340      	movs	r3, #64	@ 0x40
 800f340:	616b      	str	r3, [r5, #20]
 800f342:	2300      	movs	r3, #0
 800f344:	9309      	str	r3, [sp, #36]	@ 0x24
 800f346:	2320      	movs	r3, #32
 800f348:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f34c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f350:	2330      	movs	r3, #48	@ 0x30
 800f352:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f4f0 <_svfiprintf_r+0x1e4>
 800f356:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f35a:	f04f 0901 	mov.w	r9, #1
 800f35e:	4623      	mov	r3, r4
 800f360:	469a      	mov	sl, r3
 800f362:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f366:	b10a      	cbz	r2, 800f36c <_svfiprintf_r+0x60>
 800f368:	2a25      	cmp	r2, #37	@ 0x25
 800f36a:	d1f9      	bne.n	800f360 <_svfiprintf_r+0x54>
 800f36c:	ebba 0b04 	subs.w	fp, sl, r4
 800f370:	d00b      	beq.n	800f38a <_svfiprintf_r+0x7e>
 800f372:	465b      	mov	r3, fp
 800f374:	4622      	mov	r2, r4
 800f376:	4629      	mov	r1, r5
 800f378:	4638      	mov	r0, r7
 800f37a:	f7ff ff6b 	bl	800f254 <__ssputs_r>
 800f37e:	3001      	adds	r0, #1
 800f380:	f000 80a7 	beq.w	800f4d2 <_svfiprintf_r+0x1c6>
 800f384:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f386:	445a      	add	r2, fp
 800f388:	9209      	str	r2, [sp, #36]	@ 0x24
 800f38a:	f89a 3000 	ldrb.w	r3, [sl]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	f000 809f 	beq.w	800f4d2 <_svfiprintf_r+0x1c6>
 800f394:	2300      	movs	r3, #0
 800f396:	f04f 32ff 	mov.w	r2, #4294967295
 800f39a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f39e:	f10a 0a01 	add.w	sl, sl, #1
 800f3a2:	9304      	str	r3, [sp, #16]
 800f3a4:	9307      	str	r3, [sp, #28]
 800f3a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f3aa:	931a      	str	r3, [sp, #104]	@ 0x68
 800f3ac:	4654      	mov	r4, sl
 800f3ae:	2205      	movs	r2, #5
 800f3b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3b4:	484e      	ldr	r0, [pc, #312]	@ (800f4f0 <_svfiprintf_r+0x1e4>)
 800f3b6:	f7f0 ff23 	bl	8000200 <memchr>
 800f3ba:	9a04      	ldr	r2, [sp, #16]
 800f3bc:	b9d8      	cbnz	r0, 800f3f6 <_svfiprintf_r+0xea>
 800f3be:	06d0      	lsls	r0, r2, #27
 800f3c0:	bf44      	itt	mi
 800f3c2:	2320      	movmi	r3, #32
 800f3c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3c8:	0711      	lsls	r1, r2, #28
 800f3ca:	bf44      	itt	mi
 800f3cc:	232b      	movmi	r3, #43	@ 0x2b
 800f3ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3d2:	f89a 3000 	ldrb.w	r3, [sl]
 800f3d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3d8:	d015      	beq.n	800f406 <_svfiprintf_r+0xfa>
 800f3da:	9a07      	ldr	r2, [sp, #28]
 800f3dc:	4654      	mov	r4, sl
 800f3de:	2000      	movs	r0, #0
 800f3e0:	f04f 0c0a 	mov.w	ip, #10
 800f3e4:	4621      	mov	r1, r4
 800f3e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3ea:	3b30      	subs	r3, #48	@ 0x30
 800f3ec:	2b09      	cmp	r3, #9
 800f3ee:	d94b      	bls.n	800f488 <_svfiprintf_r+0x17c>
 800f3f0:	b1b0      	cbz	r0, 800f420 <_svfiprintf_r+0x114>
 800f3f2:	9207      	str	r2, [sp, #28]
 800f3f4:	e014      	b.n	800f420 <_svfiprintf_r+0x114>
 800f3f6:	eba0 0308 	sub.w	r3, r0, r8
 800f3fa:	fa09 f303 	lsl.w	r3, r9, r3
 800f3fe:	4313      	orrs	r3, r2
 800f400:	9304      	str	r3, [sp, #16]
 800f402:	46a2      	mov	sl, r4
 800f404:	e7d2      	b.n	800f3ac <_svfiprintf_r+0xa0>
 800f406:	9b03      	ldr	r3, [sp, #12]
 800f408:	1d19      	adds	r1, r3, #4
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	9103      	str	r1, [sp, #12]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	bfbb      	ittet	lt
 800f412:	425b      	neglt	r3, r3
 800f414:	f042 0202 	orrlt.w	r2, r2, #2
 800f418:	9307      	strge	r3, [sp, #28]
 800f41a:	9307      	strlt	r3, [sp, #28]
 800f41c:	bfb8      	it	lt
 800f41e:	9204      	strlt	r2, [sp, #16]
 800f420:	7823      	ldrb	r3, [r4, #0]
 800f422:	2b2e      	cmp	r3, #46	@ 0x2e
 800f424:	d10a      	bne.n	800f43c <_svfiprintf_r+0x130>
 800f426:	7863      	ldrb	r3, [r4, #1]
 800f428:	2b2a      	cmp	r3, #42	@ 0x2a
 800f42a:	d132      	bne.n	800f492 <_svfiprintf_r+0x186>
 800f42c:	9b03      	ldr	r3, [sp, #12]
 800f42e:	1d1a      	adds	r2, r3, #4
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	9203      	str	r2, [sp, #12]
 800f434:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f438:	3402      	adds	r4, #2
 800f43a:	9305      	str	r3, [sp, #20]
 800f43c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f500 <_svfiprintf_r+0x1f4>
 800f440:	7821      	ldrb	r1, [r4, #0]
 800f442:	2203      	movs	r2, #3
 800f444:	4650      	mov	r0, sl
 800f446:	f7f0 fedb 	bl	8000200 <memchr>
 800f44a:	b138      	cbz	r0, 800f45c <_svfiprintf_r+0x150>
 800f44c:	9b04      	ldr	r3, [sp, #16]
 800f44e:	eba0 000a 	sub.w	r0, r0, sl
 800f452:	2240      	movs	r2, #64	@ 0x40
 800f454:	4082      	lsls	r2, r0
 800f456:	4313      	orrs	r3, r2
 800f458:	3401      	adds	r4, #1
 800f45a:	9304      	str	r3, [sp, #16]
 800f45c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f460:	4824      	ldr	r0, [pc, #144]	@ (800f4f4 <_svfiprintf_r+0x1e8>)
 800f462:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f466:	2206      	movs	r2, #6
 800f468:	f7f0 feca 	bl	8000200 <memchr>
 800f46c:	2800      	cmp	r0, #0
 800f46e:	d036      	beq.n	800f4de <_svfiprintf_r+0x1d2>
 800f470:	4b21      	ldr	r3, [pc, #132]	@ (800f4f8 <_svfiprintf_r+0x1ec>)
 800f472:	bb1b      	cbnz	r3, 800f4bc <_svfiprintf_r+0x1b0>
 800f474:	9b03      	ldr	r3, [sp, #12]
 800f476:	3307      	adds	r3, #7
 800f478:	f023 0307 	bic.w	r3, r3, #7
 800f47c:	3308      	adds	r3, #8
 800f47e:	9303      	str	r3, [sp, #12]
 800f480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f482:	4433      	add	r3, r6
 800f484:	9309      	str	r3, [sp, #36]	@ 0x24
 800f486:	e76a      	b.n	800f35e <_svfiprintf_r+0x52>
 800f488:	fb0c 3202 	mla	r2, ip, r2, r3
 800f48c:	460c      	mov	r4, r1
 800f48e:	2001      	movs	r0, #1
 800f490:	e7a8      	b.n	800f3e4 <_svfiprintf_r+0xd8>
 800f492:	2300      	movs	r3, #0
 800f494:	3401      	adds	r4, #1
 800f496:	9305      	str	r3, [sp, #20]
 800f498:	4619      	mov	r1, r3
 800f49a:	f04f 0c0a 	mov.w	ip, #10
 800f49e:	4620      	mov	r0, r4
 800f4a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4a4:	3a30      	subs	r2, #48	@ 0x30
 800f4a6:	2a09      	cmp	r2, #9
 800f4a8:	d903      	bls.n	800f4b2 <_svfiprintf_r+0x1a6>
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d0c6      	beq.n	800f43c <_svfiprintf_r+0x130>
 800f4ae:	9105      	str	r1, [sp, #20]
 800f4b0:	e7c4      	b.n	800f43c <_svfiprintf_r+0x130>
 800f4b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f4b6:	4604      	mov	r4, r0
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	e7f0      	b.n	800f49e <_svfiprintf_r+0x192>
 800f4bc:	ab03      	add	r3, sp, #12
 800f4be:	9300      	str	r3, [sp, #0]
 800f4c0:	462a      	mov	r2, r5
 800f4c2:	4b0e      	ldr	r3, [pc, #56]	@ (800f4fc <_svfiprintf_r+0x1f0>)
 800f4c4:	a904      	add	r1, sp, #16
 800f4c6:	4638      	mov	r0, r7
 800f4c8:	f3af 8000 	nop.w
 800f4cc:	1c42      	adds	r2, r0, #1
 800f4ce:	4606      	mov	r6, r0
 800f4d0:	d1d6      	bne.n	800f480 <_svfiprintf_r+0x174>
 800f4d2:	89ab      	ldrh	r3, [r5, #12]
 800f4d4:	065b      	lsls	r3, r3, #25
 800f4d6:	f53f af2d 	bmi.w	800f334 <_svfiprintf_r+0x28>
 800f4da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f4dc:	e72c      	b.n	800f338 <_svfiprintf_r+0x2c>
 800f4de:	ab03      	add	r3, sp, #12
 800f4e0:	9300      	str	r3, [sp, #0]
 800f4e2:	462a      	mov	r2, r5
 800f4e4:	4b05      	ldr	r3, [pc, #20]	@ (800f4fc <_svfiprintf_r+0x1f0>)
 800f4e6:	a904      	add	r1, sp, #16
 800f4e8:	4638      	mov	r0, r7
 800f4ea:	f000 f9bb 	bl	800f864 <_printf_i>
 800f4ee:	e7ed      	b.n	800f4cc <_svfiprintf_r+0x1c0>
 800f4f0:	08012a6d 	.word	0x08012a6d
 800f4f4:	08012a77 	.word	0x08012a77
 800f4f8:	00000000 	.word	0x00000000
 800f4fc:	0800f255 	.word	0x0800f255
 800f500:	08012a73 	.word	0x08012a73

0800f504 <__sfputc_r>:
 800f504:	6893      	ldr	r3, [r2, #8]
 800f506:	3b01      	subs	r3, #1
 800f508:	2b00      	cmp	r3, #0
 800f50a:	b410      	push	{r4}
 800f50c:	6093      	str	r3, [r2, #8]
 800f50e:	da08      	bge.n	800f522 <__sfputc_r+0x1e>
 800f510:	6994      	ldr	r4, [r2, #24]
 800f512:	42a3      	cmp	r3, r4
 800f514:	db01      	blt.n	800f51a <__sfputc_r+0x16>
 800f516:	290a      	cmp	r1, #10
 800f518:	d103      	bne.n	800f522 <__sfputc_r+0x1e>
 800f51a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f51e:	f7ff bd27 	b.w	800ef70 <__swbuf_r>
 800f522:	6813      	ldr	r3, [r2, #0]
 800f524:	1c58      	adds	r0, r3, #1
 800f526:	6010      	str	r0, [r2, #0]
 800f528:	7019      	strb	r1, [r3, #0]
 800f52a:	4608      	mov	r0, r1
 800f52c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f530:	4770      	bx	lr

0800f532 <__sfputs_r>:
 800f532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f534:	4606      	mov	r6, r0
 800f536:	460f      	mov	r7, r1
 800f538:	4614      	mov	r4, r2
 800f53a:	18d5      	adds	r5, r2, r3
 800f53c:	42ac      	cmp	r4, r5
 800f53e:	d101      	bne.n	800f544 <__sfputs_r+0x12>
 800f540:	2000      	movs	r0, #0
 800f542:	e007      	b.n	800f554 <__sfputs_r+0x22>
 800f544:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f548:	463a      	mov	r2, r7
 800f54a:	4630      	mov	r0, r6
 800f54c:	f7ff ffda 	bl	800f504 <__sfputc_r>
 800f550:	1c43      	adds	r3, r0, #1
 800f552:	d1f3      	bne.n	800f53c <__sfputs_r+0xa>
 800f554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f558 <_vfiprintf_r>:
 800f558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f55c:	460d      	mov	r5, r1
 800f55e:	b09d      	sub	sp, #116	@ 0x74
 800f560:	4614      	mov	r4, r2
 800f562:	4698      	mov	r8, r3
 800f564:	4606      	mov	r6, r0
 800f566:	b118      	cbz	r0, 800f570 <_vfiprintf_r+0x18>
 800f568:	6a03      	ldr	r3, [r0, #32]
 800f56a:	b90b      	cbnz	r3, 800f570 <_vfiprintf_r+0x18>
 800f56c:	f7ff fbce 	bl	800ed0c <__sinit>
 800f570:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f572:	07d9      	lsls	r1, r3, #31
 800f574:	d405      	bmi.n	800f582 <_vfiprintf_r+0x2a>
 800f576:	89ab      	ldrh	r3, [r5, #12]
 800f578:	059a      	lsls	r2, r3, #22
 800f57a:	d402      	bmi.n	800f582 <_vfiprintf_r+0x2a>
 800f57c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f57e:	f7ff fe14 	bl	800f1aa <__retarget_lock_acquire_recursive>
 800f582:	89ab      	ldrh	r3, [r5, #12]
 800f584:	071b      	lsls	r3, r3, #28
 800f586:	d501      	bpl.n	800f58c <_vfiprintf_r+0x34>
 800f588:	692b      	ldr	r3, [r5, #16]
 800f58a:	b99b      	cbnz	r3, 800f5b4 <_vfiprintf_r+0x5c>
 800f58c:	4629      	mov	r1, r5
 800f58e:	4630      	mov	r0, r6
 800f590:	f7ff fd2c 	bl	800efec <__swsetup_r>
 800f594:	b170      	cbz	r0, 800f5b4 <_vfiprintf_r+0x5c>
 800f596:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f598:	07dc      	lsls	r4, r3, #31
 800f59a:	d504      	bpl.n	800f5a6 <_vfiprintf_r+0x4e>
 800f59c:	f04f 30ff 	mov.w	r0, #4294967295
 800f5a0:	b01d      	add	sp, #116	@ 0x74
 800f5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5a6:	89ab      	ldrh	r3, [r5, #12]
 800f5a8:	0598      	lsls	r0, r3, #22
 800f5aa:	d4f7      	bmi.n	800f59c <_vfiprintf_r+0x44>
 800f5ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5ae:	f7ff fdfd 	bl	800f1ac <__retarget_lock_release_recursive>
 800f5b2:	e7f3      	b.n	800f59c <_vfiprintf_r+0x44>
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5b8:	2320      	movs	r3, #32
 800f5ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f5be:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5c2:	2330      	movs	r3, #48	@ 0x30
 800f5c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f774 <_vfiprintf_r+0x21c>
 800f5c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f5cc:	f04f 0901 	mov.w	r9, #1
 800f5d0:	4623      	mov	r3, r4
 800f5d2:	469a      	mov	sl, r3
 800f5d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5d8:	b10a      	cbz	r2, 800f5de <_vfiprintf_r+0x86>
 800f5da:	2a25      	cmp	r2, #37	@ 0x25
 800f5dc:	d1f9      	bne.n	800f5d2 <_vfiprintf_r+0x7a>
 800f5de:	ebba 0b04 	subs.w	fp, sl, r4
 800f5e2:	d00b      	beq.n	800f5fc <_vfiprintf_r+0xa4>
 800f5e4:	465b      	mov	r3, fp
 800f5e6:	4622      	mov	r2, r4
 800f5e8:	4629      	mov	r1, r5
 800f5ea:	4630      	mov	r0, r6
 800f5ec:	f7ff ffa1 	bl	800f532 <__sfputs_r>
 800f5f0:	3001      	adds	r0, #1
 800f5f2:	f000 80a7 	beq.w	800f744 <_vfiprintf_r+0x1ec>
 800f5f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f5f8:	445a      	add	r2, fp
 800f5fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800f5fc:	f89a 3000 	ldrb.w	r3, [sl]
 800f600:	2b00      	cmp	r3, #0
 800f602:	f000 809f 	beq.w	800f744 <_vfiprintf_r+0x1ec>
 800f606:	2300      	movs	r3, #0
 800f608:	f04f 32ff 	mov.w	r2, #4294967295
 800f60c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f610:	f10a 0a01 	add.w	sl, sl, #1
 800f614:	9304      	str	r3, [sp, #16]
 800f616:	9307      	str	r3, [sp, #28]
 800f618:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f61c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f61e:	4654      	mov	r4, sl
 800f620:	2205      	movs	r2, #5
 800f622:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f626:	4853      	ldr	r0, [pc, #332]	@ (800f774 <_vfiprintf_r+0x21c>)
 800f628:	f7f0 fdea 	bl	8000200 <memchr>
 800f62c:	9a04      	ldr	r2, [sp, #16]
 800f62e:	b9d8      	cbnz	r0, 800f668 <_vfiprintf_r+0x110>
 800f630:	06d1      	lsls	r1, r2, #27
 800f632:	bf44      	itt	mi
 800f634:	2320      	movmi	r3, #32
 800f636:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f63a:	0713      	lsls	r3, r2, #28
 800f63c:	bf44      	itt	mi
 800f63e:	232b      	movmi	r3, #43	@ 0x2b
 800f640:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f644:	f89a 3000 	ldrb.w	r3, [sl]
 800f648:	2b2a      	cmp	r3, #42	@ 0x2a
 800f64a:	d015      	beq.n	800f678 <_vfiprintf_r+0x120>
 800f64c:	9a07      	ldr	r2, [sp, #28]
 800f64e:	4654      	mov	r4, sl
 800f650:	2000      	movs	r0, #0
 800f652:	f04f 0c0a 	mov.w	ip, #10
 800f656:	4621      	mov	r1, r4
 800f658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f65c:	3b30      	subs	r3, #48	@ 0x30
 800f65e:	2b09      	cmp	r3, #9
 800f660:	d94b      	bls.n	800f6fa <_vfiprintf_r+0x1a2>
 800f662:	b1b0      	cbz	r0, 800f692 <_vfiprintf_r+0x13a>
 800f664:	9207      	str	r2, [sp, #28]
 800f666:	e014      	b.n	800f692 <_vfiprintf_r+0x13a>
 800f668:	eba0 0308 	sub.w	r3, r0, r8
 800f66c:	fa09 f303 	lsl.w	r3, r9, r3
 800f670:	4313      	orrs	r3, r2
 800f672:	9304      	str	r3, [sp, #16]
 800f674:	46a2      	mov	sl, r4
 800f676:	e7d2      	b.n	800f61e <_vfiprintf_r+0xc6>
 800f678:	9b03      	ldr	r3, [sp, #12]
 800f67a:	1d19      	adds	r1, r3, #4
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	9103      	str	r1, [sp, #12]
 800f680:	2b00      	cmp	r3, #0
 800f682:	bfbb      	ittet	lt
 800f684:	425b      	neglt	r3, r3
 800f686:	f042 0202 	orrlt.w	r2, r2, #2
 800f68a:	9307      	strge	r3, [sp, #28]
 800f68c:	9307      	strlt	r3, [sp, #28]
 800f68e:	bfb8      	it	lt
 800f690:	9204      	strlt	r2, [sp, #16]
 800f692:	7823      	ldrb	r3, [r4, #0]
 800f694:	2b2e      	cmp	r3, #46	@ 0x2e
 800f696:	d10a      	bne.n	800f6ae <_vfiprintf_r+0x156>
 800f698:	7863      	ldrb	r3, [r4, #1]
 800f69a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f69c:	d132      	bne.n	800f704 <_vfiprintf_r+0x1ac>
 800f69e:	9b03      	ldr	r3, [sp, #12]
 800f6a0:	1d1a      	adds	r2, r3, #4
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	9203      	str	r2, [sp, #12]
 800f6a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f6aa:	3402      	adds	r4, #2
 800f6ac:	9305      	str	r3, [sp, #20]
 800f6ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f784 <_vfiprintf_r+0x22c>
 800f6b2:	7821      	ldrb	r1, [r4, #0]
 800f6b4:	2203      	movs	r2, #3
 800f6b6:	4650      	mov	r0, sl
 800f6b8:	f7f0 fda2 	bl	8000200 <memchr>
 800f6bc:	b138      	cbz	r0, 800f6ce <_vfiprintf_r+0x176>
 800f6be:	9b04      	ldr	r3, [sp, #16]
 800f6c0:	eba0 000a 	sub.w	r0, r0, sl
 800f6c4:	2240      	movs	r2, #64	@ 0x40
 800f6c6:	4082      	lsls	r2, r0
 800f6c8:	4313      	orrs	r3, r2
 800f6ca:	3401      	adds	r4, #1
 800f6cc:	9304      	str	r3, [sp, #16]
 800f6ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6d2:	4829      	ldr	r0, [pc, #164]	@ (800f778 <_vfiprintf_r+0x220>)
 800f6d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f6d8:	2206      	movs	r2, #6
 800f6da:	f7f0 fd91 	bl	8000200 <memchr>
 800f6de:	2800      	cmp	r0, #0
 800f6e0:	d03f      	beq.n	800f762 <_vfiprintf_r+0x20a>
 800f6e2:	4b26      	ldr	r3, [pc, #152]	@ (800f77c <_vfiprintf_r+0x224>)
 800f6e4:	bb1b      	cbnz	r3, 800f72e <_vfiprintf_r+0x1d6>
 800f6e6:	9b03      	ldr	r3, [sp, #12]
 800f6e8:	3307      	adds	r3, #7
 800f6ea:	f023 0307 	bic.w	r3, r3, #7
 800f6ee:	3308      	adds	r3, #8
 800f6f0:	9303      	str	r3, [sp, #12]
 800f6f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6f4:	443b      	add	r3, r7
 800f6f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6f8:	e76a      	b.n	800f5d0 <_vfiprintf_r+0x78>
 800f6fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800f6fe:	460c      	mov	r4, r1
 800f700:	2001      	movs	r0, #1
 800f702:	e7a8      	b.n	800f656 <_vfiprintf_r+0xfe>
 800f704:	2300      	movs	r3, #0
 800f706:	3401      	adds	r4, #1
 800f708:	9305      	str	r3, [sp, #20]
 800f70a:	4619      	mov	r1, r3
 800f70c:	f04f 0c0a 	mov.w	ip, #10
 800f710:	4620      	mov	r0, r4
 800f712:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f716:	3a30      	subs	r2, #48	@ 0x30
 800f718:	2a09      	cmp	r2, #9
 800f71a:	d903      	bls.n	800f724 <_vfiprintf_r+0x1cc>
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d0c6      	beq.n	800f6ae <_vfiprintf_r+0x156>
 800f720:	9105      	str	r1, [sp, #20]
 800f722:	e7c4      	b.n	800f6ae <_vfiprintf_r+0x156>
 800f724:	fb0c 2101 	mla	r1, ip, r1, r2
 800f728:	4604      	mov	r4, r0
 800f72a:	2301      	movs	r3, #1
 800f72c:	e7f0      	b.n	800f710 <_vfiprintf_r+0x1b8>
 800f72e:	ab03      	add	r3, sp, #12
 800f730:	9300      	str	r3, [sp, #0]
 800f732:	462a      	mov	r2, r5
 800f734:	4b12      	ldr	r3, [pc, #72]	@ (800f780 <_vfiprintf_r+0x228>)
 800f736:	a904      	add	r1, sp, #16
 800f738:	4630      	mov	r0, r6
 800f73a:	f3af 8000 	nop.w
 800f73e:	4607      	mov	r7, r0
 800f740:	1c78      	adds	r0, r7, #1
 800f742:	d1d6      	bne.n	800f6f2 <_vfiprintf_r+0x19a>
 800f744:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f746:	07d9      	lsls	r1, r3, #31
 800f748:	d405      	bmi.n	800f756 <_vfiprintf_r+0x1fe>
 800f74a:	89ab      	ldrh	r3, [r5, #12]
 800f74c:	059a      	lsls	r2, r3, #22
 800f74e:	d402      	bmi.n	800f756 <_vfiprintf_r+0x1fe>
 800f750:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f752:	f7ff fd2b 	bl	800f1ac <__retarget_lock_release_recursive>
 800f756:	89ab      	ldrh	r3, [r5, #12]
 800f758:	065b      	lsls	r3, r3, #25
 800f75a:	f53f af1f 	bmi.w	800f59c <_vfiprintf_r+0x44>
 800f75e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f760:	e71e      	b.n	800f5a0 <_vfiprintf_r+0x48>
 800f762:	ab03      	add	r3, sp, #12
 800f764:	9300      	str	r3, [sp, #0]
 800f766:	462a      	mov	r2, r5
 800f768:	4b05      	ldr	r3, [pc, #20]	@ (800f780 <_vfiprintf_r+0x228>)
 800f76a:	a904      	add	r1, sp, #16
 800f76c:	4630      	mov	r0, r6
 800f76e:	f000 f879 	bl	800f864 <_printf_i>
 800f772:	e7e4      	b.n	800f73e <_vfiprintf_r+0x1e6>
 800f774:	08012a6d 	.word	0x08012a6d
 800f778:	08012a77 	.word	0x08012a77
 800f77c:	00000000 	.word	0x00000000
 800f780:	0800f533 	.word	0x0800f533
 800f784:	08012a73 	.word	0x08012a73

0800f788 <_printf_common>:
 800f788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f78c:	4616      	mov	r6, r2
 800f78e:	4698      	mov	r8, r3
 800f790:	688a      	ldr	r2, [r1, #8]
 800f792:	690b      	ldr	r3, [r1, #16]
 800f794:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f798:	4293      	cmp	r3, r2
 800f79a:	bfb8      	it	lt
 800f79c:	4613      	movlt	r3, r2
 800f79e:	6033      	str	r3, [r6, #0]
 800f7a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f7a4:	4607      	mov	r7, r0
 800f7a6:	460c      	mov	r4, r1
 800f7a8:	b10a      	cbz	r2, 800f7ae <_printf_common+0x26>
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	6033      	str	r3, [r6, #0]
 800f7ae:	6823      	ldr	r3, [r4, #0]
 800f7b0:	0699      	lsls	r1, r3, #26
 800f7b2:	bf42      	ittt	mi
 800f7b4:	6833      	ldrmi	r3, [r6, #0]
 800f7b6:	3302      	addmi	r3, #2
 800f7b8:	6033      	strmi	r3, [r6, #0]
 800f7ba:	6825      	ldr	r5, [r4, #0]
 800f7bc:	f015 0506 	ands.w	r5, r5, #6
 800f7c0:	d106      	bne.n	800f7d0 <_printf_common+0x48>
 800f7c2:	f104 0a19 	add.w	sl, r4, #25
 800f7c6:	68e3      	ldr	r3, [r4, #12]
 800f7c8:	6832      	ldr	r2, [r6, #0]
 800f7ca:	1a9b      	subs	r3, r3, r2
 800f7cc:	42ab      	cmp	r3, r5
 800f7ce:	dc26      	bgt.n	800f81e <_printf_common+0x96>
 800f7d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f7d4:	6822      	ldr	r2, [r4, #0]
 800f7d6:	3b00      	subs	r3, #0
 800f7d8:	bf18      	it	ne
 800f7da:	2301      	movne	r3, #1
 800f7dc:	0692      	lsls	r2, r2, #26
 800f7de:	d42b      	bmi.n	800f838 <_printf_common+0xb0>
 800f7e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f7e4:	4641      	mov	r1, r8
 800f7e6:	4638      	mov	r0, r7
 800f7e8:	47c8      	blx	r9
 800f7ea:	3001      	adds	r0, #1
 800f7ec:	d01e      	beq.n	800f82c <_printf_common+0xa4>
 800f7ee:	6823      	ldr	r3, [r4, #0]
 800f7f0:	6922      	ldr	r2, [r4, #16]
 800f7f2:	f003 0306 	and.w	r3, r3, #6
 800f7f6:	2b04      	cmp	r3, #4
 800f7f8:	bf02      	ittt	eq
 800f7fa:	68e5      	ldreq	r5, [r4, #12]
 800f7fc:	6833      	ldreq	r3, [r6, #0]
 800f7fe:	1aed      	subeq	r5, r5, r3
 800f800:	68a3      	ldr	r3, [r4, #8]
 800f802:	bf0c      	ite	eq
 800f804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f808:	2500      	movne	r5, #0
 800f80a:	4293      	cmp	r3, r2
 800f80c:	bfc4      	itt	gt
 800f80e:	1a9b      	subgt	r3, r3, r2
 800f810:	18ed      	addgt	r5, r5, r3
 800f812:	2600      	movs	r6, #0
 800f814:	341a      	adds	r4, #26
 800f816:	42b5      	cmp	r5, r6
 800f818:	d11a      	bne.n	800f850 <_printf_common+0xc8>
 800f81a:	2000      	movs	r0, #0
 800f81c:	e008      	b.n	800f830 <_printf_common+0xa8>
 800f81e:	2301      	movs	r3, #1
 800f820:	4652      	mov	r2, sl
 800f822:	4641      	mov	r1, r8
 800f824:	4638      	mov	r0, r7
 800f826:	47c8      	blx	r9
 800f828:	3001      	adds	r0, #1
 800f82a:	d103      	bne.n	800f834 <_printf_common+0xac>
 800f82c:	f04f 30ff 	mov.w	r0, #4294967295
 800f830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f834:	3501      	adds	r5, #1
 800f836:	e7c6      	b.n	800f7c6 <_printf_common+0x3e>
 800f838:	18e1      	adds	r1, r4, r3
 800f83a:	1c5a      	adds	r2, r3, #1
 800f83c:	2030      	movs	r0, #48	@ 0x30
 800f83e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f842:	4422      	add	r2, r4
 800f844:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f848:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f84c:	3302      	adds	r3, #2
 800f84e:	e7c7      	b.n	800f7e0 <_printf_common+0x58>
 800f850:	2301      	movs	r3, #1
 800f852:	4622      	mov	r2, r4
 800f854:	4641      	mov	r1, r8
 800f856:	4638      	mov	r0, r7
 800f858:	47c8      	blx	r9
 800f85a:	3001      	adds	r0, #1
 800f85c:	d0e6      	beq.n	800f82c <_printf_common+0xa4>
 800f85e:	3601      	adds	r6, #1
 800f860:	e7d9      	b.n	800f816 <_printf_common+0x8e>
	...

0800f864 <_printf_i>:
 800f864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f868:	7e0f      	ldrb	r7, [r1, #24]
 800f86a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f86c:	2f78      	cmp	r7, #120	@ 0x78
 800f86e:	4691      	mov	r9, r2
 800f870:	4680      	mov	r8, r0
 800f872:	460c      	mov	r4, r1
 800f874:	469a      	mov	sl, r3
 800f876:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f87a:	d807      	bhi.n	800f88c <_printf_i+0x28>
 800f87c:	2f62      	cmp	r7, #98	@ 0x62
 800f87e:	d80a      	bhi.n	800f896 <_printf_i+0x32>
 800f880:	2f00      	cmp	r7, #0
 800f882:	f000 80d2 	beq.w	800fa2a <_printf_i+0x1c6>
 800f886:	2f58      	cmp	r7, #88	@ 0x58
 800f888:	f000 80b9 	beq.w	800f9fe <_printf_i+0x19a>
 800f88c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f890:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f894:	e03a      	b.n	800f90c <_printf_i+0xa8>
 800f896:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f89a:	2b15      	cmp	r3, #21
 800f89c:	d8f6      	bhi.n	800f88c <_printf_i+0x28>
 800f89e:	a101      	add	r1, pc, #4	@ (adr r1, 800f8a4 <_printf_i+0x40>)
 800f8a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f8a4:	0800f8fd 	.word	0x0800f8fd
 800f8a8:	0800f911 	.word	0x0800f911
 800f8ac:	0800f88d 	.word	0x0800f88d
 800f8b0:	0800f88d 	.word	0x0800f88d
 800f8b4:	0800f88d 	.word	0x0800f88d
 800f8b8:	0800f88d 	.word	0x0800f88d
 800f8bc:	0800f911 	.word	0x0800f911
 800f8c0:	0800f88d 	.word	0x0800f88d
 800f8c4:	0800f88d 	.word	0x0800f88d
 800f8c8:	0800f88d 	.word	0x0800f88d
 800f8cc:	0800f88d 	.word	0x0800f88d
 800f8d0:	0800fa11 	.word	0x0800fa11
 800f8d4:	0800f93b 	.word	0x0800f93b
 800f8d8:	0800f9cb 	.word	0x0800f9cb
 800f8dc:	0800f88d 	.word	0x0800f88d
 800f8e0:	0800f88d 	.word	0x0800f88d
 800f8e4:	0800fa33 	.word	0x0800fa33
 800f8e8:	0800f88d 	.word	0x0800f88d
 800f8ec:	0800f93b 	.word	0x0800f93b
 800f8f0:	0800f88d 	.word	0x0800f88d
 800f8f4:	0800f88d 	.word	0x0800f88d
 800f8f8:	0800f9d3 	.word	0x0800f9d3
 800f8fc:	6833      	ldr	r3, [r6, #0]
 800f8fe:	1d1a      	adds	r2, r3, #4
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	6032      	str	r2, [r6, #0]
 800f904:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f908:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f90c:	2301      	movs	r3, #1
 800f90e:	e09d      	b.n	800fa4c <_printf_i+0x1e8>
 800f910:	6833      	ldr	r3, [r6, #0]
 800f912:	6820      	ldr	r0, [r4, #0]
 800f914:	1d19      	adds	r1, r3, #4
 800f916:	6031      	str	r1, [r6, #0]
 800f918:	0606      	lsls	r6, r0, #24
 800f91a:	d501      	bpl.n	800f920 <_printf_i+0xbc>
 800f91c:	681d      	ldr	r5, [r3, #0]
 800f91e:	e003      	b.n	800f928 <_printf_i+0xc4>
 800f920:	0645      	lsls	r5, r0, #25
 800f922:	d5fb      	bpl.n	800f91c <_printf_i+0xb8>
 800f924:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f928:	2d00      	cmp	r5, #0
 800f92a:	da03      	bge.n	800f934 <_printf_i+0xd0>
 800f92c:	232d      	movs	r3, #45	@ 0x2d
 800f92e:	426d      	negs	r5, r5
 800f930:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f934:	4859      	ldr	r0, [pc, #356]	@ (800fa9c <_printf_i+0x238>)
 800f936:	230a      	movs	r3, #10
 800f938:	e011      	b.n	800f95e <_printf_i+0xfa>
 800f93a:	6821      	ldr	r1, [r4, #0]
 800f93c:	6833      	ldr	r3, [r6, #0]
 800f93e:	0608      	lsls	r0, r1, #24
 800f940:	f853 5b04 	ldr.w	r5, [r3], #4
 800f944:	d402      	bmi.n	800f94c <_printf_i+0xe8>
 800f946:	0649      	lsls	r1, r1, #25
 800f948:	bf48      	it	mi
 800f94a:	b2ad      	uxthmi	r5, r5
 800f94c:	2f6f      	cmp	r7, #111	@ 0x6f
 800f94e:	4853      	ldr	r0, [pc, #332]	@ (800fa9c <_printf_i+0x238>)
 800f950:	6033      	str	r3, [r6, #0]
 800f952:	bf14      	ite	ne
 800f954:	230a      	movne	r3, #10
 800f956:	2308      	moveq	r3, #8
 800f958:	2100      	movs	r1, #0
 800f95a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f95e:	6866      	ldr	r6, [r4, #4]
 800f960:	60a6      	str	r6, [r4, #8]
 800f962:	2e00      	cmp	r6, #0
 800f964:	bfa2      	ittt	ge
 800f966:	6821      	ldrge	r1, [r4, #0]
 800f968:	f021 0104 	bicge.w	r1, r1, #4
 800f96c:	6021      	strge	r1, [r4, #0]
 800f96e:	b90d      	cbnz	r5, 800f974 <_printf_i+0x110>
 800f970:	2e00      	cmp	r6, #0
 800f972:	d04b      	beq.n	800fa0c <_printf_i+0x1a8>
 800f974:	4616      	mov	r6, r2
 800f976:	fbb5 f1f3 	udiv	r1, r5, r3
 800f97a:	fb03 5711 	mls	r7, r3, r1, r5
 800f97e:	5dc7      	ldrb	r7, [r0, r7]
 800f980:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f984:	462f      	mov	r7, r5
 800f986:	42bb      	cmp	r3, r7
 800f988:	460d      	mov	r5, r1
 800f98a:	d9f4      	bls.n	800f976 <_printf_i+0x112>
 800f98c:	2b08      	cmp	r3, #8
 800f98e:	d10b      	bne.n	800f9a8 <_printf_i+0x144>
 800f990:	6823      	ldr	r3, [r4, #0]
 800f992:	07df      	lsls	r7, r3, #31
 800f994:	d508      	bpl.n	800f9a8 <_printf_i+0x144>
 800f996:	6923      	ldr	r3, [r4, #16]
 800f998:	6861      	ldr	r1, [r4, #4]
 800f99a:	4299      	cmp	r1, r3
 800f99c:	bfde      	ittt	le
 800f99e:	2330      	movle	r3, #48	@ 0x30
 800f9a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f9a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f9a8:	1b92      	subs	r2, r2, r6
 800f9aa:	6122      	str	r2, [r4, #16]
 800f9ac:	f8cd a000 	str.w	sl, [sp]
 800f9b0:	464b      	mov	r3, r9
 800f9b2:	aa03      	add	r2, sp, #12
 800f9b4:	4621      	mov	r1, r4
 800f9b6:	4640      	mov	r0, r8
 800f9b8:	f7ff fee6 	bl	800f788 <_printf_common>
 800f9bc:	3001      	adds	r0, #1
 800f9be:	d14a      	bne.n	800fa56 <_printf_i+0x1f2>
 800f9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9c4:	b004      	add	sp, #16
 800f9c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9ca:	6823      	ldr	r3, [r4, #0]
 800f9cc:	f043 0320 	orr.w	r3, r3, #32
 800f9d0:	6023      	str	r3, [r4, #0]
 800f9d2:	4833      	ldr	r0, [pc, #204]	@ (800faa0 <_printf_i+0x23c>)
 800f9d4:	2778      	movs	r7, #120	@ 0x78
 800f9d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f9da:	6823      	ldr	r3, [r4, #0]
 800f9dc:	6831      	ldr	r1, [r6, #0]
 800f9de:	061f      	lsls	r7, r3, #24
 800f9e0:	f851 5b04 	ldr.w	r5, [r1], #4
 800f9e4:	d402      	bmi.n	800f9ec <_printf_i+0x188>
 800f9e6:	065f      	lsls	r7, r3, #25
 800f9e8:	bf48      	it	mi
 800f9ea:	b2ad      	uxthmi	r5, r5
 800f9ec:	6031      	str	r1, [r6, #0]
 800f9ee:	07d9      	lsls	r1, r3, #31
 800f9f0:	bf44      	itt	mi
 800f9f2:	f043 0320 	orrmi.w	r3, r3, #32
 800f9f6:	6023      	strmi	r3, [r4, #0]
 800f9f8:	b11d      	cbz	r5, 800fa02 <_printf_i+0x19e>
 800f9fa:	2310      	movs	r3, #16
 800f9fc:	e7ac      	b.n	800f958 <_printf_i+0xf4>
 800f9fe:	4827      	ldr	r0, [pc, #156]	@ (800fa9c <_printf_i+0x238>)
 800fa00:	e7e9      	b.n	800f9d6 <_printf_i+0x172>
 800fa02:	6823      	ldr	r3, [r4, #0]
 800fa04:	f023 0320 	bic.w	r3, r3, #32
 800fa08:	6023      	str	r3, [r4, #0]
 800fa0a:	e7f6      	b.n	800f9fa <_printf_i+0x196>
 800fa0c:	4616      	mov	r6, r2
 800fa0e:	e7bd      	b.n	800f98c <_printf_i+0x128>
 800fa10:	6833      	ldr	r3, [r6, #0]
 800fa12:	6825      	ldr	r5, [r4, #0]
 800fa14:	6961      	ldr	r1, [r4, #20]
 800fa16:	1d18      	adds	r0, r3, #4
 800fa18:	6030      	str	r0, [r6, #0]
 800fa1a:	062e      	lsls	r6, r5, #24
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	d501      	bpl.n	800fa24 <_printf_i+0x1c0>
 800fa20:	6019      	str	r1, [r3, #0]
 800fa22:	e002      	b.n	800fa2a <_printf_i+0x1c6>
 800fa24:	0668      	lsls	r0, r5, #25
 800fa26:	d5fb      	bpl.n	800fa20 <_printf_i+0x1bc>
 800fa28:	8019      	strh	r1, [r3, #0]
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	6123      	str	r3, [r4, #16]
 800fa2e:	4616      	mov	r6, r2
 800fa30:	e7bc      	b.n	800f9ac <_printf_i+0x148>
 800fa32:	6833      	ldr	r3, [r6, #0]
 800fa34:	1d1a      	adds	r2, r3, #4
 800fa36:	6032      	str	r2, [r6, #0]
 800fa38:	681e      	ldr	r6, [r3, #0]
 800fa3a:	6862      	ldr	r2, [r4, #4]
 800fa3c:	2100      	movs	r1, #0
 800fa3e:	4630      	mov	r0, r6
 800fa40:	f7f0 fbde 	bl	8000200 <memchr>
 800fa44:	b108      	cbz	r0, 800fa4a <_printf_i+0x1e6>
 800fa46:	1b80      	subs	r0, r0, r6
 800fa48:	6060      	str	r0, [r4, #4]
 800fa4a:	6863      	ldr	r3, [r4, #4]
 800fa4c:	6123      	str	r3, [r4, #16]
 800fa4e:	2300      	movs	r3, #0
 800fa50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa54:	e7aa      	b.n	800f9ac <_printf_i+0x148>
 800fa56:	6923      	ldr	r3, [r4, #16]
 800fa58:	4632      	mov	r2, r6
 800fa5a:	4649      	mov	r1, r9
 800fa5c:	4640      	mov	r0, r8
 800fa5e:	47d0      	blx	sl
 800fa60:	3001      	adds	r0, #1
 800fa62:	d0ad      	beq.n	800f9c0 <_printf_i+0x15c>
 800fa64:	6823      	ldr	r3, [r4, #0]
 800fa66:	079b      	lsls	r3, r3, #30
 800fa68:	d413      	bmi.n	800fa92 <_printf_i+0x22e>
 800fa6a:	68e0      	ldr	r0, [r4, #12]
 800fa6c:	9b03      	ldr	r3, [sp, #12]
 800fa6e:	4298      	cmp	r0, r3
 800fa70:	bfb8      	it	lt
 800fa72:	4618      	movlt	r0, r3
 800fa74:	e7a6      	b.n	800f9c4 <_printf_i+0x160>
 800fa76:	2301      	movs	r3, #1
 800fa78:	4632      	mov	r2, r6
 800fa7a:	4649      	mov	r1, r9
 800fa7c:	4640      	mov	r0, r8
 800fa7e:	47d0      	blx	sl
 800fa80:	3001      	adds	r0, #1
 800fa82:	d09d      	beq.n	800f9c0 <_printf_i+0x15c>
 800fa84:	3501      	adds	r5, #1
 800fa86:	68e3      	ldr	r3, [r4, #12]
 800fa88:	9903      	ldr	r1, [sp, #12]
 800fa8a:	1a5b      	subs	r3, r3, r1
 800fa8c:	42ab      	cmp	r3, r5
 800fa8e:	dcf2      	bgt.n	800fa76 <_printf_i+0x212>
 800fa90:	e7eb      	b.n	800fa6a <_printf_i+0x206>
 800fa92:	2500      	movs	r5, #0
 800fa94:	f104 0619 	add.w	r6, r4, #25
 800fa98:	e7f5      	b.n	800fa86 <_printf_i+0x222>
 800fa9a:	bf00      	nop
 800fa9c:	08012a7e 	.word	0x08012a7e
 800faa0:	08012a8f 	.word	0x08012a8f

0800faa4 <__sflush_r>:
 800faa4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800faa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faac:	0716      	lsls	r6, r2, #28
 800faae:	4605      	mov	r5, r0
 800fab0:	460c      	mov	r4, r1
 800fab2:	d454      	bmi.n	800fb5e <__sflush_r+0xba>
 800fab4:	684b      	ldr	r3, [r1, #4]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	dc02      	bgt.n	800fac0 <__sflush_r+0x1c>
 800faba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	dd48      	ble.n	800fb52 <__sflush_r+0xae>
 800fac0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fac2:	2e00      	cmp	r6, #0
 800fac4:	d045      	beq.n	800fb52 <__sflush_r+0xae>
 800fac6:	2300      	movs	r3, #0
 800fac8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800facc:	682f      	ldr	r7, [r5, #0]
 800face:	6a21      	ldr	r1, [r4, #32]
 800fad0:	602b      	str	r3, [r5, #0]
 800fad2:	d030      	beq.n	800fb36 <__sflush_r+0x92>
 800fad4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fad6:	89a3      	ldrh	r3, [r4, #12]
 800fad8:	0759      	lsls	r1, r3, #29
 800fada:	d505      	bpl.n	800fae8 <__sflush_r+0x44>
 800fadc:	6863      	ldr	r3, [r4, #4]
 800fade:	1ad2      	subs	r2, r2, r3
 800fae0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fae2:	b10b      	cbz	r3, 800fae8 <__sflush_r+0x44>
 800fae4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fae6:	1ad2      	subs	r2, r2, r3
 800fae8:	2300      	movs	r3, #0
 800faea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800faec:	6a21      	ldr	r1, [r4, #32]
 800faee:	4628      	mov	r0, r5
 800faf0:	47b0      	blx	r6
 800faf2:	1c43      	adds	r3, r0, #1
 800faf4:	89a3      	ldrh	r3, [r4, #12]
 800faf6:	d106      	bne.n	800fb06 <__sflush_r+0x62>
 800faf8:	6829      	ldr	r1, [r5, #0]
 800fafa:	291d      	cmp	r1, #29
 800fafc:	d82b      	bhi.n	800fb56 <__sflush_r+0xb2>
 800fafe:	4a2a      	ldr	r2, [pc, #168]	@ (800fba8 <__sflush_r+0x104>)
 800fb00:	410a      	asrs	r2, r1
 800fb02:	07d6      	lsls	r6, r2, #31
 800fb04:	d427      	bmi.n	800fb56 <__sflush_r+0xb2>
 800fb06:	2200      	movs	r2, #0
 800fb08:	6062      	str	r2, [r4, #4]
 800fb0a:	04d9      	lsls	r1, r3, #19
 800fb0c:	6922      	ldr	r2, [r4, #16]
 800fb0e:	6022      	str	r2, [r4, #0]
 800fb10:	d504      	bpl.n	800fb1c <__sflush_r+0x78>
 800fb12:	1c42      	adds	r2, r0, #1
 800fb14:	d101      	bne.n	800fb1a <__sflush_r+0x76>
 800fb16:	682b      	ldr	r3, [r5, #0]
 800fb18:	b903      	cbnz	r3, 800fb1c <__sflush_r+0x78>
 800fb1a:	6560      	str	r0, [r4, #84]	@ 0x54
 800fb1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fb1e:	602f      	str	r7, [r5, #0]
 800fb20:	b1b9      	cbz	r1, 800fb52 <__sflush_r+0xae>
 800fb22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb26:	4299      	cmp	r1, r3
 800fb28:	d002      	beq.n	800fb30 <__sflush_r+0x8c>
 800fb2a:	4628      	mov	r0, r5
 800fb2c:	f7ff fb48 	bl	800f1c0 <_free_r>
 800fb30:	2300      	movs	r3, #0
 800fb32:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb34:	e00d      	b.n	800fb52 <__sflush_r+0xae>
 800fb36:	2301      	movs	r3, #1
 800fb38:	4628      	mov	r0, r5
 800fb3a:	47b0      	blx	r6
 800fb3c:	4602      	mov	r2, r0
 800fb3e:	1c50      	adds	r0, r2, #1
 800fb40:	d1c9      	bne.n	800fad6 <__sflush_r+0x32>
 800fb42:	682b      	ldr	r3, [r5, #0]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d0c6      	beq.n	800fad6 <__sflush_r+0x32>
 800fb48:	2b1d      	cmp	r3, #29
 800fb4a:	d001      	beq.n	800fb50 <__sflush_r+0xac>
 800fb4c:	2b16      	cmp	r3, #22
 800fb4e:	d11e      	bne.n	800fb8e <__sflush_r+0xea>
 800fb50:	602f      	str	r7, [r5, #0]
 800fb52:	2000      	movs	r0, #0
 800fb54:	e022      	b.n	800fb9c <__sflush_r+0xf8>
 800fb56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb5a:	b21b      	sxth	r3, r3
 800fb5c:	e01b      	b.n	800fb96 <__sflush_r+0xf2>
 800fb5e:	690f      	ldr	r7, [r1, #16]
 800fb60:	2f00      	cmp	r7, #0
 800fb62:	d0f6      	beq.n	800fb52 <__sflush_r+0xae>
 800fb64:	0793      	lsls	r3, r2, #30
 800fb66:	680e      	ldr	r6, [r1, #0]
 800fb68:	bf08      	it	eq
 800fb6a:	694b      	ldreq	r3, [r1, #20]
 800fb6c:	600f      	str	r7, [r1, #0]
 800fb6e:	bf18      	it	ne
 800fb70:	2300      	movne	r3, #0
 800fb72:	eba6 0807 	sub.w	r8, r6, r7
 800fb76:	608b      	str	r3, [r1, #8]
 800fb78:	f1b8 0f00 	cmp.w	r8, #0
 800fb7c:	dde9      	ble.n	800fb52 <__sflush_r+0xae>
 800fb7e:	6a21      	ldr	r1, [r4, #32]
 800fb80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fb82:	4643      	mov	r3, r8
 800fb84:	463a      	mov	r2, r7
 800fb86:	4628      	mov	r0, r5
 800fb88:	47b0      	blx	r6
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	dc08      	bgt.n	800fba0 <__sflush_r+0xfc>
 800fb8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb96:	81a3      	strh	r3, [r4, #12]
 800fb98:	f04f 30ff 	mov.w	r0, #4294967295
 800fb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fba0:	4407      	add	r7, r0
 800fba2:	eba8 0800 	sub.w	r8, r8, r0
 800fba6:	e7e7      	b.n	800fb78 <__sflush_r+0xd4>
 800fba8:	dfbffffe 	.word	0xdfbffffe

0800fbac <_fflush_r>:
 800fbac:	b538      	push	{r3, r4, r5, lr}
 800fbae:	690b      	ldr	r3, [r1, #16]
 800fbb0:	4605      	mov	r5, r0
 800fbb2:	460c      	mov	r4, r1
 800fbb4:	b913      	cbnz	r3, 800fbbc <_fflush_r+0x10>
 800fbb6:	2500      	movs	r5, #0
 800fbb8:	4628      	mov	r0, r5
 800fbba:	bd38      	pop	{r3, r4, r5, pc}
 800fbbc:	b118      	cbz	r0, 800fbc6 <_fflush_r+0x1a>
 800fbbe:	6a03      	ldr	r3, [r0, #32]
 800fbc0:	b90b      	cbnz	r3, 800fbc6 <_fflush_r+0x1a>
 800fbc2:	f7ff f8a3 	bl	800ed0c <__sinit>
 800fbc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d0f3      	beq.n	800fbb6 <_fflush_r+0xa>
 800fbce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fbd0:	07d0      	lsls	r0, r2, #31
 800fbd2:	d404      	bmi.n	800fbde <_fflush_r+0x32>
 800fbd4:	0599      	lsls	r1, r3, #22
 800fbd6:	d402      	bmi.n	800fbde <_fflush_r+0x32>
 800fbd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbda:	f7ff fae6 	bl	800f1aa <__retarget_lock_acquire_recursive>
 800fbde:	4628      	mov	r0, r5
 800fbe0:	4621      	mov	r1, r4
 800fbe2:	f7ff ff5f 	bl	800faa4 <__sflush_r>
 800fbe6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fbe8:	07da      	lsls	r2, r3, #31
 800fbea:	4605      	mov	r5, r0
 800fbec:	d4e4      	bmi.n	800fbb8 <_fflush_r+0xc>
 800fbee:	89a3      	ldrh	r3, [r4, #12]
 800fbf0:	059b      	lsls	r3, r3, #22
 800fbf2:	d4e1      	bmi.n	800fbb8 <_fflush_r+0xc>
 800fbf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbf6:	f7ff fad9 	bl	800f1ac <__retarget_lock_release_recursive>
 800fbfa:	e7dd      	b.n	800fbb8 <_fflush_r+0xc>

0800fbfc <__swhatbuf_r>:
 800fbfc:	b570      	push	{r4, r5, r6, lr}
 800fbfe:	460c      	mov	r4, r1
 800fc00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc04:	2900      	cmp	r1, #0
 800fc06:	b096      	sub	sp, #88	@ 0x58
 800fc08:	4615      	mov	r5, r2
 800fc0a:	461e      	mov	r6, r3
 800fc0c:	da0d      	bge.n	800fc2a <__swhatbuf_r+0x2e>
 800fc0e:	89a3      	ldrh	r3, [r4, #12]
 800fc10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fc14:	f04f 0100 	mov.w	r1, #0
 800fc18:	bf14      	ite	ne
 800fc1a:	2340      	movne	r3, #64	@ 0x40
 800fc1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fc20:	2000      	movs	r0, #0
 800fc22:	6031      	str	r1, [r6, #0]
 800fc24:	602b      	str	r3, [r5, #0]
 800fc26:	b016      	add	sp, #88	@ 0x58
 800fc28:	bd70      	pop	{r4, r5, r6, pc}
 800fc2a:	466a      	mov	r2, sp
 800fc2c:	f000 f896 	bl	800fd5c <_fstat_r>
 800fc30:	2800      	cmp	r0, #0
 800fc32:	dbec      	blt.n	800fc0e <__swhatbuf_r+0x12>
 800fc34:	9901      	ldr	r1, [sp, #4]
 800fc36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fc3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fc3e:	4259      	negs	r1, r3
 800fc40:	4159      	adcs	r1, r3
 800fc42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc46:	e7eb      	b.n	800fc20 <__swhatbuf_r+0x24>

0800fc48 <__smakebuf_r>:
 800fc48:	898b      	ldrh	r3, [r1, #12]
 800fc4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc4c:	079d      	lsls	r5, r3, #30
 800fc4e:	4606      	mov	r6, r0
 800fc50:	460c      	mov	r4, r1
 800fc52:	d507      	bpl.n	800fc64 <__smakebuf_r+0x1c>
 800fc54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fc58:	6023      	str	r3, [r4, #0]
 800fc5a:	6123      	str	r3, [r4, #16]
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	6163      	str	r3, [r4, #20]
 800fc60:	b003      	add	sp, #12
 800fc62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc64:	ab01      	add	r3, sp, #4
 800fc66:	466a      	mov	r2, sp
 800fc68:	f7ff ffc8 	bl	800fbfc <__swhatbuf_r>
 800fc6c:	9f00      	ldr	r7, [sp, #0]
 800fc6e:	4605      	mov	r5, r0
 800fc70:	4639      	mov	r1, r7
 800fc72:	4630      	mov	r0, r6
 800fc74:	f7fe feae 	bl	800e9d4 <_malloc_r>
 800fc78:	b948      	cbnz	r0, 800fc8e <__smakebuf_r+0x46>
 800fc7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc7e:	059a      	lsls	r2, r3, #22
 800fc80:	d4ee      	bmi.n	800fc60 <__smakebuf_r+0x18>
 800fc82:	f023 0303 	bic.w	r3, r3, #3
 800fc86:	f043 0302 	orr.w	r3, r3, #2
 800fc8a:	81a3      	strh	r3, [r4, #12]
 800fc8c:	e7e2      	b.n	800fc54 <__smakebuf_r+0xc>
 800fc8e:	89a3      	ldrh	r3, [r4, #12]
 800fc90:	6020      	str	r0, [r4, #0]
 800fc92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc96:	81a3      	strh	r3, [r4, #12]
 800fc98:	9b01      	ldr	r3, [sp, #4]
 800fc9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fc9e:	b15b      	cbz	r3, 800fcb8 <__smakebuf_r+0x70>
 800fca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fca4:	4630      	mov	r0, r6
 800fca6:	f000 f86b 	bl	800fd80 <_isatty_r>
 800fcaa:	b128      	cbz	r0, 800fcb8 <__smakebuf_r+0x70>
 800fcac:	89a3      	ldrh	r3, [r4, #12]
 800fcae:	f023 0303 	bic.w	r3, r3, #3
 800fcb2:	f043 0301 	orr.w	r3, r3, #1
 800fcb6:	81a3      	strh	r3, [r4, #12]
 800fcb8:	89a3      	ldrh	r3, [r4, #12]
 800fcba:	431d      	orrs	r5, r3
 800fcbc:	81a5      	strh	r5, [r4, #12]
 800fcbe:	e7cf      	b.n	800fc60 <__smakebuf_r+0x18>

0800fcc0 <_putc_r>:
 800fcc0:	b570      	push	{r4, r5, r6, lr}
 800fcc2:	460d      	mov	r5, r1
 800fcc4:	4614      	mov	r4, r2
 800fcc6:	4606      	mov	r6, r0
 800fcc8:	b118      	cbz	r0, 800fcd2 <_putc_r+0x12>
 800fcca:	6a03      	ldr	r3, [r0, #32]
 800fccc:	b90b      	cbnz	r3, 800fcd2 <_putc_r+0x12>
 800fcce:	f7ff f81d 	bl	800ed0c <__sinit>
 800fcd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fcd4:	07d8      	lsls	r0, r3, #31
 800fcd6:	d405      	bmi.n	800fce4 <_putc_r+0x24>
 800fcd8:	89a3      	ldrh	r3, [r4, #12]
 800fcda:	0599      	lsls	r1, r3, #22
 800fcdc:	d402      	bmi.n	800fce4 <_putc_r+0x24>
 800fcde:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fce0:	f7ff fa63 	bl	800f1aa <__retarget_lock_acquire_recursive>
 800fce4:	68a3      	ldr	r3, [r4, #8]
 800fce6:	3b01      	subs	r3, #1
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	60a3      	str	r3, [r4, #8]
 800fcec:	da05      	bge.n	800fcfa <_putc_r+0x3a>
 800fcee:	69a2      	ldr	r2, [r4, #24]
 800fcf0:	4293      	cmp	r3, r2
 800fcf2:	db12      	blt.n	800fd1a <_putc_r+0x5a>
 800fcf4:	b2eb      	uxtb	r3, r5
 800fcf6:	2b0a      	cmp	r3, #10
 800fcf8:	d00f      	beq.n	800fd1a <_putc_r+0x5a>
 800fcfa:	6823      	ldr	r3, [r4, #0]
 800fcfc:	1c5a      	adds	r2, r3, #1
 800fcfe:	6022      	str	r2, [r4, #0]
 800fd00:	701d      	strb	r5, [r3, #0]
 800fd02:	b2ed      	uxtb	r5, r5
 800fd04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fd06:	07da      	lsls	r2, r3, #31
 800fd08:	d405      	bmi.n	800fd16 <_putc_r+0x56>
 800fd0a:	89a3      	ldrh	r3, [r4, #12]
 800fd0c:	059b      	lsls	r3, r3, #22
 800fd0e:	d402      	bmi.n	800fd16 <_putc_r+0x56>
 800fd10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd12:	f7ff fa4b 	bl	800f1ac <__retarget_lock_release_recursive>
 800fd16:	4628      	mov	r0, r5
 800fd18:	bd70      	pop	{r4, r5, r6, pc}
 800fd1a:	4629      	mov	r1, r5
 800fd1c:	4622      	mov	r2, r4
 800fd1e:	4630      	mov	r0, r6
 800fd20:	f7ff f926 	bl	800ef70 <__swbuf_r>
 800fd24:	4605      	mov	r5, r0
 800fd26:	e7ed      	b.n	800fd04 <_putc_r+0x44>

0800fd28 <memmove>:
 800fd28:	4288      	cmp	r0, r1
 800fd2a:	b510      	push	{r4, lr}
 800fd2c:	eb01 0402 	add.w	r4, r1, r2
 800fd30:	d902      	bls.n	800fd38 <memmove+0x10>
 800fd32:	4284      	cmp	r4, r0
 800fd34:	4623      	mov	r3, r4
 800fd36:	d807      	bhi.n	800fd48 <memmove+0x20>
 800fd38:	1e43      	subs	r3, r0, #1
 800fd3a:	42a1      	cmp	r1, r4
 800fd3c:	d008      	beq.n	800fd50 <memmove+0x28>
 800fd3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd46:	e7f8      	b.n	800fd3a <memmove+0x12>
 800fd48:	4402      	add	r2, r0
 800fd4a:	4601      	mov	r1, r0
 800fd4c:	428a      	cmp	r2, r1
 800fd4e:	d100      	bne.n	800fd52 <memmove+0x2a>
 800fd50:	bd10      	pop	{r4, pc}
 800fd52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fd56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fd5a:	e7f7      	b.n	800fd4c <memmove+0x24>

0800fd5c <_fstat_r>:
 800fd5c:	b538      	push	{r3, r4, r5, lr}
 800fd5e:	4d07      	ldr	r5, [pc, #28]	@ (800fd7c <_fstat_r+0x20>)
 800fd60:	2300      	movs	r3, #0
 800fd62:	4604      	mov	r4, r0
 800fd64:	4608      	mov	r0, r1
 800fd66:	4611      	mov	r1, r2
 800fd68:	602b      	str	r3, [r5, #0]
 800fd6a:	f7f4 fae4 	bl	8004336 <_fstat>
 800fd6e:	1c43      	adds	r3, r0, #1
 800fd70:	d102      	bne.n	800fd78 <_fstat_r+0x1c>
 800fd72:	682b      	ldr	r3, [r5, #0]
 800fd74:	b103      	cbz	r3, 800fd78 <_fstat_r+0x1c>
 800fd76:	6023      	str	r3, [r4, #0]
 800fd78:	bd38      	pop	{r3, r4, r5, pc}
 800fd7a:	bf00      	nop
 800fd7c:	20012bd8 	.word	0x20012bd8

0800fd80 <_isatty_r>:
 800fd80:	b538      	push	{r3, r4, r5, lr}
 800fd82:	4d06      	ldr	r5, [pc, #24]	@ (800fd9c <_isatty_r+0x1c>)
 800fd84:	2300      	movs	r3, #0
 800fd86:	4604      	mov	r4, r0
 800fd88:	4608      	mov	r0, r1
 800fd8a:	602b      	str	r3, [r5, #0]
 800fd8c:	f7f4 fae3 	bl	8004356 <_isatty>
 800fd90:	1c43      	adds	r3, r0, #1
 800fd92:	d102      	bne.n	800fd9a <_isatty_r+0x1a>
 800fd94:	682b      	ldr	r3, [r5, #0]
 800fd96:	b103      	cbz	r3, 800fd9a <_isatty_r+0x1a>
 800fd98:	6023      	str	r3, [r4, #0]
 800fd9a:	bd38      	pop	{r3, r4, r5, pc}
 800fd9c:	20012bd8 	.word	0x20012bd8

0800fda0 <memcpy>:
 800fda0:	440a      	add	r2, r1
 800fda2:	4291      	cmp	r1, r2
 800fda4:	f100 33ff 	add.w	r3, r0, #4294967295
 800fda8:	d100      	bne.n	800fdac <memcpy+0xc>
 800fdaa:	4770      	bx	lr
 800fdac:	b510      	push	{r4, lr}
 800fdae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fdb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fdb6:	4291      	cmp	r1, r2
 800fdb8:	d1f9      	bne.n	800fdae <memcpy+0xe>
 800fdba:	bd10      	pop	{r4, pc}

0800fdbc <_realloc_r>:
 800fdbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdc0:	4680      	mov	r8, r0
 800fdc2:	4615      	mov	r5, r2
 800fdc4:	460c      	mov	r4, r1
 800fdc6:	b921      	cbnz	r1, 800fdd2 <_realloc_r+0x16>
 800fdc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdcc:	4611      	mov	r1, r2
 800fdce:	f7fe be01 	b.w	800e9d4 <_malloc_r>
 800fdd2:	b92a      	cbnz	r2, 800fde0 <_realloc_r+0x24>
 800fdd4:	f7ff f9f4 	bl	800f1c0 <_free_r>
 800fdd8:	2400      	movs	r4, #0
 800fdda:	4620      	mov	r0, r4
 800fddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fde0:	f000 f81a 	bl	800fe18 <_malloc_usable_size_r>
 800fde4:	4285      	cmp	r5, r0
 800fde6:	4606      	mov	r6, r0
 800fde8:	d802      	bhi.n	800fdf0 <_realloc_r+0x34>
 800fdea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fdee:	d8f4      	bhi.n	800fdda <_realloc_r+0x1e>
 800fdf0:	4629      	mov	r1, r5
 800fdf2:	4640      	mov	r0, r8
 800fdf4:	f7fe fdee 	bl	800e9d4 <_malloc_r>
 800fdf8:	4607      	mov	r7, r0
 800fdfa:	2800      	cmp	r0, #0
 800fdfc:	d0ec      	beq.n	800fdd8 <_realloc_r+0x1c>
 800fdfe:	42b5      	cmp	r5, r6
 800fe00:	462a      	mov	r2, r5
 800fe02:	4621      	mov	r1, r4
 800fe04:	bf28      	it	cs
 800fe06:	4632      	movcs	r2, r6
 800fe08:	f7ff ffca 	bl	800fda0 <memcpy>
 800fe0c:	4621      	mov	r1, r4
 800fe0e:	4640      	mov	r0, r8
 800fe10:	f7ff f9d6 	bl	800f1c0 <_free_r>
 800fe14:	463c      	mov	r4, r7
 800fe16:	e7e0      	b.n	800fdda <_realloc_r+0x1e>

0800fe18 <_malloc_usable_size_r>:
 800fe18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe1c:	1f18      	subs	r0, r3, #4
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	bfbc      	itt	lt
 800fe22:	580b      	ldrlt	r3, [r1, r0]
 800fe24:	18c0      	addlt	r0, r0, r3
 800fe26:	4770      	bx	lr

0800fe28 <_init>:
 800fe28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe2a:	bf00      	nop
 800fe2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe2e:	bc08      	pop	{r3}
 800fe30:	469e      	mov	lr, r3
 800fe32:	4770      	bx	lr

0800fe34 <_fini>:
 800fe34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe36:	bf00      	nop
 800fe38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe3a:	bc08      	pop	{r3}
 800fe3c:	469e      	mov	lr, r3
 800fe3e:	4770      	bx	lr
