
bigger_touchscreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df44  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a4c  0800e0f4  0800e0f4  0000f0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b40  08010b40  00012298  2**0
                  CONTENTS
  4 .ARM          00000008  08010b40  08010b40  00011b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b48  08010b48  00012298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b48  08010b48  00011b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010b4c  08010b4c  00011b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000298  20000000  08010b50  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012298  2**0
                  CONTENTS
 10 .bss          00011ee8  20000298  20000298  00012298  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012180  20012180  00012298  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012298  2**0
                  CONTENTS, READONLY
 13 .debug_info   000209f6  00000000  00000000  000122c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005312  00000000  00000000  00032cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b78  00000000  00000000  00037fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001501  00000000  00000000  00039b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002989b  00000000  00000000  0003b049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000235be  00000000  00000000  000648e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb934  00000000  00000000  00087ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001737d6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007cac  00000000  00000000  0017381c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0017b4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000298 	.word	0x20000298
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e0dc 	.word	0x0800e0dc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000029c 	.word	0x2000029c
 80001ec:	0800e0dc 	.word	0x0800e0dc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <XPT2046_TouchSelect>:
}

#endif /* SOFTWARE_SPI */

static void XPT2046_TouchSelect()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2110      	movs	r1, #16
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <XPT2046_TouchSelect+0x14>)
 800059a:	f003 fe45 	bl	8004228 <HAL_GPIO_WritePin>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000

080005a8 <XPT2046_TouchUnselect>:

static void XPT2046_TouchUnselect()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2110      	movs	r1, #16
 80005b0:	4802      	ldr	r0, [pc, #8]	@ (80005bc <XPT2046_TouchUnselect+0x14>)
 80005b2:	f003 fe39 	bl	8004228 <HAL_GPIO_WritePin>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000

080005c0 <XPT2046_TouchPressed>:

bool XPT2046_TouchPressed(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(XPT2046_IRQ_GPIO_Port, XPT2046_IRQ_Pin) == GPIO_PIN_RESET;
 80005c4:	2120      	movs	r1, #32
 80005c6:	4805      	ldr	r0, [pc, #20]	@ (80005dc <XPT2046_TouchPressed+0x1c>)
 80005c8:	f003 fe16 	bl	80041f8 <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	bf0c      	ite	eq
 80005d2:	2301      	moveq	r3, #1
 80005d4:	2300      	movne	r3, #0
 80005d6:	b2db      	uxtb	r3, r3
}
 80005d8:	4618      	mov	r0, r3
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40020400 	.word	0x40020400

080005e0 <XPT2046_TouchGetCoordinates>:

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

#endif /* SOFTWARE_SPI */

    XPT2046_TouchSelect();
 80005ea:	f7ff ffd1 	bl	8000590 <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t avg_y = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	77fb      	strb	r3, [r7, #31]

    for(uint8_t i = 0; i < NUMBER_OF_SAMPLES; i++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	77bb      	strb	r3, [r7, #30]
 80005fe:	e03f      	b.n	8000680 <XPT2046_TouchGetCoordinates+0xa0>
    {
        if(!XPT2046_TouchPressed())
 8000600:	f7ff ffde 	bl	80005c0 <XPT2046_TouchPressed>
 8000604:	4603      	mov	r3, r0
 8000606:	f083 0301 	eor.w	r3, r3, #1
 800060a:	b2db      	uxtb	r3, r3
 800060c:	2b00      	cmp	r3, #0
 800060e:	d13b      	bne.n	8000688 <XPT2046_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 8000610:	7ffb      	ldrb	r3, [r7, #31]
 8000612:	3301      	adds	r3, #1
 8000614:	77fb      	strb	r3, [r7, #31]
	   x_raw[0] = spi_read_byte();
	   x_raw[1] = spi_read_byte();

#else

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	2201      	movs	r2, #1
 800061c:	4944      	ldr	r1, [pc, #272]	@ (8000730 <XPT2046_TouchGetCoordinates+0x150>)
 800061e:	4845      	ldr	r0, [pc, #276]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000620:	f006 fc87 	bl	8006f32 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8000624:	f107 0210 	add.w	r2, r7, #16
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2302      	movs	r3, #2
 8000630:	4941      	ldr	r1, [pc, #260]	@ (8000738 <XPT2046_TouchGetCoordinates+0x158>)
 8000632:	4840      	ldr	r0, [pc, #256]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000634:	f006 fdc1 	bl	80071ba <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	2201      	movs	r2, #1
 800063e:	493f      	ldr	r1, [pc, #252]	@ (800073c <XPT2046_TouchGetCoordinates+0x15c>)
 8000640:	483c      	ldr	r0, [pc, #240]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000642:	f006 fc76 	bl	8006f32 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 8000646:	f107 020c 	add.w	r2, r7, #12
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2302      	movs	r3, #2
 8000652:	4939      	ldr	r1, [pc, #228]	@ (8000738 <XPT2046_TouchGetCoordinates+0x158>)
 8000654:	4837      	ldr	r0, [pc, #220]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000656:	f006 fdb0 	bl	80071ba <HAL_SPI_TransmitReceive>

#endif /* SOFTWARE_SPI */

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 800065a:	7b3b      	ldrb	r3, [r7, #12]
 800065c:	021b      	lsls	r3, r3, #8
 800065e:	7b7a      	ldrb	r2, [r7, #13]
 8000660:	4313      	orrs	r3, r2
 8000662:	461a      	mov	r2, r3
 8000664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000666:	4413      	add	r3, r2
 8000668:	627b      	str	r3, [r7, #36]	@ 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 800066a:	7c3b      	ldrb	r3, [r7, #16]
 800066c:	021b      	lsls	r3, r3, #8
 800066e:	7c7a      	ldrb	r2, [r7, #17]
 8000670:	4313      	orrs	r3, r2
 8000672:	461a      	mov	r2, r3
 8000674:	6a3b      	ldr	r3, [r7, #32]
 8000676:	4413      	add	r3, r2
 8000678:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < NUMBER_OF_SAMPLES; i++)
 800067a:	7fbb      	ldrb	r3, [r7, #30]
 800067c:	3301      	adds	r3, #1
 800067e:	77bb      	strb	r3, [r7, #30]
 8000680:	7fbb      	ldrb	r3, [r7, #30]
 8000682:	2b07      	cmp	r3, #7
 8000684:	d9bc      	bls.n	8000600 <XPT2046_TouchGetCoordinates+0x20>
 8000686:	e000      	b.n	800068a <XPT2046_TouchGetCoordinates+0xaa>
            break;
 8000688:	bf00      	nop
    }

    XPT2046_TouchUnselect();
 800068a:	f7ff ff8d 	bl	80005a8 <XPT2046_TouchUnselect>

    if(nsamples < NUMBER_OF_SAMPLES)
 800068e:	7ffb      	ldrb	r3, [r7, #31]
 8000690:	2b07      	cmp	r3, #7
 8000692:	d801      	bhi.n	8000698 <XPT2046_TouchGetCoordinates+0xb8>
        return false;
 8000694:	2300      	movs	r3, #0
 8000696:	e046      	b.n	8000726 <XPT2046_TouchGetCoordinates+0x146>

    uint32_t raw_x = (avg_x / NUMBER_OF_SAMPLES);
 8000698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800069a:	08db      	lsrs	r3, r3, #3
 800069c:	61bb      	str	r3, [r7, #24]
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	f640 5247 	movw	r2, #3399	@ 0xd47
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d802      	bhi.n	80006ae <XPT2046_TouchGetCoordinates+0xce>
 80006a8:	f640 5348 	movw	r3, #3400	@ 0xd48
 80006ac:	61bb      	str	r3, [r7, #24]
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	f247 1248 	movw	r2, #29000	@ 0x7148
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d902      	bls.n	80006be <XPT2046_TouchGetCoordinates+0xde>
 80006b8:	f247 1348 	movw	r3, #29000	@ 0x7148
 80006bc:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / NUMBER_OF_SAMPLES);
 80006be:	6a3b      	ldr	r3, [r7, #32]
 80006c0:	08db      	lsrs	r3, r3, #3
 80006c2:	617b      	str	r3, [r7, #20]
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	f640 42e3 	movw	r2, #3299	@ 0xce3
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d802      	bhi.n	80006d4 <XPT2046_TouchGetCoordinates+0xf4>
 80006ce:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80006d2:	617b      	str	r3, [r7, #20]
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	f247 5230 	movw	r2, #30000	@ 0x7530
 80006da:	4293      	cmp	r3, r2
 80006dc:	d902      	bls.n	80006e4 <XPT2046_TouchGetCoordinates+0x104>
 80006de:	f247 5330 	movw	r3, #30000	@ 0x7530
 80006e2:	617b      	str	r3, [r7, #20]
    // Uncomment this line to calibrate touchscreen:
//    printf("raw_x = %6d, raw_y = %6d\r\n", (int) raw_x, (int) raw_y);
//    printf("\x1b[1F");

#if (ORIENTATION == 0)
	*x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 80006e4:	69ba      	ldr	r2, [r7, #24]
 80006e6:	4613      	mov	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	019b      	lsls	r3, r3, #6
 80006ee:	f5a3 1384 	sub.w	r3, r3, #1081344	@ 0x108000
 80006f2:	f5a3 53d0 	sub.w	r3, r3, #6656	@ 0x1a00
 80006f6:	4a12      	ldr	r2, [pc, #72]	@ (8000740 <XPT2046_TouchGetCoordinates+0x160>)
 80006f8:	fba2 2303 	umull	r2, r3, r2, r3
 80006fc:	0b5b      	lsrs	r3, r3, #13
 80006fe:	b29a      	uxth	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	801a      	strh	r2, [r3, #0]
	*y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 8000704:	697a      	ldr	r2, [r7, #20]
 8000706:	4613      	mov	r3, r2
 8000708:	011b      	lsls	r3, r3, #4
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	011b      	lsls	r3, r3, #4
 800070e:	f5a3 2341 	sub.w	r3, r3, #790528	@ 0xc1000
 8000712:	f5a3 63b8 	sub.w	r3, r3, #1472	@ 0x5c0
 8000716:	4a0b      	ldr	r2, [pc, #44]	@ (8000744 <XPT2046_TouchGetCoordinates+0x164>)
 8000718:	fba2 2303 	umull	r2, r3, r2, r3
 800071c:	0b5b      	lsrs	r3, r3, #13
 800071e:	b29a      	uxth	r2, r3
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	801a      	strh	r2, [r3, #0]
#elif (ORIENTATION == 3)
    *x = XPT2046_SCALE_X - (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#endif

    return true;
 8000724:	2301      	movs	r3, #1
}
 8000726:	4618      	mov	r0, r3
 8000728:	3728      	adds	r7, #40	@ 0x28
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	0800e8ac 	.word	0x0800e8ac
 8000734:	200003bc 	.word	0x200003bc
 8000738:	0800e8b0 	.word	0x0800e8b0
 800073c:	0800e8b4 	.word	0x0800e8b4
 8000740:	51eb851f 	.word	0x51eb851f
 8000744:	4e8b8659 	.word	0x4e8b8659

08000748 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 800074e:	2300      	movs	r3, #0
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	2301      	movs	r3, #1
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2300      	movs	r3, #0
 8000758:	2200      	movs	r2, #0
 800075a:	2101      	movs	r1, #1
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fceb 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	461a      	mov	r2, r3
 8000766:	4bae      	ldr	r3, [pc, #696]	@ (8000a20 <lcdInit+0x2d8>)
 8000768:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 800076a:	2300      	movs	r3, #0
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	2301      	movs	r3, #1
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	2300      	movs	r3, #0
 8000774:	2201      	movs	r2, #1
 8000776:	2100      	movs	r1, #0
 8000778:	2000      	movs	r0, #0
 800077a:	f000 fcdd 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	4ba8      	ldr	r3, [pc, #672]	@ (8000a24 <lcdInit+0x2dc>)
 8000784:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8000786:	2300      	movs	r3, #0
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	2301      	movs	r3, #1
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2300      	movs	r3, #0
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	2001      	movs	r0, #1
 8000796:	f000 fccf 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	461a      	mov	r2, r3
 800079e:	4ba2      	ldr	r3, [pc, #648]	@ (8000a28 <lcdInit+0x2e0>)
 80007a0:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80007a2:	2300      	movs	r3, #0
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	2301      	movs	r3, #1
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2300      	movs	r3, #0
 80007ac:	2201      	movs	r2, #1
 80007ae:	2101      	movs	r1, #1
 80007b0:	2001      	movs	r0, #1
 80007b2:	f000 fcc1 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b9c      	ldr	r3, [pc, #624]	@ (8000a2c <lcdInit+0x2e4>)
 80007bc:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 80007be:	f000 fc91 	bl	80010e4 <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 80007c2:	2028      	movs	r0, #40	@ 0x28
 80007c4:	f000 fc98 	bl	80010f8 <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 80007c8:	20cf      	movs	r0, #207	@ 0xcf
 80007ca:	f000 fc95 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 fca2 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x83);
 80007d4:	2083      	movs	r0, #131	@ 0x83
 80007d6:	f000 fc9f 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x30);
 80007da:	2030      	movs	r0, #48	@ 0x30
 80007dc:	f000 fc9c 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xED);
 80007e0:	20ed      	movs	r0, #237	@ 0xed
 80007e2:	f000 fc89 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x64);
 80007e6:	2064      	movs	r0, #100	@ 0x64
 80007e8:	f000 fc96 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x03);
 80007ec:	2003      	movs	r0, #3
 80007ee:	f000 fc93 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x12);
 80007f2:	2012      	movs	r0, #18
 80007f4:	f000 fc90 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x81);
 80007f8:	2081      	movs	r0, #129	@ 0x81
 80007fa:	f000 fc8d 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xE8);
 80007fe:	20e8      	movs	r0, #232	@ 0xe8
 8000800:	f000 fc7a 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x85);
 8000804:	2085      	movs	r0, #133	@ 0x85
 8000806:	f000 fc87 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x01);
 800080a:	2001      	movs	r0, #1
 800080c:	f000 fc84 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x79);
 8000810:	2079      	movs	r0, #121	@ 0x79
 8000812:	f000 fc81 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xCB);
 8000816:	20cb      	movs	r0, #203	@ 0xcb
 8000818:	f000 fc6e 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x39);
 800081c:	2039      	movs	r0, #57	@ 0x39
 800081e:	f000 fc7b 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x2C);
 8000822:	202c      	movs	r0, #44	@ 0x2c
 8000824:	f000 fc78 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 8000828:	2000      	movs	r0, #0
 800082a:	f000 fc75 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x34);
 800082e:	2034      	movs	r0, #52	@ 0x34
 8000830:	f000 fc72 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x02);
 8000834:	2002      	movs	r0, #2
 8000836:	f000 fc6f 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xF7);
 800083a:	20f7      	movs	r0, #247	@ 0xf7
 800083c:	f000 fc5c 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x20);
 8000840:	2020      	movs	r0, #32
 8000842:	f000 fc69 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xEA);
 8000846:	20ea      	movs	r0, #234	@ 0xea
 8000848:	f000 fc56 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 800084c:	2000      	movs	r0, #0
 800084e:	f000 fc63 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 8000852:	2000      	movs	r0, #0
 8000854:	f000 fc60 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8000858:	20c0      	movs	r0, #192	@ 0xc0
 800085a:	f000 fc4d 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x26);
 800085e:	2026      	movs	r0, #38	@ 0x26
 8000860:	f000 fc5a 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 8000864:	20c1      	movs	r0, #193	@ 0xc1
 8000866:	f000 fc47 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x11);
 800086a:	2011      	movs	r0, #17
 800086c:	f000 fc54 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 8000870:	20c5      	movs	r0, #197	@ 0xc5
 8000872:	f000 fc41 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x35);
 8000876:	2035      	movs	r0, #53	@ 0x35
 8000878:	f000 fc4e 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3E);
 800087c:	203e      	movs	r0, #62	@ 0x3e
 800087e:	f000 fc4b 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 8000882:	20c7      	movs	r0, #199	@ 0xc7
 8000884:	f000 fc38 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0xBE);
 8000888:	20be      	movs	r0, #190	@ 0xbe
 800088a:	f000 fc45 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 800088e:	2036      	movs	r0, #54	@ 0x36
 8000890:	f000 fc32 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 8000894:	4b62      	ldr	r3, [pc, #392]	@ (8000a20 <lcdInit+0x2d8>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f000 fc3d 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 800089e:	203a      	movs	r0, #58	@ 0x3a
 80008a0:	f000 fc2a 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x55);
 80008a4:	2055      	movs	r0, #85	@ 0x55
 80008a6:	f000 fc37 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 80008aa:	20b1      	movs	r0, #177	@ 0xb1
 80008ac:	f000 fc24 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80008b0:	2000      	movs	r0, #0
 80008b2:	f000 fc31 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x1B);
 80008b6:	201b      	movs	r0, #27
 80008b8:	f000 fc2e 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xF2);
 80008bc:	20f2      	movs	r0, #242	@ 0xf2
 80008be:	f000 fc1b 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x08);
 80008c2:	2008      	movs	r0, #8
 80008c4:	f000 fc28 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 80008c8:	2026      	movs	r0, #38	@ 0x26
 80008ca:	f000 fc15 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x01);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f000 fc22 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 80008d4:	20e0      	movs	r0, #224	@ 0xe0
 80008d6:	f000 fc0f 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x1F);
 80008da:	201f      	movs	r0, #31
 80008dc:	f000 fc1c 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x1A);
 80008e0:	201a      	movs	r0, #26
 80008e2:	f000 fc19 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x18);
 80008e6:	2018      	movs	r0, #24
 80008e8:	f000 fc16 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0A);
 80008ec:	200a      	movs	r0, #10
 80008ee:	f000 fc13 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0F);
 80008f2:	200f      	movs	r0, #15
 80008f4:	f000 fc10 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x06);
 80008f8:	2006      	movs	r0, #6
 80008fa:	f000 fc0d 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x45);
 80008fe:	2045      	movs	r0, #69	@ 0x45
 8000900:	f000 fc0a 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x87);
 8000904:	2087      	movs	r0, #135	@ 0x87
 8000906:	f000 fc07 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x32);
 800090a:	2032      	movs	r0, #50	@ 0x32
 800090c:	f000 fc04 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0A);
 8000910:	200a      	movs	r0, #10
 8000912:	f000 fc01 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x07);
 8000916:	2007      	movs	r0, #7
 8000918:	f000 fbfe 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x02);
 800091c:	2002      	movs	r0, #2
 800091e:	f000 fbfb 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x07);
 8000922:	2007      	movs	r0, #7
 8000924:	f000 fbf8 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x05);
 8000928:	2005      	movs	r0, #5
 800092a:	f000 fbf5 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 800092e:	2000      	movs	r0, #0
 8000930:	f000 fbf2 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8000934:	20e1      	movs	r0, #225	@ 0xe1
 8000936:	f000 fbdf 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 800093a:	2000      	movs	r0, #0
 800093c:	f000 fbec 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x25);
 8000940:	2025      	movs	r0, #37	@ 0x25
 8000942:	f000 fbe9 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x27);
 8000946:	2027      	movs	r0, #39	@ 0x27
 8000948:	f000 fbe6 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x05);
 800094c:	2005      	movs	r0, #5
 800094e:	f000 fbe3 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x10);
 8000952:	2010      	movs	r0, #16
 8000954:	f000 fbe0 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x09);
 8000958:	2009      	movs	r0, #9
 800095a:	f000 fbdd 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3A);
 800095e:	203a      	movs	r0, #58	@ 0x3a
 8000960:	f000 fbda 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x78);
 8000964:	2078      	movs	r0, #120	@ 0x78
 8000966:	f000 fbd7 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x4D);
 800096a:	204d      	movs	r0, #77	@ 0x4d
 800096c:	f000 fbd4 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x05);
 8000970:	2005      	movs	r0, #5
 8000972:	f000 fbd1 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x18);
 8000976:	2018      	movs	r0, #24
 8000978:	f000 fbce 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0D);
 800097c:	200d      	movs	r0, #13
 800097e:	f000 fbcb 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x38);
 8000982:	2038      	movs	r0, #56	@ 0x38
 8000984:	f000 fbc8 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3A);
 8000988:	203a      	movs	r0, #58	@ 0x3a
 800098a:	f000 fbc5 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x1F);
 800098e:	201f      	movs	r0, #31
 8000990:	f000 fbc2 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 8000994:	202a      	movs	r0, #42	@ 0x2a
 8000996:	f000 fbaf 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 800099a:	2000      	movs	r0, #0
 800099c:	f000 fbbc 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f000 fbb9 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f000 fbb6 	bl	8001118 <lcdWriteData>
  lcdWriteData(0xEF);
 80009ac:	20ef      	movs	r0, #239	@ 0xef
 80009ae:	f000 fbb3 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80009b2:	202b      	movs	r0, #43	@ 0x2b
 80009b4:	f000 fba0 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80009b8:	2000      	movs	r0, #0
 80009ba:	f000 fbad 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009be:	2000      	movs	r0, #0
 80009c0:	f000 fbaa 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x01);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f000 fba7 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3F);
 80009ca:	203f      	movs	r0, #63	@ 0x3f
 80009cc:	f000 fba4 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 80009d0:	20b7      	movs	r0, #183	@ 0xb7
 80009d2:	f000 fb91 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x07);
 80009d6:	2007      	movs	r0, #7
 80009d8:	f000 fb9e 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 80009dc:	20b6      	movs	r0, #182	@ 0xb6
 80009de:	f000 fb8b 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x0A);
 80009e2:	200a      	movs	r0, #10
 80009e4:	f000 fb98 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x82);
 80009e8:	2082      	movs	r0, #130	@ 0x82
 80009ea:	f000 fb95 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x27);
 80009ee:	2027      	movs	r0, #39	@ 0x27
 80009f0:	f000 fb92 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009f4:	2000      	movs	r0, #0
 80009f6:	f000 fb8f 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 80009fa:	2011      	movs	r0, #17
 80009fc:	f000 fb7c 	bl	80010f8 <lcdWriteCommand>
  HAL_Delay(100);
 8000a00:	2064      	movs	r0, #100	@ 0x64
 8000a02:	f002 ff03 	bl	800380c <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 8000a06:	2029      	movs	r0, #41	@ 0x29
 8000a08:	f000 fb76 	bl	80010f8 <lcdWriteCommand>
  HAL_Delay(100);
 8000a0c:	2064      	movs	r0, #100	@ 0x64
 8000a0e:	f002 fefd 	bl	800380c <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8000a12:	202c      	movs	r0, #44	@ 0x2c
 8000a14:	f000 fb70 	bl	80010f8 <lcdWriteCommand>
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200002b8 	.word	0x200002b8
 8000a24:	200002b9 	.word	0x200002b9
 8000a28:	200002ba 	.word	0x200002ba
 8000a2c:	200002bb 	.word	0x200002bb

08000a30 <lcdFillRGB>:
		}
	}
}

void lcdFillRGB(uint16_t color)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a44:	885b      	ldrh	r3, [r3, #2]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f000 fafd 	bl	800104c <lcdSetWindow>
  int dimensions = lcdProperties.width * lcdProperties.height;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a5a:	885b      	ldrh	r3, [r3, #2]
 8000a5c:	fb02 f303 	mul.w	r3, r2, r3
 8000a60:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 8000a62:	e003      	b.n	8000a6c <lcdFillRGB+0x3c>
  {
    lcdWriteData(color);
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fb56 	bl	8001118 <lcdWriteData>
  while(dimensions--)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	1e5a      	subs	r2, r3, #1
 8000a70:	60fa      	str	r2, [r7, #12]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1f6      	bne.n	8000a64 <lcdFillRGB+0x34>
  }
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000018 	.word	0x20000018

08000a84 <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80fb      	strh	r3, [r7, #6]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	80bb      	strh	r3, [r7, #4]
 8000a92:	4613      	mov	r3, r2
 8000a94:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8000a96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <lcdDrawPixel+0x44>)
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	88fa      	ldrh	r2, [r7, #6]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d20f      	bcs.n	8000ac0 <lcdDrawPixel+0x3c>
 8000aa0:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <lcdDrawPixel+0x44>)
 8000aa2:	885b      	ldrh	r3, [r3, #2]
 8000aa4:	88ba      	ldrh	r2, [r7, #4]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d20a      	bcs.n	8000ac0 <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 8000aaa:	88bb      	ldrh	r3, [r7, #4]
 8000aac:	88fa      	ldrh	r2, [r7, #6]
 8000aae:	88b9      	ldrh	r1, [r7, #4]
 8000ab0:	88f8      	ldrh	r0, [r7, #6]
 8000ab2:	f000 facb 	bl	800104c <lcdSetWindow>
    lcdWriteData(color);
 8000ab6:	887b      	ldrh	r3, [r7, #2]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 fb2d 	bl	8001118 <lcdWriteData>
 8000abe:	e000      	b.n	8000ac2 <lcdDrawPixel+0x3e>
        return;
 8000ac0:	bf00      	nop
}
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000018 	.word	0x20000018

08000acc <lcdDrawHLine>:

void lcdDrawHLine(uint16_t x0, uint16_t x1, uint16_t y, uint16_t color)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4608      	mov	r0, r1
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4623      	mov	r3, r4
 8000adc:	80fb      	strh	r3, [r7, #6]
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80bb      	strh	r3, [r7, #4]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	807b      	strh	r3, [r7, #2]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	803b      	strh	r3, [r7, #0]
  // Allows for slightly better performance than setting individual pixels

	if (x1 < x0)
 8000aea:	88ba      	ldrh	r2, [r7, #4]
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d205      	bcs.n	8000afe <lcdDrawHLine+0x32>
	{
		// Switch x1 and x0
		swap(x0, x1);
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	817b      	strh	r3, [r7, #10]
 8000af6:	88bb      	ldrh	r3, [r7, #4]
 8000af8:	80fb      	strh	r3, [r7, #6]
 8000afa:	897b      	ldrh	r3, [r7, #10]
 8000afc:	80bb      	strh	r3, [r7, #4]
	}

	// Check limits
	if (x1 >= lcdProperties.width)
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	88ba      	ldrh	r2, [r7, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d303      	bcc.n	8000b10 <lcdDrawHLine+0x44>
	{
		x1 = lcdProperties.width - 1;
 8000b08:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	80bb      	strh	r3, [r7, #4]
	}

	if (x0 >= lcdProperties.width)
 8000b10:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	88fa      	ldrh	r2, [r7, #6]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d303      	bcc.n	8000b22 <lcdDrawHLine+0x56>
	{
		x0 = lcdProperties.width - 1;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	80fb      	strh	r3, [r7, #6]
	}

	lcdSetWindow(x0, y, x1, y);
 8000b22:	887b      	ldrh	r3, [r7, #2]
 8000b24:	88ba      	ldrh	r2, [r7, #4]
 8000b26:	8879      	ldrh	r1, [r7, #2]
 8000b28:	88f8      	ldrh	r0, [r7, #6]
 8000b2a:	f000 fa8f 	bl	800104c <lcdSetWindow>

	for (int line = x0; line <= x1; line++)
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	e006      	b.n	8000b42 <lcdDrawHLine+0x76>
	{
		lcdWriteData(color);
 8000b34:	883b      	ldrh	r3, [r7, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 faee 	bl	8001118 <lcdWriteData>
	for (int line = x0; line <= x1; line++)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	88bb      	ldrh	r3, [r7, #4]
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	ddf4      	ble.n	8000b34 <lcdDrawHLine+0x68>
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd90      	pop	{r4, r7, pc}
 8000b54:	20000018 	.word	0x20000018

08000b58 <lcdDrawVLine>:

void lcdDrawVLine(uint16_t x, uint16_t y0, uint16_t y1, uint16_t color)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4604      	mov	r4, r0
 8000b60:	4608      	mov	r0, r1
 8000b62:	4611      	mov	r1, r2
 8000b64:	461a      	mov	r2, r3
 8000b66:	4623      	mov	r3, r4
 8000b68:	80fb      	strh	r3, [r7, #6]
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80bb      	strh	r3, [r7, #4]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	807b      	strh	r3, [r7, #2]
 8000b72:	4613      	mov	r3, r2
 8000b74:	803b      	strh	r3, [r7, #0]
  if (y1 < y0)
 8000b76:	887a      	ldrh	r2, [r7, #2]
 8000b78:	88bb      	ldrh	r3, [r7, #4]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d205      	bcs.n	8000b8a <lcdDrawVLine+0x32>
  {
	  swap(y0, y1);
 8000b7e:	88bb      	ldrh	r3, [r7, #4]
 8000b80:	817b      	strh	r3, [r7, #10]
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	80bb      	strh	r3, [r7, #4]
 8000b86:	897b      	ldrh	r3, [r7, #10]
 8000b88:	807b      	strh	r3, [r7, #2]
  }

  if (x >= lcdProperties.width)
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	88fa      	ldrh	r2, [r7, #6]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d303      	bcc.n	8000b9c <lcdDrawVLine+0x44>
  {
    x = lcdProperties.width - 1;
 8000b94:	4b17      	ldr	r3, [pc, #92]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	80fb      	strh	r3, [r7, #6]
  }

  if (y0 >= lcdProperties.height)
 8000b9c:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000b9e:	885b      	ldrh	r3, [r3, #2]
 8000ba0:	88ba      	ldrh	r2, [r7, #4]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d303      	bcc.n	8000bae <lcdDrawVLine+0x56>
  {
    y0 = lcdProperties.height - 1;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000ba8:	885b      	ldrh	r3, [r3, #2]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	80bb      	strh	r3, [r7, #4]
  }

  if (y1 >= lcdProperties.height)
 8000bae:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000bb0:	885b      	ldrh	r3, [r3, #2]
 8000bb2:	887a      	ldrh	r2, [r7, #2]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d303      	bcc.n	8000bc0 <lcdDrawVLine+0x68>
  {
    y1 = lcdProperties.height - 1;
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000bba:	885b      	ldrh	r3, [r3, #2]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	807b      	strh	r3, [r7, #2]
  }

  lcdSetWindow(x, y0, x, y1);
 8000bc0:	887b      	ldrh	r3, [r7, #2]
 8000bc2:	88fa      	ldrh	r2, [r7, #6]
 8000bc4:	88b9      	ldrh	r1, [r7, #4]
 8000bc6:	88f8      	ldrh	r0, [r7, #6]
 8000bc8:	f000 fa40 	bl	800104c <lcdSetWindow>

  for(int line = y0; line <= y1; line++)
 8000bcc:	88bb      	ldrh	r3, [r7, #4]
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	e006      	b.n	8000be0 <lcdDrawVLine+0x88>
  {
	  lcdWriteData(color);
 8000bd2:	883b      	ldrh	r3, [r7, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fa9f 	bl	8001118 <lcdWriteData>
  for(int line = y0; line <= y1; line++)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	887b      	ldrh	r3, [r7, #2]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	ddf4      	ble.n	8000bd2 <lcdDrawVLine+0x7a>
  }
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd90      	pop	{r4, r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000018 	.word	0x20000018

08000bf8 <lcdDrawRect>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4608      	mov	r0, r1
 8000c02:	4611      	mov	r1, r2
 8000c04:	461a      	mov	r2, r3
 8000c06:	4623      	mov	r3, r4
 8000c08:	80fb      	strh	r3, [r7, #6]
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	80bb      	strh	r3, [r7, #4]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	807b      	strh	r3, [r7, #2]
 8000c12:	4613      	mov	r3, r2
 8000c14:	803b      	strh	r3, [r7, #0]
	lcdDrawHLine(x, x + w - 1, y, color);
 8000c16:	88f8      	ldrh	r0, [r7, #6]
 8000c18:	88fa      	ldrh	r2, [r7, #6]
 8000c1a:	887b      	ldrh	r3, [r7, #2]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	3b01      	subs	r3, #1
 8000c22:	b299      	uxth	r1, r3
 8000c24:	88ba      	ldrh	r2, [r7, #4]
 8000c26:	8b3b      	ldrh	r3, [r7, #24]
 8000c28:	f7ff ff50 	bl	8000acc <lcdDrawHLine>
	lcdDrawHLine(x, x + w - 1, y + h - 1, color);
 8000c2c:	88f8      	ldrh	r0, [r7, #6]
 8000c2e:	88fa      	ldrh	r2, [r7, #6]
 8000c30:	887b      	ldrh	r3, [r7, #2]
 8000c32:	4413      	add	r3, r2
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	3b01      	subs	r3, #1
 8000c38:	b299      	uxth	r1, r3
 8000c3a:	88ba      	ldrh	r2, [r7, #4]
 8000c3c:	883b      	ldrh	r3, [r7, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	3b01      	subs	r3, #1
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	8b3b      	ldrh	r3, [r7, #24]
 8000c48:	f7ff ff40 	bl	8000acc <lcdDrawHLine>
	lcdDrawVLine(x, y, y + h - 1, color);
 8000c4c:	88f8      	ldrh	r0, [r7, #6]
 8000c4e:	88b9      	ldrh	r1, [r7, #4]
 8000c50:	88ba      	ldrh	r2, [r7, #4]
 8000c52:	883b      	ldrh	r3, [r7, #0]
 8000c54:	4413      	add	r3, r2
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	8b3b      	ldrh	r3, [r7, #24]
 8000c5e:	f7ff ff7b 	bl	8000b58 <lcdDrawVLine>
	lcdDrawVLine(x + w - 1, y, y + h - 1, color);
 8000c62:	88fa      	ldrh	r2, [r7, #6]
 8000c64:	887b      	ldrh	r3, [r7, #2]
 8000c66:	4413      	add	r3, r2
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	b298      	uxth	r0, r3
 8000c6e:	88b9      	ldrh	r1, [r7, #4]
 8000c70:	88ba      	ldrh	r2, [r7, #4]
 8000c72:	883b      	ldrh	r3, [r7, #0]
 8000c74:	4413      	add	r3, r2
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	8b3b      	ldrh	r3, [r7, #24]
 8000c7e:	f7ff ff6b 	bl	8000b58 <lcdDrawVLine>
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd90      	pop	{r4, r7, pc}
	...

08000c8c <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4604      	mov	r4, r0
 8000c94:	4608      	mov	r0, r1
 8000c96:	4611      	mov	r1, r2
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	80fb      	strh	r3, [r7, #6]
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80bb      	strh	r3, [r7, #4]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	70fb      	strb	r3, [r7, #3]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cae:	4a4a      	ldr	r2, [pc, #296]	@ (8000dd8 <lcdDrawChar+0x14c>)
 8000cb0:	8812      	ldrh	r2, [r2, #0]
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	f280 808c 	bge.w	8000dd0 <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 8000cb8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cbc:	4a46      	ldr	r2, [pc, #280]	@ (8000dd8 <lcdDrawChar+0x14c>)
 8000cbe:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	f280 8085 	bge.w	8000dd0 <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cca:	4a44      	ldr	r2, [pc, #272]	@ (8000ddc <lcdDrawChar+0x150>)
 8000ccc:	6892      	ldr	r2, [r2, #8]
 8000cce:	8892      	ldrh	r2, [r2, #4]
 8000cd0:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db7c      	blt.n	8000dd0 <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8000cd6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cda:	4a40      	ldr	r2, [pc, #256]	@ (8000ddc <lcdDrawChar+0x150>)
 8000cdc:	6892      	ldr	r2, [r2, #8]
 8000cde:	88d2      	ldrh	r2, [r2, #6]
 8000ce0:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db74      	blt.n	8000dd0 <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8000ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8000ddc <lcdDrawChar+0x150>)
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	88db      	ldrh	r3, [r3, #6]
 8000cec:	08db      	lsrs	r3, r3, #3
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73bb      	strb	r3, [r7, #14]
 8000cfa:	e061      	b.n	8000dc0 <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	733b      	strb	r3, [r7, #12]
 8000d00:	e055      	b.n	8000dae <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8000d02:	4b36      	ldr	r3, [pc, #216]	@ (8000ddc <lcdDrawChar+0x150>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	78fa      	ldrb	r2, [r7, #3]
 8000d0a:	3a20      	subs	r2, #32
 8000d0c:	4933      	ldr	r1, [pc, #204]	@ (8000ddc <lcdDrawChar+0x150>)
 8000d0e:	6889      	ldr	r1, [r1, #8]
 8000d10:	88c9      	ldrh	r1, [r1, #6]
 8000d12:	fb01 f202 	mul.w	r2, r1, r2
 8000d16:	7ab9      	ldrb	r1, [r7, #10]
 8000d18:	fb02 f101 	mul.w	r1, r2, r1
 8000d1c:	7bba      	ldrb	r2, [r7, #14]
 8000d1e:	7ab8      	ldrb	r0, [r7, #10]
 8000d20:	fb00 f202 	mul.w	r2, r0, r2
 8000d24:	4411      	add	r1, r2
 8000d26:	7b3a      	ldrb	r2, [r7, #12]
 8000d28:	440a      	add	r2, r1
 8000d2a:	4413      	add	r3, r2
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	72fb      	strb	r3, [r7, #11]
 8000d34:	e032      	b.n	8000d9c <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 8000d36:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	da12      	bge.n	8000d64 <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 8000d3e:	7afb      	ldrb	r3, [r7, #11]
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	4413      	add	r3, r2
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	4413      	add	r3, r2
 8000d4e:	b298      	uxth	r0, r3
 8000d50:	7bbb      	ldrb	r3, [r7, #14]
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	88bb      	ldrh	r3, [r7, #4]
 8000d56:	4413      	add	r3, r2
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	883a      	ldrh	r2, [r7, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f7ff fe91 	bl	8000a84 <lcdDrawPixel>
 8000d62:	e015      	b.n	8000d90 <lcdDrawChar+0x104>
				}
				else if (bg != color)
 8000d64:	8c3a      	ldrh	r2, [r7, #32]
 8000d66:	883b      	ldrh	r3, [r7, #0]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d011      	beq.n	8000d90 <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 8000d6c:	7afb      	ldrb	r3, [r7, #11]
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	4413      	add	r3, r2
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	4413      	add	r3, r2
 8000d7c:	b298      	uxth	r0, r3
 8000d7e:	7bbb      	ldrb	r3, [r7, #14]
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	88bb      	ldrh	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	8c3a      	ldrh	r2, [r7, #32]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f7ff fe7a 	bl	8000a84 <lcdDrawPixel>
				}
				line <<= 1;
 8000d90:	7b7b      	ldrb	r3, [r7, #13]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 8000d96:	7afb      	ldrb	r3, [r7, #11]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	72fb      	strb	r3, [r7, #11]
 8000d9c:	7afb      	ldrb	r3, [r7, #11]
 8000d9e:	2b07      	cmp	r3, #7
 8000da0:	d9c9      	bls.n	8000d36 <lcdDrawChar+0xaa>
			}

			xP += 8;
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	3308      	adds	r3, #8
 8000da6:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8000da8:	7b3b      	ldrb	r3, [r7, #12]
 8000daa:	3301      	adds	r3, #1
 8000dac:	733b      	strb	r3, [r7, #12]
 8000dae:	7b3a      	ldrb	r2, [r7, #12]
 8000db0:	7abb      	ldrb	r3, [r7, #10]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d3a5      	bcc.n	8000d02 <lcdDrawChar+0x76>
		}

		xP = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000dba:	7bbb      	ldrb	r3, [r7, #14]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	73bb      	strb	r3, [r7, #14]
 8000dc0:	7bbb      	ldrb	r3, [r7, #14]
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <lcdDrawChar+0x150>)
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	88db      	ldrh	r3, [r3, #6]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d396      	bcc.n	8000cfc <lcdDrawChar+0x70>
 8000dce:	e000      	b.n	8000dd2 <lcdDrawChar+0x146>
		return;
 8000dd0:	bf00      	nop
	}
}
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd90      	pop	{r4, r7, pc}
 8000dd8:	20000018 	.word	0x20000018
 8000ddc:	20000020 	.word	0x20000020

08000de0 <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8000de0:	b40f      	push	{r0, r1, r2, r3}
 8000de2:	b590      	push	{r4, r7, lr}
 8000de4:	b085      	sub	sp, #20
 8000de6:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	69b9      	ldr	r1, [r7, #24]
 8000df2:	483d      	ldr	r0, [pc, #244]	@ (8000ee8 <lcdPrintf+0x108>)
 8000df4:	f00c fa0c 	bl	800d210 <vsiprintf>
	va_end(lst);

	p = buf;
 8000df8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee8 <lcdPrintf+0x108>)
 8000dfa:	607b      	str	r3, [r7, #4]
	while (*p)
 8000dfc:	e067      	b.n	8000ece <lcdPrintf+0xee>
	{
		if (*p == '\n')
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b0a      	cmp	r3, #10
 8000e04:	d10c      	bne.n	8000e20 <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 8000e06:	4b39      	ldr	r3, [pc, #228]	@ (8000eec <lcdPrintf+0x10c>)
 8000e08:	885a      	ldrh	r2, [r3, #2]
 8000e0a:	4b39      	ldr	r3, [pc, #228]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	88db      	ldrh	r3, [r3, #6]
 8000e10:	4413      	add	r3, r2
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	4b35      	ldr	r3, [pc, #212]	@ (8000eec <lcdPrintf+0x10c>)
 8000e16:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 8000e18:	4b34      	ldr	r3, [pc, #208]	@ (8000eec <lcdPrintf+0x10c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	801a      	strh	r2, [r3, #0]
 8000e1e:	e04a      	b.n	8000eb6 <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b0d      	cmp	r3, #13
 8000e26:	d046      	beq.n	8000eb6 <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b09      	cmp	r3, #9
 8000e2e:	d10b      	bne.n	8000e48 <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 8000e30:	4b2e      	ldr	r3, [pc, #184]	@ (8000eec <lcdPrintf+0x10c>)
 8000e32:	881a      	ldrh	r2, [r3, #0]
 8000e34:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	889b      	ldrh	r3, [r3, #4]
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	4413      	add	r3, r2
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	4b2a      	ldr	r3, [pc, #168]	@ (8000eec <lcdPrintf+0x10c>)
 8000e44:	801a      	strh	r2, [r3, #0]
 8000e46:	e036      	b.n	8000eb6 <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8000e48:	4b28      	ldr	r3, [pc, #160]	@ (8000eec <lcdPrintf+0x10c>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	b218      	sxth	r0, r3
 8000e4e:	4b27      	ldr	r3, [pc, #156]	@ (8000eec <lcdPrintf+0x10c>)
 8000e50:	885b      	ldrh	r3, [r3, #2]
 8000e52:	b219      	sxth	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	781a      	ldrb	r2, [r3, #0]
 8000e58:	4b25      	ldr	r3, [pc, #148]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	b29c      	uxth	r4, r3
 8000e5e:	4b24      	ldr	r3, [pc, #144]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	4623      	mov	r3, r4
 8000e68:	f7ff ff10 	bl	8000c8c <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <lcdPrintf+0x10c>)
 8000e6e:	881a      	ldrh	r2, [r3, #0]
 8000e70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	889b      	ldrh	r3, [r3, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <lcdPrintf+0x10c>)
 8000e7c:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e80:	7b1b      	ldrb	r3, [r3, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d017      	beq.n	8000eb6 <lcdPrintf+0xd6>
 8000e86:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <lcdPrintf+0x10c>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <lcdPrintf+0x114>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	889b      	ldrh	r3, [r3, #4]
 8000e98:	1acb      	subs	r3, r1, r3
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	dd0b      	ble.n	8000eb6 <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8000e9e:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <lcdPrintf+0x10c>)
 8000ea0:	885a      	ldrh	r2, [r3, #2]
 8000ea2:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <lcdPrintf+0x110>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	88db      	ldrh	r3, [r3, #6]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <lcdPrintf+0x10c>)
 8000eae:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <lcdPrintf+0x10c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <lcdPrintf+0x10c>)
 8000ebe:	885a      	ldrh	r2, [r3, #2]
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <lcdPrintf+0x114>)
 8000ec2:	885b      	ldrh	r3, [r3, #2]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d302      	bcc.n	8000ece <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <lcdPrintf+0x10c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	805a      	strh	r2, [r3, #2]
	while (*p)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d193      	bne.n	8000dfe <lcdPrintf+0x1e>
		}
	}
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ee2:	b004      	add	sp, #16
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	200002bc 	.word	0x200002bc
 8000eec:	200002b4 	.word	0x200002b4
 8000ef0:	20000020 	.word	0x20000020
 8000ef4:	20000018 	.word	0x20000018

08000ef8 <lcdSetTextFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8000f00:	4a04      	ldr	r2, [pc, #16]	@ (8000f14 <lcdSetTextFont+0x1c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6093      	str	r3, [r2, #8]
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000020 	.word	0x20000020

08000f18 <lcdSetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	460a      	mov	r2, r1
 8000f22:	80fb      	strh	r3, [r7, #6]
 8000f24:	4613      	mov	r3, r2
 8000f26:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	4a05      	ldr	r2, [pc, #20]	@ (8000f40 <lcdSetTextColor+0x28>)
 8000f2c:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8000f2e:	88bb      	ldrh	r3, [r7, #4]
 8000f30:	4a03      	ldr	r2, [pc, #12]	@ (8000f40 <lcdSetTextColor+0x28>)
 8000f32:	6053      	str	r3, [r2, #4]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	20000020 	.word	0x20000020

08000f44 <lcdSetOrientation>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 8000f4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 8000f54:	2036      	movs	r0, #54	@ 0x36
 8000f56:	f000 f8cf 	bl	80010f8 <lcdWriteCommand>

	switch (lcdProperties.orientation)
 8000f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f5c:	791b      	ldrb	r3, [r3, #4]
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d83e      	bhi.n	8000fe0 <lcdSetOrientation+0x9c>
 8000f62:	a201      	add	r2, pc, #4	@ (adr r2, 8000f68 <lcdSetOrientation+0x24>)
 8000f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f68:	08000f79 	.word	0x08000f79
 8000f6c:	08000fad 	.word	0x08000fad
 8000f70:	08000f93 	.word	0x08000f93
 8000f74:	08000fc7 	.word	0x08000fc7
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 8000f78:	4b23      	ldr	r3, [pc, #140]	@ (8001008 <lcdSetOrientation+0xc4>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f8cb 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8000f82:	4b20      	ldr	r3, [pc, #128]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f84:	22f0      	movs	r2, #240	@ 0xf0
 8000f86:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8000f88:	4b1e      	ldr	r3, [pc, #120]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f8a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000f8e:	805a      	strh	r2, [r3, #2]
			break;
 8000f90:	e027      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 8000f92:	4b1e      	ldr	r3, [pc, #120]	@ (800100c <lcdSetOrientation+0xc8>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f8be 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f9e:	22f0      	movs	r2, #240	@ 0xf0
 8000fa0:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fa4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fa8:	805a      	strh	r2, [r3, #2]
			break;
 8000faa:	e01a      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8000fac:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <lcdSetOrientation+0xcc>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 f8b1 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fb8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fbc:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fc0:	22f0      	movs	r2, #240	@ 0xf0
 8000fc2:	805a      	strh	r2, [r3, #2]
			break;
 8000fc4:	e00d      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 8000fc6:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <lcdSetOrientation+0xd0>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f8a4 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fd2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fd6:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fda:	22f0      	movs	r2, #240	@ 0xf0
 8000fdc:	805a      	strh	r2, [r3, #2]
			break;
 8000fde:	e000      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		default:
			break;
 8000fe0:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8000fe2:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fec:	885b      	ldrh	r3, [r3, #2]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 f829 	bl	800104c <lcdSetWindow>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000018 	.word	0x20000018
 8001008:	200002b8 	.word	0x200002b8
 800100c:	200002ba 	.word	0x200002ba
 8001010:	200002b9 	.word	0x200002b9
 8001014:	200002bb 	.word	0x200002bb

08001018 <lcdSetCursor>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	460a      	mov	r2, r1
 8001022:	80fb      	strh	r3, [r7, #6]
 8001024:	4613      	mov	r3, r2
 8001026:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8001028:	4a07      	ldr	r2, [pc, #28]	@ (8001048 <lcdSetCursor+0x30>)
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 800102e:	4a06      	ldr	r2, [pc, #24]	@ (8001048 <lcdSetCursor+0x30>)
 8001030:	88bb      	ldrh	r3, [r7, #4]
 8001032:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 8001034:	88bb      	ldrh	r3, [r7, #4]
 8001036:	88fa      	ldrh	r2, [r7, #6]
 8001038:	88b9      	ldrh	r1, [r7, #4]
 800103a:	88f8      	ldrh	r0, [r7, #6]
 800103c:	f000 f806 	bl	800104c <lcdSetWindow>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200002b4 	.word	0x200002b4

0800104c <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4604      	mov	r4, r0
 8001054:	4608      	mov	r0, r1
 8001056:	4611      	mov	r1, r2
 8001058:	461a      	mov	r2, r3
 800105a:	4623      	mov	r3, r4
 800105c:	80fb      	strh	r3, [r7, #6]
 800105e:	4603      	mov	r3, r0
 8001060:	80bb      	strh	r3, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	807b      	strh	r3, [r7, #2]
 8001066:	4613      	mov	r3, r2
 8001068:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 800106a:	202a      	movs	r0, #42	@ 0x2a
 800106c:	f000 f844 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	b29b      	uxth	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f84e 	bl	8001118 <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	b29b      	uxth	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f848 	bl	8001118 <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 8001088:	887b      	ldrh	r3, [r7, #2]
 800108a:	0a1b      	lsrs	r3, r3, #8
 800108c:	b29b      	uxth	r3, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f842 	bl	8001118 <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	b29b      	uxth	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f83c 	bl	8001118 <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80010a0:	202b      	movs	r0, #43	@ 0x2b
 80010a2:	f000 f829 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 80010a6:	88bb      	ldrh	r3, [r7, #4]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f833 	bl	8001118 <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 f82d 	bl	8001118 <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 80010be:	883b      	ldrh	r3, [r7, #0]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 f827 	bl	8001118 <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 80010ca:	883b      	ldrh	r3, [r7, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f821 	bl	8001118 <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 80010d6:	202c      	movs	r0, #44	@ 0x2c
 80010d8:	f000 f80e 	bl	80010f8 <lcdWriteCommand>
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd90      	pop	{r4, r7, pc}

080010e4 <lcdReset>:
  }
  while (i < dataLength);
}

static void lcdReset(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 80010e8:	2001      	movs	r0, #1
 80010ea:	f000 f805 	bl	80010f8 <lcdWriteCommand>
	HAL_Delay(50);
 80010ee:	2032      	movs	r0, #50	@ 0x32
 80010f0:	f002 fb8c 	bl	800380c <HAL_Delay>
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 8001102:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8001106:	79fa      	ldrb	r2, [r7, #7]
 8001108:	b292      	uxth	r2, r2
 800110a:	801a      	strh	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 8001122:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <lcdWriteData+0x1c>)
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	8013      	strh	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	60020000 	.word	0x60020000

08001138 <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 8001138:	b490      	push	{r4, r7}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	4604      	mov	r4, r0
 8001140:	4608      	mov	r0, r1
 8001142:	4611      	mov	r1, r2
 8001144:	461a      	mov	r2, r3
 8001146:	4623      	mov	r3, r4
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	4603      	mov	r3, r0
 800114c:	71bb      	strb	r3, [r7, #6]
 800114e:	460b      	mov	r3, r1
 8001150:	717b      	strb	r3, [r7, #5]
 8001152:	4613      	mov	r3, r2
 8001154:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 800115a:	7f3b      	ldrb	r3, [r7, #28]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <lcdBuildMemoryAccessControlConfig+0x30>
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8001168:	7e3b      	ldrb	r3, [r7, #24]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <lcdBuildMemoryAccessControlConfig+0x3e>
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 8001176:	793b      	ldrb	r3, [r7, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <lcdBuildMemoryAccessControlConfig+0x4c>
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	f043 0310 	orr.w	r3, r3, #16
 8001182:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 8001184:	797b      	ldrb	r3, [r7, #5]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <lcdBuildMemoryAccessControlConfig+0x5a>
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	f043 0320 	orr.w	r3, r3, #32
 8001190:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <lcdBuildMemoryAccessControlConfig+0x68>
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800119e:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <lcdBuildMemoryAccessControlConfig+0x76>
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011ac:	73fb      	strb	r3, [r7, #15]
  return value;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc90      	pop	{r4, r7}
 80011b8:	4770      	bx	lr

080011ba <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011c2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011c6:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d013      	beq.n	80011fa <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80011d2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011d6:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80011da:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00b      	beq.n	80011fa <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80011e2:	e000      	b.n	80011e6 <ITM_SendChar+0x2c>
    {
      __NOP();
 80011e4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80011e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f9      	beq.n	80011e4 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80011f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80011fa:	687b      	ldr	r3, [r7, #4]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <_write>:
uint8_t handleTouch();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	e009      	b.n	800122e <_write+0x26>
		ITM_SendChar((*ptr++));  // Send the character via ITM
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1c5a      	adds	r2, r3, #1
 800121e:	60ba      	str	r2, [r7, #8]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ffc9 	bl	80011ba <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	3301      	adds	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	429a      	cmp	r2, r3
 8001234:	dbf1      	blt.n	800121a <_write+0x12>
	}
	return len;
 8001236:	687b      	ldr	r3, [r7, #4]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <USBH_HID_EventCallback>:
static uint8_t USB_BUSY = 0;
char qr_code_data[MAX_LINES][MAX_LINE_LENGTH] = { { '\0' } }; //static initializes strings with all null characters
HID_KEYBD_Info_TypeDef *Keyboard_Info;

/***DORJEE YOU HAVE TO CHANGE USBH_HID.H WHEN YOU GENERATE CODE****/
void USBH_HID_EventCallback(USBH_HandleTypeDef *phost) { //2.6s for 54 lines
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	Keyboard_Info = USBH_HID_GetKeybdInfo(phost);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f009 fa01 	bl	800a650 <USBH_HID_GetKeybdInfo>
 800124e:	4603      	mov	r3, r0
 8001250:	4a44      	ldr	r2, [pc, #272]	@ (8001364 <USBH_HID_EventCallback+0x124>)
 8001252:	6013      	str	r3, [r2, #0]
	char key = USBH_HID_GetASCIICode(Keyboard_Info);
 8001254:	4b43      	ldr	r3, [pc, #268]	@ (8001364 <USBH_HID_EventCallback+0x124>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f009 faa1 	bl	800a7a0 <USBH_HID_GetASCIICode>
 800125e:	4603      	mov	r3, r0
 8001260:	72fb      	strb	r3, [r7, #11]
	printf("%c\n", key);
 8001262:	7afb      	ldrb	r3, [r7, #11]
 8001264:	4619      	mov	r1, r3
 8001266:	4840      	ldr	r0, [pc, #256]	@ (8001368 <USBH_HID_EventCallback+0x128>)
 8001268:	f00b fee0 	bl	800d02c <iprintf>
	//disable the touchscreen interrupt functionality when usb transmission starts
	//after tab it calls itself one more time, so disable after i=0
	if (i == 1) {
 800126c:	4b3f      	ldr	r3, [pc, #252]	@ (800136c <USBH_HID_EventCallback+0x12c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d102      	bne.n	800127a <USBH_HID_EventCallback+0x3a>
		USB_BUSY = 1;
 8001274:	4b3e      	ldr	r3, [pc, #248]	@ (8001370 <USBH_HID_EventCallback+0x130>)
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
	}

	//store incoming chars. ignore null characters that come in for some reason
	if ((key != NULL_CHAR) && (key != SOH)) {
 800127a:	7afb      	ldrb	r3, [r7, #11]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d011      	beq.n	80012a4 <USBH_HID_EventCallback+0x64>
 8001280:	7afb      	ldrb	r3, [r7, #11]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d00e      	beq.n	80012a4 <USBH_HID_EventCallback+0x64>
		qr_code_data[i][j] = key;
 8001286:	4b39      	ldr	r3, [pc, #228]	@ (800136c <USBH_HID_EventCallback+0x12c>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b3a      	ldr	r3, [pc, #232]	@ (8001374 <USBH_HID_EventCallback+0x134>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	493a      	ldr	r1, [pc, #232]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 8001290:	0152      	lsls	r2, r2, #5
 8001292:	440a      	add	r2, r1
 8001294:	4413      	add	r3, r2
 8001296:	7afa      	ldrb	r2, [r7, #11]
 8001298:	701a      	strb	r2, [r3, #0]
		j++;
 800129a:	4b36      	ldr	r3, [pc, #216]	@ (8001374 <USBH_HID_EventCallback+0x134>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	4a34      	ldr	r2, [pc, #208]	@ (8001374 <USBH_HID_EventCallback+0x134>)
 80012a2:	6013      	str	r3, [r2, #0]
	}
	//handle new line
	if (key == NEWLINE_CHAR) {
 80012a4:	7afb      	ldrb	r3, [r7, #11]
 80012a6:	2b0a      	cmp	r3, #10
 80012a8:	d107      	bne.n	80012ba <USBH_HID_EventCallback+0x7a>
		j = 0;
 80012aa:	4b32      	ldr	r3, [pc, #200]	@ (8001374 <USBH_HID_EventCallback+0x134>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
		i++;
 80012b0:	4b2e      	ldr	r3, [pc, #184]	@ (800136c <USBH_HID_EventCallback+0x12c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	4a2d      	ldr	r2, [pc, #180]	@ (800136c <USBH_HID_EventCallback+0x12c>)
 80012b8:	6013      	str	r3, [r2, #0]
	}
	//tab is the end of the qr code
	if (key == TAB) {
 80012ba:	7afb      	ldrb	r3, [r7, #11]
 80012bc:	2b09      	cmp	r3, #9
 80012be:	d14c      	bne.n	800135a <USBH_HID_EventCallback+0x11a>
		for (int a = 0; a < 15; a++) {
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	e002      	b.n	80012cc <USBH_HID_EventCallback+0x8c>
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3301      	adds	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	2b0e      	cmp	r3, #14
 80012d0:	ddf9      	ble.n	80012c6 <USBH_HID_EventCallback+0x86>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d2:	b672      	cpsid	i
}
 80012d4:	bf00      	nop
			//printf("%s", qr_code_data[a]);
		}
		__disable_irq();
		//output_protocol(qr_code_data, i + 1);
		//check if the title is (10 chars + newline char) or less
		if (strlen(qr_code_data[0]) < (MAX_TITLE_SIZE + 1)) {
 80012d6:	4828      	ldr	r0, [pc, #160]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 80012d8:	f7fe ff8a 	bl	80001f0 <strlen>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b0c      	cmp	r3, #12
 80012e0:	d835      	bhi.n	800134e <USBH_HID_EventCallback+0x10e>
			uint8_t freeSectorNumber = getFreeSector();
 80012e2:	f001 fc6f 	bl	8002bc4 <getFreeSector>
 80012e6:	4603      	mov	r3, r0
 80012e8:	72bb      	strb	r3, [r7, #10]
			//printf("free sector is %d\n", freeSectorNumber);
			//only store the protocol if all memory isnt full
			if (freeSectorNumber <= 10) { //i only got 10 pages rn
 80012ea:	7abb      	ldrb	r3, [r7, #10]
 80012ec:	2b0a      	cmp	r3, #10
 80012ee:	d829      	bhi.n	8001344 <USBH_HID_EventCallback+0x104>
				//printf("why\n");
				storeProtocol(qr_code_data, freeSectorNumber);
 80012f0:	7abb      	ldrb	r3, [r7, #10]
 80012f2:	4619      	mov	r1, r3
 80012f4:	4820      	ldr	r0, [pc, #128]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 80012f6:	f001 fa9f 	bl	8002838 <storeProtocol>
				//go to the page num the new protocol is on
				pageNum = freeSectorNumber;
 80012fa:	4a20      	ldr	r2, [pc, #128]	@ (800137c <USBH_HID_EventCallback+0x13c>)
 80012fc:	7abb      	ldrb	r3, [r7, #10]
 80012fe:	7013      	strb	r3, [r2, #0]
				DrawMainPage(pageNum);
 8001300:	4b1e      	ldr	r3, [pc, #120]	@ (800137c <USBH_HID_EventCallback+0x13c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fad9 	bl	80018bc <DrawMainPage>
				currentPage = PAGE_MAIN;
 800130a:	4b1d      	ldr	r3, [pc, #116]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < MAX_LINES; a++) {
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	e013      	b.n	800133e <USBH_HID_EventCallback+0xfe>
					for (int b = 0; b < MAX_LINE_LENGTH; b++) {
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	e00a      	b.n	8001332 <USBH_HID_EventCallback+0xf2>
						qr_code_data[a][b] = '\0';
 800131c:	4a16      	ldr	r2, [pc, #88]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	015b      	lsls	r3, r3, #5
 8001322:	441a      	add	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
					for (int b = 0; b < MAX_LINE_LENGTH; b++) {
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3301      	adds	r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b1f      	cmp	r3, #31
 8001336:	ddf1      	ble.n	800131c <USBH_HID_EventCallback+0xdc>
				for (int a = 0; a < MAX_LINES; a++) {
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	3301      	adds	r3, #1
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	2bc7      	cmp	r3, #199	@ 0xc7
 8001342:	dde8      	ble.n	8001316 <USBH_HID_EventCallback+0xd6>
  __ASM volatile ("cpsie i" : : : "memory");
 8001344:	b662      	cpsie	i
}
 8001346:	bf00      	nop
					}
				}
			}
			__enable_irq();
			USB_BUSY = 0;
 8001348:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <USBH_HID_EventCallback+0x130>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
		}
		i = 0;
 800134e:	4b07      	ldr	r3, [pc, #28]	@ (800136c <USBH_HID_EventCallback+0x12c>)
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
		j = 0;
 8001354:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <USBH_HID_EventCallback+0x134>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
	}

}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	2001180c 	.word	0x2001180c
 8001368:	0800e0f4 	.word	0x0800e0f4
 800136c:	20000500 	.word	0x20000500
 8001370:	2000ff09 	.word	0x2000ff09
 8001374:	20000504 	.word	0x20000504
 8001378:	2000ff0c 	.word	0x2000ff0c
 800137c:	2000020f 	.word	0x2000020f
 8001380:	200004f4 	.word	0x200004f4

08001384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001388:	f002 f9ce 	bl	8003728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800138c:	f000 f842 	bl	8001414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001390:	f000 f9c4 	bl	800171c <MX_GPIO_Init>
  MX_FMC_Init();
 8001394:	f000 f960 	bl	8001658 <MX_FMC_Init>
  MX_TIM3_Init();
 8001398:	f000 f8dc 	bl	8001554 <MX_TIM3_Init>
  MX_SPI4_Init();
 800139c:	f000 f8a4 	bl	80014e8 <MX_SPI4_Init>
  MX_USB_HOST_Init();
 80013a0:	f00b f9c8 	bl	800c734 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80013a4:	f000 f92e 	bl	8001604 <MX_USART2_UART_Init>
//  	erase_sector(6);
//  	erase_sector(7);
//  	erase_sector(8);
//  	erase_sector(9);
//  	erase_sector(10);
	HAL_GPIO_WritePin(LCD_NRST_GPIO_Port, LCD_NRST_Pin, GPIO_PIN_SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2140      	movs	r1, #64	@ 0x40
 80013ac:	4816      	ldr	r0, [pc, #88]	@ (8001408 <main+0x84>)
 80013ae:	f002 ff3b 	bl	8004228 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80013b2:	2032      	movs	r0, #50	@ 0x32
 80013b4:	f002 fa2a 	bl	800380c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_NRST_GPIO_Port, LCD_NRST_Pin, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2140      	movs	r1, #64	@ 0x40
 80013bc:	4812      	ldr	r0, [pc, #72]	@ (8001408 <main+0x84>)
 80013be:	f002 ff33 	bl	8004228 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80013c2:	2032      	movs	r0, #50	@ 0x32
 80013c4:	f002 fa22 	bl	800380c <HAL_Delay>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013c8:	2100      	movs	r1, #0
 80013ca:	4810      	ldr	r0, [pc, #64]	@ (800140c <main+0x88>)
 80013cc:	f006 fa12 	bl	80077f4 <HAL_TIM_PWM_Start>
	htim3.Instance->CCR1 = 50;
 80013d0:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <main+0x88>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2232      	movs	r2, #50	@ 0x32
 80013d6:	635a      	str	r2, [r3, #52]	@ 0x34

	lcdInit();
 80013d8:	f7ff f9b6 	bl	8000748 <lcdInit>
	//lcdTest();
	lcdSetOrientation(LCD_ORIENTATION_LANDSCAPE);
 80013dc:	2001      	movs	r0, #1
 80013de:	f7ff fdb1 	bl	8000f44 <lcdSetOrientation>
	DrawMainPage(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f000 fa6a 	bl	80018bc <DrawMainPage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80013e8:	f00b f9ca 	bl	800c780 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
		if (touchFlag) {
 80013ec:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <main+0x8c>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d004      	beq.n	80013fe <main+0x7a>
			handleTouch();
 80013f4:	f000 fe8e 	bl	8002114 <handleTouch>
			touchFlag = 0;
 80013f8:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <main+0x8c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(100);
 80013fe:	2064      	movs	r0, #100	@ 0x64
 8001400:	f002 fa04 	bl	800380c <HAL_Delay>
    MX_USB_HOST_Process();
 8001404:	e7f0      	b.n	80013e8 <main+0x64>
 8001406:	bf00      	nop
 8001408:	40020c00 	.word	0x40020c00
 800140c:	20000414 	.word	0x20000414
 8001410:	200004fc 	.word	0x200004fc

08001414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b094      	sub	sp, #80	@ 0x50
 8001418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141a:	f107 0320 	add.w	r3, r7, #32
 800141e:	2230      	movs	r2, #48	@ 0x30
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f00b ff92 	bl	800d34c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	4b28      	ldr	r3, [pc, #160]	@ (80014e0 <SystemClock_Config+0xcc>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001440:	4a27      	ldr	r2, [pc, #156]	@ (80014e0 <SystemClock_Config+0xcc>)
 8001442:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001446:	6413      	str	r3, [r2, #64]	@ 0x40
 8001448:	4b25      	ldr	r3, [pc, #148]	@ (80014e0 <SystemClock_Config+0xcc>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001454:	2300      	movs	r3, #0
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	4b22      	ldr	r3, [pc, #136]	@ (80014e4 <SystemClock_Config+0xd0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a21      	ldr	r2, [pc, #132]	@ (80014e4 <SystemClock_Config+0xd0>)
 800145e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b1f      	ldr	r3, [pc, #124]	@ (80014e4 <SystemClock_Config+0xd0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001470:	2301      	movs	r3, #1
 8001472:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001474:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147a:	2302      	movs	r3, #2
 800147c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800147e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001482:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001484:	2308      	movs	r3, #8
 8001486:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001488:	23a8      	movs	r3, #168	@ 0xa8
 800148a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800148c:	2302      	movs	r3, #2
 800148e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001490:	2307      	movs	r3, #7
 8001492:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001494:	f107 0320 	add.w	r3, r7, #32
 8001498:	4618      	mov	r0, r3
 800149a:	f005 f82b 	bl	80064f4 <HAL_RCC_OscConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014a4:	f001 fecc 	bl	8003240 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a8:	230f      	movs	r3, #15
 80014aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ac:	2302      	movs	r3, #2
 80014ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014b4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	2105      	movs	r1, #5
 80014c6:	4618      	mov	r0, r3
 80014c8:	f005 fa8c 	bl	80069e4 <HAL_RCC_ClockConfig>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014d2:	f001 feb5 	bl	8003240 <Error_Handler>
  }
}
 80014d6:	bf00      	nop
 80014d8:	3750      	adds	r7, #80	@ 0x50
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40007000 	.word	0x40007000

080014e8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80014ec:	4b17      	ldr	r3, [pc, #92]	@ (800154c <MX_SPI4_Init+0x64>)
 80014ee:	4a18      	ldr	r2, [pc, #96]	@ (8001550 <MX_SPI4_Init+0x68>)
 80014f0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80014f2:	4b16      	ldr	r3, [pc, #88]	@ (800154c <MX_SPI4_Init+0x64>)
 80014f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014f8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80014fa:	4b14      	ldr	r3, [pc, #80]	@ (800154c <MX_SPI4_Init+0x64>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <MX_SPI4_Init+0x64>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001506:	4b11      	ldr	r3, [pc, #68]	@ (800154c <MX_SPI4_Init+0x64>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800150c:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <MX_SPI4_Init+0x64>)
 800150e:	2200      	movs	r2, #0
 8001510:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001512:	4b0e      	ldr	r3, [pc, #56]	@ (800154c <MX_SPI4_Init+0x64>)
 8001514:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001518:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800151a:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <MX_SPI4_Init+0x64>)
 800151c:	2230      	movs	r2, #48	@ 0x30
 800151e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001520:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <MX_SPI4_Init+0x64>)
 8001522:	2200      	movs	r2, #0
 8001524:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <MX_SPI4_Init+0x64>)
 8001528:	2200      	movs	r2, #0
 800152a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800152c:	4b07      	ldr	r3, [pc, #28]	@ (800154c <MX_SPI4_Init+0x64>)
 800152e:	2200      	movs	r2, #0
 8001530:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <MX_SPI4_Init+0x64>)
 8001534:	220a      	movs	r2, #10
 8001536:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001538:	4804      	ldr	r0, [pc, #16]	@ (800154c <MX_SPI4_Init+0x64>)
 800153a:	f005 fc71 	bl	8006e20 <HAL_SPI_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001544:	f001 fe7c 	bl	8003240 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200003bc 	.word	0x200003bc
 8001550:	40013400 	.word	0x40013400

08001554 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	@ 0x28
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155a:	f107 0320 	add.w	r3, r7, #32
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]
 8001572:	615a      	str	r2, [r3, #20]
 8001574:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001576:	4b21      	ldr	r3, [pc, #132]	@ (80015fc <MX_TIM3_Init+0xa8>)
 8001578:	4a21      	ldr	r2, [pc, #132]	@ (8001600 <MX_TIM3_Init+0xac>)
 800157a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168-1;
 800157c:	4b1f      	ldr	r3, [pc, #124]	@ (80015fc <MX_TIM3_Init+0xa8>)
 800157e:	22a7      	movs	r2, #167	@ 0xa7
 8001580:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001582:	4b1e      	ldr	r3, [pc, #120]	@ (80015fc <MX_TIM3_Init+0xa8>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001588:	4b1c      	ldr	r3, [pc, #112]	@ (80015fc <MX_TIM3_Init+0xa8>)
 800158a:	2264      	movs	r2, #100	@ 0x64
 800158c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158e:	4b1b      	ldr	r3, [pc, #108]	@ (80015fc <MX_TIM3_Init+0xa8>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001594:	4b19      	ldr	r3, [pc, #100]	@ (80015fc <MX_TIM3_Init+0xa8>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800159a:	4818      	ldr	r0, [pc, #96]	@ (80015fc <MX_TIM3_Init+0xa8>)
 800159c:	f006 f8da 	bl	8007754 <HAL_TIM_PWM_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80015a6:	f001 fe4b 	bl	8003240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015b2:	f107 0320 	add.w	r3, r7, #32
 80015b6:	4619      	mov	r1, r3
 80015b8:	4810      	ldr	r0, [pc, #64]	@ (80015fc <MX_TIM3_Init+0xa8>)
 80015ba:	f006 fd27 	bl	800800c <HAL_TIMEx_MasterConfigSynchronization>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80015c4:	f001 fe3c 	bl	8003240 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c8:	2360      	movs	r3, #96	@ 0x60
 80015ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2200      	movs	r2, #0
 80015dc:	4619      	mov	r1, r3
 80015de:	4807      	ldr	r0, [pc, #28]	@ (80015fc <MX_TIM3_Init+0xa8>)
 80015e0:	f006 f9d0 	bl	8007984 <HAL_TIM_PWM_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80015ea:	f001 fe29 	bl	8003240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015ee:	4803      	ldr	r0, [pc, #12]	@ (80015fc <MX_TIM3_Init+0xa8>)
 80015f0:	f001 febe 	bl	8003370 <HAL_TIM_MspPostInit>

}
 80015f4:	bf00      	nop
 80015f6:	3728      	adds	r7, #40	@ 0x28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000414 	.word	0x20000414
 8001600:	40000400 	.word	0x40000400

08001604 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001608:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <MX_USART2_UART_Init+0x4c>)
 800160a:	4a12      	ldr	r2, [pc, #72]	@ (8001654 <MX_USART2_UART_Init+0x50>)
 800160c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <MX_USART2_UART_Init+0x4c>)
 8001610:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001614:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001616:	4b0e      	ldr	r3, [pc, #56]	@ (8001650 <MX_USART2_UART_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800161c:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <MX_USART2_UART_Init+0x4c>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <MX_USART2_UART_Init+0x4c>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001628:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <MX_USART2_UART_Init+0x4c>)
 800162a:	220c      	movs	r2, #12
 800162c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162e:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <MX_USART2_UART_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <MX_USART2_UART_Init+0x4c>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	@ (8001650 <MX_USART2_UART_Init+0x4c>)
 800163c:	f006 fd62 	bl	8008104 <HAL_UART_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001646:	f001 fdfb 	bl	8003240 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000045c 	.word	0x2000045c
 8001654:	40004400 	.word	0x40004400

08001658 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
 800166c:	615a      	str	r2, [r3, #20]
 800166e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001670:	4b28      	ldr	r3, [pc, #160]	@ (8001714 <MX_FMC_Init+0xbc>)
 8001672:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001676:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001678:	4b26      	ldr	r3, [pc, #152]	@ (8001714 <MX_FMC_Init+0xbc>)
 800167a:	4a27      	ldr	r2, [pc, #156]	@ (8001718 <MX_FMC_Init+0xc0>)
 800167c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800167e:	4b25      	ldr	r3, [pc, #148]	@ (8001714 <MX_FMC_Init+0xbc>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001684:	4b23      	ldr	r3, [pc, #140]	@ (8001714 <MX_FMC_Init+0xbc>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800168a:	4b22      	ldr	r3, [pc, #136]	@ (8001714 <MX_FMC_Init+0xbc>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001690:	4b20      	ldr	r3, [pc, #128]	@ (8001714 <MX_FMC_Init+0xbc>)
 8001692:	2210      	movs	r2, #16
 8001694:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001696:	4b1f      	ldr	r3, [pc, #124]	@ (8001714 <MX_FMC_Init+0xbc>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800169c:	4b1d      	ldr	r3, [pc, #116]	@ (8001714 <MX_FMC_Init+0xbc>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
 80016a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001714 <MX_FMC_Init+0xbc>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80016a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001714 <MX_FMC_Init+0xbc>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80016ae:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <MX_FMC_Init+0xbc>)
 80016b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80016b6:	4b17      	ldr	r3, [pc, #92]	@ (8001714 <MX_FMC_Init+0xbc>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80016bc:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <MX_FMC_Init+0xbc>)
 80016be:	2200      	movs	r2, #0
 80016c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80016c2:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <MX_FMC_Init+0xbc>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80016c8:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <MX_FMC_Init+0xbc>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80016ce:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <MX_FMC_Init+0xbc>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001714 <MX_FMC_Init+0xbc>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 3;
 80016da:	2303      	movs	r3, #3
 80016dc:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80016de:	230f      	movs	r3, #15
 80016e0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 2;
 80016e2:	2302      	movs	r3, #2
 80016e4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 2;
 80016e6:	2302      	movs	r3, #2
 80016e8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80016ea:	2310      	movs	r3, #16
 80016ec:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80016ee:	2311      	movs	r3, #17
 80016f0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2200      	movs	r2, #0
 80016fa:	4619      	mov	r1, r3
 80016fc:	4805      	ldr	r0, [pc, #20]	@ (8001714 <MX_FMC_Init+0xbc>)
 80016fe:	f005 ffe1 	bl	80076c4 <HAL_SRAM_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8001708:	f001 fd9a 	bl	8003240 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800170c:	bf00      	nop
 800170e:	3720      	adds	r7, #32
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200004a4 	.word	0x200004a4
 8001718:	a0000104 	.word	0xa0000104

0800171c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08c      	sub	sp, #48	@ 0x30
 8001720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001722:	f107 031c 	add.w	r3, r7, #28
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
 8001736:	4b5c      	ldr	r3, [pc, #368]	@ (80018a8 <MX_GPIO_Init+0x18c>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	4a5b      	ldr	r2, [pc, #364]	@ (80018a8 <MX_GPIO_Init+0x18c>)
 800173c:	f043 0310 	orr.w	r3, r3, #16
 8001740:	6313      	str	r3, [r2, #48]	@ 0x30
 8001742:	4b59      	ldr	r3, [pc, #356]	@ (80018a8 <MX_GPIO_Init+0x18c>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	4b55      	ldr	r3, [pc, #340]	@ (80018a8 <MX_GPIO_Init+0x18c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	4a54      	ldr	r2, [pc, #336]	@ (80018a8 <MX_GPIO_Init+0x18c>)
 8001758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800175c:	6313      	str	r3, [r2, #48]	@ 0x30
 800175e:	4b52      	ldr	r3, [pc, #328]	@ (80018a8 <MX_GPIO_Init+0x18c>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	4b4e      	ldr	r3, [pc, #312]	@ (80018a8 <MX_GPIO_Init+0x18c>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	4a4d      	ldr	r2, [pc, #308]	@ (80018a8 <MX_GPIO_Init+0x18c>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6313      	str	r3, [r2, #48]	@ 0x30
 800177a:	4b4b      	ldr	r3, [pc, #300]	@ (80018a8 <MX_GPIO_Init+0x18c>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b47      	ldr	r3, [pc, #284]	@ (80018a8 <MX_GPIO_Init+0x18c>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	4a46      	ldr	r2, [pc, #280]	@ (80018a8 <MX_GPIO_Init+0x18c>)
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	6313      	str	r3, [r2, #48]	@ 0x30
 8001796:	4b44      	ldr	r3, [pc, #272]	@ (80018a8 <MX_GPIO_Init+0x18c>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	4b40      	ldr	r3, [pc, #256]	@ (80018a8 <MX_GPIO_Init+0x18c>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	4a3f      	ldr	r2, [pc, #252]	@ (80018a8 <MX_GPIO_Init+0x18c>)
 80017ac:	f043 0308 	orr.w	r3, r3, #8
 80017b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b2:	4b3d      	ldr	r3, [pc, #244]	@ (80018a8 <MX_GPIO_Init+0x18c>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	4b39      	ldr	r3, [pc, #228]	@ (80018a8 <MX_GPIO_Init+0x18c>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	4a38      	ldr	r2, [pc, #224]	@ (80018a8 <MX_GPIO_Init+0x18c>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ce:	4b36      	ldr	r3, [pc, #216]	@ (80018a8 <MX_GPIO_Init+0x18c>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017e0:	4832      	ldr	r0, [pc, #200]	@ (80018ac <MX_GPIO_Init+0x190>)
 80017e2:	f002 fd21 	bl	8004228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017ec:	4830      	ldr	r0, [pc, #192]	@ (80018b0 <MX_GPIO_Init+0x194>)
 80017ee:	f002 fd1b 	bl	8004228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_NRST_GPIO_Port, LCD_NRST_Pin, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2140      	movs	r1, #64	@ 0x40
 80017f6:	482f      	ldr	r0, [pc, #188]	@ (80018b4 <MX_GPIO_Init+0x198>)
 80017f8:	f002 fd16 	bl	8004228 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80017fc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800180e:	2305      	movs	r3, #5
 8001810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4619      	mov	r1, r3
 8001818:	4827      	ldr	r0, [pc, #156]	@ (80018b8 <MX_GPIO_Init+0x19c>)
 800181a:	f002 fb41 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800181e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	4619      	mov	r1, r3
 8001836:	481d      	ldr	r0, [pc, #116]	@ (80018ac <MX_GPIO_Init+0x190>)
 8001838:	f002 fb32 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 800183c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001842:	2301      	movs	r3, #1
 8001844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2300      	movs	r3, #0
 800184c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	4619      	mov	r1, r3
 8001854:	4816      	ldr	r0, [pc, #88]	@ (80018b0 <MX_GPIO_Init+0x194>)
 8001856:	f002 fb23 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_NRST_Pin */
  GPIO_InitStruct.Pin = LCD_NRST_Pin;
 800185a:	2340      	movs	r3, #64	@ 0x40
 800185c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185e:	2301      	movs	r3, #1
 8001860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_NRST_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	4619      	mov	r1, r3
 8001870:	4810      	ldr	r0, [pc, #64]	@ (80018b4 <MX_GPIO_Init+0x198>)
 8001872:	f002 fb15 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001876:	2320      	movs	r3, #32
 8001878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800187a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800187e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	4619      	mov	r1, r3
 800188a:	480b      	ldr	r0, [pc, #44]	@ (80018b8 <MX_GPIO_Init+0x19c>)
 800188c:	f002 fb08 	bl	8003ea0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001890:	2200      	movs	r2, #0
 8001892:	2100      	movs	r1, #0
 8001894:	2017      	movs	r0, #23
 8001896:	f002 f8b8 	bl	8003a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800189a:	2017      	movs	r0, #23
 800189c:	f002 f8d1 	bl	8003a42 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018a0:	bf00      	nop
 80018a2:	3730      	adds	r7, #48	@ 0x30
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40020000 	.word	0x40020000
 80018b0:	40020800 	.word	0x40020800
 80018b4:	40020c00 	.word	0x40020c00
 80018b8:	40020400 	.word	0x40020400

080018bc <DrawMainPage>:
/**
 * @brief: Draw main page and handle button label and status updates
 * @param: page_num: determines which page should be drawn from 1-10
 * @retval: none
 */
void DrawMainPage(uint8_t page_num) {
 80018bc:	b5b0      	push	{r4, r5, r7, lr}
 80018be:	b0a8      	sub	sp, #160	@ 0xa0
 80018c0:	af02      	add	r7, sp, #8
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
	//Draw "Protocol Title" box
	lcdFillRGB(COLOR_WHITE);
 80018c6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80018ca:	f7ff f8b1 	bl	8000a30 <lcdFillRGB>
	char empty[20] = "Empty\n"; //strings from flash memory come with newline at end
 80018ce:	4a9c      	ldr	r2, [pc, #624]	@ (8001b40 <DrawMainPage+0x284>)
 80018d0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80018d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018d8:	6018      	str	r0, [r3, #0]
 80018da:	3304      	adds	r3, #4
 80018dc:	8019      	strh	r1, [r3, #0]
 80018de:	3302      	adds	r3, #2
 80018e0:	0c0a      	lsrs	r2, r1, #16
 80018e2:	701a      	strb	r2, [r3, #0]
 80018e4:	f107 0387 	add.w	r3, r7, #135	@ 0x87
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	731a      	strb	r2, [r3, #12]
	char pageTitle[20] = "";
 80018f2:	2300      	movs	r3, #0
 80018f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80018f6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
	sprintf(pageTitle, "Page %d", page_num);
 8001904:	79fa      	ldrb	r2, [r7, #7]
 8001906:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800190a:	498e      	ldr	r1, [pc, #568]	@ (8001b44 <DrawMainPage+0x288>)
 800190c:	4618      	mov	r0, r3
 800190e:	f00b fc05 	bl	800d11c <siprintf>
	lcdSetCursor(10, 10);
 8001912:	210a      	movs	r1, #10
 8001914:	200a      	movs	r0, #10
 8001916:	f7ff fb7f 	bl	8001018 <lcdSetCursor>
	lcdSetTextColor(COLOR_BLACK, COLOR_WHITE);
 800191a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800191e:	2000      	movs	r0, #0
 8001920:	f7ff fafa 	bl	8000f18 <lcdSetTextColor>
	lcdSetTextFont(&Font20);
 8001924:	4888      	ldr	r0, [pc, #544]	@ (8001b48 <DrawMainPage+0x28c>)
 8001926:	f7ff fae7 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf(pageTitle);
 800192a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fa56 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 8001934:	4885      	ldr	r0, [pc, #532]	@ (8001b4c <DrawMainPage+0x290>)
 8001936:	f7ff fadf 	bl	8000ef8 <lcdSetTextFont>

	//get button label info from flash memory
	char readBuffer1[MAX_LINE_LENGTH] = ""; //initialize with nulls
 800193a:	2300      	movs	r3, #0
 800193c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800193e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
 800194c:	611a      	str	r2, [r3, #16]
 800194e:	615a      	str	r2, [r3, #20]
 8001950:	619a      	str	r2, [r3, #24]
	char readBuffer2[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001952:	2300      	movs	r3, #0
 8001954:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001956:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
 8001964:	611a      	str	r2, [r3, #16]
 8001966:	615a      	str	r2, [r3, #20]
 8001968:	619a      	str	r2, [r3, #24]
	char readBuffer3[MAX_LINE_LENGTH] = ""; //initialize with nulls
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]
 800197e:	615a      	str	r2, [r3, #20]
 8001980:	619a      	str	r2, [r3, #24]

	//if the protocol exists, read from it. else, name it empty
	if (read_from_flash(readBuffer1, get_sector_address(page_num))) {
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	4618      	mov	r0, r3
 8001986:	f001 fb69 	bl	800305c <get_sector_address>
 800198a:	4602      	mov	r2, r0
 800198c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001990:	4611      	mov	r1, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f000 ff1b 	bl	80027ce <read_from_flash>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00a      	beq.n	80019b4 <DrawMainPage+0xf8>
		strcpy(buttons[0].label, readBuffer1);
 800199e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80019a2:	4619      	mov	r1, r3
 80019a4:	486a      	ldr	r0, [pc, #424]	@ (8001b50 <DrawMainPage+0x294>)
 80019a6:	f00b fd5c 	bl	800d462 <strcpy>
		buttons[0].status = NOT_EMPTY;
 80019aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001b54 <DrawMainPage+0x298>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80019b2:	e009      	b.n	80019c8 <DrawMainPage+0x10c>
	} else {
		strcpy(buttons[0].label, empty);
 80019b4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80019b8:	4619      	mov	r1, r3
 80019ba:	4865      	ldr	r0, [pc, #404]	@ (8001b50 <DrawMainPage+0x294>)
 80019bc:	f00b fd51 	bl	800d462 <strcpy>
		buttons[0].status = EMPTY;
 80019c0:	4b64      	ldr	r3, [pc, #400]	@ (8001b54 <DrawMainPage+0x298>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}
	if (read_from_flash(readBuffer2,
			get_sector_address(page_num) + PROTOCOL_SIZE)) {
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f001 fb46 	bl	800305c <get_sector_address>
 80019d0:	4603      	mov	r3, r0
	if (read_from_flash(readBuffer2,
 80019d2:	f503 53bb 	add.w	r3, r3, #5984	@ 0x1760
 80019d6:	3310      	adds	r3, #16
 80019d8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80019dc:	4619      	mov	r1, r3
 80019de:	4610      	mov	r0, r2
 80019e0:	f000 fef5 	bl	80027ce <read_from_flash>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00a      	beq.n	8001a00 <DrawMainPage+0x144>
		strcpy(buttons[1].label, readBuffer2);
 80019ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019ee:	4619      	mov	r1, r3
 80019f0:	4859      	ldr	r0, [pc, #356]	@ (8001b58 <DrawMainPage+0x29c>)
 80019f2:	f00b fd36 	bl	800d462 <strcpy>
		buttons[1].status = NOT_EMPTY;
 80019f6:	4b57      	ldr	r3, [pc, #348]	@ (8001b54 <DrawMainPage+0x298>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 80019fe:	e009      	b.n	8001a14 <DrawMainPage+0x158>
	} else {
		strcpy(buttons[1].label, empty);
 8001a00:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001a04:	4619      	mov	r1, r3
 8001a06:	4854      	ldr	r0, [pc, #336]	@ (8001b58 <DrawMainPage+0x29c>)
 8001a08:	f00b fd2b 	bl	800d462 <strcpy>
		buttons[1].status = EMPTY;
 8001a0c:	4b51      	ldr	r3, [pc, #324]	@ (8001b54 <DrawMainPage+0x298>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
	}
	if (read_from_flash(readBuffer3,
			get_sector_address(page_num) + 2 * PROTOCOL_SIZE)) {
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f001 fb20 	bl	800305c <get_sector_address>
 8001a1c:	4603      	mov	r3, r0
	if (read_from_flash(readBuffer3,
 8001a1e:	f503 533b 	add.w	r3, r3, #11968	@ 0x2ec0
 8001a22:	3320      	adds	r3, #32
 8001a24:	f107 020c 	add.w	r2, r7, #12
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	f000 fecf 	bl	80027ce <read_from_flash>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00a      	beq.n	8001a4c <DrawMainPage+0x190>
		strcpy(buttons[2].label, readBuffer3);
 8001a36:	f107 030c 	add.w	r3, r7, #12
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4847      	ldr	r0, [pc, #284]	@ (8001b5c <DrawMainPage+0x2a0>)
 8001a3e:	f00b fd10 	bl	800d462 <strcpy>
		buttons[2].status = NOT_EMPTY;
 8001a42:	4b44      	ldr	r3, [pc, #272]	@ (8001b54 <DrawMainPage+0x298>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8001a4a:	e009      	b.n	8001a60 <DrawMainPage+0x1a4>
	} else {
		strcpy(buttons[2].label, empty);
 8001a4c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001a50:	4619      	mov	r1, r3
 8001a52:	4842      	ldr	r0, [pc, #264]	@ (8001b5c <DrawMainPage+0x2a0>)
 8001a54:	f00b fd05 	bl	800d462 <strcpy>
		buttons[2].status = EMPTY;
 8001a58:	4b3e      	ldr	r3, [pc, #248]	@ (8001b54 <DrawMainPage+0x298>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	}

	// Draw buttons
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a66:	e08d      	b.n	8001b84 <DrawMainPage+0x2c8>
		lcdDrawRect(buttons[i].x, buttons[i].y, buttons[i].w, buttons[i].h,
 8001a68:	4a3a      	ldr	r2, [pc, #232]	@ (8001b54 <DrawMainPage+0x298>)
 8001a6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a6e:	212a      	movs	r1, #42	@ 0x2a
 8001a70:	fb01 f303 	mul.w	r3, r1, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	b218      	sxth	r0, r3
 8001a7a:	4a36      	ldr	r2, [pc, #216]	@ (8001b54 <DrawMainPage+0x298>)
 8001a7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a80:	212a      	movs	r1, #42	@ 0x2a
 8001a82:	fb01 f303 	mul.w	r3, r1, r3
 8001a86:	4413      	add	r3, r2
 8001a88:	3302      	adds	r3, #2
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	b219      	sxth	r1, r3
 8001a8e:	4a31      	ldr	r2, [pc, #196]	@ (8001b54 <DrawMainPage+0x298>)
 8001a90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a94:	242a      	movs	r4, #42	@ 0x2a
 8001a96:	fb04 f303 	mul.w	r3, r4, r3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	b21a      	sxth	r2, r3
 8001aa2:	4c2c      	ldr	r4, [pc, #176]	@ (8001b54 <DrawMainPage+0x298>)
 8001aa4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001aa8:	252a      	movs	r5, #42	@ 0x2a
 8001aaa:	fb05 f303 	mul.w	r3, r5, r3
 8001aae:	4423      	add	r3, r4
 8001ab0:	3306      	adds	r3, #6
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	2400      	movs	r4, #0
 8001ab8:	9400      	str	r4, [sp, #0]
 8001aba:	f7ff f89d 	bl	8000bf8 <lcdDrawRect>
		COLOR_BLACK);
		buttons[i].label[strlen(buttons[i].label) - 1] = ' '; //dont display null terminator
 8001abe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ac2:	222a      	movs	r2, #42	@ 0x2a
 8001ac4:	fb02 f303 	mul.w	r3, r2, r3
 8001ac8:	3308      	adds	r3, #8
 8001aca:	4a22      	ldr	r2, [pc, #136]	@ (8001b54 <DrawMainPage+0x298>)
 8001acc:	4413      	add	r3, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fb8e 	bl	80001f0 <strlen>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	491e      	ldr	r1, [pc, #120]	@ (8001b54 <DrawMainPage+0x298>)
 8001ada:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001ade:	202a      	movs	r0, #42	@ 0x2a
 8001ae0:	fb00 f202 	mul.w	r2, r0, r2
 8001ae4:	440a      	add	r2, r1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3308      	adds	r3, #8
 8001aea:	2220      	movs	r2, #32
 8001aec:	701a      	strb	r2, [r3, #0]
		lcdSetCursor(buttons[i].x + 10, buttons[i].y + 10);
 8001aee:	4a19      	ldr	r2, [pc, #100]	@ (8001b54 <DrawMainPage+0x298>)
 8001af0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001af4:	212a      	movs	r1, #42	@ 0x2a
 8001af6:	fb01 f303 	mul.w	r3, r1, r3
 8001afa:	4413      	add	r3, r2
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	330a      	adds	r3, #10
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	4914      	ldr	r1, [pc, #80]	@ (8001b54 <DrawMainPage+0x298>)
 8001b04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b08:	202a      	movs	r0, #42	@ 0x2a
 8001b0a:	fb00 f303 	mul.w	r3, r0, r3
 8001b0e:	440b      	add	r3, r1
 8001b10:	3302      	adds	r3, #2
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	330a      	adds	r3, #10
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	f7ff fa7c 	bl	8001018 <lcdSetCursor>
		if (buttons[i].status == EMPTY) {
 8001b20:	4a0c      	ldr	r2, [pc, #48]	@ (8001b54 <DrawMainPage+0x298>)
 8001b22:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b26:	212a      	movs	r1, #42	@ 0x2a
 8001b28:	fb01 f303 	mul.w	r3, r1, r3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3328      	adds	r3, #40	@ 0x28
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d116      	bne.n	8001b64 <DrawMainPage+0x2a8>
			lcdPrintf("EMPTY");
 8001b36:	480a      	ldr	r0, [pc, #40]	@ (8001b60 <DrawMainPage+0x2a4>)
 8001b38:	f7ff f952 	bl	8000de0 <lcdPrintf>
 8001b3c:	e01d      	b.n	8001b7a <DrawMainPage+0x2be>
 8001b3e:	bf00      	nop
 8001b40:	0800e108 	.word	0x0800e108
 8001b44:	0800e0f8 	.word	0x0800e0f8
 8001b48:	20000010 	.word	0x20000010
 8001b4c:	20000008 	.word	0x20000008
 8001b50:	20000038 	.word	0x20000038
 8001b54:	20000030 	.word	0x20000030
 8001b58:	20000062 	.word	0x20000062
 8001b5c:	2000008c 	.word	0x2000008c
 8001b60:	0800e100 	.word	0x0800e100
		} else {
			lcdPrintf(buttons[i].label);
 8001b64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b68:	222a      	movs	r2, #42	@ 0x2a
 8001b6a:	fb02 f303 	mul.w	r3, r2, r3
 8001b6e:	3308      	adds	r3, #8
 8001b70:	4a3c      	ldr	r2, [pc, #240]	@ (8001c64 <DrawMainPage+0x3a8>)
 8001b72:	4413      	add	r3, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff f933 	bl	8000de0 <lcdPrintf>
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8001b7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b7e:	3301      	adds	r3, #1
 8001b80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	f77f af6d 	ble.w	8001a68 <DrawMainPage+0x1ac>
		}
	}

	// Draw "Next" button
	if (page_num != 10) {
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	2b0a      	cmp	r3, #10
 8001b92:	d01e      	beq.n	8001bd2 <DrawMainPage+0x316>
		//BSP_LCD_SetTextColor(LCD_COLOR_RED);
		lcdDrawRect(nextButton.x, nextButton.y, nextButton.w, nextButton.h,
 8001b94:	4b34      	ldr	r3, [pc, #208]	@ (8001c68 <DrawMainPage+0x3ac>)
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	b218      	sxth	r0, r3
 8001b9a:	4b33      	ldr	r3, [pc, #204]	@ (8001c68 <DrawMainPage+0x3ac>)
 8001b9c:	885b      	ldrh	r3, [r3, #2]
 8001b9e:	b219      	sxth	r1, r3
 8001ba0:	4b31      	ldr	r3, [pc, #196]	@ (8001c68 <DrawMainPage+0x3ac>)
 8001ba2:	889b      	ldrh	r3, [r3, #4]
 8001ba4:	b21a      	sxth	r2, r3
 8001ba6:	4b30      	ldr	r3, [pc, #192]	@ (8001c68 <DrawMainPage+0x3ac>)
 8001ba8:	88db      	ldrh	r3, [r3, #6]
 8001baa:	b21b      	sxth	r3, r3
 8001bac:	2400      	movs	r4, #0
 8001bae:	9400      	str	r4, [sp, #0]
 8001bb0:	f7ff f822 	bl	8000bf8 <lcdDrawRect>
		COLOR_BLACK);
		lcdSetCursor(nextButton.x + 5, nextButton.y + 5);
 8001bb4:	4b2c      	ldr	r3, [pc, #176]	@ (8001c68 <DrawMainPage+0x3ac>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	3305      	adds	r3, #5
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001c68 <DrawMainPage+0x3ac>)
 8001bbe:	885b      	ldrh	r3, [r3, #2]
 8001bc0:	3305      	adds	r3, #5
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	f7ff fa26 	bl	8001018 <lcdSetCursor>
		lcdPrintf(nextButton.label);
 8001bcc:	4827      	ldr	r0, [pc, #156]	@ (8001c6c <DrawMainPage+0x3b0>)
 8001bce:	f7ff f907 	bl	8000de0 <lcdPrintf>
	}

	// Draw "Back" button
	if (page_num != 1) {
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d01e      	beq.n	8001c16 <DrawMainPage+0x35a>
		lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8001bd8:	4b25      	ldr	r3, [pc, #148]	@ (8001c70 <DrawMainPage+0x3b4>)
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	b218      	sxth	r0, r3
 8001bde:	4b24      	ldr	r3, [pc, #144]	@ (8001c70 <DrawMainPage+0x3b4>)
 8001be0:	885b      	ldrh	r3, [r3, #2]
 8001be2:	b219      	sxth	r1, r3
 8001be4:	4b22      	ldr	r3, [pc, #136]	@ (8001c70 <DrawMainPage+0x3b4>)
 8001be6:	889b      	ldrh	r3, [r3, #4]
 8001be8:	b21a      	sxth	r2, r3
 8001bea:	4b21      	ldr	r3, [pc, #132]	@ (8001c70 <DrawMainPage+0x3b4>)
 8001bec:	88db      	ldrh	r3, [r3, #6]
 8001bee:	b21b      	sxth	r3, r3
 8001bf0:	2400      	movs	r4, #0
 8001bf2:	9400      	str	r4, [sp, #0]
 8001bf4:	f7ff f800 	bl	8000bf8 <lcdDrawRect>
		COLOR_BLACK);
		lcdSetCursor(backButton.x + 5, backButton.y + 5);
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c70 <DrawMainPage+0x3b4>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	3305      	adds	r3, #5
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	4b1b      	ldr	r3, [pc, #108]	@ (8001c70 <DrawMainPage+0x3b4>)
 8001c02:	885b      	ldrh	r3, [r3, #2]
 8001c04:	3305      	adds	r3, #5
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f7ff fa04 	bl	8001018 <lcdSetCursor>
		lcdPrintf(backButton.label);
 8001c10:	4818      	ldr	r0, [pc, #96]	@ (8001c74 <DrawMainPage+0x3b8>)
 8001c12:	f7ff f8e5 	bl	8000de0 <lcdPrintf>
	}
//
	//draw "Queue" button on page 1

	if (page_num == 1) {
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d11e      	bne.n	8001c5a <DrawMainPage+0x39e>
		lcdDrawRect(queueButton.x, queueButton.y, queueButton.w, queueButton.h,
 8001c1c:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <DrawMainPage+0x3bc>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	b218      	sxth	r0, r3
 8001c22:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <DrawMainPage+0x3bc>)
 8001c24:	885b      	ldrh	r3, [r3, #2]
 8001c26:	b219      	sxth	r1, r3
 8001c28:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <DrawMainPage+0x3bc>)
 8001c2a:	889b      	ldrh	r3, [r3, #4]
 8001c2c:	b21a      	sxth	r2, r3
 8001c2e:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <DrawMainPage+0x3bc>)
 8001c30:	88db      	ldrh	r3, [r3, #6]
 8001c32:	b21b      	sxth	r3, r3
 8001c34:	2400      	movs	r4, #0
 8001c36:	9400      	str	r4, [sp, #0]
 8001c38:	f7fe ffde 	bl	8000bf8 <lcdDrawRect>
		COLOR_BLACK);
		lcdSetCursor(queueButton.x + 5, queueButton.y + 5);
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c78 <DrawMainPage+0x3bc>)
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	3305      	adds	r3, #5
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <DrawMainPage+0x3bc>)
 8001c46:	885b      	ldrh	r3, [r3, #2]
 8001c48:	3305      	adds	r3, #5
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4610      	mov	r0, r2
 8001c50:	f7ff f9e2 	bl	8001018 <lcdSetCursor>
		lcdPrintf(queueButton.label);
 8001c54:	4809      	ldr	r0, [pc, #36]	@ (8001c7c <DrawMainPage+0x3c0>)
 8001c56:	f7ff f8c3 	bl	8000de0 <lcdPrintf>
	}
}
 8001c5a:	bf00      	nop
 8001c5c:	3798      	adds	r7, #152	@ 0x98
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bdb0      	pop	{r4, r5, r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000030 	.word	0x20000030
 8001c68:	200001e4 	.word	0x200001e4
 8001c6c:	200001ec 	.word	0x200001ec
 8001c70:	200001b8 	.word	0x200001b8
 8001c74:	200001c0 	.word	0x200001c0
 8001c78:	200000b0 	.word	0x200000b0
 8001c7c:	200000b8 	.word	0x200000b8

08001c80 <DrawInfoPage>:

void DrawInfoPage(char protocolTitle[MAX_LINE_LENGTH]) {
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	6078      	str	r0, [r7, #4]
	lcdFillRGB(COLOR_WHITE);
 8001c88:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001c8c:	f7fe fed0 	bl	8000a30 <lcdFillRGB>
	//Display protocol name at top of screen
	lcdSetCursor(90, 10);
 8001c90:	210a      	movs	r1, #10
 8001c92:	205a      	movs	r0, #90	@ 0x5a
 8001c94:	f7ff f9c0 	bl	8001018 <lcdSetCursor>
	lcdSetTextFont(&Font20);
 8001c98:	4844      	ldr	r0, [pc, #272]	@ (8001dac <DrawInfoPage+0x12c>)
 8001c9a:	f7ff f92d 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf(protocolTitle);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff f89e 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 8001ca4:	4842      	ldr	r0, [pc, #264]	@ (8001db0 <DrawInfoPage+0x130>)
 8001ca6:	f7ff f927 	bl	8000ef8 <lcdSetTextFont>

	//Draw "QueueSelect" button on select page
	lcdDrawRect(queueSelectButton.x, queueSelectButton.y, queueSelectButton.w,
 8001caa:	4b42      	ldr	r3, [pc, #264]	@ (8001db4 <DrawInfoPage+0x134>)
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	b218      	sxth	r0, r3
 8001cb0:	4b40      	ldr	r3, [pc, #256]	@ (8001db4 <DrawInfoPage+0x134>)
 8001cb2:	885b      	ldrh	r3, [r3, #2]
 8001cb4:	b219      	sxth	r1, r3
 8001cb6:	4b3f      	ldr	r3, [pc, #252]	@ (8001db4 <DrawInfoPage+0x134>)
 8001cb8:	889b      	ldrh	r3, [r3, #4]
 8001cba:	b21a      	sxth	r2, r3
			queueSelectButton.h, COLOR_BLACK);
 8001cbc:	4b3d      	ldr	r3, [pc, #244]	@ (8001db4 <DrawInfoPage+0x134>)
 8001cbe:	88db      	ldrh	r3, [r3, #6]
	lcdDrawRect(queueSelectButton.x, queueSelectButton.y, queueSelectButton.w,
 8001cc0:	b21b      	sxth	r3, r3
 8001cc2:	2400      	movs	r4, #0
 8001cc4:	9400      	str	r4, [sp, #0]
 8001cc6:	f7fe ff97 	bl	8000bf8 <lcdDrawRect>
	lcdSetCursor(queueSelectButton.x + 10, queueSelectButton.y + 10);
 8001cca:	4b3a      	ldr	r3, [pc, #232]	@ (8001db4 <DrawInfoPage+0x134>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	330a      	adds	r3, #10
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	4b38      	ldr	r3, [pc, #224]	@ (8001db4 <DrawInfoPage+0x134>)
 8001cd4:	885b      	ldrh	r3, [r3, #2]
 8001cd6:	330a      	adds	r3, #10
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4610      	mov	r0, r2
 8001cde:	f7ff f99b 	bl	8001018 <lcdSetCursor>
	lcdPrintf(queueSelectButton.label);
 8001ce2:	4835      	ldr	r0, [pc, #212]	@ (8001db8 <DrawInfoPage+0x138>)
 8001ce4:	f7ff f87c 	bl	8000de0 <lcdPrintf>

	//Draw "Select" button
	lcdDrawRect(selectButton.x, selectButton.y, selectButton.w, selectButton.h,
 8001ce8:	4b34      	ldr	r3, [pc, #208]	@ (8001dbc <DrawInfoPage+0x13c>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	b218      	sxth	r0, r3
 8001cee:	4b33      	ldr	r3, [pc, #204]	@ (8001dbc <DrawInfoPage+0x13c>)
 8001cf0:	885b      	ldrh	r3, [r3, #2]
 8001cf2:	b219      	sxth	r1, r3
 8001cf4:	4b31      	ldr	r3, [pc, #196]	@ (8001dbc <DrawInfoPage+0x13c>)
 8001cf6:	889b      	ldrh	r3, [r3, #4]
 8001cf8:	b21a      	sxth	r2, r3
 8001cfa:	4b30      	ldr	r3, [pc, #192]	@ (8001dbc <DrawInfoPage+0x13c>)
 8001cfc:	88db      	ldrh	r3, [r3, #6]
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	2400      	movs	r4, #0
 8001d02:	9400      	str	r4, [sp, #0]
 8001d04:	f7fe ff78 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(selectButton.x + 10, selectButton.y + 10);
 8001d08:	4b2c      	ldr	r3, [pc, #176]	@ (8001dbc <DrawInfoPage+0x13c>)
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	330a      	adds	r3, #10
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	4b2a      	ldr	r3, [pc, #168]	@ (8001dbc <DrawInfoPage+0x13c>)
 8001d12:	885b      	ldrh	r3, [r3, #2]
 8001d14:	330a      	adds	r3, #10
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	f7ff f97c 	bl	8001018 <lcdSetCursor>
	lcdPrintf(selectButton.label);
 8001d20:	4827      	ldr	r0, [pc, #156]	@ (8001dc0 <DrawInfoPage+0x140>)
 8001d22:	f7ff f85d 	bl	8000de0 <lcdPrintf>

	//Draw "Delete" button
	lcdDrawRect(deleteButton.x, deleteButton.y, deleteButton.w, deleteButton.h,
 8001d26:	4b27      	ldr	r3, [pc, #156]	@ (8001dc4 <DrawInfoPage+0x144>)
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	b218      	sxth	r0, r3
 8001d2c:	4b25      	ldr	r3, [pc, #148]	@ (8001dc4 <DrawInfoPage+0x144>)
 8001d2e:	885b      	ldrh	r3, [r3, #2]
 8001d30:	b219      	sxth	r1, r3
 8001d32:	4b24      	ldr	r3, [pc, #144]	@ (8001dc4 <DrawInfoPage+0x144>)
 8001d34:	889b      	ldrh	r3, [r3, #4]
 8001d36:	b21a      	sxth	r2, r3
 8001d38:	4b22      	ldr	r3, [pc, #136]	@ (8001dc4 <DrawInfoPage+0x144>)
 8001d3a:	88db      	ldrh	r3, [r3, #6]
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	2400      	movs	r4, #0
 8001d40:	9400      	str	r4, [sp, #0]
 8001d42:	f7fe ff59 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(deleteButton.x + 10, deleteButton.y + 10);
 8001d46:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc4 <DrawInfoPage+0x144>)
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	330a      	adds	r3, #10
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc4 <DrawInfoPage+0x144>)
 8001d50:	885b      	ldrh	r3, [r3, #2]
 8001d52:	330a      	adds	r3, #10
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	4619      	mov	r1, r3
 8001d58:	4610      	mov	r0, r2
 8001d5a:	f7ff f95d 	bl	8001018 <lcdSetCursor>
	lcdPrintf(deleteButton.label);
 8001d5e:	481a      	ldr	r0, [pc, #104]	@ (8001dc8 <DrawInfoPage+0x148>)
 8001d60:	f7ff f83e 	bl	8000de0 <lcdPrintf>

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8001d64:	4b19      	ldr	r3, [pc, #100]	@ (8001dcc <DrawInfoPage+0x14c>)
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	b218      	sxth	r0, r3
 8001d6a:	4b18      	ldr	r3, [pc, #96]	@ (8001dcc <DrawInfoPage+0x14c>)
 8001d6c:	885b      	ldrh	r3, [r3, #2]
 8001d6e:	b219      	sxth	r1, r3
 8001d70:	4b16      	ldr	r3, [pc, #88]	@ (8001dcc <DrawInfoPage+0x14c>)
 8001d72:	889b      	ldrh	r3, [r3, #4]
 8001d74:	b21a      	sxth	r2, r3
 8001d76:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <DrawInfoPage+0x14c>)
 8001d78:	88db      	ldrh	r3, [r3, #6]
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	2400      	movs	r4, #0
 8001d7e:	9400      	str	r4, [sp, #0]
 8001d80:	f7fe ff3a 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 8001d84:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <DrawInfoPage+0x14c>)
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	330a      	adds	r3, #10
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dcc <DrawInfoPage+0x14c>)
 8001d8e:	885b      	ldrh	r3, [r3, #2]
 8001d90:	330a      	adds	r3, #10
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	4619      	mov	r1, r3
 8001d96:	4610      	mov	r0, r2
 8001d98:	f7ff f93e 	bl	8001018 <lcdSetCursor>
	lcdPrintf(backButton.label);
 8001d9c:	480c      	ldr	r0, [pc, #48]	@ (8001dd0 <DrawInfoPage+0x150>)
 8001d9e:	f7ff f81f 	bl	8000de0 <lcdPrintf>
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd90      	pop	{r4, r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000010 	.word	0x20000010
 8001db0:	20000008 	.word	0x20000008
 8001db4:	20000134 	.word	0x20000134
 8001db8:	2000013c 	.word	0x2000013c
 8001dbc:	20000160 	.word	0x20000160
 8001dc0:	20000168 	.word	0x20000168
 8001dc4:	2000018c 	.word	0x2000018c
 8001dc8:	20000194 	.word	0x20000194
 8001dcc:	200001b8 	.word	0x200001b8
 8001dd0:	200001c0 	.word	0x200001c0

08001dd4 <DrawConfirmationPage>:

void DrawConfirmationPage(uint32_t sector, uint32_t offset) {
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
	lcdFillRGB(COLOR_WHITE);
 8001dde:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001de2:	f7fe fe25 	bl	8000a30 <lcdFillRGB>

	//display confirmation text
	lcdSetCursor(10, 10);
 8001de6:	210a      	movs	r1, #10
 8001de8:	200a      	movs	r0, #10
 8001dea:	f7ff f915 	bl	8001018 <lcdSetCursor>
	lcdSetTextFont(&Font20);
 8001dee:	482c      	ldr	r0, [pc, #176]	@ (8001ea0 <DrawConfirmationPage+0xcc>)
 8001df0:	f7ff f882 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf("Delete: ");
 8001df4:	482b      	ldr	r0, [pc, #172]	@ (8001ea4 <DrawConfirmationPage+0xd0>)
 8001df6:	f7fe fff3 	bl	8000de0 <lcdPrintf>
	lcdPrintf(buttons[offset].label);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	222a      	movs	r2, #42	@ 0x2a
 8001dfe:	fb02 f303 	mul.w	r3, r2, r3
 8001e02:	3308      	adds	r3, #8
 8001e04:	4a28      	ldr	r2, [pc, #160]	@ (8001ea8 <DrawConfirmationPage+0xd4>)
 8001e06:	4413      	add	r3, r2
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe ffe9 	bl	8000de0 <lcdPrintf>
	lcdPrintf("?");
 8001e0e:	4827      	ldr	r0, [pc, #156]	@ (8001eac <DrawConfirmationPage+0xd8>)
 8001e10:	f7fe ffe6 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 8001e14:	4826      	ldr	r0, [pc, #152]	@ (8001eb0 <DrawConfirmationPage+0xdc>)
 8001e16:	f7ff f86f 	bl	8000ef8 <lcdSetTextFont>

	//Draw "Confirm" button
	lcdDrawRect(confirmButton.x, confirmButton.y, confirmButton.w,
 8001e1a:	4b26      	ldr	r3, [pc, #152]	@ (8001eb4 <DrawConfirmationPage+0xe0>)
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	b218      	sxth	r0, r3
 8001e20:	4b24      	ldr	r3, [pc, #144]	@ (8001eb4 <DrawConfirmationPage+0xe0>)
 8001e22:	885b      	ldrh	r3, [r3, #2]
 8001e24:	b219      	sxth	r1, r3
 8001e26:	4b23      	ldr	r3, [pc, #140]	@ (8001eb4 <DrawConfirmationPage+0xe0>)
 8001e28:	889b      	ldrh	r3, [r3, #4]
 8001e2a:	b21a      	sxth	r2, r3
			confirmButton.h, COLOR_BLACK);
 8001e2c:	4b21      	ldr	r3, [pc, #132]	@ (8001eb4 <DrawConfirmationPage+0xe0>)
 8001e2e:	88db      	ldrh	r3, [r3, #6]
	lcdDrawRect(confirmButton.x, confirmButton.y, confirmButton.w,
 8001e30:	b21b      	sxth	r3, r3
 8001e32:	2400      	movs	r4, #0
 8001e34:	9400      	str	r4, [sp, #0]
 8001e36:	f7fe fedf 	bl	8000bf8 <lcdDrawRect>
	lcdSetCursor(confirmButton.x + 10, confirmButton.y + 10);
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb4 <DrawConfirmationPage+0xe0>)
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	330a      	adds	r3, #10
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb4 <DrawConfirmationPage+0xe0>)
 8001e44:	885b      	ldrh	r3, [r3, #2]
 8001e46:	330a      	adds	r3, #10
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	f7ff f8e3 	bl	8001018 <lcdSetCursor>
	lcdPrintf(confirmButton.label);
 8001e52:	4819      	ldr	r0, [pc, #100]	@ (8001eb8 <DrawConfirmationPage+0xe4>)
 8001e54:	f7fe ffc4 	bl	8000de0 <lcdPrintf>

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8001e58:	4b18      	ldr	r3, [pc, #96]	@ (8001ebc <DrawConfirmationPage+0xe8>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	b218      	sxth	r0, r3
 8001e5e:	4b17      	ldr	r3, [pc, #92]	@ (8001ebc <DrawConfirmationPage+0xe8>)
 8001e60:	885b      	ldrh	r3, [r3, #2]
 8001e62:	b219      	sxth	r1, r3
 8001e64:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <DrawConfirmationPage+0xe8>)
 8001e66:	889b      	ldrh	r3, [r3, #4]
 8001e68:	b21a      	sxth	r2, r3
 8001e6a:	4b14      	ldr	r3, [pc, #80]	@ (8001ebc <DrawConfirmationPage+0xe8>)
 8001e6c:	88db      	ldrh	r3, [r3, #6]
 8001e6e:	b21b      	sxth	r3, r3
 8001e70:	2400      	movs	r4, #0
 8001e72:	9400      	str	r4, [sp, #0]
 8001e74:	f7fe fec0 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 8001e78:	4b10      	ldr	r3, [pc, #64]	@ (8001ebc <DrawConfirmationPage+0xe8>)
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	330a      	adds	r3, #10
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	4b0e      	ldr	r3, [pc, #56]	@ (8001ebc <DrawConfirmationPage+0xe8>)
 8001e82:	885b      	ldrh	r3, [r3, #2]
 8001e84:	330a      	adds	r3, #10
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	f7ff f8c4 	bl	8001018 <lcdSetCursor>
	lcdPrintf(backButton.label);
 8001e90:	480b      	ldr	r0, [pc, #44]	@ (8001ec0 <DrawConfirmationPage+0xec>)
 8001e92:	f7fe ffa5 	bl	8000de0 <lcdPrintf>
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd90      	pop	{r4, r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000010 	.word	0x20000010
 8001ea4:	0800e11c 	.word	0x0800e11c
 8001ea8:	20000030 	.word	0x20000030
 8001eac:	0800e128 	.word	0x0800e128
 8001eb0:	20000008 	.word	0x20000008
 8001eb4:	20000108 	.word	0x20000108
 8001eb8:	20000110 	.word	0x20000110
 8001ebc:	200001b8 	.word	0x200001b8
 8001ec0:	200001c0 	.word	0x200001c0

08001ec4 <DrawQueuePage>:

void DrawQueuePage(uint8_t queueSize) {
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b093      	sub	sp, #76	@ 0x4c
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
	lcdFillRGB(COLOR_WHITE);
 8001ece:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001ed2:	f7fe fdad 	bl	8000a30 <lcdFillRGB>
	char pageTitle[20] = "";
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	623b      	str	r3, [r7, #32]
 8001eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]
	sprintf(pageTitle, "Queue Size: %d", queueSize);
 8001ee8:	79fa      	ldrb	r2, [r7, #7]
 8001eea:	f107 0320 	add.w	r3, r7, #32
 8001eee:	495e      	ldr	r1, [pc, #376]	@ (8002068 <DrawQueuePage+0x1a4>)
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f00b f913 	bl	800d11c <siprintf>
	//Display Queue at top of the screen
	lcdSetCursor(60, 10);
 8001ef6:	210a      	movs	r1, #10
 8001ef8:	203c      	movs	r0, #60	@ 0x3c
 8001efa:	f7ff f88d 	bl	8001018 <lcdSetCursor>
	lcdSetTextFont(&Font20);
 8001efe:	485b      	ldr	r0, [pc, #364]	@ (800206c <DrawQueuePage+0x1a8>)
 8001f00:	f7fe fffa 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf(pageTitle);
 8001f04:	f107 0320 	add.w	r3, r7, #32
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe ff69 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 8001f0e:	4858      	ldr	r0, [pc, #352]	@ (8002070 <DrawQueuePage+0x1ac>)
 8001f10:	f7fe fff2 	bl	8000ef8 <lcdSetTextFont>

	//display protocols in queue here
	char format[20] = "";
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	f107 0310 	add.w	r3, r7, #16
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
	int startSpotX, startSpotY;
	for (uint8_t i = 0; i < queueSize; i++) {
 8001f26:	2300      	movs	r3, #0
 8001f28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001f2c:	e055      	b.n	8001fda <DrawQueuePage+0x116>
		if (i < 5) {
 8001f2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d804      	bhi.n	8001f40 <DrawQueuePage+0x7c>
			startSpotX = 10;
 8001f36:	230a      	movs	r3, #10
 8001f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
			startSpotY = 50;
 8001f3a:	2332      	movs	r3, #50	@ 0x32
 8001f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f3e:	e004      	b.n	8001f4a <DrawQueuePage+0x86>
		} else {
			startSpotX = 160;
 8001f40:	23a0      	movs	r3, #160	@ 0xa0
 8001f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
			startSpotY = 50 - 100;	//convoluted ik
 8001f44:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 8001f48:	63bb      	str	r3, [r7, #56]	@ 0x38
		}
		sprintf(format, "%d.) ", i + 1);
 8001f4a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	f107 030c 	add.w	r3, r7, #12
 8001f54:	4947      	ldr	r1, [pc, #284]	@ (8002074 <DrawQueuePage+0x1b0>)
 8001f56:	4618      	mov	r0, r3
 8001f58:	f00b f8e0 	bl	800d11c <siprintf>
		lcdSetCursor(startSpotX, startSpotY + i * 20);
 8001f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f5e:	b298      	uxth	r0, r3
 8001f60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	461a      	mov	r2, r3
 8001f68:	0092      	lsls	r2, r2, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f7ff f84d 	bl	8001018 <lcdSetCursor>
		lcdSetTextFont(&Font12);
 8001f7e:	483e      	ldr	r0, [pc, #248]	@ (8002078 <DrawQueuePage+0x1b4>)
 8001f80:	f7fe ffba 	bl	8000ef8 <lcdSetTextFont>
		lcdPrintf(format);
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe ff29 	bl	8000de0 <lcdPrintf>
		lcdSetTextFont(&Font16);
 8001f8e:	4838      	ldr	r0, [pc, #224]	@ (8002070 <DrawQueuePage+0x1ac>)
 8001f90:	f7fe ffb2 	bl	8000ef8 <lcdSetTextFont>
		lcdSetCursor(startSpotX + 24, startSpotY + i * 20);
 8001f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	3318      	adds	r3, #24
 8001f9a:	b298      	uxth	r0, r3
 8001f9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	0092      	lsls	r2, r2, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f7ff f82f 	bl	8001018 <lcdSetCursor>
		lcdPrintf(queueBuffer[i][0]);
 8001fba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001fbe:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8001fc2:	fb02 f303 	mul.w	r3, r2, r3
 8001fc6:	4a2d      	ldr	r2, [pc, #180]	@ (800207c <DrawQueuePage+0x1b8>)
 8001fc8:	4413      	add	r3, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe ff08 	bl	8000de0 <lcdPrintf>
	for (uint8_t i = 0; i < queueSize; i++) {
 8001fd0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001fda:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d3a4      	bcc.n	8001f2e <DrawQueuePage+0x6a>

	}

	//Draw "Run" button
	lcdDrawRect(runButton.x, runButton.y, runButton.w, runButton.h,
 8001fe4:	4b26      	ldr	r3, [pc, #152]	@ (8002080 <DrawQueuePage+0x1bc>)
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	b218      	sxth	r0, r3
 8001fea:	4b25      	ldr	r3, [pc, #148]	@ (8002080 <DrawQueuePage+0x1bc>)
 8001fec:	885b      	ldrh	r3, [r3, #2]
 8001fee:	b219      	sxth	r1, r3
 8001ff0:	4b23      	ldr	r3, [pc, #140]	@ (8002080 <DrawQueuePage+0x1bc>)
 8001ff2:	889b      	ldrh	r3, [r3, #4]
 8001ff4:	b21a      	sxth	r2, r3
 8001ff6:	4b22      	ldr	r3, [pc, #136]	@ (8002080 <DrawQueuePage+0x1bc>)
 8001ff8:	88db      	ldrh	r3, [r3, #6]
 8001ffa:	b21b      	sxth	r3, r3
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	9400      	str	r4, [sp, #0]
 8002000:	f7fe fdfa 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(runButton.x + 10, runButton.y + 10);
 8002004:	4b1e      	ldr	r3, [pc, #120]	@ (8002080 <DrawQueuePage+0x1bc>)
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	330a      	adds	r3, #10
 800200a:	b29a      	uxth	r2, r3
 800200c:	4b1c      	ldr	r3, [pc, #112]	@ (8002080 <DrawQueuePage+0x1bc>)
 800200e:	885b      	ldrh	r3, [r3, #2]
 8002010:	330a      	adds	r3, #10
 8002012:	b29b      	uxth	r3, r3
 8002014:	4619      	mov	r1, r3
 8002016:	4610      	mov	r0, r2
 8002018:	f7fe fffe 	bl	8001018 <lcdSetCursor>
	lcdPrintf(runButton.label);
 800201c:	4819      	ldr	r0, [pc, #100]	@ (8002084 <DrawQueuePage+0x1c0>)
 800201e:	f7fe fedf 	bl	8000de0 <lcdPrintf>

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8002022:	4b19      	ldr	r3, [pc, #100]	@ (8002088 <DrawQueuePage+0x1c4>)
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	b218      	sxth	r0, r3
 8002028:	4b17      	ldr	r3, [pc, #92]	@ (8002088 <DrawQueuePage+0x1c4>)
 800202a:	885b      	ldrh	r3, [r3, #2]
 800202c:	b219      	sxth	r1, r3
 800202e:	4b16      	ldr	r3, [pc, #88]	@ (8002088 <DrawQueuePage+0x1c4>)
 8002030:	889b      	ldrh	r3, [r3, #4]
 8002032:	b21a      	sxth	r2, r3
 8002034:	4b14      	ldr	r3, [pc, #80]	@ (8002088 <DrawQueuePage+0x1c4>)
 8002036:	88db      	ldrh	r3, [r3, #6]
 8002038:	b21b      	sxth	r3, r3
 800203a:	2400      	movs	r4, #0
 800203c:	9400      	str	r4, [sp, #0]
 800203e:	f7fe fddb 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 8002042:	4b11      	ldr	r3, [pc, #68]	@ (8002088 <DrawQueuePage+0x1c4>)
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	330a      	adds	r3, #10
 8002048:	b29a      	uxth	r2, r3
 800204a:	4b0f      	ldr	r3, [pc, #60]	@ (8002088 <DrawQueuePage+0x1c4>)
 800204c:	885b      	ldrh	r3, [r3, #2]
 800204e:	330a      	adds	r3, #10
 8002050:	b29b      	uxth	r3, r3
 8002052:	4619      	mov	r1, r3
 8002054:	4610      	mov	r0, r2
 8002056:	f7fe ffdf 	bl	8001018 <lcdSetCursor>
	lcdPrintf(backButton.label);
 800205a:	480c      	ldr	r0, [pc, #48]	@ (800208c <DrawQueuePage+0x1c8>)
 800205c:	f7fe fec0 	bl	8000de0 <lcdPrintf>
}
 8002060:	bf00      	nop
 8002062:	3744      	adds	r7, #68	@ 0x44
 8002064:	46bd      	mov	sp, r7
 8002066:	bd90      	pop	{r4, r7, pc}
 8002068:	0800e12c 	.word	0x0800e12c
 800206c:	20000010 	.word	0x20000010
 8002070:	20000008 	.word	0x20000008
 8002074:	0800e13c 	.word	0x0800e13c
 8002078:	20000000 	.word	0x20000000
 800207c:	20000508 	.word	0x20000508
 8002080:	200000dc 	.word	0x200000dc
 8002084:	200000e4 	.word	0x200000e4
 8002088:	200001b8 	.word	0x200001b8
 800208c:	200001c0 	.word	0x200001c0

08002090 <DrawPageFinish>:

void DrawPageFinish() {
 8002090:	b590      	push	{r4, r7, lr}
 8002092:	b083      	sub	sp, #12
 8002094:	af02      	add	r7, sp, #8
	lcdFillRGB(COLOR_WHITE);
 8002096:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800209a:	f7fe fcc9 	bl	8000a30 <lcdFillRGB>

	//Draw "Success!" box
	lcdSetCursor(selectButton.x + 10, selectButton.y + 10);
 800209e:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <DrawPageFinish+0x74>)
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	330a      	adds	r3, #10
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	4b17      	ldr	r3, [pc, #92]	@ (8002104 <DrawPageFinish+0x74>)
 80020a8:	885b      	ldrh	r3, [r3, #2]
 80020aa:	330a      	adds	r3, #10
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	4619      	mov	r1, r3
 80020b0:	4610      	mov	r0, r2
 80020b2:	f7fe ffb1 	bl	8001018 <lcdSetCursor>
	lcdPrintf("Success!");
 80020b6:	4814      	ldr	r0, [pc, #80]	@ (8002108 <DrawPageFinish+0x78>)
 80020b8:	f7fe fe92 	bl	8000de0 <lcdPrintf>

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 80020bc:	4b13      	ldr	r3, [pc, #76]	@ (800210c <DrawPageFinish+0x7c>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	b218      	sxth	r0, r3
 80020c2:	4b12      	ldr	r3, [pc, #72]	@ (800210c <DrawPageFinish+0x7c>)
 80020c4:	885b      	ldrh	r3, [r3, #2]
 80020c6:	b219      	sxth	r1, r3
 80020c8:	4b10      	ldr	r3, [pc, #64]	@ (800210c <DrawPageFinish+0x7c>)
 80020ca:	889b      	ldrh	r3, [r3, #4]
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	4b0f      	ldr	r3, [pc, #60]	@ (800210c <DrawPageFinish+0x7c>)
 80020d0:	88db      	ldrh	r3, [r3, #6]
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	2400      	movs	r4, #0
 80020d6:	9400      	str	r4, [sp, #0]
 80020d8:	f7fe fd8e 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 80020dc:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <DrawPageFinish+0x7c>)
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	330a      	adds	r3, #10
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	4b09      	ldr	r3, [pc, #36]	@ (800210c <DrawPageFinish+0x7c>)
 80020e6:	885b      	ldrh	r3, [r3, #2]
 80020e8:	330a      	adds	r3, #10
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	4619      	mov	r1, r3
 80020ee:	4610      	mov	r0, r2
 80020f0:	f7fe ff92 	bl	8001018 <lcdSetCursor>
	lcdPrintf("Done");
 80020f4:	4806      	ldr	r0, [pc, #24]	@ (8002110 <DrawPageFinish+0x80>)
 80020f6:	f7fe fe73 	bl	8000de0 <lcdPrintf>
}
 80020fa:	bf00      	nop
 80020fc:	3704      	adds	r7, #4
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd90      	pop	{r4, r7, pc}
 8002102:	bf00      	nop
 8002104:	20000160 	.word	0x20000160
 8002108:	0800e144 	.word	0x0800e144
 800210c:	200001b8 	.word	0x200001b8
 8002110:	0800e150 	.word	0x0800e150

08002114 <handleTouch>:

uint8_t handleTouch() {
 8002114:	b590      	push	{r4, r7, lr}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
	static uint8_t protocol_num;
	static uint8_t protocol_offset = 0;
	uint16_t x = 0, y = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	807b      	strh	r3, [r7, #2]
 800211e:	2300      	movs	r3, #0
 8002120:	803b      	strh	r3, [r7, #0]
	if (!XPT2046_TouchGetCoordinates(&x, &y)) {
 8002122:	463a      	mov	r2, r7
 8002124:	1cbb      	adds	r3, r7, #2
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fa59 	bl	80005e0 <XPT2046_TouchGetCoordinates>
 800212e:	4603      	mov	r3, r0
 8002130:	f083 0301 	eor.w	r3, r3, #1
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d004      	beq.n	8002144 <handleTouch+0x30>
		printf("failed\n");
 800213a:	4899      	ldr	r0, [pc, #612]	@ (80023a0 <handleTouch+0x28c>)
 800213c:	f00a ffe6 	bl	800d10c <puts>
		return 0;
 8002140:	2300      	movs	r3, #0
 8002142:	e2f6      	b.n	8002732 <handleTouch+0x61e>
	}
	//map the x coordinate to be left is 0. also slight offset
	x = (TS_RIGHT - x) - 0;
 8002144:	887b      	ldrh	r3, [r7, #2]
 8002146:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 800214a:	b29b      	uxth	r3, r3
 800214c:	807b      	strh	r3, [r7, #2]
	printf("touched\n");
 800214e:	4895      	ldr	r0, [pc, #596]	@ (80023a4 <handleTouch+0x290>)
 8002150:	f00a ffdc 	bl	800d10c <puts>
	printf("%d, %d\n", x, y);
 8002154:	887b      	ldrh	r3, [r7, #2]
 8002156:	4619      	mov	r1, r3
 8002158:	883b      	ldrh	r3, [r7, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	4892      	ldr	r0, [pc, #584]	@ (80023a8 <handleTouch+0x294>)
 800215e:	f00a ff65 	bl	800d02c <iprintf>

	switch (currentPage) {
 8002162:	4b92      	ldr	r3, [pc, #584]	@ (80023ac <handleTouch+0x298>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b04      	cmp	r3, #4
 8002168:	f200 82df 	bhi.w	800272a <handleTouch+0x616>
 800216c:	a201      	add	r2, pc, #4	@ (adr r2, 8002174 <handleTouch+0x60>)
 800216e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002172:	bf00      	nop
 8002174:	08002189 	.word	0x08002189
 8002178:	080023d1 	.word	0x080023d1
 800217c:	08002545 	.word	0x08002545
 8002180:	08002615 	.word	0x08002615
 8002184:	080026cf 	.word	0x080026cf
	case PAGE_MAIN:
		//next button
		if ((x >= nextButton.x) && (x <= nextButton.x + nextButton.w)
 8002188:	4b89      	ldr	r3, [pc, #548]	@ (80023b0 <handleTouch+0x29c>)
 800218a:	881a      	ldrh	r2, [r3, #0]
 800218c:	887b      	ldrh	r3, [r7, #2]
 800218e:	429a      	cmp	r2, r3
 8002190:	d828      	bhi.n	80021e4 <handleTouch+0xd0>
 8002192:	887b      	ldrh	r3, [r7, #2]
 8002194:	461a      	mov	r2, r3
 8002196:	4b86      	ldr	r3, [pc, #536]	@ (80023b0 <handleTouch+0x29c>)
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	4619      	mov	r1, r3
 800219c:	4b84      	ldr	r3, [pc, #528]	@ (80023b0 <handleTouch+0x29c>)
 800219e:	889b      	ldrh	r3, [r3, #4]
 80021a0:	440b      	add	r3, r1
 80021a2:	429a      	cmp	r2, r3
 80021a4:	dc1e      	bgt.n	80021e4 <handleTouch+0xd0>
				&& (y >= nextButton.y)
 80021a6:	4b82      	ldr	r3, [pc, #520]	@ (80023b0 <handleTouch+0x29c>)
 80021a8:	885a      	ldrh	r2, [r3, #2]
 80021aa:	883b      	ldrh	r3, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d819      	bhi.n	80021e4 <handleTouch+0xd0>
				&& (y <= nextButton.y + nextButton.h + NEXT_BUTTON_OFFSET)
 80021b0:	883b      	ldrh	r3, [r7, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	4b7e      	ldr	r3, [pc, #504]	@ (80023b0 <handleTouch+0x29c>)
 80021b6:	885b      	ldrh	r3, [r3, #2]
 80021b8:	4619      	mov	r1, r3
 80021ba:	4b7d      	ldr	r3, [pc, #500]	@ (80023b0 <handleTouch+0x29c>)
 80021bc:	88db      	ldrh	r3, [r3, #6]
 80021be:	440b      	add	r3, r1
 80021c0:	333c      	adds	r3, #60	@ 0x3c
 80021c2:	429a      	cmp	r2, r3
 80021c4:	dc0e      	bgt.n	80021e4 <handleTouch+0xd0>
				&& (page_num != 10)) {
 80021c6:	4b7b      	ldr	r3, [pc, #492]	@ (80023b4 <handleTouch+0x2a0>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b0a      	cmp	r3, #10
 80021cc:	d00a      	beq.n	80021e4 <handleTouch+0xd0>
			//printf("touched\n");
			page_num++;
 80021ce:	4b79      	ldr	r3, [pc, #484]	@ (80023b4 <handleTouch+0x2a0>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	3301      	adds	r3, #1
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4b77      	ldr	r3, [pc, #476]	@ (80023b4 <handleTouch+0x2a0>)
 80021d8:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 80021da:	4b76      	ldr	r3, [pc, #472]	@ (80023b4 <handleTouch+0x2a0>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fb6c 	bl	80018bc <DrawMainPage>
		}
		//back button
		if ((x >= backButton.x) && (x <= backButton.x + backButton.w)
 80021e4:	4b74      	ldr	r3, [pc, #464]	@ (80023b8 <handleTouch+0x2a4>)
 80021e6:	881a      	ldrh	r2, [r3, #0]
 80021e8:	887b      	ldrh	r3, [r7, #2]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d828      	bhi.n	8002240 <handleTouch+0x12c>
 80021ee:	887b      	ldrh	r3, [r7, #2]
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b71      	ldr	r3, [pc, #452]	@ (80023b8 <handleTouch+0x2a4>)
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	4619      	mov	r1, r3
 80021f8:	4b6f      	ldr	r3, [pc, #444]	@ (80023b8 <handleTouch+0x2a4>)
 80021fa:	889b      	ldrh	r3, [r3, #4]
 80021fc:	440b      	add	r3, r1
 80021fe:	429a      	cmp	r2, r3
 8002200:	dc1e      	bgt.n	8002240 <handleTouch+0x12c>
				&& (y >= backButton.y)
 8002202:	4b6d      	ldr	r3, [pc, #436]	@ (80023b8 <handleTouch+0x2a4>)
 8002204:	885a      	ldrh	r2, [r3, #2]
 8002206:	883b      	ldrh	r3, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d819      	bhi.n	8002240 <handleTouch+0x12c>
				&& (y <= backButton.y + backButton.h + BACK_BUTTON_OFFSET)
 800220c:	883b      	ldrh	r3, [r7, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	4b69      	ldr	r3, [pc, #420]	@ (80023b8 <handleTouch+0x2a4>)
 8002212:	885b      	ldrh	r3, [r3, #2]
 8002214:	4619      	mov	r1, r3
 8002216:	4b68      	ldr	r3, [pc, #416]	@ (80023b8 <handleTouch+0x2a4>)
 8002218:	88db      	ldrh	r3, [r3, #6]
 800221a:	440b      	add	r3, r1
 800221c:	333c      	adds	r3, #60	@ 0x3c
 800221e:	429a      	cmp	r2, r3
 8002220:	dc0e      	bgt.n	8002240 <handleTouch+0x12c>
				&& (page_num != 1)) {
 8002222:	4b64      	ldr	r3, [pc, #400]	@ (80023b4 <handleTouch+0x2a0>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d00a      	beq.n	8002240 <handleTouch+0x12c>
			//printf("touched\n");
			page_num--;
 800222a:	4b62      	ldr	r3, [pc, #392]	@ (80023b4 <handleTouch+0x2a0>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	3b01      	subs	r3, #1
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4b60      	ldr	r3, [pc, #384]	@ (80023b4 <handleTouch+0x2a0>)
 8002234:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8002236:	4b5f      	ldr	r3, [pc, #380]	@ (80023b4 <handleTouch+0x2a0>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff fb3e 	bl	80018bc <DrawMainPage>
		}
		//queue button
		if (x >= queueButton.x && x <= (queueButton.x + queueButton.w)
 8002240:	4b5e      	ldr	r3, [pc, #376]	@ (80023bc <handleTouch+0x2a8>)
 8002242:	881a      	ldrh	r2, [r3, #0]
 8002244:	887b      	ldrh	r3, [r7, #2]
 8002246:	429a      	cmp	r2, r3
 8002248:	d825      	bhi.n	8002296 <handleTouch+0x182>
 800224a:	887b      	ldrh	r3, [r7, #2]
 800224c:	461a      	mov	r2, r3
 800224e:	4b5b      	ldr	r3, [pc, #364]	@ (80023bc <handleTouch+0x2a8>)
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	4619      	mov	r1, r3
 8002254:	4b59      	ldr	r3, [pc, #356]	@ (80023bc <handleTouch+0x2a8>)
 8002256:	889b      	ldrh	r3, [r3, #4]
 8002258:	440b      	add	r3, r1
 800225a:	429a      	cmp	r2, r3
 800225c:	dc1b      	bgt.n	8002296 <handleTouch+0x182>
				&& y >= queueButton.y
 800225e:	4b57      	ldr	r3, [pc, #348]	@ (80023bc <handleTouch+0x2a8>)
 8002260:	885a      	ldrh	r2, [r3, #2]
 8002262:	883b      	ldrh	r3, [r7, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d816      	bhi.n	8002296 <handleTouch+0x182>
				&& y <= (queueButton.y + queueButton.h + QUEUE_BUTTON_OFFSET)
 8002268:	883b      	ldrh	r3, [r7, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	4b53      	ldr	r3, [pc, #332]	@ (80023bc <handleTouch+0x2a8>)
 800226e:	885b      	ldrh	r3, [r3, #2]
 8002270:	4619      	mov	r1, r3
 8002272:	4b52      	ldr	r3, [pc, #328]	@ (80023bc <handleTouch+0x2a8>)
 8002274:	88db      	ldrh	r3, [r3, #6]
 8002276:	440b      	add	r3, r1
 8002278:	3328      	adds	r3, #40	@ 0x28
 800227a:	429a      	cmp	r2, r3
 800227c:	dc0b      	bgt.n	8002296 <handleTouch+0x182>
				&& (page_num == 1)) {
 800227e:	4b4d      	ldr	r3, [pc, #308]	@ (80023b4 <handleTouch+0x2a0>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d107      	bne.n	8002296 <handleTouch+0x182>
			DrawQueuePage(queueSize);
 8002286:	4b4e      	ldr	r3, [pc, #312]	@ (80023c0 <handleTouch+0x2ac>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fe1a 	bl	8001ec4 <DrawQueuePage>
			currentPage = PAGE_QUEUE;
 8002290:	4b46      	ldr	r3, [pc, #280]	@ (80023ac <handleTouch+0x298>)
 8002292:	2202      	movs	r2, #2
 8002294:	701a      	strb	r2, [r3, #0]
		}
		//three protocol buttons
		for (int i = 0; i < NUM_BUTTONS; i++) {
 8002296:	2300      	movs	r3, #0
 8002298:	607b      	str	r3, [r7, #4]
 800229a:	e07c      	b.n	8002396 <handleTouch+0x282>
			if ((x >= buttons[i].x) && (x <= buttons[i].x + buttons[i].w)
 800229c:	4a49      	ldr	r2, [pc, #292]	@ (80023c4 <handleTouch+0x2b0>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	212a      	movs	r1, #42	@ 0x2a
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	881a      	ldrh	r2, [r3, #0]
 80022aa:	887b      	ldrh	r3, [r7, #2]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d86f      	bhi.n	8002390 <handleTouch+0x27c>
 80022b0:	887b      	ldrh	r3, [r7, #2]
 80022b2:	4618      	mov	r0, r3
 80022b4:	4a43      	ldr	r2, [pc, #268]	@ (80023c4 <handleTouch+0x2b0>)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	212a      	movs	r1, #42	@ 0x2a
 80022ba:	fb01 f303 	mul.w	r3, r1, r3
 80022be:	4413      	add	r3, r2
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	461c      	mov	r4, r3
 80022c4:	4a3f      	ldr	r2, [pc, #252]	@ (80023c4 <handleTouch+0x2b0>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	212a      	movs	r1, #42	@ 0x2a
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	3304      	adds	r3, #4
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	4423      	add	r3, r4
 80022d6:	4298      	cmp	r0, r3
 80022d8:	dc5a      	bgt.n	8002390 <handleTouch+0x27c>
					&& (y >= buttons[i].y - PROTOCOL_BUTTON_OFFSET)
 80022da:	883b      	ldrh	r3, [r7, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	4a39      	ldr	r2, [pc, #228]	@ (80023c4 <handleTouch+0x2b0>)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	212a      	movs	r1, #42	@ 0x2a
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	3302      	adds	r3, #2
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	3b14      	subs	r3, #20
 80022f0:	4298      	cmp	r0, r3
 80022f2:	db4d      	blt.n	8002390 <handleTouch+0x27c>
					&& (y <= buttons[i].y + buttons[i].h + PROTOCOL_BUTTON_OFFSET)) {
 80022f4:	883b      	ldrh	r3, [r7, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	4a32      	ldr	r2, [pc, #200]	@ (80023c4 <handleTouch+0x2b0>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	212a      	movs	r1, #42	@ 0x2a
 80022fe:	fb01 f303 	mul.w	r3, r1, r3
 8002302:	4413      	add	r3, r2
 8002304:	3302      	adds	r3, #2
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	461c      	mov	r4, r3
 800230a:	4a2e      	ldr	r2, [pc, #184]	@ (80023c4 <handleTouch+0x2b0>)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	212a      	movs	r1, #42	@ 0x2a
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	3306      	adds	r3, #6
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	4423      	add	r3, r4
 800231c:	3314      	adds	r3, #20
 800231e:	4298      	cmp	r0, r3
 8002320:	dc36      	bgt.n	8002390 <handleTouch+0x27c>
				//check which button has been pressed
				if (i == 0) {
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d106      	bne.n	8002336 <handleTouch+0x222>
					protocol_num = 1;
 8002328:	4b27      	ldr	r3, [pc, #156]	@ (80023c8 <handleTouch+0x2b4>)
 800232a:	2201      	movs	r2, #1
 800232c:	701a      	strb	r2, [r3, #0]
					protocol_offset = 0;
 800232e:	4b27      	ldr	r3, [pc, #156]	@ (80023cc <handleTouch+0x2b8>)
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
 8002334:	e012      	b.n	800235c <handleTouch+0x248>
				} else if (i == 1) {
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d106      	bne.n	800234a <handleTouch+0x236>
					protocol_num = 1;
 800233c:	4b22      	ldr	r3, [pc, #136]	@ (80023c8 <handleTouch+0x2b4>)
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]
					protocol_offset = 1;
 8002342:	4b22      	ldr	r3, [pc, #136]	@ (80023cc <handleTouch+0x2b8>)
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
 8002348:	e008      	b.n	800235c <handleTouch+0x248>
				} else if (i == 2) {
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d105      	bne.n	800235c <handleTouch+0x248>
					protocol_num = 1;
 8002350:	4b1d      	ldr	r3, [pc, #116]	@ (80023c8 <handleTouch+0x2b4>)
 8002352:	2201      	movs	r2, #1
 8002354:	701a      	strb	r2, [r3, #0]
					protocol_offset = 2;
 8002356:	4b1d      	ldr	r3, [pc, #116]	@ (80023cc <handleTouch+0x2b8>)
 8002358:	2202      	movs	r2, #2
 800235a:	701a      	strb	r2, [r3, #0]
				}
				//dont draw next page if the button says "Empty"
				if (buttons[i].status == NOT_EMPTY) {
 800235c:	4a19      	ldr	r2, [pc, #100]	@ (80023c4 <handleTouch+0x2b0>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	212a      	movs	r1, #42	@ 0x2a
 8002362:	fb01 f303 	mul.w	r3, r1, r3
 8002366:	4413      	add	r3, r2
 8002368:	3328      	adds	r3, #40	@ 0x28
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d10c      	bne.n	800238a <handleTouch+0x276>
					currentPage = PAGE_SELECT;
 8002370:	4b0e      	ldr	r3, [pc, #56]	@ (80023ac <handleTouch+0x298>)
 8002372:	2201      	movs	r2, #1
 8002374:	701a      	strb	r2, [r3, #0]
					DrawInfoPage(buttons[i].label);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	222a      	movs	r2, #42	@ 0x2a
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	3308      	adds	r3, #8
 8002380:	4a10      	ldr	r2, [pc, #64]	@ (80023c4 <handleTouch+0x2b0>)
 8002382:	4413      	add	r3, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fc7b 	bl	8001c80 <DrawInfoPage>
				}
				HAL_Delay(100); //delay between switch to select page
 800238a:	2064      	movs	r0, #100	@ 0x64
 800238c:	f001 fa3e 	bl	800380c <HAL_Delay>
		for (int i = 0; i < NUM_BUTTONS; i++) {
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3301      	adds	r3, #1
 8002394:	607b      	str	r3, [r7, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b02      	cmp	r3, #2
 800239a:	f77f af7f 	ble.w	800229c <handleTouch+0x188>
			}
		}
		break;
 800239e:	e1c4      	b.n	800272a <handleTouch+0x616>
 80023a0:	0800e158 	.word	0x0800e158
 80023a4:	0800e160 	.word	0x0800e160
 80023a8:	0800e168 	.word	0x0800e168
 80023ac:	200004f4 	.word	0x200004f4
 80023b0:	200001e4 	.word	0x200001e4
 80023b4:	2000020e 	.word	0x2000020e
 80023b8:	200001b8 	.word	0x200001b8
 80023bc:	200000b0 	.word	0x200000b0
 80023c0:	2000ff08 	.word	0x2000ff08
 80023c4:	20000030 	.word	0x20000030
 80023c8:	20011810 	.word	0x20011810
 80023cc:	20011811 	.word	0x20011811

	case PAGE_SELECT:
		//back button
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 80023d0:	4b87      	ldr	r3, [pc, #540]	@ (80025f0 <handleTouch+0x4dc>)
 80023d2:	881a      	ldrh	r2, [r3, #0]
 80023d4:	887b      	ldrh	r3, [r7, #2]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d820      	bhi.n	800241c <handleTouch+0x308>
 80023da:	887b      	ldrh	r3, [r7, #2]
 80023dc:	461a      	mov	r2, r3
 80023de:	4b84      	ldr	r3, [pc, #528]	@ (80025f0 <handleTouch+0x4dc>)
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	4619      	mov	r1, r3
 80023e4:	4b82      	ldr	r3, [pc, #520]	@ (80025f0 <handleTouch+0x4dc>)
 80023e6:	889b      	ldrh	r3, [r3, #4]
 80023e8:	440b      	add	r3, r1
 80023ea:	429a      	cmp	r2, r3
 80023ec:	dc16      	bgt.n	800241c <handleTouch+0x308>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 80023ee:	4b80      	ldr	r3, [pc, #512]	@ (80025f0 <handleTouch+0x4dc>)
 80023f0:	885a      	ldrh	r2, [r3, #2]
 80023f2:	883b      	ldrh	r3, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d811      	bhi.n	800241c <handleTouch+0x308>
 80023f8:	883b      	ldrh	r3, [r7, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	4b7c      	ldr	r3, [pc, #496]	@ (80025f0 <handleTouch+0x4dc>)
 80023fe:	885b      	ldrh	r3, [r3, #2]
 8002400:	4619      	mov	r1, r3
 8002402:	4b7b      	ldr	r3, [pc, #492]	@ (80025f0 <handleTouch+0x4dc>)
 8002404:	88db      	ldrh	r3, [r3, #6]
 8002406:	440b      	add	r3, r1
 8002408:	429a      	cmp	r2, r3
 800240a:	dc07      	bgt.n	800241c <handleTouch+0x308>
			currentPage = PAGE_MAIN;
 800240c:	4b79      	ldr	r3, [pc, #484]	@ (80025f4 <handleTouch+0x4e0>)
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 8002412:	4b79      	ldr	r3, [pc, #484]	@ (80025f8 <handleTouch+0x4e4>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fa50 	bl	80018bc <DrawMainPage>
		}
		//queueSelect button
		if (x >= queueSelectButton.x
 800241c:	4b77      	ldr	r3, [pc, #476]	@ (80025fc <handleTouch+0x4e8>)
 800241e:	881a      	ldrh	r2, [r3, #0]
 8002420:	887b      	ldrh	r3, [r7, #2]
 8002422:	429a      	cmp	r2, r3
 8002424:	d833      	bhi.n	800248e <handleTouch+0x37a>
				&& x <= (queueSelectButton.x + queueSelectButton.w)
 8002426:	887b      	ldrh	r3, [r7, #2]
 8002428:	461a      	mov	r2, r3
 800242a:	4b74      	ldr	r3, [pc, #464]	@ (80025fc <handleTouch+0x4e8>)
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	4619      	mov	r1, r3
 8002430:	4b72      	ldr	r3, [pc, #456]	@ (80025fc <handleTouch+0x4e8>)
 8002432:	889b      	ldrh	r3, [r3, #4]
 8002434:	440b      	add	r3, r1
 8002436:	429a      	cmp	r2, r3
 8002438:	dc29      	bgt.n	800248e <handleTouch+0x37a>
				&& y >= queueSelectButton.y
 800243a:	4b70      	ldr	r3, [pc, #448]	@ (80025fc <handleTouch+0x4e8>)
 800243c:	885a      	ldrh	r2, [r3, #2]
 800243e:	883b      	ldrh	r3, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d824      	bhi.n	800248e <handleTouch+0x37a>
				&& y <= (queueSelectButton.y + queueSelectButton.h)) {
 8002444:	883b      	ldrh	r3, [r7, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	4b6c      	ldr	r3, [pc, #432]	@ (80025fc <handleTouch+0x4e8>)
 800244a:	885b      	ldrh	r3, [r3, #2]
 800244c:	4619      	mov	r1, r3
 800244e:	4b6b      	ldr	r3, [pc, #428]	@ (80025fc <handleTouch+0x4e8>)
 8002450:	88db      	ldrh	r3, [r3, #6]
 8002452:	440b      	add	r3, r1
 8002454:	429a      	cmp	r2, r3
 8002456:	dc1a      	bgt.n	800248e <handleTouch+0x37a>
			//store the protocol in queueBuffer
			if (queueSize < MAX_QUEUE_SIZE) {
 8002458:	4b69      	ldr	r3, [pc, #420]	@ (8002600 <handleTouch+0x4ec>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b09      	cmp	r3, #9
 800245e:	d816      	bhi.n	800248e <handleTouch+0x37a>
				queueProtocol(pageNum, protocol_offset);
 8002460:	4b65      	ldr	r3, [pc, #404]	@ (80025f8 <handleTouch+0x4e4>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	4b67      	ldr	r3, [pc, #412]	@ (8002604 <handleTouch+0x4f0>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	4619      	mov	r1, r3
 800246c:	4610      	mov	r0, r2
 800246e:	f000 fc27 	bl	8002cc0 <queueProtocol>
				queueSize++;
 8002472:	4b63      	ldr	r3, [pc, #396]	@ (8002600 <handleTouch+0x4ec>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	3301      	adds	r3, #1
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4b61      	ldr	r3, [pc, #388]	@ (8002600 <handleTouch+0x4ec>)
 800247c:	701a      	strb	r2, [r3, #0]
				currentPage = PAGE_QUEUE;
 800247e:	4b5d      	ldr	r3, [pc, #372]	@ (80025f4 <handleTouch+0x4e0>)
 8002480:	2202      	movs	r2, #2
 8002482:	701a      	strb	r2, [r3, #0]
				DrawQueuePage(queueSize);
 8002484:	4b5e      	ldr	r3, [pc, #376]	@ (8002600 <handleTouch+0x4ec>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fd1b 	bl	8001ec4 <DrawQueuePage>
			} else {
				//handle queue buffer being full
			}
		}
		//select button
		if (x >= selectButton.x && x <= (selectButton.x + selectButton.w)
 800248e:	4b5e      	ldr	r3, [pc, #376]	@ (8002608 <handleTouch+0x4f4>)
 8002490:	881a      	ldrh	r2, [r3, #0]
 8002492:	887b      	ldrh	r3, [r7, #2]
 8002494:	429a      	cmp	r2, r3
 8002496:	d826      	bhi.n	80024e6 <handleTouch+0x3d2>
 8002498:	887b      	ldrh	r3, [r7, #2]
 800249a:	461a      	mov	r2, r3
 800249c:	4b5a      	ldr	r3, [pc, #360]	@ (8002608 <handleTouch+0x4f4>)
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	4619      	mov	r1, r3
 80024a2:	4b59      	ldr	r3, [pc, #356]	@ (8002608 <handleTouch+0x4f4>)
 80024a4:	889b      	ldrh	r3, [r3, #4]
 80024a6:	440b      	add	r3, r1
 80024a8:	429a      	cmp	r2, r3
 80024aa:	dc1c      	bgt.n	80024e6 <handleTouch+0x3d2>
				&& y >= selectButton.y
 80024ac:	4b56      	ldr	r3, [pc, #344]	@ (8002608 <handleTouch+0x4f4>)
 80024ae:	885a      	ldrh	r2, [r3, #2]
 80024b0:	883b      	ldrh	r3, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d817      	bhi.n	80024e6 <handleTouch+0x3d2>
				&& y <= (selectButton.y + selectButton.h)) {
 80024b6:	883b      	ldrh	r3, [r7, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b53      	ldr	r3, [pc, #332]	@ (8002608 <handleTouch+0x4f4>)
 80024bc:	885b      	ldrh	r3, [r3, #2]
 80024be:	4619      	mov	r1, r3
 80024c0:	4b51      	ldr	r3, [pc, #324]	@ (8002608 <handleTouch+0x4f4>)
 80024c2:	88db      	ldrh	r3, [r3, #6]
 80024c4:	440b      	add	r3, r1
 80024c6:	429a      	cmp	r2, r3
 80024c8:	dc0d      	bgt.n	80024e6 <handleTouch+0x3d2>
			//transmit protocol and move to finish page
			transmitProtocol(pageNum, protocol_offset);
 80024ca:	4b4b      	ldr	r3, [pc, #300]	@ (80025f8 <handleTouch+0x4e4>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	4b4c      	ldr	r3, [pc, #304]	@ (8002604 <handleTouch+0x4f0>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	4619      	mov	r1, r3
 80024d6:	4610      	mov	r0, r2
 80024d8:	f000 fba6 	bl	8002c28 <transmitProtocol>
			currentPage = PAGE_FINISH;
 80024dc:	4b45      	ldr	r3, [pc, #276]	@ (80025f4 <handleTouch+0x4e0>)
 80024de:	2204      	movs	r2, #4
 80024e0:	701a      	strb	r2, [r3, #0]
			DrawPageFinish();
 80024e2:	f7ff fdd5 	bl	8002090 <DrawPageFinish>
		}
		//delete button
		if (x >= deleteButton.x && x <= (deleteButton.x + deleteButton.w)
 80024e6:	4b49      	ldr	r3, [pc, #292]	@ (800260c <handleTouch+0x4f8>)
 80024e8:	881a      	ldrh	r2, [r3, #0]
 80024ea:	887b      	ldrh	r3, [r7, #2]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	f200 8115 	bhi.w	800271c <handleTouch+0x608>
 80024f2:	887b      	ldrh	r3, [r7, #2]
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b45      	ldr	r3, [pc, #276]	@ (800260c <handleTouch+0x4f8>)
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	4619      	mov	r1, r3
 80024fc:	4b43      	ldr	r3, [pc, #268]	@ (800260c <handleTouch+0x4f8>)
 80024fe:	889b      	ldrh	r3, [r3, #4]
 8002500:	440b      	add	r3, r1
 8002502:	429a      	cmp	r2, r3
 8002504:	f300 810a 	bgt.w	800271c <handleTouch+0x608>
				&& y >= deleteButton.y
 8002508:	4b40      	ldr	r3, [pc, #256]	@ (800260c <handleTouch+0x4f8>)
 800250a:	885a      	ldrh	r2, [r3, #2]
 800250c:	883b      	ldrh	r3, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	f200 8104 	bhi.w	800271c <handleTouch+0x608>
				&& y <= (deleteButton.y + deleteButton.h)) {
 8002514:	883b      	ldrh	r3, [r7, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	4b3c      	ldr	r3, [pc, #240]	@ (800260c <handleTouch+0x4f8>)
 800251a:	885b      	ldrh	r3, [r3, #2]
 800251c:	4619      	mov	r1, r3
 800251e:	4b3b      	ldr	r3, [pc, #236]	@ (800260c <handleTouch+0x4f8>)
 8002520:	88db      	ldrh	r3, [r3, #6]
 8002522:	440b      	add	r3, r1
 8002524:	429a      	cmp	r2, r3
 8002526:	f300 80f9 	bgt.w	800271c <handleTouch+0x608>
			//move to delete confirmation page
			currentPage = PAGE_CONFIRMATION;
 800252a:	4b32      	ldr	r3, [pc, #200]	@ (80025f4 <handleTouch+0x4e0>)
 800252c:	2203      	movs	r2, #3
 800252e:	701a      	strb	r2, [r3, #0]
			DrawConfirmationPage(pageNum, protocol_offset);
 8002530:	4b31      	ldr	r3, [pc, #196]	@ (80025f8 <handleTouch+0x4e4>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	4b33      	ldr	r3, [pc, #204]	@ (8002604 <handleTouch+0x4f0>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	4619      	mov	r1, r3
 800253c:	4610      	mov	r0, r2
 800253e:	f7ff fc49 	bl	8001dd4 <DrawConfirmationPage>
		}
		break;
 8002542:	e0eb      	b.n	800271c <handleTouch+0x608>

	case PAGE_QUEUE:
		//back button
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 8002544:	4b2a      	ldr	r3, [pc, #168]	@ (80025f0 <handleTouch+0x4dc>)
 8002546:	881a      	ldrh	r2, [r3, #0]
 8002548:	887b      	ldrh	r3, [r7, #2]
 800254a:	429a      	cmp	r2, r3
 800254c:	d820      	bhi.n	8002590 <handleTouch+0x47c>
 800254e:	887b      	ldrh	r3, [r7, #2]
 8002550:	461a      	mov	r2, r3
 8002552:	4b27      	ldr	r3, [pc, #156]	@ (80025f0 <handleTouch+0x4dc>)
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	4619      	mov	r1, r3
 8002558:	4b25      	ldr	r3, [pc, #148]	@ (80025f0 <handleTouch+0x4dc>)
 800255a:	889b      	ldrh	r3, [r3, #4]
 800255c:	440b      	add	r3, r1
 800255e:	429a      	cmp	r2, r3
 8002560:	dc16      	bgt.n	8002590 <handleTouch+0x47c>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 8002562:	4b23      	ldr	r3, [pc, #140]	@ (80025f0 <handleTouch+0x4dc>)
 8002564:	885a      	ldrh	r2, [r3, #2]
 8002566:	883b      	ldrh	r3, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d811      	bhi.n	8002590 <handleTouch+0x47c>
 800256c:	883b      	ldrh	r3, [r7, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	4b1f      	ldr	r3, [pc, #124]	@ (80025f0 <handleTouch+0x4dc>)
 8002572:	885b      	ldrh	r3, [r3, #2]
 8002574:	4619      	mov	r1, r3
 8002576:	4b1e      	ldr	r3, [pc, #120]	@ (80025f0 <handleTouch+0x4dc>)
 8002578:	88db      	ldrh	r3, [r3, #6]
 800257a:	440b      	add	r3, r1
 800257c:	429a      	cmp	r2, r3
 800257e:	dc07      	bgt.n	8002590 <handleTouch+0x47c>
			currentPage = PAGE_MAIN;
 8002580:	4b1c      	ldr	r3, [pc, #112]	@ (80025f4 <handleTouch+0x4e0>)
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 8002586:	4b1c      	ldr	r3, [pc, #112]	@ (80025f8 <handleTouch+0x4e4>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff f996 	bl	80018bc <DrawMainPage>
		}
		//run button
		if (x >= runButton.x && x <= (runButton.x + runButton.w)
 8002590:	4b1f      	ldr	r3, [pc, #124]	@ (8002610 <handleTouch+0x4fc>)
 8002592:	881a      	ldrh	r2, [r3, #0]
 8002594:	887b      	ldrh	r3, [r7, #2]
 8002596:	429a      	cmp	r2, r3
 8002598:	f200 80c2 	bhi.w	8002720 <handleTouch+0x60c>
 800259c:	887b      	ldrh	r3, [r7, #2]
 800259e:	461a      	mov	r2, r3
 80025a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002610 <handleTouch+0x4fc>)
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	4619      	mov	r1, r3
 80025a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002610 <handleTouch+0x4fc>)
 80025a8:	889b      	ldrh	r3, [r3, #4]
 80025aa:	440b      	add	r3, r1
 80025ac:	429a      	cmp	r2, r3
 80025ae:	f300 80b7 	bgt.w	8002720 <handleTouch+0x60c>
				&& y >= runButton.y && y <= (runButton.y + runButton.h)) {
 80025b2:	4b17      	ldr	r3, [pc, #92]	@ (8002610 <handleTouch+0x4fc>)
 80025b4:	885a      	ldrh	r2, [r3, #2]
 80025b6:	883b      	ldrh	r3, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	f200 80b1 	bhi.w	8002720 <handleTouch+0x60c>
 80025be:	883b      	ldrh	r3, [r7, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b13      	ldr	r3, [pc, #76]	@ (8002610 <handleTouch+0x4fc>)
 80025c4:	885b      	ldrh	r3, [r3, #2]
 80025c6:	4619      	mov	r1, r3
 80025c8:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <handleTouch+0x4fc>)
 80025ca:	88db      	ldrh	r3, [r3, #6]
 80025cc:	440b      	add	r3, r1
 80025ce:	429a      	cmp	r2, r3
 80025d0:	f300 80a6 	bgt.w	8002720 <handleTouch+0x60c>
			//handle queue functionality here dorjee
			transmitQueuedProtocols(queueSize);
 80025d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002600 <handleTouch+0x4ec>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 fbcb 	bl	8002d74 <transmitQueuedProtocols>
			queueSize = 0;
 80025de:	4b08      	ldr	r3, [pc, #32]	@ (8002600 <handleTouch+0x4ec>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
			currentPage = PAGE_FINISH;
 80025e4:	4b03      	ldr	r3, [pc, #12]	@ (80025f4 <handleTouch+0x4e0>)
 80025e6:	2204      	movs	r2, #4
 80025e8:	701a      	strb	r2, [r3, #0]
			DrawPageFinish();
 80025ea:	f7ff fd51 	bl	8002090 <DrawPageFinish>
		}
		break;
 80025ee:	e097      	b.n	8002720 <handleTouch+0x60c>
 80025f0:	200001b8 	.word	0x200001b8
 80025f4:	200004f4 	.word	0x200004f4
 80025f8:	2000020f 	.word	0x2000020f
 80025fc:	20000134 	.word	0x20000134
 8002600:	2000ff08 	.word	0x2000ff08
 8002604:	20011811 	.word	0x20011811
 8002608:	20000160 	.word	0x20000160
 800260c:	2000018c 	.word	0x2000018c
 8002610:	200000dc 	.word	0x200000dc

	case PAGE_CONFIRMATION:
		//back button
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 8002614:	4b49      	ldr	r3, [pc, #292]	@ (800273c <handleTouch+0x628>)
 8002616:	881a      	ldrh	r2, [r3, #0]
 8002618:	887b      	ldrh	r3, [r7, #2]
 800261a:	429a      	cmp	r2, r3
 800261c:	d827      	bhi.n	800266e <handleTouch+0x55a>
 800261e:	887b      	ldrh	r3, [r7, #2]
 8002620:	461a      	mov	r2, r3
 8002622:	4b46      	ldr	r3, [pc, #280]	@ (800273c <handleTouch+0x628>)
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	4619      	mov	r1, r3
 8002628:	4b44      	ldr	r3, [pc, #272]	@ (800273c <handleTouch+0x628>)
 800262a:	889b      	ldrh	r3, [r3, #4]
 800262c:	440b      	add	r3, r1
 800262e:	429a      	cmp	r2, r3
 8002630:	dc1d      	bgt.n	800266e <handleTouch+0x55a>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 8002632:	4b42      	ldr	r3, [pc, #264]	@ (800273c <handleTouch+0x628>)
 8002634:	885a      	ldrh	r2, [r3, #2]
 8002636:	883b      	ldrh	r3, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d818      	bhi.n	800266e <handleTouch+0x55a>
 800263c:	883b      	ldrh	r3, [r7, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	4b3e      	ldr	r3, [pc, #248]	@ (800273c <handleTouch+0x628>)
 8002642:	885b      	ldrh	r3, [r3, #2]
 8002644:	4619      	mov	r1, r3
 8002646:	4b3d      	ldr	r3, [pc, #244]	@ (800273c <handleTouch+0x628>)
 8002648:	88db      	ldrh	r3, [r3, #6]
 800264a:	440b      	add	r3, r1
 800264c:	429a      	cmp	r2, r3
 800264e:	dc0e      	bgt.n	800266e <handleTouch+0x55a>
			currentPage = PAGE_SELECT;
 8002650:	4b3b      	ldr	r3, [pc, #236]	@ (8002740 <handleTouch+0x62c>)
 8002652:	2201      	movs	r2, #1
 8002654:	701a      	strb	r2, [r3, #0]
			DrawInfoPage(buttons[protocol_offset].label);
 8002656:	4b3b      	ldr	r3, [pc, #236]	@ (8002744 <handleTouch+0x630>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	232a      	movs	r3, #42	@ 0x2a
 800265e:	fb02 f303 	mul.w	r3, r2, r3
 8002662:	3308      	adds	r3, #8
 8002664:	4a38      	ldr	r2, [pc, #224]	@ (8002748 <handleTouch+0x634>)
 8002666:	4413      	add	r3, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fb09 	bl	8001c80 <DrawInfoPage>
		}
		//confirm button
		if (x >= confirmButton.x && x <= (confirmButton.x + confirmButton.w)
 800266e:	4b37      	ldr	r3, [pc, #220]	@ (800274c <handleTouch+0x638>)
 8002670:	881a      	ldrh	r2, [r3, #0]
 8002672:	887b      	ldrh	r3, [r7, #2]
 8002674:	429a      	cmp	r2, r3
 8002676:	d855      	bhi.n	8002724 <handleTouch+0x610>
 8002678:	887b      	ldrh	r3, [r7, #2]
 800267a:	461a      	mov	r2, r3
 800267c:	4b33      	ldr	r3, [pc, #204]	@ (800274c <handleTouch+0x638>)
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	4619      	mov	r1, r3
 8002682:	4b32      	ldr	r3, [pc, #200]	@ (800274c <handleTouch+0x638>)
 8002684:	889b      	ldrh	r3, [r3, #4]
 8002686:	440b      	add	r3, r1
 8002688:	429a      	cmp	r2, r3
 800268a:	dc4b      	bgt.n	8002724 <handleTouch+0x610>
				&& y >= confirmButton.y
 800268c:	4b2f      	ldr	r3, [pc, #188]	@ (800274c <handleTouch+0x638>)
 800268e:	885a      	ldrh	r2, [r3, #2]
 8002690:	883b      	ldrh	r3, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d846      	bhi.n	8002724 <handleTouch+0x610>
				&& y <= (confirmButton.y + confirmButton.h)) {
 8002696:	883b      	ldrh	r3, [r7, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	4b2c      	ldr	r3, [pc, #176]	@ (800274c <handleTouch+0x638>)
 800269c:	885b      	ldrh	r3, [r3, #2]
 800269e:	4619      	mov	r1, r3
 80026a0:	4b2a      	ldr	r3, [pc, #168]	@ (800274c <handleTouch+0x638>)
 80026a2:	88db      	ldrh	r3, [r3, #6]
 80026a4:	440b      	add	r3, r1
 80026a6:	429a      	cmp	r2, r3
 80026a8:	dc3c      	bgt.n	8002724 <handleTouch+0x610>
			//delete protocol and go back to main page
			deleteProtocol(pageNum, protocol_offset);
 80026aa:	4b29      	ldr	r3, [pc, #164]	@ (8002750 <handleTouch+0x63c>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	4b24      	ldr	r3, [pc, #144]	@ (8002744 <handleTouch+0x630>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	4610      	mov	r0, r2
 80026b8:	f000 fb88 	bl	8002dcc <deleteProtocol>
			currentPage = PAGE_MAIN;
 80026bc:	4b20      	ldr	r3, [pc, #128]	@ (8002740 <handleTouch+0x62c>)
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 80026c2:	4b23      	ldr	r3, [pc, #140]	@ (8002750 <handleTouch+0x63c>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff f8f8 	bl	80018bc <DrawMainPage>
		}
		break;
 80026cc:	e02a      	b.n	8002724 <handleTouch+0x610>

	case PAGE_FINISH:
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 80026ce:	4b1b      	ldr	r3, [pc, #108]	@ (800273c <handleTouch+0x628>)
 80026d0:	881a      	ldrh	r2, [r3, #0]
 80026d2:	887b      	ldrh	r3, [r7, #2]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d827      	bhi.n	8002728 <handleTouch+0x614>
 80026d8:	887b      	ldrh	r3, [r7, #2]
 80026da:	461a      	mov	r2, r3
 80026dc:	4b17      	ldr	r3, [pc, #92]	@ (800273c <handleTouch+0x628>)
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	4619      	mov	r1, r3
 80026e2:	4b16      	ldr	r3, [pc, #88]	@ (800273c <handleTouch+0x628>)
 80026e4:	889b      	ldrh	r3, [r3, #4]
 80026e6:	440b      	add	r3, r1
 80026e8:	429a      	cmp	r2, r3
 80026ea:	dc1d      	bgt.n	8002728 <handleTouch+0x614>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 80026ec:	4b13      	ldr	r3, [pc, #76]	@ (800273c <handleTouch+0x628>)
 80026ee:	885a      	ldrh	r2, [r3, #2]
 80026f0:	883b      	ldrh	r3, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d818      	bhi.n	8002728 <handleTouch+0x614>
 80026f6:	883b      	ldrh	r3, [r7, #0]
 80026f8:	461a      	mov	r2, r3
 80026fa:	4b10      	ldr	r3, [pc, #64]	@ (800273c <handleTouch+0x628>)
 80026fc:	885b      	ldrh	r3, [r3, #2]
 80026fe:	4619      	mov	r1, r3
 8002700:	4b0e      	ldr	r3, [pc, #56]	@ (800273c <handleTouch+0x628>)
 8002702:	88db      	ldrh	r3, [r3, #6]
 8002704:	440b      	add	r3, r1
 8002706:	429a      	cmp	r2, r3
 8002708:	dc0e      	bgt.n	8002728 <handleTouch+0x614>
			currentPage = PAGE_MAIN;
 800270a:	4b0d      	ldr	r3, [pc, #52]	@ (8002740 <handleTouch+0x62c>)
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 8002710:	4b0f      	ldr	r3, [pc, #60]	@ (8002750 <handleTouch+0x63c>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff f8d1 	bl	80018bc <DrawMainPage>
		}
		break;
 800271a:	e005      	b.n	8002728 <handleTouch+0x614>
		break;
 800271c:	bf00      	nop
 800271e:	e004      	b.n	800272a <handleTouch+0x616>
		break;
 8002720:	bf00      	nop
 8002722:	e002      	b.n	800272a <handleTouch+0x616>
		break;
 8002724:	bf00      	nop
 8002726:	e000      	b.n	800272a <handleTouch+0x616>
		break;
 8002728:	bf00      	nop
	}

	HAL_Delay(SCREEN_DELAY); //debouncing delay
 800272a:	2032      	movs	r0, #50	@ 0x32
 800272c:	f001 f86e 	bl	800380c <HAL_Delay>
	return 1;
 8002730:	2301      	movs	r3, #1
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	bd90      	pop	{r4, r7, pc}
 800273a:	bf00      	nop
 800273c:	200001b8 	.word	0x200001b8
 8002740:	200004f4 	.word	0x200004f4
 8002744:	20011811 	.word	0x20011811
 8002748:	20000030 	.word	0x20000030
 800274c:	20000108 	.word	0x20000108
 8002750:	2000020f 	.word	0x2000020f

08002754 <erase_sector>:
/**
 * @brief: Erase the memory from an entire sector
 * @param Sector: The sector number
 * @retval: none
 */
void erase_sector(uint32_t Sector) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();  // Unlock flash to enable erasing
 800275c:	f001 f9e0 	bl	8003b20 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(sector_mapping(Sector), VOLTAGE_RANGE_3);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fce3 	bl	800312c <sector_mapping>
 8002766:	4603      	mov	r3, r0
 8002768:	2102      	movs	r1, #2
 800276a:	4618      	mov	r0, r3
 800276c:	f001 fb4a 	bl	8003e04 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();  // Lock flash after erasing
 8002770:	f001 f9f8 	bl	8003b64 <HAL_FLASH_Lock>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <write_to_flash>:
 * @param flash_address: address of string in flash memory that will be stored
 * @retval: none
 * Note: PLEASE UNLOCK AND LOCK FLASH BEFORE AND AFTER USING THIS FUNCTION,
 * IT DOES NOT DO IT ITSELF
 */
void write_to_flash(const char *data, uint32_t flash_address) {
 800277c:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	6039      	str	r1, [r7, #0]
	//HAL_FLASH_Unlock();  // Unlock flash for writing

	for (uint8_t i = 0; i < strlen(data); i++) {
 8002788:	2300      	movs	r3, #0
 800278a:	73fb      	strb	r3, [r7, #15]
 800278c:	e012      	b.n	80027b4 <write_to_flash+0x38>
		//printf("%c", data[i]);
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flash_address + i, data[i]); // Write to flash
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	18d1      	adds	r1, r2, r3
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2200      	movs	r2, #0
 80027a0:	4698      	mov	r8, r3
 80027a2:	4691      	mov	r9, r2
 80027a4:	4642      	mov	r2, r8
 80027a6:	464b      	mov	r3, r9
 80027a8:	2000      	movs	r0, #0
 80027aa:	f001 f965 	bl	8003a78 <HAL_FLASH_Program>
	for (uint8_t i = 0; i < strlen(data); i++) {
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	3301      	adds	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
 80027b4:	7bfc      	ldrb	r4, [r7, #15]
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fd fd1a 	bl	80001f0 <strlen>
 80027bc:	4603      	mov	r3, r0
 80027be:	429c      	cmp	r4, r3
 80027c0:	d3e5      	bcc.n	800278e <write_to_flash+0x12>
	}

	//HAL_FLASH_Lock();  // Lock flash after writing
}
 80027c2:	bf00      	nop
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

080027ce <read_from_flash>:
 * @param flash_address: address of string in flash memory that will be read
 * @retval: failure if its reading trash from flash memory.
 * it literally does not read from flash btw if it detects 0xFF at the start
 * that means your output buffer will not be updated
 */
uint8_t read_from_flash(char *output, uint32_t flash_address) {
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
	// Read byte by byte from flash memory, get a whole string in output variable
	for (uint8_t i = 0; i < MAX_LINE_LENGTH; i++) {
 80027d8:	2300      	movs	r3, #0
 80027da:	73fb      	strb	r3, [r7, #15]
 80027dc:	e014      	b.n	8002808 <read_from_flash+0x3a>
		char key = *(char*) (flash_address + i);
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	4413      	add	r3, r2
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	73bb      	strb	r3, [r7, #14]
		//check if reading trash (0xFF) from flash memory
		if (key == 0xFF) {
 80027e8:	7bbb      	ldrb	r3, [r7, #14]
 80027ea:	2bff      	cmp	r3, #255	@ 0xff
 80027ec:	d104      	bne.n	80027f8 <read_from_flash+0x2a>
			if (i == 0) {
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d106      	bne.n	8002802 <read_from_flash+0x34>
				return 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	e01b      	b.n	8002830 <read_from_flash+0x62>
			}
		} else {
			output[i] = key;
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	7bba      	ldrb	r2, [r7, #14]
 8002800:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX_LINE_LENGTH; i++) {
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	3301      	adds	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	2b1f      	cmp	r3, #31
 800280c:	d9e7      	bls.n	80027de <read_from_flash+0x10>
		}
	}
	output[strlen(output)] = '\0'; //add null to the end of string for printing
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fd fcee 	bl	80001f0 <strlen>
 8002814:	4602      	mov	r2, r0
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4413      	add	r3, r2
 800281a:	2200      	movs	r2, #0
 800281c:	701a      	strb	r2, [r3, #0]
	//printf("output is %s and strlen: %d\n", output, strlen(output));

	//error handling. G-codes are less than 32 chars, anything more is trash
	if (strlen(output) < MAX_LINE_LENGTH) {
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7fd fce6 	bl	80001f0 <strlen>
 8002824:	4603      	mov	r3, r0
 8002826:	2b1f      	cmp	r3, #31
 8002828:	d801      	bhi.n	800282e <read_from_flash+0x60>
		return 1;
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <read_from_flash+0x62>
	} else {
		return 0;
 800282e:	2300      	movs	r3, #0
	}

}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <storeProtocol>:
 * @param gcode_file: array of G-code commands
 * @param sector: which sector to store protocol in
 * @retval: failure if sector is "full"
 */
uint8_t storeProtocol(char new_protocol[MAX_LINES][MAX_LINE_LENGTH],
		uint32_t sector) {
 8002838:	b580      	push	{r7, lr}
 800283a:	f5ad 4d96 	sub.w	sp, sp, #19200	@ 0x4b00
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
 8002842:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8002846:	f6a3 331c 	subw	r3, r3, #2844	@ 0xb1c
 800284a:	6018      	str	r0, [r3, #0]
 800284c:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8002850:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 8002854:	6019      	str	r1, [r3, #0]

	//initialize variables
	int i = 0;  //protocol index
 8002856:	2300      	movs	r3, #0
 8002858:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800285c:	f102 021c 	add.w	r2, r2, #28
 8002860:	6013      	str	r3, [r2, #0]
	int j = 0;  //line index
 8002862:	2300      	movs	r3, #0
 8002864:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002868:	f102 0218 	add.w	r2, r2, #24
 800286c:	6013      	str	r3, [r2, #0]
	char protocolStorage[MAX_PROTOCOLS_IN_SECTOR][MAX_LINES][MAX_LINE_LENGTH] =
 800286e:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8002872:	f6a3 3318 	subw	r3, r3, #2840	@ 0xb18
 8002876:	4618      	mov	r0, r3
 8002878:	f44f 4396 	mov.w	r3, #19200	@ 0x4b00
 800287c:	461a      	mov	r2, r3
 800287e:	2100      	movs	r1, #0
 8002880:	f00a fd64 	bl	800d34c <memset>
			{ { { '\0' } } };
	uint32_t flash_address = get_sector_address(sector);
 8002884:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8002888:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	f000 fbe5 	bl	800305c <get_sector_address>
 8002892:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002896:	f103 0314 	add.w	r3, r3, #20
 800289a:	6018      	str	r0, [r3, #0]

	//check if all sectors are full before storing a protocol
	uint8_t num_protocols = get_num_protocols_in_sector(sector);
 800289c:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 80028a0:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	f000 f966 	bl	8002b76 <get_num_protocols_in_sector>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80028b0:	f102 0213 	add.w	r2, r2, #19
 80028b4:	7013      	strb	r3, [r2, #0]
	if (num_protocols == MAX_PROTOCOLS_IN_SECTOR) {
 80028b6:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80028ba:	f103 0313 	add.w	r3, r3, #19
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d101      	bne.n	80028c8 <storeProtocol+0x90>
		return 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	e150      	b.n	8002b6a <storeProtocol+0x332>
	}

	//read existing protocols in sector and put into the temp protocol storage
	for (i = 0; i < num_protocols; i++) {
 80028c8:	2300      	movs	r3, #0
 80028ca:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80028ce:	f102 021c 	add.w	r2, r2, #28
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	e05a      	b.n	800298c <storeProtocol+0x154>
		for (j = 0; j < MAX_LINES; j++) {
 80028d6:	2300      	movs	r3, #0
 80028d8:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80028dc:	f102 0218 	add.w	r2, r2, #24
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e041      	b.n	8002968 <storeProtocol+0x130>
			//get the address for the current line in the current protocol
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80028e4:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80028e8:	f103 031c 	add.w	r3, r3, #28
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f241 7270 	movw	r2, #6000	@ 0x1770
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
					+ j * MAX_LINE_LENGTH;
 80028f6:	461a      	mov	r2, r3
 80028f8:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80028fc:	f103 0318 	add.w	r3, r3, #24
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	015b      	lsls	r3, r3, #5
 8002904:	4413      	add	r3, r2
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8002906:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800290a:	f102 0214 	add.w	r2, r2, #20
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	4413      	add	r3, r2
 8002912:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002916:	f102 0208 	add.w	r2, r2, #8
 800291a:	6013      	str	r3, [r2, #0]
			//read lines from memory into buffer until you reach garbage
			read_from_flash(protocolStorage[i][j], temp_address); //only updates protocolStorage if its a valid line from memory
 800291c:	f107 0320 	add.w	r3, r7, #32
 8002920:	3b18      	subs	r3, #24
 8002922:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002926:	f102 021c 	add.w	r2, r2, #28
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	21c8      	movs	r1, #200	@ 0xc8
 800292e:	fb02 f101 	mul.w	r1, r2, r1
 8002932:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002936:	f102 0218 	add.w	r2, r2, #24
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	440a      	add	r2, r1
 800293e:	0152      	lsls	r2, r2, #5
 8002940:	4413      	add	r3, r2
 8002942:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002946:	f102 0208 	add.w	r2, r2, #8
 800294a:	6811      	ldr	r1, [r2, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff ff3e 	bl	80027ce <read_from_flash>
		for (j = 0; j < MAX_LINES; j++) {
 8002952:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002956:	f103 0318 	add.w	r3, r3, #24
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	3301      	adds	r3, #1
 800295e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002962:	f102 0218 	add.w	r2, r2, #24
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 800296c:	f103 0318 	add.w	r3, r3, #24
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2bc7      	cmp	r3, #199	@ 0xc7
 8002974:	ddb6      	ble.n	80028e4 <storeProtocol+0xac>
	for (i = 0; i < num_protocols; i++) {
 8002976:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 800297a:	f103 031c 	add.w	r3, r3, #28
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	3301      	adds	r3, #1
 8002982:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002986:	f102 021c 	add.w	r2, r2, #28
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002990:	f103 0313 	add.w	r3, r3, #19
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800299a:	f102 021c 	add.w	r2, r2, #28
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	db98      	blt.n	80028d6 <storeProtocol+0x9e>
	}
	//output: we now have the existing protocols in the buffer.
	//they only have their first number of lines in. the rest of lines are null

	//put the new protocol into the temp protocol storage
	for (j = 0; j < MAX_LINES; j++) {
 80029a4:	2300      	movs	r3, #0
 80029a6:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80029aa:	f102 0218 	add.w	r2, r2, #24
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	e03b      	b.n	8002a2a <storeProtocol+0x1f2>
		//copy each line into the buffer from new protocol, should be null terminated from qr scanner
		if (new_protocol[j][0] != '\0') {
 80029b2:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80029b6:	f103 0318 	add.w	r3, r3, #24
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	015b      	lsls	r3, r3, #5
 80029be:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 80029c2:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	4413      	add	r3, r2
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d021      	beq.n	8002a14 <storeProtocol+0x1dc>
			strcpy(protocolStorage[i][j], new_protocol[j]);
 80029d0:	f107 0320 	add.w	r3, r7, #32
 80029d4:	3b18      	subs	r3, #24
 80029d6:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80029da:	f102 021c 	add.w	r2, r2, #28
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	21c8      	movs	r1, #200	@ 0xc8
 80029e2:	fb02 f101 	mul.w	r1, r2, r1
 80029e6:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80029ea:	f102 0218 	add.w	r2, r2, #24
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	440a      	add	r2, r1
 80029f2:	0152      	lsls	r2, r2, #5
 80029f4:	1898      	adds	r0, r3, r2
 80029f6:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80029fa:	f103 0318 	add.w	r3, r3, #24
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	015b      	lsls	r3, r3, #5
 8002a02:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 8002a06:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	4619      	mov	r1, r3
 8002a10:	f00a fd27 	bl	800d462 <strcpy>
	for (j = 0; j < MAX_LINES; j++) {
 8002a14:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002a18:	f103 0318 	add.w	r3, r3, #24
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002a24:	f102 0218 	add.w	r2, r2, #24
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002a2e:	f103 0318 	add.w	r3, r3, #24
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2bc7      	cmp	r3, #199	@ 0xc7
 8002a36:	ddbc      	ble.n	80029b2 <storeProtocol+0x17a>
	}
	//we now have the new protocol in the buffer.
	//it only has the first number of lines in. the rest of lines are null

	//write existing protocols and new protocol to flash memory, string-by-string
	erase_sector(sector); //erase sector before writing
 8002a38:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8002a3c:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	f7ff fe87 	bl	8002754 <erase_sector>
	HAL_FLASH_Unlock(); // Unlock flash for writing. note: the erase_sector() unlocks and locks itself
 8002a46:	f001 f86b 	bl	8003b20 <HAL_FLASH_Unlock>
	for (i = 0; i < (num_protocols + 1); i++) {
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002a50:	f102 021c 	add.w	r2, r2, #28
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	e078      	b.n	8002b4a <storeProtocol+0x312>
		for (j = 0; j < MAX_LINES; j++) {
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002a5e:	f102 0218 	add.w	r2, r2, #24
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	e05f      	b.n	8002b26 <storeProtocol+0x2ee>
			//if first character of a line is null from qr scanner or trash from flash, ignore it
			if ((new_protocol[j][0] != '\0') && (new_protocol[j][0] != 0xFF)) {
 8002a66:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002a6a:	f103 0318 	add.w	r3, r3, #24
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	015b      	lsls	r3, r3, #5
 8002a72:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 8002a76:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d045      	beq.n	8002b10 <storeProtocol+0x2d8>
 8002a84:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002a88:	f103 0318 	add.w	r3, r3, #24
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	015b      	lsls	r3, r3, #5
 8002a90:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 8002a94:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 8002a98:	6812      	ldr	r2, [r2, #0]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2bff      	cmp	r3, #255	@ 0xff
 8002aa0:	d036      	beq.n	8002b10 <storeProtocol+0x2d8>
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8002aa2:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002aa6:	f103 031c 	add.w	r3, r3, #28
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002ab0:	fb02 f303 	mul.w	r3, r2, r3
						+ j * MAX_LINE_LENGTH;
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002aba:	f103 0318 	add.w	r3, r3, #24
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	015b      	lsls	r3, r3, #5
 8002ac2:	4413      	add	r3, r2
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8002ac4:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002ac8:	f102 0214 	add.w	r2, r2, #20
 8002acc:	6812      	ldr	r2, [r2, #0]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002ad4:	f102 020c 	add.w	r2, r2, #12
 8002ad8:	6013      	str	r3, [r2, #0]
				//printf("len: %d and data: %s", strlen(protocolStorage[i][j]), protocolStorage[i][j]);
				write_to_flash(protocolStorage[i][j], temp_address);
 8002ada:	f107 0320 	add.w	r3, r7, #32
 8002ade:	3b18      	subs	r3, #24
 8002ae0:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002ae4:	f102 021c 	add.w	r2, r2, #28
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	21c8      	movs	r1, #200	@ 0xc8
 8002aec:	fb02 f101 	mul.w	r1, r2, r1
 8002af0:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002af4:	f102 0218 	add.w	r2, r2, #24
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	440a      	add	r2, r1
 8002afc:	0152      	lsls	r2, r2, #5
 8002afe:	4413      	add	r3, r2
 8002b00:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002b04:	f102 020c 	add.w	r2, r2, #12
 8002b08:	6811      	ldr	r1, [r2, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fe36 	bl	800277c <write_to_flash>
		for (j = 0; j < MAX_LINES; j++) {
 8002b10:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002b14:	f103 0318 	add.w	r3, r3, #24
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002b20:	f102 0218 	add.w	r2, r2, #24
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002b2a:	f103 0318 	add.w	r3, r3, #24
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2bc7      	cmp	r3, #199	@ 0xc7
 8002b32:	dd98      	ble.n	8002a66 <storeProtocol+0x22e>
	for (i = 0; i < (num_protocols + 1); i++) {
 8002b34:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002b38:	f103 031c 	add.w	r3, r3, #28
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002b44:	f102 021c 	add.w	r2, r2, #28
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002b4e:	f103 0313 	add.w	r3, r3, #19
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002b58:	f102 021c 	add.w	r2, r2, #28
 8002b5c:	6812      	ldr	r2, [r2, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	f77f af7a 	ble.w	8002a58 <storeProtocol+0x220>
			}
		}
	}
	HAL_FLASH_Lock();  // Unlock flash for writing
 8002b64:	f000 fffe 	bl	8003b64 <HAL_FLASH_Lock>

	//output:flash memory now has the lines of protocol storage in there
	//the remaining space is still 0xFF in flash
	return 1;
 8002b68:	2301      	movs	r3, #1
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f507 4796 	add.w	r7, r7, #19200	@ 0x4b00
 8002b70:	3720      	adds	r7, #32
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <get_num_protocols_in_sector>:

//return number of protocols in the sector
uint8_t get_num_protocols_in_sector(uint32_t sector) {
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b086      	sub	sp, #24
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
	uint32_t flash_address = get_sector_address(sector);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fa6c 	bl	800305c <get_sector_address>
 8002b84:	6138      	str	r0, [r7, #16]

	uint8_t i = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	75fb      	strb	r3, [r7, #23]
 8002b8e:	e011      	b.n	8002bb4 <get_num_protocols_in_sector+0x3e>
		uint8_t first_char = *(uint8_t*) (flash_address + i * PROTOCOL_SIZE);
 8002b90:	7dfb      	ldrb	r3, [r7, #23]
 8002b92:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002b96:	fb02 f303 	mul.w	r3, r2, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	73fb      	strb	r3, [r7, #15]
		//memory in flash is default 0xFF
		if (first_char == 0xFF) {
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	2bff      	cmp	r3, #255	@ 0xff
 8002ba8:	d101      	bne.n	8002bae <get_num_protocols_in_sector+0x38>
			return i;
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
 8002bac:	e006      	b.n	8002bbc <get_num_protocols_in_sector+0x46>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	75fb      	strb	r3, [r7, #23]
 8002bb4:	7dfb      	ldrb	r3, [r7, #23]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d9ea      	bls.n	8002b90 <get_num_protocols_in_sector+0x1a>
		}
	}
	return i;
 8002bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <getFreeSector>:

//check each sector sequentially for any space.
//return the first sector number you find that has space
uint8_t getFreeSector(void) {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
	uint8_t i = 1;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
	//check every sector starting at 1
	for (i = 1; i < (NUMBER_OF_SECTORS + 1); i++) {
 8002bce:	2301      	movs	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
 8002bd2:	e01f      	b.n	8002c14 <getFreeSector+0x50>
		//check each potential protocol slot in the current sector
		for (uint8_t j = 0; j < MAX_PROTOCOLS_IN_SECTOR; j++) {
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	73bb      	strb	r3, [r7, #14]
 8002bd8:	e016      	b.n	8002c08 <getFreeSector+0x44>
			//check first char of the given protocol in the current sector
			uint32_t flash_address = get_sector_address(i) + j * PROTOCOL_SIZE;
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fa3d 	bl	800305c <get_sector_address>
 8002be2:	4602      	mov	r2, r0
 8002be4:	7bbb      	ldrb	r3, [r7, #14]
 8002be6:	f241 7170 	movw	r1, #6000	@ 0x1770
 8002bea:	fb01 f303 	mul.w	r3, r1, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	60bb      	str	r3, [r7, #8]
			char first_char = *(char*) (flash_address);
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	71fb      	strb	r3, [r7, #7]
			//if memory address is empty, this sector is free
			if (first_char == 0xFF) {
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	2bff      	cmp	r3, #255	@ 0xff
 8002bfc:	d101      	bne.n	8002c02 <getFreeSector+0x3e>
				return i;
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	e00e      	b.n	8002c20 <getFreeSector+0x5c>
		for (uint8_t j = 0; j < MAX_PROTOCOLS_IN_SECTOR; j++) {
 8002c02:	7bbb      	ldrb	r3, [r7, #14]
 8002c04:	3301      	adds	r3, #1
 8002c06:	73bb      	strb	r3, [r7, #14]
 8002c08:	7bbb      	ldrb	r3, [r7, #14]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d9e5      	bls.n	8002bda <getFreeSector+0x16>
	for (i = 1; i < (NUMBER_OF_SECTORS + 1); i++) {
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	3301      	adds	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	2b0e      	cmp	r3, #14
 8002c18:	d9dc      	bls.n	8002bd4 <getFreeSector+0x10>
			}
		}
	}
	//if somehow all sectors are full, return 15 or higher (16 in this case)
	return i + 1;
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	b2db      	uxtb	r3, r3
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <transmitProtocol>:

/**
 * @brief: Transmit protocol from flash memory to ESP32 via UART string-by-string
 * @param sector: which sector the protocol is stored in
 */
void transmitProtocol(uint32_t sector, uint32_t offset) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08c      	sub	sp, #48	@ 0x30
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
	char output[MAX_LINE_LENGTH] = { '\0' };
 8002c32:	2300      	movs	r3, #0
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	f107 030c 	add.w	r3, r7, #12
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	605a      	str	r2, [r3, #4]
 8002c40:	609a      	str	r2, [r3, #8]
 8002c42:	60da      	str	r2, [r3, #12]
 8002c44:	611a      	str	r2, [r3, #16]
 8002c46:	615a      	str	r2, [r3, #20]
 8002c48:	619a      	str	r2, [r3, #24]
	uint32_t flash_address = get_sector_address(sector) + offset * PROTOCOL_SIZE;
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fa06 	bl	800305c <get_sector_address>
 8002c50:	4602      	mov	r2, r0
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	f241 7170 	movw	r1, #6000	@ 0x1770
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	62bb      	str	r3, [r7, #40]	@ 0x28

	//printf("\nNew Protocol\n"); //just for debugging

	//we need to process up to 1028 G-code commands
	//but if we run into an invalid string, gcode file is over
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 8002c60:	2300      	movs	r3, #0
 8002c62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002c66:	e020      	b.n	8002caa <transmitProtocol+0x82>
		//an alternative to resetting the temp buffer is to only read up to newline
		memset(output, 0, MAX_LINE_LENGTH); // Sets all elements of buffer to 0
 8002c68:	f107 0308 	add.w	r3, r7, #8
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f00a fb6b 	bl	800d34c <memset>
		if (read_from_flash(output, flash_address + i * MAX_LINE_LENGTH)) {
 8002c76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c7a:	015b      	lsls	r3, r3, #5
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c80:	441a      	add	r2, r3
 8002c82:	f107 0308 	add.w	r3, r7, #8
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fda0 	bl	80027ce <read_from_flash>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <transmitProtocol+0x78>
			printf("%s", output);
 8002c94:	f107 0308 	add.w	r3, r7, #8
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4808      	ldr	r0, [pc, #32]	@ (8002cbc <transmitProtocol+0x94>)
 8002c9c:	f00a f9c6 	bl	800d02c <iprintf>
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 8002ca0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002caa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002cae:	2bc7      	cmp	r3, #199	@ 0xc7
 8002cb0:	d9da      	bls.n	8002c68 <transmitProtocol+0x40>
			//HAL_UART_Transmit(&huart2, (uint8_t*) output, strlen(output),
			//	HAL_MAX_DELAY);
		}
	}
}
 8002cb2:	bf00      	nop
 8002cb4:	bf00      	nop
 8002cb6:	3730      	adds	r7, #48	@ 0x30
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	0800e170 	.word	0x0800e170

08002cc0 <queueProtocol>:

/**
 * @brief: Queue protocol from flash memory to RAM buffer
 * @param sector: which sector the protocol is stored in
 */
void queueProtocol(uint32_t sector, uint32_t offset) {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08c      	sub	sp, #48	@ 0x30
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
	char output[MAX_LINE_LENGTH] = { '\0' };
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	f107 030c 	add.w	r3, r7, #12
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	605a      	str	r2, [r3, #4]
 8002cd8:	609a      	str	r2, [r3, #8]
 8002cda:	60da      	str	r2, [r3, #12]
 8002cdc:	611a      	str	r2, [r3, #16]
 8002cde:	615a      	str	r2, [r3, #20]
 8002ce0:	619a      	str	r2, [r3, #24]
	uint32_t flash_address = get_sector_address(sector) + offset * PROTOCOL_SIZE;
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f9ba 	bl	800305c <get_sector_address>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	f241 7170 	movw	r1, #6000	@ 0x1770
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	62bb      	str	r3, [r7, #40]	@ 0x28

	for (uint8_t i = 0; i < MAX_LINES; i++) {
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002cfe:	e02c      	b.n	8002d5a <queueProtocol+0x9a>
		memset(output, 0, MAX_LINE_LENGTH); // Sets all elements of buffer to 0
 8002d00:	f107 0308 	add.w	r3, r7, #8
 8002d04:	2220      	movs	r2, #32
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f00a fb1f 	bl	800d34c <memset>
		if (read_from_flash(output, flash_address + i * MAX_LINE_LENGTH)) {
 8002d0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d12:	015b      	lsls	r3, r3, #5
 8002d14:	461a      	mov	r2, r3
 8002d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d18:	441a      	add	r2, r3
 8002d1a:	f107 0308 	add.w	r3, r7, #8
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fd54 	bl	80027ce <read_from_flash>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d011      	beq.n	8002d50 <queueProtocol+0x90>
			strcpy(queueBuffer[queueSize][i], output);
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d6c <queueProtocol+0xac>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	4619      	mov	r1, r3
 8002d32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d36:	22c8      	movs	r2, #200	@ 0xc8
 8002d38:	fb01 f202 	mul.w	r2, r1, r2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	015b      	lsls	r3, r3, #5
 8002d40:	4a0b      	ldr	r2, [pc, #44]	@ (8002d70 <queueProtocol+0xb0>)
 8002d42:	4413      	add	r3, r2
 8002d44:	f107 0208 	add.w	r2, r7, #8
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f00a fb89 	bl	800d462 <strcpy>
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 8002d50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d54:	3301      	adds	r3, #1
 8002d56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d5e:	2bc7      	cmp	r3, #199	@ 0xc7
 8002d60:	d9ce      	bls.n	8002d00 <queueProtocol+0x40>
		}
	}
}
 8002d62:	bf00      	nop
 8002d64:	bf00      	nop
 8002d66:	3730      	adds	r7, #48	@ 0x30
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	2000ff08 	.word	0x2000ff08
 8002d70:	20000508 	.word	0x20000508

08002d74 <transmitQueuedProtocols>:

/**
 * @brief: Transmit queued protocols from RAM buffer to ESP32 via UART string-by-string
 * @param queueSize:
 */
void transmitQueuedProtocols(uint8_t queueSize) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < queueSize; i++) {
 8002d7e:	2300      	movs	r3, #0
 8002d80:	73fb      	strb	r3, [r7, #15]
 8002d82:	e017      	b.n	8002db4 <transmitQueuedProtocols+0x40>
		for (uint8_t j = 0; j < MAX_LINES; j++) {
 8002d84:	2300      	movs	r3, #0
 8002d86:	73bb      	strb	r3, [r7, #14]
 8002d88:	e00e      	b.n	8002da8 <transmitQueuedProtocols+0x34>
			printf(queueBuffer[i][j]);
 8002d8a:	7bfa      	ldrb	r2, [r7, #15]
 8002d8c:	7bbb      	ldrb	r3, [r7, #14]
 8002d8e:	21c8      	movs	r1, #200	@ 0xc8
 8002d90:	fb01 f202 	mul.w	r2, r1, r2
 8002d94:	4413      	add	r3, r2
 8002d96:	015b      	lsls	r3, r3, #5
 8002d98:	4a0b      	ldr	r2, [pc, #44]	@ (8002dc8 <transmitQueuedProtocols+0x54>)
 8002d9a:	4413      	add	r3, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f00a f945 	bl	800d02c <iprintf>
		for (uint8_t j = 0; j < MAX_LINES; j++) {
 8002da2:	7bbb      	ldrb	r3, [r7, #14]
 8002da4:	3301      	adds	r3, #1
 8002da6:	73bb      	strb	r3, [r7, #14]
 8002da8:	7bbb      	ldrb	r3, [r7, #14]
 8002daa:	2bc7      	cmp	r3, #199	@ 0xc7
 8002dac:	d9ed      	bls.n	8002d8a <transmitQueuedProtocols+0x16>
	for (uint8_t i = 0; i < queueSize; i++) {
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	3301      	adds	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
 8002db4:	7bfa      	ldrb	r2, [r7, #15]
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d3e3      	bcc.n	8002d84 <transmitQueuedProtocols+0x10>
			//HAL_UART_Transmit(&huart1, (uint8_t*) queueBuffer[i][j],
			//	strlen(queueBuffer[i][j]), HAL_MAX_DELAY);
		}
	}
}
 8002dbc:	bf00      	nop
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000508 	.word	0x20000508

08002dcc <deleteProtocol>:
 * @brief: Delete protocol from flash memory to ESP32 via UART string-by-string
 * @param sector: which sector the protocol is stored in
 * @param offset: the exact slot in the sector the protocol is stored in
 * @retval: none
 */
void deleteProtocol(uint32_t sector, uint32_t offset) {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	f5ad 4d96 	sub.w	sp, sp, #19200	@ 0x4b00
 8002dd2:	b098      	sub	sp, #96	@ 0x60
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8002dda:	f6a3 335c 	subw	r3, r3, #2908	@ 0xb5c
 8002dde:	6018      	str	r0, [r3, #0]
 8002de0:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8002de4:	f5a3 6336 	sub.w	r3, r3, #2912	@ 0xb60
 8002de8:	6019      	str	r1, [r3, #0]
	//initialize variables
	int i = 0;  //protocol index
 8002dea:	2300      	movs	r3, #0
 8002dec:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002df0:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8002df4:	6013      	str	r3, [r2, #0]
	int j = 0;  //line index
 8002df6:	2300      	movs	r3, #0
 8002df8:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002dfc:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8002e00:	6013      	str	r3, [r2, #0]
	char protocolStorage[MAX_PROTOCOLS_IN_SECTOR][MAX_LINES][MAX_LINE_LENGTH] =
 8002e02:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8002e06:	f6a3 3318 	subw	r3, r3, #2840	@ 0xb18
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f44f 4396 	mov.w	r3, #19200	@ 0x4b00
 8002e10:	461a      	mov	r2, r3
 8002e12:	2100      	movs	r1, #0
 8002e14:	f00a fa9a 	bl	800d34c <memset>
			{ { { '\0' } } };
	uint32_t flash_address = get_sector_address(sector);
 8002e18:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8002e1c:	f6a3 335c 	subw	r3, r3, #2908	@ 0xb5c
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	f000 f91b 	bl	800305c <get_sector_address>
 8002e26:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002e2a:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 8002e2e:	6018      	str	r0, [r3, #0]
	char trashLine[MAX_LINE_LENGTH];
	memset(trashLine, 0xFF, sizeof(trashLine));
 8002e30:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002e34:	3b38      	subs	r3, #56	@ 0x38
 8002e36:	2220      	movs	r2, #32
 8002e38:	21ff      	movs	r1, #255	@ 0xff
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f00a fa86 	bl	800d34c <memset>
	char nullLine[MAX_LINE_LENGTH];
	memset(nullLine, 0x00, sizeof(nullLine));
 8002e40:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002e44:	3b58      	subs	r3, #88	@ 0x58
 8002e46:	2220      	movs	r2, #32
 8002e48:	2100      	movs	r1, #0
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f00a fa7e 	bl	800d34c <memset>
	uint8_t num_protocols = get_num_protocols_in_sector(sector);
 8002e50:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8002e54:	f6a3 335c 	subw	r3, r3, #2908	@ 0xb5c
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	f7ff fe8c 	bl	8002b76 <get_num_protocols_in_sector>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002e64:	f102 0253 	add.w	r2, r2, #83	@ 0x53
 8002e68:	7013      	strb	r3, [r2, #0]

	//copy all protocols in sector to local buffer
	for (i = 0; i < num_protocols; i++) {
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002e70:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	e05a      	b.n	8002f2e <deleteProtocol+0x162>
		for (j = 0; j < MAX_LINES; j++) {
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002e7e:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	e041      	b.n	8002f0a <deleteProtocol+0x13e>
			//get the address for the current line in the current protocol
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8002e86:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002e8a:	f103 035c 	add.w	r3, r3, #92	@ 0x5c
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002e94:	fb02 f303 	mul.w	r3, r2, r3
					+ j * MAX_LINE_LENGTH;
 8002e98:	461a      	mov	r2, r3
 8002e9a:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002e9e:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	015b      	lsls	r3, r3, #5
 8002ea6:	4413      	add	r3, r2
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8002ea8:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002eac:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002eb8:	f102 0248 	add.w	r2, r2, #72	@ 0x48
 8002ebc:	6013      	str	r3, [r2, #0]
			//read lines from memory into buffer until you reach garbage
			read_from_flash(protocolStorage[i][j], temp_address); //only updates protocolStorage if its a valid line from memory
 8002ebe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002ec2:	3b18      	subs	r3, #24
 8002ec4:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002ec8:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8002ecc:	6812      	ldr	r2, [r2, #0]
 8002ece:	21c8      	movs	r1, #200	@ 0xc8
 8002ed0:	fb02 f101 	mul.w	r1, r2, r1
 8002ed4:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002ed8:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	440a      	add	r2, r1
 8002ee0:	0152      	lsls	r2, r2, #5
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002ee8:	f102 0248 	add.w	r2, r2, #72	@ 0x48
 8002eec:	6811      	ldr	r1, [r2, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fc6d 	bl	80027ce <read_from_flash>
		for (j = 0; j < MAX_LINES; j++) {
 8002ef4:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002ef8:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	3301      	adds	r3, #1
 8002f00:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002f04:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002f0e:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2bc7      	cmp	r3, #199	@ 0xc7
 8002f16:	ddb6      	ble.n	8002e86 <deleteProtocol+0xba>
	for (i = 0; i < num_protocols; i++) {
 8002f18:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002f1c:	f103 035c 	add.w	r3, r3, #92	@ 0x5c
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	3301      	adds	r3, #1
 8002f24:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002f28:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002f32:	f103 0353 	add.w	r3, r3, #83	@ 0x53
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002f3c:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8002f40:	6812      	ldr	r2, [r2, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	db98      	blt.n	8002e78 <deleteProtocol+0xac>
		}
	}

	//write existing protocols except the one to be deleted back to flash
	erase_sector(sector); //erase sector before writing
 8002f46:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8002f4a:	f6a3 335c 	subw	r3, r3, #2908	@ 0xb5c
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	f7ff fc00 	bl	8002754 <erase_sector>
	HAL_FLASH_Unlock(); // Unlock flash for writing. note: the erase_sector() unlocks and locks itself
 8002f54:	f000 fde4 	bl	8003b20 <HAL_FLASH_Unlock>
	for (i = 0; i < num_protocols; i++) {
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002f5e:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	e066      	b.n	8003034 <deleteProtocol+0x268>
		for (j = 0; j < MAX_LINES; j++) {
 8002f66:	2300      	movs	r3, #0
 8002f68:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002f6c:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	e04d      	b.n	8003010 <deleteProtocol+0x244>
			//if first character of a line is null from qr scanner or trash from flash, ignore it
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8002f74:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002f78:	f103 035c 	add.w	r3, r3, #92	@ 0x5c
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002f82:	fb02 f303 	mul.w	r3, r2, r3
					+ j * MAX_LINE_LENGTH;
 8002f86:	461a      	mov	r2, r3
 8002f88:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002f8c:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	015b      	lsls	r3, r3, #5
 8002f94:	4413      	add	r3, r2
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8002f96:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002f9a:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002fa6:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 8002faa:	6013      	str	r3, [r2, #0]
			if (i != offset) {
 8002fac:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8002fb0:	f5a3 6336 	sub.w	r3, r3, #2912	@ 0xb60
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002fba:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d01a      	beq.n	8002ffa <deleteProtocol+0x22e>
				//printf("len: %d and data: %s", strlen(protocolStorage[i][j]), protocolStorage[i][j]);
				write_to_flash(protocolStorage[i][j], temp_address);
 8002fc4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002fc8:	3b18      	subs	r3, #24
 8002fca:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002fce:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	21c8      	movs	r1, #200	@ 0xc8
 8002fd6:	fb02 f101 	mul.w	r1, r2, r1
 8002fda:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002fde:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	440a      	add	r2, r1
 8002fe6:	0152      	lsls	r2, r2, #5
 8002fe8:	4413      	add	r3, r2
 8002fea:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002fee:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 8002ff2:	6811      	ldr	r1, [r2, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fbc1 	bl	800277c <write_to_flash>
		for (j = 0; j < MAX_LINES; j++) {
 8002ffa:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002ffe:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3301      	adds	r3, #1
 8003006:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800300a:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003014:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2bc7      	cmp	r3, #199	@ 0xc7
 800301c:	ddaa      	ble.n	8002f74 <deleteProtocol+0x1a8>
	for (i = 0; i < num_protocols; i++) {
 800301e:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003022:	f103 035c 	add.w	r3, r3, #92	@ 0x5c
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3301      	adds	r3, #1
 800302a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800302e:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003038:	f103 0353 	add.w	r3, r3, #83	@ 0x53
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003042:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	db8c      	blt.n	8002f66 <deleteProtocol+0x19a>
			}

		}
	}
	HAL_FLASH_Lock();  // Unlock flash for writing
 800304c:	f000 fd8a 	bl	8003b64 <HAL_FLASH_Lock>
}
 8003050:	bf00      	nop
 8003052:	f507 4796 	add.w	r7, r7, #19200	@ 0x4b00
 8003056:	3760      	adds	r7, #96	@ 0x60
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <get_sector_address>:
void write_number_to_flash(uint32_t flash_address, uint32_t number) {
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flash_address, number);
}

//I name sectors from 1-14. the actual sectors are from 5-23. this functions maps them
uint32_t get_sector_address(uint32_t sector) {
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
	switch (sector) {
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3b01      	subs	r3, #1
 8003068:	2b0d      	cmp	r3, #13
 800306a:	d83b      	bhi.n	80030e4 <get_sector_address+0x88>
 800306c:	a201      	add	r2, pc, #4	@ (adr r2, 8003074 <get_sector_address+0x18>)
 800306e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003072:	bf00      	nop
 8003074:	080030ad 	.word	0x080030ad
 8003078:	080030b1 	.word	0x080030b1
 800307c:	080030b5 	.word	0x080030b5
 8003080:	080030b9 	.word	0x080030b9
 8003084:	080030bd 	.word	0x080030bd
 8003088:	080030c1 	.word	0x080030c1
 800308c:	080030c5 	.word	0x080030c5
 8003090:	080030c9 	.word	0x080030c9
 8003094:	080030cd 	.word	0x080030cd
 8003098:	080030d1 	.word	0x080030d1
 800309c:	080030d5 	.word	0x080030d5
 80030a0:	080030d9 	.word	0x080030d9
 80030a4:	080030dd 	.word	0x080030dd
 80030a8:	080030e1 	.word	0x080030e1
	case 1:
		return SECTOR_5;
 80030ac:	4b11      	ldr	r3, [pc, #68]	@ (80030f4 <get_sector_address+0x98>)
 80030ae:	e01a      	b.n	80030e6 <get_sector_address+0x8a>
	case 2:
		return SECTOR_6;
 80030b0:	4b11      	ldr	r3, [pc, #68]	@ (80030f8 <get_sector_address+0x9c>)
 80030b2:	e018      	b.n	80030e6 <get_sector_address+0x8a>
	case 3:
		return SECTOR_7;
 80030b4:	4b11      	ldr	r3, [pc, #68]	@ (80030fc <get_sector_address+0xa0>)
 80030b6:	e016      	b.n	80030e6 <get_sector_address+0x8a>
	case 4:
		return SECTOR_8;
 80030b8:	4b11      	ldr	r3, [pc, #68]	@ (8003100 <get_sector_address+0xa4>)
 80030ba:	e014      	b.n	80030e6 <get_sector_address+0x8a>
	case 5:
		return SECTOR_9;
 80030bc:	4b11      	ldr	r3, [pc, #68]	@ (8003104 <get_sector_address+0xa8>)
 80030be:	e012      	b.n	80030e6 <get_sector_address+0x8a>
	case 6:
		return SECTOR_10;
 80030c0:	4b11      	ldr	r3, [pc, #68]	@ (8003108 <get_sector_address+0xac>)
 80030c2:	e010      	b.n	80030e6 <get_sector_address+0x8a>
	case 7:
		return SECTOR_11;
 80030c4:	4b11      	ldr	r3, [pc, #68]	@ (800310c <get_sector_address+0xb0>)
 80030c6:	e00e      	b.n	80030e6 <get_sector_address+0x8a>
	case 8:
		return SECTOR_17;
 80030c8:	4b11      	ldr	r3, [pc, #68]	@ (8003110 <get_sector_address+0xb4>)
 80030ca:	e00c      	b.n	80030e6 <get_sector_address+0x8a>
	case 9:
		return SECTOR_18;
 80030cc:	4b11      	ldr	r3, [pc, #68]	@ (8003114 <get_sector_address+0xb8>)
 80030ce:	e00a      	b.n	80030e6 <get_sector_address+0x8a>
	case 10:
		return SECTOR_19;
 80030d0:	4b11      	ldr	r3, [pc, #68]	@ (8003118 <get_sector_address+0xbc>)
 80030d2:	e008      	b.n	80030e6 <get_sector_address+0x8a>
	case 11:
		return SECTOR_20;
 80030d4:	4b11      	ldr	r3, [pc, #68]	@ (800311c <get_sector_address+0xc0>)
 80030d6:	e006      	b.n	80030e6 <get_sector_address+0x8a>
	case 12:
		return SECTOR_21;
 80030d8:	4b11      	ldr	r3, [pc, #68]	@ (8003120 <get_sector_address+0xc4>)
 80030da:	e004      	b.n	80030e6 <get_sector_address+0x8a>
	case 13:
		return SECTOR_22;
 80030dc:	4b11      	ldr	r3, [pc, #68]	@ (8003124 <get_sector_address+0xc8>)
 80030de:	e002      	b.n	80030e6 <get_sector_address+0x8a>
	case 14:
		return SECTOR_23;
 80030e0:	4b11      	ldr	r3, [pc, #68]	@ (8003128 <get_sector_address+0xcc>)
 80030e2:	e000      	b.n	80030e6 <get_sector_address+0x8a>
	default:
		break;
 80030e4:	bf00      	nop
	}
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	08020000 	.word	0x08020000
 80030f8:	08040000 	.word	0x08040000
 80030fc:	08060000 	.word	0x08060000
 8003100:	08080000 	.word	0x08080000
 8003104:	080a0000 	.word	0x080a0000
 8003108:	080c0000 	.word	0x080c0000
 800310c:	080e0000 	.word	0x080e0000
 8003110:	08120000 	.word	0x08120000
 8003114:	08140000 	.word	0x08140000
 8003118:	08160000 	.word	0x08160000
 800311c:	08180000 	.word	0x08180000
 8003120:	081a0000 	.word	0x081a0000
 8003124:	081c0000 	.word	0x081c0000
 8003128:	081e0000 	.word	0x081e0000

0800312c <sector_mapping>:

uint32_t sector_mapping(uint32_t sector) {
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
	switch (sector) {
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3b01      	subs	r3, #1
 8003138:	2b0d      	cmp	r3, #13
 800313a:	d83b      	bhi.n	80031b4 <sector_mapping+0x88>
 800313c:	a201      	add	r2, pc, #4	@ (adr r2, 8003144 <sector_mapping+0x18>)
 800313e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003142:	bf00      	nop
 8003144:	0800317d 	.word	0x0800317d
 8003148:	08003181 	.word	0x08003181
 800314c:	08003185 	.word	0x08003185
 8003150:	08003189 	.word	0x08003189
 8003154:	0800318d 	.word	0x0800318d
 8003158:	08003191 	.word	0x08003191
 800315c:	08003195 	.word	0x08003195
 8003160:	08003199 	.word	0x08003199
 8003164:	0800319d 	.word	0x0800319d
 8003168:	080031a1 	.word	0x080031a1
 800316c:	080031a5 	.word	0x080031a5
 8003170:	080031a9 	.word	0x080031a9
 8003174:	080031ad 	.word	0x080031ad
 8003178:	080031b1 	.word	0x080031b1
	case 1:
		return 5;
 800317c:	2305      	movs	r3, #5
 800317e:	e019      	b.n	80031b4 <sector_mapping+0x88>
	case 2:
		return 6;
 8003180:	2306      	movs	r3, #6
 8003182:	e017      	b.n	80031b4 <sector_mapping+0x88>
	case 3:
		return 7;
 8003184:	2307      	movs	r3, #7
 8003186:	e015      	b.n	80031b4 <sector_mapping+0x88>
	case 4:
		return 8;
 8003188:	2308      	movs	r3, #8
 800318a:	e013      	b.n	80031b4 <sector_mapping+0x88>
	case 5:
		return 9;
 800318c:	2309      	movs	r3, #9
 800318e:	e011      	b.n	80031b4 <sector_mapping+0x88>
	case 6:
		return 10;
 8003190:	230a      	movs	r3, #10
 8003192:	e00f      	b.n	80031b4 <sector_mapping+0x88>
	case 7:
		return 11;
 8003194:	230b      	movs	r3, #11
 8003196:	e00d      	b.n	80031b4 <sector_mapping+0x88>
	case 8:
		return 17;
 8003198:	2311      	movs	r3, #17
 800319a:	e00b      	b.n	80031b4 <sector_mapping+0x88>
	case 9:
		return 18;
 800319c:	2312      	movs	r3, #18
 800319e:	e009      	b.n	80031b4 <sector_mapping+0x88>
	case 10:
		return 19;
 80031a0:	2313      	movs	r3, #19
 80031a2:	e007      	b.n	80031b4 <sector_mapping+0x88>
	case 11:
		return 20;
 80031a4:	2314      	movs	r3, #20
 80031a6:	e005      	b.n	80031b4 <sector_mapping+0x88>
	case 12:
		return 21;
 80031a8:	2315      	movs	r3, #21
 80031aa:	e003      	b.n	80031b4 <sector_mapping+0x88>
	case 13:
		return 22;
 80031ac:	2316      	movs	r3, #22
 80031ae:	e001      	b.n	80031b4 <sector_mapping+0x88>
	case 14:
		return 23;
 80031b0:	2317      	movs	r3, #23
 80031b2:	e7ff      	b.n	80031b4 <sector_mapping+0x88>
	}
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_GPIO_EXTI_Callback>:

/*** Touchscreen Interrupt Handler ****/
//t_irq_pin is default high. it gets driven low while the screen is touched.
//the interrupt is triggered on falling edge.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	4603      	mov	r3, r0
 80031c8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == T_IRQ_Pin) {
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d129      	bne.n	8003224 <HAL_GPIO_EXTI_Callback+0x64>

		uint32_t current_time = HAL_GetTick(); // ms since startup
 80031d0:	f000 fb10 	bl	80037f4 <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

		//perform some debouncing for interrupt pin
		if ((current_time - last_interrupt_time) > 30) {
 80031d6:	4b15      	ldr	r3, [pc, #84]	@ (800322c <HAL_GPIO_EXTI_Callback+0x6c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b1e      	cmp	r3, #30
 80031e0:	d920      	bls.n	8003224 <HAL_GPIO_EXTI_Callback+0x64>
			last_interrupt_time = current_time;
 80031e2:	4a12      	ldr	r2, [pc, #72]	@ (800322c <HAL_GPIO_EXTI_Callback+0x6c>)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6013      	str	r3, [r2, #0]

			//handle the actual interrupt below
			uint8_t currentTouchedState = HAL_GPIO_ReadPin(T_IRQ_GPIO_Port,
 80031e8:	2120      	movs	r1, #32
 80031ea:	4811      	ldr	r0, [pc, #68]	@ (8003230 <HAL_GPIO_EXTI_Callback+0x70>)
 80031ec:	f001 f804 	bl	80041f8 <HAL_GPIO_ReadPin>
 80031f0:	4603      	mov	r3, r0
 80031f2:	72fb      	strb	r3, [r7, #11]
			T_IRQ_Pin);
			if (currentTouchedState == 1) {
 80031f4:	7afb      	ldrb	r3, [r7, #11]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d102      	bne.n	8003200 <HAL_GPIO_EXTI_Callback+0x40>
				printf("high");
 80031fa:	480e      	ldr	r0, [pc, #56]	@ (8003234 <HAL_GPIO_EXTI_Callback+0x74>)
 80031fc:	f009 ff16 	bl	800d02c <iprintf>
			}
			if (currentTouchedState == 0) {
 8003200:	7afb      	ldrb	r3, [r7, #11]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d102      	bne.n	800320c <HAL_GPIO_EXTI_Callback+0x4c>
				printf("low");
 8003206:	480c      	ldr	r0, [pc, #48]	@ (8003238 <HAL_GPIO_EXTI_Callback+0x78>)
 8003208:	f009 ff10 	bl	800d02c <iprintf>
			}
			//printf("%d\n", currentTouchedState)
			if (XPT2046_TouchPressed() && !touchFlag) {
 800320c:	f7fd f9d8 	bl	80005c0 <XPT2046_TouchPressed>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d006      	beq.n	8003224 <HAL_GPIO_EXTI_Callback+0x64>
 8003216:	4b09      	ldr	r3, [pc, #36]	@ (800323c <HAL_GPIO_EXTI_Callback+0x7c>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d102      	bne.n	8003224 <HAL_GPIO_EXTI_Callback+0x64>
				touchFlag = 1;
 800321e:	4b07      	ldr	r3, [pc, #28]	@ (800323c <HAL_GPIO_EXTI_Callback+0x7c>)
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	200004f8 	.word	0x200004f8
 8003230:	40020400 	.word	0x40020400
 8003234:	0800e174 	.word	0x0800e174
 8003238:	0800e17c 	.word	0x0800e17c
 800323c:	200004fc 	.word	0x200004fc

08003240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003244:	b672      	cpsid	i
}
 8003246:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003248:	bf00      	nop
 800324a:	e7fd      	b.n	8003248 <Error_Handler+0x8>

0800324c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	607b      	str	r3, [r7, #4]
 8003256:	4b10      	ldr	r3, [pc, #64]	@ (8003298 <HAL_MspInit+0x4c>)
 8003258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325a:	4a0f      	ldr	r2, [pc, #60]	@ (8003298 <HAL_MspInit+0x4c>)
 800325c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003260:	6453      	str	r3, [r2, #68]	@ 0x44
 8003262:	4b0d      	ldr	r3, [pc, #52]	@ (8003298 <HAL_MspInit+0x4c>)
 8003264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800326a:	607b      	str	r3, [r7, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	603b      	str	r3, [r7, #0]
 8003272:	4b09      	ldr	r3, [pc, #36]	@ (8003298 <HAL_MspInit+0x4c>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	4a08      	ldr	r2, [pc, #32]	@ (8003298 <HAL_MspInit+0x4c>)
 8003278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800327c:	6413      	str	r3, [r2, #64]	@ 0x40
 800327e:	4b06      	ldr	r3, [pc, #24]	@ (8003298 <HAL_MspInit+0x4c>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40023800 	.word	0x40023800

0800329c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08a      	sub	sp, #40	@ 0x28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a4:	f107 0314 	add.w	r3, r7, #20
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	60da      	str	r2, [r3, #12]
 80032b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a19      	ldr	r2, [pc, #100]	@ (8003320 <HAL_SPI_MspInit+0x84>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d12b      	bne.n	8003316 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	4b18      	ldr	r3, [pc, #96]	@ (8003324 <HAL_SPI_MspInit+0x88>)
 80032c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c6:	4a17      	ldr	r2, [pc, #92]	@ (8003324 <HAL_SPI_MspInit+0x88>)
 80032c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80032cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ce:	4b15      	ldr	r3, [pc, #84]	@ (8003324 <HAL_SPI_MspInit+0x88>)
 80032d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	4b11      	ldr	r3, [pc, #68]	@ (8003324 <HAL_SPI_MspInit+0x88>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	4a10      	ldr	r2, [pc, #64]	@ (8003324 <HAL_SPI_MspInit+0x88>)
 80032e4:	f043 0310 	orr.w	r3, r3, #16
 80032e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003324 <HAL_SPI_MspInit+0x88>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = T_SCK_Pin|T_CS_Pin|T_MISO_Pin|T_MOSI_Pin;
 80032f6:	2374      	movs	r3, #116	@ 0x74
 80032f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fa:	2302      	movs	r3, #2
 80032fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003302:	2303      	movs	r3, #3
 8003304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003306:	2305      	movs	r3, #5
 8003308:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800330a:	f107 0314 	add.w	r3, r7, #20
 800330e:	4619      	mov	r1, r3
 8003310:	4805      	ldr	r0, [pc, #20]	@ (8003328 <HAL_SPI_MspInit+0x8c>)
 8003312:	f000 fdc5 	bl	8003ea0 <HAL_GPIO_Init>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 8003316:	bf00      	nop
 8003318:	3728      	adds	r7, #40	@ 0x28
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40013400 	.word	0x40013400
 8003324:	40023800 	.word	0x40023800
 8003328:	40021000 	.word	0x40021000

0800332c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a0b      	ldr	r2, [pc, #44]	@ (8003368 <HAL_TIM_PWM_MspInit+0x3c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d10d      	bne.n	800335a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	4b0a      	ldr	r3, [pc, #40]	@ (800336c <HAL_TIM_PWM_MspInit+0x40>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003346:	4a09      	ldr	r2, [pc, #36]	@ (800336c <HAL_TIM_PWM_MspInit+0x40>)
 8003348:	f043 0302 	orr.w	r3, r3, #2
 800334c:	6413      	str	r3, [r2, #64]	@ 0x40
 800334e:	4b07      	ldr	r3, [pc, #28]	@ (800336c <HAL_TIM_PWM_MspInit+0x40>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800335a:	bf00      	nop
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40000400 	.word	0x40000400
 800336c:	40023800 	.word	0x40023800

08003370 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003378:	f107 030c 	add.w	r3, r7, #12
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	605a      	str	r2, [r3, #4]
 8003382:	609a      	str	r2, [r3, #8]
 8003384:	60da      	str	r2, [r3, #12]
 8003386:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a12      	ldr	r2, [pc, #72]	@ (80033d8 <HAL_TIM_MspPostInit+0x68>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d11d      	bne.n	80033ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	4b11      	ldr	r3, [pc, #68]	@ (80033dc <HAL_TIM_MspPostInit+0x6c>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339a:	4a10      	ldr	r2, [pc, #64]	@ (80033dc <HAL_TIM_MspPostInit+0x6c>)
 800339c:	f043 0302 	orr.w	r3, r3, #2
 80033a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033a2:	4b0e      	ldr	r3, [pc, #56]	@ (80033dc <HAL_TIM_MspPostInit+0x6c>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BL_PWM_Pin;
 80033ae:	2310      	movs	r3, #16
 80033b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b2:	2302      	movs	r3, #2
 80033b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033be:	2302      	movs	r3, #2
 80033c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_PWM_GPIO_Port, &GPIO_InitStruct);
 80033c2:	f107 030c 	add.w	r3, r7, #12
 80033c6:	4619      	mov	r1, r3
 80033c8:	4805      	ldr	r0, [pc, #20]	@ (80033e0 <HAL_TIM_MspPostInit+0x70>)
 80033ca:	f000 fd69 	bl	8003ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80033ce:	bf00      	nop
 80033d0:	3720      	adds	r7, #32
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40000400 	.word	0x40000400
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40020400 	.word	0x40020400

080033e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08a      	sub	sp, #40	@ 0x28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ec:	f107 0314 	add.w	r3, r7, #20
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	605a      	str	r2, [r3, #4]
 80033f6:	609a      	str	r2, [r3, #8]
 80033f8:	60da      	str	r2, [r3, #12]
 80033fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a19      	ldr	r2, [pc, #100]	@ (8003468 <HAL_UART_MspInit+0x84>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d12b      	bne.n	800345e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	4b18      	ldr	r3, [pc, #96]	@ (800346c <HAL_UART_MspInit+0x88>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	4a17      	ldr	r2, [pc, #92]	@ (800346c <HAL_UART_MspInit+0x88>)
 8003410:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003414:	6413      	str	r3, [r2, #64]	@ 0x40
 8003416:	4b15      	ldr	r3, [pc, #84]	@ (800346c <HAL_UART_MspInit+0x88>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	4b11      	ldr	r3, [pc, #68]	@ (800346c <HAL_UART_MspInit+0x88>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342a:	4a10      	ldr	r2, [pc, #64]	@ (800346c <HAL_UART_MspInit+0x88>)
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	6313      	str	r3, [r2, #48]	@ 0x30
 8003432:	4b0e      	ldr	r3, [pc, #56]	@ (800346c <HAL_UART_MspInit+0x88>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800343e:	230c      	movs	r3, #12
 8003440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003442:	2302      	movs	r3, #2
 8003444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800344a:	2303      	movs	r3, #3
 800344c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800344e:	2307      	movs	r3, #7
 8003450:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003452:	f107 0314 	add.w	r3, r7, #20
 8003456:	4619      	mov	r1, r3
 8003458:	4805      	ldr	r0, [pc, #20]	@ (8003470 <HAL_UART_MspInit+0x8c>)
 800345a:	f000 fd21 	bl	8003ea0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800345e:	bf00      	nop
 8003460:	3728      	adds	r7, #40	@ 0x28
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40004400 	.word	0x40004400
 800346c:	40023800 	.word	0x40023800
 8003470:	40020000 	.word	0x40020000

08003474 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800347a:	1d3b      	adds	r3, r7, #4
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003488:	4b1c      	ldr	r3, [pc, #112]	@ (80034fc <HAL_FMC_MspInit+0x88>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d131      	bne.n	80034f4 <HAL_FMC_MspInit+0x80>
    return;
  }
  FMC_Initialized = 1;
 8003490:	4b1a      	ldr	r3, [pc, #104]	@ (80034fc <HAL_FMC_MspInit+0x88>)
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	603b      	str	r3, [r7, #0]
 800349a:	4b19      	ldr	r3, [pc, #100]	@ (8003500 <HAL_FMC_MspInit+0x8c>)
 800349c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349e:	4a18      	ldr	r2, [pc, #96]	@ (8003500 <HAL_FMC_MspInit+0x8c>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	6393      	str	r3, [r2, #56]	@ 0x38
 80034a6:	4b16      	ldr	r3, [pc, #88]	@ (8003500 <HAL_FMC_MspInit+0x8c>)
 80034a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80034b2:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80034b6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b8:	2302      	movs	r3, #2
 80034ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c0:	2303      	movs	r3, #3
 80034c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034c4:	230c      	movs	r3, #12
 80034c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034c8:	1d3b      	adds	r3, r7, #4
 80034ca:	4619      	mov	r1, r3
 80034cc:	480d      	ldr	r0, [pc, #52]	@ (8003504 <HAL_FMC_MspInit+0x90>)
 80034ce:	f000 fce7 	bl	8003ea0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80034d2:	f64c 73b3 	movw	r3, #53171	@ 0xcfb3
 80034d6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d8:	2302      	movs	r3, #2
 80034da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e0:	2303      	movs	r3, #3
 80034e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034e4:	230c      	movs	r3, #12
 80034e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034e8:	1d3b      	adds	r3, r7, #4
 80034ea:	4619      	mov	r1, r3
 80034ec:	4806      	ldr	r0, [pc, #24]	@ (8003508 <HAL_FMC_MspInit+0x94>)
 80034ee:	f000 fcd7 	bl	8003ea0 <HAL_GPIO_Init>
 80034f2:	e000      	b.n	80034f6 <HAL_FMC_MspInit+0x82>
    return;
 80034f4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	20011814 	.word	0x20011814
 8003500:	40023800 	.word	0x40023800
 8003504:	40021000 	.word	0x40021000
 8003508:	40020c00 	.word	0x40020c00

0800350c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003514:	f7ff ffae 	bl	8003474 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003518:	bf00      	nop
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003524:	bf00      	nop
 8003526:	e7fd      	b.n	8003524 <NMI_Handler+0x4>

08003528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800352c:	bf00      	nop
 800352e:	e7fd      	b.n	800352c <HardFault_Handler+0x4>

08003530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003534:	bf00      	nop
 8003536:	e7fd      	b.n	8003534 <MemManage_Handler+0x4>

08003538 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800353c:	bf00      	nop
 800353e:	e7fd      	b.n	800353c <BusFault_Handler+0x4>

08003540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003544:	bf00      	nop
 8003546:	e7fd      	b.n	8003544 <UsageFault_Handler+0x4>

08003548 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800354c:	bf00      	nop
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003556:	b480      	push	{r7}
 8003558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003568:	bf00      	nop
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003576:	f000 f929 	bl	80037cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}

0800357e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_IRQ_Pin);
 8003582:	2020      	movs	r0, #32
 8003584:	f000 fe6a 	bl	800425c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003588:	bf00      	nop
 800358a:	bd80      	pop	{r7, pc}

0800358c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003590:	4802      	ldr	r0, [pc, #8]	@ (800359c <OTG_FS_IRQHandler+0x10>)
 8003592:	f001 f95b 	bl	800484c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20011c54 	.word	0x20011c54

080035a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	e00a      	b.n	80035c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035b2:	f3af 8000 	nop.w
 80035b6:	4601      	mov	r1, r0
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	60ba      	str	r2, [r7, #8]
 80035be:	b2ca      	uxtb	r2, r1
 80035c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	3301      	adds	r3, #1
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	dbf0      	blt.n	80035b2 <_read+0x12>
  }

  return len;
 80035d0:	687b      	ldr	r3, [r7, #4]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <_close>:
  }
  return len;
}

int _close(int file)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003602:	605a      	str	r2, [r3, #4]
  return 0;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <_isatty>:

int _isatty(int file)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800361a:	2301      	movs	r3, #1
}
 800361c:	4618      	mov	r0, r3
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800364c:	4a14      	ldr	r2, [pc, #80]	@ (80036a0 <_sbrk+0x5c>)
 800364e:	4b15      	ldr	r3, [pc, #84]	@ (80036a4 <_sbrk+0x60>)
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003658:	4b13      	ldr	r3, [pc, #76]	@ (80036a8 <_sbrk+0x64>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d102      	bne.n	8003666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003660:	4b11      	ldr	r3, [pc, #68]	@ (80036a8 <_sbrk+0x64>)
 8003662:	4a12      	ldr	r2, [pc, #72]	@ (80036ac <_sbrk+0x68>)
 8003664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003666:	4b10      	ldr	r3, [pc, #64]	@ (80036a8 <_sbrk+0x64>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	429a      	cmp	r2, r3
 8003672:	d207      	bcs.n	8003684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003674:	f009 fec8 	bl	800d408 <__errno>
 8003678:	4603      	mov	r3, r0
 800367a:	220c      	movs	r2, #12
 800367c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800367e:	f04f 33ff 	mov.w	r3, #4294967295
 8003682:	e009      	b.n	8003698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003684:	4b08      	ldr	r3, [pc, #32]	@ (80036a8 <_sbrk+0x64>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800368a:	4b07      	ldr	r3, [pc, #28]	@ (80036a8 <_sbrk+0x64>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	4a05      	ldr	r2, [pc, #20]	@ (80036a8 <_sbrk+0x64>)
 8003694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003696:	68fb      	ldr	r3, [r7, #12]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20030000 	.word	0x20030000
 80036a4:	00000400 	.word	0x00000400
 80036a8:	20011818 	.word	0x20011818
 80036ac:	20012180 	.word	0x20012180

080036b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036b4:	4b06      	ldr	r3, [pc, #24]	@ (80036d0 <SystemInit+0x20>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ba:	4a05      	ldr	r2, [pc, #20]	@ (80036d0 <SystemInit+0x20>)
 80036bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036c4:	bf00      	nop
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80036d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800370c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036d8:	f7ff ffea 	bl	80036b0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036dc:	480c      	ldr	r0, [pc, #48]	@ (8003710 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036de:	490d      	ldr	r1, [pc, #52]	@ (8003714 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003718 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036e4:	e002      	b.n	80036ec <LoopCopyDataInit>

080036e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036ea:	3304      	adds	r3, #4

080036ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036f0:	d3f9      	bcc.n	80036e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036f2:	4a0a      	ldr	r2, [pc, #40]	@ (800371c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036f4:	4c0a      	ldr	r4, [pc, #40]	@ (8003720 <LoopFillZerobss+0x22>)
  movs r3, #0
 80036f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036f8:	e001      	b.n	80036fe <LoopFillZerobss>

080036fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036fc:	3204      	adds	r2, #4

080036fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003700:	d3fb      	bcc.n	80036fa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003702:	f009 fe87 	bl	800d414 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003706:	f7fd fe3d 	bl	8001384 <main>
  bx  lr    
 800370a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800370c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003714:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 8003718:	08010b50 	.word	0x08010b50
  ldr r2, =_sbss
 800371c:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 8003720:	20012180 	.word	0x20012180

08003724 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003724:	e7fe      	b.n	8003724 <ADC_IRQHandler>
	...

08003728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800372c:	4b0e      	ldr	r3, [pc, #56]	@ (8003768 <HAL_Init+0x40>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a0d      	ldr	r2, [pc, #52]	@ (8003768 <HAL_Init+0x40>)
 8003732:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003736:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003738:	4b0b      	ldr	r3, [pc, #44]	@ (8003768 <HAL_Init+0x40>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a0a      	ldr	r2, [pc, #40]	@ (8003768 <HAL_Init+0x40>)
 800373e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003742:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003744:	4b08      	ldr	r3, [pc, #32]	@ (8003768 <HAL_Init+0x40>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a07      	ldr	r2, [pc, #28]	@ (8003768 <HAL_Init+0x40>)
 800374a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800374e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003750:	2003      	movs	r0, #3
 8003752:	f000 f94f 	bl	80039f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003756:	200f      	movs	r0, #15
 8003758:	f000 f808 	bl	800376c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800375c:	f7ff fd76 	bl	800324c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40023c00 	.word	0x40023c00

0800376c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003774:	4b12      	ldr	r3, [pc, #72]	@ (80037c0 <HAL_InitTick+0x54>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4b12      	ldr	r3, [pc, #72]	@ (80037c4 <HAL_InitTick+0x58>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	4619      	mov	r1, r3
 800377e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003782:	fbb3 f3f1 	udiv	r3, r3, r1
 8003786:	fbb2 f3f3 	udiv	r3, r2, r3
 800378a:	4618      	mov	r0, r3
 800378c:	f000 f967 	bl	8003a5e <HAL_SYSTICK_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e00e      	b.n	80037b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b0f      	cmp	r3, #15
 800379e:	d80a      	bhi.n	80037b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037a0:	2200      	movs	r2, #0
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295
 80037a8:	f000 f92f 	bl	8003a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037ac:	4a06      	ldr	r2, [pc, #24]	@ (80037c8 <HAL_InitTick+0x5c>)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e000      	b.n	80037b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20000210 	.word	0x20000210
 80037c4:	20000218 	.word	0x20000218
 80037c8:	20000214 	.word	0x20000214

080037cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037d0:	4b06      	ldr	r3, [pc, #24]	@ (80037ec <HAL_IncTick+0x20>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	4b06      	ldr	r3, [pc, #24]	@ (80037f0 <HAL_IncTick+0x24>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4413      	add	r3, r2
 80037dc:	4a04      	ldr	r2, [pc, #16]	@ (80037f0 <HAL_IncTick+0x24>)
 80037de:	6013      	str	r3, [r2, #0]
}
 80037e0:	bf00      	nop
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	20000218 	.word	0x20000218
 80037f0:	2001181c 	.word	0x2001181c

080037f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return uwTick;
 80037f8:	4b03      	ldr	r3, [pc, #12]	@ (8003808 <HAL_GetTick+0x14>)
 80037fa:	681b      	ldr	r3, [r3, #0]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	2001181c 	.word	0x2001181c

0800380c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003814:	f7ff ffee 	bl	80037f4 <HAL_GetTick>
 8003818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003824:	d005      	beq.n	8003832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003826:	4b0a      	ldr	r3, [pc, #40]	@ (8003850 <HAL_Delay+0x44>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003832:	bf00      	nop
 8003834:	f7ff ffde 	bl	80037f4 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	429a      	cmp	r2, r3
 8003842:	d8f7      	bhi.n	8003834 <HAL_Delay+0x28>
  {
  }
}
 8003844:	bf00      	nop
 8003846:	bf00      	nop
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000218 	.word	0x20000218

08003854 <__NVIC_SetPriorityGrouping>:
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003864:	4b0c      	ldr	r3, [pc, #48]	@ (8003898 <__NVIC_SetPriorityGrouping+0x44>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003870:	4013      	ands	r3, r2
 8003872:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800387c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003886:	4a04      	ldr	r2, [pc, #16]	@ (8003898 <__NVIC_SetPriorityGrouping+0x44>)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	60d3      	str	r3, [r2, #12]
}
 800388c:	bf00      	nop
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <__NVIC_GetPriorityGrouping>:
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038a0:	4b04      	ldr	r3, [pc, #16]	@ (80038b4 <__NVIC_GetPriorityGrouping+0x18>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	0a1b      	lsrs	r3, r3, #8
 80038a6:	f003 0307 	and.w	r3, r3, #7
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <__NVIC_EnableIRQ>:
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	db0b      	blt.n	80038e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	f003 021f 	and.w	r2, r3, #31
 80038d0:	4907      	ldr	r1, [pc, #28]	@ (80038f0 <__NVIC_EnableIRQ+0x38>)
 80038d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	2001      	movs	r0, #1
 80038da:	fa00 f202 	lsl.w	r2, r0, r2
 80038de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	e000e100 	.word	0xe000e100

080038f4 <__NVIC_SetPriority>:
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	6039      	str	r1, [r7, #0]
 80038fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003904:	2b00      	cmp	r3, #0
 8003906:	db0a      	blt.n	800391e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	b2da      	uxtb	r2, r3
 800390c:	490c      	ldr	r1, [pc, #48]	@ (8003940 <__NVIC_SetPriority+0x4c>)
 800390e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003912:	0112      	lsls	r2, r2, #4
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	440b      	add	r3, r1
 8003918:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800391c:	e00a      	b.n	8003934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	b2da      	uxtb	r2, r3
 8003922:	4908      	ldr	r1, [pc, #32]	@ (8003944 <__NVIC_SetPriority+0x50>)
 8003924:	79fb      	ldrb	r3, [r7, #7]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	3b04      	subs	r3, #4
 800392c:	0112      	lsls	r2, r2, #4
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	440b      	add	r3, r1
 8003932:	761a      	strb	r2, [r3, #24]
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000e100 	.word	0xe000e100
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <NVIC_EncodePriority>:
{
 8003948:	b480      	push	{r7}
 800394a:	b089      	sub	sp, #36	@ 0x24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f1c3 0307 	rsb	r3, r3, #7
 8003962:	2b04      	cmp	r3, #4
 8003964:	bf28      	it	cs
 8003966:	2304      	movcs	r3, #4
 8003968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3304      	adds	r3, #4
 800396e:	2b06      	cmp	r3, #6
 8003970:	d902      	bls.n	8003978 <NVIC_EncodePriority+0x30>
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	3b03      	subs	r3, #3
 8003976:	e000      	b.n	800397a <NVIC_EncodePriority+0x32>
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800397c:	f04f 32ff 	mov.w	r2, #4294967295
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	43da      	mvns	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	401a      	ands	r2, r3
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003990:	f04f 31ff 	mov.w	r1, #4294967295
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	fa01 f303 	lsl.w	r3, r1, r3
 800399a:	43d9      	mvns	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a0:	4313      	orrs	r3, r2
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3724      	adds	r7, #36	@ 0x24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
	...

080039b0 <SysTick_Config>:
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039c0:	d301      	bcc.n	80039c6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80039c2:	2301      	movs	r3, #1
 80039c4:	e00f      	b.n	80039e6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039c6:	4a0a      	ldr	r2, [pc, #40]	@ (80039f0 <SysTick_Config+0x40>)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039ce:	210f      	movs	r1, #15
 80039d0:	f04f 30ff 	mov.w	r0, #4294967295
 80039d4:	f7ff ff8e 	bl	80038f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039d8:	4b05      	ldr	r3, [pc, #20]	@ (80039f0 <SysTick_Config+0x40>)
 80039da:	2200      	movs	r2, #0
 80039dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039de:	4b04      	ldr	r3, [pc, #16]	@ (80039f0 <SysTick_Config+0x40>)
 80039e0:	2207      	movs	r2, #7
 80039e2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	e000e010 	.word	0xe000e010

080039f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff ff29 	bl	8003854 <__NVIC_SetPriorityGrouping>
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b086      	sub	sp, #24
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	4603      	mov	r3, r0
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
 8003a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a1c:	f7ff ff3e 	bl	800389c <__NVIC_GetPriorityGrouping>
 8003a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	6978      	ldr	r0, [r7, #20]
 8003a28:	f7ff ff8e 	bl	8003948 <NVIC_EncodePriority>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a32:	4611      	mov	r1, r2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff ff5d 	bl	80038f4 <__NVIC_SetPriority>
}
 8003a3a:	bf00      	nop
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	4603      	mov	r3, r0
 8003a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff ff31 	bl	80038b8 <__NVIC_EnableIRQ>
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff ffa2 	bl	80039b0 <SysTick_Config>
 8003a6c:	4603      	mov	r3, r0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003a8a:	4b23      	ldr	r3, [pc, #140]	@ (8003b18 <HAL_FLASH_Program+0xa0>)
 8003a8c:	7e1b      	ldrb	r3, [r3, #24]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_FLASH_Program+0x1e>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e03b      	b.n	8003b0e <HAL_FLASH_Program+0x96>
 8003a96:	4b20      	ldr	r3, [pc, #128]	@ (8003b18 <HAL_FLASH_Program+0xa0>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a9c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003aa0:	f000 f870 	bl	8003b84 <FLASH_WaitForLastOperation>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8003aa8:	7dfb      	ldrb	r3, [r7, #23]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d12b      	bne.n	8003b06 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d105      	bne.n	8003ac0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003ab4:	783b      	ldrb	r3, [r7, #0]
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	68b8      	ldr	r0, [r7, #8]
 8003aba:	f000 f91b 	bl	8003cf4 <FLASH_Program_Byte>
 8003abe:	e016      	b.n	8003aee <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d105      	bne.n	8003ad2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003ac6:	883b      	ldrh	r3, [r7, #0]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	68b8      	ldr	r0, [r7, #8]
 8003acc:	f000 f8ee 	bl	8003cac <FLASH_Program_HalfWord>
 8003ad0:	e00d      	b.n	8003aee <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d105      	bne.n	8003ae4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	4619      	mov	r1, r3
 8003adc:	68b8      	ldr	r0, [r7, #8]
 8003ade:	f000 f8c3 	bl	8003c68 <FLASH_Program_Word>
 8003ae2:	e004      	b.n	8003aee <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ae8:	68b8      	ldr	r0, [r7, #8]
 8003aea:	f000 f88b 	bl	8003c04 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003aee:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003af2:	f000 f847 	bl	8003b84 <FLASH_WaitForLastOperation>
 8003af6:	4603      	mov	r3, r0
 8003af8:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8003afa:	4b08      	ldr	r3, [pc, #32]	@ (8003b1c <HAL_FLASH_Program+0xa4>)
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	4a07      	ldr	r2, [pc, #28]	@ (8003b1c <HAL_FLASH_Program+0xa4>)
 8003b00:	f023 0301 	bic.w	r3, r3, #1
 8003b04:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003b06:	4b04      	ldr	r3, [pc, #16]	@ (8003b18 <HAL_FLASH_Program+0xa0>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	761a      	strb	r2, [r3, #24]

  return status;
 8003b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	20011820 	.word	0x20011820
 8003b1c:	40023c00 	.word	0x40023c00

08003b20 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b58 <HAL_FLASH_Unlock+0x38>)
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	da0b      	bge.n	8003b4a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003b32:	4b09      	ldr	r3, [pc, #36]	@ (8003b58 <HAL_FLASH_Unlock+0x38>)
 8003b34:	4a09      	ldr	r2, [pc, #36]	@ (8003b5c <HAL_FLASH_Unlock+0x3c>)
 8003b36:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003b38:	4b07      	ldr	r3, [pc, #28]	@ (8003b58 <HAL_FLASH_Unlock+0x38>)
 8003b3a:	4a09      	ldr	r2, [pc, #36]	@ (8003b60 <HAL_FLASH_Unlock+0x40>)
 8003b3c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003b3e:	4b06      	ldr	r3, [pc, #24]	@ (8003b58 <HAL_FLASH_Unlock+0x38>)
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	da01      	bge.n	8003b4a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	40023c00 	.word	0x40023c00
 8003b5c:	45670123 	.word	0x45670123
 8003b60:	cdef89ab 	.word	0xcdef89ab

08003b64 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003b68:	4b05      	ldr	r3, [pc, #20]	@ (8003b80 <HAL_FLASH_Lock+0x1c>)
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	4a04      	ldr	r2, [pc, #16]	@ (8003b80 <HAL_FLASH_Lock+0x1c>)
 8003b6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b72:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	40023c00 	.word	0x40023c00

08003b84 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003b90:	4b1a      	ldr	r3, [pc, #104]	@ (8003bfc <FLASH_WaitForLastOperation+0x78>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003b96:	f7ff fe2d 	bl	80037f4 <HAL_GetTick>
 8003b9a:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8003b9c:	e010      	b.n	8003bc0 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba4:	d00c      	beq.n	8003bc0 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d007      	beq.n	8003bbc <FLASH_WaitForLastOperation+0x38>
 8003bac:	f7ff fe22 	bl	80037f4 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d201      	bcs.n	8003bc0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e019      	b.n	8003bf4 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8003bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c00 <FLASH_WaitForLastOperation+0x7c>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e8      	bne.n	8003b9e <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003c00 <FLASH_WaitForLastOperation+0x7c>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003bd8:	4b09      	ldr	r3, [pc, #36]	@ (8003c00 <FLASH_WaitForLastOperation+0x7c>)
 8003bda:	2201      	movs	r2, #1
 8003bdc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003bde:	4b08      	ldr	r3, [pc, #32]	@ (8003c00 <FLASH_WaitForLastOperation+0x7c>)
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003bea:	f000 f8a5 	bl	8003d38 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0

}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20011820 	.word	0x20011820
 8003c00:	40023c00 	.word	0x40023c00

08003c04 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c10:	4b14      	ldr	r3, [pc, #80]	@ (8003c64 <FLASH_Program_DoubleWord+0x60>)
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	4a13      	ldr	r2, [pc, #76]	@ (8003c64 <FLASH_Program_DoubleWord+0x60>)
 8003c16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003c1c:	4b11      	ldr	r3, [pc, #68]	@ (8003c64 <FLASH_Program_DoubleWord+0x60>)
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	4a10      	ldr	r2, [pc, #64]	@ (8003c64 <FLASH_Program_DoubleWord+0x60>)
 8003c22:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003c26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003c28:	4b0e      	ldr	r3, [pc, #56]	@ (8003c64 <FLASH_Program_DoubleWord+0x60>)
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003c64 <FLASH_Program_DoubleWord+0x60>)
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003c3a:	f3bf 8f6f 	isb	sy
}
 8003c3e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8003c40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	000a      	movs	r2, r1
 8003c4e:	2300      	movs	r3, #0
 8003c50:	68f9      	ldr	r1, [r7, #12]
 8003c52:	3104      	adds	r1, #4
 8003c54:	4613      	mov	r3, r2
 8003c56:	600b      	str	r3, [r1, #0]
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	40023c00 	.word	0x40023c00

08003c68 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca8 <FLASH_Program_Word+0x40>)
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	4a0c      	ldr	r2, [pc, #48]	@ (8003ca8 <FLASH_Program_Word+0x40>)
 8003c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c7c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca8 <FLASH_Program_Word+0x40>)
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	4a09      	ldr	r2, [pc, #36]	@ (8003ca8 <FLASH_Program_Word+0x40>)
 8003c84:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c88:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003c8a:	4b07      	ldr	r3, [pc, #28]	@ (8003ca8 <FLASH_Program_Word+0x40>)
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	4a06      	ldr	r2, [pc, #24]	@ (8003ca8 <FLASH_Program_Word+0x40>)
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	601a      	str	r2, [r3, #0]
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	40023c00 	.word	0x40023c00

08003cac <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf0 <FLASH_Program_HalfWord+0x44>)
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	4a0c      	ldr	r2, [pc, #48]	@ (8003cf0 <FLASH_Program_HalfWord+0x44>)
 8003cbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf0 <FLASH_Program_HalfWord+0x44>)
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	4a09      	ldr	r2, [pc, #36]	@ (8003cf0 <FLASH_Program_HalfWord+0x44>)
 8003cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003cd0:	4b07      	ldr	r3, [pc, #28]	@ (8003cf0 <FLASH_Program_HalfWord+0x44>)
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	4a06      	ldr	r2, [pc, #24]	@ (8003cf0 <FLASH_Program_HalfWord+0x44>)
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	887a      	ldrh	r2, [r7, #2]
 8003ce0:	801a      	strh	r2, [r3, #0]
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40023c00 	.word	0x40023c00

08003cf4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003d00:	4b0c      	ldr	r3, [pc, #48]	@ (8003d34 <FLASH_Program_Byte+0x40>)
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	4a0b      	ldr	r2, [pc, #44]	@ (8003d34 <FLASH_Program_Byte+0x40>)
 8003d06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003d0c:	4b09      	ldr	r3, [pc, #36]	@ (8003d34 <FLASH_Program_Byte+0x40>)
 8003d0e:	4a09      	ldr	r2, [pc, #36]	@ (8003d34 <FLASH_Program_Byte+0x40>)
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003d14:	4b07      	ldr	r3, [pc, #28]	@ (8003d34 <FLASH_Program_Byte+0x40>)
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	4a06      	ldr	r2, [pc, #24]	@ (8003d34 <FLASH_Program_Byte+0x40>)
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	78fa      	ldrb	r2, [r7, #3]
 8003d24:	701a      	strb	r2, [r3, #0]
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40023c00 	.word	0x40023c00

08003d38 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003d3c:	4b2f      	ldr	r3, [pc, #188]	@ (8003dfc <FLASH_SetErrorCode+0xc4>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f003 0310 	and.w	r3, r3, #16
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003d48:	4b2d      	ldr	r3, [pc, #180]	@ (8003e00 <FLASH_SetErrorCode+0xc8>)
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	f043 0310 	orr.w	r3, r3, #16
 8003d50:	4a2b      	ldr	r2, [pc, #172]	@ (8003e00 <FLASH_SetErrorCode+0xc8>)
 8003d52:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003d54:	4b29      	ldr	r3, [pc, #164]	@ (8003dfc <FLASH_SetErrorCode+0xc4>)
 8003d56:	2210      	movs	r2, #16
 8003d58:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003d5a:	4b28      	ldr	r3, [pc, #160]	@ (8003dfc <FLASH_SetErrorCode+0xc4>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003d66:	4b26      	ldr	r3, [pc, #152]	@ (8003e00 <FLASH_SetErrorCode+0xc8>)
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	f043 0308 	orr.w	r3, r3, #8
 8003d6e:	4a24      	ldr	r2, [pc, #144]	@ (8003e00 <FLASH_SetErrorCode+0xc8>)
 8003d70:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003d72:	4b22      	ldr	r3, [pc, #136]	@ (8003dfc <FLASH_SetErrorCode+0xc4>)
 8003d74:	2220      	movs	r2, #32
 8003d76:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003d78:	4b20      	ldr	r3, [pc, #128]	@ (8003dfc <FLASH_SetErrorCode+0xc4>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003d84:	4b1e      	ldr	r3, [pc, #120]	@ (8003e00 <FLASH_SetErrorCode+0xc8>)
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	f043 0304 	orr.w	r3, r3, #4
 8003d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e00 <FLASH_SetErrorCode+0xc8>)
 8003d8e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003d90:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <FLASH_SetErrorCode+0xc4>)
 8003d92:	2240      	movs	r2, #64	@ 0x40
 8003d94:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003d96:	4b19      	ldr	r3, [pc, #100]	@ (8003dfc <FLASH_SetErrorCode+0xc4>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d008      	beq.n	8003db4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003da2:	4b17      	ldr	r3, [pc, #92]	@ (8003e00 <FLASH_SetErrorCode+0xc8>)
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f043 0302 	orr.w	r3, r3, #2
 8003daa:	4a15      	ldr	r2, [pc, #84]	@ (8003e00 <FLASH_SetErrorCode+0xc8>)
 8003dac:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003dae:	4b13      	ldr	r3, [pc, #76]	@ (8003dfc <FLASH_SetErrorCode+0xc4>)
 8003db0:	2280      	movs	r2, #128	@ 0x80
 8003db2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003db4:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <FLASH_SetErrorCode+0xc4>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d009      	beq.n	8003dd4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e00 <FLASH_SetErrorCode+0xc8>)
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8003e00 <FLASH_SetErrorCode+0xc8>)
 8003dca:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <FLASH_SetErrorCode+0xc4>)
 8003dce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003dd2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003dd4:	4b09      	ldr	r3, [pc, #36]	@ (8003dfc <FLASH_SetErrorCode+0xc4>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d008      	beq.n	8003df2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003de0:	4b07      	ldr	r3, [pc, #28]	@ (8003e00 <FLASH_SetErrorCode+0xc8>)
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f043 0320 	orr.w	r3, r3, #32
 8003de8:	4a05      	ldr	r2, [pc, #20]	@ (8003e00 <FLASH_SetErrorCode+0xc8>)
 8003dea:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003dec:	4b03      	ldr	r3, [pc, #12]	@ (8003dfc <FLASH_SetErrorCode+0xc4>)
 8003dee:	2202      	movs	r2, #2
 8003df0:	60da      	str	r2, [r3, #12]
  }
}
 8003df2:	bf00      	nop
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	40023c00 	.word	0x40023c00
 8003e00:	20011820 	.word	0x20011820

08003e04 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003e14:	78fb      	ldrb	r3, [r7, #3]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d102      	bne.n	8003e20 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	e010      	b.n	8003e42 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d103      	bne.n	8003e2e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003e26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	e009      	b.n	8003e42 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d103      	bne.n	8003e3c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003e34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	e002      	b.n	8003e42 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003e3c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003e40:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b0b      	cmp	r3, #11
 8003e46:	d902      	bls.n	8003e4e <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003e4e:	4b13      	ldr	r3, [pc, #76]	@ (8003e9c <FLASH_Erase_Sector+0x98>)
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	4a12      	ldr	r2, [pc, #72]	@ (8003e9c <FLASH_Erase_Sector+0x98>)
 8003e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e58:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003e5a:	4b10      	ldr	r3, [pc, #64]	@ (8003e9c <FLASH_Erase_Sector+0x98>)
 8003e5c:	691a      	ldr	r2, [r3, #16]
 8003e5e:	490f      	ldr	r1, [pc, #60]	@ (8003e9c <FLASH_Erase_Sector+0x98>)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003e66:	4b0d      	ldr	r3, [pc, #52]	@ (8003e9c <FLASH_Erase_Sector+0x98>)
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8003e9c <FLASH_Erase_Sector+0x98>)
 8003e6c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003e70:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003e72:	4b0a      	ldr	r3, [pc, #40]	@ (8003e9c <FLASH_Erase_Sector+0x98>)
 8003e74:	691a      	ldr	r2, [r3, #16]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	4a07      	ldr	r2, [pc, #28]	@ (8003e9c <FLASH_Erase_Sector+0x98>)
 8003e7e:	f043 0302 	orr.w	r3, r3, #2
 8003e82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003e84:	4b05      	ldr	r3, [pc, #20]	@ (8003e9c <FLASH_Erase_Sector+0x98>)
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	4a04      	ldr	r2, [pc, #16]	@ (8003e9c <FLASH_Erase_Sector+0x98>)
 8003e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e8e:	6113      	str	r3, [r2, #16]
}
 8003e90:	bf00      	nop
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	40023c00 	.word	0x40023c00

08003ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b089      	sub	sp, #36	@ 0x24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
 8003eba:	e177      	b.n	80041ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	f040 8166 	bne.w	80041a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d005      	beq.n	8003ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d130      	bne.n	8003f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	2203      	movs	r2, #3
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4013      	ands	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f28:	2201      	movs	r2, #1
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4013      	ands	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	091b      	lsrs	r3, r3, #4
 8003f3e:	f003 0201 	and.w	r2, r3, #1
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d017      	beq.n	8003f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	2203      	movs	r2, #3
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	43db      	mvns	r3, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4013      	ands	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d123      	bne.n	8003fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	08da      	lsrs	r2, r3, #3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3208      	adds	r2, #8
 8003fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	220f      	movs	r2, #15
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	08da      	lsrs	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3208      	adds	r2, #8
 8003fde:	69b9      	ldr	r1, [r7, #24]
 8003fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	2203      	movs	r2, #3
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 0203 	and.w	r2, r3, #3
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	4313      	orrs	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80c0 	beq.w	80041a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	4b66      	ldr	r3, [pc, #408]	@ (80041c4 <HAL_GPIO_Init+0x324>)
 800402c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402e:	4a65      	ldr	r2, [pc, #404]	@ (80041c4 <HAL_GPIO_Init+0x324>)
 8004030:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004034:	6453      	str	r3, [r2, #68]	@ 0x44
 8004036:	4b63      	ldr	r3, [pc, #396]	@ (80041c4 <HAL_GPIO_Init+0x324>)
 8004038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004042:	4a61      	ldr	r2, [pc, #388]	@ (80041c8 <HAL_GPIO_Init+0x328>)
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	089b      	lsrs	r3, r3, #2
 8004048:	3302      	adds	r3, #2
 800404a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800404e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	220f      	movs	r2, #15
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43db      	mvns	r3, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4013      	ands	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a58      	ldr	r2, [pc, #352]	@ (80041cc <HAL_GPIO_Init+0x32c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d037      	beq.n	80040de <HAL_GPIO_Init+0x23e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a57      	ldr	r2, [pc, #348]	@ (80041d0 <HAL_GPIO_Init+0x330>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d031      	beq.n	80040da <HAL_GPIO_Init+0x23a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a56      	ldr	r2, [pc, #344]	@ (80041d4 <HAL_GPIO_Init+0x334>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d02b      	beq.n	80040d6 <HAL_GPIO_Init+0x236>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a55      	ldr	r2, [pc, #340]	@ (80041d8 <HAL_GPIO_Init+0x338>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d025      	beq.n	80040d2 <HAL_GPIO_Init+0x232>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a54      	ldr	r2, [pc, #336]	@ (80041dc <HAL_GPIO_Init+0x33c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d01f      	beq.n	80040ce <HAL_GPIO_Init+0x22e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a53      	ldr	r2, [pc, #332]	@ (80041e0 <HAL_GPIO_Init+0x340>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d019      	beq.n	80040ca <HAL_GPIO_Init+0x22a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a52      	ldr	r2, [pc, #328]	@ (80041e4 <HAL_GPIO_Init+0x344>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d013      	beq.n	80040c6 <HAL_GPIO_Init+0x226>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a51      	ldr	r2, [pc, #324]	@ (80041e8 <HAL_GPIO_Init+0x348>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00d      	beq.n	80040c2 <HAL_GPIO_Init+0x222>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a50      	ldr	r2, [pc, #320]	@ (80041ec <HAL_GPIO_Init+0x34c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d007      	beq.n	80040be <HAL_GPIO_Init+0x21e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a4f      	ldr	r2, [pc, #316]	@ (80041f0 <HAL_GPIO_Init+0x350>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d101      	bne.n	80040ba <HAL_GPIO_Init+0x21a>
 80040b6:	2309      	movs	r3, #9
 80040b8:	e012      	b.n	80040e0 <HAL_GPIO_Init+0x240>
 80040ba:	230a      	movs	r3, #10
 80040bc:	e010      	b.n	80040e0 <HAL_GPIO_Init+0x240>
 80040be:	2308      	movs	r3, #8
 80040c0:	e00e      	b.n	80040e0 <HAL_GPIO_Init+0x240>
 80040c2:	2307      	movs	r3, #7
 80040c4:	e00c      	b.n	80040e0 <HAL_GPIO_Init+0x240>
 80040c6:	2306      	movs	r3, #6
 80040c8:	e00a      	b.n	80040e0 <HAL_GPIO_Init+0x240>
 80040ca:	2305      	movs	r3, #5
 80040cc:	e008      	b.n	80040e0 <HAL_GPIO_Init+0x240>
 80040ce:	2304      	movs	r3, #4
 80040d0:	e006      	b.n	80040e0 <HAL_GPIO_Init+0x240>
 80040d2:	2303      	movs	r3, #3
 80040d4:	e004      	b.n	80040e0 <HAL_GPIO_Init+0x240>
 80040d6:	2302      	movs	r3, #2
 80040d8:	e002      	b.n	80040e0 <HAL_GPIO_Init+0x240>
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <HAL_GPIO_Init+0x240>
 80040de:	2300      	movs	r3, #0
 80040e0:	69fa      	ldr	r2, [r7, #28]
 80040e2:	f002 0203 	and.w	r2, r2, #3
 80040e6:	0092      	lsls	r2, r2, #2
 80040e8:	4093      	lsls	r3, r2
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040f0:	4935      	ldr	r1, [pc, #212]	@ (80041c8 <HAL_GPIO_Init+0x328>)
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	089b      	lsrs	r3, r3, #2
 80040f6:	3302      	adds	r3, #2
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040fe:	4b3d      	ldr	r3, [pc, #244]	@ (80041f4 <HAL_GPIO_Init+0x354>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	43db      	mvns	r3, r3
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	4013      	ands	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004122:	4a34      	ldr	r2, [pc, #208]	@ (80041f4 <HAL_GPIO_Init+0x354>)
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004128:	4b32      	ldr	r3, [pc, #200]	@ (80041f4 <HAL_GPIO_Init+0x354>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	43db      	mvns	r3, r3
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4013      	ands	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d003      	beq.n	800414c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800414c:	4a29      	ldr	r2, [pc, #164]	@ (80041f4 <HAL_GPIO_Init+0x354>)
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004152:	4b28      	ldr	r3, [pc, #160]	@ (80041f4 <HAL_GPIO_Init+0x354>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	43db      	mvns	r3, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	4013      	ands	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	4313      	orrs	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004176:	4a1f      	ldr	r2, [pc, #124]	@ (80041f4 <HAL_GPIO_Init+0x354>)
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800417c:	4b1d      	ldr	r3, [pc, #116]	@ (80041f4 <HAL_GPIO_Init+0x354>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	43db      	mvns	r3, r3
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	4013      	ands	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041a0:	4a14      	ldr	r2, [pc, #80]	@ (80041f4 <HAL_GPIO_Init+0x354>)
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	3301      	adds	r3, #1
 80041aa:	61fb      	str	r3, [r7, #28]
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	2b0f      	cmp	r3, #15
 80041b0:	f67f ae84 	bls.w	8003ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041b4:	bf00      	nop
 80041b6:	bf00      	nop
 80041b8:	3724      	adds	r7, #36	@ 0x24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40023800 	.word	0x40023800
 80041c8:	40013800 	.word	0x40013800
 80041cc:	40020000 	.word	0x40020000
 80041d0:	40020400 	.word	0x40020400
 80041d4:	40020800 	.word	0x40020800
 80041d8:	40020c00 	.word	0x40020c00
 80041dc:	40021000 	.word	0x40021000
 80041e0:	40021400 	.word	0x40021400
 80041e4:	40021800 	.word	0x40021800
 80041e8:	40021c00 	.word	0x40021c00
 80041ec:	40022000 	.word	0x40022000
 80041f0:	40022400 	.word	0x40022400
 80041f4:	40013c00 	.word	0x40013c00

080041f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	887b      	ldrh	r3, [r7, #2]
 800420a:	4013      	ands	r3, r2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
 8004214:	e001      	b.n	800421a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004216:	2300      	movs	r3, #0
 8004218:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800421a:	7bfb      	ldrb	r3, [r7, #15]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	807b      	strh	r3, [r7, #2]
 8004234:	4613      	mov	r3, r2
 8004236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004238:	787b      	ldrb	r3, [r7, #1]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800423e:	887a      	ldrh	r2, [r7, #2]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004244:	e003      	b.n	800424e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004246:	887b      	ldrh	r3, [r7, #2]
 8004248:	041a      	lsls	r2, r3, #16
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	619a      	str	r2, [r3, #24]
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
	...

0800425c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	4603      	mov	r3, r0
 8004264:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004266:	4b08      	ldr	r3, [pc, #32]	@ (8004288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004268:	695a      	ldr	r2, [r3, #20]
 800426a:	88fb      	ldrh	r3, [r7, #6]
 800426c:	4013      	ands	r3, r2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d006      	beq.n	8004280 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004272:	4a05      	ldr	r2, [pc, #20]	@ (8004288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004274:	88fb      	ldrh	r3, [r7, #6]
 8004276:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004278:	88fb      	ldrh	r3, [r7, #6]
 800427a:	4618      	mov	r0, r3
 800427c:	f7fe ffa0 	bl	80031c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40013c00 	.word	0x40013c00

0800428c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af02      	add	r7, sp, #8
 8004292:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e059      	b.n	8004352 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d106      	bne.n	80042be <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f008 fa99 	bl	800c7f0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2203      	movs	r2, #3
 80042c2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042cc:	d102      	bne.n	80042d4 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f004 fb5a 	bl	8008992 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	7c1a      	ldrb	r2, [r3, #16]
 80042e6:	f88d 2000 	strb.w	r2, [sp]
 80042ea:	3304      	adds	r3, #4
 80042ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042ee:	f004 fadb 	bl	80088a8 <USB_CoreInit>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e026      	b.n	8004352 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2101      	movs	r1, #1
 800430a:	4618      	mov	r0, r3
 800430c:	f004 fb52 	bl	80089b4 <USB_SetCurrentMode>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2202      	movs	r2, #2
 800431a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e017      	b.n	8004352 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	7c1a      	ldrb	r2, [r3, #16]
 800432a:	f88d 2000 	strb.w	r2, [sp]
 800432e:	3304      	adds	r3, #4
 8004330:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004332:	f004 fcf5 	bl	8008d20 <USB_HostInit>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e004      	b.n	8004352 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800435a:	b590      	push	{r4, r7, lr}
 800435c:	b08b      	sub	sp, #44	@ 0x2c
 800435e:	af04      	add	r7, sp, #16
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	4608      	mov	r0, r1
 8004364:	4611      	mov	r1, r2
 8004366:	461a      	mov	r2, r3
 8004368:	4603      	mov	r3, r0
 800436a:	70fb      	strb	r3, [r7, #3]
 800436c:	460b      	mov	r3, r1
 800436e:	70bb      	strb	r3, [r7, #2]
 8004370:	4613      	mov	r3, r2
 8004372:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8004374:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004376:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_HCD_HC_Init+0x2c>
 8004382:	2302      	movs	r3, #2
 8004384:	e09d      	b.n	80044c2 <HAL_HCD_HC_Init+0x168>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800438e:	78fa      	ldrb	r2, [r7, #3]
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	4613      	mov	r3, r2
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	1a9b      	subs	r3, r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	3319      	adds	r3, #25
 800439e:	2200      	movs	r2, #0
 80043a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80043a2:	78fa      	ldrb	r2, [r7, #3]
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	3314      	adds	r3, #20
 80043b2:	787a      	ldrb	r2, [r7, #1]
 80043b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80043b6:	78fa      	ldrb	r2, [r7, #3]
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	1a9b      	subs	r3, r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	3315      	adds	r3, #21
 80043c6:	78fa      	ldrb	r2, [r7, #3]
 80043c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80043ca:	78fa      	ldrb	r2, [r7, #3]
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	1a9b      	subs	r3, r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	3326      	adds	r3, #38	@ 0x26
 80043da:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80043de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80043e0:	78fa      	ldrb	r2, [r7, #3]
 80043e2:	78bb      	ldrb	r3, [r7, #2]
 80043e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043e8:	b2d8      	uxtb	r0, r3
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	3316      	adds	r3, #22
 80043f8:	4602      	mov	r2, r0
 80043fa:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	4619      	mov	r1, r3
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 fbc7 	bl	8004b94 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8004406:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800440a:	2b00      	cmp	r3, #0
 800440c:	da0a      	bge.n	8004424 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800440e:	78fa      	ldrb	r2, [r7, #3]
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	1a9b      	subs	r3, r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	440b      	add	r3, r1
 800441c:	3317      	adds	r3, #23
 800441e:	2201      	movs	r2, #1
 8004420:	701a      	strb	r2, [r3, #0]
 8004422:	e009      	b.n	8004438 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004424:	78fa      	ldrb	r2, [r7, #3]
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	3317      	adds	r3, #23
 8004434:	2200      	movs	r2, #0
 8004436:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f004 fdd3 	bl	8008fe8 <USB_GetHostSpeed>
 8004442:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8004444:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004448:	2b01      	cmp	r3, #1
 800444a:	d10b      	bne.n	8004464 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800444c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004450:	2b01      	cmp	r3, #1
 8004452:	d107      	bne.n	8004464 <HAL_HCD_HC_Init+0x10a>
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d104      	bne.n	8004464 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2bbc      	cmp	r3, #188	@ 0xbc
 800445e:	d901      	bls.n	8004464 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8004460:	23bc      	movs	r3, #188	@ 0xbc
 8004462:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8004464:	78fa      	ldrb	r2, [r7, #3]
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	1a9b      	subs	r3, r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	3318      	adds	r3, #24
 8004474:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004478:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800447a:	78fa      	ldrb	r2, [r7, #3]
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	b298      	uxth	r0, r3
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	4613      	mov	r3, r2
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	3328      	adds	r3, #40	@ 0x28
 800448e:	4602      	mov	r2, r0
 8004490:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6818      	ldr	r0, [r3, #0]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	b29b      	uxth	r3, r3
 800449a:	787c      	ldrb	r4, [r7, #1]
 800449c:	78ba      	ldrb	r2, [r7, #2]
 800449e:	78f9      	ldrb	r1, [r7, #3]
 80044a0:	9302      	str	r3, [sp, #8]
 80044a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80044a6:	9301      	str	r3, [sp, #4]
 80044a8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	4623      	mov	r3, r4
 80044b0:	f004 fdc2 	bl	8009038 <USB_HC_Init>
 80044b4:	4603      	mov	r3, r0
 80044b6:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	371c      	adds	r7, #28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd90      	pop	{r4, r7, pc}

080044ca <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	460b      	mov	r3, r1
 80044d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_HCD_HC_Halt+0x1e>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e00f      	b.n	8004508 <HAL_HCD_HC_Halt+0x3e>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	78fa      	ldrb	r2, [r7, #3]
 80044f6:	4611      	mov	r1, r2
 80044f8:	4618      	mov	r0, r3
 80044fa:	f005 f954 	bl	80097a6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004506:	7bfb      	ldrb	r3, [r7, #15]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	4608      	mov	r0, r1
 800451a:	4611      	mov	r1, r2
 800451c:	461a      	mov	r2, r3
 800451e:	4603      	mov	r3, r0
 8004520:	70fb      	strb	r3, [r7, #3]
 8004522:	460b      	mov	r3, r1
 8004524:	70bb      	strb	r3, [r7, #2]
 8004526:	4613      	mov	r3, r2
 8004528:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800452a:	78fa      	ldrb	r2, [r7, #3]
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	4613      	mov	r3, r2
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	1a9b      	subs	r3, r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	440b      	add	r3, r1
 8004538:	3317      	adds	r3, #23
 800453a:	78ba      	ldrb	r2, [r7, #2]
 800453c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800453e:	78fa      	ldrb	r2, [r7, #3]
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	4613      	mov	r3, r2
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	440b      	add	r3, r1
 800454c:	3326      	adds	r3, #38	@ 0x26
 800454e:	787a      	ldrb	r2, [r7, #1]
 8004550:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004552:	7c3b      	ldrb	r3, [r7, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d114      	bne.n	8004582 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004558:	78fa      	ldrb	r2, [r7, #3]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	332a      	adds	r3, #42	@ 0x2a
 8004568:	2203      	movs	r2, #3
 800456a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800456c:	78fa      	ldrb	r2, [r7, #3]
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	3319      	adds	r3, #25
 800457c:	7f3a      	ldrb	r2, [r7, #28]
 800457e:	701a      	strb	r2, [r3, #0]
 8004580:	e009      	b.n	8004596 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004582:	78fa      	ldrb	r2, [r7, #3]
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	4613      	mov	r3, r2
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	1a9b      	subs	r3, r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	440b      	add	r3, r1
 8004590:	332a      	adds	r3, #42	@ 0x2a
 8004592:	2202      	movs	r2, #2
 8004594:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004596:	787b      	ldrb	r3, [r7, #1]
 8004598:	2b03      	cmp	r3, #3
 800459a:	f200 8102 	bhi.w	80047a2 <HAL_HCD_HC_SubmitRequest+0x292>
 800459e:	a201      	add	r2, pc, #4	@ (adr r2, 80045a4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80045a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a4:	080045b5 	.word	0x080045b5
 80045a8:	0800478d 	.word	0x0800478d
 80045ac:	08004679 	.word	0x08004679
 80045b0:	08004703 	.word	0x08004703
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80045b4:	7c3b      	ldrb	r3, [r7, #16]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	f040 80f5 	bne.w	80047a6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80045bc:	78bb      	ldrb	r3, [r7, #2]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d12d      	bne.n	800461e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80045c2:	8b3b      	ldrh	r3, [r7, #24]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d109      	bne.n	80045dc <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80045c8:	78fa      	ldrb	r2, [r7, #3]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	1a9b      	subs	r3, r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	333d      	adds	r3, #61	@ 0x3d
 80045d8:	2201      	movs	r2, #1
 80045da:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80045dc:	78fa      	ldrb	r2, [r7, #3]
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	333d      	adds	r3, #61	@ 0x3d
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10a      	bne.n	8004608 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045f2:	78fa      	ldrb	r2, [r7, #3]
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	332a      	adds	r3, #42	@ 0x2a
 8004602:	2200      	movs	r2, #0
 8004604:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8004606:	e0ce      	b.n	80047a6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004608:	78fa      	ldrb	r2, [r7, #3]
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	1a9b      	subs	r3, r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	332a      	adds	r3, #42	@ 0x2a
 8004618:	2202      	movs	r2, #2
 800461a:	701a      	strb	r2, [r3, #0]
      break;
 800461c:	e0c3      	b.n	80047a6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800461e:	78fa      	ldrb	r2, [r7, #3]
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	4613      	mov	r3, r2
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	1a9b      	subs	r3, r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	440b      	add	r3, r1
 800462c:	331a      	adds	r3, #26
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b01      	cmp	r3, #1
 8004632:	f040 80b8 	bne.w	80047a6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8004636:	78fa      	ldrb	r2, [r7, #3]
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	1a9b      	subs	r3, r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	333c      	adds	r3, #60	@ 0x3c
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800464c:	78fa      	ldrb	r2, [r7, #3]
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	4613      	mov	r3, r2
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	1a9b      	subs	r3, r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	332a      	adds	r3, #42	@ 0x2a
 800465c:	2200      	movs	r2, #0
 800465e:	701a      	strb	r2, [r3, #0]
      break;
 8004660:	e0a1      	b.n	80047a6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004662:	78fa      	ldrb	r2, [r7, #3]
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	1a9b      	subs	r3, r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	440b      	add	r3, r1
 8004670:	332a      	adds	r3, #42	@ 0x2a
 8004672:	2202      	movs	r2, #2
 8004674:	701a      	strb	r2, [r3, #0]
      break;
 8004676:	e096      	b.n	80047a6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004678:	78bb      	ldrb	r3, [r7, #2]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d120      	bne.n	80046c0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800467e:	78fa      	ldrb	r2, [r7, #3]
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	4613      	mov	r3, r2
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	1a9b      	subs	r3, r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	333d      	adds	r3, #61	@ 0x3d
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004694:	78fa      	ldrb	r2, [r7, #3]
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	4613      	mov	r3, r2
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	332a      	adds	r3, #42	@ 0x2a
 80046a4:	2200      	movs	r2, #0
 80046a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80046a8:	e07e      	b.n	80047a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80046aa:	78fa      	ldrb	r2, [r7, #3]
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	1a9b      	subs	r3, r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	440b      	add	r3, r1
 80046b8:	332a      	adds	r3, #42	@ 0x2a
 80046ba:	2202      	movs	r2, #2
 80046bc:	701a      	strb	r2, [r3, #0]
      break;
 80046be:	e073      	b.n	80047a8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80046c0:	78fa      	ldrb	r2, [r7, #3]
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	4613      	mov	r3, r2
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	333c      	adds	r3, #60	@ 0x3c
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046d6:	78fa      	ldrb	r2, [r7, #3]
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	1a9b      	subs	r3, r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	332a      	adds	r3, #42	@ 0x2a
 80046e6:	2200      	movs	r2, #0
 80046e8:	701a      	strb	r2, [r3, #0]
      break;
 80046ea:	e05d      	b.n	80047a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80046ec:	78fa      	ldrb	r2, [r7, #3]
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	4613      	mov	r3, r2
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	332a      	adds	r3, #42	@ 0x2a
 80046fc:	2202      	movs	r2, #2
 80046fe:	701a      	strb	r2, [r3, #0]
      break;
 8004700:	e052      	b.n	80047a8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004702:	78bb      	ldrb	r3, [r7, #2]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d120      	bne.n	800474a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004708:	78fa      	ldrb	r2, [r7, #3]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	333d      	adds	r3, #61	@ 0x3d
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10a      	bne.n	8004734 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800471e:	78fa      	ldrb	r2, [r7, #3]
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	1a9b      	subs	r3, r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	332a      	adds	r3, #42	@ 0x2a
 800472e:	2200      	movs	r2, #0
 8004730:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004732:	e039      	b.n	80047a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004734:	78fa      	ldrb	r2, [r7, #3]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	1a9b      	subs	r3, r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	332a      	adds	r3, #42	@ 0x2a
 8004744:	2202      	movs	r2, #2
 8004746:	701a      	strb	r2, [r3, #0]
      break;
 8004748:	e02e      	b.n	80047a8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800474a:	78fa      	ldrb	r2, [r7, #3]
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	4613      	mov	r3, r2
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	1a9b      	subs	r3, r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	440b      	add	r3, r1
 8004758:	333c      	adds	r3, #60	@ 0x3c
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10a      	bne.n	8004776 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004760:	78fa      	ldrb	r2, [r7, #3]
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	4613      	mov	r3, r2
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	1a9b      	subs	r3, r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	332a      	adds	r3, #42	@ 0x2a
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]
      break;
 8004774:	e018      	b.n	80047a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004776:	78fa      	ldrb	r2, [r7, #3]
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	440b      	add	r3, r1
 8004784:	332a      	adds	r3, #42	@ 0x2a
 8004786:	2202      	movs	r2, #2
 8004788:	701a      	strb	r2, [r3, #0]
      break;
 800478a:	e00d      	b.n	80047a8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800478c:	78fa      	ldrb	r2, [r7, #3]
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	1a9b      	subs	r3, r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	332a      	adds	r3, #42	@ 0x2a
 800479c:	2200      	movs	r2, #0
 800479e:	701a      	strb	r2, [r3, #0]
      break;
 80047a0:	e002      	b.n	80047a8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80047a2:	bf00      	nop
 80047a4:	e000      	b.n	80047a8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80047a6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80047a8:	78fa      	ldrb	r2, [r7, #3]
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	4613      	mov	r3, r2
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	1a9b      	subs	r3, r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	332c      	adds	r3, #44	@ 0x2c
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80047bc:	78fa      	ldrb	r2, [r7, #3]
 80047be:	8b39      	ldrh	r1, [r7, #24]
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4403      	add	r3, r0
 80047cc:	3334      	adds	r3, #52	@ 0x34
 80047ce:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80047d0:	78fa      	ldrb	r2, [r7, #3]
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	334c      	adds	r3, #76	@ 0x4c
 80047e0:	2200      	movs	r2, #0
 80047e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80047e4:	78fa      	ldrb	r2, [r7, #3]
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	4613      	mov	r3, r2
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	3338      	adds	r3, #56	@ 0x38
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80047f8:	78fa      	ldrb	r2, [r7, #3]
 80047fa:	6879      	ldr	r1, [r7, #4]
 80047fc:	4613      	mov	r3, r2
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	1a9b      	subs	r3, r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	3315      	adds	r3, #21
 8004808:	78fa      	ldrb	r2, [r7, #3]
 800480a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	334d      	adds	r3, #77	@ 0x4d
 800481c:	2200      	movs	r2, #0
 800481e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6818      	ldr	r0, [r3, #0]
 8004824:	78fa      	ldrb	r2, [r7, #3]
 8004826:	4613      	mov	r3, r2
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	1a9b      	subs	r3, r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	3310      	adds	r3, #16
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	4413      	add	r3, r2
 8004834:	1d19      	adds	r1, r3, #4
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	799b      	ldrb	r3, [r3, #6]
 800483a:	461a      	mov	r2, r3
 800483c:	f004 fd28 	bl	8009290 <USB_HC_StartXfer>
 8004840:	4603      	mov	r3, r0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop

0800484c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f004 fa1c 	bl	8008ca0 <USB_GetMode>
 8004868:	4603      	mov	r3, r0
 800486a:	2b01      	cmp	r3, #1
 800486c:	f040 80fb 	bne.w	8004a66 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f004 f9df 	bl	8008c38 <USB_ReadInterrupts>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 80f1 	beq.w	8004a64 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f004 f9d6 	bl	8008c38 <USB_ReadInterrupts>
 800488c:	4603      	mov	r3, r0
 800488e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004892:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004896:	d104      	bne.n	80048a2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80048a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f004 f9c6 	bl	8008c38 <USB_ReadInterrupts>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048b6:	d104      	bne.n	80048c2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80048c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f004 f9b6 	bl	8008c38 <USB_ReadInterrupts>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048d6:	d104      	bne.n	80048e2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80048e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f004 f9a6 	bl	8008c38 <USB_ReadInterrupts>
 80048ec:	4603      	mov	r3, r0
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d103      	bne.n	80048fe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2202      	movs	r2, #2
 80048fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f004 f998 	bl	8008c38 <USB_ReadInterrupts>
 8004908:	4603      	mov	r3, r0
 800490a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800490e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004912:	d120      	bne.n	8004956 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800491c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d113      	bne.n	8004956 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800492e:	2110      	movs	r1, #16
 8004930:	6938      	ldr	r0, [r7, #16]
 8004932:	f004 f88b 	bl	8008a4c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004936:	6938      	ldr	r0, [r7, #16]
 8004938:	f004 f8ba 	bl	8008ab0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	7a5b      	ldrb	r3, [r3, #9]
 8004940:	2b02      	cmp	r3, #2
 8004942:	d105      	bne.n	8004950 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2101      	movs	r1, #1
 800494a:	4618      	mov	r0, r3
 800494c:	f004 faac 	bl	8008ea8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f007 ffbd 	bl	800c8d0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f004 f96c 	bl	8008c38 <USB_ReadInterrupts>
 8004960:	4603      	mov	r3, r0
 8004962:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004966:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800496a:	d102      	bne.n	8004972 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f001 fd4d 	bl	800640c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f004 f95e 	bl	8008c38 <USB_ReadInterrupts>
 800497c:	4603      	mov	r3, r0
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b08      	cmp	r3, #8
 8004984:	d106      	bne.n	8004994 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f007 ff86 	bl	800c898 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2208      	movs	r2, #8
 8004992:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4618      	mov	r0, r3
 800499a:	f004 f94d 	bl	8008c38 <USB_ReadInterrupts>
 800499e:	4603      	mov	r3, r0
 80049a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049a8:	d139      	bne.n	8004a1e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f004 fee8 	bl	8009784 <USB_HC_ReadInterrupt>
 80049b4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80049b6:	2300      	movs	r3, #0
 80049b8:	617b      	str	r3, [r7, #20]
 80049ba:	e025      	b.n	8004a08 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	fa22 f303 	lsr.w	r3, r2, r3
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d018      	beq.n	8004a02 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049e6:	d106      	bne.n	80049f6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	4619      	mov	r1, r3
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f905 	bl	8004bfe <HCD_HC_IN_IRQHandler>
 80049f4:	e005      	b.n	8004a02 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	4619      	mov	r1, r3
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 ff67 	bl	80058d0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	3301      	adds	r3, #1
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	795b      	ldrb	r3, [r3, #5]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d3d3      	bcc.n	80049bc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f004 f908 	bl	8008c38 <USB_ReadInterrupts>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f003 0310 	and.w	r3, r3, #16
 8004a2e:	2b10      	cmp	r3, #16
 8004a30:	d101      	bne.n	8004a36 <HAL_HCD_IRQHandler+0x1ea>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <HAL_HCD_IRQHandler+0x1ec>
 8004a36:	2300      	movs	r3, #0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d014      	beq.n	8004a66 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0210 	bic.w	r2, r2, #16
 8004a4a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f001 fbfe 	bl	800624e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	699a      	ldr	r2, [r3, #24]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0210 	orr.w	r2, r2, #16
 8004a60:	619a      	str	r2, [r3, #24]
 8004a62:	e000      	b.n	8004a66 <HAL_HCD_IRQHandler+0x21a>
      return;
 8004a64:	bf00      	nop
    }
  }
}
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_HCD_Start+0x16>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e013      	b.n	8004aaa <HAL_HCD_Start+0x3e>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2101      	movs	r1, #1
 8004a90:	4618      	mov	r0, r3
 8004a92:	f004 fa70 	bl	8008f76 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f003 ff68 	bl	8008970 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b082      	sub	sp, #8
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_HCD_Stop+0x16>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e00d      	b.n	8004ae4 <HAL_HCD_Stop+0x32>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f004 ffc3 	bl	8009a60 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f004 fa12 	bl	8008f22 <USB_ResetPort>
 8004afe:	4603      	mov	r3, r0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004b14:	78fa      	ldrb	r2, [r7, #3]
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	334c      	adds	r3, #76	@ 0x4c
 8004b24:	781b      	ldrb	r3, [r3, #0]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004b3e:	78fa      	ldrb	r2, [r7, #3]
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	3338      	adds	r3, #56	@ 0x38
 8004b4e:	681b      	ldr	r3, [r3, #0]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f004 fa54 	bl	8009016 <USB_GetCurrentFrame>
 8004b6e:	4603      	mov	r3, r0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f004 fa2f 	bl	8008fe8 <USB_GetHostSpeed>
 8004b8a:	4603      	mov	r3, r0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004ba0:	78fa      	ldrb	r2, [r7, #3]
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	1a9b      	subs	r3, r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	331a      	adds	r3, #26
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004bb4:	78fa      	ldrb	r2, [r7, #3]
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	1a9b      	subs	r3, r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	331b      	adds	r3, #27
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004bc8:	78fa      	ldrb	r2, [r7, #3]
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	3325      	adds	r3, #37	@ 0x25
 8004bd8:	2200      	movs	r2, #0
 8004bda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004bdc:	78fa      	ldrb	r2, [r7, #3]
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	1a9b      	subs	r3, r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	3324      	adds	r3, #36	@ 0x24
 8004bec:	2200      	movs	r2, #0
 8004bee:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b086      	sub	sp, #24
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	460b      	mov	r3, r1
 8004c08:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	78fa      	ldrb	r2, [r7, #3]
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f004 f81e 	bl	8008c5e <USB_ReadChInterrupts>
 8004c22:	4603      	mov	r3, r0
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d11a      	bne.n	8004c62 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004c2c:	78fb      	ldrb	r3, [r7, #3]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c38:	461a      	mov	r2, r3
 8004c3a:	2304      	movs	r3, #4
 8004c3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004c3e:	78fa      	ldrb	r2, [r7, #3]
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	4613      	mov	r3, r2
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	1a9b      	subs	r3, r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	334d      	adds	r3, #77	@ 0x4d
 8004c4e:	2207      	movs	r2, #7
 8004c50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	78fa      	ldrb	r2, [r7, #3]
 8004c58:	4611      	mov	r1, r2
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f004 fda3 	bl	80097a6 <USB_HC_Halt>
 8004c60:	e09e      	b.n	8004da0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	78fa      	ldrb	r2, [r7, #3]
 8004c68:	4611      	mov	r1, r2
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f003 fff7 	bl	8008c5e <USB_ReadChInterrupts>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c7a:	d11b      	bne.n	8004cb4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c88:	461a      	mov	r2, r3
 8004c8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004c90:	78fa      	ldrb	r2, [r7, #3]
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	4613      	mov	r3, r2
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	334d      	adds	r3, #77	@ 0x4d
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	78fa      	ldrb	r2, [r7, #3]
 8004caa:	4611      	mov	r1, r2
 8004cac:	4618      	mov	r0, r3
 8004cae:	f004 fd7a 	bl	80097a6 <USB_HC_Halt>
 8004cb2:	e075      	b.n	8004da0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	78fa      	ldrb	r2, [r7, #3]
 8004cba:	4611      	mov	r1, r2
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f003 ffce 	bl	8008c5e <USB_ReadChInterrupts>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d11a      	bne.n	8004d02 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cd8:	461a      	mov	r2, r3
 8004cda:	2308      	movs	r3, #8
 8004cdc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004cde:	78fa      	ldrb	r2, [r7, #3]
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	1a9b      	subs	r3, r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	440b      	add	r3, r1
 8004cec:	334d      	adds	r3, #77	@ 0x4d
 8004cee:	2206      	movs	r2, #6
 8004cf0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	78fa      	ldrb	r2, [r7, #3]
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f004 fd53 	bl	80097a6 <USB_HC_Halt>
 8004d00:	e04e      	b.n	8004da0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	78fa      	ldrb	r2, [r7, #3]
 8004d08:	4611      	mov	r1, r2
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f003 ffa7 	bl	8008c5e <USB_ReadChInterrupts>
 8004d10:	4603      	mov	r3, r0
 8004d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d1a:	d11b      	bne.n	8004d54 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004d1c:	78fb      	ldrb	r3, [r7, #3]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d28:	461a      	mov	r2, r3
 8004d2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004d30:	78fa      	ldrb	r2, [r7, #3]
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	4613      	mov	r3, r2
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	1a9b      	subs	r3, r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	334d      	adds	r3, #77	@ 0x4d
 8004d40:	2209      	movs	r2, #9
 8004d42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	78fa      	ldrb	r2, [r7, #3]
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f004 fd2a 	bl	80097a6 <USB_HC_Halt>
 8004d52:	e025      	b.n	8004da0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	78fa      	ldrb	r2, [r7, #3]
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f003 ff7e 	bl	8008c5e <USB_ReadChInterrupts>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d68:	2b80      	cmp	r3, #128	@ 0x80
 8004d6a:	d119      	bne.n	8004da0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004d6c:	78fb      	ldrb	r3, [r7, #3]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d78:	461a      	mov	r2, r3
 8004d7a:	2380      	movs	r3, #128	@ 0x80
 8004d7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004d7e:	78fa      	ldrb	r2, [r7, #3]
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	4613      	mov	r3, r2
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	1a9b      	subs	r3, r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	440b      	add	r3, r1
 8004d8c:	334d      	adds	r3, #77	@ 0x4d
 8004d8e:	2207      	movs	r2, #7
 8004d90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	78fa      	ldrb	r2, [r7, #3]
 8004d98:	4611      	mov	r1, r2
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f004 fd03 	bl	80097a6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	78fa      	ldrb	r2, [r7, #3]
 8004da6:	4611      	mov	r1, r2
 8004da8:	4618      	mov	r0, r3
 8004daa:	f003 ff58 	bl	8008c5e <USB_ReadChInterrupts>
 8004dae:	4603      	mov	r3, r0
 8004db0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004db8:	d112      	bne.n	8004de0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	78fa      	ldrb	r2, [r7, #3]
 8004dc0:	4611      	mov	r1, r2
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f004 fcef 	bl	80097a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004dda:	6093      	str	r3, [r2, #8]
 8004ddc:	f000 bd75 	b.w	80058ca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	78fa      	ldrb	r2, [r7, #3]
 8004de6:	4611      	mov	r1, r2
 8004de8:	4618      	mov	r0, r3
 8004dea:	f003 ff38 	bl	8008c5e <USB_ReadChInterrupts>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	f040 8128 	bne.w	800504a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e06:	461a      	mov	r2, r3
 8004e08:	2320      	movs	r3, #32
 8004e0a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004e0c:	78fa      	ldrb	r2, [r7, #3]
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	4613      	mov	r3, r2
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	1a9b      	subs	r3, r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	440b      	add	r3, r1
 8004e1a:	331b      	adds	r3, #27
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d119      	bne.n	8004e56 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004e22:	78fa      	ldrb	r2, [r7, #3]
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	1a9b      	subs	r3, r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	331b      	adds	r3, #27
 8004e32:	2200      	movs	r2, #0
 8004e34:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e36:	78fb      	ldrb	r3, [r7, #3]
 8004e38:	015a      	lsls	r2, r3, #5
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	78fa      	ldrb	r2, [r7, #3]
 8004e46:	0151      	lsls	r1, r2, #5
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	440a      	add	r2, r1
 8004e4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e54:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	799b      	ldrb	r3, [r3, #6]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d01b      	beq.n	8004e96 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004e5e:	78fa      	ldrb	r2, [r7, #3]
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	4613      	mov	r3, r2
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	1a9b      	subs	r3, r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	440b      	add	r3, r1
 8004e6c:	3330      	adds	r3, #48	@ 0x30
 8004e6e:	6819      	ldr	r1, [r3, #0]
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e82:	78fa      	ldrb	r2, [r7, #3]
 8004e84:	1ac9      	subs	r1, r1, r3
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	1a9b      	subs	r3, r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4403      	add	r3, r0
 8004e92:	3338      	adds	r3, #56	@ 0x38
 8004e94:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004e96:	78fa      	ldrb	r2, [r7, #3]
 8004e98:	6879      	ldr	r1, [r7, #4]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	1a9b      	subs	r3, r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	440b      	add	r3, r1
 8004ea4:	334d      	adds	r3, #77	@ 0x4d
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004eaa:	78fa      	ldrb	r2, [r7, #3]
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	1a9b      	subs	r3, r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	440b      	add	r3, r1
 8004eb8:	3344      	adds	r3, #68	@ 0x44
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004ebe:	78fb      	ldrb	r3, [r7, #3]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eca:	461a      	mov	r2, r3
 8004ecc:	2301      	movs	r3, #1
 8004ece:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ed0:	78fa      	ldrb	r2, [r7, #3]
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	011b      	lsls	r3, r3, #4
 8004ed8:	1a9b      	subs	r3, r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	3326      	adds	r3, #38	@ 0x26
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004ee6:	78fa      	ldrb	r2, [r7, #3]
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	4613      	mov	r3, r2
 8004eec:	011b      	lsls	r3, r3, #4
 8004eee:	1a9b      	subs	r3, r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	3326      	adds	r3, #38	@ 0x26
 8004ef6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d110      	bne.n	8004f1e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	78fa      	ldrb	r2, [r7, #3]
 8004f02:	4611      	mov	r1, r2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f004 fc4e 	bl	80097a6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004f0a:	78fb      	ldrb	r3, [r7, #3]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f16:	461a      	mov	r2, r3
 8004f18:	2310      	movs	r3, #16
 8004f1a:	6093      	str	r3, [r2, #8]
 8004f1c:	e03d      	b.n	8004f9a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004f1e:	78fa      	ldrb	r2, [r7, #3]
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3326      	adds	r3, #38	@ 0x26
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d00a      	beq.n	8004f4a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004f34:	78fa      	ldrb	r2, [r7, #3]
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	1a9b      	subs	r3, r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	3326      	adds	r3, #38	@ 0x26
 8004f44:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d127      	bne.n	8004f9a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004f4a:	78fb      	ldrb	r3, [r7, #3]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	78fa      	ldrb	r2, [r7, #3]
 8004f5a:	0151      	lsls	r1, r2, #5
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	440a      	add	r2, r1
 8004f60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f68:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004f6a:	78fa      	ldrb	r2, [r7, #3]
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	1a9b      	subs	r3, r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	440b      	add	r3, r1
 8004f78:	334c      	adds	r3, #76	@ 0x4c
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004f7e:	78fa      	ldrb	r2, [r7, #3]
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	4613      	mov	r3, r2
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	1a9b      	subs	r3, r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	334c      	adds	r3, #76	@ 0x4c
 8004f8e:	781a      	ldrb	r2, [r3, #0]
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	4619      	mov	r1, r3
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f007 fca9 	bl	800c8ec <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	799b      	ldrb	r3, [r3, #6]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d13b      	bne.n	800501a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004fa2:	78fa      	ldrb	r2, [r7, #3]
 8004fa4:	6879      	ldr	r1, [r7, #4]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	1a9b      	subs	r3, r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	440b      	add	r3, r1
 8004fb0:	3338      	adds	r3, #56	@ 0x38
 8004fb2:	6819      	ldr	r1, [r3, #0]
 8004fb4:	78fa      	ldrb	r2, [r7, #3]
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	1a9b      	subs	r3, r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4403      	add	r3, r0
 8004fc2:	3328      	adds	r3, #40	@ 0x28
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	440b      	add	r3, r1
 8004fc8:	1e59      	subs	r1, r3, #1
 8004fca:	78fa      	ldrb	r2, [r7, #3]
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	1a9b      	subs	r3, r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4403      	add	r3, r0
 8004fd8:	3328      	adds	r3, #40	@ 0x28
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8470 	beq.w	80058ca <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004fea:	78fa      	ldrb	r2, [r7, #3]
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	1a9b      	subs	r3, r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	440b      	add	r3, r1
 8004ff8:	333c      	adds	r3, #60	@ 0x3c
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	78fa      	ldrb	r2, [r7, #3]
 8004ffe:	f083 0301 	eor.w	r3, r3, #1
 8005002:	b2d8      	uxtb	r0, r3
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	4613      	mov	r3, r2
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	1a9b      	subs	r3, r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	440b      	add	r3, r1
 8005010:	333c      	adds	r3, #60	@ 0x3c
 8005012:	4602      	mov	r2, r0
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	f000 bc58 	b.w	80058ca <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800501a:	78fa      	ldrb	r2, [r7, #3]
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	1a9b      	subs	r3, r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	333c      	adds	r3, #60	@ 0x3c
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	78fa      	ldrb	r2, [r7, #3]
 800502e:	f083 0301 	eor.w	r3, r3, #1
 8005032:	b2d8      	uxtb	r0, r3
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	4613      	mov	r3, r2
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	1a9b      	subs	r3, r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	440b      	add	r3, r1
 8005040:	333c      	adds	r3, #60	@ 0x3c
 8005042:	4602      	mov	r2, r0
 8005044:	701a      	strb	r2, [r3, #0]
 8005046:	f000 bc40 	b.w	80058ca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	78fa      	ldrb	r2, [r7, #3]
 8005050:	4611      	mov	r1, r2
 8005052:	4618      	mov	r0, r3
 8005054:	f003 fe03 	bl	8008c5e <USB_ReadChInterrupts>
 8005058:	4603      	mov	r3, r0
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	2b20      	cmp	r3, #32
 8005060:	d131      	bne.n	80050c6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005062:	78fb      	ldrb	r3, [r7, #3]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	4413      	add	r3, r2
 800506a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800506e:	461a      	mov	r2, r3
 8005070:	2320      	movs	r3, #32
 8005072:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005074:	78fa      	ldrb	r2, [r7, #3]
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	4613      	mov	r3, r2
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	1a9b      	subs	r3, r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	331a      	adds	r3, #26
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b01      	cmp	r3, #1
 8005088:	f040 841f 	bne.w	80058ca <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800508c:	78fa      	ldrb	r2, [r7, #3]
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	4613      	mov	r3, r2
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	1a9b      	subs	r3, r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	331b      	adds	r3, #27
 800509c:	2201      	movs	r2, #1
 800509e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80050a0:	78fa      	ldrb	r2, [r7, #3]
 80050a2:	6879      	ldr	r1, [r7, #4]
 80050a4:	4613      	mov	r3, r2
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	1a9b      	subs	r3, r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	334d      	adds	r3, #77	@ 0x4d
 80050b0:	2203      	movs	r2, #3
 80050b2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	78fa      	ldrb	r2, [r7, #3]
 80050ba:	4611      	mov	r1, r2
 80050bc:	4618      	mov	r0, r3
 80050be:	f004 fb72 	bl	80097a6 <USB_HC_Halt>
 80050c2:	f000 bc02 	b.w	80058ca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	78fa      	ldrb	r2, [r7, #3]
 80050cc:	4611      	mov	r1, r2
 80050ce:	4618      	mov	r0, r3
 80050d0:	f003 fdc5 	bl	8008c5e <USB_ReadChInterrupts>
 80050d4:	4603      	mov	r3, r0
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b02      	cmp	r3, #2
 80050dc:	f040 8305 	bne.w	80056ea <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050ec:	461a      	mov	r2, r3
 80050ee:	2302      	movs	r3, #2
 80050f0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80050f2:	78fa      	ldrb	r2, [r7, #3]
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	4613      	mov	r3, r2
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	1a9b      	subs	r3, r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	334d      	adds	r3, #77	@ 0x4d
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d114      	bne.n	8005132 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005108:	78fa      	ldrb	r2, [r7, #3]
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	4613      	mov	r3, r2
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	1a9b      	subs	r3, r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	334d      	adds	r3, #77	@ 0x4d
 8005118:	2202      	movs	r2, #2
 800511a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800511c:	78fa      	ldrb	r2, [r7, #3]
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	4613      	mov	r3, r2
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	1a9b      	subs	r3, r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	440b      	add	r3, r1
 800512a:	334c      	adds	r3, #76	@ 0x4c
 800512c:	2201      	movs	r2, #1
 800512e:	701a      	strb	r2, [r3, #0]
 8005130:	e2cc      	b.n	80056cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005132:	78fa      	ldrb	r2, [r7, #3]
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	1a9b      	subs	r3, r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	440b      	add	r3, r1
 8005140:	334d      	adds	r3, #77	@ 0x4d
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b06      	cmp	r3, #6
 8005146:	d114      	bne.n	8005172 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005148:	78fa      	ldrb	r2, [r7, #3]
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	4613      	mov	r3, r2
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	1a9b      	subs	r3, r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	440b      	add	r3, r1
 8005156:	334d      	adds	r3, #77	@ 0x4d
 8005158:	2202      	movs	r2, #2
 800515a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800515c:	78fa      	ldrb	r2, [r7, #3]
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	4613      	mov	r3, r2
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	1a9b      	subs	r3, r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	334c      	adds	r3, #76	@ 0x4c
 800516c:	2205      	movs	r2, #5
 800516e:	701a      	strb	r2, [r3, #0]
 8005170:	e2ac      	b.n	80056cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005172:	78fa      	ldrb	r2, [r7, #3]
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	4613      	mov	r3, r2
 8005178:	011b      	lsls	r3, r3, #4
 800517a:	1a9b      	subs	r3, r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	440b      	add	r3, r1
 8005180:	334d      	adds	r3, #77	@ 0x4d
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b07      	cmp	r3, #7
 8005186:	d00b      	beq.n	80051a0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005188:	78fa      	ldrb	r2, [r7, #3]
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	4613      	mov	r3, r2
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	1a9b      	subs	r3, r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	440b      	add	r3, r1
 8005196:	334d      	adds	r3, #77	@ 0x4d
 8005198:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800519a:	2b09      	cmp	r3, #9
 800519c:	f040 80a6 	bne.w	80052ec <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80051a0:	78fa      	ldrb	r2, [r7, #3]
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	4613      	mov	r3, r2
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	1a9b      	subs	r3, r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	334d      	adds	r3, #77	@ 0x4d
 80051b0:	2202      	movs	r2, #2
 80051b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80051b4:	78fa      	ldrb	r2, [r7, #3]
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	4613      	mov	r3, r2
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	1a9b      	subs	r3, r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	3344      	adds	r3, #68	@ 0x44
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	1c59      	adds	r1, r3, #1
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	4613      	mov	r3, r2
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	1a9b      	subs	r3, r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4403      	add	r3, r0
 80051d4:	3344      	adds	r3, #68	@ 0x44
 80051d6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80051d8:	78fa      	ldrb	r2, [r7, #3]
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	4613      	mov	r3, r2
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	1a9b      	subs	r3, r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	440b      	add	r3, r1
 80051e6:	3344      	adds	r3, #68	@ 0x44
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d943      	bls.n	8005276 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80051ee:	78fa      	ldrb	r2, [r7, #3]
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	4613      	mov	r3, r2
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	1a9b      	subs	r3, r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	440b      	add	r3, r1
 80051fc:	3344      	adds	r3, #68	@ 0x44
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8005202:	78fa      	ldrb	r2, [r7, #3]
 8005204:	6879      	ldr	r1, [r7, #4]
 8005206:	4613      	mov	r3, r2
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	1a9b      	subs	r3, r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	440b      	add	r3, r1
 8005210:	331a      	adds	r3, #26
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d123      	bne.n	8005260 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005218:	78fa      	ldrb	r2, [r7, #3]
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	4613      	mov	r3, r2
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	1a9b      	subs	r3, r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	440b      	add	r3, r1
 8005226:	331b      	adds	r3, #27
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800522c:	78fa      	ldrb	r2, [r7, #3]
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	4613      	mov	r3, r2
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	1a9b      	subs	r3, r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	440b      	add	r3, r1
 800523a:	331c      	adds	r3, #28
 800523c:	2200      	movs	r2, #0
 800523e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005240:	78fb      	ldrb	r3, [r7, #3]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	4413      	add	r3, r2
 8005248:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	78fa      	ldrb	r2, [r7, #3]
 8005250:	0151      	lsls	r1, r2, #5
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	440a      	add	r2, r1
 8005256:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800525a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800525e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005260:	78fa      	ldrb	r2, [r7, #3]
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	4613      	mov	r3, r2
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	1a9b      	subs	r3, r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	334c      	adds	r3, #76	@ 0x4c
 8005270:	2204      	movs	r2, #4
 8005272:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005274:	e229      	b.n	80056ca <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005276:	78fa      	ldrb	r2, [r7, #3]
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	4613      	mov	r3, r2
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	1a9b      	subs	r3, r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	440b      	add	r3, r1
 8005284:	334c      	adds	r3, #76	@ 0x4c
 8005286:	2202      	movs	r2, #2
 8005288:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800528a:	78fa      	ldrb	r2, [r7, #3]
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	4613      	mov	r3, r2
 8005290:	011b      	lsls	r3, r3, #4
 8005292:	1a9b      	subs	r3, r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	440b      	add	r3, r1
 8005298:	3326      	adds	r3, #38	@ 0x26
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00b      	beq.n	80052b8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80052a0:	78fa      	ldrb	r2, [r7, #3]
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	4613      	mov	r3, r2
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	1a9b      	subs	r3, r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	440b      	add	r3, r1
 80052ae:	3326      	adds	r3, #38	@ 0x26
 80052b0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	f040 8209 	bne.w	80056ca <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80052b8:	78fb      	ldrb	r3, [r7, #3]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80052ce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052d6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052e4:	461a      	mov	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80052ea:	e1ee      	b.n	80056ca <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80052ec:	78fa      	ldrb	r2, [r7, #3]
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	4613      	mov	r3, r2
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	1a9b      	subs	r3, r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	334d      	adds	r3, #77	@ 0x4d
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	2b05      	cmp	r3, #5
 8005300:	f040 80c8 	bne.w	8005494 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005304:	78fa      	ldrb	r2, [r7, #3]
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	4613      	mov	r3, r2
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	1a9b      	subs	r3, r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	440b      	add	r3, r1
 8005312:	334d      	adds	r3, #77	@ 0x4d
 8005314:	2202      	movs	r2, #2
 8005316:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005318:	78fa      	ldrb	r2, [r7, #3]
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	4613      	mov	r3, r2
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	1a9b      	subs	r3, r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	331b      	adds	r3, #27
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2b01      	cmp	r3, #1
 800532c:	f040 81ce 	bne.w	80056cc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005330:	78fa      	ldrb	r2, [r7, #3]
 8005332:	6879      	ldr	r1, [r7, #4]
 8005334:	4613      	mov	r3, r2
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	1a9b      	subs	r3, r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	440b      	add	r3, r1
 800533e:	3326      	adds	r3, #38	@ 0x26
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b03      	cmp	r3, #3
 8005344:	d16b      	bne.n	800541e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8005346:	78fa      	ldrb	r2, [r7, #3]
 8005348:	6879      	ldr	r1, [r7, #4]
 800534a:	4613      	mov	r3, r2
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	1a9b      	subs	r3, r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	440b      	add	r3, r1
 8005354:	3348      	adds	r3, #72	@ 0x48
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	1c59      	adds	r1, r3, #1
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	4613      	mov	r3, r2
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	1a9b      	subs	r3, r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4403      	add	r3, r0
 8005366:	3348      	adds	r3, #72	@ 0x48
 8005368:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800536a:	78fa      	ldrb	r2, [r7, #3]
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	4613      	mov	r3, r2
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	1a9b      	subs	r3, r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	440b      	add	r3, r1
 8005378:	3348      	adds	r3, #72	@ 0x48
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b02      	cmp	r3, #2
 800537e:	d943      	bls.n	8005408 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8005380:	78fa      	ldrb	r2, [r7, #3]
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	4613      	mov	r3, r2
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	1a9b      	subs	r3, r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	3348      	adds	r3, #72	@ 0x48
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8005394:	78fa      	ldrb	r2, [r7, #3]
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	4613      	mov	r3, r2
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	1a9b      	subs	r3, r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	440b      	add	r3, r1
 80053a2:	331b      	adds	r3, #27
 80053a4:	2200      	movs	r2, #0
 80053a6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80053a8:	78fa      	ldrb	r2, [r7, #3]
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	4613      	mov	r3, r2
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	1a9b      	subs	r3, r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	3344      	adds	r3, #68	@ 0x44
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d809      	bhi.n	80053d2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80053be:	78fa      	ldrb	r2, [r7, #3]
 80053c0:	6879      	ldr	r1, [r7, #4]
 80053c2:	4613      	mov	r3, r2
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	1a9b      	subs	r3, r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	440b      	add	r3, r1
 80053cc:	331c      	adds	r3, #28
 80053ce:	2201      	movs	r2, #1
 80053d0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80053d2:	78fb      	ldrb	r3, [r7, #3]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	78fa      	ldrb	r2, [r7, #3]
 80053e2:	0151      	lsls	r1, r2, #5
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	440a      	add	r2, r1
 80053e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80053ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053f0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80053f2:	78fa      	ldrb	r2, [r7, #3]
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	4613      	mov	r3, r2
 80053f8:	011b      	lsls	r3, r3, #4
 80053fa:	1a9b      	subs	r3, r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	440b      	add	r3, r1
 8005400:	334c      	adds	r3, #76	@ 0x4c
 8005402:	2204      	movs	r2, #4
 8005404:	701a      	strb	r2, [r3, #0]
 8005406:	e014      	b.n	8005432 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005408:	78fa      	ldrb	r2, [r7, #3]
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	4613      	mov	r3, r2
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	1a9b      	subs	r3, r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	440b      	add	r3, r1
 8005416:	334c      	adds	r3, #76	@ 0x4c
 8005418:	2202      	movs	r2, #2
 800541a:	701a      	strb	r2, [r3, #0]
 800541c:	e009      	b.n	8005432 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800541e:	78fa      	ldrb	r2, [r7, #3]
 8005420:	6879      	ldr	r1, [r7, #4]
 8005422:	4613      	mov	r3, r2
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	1a9b      	subs	r3, r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	440b      	add	r3, r1
 800542c:	334c      	adds	r3, #76	@ 0x4c
 800542e:	2202      	movs	r2, #2
 8005430:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005432:	78fa      	ldrb	r2, [r7, #3]
 8005434:	6879      	ldr	r1, [r7, #4]
 8005436:	4613      	mov	r3, r2
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	1a9b      	subs	r3, r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	440b      	add	r3, r1
 8005440:	3326      	adds	r3, #38	@ 0x26
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00b      	beq.n	8005460 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005448:	78fa      	ldrb	r2, [r7, #3]
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	4613      	mov	r3, r2
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	1a9b      	subs	r3, r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	3326      	adds	r3, #38	@ 0x26
 8005458:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800545a:	2b02      	cmp	r3, #2
 800545c:	f040 8136 	bne.w	80056cc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	4413      	add	r3, r2
 8005468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005476:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800547e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	4413      	add	r3, r2
 8005488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800548c:	461a      	mov	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	e11b      	b.n	80056cc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005494:	78fa      	ldrb	r2, [r7, #3]
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	4613      	mov	r3, r2
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	1a9b      	subs	r3, r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	334d      	adds	r3, #77	@ 0x4d
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	f040 8081 	bne.w	80055ae <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054ac:	78fa      	ldrb	r2, [r7, #3]
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	4613      	mov	r3, r2
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	1a9b      	subs	r3, r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	334d      	adds	r3, #77	@ 0x4d
 80054bc:	2202      	movs	r2, #2
 80054be:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80054c0:	78fa      	ldrb	r2, [r7, #3]
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	4613      	mov	r3, r2
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	1a9b      	subs	r3, r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	440b      	add	r3, r1
 80054ce:	331b      	adds	r3, #27
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	f040 80fa 	bne.w	80056cc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80054d8:	78fa      	ldrb	r2, [r7, #3]
 80054da:	6879      	ldr	r1, [r7, #4]
 80054dc:	4613      	mov	r3, r2
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	1a9b      	subs	r3, r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	440b      	add	r3, r1
 80054e6:	334c      	adds	r3, #76	@ 0x4c
 80054e8:	2202      	movs	r2, #2
 80054ea:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	78fa      	ldrb	r2, [r7, #3]
 80054fc:	0151      	lsls	r1, r2, #5
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	440a      	add	r2, r1
 8005502:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005506:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800550a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800550c:	78fb      	ldrb	r3, [r7, #3]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	4413      	add	r3, r2
 8005514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	78fa      	ldrb	r2, [r7, #3]
 800551c:	0151      	lsls	r1, r2, #5
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	440a      	add	r2, r1
 8005522:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800552a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	4413      	add	r3, r2
 8005534:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	78fa      	ldrb	r2, [r7, #3]
 800553c:	0151      	lsls	r1, r2, #5
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	440a      	add	r2, r1
 8005542:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005546:	f023 0320 	bic.w	r3, r3, #32
 800554a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800554c:	78fa      	ldrb	r2, [r7, #3]
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	4613      	mov	r3, r2
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	1a9b      	subs	r3, r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	440b      	add	r3, r1
 800555a:	3326      	adds	r3, #38	@ 0x26
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00b      	beq.n	800557a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005562:	78fa      	ldrb	r2, [r7, #3]
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	4613      	mov	r3, r2
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	1a9b      	subs	r3, r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	440b      	add	r3, r1
 8005570:	3326      	adds	r3, #38	@ 0x26
 8005572:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005574:	2b02      	cmp	r3, #2
 8005576:	f040 80a9 	bne.w	80056cc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800557a:	78fb      	ldrb	r3, [r7, #3]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	4413      	add	r3, r2
 8005582:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005590:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005598:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800559a:	78fb      	ldrb	r3, [r7, #3]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055a6:	461a      	mov	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	e08e      	b.n	80056cc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80055ae:	78fa      	ldrb	r2, [r7, #3]
 80055b0:	6879      	ldr	r1, [r7, #4]
 80055b2:	4613      	mov	r3, r2
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	1a9b      	subs	r3, r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	440b      	add	r3, r1
 80055bc:	334d      	adds	r3, #77	@ 0x4d
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2b04      	cmp	r3, #4
 80055c2:	d143      	bne.n	800564c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055c4:	78fa      	ldrb	r2, [r7, #3]
 80055c6:	6879      	ldr	r1, [r7, #4]
 80055c8:	4613      	mov	r3, r2
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	1a9b      	subs	r3, r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	440b      	add	r3, r1
 80055d2:	334d      	adds	r3, #77	@ 0x4d
 80055d4:	2202      	movs	r2, #2
 80055d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80055d8:	78fa      	ldrb	r2, [r7, #3]
 80055da:	6879      	ldr	r1, [r7, #4]
 80055dc:	4613      	mov	r3, r2
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	1a9b      	subs	r3, r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	440b      	add	r3, r1
 80055e6:	334c      	adds	r3, #76	@ 0x4c
 80055e8:	2202      	movs	r2, #2
 80055ea:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80055ec:	78fa      	ldrb	r2, [r7, #3]
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	4613      	mov	r3, r2
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	1a9b      	subs	r3, r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	440b      	add	r3, r1
 80055fa:	3326      	adds	r3, #38	@ 0x26
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00a      	beq.n	8005618 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005602:	78fa      	ldrb	r2, [r7, #3]
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	3326      	adds	r3, #38	@ 0x26
 8005612:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005614:	2b02      	cmp	r3, #2
 8005616:	d159      	bne.n	80056cc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005618:	78fb      	ldrb	r3, [r7, #3]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	4413      	add	r3, r2
 8005620:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800562e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005636:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005638:	78fb      	ldrb	r3, [r7, #3]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	4413      	add	r3, r2
 8005640:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005644:	461a      	mov	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6013      	str	r3, [r2, #0]
 800564a:	e03f      	b.n	80056cc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800564c:	78fa      	ldrb	r2, [r7, #3]
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	4613      	mov	r3, r2
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	1a9b      	subs	r3, r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	334d      	adds	r3, #77	@ 0x4d
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b08      	cmp	r3, #8
 8005660:	d126      	bne.n	80056b0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005662:	78fa      	ldrb	r2, [r7, #3]
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	440b      	add	r3, r1
 8005670:	334d      	adds	r3, #77	@ 0x4d
 8005672:	2202      	movs	r2, #2
 8005674:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005676:	78fa      	ldrb	r2, [r7, #3]
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	4613      	mov	r3, r2
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	1a9b      	subs	r3, r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	440b      	add	r3, r1
 8005684:	3344      	adds	r3, #68	@ 0x44
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	1c59      	adds	r1, r3, #1
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	4613      	mov	r3, r2
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	1a9b      	subs	r3, r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4403      	add	r3, r0
 8005696:	3344      	adds	r3, #68	@ 0x44
 8005698:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800569a:	78fa      	ldrb	r2, [r7, #3]
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	4613      	mov	r3, r2
 80056a0:	011b      	lsls	r3, r3, #4
 80056a2:	1a9b      	subs	r3, r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	440b      	add	r3, r1
 80056a8:	334c      	adds	r3, #76	@ 0x4c
 80056aa:	2204      	movs	r2, #4
 80056ac:	701a      	strb	r2, [r3, #0]
 80056ae:	e00d      	b.n	80056cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80056b0:	78fa      	ldrb	r2, [r7, #3]
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	4613      	mov	r3, r2
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	1a9b      	subs	r3, r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	440b      	add	r3, r1
 80056be:	334d      	adds	r3, #77	@ 0x4d
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	f000 8100 	beq.w	80058c8 <HCD_HC_IN_IRQHandler+0xcca>
 80056c8:	e000      	b.n	80056cc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80056ca:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80056cc:	78fa      	ldrb	r2, [r7, #3]
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	4613      	mov	r3, r2
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	1a9b      	subs	r3, r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	440b      	add	r3, r1
 80056da:	334c      	adds	r3, #76	@ 0x4c
 80056dc:	781a      	ldrb	r2, [r3, #0]
 80056de:	78fb      	ldrb	r3, [r7, #3]
 80056e0:	4619      	mov	r1, r3
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f007 f902 	bl	800c8ec <HAL_HCD_HC_NotifyURBChange_Callback>
 80056e8:	e0ef      	b.n	80058ca <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	78fa      	ldrb	r2, [r7, #3]
 80056f0:	4611      	mov	r1, r2
 80056f2:	4618      	mov	r0, r3
 80056f4:	f003 fab3 	bl	8008c5e <USB_ReadChInterrupts>
 80056f8:	4603      	mov	r3, r0
 80056fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fe:	2b40      	cmp	r3, #64	@ 0x40
 8005700:	d12f      	bne.n	8005762 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005702:	78fb      	ldrb	r3, [r7, #3]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	4413      	add	r3, r2
 800570a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800570e:	461a      	mov	r2, r3
 8005710:	2340      	movs	r3, #64	@ 0x40
 8005712:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005714:	78fa      	ldrb	r2, [r7, #3]
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	4613      	mov	r3, r2
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	1a9b      	subs	r3, r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	334d      	adds	r3, #77	@ 0x4d
 8005724:	2205      	movs	r2, #5
 8005726:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005728:	78fa      	ldrb	r2, [r7, #3]
 800572a:	6879      	ldr	r1, [r7, #4]
 800572c:	4613      	mov	r3, r2
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	1a9b      	subs	r3, r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	440b      	add	r3, r1
 8005736:	331a      	adds	r3, #26
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d109      	bne.n	8005752 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800573e:	78fa      	ldrb	r2, [r7, #3]
 8005740:	6879      	ldr	r1, [r7, #4]
 8005742:	4613      	mov	r3, r2
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	1a9b      	subs	r3, r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	440b      	add	r3, r1
 800574c:	3344      	adds	r3, #68	@ 0x44
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	78fa      	ldrb	r2, [r7, #3]
 8005758:	4611      	mov	r1, r2
 800575a:	4618      	mov	r0, r3
 800575c:	f004 f823 	bl	80097a6 <USB_HC_Halt>
 8005760:	e0b3      	b.n	80058ca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	78fa      	ldrb	r2, [r7, #3]
 8005768:	4611      	mov	r1, r2
 800576a:	4618      	mov	r0, r3
 800576c:	f003 fa77 	bl	8008c5e <USB_ReadChInterrupts>
 8005770:	4603      	mov	r3, r0
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	2b10      	cmp	r3, #16
 8005778:	f040 80a7 	bne.w	80058ca <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800577c:	78fa      	ldrb	r2, [r7, #3]
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	4613      	mov	r3, r2
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	1a9b      	subs	r3, r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	440b      	add	r3, r1
 800578a:	3326      	adds	r3, #38	@ 0x26
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b03      	cmp	r3, #3
 8005790:	d11b      	bne.n	80057ca <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005792:	78fa      	ldrb	r2, [r7, #3]
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	4613      	mov	r3, r2
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	1a9b      	subs	r3, r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	440b      	add	r3, r1
 80057a0:	3344      	adds	r3, #68	@ 0x44
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80057a6:	78fa      	ldrb	r2, [r7, #3]
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	4613      	mov	r3, r2
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	1a9b      	subs	r3, r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	440b      	add	r3, r1
 80057b4:	334d      	adds	r3, #77	@ 0x4d
 80057b6:	2204      	movs	r2, #4
 80057b8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	78fa      	ldrb	r2, [r7, #3]
 80057c0:	4611      	mov	r1, r2
 80057c2:	4618      	mov	r0, r3
 80057c4:	f003 ffef 	bl	80097a6 <USB_HC_Halt>
 80057c8:	e03f      	b.n	800584a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80057ca:	78fa      	ldrb	r2, [r7, #3]
 80057cc:	6879      	ldr	r1, [r7, #4]
 80057ce:	4613      	mov	r3, r2
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	1a9b      	subs	r3, r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	440b      	add	r3, r1
 80057d8:	3326      	adds	r3, #38	@ 0x26
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80057e0:	78fa      	ldrb	r2, [r7, #3]
 80057e2:	6879      	ldr	r1, [r7, #4]
 80057e4:	4613      	mov	r3, r2
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	1a9b      	subs	r3, r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	440b      	add	r3, r1
 80057ee:	3326      	adds	r3, #38	@ 0x26
 80057f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d129      	bne.n	800584a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80057f6:	78fa      	ldrb	r2, [r7, #3]
 80057f8:	6879      	ldr	r1, [r7, #4]
 80057fa:	4613      	mov	r3, r2
 80057fc:	011b      	lsls	r3, r3, #4
 80057fe:	1a9b      	subs	r3, r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	440b      	add	r3, r1
 8005804:	3344      	adds	r3, #68	@ 0x44
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	799b      	ldrb	r3, [r3, #6]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <HCD_HC_IN_IRQHandler+0xc2a>
 8005812:	78fa      	ldrb	r2, [r7, #3]
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	1a9b      	subs	r3, r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	331b      	adds	r3, #27
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d110      	bne.n	800584a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005828:	78fa      	ldrb	r2, [r7, #3]
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	4613      	mov	r3, r2
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	1a9b      	subs	r3, r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	334d      	adds	r3, #77	@ 0x4d
 8005838:	2204      	movs	r2, #4
 800583a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	78fa      	ldrb	r2, [r7, #3]
 8005842:	4611      	mov	r1, r2
 8005844:	4618      	mov	r0, r3
 8005846:	f003 ffae 	bl	80097a6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800584a:	78fa      	ldrb	r2, [r7, #3]
 800584c:	6879      	ldr	r1, [r7, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	011b      	lsls	r3, r3, #4
 8005852:	1a9b      	subs	r3, r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	440b      	add	r3, r1
 8005858:	331b      	adds	r3, #27
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d129      	bne.n	80058b4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005860:	78fa      	ldrb	r2, [r7, #3]
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	4613      	mov	r3, r2
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	1a9b      	subs	r3, r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	331b      	adds	r3, #27
 8005870:	2200      	movs	r2, #0
 8005872:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005874:	78fb      	ldrb	r3, [r7, #3]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	4413      	add	r3, r2
 800587c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	78fa      	ldrb	r2, [r7, #3]
 8005884:	0151      	lsls	r1, r2, #5
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	440a      	add	r2, r1
 800588a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800588e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005892:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8005894:	78fb      	ldrb	r3, [r7, #3]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	4413      	add	r3, r2
 800589c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	78fa      	ldrb	r2, [r7, #3]
 80058a4:	0151      	lsls	r1, r2, #5
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	440a      	add	r2, r1
 80058aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058ae:	f043 0320 	orr.w	r3, r3, #32
 80058b2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80058b4:	78fb      	ldrb	r3, [r7, #3]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058c0:	461a      	mov	r2, r3
 80058c2:	2310      	movs	r3, #16
 80058c4:	6093      	str	r3, [r2, #8]
 80058c6:	e000      	b.n	80058ca <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80058c8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80058ca:	3718      	adds	r7, #24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	460b      	mov	r3, r1
 80058da:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	78fa      	ldrb	r2, [r7, #3]
 80058ec:	4611      	mov	r1, r2
 80058ee:	4618      	mov	r0, r3
 80058f0:	f003 f9b5 	bl	8008c5e <USB_ReadChInterrupts>
 80058f4:	4603      	mov	r3, r0
 80058f6:	f003 0304 	and.w	r3, r3, #4
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d11b      	bne.n	8005936 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80058fe:	78fb      	ldrb	r3, [r7, #3]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	4413      	add	r3, r2
 8005906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800590a:	461a      	mov	r2, r3
 800590c:	2304      	movs	r3, #4
 800590e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005910:	78fa      	ldrb	r2, [r7, #3]
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	4613      	mov	r3, r2
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	1a9b      	subs	r3, r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	334d      	adds	r3, #77	@ 0x4d
 8005920:	2207      	movs	r2, #7
 8005922:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	78fa      	ldrb	r2, [r7, #3]
 800592a:	4611      	mov	r1, r2
 800592c:	4618      	mov	r0, r3
 800592e:	f003 ff3a 	bl	80097a6 <USB_HC_Halt>
 8005932:	f000 bc89 	b.w	8006248 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	78fa      	ldrb	r2, [r7, #3]
 800593c:	4611      	mov	r1, r2
 800593e:	4618      	mov	r0, r3
 8005940:	f003 f98d 	bl	8008c5e <USB_ReadChInterrupts>
 8005944:	4603      	mov	r3, r0
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b20      	cmp	r3, #32
 800594c:	f040 8082 	bne.w	8005a54 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005950:	78fb      	ldrb	r3, [r7, #3]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	4413      	add	r3, r2
 8005958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800595c:	461a      	mov	r2, r3
 800595e:	2320      	movs	r3, #32
 8005960:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8005962:	78fa      	ldrb	r2, [r7, #3]
 8005964:	6879      	ldr	r1, [r7, #4]
 8005966:	4613      	mov	r3, r2
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	1a9b      	subs	r3, r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	440b      	add	r3, r1
 8005970:	3319      	adds	r3, #25
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d124      	bne.n	80059c2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8005978:	78fa      	ldrb	r2, [r7, #3]
 800597a:	6879      	ldr	r1, [r7, #4]
 800597c:	4613      	mov	r3, r2
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	1a9b      	subs	r3, r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	440b      	add	r3, r1
 8005986:	3319      	adds	r3, #25
 8005988:	2200      	movs	r2, #0
 800598a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800598c:	78fa      	ldrb	r2, [r7, #3]
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	4613      	mov	r3, r2
 8005992:	011b      	lsls	r3, r3, #4
 8005994:	1a9b      	subs	r3, r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	334c      	adds	r3, #76	@ 0x4c
 800599c:	2202      	movs	r2, #2
 800599e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80059a0:	78fa      	ldrb	r2, [r7, #3]
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	4613      	mov	r3, r2
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	1a9b      	subs	r3, r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	440b      	add	r3, r1
 80059ae:	334d      	adds	r3, #77	@ 0x4d
 80059b0:	2203      	movs	r2, #3
 80059b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	78fa      	ldrb	r2, [r7, #3]
 80059ba:	4611      	mov	r1, r2
 80059bc:	4618      	mov	r0, r3
 80059be:	f003 fef2 	bl	80097a6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80059c2:	78fa      	ldrb	r2, [r7, #3]
 80059c4:	6879      	ldr	r1, [r7, #4]
 80059c6:	4613      	mov	r3, r2
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	1a9b      	subs	r3, r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	440b      	add	r3, r1
 80059d0:	331a      	adds	r3, #26
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	f040 8437 	bne.w	8006248 <HCD_HC_OUT_IRQHandler+0x978>
 80059da:	78fa      	ldrb	r2, [r7, #3]
 80059dc:	6879      	ldr	r1, [r7, #4]
 80059de:	4613      	mov	r3, r2
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	1a9b      	subs	r3, r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	440b      	add	r3, r1
 80059e8:	331b      	adds	r3, #27
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f040 842b 	bne.w	8006248 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80059f2:	78fa      	ldrb	r2, [r7, #3]
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	4613      	mov	r3, r2
 80059f8:	011b      	lsls	r3, r3, #4
 80059fa:	1a9b      	subs	r3, r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	440b      	add	r3, r1
 8005a00:	3326      	adds	r3, #38	@ 0x26
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d009      	beq.n	8005a1c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005a08:	78fa      	ldrb	r2, [r7, #3]
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	1a9b      	subs	r3, r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	331b      	adds	r3, #27
 8005a18:	2201      	movs	r2, #1
 8005a1a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005a1c:	78fa      	ldrb	r2, [r7, #3]
 8005a1e:	6879      	ldr	r1, [r7, #4]
 8005a20:	4613      	mov	r3, r2
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	1a9b      	subs	r3, r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	440b      	add	r3, r1
 8005a2a:	334d      	adds	r3, #77	@ 0x4d
 8005a2c:	2203      	movs	r2, #3
 8005a2e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	78fa      	ldrb	r2, [r7, #3]
 8005a36:	4611      	mov	r1, r2
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f003 feb4 	bl	80097a6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005a3e:	78fa      	ldrb	r2, [r7, #3]
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	4613      	mov	r3, r2
 8005a44:	011b      	lsls	r3, r3, #4
 8005a46:	1a9b      	subs	r3, r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	440b      	add	r3, r1
 8005a4c:	3344      	adds	r3, #68	@ 0x44
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	e3f9      	b.n	8006248 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	78fa      	ldrb	r2, [r7, #3]
 8005a5a:	4611      	mov	r1, r2
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f003 f8fe 	bl	8008c5e <USB_ReadChInterrupts>
 8005a62:	4603      	mov	r3, r0
 8005a64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a6c:	d111      	bne.n	8005a92 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005a6e:	78fb      	ldrb	r3, [r7, #3]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a80:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	78fa      	ldrb	r2, [r7, #3]
 8005a88:	4611      	mov	r1, r2
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f003 fe8b 	bl	80097a6 <USB_HC_Halt>
 8005a90:	e3da      	b.n	8006248 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	78fa      	ldrb	r2, [r7, #3]
 8005a98:	4611      	mov	r1, r2
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f003 f8df 	bl	8008c5e <USB_ReadChInterrupts>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d168      	bne.n	8005b7c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005aaa:	78fa      	ldrb	r2, [r7, #3]
 8005aac:	6879      	ldr	r1, [r7, #4]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	1a9b      	subs	r3, r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	440b      	add	r3, r1
 8005ab8:	3344      	adds	r3, #68	@ 0x44
 8005aba:	2200      	movs	r2, #0
 8005abc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	78fa      	ldrb	r2, [r7, #3]
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f003 f8c9 	bl	8008c5e <USB_ReadChInterrupts>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad2:	2b40      	cmp	r3, #64	@ 0x40
 8005ad4:	d112      	bne.n	8005afc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005ad6:	78fa      	ldrb	r2, [r7, #3]
 8005ad8:	6879      	ldr	r1, [r7, #4]
 8005ada:	4613      	mov	r3, r2
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	1a9b      	subs	r3, r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	440b      	add	r3, r1
 8005ae4:	3319      	adds	r3, #25
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005aea:	78fb      	ldrb	r3, [r7, #3]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005af6:	461a      	mov	r2, r3
 8005af8:	2340      	movs	r3, #64	@ 0x40
 8005afa:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005afc:	78fa      	ldrb	r2, [r7, #3]
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	4613      	mov	r3, r2
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	1a9b      	subs	r3, r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	440b      	add	r3, r1
 8005b0a:	331b      	adds	r3, #27
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d019      	beq.n	8005b46 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005b12:	78fa      	ldrb	r2, [r7, #3]
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	4613      	mov	r3, r2
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	1a9b      	subs	r3, r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	440b      	add	r3, r1
 8005b20:	331b      	adds	r3, #27
 8005b22:	2200      	movs	r2, #0
 8005b24:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005b26:	78fb      	ldrb	r3, [r7, #3]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	78fa      	ldrb	r2, [r7, #3]
 8005b36:	0151      	lsls	r1, r2, #5
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	440a      	add	r2, r1
 8005b3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b44:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005b46:	78fb      	ldrb	r3, [r7, #3]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b52:	461a      	mov	r2, r3
 8005b54:	2301      	movs	r3, #1
 8005b56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005b58:	78fa      	ldrb	r2, [r7, #3]
 8005b5a:	6879      	ldr	r1, [r7, #4]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	1a9b      	subs	r3, r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	440b      	add	r3, r1
 8005b66:	334d      	adds	r3, #77	@ 0x4d
 8005b68:	2201      	movs	r2, #1
 8005b6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	78fa      	ldrb	r2, [r7, #3]
 8005b72:	4611      	mov	r1, r2
 8005b74:	4618      	mov	r0, r3
 8005b76:	f003 fe16 	bl	80097a6 <USB_HC_Halt>
 8005b7a:	e365      	b.n	8006248 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	78fa      	ldrb	r2, [r7, #3]
 8005b82:	4611      	mov	r1, r2
 8005b84:	4618      	mov	r0, r3
 8005b86:	f003 f86a 	bl	8008c5e <USB_ReadChInterrupts>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b90:	2b40      	cmp	r3, #64	@ 0x40
 8005b92:	d139      	bne.n	8005c08 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005b94:	78fa      	ldrb	r2, [r7, #3]
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	1a9b      	subs	r3, r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	334d      	adds	r3, #77	@ 0x4d
 8005ba4:	2205      	movs	r2, #5
 8005ba6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005ba8:	78fa      	ldrb	r2, [r7, #3]
 8005baa:	6879      	ldr	r1, [r7, #4]
 8005bac:	4613      	mov	r3, r2
 8005bae:	011b      	lsls	r3, r3, #4
 8005bb0:	1a9b      	subs	r3, r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	440b      	add	r3, r1
 8005bb6:	331a      	adds	r3, #26
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d109      	bne.n	8005bd2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005bbe:	78fa      	ldrb	r2, [r7, #3]
 8005bc0:	6879      	ldr	r1, [r7, #4]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	1a9b      	subs	r3, r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	440b      	add	r3, r1
 8005bcc:	3319      	adds	r3, #25
 8005bce:	2201      	movs	r2, #1
 8005bd0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005bd2:	78fa      	ldrb	r2, [r7, #3]
 8005bd4:	6879      	ldr	r1, [r7, #4]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	1a9b      	subs	r3, r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	440b      	add	r3, r1
 8005be0:	3344      	adds	r3, #68	@ 0x44
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	78fa      	ldrb	r2, [r7, #3]
 8005bec:	4611      	mov	r1, r2
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f003 fdd9 	bl	80097a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c00:	461a      	mov	r2, r3
 8005c02:	2340      	movs	r3, #64	@ 0x40
 8005c04:	6093      	str	r3, [r2, #8]
 8005c06:	e31f      	b.n	8006248 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	78fa      	ldrb	r2, [r7, #3]
 8005c0e:	4611      	mov	r1, r2
 8005c10:	4618      	mov	r0, r3
 8005c12:	f003 f824 	bl	8008c5e <USB_ReadChInterrupts>
 8005c16:	4603      	mov	r3, r0
 8005c18:	f003 0308 	and.w	r3, r3, #8
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d11a      	bne.n	8005c56 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005c20:	78fb      	ldrb	r3, [r7, #3]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	2308      	movs	r3, #8
 8005c30:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005c32:	78fa      	ldrb	r2, [r7, #3]
 8005c34:	6879      	ldr	r1, [r7, #4]
 8005c36:	4613      	mov	r3, r2
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	1a9b      	subs	r3, r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	440b      	add	r3, r1
 8005c40:	334d      	adds	r3, #77	@ 0x4d
 8005c42:	2206      	movs	r2, #6
 8005c44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	78fa      	ldrb	r2, [r7, #3]
 8005c4c:	4611      	mov	r1, r2
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f003 fda9 	bl	80097a6 <USB_HC_Halt>
 8005c54:	e2f8      	b.n	8006248 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	78fa      	ldrb	r2, [r7, #3]
 8005c5c:	4611      	mov	r1, r2
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f002 fffd 	bl	8008c5e <USB_ReadChInterrupts>
 8005c64:	4603      	mov	r3, r0
 8005c66:	f003 0310 	and.w	r3, r3, #16
 8005c6a:	2b10      	cmp	r3, #16
 8005c6c:	d144      	bne.n	8005cf8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005c6e:	78fa      	ldrb	r2, [r7, #3]
 8005c70:	6879      	ldr	r1, [r7, #4]
 8005c72:	4613      	mov	r3, r2
 8005c74:	011b      	lsls	r3, r3, #4
 8005c76:	1a9b      	subs	r3, r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	440b      	add	r3, r1
 8005c7c:	3344      	adds	r3, #68	@ 0x44
 8005c7e:	2200      	movs	r2, #0
 8005c80:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005c82:	78fa      	ldrb	r2, [r7, #3]
 8005c84:	6879      	ldr	r1, [r7, #4]
 8005c86:	4613      	mov	r3, r2
 8005c88:	011b      	lsls	r3, r3, #4
 8005c8a:	1a9b      	subs	r3, r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	440b      	add	r3, r1
 8005c90:	334d      	adds	r3, #77	@ 0x4d
 8005c92:	2204      	movs	r2, #4
 8005c94:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005c96:	78fa      	ldrb	r2, [r7, #3]
 8005c98:	6879      	ldr	r1, [r7, #4]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	1a9b      	subs	r3, r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	3319      	adds	r3, #25
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d114      	bne.n	8005cd6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005cac:	78fa      	ldrb	r2, [r7, #3]
 8005cae:	6879      	ldr	r1, [r7, #4]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	1a9b      	subs	r3, r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	440b      	add	r3, r1
 8005cba:	3318      	adds	r3, #24
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d109      	bne.n	8005cd6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005cc2:	78fa      	ldrb	r2, [r7, #3]
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	011b      	lsls	r3, r3, #4
 8005cca:	1a9b      	subs	r3, r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	440b      	add	r3, r1
 8005cd0:	3319      	adds	r3, #25
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	78fa      	ldrb	r2, [r7, #3]
 8005cdc:	4611      	mov	r1, r2
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f003 fd61 	bl	80097a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	2310      	movs	r3, #16
 8005cf4:	6093      	str	r3, [r2, #8]
 8005cf6:	e2a7      	b.n	8006248 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	78fa      	ldrb	r2, [r7, #3]
 8005cfe:	4611      	mov	r1, r2
 8005d00:	4618      	mov	r0, r3
 8005d02:	f002 ffac 	bl	8008c5e <USB_ReadChInterrupts>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d0c:	2b80      	cmp	r3, #128	@ 0x80
 8005d0e:	f040 8083 	bne.w	8005e18 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	799b      	ldrb	r3, [r3, #6]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d111      	bne.n	8005d3e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005d1a:	78fa      	ldrb	r2, [r7, #3]
 8005d1c:	6879      	ldr	r1, [r7, #4]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	1a9b      	subs	r3, r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	440b      	add	r3, r1
 8005d28:	334d      	adds	r3, #77	@ 0x4d
 8005d2a:	2207      	movs	r2, #7
 8005d2c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	78fa      	ldrb	r2, [r7, #3]
 8005d34:	4611      	mov	r1, r2
 8005d36:	4618      	mov	r0, r3
 8005d38:	f003 fd35 	bl	80097a6 <USB_HC_Halt>
 8005d3c:	e062      	b.n	8005e04 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005d3e:	78fa      	ldrb	r2, [r7, #3]
 8005d40:	6879      	ldr	r1, [r7, #4]
 8005d42:	4613      	mov	r3, r2
 8005d44:	011b      	lsls	r3, r3, #4
 8005d46:	1a9b      	subs	r3, r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	440b      	add	r3, r1
 8005d4c:	3344      	adds	r3, #68	@ 0x44
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	1c59      	adds	r1, r3, #1
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	4613      	mov	r3, r2
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	1a9b      	subs	r3, r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4403      	add	r3, r0
 8005d5e:	3344      	adds	r3, #68	@ 0x44
 8005d60:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005d62:	78fa      	ldrb	r2, [r7, #3]
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	4613      	mov	r3, r2
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	1a9b      	subs	r3, r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	440b      	add	r3, r1
 8005d70:	3344      	adds	r3, #68	@ 0x44
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d922      	bls.n	8005dbe <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005d78:	78fa      	ldrb	r2, [r7, #3]
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	1a9b      	subs	r3, r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	440b      	add	r3, r1
 8005d86:	3344      	adds	r3, #68	@ 0x44
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005d8c:	78fa      	ldrb	r2, [r7, #3]
 8005d8e:	6879      	ldr	r1, [r7, #4]
 8005d90:	4613      	mov	r3, r2
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	1a9b      	subs	r3, r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	440b      	add	r3, r1
 8005d9a:	334c      	adds	r3, #76	@ 0x4c
 8005d9c:	2204      	movs	r2, #4
 8005d9e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005da0:	78fa      	ldrb	r2, [r7, #3]
 8005da2:	6879      	ldr	r1, [r7, #4]
 8005da4:	4613      	mov	r3, r2
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	1a9b      	subs	r3, r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	440b      	add	r3, r1
 8005dae:	334c      	adds	r3, #76	@ 0x4c
 8005db0:	781a      	ldrb	r2, [r3, #0]
 8005db2:	78fb      	ldrb	r3, [r7, #3]
 8005db4:	4619      	mov	r1, r3
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f006 fd98 	bl	800c8ec <HAL_HCD_HC_NotifyURBChange_Callback>
 8005dbc:	e022      	b.n	8005e04 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005dbe:	78fa      	ldrb	r2, [r7, #3]
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	011b      	lsls	r3, r3, #4
 8005dc6:	1a9b      	subs	r3, r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	440b      	add	r3, r1
 8005dcc:	334c      	adds	r3, #76	@ 0x4c
 8005dce:	2202      	movs	r2, #2
 8005dd0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005dd2:	78fb      	ldrb	r3, [r7, #3]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005de8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005df0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005df2:	78fb      	ldrb	r3, [r7, #3]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dfe:	461a      	mov	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e10:	461a      	mov	r2, r3
 8005e12:	2380      	movs	r3, #128	@ 0x80
 8005e14:	6093      	str	r3, [r2, #8]
 8005e16:	e217      	b.n	8006248 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	78fa      	ldrb	r2, [r7, #3]
 8005e1e:	4611      	mov	r1, r2
 8005e20:	4618      	mov	r0, r3
 8005e22:	f002 ff1c 	bl	8008c5e <USB_ReadChInterrupts>
 8005e26:	4603      	mov	r3, r0
 8005e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e30:	d11b      	bne.n	8005e6a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005e32:	78fa      	ldrb	r2, [r7, #3]
 8005e34:	6879      	ldr	r1, [r7, #4]
 8005e36:	4613      	mov	r3, r2
 8005e38:	011b      	lsls	r3, r3, #4
 8005e3a:	1a9b      	subs	r3, r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	440b      	add	r3, r1
 8005e40:	334d      	adds	r3, #77	@ 0x4d
 8005e42:	2209      	movs	r2, #9
 8005e44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	78fa      	ldrb	r2, [r7, #3]
 8005e4c:	4611      	mov	r1, r2
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f003 fca9 	bl	80097a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005e54:	78fb      	ldrb	r3, [r7, #3]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e60:	461a      	mov	r2, r3
 8005e62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e66:	6093      	str	r3, [r2, #8]
 8005e68:	e1ee      	b.n	8006248 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	78fa      	ldrb	r2, [r7, #3]
 8005e70:	4611      	mov	r1, r2
 8005e72:	4618      	mov	r0, r3
 8005e74:	f002 fef3 	bl	8008c5e <USB_ReadChInterrupts>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	f040 81df 	bne.w	8006242 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e90:	461a      	mov	r2, r3
 8005e92:	2302      	movs	r3, #2
 8005e94:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005e96:	78fa      	ldrb	r2, [r7, #3]
 8005e98:	6879      	ldr	r1, [r7, #4]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	011b      	lsls	r3, r3, #4
 8005e9e:	1a9b      	subs	r3, r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	440b      	add	r3, r1
 8005ea4:	334d      	adds	r3, #77	@ 0x4d
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	f040 8093 	bne.w	8005fd4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005eae:	78fa      	ldrb	r2, [r7, #3]
 8005eb0:	6879      	ldr	r1, [r7, #4]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	011b      	lsls	r3, r3, #4
 8005eb6:	1a9b      	subs	r3, r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	440b      	add	r3, r1
 8005ebc:	334d      	adds	r3, #77	@ 0x4d
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005ec2:	78fa      	ldrb	r2, [r7, #3]
 8005ec4:	6879      	ldr	r1, [r7, #4]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	1a9b      	subs	r3, r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	440b      	add	r3, r1
 8005ed0:	334c      	adds	r3, #76	@ 0x4c
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005ed6:	78fa      	ldrb	r2, [r7, #3]
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	4613      	mov	r3, r2
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	1a9b      	subs	r3, r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	440b      	add	r3, r1
 8005ee4:	3326      	adds	r3, #38	@ 0x26
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d00b      	beq.n	8005f04 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005eec:	78fa      	ldrb	r2, [r7, #3]
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	011b      	lsls	r3, r3, #4
 8005ef4:	1a9b      	subs	r3, r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	3326      	adds	r3, #38	@ 0x26
 8005efc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	f040 8190 	bne.w	8006224 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	799b      	ldrb	r3, [r3, #6]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d115      	bne.n	8005f38 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005f0c:	78fa      	ldrb	r2, [r7, #3]
 8005f0e:	6879      	ldr	r1, [r7, #4]
 8005f10:	4613      	mov	r3, r2
 8005f12:	011b      	lsls	r3, r3, #4
 8005f14:	1a9b      	subs	r3, r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	440b      	add	r3, r1
 8005f1a:	333d      	adds	r3, #61	@ 0x3d
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	78fa      	ldrb	r2, [r7, #3]
 8005f20:	f083 0301 	eor.w	r3, r3, #1
 8005f24:	b2d8      	uxtb	r0, r3
 8005f26:	6879      	ldr	r1, [r7, #4]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	1a9b      	subs	r3, r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	440b      	add	r3, r1
 8005f32:	333d      	adds	r3, #61	@ 0x3d
 8005f34:	4602      	mov	r2, r0
 8005f36:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	799b      	ldrb	r3, [r3, #6]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	f040 8171 	bne.w	8006224 <HCD_HC_OUT_IRQHandler+0x954>
 8005f42:	78fa      	ldrb	r2, [r7, #3]
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	4613      	mov	r3, r2
 8005f48:	011b      	lsls	r3, r3, #4
 8005f4a:	1a9b      	subs	r3, r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	440b      	add	r3, r1
 8005f50:	3334      	adds	r3, #52	@ 0x34
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 8165 	beq.w	8006224 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005f5a:	78fa      	ldrb	r2, [r7, #3]
 8005f5c:	6879      	ldr	r1, [r7, #4]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	011b      	lsls	r3, r3, #4
 8005f62:	1a9b      	subs	r3, r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	440b      	add	r3, r1
 8005f68:	3334      	adds	r3, #52	@ 0x34
 8005f6a:	6819      	ldr	r1, [r3, #0]
 8005f6c:	78fa      	ldrb	r2, [r7, #3]
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	4613      	mov	r3, r2
 8005f72:	011b      	lsls	r3, r3, #4
 8005f74:	1a9b      	subs	r3, r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4403      	add	r3, r0
 8005f7a:	3328      	adds	r3, #40	@ 0x28
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	440b      	add	r3, r1
 8005f80:	1e59      	subs	r1, r3, #1
 8005f82:	78fa      	ldrb	r2, [r7, #3]
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	4613      	mov	r3, r2
 8005f88:	011b      	lsls	r3, r3, #4
 8005f8a:	1a9b      	subs	r3, r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4403      	add	r3, r0
 8005f90:	3328      	adds	r3, #40	@ 0x28
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f98:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 813f 	beq.w	8006224 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005fa6:	78fa      	ldrb	r2, [r7, #3]
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	4613      	mov	r3, r2
 8005fac:	011b      	lsls	r3, r3, #4
 8005fae:	1a9b      	subs	r3, r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	440b      	add	r3, r1
 8005fb4:	333d      	adds	r3, #61	@ 0x3d
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	78fa      	ldrb	r2, [r7, #3]
 8005fba:	f083 0301 	eor.w	r3, r3, #1
 8005fbe:	b2d8      	uxtb	r0, r3
 8005fc0:	6879      	ldr	r1, [r7, #4]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	1a9b      	subs	r3, r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	440b      	add	r3, r1
 8005fcc:	333d      	adds	r3, #61	@ 0x3d
 8005fce:	4602      	mov	r2, r0
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	e127      	b.n	8006224 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005fd4:	78fa      	ldrb	r2, [r7, #3]
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	1a9b      	subs	r3, r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	440b      	add	r3, r1
 8005fe2:	334d      	adds	r3, #77	@ 0x4d
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2b03      	cmp	r3, #3
 8005fe8:	d120      	bne.n	800602c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005fea:	78fa      	ldrb	r2, [r7, #3]
 8005fec:	6879      	ldr	r1, [r7, #4]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	1a9b      	subs	r3, r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	440b      	add	r3, r1
 8005ff8:	334d      	adds	r3, #77	@ 0x4d
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005ffe:	78fa      	ldrb	r2, [r7, #3]
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	4613      	mov	r3, r2
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	1a9b      	subs	r3, r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	440b      	add	r3, r1
 800600c:	331b      	adds	r3, #27
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b01      	cmp	r3, #1
 8006012:	f040 8107 	bne.w	8006224 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006016:	78fa      	ldrb	r2, [r7, #3]
 8006018:	6879      	ldr	r1, [r7, #4]
 800601a:	4613      	mov	r3, r2
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	1a9b      	subs	r3, r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	440b      	add	r3, r1
 8006024:	334c      	adds	r3, #76	@ 0x4c
 8006026:	2202      	movs	r2, #2
 8006028:	701a      	strb	r2, [r3, #0]
 800602a:	e0fb      	b.n	8006224 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800602c:	78fa      	ldrb	r2, [r7, #3]
 800602e:	6879      	ldr	r1, [r7, #4]
 8006030:	4613      	mov	r3, r2
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	1a9b      	subs	r3, r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	440b      	add	r3, r1
 800603a:	334d      	adds	r3, #77	@ 0x4d
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	2b04      	cmp	r3, #4
 8006040:	d13a      	bne.n	80060b8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006042:	78fa      	ldrb	r2, [r7, #3]
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	4613      	mov	r3, r2
 8006048:	011b      	lsls	r3, r3, #4
 800604a:	1a9b      	subs	r3, r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	440b      	add	r3, r1
 8006050:	334d      	adds	r3, #77	@ 0x4d
 8006052:	2202      	movs	r2, #2
 8006054:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006056:	78fa      	ldrb	r2, [r7, #3]
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	4613      	mov	r3, r2
 800605c:	011b      	lsls	r3, r3, #4
 800605e:	1a9b      	subs	r3, r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	440b      	add	r3, r1
 8006064:	334c      	adds	r3, #76	@ 0x4c
 8006066:	2202      	movs	r2, #2
 8006068:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800606a:	78fa      	ldrb	r2, [r7, #3]
 800606c:	6879      	ldr	r1, [r7, #4]
 800606e:	4613      	mov	r3, r2
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	1a9b      	subs	r3, r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	440b      	add	r3, r1
 8006078:	331b      	adds	r3, #27
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b01      	cmp	r3, #1
 800607e:	f040 80d1 	bne.w	8006224 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8006082:	78fa      	ldrb	r2, [r7, #3]
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	4613      	mov	r3, r2
 8006088:	011b      	lsls	r3, r3, #4
 800608a:	1a9b      	subs	r3, r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	440b      	add	r3, r1
 8006090:	331b      	adds	r3, #27
 8006092:	2200      	movs	r2, #0
 8006094:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006096:	78fb      	ldrb	r3, [r7, #3]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	4413      	add	r3, r2
 800609e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	78fa      	ldrb	r2, [r7, #3]
 80060a6:	0151      	lsls	r1, r2, #5
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	440a      	add	r2, r1
 80060ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060b4:	6053      	str	r3, [r2, #4]
 80060b6:	e0b5      	b.n	8006224 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80060b8:	78fa      	ldrb	r2, [r7, #3]
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	4613      	mov	r3, r2
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	1a9b      	subs	r3, r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	440b      	add	r3, r1
 80060c6:	334d      	adds	r3, #77	@ 0x4d
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	2b05      	cmp	r3, #5
 80060cc:	d114      	bne.n	80060f8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80060ce:	78fa      	ldrb	r2, [r7, #3]
 80060d0:	6879      	ldr	r1, [r7, #4]
 80060d2:	4613      	mov	r3, r2
 80060d4:	011b      	lsls	r3, r3, #4
 80060d6:	1a9b      	subs	r3, r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	440b      	add	r3, r1
 80060dc:	334d      	adds	r3, #77	@ 0x4d
 80060de:	2202      	movs	r2, #2
 80060e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80060e2:	78fa      	ldrb	r2, [r7, #3]
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	4613      	mov	r3, r2
 80060e8:	011b      	lsls	r3, r3, #4
 80060ea:	1a9b      	subs	r3, r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	440b      	add	r3, r1
 80060f0:	334c      	adds	r3, #76	@ 0x4c
 80060f2:	2202      	movs	r2, #2
 80060f4:	701a      	strb	r2, [r3, #0]
 80060f6:	e095      	b.n	8006224 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80060f8:	78fa      	ldrb	r2, [r7, #3]
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	4613      	mov	r3, r2
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	1a9b      	subs	r3, r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	440b      	add	r3, r1
 8006106:	334d      	adds	r3, #77	@ 0x4d
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b06      	cmp	r3, #6
 800610c:	d114      	bne.n	8006138 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800610e:	78fa      	ldrb	r2, [r7, #3]
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	4613      	mov	r3, r2
 8006114:	011b      	lsls	r3, r3, #4
 8006116:	1a9b      	subs	r3, r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	440b      	add	r3, r1
 800611c:	334d      	adds	r3, #77	@ 0x4d
 800611e:	2202      	movs	r2, #2
 8006120:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8006122:	78fa      	ldrb	r2, [r7, #3]
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	4613      	mov	r3, r2
 8006128:	011b      	lsls	r3, r3, #4
 800612a:	1a9b      	subs	r3, r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	440b      	add	r3, r1
 8006130:	334c      	adds	r3, #76	@ 0x4c
 8006132:	2205      	movs	r2, #5
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	e075      	b.n	8006224 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006138:	78fa      	ldrb	r2, [r7, #3]
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	4613      	mov	r3, r2
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	1a9b      	subs	r3, r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	440b      	add	r3, r1
 8006146:	334d      	adds	r3, #77	@ 0x4d
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	2b07      	cmp	r3, #7
 800614c:	d00a      	beq.n	8006164 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800614e:	78fa      	ldrb	r2, [r7, #3]
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	4613      	mov	r3, r2
 8006154:	011b      	lsls	r3, r3, #4
 8006156:	1a9b      	subs	r3, r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	440b      	add	r3, r1
 800615c:	334d      	adds	r3, #77	@ 0x4d
 800615e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006160:	2b09      	cmp	r3, #9
 8006162:	d170      	bne.n	8006246 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006164:	78fa      	ldrb	r2, [r7, #3]
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	4613      	mov	r3, r2
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	1a9b      	subs	r3, r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	440b      	add	r3, r1
 8006172:	334d      	adds	r3, #77	@ 0x4d
 8006174:	2202      	movs	r2, #2
 8006176:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006178:	78fa      	ldrb	r2, [r7, #3]
 800617a:	6879      	ldr	r1, [r7, #4]
 800617c:	4613      	mov	r3, r2
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	1a9b      	subs	r3, r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	440b      	add	r3, r1
 8006186:	3344      	adds	r3, #68	@ 0x44
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	1c59      	adds	r1, r3, #1
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	4613      	mov	r3, r2
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	1a9b      	subs	r3, r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4403      	add	r3, r0
 8006198:	3344      	adds	r3, #68	@ 0x44
 800619a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800619c:	78fa      	ldrb	r2, [r7, #3]
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	4613      	mov	r3, r2
 80061a2:	011b      	lsls	r3, r3, #4
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	440b      	add	r3, r1
 80061aa:	3344      	adds	r3, #68	@ 0x44
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d914      	bls.n	80061dc <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80061b2:	78fa      	ldrb	r2, [r7, #3]
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	4613      	mov	r3, r2
 80061b8:	011b      	lsls	r3, r3, #4
 80061ba:	1a9b      	subs	r3, r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	440b      	add	r3, r1
 80061c0:	3344      	adds	r3, #68	@ 0x44
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80061c6:	78fa      	ldrb	r2, [r7, #3]
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	4613      	mov	r3, r2
 80061cc:	011b      	lsls	r3, r3, #4
 80061ce:	1a9b      	subs	r3, r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	440b      	add	r3, r1
 80061d4:	334c      	adds	r3, #76	@ 0x4c
 80061d6:	2204      	movs	r2, #4
 80061d8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80061da:	e022      	b.n	8006222 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80061dc:	78fa      	ldrb	r2, [r7, #3]
 80061de:	6879      	ldr	r1, [r7, #4]
 80061e0:	4613      	mov	r3, r2
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	1a9b      	subs	r3, r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	440b      	add	r3, r1
 80061ea:	334c      	adds	r3, #76	@ 0x4c
 80061ec:	2202      	movs	r2, #2
 80061ee:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006206:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800620e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	4413      	add	r3, r2
 8006218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800621c:	461a      	mov	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006222:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006224:	78fa      	ldrb	r2, [r7, #3]
 8006226:	6879      	ldr	r1, [r7, #4]
 8006228:	4613      	mov	r3, r2
 800622a:	011b      	lsls	r3, r3, #4
 800622c:	1a9b      	subs	r3, r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	440b      	add	r3, r1
 8006232:	334c      	adds	r3, #76	@ 0x4c
 8006234:	781a      	ldrb	r2, [r3, #0]
 8006236:	78fb      	ldrb	r3, [r7, #3]
 8006238:	4619      	mov	r1, r3
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f006 fb56 	bl	800c8ec <HAL_HCD_HC_NotifyURBChange_Callback>
 8006240:	e002      	b.n	8006248 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8006242:	bf00      	nop
 8006244:	e000      	b.n	8006248 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8006246:	bf00      	nop
  }
}
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b08a      	sub	sp, #40	@ 0x28
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800625c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	f003 030f 	and.w	r3, r3, #15
 800626e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	0c5b      	lsrs	r3, r3, #17
 8006274:	f003 030f 	and.w	r3, r3, #15
 8006278:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	091b      	lsrs	r3, r3, #4
 800627e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006282:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	2b02      	cmp	r3, #2
 8006288:	d004      	beq.n	8006294 <HCD_RXQLVL_IRQHandler+0x46>
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2b05      	cmp	r3, #5
 800628e:	f000 80b6 	beq.w	80063fe <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006292:	e0b7      	b.n	8006404 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 80b3 	beq.w	8006402 <HCD_RXQLVL_IRQHandler+0x1b4>
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	4613      	mov	r3, r2
 80062a2:	011b      	lsls	r3, r3, #4
 80062a4:	1a9b      	subs	r3, r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	440b      	add	r3, r1
 80062aa:	332c      	adds	r3, #44	@ 0x2c
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 80a7 	beq.w	8006402 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	4613      	mov	r3, r2
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	440b      	add	r3, r1
 80062c2:	3338      	adds	r3, #56	@ 0x38
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	18d1      	adds	r1, r2, r3
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	4613      	mov	r3, r2
 80062d0:	011b      	lsls	r3, r3, #4
 80062d2:	1a9b      	subs	r3, r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4403      	add	r3, r0
 80062d8:	3334      	adds	r3, #52	@ 0x34
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4299      	cmp	r1, r3
 80062de:	f200 8083 	bhi.w	80063e8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6818      	ldr	r0, [r3, #0]
 80062e6:	6879      	ldr	r1, [r7, #4]
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	4613      	mov	r3, r2
 80062ec:	011b      	lsls	r3, r3, #4
 80062ee:	1a9b      	subs	r3, r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	440b      	add	r3, r1
 80062f4:	332c      	adds	r3, #44	@ 0x2c
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	b292      	uxth	r2, r2
 80062fc:	4619      	mov	r1, r3
 80062fe:	f002 fc43 	bl	8008b88 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	4613      	mov	r3, r2
 8006308:	011b      	lsls	r3, r3, #4
 800630a:	1a9b      	subs	r3, r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	440b      	add	r3, r1
 8006310:	332c      	adds	r3, #44	@ 0x2c
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	18d1      	adds	r1, r2, r3
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	4613      	mov	r3, r2
 800631e:	011b      	lsls	r3, r3, #4
 8006320:	1a9b      	subs	r3, r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4403      	add	r3, r0
 8006326:	332c      	adds	r3, #44	@ 0x2c
 8006328:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800632a:	6879      	ldr	r1, [r7, #4]
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	4613      	mov	r3, r2
 8006330:	011b      	lsls	r3, r3, #4
 8006332:	1a9b      	subs	r3, r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	440b      	add	r3, r1
 8006338:	3338      	adds	r3, #56	@ 0x38
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	18d1      	adds	r1, r2, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	4613      	mov	r3, r2
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	1a9b      	subs	r3, r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4403      	add	r3, r0
 800634e:	3338      	adds	r3, #56	@ 0x38
 8006350:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	4413      	add	r3, r2
 800635a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	0cdb      	lsrs	r3, r3, #19
 8006362:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006366:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006368:	6879      	ldr	r1, [r7, #4]
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	4613      	mov	r3, r2
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	1a9b      	subs	r3, r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	440b      	add	r3, r1
 8006376:	3328      	adds	r3, #40	@ 0x28
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	4293      	cmp	r3, r2
 8006380:	d13f      	bne.n	8006402 <HCD_RXQLVL_IRQHandler+0x1b4>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d03c      	beq.n	8006402 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	4413      	add	r3, r2
 8006390:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800639e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063a6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063b4:	461a      	mov	r2, r3
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80063ba:	6879      	ldr	r1, [r7, #4]
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	4613      	mov	r3, r2
 80063c0:	011b      	lsls	r3, r3, #4
 80063c2:	1a9b      	subs	r3, r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	440b      	add	r3, r1
 80063c8:	333c      	adds	r3, #60	@ 0x3c
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	f083 0301 	eor.w	r3, r3, #1
 80063d0:	b2d8      	uxtb	r0, r3
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	4613      	mov	r3, r2
 80063d8:	011b      	lsls	r3, r3, #4
 80063da:	1a9b      	subs	r3, r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	440b      	add	r3, r1
 80063e0:	333c      	adds	r3, #60	@ 0x3c
 80063e2:	4602      	mov	r2, r0
 80063e4:	701a      	strb	r2, [r3, #0]
      break;
 80063e6:	e00c      	b.n	8006402 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80063e8:	6879      	ldr	r1, [r7, #4]
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	4613      	mov	r3, r2
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	1a9b      	subs	r3, r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	440b      	add	r3, r1
 80063f6:	334c      	adds	r3, #76	@ 0x4c
 80063f8:	2204      	movs	r2, #4
 80063fa:	701a      	strb	r2, [r3, #0]
      break;
 80063fc:	e001      	b.n	8006402 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80063fe:	bf00      	nop
 8006400:	e000      	b.n	8006404 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8006402:	bf00      	nop
  }
}
 8006404:	bf00      	nop
 8006406:	3728      	adds	r7, #40	@ 0x28
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006438:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b02      	cmp	r3, #2
 8006442:	d10b      	bne.n	800645c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b01      	cmp	r3, #1
 800644c:	d102      	bne.n	8006454 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f006 fa30 	bl	800c8b4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f043 0302 	orr.w	r3, r3, #2
 800645a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f003 0308 	and.w	r3, r3, #8
 8006462:	2b08      	cmp	r3, #8
 8006464:	d132      	bne.n	80064cc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f043 0308 	orr.w	r3, r3, #8
 800646c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f003 0304 	and.w	r3, r3, #4
 8006474:	2b04      	cmp	r3, #4
 8006476:	d126      	bne.n	80064c6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	7a5b      	ldrb	r3, [r3, #9]
 800647c:	2b02      	cmp	r3, #2
 800647e:	d113      	bne.n	80064a8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8006486:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800648a:	d106      	bne.n	800649a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2102      	movs	r1, #2
 8006492:	4618      	mov	r0, r3
 8006494:	f002 fd08 	bl	8008ea8 <USB_InitFSLSPClkSel>
 8006498:	e011      	b.n	80064be <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2101      	movs	r1, #1
 80064a0:	4618      	mov	r0, r3
 80064a2:	f002 fd01 	bl	8008ea8 <USB_InitFSLSPClkSel>
 80064a6:	e00a      	b.n	80064be <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	79db      	ldrb	r3, [r3, #7]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d106      	bne.n	80064be <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064b6:	461a      	mov	r2, r3
 80064b8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80064bc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f006 fa22 	bl	800c908 <HAL_HCD_PortEnabled_Callback>
 80064c4:	e002      	b.n	80064cc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f006 fa2c 	bl	800c924 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f003 0320 	and.w	r3, r3, #32
 80064d2:	2b20      	cmp	r3, #32
 80064d4:	d103      	bne.n	80064de <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	f043 0320 	orr.w	r3, r3, #32
 80064dc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80064e4:	461a      	mov	r2, r3
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	6013      	str	r3, [r2, #0]
}
 80064ea:	bf00      	nop
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
	...

080064f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e267      	b.n	80069d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	d075      	beq.n	80065fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006512:	4b88      	ldr	r3, [pc, #544]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f003 030c 	and.w	r3, r3, #12
 800651a:	2b04      	cmp	r3, #4
 800651c:	d00c      	beq.n	8006538 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800651e:	4b85      	ldr	r3, [pc, #532]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006526:	2b08      	cmp	r3, #8
 8006528:	d112      	bne.n	8006550 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800652a:	4b82      	ldr	r3, [pc, #520]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006532:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006536:	d10b      	bne.n	8006550 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006538:	4b7e      	ldr	r3, [pc, #504]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d05b      	beq.n	80065fc <HAL_RCC_OscConfig+0x108>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d157      	bne.n	80065fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e242      	b.n	80069d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006558:	d106      	bne.n	8006568 <HAL_RCC_OscConfig+0x74>
 800655a:	4b76      	ldr	r3, [pc, #472]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a75      	ldr	r2, [pc, #468]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 8006560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006564:	6013      	str	r3, [r2, #0]
 8006566:	e01d      	b.n	80065a4 <HAL_RCC_OscConfig+0xb0>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006570:	d10c      	bne.n	800658c <HAL_RCC_OscConfig+0x98>
 8006572:	4b70      	ldr	r3, [pc, #448]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a6f      	ldr	r2, [pc, #444]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 8006578:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	4b6d      	ldr	r3, [pc, #436]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a6c      	ldr	r2, [pc, #432]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 8006584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	e00b      	b.n	80065a4 <HAL_RCC_OscConfig+0xb0>
 800658c:	4b69      	ldr	r3, [pc, #420]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a68      	ldr	r2, [pc, #416]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 8006592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	4b66      	ldr	r3, [pc, #408]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a65      	ldr	r2, [pc, #404]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 800659e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d013      	beq.n	80065d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ac:	f7fd f922 	bl	80037f4 <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065b2:	e008      	b.n	80065c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065b4:	f7fd f91e 	bl	80037f4 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b64      	cmp	r3, #100	@ 0x64
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e207      	b.n	80069d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065c6:	4b5b      	ldr	r3, [pc, #364]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0f0      	beq.n	80065b4 <HAL_RCC_OscConfig+0xc0>
 80065d2:	e014      	b.n	80065fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d4:	f7fd f90e 	bl	80037f4 <HAL_GetTick>
 80065d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065dc:	f7fd f90a 	bl	80037f4 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b64      	cmp	r3, #100	@ 0x64
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e1f3      	b.n	80069d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065ee:	4b51      	ldr	r3, [pc, #324]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1f0      	bne.n	80065dc <HAL_RCC_OscConfig+0xe8>
 80065fa:	e000      	b.n	80065fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d063      	beq.n	80066d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800660a:	4b4a      	ldr	r3, [pc, #296]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 030c 	and.w	r3, r3, #12
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00b      	beq.n	800662e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006616:	4b47      	ldr	r3, [pc, #284]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800661e:	2b08      	cmp	r3, #8
 8006620:	d11c      	bne.n	800665c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006622:	4b44      	ldr	r3, [pc, #272]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d116      	bne.n	800665c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800662e:	4b41      	ldr	r3, [pc, #260]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b00      	cmp	r3, #0
 8006638:	d005      	beq.n	8006646 <HAL_RCC_OscConfig+0x152>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d001      	beq.n	8006646 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e1c7      	b.n	80069d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006646:	4b3b      	ldr	r3, [pc, #236]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	4937      	ldr	r1, [pc, #220]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 8006656:	4313      	orrs	r3, r2
 8006658:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800665a:	e03a      	b.n	80066d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d020      	beq.n	80066a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006664:	4b34      	ldr	r3, [pc, #208]	@ (8006738 <HAL_RCC_OscConfig+0x244>)
 8006666:	2201      	movs	r2, #1
 8006668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800666a:	f7fd f8c3 	bl	80037f4 <HAL_GetTick>
 800666e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006670:	e008      	b.n	8006684 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006672:	f7fd f8bf 	bl	80037f4 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	2b02      	cmp	r3, #2
 800667e:	d901      	bls.n	8006684 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e1a8      	b.n	80069d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006684:	4b2b      	ldr	r3, [pc, #172]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d0f0      	beq.n	8006672 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006690:	4b28      	ldr	r3, [pc, #160]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	00db      	lsls	r3, r3, #3
 800669e:	4925      	ldr	r1, [pc, #148]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	600b      	str	r3, [r1, #0]
 80066a4:	e015      	b.n	80066d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066a6:	4b24      	ldr	r3, [pc, #144]	@ (8006738 <HAL_RCC_OscConfig+0x244>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ac:	f7fd f8a2 	bl	80037f4 <HAL_GetTick>
 80066b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066b2:	e008      	b.n	80066c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066b4:	f7fd f89e 	bl	80037f4 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d901      	bls.n	80066c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e187      	b.n	80069d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1f0      	bne.n	80066b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0308 	and.w	r3, r3, #8
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d036      	beq.n	800674c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d016      	beq.n	8006714 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066e6:	4b15      	ldr	r3, [pc, #84]	@ (800673c <HAL_RCC_OscConfig+0x248>)
 80066e8:	2201      	movs	r2, #1
 80066ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ec:	f7fd f882 	bl	80037f4 <HAL_GetTick>
 80066f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066f2:	e008      	b.n	8006706 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066f4:	f7fd f87e 	bl	80037f4 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d901      	bls.n	8006706 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e167      	b.n	80069d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006706:	4b0b      	ldr	r3, [pc, #44]	@ (8006734 <HAL_RCC_OscConfig+0x240>)
 8006708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0f0      	beq.n	80066f4 <HAL_RCC_OscConfig+0x200>
 8006712:	e01b      	b.n	800674c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006714:	4b09      	ldr	r3, [pc, #36]	@ (800673c <HAL_RCC_OscConfig+0x248>)
 8006716:	2200      	movs	r2, #0
 8006718:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800671a:	f7fd f86b 	bl	80037f4 <HAL_GetTick>
 800671e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006720:	e00e      	b.n	8006740 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006722:	f7fd f867 	bl	80037f4 <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	2b02      	cmp	r3, #2
 800672e:	d907      	bls.n	8006740 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e150      	b.n	80069d6 <HAL_RCC_OscConfig+0x4e2>
 8006734:	40023800 	.word	0x40023800
 8006738:	42470000 	.word	0x42470000
 800673c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006740:	4b88      	ldr	r3, [pc, #544]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 8006742:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006744:	f003 0302 	and.w	r3, r3, #2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1ea      	bne.n	8006722 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0304 	and.w	r3, r3, #4
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 8097 	beq.w	8006888 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800675a:	2300      	movs	r3, #0
 800675c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800675e:	4b81      	ldr	r3, [pc, #516]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 8006760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10f      	bne.n	800678a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800676a:	2300      	movs	r3, #0
 800676c:	60bb      	str	r3, [r7, #8]
 800676e:	4b7d      	ldr	r3, [pc, #500]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 8006770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006772:	4a7c      	ldr	r2, [pc, #496]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 8006774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006778:	6413      	str	r3, [r2, #64]	@ 0x40
 800677a:	4b7a      	ldr	r3, [pc, #488]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 800677c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006782:	60bb      	str	r3, [r7, #8]
 8006784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006786:	2301      	movs	r3, #1
 8006788:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800678a:	4b77      	ldr	r3, [pc, #476]	@ (8006968 <HAL_RCC_OscConfig+0x474>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006792:	2b00      	cmp	r3, #0
 8006794:	d118      	bne.n	80067c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006796:	4b74      	ldr	r3, [pc, #464]	@ (8006968 <HAL_RCC_OscConfig+0x474>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a73      	ldr	r2, [pc, #460]	@ (8006968 <HAL_RCC_OscConfig+0x474>)
 800679c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067a2:	f7fd f827 	bl	80037f4 <HAL_GetTick>
 80067a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067a8:	e008      	b.n	80067bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067aa:	f7fd f823 	bl	80037f4 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e10c      	b.n	80069d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067bc:	4b6a      	ldr	r3, [pc, #424]	@ (8006968 <HAL_RCC_OscConfig+0x474>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d0f0      	beq.n	80067aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d106      	bne.n	80067de <HAL_RCC_OscConfig+0x2ea>
 80067d0:	4b64      	ldr	r3, [pc, #400]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 80067d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067d4:	4a63      	ldr	r2, [pc, #396]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 80067d6:	f043 0301 	orr.w	r3, r3, #1
 80067da:	6713      	str	r3, [r2, #112]	@ 0x70
 80067dc:	e01c      	b.n	8006818 <HAL_RCC_OscConfig+0x324>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	2b05      	cmp	r3, #5
 80067e4:	d10c      	bne.n	8006800 <HAL_RCC_OscConfig+0x30c>
 80067e6:	4b5f      	ldr	r3, [pc, #380]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 80067e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ea:	4a5e      	ldr	r2, [pc, #376]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 80067ec:	f043 0304 	orr.w	r3, r3, #4
 80067f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80067f2:	4b5c      	ldr	r3, [pc, #368]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 80067f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067f6:	4a5b      	ldr	r2, [pc, #364]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 80067f8:	f043 0301 	orr.w	r3, r3, #1
 80067fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80067fe:	e00b      	b.n	8006818 <HAL_RCC_OscConfig+0x324>
 8006800:	4b58      	ldr	r3, [pc, #352]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 8006802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006804:	4a57      	ldr	r2, [pc, #348]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 8006806:	f023 0301 	bic.w	r3, r3, #1
 800680a:	6713      	str	r3, [r2, #112]	@ 0x70
 800680c:	4b55      	ldr	r3, [pc, #340]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 800680e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006810:	4a54      	ldr	r2, [pc, #336]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 8006812:	f023 0304 	bic.w	r3, r3, #4
 8006816:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d015      	beq.n	800684c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006820:	f7fc ffe8 	bl	80037f4 <HAL_GetTick>
 8006824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006826:	e00a      	b.n	800683e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006828:	f7fc ffe4 	bl	80037f4 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006836:	4293      	cmp	r3, r2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e0cb      	b.n	80069d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800683e:	4b49      	ldr	r3, [pc, #292]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 8006840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0ee      	beq.n	8006828 <HAL_RCC_OscConfig+0x334>
 800684a:	e014      	b.n	8006876 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800684c:	f7fc ffd2 	bl	80037f4 <HAL_GetTick>
 8006850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006852:	e00a      	b.n	800686a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006854:	f7fc ffce 	bl	80037f4 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006862:	4293      	cmp	r3, r2
 8006864:	d901      	bls.n	800686a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e0b5      	b.n	80069d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800686a:	4b3e      	ldr	r3, [pc, #248]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 800686c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1ee      	bne.n	8006854 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006876:	7dfb      	ldrb	r3, [r7, #23]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d105      	bne.n	8006888 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800687c:	4b39      	ldr	r3, [pc, #228]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 800687e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006880:	4a38      	ldr	r2, [pc, #224]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 8006882:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006886:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 80a1 	beq.w	80069d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006892:	4b34      	ldr	r3, [pc, #208]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f003 030c 	and.w	r3, r3, #12
 800689a:	2b08      	cmp	r3, #8
 800689c:	d05c      	beq.n	8006958 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d141      	bne.n	800692a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068a6:	4b31      	ldr	r3, [pc, #196]	@ (800696c <HAL_RCC_OscConfig+0x478>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ac:	f7fc ffa2 	bl	80037f4 <HAL_GetTick>
 80068b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068b2:	e008      	b.n	80068c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068b4:	f7fc ff9e 	bl	80037f4 <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d901      	bls.n	80068c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e087      	b.n	80069d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068c6:	4b27      	ldr	r3, [pc, #156]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1f0      	bne.n	80068b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	69da      	ldr	r2, [r3, #28]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e0:	019b      	lsls	r3, r3, #6
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e8:	085b      	lsrs	r3, r3, #1
 80068ea:	3b01      	subs	r3, #1
 80068ec:	041b      	lsls	r3, r3, #16
 80068ee:	431a      	orrs	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f4:	061b      	lsls	r3, r3, #24
 80068f6:	491b      	ldr	r1, [pc, #108]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068fc:	4b1b      	ldr	r3, [pc, #108]	@ (800696c <HAL_RCC_OscConfig+0x478>)
 80068fe:	2201      	movs	r2, #1
 8006900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006902:	f7fc ff77 	bl	80037f4 <HAL_GetTick>
 8006906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006908:	e008      	b.n	800691c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800690a:	f7fc ff73 	bl	80037f4 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d901      	bls.n	800691c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e05c      	b.n	80069d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800691c:	4b11      	ldr	r3, [pc, #68]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d0f0      	beq.n	800690a <HAL_RCC_OscConfig+0x416>
 8006928:	e054      	b.n	80069d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800692a:	4b10      	ldr	r3, [pc, #64]	@ (800696c <HAL_RCC_OscConfig+0x478>)
 800692c:	2200      	movs	r2, #0
 800692e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006930:	f7fc ff60 	bl	80037f4 <HAL_GetTick>
 8006934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006936:	e008      	b.n	800694a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006938:	f7fc ff5c 	bl	80037f4 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	2b02      	cmp	r3, #2
 8006944:	d901      	bls.n	800694a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e045      	b.n	80069d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800694a:	4b06      	ldr	r3, [pc, #24]	@ (8006964 <HAL_RCC_OscConfig+0x470>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1f0      	bne.n	8006938 <HAL_RCC_OscConfig+0x444>
 8006956:	e03d      	b.n	80069d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d107      	bne.n	8006970 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e038      	b.n	80069d6 <HAL_RCC_OscConfig+0x4e2>
 8006964:	40023800 	.word	0x40023800
 8006968:	40007000 	.word	0x40007000
 800696c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006970:	4b1b      	ldr	r3, [pc, #108]	@ (80069e0 <HAL_RCC_OscConfig+0x4ec>)
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d028      	beq.n	80069d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006988:	429a      	cmp	r2, r3
 800698a:	d121      	bne.n	80069d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006996:	429a      	cmp	r2, r3
 8006998:	d11a      	bne.n	80069d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80069a0:	4013      	ands	r3, r2
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80069a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d111      	bne.n	80069d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b6:	085b      	lsrs	r3, r3, #1
 80069b8:	3b01      	subs	r3, #1
 80069ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069bc:	429a      	cmp	r2, r3
 80069be:	d107      	bne.n	80069d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d001      	beq.n	80069d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e000      	b.n	80069d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3718      	adds	r7, #24
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	40023800 	.word	0x40023800

080069e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e0cc      	b.n	8006b92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069f8:	4b68      	ldr	r3, [pc, #416]	@ (8006b9c <HAL_RCC_ClockConfig+0x1b8>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 030f 	and.w	r3, r3, #15
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d90c      	bls.n	8006a20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a06:	4b65      	ldr	r3, [pc, #404]	@ (8006b9c <HAL_RCC_ClockConfig+0x1b8>)
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a0e:	4b63      	ldr	r3, [pc, #396]	@ (8006b9c <HAL_RCC_ClockConfig+0x1b8>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 030f 	and.w	r3, r3, #15
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d001      	beq.n	8006a20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e0b8      	b.n	8006b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d020      	beq.n	8006a6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0304 	and.w	r3, r3, #4
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d005      	beq.n	8006a44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a38:	4b59      	ldr	r3, [pc, #356]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	4a58      	ldr	r2, [pc, #352]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006a42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0308 	and.w	r3, r3, #8
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d005      	beq.n	8006a5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a50:	4b53      	ldr	r3, [pc, #332]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	4a52      	ldr	r2, [pc, #328]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006a5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a5c:	4b50      	ldr	r3, [pc, #320]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	494d      	ldr	r1, [pc, #308]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d044      	beq.n	8006b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d107      	bne.n	8006a92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a82:	4b47      	ldr	r3, [pc, #284]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d119      	bne.n	8006ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e07f      	b.n	8006b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d003      	beq.n	8006aa2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d107      	bne.n	8006ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aa2:	4b3f      	ldr	r3, [pc, #252]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d109      	bne.n	8006ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e06f      	b.n	8006b92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e067      	b.n	8006b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ac2:	4b37      	ldr	r3, [pc, #220]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f023 0203 	bic.w	r2, r3, #3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	4934      	ldr	r1, [pc, #208]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ad4:	f7fc fe8e 	bl	80037f4 <HAL_GetTick>
 8006ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ada:	e00a      	b.n	8006af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006adc:	f7fc fe8a 	bl	80037f4 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e04f      	b.n	8006b92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006af2:	4b2b      	ldr	r3, [pc, #172]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f003 020c 	and.w	r2, r3, #12
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d1eb      	bne.n	8006adc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b04:	4b25      	ldr	r3, [pc, #148]	@ (8006b9c <HAL_RCC_ClockConfig+0x1b8>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 030f 	and.w	r3, r3, #15
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d20c      	bcs.n	8006b2c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b12:	4b22      	ldr	r3, [pc, #136]	@ (8006b9c <HAL_RCC_ClockConfig+0x1b8>)
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	b2d2      	uxtb	r2, r2
 8006b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b1a:	4b20      	ldr	r3, [pc, #128]	@ (8006b9c <HAL_RCC_ClockConfig+0x1b8>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 030f 	and.w	r3, r3, #15
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d001      	beq.n	8006b2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e032      	b.n	8006b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0304 	and.w	r3, r3, #4
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d008      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b38:	4b19      	ldr	r3, [pc, #100]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	4916      	ldr	r1, [pc, #88]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d009      	beq.n	8006b6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b56:	4b12      	ldr	r3, [pc, #72]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	490e      	ldr	r1, [pc, #56]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b6a:	f000 f821 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	091b      	lsrs	r3, r3, #4
 8006b76:	f003 030f 	and.w	r3, r3, #15
 8006b7a:	490a      	ldr	r1, [pc, #40]	@ (8006ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8006b7c:	5ccb      	ldrb	r3, [r1, r3]
 8006b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b82:	4a09      	ldr	r2, [pc, #36]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8006b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006b86:	4b09      	ldr	r3, [pc, #36]	@ (8006bac <HAL_RCC_ClockConfig+0x1c8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fc fdee 	bl	800376c <HAL_InitTick>

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	40023c00 	.word	0x40023c00
 8006ba0:	40023800 	.word	0x40023800
 8006ba4:	080107e4 	.word	0x080107e4
 8006ba8:	20000210 	.word	0x20000210
 8006bac:	20000214 	.word	0x20000214

08006bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bb4:	b094      	sub	sp, #80	@ 0x50
 8006bb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bc8:	4b79      	ldr	r3, [pc, #484]	@ (8006db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f003 030c 	and.w	r3, r3, #12
 8006bd0:	2b08      	cmp	r3, #8
 8006bd2:	d00d      	beq.n	8006bf0 <HAL_RCC_GetSysClockFreq+0x40>
 8006bd4:	2b08      	cmp	r3, #8
 8006bd6:	f200 80e1 	bhi.w	8006d9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d002      	beq.n	8006be4 <HAL_RCC_GetSysClockFreq+0x34>
 8006bde:	2b04      	cmp	r3, #4
 8006be0:	d003      	beq.n	8006bea <HAL_RCC_GetSysClockFreq+0x3a>
 8006be2:	e0db      	b.n	8006d9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006be4:	4b73      	ldr	r3, [pc, #460]	@ (8006db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006be6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006be8:	e0db      	b.n	8006da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006bea:	4b72      	ldr	r3, [pc, #456]	@ (8006db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006bec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006bee:	e0d8      	b.n	8006da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bf0:	4b6f      	ldr	r3, [pc, #444]	@ (8006db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bf8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bfa:	4b6d      	ldr	r3, [pc, #436]	@ (8006db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d063      	beq.n	8006cce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c06:	4b6a      	ldr	r3, [pc, #424]	@ (8006db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	099b      	lsrs	r3, r3, #6
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c18:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006c22:	4622      	mov	r2, r4
 8006c24:	462b      	mov	r3, r5
 8006c26:	f04f 0000 	mov.w	r0, #0
 8006c2a:	f04f 0100 	mov.w	r1, #0
 8006c2e:	0159      	lsls	r1, r3, #5
 8006c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c34:	0150      	lsls	r0, r2, #5
 8006c36:	4602      	mov	r2, r0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	1a51      	subs	r1, r2, r1
 8006c3e:	6139      	str	r1, [r7, #16]
 8006c40:	4629      	mov	r1, r5
 8006c42:	eb63 0301 	sbc.w	r3, r3, r1
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	f04f 0200 	mov.w	r2, #0
 8006c4c:	f04f 0300 	mov.w	r3, #0
 8006c50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c54:	4659      	mov	r1, fp
 8006c56:	018b      	lsls	r3, r1, #6
 8006c58:	4651      	mov	r1, sl
 8006c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c5e:	4651      	mov	r1, sl
 8006c60:	018a      	lsls	r2, r1, #6
 8006c62:	4651      	mov	r1, sl
 8006c64:	ebb2 0801 	subs.w	r8, r2, r1
 8006c68:	4659      	mov	r1, fp
 8006c6a:	eb63 0901 	sbc.w	r9, r3, r1
 8006c6e:	f04f 0200 	mov.w	r2, #0
 8006c72:	f04f 0300 	mov.w	r3, #0
 8006c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c82:	4690      	mov	r8, r2
 8006c84:	4699      	mov	r9, r3
 8006c86:	4623      	mov	r3, r4
 8006c88:	eb18 0303 	adds.w	r3, r8, r3
 8006c8c:	60bb      	str	r3, [r7, #8]
 8006c8e:	462b      	mov	r3, r5
 8006c90:	eb49 0303 	adc.w	r3, r9, r3
 8006c94:	60fb      	str	r3, [r7, #12]
 8006c96:	f04f 0200 	mov.w	r2, #0
 8006c9a:	f04f 0300 	mov.w	r3, #0
 8006c9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006ca2:	4629      	mov	r1, r5
 8006ca4:	028b      	lsls	r3, r1, #10
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006cac:	4621      	mov	r1, r4
 8006cae:	028a      	lsls	r2, r1, #10
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006cc0:	f7f9 faee 	bl	80002a0 <__aeabi_uldivmod>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	4613      	mov	r3, r2
 8006cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ccc:	e058      	b.n	8006d80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cce:	4b38      	ldr	r3, [pc, #224]	@ (8006db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	099b      	lsrs	r3, r3, #6
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	4611      	mov	r1, r2
 8006cda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006cde:	623b      	str	r3, [r7, #32]
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ce4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ce8:	4642      	mov	r2, r8
 8006cea:	464b      	mov	r3, r9
 8006cec:	f04f 0000 	mov.w	r0, #0
 8006cf0:	f04f 0100 	mov.w	r1, #0
 8006cf4:	0159      	lsls	r1, r3, #5
 8006cf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cfa:	0150      	lsls	r0, r2, #5
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4641      	mov	r1, r8
 8006d02:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d06:	4649      	mov	r1, r9
 8006d08:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d0c:	f04f 0200 	mov.w	r2, #0
 8006d10:	f04f 0300 	mov.w	r3, #0
 8006d14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d20:	ebb2 040a 	subs.w	r4, r2, sl
 8006d24:	eb63 050b 	sbc.w	r5, r3, fp
 8006d28:	f04f 0200 	mov.w	r2, #0
 8006d2c:	f04f 0300 	mov.w	r3, #0
 8006d30:	00eb      	lsls	r3, r5, #3
 8006d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d36:	00e2      	lsls	r2, r4, #3
 8006d38:	4614      	mov	r4, r2
 8006d3a:	461d      	mov	r5, r3
 8006d3c:	4643      	mov	r3, r8
 8006d3e:	18e3      	adds	r3, r4, r3
 8006d40:	603b      	str	r3, [r7, #0]
 8006d42:	464b      	mov	r3, r9
 8006d44:	eb45 0303 	adc.w	r3, r5, r3
 8006d48:	607b      	str	r3, [r7, #4]
 8006d4a:	f04f 0200 	mov.w	r2, #0
 8006d4e:	f04f 0300 	mov.w	r3, #0
 8006d52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d56:	4629      	mov	r1, r5
 8006d58:	028b      	lsls	r3, r1, #10
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d60:	4621      	mov	r1, r4
 8006d62:	028a      	lsls	r2, r1, #10
 8006d64:	4610      	mov	r0, r2
 8006d66:	4619      	mov	r1, r3
 8006d68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	61bb      	str	r3, [r7, #24]
 8006d6e:	61fa      	str	r2, [r7, #28]
 8006d70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d74:	f7f9 fa94 	bl	80002a0 <__aeabi_uldivmod>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006d80:	4b0b      	ldr	r3, [pc, #44]	@ (8006db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	0c1b      	lsrs	r3, r3, #16
 8006d86:	f003 0303 	and.w	r3, r3, #3
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	005b      	lsls	r3, r3, #1
 8006d8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006d90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d9a:	e002      	b.n	8006da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d9c:	4b05      	ldr	r3, [pc, #20]	@ (8006db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006da2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3750      	adds	r7, #80	@ 0x50
 8006da8:	46bd      	mov	sp, r7
 8006daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dae:	bf00      	nop
 8006db0:	40023800 	.word	0x40023800
 8006db4:	00f42400 	.word	0x00f42400

08006db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006db8:	b480      	push	{r7}
 8006dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006dbc:	4b03      	ldr	r3, [pc, #12]	@ (8006dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	20000210 	.word	0x20000210

08006dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006dd4:	f7ff fff0 	bl	8006db8 <HAL_RCC_GetHCLKFreq>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	4b05      	ldr	r3, [pc, #20]	@ (8006df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	0a9b      	lsrs	r3, r3, #10
 8006de0:	f003 0307 	and.w	r3, r3, #7
 8006de4:	4903      	ldr	r1, [pc, #12]	@ (8006df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006de6:	5ccb      	ldrb	r3, [r1, r3]
 8006de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	40023800 	.word	0x40023800
 8006df4:	080107f4 	.word	0x080107f4

08006df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006dfc:	f7ff ffdc 	bl	8006db8 <HAL_RCC_GetHCLKFreq>
 8006e00:	4602      	mov	r2, r0
 8006e02:	4b05      	ldr	r3, [pc, #20]	@ (8006e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	0b5b      	lsrs	r3, r3, #13
 8006e08:	f003 0307 	and.w	r3, r3, #7
 8006e0c:	4903      	ldr	r1, [pc, #12]	@ (8006e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e0e:	5ccb      	ldrb	r3, [r1, r3]
 8006e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	40023800 	.word	0x40023800
 8006e1c:	080107f4 	.word	0x080107f4

08006e20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d101      	bne.n	8006e32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e07b      	b.n	8006f2a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d108      	bne.n	8006e4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e42:	d009      	beq.n	8006e58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	61da      	str	r2, [r3, #28]
 8006e4a:	e005      	b.n	8006e58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d106      	bne.n	8006e78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7fc fa12 	bl	800329c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006ea0:	431a      	orrs	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	f003 0302 	and.w	r3, r3, #2
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a1b      	ldr	r3, [r3, #32]
 8006ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006edc:	ea42 0103 	orr.w	r1, r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	430a      	orrs	r2, r1
 8006eee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	0c1b      	lsrs	r3, r3, #16
 8006ef6:	f003 0104 	and.w	r1, r3, #4
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efe:	f003 0210 	and.w	r2, r3, #16
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	69da      	ldr	r2, [r3, #28]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b088      	sub	sp, #32
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	60f8      	str	r0, [r7, #12]
 8006f3a:	60b9      	str	r1, [r7, #8]
 8006f3c:	603b      	str	r3, [r7, #0]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f42:	f7fc fc57 	bl	80037f4 <HAL_GetTick>
 8006f46:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006f48:	88fb      	ldrh	r3, [r7, #6]
 8006f4a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d001      	beq.n	8006f5c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006f58:	2302      	movs	r3, #2
 8006f5a:	e12a      	b.n	80071b2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d002      	beq.n	8006f68 <HAL_SPI_Transmit+0x36>
 8006f62:	88fb      	ldrh	r3, [r7, #6]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e122      	b.n	80071b2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d101      	bne.n	8006f7a <HAL_SPI_Transmit+0x48>
 8006f76:	2302      	movs	r3, #2
 8006f78:	e11b      	b.n	80071b2 <HAL_SPI_Transmit+0x280>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2203      	movs	r2, #3
 8006f86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	88fa      	ldrh	r2, [r7, #6]
 8006f9a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	88fa      	ldrh	r2, [r7, #6]
 8006fa0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fc8:	d10f      	bne.n	8006fea <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fe8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff4:	2b40      	cmp	r3, #64	@ 0x40
 8006ff6:	d007      	beq.n	8007008 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007006:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007010:	d152      	bne.n	80070b8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <HAL_SPI_Transmit+0xee>
 800701a:	8b7b      	ldrh	r3, [r7, #26]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d145      	bne.n	80070ac <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007024:	881a      	ldrh	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007030:	1c9a      	adds	r2, r3, #2
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800703a:	b29b      	uxth	r3, r3
 800703c:	3b01      	subs	r3, #1
 800703e:	b29a      	uxth	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007044:	e032      	b.n	80070ac <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f003 0302 	and.w	r3, r3, #2
 8007050:	2b02      	cmp	r3, #2
 8007052:	d112      	bne.n	800707a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007058:	881a      	ldrh	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007064:	1c9a      	adds	r2, r3, #2
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800706e:	b29b      	uxth	r3, r3
 8007070:	3b01      	subs	r3, #1
 8007072:	b29a      	uxth	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007078:	e018      	b.n	80070ac <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800707a:	f7fc fbbb 	bl	80037f4 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	683a      	ldr	r2, [r7, #0]
 8007086:	429a      	cmp	r2, r3
 8007088:	d803      	bhi.n	8007092 <HAL_SPI_Transmit+0x160>
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007090:	d102      	bne.n	8007098 <HAL_SPI_Transmit+0x166>
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d109      	bne.n	80070ac <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e082      	b.n	80071b2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1c7      	bne.n	8007046 <HAL_SPI_Transmit+0x114>
 80070b6:	e053      	b.n	8007160 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d002      	beq.n	80070c6 <HAL_SPI_Transmit+0x194>
 80070c0:	8b7b      	ldrh	r3, [r7, #26]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d147      	bne.n	8007156 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	330c      	adds	r3, #12
 80070d0:	7812      	ldrb	r2, [r2, #0]
 80070d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d8:	1c5a      	adds	r2, r3, #1
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	3b01      	subs	r3, #1
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80070ec:	e033      	b.n	8007156 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f003 0302 	and.w	r3, r3, #2
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d113      	bne.n	8007124 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	330c      	adds	r3, #12
 8007106:	7812      	ldrb	r2, [r2, #0]
 8007108:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007118:	b29b      	uxth	r3, r3
 800711a:	3b01      	subs	r3, #1
 800711c:	b29a      	uxth	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007122:	e018      	b.n	8007156 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007124:	f7fc fb66 	bl	80037f4 <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	429a      	cmp	r2, r3
 8007132:	d803      	bhi.n	800713c <HAL_SPI_Transmit+0x20a>
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713a:	d102      	bne.n	8007142 <HAL_SPI_Transmit+0x210>
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d109      	bne.n	8007156 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e02d      	b.n	80071b2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800715a:	b29b      	uxth	r3, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1c6      	bne.n	80070ee <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007160:	69fa      	ldr	r2, [r7, #28]
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 fa59 	bl	800761c <SPI_EndRxTxTransaction>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2220      	movs	r2, #32
 8007174:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10a      	bne.n	8007194 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800717e:	2300      	movs	r3, #0
 8007180:	617b      	str	r3, [r7, #20]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	617b      	str	r3, [r7, #20]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	617b      	str	r3, [r7, #20]
 8007192:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d001      	beq.n	80071b0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e000      	b.n	80071b2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80071b0:	2300      	movs	r3, #0
  }
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3720      	adds	r7, #32
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b08a      	sub	sp, #40	@ 0x28
 80071be:	af00      	add	r7, sp, #0
 80071c0:	60f8      	str	r0, [r7, #12]
 80071c2:	60b9      	str	r1, [r7, #8]
 80071c4:	607a      	str	r2, [r7, #4]
 80071c6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071c8:	2301      	movs	r3, #1
 80071ca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071cc:	f7fc fb12 	bl	80037f4 <HAL_GetTick>
 80071d0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071d8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80071e0:	887b      	ldrh	r3, [r7, #2]
 80071e2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071e4:	7ffb      	ldrb	r3, [r7, #31]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d00c      	beq.n	8007204 <HAL_SPI_TransmitReceive+0x4a>
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071f0:	d106      	bne.n	8007200 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d102      	bne.n	8007200 <HAL_SPI_TransmitReceive+0x46>
 80071fa:	7ffb      	ldrb	r3, [r7, #31]
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d001      	beq.n	8007204 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007200:	2302      	movs	r3, #2
 8007202:	e17f      	b.n	8007504 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d005      	beq.n	8007216 <HAL_SPI_TransmitReceive+0x5c>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <HAL_SPI_TransmitReceive+0x5c>
 8007210:	887b      	ldrh	r3, [r7, #2]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e174      	b.n	8007504 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007220:	2b01      	cmp	r3, #1
 8007222:	d101      	bne.n	8007228 <HAL_SPI_TransmitReceive+0x6e>
 8007224:	2302      	movs	r3, #2
 8007226:	e16d      	b.n	8007504 <HAL_SPI_TransmitReceive+0x34a>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b04      	cmp	r3, #4
 800723a:	d003      	beq.n	8007244 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2205      	movs	r2, #5
 8007240:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	887a      	ldrh	r2, [r7, #2]
 8007254:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	887a      	ldrh	r2, [r7, #2]
 800725a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	887a      	ldrh	r2, [r7, #2]
 8007266:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	887a      	ldrh	r2, [r7, #2]
 800726c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007284:	2b40      	cmp	r3, #64	@ 0x40
 8007286:	d007      	beq.n	8007298 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007296:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072a0:	d17e      	bne.n	80073a0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d002      	beq.n	80072b0 <HAL_SPI_TransmitReceive+0xf6>
 80072aa:	8afb      	ldrh	r3, [r7, #22]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d16c      	bne.n	800738a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b4:	881a      	ldrh	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c0:	1c9a      	adds	r2, r3, #2
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	3b01      	subs	r3, #1
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072d4:	e059      	b.n	800738a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f003 0302 	and.w	r3, r3, #2
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d11b      	bne.n	800731c <HAL_SPI_TransmitReceive+0x162>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d016      	beq.n	800731c <HAL_SPI_TransmitReceive+0x162>
 80072ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d113      	bne.n	800731c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072f8:	881a      	ldrh	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007304:	1c9a      	adds	r2, r3, #2
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800730e:	b29b      	uxth	r3, r3
 8007310:	3b01      	subs	r3, #1
 8007312:	b29a      	uxth	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007318:	2300      	movs	r3, #0
 800731a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b01      	cmp	r3, #1
 8007328:	d119      	bne.n	800735e <HAL_SPI_TransmitReceive+0x1a4>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800732e:	b29b      	uxth	r3, r3
 8007330:	2b00      	cmp	r3, #0
 8007332:	d014      	beq.n	800735e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68da      	ldr	r2, [r3, #12]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800733e:	b292      	uxth	r2, r2
 8007340:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007346:	1c9a      	adds	r2, r3, #2
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007350:	b29b      	uxth	r3, r3
 8007352:	3b01      	subs	r3, #1
 8007354:	b29a      	uxth	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800735a:	2301      	movs	r3, #1
 800735c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800735e:	f7fc fa49 	bl	80037f4 <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800736a:	429a      	cmp	r2, r3
 800736c:	d80d      	bhi.n	800738a <HAL_SPI_TransmitReceive+0x1d0>
 800736e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007374:	d009      	beq.n	800738a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2201      	movs	r2, #1
 800737a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e0bc      	b.n	8007504 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800738e:	b29b      	uxth	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1a0      	bne.n	80072d6 <HAL_SPI_TransmitReceive+0x11c>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007398:	b29b      	uxth	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d19b      	bne.n	80072d6 <HAL_SPI_TransmitReceive+0x11c>
 800739e:	e082      	b.n	80074a6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <HAL_SPI_TransmitReceive+0x1f4>
 80073a8:	8afb      	ldrh	r3, [r7, #22]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d171      	bne.n	8007492 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	330c      	adds	r3, #12
 80073b8:	7812      	ldrb	r2, [r2, #0]
 80073ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c0:	1c5a      	adds	r2, r3, #1
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	3b01      	subs	r3, #1
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073d4:	e05d      	b.n	8007492 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d11c      	bne.n	800741e <HAL_SPI_TransmitReceive+0x264>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d017      	beq.n	800741e <HAL_SPI_TransmitReceive+0x264>
 80073ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d114      	bne.n	800741e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	330c      	adds	r3, #12
 80073fe:	7812      	ldrb	r2, [r2, #0]
 8007400:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007406:	1c5a      	adds	r2, r3, #1
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007410:	b29b      	uxth	r3, r3
 8007412:	3b01      	subs	r3, #1
 8007414:	b29a      	uxth	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b01      	cmp	r3, #1
 800742a:	d119      	bne.n	8007460 <HAL_SPI_TransmitReceive+0x2a6>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007430:	b29b      	uxth	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d014      	beq.n	8007460 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68da      	ldr	r2, [r3, #12]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007440:	b2d2      	uxtb	r2, r2
 8007442:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007448:	1c5a      	adds	r2, r3, #1
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007452:	b29b      	uxth	r3, r3
 8007454:	3b01      	subs	r3, #1
 8007456:	b29a      	uxth	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800745c:	2301      	movs	r3, #1
 800745e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007460:	f7fc f9c8 	bl	80037f4 <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	6a3b      	ldr	r3, [r7, #32]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800746c:	429a      	cmp	r2, r3
 800746e:	d803      	bhi.n	8007478 <HAL_SPI_TransmitReceive+0x2be>
 8007470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007476:	d102      	bne.n	800747e <HAL_SPI_TransmitReceive+0x2c4>
 8007478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747a:	2b00      	cmp	r3, #0
 800747c:	d109      	bne.n	8007492 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e038      	b.n	8007504 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007496:	b29b      	uxth	r3, r3
 8007498:	2b00      	cmp	r3, #0
 800749a:	d19c      	bne.n	80073d6 <HAL_SPI_TransmitReceive+0x21c>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d197      	bne.n	80073d6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074a6:	6a3a      	ldr	r2, [r7, #32]
 80074a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f000 f8b6 	bl	800761c <SPI_EndRxTxTransaction>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d008      	beq.n	80074c8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2220      	movs	r2, #32
 80074ba:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e01d      	b.n	8007504 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10a      	bne.n	80074e6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074d0:	2300      	movs	r3, #0
 80074d2:	613b      	str	r3, [r7, #16]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	613b      	str	r3, [r7, #16]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	613b      	str	r3, [r7, #16]
 80074e4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e000      	b.n	8007504 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007502:	2300      	movs	r3, #0
  }
}
 8007504:	4618      	mov	r0, r3
 8007506:	3728      	adds	r7, #40	@ 0x28
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b088      	sub	sp, #32
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	603b      	str	r3, [r7, #0]
 8007518:	4613      	mov	r3, r2
 800751a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800751c:	f7fc f96a 	bl	80037f4 <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007524:	1a9b      	subs	r3, r3, r2
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	4413      	add	r3, r2
 800752a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800752c:	f7fc f962 	bl	80037f4 <HAL_GetTick>
 8007530:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007532:	4b39      	ldr	r3, [pc, #228]	@ (8007618 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	015b      	lsls	r3, r3, #5
 8007538:	0d1b      	lsrs	r3, r3, #20
 800753a:	69fa      	ldr	r2, [r7, #28]
 800753c:	fb02 f303 	mul.w	r3, r2, r3
 8007540:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007542:	e054      	b.n	80075ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754a:	d050      	beq.n	80075ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800754c:	f7fc f952 	bl	80037f4 <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	69fa      	ldr	r2, [r7, #28]
 8007558:	429a      	cmp	r2, r3
 800755a:	d902      	bls.n	8007562 <SPI_WaitFlagStateUntilTimeout+0x56>
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d13d      	bne.n	80075de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007570:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800757a:	d111      	bne.n	80075a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007584:	d004      	beq.n	8007590 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800758e:	d107      	bne.n	80075a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800759e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075a8:	d10f      	bne.n	80075ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e017      	b.n	800760e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80075e4:	2300      	movs	r3, #0
 80075e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	3b01      	subs	r3, #1
 80075ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	689a      	ldr	r2, [r3, #8]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	4013      	ands	r3, r2
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	bf0c      	ite	eq
 80075fe:	2301      	moveq	r3, #1
 8007600:	2300      	movne	r3, #0
 8007602:	b2db      	uxtb	r3, r3
 8007604:	461a      	mov	r2, r3
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	429a      	cmp	r2, r3
 800760a:	d19b      	bne.n	8007544 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3720      	adds	r7, #32
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	20000210 	.word	0x20000210

0800761c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b088      	sub	sp, #32
 8007620:	af02      	add	r7, sp, #8
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	2201      	movs	r2, #1
 8007630:	2102      	movs	r1, #2
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f7ff ff6a 	bl	800750c <SPI_WaitFlagStateUntilTimeout>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d007      	beq.n	800764e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007642:	f043 0220 	orr.w	r2, r3, #32
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e032      	b.n	80076b4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800764e:	4b1b      	ldr	r3, [pc, #108]	@ (80076bc <SPI_EndRxTxTransaction+0xa0>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a1b      	ldr	r2, [pc, #108]	@ (80076c0 <SPI_EndRxTxTransaction+0xa4>)
 8007654:	fba2 2303 	umull	r2, r3, r2, r3
 8007658:	0d5b      	lsrs	r3, r3, #21
 800765a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800765e:	fb02 f303 	mul.w	r3, r2, r3
 8007662:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800766c:	d112      	bne.n	8007694 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	2200      	movs	r2, #0
 8007676:	2180      	movs	r1, #128	@ 0x80
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f7ff ff47 	bl	800750c <SPI_WaitFlagStateUntilTimeout>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d016      	beq.n	80076b2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007688:	f043 0220 	orr.w	r2, r3, #32
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e00f      	b.n	80076b4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	3b01      	subs	r3, #1
 800769e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076aa:	2b80      	cmp	r3, #128	@ 0x80
 80076ac:	d0f2      	beq.n	8007694 <SPI_EndRxTxTransaction+0x78>
 80076ae:	e000      	b.n	80076b2 <SPI_EndRxTxTransaction+0x96>
        break;
 80076b0:	bf00      	nop
  }

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3718      	adds	r7, #24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	20000210 	.word	0x20000210
 80076c0:	165e9f81 	.word	0x165e9f81

080076c4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e038      	b.n	800774c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d106      	bne.n	80076f4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f7fb ff0c 	bl	800350c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	3308      	adds	r3, #8
 80076fc:	4619      	mov	r1, r3
 80076fe:	4610      	mov	r0, r2
 8007700:	f000 ffc4 	bl	800868c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6818      	ldr	r0, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	461a      	mov	r2, r3
 800770e:	68b9      	ldr	r1, [r7, #8]
 8007710:	f001 f842 	bl	8008798 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6858      	ldr	r0, [r3, #4]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007720:	6879      	ldr	r1, [r7, #4]
 8007722:	f001 f889 	bl	8008838 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	6892      	ldr	r2, [r2, #8]
 800772e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	6892      	ldr	r2, [r2, #8]
 800773a:	f041 0101 	orr.w	r1, r1, #1
 800773e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e041      	b.n	80077ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d106      	bne.n	8007780 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7fb fdd6 	bl	800332c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2202      	movs	r2, #2
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	3304      	adds	r3, #4
 8007790:	4619      	mov	r1, r3
 8007792:	4610      	mov	r0, r2
 8007794:	f000 f9b8 	bl	8007b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
	...

080077f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d109      	bne.n	8007818 <HAL_TIM_PWM_Start+0x24>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800780a:	b2db      	uxtb	r3, r3
 800780c:	2b01      	cmp	r3, #1
 800780e:	bf14      	ite	ne
 8007810:	2301      	movne	r3, #1
 8007812:	2300      	moveq	r3, #0
 8007814:	b2db      	uxtb	r3, r3
 8007816:	e022      	b.n	800785e <HAL_TIM_PWM_Start+0x6a>
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	2b04      	cmp	r3, #4
 800781c:	d109      	bne.n	8007832 <HAL_TIM_PWM_Start+0x3e>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b01      	cmp	r3, #1
 8007828:	bf14      	ite	ne
 800782a:	2301      	movne	r3, #1
 800782c:	2300      	moveq	r3, #0
 800782e:	b2db      	uxtb	r3, r3
 8007830:	e015      	b.n	800785e <HAL_TIM_PWM_Start+0x6a>
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b08      	cmp	r3, #8
 8007836:	d109      	bne.n	800784c <HAL_TIM_PWM_Start+0x58>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b01      	cmp	r3, #1
 8007842:	bf14      	ite	ne
 8007844:	2301      	movne	r3, #1
 8007846:	2300      	moveq	r3, #0
 8007848:	b2db      	uxtb	r3, r3
 800784a:	e008      	b.n	800785e <HAL_TIM_PWM_Start+0x6a>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b01      	cmp	r3, #1
 8007856:	bf14      	ite	ne
 8007858:	2301      	movne	r3, #1
 800785a:	2300      	moveq	r3, #0
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e07c      	b.n	8007960 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d104      	bne.n	8007876 <HAL_TIM_PWM_Start+0x82>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2202      	movs	r2, #2
 8007870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007874:	e013      	b.n	800789e <HAL_TIM_PWM_Start+0xaa>
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	2b04      	cmp	r3, #4
 800787a:	d104      	bne.n	8007886 <HAL_TIM_PWM_Start+0x92>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2202      	movs	r2, #2
 8007880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007884:	e00b      	b.n	800789e <HAL_TIM_PWM_Start+0xaa>
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2b08      	cmp	r3, #8
 800788a:	d104      	bne.n	8007896 <HAL_TIM_PWM_Start+0xa2>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2202      	movs	r2, #2
 8007890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007894:	e003      	b.n	800789e <HAL_TIM_PWM_Start+0xaa>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2202      	movs	r2, #2
 800789a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2201      	movs	r2, #1
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f000 fb8a 	bl	8007fc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a2d      	ldr	r2, [pc, #180]	@ (8007968 <HAL_TIM_PWM_Start+0x174>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d004      	beq.n	80078c0 <HAL_TIM_PWM_Start+0xcc>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a2c      	ldr	r2, [pc, #176]	@ (800796c <HAL_TIM_PWM_Start+0x178>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d101      	bne.n	80078c4 <HAL_TIM_PWM_Start+0xd0>
 80078c0:	2301      	movs	r3, #1
 80078c2:	e000      	b.n	80078c6 <HAL_TIM_PWM_Start+0xd2>
 80078c4:	2300      	movs	r3, #0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d007      	beq.n	80078da <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a22      	ldr	r2, [pc, #136]	@ (8007968 <HAL_TIM_PWM_Start+0x174>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d022      	beq.n	800792a <HAL_TIM_PWM_Start+0x136>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078ec:	d01d      	beq.n	800792a <HAL_TIM_PWM_Start+0x136>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a1f      	ldr	r2, [pc, #124]	@ (8007970 <HAL_TIM_PWM_Start+0x17c>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d018      	beq.n	800792a <HAL_TIM_PWM_Start+0x136>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a1d      	ldr	r2, [pc, #116]	@ (8007974 <HAL_TIM_PWM_Start+0x180>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d013      	beq.n	800792a <HAL_TIM_PWM_Start+0x136>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a1c      	ldr	r2, [pc, #112]	@ (8007978 <HAL_TIM_PWM_Start+0x184>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d00e      	beq.n	800792a <HAL_TIM_PWM_Start+0x136>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a16      	ldr	r2, [pc, #88]	@ (800796c <HAL_TIM_PWM_Start+0x178>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d009      	beq.n	800792a <HAL_TIM_PWM_Start+0x136>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a18      	ldr	r2, [pc, #96]	@ (800797c <HAL_TIM_PWM_Start+0x188>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d004      	beq.n	800792a <HAL_TIM_PWM_Start+0x136>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a16      	ldr	r2, [pc, #88]	@ (8007980 <HAL_TIM_PWM_Start+0x18c>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d111      	bne.n	800794e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	f003 0307 	and.w	r3, r3, #7
 8007934:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b06      	cmp	r3, #6
 800793a:	d010      	beq.n	800795e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f042 0201 	orr.w	r2, r2, #1
 800794a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800794c:	e007      	b.n	800795e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f042 0201 	orr.w	r2, r2, #1
 800795c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	40010000 	.word	0x40010000
 800796c:	40010400 	.word	0x40010400
 8007970:	40000400 	.word	0x40000400
 8007974:	40000800 	.word	0x40000800
 8007978:	40000c00 	.word	0x40000c00
 800797c:	40014000 	.word	0x40014000
 8007980:	40001800 	.word	0x40001800

08007984 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800799a:	2b01      	cmp	r3, #1
 800799c:	d101      	bne.n	80079a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800799e:	2302      	movs	r3, #2
 80079a0:	e0ae      	b.n	8007b00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b0c      	cmp	r3, #12
 80079ae:	f200 809f 	bhi.w	8007af0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80079b2:	a201      	add	r2, pc, #4	@ (adr r2, 80079b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b8:	080079ed 	.word	0x080079ed
 80079bc:	08007af1 	.word	0x08007af1
 80079c0:	08007af1 	.word	0x08007af1
 80079c4:	08007af1 	.word	0x08007af1
 80079c8:	08007a2d 	.word	0x08007a2d
 80079cc:	08007af1 	.word	0x08007af1
 80079d0:	08007af1 	.word	0x08007af1
 80079d4:	08007af1 	.word	0x08007af1
 80079d8:	08007a6f 	.word	0x08007a6f
 80079dc:	08007af1 	.word	0x08007af1
 80079e0:	08007af1 	.word	0x08007af1
 80079e4:	08007af1 	.word	0x08007af1
 80079e8:	08007aaf 	.word	0x08007aaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68b9      	ldr	r1, [r7, #8]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 f934 	bl	8007c60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	699a      	ldr	r2, [r3, #24]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f042 0208 	orr.w	r2, r2, #8
 8007a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	699a      	ldr	r2, [r3, #24]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f022 0204 	bic.w	r2, r2, #4
 8007a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6999      	ldr	r1, [r3, #24]
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	691a      	ldr	r2, [r3, #16]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	430a      	orrs	r2, r1
 8007a28:	619a      	str	r2, [r3, #24]
      break;
 8007a2a:	e064      	b.n	8007af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68b9      	ldr	r1, [r7, #8]
 8007a32:	4618      	mov	r0, r3
 8007a34:	f000 f984 	bl	8007d40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	699a      	ldr	r2, [r3, #24]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	699a      	ldr	r2, [r3, #24]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6999      	ldr	r1, [r3, #24]
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	021a      	lsls	r2, r3, #8
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	619a      	str	r2, [r3, #24]
      break;
 8007a6c:	e043      	b.n	8007af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68b9      	ldr	r1, [r7, #8]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 f9d9 	bl	8007e2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	69da      	ldr	r2, [r3, #28]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f042 0208 	orr.w	r2, r2, #8
 8007a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	69da      	ldr	r2, [r3, #28]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f022 0204 	bic.w	r2, r2, #4
 8007a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	69d9      	ldr	r1, [r3, #28]
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	691a      	ldr	r2, [r3, #16]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	430a      	orrs	r2, r1
 8007aaa:	61da      	str	r2, [r3, #28]
      break;
 8007aac:	e023      	b.n	8007af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68b9      	ldr	r1, [r7, #8]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 fa2d 	bl	8007f14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	69da      	ldr	r2, [r3, #28]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	69da      	ldr	r2, [r3, #28]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	69d9      	ldr	r1, [r3, #28]
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	021a      	lsls	r2, r3, #8
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	61da      	str	r2, [r3, #28]
      break;
 8007aee:	e002      	b.n	8007af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	75fb      	strb	r3, [r7, #23]
      break;
 8007af4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3718      	adds	r7, #24
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a46      	ldr	r2, [pc, #280]	@ (8007c34 <TIM_Base_SetConfig+0x12c>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d013      	beq.n	8007b48 <TIM_Base_SetConfig+0x40>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b26:	d00f      	beq.n	8007b48 <TIM_Base_SetConfig+0x40>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a43      	ldr	r2, [pc, #268]	@ (8007c38 <TIM_Base_SetConfig+0x130>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d00b      	beq.n	8007b48 <TIM_Base_SetConfig+0x40>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a42      	ldr	r2, [pc, #264]	@ (8007c3c <TIM_Base_SetConfig+0x134>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d007      	beq.n	8007b48 <TIM_Base_SetConfig+0x40>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a41      	ldr	r2, [pc, #260]	@ (8007c40 <TIM_Base_SetConfig+0x138>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d003      	beq.n	8007b48 <TIM_Base_SetConfig+0x40>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a40      	ldr	r2, [pc, #256]	@ (8007c44 <TIM_Base_SetConfig+0x13c>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d108      	bne.n	8007b5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a35      	ldr	r2, [pc, #212]	@ (8007c34 <TIM_Base_SetConfig+0x12c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d02b      	beq.n	8007bba <TIM_Base_SetConfig+0xb2>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b68:	d027      	beq.n	8007bba <TIM_Base_SetConfig+0xb2>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a32      	ldr	r2, [pc, #200]	@ (8007c38 <TIM_Base_SetConfig+0x130>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d023      	beq.n	8007bba <TIM_Base_SetConfig+0xb2>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a31      	ldr	r2, [pc, #196]	@ (8007c3c <TIM_Base_SetConfig+0x134>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d01f      	beq.n	8007bba <TIM_Base_SetConfig+0xb2>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a30      	ldr	r2, [pc, #192]	@ (8007c40 <TIM_Base_SetConfig+0x138>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d01b      	beq.n	8007bba <TIM_Base_SetConfig+0xb2>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a2f      	ldr	r2, [pc, #188]	@ (8007c44 <TIM_Base_SetConfig+0x13c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d017      	beq.n	8007bba <TIM_Base_SetConfig+0xb2>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a2e      	ldr	r2, [pc, #184]	@ (8007c48 <TIM_Base_SetConfig+0x140>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d013      	beq.n	8007bba <TIM_Base_SetConfig+0xb2>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a2d      	ldr	r2, [pc, #180]	@ (8007c4c <TIM_Base_SetConfig+0x144>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d00f      	beq.n	8007bba <TIM_Base_SetConfig+0xb2>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a2c      	ldr	r2, [pc, #176]	@ (8007c50 <TIM_Base_SetConfig+0x148>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d00b      	beq.n	8007bba <TIM_Base_SetConfig+0xb2>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a2b      	ldr	r2, [pc, #172]	@ (8007c54 <TIM_Base_SetConfig+0x14c>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d007      	beq.n	8007bba <TIM_Base_SetConfig+0xb2>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a2a      	ldr	r2, [pc, #168]	@ (8007c58 <TIM_Base_SetConfig+0x150>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d003      	beq.n	8007bba <TIM_Base_SetConfig+0xb2>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a29      	ldr	r2, [pc, #164]	@ (8007c5c <TIM_Base_SetConfig+0x154>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d108      	bne.n	8007bcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	689a      	ldr	r2, [r3, #8]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a10      	ldr	r2, [pc, #64]	@ (8007c34 <TIM_Base_SetConfig+0x12c>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d003      	beq.n	8007c00 <TIM_Base_SetConfig+0xf8>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a12      	ldr	r2, [pc, #72]	@ (8007c44 <TIM_Base_SetConfig+0x13c>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d103      	bne.n	8007c08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	691a      	ldr	r2, [r3, #16]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d105      	bne.n	8007c26 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	f023 0201 	bic.w	r2, r3, #1
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	611a      	str	r2, [r3, #16]
  }
}
 8007c26:	bf00      	nop
 8007c28:	3714      	adds	r7, #20
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	40010000 	.word	0x40010000
 8007c38:	40000400 	.word	0x40000400
 8007c3c:	40000800 	.word	0x40000800
 8007c40:	40000c00 	.word	0x40000c00
 8007c44:	40010400 	.word	0x40010400
 8007c48:	40014000 	.word	0x40014000
 8007c4c:	40014400 	.word	0x40014400
 8007c50:	40014800 	.word	0x40014800
 8007c54:	40001800 	.word	0x40001800
 8007c58:	40001c00 	.word	0x40001c00
 8007c5c:	40002000 	.word	0x40002000

08007c60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	f023 0201 	bic.w	r2, r3, #1
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f023 0303 	bic.w	r3, r3, #3
 8007c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	f023 0302 	bic.w	r3, r3, #2
 8007ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a20      	ldr	r2, [pc, #128]	@ (8007d38 <TIM_OC1_SetConfig+0xd8>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d003      	beq.n	8007cc4 <TIM_OC1_SetConfig+0x64>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8007d3c <TIM_OC1_SetConfig+0xdc>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d10c      	bne.n	8007cde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	f023 0308 	bic.w	r3, r3, #8
 8007cca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	f023 0304 	bic.w	r3, r3, #4
 8007cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a15      	ldr	r2, [pc, #84]	@ (8007d38 <TIM_OC1_SetConfig+0xd8>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d003      	beq.n	8007cee <TIM_OC1_SetConfig+0x8e>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a14      	ldr	r2, [pc, #80]	@ (8007d3c <TIM_OC1_SetConfig+0xdc>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d111      	bne.n	8007d12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	621a      	str	r2, [r3, #32]
}
 8007d2c:	bf00      	nop
 8007d2e:	371c      	adds	r7, #28
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr
 8007d38:	40010000 	.word	0x40010000
 8007d3c:	40010400 	.word	0x40010400

08007d40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a1b      	ldr	r3, [r3, #32]
 8007d54:	f023 0210 	bic.w	r2, r3, #16
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	021b      	lsls	r3, r3, #8
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	f023 0320 	bic.w	r3, r3, #32
 8007d8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	011b      	lsls	r3, r3, #4
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a22      	ldr	r2, [pc, #136]	@ (8007e24 <TIM_OC2_SetConfig+0xe4>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d003      	beq.n	8007da8 <TIM_OC2_SetConfig+0x68>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a21      	ldr	r2, [pc, #132]	@ (8007e28 <TIM_OC2_SetConfig+0xe8>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d10d      	bne.n	8007dc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	011b      	lsls	r3, r3, #4
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a17      	ldr	r2, [pc, #92]	@ (8007e24 <TIM_OC2_SetConfig+0xe4>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d003      	beq.n	8007dd4 <TIM_OC2_SetConfig+0x94>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a16      	ldr	r2, [pc, #88]	@ (8007e28 <TIM_OC2_SetConfig+0xe8>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d113      	bne.n	8007dfc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007dda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007de2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	699b      	ldr	r3, [r3, #24]
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	621a      	str	r2, [r3, #32]
}
 8007e16:	bf00      	nop
 8007e18:	371c      	adds	r7, #28
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	40010000 	.word	0x40010000
 8007e28:	40010400 	.word	0x40010400

08007e2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b087      	sub	sp, #28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a1b      	ldr	r3, [r3, #32]
 8007e40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f023 0303 	bic.w	r3, r3, #3
 8007e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	021b      	lsls	r3, r3, #8
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a21      	ldr	r2, [pc, #132]	@ (8007f0c <TIM_OC3_SetConfig+0xe0>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d003      	beq.n	8007e92 <TIM_OC3_SetConfig+0x66>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a20      	ldr	r2, [pc, #128]	@ (8007f10 <TIM_OC3_SetConfig+0xe4>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d10d      	bne.n	8007eae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	021b      	lsls	r3, r3, #8
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007eac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a16      	ldr	r2, [pc, #88]	@ (8007f0c <TIM_OC3_SetConfig+0xe0>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d003      	beq.n	8007ebe <TIM_OC3_SetConfig+0x92>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a15      	ldr	r2, [pc, #84]	@ (8007f10 <TIM_OC3_SetConfig+0xe4>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d113      	bne.n	8007ee6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	011b      	lsls	r3, r3, #4
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	011b      	lsls	r3, r3, #4
 8007ee0:	693a      	ldr	r2, [r7, #16]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	621a      	str	r2, [r3, #32]
}
 8007f00:	bf00      	nop
 8007f02:	371c      	adds	r7, #28
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	40010000 	.word	0x40010000
 8007f10:	40010400 	.word	0x40010400

08007f14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a1b      	ldr	r3, [r3, #32]
 8007f28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	021b      	lsls	r3, r3, #8
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	031b      	lsls	r3, r3, #12
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a12      	ldr	r2, [pc, #72]	@ (8007fb8 <TIM_OC4_SetConfig+0xa4>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d003      	beq.n	8007f7c <TIM_OC4_SetConfig+0x68>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a11      	ldr	r2, [pc, #68]	@ (8007fbc <TIM_OC4_SetConfig+0xa8>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d109      	bne.n	8007f90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	695b      	ldr	r3, [r3, #20]
 8007f88:	019b      	lsls	r3, r3, #6
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	685a      	ldr	r2, [r3, #4]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	621a      	str	r2, [r3, #32]
}
 8007faa:	bf00      	nop
 8007fac:	371c      	adds	r7, #28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	40010000 	.word	0x40010000
 8007fbc:	40010400 	.word	0x40010400

08007fc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b087      	sub	sp, #28
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	f003 031f 	and.w	r3, r3, #31
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6a1a      	ldr	r2, [r3, #32]
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	43db      	mvns	r3, r3
 8007fe2:	401a      	ands	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6a1a      	ldr	r2, [r3, #32]
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	f003 031f 	and.w	r3, r3, #31
 8007ff2:	6879      	ldr	r1, [r7, #4]
 8007ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ff8:	431a      	orrs	r2, r3
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	621a      	str	r2, [r3, #32]
}
 8007ffe:	bf00      	nop
 8008000:	371c      	adds	r7, #28
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
	...

0800800c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800801c:	2b01      	cmp	r3, #1
 800801e:	d101      	bne.n	8008024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008020:	2302      	movs	r3, #2
 8008022:	e05a      	b.n	80080da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2202      	movs	r2, #2
 8008030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800804a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	4313      	orrs	r3, r2
 8008054:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a21      	ldr	r2, [pc, #132]	@ (80080e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d022      	beq.n	80080ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008070:	d01d      	beq.n	80080ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a1d      	ldr	r2, [pc, #116]	@ (80080ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d018      	beq.n	80080ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a1b      	ldr	r2, [pc, #108]	@ (80080f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d013      	beq.n	80080ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a1a      	ldr	r2, [pc, #104]	@ (80080f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d00e      	beq.n	80080ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a18      	ldr	r2, [pc, #96]	@ (80080f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d009      	beq.n	80080ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a17      	ldr	r2, [pc, #92]	@ (80080fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d004      	beq.n	80080ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a15      	ldr	r2, [pc, #84]	@ (8008100 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d10c      	bne.n	80080c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	4313      	orrs	r3, r2
 80080be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3714      	adds	r7, #20
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	40010000 	.word	0x40010000
 80080ec:	40000400 	.word	0x40000400
 80080f0:	40000800 	.word	0x40000800
 80080f4:	40000c00 	.word	0x40000c00
 80080f8:	40010400 	.word	0x40010400
 80080fc:	40014000 	.word	0x40014000
 8008100:	40001800 	.word	0x40001800

08008104 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d101      	bne.n	8008116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e042      	b.n	800819c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d106      	bne.n	8008130 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7fb f95a 	bl	80033e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2224      	movs	r2, #36	@ 0x24
 8008134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68da      	ldr	r2, [r3, #12]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008146:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f82b 	bl	80081a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	691a      	ldr	r2, [r3, #16]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800815c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	695a      	ldr	r2, [r3, #20]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800816c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68da      	ldr	r2, [r3, #12]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800817c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2220      	movs	r2, #32
 8008188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2220      	movs	r2, #32
 8008190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081a8:	b0c0      	sub	sp, #256	@ 0x100
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80081bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081c0:	68d9      	ldr	r1, [r3, #12]
 80081c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	ea40 0301 	orr.w	r3, r0, r1
 80081cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80081ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081d2:	689a      	ldr	r2, [r3, #8]
 80081d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	431a      	orrs	r2, r3
 80081dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	431a      	orrs	r2, r3
 80081e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80081f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80081fc:	f021 010c 	bic.w	r1, r1, #12
 8008200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800820a:	430b      	orrs	r3, r1
 800820c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800820e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800821a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800821e:	6999      	ldr	r1, [r3, #24]
 8008220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	ea40 0301 	orr.w	r3, r0, r1
 800822a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800822c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	4b8f      	ldr	r3, [pc, #572]	@ (8008470 <UART_SetConfig+0x2cc>)
 8008234:	429a      	cmp	r2, r3
 8008236:	d005      	beq.n	8008244 <UART_SetConfig+0xa0>
 8008238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	4b8d      	ldr	r3, [pc, #564]	@ (8008474 <UART_SetConfig+0x2d0>)
 8008240:	429a      	cmp	r2, r3
 8008242:	d104      	bne.n	800824e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008244:	f7fe fdd8 	bl	8006df8 <HAL_RCC_GetPCLK2Freq>
 8008248:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800824c:	e003      	b.n	8008256 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800824e:	f7fe fdbf 	bl	8006dd0 <HAL_RCC_GetPCLK1Freq>
 8008252:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008260:	f040 810c 	bne.w	800847c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008268:	2200      	movs	r2, #0
 800826a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800826e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008272:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008276:	4622      	mov	r2, r4
 8008278:	462b      	mov	r3, r5
 800827a:	1891      	adds	r1, r2, r2
 800827c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800827e:	415b      	adcs	r3, r3
 8008280:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008282:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008286:	4621      	mov	r1, r4
 8008288:	eb12 0801 	adds.w	r8, r2, r1
 800828c:	4629      	mov	r1, r5
 800828e:	eb43 0901 	adc.w	r9, r3, r1
 8008292:	f04f 0200 	mov.w	r2, #0
 8008296:	f04f 0300 	mov.w	r3, #0
 800829a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800829e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082a6:	4690      	mov	r8, r2
 80082a8:	4699      	mov	r9, r3
 80082aa:	4623      	mov	r3, r4
 80082ac:	eb18 0303 	adds.w	r3, r8, r3
 80082b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082b4:	462b      	mov	r3, r5
 80082b6:	eb49 0303 	adc.w	r3, r9, r3
 80082ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80082be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80082ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80082ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80082d2:	460b      	mov	r3, r1
 80082d4:	18db      	adds	r3, r3, r3
 80082d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80082d8:	4613      	mov	r3, r2
 80082da:	eb42 0303 	adc.w	r3, r2, r3
 80082de:	657b      	str	r3, [r7, #84]	@ 0x54
 80082e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80082e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80082e8:	f7f7 ffda 	bl	80002a0 <__aeabi_uldivmod>
 80082ec:	4602      	mov	r2, r0
 80082ee:	460b      	mov	r3, r1
 80082f0:	4b61      	ldr	r3, [pc, #388]	@ (8008478 <UART_SetConfig+0x2d4>)
 80082f2:	fba3 2302 	umull	r2, r3, r3, r2
 80082f6:	095b      	lsrs	r3, r3, #5
 80082f8:	011c      	lsls	r4, r3, #4
 80082fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082fe:	2200      	movs	r2, #0
 8008300:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008304:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008308:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800830c:	4642      	mov	r2, r8
 800830e:	464b      	mov	r3, r9
 8008310:	1891      	adds	r1, r2, r2
 8008312:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008314:	415b      	adcs	r3, r3
 8008316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008318:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800831c:	4641      	mov	r1, r8
 800831e:	eb12 0a01 	adds.w	sl, r2, r1
 8008322:	4649      	mov	r1, r9
 8008324:	eb43 0b01 	adc.w	fp, r3, r1
 8008328:	f04f 0200 	mov.w	r2, #0
 800832c:	f04f 0300 	mov.w	r3, #0
 8008330:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008334:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008338:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800833c:	4692      	mov	sl, r2
 800833e:	469b      	mov	fp, r3
 8008340:	4643      	mov	r3, r8
 8008342:	eb1a 0303 	adds.w	r3, sl, r3
 8008346:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800834a:	464b      	mov	r3, r9
 800834c:	eb4b 0303 	adc.w	r3, fp, r3
 8008350:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008360:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008364:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008368:	460b      	mov	r3, r1
 800836a:	18db      	adds	r3, r3, r3
 800836c:	643b      	str	r3, [r7, #64]	@ 0x40
 800836e:	4613      	mov	r3, r2
 8008370:	eb42 0303 	adc.w	r3, r2, r3
 8008374:	647b      	str	r3, [r7, #68]	@ 0x44
 8008376:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800837a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800837e:	f7f7 ff8f 	bl	80002a0 <__aeabi_uldivmod>
 8008382:	4602      	mov	r2, r0
 8008384:	460b      	mov	r3, r1
 8008386:	4611      	mov	r1, r2
 8008388:	4b3b      	ldr	r3, [pc, #236]	@ (8008478 <UART_SetConfig+0x2d4>)
 800838a:	fba3 2301 	umull	r2, r3, r3, r1
 800838e:	095b      	lsrs	r3, r3, #5
 8008390:	2264      	movs	r2, #100	@ 0x64
 8008392:	fb02 f303 	mul.w	r3, r2, r3
 8008396:	1acb      	subs	r3, r1, r3
 8008398:	00db      	lsls	r3, r3, #3
 800839a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800839e:	4b36      	ldr	r3, [pc, #216]	@ (8008478 <UART_SetConfig+0x2d4>)
 80083a0:	fba3 2302 	umull	r2, r3, r3, r2
 80083a4:	095b      	lsrs	r3, r3, #5
 80083a6:	005b      	lsls	r3, r3, #1
 80083a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80083ac:	441c      	add	r4, r3
 80083ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083b2:	2200      	movs	r2, #0
 80083b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80083b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80083bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80083c0:	4642      	mov	r2, r8
 80083c2:	464b      	mov	r3, r9
 80083c4:	1891      	adds	r1, r2, r2
 80083c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80083c8:	415b      	adcs	r3, r3
 80083ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80083d0:	4641      	mov	r1, r8
 80083d2:	1851      	adds	r1, r2, r1
 80083d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80083d6:	4649      	mov	r1, r9
 80083d8:	414b      	adcs	r3, r1
 80083da:	637b      	str	r3, [r7, #52]	@ 0x34
 80083dc:	f04f 0200 	mov.w	r2, #0
 80083e0:	f04f 0300 	mov.w	r3, #0
 80083e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80083e8:	4659      	mov	r1, fp
 80083ea:	00cb      	lsls	r3, r1, #3
 80083ec:	4651      	mov	r1, sl
 80083ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083f2:	4651      	mov	r1, sl
 80083f4:	00ca      	lsls	r2, r1, #3
 80083f6:	4610      	mov	r0, r2
 80083f8:	4619      	mov	r1, r3
 80083fa:	4603      	mov	r3, r0
 80083fc:	4642      	mov	r2, r8
 80083fe:	189b      	adds	r3, r3, r2
 8008400:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008404:	464b      	mov	r3, r9
 8008406:	460a      	mov	r2, r1
 8008408:	eb42 0303 	adc.w	r3, r2, r3
 800840c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800841c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008420:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008424:	460b      	mov	r3, r1
 8008426:	18db      	adds	r3, r3, r3
 8008428:	62bb      	str	r3, [r7, #40]	@ 0x28
 800842a:	4613      	mov	r3, r2
 800842c:	eb42 0303 	adc.w	r3, r2, r3
 8008430:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008432:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008436:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800843a:	f7f7 ff31 	bl	80002a0 <__aeabi_uldivmod>
 800843e:	4602      	mov	r2, r0
 8008440:	460b      	mov	r3, r1
 8008442:	4b0d      	ldr	r3, [pc, #52]	@ (8008478 <UART_SetConfig+0x2d4>)
 8008444:	fba3 1302 	umull	r1, r3, r3, r2
 8008448:	095b      	lsrs	r3, r3, #5
 800844a:	2164      	movs	r1, #100	@ 0x64
 800844c:	fb01 f303 	mul.w	r3, r1, r3
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	00db      	lsls	r3, r3, #3
 8008454:	3332      	adds	r3, #50	@ 0x32
 8008456:	4a08      	ldr	r2, [pc, #32]	@ (8008478 <UART_SetConfig+0x2d4>)
 8008458:	fba2 2303 	umull	r2, r3, r2, r3
 800845c:	095b      	lsrs	r3, r3, #5
 800845e:	f003 0207 	and.w	r2, r3, #7
 8008462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4422      	add	r2, r4
 800846a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800846c:	e106      	b.n	800867c <UART_SetConfig+0x4d8>
 800846e:	bf00      	nop
 8008470:	40011000 	.word	0x40011000
 8008474:	40011400 	.word	0x40011400
 8008478:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800847c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008480:	2200      	movs	r2, #0
 8008482:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008486:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800848a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800848e:	4642      	mov	r2, r8
 8008490:	464b      	mov	r3, r9
 8008492:	1891      	adds	r1, r2, r2
 8008494:	6239      	str	r1, [r7, #32]
 8008496:	415b      	adcs	r3, r3
 8008498:	627b      	str	r3, [r7, #36]	@ 0x24
 800849a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800849e:	4641      	mov	r1, r8
 80084a0:	1854      	adds	r4, r2, r1
 80084a2:	4649      	mov	r1, r9
 80084a4:	eb43 0501 	adc.w	r5, r3, r1
 80084a8:	f04f 0200 	mov.w	r2, #0
 80084ac:	f04f 0300 	mov.w	r3, #0
 80084b0:	00eb      	lsls	r3, r5, #3
 80084b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084b6:	00e2      	lsls	r2, r4, #3
 80084b8:	4614      	mov	r4, r2
 80084ba:	461d      	mov	r5, r3
 80084bc:	4643      	mov	r3, r8
 80084be:	18e3      	adds	r3, r4, r3
 80084c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80084c4:	464b      	mov	r3, r9
 80084c6:	eb45 0303 	adc.w	r3, r5, r3
 80084ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80084ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80084da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80084de:	f04f 0200 	mov.w	r2, #0
 80084e2:	f04f 0300 	mov.w	r3, #0
 80084e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80084ea:	4629      	mov	r1, r5
 80084ec:	008b      	lsls	r3, r1, #2
 80084ee:	4621      	mov	r1, r4
 80084f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084f4:	4621      	mov	r1, r4
 80084f6:	008a      	lsls	r2, r1, #2
 80084f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80084fc:	f7f7 fed0 	bl	80002a0 <__aeabi_uldivmod>
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	4b60      	ldr	r3, [pc, #384]	@ (8008688 <UART_SetConfig+0x4e4>)
 8008506:	fba3 2302 	umull	r2, r3, r3, r2
 800850a:	095b      	lsrs	r3, r3, #5
 800850c:	011c      	lsls	r4, r3, #4
 800850e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008512:	2200      	movs	r2, #0
 8008514:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008518:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800851c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008520:	4642      	mov	r2, r8
 8008522:	464b      	mov	r3, r9
 8008524:	1891      	adds	r1, r2, r2
 8008526:	61b9      	str	r1, [r7, #24]
 8008528:	415b      	adcs	r3, r3
 800852a:	61fb      	str	r3, [r7, #28]
 800852c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008530:	4641      	mov	r1, r8
 8008532:	1851      	adds	r1, r2, r1
 8008534:	6139      	str	r1, [r7, #16]
 8008536:	4649      	mov	r1, r9
 8008538:	414b      	adcs	r3, r1
 800853a:	617b      	str	r3, [r7, #20]
 800853c:	f04f 0200 	mov.w	r2, #0
 8008540:	f04f 0300 	mov.w	r3, #0
 8008544:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008548:	4659      	mov	r1, fp
 800854a:	00cb      	lsls	r3, r1, #3
 800854c:	4651      	mov	r1, sl
 800854e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008552:	4651      	mov	r1, sl
 8008554:	00ca      	lsls	r2, r1, #3
 8008556:	4610      	mov	r0, r2
 8008558:	4619      	mov	r1, r3
 800855a:	4603      	mov	r3, r0
 800855c:	4642      	mov	r2, r8
 800855e:	189b      	adds	r3, r3, r2
 8008560:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008564:	464b      	mov	r3, r9
 8008566:	460a      	mov	r2, r1
 8008568:	eb42 0303 	adc.w	r3, r2, r3
 800856c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	67bb      	str	r3, [r7, #120]	@ 0x78
 800857a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800857c:	f04f 0200 	mov.w	r2, #0
 8008580:	f04f 0300 	mov.w	r3, #0
 8008584:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008588:	4649      	mov	r1, r9
 800858a:	008b      	lsls	r3, r1, #2
 800858c:	4641      	mov	r1, r8
 800858e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008592:	4641      	mov	r1, r8
 8008594:	008a      	lsls	r2, r1, #2
 8008596:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800859a:	f7f7 fe81 	bl	80002a0 <__aeabi_uldivmod>
 800859e:	4602      	mov	r2, r0
 80085a0:	460b      	mov	r3, r1
 80085a2:	4611      	mov	r1, r2
 80085a4:	4b38      	ldr	r3, [pc, #224]	@ (8008688 <UART_SetConfig+0x4e4>)
 80085a6:	fba3 2301 	umull	r2, r3, r3, r1
 80085aa:	095b      	lsrs	r3, r3, #5
 80085ac:	2264      	movs	r2, #100	@ 0x64
 80085ae:	fb02 f303 	mul.w	r3, r2, r3
 80085b2:	1acb      	subs	r3, r1, r3
 80085b4:	011b      	lsls	r3, r3, #4
 80085b6:	3332      	adds	r3, #50	@ 0x32
 80085b8:	4a33      	ldr	r2, [pc, #204]	@ (8008688 <UART_SetConfig+0x4e4>)
 80085ba:	fba2 2303 	umull	r2, r3, r2, r3
 80085be:	095b      	lsrs	r3, r3, #5
 80085c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80085c4:	441c      	add	r4, r3
 80085c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085ca:	2200      	movs	r2, #0
 80085cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80085ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80085d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80085d4:	4642      	mov	r2, r8
 80085d6:	464b      	mov	r3, r9
 80085d8:	1891      	adds	r1, r2, r2
 80085da:	60b9      	str	r1, [r7, #8]
 80085dc:	415b      	adcs	r3, r3
 80085de:	60fb      	str	r3, [r7, #12]
 80085e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085e4:	4641      	mov	r1, r8
 80085e6:	1851      	adds	r1, r2, r1
 80085e8:	6039      	str	r1, [r7, #0]
 80085ea:	4649      	mov	r1, r9
 80085ec:	414b      	adcs	r3, r1
 80085ee:	607b      	str	r3, [r7, #4]
 80085f0:	f04f 0200 	mov.w	r2, #0
 80085f4:	f04f 0300 	mov.w	r3, #0
 80085f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80085fc:	4659      	mov	r1, fp
 80085fe:	00cb      	lsls	r3, r1, #3
 8008600:	4651      	mov	r1, sl
 8008602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008606:	4651      	mov	r1, sl
 8008608:	00ca      	lsls	r2, r1, #3
 800860a:	4610      	mov	r0, r2
 800860c:	4619      	mov	r1, r3
 800860e:	4603      	mov	r3, r0
 8008610:	4642      	mov	r2, r8
 8008612:	189b      	adds	r3, r3, r2
 8008614:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008616:	464b      	mov	r3, r9
 8008618:	460a      	mov	r2, r1
 800861a:	eb42 0303 	adc.w	r3, r2, r3
 800861e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	663b      	str	r3, [r7, #96]	@ 0x60
 800862a:	667a      	str	r2, [r7, #100]	@ 0x64
 800862c:	f04f 0200 	mov.w	r2, #0
 8008630:	f04f 0300 	mov.w	r3, #0
 8008634:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008638:	4649      	mov	r1, r9
 800863a:	008b      	lsls	r3, r1, #2
 800863c:	4641      	mov	r1, r8
 800863e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008642:	4641      	mov	r1, r8
 8008644:	008a      	lsls	r2, r1, #2
 8008646:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800864a:	f7f7 fe29 	bl	80002a0 <__aeabi_uldivmod>
 800864e:	4602      	mov	r2, r0
 8008650:	460b      	mov	r3, r1
 8008652:	4b0d      	ldr	r3, [pc, #52]	@ (8008688 <UART_SetConfig+0x4e4>)
 8008654:	fba3 1302 	umull	r1, r3, r3, r2
 8008658:	095b      	lsrs	r3, r3, #5
 800865a:	2164      	movs	r1, #100	@ 0x64
 800865c:	fb01 f303 	mul.w	r3, r1, r3
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	011b      	lsls	r3, r3, #4
 8008664:	3332      	adds	r3, #50	@ 0x32
 8008666:	4a08      	ldr	r2, [pc, #32]	@ (8008688 <UART_SetConfig+0x4e4>)
 8008668:	fba2 2303 	umull	r2, r3, r2, r3
 800866c:	095b      	lsrs	r3, r3, #5
 800866e:	f003 020f 	and.w	r2, r3, #15
 8008672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4422      	add	r2, r4
 800867a:	609a      	str	r2, [r3, #8]
}
 800867c:	bf00      	nop
 800867e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008682:	46bd      	mov	sp, r7
 8008684:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008688:	51eb851f 	.word	0x51eb851f

0800868c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800868c:	b480      	push	{r7}
 800868e:	b087      	sub	sp, #28
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FMC_BCR1_WFDIS */
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a0:	683a      	ldr	r2, [r7, #0]
 80086a2:	6812      	ldr	r2, [r2, #0]
 80086a4:	f023 0101 	bic.w	r1, r3, #1
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	2b08      	cmp	r3, #8
 80086b4:	d102      	bne.n	80086bc <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80086b6:	2340      	movs	r3, #64	@ 0x40
 80086b8:	617b      	str	r3, [r7, #20]
 80086ba:	e001      	b.n	80086c0 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80086bc:	2300      	movs	r3, #0
 80086be:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80086cc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80086d2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80086d8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80086de:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80086e4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80086ea:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 80086f0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 80086f6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 80086fc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8008702:	4313      	orrs	r3, r2
 8008704:	613b      	str	r3, [r7, #16]

#if defined(FMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	693a      	ldr	r2, [r7, #16]
 800870c:	4313      	orrs	r3, r2
 800870e:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WRAPMOD */
#if defined(FMC_BCR1_CCLKEN)
  btcr_reg |= Init->ContinuousClock;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	4313      	orrs	r3, r2
 8008718:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_CCLKEN */
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	4313      	orrs	r3, r2
 8008722:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8008724:	4b1b      	ldr	r3, [pc, #108]	@ (8008794 <FMC_NORSRAM_Init+0x108>)
 8008726:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

#if defined(FMC_BCR1_WRAPMOD)
  mask |= FMC_BCR1_WRAPMOD;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800872e:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WRAPMOD */
#if defined(FMC_BCR1_CCLKEN)
  mask |= FMC_BCR1_CCLKEN;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008736:	60fb      	str	r3, [r7, #12]
#endif
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
#endif /* FMC_BCR1_WFDIS */
  mask |= FMC_BCR1_CPSIZE;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800873e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	43db      	mvns	r3, r3
 800874e:	ea02 0103 	and.w	r1, r2, r3
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	4319      	orrs	r1, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(FMC_BCR1_CCLKEN)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008764:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008768:	d10c      	bne.n	8008784 <FMC_NORSRAM_Init+0xf8>
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d008      	beq.n	8008784 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800877e:	431a      	orrs	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	601a      	str	r2, [r3, #0]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FMC_BCR1_WFDIS */

  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	371c      	adds	r7, #28
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	0008fb7f 	.word	0x0008fb7f

08008798 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008798:	b480      	push	{r7}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	1c5a      	adds	r2, r3, #1
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ae:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	011b      	lsls	r3, r3, #4
 80087bc:	431a      	orrs	r2, r3
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	021b      	lsls	r3, r3, #8
 80087c4:	431a      	orrs	r2, r3
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	041b      	lsls	r3, r3, #16
 80087cc:	431a      	orrs	r2, r3
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	3b01      	subs	r3, #1
 80087d4:	051b      	lsls	r3, r3, #20
 80087d6:	431a      	orrs	r2, r3
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	695b      	ldr	r3, [r3, #20]
 80087dc:	3b02      	subs	r3, #2
 80087de:	061b      	lsls	r3, r3, #24
 80087e0:	431a      	orrs	r2, r3
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	3201      	adds	r2, #1
 80087ec:	4319      	orrs	r1, r3
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

#if defined(FMC_BCR1_CCLKEN)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80087fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008800:	d113      	bne.n	800882a <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800880a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	3b01      	subs	r3, #1
 8008812:	051b      	lsls	r3, r3, #20
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	4313      	orrs	r3, r2
 8008818:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	431a      	orrs	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	605a      	str	r2, [r3, #4]
  }

#endif
  return HAL_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	371c      	adds	r7, #28
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800884c:	d11d      	bne.n	800888a <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008856:	4b13      	ldr	r3, [pc, #76]	@ (80088a4 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008858:	4013      	ands	r3, r2
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	6811      	ldr	r1, [r2, #0]
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	6852      	ldr	r2, [r2, #4]
 8008862:	0112      	lsls	r2, r2, #4
 8008864:	4311      	orrs	r1, r2
 8008866:	68ba      	ldr	r2, [r7, #8]
 8008868:	6892      	ldr	r2, [r2, #8]
 800886a:	0212      	lsls	r2, r2, #8
 800886c:	4311      	orrs	r1, r2
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	6992      	ldr	r2, [r2, #24]
 8008872:	4311      	orrs	r1, r2
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	68d2      	ldr	r2, [r2, #12]
 8008878:	0412      	lsls	r2, r2, #16
 800887a:	430a      	orrs	r2, r1
 800887c:	ea43 0102 	orr.w	r1, r3, r2
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008888:	e005      	b.n	8008896 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8008892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3714      	adds	r7, #20
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr
 80088a4:	cff00000 	.word	0xcff00000

080088a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088a8:	b084      	sub	sp, #16
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b084      	sub	sp, #16
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
 80088b2:	f107 001c 	add.w	r0, r7, #28
 80088b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80088ba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d123      	bne.n	800890a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80088d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80088ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d105      	bne.n	80088fe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f9dc 	bl	8008cbc <USB_CoreReset>
 8008904:	4603      	mov	r3, r0
 8008906:	73fb      	strb	r3, [r7, #15]
 8008908:	e01b      	b.n	8008942 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f9d0 	bl	8008cbc <USB_CoreReset>
 800891c:	4603      	mov	r3, r0
 800891e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008920:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008924:	2b00      	cmp	r3, #0
 8008926:	d106      	bne.n	8008936 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800892c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	639a      	str	r2, [r3, #56]	@ 0x38
 8008934:	e005      	b.n	8008942 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800893a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008942:	7fbb      	ldrb	r3, [r7, #30]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d10b      	bne.n	8008960 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f043 0206 	orr.w	r2, r3, #6
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	f043 0220 	orr.w	r2, r3, #32
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008960:	7bfb      	ldrb	r3, [r7, #15]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800896c:	b004      	add	sp, #16
 800896e:	4770      	bx	lr

08008970 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	f043 0201 	orr.w	r2, r3, #1
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr

08008992 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008992:	b480      	push	{r7}
 8008994:	b083      	sub	sp, #12
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	f023 0201 	bic.w	r2, r3, #1
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	460b      	mov	r3, r1
 80089be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80089c0:	2300      	movs	r3, #0
 80089c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80089d0:	78fb      	ldrb	r3, [r7, #3]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d115      	bne.n	8008a02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80089e2:	200a      	movs	r0, #10
 80089e4:	f7fa ff12 	bl	800380c <HAL_Delay>
      ms += 10U;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	330a      	adds	r3, #10
 80089ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f956 	bl	8008ca0 <USB_GetMode>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d01e      	beq.n	8008a38 <USB_SetCurrentMode+0x84>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80089fe:	d9f0      	bls.n	80089e2 <USB_SetCurrentMode+0x2e>
 8008a00:	e01a      	b.n	8008a38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a02:	78fb      	ldrb	r3, [r7, #3]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d115      	bne.n	8008a34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008a14:	200a      	movs	r0, #10
 8008a16:	f7fa fef9 	bl	800380c <HAL_Delay>
      ms += 10U;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	330a      	adds	r3, #10
 8008a1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f93d 	bl	8008ca0 <USB_GetMode>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d005      	beq.n	8008a38 <USB_SetCurrentMode+0x84>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008a30:	d9f0      	bls.n	8008a14 <USB_SetCurrentMode+0x60>
 8008a32:	e001      	b.n	8008a38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	e005      	b.n	8008a44 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2bc8      	cmp	r3, #200	@ 0xc8
 8008a3c:	d101      	bne.n	8008a42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e000      	b.n	8008a44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a56:	2300      	movs	r3, #0
 8008a58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a66:	d901      	bls.n	8008a6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e01b      	b.n	8008aa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	daf2      	bge.n	8008a5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008a74:	2300      	movs	r3, #0
 8008a76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	019b      	lsls	r3, r3, #6
 8008a7c:	f043 0220 	orr.w	r2, r3, #32
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	3301      	adds	r3, #1
 8008a88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a90:	d901      	bls.n	8008a96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e006      	b.n	8008aa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	f003 0320 	and.w	r3, r3, #32
 8008a9e:	2b20      	cmp	r3, #32
 8008aa0:	d0f0      	beq.n	8008a84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ac8:	d901      	bls.n	8008ace <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e018      	b.n	8008b00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	daf2      	bge.n	8008abc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2210      	movs	r2, #16
 8008ade:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008aec:	d901      	bls.n	8008af2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008aee:	2303      	movs	r3, #3
 8008af0:	e006      	b.n	8008b00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	f003 0310 	and.w	r3, r3, #16
 8008afa:	2b10      	cmp	r3, #16
 8008afc:	d0f0      	beq.n	8008ae0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3714      	adds	r7, #20
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b089      	sub	sp, #36	@ 0x24
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	4611      	mov	r1, r2
 8008b18:	461a      	mov	r2, r3
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	71fb      	strb	r3, [r7, #7]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008b2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d123      	bne.n	8008b7a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008b32:	88bb      	ldrh	r3, [r7, #4]
 8008b34:	3303      	adds	r3, #3
 8008b36:	089b      	lsrs	r3, r3, #2
 8008b38:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	61bb      	str	r3, [r7, #24]
 8008b3e:	e018      	b.n	8008b72 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008b40:	79fb      	ldrb	r3, [r7, #7]
 8008b42:	031a      	lsls	r2, r3, #12
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	4413      	add	r3, r2
 8008b48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	3301      	adds	r3, #1
 8008b58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	3301      	adds	r3, #1
 8008b64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	61bb      	str	r3, [r7, #24]
 8008b72:	69ba      	ldr	r2, [r7, #24]
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d3e2      	bcc.n	8008b40 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3724      	adds	r7, #36	@ 0x24
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b08b      	sub	sp, #44	@ 0x2c
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	4613      	mov	r3, r2
 8008b94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008b9e:	88fb      	ldrh	r3, [r7, #6]
 8008ba0:	089b      	lsrs	r3, r3, #2
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008ba6:	88fb      	ldrh	r3, [r7, #6]
 8008ba8:	f003 0303 	and.w	r3, r3, #3
 8008bac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008bae:	2300      	movs	r3, #0
 8008bb0:	623b      	str	r3, [r7, #32]
 8008bb2:	e014      	b.n	8008bde <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bbe:	601a      	str	r2, [r3, #0]
    pDest++;
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc8:	3301      	adds	r3, #1
 8008bca:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bce:	3301      	adds	r3, #1
 8008bd0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008bd8:	6a3b      	ldr	r3, [r7, #32]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	623b      	str	r3, [r7, #32]
 8008bde:	6a3a      	ldr	r2, [r7, #32]
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d3e6      	bcc.n	8008bb4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008be6:	8bfb      	ldrh	r3, [r7, #30]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d01e      	beq.n	8008c2a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008bec:	2300      	movs	r3, #0
 8008bee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	f107 0310 	add.w	r3, r7, #16
 8008bfc:	6812      	ldr	r2, [r2, #0]
 8008bfe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008c00:	693a      	ldr	r2, [r7, #16]
 8008c02:	6a3b      	ldr	r3, [r7, #32]
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	00db      	lsls	r3, r3, #3
 8008c08:	fa22 f303 	lsr.w	r3, r2, r3
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c10:	701a      	strb	r2, [r3, #0]
      i++;
 8008c12:	6a3b      	ldr	r3, [r7, #32]
 8008c14:	3301      	adds	r3, #1
 8008c16:	623b      	str	r3, [r7, #32]
      pDest++;
 8008c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008c1e:	8bfb      	ldrh	r3, [r7, #30]
 8008c20:	3b01      	subs	r3, #1
 8008c22:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008c24:	8bfb      	ldrh	r3, [r7, #30]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d1ea      	bne.n	8008c00 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	372c      	adds	r7, #44	@ 0x2c
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	695b      	ldr	r3, [r3, #20]
 8008c44:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008c50:	68fb      	ldr	r3, [r7, #12]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b085      	sub	sp, #20
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	460b      	mov	r3, r1
 8008c68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008c6e:	78fb      	ldrb	r3, [r7, #3]
 8008c70:	015a      	lsls	r2, r3, #5
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	4413      	add	r3, r2
 8008c76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008c7e:	78fb      	ldrb	r3, [r7, #3]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	4013      	ands	r3, r2
 8008c90:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008c92:	68bb      	ldr	r3, [r7, #8]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	695b      	ldr	r3, [r3, #20]
 8008cac:	f003 0301 	and.w	r3, r3, #1
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008cd4:	d901      	bls.n	8008cda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e01b      	b.n	8008d12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	daf2      	bge.n	8008cc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	f043 0201 	orr.w	r2, r3, #1
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008cfe:	d901      	bls.n	8008d04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e006      	b.n	8008d12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	f003 0301 	and.w	r3, r3, #1
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d0f0      	beq.n	8008cf2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
	...

08008d20 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d20:	b084      	sub	sp, #16
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b086      	sub	sp, #24
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008d40:	461a      	mov	r2, r3
 8008d42:	2300      	movs	r3, #0
 8008d44:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d4a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d56:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d62:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d119      	bne.n	8008daa <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008d76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d10a      	bne.n	8008d94 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008d8c:	f043 0304 	orr.w	r3, r3, #4
 8008d90:	6013      	str	r3, [r2, #0]
 8008d92:	e014      	b.n	8008dbe <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008da2:	f023 0304 	bic.w	r3, r3, #4
 8008da6:	6013      	str	r3, [r2, #0]
 8008da8:	e009      	b.n	8008dbe <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008db8:	f023 0304 	bic.w	r3, r3, #4
 8008dbc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008dbe:	2110      	movs	r1, #16
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f7ff fe43 	bl	8008a4c <USB_FlushTxFifo>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d001      	beq.n	8008dd0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f7ff fe6d 	bl	8008ab0 <USB_FlushRxFifo>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d001      	beq.n	8008de0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008de0:	2300      	movs	r3, #0
 8008de2:	613b      	str	r3, [r7, #16]
 8008de4:	e015      	b.n	8008e12 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	015a      	lsls	r2, r3, #5
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	4413      	add	r3, r2
 8008dee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008df2:	461a      	mov	r2, r3
 8008df4:	f04f 33ff 	mov.w	r3, #4294967295
 8008df8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	015a      	lsls	r2, r3, #5
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	4413      	add	r3, r2
 8008e02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e06:	461a      	mov	r2, r3
 8008e08:	2300      	movs	r3, #0
 8008e0a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	613b      	str	r3, [r7, #16]
 8008e12:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008e16:	461a      	mov	r2, r3
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d3e3      	bcc.n	8008de6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f04f 32ff 	mov.w	r2, #4294967295
 8008e2a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a18      	ldr	r2, [pc, #96]	@ (8008e90 <USB_HostInit+0x170>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d10b      	bne.n	8008e4c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e3a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a15      	ldr	r2, [pc, #84]	@ (8008e94 <USB_HostInit+0x174>)
 8008e40:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a14      	ldr	r2, [pc, #80]	@ (8008e98 <USB_HostInit+0x178>)
 8008e46:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008e4a:	e009      	b.n	8008e60 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2280      	movs	r2, #128	@ 0x80
 8008e50:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a11      	ldr	r2, [pc, #68]	@ (8008e9c <USB_HostInit+0x17c>)
 8008e56:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a11      	ldr	r2, [pc, #68]	@ (8008ea0 <USB_HostInit+0x180>)
 8008e5c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008e60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d105      	bne.n	8008e74 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	699b      	ldr	r3, [r3, #24]
 8008e6c:	f043 0210 	orr.w	r2, r3, #16
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	699a      	ldr	r2, [r3, #24]
 8008e78:	4b0a      	ldr	r3, [pc, #40]	@ (8008ea4 <USB_HostInit+0x184>)
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3718      	adds	r7, #24
 8008e86:	46bd      	mov	sp, r7
 8008e88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e8c:	b004      	add	sp, #16
 8008e8e:	4770      	bx	lr
 8008e90:	40040000 	.word	0x40040000
 8008e94:	01000200 	.word	0x01000200
 8008e98:	00e00300 	.word	0x00e00300
 8008e9c:	00600080 	.word	0x00600080
 8008ea0:	004000e0 	.word	0x004000e0
 8008ea4:	a3200008 	.word	0xa3200008

08008ea8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008ec6:	f023 0303 	bic.w	r3, r3, #3
 8008eca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	78fb      	ldrb	r3, [r7, #3]
 8008ed6:	f003 0303 	and.w	r3, r3, #3
 8008eda:	68f9      	ldr	r1, [r7, #12]
 8008edc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008ee4:	78fb      	ldrb	r3, [r7, #3]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d107      	bne.n	8008efa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008ef6:	6053      	str	r3, [r2, #4]
 8008ef8:	e00c      	b.n	8008f14 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008efa:	78fb      	ldrb	r3, [r7, #3]
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d107      	bne.n	8008f10 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f06:	461a      	mov	r2, r3
 8008f08:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008f0c:	6053      	str	r3, [r2, #4]
 8008f0e:	e001      	b.n	8008f14 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	e000      	b.n	8008f16 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3714      	adds	r7, #20
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008f42:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f50:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008f52:	2064      	movs	r0, #100	@ 0x64
 8008f54:	f7fa fc5a 	bl	800380c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008f60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f64:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008f66:	200a      	movs	r0, #10
 8008f68:	f7fa fc50 	bl	800380c <HAL_Delay>

  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b085      	sub	sp, #20
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	460b      	mov	r3, r1
 8008f80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008f86:	2300      	movs	r3, #0
 8008f88:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008f9a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d109      	bne.n	8008fba <USB_DriveVbus+0x44>
 8008fa6:	78fb      	ldrb	r3, [r7, #3]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d106      	bne.n	8008fba <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008fb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008fb8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008fc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fc4:	d109      	bne.n	8008fda <USB_DriveVbus+0x64>
 8008fc6:	78fb      	ldrb	r3, [r7, #3]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d106      	bne.n	8008fda <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008fd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008fd8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3714      	adds	r7, #20
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	0c5b      	lsrs	r3, r3, #17
 8009006:	f003 0303 	and.w	r3, r3, #3
}
 800900a:	4618      	mov	r0, r3
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8009016:	b480      	push	{r7}
 8009018:	b085      	sub	sp, #20
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	b29b      	uxth	r3, r3
}
 800902c:	4618      	mov	r0, r3
 800902e:	3714      	adds	r7, #20
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b088      	sub	sp, #32
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	4608      	mov	r0, r1
 8009042:	4611      	mov	r1, r2
 8009044:	461a      	mov	r2, r3
 8009046:	4603      	mov	r3, r0
 8009048:	70fb      	strb	r3, [r7, #3]
 800904a:	460b      	mov	r3, r1
 800904c:	70bb      	strb	r3, [r7, #2]
 800904e:	4613      	mov	r3, r2
 8009050:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800905a:	78fb      	ldrb	r3, [r7, #3]
 800905c:	015a      	lsls	r2, r3, #5
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	4413      	add	r3, r2
 8009062:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009066:	461a      	mov	r2, r3
 8009068:	f04f 33ff 	mov.w	r3, #4294967295
 800906c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800906e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009072:	2b03      	cmp	r3, #3
 8009074:	d87c      	bhi.n	8009170 <USB_HC_Init+0x138>
 8009076:	a201      	add	r2, pc, #4	@ (adr r2, 800907c <USB_HC_Init+0x44>)
 8009078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907c:	0800908d 	.word	0x0800908d
 8009080:	08009133 	.word	0x08009133
 8009084:	0800908d 	.word	0x0800908d
 8009088:	080090f5 	.word	0x080090f5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800908c:	78fb      	ldrb	r3, [r7, #3]
 800908e:	015a      	lsls	r2, r3, #5
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	4413      	add	r3, r2
 8009094:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009098:	461a      	mov	r2, r3
 800909a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800909e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80090a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	da10      	bge.n	80090ca <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80090a8:	78fb      	ldrb	r3, [r7, #3]
 80090aa:	015a      	lsls	r2, r3, #5
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	4413      	add	r3, r2
 80090b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	78fa      	ldrb	r2, [r7, #3]
 80090b8:	0151      	lsls	r1, r2, #5
 80090ba:	693a      	ldr	r2, [r7, #16]
 80090bc:	440a      	add	r2, r1
 80090be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090c6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80090c8:	e055      	b.n	8009176 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a6f      	ldr	r2, [pc, #444]	@ (800928c <USB_HC_Init+0x254>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d151      	bne.n	8009176 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80090d2:	78fb      	ldrb	r3, [r7, #3]
 80090d4:	015a      	lsls	r2, r3, #5
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	4413      	add	r3, r2
 80090da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	78fa      	ldrb	r2, [r7, #3]
 80090e2:	0151      	lsls	r1, r2, #5
 80090e4:	693a      	ldr	r2, [r7, #16]
 80090e6:	440a      	add	r2, r1
 80090e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090ec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80090f0:	60d3      	str	r3, [r2, #12]
      break;
 80090f2:	e040      	b.n	8009176 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80090f4:	78fb      	ldrb	r3, [r7, #3]
 80090f6:	015a      	lsls	r2, r3, #5
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	4413      	add	r3, r2
 80090fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009100:	461a      	mov	r2, r3
 8009102:	f240 639d 	movw	r3, #1693	@ 0x69d
 8009106:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009108:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800910c:	2b00      	cmp	r3, #0
 800910e:	da34      	bge.n	800917a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009110:	78fb      	ldrb	r3, [r7, #3]
 8009112:	015a      	lsls	r2, r3, #5
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	4413      	add	r3, r2
 8009118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	78fa      	ldrb	r2, [r7, #3]
 8009120:	0151      	lsls	r1, r2, #5
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	440a      	add	r2, r1
 8009126:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800912a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800912e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009130:	e023      	b.n	800917a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009132:	78fb      	ldrb	r3, [r7, #3]
 8009134:	015a      	lsls	r2, r3, #5
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	4413      	add	r3, r2
 800913a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800913e:	461a      	mov	r2, r3
 8009140:	f240 2325 	movw	r3, #549	@ 0x225
 8009144:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009146:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800914a:	2b00      	cmp	r3, #0
 800914c:	da17      	bge.n	800917e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800914e:	78fb      	ldrb	r3, [r7, #3]
 8009150:	015a      	lsls	r2, r3, #5
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	4413      	add	r3, r2
 8009156:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	78fa      	ldrb	r2, [r7, #3]
 800915e:	0151      	lsls	r1, r2, #5
 8009160:	693a      	ldr	r2, [r7, #16]
 8009162:	440a      	add	r2, r1
 8009164:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009168:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800916c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800916e:	e006      	b.n	800917e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	77fb      	strb	r3, [r7, #31]
      break;
 8009174:	e004      	b.n	8009180 <USB_HC_Init+0x148>
      break;
 8009176:	bf00      	nop
 8009178:	e002      	b.n	8009180 <USB_HC_Init+0x148>
      break;
 800917a:	bf00      	nop
 800917c:	e000      	b.n	8009180 <USB_HC_Init+0x148>
      break;
 800917e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009180:	78fb      	ldrb	r3, [r7, #3]
 8009182:	015a      	lsls	r2, r3, #5
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	4413      	add	r3, r2
 8009188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800918c:	461a      	mov	r2, r3
 800918e:	2300      	movs	r3, #0
 8009190:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009192:	78fb      	ldrb	r3, [r7, #3]
 8009194:	015a      	lsls	r2, r3, #5
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	4413      	add	r3, r2
 800919a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	78fa      	ldrb	r2, [r7, #3]
 80091a2:	0151      	lsls	r1, r2, #5
 80091a4:	693a      	ldr	r2, [r7, #16]
 80091a6:	440a      	add	r2, r1
 80091a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091ac:	f043 0302 	orr.w	r3, r3, #2
 80091b0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80091b8:	699a      	ldr	r2, [r3, #24]
 80091ba:	78fb      	ldrb	r3, [r7, #3]
 80091bc:	f003 030f 	and.w	r3, r3, #15
 80091c0:	2101      	movs	r1, #1
 80091c2:	fa01 f303 	lsl.w	r3, r1, r3
 80091c6:	6939      	ldr	r1, [r7, #16]
 80091c8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80091cc:	4313      	orrs	r3, r2
 80091ce:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	699b      	ldr	r3, [r3, #24]
 80091d4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80091dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	da03      	bge.n	80091ec <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80091e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091e8:	61bb      	str	r3, [r7, #24]
 80091ea:	e001      	b.n	80091f0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80091ec:	2300      	movs	r3, #0
 80091ee:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7ff fef9 	bl	8008fe8 <USB_GetHostSpeed>
 80091f6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80091f8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d106      	bne.n	800920e <USB_HC_Init+0x1d6>
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2b02      	cmp	r3, #2
 8009204:	d003      	beq.n	800920e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009206:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800920a:	617b      	str	r3, [r7, #20]
 800920c:	e001      	b.n	8009212 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800920e:	2300      	movs	r3, #0
 8009210:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009212:	787b      	ldrb	r3, [r7, #1]
 8009214:	059b      	lsls	r3, r3, #22
 8009216:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800921a:	78bb      	ldrb	r3, [r7, #2]
 800921c:	02db      	lsls	r3, r3, #11
 800921e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009222:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009224:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009228:	049b      	lsls	r3, r3, #18
 800922a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800922e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009230:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009232:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009236:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	431a      	orrs	r2, r3
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009240:	78fa      	ldrb	r2, [r7, #3]
 8009242:	0151      	lsls	r1, r2, #5
 8009244:	693a      	ldr	r2, [r7, #16]
 8009246:	440a      	add	r2, r1
 8009248:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800924c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009250:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009252:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009256:	2b03      	cmp	r3, #3
 8009258:	d003      	beq.n	8009262 <USB_HC_Init+0x22a>
 800925a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800925e:	2b01      	cmp	r3, #1
 8009260:	d10f      	bne.n	8009282 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009262:	78fb      	ldrb	r3, [r7, #3]
 8009264:	015a      	lsls	r2, r3, #5
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	4413      	add	r3, r2
 800926a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	78fa      	ldrb	r2, [r7, #3]
 8009272:	0151      	lsls	r1, r2, #5
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	440a      	add	r2, r1
 8009278:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800927c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009280:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009282:	7ffb      	ldrb	r3, [r7, #31]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3720      	adds	r7, #32
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	40040000 	.word	0x40040000

08009290 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b08c      	sub	sp, #48	@ 0x30
 8009294:	af02      	add	r7, sp, #8
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	4613      	mov	r3, r2
 800929c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	785b      	ldrb	r3, [r3, #1]
 80092a6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80092a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80092ac:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	4a5d      	ldr	r2, [pc, #372]	@ (8009428 <USB_HC_StartXfer+0x198>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d12f      	bne.n	8009316 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80092b6:	79fb      	ldrb	r3, [r7, #7]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d11c      	bne.n	80092f6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	7c9b      	ldrb	r3, [r3, #18]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d003      	beq.n	80092cc <USB_HC_StartXfer+0x3c>
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	7c9b      	ldrb	r3, [r3, #18]
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	d124      	bne.n	8009316 <USB_HC_StartXfer+0x86>
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	799b      	ldrb	r3, [r3, #6]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d120      	bne.n	8009316 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	015a      	lsls	r2, r3, #5
 80092d8:	6a3b      	ldr	r3, [r7, #32]
 80092da:	4413      	add	r3, r2
 80092dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	69fa      	ldr	r2, [r7, #28]
 80092e4:	0151      	lsls	r1, r2, #5
 80092e6:	6a3a      	ldr	r2, [r7, #32]
 80092e8:	440a      	add	r2, r1
 80092ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80092ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092f2:	60d3      	str	r3, [r2, #12]
 80092f4:	e00f      	b.n	8009316 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	791b      	ldrb	r3, [r3, #4]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d10b      	bne.n	8009316 <USB_HC_StartXfer+0x86>
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	795b      	ldrb	r3, [r3, #5]
 8009302:	2b01      	cmp	r3, #1
 8009304:	d107      	bne.n	8009316 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	785b      	ldrb	r3, [r3, #1]
 800930a:	4619      	mov	r1, r3
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f000 fb6b 	bl	80099e8 <USB_DoPing>
        return HAL_OK;
 8009312:	2300      	movs	r3, #0
 8009314:	e232      	b.n	800977c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	799b      	ldrb	r3, [r3, #6]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d158      	bne.n	80093d0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800931e:	2301      	movs	r3, #1
 8009320:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	78db      	ldrb	r3, [r3, #3]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d007      	beq.n	800933a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800932a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	8a92      	ldrh	r2, [r2, #20]
 8009330:	fb03 f202 	mul.w	r2, r3, r2
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	61da      	str	r2, [r3, #28]
 8009338:	e07c      	b.n	8009434 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	7c9b      	ldrb	r3, [r3, #18]
 800933e:	2b01      	cmp	r3, #1
 8009340:	d130      	bne.n	80093a4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	2bbc      	cmp	r3, #188	@ 0xbc
 8009348:	d918      	bls.n	800937c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	8a9b      	ldrh	r3, [r3, #20]
 800934e:	461a      	mov	r2, r3
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	69da      	ldr	r2, [r3, #28]
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d003      	beq.n	800936c <USB_HC_StartXfer+0xdc>
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	2b02      	cmp	r3, #2
 800936a:	d103      	bne.n	8009374 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2202      	movs	r2, #2
 8009370:	60da      	str	r2, [r3, #12]
 8009372:	e05f      	b.n	8009434 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	2201      	movs	r2, #1
 8009378:	60da      	str	r2, [r3, #12]
 800937a:	e05b      	b.n	8009434 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	6a1a      	ldr	r2, [r3, #32]
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d007      	beq.n	800939c <USB_HC_StartXfer+0x10c>
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	2b02      	cmp	r3, #2
 8009392:	d003      	beq.n	800939c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	2204      	movs	r2, #4
 8009398:	60da      	str	r2, [r3, #12]
 800939a:	e04b      	b.n	8009434 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	2203      	movs	r2, #3
 80093a0:	60da      	str	r2, [r3, #12]
 80093a2:	e047      	b.n	8009434 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80093a4:	79fb      	ldrb	r3, [r7, #7]
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d10d      	bne.n	80093c6 <USB_HC_StartXfer+0x136>
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	8a92      	ldrh	r2, [r2, #20]
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d907      	bls.n	80093c6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80093b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	8a92      	ldrh	r2, [r2, #20]
 80093bc:	fb03 f202 	mul.w	r2, r3, r2
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	61da      	str	r2, [r3, #28]
 80093c4:	e036      	b.n	8009434 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	6a1a      	ldr	r2, [r3, #32]
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	61da      	str	r2, [r3, #28]
 80093ce:	e031      	b.n	8009434 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	6a1b      	ldr	r3, [r3, #32]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d018      	beq.n	800940a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	6a1b      	ldr	r3, [r3, #32]
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	8a92      	ldrh	r2, [r2, #20]
 80093e0:	4413      	add	r3, r2
 80093e2:	3b01      	subs	r3, #1
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	8a92      	ldrh	r2, [r2, #20]
 80093e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80093ec:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80093ee:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80093f0:	8b7b      	ldrh	r3, [r7, #26]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d90b      	bls.n	800940e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80093f6:	8b7b      	ldrh	r3, [r7, #26]
 80093f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80093fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	8a92      	ldrh	r2, [r2, #20]
 8009400:	fb03 f202 	mul.w	r2, r3, r2
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	61da      	str	r2, [r3, #28]
 8009408:	e001      	b.n	800940e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800940a:	2301      	movs	r3, #1
 800940c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	78db      	ldrb	r3, [r3, #3]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00a      	beq.n	800942c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009416:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009418:	68ba      	ldr	r2, [r7, #8]
 800941a:	8a92      	ldrh	r2, [r2, #20]
 800941c:	fb03 f202 	mul.w	r2, r3, r2
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	61da      	str	r2, [r3, #28]
 8009424:	e006      	b.n	8009434 <USB_HC_StartXfer+0x1a4>
 8009426:	bf00      	nop
 8009428:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	6a1a      	ldr	r2, [r3, #32]
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	69db      	ldr	r3, [r3, #28]
 8009438:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800943c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800943e:	04d9      	lsls	r1, r3, #19
 8009440:	4ba3      	ldr	r3, [pc, #652]	@ (80096d0 <USB_HC_StartXfer+0x440>)
 8009442:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009444:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	7d9b      	ldrb	r3, [r3, #22]
 800944a:	075b      	lsls	r3, r3, #29
 800944c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009450:	69f9      	ldr	r1, [r7, #28]
 8009452:	0148      	lsls	r0, r1, #5
 8009454:	6a39      	ldr	r1, [r7, #32]
 8009456:	4401      	add	r1, r0
 8009458:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800945c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800945e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009460:	79fb      	ldrb	r3, [r7, #7]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d009      	beq.n	800947a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	6999      	ldr	r1, [r3, #24]
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	015a      	lsls	r2, r3, #5
 800946e:	6a3b      	ldr	r3, [r7, #32]
 8009470:	4413      	add	r3, r2
 8009472:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009476:	460a      	mov	r2, r1
 8009478:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800947a:	6a3b      	ldr	r3, [r7, #32]
 800947c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	f003 0301 	and.w	r3, r3, #1
 8009486:	2b00      	cmp	r3, #0
 8009488:	bf0c      	ite	eq
 800948a:	2301      	moveq	r3, #1
 800948c:	2300      	movne	r3, #0
 800948e:	b2db      	uxtb	r3, r3
 8009490:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	015a      	lsls	r2, r3, #5
 8009496:	6a3b      	ldr	r3, [r7, #32]
 8009498:	4413      	add	r3, r2
 800949a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	69fa      	ldr	r2, [r7, #28]
 80094a2:	0151      	lsls	r1, r2, #5
 80094a4:	6a3a      	ldr	r2, [r7, #32]
 80094a6:	440a      	add	r2, r1
 80094a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80094ac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80094b0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	015a      	lsls	r2, r3, #5
 80094b6:	6a3b      	ldr	r3, [r7, #32]
 80094b8:	4413      	add	r3, r2
 80094ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	7e7b      	ldrb	r3, [r7, #25]
 80094c2:	075b      	lsls	r3, r3, #29
 80094c4:	69f9      	ldr	r1, [r7, #28]
 80094c6:	0148      	lsls	r0, r1, #5
 80094c8:	6a39      	ldr	r1, [r7, #32]
 80094ca:	4401      	add	r1, r0
 80094cc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80094d0:	4313      	orrs	r3, r2
 80094d2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	799b      	ldrb	r3, [r3, #6]
 80094d8:	2b01      	cmp	r3, #1
 80094da:	f040 80c3 	bne.w	8009664 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	7c5b      	ldrb	r3, [r3, #17]
 80094e2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80094e8:	4313      	orrs	r3, r2
 80094ea:	69fa      	ldr	r2, [r7, #28]
 80094ec:	0151      	lsls	r1, r2, #5
 80094ee:	6a3a      	ldr	r2, [r7, #32]
 80094f0:	440a      	add	r2, r1
 80094f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80094f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80094fa:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	015a      	lsls	r2, r3, #5
 8009500:	6a3b      	ldr	r3, [r7, #32]
 8009502:	4413      	add	r3, r2
 8009504:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	69fa      	ldr	r2, [r7, #28]
 800950c:	0151      	lsls	r1, r2, #5
 800950e:	6a3a      	ldr	r2, [r7, #32]
 8009510:	440a      	add	r2, r1
 8009512:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009516:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800951a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	79db      	ldrb	r3, [r3, #7]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d123      	bne.n	800956c <USB_HC_StartXfer+0x2dc>
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	78db      	ldrb	r3, [r3, #3]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d11f      	bne.n	800956c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	015a      	lsls	r2, r3, #5
 8009530:	6a3b      	ldr	r3, [r7, #32]
 8009532:	4413      	add	r3, r2
 8009534:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	69fa      	ldr	r2, [r7, #28]
 800953c:	0151      	lsls	r1, r2, #5
 800953e:	6a3a      	ldr	r2, [r7, #32]
 8009540:	440a      	add	r2, r1
 8009542:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009546:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800954a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	015a      	lsls	r2, r3, #5
 8009550:	6a3b      	ldr	r3, [r7, #32]
 8009552:	4413      	add	r3, r2
 8009554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	69fa      	ldr	r2, [r7, #28]
 800955c:	0151      	lsls	r1, r2, #5
 800955e:	6a3a      	ldr	r2, [r7, #32]
 8009560:	440a      	add	r2, r1
 8009562:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800956a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	7c9b      	ldrb	r3, [r3, #18]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d003      	beq.n	800957c <USB_HC_StartXfer+0x2ec>
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	7c9b      	ldrb	r3, [r3, #18]
 8009578:	2b03      	cmp	r3, #3
 800957a:	d117      	bne.n	80095ac <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009580:	2b01      	cmp	r3, #1
 8009582:	d113      	bne.n	80095ac <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	78db      	ldrb	r3, [r3, #3]
 8009588:	2b01      	cmp	r3, #1
 800958a:	d10f      	bne.n	80095ac <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	015a      	lsls	r2, r3, #5
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	4413      	add	r3, r2
 8009594:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	69fa      	ldr	r2, [r7, #28]
 800959c:	0151      	lsls	r1, r2, #5
 800959e:	6a3a      	ldr	r2, [r7, #32]
 80095a0:	440a      	add	r2, r1
 80095a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80095a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095aa:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	7c9b      	ldrb	r3, [r3, #18]
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d162      	bne.n	800967a <USB_HC_StartXfer+0x3ea>
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	78db      	ldrb	r3, [r3, #3]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d15e      	bne.n	800967a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	3b01      	subs	r3, #1
 80095c2:	2b03      	cmp	r3, #3
 80095c4:	d858      	bhi.n	8009678 <USB_HC_StartXfer+0x3e8>
 80095c6:	a201      	add	r2, pc, #4	@ (adr r2, 80095cc <USB_HC_StartXfer+0x33c>)
 80095c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095cc:	080095dd 	.word	0x080095dd
 80095d0:	080095ff 	.word	0x080095ff
 80095d4:	08009621 	.word	0x08009621
 80095d8:	08009643 	.word	0x08009643
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	015a      	lsls	r2, r3, #5
 80095e0:	6a3b      	ldr	r3, [r7, #32]
 80095e2:	4413      	add	r3, r2
 80095e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	69fa      	ldr	r2, [r7, #28]
 80095ec:	0151      	lsls	r1, r2, #5
 80095ee:	6a3a      	ldr	r2, [r7, #32]
 80095f0:	440a      	add	r2, r1
 80095f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80095f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095fa:	6053      	str	r3, [r2, #4]
          break;
 80095fc:	e03d      	b.n	800967a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80095fe:	69fb      	ldr	r3, [r7, #28]
 8009600:	015a      	lsls	r2, r3, #5
 8009602:	6a3b      	ldr	r3, [r7, #32]
 8009604:	4413      	add	r3, r2
 8009606:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	69fa      	ldr	r2, [r7, #28]
 800960e:	0151      	lsls	r1, r2, #5
 8009610:	6a3a      	ldr	r2, [r7, #32]
 8009612:	440a      	add	r2, r1
 8009614:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009618:	f043 030e 	orr.w	r3, r3, #14
 800961c:	6053      	str	r3, [r2, #4]
          break;
 800961e:	e02c      	b.n	800967a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	015a      	lsls	r2, r3, #5
 8009624:	6a3b      	ldr	r3, [r7, #32]
 8009626:	4413      	add	r3, r2
 8009628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	69fa      	ldr	r2, [r7, #28]
 8009630:	0151      	lsls	r1, r2, #5
 8009632:	6a3a      	ldr	r2, [r7, #32]
 8009634:	440a      	add	r2, r1
 8009636:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800963a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800963e:	6053      	str	r3, [r2, #4]
          break;
 8009640:	e01b      	b.n	800967a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	015a      	lsls	r2, r3, #5
 8009646:	6a3b      	ldr	r3, [r7, #32]
 8009648:	4413      	add	r3, r2
 800964a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	69fa      	ldr	r2, [r7, #28]
 8009652:	0151      	lsls	r1, r2, #5
 8009654:	6a3a      	ldr	r2, [r7, #32]
 8009656:	440a      	add	r2, r1
 8009658:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800965c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009660:	6053      	str	r3, [r2, #4]
          break;
 8009662:	e00a      	b.n	800967a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	015a      	lsls	r2, r3, #5
 8009668:	6a3b      	ldr	r3, [r7, #32]
 800966a:	4413      	add	r3, r2
 800966c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009670:	461a      	mov	r2, r3
 8009672:	2300      	movs	r3, #0
 8009674:	6053      	str	r3, [r2, #4]
 8009676:	e000      	b.n	800967a <USB_HC_StartXfer+0x3ea>
          break;
 8009678:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	015a      	lsls	r2, r3, #5
 800967e:	6a3b      	ldr	r3, [r7, #32]
 8009680:	4413      	add	r3, r2
 8009682:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009690:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	78db      	ldrb	r3, [r3, #3]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d004      	beq.n	80096a4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096a0:	613b      	str	r3, [r7, #16]
 80096a2:	e003      	b.n	80096ac <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80096aa:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80096b2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	015a      	lsls	r2, r3, #5
 80096b8:	6a3b      	ldr	r3, [r7, #32]
 80096ba:	4413      	add	r3, r2
 80096bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096c0:	461a      	mov	r2, r3
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80096c6:	79fb      	ldrb	r3, [r7, #7]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d003      	beq.n	80096d4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80096cc:	2300      	movs	r3, #0
 80096ce:	e055      	b.n	800977c <USB_HC_StartXfer+0x4ec>
 80096d0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	78db      	ldrb	r3, [r3, #3]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d14e      	bne.n	800977a <USB_HC_StartXfer+0x4ea>
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	6a1b      	ldr	r3, [r3, #32]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d04a      	beq.n	800977a <USB_HC_StartXfer+0x4ea>
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	79db      	ldrb	r3, [r3, #7]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d146      	bne.n	800977a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	7c9b      	ldrb	r3, [r3, #18]
 80096f0:	2b03      	cmp	r3, #3
 80096f2:	d831      	bhi.n	8009758 <USB_HC_StartXfer+0x4c8>
 80096f4:	a201      	add	r2, pc, #4	@ (adr r2, 80096fc <USB_HC_StartXfer+0x46c>)
 80096f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fa:	bf00      	nop
 80096fc:	0800970d 	.word	0x0800970d
 8009700:	08009731 	.word	0x08009731
 8009704:	0800970d 	.word	0x0800970d
 8009708:	08009731 	.word	0x08009731
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	6a1b      	ldr	r3, [r3, #32]
 8009710:	3303      	adds	r3, #3
 8009712:	089b      	lsrs	r3, r3, #2
 8009714:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009716:	8afa      	ldrh	r2, [r7, #22]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800971c:	b29b      	uxth	r3, r3
 800971e:	429a      	cmp	r2, r3
 8009720:	d91c      	bls.n	800975c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	699b      	ldr	r3, [r3, #24]
 8009726:	f043 0220 	orr.w	r2, r3, #32
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	619a      	str	r2, [r3, #24]
        }
        break;
 800972e:	e015      	b.n	800975c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	6a1b      	ldr	r3, [r3, #32]
 8009734:	3303      	adds	r3, #3
 8009736:	089b      	lsrs	r3, r3, #2
 8009738:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800973a:	8afa      	ldrh	r2, [r7, #22]
 800973c:	6a3b      	ldr	r3, [r7, #32]
 800973e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009742:	691b      	ldr	r3, [r3, #16]
 8009744:	b29b      	uxth	r3, r3
 8009746:	429a      	cmp	r2, r3
 8009748:	d90a      	bls.n	8009760 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	699b      	ldr	r3, [r3, #24]
 800974e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	619a      	str	r2, [r3, #24]
        }
        break;
 8009756:	e003      	b.n	8009760 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8009758:	bf00      	nop
 800975a:	e002      	b.n	8009762 <USB_HC_StartXfer+0x4d2>
        break;
 800975c:	bf00      	nop
 800975e:	e000      	b.n	8009762 <USB_HC_StartXfer+0x4d2>
        break;
 8009760:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	6999      	ldr	r1, [r3, #24]
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	785a      	ldrb	r2, [r3, #1]
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	6a1b      	ldr	r3, [r3, #32]
 800976e:	b29b      	uxth	r3, r3
 8009770:	2000      	movs	r0, #0
 8009772:	9000      	str	r0, [sp, #0]
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f7ff f9c9 	bl	8008b0c <USB_WritePacket>
  }

  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3728      	adds	r7, #40	@ 0x28
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009784:	b480      	push	{r7}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009796:	695b      	ldr	r3, [r3, #20]
 8009798:	b29b      	uxth	r3, r3
}
 800979a:	4618      	mov	r0, r3
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b089      	sub	sp, #36	@ 0x24
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	460b      	mov	r3, r1
 80097b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80097b6:	78fb      	ldrb	r3, [r7, #3]
 80097b8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80097ba:	2300      	movs	r3, #0
 80097bc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	015a      	lsls	r2, r3, #5
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	4413      	add	r3, r2
 80097c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	0c9b      	lsrs	r3, r3, #18
 80097ce:	f003 0303 	and.w	r3, r3, #3
 80097d2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	015a      	lsls	r2, r3, #5
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	4413      	add	r3, r2
 80097dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	0fdb      	lsrs	r3, r3, #31
 80097e4:	f003 0301 	and.w	r3, r3, #1
 80097e8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	015a      	lsls	r2, r3, #5
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	4413      	add	r3, r2
 80097f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	0fdb      	lsrs	r3, r3, #31
 80097fa:	f003 0301 	and.w	r3, r3, #1
 80097fe:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	f003 0320 	and.w	r3, r3, #32
 8009808:	2b20      	cmp	r3, #32
 800980a:	d10d      	bne.n	8009828 <USB_HC_Halt+0x82>
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10a      	bne.n	8009828 <USB_HC_Halt+0x82>
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d005      	beq.n	8009824 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	2b01      	cmp	r3, #1
 800981c:	d002      	beq.n	8009824 <USB_HC_Halt+0x7e>
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	2b03      	cmp	r3, #3
 8009822:	d101      	bne.n	8009828 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009824:	2300      	movs	r3, #0
 8009826:	e0d8      	b.n	80099da <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d002      	beq.n	8009834 <USB_HC_Halt+0x8e>
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	2b02      	cmp	r3, #2
 8009832:	d173      	bne.n	800991c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	015a      	lsls	r2, r3, #5
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	4413      	add	r3, r2
 800983c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	69ba      	ldr	r2, [r7, #24]
 8009844:	0151      	lsls	r1, r2, #5
 8009846:	69fa      	ldr	r2, [r7, #28]
 8009848:	440a      	add	r2, r1
 800984a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800984e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009852:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f003 0320 	and.w	r3, r3, #32
 800985c:	2b00      	cmp	r3, #0
 800985e:	d14a      	bne.n	80098f6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009864:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009868:	2b00      	cmp	r3, #0
 800986a:	d133      	bne.n	80098d4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	4413      	add	r3, r2
 8009874:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	69ba      	ldr	r2, [r7, #24]
 800987c:	0151      	lsls	r1, r2, #5
 800987e:	69fa      	ldr	r2, [r7, #28]
 8009880:	440a      	add	r2, r1
 8009882:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009886:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800988a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	015a      	lsls	r2, r3, #5
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	4413      	add	r3, r2
 8009894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	69ba      	ldr	r2, [r7, #24]
 800989c:	0151      	lsls	r1, r2, #5
 800989e:	69fa      	ldr	r2, [r7, #28]
 80098a0:	440a      	add	r2, r1
 80098a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80098aa:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	3301      	adds	r3, #1
 80098b0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80098b8:	d82e      	bhi.n	8009918 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	015a      	lsls	r2, r3, #5
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	4413      	add	r3, r2
 80098c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098d0:	d0ec      	beq.n	80098ac <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80098d2:	e081      	b.n	80099d8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	69ba      	ldr	r2, [r7, #24]
 80098e4:	0151      	lsls	r1, r2, #5
 80098e6:	69fa      	ldr	r2, [r7, #28]
 80098e8:	440a      	add	r2, r1
 80098ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80098f2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80098f4:	e070      	b.n	80099d8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	015a      	lsls	r2, r3, #5
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	4413      	add	r3, r2
 80098fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	69ba      	ldr	r2, [r7, #24]
 8009906:	0151      	lsls	r1, r2, #5
 8009908:	69fa      	ldr	r2, [r7, #28]
 800990a:	440a      	add	r2, r1
 800990c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009910:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009914:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009916:	e05f      	b.n	80099d8 <USB_HC_Halt+0x232>
            break;
 8009918:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800991a:	e05d      	b.n	80099d8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	015a      	lsls	r2, r3, #5
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	4413      	add	r3, r2
 8009924:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	69ba      	ldr	r2, [r7, #24]
 800992c:	0151      	lsls	r1, r2, #5
 800992e:	69fa      	ldr	r2, [r7, #28]
 8009930:	440a      	add	r2, r1
 8009932:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009936:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800993a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009948:	2b00      	cmp	r3, #0
 800994a:	d133      	bne.n	80099b4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	015a      	lsls	r2, r3, #5
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	4413      	add	r3, r2
 8009954:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	69ba      	ldr	r2, [r7, #24]
 800995c:	0151      	lsls	r1, r2, #5
 800995e:	69fa      	ldr	r2, [r7, #28]
 8009960:	440a      	add	r2, r1
 8009962:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009966:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800996a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	015a      	lsls	r2, r3, #5
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	4413      	add	r3, r2
 8009974:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	69ba      	ldr	r2, [r7, #24]
 800997c:	0151      	lsls	r1, r2, #5
 800997e:	69fa      	ldr	r2, [r7, #28]
 8009980:	440a      	add	r2, r1
 8009982:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009986:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800998a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	3301      	adds	r3, #1
 8009990:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009998:	d81d      	bhi.n	80099d6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	015a      	lsls	r2, r3, #5
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	4413      	add	r3, r2
 80099a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099b0:	d0ec      	beq.n	800998c <USB_HC_Halt+0x1e6>
 80099b2:	e011      	b.n	80099d8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	69ba      	ldr	r2, [r7, #24]
 80099c4:	0151      	lsls	r1, r2, #5
 80099c6:	69fa      	ldr	r2, [r7, #28]
 80099c8:	440a      	add	r2, r1
 80099ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80099ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80099d2:	6013      	str	r3, [r2, #0]
 80099d4:	e000      	b.n	80099d8 <USB_HC_Halt+0x232>
          break;
 80099d6:	bf00      	nop
    }
  }

  return HAL_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3724      	adds	r7, #36	@ 0x24
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr
	...

080099e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b087      	sub	sp, #28
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	460b      	mov	r3, r1
 80099f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80099f8:	78fb      	ldrb	r3, [r7, #3]
 80099fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80099fc:	2301      	movs	r3, #1
 80099fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	04da      	lsls	r2, r3, #19
 8009a04:	4b15      	ldr	r3, [pc, #84]	@ (8009a5c <USB_DoPing+0x74>)
 8009a06:	4013      	ands	r3, r2
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	0151      	lsls	r1, r2, #5
 8009a0c:	697a      	ldr	r2, [r7, #20]
 8009a0e:	440a      	add	r2, r1
 8009a10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009a14:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009a18:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	015a      	lsls	r2, r3, #5
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	4413      	add	r3, r2
 8009a22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009a30:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009a38:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	015a      	lsls	r2, r3, #5
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	4413      	add	r3, r2
 8009a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a46:	461a      	mov	r2, r3
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	371c      	adds	r7, #28
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	1ff80000 	.word	0x1ff80000

08009a60 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b088      	sub	sp, #32
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009a70:	2300      	movs	r3, #0
 8009a72:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7fe ff8c 	bl	8008992 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a7a:	2110      	movs	r1, #16
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7fe ffe5 	bl	8008a4c <USB_FlushTxFifo>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d001      	beq.n	8009a8c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f7ff f80f 	bl	8008ab0 <USB_FlushRxFifo>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d001      	beq.n	8009a9c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	61bb      	str	r3, [r7, #24]
 8009aa0:	e01f      	b.n	8009ae2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	015a      	lsls	r2, r3, #5
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ab8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ac0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009ac8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	015a      	lsls	r2, r3, #5
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	61bb      	str	r3, [r7, #24]
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	2b0f      	cmp	r3, #15
 8009ae6:	d9dc      	bls.n	8009aa2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009ae8:	2300      	movs	r3, #0
 8009aea:	61bb      	str	r3, [r7, #24]
 8009aec:	e034      	b.n	8009b58 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	015a      	lsls	r2, r3, #5
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	4413      	add	r3, r2
 8009af6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b04:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009b0c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009b14:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	015a      	lsls	r2, r3, #5
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b22:	461a      	mov	r2, r3
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009b34:	d80c      	bhi.n	8009b50 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	015a      	lsls	r2, r3, #5
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b4c:	d0ec      	beq.n	8009b28 <USB_StopHost+0xc8>
 8009b4e:	e000      	b.n	8009b52 <USB_StopHost+0xf2>
        break;
 8009b50:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	3301      	adds	r3, #1
 8009b56:	61bb      	str	r3, [r7, #24]
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	2b0f      	cmp	r3, #15
 8009b5c:	d9c7      	bls.n	8009aee <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009b64:	461a      	mov	r2, r3
 8009b66:	f04f 33ff 	mov.w	r3, #4294967295
 8009b6a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b72:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f7fe fefb 	bl	8008970 <USB_EnableGlobalInt>

  return ret;
 8009b7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3720      	adds	r7, #32
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009b84:	b590      	push	{r4, r7, lr}
 8009b86:	b08b      	sub	sp, #44	@ 0x2c
 8009b88:	af04      	add	r7, sp, #16
 8009b8a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint16_t ep_mps;
  uint8_t max_ep;
  uint8_t num = 0U;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b96:	7919      	ldrb	r1, [r3, #4]
 8009b98:	23ff      	movs	r3, #255	@ 0xff
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f001 f873 	bl	800ac88 <USBH_FindInterface>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009ba6:	7dbb      	ldrb	r3, [r7, #22]
 8009ba8:	2bff      	cmp	r3, #255	@ 0xff
 8009baa:	d002      	beq.n	8009bb2 <USBH_HID_InterfaceInit+0x2e>
 8009bac:	7dbb      	ldrb	r3, [r7, #22]
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d90f      	bls.n	8009bd2 <USBH_HID_InterfaceInit+0x4e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 8009bb2:	48a9      	ldr	r0, [pc, #676]	@ (8009e58 <USBH_HID_InterfaceInit+0x2d4>)
 8009bb4:	f003 fa3a 	bl	800d02c <iprintf>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	48a6      	ldr	r0, [pc, #664]	@ (8009e5c <USBH_HID_InterfaceInit+0x2d8>)
 8009bc4:	f003 fa32 	bl	800d02c <iprintf>
 8009bc8:	200a      	movs	r0, #10
 8009bca:	f003 fa41 	bl	800d050 <putchar>
    return USBH_FAIL;
 8009bce:	2302      	movs	r3, #2
 8009bd0:	e13d      	b.n	8009e4e <USBH_HID_InterfaceInit+0x2ca>
  }

  status = USBH_SelectInterface(phost, interface);
 8009bd2:	7dbb      	ldrb	r3, [r7, #22]
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 ffee 	bl	800abb8 <USBH_SelectInterface>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8009be0:	7d7b      	ldrb	r3, [r7, #21]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d001      	beq.n	8009bea <USBH_HID_InterfaceInit+0x66>
  {
    return USBH_FAIL;
 8009be6:	2302      	movs	r3, #2
 8009be8:	e131      	b.n	8009e4e <USBH_HID_InterfaceInit+0x2ca>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8009bf0:	2034      	movs	r0, #52	@ 0x34
 8009bf2:	f003 f89b 	bl	800cd2c <malloc>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c00:	69db      	ldr	r3, [r3, #28]
 8009c02:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d10a      	bne.n	8009c20 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
 8009c0a:	4893      	ldr	r0, [pc, #588]	@ (8009e58 <USBH_HID_InterfaceInit+0x2d4>)
 8009c0c:	f003 fa0e 	bl	800d02c <iprintf>
 8009c10:	4893      	ldr	r0, [pc, #588]	@ (8009e60 <USBH_HID_InterfaceInit+0x2dc>)
 8009c12:	f003 fa0b 	bl	800d02c <iprintf>
 8009c16:	200a      	movs	r0, #10
 8009c18:	f003 fa1a 	bl	800d050 <putchar>
    return USBH_FAIL;
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	e116      	b.n	8009e4e <USBH_HID_InterfaceInit+0x2ca>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8009c20:	2234      	movs	r2, #52	@ 0x34
 8009c22:	2100      	movs	r1, #0
 8009c24:	6938      	ldr	r0, [r7, #16]
 8009c26:	f003 fb91 	bl	800d34c <memset>

  HID_Handle->state = USBH_HID_ERROR;
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	2207      	movs	r2, #7
 8009c2e:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8009c30:	7dbb      	ldrb	r3, [r7, #22]
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	211a      	movs	r1, #26
 8009c36:	fb01 f303 	mul.w	r3, r1, r3
 8009c3a:	4413      	add	r3, r2
 8009c3c:	f203 3349 	addw	r3, r3, #841	@ 0x349
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d109      	bne.n	8009c5a <USBH_HID_InterfaceInit+0xd6>
  {
    USBH_UsrLog("KeyBoard device found!");
 8009c46:	4887      	ldr	r0, [pc, #540]	@ (8009e64 <USBH_HID_InterfaceInit+0x2e0>)
 8009c48:	f003 f9f0 	bl	800d02c <iprintf>
 8009c4c:	200a      	movs	r0, #10
 8009c4e:	f003 f9ff 	bl	800d050 <putchar>
    HID_Handle->Init = USBH_HID_KeybdInit;
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	4a84      	ldr	r2, [pc, #528]	@ (8009e68 <USBH_HID_InterfaceInit+0x2e4>)
 8009c56:	631a      	str	r2, [r3, #48]	@ 0x30
 8009c58:	e01c      	b.n	8009c94 <USBH_HID_InterfaceInit+0x110>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8009c5a:	7dbb      	ldrb	r3, [r7, #22]
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	211a      	movs	r1, #26
 8009c60:	fb01 f303 	mul.w	r3, r1, r3
 8009c64:	4413      	add	r3, r2
 8009c66:	f203 3349 	addw	r3, r3, #841	@ 0x349
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d109      	bne.n	8009c84 <USBH_HID_InterfaceInit+0x100>
  {
    USBH_UsrLog("Mouse device found!");
 8009c70:	487e      	ldr	r0, [pc, #504]	@ (8009e6c <USBH_HID_InterfaceInit+0x2e8>)
 8009c72:	f003 f9db 	bl	800d02c <iprintf>
 8009c76:	200a      	movs	r0, #10
 8009c78:	f003 f9ea 	bl	800d050 <putchar>
    HID_Handle->Init = USBH_HID_MouseInit;
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	4a7c      	ldr	r2, [pc, #496]	@ (8009e70 <USBH_HID_InterfaceInit+0x2ec>)
 8009c80:	631a      	str	r2, [r3, #48]	@ 0x30
 8009c82:	e007      	b.n	8009c94 <USBH_HID_InterfaceInit+0x110>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
 8009c84:	487b      	ldr	r0, [pc, #492]	@ (8009e74 <USBH_HID_InterfaceInit+0x2f0>)
 8009c86:	f003 f9d1 	bl	800d02c <iprintf>
 8009c8a:	200a      	movs	r0, #10
 8009c8c:	f003 f9e0 	bl	800d050 <putchar>
    return USBH_FAIL;
 8009c90:	2302      	movs	r3, #2
 8009c92:	e0dc      	b.n	8009e4e <USBH_HID_InterfaceInit+0x2ca>
  }

  HID_Handle->state     = USBH_HID_INIT;
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	2200      	movs	r2, #0
 8009c98:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = USBH_HID_REQ_INIT;
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009ca0:	7dbb      	ldrb	r3, [r7, #22]
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	211a      	movs	r1, #26
 8009ca6:	fb01 f303 	mul.w	r3, r1, r3
 8009caa:	4413      	add	r3, r2
 8009cac:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009cb0:	781a      	ldrb	r2, [r3, #0]
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009cb6:	7dbb      	ldrb	r3, [r7, #22]
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	211a      	movs	r1, #26
 8009cbc:	fb01 f303 	mul.w	r3, r1, r3
 8009cc0:	4413      	add	r3, r2
 8009cc2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009cc6:	881a      	ldrh	r2, [r3, #0]
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8009ccc:	7dbb      	ldrb	r3, [r7, #22]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	211a      	movs	r1, #26
 8009cd2:	fb01 f303 	mul.w	r3, r1, r3
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f203 3352 	addw	r3, r3, #850	@ 0x352
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll < HID_MIN_POLL)
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	8b9b      	ldrh	r3, [r3, #28]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d102      	bne.n	8009cf2 <USBH_HID_InterfaceInit+0x16e>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8009cf2:	7dbb      	ldrb	r3, [r7, #22]
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	211a      	movs	r1, #26
 8009cf8:	fb01 f303 	mul.w	r3, r1, r3
 8009cfc:	4413      	add	r3, r2
 8009cfe:	f203 3346 	addw	r3, r3, #838	@ 0x346
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	2b02      	cmp	r3, #2
 8009d06:	bf28      	it	cs
 8009d08:	2302      	movcs	r3, #2
 8009d0a:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	75fb      	strb	r3, [r7, #23]
 8009d10:	e097      	b.n	8009e42 <USBH_HID_InterfaceInit+0x2be>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 8009d12:	7dbb      	ldrb	r3, [r7, #22]
 8009d14:	7df9      	ldrb	r1, [r7, #23]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	3101      	adds	r1, #1
 8009d1a:	00c9      	lsls	r1, r1, #3
 8009d1c:	201a      	movs	r0, #26
 8009d1e:	fb00 f303 	mul.w	r3, r0, r3
 8009d22:	440b      	add	r3, r1
 8009d24:	4413      	add	r3, r2
 8009d26:	f203 3346 	addw	r3, r3, #838	@ 0x346
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	b25b      	sxtb	r3, r3
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	da42      	bge.n	8009db8 <USBH_HID_InterfaceInit+0x234>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8009d32:	7dbb      	ldrb	r3, [r7, #22]
 8009d34:	7df9      	ldrb	r1, [r7, #23]
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	3101      	adds	r1, #1
 8009d3a:	00c9      	lsls	r1, r1, #3
 8009d3c:	201a      	movs	r0, #26
 8009d3e:	fb00 f303 	mul.w	r3, r0, r3
 8009d42:	440b      	add	r3, r1
 8009d44:	4413      	add	r3, r2
 8009d46:	f203 3346 	addw	r3, r3, #838	@ 0x346
 8009d4a:	781a      	ldrb	r2, [r3, #0]
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	791b      	ldrb	r3, [r3, #4]
 8009d54:	4619      	mov	r1, r3
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f002 fc89 	bl	800c66e <USBH_AllocPipe>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	461a      	mov	r2, r3
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	705a      	strb	r2, [r3, #1]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 8009d64:	7dbb      	ldrb	r3, [r7, #22]
 8009d66:	7df9      	ldrb	r1, [r7, #23]
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	3101      	adds	r1, #1
 8009d6c:	00c9      	lsls	r1, r1, #3
 8009d6e:	201a      	movs	r0, #26
 8009d70:	fb00 f303 	mul.w	r3, r0, r3
 8009d74:	440b      	add	r3, r1
 8009d76:	4413      	add	r3, r2
 8009d78:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8009d7c:	881b      	ldrh	r3, [r3, #0]
 8009d7e:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	7859      	ldrb	r1, [r3, #1]
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	7918      	ldrb	r0, [r3, #4]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d94:	89ba      	ldrh	r2, [r7, #12]
 8009d96:	9202      	str	r2, [sp, #8]
 8009d98:	2203      	movs	r2, #3
 8009d9a:	9201      	str	r2, [sp, #4]
 8009d9c:	9300      	str	r3, [sp, #0]
 8009d9e:	4623      	mov	r3, r4
 8009da0:	4602      	mov	r2, r0
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f002 fc34 	bl	800c610 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	785b      	ldrb	r3, [r3, #1]
 8009dac:	2200      	movs	r2, #0
 8009dae:	4619      	mov	r1, r3
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f002 ff35 	bl	800cc20 <USBH_LL_SetToggle>
 8009db6:	e041      	b.n	8009e3c <USBH_HID_InterfaceInit+0x2b8>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8009db8:	7dbb      	ldrb	r3, [r7, #22]
 8009dba:	7df9      	ldrb	r1, [r7, #23]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	3101      	adds	r1, #1
 8009dc0:	00c9      	lsls	r1, r1, #3
 8009dc2:	201a      	movs	r0, #26
 8009dc4:	fb00 f303 	mul.w	r3, r0, r3
 8009dc8:	440b      	add	r3, r1
 8009dca:	4413      	add	r3, r2
 8009dcc:	f203 3346 	addw	r3, r3, #838	@ 0x346
 8009dd0:	781a      	ldrb	r2, [r3, #0]
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	78db      	ldrb	r3, [r3, #3]
 8009dda:	4619      	mov	r1, r3
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f002 fc46 	bl	800c66e <USBH_AllocPipe>
 8009de2:	4603      	mov	r3, r0
 8009de4:	461a      	mov	r2, r3
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	701a      	strb	r2, [r3, #0]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 8009dea:	7dbb      	ldrb	r3, [r7, #22]
 8009dec:	7df9      	ldrb	r1, [r7, #23]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	3101      	adds	r1, #1
 8009df2:	00c9      	lsls	r1, r1, #3
 8009df4:	201a      	movs	r0, #26
 8009df6:	fb00 f303 	mul.w	r3, r0, r3
 8009dfa:	440b      	add	r3, r1
 8009dfc:	4413      	add	r3, r2
 8009dfe:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8009e02:	881b      	ldrh	r3, [r3, #0]
 8009e04:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	7819      	ldrb	r1, [r3, #0]
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	78d8      	ldrb	r0, [r3, #3]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009e1a:	89ba      	ldrh	r2, [r7, #12]
 8009e1c:	9202      	str	r2, [sp, #8]
 8009e1e:	2203      	movs	r2, #3
 8009e20:	9201      	str	r2, [sp, #4]
 8009e22:	9300      	str	r3, [sp, #0]
 8009e24:	4623      	mov	r3, r4
 8009e26:	4602      	mov	r2, r0
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f002 fbf1 	bl	800c610 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	2200      	movs	r2, #0
 8009e34:	4619      	mov	r1, r3
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f002 fef2 	bl	800cc20 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8009e3c:	7dfb      	ldrb	r3, [r7, #23]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	75fb      	strb	r3, [r7, #23]
 8009e42:	7dfa      	ldrb	r2, [r7, #23]
 8009e44:	7bfb      	ldrb	r3, [r7, #15]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	f4ff af63 	bcc.w	8009d12 <USBH_HID_InterfaceInit+0x18e>
    }
  }

  return USBH_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	371c      	adds	r7, #28
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd90      	pop	{r4, r7, pc}
 8009e56:	bf00      	nop
 8009e58:	0800e184 	.word	0x0800e184
 8009e5c:	0800e190 	.word	0x0800e190
 8009e60:	0800e1b8 	.word	0x0800e1b8
 8009e64:	0800e1e0 	.word	0x0800e1e0
 8009e68:	0800a5a9 	.word	0x0800a5a9
 8009e6c:	0800e1f8 	.word	0x0800e1f8
 8009e70:	0800a7f9 	.word	0x0800a7f9
 8009e74:	0800e20c 	.word	0x0800e20c

08009e78 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e86:	69db      	ldr	r3, [r3, #28]
 8009e88:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	785b      	ldrb	r3, [r3, #1]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d00e      	beq.n	8009eb0 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	785b      	ldrb	r3, [r3, #1]
 8009e96:	4619      	mov	r1, r3
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f002 fbd8 	bl	800c64e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	785b      	ldrb	r3, [r3, #1]
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f002 fc03 	bl	800c6b0 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00e      	beq.n	8009ed6 <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f002 fbc5 	bl	800c64e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	4619      	mov	r1, r3
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f002 fbf0 	bl	800c6b0 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009edc:	69db      	ldr	r3, [r3, #28]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00b      	beq.n	8009efa <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ee8:	69db      	ldr	r3, [r3, #28]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f002 ff26 	bl	800cd3c <free>
    phost->pActiveClass->pData = 0U;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009efa:	2300      	movs	r3, #0
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3710      	adds	r7, #16
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8009f10:	2301      	movs	r3, #1
 8009f12:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f1a:	69db      	ldr	r3, [r3, #28]
 8009f1c:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	795b      	ldrb	r3, [r3, #5]
 8009f22:	2b05      	cmp	r3, #5
 8009f24:	d872      	bhi.n	800a00c <USBH_HID_ClassRequest+0x108>
 8009f26:	a201      	add	r2, pc, #4	@ (adr r2, 8009f2c <USBH_HID_ClassRequest+0x28>)
 8009f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f2c:	08009f45 	.word	0x08009f45
 8009f30:	0800a00d 	.word	0x0800a00d
 8009f34:	08009f5f 	.word	0x08009f5f
 8009f38:	08009f45 	.word	0x08009f45
 8009f3c:	08009f9b 	.word	0x08009f9b
 8009f40:	08009fc5 	.word	0x08009fc5
  {
    case USBH_HID_REQ_INIT:
    case USBH_HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	331c      	adds	r3, #28
 8009f4e:	4619      	mov	r1, r3
 8009f50:	4610      	mov	r0, r2
 8009f52:	f000 fa15 	bl	800a380 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = USBH_HID_REQ_GET_REPORT_DESC;
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	2202      	movs	r2, #2
 8009f5a:	715a      	strb	r2, [r3, #5]

      break;
 8009f5c:	e05d      	b.n	800a01a <USBH_HID_ClassRequest+0x116>
    case USBH_HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009f62:	4619      	mov	r1, r3
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f965 	bl	800a234 <USBH_HID_GetHIDReportDescriptor>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8009f6e:	7bbb      	ldrb	r3, [r7, #14]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d103      	bne.n	8009f7c <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = USBH_HID_REQ_SET_IDLE;
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	2204      	movs	r2, #4
 8009f78:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 8009f7a:	e049      	b.n	800a010 <USBH_HID_ClassRequest+0x10c>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8009f7c:	7bbb      	ldrb	r3, [r7, #14]
 8009f7e:	2b03      	cmp	r3, #3
 8009f80:	d146      	bne.n	800a010 <USBH_HID_ClassRequest+0x10c>
        USBH_ErrLog("Control error: HID: Device Get Report Descriptor request failed");
 8009f82:	4828      	ldr	r0, [pc, #160]	@ (800a024 <USBH_HID_ClassRequest+0x120>)
 8009f84:	f003 f852 	bl	800d02c <iprintf>
 8009f88:	4827      	ldr	r0, [pc, #156]	@ (800a028 <USBH_HID_ClassRequest+0x124>)
 8009f8a:	f003 f84f 	bl	800d02c <iprintf>
 8009f8e:	200a      	movs	r0, #10
 8009f90:	f003 f85e 	bl	800d050 <putchar>
        status = USBH_FAIL;
 8009f94:	2302      	movs	r3, #2
 8009f96:	73fb      	strb	r3, [r7, #15]
      break;
 8009f98:	e03a      	b.n	800a010 <USBH_HID_ClassRequest+0x10c>

    case USBH_HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f974 	bl	800a28c <USBH_HID_SetIdle>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 8009fa8:	7bbb      	ldrb	r3, [r7, #14]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d103      	bne.n	8009fb6 <USBH_HID_ClassRequest+0xb2>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	2205      	movs	r2, #5
 8009fb2:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 8009fb4:	e02e      	b.n	800a014 <USBH_HID_ClassRequest+0x110>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8009fb6:	7bbb      	ldrb	r3, [r7, #14]
 8009fb8:	2b03      	cmp	r3, #3
 8009fba:	d12b      	bne.n	800a014 <USBH_HID_ClassRequest+0x110>
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	2205      	movs	r2, #5
 8009fc0:	715a      	strb	r2, [r3, #5]
      break;
 8009fc2:	e027      	b.n	800a014 <USBH_HID_ClassRequest+0x110>

    case USBH_HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f9b4 	bl	800a334 <USBH_HID_SetProtocol>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8009fd0:	7bbb      	ldrb	r3, [r7, #14]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10b      	bne.n	8009fee <USBH_HID_ClassRequest+0xea>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_IDLE;
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	715a      	strb	r2, [r3, #5]

        /* all requests performed */
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009fe2:	2102      	movs	r1, #2
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	4798      	blx	r3
        status = USBH_OK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 8009fec:	e014      	b.n	800a018 <USBH_HID_ClassRequest+0x114>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8009fee:	7bbb      	ldrb	r3, [r7, #14]
 8009ff0:	2b03      	cmp	r3, #3
 8009ff2:	d111      	bne.n	800a018 <USBH_HID_ClassRequest+0x114>
        USBH_ErrLog("Control error: HID: Device Set protocol request failed");
 8009ff4:	480b      	ldr	r0, [pc, #44]	@ (800a024 <USBH_HID_ClassRequest+0x120>)
 8009ff6:	f003 f819 	bl	800d02c <iprintf>
 8009ffa:	480c      	ldr	r0, [pc, #48]	@ (800a02c <USBH_HID_ClassRequest+0x128>)
 8009ffc:	f003 f816 	bl	800d02c <iprintf>
 800a000:	200a      	movs	r0, #10
 800a002:	f003 f825 	bl	800d050 <putchar>
        status = USBH_FAIL;
 800a006:	2302      	movs	r3, #2
 800a008:	73fb      	strb	r3, [r7, #15]
      break;
 800a00a:	e005      	b.n	800a018 <USBH_HID_ClassRequest+0x114>

    case USBH_HID_REQ_IDLE:
    default:
      break;
 800a00c:	bf00      	nop
 800a00e:	e004      	b.n	800a01a <USBH_HID_ClassRequest+0x116>
      break;
 800a010:	bf00      	nop
 800a012:	e002      	b.n	800a01a <USBH_HID_ClassRequest+0x116>
      break;
 800a014:	bf00      	nop
 800a016:	e000      	b.n	800a01a <USBH_HID_ClassRequest+0x116>
      break;
 800a018:	bf00      	nop
  }

  return status;
 800a01a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	0800e224 	.word	0x0800e224
 800a028:	0800e22c 	.word	0x0800e22c
 800a02c:	0800e26c 	.word	0x0800e26c

0800a030 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b088      	sub	sp, #32
 800a034:	af02      	add	r7, sp, #8
 800a036:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a038:	2300      	movs	r3, #0
 800a03a:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a042:	69db      	ldr	r3, [r3, #28]
 800a044:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	789b      	ldrb	r3, [r3, #2]
 800a04a:	2b06      	cmp	r3, #6
 800a04c:	f200 80c1 	bhi.w	800a1d2 <USBH_HID_Process+0x1a2>
 800a050:	a201      	add	r2, pc, #4	@ (adr r2, 800a058 <USBH_HID_Process+0x28>)
 800a052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a056:	bf00      	nop
 800a058:	0800a075 	.word	0x0800a075
 800a05c:	0800a0ad 	.word	0x0800a0ad
 800a060:	0800a1d3 	.word	0x0800a1d3
 800a064:	0800a1d3 	.word	0x0800a1d3
 800a068:	0800a11d 	.word	0x0800a11d
 800a06c:	0800a107 	.word	0x0800a107
 800a070:	0800a14b 	.word	0x0800a14b
  {
    case USBH_HID_INIT:
      status = HID_Handle->Init(phost);
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	4798      	blx	r3
 800a07c:	4603      	mov	r3, r0
 800a07e:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800a080:	7dfb      	ldrb	r3, [r7, #23]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d103      	bne.n	800a08e <USBH_HID_Process+0x5e>
      {
        HID_Handle->state = USBH_HID_IDLE;
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	2201      	movs	r2, #1
 800a08a:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a08c:	e0a6      	b.n	800a1dc <USBH_HID_Process+0x1ac>
        USBH_ErrLog("HID Class Init failed");
 800a08e:	4856      	ldr	r0, [pc, #344]	@ (800a1e8 <USBH_HID_Process+0x1b8>)
 800a090:	f002 ffcc 	bl	800d02c <iprintf>
 800a094:	4855      	ldr	r0, [pc, #340]	@ (800a1ec <USBH_HID_Process+0x1bc>)
 800a096:	f002 ffc9 	bl	800d02c <iprintf>
 800a09a:	200a      	movs	r0, #10
 800a09c:	f002 ffd8 	bl	800d050 <putchar>
        HID_Handle->state = USBH_HID_ERROR;
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	2207      	movs	r2, #7
 800a0a4:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800a0a6:	2302      	movs	r3, #2
 800a0a8:	75fb      	strb	r3, [r7, #23]
      break;
 800a0aa:	e097      	b.n	800a1dc <USBH_HID_Process+0x1ac>

    case USBH_HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	695a      	ldr	r2, [r3, #20]
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	8b1b      	ldrh	r3, [r3, #24]
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	2101      	movs	r1, #1
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f90c 	bl	800a2dc <USBH_HID_GetReport>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800a0c8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d103      	bne.n	800a0d6 <USBH_HID_Process+0xa6>
      {
        HID_Handle->state = USBH_HID_SYNC;
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	2205      	movs	r2, #5
 800a0d2:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a0d4:	e082      	b.n	800a1dc <USBH_HID_Process+0x1ac>
      else if (status == USBH_BUSY)
 800a0d6:	7dfb      	ldrb	r3, [r7, #23]
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d105      	bne.n	800a0e8 <USBH_HID_Process+0xb8>
        HID_Handle->state = USBH_HID_IDLE;
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	75fb      	strb	r3, [r7, #23]
      break;
 800a0e6:	e079      	b.n	800a1dc <USBH_HID_Process+0x1ac>
      else if (status == USBH_NOT_SUPPORTED)
 800a0e8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ea:	2b03      	cmp	r3, #3
 800a0ec:	d105      	bne.n	800a0fa <USBH_HID_Process+0xca>
        HID_Handle->state = USBH_HID_SYNC;
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	2205      	movs	r2, #5
 800a0f2:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	75fb      	strb	r3, [r7, #23]
      break;
 800a0f8:	e070      	b.n	800a1dc <USBH_HID_Process+0x1ac>
        HID_Handle->state = USBH_HID_ERROR;
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	2207      	movs	r2, #7
 800a0fe:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800a100:	2302      	movs	r3, #2
 800a102:	75fb      	strb	r3, [r7, #23]
      break;
 800a104:	e06a      	b.n	800a1dc <USBH_HID_Process+0x1ac>

    case USBH_HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a10c:	f003 0301 	and.w	r3, r3, #1
 800a110:	2b00      	cmp	r3, #0
 800a112:	d060      	beq.n	800a1d6 <USBH_HID_Process+0x1a6>
      {
        HID_Handle->state = USBH_HID_GET_DATA;
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	2204      	movs	r2, #4
 800a118:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a11a:	e05c      	b.n	800a1d6 <USBH_HID_Process+0x1a6>

    case USBH_HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800a124:	b2da      	uxtb	r2, r3
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	785b      	ldrb	r3, [r3, #1]
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f002 fa51 	bl	800c5d2 <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = USBH_HID_POLL;
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	2206      	movs	r2, #6
 800a134:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	2200      	movs	r2, #0
 800a144:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      break;
 800a148:	e048      	b.n	800a1dc <USBH_HID_Process+0x1ac>

    case USBH_HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	785b      	ldrb	r3, [r3, #1]
 800a14e:	4619      	mov	r1, r3
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f002 fd3b 	bl	800cbcc <USBH_LL_GetURBState>
 800a156:	4603      	mov	r3, r0
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d124      	bne.n	800a1a6 <USBH_HID_Process+0x176>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	785b      	ldrb	r3, [r3, #1]
 800a160:	4619      	mov	r1, r3
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f002 fca0 	bl	800caa8 <USBH_LL_GetLastXferSize>
 800a168:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U) && (HID_Handle->fifo.buf != NULL))
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a170:	2b00      	cmp	r3, #0
 800a172:	d132      	bne.n	800a1da <USBH_HID_Process+0x1aa>
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d02f      	beq.n	800a1da <USBH_HID_Process+0x1aa>
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d02b      	beq.n	800a1da <USBH_HID_Process+0x1aa>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	f103 0008 	add.w	r0, r3, #8
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	6959      	ldr	r1, [r3, #20]
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	8b1b      	ldrh	r3, [r3, #24]
 800a190:	461a      	mov	r2, r3
 800a192:	f000 f9b5 	bl	800a500 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	2201      	movs	r2, #1
 800a19a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          USBH_HID_EventCallback(phost);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f7f7 f84e 	bl	8001240 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = USBH_HID_GET_DATA;
          }
        }
      }
      break;
 800a1a4:	e019      	b.n	800a1da <USBH_HID_Process+0x1aa>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	785b      	ldrb	r3, [r3, #1]
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f002 fd0d 	bl	800cbcc <USBH_LL_GetURBState>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b05      	cmp	r3, #5
 800a1b6:	d110      	bne.n	800a1da <USBH_HID_Process+0x1aa>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	7e9b      	ldrb	r3, [r3, #26]
 800a1bc:	4619      	mov	r1, r3
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f001 fcb6 	bl	800bb30 <USBH_ClrFeature>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d107      	bne.n	800a1da <USBH_HID_Process+0x1aa>
            HID_Handle->state = USBH_HID_GET_DATA;
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	2204      	movs	r2, #4
 800a1ce:	709a      	strb	r2, [r3, #2]
      break;
 800a1d0:	e003      	b.n	800a1da <USBH_HID_Process+0x1aa>

    default:
      break;
 800a1d2:	bf00      	nop
 800a1d4:	e002      	b.n	800a1dc <USBH_HID_Process+0x1ac>
      break;
 800a1d6:	bf00      	nop
 800a1d8:	e000      	b.n	800a1dc <USBH_HID_Process+0x1ac>
      break;
 800a1da:	bf00      	nop
  }

  return status;
 800a1dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3718      	adds	r7, #24
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	0800e224 	.word	0x0800e224
 800a1ec:	0800e2a4 	.word	0x0800e2a4

0800a1f0 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b085      	sub	sp, #20
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a1fe:	69db      	ldr	r3, [r3, #28]
 800a200:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == USBH_HID_POLL)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	789b      	ldrb	r3, [r3, #2]
 800a206:	2b06      	cmp	r3, #6
 800a208:	d10c      	bne.n	800a224 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6a1b      	ldr	r3, [r3, #32]
 800a214:	1ad3      	subs	r3, r2, r3
 800a216:	68fa      	ldr	r2, [r7, #12]
 800a218:	8b92      	ldrh	r2, [r2, #28]
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d302      	bcc.n	800a224 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = USBH_HID_GET_DATA;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2204      	movs	r2, #4
 800a222:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	3714      	adds	r7, #20
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
	...

0800a234 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b086      	sub	sp, #24
 800a238:	af02      	add	r7, sp, #8
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	460b      	mov	r3, r1
 800a23e:	807b      	strh	r3, [r7, #2]

  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a240:	887b      	ldrh	r3, [r7, #2]
 800a242:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a246:	d90a      	bls.n	800a25e <USBH_HID_GetHIDReportDescriptor+0x2a>
  {
    USBH_ErrLog("Control error: Get HID Report Descriptor failed, data buffer size issue");
 800a248:	480e      	ldr	r0, [pc, #56]	@ (800a284 <USBH_HID_GetHIDReportDescriptor+0x50>)
 800a24a:	f002 feef 	bl	800d02c <iprintf>
 800a24e:	480e      	ldr	r0, [pc, #56]	@ (800a288 <USBH_HID_GetHIDReportDescriptor+0x54>)
 800a250:	f002 feec 	bl	800d02c <iprintf>
 800a254:	200a      	movs	r0, #10
 800a256:	f002 fefb 	bl	800d050 <putchar>
    return USBH_NOT_SUPPORTED;
 800a25a:	2303      	movs	r3, #3
 800a25c:	e00e      	b.n	800a27c <USBH_HID_GetHIDReportDescriptor+0x48>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a264:	887b      	ldrh	r3, [r7, #2]
 800a266:	9300      	str	r3, [sp, #0]
 800a268:	4613      	mov	r3, r2
 800a26a:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
 800a26e:	2101      	movs	r1, #1
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f001 fbbd 	bl	800b9f0 <USBH_GetDescriptor>
 800a276:	4603      	mov	r3, r0
 800a278:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800a27a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	0800e224 	.word	0x0800e224
 800a288:	0800e2bc 	.word	0x0800e2bc

0800a28c <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	460b      	mov	r3, r1
 800a296:	70fb      	strb	r3, [r7, #3]
 800a298:	4613      	mov	r3, r2
 800a29a:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2221      	movs	r2, #33	@ 0x21
 800a2a0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	220a      	movs	r2, #10
 800a2a6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 800a2a8:	78fb      	ldrb	r3, [r7, #3]
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	021b      	lsls	r3, r3, #8
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	78bb      	ldrb	r3, [r7, #2]
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	b29a      	uxth	r2, r3
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f001 ff64 	bl	800c19a <USBH_CtlReq>
 800a2d2:	4603      	mov	r3, r0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3708      	adds	r7, #8
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	607b      	str	r3, [r7, #4]
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	72fb      	strb	r3, [r7, #11]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	22a1      	movs	r2, #161	@ 0xa1
 800a2f2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800a2fa:	7afb      	ldrb	r3, [r7, #11]
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	021b      	lsls	r3, r3, #8
 800a300:	b29a      	uxth	r2, r3
 800a302:	7abb      	ldrb	r3, [r7, #10]
 800a304:	b29b      	uxth	r3, r3
 800a306:	4313      	orrs	r3, r2
 800a308:	b29a      	uxth	r2, r3
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2200      	movs	r2, #0
 800a312:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800a314:	7e3b      	ldrb	r3, [r7, #24]
 800a316:	b29a      	uxth	r2, r3
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800a31c:	7e3b      	ldrb	r3, [r7, #24]
 800a31e:	b29b      	uxth	r3, r3
 800a320:	461a      	mov	r2, r3
 800a322:	6879      	ldr	r1, [r7, #4]
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f001 ff38 	bl	800c19a <USBH_CtlReq>
 800a32a:	4603      	mov	r3, r0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	460b      	mov	r3, r1
 800a33e:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2221      	movs	r2, #33	@ 0x21
 800a344:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	220b      	movs	r2, #11
 800a34a:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 800a34c:	78fb      	ldrb	r3, [r7, #3]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d003      	beq.n	800a35a <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	825a      	strh	r2, [r3, #18]
 800a358:	e002      	b.n	800a360 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2201      	movs	r2, #1
 800a35e:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800a36c:	2200      	movs	r2, #0
 800a36e:	2100      	movs	r1, #0
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f001 ff12 	bl	800c19a <USBH_CtlReq>
 800a376:	4603      	mov	r3, r0

}
 800a378:	4618      	mov	r0, r3
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	3302      	adds	r3, #2
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	461a      	mov	r2, r3
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	3303      	adds	r3, #3
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	021b      	lsls	r3, r3, #8
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800a3a4:	897b      	ldrh	r3, [r7, #10]
 800a3a6:	2b09      	cmp	r3, #9
 800a3a8:	d941      	bls.n	800a42e <USBH_HID_ParseHIDDesc+0xae>
  {
    ptr = USB_LEN_CFG_DESC;
 800a3aa:	2309      	movs	r3, #9
 800a3ac:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 800a3ae:	e03a      	b.n	800a426 <USBH_HID_ParseHIDDesc+0xa6>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a3b0:	f107 0308 	add.w	r3, r7, #8
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f001 fed5 	bl	800c166 <USBH_GetNextDesc>
 800a3bc:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	785b      	ldrb	r3, [r3, #1]
 800a3c2:	2b21      	cmp	r3, #33	@ 0x21
 800a3c4:	d12f      	bne.n	800a426 <USBH_HID_ParseHIDDesc+0xa6>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	781a      	ldrb	r2, [r3, #0]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	785a      	ldrb	r2, [r3, #1]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	3302      	adds	r3, #2
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	461a      	mov	r2, r3
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	3303      	adds	r3, #3
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	021b      	lsls	r3, r3, #8
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	b29a      	uxth	r2, r3
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	791a      	ldrb	r2, [r3, #4]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	795a      	ldrb	r2, [r3, #5]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	799a      	ldrb	r2, [r3, #6]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	3307      	adds	r3, #7
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	461a      	mov	r2, r3
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	3308      	adds	r3, #8
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	021b      	lsls	r3, r3, #8
 800a418:	b29b      	uxth	r3, r3
 800a41a:	4313      	orrs	r3, r2
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	811a      	strh	r2, [r3, #8]
        break;
 800a422:	bf00      	nop
      }
    }
  }
}
 800a424:	e003      	b.n	800a42e <USBH_HID_ParseHIDDesc+0xae>
    while (ptr < CfgDescLen)
 800a426:	893b      	ldrh	r3, [r7, #8]
 800a428:	897a      	ldrh	r2, [r7, #10]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d8c0      	bhi.n	800a3b0 <USBH_HID_ParseHIDDesc+0x30>
}
 800a42e:	bf00      	nop
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 800a436:	b480      	push	{r7}
 800a438:	b085      	sub	sp, #20
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	60f8      	str	r0, [r7, #12]
 800a43e:	60b9      	str	r1, [r7, #8]
 800a440:	4613      	mov	r3, r2
 800a442:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2200      	movs	r2, #0
 800a44e:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2200      	movs	r2, #0
 800a454:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	88fa      	ldrh	r2, [r7, #6]
 800a45a:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	601a      	str	r2, [r3, #0]
}
 800a462:	bf00      	nop
 800a464:	3714      	adds	r7, #20
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr

0800a46e <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 800a46e:	b480      	push	{r7}
 800a470:	b087      	sub	sp, #28
 800a472:	af00      	add	r7, sp, #0
 800a474:	60f8      	str	r0, [r7, #12]
 800a476:	60b9      	str	r1, [r7, #8]
 800a478:	4613      	mov	r3, r2
 800a47a:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	7a9b      	ldrb	r3, [r3, #10]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d131      	bne.n	800a4ec <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2201      	movs	r2, #1
 800a48c:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800a48e:	2300      	movs	r3, #0
 800a490:	82fb      	strh	r3, [r7, #22]
 800a492:	e027      	b.n	800a4e4 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	88da      	ldrh	r2, [r3, #6]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	889b      	ldrh	r3, [r3, #4]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d019      	beq.n	800a4d4 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	88d2      	ldrh	r2, [r2, #6]
 800a4a8:	441a      	add	r2, r3
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	1c59      	adds	r1, r3, #1
 800a4ae:	6139      	str	r1, [r7, #16]
 800a4b0:	7812      	ldrb	r2, [r2, #0]
 800a4b2:	701a      	strb	r2, [r3, #0]
        f->tail++;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	88db      	ldrh	r3, [r3, #6]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	88da      	ldrh	r2, [r3, #6]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	891b      	ldrh	r3, [r3, #8]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d108      	bne.n	800a4de <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	80da      	strh	r2, [r3, #6]
 800a4d2:	e004      	b.n	800a4de <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	729a      	strb	r2, [r3, #10]
        return i;
 800a4da:	8afb      	ldrh	r3, [r7, #22]
 800a4dc:	e00a      	b.n	800a4f4 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 800a4de:	8afb      	ldrh	r3, [r7, #22]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	82fb      	strh	r3, [r7, #22]
 800a4e4:	8afa      	ldrh	r2, [r7, #22]
 800a4e6:	88fb      	ldrh	r3, [r7, #6]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d3d3      	bcc.n	800a494 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800a4f2:	88fb      	ldrh	r3, [r7, #6]
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	371c      	adds	r7, #28
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800a500:	b480      	push	{r7}
 800a502:	b087      	sub	sp, #28
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	4613      	mov	r3, r2
 800a50c:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	7a9b      	ldrb	r3, [r3, #10]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d13c      	bne.n	800a594 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2201      	movs	r2, #1
 800a51e:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800a520:	2300      	movs	r3, #0
 800a522:	82fb      	strh	r3, [r7, #22]
 800a524:	e032      	b.n	800a58c <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	889b      	ldrh	r3, [r3, #4]
 800a52a:	3301      	adds	r3, #1
 800a52c:	68fa      	ldr	r2, [r7, #12]
 800a52e:	88d2      	ldrh	r2, [r2, #6]
 800a530:	4293      	cmp	r3, r2
 800a532:	d00a      	beq.n	800a54a <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	889b      	ldrh	r3, [r3, #4]
 800a538:	3301      	adds	r3, #1
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 800a53e:	4293      	cmp	r3, r2
 800a540:	d108      	bne.n	800a554 <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	88db      	ldrh	r3, [r3, #6]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d104      	bne.n	800a554 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2200      	movs	r2, #0
 800a54e:	729a      	strb	r2, [r3, #10]
        return i;
 800a550:	8afb      	ldrh	r3, [r7, #22]
 800a552:	e023      	b.n	800a59c <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	1c5a      	adds	r2, r3, #1
 800a558:	613a      	str	r2, [r7, #16]
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	6812      	ldr	r2, [r2, #0]
 800a55e:	68f9      	ldr	r1, [r7, #12]
 800a560:	8889      	ldrh	r1, [r1, #4]
 800a562:	440a      	add	r2, r1
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	7013      	strb	r3, [r2, #0]
        f->head++;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	889b      	ldrh	r3, [r3, #4]
 800a56c:	3301      	adds	r3, #1
 800a56e:	b29a      	uxth	r2, r3
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	889a      	ldrh	r2, [r3, #4]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	891b      	ldrh	r3, [r3, #8]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d102      	bne.n	800a586 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2200      	movs	r2, #0
 800a584:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 800a586:	8afb      	ldrh	r3, [r7, #22]
 800a588:	3301      	adds	r3, #1
 800a58a:	82fb      	strh	r3, [r7, #22]
 800a58c:	8afa      	ldrh	r2, [r7, #22]
 800a58e:	88fb      	ldrh	r3, [r7, #6]
 800a590:	429a      	cmp	r2, r3
 800a592:	d3c8      	bcc.n	800a526 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2200      	movs	r2, #0
 800a598:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800a59a:	88fb      	ldrh	r3, [r7, #6]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	371c      	adds	r7, #28
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a5b6:	69db      	ldr	r3, [r3, #28]
 800a5b8:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 800a5ba:	4b22      	ldr	r3, [pc, #136]	@ (800a644 <USBH_HID_KeybdInit+0x9c>)
 800a5bc:	2200      	movs	r2, #0
 800a5be:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 800a5c0:	4b20      	ldr	r3, [pc, #128]	@ (800a644 <USBH_HID_KeybdInit+0x9c>)
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 800a5c6:	4b1f      	ldr	r3, [pc, #124]	@ (800a644 <USBH_HID_KeybdInit+0x9c>)
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 800a5cc:	4b1d      	ldr	r3, [pc, #116]	@ (800a644 <USBH_HID_KeybdInit+0x9c>)
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 800a5d2:	4b1c      	ldr	r3, [pc, #112]	@ (800a644 <USBH_HID_KeybdInit+0x9c>)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 800a5d8:	4b1a      	ldr	r3, [pc, #104]	@ (800a644 <USBH_HID_KeybdInit+0x9c>)
 800a5da:	2200      	movs	r2, #0
 800a5dc:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 800a5de:	4b19      	ldr	r3, [pc, #100]	@ (800a644 <USBH_HID_KeybdInit+0x9c>)
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 800a5e4:	4b17      	ldr	r3, [pc, #92]	@ (800a644 <USBH_HID_KeybdInit+0x9c>)
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	721a      	strb	r2, [r3, #8]

  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	60fb      	str	r3, [r7, #12]
 800a5ee:	e00c      	b.n	800a60a <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 800a5f0:	4a15      	ldr	r2, [pc, #84]	@ (800a648 <USBH_HID_KeybdInit+0xa0>)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	701a      	strb	r2, [r3, #0]
    keybd_rx_report_buf[x] = 0U;
 800a5fa:	4a14      	ldr	r2, [pc, #80]	@ (800a64c <USBH_HID_KeybdInit+0xa4>)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	4413      	add	r3, r2
 800a600:	2200      	movs	r2, #0
 800a602:	701a      	strb	r2, [r3, #0]
  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	3301      	adds	r3, #1
 800a608:	60fb      	str	r3, [r7, #12]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2b07      	cmp	r3, #7
 800a60e:	d9ef      	bls.n	800a5f0 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	8b1b      	ldrh	r3, [r3, #24]
 800a614:	2b08      	cmp	r3, #8
 800a616:	d902      	bls.n	800a61e <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	2208      	movs	r2, #8
 800a61c:	831a      	strh	r2, [r3, #24]
  }

  HID_Handle->pData = keybd_rx_report_buf;
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	4a0a      	ldr	r2, [pc, #40]	@ (800a64c <USBH_HID_KeybdInit+0xa4>)
 800a622:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	f103 0008 	add.w	r0, r3, #8
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a630:	2250      	movs	r2, #80	@ 0x50
 800a632:	4619      	mov	r1, r3
 800a634:	f7ff feff 	bl	800a436 <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	20011840 	.word	0x20011840
 800a648:	20011858 	.word	0x20011858
 800a64c:	20011850 	.word	0x20011850

0800a650 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f80d 	bl	800a678 <USBH_HID_KeybdDecode>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d101      	bne.n	800a668 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 800a664:	4b03      	ldr	r3, [pc, #12]	@ (800a674 <USBH_HID_GetKeybdInfo+0x24>)
 800a666:	e000      	b.n	800a66a <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800a668:	2300      	movs	r3, #0
  }
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	20011840 	.word	0x20011840

0800a678 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a686:	69db      	ldr	r3, [r3, #28]
 800a688:	60bb      	str	r3, [r7, #8]

  if ((HID_Handle->length == 0U) || (HID_Handle->fifo.buf == NULL))
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	8b1b      	ldrh	r3, [r3, #24]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d003      	beq.n	800a69a <USBH_HID_KeybdDecode+0x22>
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d101      	bne.n	800a69e <USBH_HID_KeybdDecode+0x26>
  {
    return USBH_FAIL;
 800a69a:	2302      	movs	r3, #2
 800a69c:	e066      	b.n	800a76c <USBH_HID_KeybdDecode+0xf4>
  }

  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	f103 0008 	add.w	r0, r3, #8
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	8b1b      	ldrh	r3, [r3, #24]
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	4932      	ldr	r1, [pc, #200]	@ (800a774 <USBH_HID_KeybdDecode+0xfc>)
 800a6ac:	f7ff fedf 	bl	800a46e <USBH_HID_FifoRead>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	8b1b      	ldrh	r3, [r3, #24]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d156      	bne.n	800a76a <USBH_HID_KeybdDecode+0xf2>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 800a6bc:	2100      	movs	r1, #0
 800a6be:	482e      	ldr	r0, [pc, #184]	@ (800a778 <USBH_HID_KeybdDecode+0x100>)
 800a6c0:	f000 f8e4 	bl	800a88c <HID_ReadItem>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	b2da      	uxtb	r2, r3
 800a6c8:	4b2c      	ldr	r3, [pc, #176]	@ (800a77c <USBH_HID_KeybdDecode+0x104>)
 800a6ca:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800a6cc:	2100      	movs	r1, #0
 800a6ce:	482c      	ldr	r0, [pc, #176]	@ (800a780 <USBH_HID_KeybdDecode+0x108>)
 800a6d0:	f000 f8dc 	bl	800a88c <HID_ReadItem>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	b2da      	uxtb	r2, r3
 800a6d8:	4b28      	ldr	r3, [pc, #160]	@ (800a77c <USBH_HID_KeybdDecode+0x104>)
 800a6da:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 800a6dc:	2100      	movs	r1, #0
 800a6de:	4829      	ldr	r0, [pc, #164]	@ (800a784 <USBH_HID_KeybdDecode+0x10c>)
 800a6e0:	f000 f8d4 	bl	800a88c <HID_ReadItem>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	b2da      	uxtb	r2, r3
 800a6e8:	4b24      	ldr	r3, [pc, #144]	@ (800a77c <USBH_HID_KeybdDecode+0x104>)
 800a6ea:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	4826      	ldr	r0, [pc, #152]	@ (800a788 <USBH_HID_KeybdDecode+0x110>)
 800a6f0:	f000 f8cc 	bl	800a88c <HID_ReadItem>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	b2da      	uxtb	r2, r3
 800a6f8:	4b20      	ldr	r3, [pc, #128]	@ (800a77c <USBH_HID_KeybdDecode+0x104>)
 800a6fa:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	4823      	ldr	r0, [pc, #140]	@ (800a78c <USBH_HID_KeybdDecode+0x114>)
 800a700:	f000 f8c4 	bl	800a88c <HID_ReadItem>
 800a704:	4603      	mov	r3, r0
 800a706:	b2da      	uxtb	r2, r3
 800a708:	4b1c      	ldr	r3, [pc, #112]	@ (800a77c <USBH_HID_KeybdDecode+0x104>)
 800a70a:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 800a70c:	2100      	movs	r1, #0
 800a70e:	4820      	ldr	r0, [pc, #128]	@ (800a790 <USBH_HID_KeybdDecode+0x118>)
 800a710:	f000 f8bc 	bl	800a88c <HID_ReadItem>
 800a714:	4603      	mov	r3, r0
 800a716:	b2da      	uxtb	r2, r3
 800a718:	4b18      	ldr	r3, [pc, #96]	@ (800a77c <USBH_HID_KeybdDecode+0x104>)
 800a71a:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 800a71c:	2100      	movs	r1, #0
 800a71e:	481d      	ldr	r0, [pc, #116]	@ (800a794 <USBH_HID_KeybdDecode+0x11c>)
 800a720:	f000 f8b4 	bl	800a88c <HID_ReadItem>
 800a724:	4603      	mov	r3, r0
 800a726:	b2da      	uxtb	r2, r3
 800a728:	4b14      	ldr	r3, [pc, #80]	@ (800a77c <USBH_HID_KeybdDecode+0x104>)
 800a72a:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 800a72c:	2100      	movs	r1, #0
 800a72e:	481a      	ldr	r0, [pc, #104]	@ (800a798 <USBH_HID_KeybdDecode+0x120>)
 800a730:	f000 f8ac 	bl	800a88c <HID_ReadItem>
 800a734:	4603      	mov	r3, r0
 800a736:	b2da      	uxtb	r2, r3
 800a738:	4b10      	ldr	r3, [pc, #64]	@ (800a77c <USBH_HID_KeybdDecode+0x104>)
 800a73a:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800a73c:	2300      	movs	r3, #0
 800a73e:	73fb      	strb	r3, [r7, #15]
 800a740:	e00e      	b.n	800a760 <USBH_HID_KeybdDecode+0xe8>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800a742:	7bfb      	ldrb	r3, [r7, #15]
 800a744:	4619      	mov	r1, r3
 800a746:	4815      	ldr	r0, [pc, #84]	@ (800a79c <USBH_HID_KeybdDecode+0x124>)
 800a748:	f000 f8a0 	bl	800a88c <HID_ReadItem>
 800a74c:	4602      	mov	r2, r0
 800a74e:	7bfb      	ldrb	r3, [r7, #15]
 800a750:	b2d1      	uxtb	r1, r2
 800a752:	4a0a      	ldr	r2, [pc, #40]	@ (800a77c <USBH_HID_KeybdDecode+0x104>)
 800a754:	4413      	add	r3, r2
 800a756:	460a      	mov	r2, r1
 800a758:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800a75a:	7bfb      	ldrb	r3, [r7, #15]
 800a75c:	3301      	adds	r3, #1
 800a75e:	73fb      	strb	r3, [r7, #15]
 800a760:	7bfb      	ldrb	r3, [r7, #15]
 800a762:	2b05      	cmp	r3, #5
 800a764:	d9ed      	bls.n	800a742 <USBH_HID_KeybdDecode+0xca>
    }

    return USBH_OK;
 800a766:	2300      	movs	r3, #0
 800a768:	e000      	b.n	800a76c <USBH_HID_KeybdDecode+0xf4>
  }
  return   USBH_FAIL;
 800a76a:	2302      	movs	r3, #2
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}
 800a774:	20011858 	.word	0x20011858
 800a778:	080107fc 	.word	0x080107fc
 800a77c:	20011840 	.word	0x20011840
 800a780:	0801081c 	.word	0x0801081c
 800a784:	0801083c 	.word	0x0801083c
 800a788:	0801085c 	.word	0x0801085c
 800a78c:	0801087c 	.word	0x0801087c
 800a790:	0801089c 	.word	0x0801089c
 800a794:	080108bc 	.word	0x080108bc
 800a798:	080108dc 	.word	0x080108dc
 800a79c:	080108fc 	.word	0x080108fc

0800a7a0 <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	789b      	ldrb	r3, [r3, #2]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d103      	bne.n	800a7b8 <USBH_HID_GetASCIICode+0x18>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	799b      	ldrb	r3, [r3, #6]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d009      	beq.n	800a7cc <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	7a5b      	ldrb	r3, [r3, #9]
 800a7bc:	461a      	mov	r2, r3
 800a7be:	4b0b      	ldr	r3, [pc, #44]	@ (800a7ec <USBH_HID_GetASCIICode+0x4c>)
 800a7c0:	5c9b      	ldrb	r3, [r3, r2]
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	4b0a      	ldr	r3, [pc, #40]	@ (800a7f0 <USBH_HID_GetASCIICode+0x50>)
 800a7c6:	5c9b      	ldrb	r3, [r3, r2]
 800a7c8:	73fb      	strb	r3, [r7, #15]
 800a7ca:	e008      	b.n	800a7de <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	7a5b      	ldrb	r3, [r3, #9]
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	4b06      	ldr	r3, [pc, #24]	@ (800a7ec <USBH_HID_GetASCIICode+0x4c>)
 800a7d4:	5c9b      	ldrb	r3, [r3, r2]
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	4b06      	ldr	r3, [pc, #24]	@ (800a7f4 <USBH_HID_GetASCIICode+0x54>)
 800a7da:	5c9b      	ldrb	r3, [r3, r2]
 800a7dc:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 800a7de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3714      	adds	r7, #20
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr
 800a7ec:	08010a24 	.word	0x08010a24
 800a7f0:	080109a0 	.word	0x080109a0
 800a7f4:	0801091c 	.word	0x0801091c

0800a7f8 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b084      	sub	sp, #16
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a806:	69db      	ldr	r3, [r3, #28]
 800a808:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 800a80a:	4b1d      	ldr	r3, [pc, #116]	@ (800a880 <USBH_HID_MouseInit+0x88>)
 800a80c:	2200      	movs	r2, #0
 800a80e:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 800a810:	4b1b      	ldr	r3, [pc, #108]	@ (800a880 <USBH_HID_MouseInit+0x88>)
 800a812:	2200      	movs	r2, #0
 800a814:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 800a816:	4b1a      	ldr	r3, [pc, #104]	@ (800a880 <USBH_HID_MouseInit+0x88>)
 800a818:	2200      	movs	r2, #0
 800a81a:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 800a81c:	4b18      	ldr	r3, [pc, #96]	@ (800a880 <USBH_HID_MouseInit+0x88>)
 800a81e:	2200      	movs	r2, #0
 800a820:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 800a822:	4b17      	ldr	r3, [pc, #92]	@ (800a880 <USBH_HID_MouseInit+0x88>)
 800a824:	2200      	movs	r2, #0
 800a826:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800a828:	2300      	movs	r3, #0
 800a82a:	60fb      	str	r3, [r7, #12]
 800a82c:	e00c      	b.n	800a848 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 800a82e:	4a15      	ldr	r2, [pc, #84]	@ (800a884 <USBH_HID_MouseInit+0x8c>)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	4413      	add	r3, r2
 800a834:	2200      	movs	r2, #0
 800a836:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 800a838:	4a13      	ldr	r2, [pc, #76]	@ (800a888 <USBH_HID_MouseInit+0x90>)
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	4413      	add	r3, r2
 800a83e:	2200      	movs	r2, #0
 800a840:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	3301      	adds	r3, #1
 800a846:	60fb      	str	r3, [r7, #12]
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2b07      	cmp	r3, #7
 800a84c:	d9ef      	bls.n	800a82e <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	8b1b      	ldrh	r3, [r3, #24]
 800a852:	2b08      	cmp	r3, #8
 800a854:	d902      	bls.n	800a85c <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	2208      	movs	r2, #8
 800a85a:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = mouse_rx_report_buf;
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	4a0a      	ldr	r2, [pc, #40]	@ (800a888 <USBH_HID_MouseInit+0x90>)
 800a860:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	f103 0008 	add.w	r0, r3, #8
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a86e:	2250      	movs	r2, #80	@ 0x50
 800a870:	4619      	mov	r1, r3
 800a872:	f7ff fde0 	bl	800a436 <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800a876:	2300      	movs	r3, #0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3710      	adds	r7, #16
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	20011860 	.word	0x20011860
 800a884:	20011868 	.word	0x20011868
 800a888:	20011870 	.word	0x20011870

0800a88c <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b089      	sub	sp, #36	@ 0x24
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	460b      	mov	r3, r1
 800a896:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 800a898:	2300      	movs	r3, #0
 800a89a:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 800a89c:	2300      	movs	r3, #0
 800a89e:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	7a1b      	ldrb	r3, [r3, #8]
 800a8aa:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, we may need to offset ri->data.*/
  if (ri->count > 0U)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	7a5b      	ldrb	r3, [r3, #9]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d01a      	beq.n	800a8ea <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	7a5b      	ldrb	r3, [r3, #9]
 800a8b8:	78fa      	ldrb	r2, [r7, #3]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d301      	bcc.n	800a8c2 <HID_ReadItem+0x36>
    {
      return (0U);
 800a8be:	2300      	movs	r3, #0
 800a8c0:	e078      	b.n	800a9b4 <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800a8c2:	78fb      	ldrb	r3, [r7, #3]
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	6852      	ldr	r2, [r2, #4]
 800a8c8:	fb02 f303 	mul.w	r3, r2, r3
 800a8cc:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800a8ce:	7cfb      	ldrb	r3, [r7, #19]
 800a8d0:	68fa      	ldr	r2, [r7, #12]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	08db      	lsrs	r3, r3, #3
 800a8da:	697a      	ldr	r2, [r7, #20]
 800a8dc:	4413      	add	r3, r2
 800a8de:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	f003 0307 	and.w	r3, r3, #7
 800a8e8:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	61bb      	str	r3, [r7, #24]
 800a8ee:	e00a      	b.n	800a906 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	00db      	lsls	r3, r3, #3
 800a8fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a8fe:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	3301      	adds	r3, #1
 800a904:	61bb      	str	r3, [r7, #24]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	f003 0307 	and.w	r3, r3, #7
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d004      	beq.n	800a91c <HID_ReadItem+0x90>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	08db      	lsrs	r3, r3, #3
 800a918:	3301      	adds	r3, #1
 800a91a:	e002      	b.n	800a922 <HID_ReadItem+0x96>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	08db      	lsrs	r3, r3, #3
 800a922:	69ba      	ldr	r2, [r7, #24]
 800a924:	4293      	cmp	r3, r2
 800a926:	d8e3      	bhi.n	800a8f0 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 800a928:	7cfb      	ldrb	r3, [r7, #19]
 800a92a:	69fa      	ldr	r2, [r7, #28]
 800a92c:	40da      	lsrs	r2, r3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	f04f 31ff 	mov.w	r1, #4294967295
 800a936:	fa01 f303 	lsl.w	r3, r1, r3
 800a93a:	43db      	mvns	r3, r3
 800a93c:	4013      	ands	r3, r2
 800a93e:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	69fa      	ldr	r2, [r7, #28]
 800a946:	429a      	cmp	r2, r3
 800a948:	d304      	bcc.n	800a954 <HID_ReadItem+0xc8>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	69fa      	ldr	r2, [r7, #28]
 800a950:	429a      	cmp	r2, r3
 800a952:	d901      	bls.n	800a958 <HID_ReadItem+0xcc>
  {
    return (0U);
 800a954:	2300      	movs	r3, #0
 800a956:	e02d      	b.n	800a9b4 <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	7a9b      	ldrb	r3, [r3, #10]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d01e      	beq.n	800a99e <HID_ReadItem+0x112>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	3b01      	subs	r3, #1
 800a966:	69fa      	ldr	r2, [r7, #28]
 800a968:	fa22 f303 	lsr.w	r3, r2, r3
 800a96c:	f003 0301 	and.w	r3, r3, #1
 800a970:	2b00      	cmp	r3, #0
 800a972:	d014      	beq.n	800a99e <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	2201      	movs	r2, #1
 800a97a:	fa02 f303 	lsl.w	r3, r2, r3
 800a97e:	425b      	negs	r3, r3
 800a980:	69fa      	ldr	r2, [r7, #28]
 800a982:	4313      	orrs	r3, r2
 800a984:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	69db      	ldr	r3, [r3, #28]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d101      	bne.n	800a992 <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	e010      	b.n	800a9b4 <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	69db      	ldr	r3, [r3, #28]
 800a996:	68ba      	ldr	r2, [r7, #8]
 800a998:	fb02 f303 	mul.w	r3, r2, r3
 800a99c:	e00a      	b.n	800a9b4 <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	69db      	ldr	r3, [r3, #28]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d101      	bne.n	800a9aa <HID_ReadItem+0x11e>
    {
      return (val);
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	e004      	b.n	800a9b4 <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	69db      	ldr	r3, [r3, #28]
 800a9ae:	69fa      	ldr	r2, [r7, #28]
 800a9b0:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3724      	adds	r7, #36	@ 0x24
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10a      	bne.n	800a9ea <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800a9d4:	481c      	ldr	r0, [pc, #112]	@ (800aa48 <USBH_Init+0x88>)
 800a9d6:	f002 fb29 	bl	800d02c <iprintf>
 800a9da:	481c      	ldr	r0, [pc, #112]	@ (800aa4c <USBH_Init+0x8c>)
 800a9dc:	f002 fb26 	bl	800d02c <iprintf>
 800a9e0:	200a      	movs	r0, #10
 800a9e2:	f002 fb35 	bl	800d050 <putchar>
    return USBH_FAIL;
 800a9e6:	2302      	movs	r3, #2
 800a9e8:	e029      	b.n	800aa3e <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	79fa      	ldrb	r2, [r7, #7]
 800a9ee:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f000 f824 	bl	800aa50 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2200      	movs	r2, #0
 800aa14:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d003      	beq.n	800aa36 <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	68ba      	ldr	r2, [r7, #8]
 800aa32:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800aa36:	68f8      	ldr	r0, [r7, #12]
 800aa38:	f001 ff82 	bl	800c940 <USBH_LL_Init>

  return USBH_OK;
 800aa3c:	2300      	movs	r3, #0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	0800e348 	.word	0x0800e348
 800aa4c:	0800e350 	.word	0x0800e350

0800aa50 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	60fb      	str	r3, [r7, #12]
 800aa60:	e009      	b.n	800aa76 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	33e0      	adds	r3, #224	@ 0xe0
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	3301      	adds	r3, #1
 800aa74:	60fb      	str	r3, [r7, #12]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2b0f      	cmp	r3, #15
 800aa7a:	d9f2      	bls.n	800aa62 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	60fb      	str	r3, [r7, #12]
 800aa80:	e009      	b.n	800aa96 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	4413      	add	r3, r2
 800aa88:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	3301      	adds	r3, #1
 800aa94:	60fb      	str	r3, [r7, #12]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa9c:	d3f1      	bcc.n	800aa82 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2201      	movs	r2, #1
 800aaae:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2240      	movs	r2, #64	@ 0x40
 800aac2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2201      	movs	r2, #1
 800aad6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	331c      	adds	r3, #28
 800aaee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f002 fc29 	bl	800d34c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ab00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab04:	2100      	movs	r1, #0
 800ab06:	4618      	mov	r0, r3
 800ab08:	f002 fc20 	bl	800d34c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800ab12:	2212      	movs	r2, #18
 800ab14:	2100      	movs	r1, #0
 800ab16:	4618      	mov	r0, r3
 800ab18:	f002 fc18 	bl	800d34c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800ab22:	223e      	movs	r2, #62	@ 0x3e
 800ab24:	2100      	movs	r1, #0
 800ab26:	4618      	mov	r0, r3
 800ab28:	f002 fc10 	bl	800d34c <memset>

  return USBH_OK;
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3710      	adds	r7, #16
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
	...

0800ab38 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ab42:	2300      	movs	r3, #0
 800ab44:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d01f      	beq.n	800ab8c <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d10e      	bne.n	800ab74 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ab5c:	1c59      	adds	r1, r3, #1
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	33de      	adds	r3, #222	@ 0xde
 800ab68:	6839      	ldr	r1, [r7, #0]
 800ab6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	73fb      	strb	r3, [r7, #15]
 800ab72:	e016      	b.n	800aba2 <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800ab74:	480d      	ldr	r0, [pc, #52]	@ (800abac <USBH_RegisterClass+0x74>)
 800ab76:	f002 fa59 	bl	800d02c <iprintf>
 800ab7a:	480d      	ldr	r0, [pc, #52]	@ (800abb0 <USBH_RegisterClass+0x78>)
 800ab7c:	f002 fa56 	bl	800d02c <iprintf>
 800ab80:	200a      	movs	r0, #10
 800ab82:	f002 fa65 	bl	800d050 <putchar>
      status = USBH_FAIL;
 800ab86:	2302      	movs	r3, #2
 800ab88:	73fb      	strb	r3, [r7, #15]
 800ab8a:	e00a      	b.n	800aba2 <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800ab8c:	4807      	ldr	r0, [pc, #28]	@ (800abac <USBH_RegisterClass+0x74>)
 800ab8e:	f002 fa4d 	bl	800d02c <iprintf>
 800ab92:	4808      	ldr	r0, [pc, #32]	@ (800abb4 <USBH_RegisterClass+0x7c>)
 800ab94:	f002 fa4a 	bl	800d02c <iprintf>
 800ab98:	200a      	movs	r0, #10
 800ab9a:	f002 fa59 	bl	800d050 <putchar>
    status = USBH_FAIL;
 800ab9e:	2302      	movs	r3, #2
 800aba0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aba2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	0800e348 	.word	0x0800e348
 800abb0:	0800e364 	.word	0x0800e364
 800abb4:	0800e380 	.word	0x0800e380

0800abb8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	460b      	mov	r3, r1
 800abc2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800abc4:	2300      	movs	r3, #0
 800abc6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800abce:	78fa      	ldrb	r2, [r7, #3]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d23c      	bcs.n	800ac4e <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	78fa      	ldrb	r2, [r7, #3]
 800abd8:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800abdc:	78fb      	ldrb	r3, [r7, #3]
 800abde:	4619      	mov	r1, r3
 800abe0:	4823      	ldr	r0, [pc, #140]	@ (800ac70 <USBH_SelectInterface+0xb8>)
 800abe2:	f002 fa23 	bl	800d02c <iprintf>
 800abe6:	200a      	movs	r0, #10
 800abe8:	f002 fa32 	bl	800d050 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800abec:	78fb      	ldrb	r3, [r7, #3]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	211a      	movs	r1, #26
 800abf2:	fb01 f303 	mul.w	r3, r1, r3
 800abf6:	4413      	add	r3, r2
 800abf8:	f203 3347 	addw	r3, r3, #839	@ 0x347
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	4619      	mov	r1, r3
 800ac00:	481c      	ldr	r0, [pc, #112]	@ (800ac74 <USBH_SelectInterface+0xbc>)
 800ac02:	f002 fa13 	bl	800d02c <iprintf>
 800ac06:	200a      	movs	r0, #10
 800ac08:	f002 fa22 	bl	800d050 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800ac0c:	78fb      	ldrb	r3, [r7, #3]
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	211a      	movs	r1, #26
 800ac12:	fb01 f303 	mul.w	r3, r1, r3
 800ac16:	4413      	add	r3, r2
 800ac18:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	4619      	mov	r1, r3
 800ac20:	4815      	ldr	r0, [pc, #84]	@ (800ac78 <USBH_SelectInterface+0xc0>)
 800ac22:	f002 fa03 	bl	800d02c <iprintf>
 800ac26:	200a      	movs	r0, #10
 800ac28:	f002 fa12 	bl	800d050 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800ac2c:	78fb      	ldrb	r3, [r7, #3]
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	211a      	movs	r1, #26
 800ac32:	fb01 f303 	mul.w	r3, r1, r3
 800ac36:	4413      	add	r3, r2
 800ac38:	f203 3349 	addw	r3, r3, #841	@ 0x349
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	4619      	mov	r1, r3
 800ac40:	480e      	ldr	r0, [pc, #56]	@ (800ac7c <USBH_SelectInterface+0xc4>)
 800ac42:	f002 f9f3 	bl	800d02c <iprintf>
 800ac46:	200a      	movs	r0, #10
 800ac48:	f002 fa02 	bl	800d050 <putchar>
 800ac4c:	e00a      	b.n	800ac64 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800ac4e:	480c      	ldr	r0, [pc, #48]	@ (800ac80 <USBH_SelectInterface+0xc8>)
 800ac50:	f002 f9ec 	bl	800d02c <iprintf>
 800ac54:	480b      	ldr	r0, [pc, #44]	@ (800ac84 <USBH_SelectInterface+0xcc>)
 800ac56:	f002 f9e9 	bl	800d02c <iprintf>
 800ac5a:	200a      	movs	r0, #10
 800ac5c:	f002 f9f8 	bl	800d050 <putchar>
    status = USBH_FAIL;
 800ac60:	2302      	movs	r3, #2
 800ac62:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ac64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	0800e398 	.word	0x0800e398
 800ac74:	0800e3b8 	.word	0x0800e3b8
 800ac78:	0800e3c8 	.word	0x0800e3c8
 800ac7c:	0800e3d8 	.word	0x0800e3d8
 800ac80:	0800e348 	.word	0x0800e348
 800ac84:	0800e3e8 	.word	0x0800e3e8

0800ac88 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b087      	sub	sp, #28
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	4608      	mov	r0, r1
 800ac92:	4611      	mov	r1, r2
 800ac94:	461a      	mov	r2, r3
 800ac96:	4603      	mov	r3, r0
 800ac98:	70fb      	strb	r3, [r7, #3]
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	70bb      	strb	r3, [r7, #2]
 800ac9e:	4613      	mov	r3, r2
 800aca0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800aca2:	2300      	movs	r3, #0
 800aca4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800aca6:	2300      	movs	r3, #0
 800aca8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800acb0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800acb2:	e025      	b.n	800ad00 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800acb4:	7dfb      	ldrb	r3, [r7, #23]
 800acb6:	221a      	movs	r2, #26
 800acb8:	fb02 f303 	mul.w	r3, r2, r3
 800acbc:	3308      	adds	r3, #8
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	4413      	add	r3, r2
 800acc2:	3302      	adds	r3, #2
 800acc4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	795b      	ldrb	r3, [r3, #5]
 800acca:	78fa      	ldrb	r2, [r7, #3]
 800accc:	429a      	cmp	r2, r3
 800acce:	d002      	beq.n	800acd6 <USBH_FindInterface+0x4e>
 800acd0:	78fb      	ldrb	r3, [r7, #3]
 800acd2:	2bff      	cmp	r3, #255	@ 0xff
 800acd4:	d111      	bne.n	800acfa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800acda:	78ba      	ldrb	r2, [r7, #2]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d002      	beq.n	800ace6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ace0:	78bb      	ldrb	r3, [r7, #2]
 800ace2:	2bff      	cmp	r3, #255	@ 0xff
 800ace4:	d109      	bne.n	800acfa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800acea:	787a      	ldrb	r2, [r7, #1]
 800acec:	429a      	cmp	r2, r3
 800acee:	d002      	beq.n	800acf6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800acf0:	787b      	ldrb	r3, [r7, #1]
 800acf2:	2bff      	cmp	r3, #255	@ 0xff
 800acf4:	d101      	bne.n	800acfa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800acf6:	7dfb      	ldrb	r3, [r7, #23]
 800acf8:	e006      	b.n	800ad08 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800acfa:	7dfb      	ldrb	r3, [r7, #23]
 800acfc:	3301      	adds	r3, #1
 800acfe:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ad00:	7dfb      	ldrb	r3, [r7, #23]
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d9d6      	bls.n	800acb4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ad06:	23ff      	movs	r3, #255	@ 0xff
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	371c      	adds	r7, #28
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f001 fe4b 	bl	800c9b8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800ad22:	2101      	movs	r1, #1
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f001 ff64 	bl	800cbf2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3708      	adds	r7, #8
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b088      	sub	sp, #32
 800ad38:	af04      	add	r7, sp, #16
 800ad3a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ad3c:	2302      	movs	r3, #2
 800ad3e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ad40:	2300      	movs	r3, #0
 800ad42:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d102      	bne.n	800ad56 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2203      	movs	r2, #3
 800ad54:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	2b0b      	cmp	r3, #11
 800ad5e:	f200 8237 	bhi.w	800b1d0 <USBH_Process+0x49c>
 800ad62:	a201      	add	r2, pc, #4	@ (adr r2, 800ad68 <USBH_Process+0x34>)
 800ad64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad68:	0800ad99 	.word	0x0800ad99
 800ad6c:	0800add7 	.word	0x0800add7
 800ad70:	0800ae57 	.word	0x0800ae57
 800ad74:	0800b15f 	.word	0x0800b15f
 800ad78:	0800b1d1 	.word	0x0800b1d1
 800ad7c:	0800aef7 	.word	0x0800aef7
 800ad80:	0800b0e1 	.word	0x0800b0e1
 800ad84:	0800af45 	.word	0x0800af45
 800ad88:	0800af65 	.word	0x0800af65
 800ad8c:	0800af8f 	.word	0x0800af8f
 800ad90:	0800afeb 	.word	0x0800afeb
 800ad94:	0800b147 	.word	0x0800b147
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f000 8217 	beq.w	800b1d4 <USBH_Process+0x4a0>
      {
        USBH_UsrLog("USB Device Connected");
 800ada6:	48a4      	ldr	r0, [pc, #656]	@ (800b038 <USBH_Process+0x304>)
 800ada8:	f002 f940 	bl	800d02c <iprintf>
 800adac:	200a      	movs	r0, #10
 800adae:	f002 f94f 	bl	800d050 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2201      	movs	r2, #1
 800adb6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800adb8:	20c8      	movs	r0, #200	@ 0xc8
 800adba:	f001 ff64 	bl	800cc86 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f001 fe57 	bl	800ca72 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2200      	movs	r2, #0
 800adc8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800add4:	e1fe      	b.n	800b1d4 <USBH_Process+0x4a0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800addc:	2b01      	cmp	r3, #1
 800adde:	d10d      	bne.n	800adfc <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800ade0:	4896      	ldr	r0, [pc, #600]	@ (800b03c <USBH_Process+0x308>)
 800ade2:	f002 f923 	bl	800d02c <iprintf>
 800ade6:	200a      	movs	r0, #10
 800ade8:	f002 f932 	bl	800d050 <putchar>
        phost->device.RstCnt = 0U;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2202      	movs	r2, #2
 800adf8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800adfa:	e1f8      	b.n	800b1ee <USBH_Process+0x4ba>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800ae02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ae06:	d91a      	bls.n	800ae3e <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800ae0e:	3301      	adds	r3, #1
 800ae10:	b2da      	uxtb	r2, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800ae1e:	2b03      	cmp	r3, #3
 800ae20:	d909      	bls.n	800ae36 <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800ae22:	4887      	ldr	r0, [pc, #540]	@ (800b040 <USBH_Process+0x30c>)
 800ae24:	f002 f902 	bl	800d02c <iprintf>
 800ae28:	200a      	movs	r0, #10
 800ae2a:	f002 f911 	bl	800d050 <putchar>
            phost->gState = HOST_ABORT_STATE;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	220d      	movs	r2, #13
 800ae32:	701a      	strb	r2, [r3, #0]
      break;
 800ae34:	e1db      	b.n	800b1ee <USBH_Process+0x4ba>
            phost->gState = HOST_IDLE;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	701a      	strb	r2, [r3, #0]
      break;
 800ae3c:	e1d7      	b.n	800b1ee <USBH_Process+0x4ba>
          phost->Timeout += 10U;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800ae44:	f103 020a 	add.w	r2, r3, #10
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800ae4e:	200a      	movs	r0, #10
 800ae50:	f001 ff19 	bl	800cc86 <USBH_Delay>
      break;
 800ae54:	e1cb      	b.n	800b1ee <USBH_Process+0x4ba>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d005      	beq.n	800ae6c <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ae66:	2104      	movs	r1, #4
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ae6c:	2064      	movs	r0, #100	@ 0x64
 800ae6e:	f001 ff0a 	bl	800cc86 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f001 fdd6 	bl	800ca24 <USBH_LL_GetSpeed>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2205      	movs	r2, #5
 800ae86:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ae88:	2100      	movs	r1, #0
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f001 fbef 	bl	800c66e <USBH_AllocPipe>
 800ae90:	4603      	mov	r3, r0
 800ae92:	461a      	mov	r2, r3
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ae98:	2180      	movs	r1, #128	@ 0x80
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f001 fbe7 	bl	800c66e <USBH_AllocPipe>
 800aea0:	4603      	mov	r3, r0
 800aea2:	461a      	mov	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	7919      	ldrb	r1, [r3, #4]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800aebc:	9202      	str	r2, [sp, #8]
 800aebe:	2200      	movs	r2, #0
 800aec0:	9201      	str	r2, [sp, #4]
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	4603      	mov	r3, r0
 800aec6:	2280      	movs	r2, #128	@ 0x80
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f001 fba1 	bl	800c610 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	7959      	ldrb	r1, [r3, #5]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800aee2:	9202      	str	r2, [sp, #8]
 800aee4:	2200      	movs	r2, #0
 800aee6:	9201      	str	r2, [sp, #4]
 800aee8:	9300      	str	r3, [sp, #0]
 800aeea:	4603      	mov	r3, r0
 800aeec:	2200      	movs	r2, #0
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f001 fb8e 	bl	800c610 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aef4:	e17b      	b.n	800b1ee <USBH_Process+0x4ba>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 f98c 	bl	800b214 <USBH_HandleEnum>
 800aefc:	4603      	mov	r3, r0
 800aefe:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800af00:	7bbb      	ldrb	r3, [r7, #14]
 800af02:	b2db      	uxtb	r3, r3
 800af04:	2b00      	cmp	r3, #0
 800af06:	f040 8167 	bne.w	800b1d8 <USBH_Process+0x4a4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800af0a:	484e      	ldr	r0, [pc, #312]	@ (800b044 <USBH_Process+0x310>)
 800af0c:	f002 f88e 	bl	800d02c <iprintf>
 800af10:	200a      	movs	r0, #10
 800af12:	f002 f89d 	bl	800d050 <putchar>

        phost->device.current_interface = 0U;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800af24:	2b01      	cmp	r3, #1
 800af26:	d109      	bne.n	800af3c <USBH_Process+0x208>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800af28:	4847      	ldr	r0, [pc, #284]	@ (800b048 <USBH_Process+0x314>)
 800af2a:	f002 f87f 	bl	800d02c <iprintf>
 800af2e:	200a      	movs	r0, #10
 800af30:	f002 f88e 	bl	800d050 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2208      	movs	r2, #8
 800af38:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800af3a:	e14d      	b.n	800b1d8 <USBH_Process+0x4a4>
          phost->gState = HOST_INPUT;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2207      	movs	r2, #7
 800af40:	701a      	strb	r2, [r3, #0]
      break;
 800af42:	e149      	b.n	800b1d8 <USBH_Process+0x4a4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	f000 8146 	beq.w	800b1dc <USBH_Process+0x4a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800af56:	2101      	movs	r1, #1
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2208      	movs	r2, #8
 800af60:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800af62:	e13b      	b.n	800b1dc <USBH_Process+0x4a8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800af6a:	4619      	mov	r1, r3
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 fd98 	bl	800baa2 <USBH_SetCfg>
 800af72:	4603      	mov	r3, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	f040 8133 	bne.w	800b1e0 <USBH_Process+0x4ac>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2209      	movs	r2, #9
 800af7e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800af80:	4832      	ldr	r0, [pc, #200]	@ (800b04c <USBH_Process+0x318>)
 800af82:	f002 f853 	bl	800d02c <iprintf>
 800af86:	200a      	movs	r0, #10
 800af88:	f002 f862 	bl	800d050 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800af8c:	e128      	b.n	800b1e0 <USBH_Process+0x4ac>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800af94:	f003 0320 	and.w	r3, r3, #32
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d022      	beq.n	800afe2 <USBH_Process+0x2ae>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800af9c:	2101      	movs	r1, #1
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 fda2 	bl	800bae8 <USBH_SetFeature>
 800afa4:	4603      	mov	r3, r0
 800afa6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800afa8:	7bbb      	ldrb	r3, [r7, #14]
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	2b00      	cmp	r3, #0
 800afae:	d109      	bne.n	800afc4 <USBH_Process+0x290>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800afb0:	4827      	ldr	r0, [pc, #156]	@ (800b050 <USBH_Process+0x31c>)
 800afb2:	f002 f83b 	bl	800d02c <iprintf>
 800afb6:	200a      	movs	r0, #10
 800afb8:	f002 f84a 	bl	800d050 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	220a      	movs	r2, #10
 800afc0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800afc2:	e10f      	b.n	800b1e4 <USBH_Process+0x4b0>
        else if (status == USBH_NOT_SUPPORTED)
 800afc4:	7bbb      	ldrb	r3, [r7, #14]
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	2b03      	cmp	r3, #3
 800afca:	f040 810b 	bne.w	800b1e4 <USBH_Process+0x4b0>
          USBH_UsrLog("Remote wakeup not supported by the device");
 800afce:	4821      	ldr	r0, [pc, #132]	@ (800b054 <USBH_Process+0x320>)
 800afd0:	f002 f82c 	bl	800d02c <iprintf>
 800afd4:	200a      	movs	r0, #10
 800afd6:	f002 f83b 	bl	800d050 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	220a      	movs	r2, #10
 800afde:	701a      	strb	r2, [r3, #0]
      break;
 800afe0:	e100      	b.n	800b1e4 <USBH_Process+0x4b0>
        phost->gState = HOST_CHECK_CLASS;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	220a      	movs	r2, #10
 800afe6:	701a      	strb	r2, [r3, #0]
      break;
 800afe8:	e0fc      	b.n	800b1e4 <USBH_Process+0x4b0>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d106      	bne.n	800b002 <USBH_Process+0x2ce>
      {
        USBH_UsrLog("No Class has been registered.");
 800aff4:	4818      	ldr	r0, [pc, #96]	@ (800b058 <USBH_Process+0x324>)
 800aff6:	f002 f819 	bl	800d02c <iprintf>
 800affa:	200a      	movs	r0, #10
 800affc:	f002 f828 	bl	800d050 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b000:	e0f5      	b.n	800b1ee <USBH_Process+0x4ba>
        phost->pActiveClass = NULL;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b00a:	2300      	movs	r3, #0
 800b00c:	73fb      	strb	r3, [r7, #15]
 800b00e:	e028      	b.n	800b062 <USBH_Process+0x32e>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b010:	7bfa      	ldrb	r2, [r7, #15]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	32de      	adds	r2, #222	@ 0xde
 800b016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b01a:	791a      	ldrb	r2, [r3, #4]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800b022:	429a      	cmp	r2, r3
 800b024:	d11a      	bne.n	800b05c <USBH_Process+0x328>
            phost->pActiveClass = phost->pClass[idx];
 800b026:	7bfa      	ldrb	r2, [r7, #15]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	32de      	adds	r2, #222	@ 0xde
 800b02c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800b036:	e017      	b.n	800b068 <USBH_Process+0x334>
 800b038:	0800e408 	.word	0x0800e408
 800b03c:	0800e420 	.word	0x0800e420
 800b040:	0800e43c 	.word	0x0800e43c
 800b044:	0800e468 	.word	0x0800e468
 800b048:	0800e47c 	.word	0x0800e47c
 800b04c:	0800e4a4 	.word	0x0800e4a4
 800b050:	0800e4c0 	.word	0x0800e4c0
 800b054:	0800e4e0 	.word	0x0800e4e0
 800b058:	0800e50c 	.word	0x0800e50c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b05c:	7bfb      	ldrb	r3, [r7, #15]
 800b05e:	3301      	adds	r3, #1
 800b060:	73fb      	strb	r3, [r7, #15]
 800b062:	7bfb      	ldrb	r3, [r7, #15]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d0d3      	beq.n	800b010 <USBH_Process+0x2dc>
        if (phost->pActiveClass != NULL)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d02c      	beq.n	800b0cc <USBH_Process+0x398>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	4798      	blx	r3
 800b07e:	4603      	mov	r3, r0
 800b080:	2b00      	cmp	r3, #0
 800b082:	d114      	bne.n	800b0ae <USBH_Process+0x37a>
            phost->gState = HOST_CLASS_REQUEST;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2206      	movs	r2, #6
 800b088:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4619      	mov	r1, r3
 800b094:	4858      	ldr	r0, [pc, #352]	@ (800b1f8 <USBH_Process+0x4c4>)
 800b096:	f001 ffc9 	bl	800d02c <iprintf>
 800b09a:	200a      	movs	r0, #10
 800b09c:	f001 ffd8 	bl	800d050 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b0a6:	2103      	movs	r1, #3
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	4798      	blx	r3
      break;
 800b0ac:	e09f      	b.n	800b1ee <USBH_Process+0x4ba>
            phost->gState = HOST_ABORT_STATE;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	220d      	movs	r2, #13
 800b0b2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4619      	mov	r1, r3
 800b0be:	484f      	ldr	r0, [pc, #316]	@ (800b1fc <USBH_Process+0x4c8>)
 800b0c0:	f001 ffb4 	bl	800d02c <iprintf>
 800b0c4:	200a      	movs	r0, #10
 800b0c6:	f001 ffc3 	bl	800d050 <putchar>
      break;
 800b0ca:	e090      	b.n	800b1ee <USBH_Process+0x4ba>
          phost->gState = HOST_ABORT_STATE;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	220d      	movs	r2, #13
 800b0d0:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800b0d2:	484b      	ldr	r0, [pc, #300]	@ (800b200 <USBH_Process+0x4cc>)
 800b0d4:	f001 ffaa 	bl	800d02c <iprintf>
 800b0d8:	200a      	movs	r0, #10
 800b0da:	f001 ffb9 	bl	800d050 <putchar>
      break;
 800b0de:	e086      	b.n	800b1ee <USBH_Process+0x4ba>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d020      	beq.n	800b12c <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b0f0:	691b      	ldr	r3, [r3, #16]
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	4798      	blx	r3
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b0fa:	7bbb      	ldrb	r3, [r7, #14]
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d103      	bne.n	800b10a <USBH_Process+0x3d6>
        {
          phost->gState = HOST_CLASS;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	220b      	movs	r2, #11
 800b106:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b108:	e06e      	b.n	800b1e8 <USBH_Process+0x4b4>
        else if (status == USBH_FAIL)
 800b10a:	7bbb      	ldrb	r3, [r7, #14]
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	2b02      	cmp	r3, #2
 800b110:	d16a      	bne.n	800b1e8 <USBH_Process+0x4b4>
          phost->gState = HOST_ABORT_STATE;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	220d      	movs	r2, #13
 800b116:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800b118:	483a      	ldr	r0, [pc, #232]	@ (800b204 <USBH_Process+0x4d0>)
 800b11a:	f001 ff87 	bl	800d02c <iprintf>
 800b11e:	483a      	ldr	r0, [pc, #232]	@ (800b208 <USBH_Process+0x4d4>)
 800b120:	f001 ff84 	bl	800d02c <iprintf>
 800b124:	200a      	movs	r0, #10
 800b126:	f001 ff93 	bl	800d050 <putchar>
      break;
 800b12a:	e05d      	b.n	800b1e8 <USBH_Process+0x4b4>
        phost->gState = HOST_ABORT_STATE;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	220d      	movs	r2, #13
 800b130:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800b132:	4834      	ldr	r0, [pc, #208]	@ (800b204 <USBH_Process+0x4d0>)
 800b134:	f001 ff7a 	bl	800d02c <iprintf>
 800b138:	4834      	ldr	r0, [pc, #208]	@ (800b20c <USBH_Process+0x4d8>)
 800b13a:	f001 ff77 	bl	800d02c <iprintf>
 800b13e:	200a      	movs	r0, #10
 800b140:	f001 ff86 	bl	800d050 <putchar>
      break;
 800b144:	e050      	b.n	800b1e8 <USBH_Process+0x4b4>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d04d      	beq.n	800b1ec <USBH_Process+0x4b8>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b156:	695b      	ldr	r3, [r3, #20]
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	4798      	blx	r3
      }
      break;
 800b15c:	e046      	b.n	800b1ec <USBH_Process+0x4b8>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f7ff fc72 	bl	800aa50 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b172:	2b00      	cmp	r3, #0
 800b174:	d009      	beq.n	800b18a <USBH_Process+0x456>
      {
        phost->pActiveClass->DeInit(phost);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b17c:	68db      	ldr	r3, [r3, #12]
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b190:	2b00      	cmp	r3, #0
 800b192:	d005      	beq.n	800b1a0 <USBH_Process+0x46c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b19a:	2105      	movs	r1, #5
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800b1a0:	481b      	ldr	r0, [pc, #108]	@ (800b210 <USBH_Process+0x4dc>)
 800b1a2:	f001 ff43 	bl	800d02c <iprintf>
 800b1a6:	200a      	movs	r0, #10
 800b1a8:	f001 ff52 	bl	800d050 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d107      	bne.n	800b1c8 <USBH_Process+0x494>
      {
        phost->device.is_ReEnumerated = 0U;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f7ff fda7 	bl	800ad14 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b1c6:	e012      	b.n	800b1ee <USBH_Process+0x4ba>
        (void)USBH_LL_Start(phost);
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f001 fbf5 	bl	800c9b8 <USBH_LL_Start>
      break;
 800b1ce:	e00e      	b.n	800b1ee <USBH_Process+0x4ba>

    case HOST_ABORT_STATE:
    default :
      break;
 800b1d0:	bf00      	nop
 800b1d2:	e00c      	b.n	800b1ee <USBH_Process+0x4ba>
      break;
 800b1d4:	bf00      	nop
 800b1d6:	e00a      	b.n	800b1ee <USBH_Process+0x4ba>
      break;
 800b1d8:	bf00      	nop
 800b1da:	e008      	b.n	800b1ee <USBH_Process+0x4ba>
    break;
 800b1dc:	bf00      	nop
 800b1de:	e006      	b.n	800b1ee <USBH_Process+0x4ba>
      break;
 800b1e0:	bf00      	nop
 800b1e2:	e004      	b.n	800b1ee <USBH_Process+0x4ba>
      break;
 800b1e4:	bf00      	nop
 800b1e6:	e002      	b.n	800b1ee <USBH_Process+0x4ba>
      break;
 800b1e8:	bf00      	nop
 800b1ea:	e000      	b.n	800b1ee <USBH_Process+0x4ba>
      break;
 800b1ec:	bf00      	nop
  }
  return USBH_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3710      	adds	r7, #16
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	0800e52c 	.word	0x0800e52c
 800b1fc:	0800e540 	.word	0x0800e540
 800b200:	0800e560 	.word	0x0800e560
 800b204:	0800e348 	.word	0x0800e348
 800b208:	0800e588 	.word	0x0800e588
 800b20c:	0800e5b0 	.word	0x0800e5b0
 800b210:	0800e5c8 	.word	0x0800e5c8

0800b214 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b088      	sub	sp, #32
 800b218:	af04      	add	r7, sp, #16
 800b21a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b21c:	2301      	movs	r3, #1
 800b21e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b220:	2301      	movs	r3, #1
 800b222:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	785b      	ldrb	r3, [r3, #1]
 800b228:	2b07      	cmp	r3, #7
 800b22a:	f200 827b 	bhi.w	800b724 <USBH_HandleEnum+0x510>
 800b22e:	a201      	add	r2, pc, #4	@ (adr r2, 800b234 <USBH_HandleEnum+0x20>)
 800b230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b234:	0800b255 	.word	0x0800b255
 800b238:	0800b32d 	.word	0x0800b32d
 800b23c:	0800b3dd 	.word	0x0800b3dd
 800b240:	0800b499 	.word	0x0800b499
 800b244:	0800b521 	.word	0x0800b521
 800b248:	0800b5d3 	.word	0x0800b5d3
 800b24c:	0800b647 	.word	0x0800b647
 800b250:	0800b6b9 	.word	0x0800b6b9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b254:	2108      	movs	r1, #8
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 fb16 	bl	800b888 <USBH_Get_DevDesc>
 800b25c:	4603      	mov	r3, r0
 800b25e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b260:	7bbb      	ldrb	r3, [r7, #14]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d12e      	bne.n	800b2c4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2201      	movs	r2, #1
 800b274:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	7919      	ldrb	r1, [r3, #4]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b28a:	9202      	str	r2, [sp, #8]
 800b28c:	2200      	movs	r2, #0
 800b28e:	9201      	str	r2, [sp, #4]
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	4603      	mov	r3, r0
 800b294:	2280      	movs	r2, #128	@ 0x80
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f001 f9ba 	bl	800c610 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	7959      	ldrb	r1, [r3, #5]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b2b0:	9202      	str	r2, [sp, #8]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	9201      	str	r2, [sp, #4]
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f001 f9a7 	bl	800c610 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b2c2:	e231      	b.n	800b728 <USBH_HandleEnum+0x514>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b2c4:	7bbb      	ldrb	r3, [r7, #14]
 800b2c6:	2b03      	cmp	r3, #3
 800b2c8:	f040 822e 	bne.w	800b728 <USBH_HandleEnum+0x514>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800b2cc:	48ae      	ldr	r0, [pc, #696]	@ (800b588 <USBH_HandleEnum+0x374>)
 800b2ce:	f001 fead 	bl	800d02c <iprintf>
 800b2d2:	48ae      	ldr	r0, [pc, #696]	@ (800b58c <USBH_HandleEnum+0x378>)
 800b2d4:	f001 feaa 	bl	800d02c <iprintf>
 800b2d8:	200a      	movs	r0, #10
 800b2da:	f001 feb9 	bl	800d050 <putchar>
        phost->device.EnumCnt++;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	b2da      	uxtb	r2, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b2f4:	2b03      	cmp	r3, #3
 800b2f6:	d909      	bls.n	800b30c <USBH_HandleEnum+0xf8>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800b2f8:	48a5      	ldr	r0, [pc, #660]	@ (800b590 <USBH_HandleEnum+0x37c>)
 800b2fa:	f001 fe97 	bl	800d02c <iprintf>
 800b2fe:	200a      	movs	r0, #10
 800b300:	f001 fea6 	bl	800d050 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	220d      	movs	r2, #13
 800b308:	701a      	strb	r2, [r3, #0]
      break;
 800b30a:	e20d      	b.n	800b728 <USBH_HandleEnum+0x514>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	795b      	ldrb	r3, [r3, #5]
 800b310:	4619      	mov	r1, r3
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f001 f9cc 	bl	800c6b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	791b      	ldrb	r3, [r3, #4]
 800b31c:	4619      	mov	r1, r3
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f001 f9c6 	bl	800c6b0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	701a      	strb	r2, [r3, #0]
      break;
 800b32a:	e1fd      	b.n	800b728 <USBH_HandleEnum+0x514>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b32c:	2112      	movs	r1, #18
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 faaa 	bl	800b888 <USBH_Get_DevDesc>
 800b334:	4603      	mov	r3, r0
 800b336:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b338:	7bbb      	ldrb	r3, [r7, #14]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d117      	bne.n	800b36e <USBH_HandleEnum+0x15a>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8b3 3330 	ldrh.w	r3, [r3, #816]	@ 0x330
 800b344:	4619      	mov	r1, r3
 800b346:	4893      	ldr	r0, [pc, #588]	@ (800b594 <USBH_HandleEnum+0x380>)
 800b348:	f001 fe70 	bl	800d02c <iprintf>
 800b34c:	200a      	movs	r0, #10
 800b34e:	f001 fe7f 	bl	800d050 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8b3 332e 	ldrh.w	r3, [r3, #814]	@ 0x32e
 800b358:	4619      	mov	r1, r3
 800b35a:	488f      	ldr	r0, [pc, #572]	@ (800b598 <USBH_HandleEnum+0x384>)
 800b35c:	f001 fe66 	bl	800d02c <iprintf>
 800b360:	200a      	movs	r0, #10
 800b362:	f001 fe75 	bl	800d050 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2202      	movs	r2, #2
 800b36a:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b36c:	e1de      	b.n	800b72c <USBH_HandleEnum+0x518>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b36e:	7bbb      	ldrb	r3, [r7, #14]
 800b370:	2b03      	cmp	r3, #3
 800b372:	f040 81db 	bne.w	800b72c <USBH_HandleEnum+0x518>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800b376:	4884      	ldr	r0, [pc, #528]	@ (800b588 <USBH_HandleEnum+0x374>)
 800b378:	f001 fe58 	bl	800d02c <iprintf>
 800b37c:	4887      	ldr	r0, [pc, #540]	@ (800b59c <USBH_HandleEnum+0x388>)
 800b37e:	f001 fe55 	bl	800d02c <iprintf>
 800b382:	200a      	movs	r0, #10
 800b384:	f001 fe64 	bl	800d050 <putchar>
        phost->device.EnumCnt++;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b38e:	3301      	adds	r3, #1
 800b390:	b2da      	uxtb	r2, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b39e:	2b03      	cmp	r3, #3
 800b3a0:	d909      	bls.n	800b3b6 <USBH_HandleEnum+0x1a2>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800b3a2:	487b      	ldr	r0, [pc, #492]	@ (800b590 <USBH_HandleEnum+0x37c>)
 800b3a4:	f001 fe42 	bl	800d02c <iprintf>
 800b3a8:	200a      	movs	r0, #10
 800b3aa:	f001 fe51 	bl	800d050 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	220d      	movs	r2, #13
 800b3b2:	701a      	strb	r2, [r3, #0]
      break;
 800b3b4:	e1ba      	b.n	800b72c <USBH_HandleEnum+0x518>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	795b      	ldrb	r3, [r3, #5]
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f001 f977 	bl	800c6b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	791b      	ldrb	r3, [r3, #4]
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f001 f971 	bl	800c6b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	701a      	strb	r2, [r3, #0]
      break;
 800b3da:	e1a7      	b.n	800b72c <USBH_HandleEnum+0x518>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b3dc:	2101      	movs	r1, #1
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 fb3b 	bl	800ba5a <USBH_SetAddress>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b3e8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d13a      	bne.n	800b464 <USBH_HandleEnum+0x250>
      {
        USBH_Delay(2U);
 800b3ee:	2002      	movs	r0, #2
 800b3f0:	f001 fc49 	bl	800cc86 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 331c 	ldrb.w	r3, [r3, #796]	@ 0x31c
 800b402:	4619      	mov	r1, r3
 800b404:	4866      	ldr	r0, [pc, #408]	@ (800b5a0 <USBH_HandleEnum+0x38c>)
 800b406:	f001 fe11 	bl	800d02c <iprintf>
 800b40a:	200a      	movs	r0, #10
 800b40c:	f001 fe20 	bl	800d050 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2203      	movs	r2, #3
 800b414:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	7919      	ldrb	r1, [r3, #4]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b42a:	9202      	str	r2, [sp, #8]
 800b42c:	2200      	movs	r2, #0
 800b42e:	9201      	str	r2, [sp, #4]
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	4603      	mov	r3, r0
 800b434:	2280      	movs	r2, #128	@ 0x80
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f001 f8ea 	bl	800c610 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	7959      	ldrb	r1, [r3, #5]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b450:	9202      	str	r2, [sp, #8]
 800b452:	2200      	movs	r2, #0
 800b454:	9201      	str	r2, [sp, #4]
 800b456:	9300      	str	r3, [sp, #0]
 800b458:	4603      	mov	r3, r0
 800b45a:	2200      	movs	r2, #0
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f001 f8d7 	bl	800c610 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b462:	e165      	b.n	800b730 <USBH_HandleEnum+0x51c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b464:	7bbb      	ldrb	r3, [r7, #14]
 800b466:	2b03      	cmp	r3, #3
 800b468:	f040 8162 	bne.w	800b730 <USBH_HandleEnum+0x51c>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800b46c:	4846      	ldr	r0, [pc, #280]	@ (800b588 <USBH_HandleEnum+0x374>)
 800b46e:	f001 fddd 	bl	800d02c <iprintf>
 800b472:	484c      	ldr	r0, [pc, #304]	@ (800b5a4 <USBH_HandleEnum+0x390>)
 800b474:	f001 fdda 	bl	800d02c <iprintf>
 800b478:	200a      	movs	r0, #10
 800b47a:	f001 fde9 	bl	800d050 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800b47e:	4844      	ldr	r0, [pc, #272]	@ (800b590 <USBH_HandleEnum+0x37c>)
 800b480:	f001 fdd4 	bl	800d02c <iprintf>
 800b484:	200a      	movs	r0, #10
 800b486:	f001 fde3 	bl	800d050 <putchar>
        phost->gState = HOST_ABORT_STATE;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	220d      	movs	r2, #13
 800b48e:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	705a      	strb	r2, [r3, #1]
      break;
 800b496:	e14b      	b.n	800b730 <USBH_HandleEnum+0x51c>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b498:	2109      	movs	r1, #9
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fa2e 	bl	800b8fc <USBH_Get_CfgDesc>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b4a4:	7bbb      	ldrb	r3, [r7, #14]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d103      	bne.n	800b4b2 <USBH_HandleEnum+0x29e>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2204      	movs	r2, #4
 800b4ae:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b4b0:	e140      	b.n	800b734 <USBH_HandleEnum+0x520>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b4b2:	7bbb      	ldrb	r3, [r7, #14]
 800b4b4:	2b03      	cmp	r3, #3
 800b4b6:	f040 813d 	bne.w	800b734 <USBH_HandleEnum+0x520>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800b4ba:	4833      	ldr	r0, [pc, #204]	@ (800b588 <USBH_HandleEnum+0x374>)
 800b4bc:	f001 fdb6 	bl	800d02c <iprintf>
 800b4c0:	4839      	ldr	r0, [pc, #228]	@ (800b5a8 <USBH_HandleEnum+0x394>)
 800b4c2:	f001 fdb3 	bl	800d02c <iprintf>
 800b4c6:	200a      	movs	r0, #10
 800b4c8:	f001 fdc2 	bl	800d050 <putchar>
        phost->device.EnumCnt++;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	b2da      	uxtb	r2, r3
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b4e2:	2b03      	cmp	r3, #3
 800b4e4:	d909      	bls.n	800b4fa <USBH_HandleEnum+0x2e6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800b4e6:	482a      	ldr	r0, [pc, #168]	@ (800b590 <USBH_HandleEnum+0x37c>)
 800b4e8:	f001 fda0 	bl	800d02c <iprintf>
 800b4ec:	200a      	movs	r0, #10
 800b4ee:	f001 fdaf 	bl	800d050 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	220d      	movs	r2, #13
 800b4f6:	701a      	strb	r2, [r3, #0]
      break;
 800b4f8:	e11c      	b.n	800b734 <USBH_HandleEnum+0x520>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	795b      	ldrb	r3, [r3, #5]
 800b4fe:	4619      	mov	r1, r3
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f001 f8d5 	bl	800c6b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	791b      	ldrb	r3, [r3, #4]
 800b50a:	4619      	mov	r1, r3
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f001 f8cf 	bl	800c6b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2200      	movs	r2, #0
 800b51c:	701a      	strb	r2, [r3, #0]
      break;
 800b51e:	e109      	b.n	800b734 <USBH_HandleEnum+0x520>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800b526:	4619      	mov	r1, r3
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 f9e7 	bl	800b8fc <USBH_Get_CfgDesc>
 800b52e:	4603      	mov	r3, r0
 800b530:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b532:	7bbb      	ldrb	r3, [r7, #14]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d103      	bne.n	800b540 <USBH_HandleEnum+0x32c>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2205      	movs	r2, #5
 800b53c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b53e:	e0fb      	b.n	800b738 <USBH_HandleEnum+0x524>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b540:	7bbb      	ldrb	r3, [r7, #14]
 800b542:	2b03      	cmp	r3, #3
 800b544:	f040 80f8 	bne.w	800b738 <USBH_HandleEnum+0x524>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800b548:	480f      	ldr	r0, [pc, #60]	@ (800b588 <USBH_HandleEnum+0x374>)
 800b54a:	f001 fd6f 	bl	800d02c <iprintf>
 800b54e:	4816      	ldr	r0, [pc, #88]	@ (800b5a8 <USBH_HandleEnum+0x394>)
 800b550:	f001 fd6c 	bl	800d02c <iprintf>
 800b554:	200a      	movs	r0, #10
 800b556:	f001 fd7b 	bl	800d050 <putchar>
        phost->device.EnumCnt++;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b560:	3301      	adds	r3, #1
 800b562:	b2da      	uxtb	r2, r3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b570:	2b03      	cmp	r3, #3
 800b572:	d91b      	bls.n	800b5ac <USBH_HandleEnum+0x398>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800b574:	4806      	ldr	r0, [pc, #24]	@ (800b590 <USBH_HandleEnum+0x37c>)
 800b576:	f001 fd59 	bl	800d02c <iprintf>
 800b57a:	200a      	movs	r0, #10
 800b57c:	f001 fd68 	bl	800d050 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	220d      	movs	r2, #13
 800b584:	701a      	strb	r2, [r3, #0]
      break;
 800b586:	e0d7      	b.n	800b738 <USBH_HandleEnum+0x524>
 800b588:	0800e348 	.word	0x0800e348
 800b58c:	0800e5e0 	.word	0x0800e5e0
 800b590:	0800e614 	.word	0x0800e614
 800b594:	0800e654 	.word	0x0800e654
 800b598:	0800e660 	.word	0x0800e660
 800b59c:	0800e66c 	.word	0x0800e66c
 800b5a0:	0800e6a8 	.word	0x0800e6a8
 800b5a4:	0800e6c0 	.word	0x0800e6c0
 800b5a8:	0800e6f4 	.word	0x0800e6f4
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	795b      	ldrb	r3, [r3, #5]
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f001 f87c 	bl	800c6b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	791b      	ldrb	r3, [r3, #4]
 800b5bc:	4619      	mov	r1, r3
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f001 f876 	bl	800c6b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	701a      	strb	r2, [r3, #0]
      break;
 800b5d0:	e0b2      	b.n	800b738 <USBH_HandleEnum+0x524>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d02a      	beq.n	800b632 <USBH_HandleEnum+0x41e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b5e8:	23ff      	movs	r3, #255	@ 0xff
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 f9be 	bl	800b96c <USBH_Get_StringDesc>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b5f4:	7bbb      	ldrb	r3, [r7, #14]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d10d      	bne.n	800b616 <USBH_HandleEnum+0x402>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b600:	4619      	mov	r1, r3
 800b602:	4853      	ldr	r0, [pc, #332]	@ (800b750 <USBH_HandleEnum+0x53c>)
 800b604:	f001 fd12 	bl	800d02c <iprintf>
 800b608:	200a      	movs	r0, #10
 800b60a:	f001 fd21 	bl	800d050 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2206      	movs	r2, #6
 800b612:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b614:	e092      	b.n	800b73c <USBH_HandleEnum+0x528>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b616:	7bbb      	ldrb	r3, [r7, #14]
 800b618:	2b03      	cmp	r3, #3
 800b61a:	f040 808f 	bne.w	800b73c <USBH_HandleEnum+0x528>
          USBH_UsrLog("Manufacturer : N/A");
 800b61e:	484d      	ldr	r0, [pc, #308]	@ (800b754 <USBH_HandleEnum+0x540>)
 800b620:	f001 fd04 	bl	800d02c <iprintf>
 800b624:	200a      	movs	r0, #10
 800b626:	f001 fd13 	bl	800d050 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2206      	movs	r2, #6
 800b62e:	705a      	strb	r2, [r3, #1]
      break;
 800b630:	e084      	b.n	800b73c <USBH_HandleEnum+0x528>
        USBH_UsrLog("Manufacturer : N/A");
 800b632:	4848      	ldr	r0, [pc, #288]	@ (800b754 <USBH_HandleEnum+0x540>)
 800b634:	f001 fcfa 	bl	800d02c <iprintf>
 800b638:	200a      	movs	r0, #10
 800b63a:	f001 fd09 	bl	800d050 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2206      	movs	r2, #6
 800b642:	705a      	strb	r2, [r3, #1]
      break;
 800b644:	e07a      	b.n	800b73c <USBH_HandleEnum+0x528>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d029      	beq.n	800b6a4 <USBH_HandleEnum+0x490>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b65c:	23ff      	movs	r3, #255	@ 0xff
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 f984 	bl	800b96c <USBH_Get_StringDesc>
 800b664:	4603      	mov	r3, r0
 800b666:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b668:	7bbb      	ldrb	r3, [r7, #14]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d10d      	bne.n	800b68a <USBH_HandleEnum+0x476>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b674:	4619      	mov	r1, r3
 800b676:	4838      	ldr	r0, [pc, #224]	@ (800b758 <USBH_HandleEnum+0x544>)
 800b678:	f001 fcd8 	bl	800d02c <iprintf>
 800b67c:	200a      	movs	r0, #10
 800b67e:	f001 fce7 	bl	800d050 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2207      	movs	r2, #7
 800b686:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b688:	e05a      	b.n	800b740 <USBH_HandleEnum+0x52c>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b68a:	7bbb      	ldrb	r3, [r7, #14]
 800b68c:	2b03      	cmp	r3, #3
 800b68e:	d157      	bne.n	800b740 <USBH_HandleEnum+0x52c>
          USBH_UsrLog("Product : N/A");
 800b690:	4832      	ldr	r0, [pc, #200]	@ (800b75c <USBH_HandleEnum+0x548>)
 800b692:	f001 fccb 	bl	800d02c <iprintf>
 800b696:	200a      	movs	r0, #10
 800b698:	f001 fcda 	bl	800d050 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2207      	movs	r2, #7
 800b6a0:	705a      	strb	r2, [r3, #1]
      break;
 800b6a2:	e04d      	b.n	800b740 <USBH_HandleEnum+0x52c>
        USBH_UsrLog("Product : N/A");
 800b6a4:	482d      	ldr	r0, [pc, #180]	@ (800b75c <USBH_HandleEnum+0x548>)
 800b6a6:	f001 fcc1 	bl	800d02c <iprintf>
 800b6aa:	200a      	movs	r0, #10
 800b6ac:	f001 fcd0 	bl	800d050 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2207      	movs	r2, #7
 800b6b4:	705a      	strb	r2, [r3, #1]
      break;
 800b6b6:	e043      	b.n	800b740 <USBH_HandleEnum+0x52c>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d027      	beq.n	800b712 <USBH_HandleEnum+0x4fe>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b6ce:	23ff      	movs	r3, #255	@ 0xff
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 f94b 	bl	800b96c <USBH_Get_StringDesc>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b6da:	7bbb      	ldrb	r3, [r7, #14]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d10c      	bne.n	800b6fa <USBH_HandleEnum+0x4e6>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	481d      	ldr	r0, [pc, #116]	@ (800b760 <USBH_HandleEnum+0x54c>)
 800b6ea:	f001 fc9f 	bl	800d02c <iprintf>
 800b6ee:	200a      	movs	r0, #10
 800b6f0:	f001 fcae 	bl	800d050 <putchar>
          Status = USBH_OK;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b6f8:	e024      	b.n	800b744 <USBH_HandleEnum+0x530>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b6fa:	7bbb      	ldrb	r3, [r7, #14]
 800b6fc:	2b03      	cmp	r3, #3
 800b6fe:	d121      	bne.n	800b744 <USBH_HandleEnum+0x530>
          USBH_UsrLog("Serial Number : N/A");
 800b700:	4818      	ldr	r0, [pc, #96]	@ (800b764 <USBH_HandleEnum+0x550>)
 800b702:	f001 fc93 	bl	800d02c <iprintf>
 800b706:	200a      	movs	r0, #10
 800b708:	f001 fca2 	bl	800d050 <putchar>
          Status = USBH_OK;
 800b70c:	2300      	movs	r3, #0
 800b70e:	73fb      	strb	r3, [r7, #15]
      break;
 800b710:	e018      	b.n	800b744 <USBH_HandleEnum+0x530>
        USBH_UsrLog("Serial Number : N/A");
 800b712:	4814      	ldr	r0, [pc, #80]	@ (800b764 <USBH_HandleEnum+0x550>)
 800b714:	f001 fc8a 	bl	800d02c <iprintf>
 800b718:	200a      	movs	r0, #10
 800b71a:	f001 fc99 	bl	800d050 <putchar>
        Status = USBH_OK;
 800b71e:	2300      	movs	r3, #0
 800b720:	73fb      	strb	r3, [r7, #15]
      break;
 800b722:	e00f      	b.n	800b744 <USBH_HandleEnum+0x530>

    default:
      break;
 800b724:	bf00      	nop
 800b726:	e00e      	b.n	800b746 <USBH_HandleEnum+0x532>
      break;
 800b728:	bf00      	nop
 800b72a:	e00c      	b.n	800b746 <USBH_HandleEnum+0x532>
      break;
 800b72c:	bf00      	nop
 800b72e:	e00a      	b.n	800b746 <USBH_HandleEnum+0x532>
      break;
 800b730:	bf00      	nop
 800b732:	e008      	b.n	800b746 <USBH_HandleEnum+0x532>
      break;
 800b734:	bf00      	nop
 800b736:	e006      	b.n	800b746 <USBH_HandleEnum+0x532>
      break;
 800b738:	bf00      	nop
 800b73a:	e004      	b.n	800b746 <USBH_HandleEnum+0x532>
      break;
 800b73c:	bf00      	nop
 800b73e:	e002      	b.n	800b746 <USBH_HandleEnum+0x532>
      break;
 800b740:	bf00      	nop
 800b742:	e000      	b.n	800b746 <USBH_HandleEnum+0x532>
      break;
 800b744:	bf00      	nop
  }
  return Status;
 800b746:	7bfb      	ldrb	r3, [r7, #15]
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3710      	adds	r7, #16
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	0800e738 	.word	0x0800e738
 800b754:	0800e74c 	.word	0x0800e74c
 800b758:	0800e760 	.word	0x0800e760
 800b75c:	0800e770 	.word	0x0800e770
 800b760:	0800e780 	.word	0x0800e780
 800b764:	0800e794 	.word	0x0800e794

0800b768 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	683a      	ldr	r2, [r7, #0]
 800b776:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800b77a:	bf00      	nop
 800b77c:	370c      	adds	r7, #12
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr

0800b786 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b082      	sub	sp, #8
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b794:	1c5a      	adds	r2, r3, #1
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f000 f804 	bl	800b7aa <USBH_HandleSof>
}
 800b7a2:	bf00      	nop
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b082      	sub	sp, #8
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	2b0b      	cmp	r3, #11
 800b7ba:	d10a      	bne.n	800b7d2 <USBH_HandleSof+0x28>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d005      	beq.n	800b7d2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b7cc:	699b      	ldr	r3, [r3, #24]
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	4798      	blx	r3
  }
}
 800b7d2:	bf00      	nop
 800b7d4:	3708      	adds	r7, #8
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}

0800b7da <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b7da:	b480      	push	{r7}
 800b7dc:	b083      	sub	sp, #12
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b7ea:	bf00      	nop
}
 800b7ec:	370c      	adds	r7, #12
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr

0800b7f6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b7f6:	b480      	push	{r7}
 800b7f8:	b083      	sub	sp, #12
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800b806:	bf00      	nop
}
 800b808:	370c      	adds	r7, #12
 800b80a:	46bd      	mov	sp, r7
 800b80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b810:	4770      	bx	lr

0800b812 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b812:	b480      	push	{r7}
 800b814:	b083      	sub	sp, #12
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2201      	movs	r2, #1
 800b81e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2200      	movs	r2, #0
 800b826:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2200      	movs	r2, #0
 800b82e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b832:	2300      	movs	r3, #0
}
 800b834:	4618      	mov	r0, r3
 800b836:	370c      	adds	r7, #12
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr

0800b840 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2200      	movs	r2, #0
 800b85c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f001 f8c4 	bl	800c9ee <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	791b      	ldrb	r3, [r3, #4]
 800b86a:	4619      	mov	r1, r3
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 ff1f 	bl	800c6b0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	795b      	ldrb	r3, [r3, #5]
 800b876:	4619      	mov	r1, r3
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 ff19 	bl	800c6b0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	3708      	adds	r7, #8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b086      	sub	sp, #24
 800b88c:	af02      	add	r7, sp, #8
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	460b      	mov	r3, r1
 800b892:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800b894:	887b      	ldrh	r3, [r7, #2]
 800b896:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b89a:	d90a      	bls.n	800b8b2 <USBH_Get_DevDesc+0x2a>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
 800b89c:	4815      	ldr	r0, [pc, #84]	@ (800b8f4 <USBH_Get_DevDesc+0x6c>)
 800b89e:	f001 fbc5 	bl	800d02c <iprintf>
 800b8a2:	4815      	ldr	r0, [pc, #84]	@ (800b8f8 <USBH_Get_DevDesc+0x70>)
 800b8a4:	f001 fbc2 	bl	800d02c <iprintf>
 800b8a8:	200a      	movs	r0, #10
 800b8aa:	f001 fbd1 	bl	800d050 <putchar>
    return USBH_NOT_SUPPORTED;
 800b8ae:	2303      	movs	r3, #3
 800b8b0:	e01b      	b.n	800b8ea <USBH_Get_DevDesc+0x62>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b8b8:	887b      	ldrh	r3, [r7, #2]
 800b8ba:	9300      	str	r3, [sp, #0]
 800b8bc:	4613      	mov	r3, r2
 800b8be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 f893 	bl	800b9f0 <USBH_GetDescriptor>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800b8ce:	7bfb      	ldrb	r3, [r7, #15]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d109      	bne.n	800b8e8 <USBH_Get_DevDesc+0x60>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b8da:	887a      	ldrh	r2, [r7, #2]
 800b8dc:	4619      	mov	r1, r3
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 f94a 	bl	800bb78 <USBH_ParseDevDesc>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	0800e7a8 	.word	0x0800e7a8
 800b8f8:	0800e7b0 	.word	0x0800e7b0

0800b8fc <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b086      	sub	sp, #24
 800b900:	af02      	add	r7, sp, #8
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	460b      	mov	r3, r1
 800b906:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	331c      	adds	r3, #28
 800b90c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800b90e:	887b      	ldrh	r3, [r7, #2]
 800b910:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b914:	d90a      	bls.n	800b92c <USBH_Get_CfgDesc+0x30>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
 800b916:	4813      	ldr	r0, [pc, #76]	@ (800b964 <USBH_Get_CfgDesc+0x68>)
 800b918:	f001 fb88 	bl	800d02c <iprintf>
 800b91c:	4812      	ldr	r0, [pc, #72]	@ (800b968 <USBH_Get_CfgDesc+0x6c>)
 800b91e:	f001 fb85 	bl	800d02c <iprintf>
 800b922:	200a      	movs	r0, #10
 800b924:	f001 fb94 	bl	800d050 <putchar>
    return USBH_NOT_SUPPORTED;
 800b928:	2303      	movs	r3, #3
 800b92a:	e016      	b.n	800b95a <USBH_Get_CfgDesc+0x5e>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b92c:	887b      	ldrh	r3, [r7, #2]
 800b92e:	9300      	str	r3, [sp, #0]
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b936:	2100      	movs	r1, #0
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 f859 	bl	800b9f0 <USBH_GetDescriptor>
 800b93e:	4603      	mov	r3, r0
 800b940:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b942:	7bfb      	ldrb	r3, [r7, #15]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d107      	bne.n	800b958 <USBH_Get_CfgDesc+0x5c>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b948:	887b      	ldrh	r3, [r7, #2]
 800b94a:	461a      	mov	r2, r3
 800b94c:	68b9      	ldr	r1, [r7, #8]
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 f9c2 	bl	800bcd8 <USBH_ParseCfgDesc>
 800b954:	4603      	mov	r3, r0
 800b956:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b958:	7bfb      	ldrb	r3, [r7, #15]
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3710      	adds	r7, #16
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	0800e7a8 	.word	0x0800e7a8
 800b968:	0800e7f4 	.word	0x0800e7f4

0800b96c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b088      	sub	sp, #32
 800b970:	af02      	add	r7, sp, #8
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	607a      	str	r2, [r7, #4]
 800b976:	461a      	mov	r2, r3
 800b978:	460b      	mov	r3, r1
 800b97a:	72fb      	strb	r3, [r7, #11]
 800b97c:	4613      	mov	r3, r2
 800b97e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800b980:	893b      	ldrh	r3, [r7, #8]
 800b982:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b986:	d802      	bhi.n	800b98e <USBH_Get_StringDesc+0x22>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d10a      	bne.n	800b9a4 <USBH_Get_StringDesc+0x38>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
 800b98e:	4816      	ldr	r0, [pc, #88]	@ (800b9e8 <USBH_Get_StringDesc+0x7c>)
 800b990:	f001 fb4c 	bl	800d02c <iprintf>
 800b994:	4815      	ldr	r0, [pc, #84]	@ (800b9ec <USBH_Get_StringDesc+0x80>)
 800b996:	f001 fb49 	bl	800d02c <iprintf>
 800b99a:	200a      	movs	r0, #10
 800b99c:	f001 fb58 	bl	800d050 <putchar>
    return USBH_NOT_SUPPORTED;
 800b9a0:	2303      	movs	r3, #3
 800b9a2:	e01c      	b.n	800b9de <USBH_Get_StringDesc+0x72>
  }

  status = USBH_GetDescriptor(phost,
 800b9a4:	7afb      	ldrb	r3, [r7, #11]
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800b9ac:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b9b4:	893b      	ldrh	r3, [r7, #8]
 800b9b6:	9300      	str	r3, [sp, #0]
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	2100      	movs	r1, #0
 800b9bc:	68f8      	ldr	r0, [r7, #12]
 800b9be:	f000 f817 	bl	800b9f0 <USBH_GetDescriptor>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b9c6:	7dfb      	ldrb	r3, [r7, #23]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d107      	bne.n	800b9dc <USBH_Get_StringDesc+0x70>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b9d2:	893a      	ldrh	r2, [r7, #8]
 800b9d4:	6879      	ldr	r1, [r7, #4]
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f000 fb92 	bl	800c100 <USBH_ParseStringDesc>
  }

  return status;
 800b9dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3718      	adds	r7, #24
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	0800e7a8 	.word	0x0800e7a8
 800b9ec:	0800e840 	.word	0x0800e840

0800b9f0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	607b      	str	r3, [r7, #4]
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	72fb      	strb	r3, [r7, #11]
 800b9fe:	4613      	mov	r3, r2
 800ba00:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	789b      	ldrb	r3, [r3, #2]
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d11c      	bne.n	800ba44 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ba0a:	7afb      	ldrb	r3, [r7, #11]
 800ba0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ba10:	b2da      	uxtb	r2, r3
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2206      	movs	r2, #6
 800ba1a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	893a      	ldrh	r2, [r7, #8]
 800ba20:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ba22:	893b      	ldrh	r3, [r7, #8]
 800ba24:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ba28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba2c:	d104      	bne.n	800ba38 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f240 4209 	movw	r2, #1033	@ 0x409
 800ba34:	829a      	strh	r2, [r3, #20]
 800ba36:	e002      	b.n	800ba3e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	8b3a      	ldrh	r2, [r7, #24]
 800ba42:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ba44:	8b3b      	ldrh	r3, [r7, #24]
 800ba46:	461a      	mov	r2, r3
 800ba48:	6879      	ldr	r1, [r7, #4]
 800ba4a:	68f8      	ldr	r0, [r7, #12]
 800ba4c:	f000 fba5 	bl	800c19a <USBH_CtlReq>
 800ba50:	4603      	mov	r3, r0
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b082      	sub	sp, #8
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
 800ba62:	460b      	mov	r3, r1
 800ba64:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	789b      	ldrb	r3, [r3, #2]
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d10f      	bne.n	800ba8e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2200      	movs	r2, #0
 800ba72:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2205      	movs	r2, #5
 800ba78:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ba7a:	78fb      	ldrb	r3, [r7, #3]
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ba8e:	2200      	movs	r2, #0
 800ba90:	2100      	movs	r1, #0
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f000 fb81 	bl	800c19a <USBH_CtlReq>
 800ba98:	4603      	mov	r3, r0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3708      	adds	r7, #8
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b082      	sub	sp, #8
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
 800baaa:	460b      	mov	r3, r1
 800baac:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	789b      	ldrb	r3, [r3, #2]
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d10e      	bne.n	800bad4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2200      	movs	r2, #0
 800baba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2209      	movs	r2, #9
 800bac0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	887a      	ldrh	r2, [r7, #2]
 800bac6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bad4:	2200      	movs	r2, #0
 800bad6:	2100      	movs	r1, #0
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 fb5e 	bl	800c19a <USBH_CtlReq>
 800bade:	4603      	mov	r3, r0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	460b      	mov	r3, r1
 800baf2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	789b      	ldrb	r3, [r3, #2]
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d10f      	bne.n	800bb1c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2203      	movs	r2, #3
 800bb06:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bb08:	78fb      	ldrb	r3, [r7, #3]
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2200      	movs	r2, #0
 800bb14:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	2100      	movs	r1, #0
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 fb3a 	bl	800c19a <USBH_CtlReq>
 800bb26:	4603      	mov	r3, r0
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3708      	adds	r7, #8
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	460b      	mov	r3, r1
 800bb3a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	789b      	ldrb	r3, [r3, #2]
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d10f      	bne.n	800bb64 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2202      	movs	r2, #2
 800bb48:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2200      	movs	r2, #0
 800bb54:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bb56:	78fb      	ldrb	r3, [r7, #3]
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2200      	movs	r2, #0
 800bb62:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bb64:	2200      	movs	r2, #0
 800bb66:	2100      	movs	r1, #0
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 fb16 	bl	800c19a <USBH_CtlReq>
 800bb6e:	4603      	mov	r3, r0
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3708      	adds	r7, #8
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b087      	sub	sp, #28
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	4613      	mov	r3, r2
 800bb84:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800bb8c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d101      	bne.n	800bb9c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800bb98:	2302      	movs	r3, #2
 800bb9a:	e094      	b.n	800bcc6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	781a      	ldrb	r2, [r3, #0]
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	785a      	ldrb	r2, [r3, #1]
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	3302      	adds	r3, #2
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	3303      	adds	r3, #3
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	021b      	lsls	r3, r3, #8
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	b29a      	uxth	r2, r3
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	791a      	ldrb	r2, [r3, #4]
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	795a      	ldrb	r2, [r3, #5]
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	799a      	ldrb	r2, [r3, #6]
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	79da      	ldrb	r2, [r3, #7]
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d004      	beq.n	800bbfa <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	d11b      	bne.n	800bc32 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	79db      	ldrb	r3, [r3, #7]
 800bbfe:	2b20      	cmp	r3, #32
 800bc00:	dc0f      	bgt.n	800bc22 <USBH_ParseDevDesc+0xaa>
 800bc02:	2b08      	cmp	r3, #8
 800bc04:	db0f      	blt.n	800bc26 <USBH_ParseDevDesc+0xae>
 800bc06:	3b08      	subs	r3, #8
 800bc08:	4a32      	ldr	r2, [pc, #200]	@ (800bcd4 <USBH_ParseDevDesc+0x15c>)
 800bc0a:	fa22 f303 	lsr.w	r3, r2, r3
 800bc0e:	f003 0301 	and.w	r3, r3, #1
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	bf14      	ite	ne
 800bc16:	2301      	movne	r3, #1
 800bc18:	2300      	moveq	r3, #0
 800bc1a:	b2db      	uxtb	r3, r3
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d106      	bne.n	800bc2e <USBH_ParseDevDesc+0xb6>
 800bc20:	e001      	b.n	800bc26 <USBH_ParseDevDesc+0xae>
 800bc22:	2b40      	cmp	r3, #64	@ 0x40
 800bc24:	d003      	beq.n	800bc2e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	2208      	movs	r2, #8
 800bc2a:	71da      	strb	r2, [r3, #7]
        break;
 800bc2c:	e000      	b.n	800bc30 <USBH_ParseDevDesc+0xb8>
        break;
 800bc2e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800bc30:	e00e      	b.n	800bc50 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bc38:	2b02      	cmp	r3, #2
 800bc3a:	d107      	bne.n	800bc4c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	79db      	ldrb	r3, [r3, #7]
 800bc40:	2b08      	cmp	r3, #8
 800bc42:	d005      	beq.n	800bc50 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	2208      	movs	r2, #8
 800bc48:	71da      	strb	r2, [r3, #7]
 800bc4a:	e001      	b.n	800bc50 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800bc4c:	2303      	movs	r3, #3
 800bc4e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800bc50:	88fb      	ldrh	r3, [r7, #6]
 800bc52:	2b08      	cmp	r3, #8
 800bc54:	d936      	bls.n	800bcc4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	3308      	adds	r3, #8
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	3309      	adds	r3, #9
 800bc62:	781b      	ldrb	r3, [r3, #0]
 800bc64:	021b      	lsls	r3, r3, #8
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	b29a      	uxth	r2, r3
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	330a      	adds	r3, #10
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	461a      	mov	r2, r3
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	330b      	adds	r3, #11
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	021b      	lsls	r3, r3, #8
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	4313      	orrs	r3, r2
 800bc84:	b29a      	uxth	r2, r3
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	330c      	adds	r3, #12
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	461a      	mov	r2, r3
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	330d      	adds	r3, #13
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	021b      	lsls	r3, r3, #8
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	4313      	orrs	r3, r2
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	7b9a      	ldrb	r2, [r3, #14]
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	7bda      	ldrb	r2, [r3, #15]
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	7c1a      	ldrb	r2, [r3, #16]
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	7c5a      	ldrb	r2, [r3, #17]
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800bcc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	371c      	adds	r7, #28
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop
 800bcd4:	01000101 	.word	0x01000101

0800bcd8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b08c      	sub	sp, #48	@ 0x30
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	60f8      	str	r0, [r7, #12]
 800bce0:	60b9      	str	r1, [r7, #8]
 800bce2:	4613      	mov	r3, r2
 800bce4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800bcec:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d101      	bne.n	800bd0a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800bd06:	2302      	movs	r3, #2
 800bd08:	e0da      	b.n	800bec0 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800bd0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	2b09      	cmp	r3, #9
 800bd14:	d002      	beq.n	800bd1c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800bd16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd18:	2209      	movs	r2, #9
 800bd1a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	781a      	ldrb	r2, [r3, #0]
 800bd20:	6a3b      	ldr	r3, [r7, #32]
 800bd22:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	785a      	ldrb	r2, [r3, #1]
 800bd28:	6a3b      	ldr	r3, [r7, #32]
 800bd2a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	3302      	adds	r3, #2
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	461a      	mov	r2, r3
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	3303      	adds	r3, #3
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	021b      	lsls	r3, r3, #8
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd46:	bf28      	it	cs
 800bd48:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800bd4c:	b29a      	uxth	r2, r3
 800bd4e:	6a3b      	ldr	r3, [r7, #32]
 800bd50:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	791a      	ldrb	r2, [r3, #4]
 800bd56:	6a3b      	ldr	r3, [r7, #32]
 800bd58:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	795a      	ldrb	r2, [r3, #5]
 800bd5e:	6a3b      	ldr	r3, [r7, #32]
 800bd60:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	799a      	ldrb	r2, [r3, #6]
 800bd66:	6a3b      	ldr	r3, [r7, #32]
 800bd68:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	79da      	ldrb	r2, [r3, #7]
 800bd6e:	6a3b      	ldr	r3, [r7, #32]
 800bd70:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	7a1a      	ldrb	r2, [r3, #8]
 800bd76:	6a3b      	ldr	r3, [r7, #32]
 800bd78:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bd7a:	88fb      	ldrh	r3, [r7, #6]
 800bd7c:	2b09      	cmp	r3, #9
 800bd7e:	f240 809d 	bls.w	800bebc <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800bd82:	2309      	movs	r3, #9
 800bd84:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bd86:	2300      	movs	r3, #0
 800bd88:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bd8a:	e081      	b.n	800be90 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bd8c:	f107 0316 	add.w	r3, r7, #22
 800bd90:	4619      	mov	r1, r3
 800bd92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd94:	f000 f9e7 	bl	800c166 <USBH_GetNextDesc>
 800bd98:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800bd9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd9c:	785b      	ldrb	r3, [r3, #1]
 800bd9e:	2b04      	cmp	r3, #4
 800bda0:	d176      	bne.n	800be90 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800bda2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	2b09      	cmp	r3, #9
 800bda8:	d002      	beq.n	800bdb0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800bdaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdac:	2209      	movs	r2, #9
 800bdae:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800bdb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bdb4:	221a      	movs	r2, #26
 800bdb6:	fb02 f303 	mul.w	r3, r2, r3
 800bdba:	3308      	adds	r3, #8
 800bdbc:	6a3a      	ldr	r2, [r7, #32]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	3302      	adds	r3, #2
 800bdc2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bdc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bdc6:	69f8      	ldr	r0, [r7, #28]
 800bdc8:	f000 f87e 	bl	800bec8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bdd6:	e043      	b.n	800be60 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bdd8:	f107 0316 	add.w	r3, r7, #22
 800bddc:	4619      	mov	r1, r3
 800bdde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bde0:	f000 f9c1 	bl	800c166 <USBH_GetNextDesc>
 800bde4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bde6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bde8:	785b      	ldrb	r3, [r3, #1]
 800bdea:	2b05      	cmp	r3, #5
 800bdec:	d138      	bne.n	800be60 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800bdee:	69fb      	ldr	r3, [r7, #28]
 800bdf0:	795b      	ldrb	r3, [r3, #5]
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d113      	bne.n	800be1e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800bdfa:	2b02      	cmp	r3, #2
 800bdfc:	d003      	beq.n	800be06 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	799b      	ldrb	r3, [r3, #6]
 800be02:	2b03      	cmp	r3, #3
 800be04:	d10b      	bne.n	800be1e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	79db      	ldrb	r3, [r3, #7]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d10b      	bne.n	800be26 <USBH_ParseCfgDesc+0x14e>
 800be0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	2b09      	cmp	r3, #9
 800be14:	d007      	beq.n	800be26 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800be16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be18:	2209      	movs	r2, #9
 800be1a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800be1c:	e003      	b.n	800be26 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800be1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be20:	2207      	movs	r2, #7
 800be22:	701a      	strb	r2, [r3, #0]
 800be24:	e000      	b.n	800be28 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800be26:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800be28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be2c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800be30:	3201      	adds	r2, #1
 800be32:	00d2      	lsls	r2, r2, #3
 800be34:	211a      	movs	r1, #26
 800be36:	fb01 f303 	mul.w	r3, r1, r3
 800be3a:	4413      	add	r3, r2
 800be3c:	3308      	adds	r3, #8
 800be3e:	6a3a      	ldr	r2, [r7, #32]
 800be40:	4413      	add	r3, r2
 800be42:	3304      	adds	r3, #4
 800be44:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800be46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be48:	69b9      	ldr	r1, [r7, #24]
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f000 f870 	bl	800bf30 <USBH_ParseEPDesc>
 800be50:	4603      	mov	r3, r0
 800be52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800be56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800be5a:	3301      	adds	r3, #1
 800be5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	791b      	ldrb	r3, [r3, #4]
 800be64:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800be68:	429a      	cmp	r2, r3
 800be6a:	d204      	bcs.n	800be76 <USBH_ParseCfgDesc+0x19e>
 800be6c:	6a3b      	ldr	r3, [r7, #32]
 800be6e:	885a      	ldrh	r2, [r3, #2]
 800be70:	8afb      	ldrh	r3, [r7, #22]
 800be72:	429a      	cmp	r2, r3
 800be74:	d8b0      	bhi.n	800bdd8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	791b      	ldrb	r3, [r3, #4]
 800be7a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800be7e:	429a      	cmp	r2, r3
 800be80:	d201      	bcs.n	800be86 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800be82:	2303      	movs	r3, #3
 800be84:	e01c      	b.n	800bec0 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800be86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be8a:	3301      	adds	r3, #1
 800be8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800be90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be94:	2b01      	cmp	r3, #1
 800be96:	d805      	bhi.n	800bea4 <USBH_ParseCfgDesc+0x1cc>
 800be98:	6a3b      	ldr	r3, [r7, #32]
 800be9a:	885a      	ldrh	r2, [r3, #2]
 800be9c:	8afb      	ldrh	r3, [r7, #22]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	f63f af74 	bhi.w	800bd8c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800bea4:	6a3b      	ldr	r3, [r7, #32]
 800bea6:	791b      	ldrb	r3, [r3, #4]
 800bea8:	2b02      	cmp	r3, #2
 800beaa:	bf28      	it	cs
 800beac:	2302      	movcs	r3, #2
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d201      	bcs.n	800bebc <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800beb8:	2303      	movs	r3, #3
 800beba:	e001      	b.n	800bec0 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800bebc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3730      	adds	r7, #48	@ 0x30
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800bec8:	b480      	push	{r7}
 800beca:	b083      	sub	sp, #12
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	781a      	ldrb	r2, [r3, #0]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	785a      	ldrb	r2, [r3, #1]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	789a      	ldrb	r2, [r3, #2]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	78da      	ldrb	r2, [r3, #3]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	3304      	adds	r3, #4
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	2b02      	cmp	r3, #2
 800befa:	bf28      	it	cs
 800befc:	2302      	movcs	r3, #2
 800befe:	b2da      	uxtb	r2, r3
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	795a      	ldrb	r2, [r3, #5]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	799a      	ldrb	r2, [r3, #6]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	79da      	ldrb	r2, [r3, #7]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	7a1a      	ldrb	r2, [r3, #8]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	721a      	strb	r2, [r3, #8]
}
 800bf24:	bf00      	nop
 800bf26:	370c      	adds	r7, #12
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b087      	sub	sp, #28
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	781a      	ldrb	r2, [r3, #0]
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	785a      	ldrb	r2, [r3, #1]
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	789a      	ldrb	r2, [r3, #2]
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	78da      	ldrb	r2, [r3, #3]
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	3304      	adds	r3, #4
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	461a      	mov	r2, r3
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	3305      	adds	r3, #5
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	021b      	lsls	r3, r3, #8
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	4313      	orrs	r3, r2
 800bf74:	b29a      	uxth	r2, r3
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	799a      	ldrb	r2, [r3, #6]
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	889b      	ldrh	r3, [r3, #4]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d009      	beq.n	800bf9e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800bf8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf92:	d804      	bhi.n	800bf9e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800bf98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf9c:	d901      	bls.n	800bfa2 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800bf9e:	2303      	movs	r3, #3
 800bfa0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d136      	bne.n	800c01a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	78db      	ldrb	r3, [r3, #3]
 800bfb0:	f003 0303 	and.w	r3, r3, #3
 800bfb4:	2b02      	cmp	r3, #2
 800bfb6:	d108      	bne.n	800bfca <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	889b      	ldrh	r3, [r3, #4]
 800bfbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bfc0:	f240 8097 	bls.w	800c0f2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bfc4:	2303      	movs	r3, #3
 800bfc6:	75fb      	strb	r3, [r7, #23]
 800bfc8:	e093      	b.n	800c0f2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	78db      	ldrb	r3, [r3, #3]
 800bfce:	f003 0303 	and.w	r3, r3, #3
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d107      	bne.n	800bfe6 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	889b      	ldrh	r3, [r3, #4]
 800bfda:	2b40      	cmp	r3, #64	@ 0x40
 800bfdc:	f240 8089 	bls.w	800c0f2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bfe0:	2303      	movs	r3, #3
 800bfe2:	75fb      	strb	r3, [r7, #23]
 800bfe4:	e085      	b.n	800c0f2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	78db      	ldrb	r3, [r3, #3]
 800bfea:	f003 0303 	and.w	r3, r3, #3
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	d005      	beq.n	800bffe <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	78db      	ldrb	r3, [r3, #3]
 800bff6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bffa:	2b03      	cmp	r3, #3
 800bffc:	d10a      	bne.n	800c014 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	799b      	ldrb	r3, [r3, #6]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d003      	beq.n	800c00e <USBH_ParseEPDesc+0xde>
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	799b      	ldrb	r3, [r3, #6]
 800c00a:	2b10      	cmp	r3, #16
 800c00c:	d970      	bls.n	800c0f0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800c00e:	2303      	movs	r3, #3
 800c010:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c012:	e06d      	b.n	800c0f0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c014:	2303      	movs	r3, #3
 800c016:	75fb      	strb	r3, [r7, #23]
 800c018:	e06b      	b.n	800c0f2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c020:	2b01      	cmp	r3, #1
 800c022:	d13c      	bne.n	800c09e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	78db      	ldrb	r3, [r3, #3]
 800c028:	f003 0303 	and.w	r3, r3, #3
 800c02c:	2b02      	cmp	r3, #2
 800c02e:	d005      	beq.n	800c03c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	78db      	ldrb	r3, [r3, #3]
 800c034:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d106      	bne.n	800c04a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	889b      	ldrh	r3, [r3, #4]
 800c040:	2b40      	cmp	r3, #64	@ 0x40
 800c042:	d956      	bls.n	800c0f2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c044:	2303      	movs	r3, #3
 800c046:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c048:	e053      	b.n	800c0f2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	78db      	ldrb	r3, [r3, #3]
 800c04e:	f003 0303 	and.w	r3, r3, #3
 800c052:	2b01      	cmp	r3, #1
 800c054:	d10e      	bne.n	800c074 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	799b      	ldrb	r3, [r3, #6]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d007      	beq.n	800c06e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800c062:	2b10      	cmp	r3, #16
 800c064:	d803      	bhi.n	800c06e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800c06a:	2b40      	cmp	r3, #64	@ 0x40
 800c06c:	d941      	bls.n	800c0f2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c06e:	2303      	movs	r3, #3
 800c070:	75fb      	strb	r3, [r7, #23]
 800c072:	e03e      	b.n	800c0f2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	78db      	ldrb	r3, [r3, #3]
 800c078:	f003 0303 	and.w	r3, r3, #3
 800c07c:	2b03      	cmp	r3, #3
 800c07e:	d10b      	bne.n	800c098 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	799b      	ldrb	r3, [r3, #6]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d004      	beq.n	800c092 <USBH_ParseEPDesc+0x162>
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	889b      	ldrh	r3, [r3, #4]
 800c08c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c090:	d32f      	bcc.n	800c0f2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c092:	2303      	movs	r3, #3
 800c094:	75fb      	strb	r3, [r7, #23]
 800c096:	e02c      	b.n	800c0f2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c098:	2303      	movs	r3, #3
 800c09a:	75fb      	strb	r3, [r7, #23]
 800c09c:	e029      	b.n	800c0f2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c0a4:	2b02      	cmp	r3, #2
 800c0a6:	d120      	bne.n	800c0ea <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	78db      	ldrb	r3, [r3, #3]
 800c0ac:	f003 0303 	and.w	r3, r3, #3
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d106      	bne.n	800c0c2 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	889b      	ldrh	r3, [r3, #4]
 800c0b8:	2b08      	cmp	r3, #8
 800c0ba:	d01a      	beq.n	800c0f2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c0bc:	2303      	movs	r3, #3
 800c0be:	75fb      	strb	r3, [r7, #23]
 800c0c0:	e017      	b.n	800c0f2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	78db      	ldrb	r3, [r3, #3]
 800c0c6:	f003 0303 	and.w	r3, r3, #3
 800c0ca:	2b03      	cmp	r3, #3
 800c0cc:	d10a      	bne.n	800c0e4 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	799b      	ldrb	r3, [r3, #6]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d003      	beq.n	800c0de <USBH_ParseEPDesc+0x1ae>
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	889b      	ldrh	r3, [r3, #4]
 800c0da:	2b08      	cmp	r3, #8
 800c0dc:	d909      	bls.n	800c0f2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c0de:	2303      	movs	r3, #3
 800c0e0:	75fb      	strb	r3, [r7, #23]
 800c0e2:	e006      	b.n	800c0f2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c0e4:	2303      	movs	r3, #3
 800c0e6:	75fb      	strb	r3, [r7, #23]
 800c0e8:	e003      	b.n	800c0f2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c0ea:	2303      	movs	r3, #3
 800c0ec:	75fb      	strb	r3, [r7, #23]
 800c0ee:	e000      	b.n	800c0f2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c0f0:	bf00      	nop
  }

  return status;
 800c0f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	371c      	adds	r7, #28
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c100:	b480      	push	{r7}
 800c102:	b087      	sub	sp, #28
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	4613      	mov	r3, r2
 800c10c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	3301      	adds	r3, #1
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	2b03      	cmp	r3, #3
 800c116:	d120      	bne.n	800c15a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	1e9a      	subs	r2, r3, #2
 800c11e:	88fb      	ldrh	r3, [r7, #6]
 800c120:	4293      	cmp	r3, r2
 800c122:	bf28      	it	cs
 800c124:	4613      	movcs	r3, r2
 800c126:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	3302      	adds	r3, #2
 800c12c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c12e:	2300      	movs	r3, #0
 800c130:	82fb      	strh	r3, [r7, #22]
 800c132:	e00b      	b.n	800c14c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c134:	8afb      	ldrh	r3, [r7, #22]
 800c136:	68fa      	ldr	r2, [r7, #12]
 800c138:	4413      	add	r3, r2
 800c13a:	781a      	ldrb	r2, [r3, #0]
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	3301      	adds	r3, #1
 800c144:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c146:	8afb      	ldrh	r3, [r7, #22]
 800c148:	3302      	adds	r3, #2
 800c14a:	82fb      	strh	r3, [r7, #22]
 800c14c:	8afa      	ldrh	r2, [r7, #22]
 800c14e:	8abb      	ldrh	r3, [r7, #20]
 800c150:	429a      	cmp	r2, r3
 800c152:	d3ef      	bcc.n	800c134 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	2200      	movs	r2, #0
 800c158:	701a      	strb	r2, [r3, #0]
  }
}
 800c15a:	bf00      	nop
 800c15c:	371c      	adds	r7, #28
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr

0800c166 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c166:	b480      	push	{r7}
 800c168:	b085      	sub	sp, #20
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
 800c16e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	881b      	ldrh	r3, [r3, #0]
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	7812      	ldrb	r2, [r2, #0]
 800c178:	4413      	add	r3, r2
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	4413      	add	r3, r2
 800c18a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c18c:	68fb      	ldr	r3, [r7, #12]
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3714      	adds	r7, #20
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr

0800c19a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b086      	sub	sp, #24
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	60f8      	str	r0, [r7, #12]
 800c1a2:	60b9      	str	r1, [r7, #8]
 800c1a4:	4613      	mov	r3, r2
 800c1a6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	789b      	ldrb	r3, [r3, #2]
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d002      	beq.n	800c1ba <USBH_CtlReq+0x20>
 800c1b4:	2b02      	cmp	r3, #2
 800c1b6:	d00f      	beq.n	800c1d8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c1b8:	e027      	b.n	800c20a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	68ba      	ldr	r2, [r7, #8]
 800c1be:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	88fa      	ldrh	r2, [r7, #6]
 800c1c4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2202      	movs	r2, #2
 800c1d0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	75fb      	strb	r3, [r7, #23]
      break;
 800c1d6:	e018      	b.n	800c20a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c1d8:	68f8      	ldr	r0, [r7, #12]
 800c1da:	f000 f81b 	bl	800c214 <USBH_HandleControl>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c1e2:	7dfb      	ldrb	r3, [r7, #23]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d002      	beq.n	800c1ee <USBH_CtlReq+0x54>
 800c1e8:	7dfb      	ldrb	r3, [r7, #23]
 800c1ea:	2b03      	cmp	r3, #3
 800c1ec:	d106      	bne.n	800c1fc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	761a      	strb	r2, [r3, #24]
      break;
 800c1fa:	e005      	b.n	800c208 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c1fc:	7dfb      	ldrb	r3, [r7, #23]
 800c1fe:	2b02      	cmp	r3, #2
 800c200:	d102      	bne.n	800c208 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2201      	movs	r2, #1
 800c206:	709a      	strb	r2, [r3, #2]
      break;
 800c208:	bf00      	nop
  }
  return status;
 800c20a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3718      	adds	r7, #24
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b086      	sub	sp, #24
 800c218:	af02      	add	r7, sp, #8
 800c21a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c21c:	2301      	movs	r3, #1
 800c21e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c220:	2300      	movs	r3, #0
 800c222:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	7e1b      	ldrb	r3, [r3, #24]
 800c228:	3b01      	subs	r3, #1
 800c22a:	2b0a      	cmp	r3, #10
 800c22c:	f200 815f 	bhi.w	800c4ee <USBH_HandleControl+0x2da>
 800c230:	a201      	add	r2, pc, #4	@ (adr r2, 800c238 <USBH_HandleControl+0x24>)
 800c232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c236:	bf00      	nop
 800c238:	0800c265 	.word	0x0800c265
 800c23c:	0800c27f 	.word	0x0800c27f
 800c240:	0800c2e9 	.word	0x0800c2e9
 800c244:	0800c30f 	.word	0x0800c30f
 800c248:	0800c347 	.word	0x0800c347
 800c24c:	0800c371 	.word	0x0800c371
 800c250:	0800c3c3 	.word	0x0800c3c3
 800c254:	0800c3e5 	.word	0x0800c3e5
 800c258:	0800c421 	.word	0x0800c421
 800c25c:	0800c447 	.word	0x0800c447
 800c260:	0800c485 	.word	0x0800c485
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f103 0110 	add.w	r1, r3, #16
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	795b      	ldrb	r3, [r3, #5]
 800c26e:	461a      	mov	r2, r3
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 f951 	bl	800c518 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2202      	movs	r2, #2
 800c27a:	761a      	strb	r2, [r3, #24]
      break;
 800c27c:	e142      	b.n	800c504 <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	795b      	ldrb	r3, [r3, #5]
 800c282:	4619      	mov	r1, r3
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 fca1 	bl	800cbcc <USBH_LL_GetURBState>
 800c28a:	4603      	mov	r3, r0
 800c28c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c28e:	7bbb      	ldrb	r3, [r7, #14]
 800c290:	2b01      	cmp	r3, #1
 800c292:	d11e      	bne.n	800c2d2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	7c1b      	ldrb	r3, [r3, #16]
 800c298:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c29c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	8adb      	ldrh	r3, [r3, #22]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00a      	beq.n	800c2bc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c2a6:	7b7b      	ldrb	r3, [r7, #13]
 800c2a8:	2b80      	cmp	r3, #128	@ 0x80
 800c2aa:	d103      	bne.n	800c2b4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2203      	movs	r2, #3
 800c2b0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c2b2:	e11e      	b.n	800c4f2 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2205      	movs	r2, #5
 800c2b8:	761a      	strb	r2, [r3, #24]
      break;
 800c2ba:	e11a      	b.n	800c4f2 <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 800c2bc:	7b7b      	ldrb	r3, [r7, #13]
 800c2be:	2b80      	cmp	r3, #128	@ 0x80
 800c2c0:	d103      	bne.n	800c2ca <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2209      	movs	r2, #9
 800c2c6:	761a      	strb	r2, [r3, #24]
      break;
 800c2c8:	e113      	b.n	800c4f2 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2207      	movs	r2, #7
 800c2ce:	761a      	strb	r2, [r3, #24]
      break;
 800c2d0:	e10f      	b.n	800c4f2 <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c2d2:	7bbb      	ldrb	r3, [r7, #14]
 800c2d4:	2b04      	cmp	r3, #4
 800c2d6:	d003      	beq.n	800c2e0 <USBH_HandleControl+0xcc>
 800c2d8:	7bbb      	ldrb	r3, [r7, #14]
 800c2da:	2b02      	cmp	r3, #2
 800c2dc:	f040 8109 	bne.w	800c4f2 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	220b      	movs	r2, #11
 800c2e4:	761a      	strb	r2, [r3, #24]
      break;
 800c2e6:	e104      	b.n	800c4f2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c2ee:	b29a      	uxth	r2, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6899      	ldr	r1, [r3, #8]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	899a      	ldrh	r2, [r3, #12]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	791b      	ldrb	r3, [r3, #4]
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 f948 	bl	800c596 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2204      	movs	r2, #4
 800c30a:	761a      	strb	r2, [r3, #24]
      break;
 800c30c:	e0fa      	b.n	800c504 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	791b      	ldrb	r3, [r3, #4]
 800c312:	4619      	mov	r1, r3
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 fc59 	bl	800cbcc <USBH_LL_GetURBState>
 800c31a:	4603      	mov	r3, r0
 800c31c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c31e:	7bbb      	ldrb	r3, [r7, #14]
 800c320:	2b01      	cmp	r3, #1
 800c322:	d102      	bne.n	800c32a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2209      	movs	r2, #9
 800c328:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c32a:	7bbb      	ldrb	r3, [r7, #14]
 800c32c:	2b05      	cmp	r3, #5
 800c32e:	d102      	bne.n	800c336 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c330:	2303      	movs	r3, #3
 800c332:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c334:	e0df      	b.n	800c4f6 <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800c336:	7bbb      	ldrb	r3, [r7, #14]
 800c338:	2b04      	cmp	r3, #4
 800c33a:	f040 80dc 	bne.w	800c4f6 <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	220b      	movs	r2, #11
 800c342:	761a      	strb	r2, [r3, #24]
      break;
 800c344:	e0d7      	b.n	800c4f6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6899      	ldr	r1, [r3, #8]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	899a      	ldrh	r2, [r3, #12]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	795b      	ldrb	r3, [r3, #5]
 800c352:	2001      	movs	r0, #1
 800c354:	9000      	str	r0, [sp, #0]
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 f8f8 	bl	800c54c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c362:	b29a      	uxth	r2, r3
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2206      	movs	r2, #6
 800c36c:	761a      	strb	r2, [r3, #24]
      break;
 800c36e:	e0c9      	b.n	800c504 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	795b      	ldrb	r3, [r3, #5]
 800c374:	4619      	mov	r1, r3
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f000 fc28 	bl	800cbcc <USBH_LL_GetURBState>
 800c37c:	4603      	mov	r3, r0
 800c37e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c380:	7bbb      	ldrb	r3, [r7, #14]
 800c382:	2b01      	cmp	r3, #1
 800c384:	d103      	bne.n	800c38e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2207      	movs	r2, #7
 800c38a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c38c:	e0b5      	b.n	800c4fa <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 800c38e:	7bbb      	ldrb	r3, [r7, #14]
 800c390:	2b05      	cmp	r3, #5
 800c392:	d105      	bne.n	800c3a0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	220c      	movs	r2, #12
 800c398:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c39a:	2303      	movs	r3, #3
 800c39c:	73fb      	strb	r3, [r7, #15]
      break;
 800c39e:	e0ac      	b.n	800c4fa <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c3a0:	7bbb      	ldrb	r3, [r7, #14]
 800c3a2:	2b02      	cmp	r3, #2
 800c3a4:	d103      	bne.n	800c3ae <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2205      	movs	r2, #5
 800c3aa:	761a      	strb	r2, [r3, #24]
      break;
 800c3ac:	e0a5      	b.n	800c4fa <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 800c3ae:	7bbb      	ldrb	r3, [r7, #14]
 800c3b0:	2b04      	cmp	r3, #4
 800c3b2:	f040 80a2 	bne.w	800c4fa <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	220b      	movs	r2, #11
 800c3ba:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c3bc:	2302      	movs	r3, #2
 800c3be:	73fb      	strb	r3, [r7, #15]
      break;
 800c3c0:	e09b      	b.n	800c4fa <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	791b      	ldrb	r3, [r3, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 f8e3 	bl	800c596 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c3d6:	b29a      	uxth	r2, r3
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2208      	movs	r2, #8
 800c3e0:	761a      	strb	r2, [r3, #24]

      break;
 800c3e2:	e08f      	b.n	800c504 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	791b      	ldrb	r3, [r3, #4]
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 fbee 	bl	800cbcc <USBH_LL_GetURBState>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c3f4:	7bbb      	ldrb	r3, [r7, #14]
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	d105      	bne.n	800c406 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	220d      	movs	r2, #13
 800c3fe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c400:	2300      	movs	r3, #0
 800c402:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c404:	e07b      	b.n	800c4fe <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 800c406:	7bbb      	ldrb	r3, [r7, #14]
 800c408:	2b04      	cmp	r3, #4
 800c40a:	d103      	bne.n	800c414 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	220b      	movs	r2, #11
 800c410:	761a      	strb	r2, [r3, #24]
      break;
 800c412:	e074      	b.n	800c4fe <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 800c414:	7bbb      	ldrb	r3, [r7, #14]
 800c416:	2b05      	cmp	r3, #5
 800c418:	d171      	bne.n	800c4fe <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 800c41a:	2303      	movs	r3, #3
 800c41c:	73fb      	strb	r3, [r7, #15]
      break;
 800c41e:	e06e      	b.n	800c4fe <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	795b      	ldrb	r3, [r3, #5]
 800c424:	2201      	movs	r2, #1
 800c426:	9200      	str	r2, [sp, #0]
 800c428:	2200      	movs	r2, #0
 800c42a:	2100      	movs	r1, #0
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 f88d 	bl	800c54c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c438:	b29a      	uxth	r2, r3
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	220a      	movs	r2, #10
 800c442:	761a      	strb	r2, [r3, #24]
      break;
 800c444:	e05e      	b.n	800c504 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	795b      	ldrb	r3, [r3, #5]
 800c44a:	4619      	mov	r1, r3
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 fbbd 	bl	800cbcc <USBH_LL_GetURBState>
 800c452:	4603      	mov	r3, r0
 800c454:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c456:	7bbb      	ldrb	r3, [r7, #14]
 800c458:	2b01      	cmp	r3, #1
 800c45a:	d105      	bne.n	800c468 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c45c:	2300      	movs	r3, #0
 800c45e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	220d      	movs	r2, #13
 800c464:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c466:	e04c      	b.n	800c502 <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c468:	7bbb      	ldrb	r3, [r7, #14]
 800c46a:	2b02      	cmp	r3, #2
 800c46c:	d103      	bne.n	800c476 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2209      	movs	r2, #9
 800c472:	761a      	strb	r2, [r3, #24]
      break;
 800c474:	e045      	b.n	800c502 <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800c476:	7bbb      	ldrb	r3, [r7, #14]
 800c478:	2b04      	cmp	r3, #4
 800c47a:	d142      	bne.n	800c502 <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	220b      	movs	r2, #11
 800c480:	761a      	strb	r2, [r3, #24]
      break;
 800c482:	e03e      	b.n	800c502 <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	7e5b      	ldrb	r3, [r3, #25]
 800c488:	3301      	adds	r3, #1
 800c48a:	b2da      	uxtb	r2, r3
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	765a      	strb	r2, [r3, #25]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	7e5b      	ldrb	r3, [r3, #25]
 800c494:	2b02      	cmp	r3, #2
 800c496:	d806      	bhi.n	800c4a6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2201      	movs	r2, #1
 800c49c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2201      	movs	r2, #1
 800c4a2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c4a4:	e02e      	b.n	800c504 <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c4ac:	2106      	movs	r1, #6
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800c4b8:	4815      	ldr	r0, [pc, #84]	@ (800c510 <USBH_HandleControl+0x2fc>)
 800c4ba:	f000 fdb7 	bl	800d02c <iprintf>
 800c4be:	4815      	ldr	r0, [pc, #84]	@ (800c514 <USBH_HandleControl+0x300>)
 800c4c0:	f000 fdb4 	bl	800d02c <iprintf>
 800c4c4:	200a      	movs	r0, #10
 800c4c6:	f000 fdc3 	bl	800d050 <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	795b      	ldrb	r3, [r3, #5]
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f000 f8ed 	bl	800c6b0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	791b      	ldrb	r3, [r3, #4]
 800c4da:	4619      	mov	r1, r3
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f000 f8e7 	bl	800c6b0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c4e8:	2302      	movs	r3, #2
 800c4ea:	73fb      	strb	r3, [r7, #15]
      break;
 800c4ec:	e00a      	b.n	800c504 <USBH_HandleControl+0x2f0>

    default:
      break;
 800c4ee:	bf00      	nop
 800c4f0:	e008      	b.n	800c504 <USBH_HandleControl+0x2f0>
      break;
 800c4f2:	bf00      	nop
 800c4f4:	e006      	b.n	800c504 <USBH_HandleControl+0x2f0>
      break;
 800c4f6:	bf00      	nop
 800c4f8:	e004      	b.n	800c504 <USBH_HandleControl+0x2f0>
      break;
 800c4fa:	bf00      	nop
 800c4fc:	e002      	b.n	800c504 <USBH_HandleControl+0x2f0>
      break;
 800c4fe:	bf00      	nop
 800c500:	e000      	b.n	800c504 <USBH_HandleControl+0x2f0>
      break;
 800c502:	bf00      	nop
  }

  return status;
 800c504:	7bfb      	ldrb	r3, [r7, #15]
}
 800c506:	4618      	mov	r0, r3
 800c508:	3710      	adds	r7, #16
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	0800e7a8 	.word	0x0800e7a8
 800c514:	0800e884 	.word	0x0800e884

0800c518 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b088      	sub	sp, #32
 800c51c:	af04      	add	r7, sp, #16
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	4613      	mov	r3, r2
 800c524:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c526:	79f9      	ldrb	r1, [r7, #7]
 800c528:	2300      	movs	r3, #0
 800c52a:	9303      	str	r3, [sp, #12]
 800c52c:	2308      	movs	r3, #8
 800c52e:	9302      	str	r3, [sp, #8]
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	9301      	str	r3, [sp, #4]
 800c534:	2300      	movs	r3, #0
 800c536:	9300      	str	r3, [sp, #0]
 800c538:	2300      	movs	r3, #0
 800c53a:	2200      	movs	r2, #0
 800c53c:	68f8      	ldr	r0, [r7, #12]
 800c53e:	f000 fb14 	bl	800cb6a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c542:	2300      	movs	r3, #0
}
 800c544:	4618      	mov	r0, r3
 800c546:	3710      	adds	r7, #16
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b088      	sub	sp, #32
 800c550:	af04      	add	r7, sp, #16
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	4611      	mov	r1, r2
 800c558:	461a      	mov	r2, r3
 800c55a:	460b      	mov	r3, r1
 800c55c:	80fb      	strh	r3, [r7, #6]
 800c55e:	4613      	mov	r3, r2
 800c560:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d001      	beq.n	800c570 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c56c:	2300      	movs	r3, #0
 800c56e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c570:	7979      	ldrb	r1, [r7, #5]
 800c572:	7e3b      	ldrb	r3, [r7, #24]
 800c574:	9303      	str	r3, [sp, #12]
 800c576:	88fb      	ldrh	r3, [r7, #6]
 800c578:	9302      	str	r3, [sp, #8]
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	9301      	str	r3, [sp, #4]
 800c57e:	2301      	movs	r3, #1
 800c580:	9300      	str	r3, [sp, #0]
 800c582:	2300      	movs	r3, #0
 800c584:	2200      	movs	r2, #0
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f000 faef 	bl	800cb6a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c58c:	2300      	movs	r3, #0
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c596:	b580      	push	{r7, lr}
 800c598:	b088      	sub	sp, #32
 800c59a:	af04      	add	r7, sp, #16
 800c59c:	60f8      	str	r0, [r7, #12]
 800c59e:	60b9      	str	r1, [r7, #8]
 800c5a0:	4611      	mov	r1, r2
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	80fb      	strh	r3, [r7, #6]
 800c5a8:	4613      	mov	r3, r2
 800c5aa:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c5ac:	7979      	ldrb	r1, [r7, #5]
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	9303      	str	r3, [sp, #12]
 800c5b2:	88fb      	ldrh	r3, [r7, #6]
 800c5b4:	9302      	str	r3, [sp, #8]
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	9301      	str	r3, [sp, #4]
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	9300      	str	r3, [sp, #0]
 800c5be:	2300      	movs	r3, #0
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	f000 fad1 	bl	800cb6a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c5c8:	2300      	movs	r3, #0

}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b088      	sub	sp, #32
 800c5d6:	af04      	add	r7, sp, #16
 800c5d8:	60f8      	str	r0, [r7, #12]
 800c5da:	60b9      	str	r1, [r7, #8]
 800c5dc:	4611      	mov	r1, r2
 800c5de:	461a      	mov	r2, r3
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	71fb      	strb	r3, [r7, #7]
 800c5e4:	4613      	mov	r3, r2
 800c5e6:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c5e8:	79fb      	ldrb	r3, [r7, #7]
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	79b9      	ldrb	r1, [r7, #6]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	9203      	str	r2, [sp, #12]
 800c5f2:	9302      	str	r3, [sp, #8]
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	9301      	str	r3, [sp, #4]
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	9300      	str	r3, [sp, #0]
 800c5fc:	2303      	movs	r3, #3
 800c5fe:	2201      	movs	r2, #1
 800c600:	68f8      	ldr	r0, [r7, #12]
 800c602:	f000 fab2 	bl	800cb6a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800c606:	2300      	movs	r3, #0
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b086      	sub	sp, #24
 800c614:	af04      	add	r7, sp, #16
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	4608      	mov	r0, r1
 800c61a:	4611      	mov	r1, r2
 800c61c:	461a      	mov	r2, r3
 800c61e:	4603      	mov	r3, r0
 800c620:	70fb      	strb	r3, [r7, #3]
 800c622:	460b      	mov	r3, r1
 800c624:	70bb      	strb	r3, [r7, #2]
 800c626:	4613      	mov	r3, r2
 800c628:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c62a:	7878      	ldrb	r0, [r7, #1]
 800c62c:	78ba      	ldrb	r2, [r7, #2]
 800c62e:	78f9      	ldrb	r1, [r7, #3]
 800c630:	8b3b      	ldrh	r3, [r7, #24]
 800c632:	9302      	str	r3, [sp, #8]
 800c634:	7d3b      	ldrb	r3, [r7, #20]
 800c636:	9301      	str	r3, [sp, #4]
 800c638:	7c3b      	ldrb	r3, [r7, #16]
 800c63a:	9300      	str	r3, [sp, #0]
 800c63c:	4603      	mov	r3, r0
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 fa45 	bl	800cace <USBH_LL_OpenPipe>

  return USBH_OK;
 800c644:	2300      	movs	r3, #0
}
 800c646:	4618      	mov	r0, r3
 800c648:	3708      	adds	r7, #8
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c64e:	b580      	push	{r7, lr}
 800c650:	b082      	sub	sp, #8
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
 800c656:	460b      	mov	r3, r1
 800c658:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c65a:	78fb      	ldrb	r3, [r7, #3]
 800c65c:	4619      	mov	r1, r3
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 fa64 	bl	800cb2c <USBH_LL_ClosePipe>

  return USBH_OK;
 800c664:	2300      	movs	r3, #0
}
 800c666:	4618      	mov	r0, r3
 800c668:	3708      	adds	r7, #8
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}

0800c66e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c66e:	b580      	push	{r7, lr}
 800c670:	b084      	sub	sp, #16
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
 800c676:	460b      	mov	r3, r1
 800c678:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f000 f836 	bl	800c6ec <USBH_GetFreePipe>
 800c680:	4603      	mov	r3, r0
 800c682:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c684:	89fb      	ldrh	r3, [r7, #14]
 800c686:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d00a      	beq.n	800c6a4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c68e:	78fa      	ldrb	r2, [r7, #3]
 800c690:	89fb      	ldrh	r3, [r7, #14]
 800c692:	f003 030f 	and.w	r3, r3, #15
 800c696:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c69a:	6879      	ldr	r1, [r7, #4]
 800c69c:	33e0      	adds	r3, #224	@ 0xe0
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	440b      	add	r3, r1
 800c6a2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c6a4:	89fb      	ldrh	r3, [r7, #14]
 800c6a6:	b2db      	uxtb	r3, r3
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3710      	adds	r7, #16
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b083      	sub	sp, #12
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c6bc:	78fb      	ldrb	r3, [r7, #3]
 800c6be:	2b0f      	cmp	r3, #15
 800c6c0:	d80d      	bhi.n	800c6de <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c6c2:	78fb      	ldrb	r3, [r7, #3]
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	33e0      	adds	r3, #224	@ 0xe0
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	4413      	add	r3, r2
 800c6cc:	685a      	ldr	r2, [r3, #4]
 800c6ce:	78fb      	ldrb	r3, [r7, #3]
 800c6d0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c6d4:	6879      	ldr	r1, [r7, #4]
 800c6d6:	33e0      	adds	r3, #224	@ 0xe0
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	440b      	add	r3, r1
 800c6dc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c6de:	2300      	movs	r3, #0
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	370c      	adds	r7, #12
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr

0800c6ec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b085      	sub	sp, #20
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	73fb      	strb	r3, [r7, #15]
 800c6fc:	e00f      	b.n	800c71e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c6fe:	7bfb      	ldrb	r3, [r7, #15]
 800c700:	687a      	ldr	r2, [r7, #4]
 800c702:	33e0      	adds	r3, #224	@ 0xe0
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	4413      	add	r3, r2
 800c708:	685b      	ldr	r3, [r3, #4]
 800c70a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d102      	bne.n	800c718 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c712:	7bfb      	ldrb	r3, [r7, #15]
 800c714:	b29b      	uxth	r3, r3
 800c716:	e007      	b.n	800c728 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c718:	7bfb      	ldrb	r3, [r7, #15]
 800c71a:	3301      	adds	r3, #1
 800c71c:	73fb      	strb	r3, [r7, #15]
 800c71e:	7bfb      	ldrb	r3, [r7, #15]
 800c720:	2b0f      	cmp	r3, #15
 800c722:	d9ec      	bls.n	800c6fe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c724:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3714      	adds	r7, #20
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c738:	2201      	movs	r2, #1
 800c73a:	490e      	ldr	r1, [pc, #56]	@ (800c774 <MX_USB_HOST_Init+0x40>)
 800c73c:	480e      	ldr	r0, [pc, #56]	@ (800c778 <MX_USB_HOST_Init+0x44>)
 800c73e:	f7fe f93f 	bl	800a9c0 <USBH_Init>
 800c742:	4603      	mov	r3, r0
 800c744:	2b00      	cmp	r3, #0
 800c746:	d001      	beq.n	800c74c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c748:	f7f6 fd7a 	bl	8003240 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800c74c:	490b      	ldr	r1, [pc, #44]	@ (800c77c <MX_USB_HOST_Init+0x48>)
 800c74e:	480a      	ldr	r0, [pc, #40]	@ (800c778 <MX_USB_HOST_Init+0x44>)
 800c750:	f7fe f9f2 	bl	800ab38 <USBH_RegisterClass>
 800c754:	4603      	mov	r3, r0
 800c756:	2b00      	cmp	r3, #0
 800c758:	d001      	beq.n	800c75e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c75a:	f7f6 fd71 	bl	8003240 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c75e:	4806      	ldr	r0, [pc, #24]	@ (800c778 <MX_USB_HOST_Init+0x44>)
 800c760:	f7fe fad8 	bl	800ad14 <USBH_Start>
 800c764:	4603      	mov	r3, r0
 800c766:	2b00      	cmp	r3, #0
 800c768:	d001      	beq.n	800c76e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c76a:	f7f6 fd69 	bl	8003240 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c76e:	bf00      	nop
 800c770:	bd80      	pop	{r7, pc}
 800c772:	bf00      	nop
 800c774:	0800c795 	.word	0x0800c795
 800c778:	20011878 	.word	0x20011878
 800c77c:	2000021c 	.word	0x2000021c

0800c780 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c784:	4802      	ldr	r0, [pc, #8]	@ (800c790 <MX_USB_HOST_Process+0x10>)
 800c786:	f7fe fad5 	bl	800ad34 <USBH_Process>
}
 800c78a:	bf00      	nop
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	20011878 	.word	0x20011878

0800c794 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	460b      	mov	r3, r1
 800c79e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c7a0:	78fb      	ldrb	r3, [r7, #3]
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	2b04      	cmp	r3, #4
 800c7a6:	d819      	bhi.n	800c7dc <USBH_UserProcess+0x48>
 800c7a8:	a201      	add	r2, pc, #4	@ (adr r2, 800c7b0 <USBH_UserProcess+0x1c>)
 800c7aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ae:	bf00      	nop
 800c7b0:	0800c7dd 	.word	0x0800c7dd
 800c7b4:	0800c7cd 	.word	0x0800c7cd
 800c7b8:	0800c7dd 	.word	0x0800c7dd
 800c7bc:	0800c7d5 	.word	0x0800c7d5
 800c7c0:	0800c7c5 	.word	0x0800c7c5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c7c4:	4b09      	ldr	r3, [pc, #36]	@ (800c7ec <USBH_UserProcess+0x58>)
 800c7c6:	2203      	movs	r2, #3
 800c7c8:	701a      	strb	r2, [r3, #0]
  break;
 800c7ca:	e008      	b.n	800c7de <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c7cc:	4b07      	ldr	r3, [pc, #28]	@ (800c7ec <USBH_UserProcess+0x58>)
 800c7ce:	2202      	movs	r2, #2
 800c7d0:	701a      	strb	r2, [r3, #0]
  break;
 800c7d2:	e004      	b.n	800c7de <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c7d4:	4b05      	ldr	r3, [pc, #20]	@ (800c7ec <USBH_UserProcess+0x58>)
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	701a      	strb	r2, [r3, #0]
  break;
 800c7da:	e000      	b.n	800c7de <USBH_UserProcess+0x4a>

  default:
  break;
 800c7dc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c7de:	bf00      	nop
 800c7e0:	370c      	adds	r7, #12
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr
 800c7ea:	bf00      	nop
 800c7ec:	20011c50 	.word	0x20011c50

0800c7f0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b08a      	sub	sp, #40	@ 0x28
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c7f8:	f107 0314 	add.w	r3, r7, #20
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	601a      	str	r2, [r3, #0]
 800c800:	605a      	str	r2, [r3, #4]
 800c802:	609a      	str	r2, [r3, #8]
 800c804:	60da      	str	r2, [r3, #12]
 800c806:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c810:	d13a      	bne.n	800c888 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c812:	2300      	movs	r3, #0
 800c814:	613b      	str	r3, [r7, #16]
 800c816:	4b1e      	ldr	r3, [pc, #120]	@ (800c890 <HAL_HCD_MspInit+0xa0>)
 800c818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c81a:	4a1d      	ldr	r2, [pc, #116]	@ (800c890 <HAL_HCD_MspInit+0xa0>)
 800c81c:	f043 0301 	orr.w	r3, r3, #1
 800c820:	6313      	str	r3, [r2, #48]	@ 0x30
 800c822:	4b1b      	ldr	r3, [pc, #108]	@ (800c890 <HAL_HCD_MspInit+0xa0>)
 800c824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c826:	f003 0301 	and.w	r3, r3, #1
 800c82a:	613b      	str	r3, [r7, #16]
 800c82c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c82e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c834:	2302      	movs	r3, #2
 800c836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c838:	2300      	movs	r3, #0
 800c83a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c83c:	2303      	movs	r3, #3
 800c83e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c840:	230a      	movs	r3, #10
 800c842:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c844:	f107 0314 	add.w	r3, r7, #20
 800c848:	4619      	mov	r1, r3
 800c84a:	4812      	ldr	r0, [pc, #72]	@ (800c894 <HAL_HCD_MspInit+0xa4>)
 800c84c:	f7f7 fb28 	bl	8003ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c850:	4b0f      	ldr	r3, [pc, #60]	@ (800c890 <HAL_HCD_MspInit+0xa0>)
 800c852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c854:	4a0e      	ldr	r2, [pc, #56]	@ (800c890 <HAL_HCD_MspInit+0xa0>)
 800c856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c85a:	6353      	str	r3, [r2, #52]	@ 0x34
 800c85c:	2300      	movs	r3, #0
 800c85e:	60fb      	str	r3, [r7, #12]
 800c860:	4b0b      	ldr	r3, [pc, #44]	@ (800c890 <HAL_HCD_MspInit+0xa0>)
 800c862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c864:	4a0a      	ldr	r2, [pc, #40]	@ (800c890 <HAL_HCD_MspInit+0xa0>)
 800c866:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c86a:	6453      	str	r3, [r2, #68]	@ 0x44
 800c86c:	4b08      	ldr	r3, [pc, #32]	@ (800c890 <HAL_HCD_MspInit+0xa0>)
 800c86e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c870:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c874:	60fb      	str	r3, [r7, #12]
 800c876:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c878:	2200      	movs	r2, #0
 800c87a:	2100      	movs	r1, #0
 800c87c:	2043      	movs	r0, #67	@ 0x43
 800c87e:	f7f7 f8c4 	bl	8003a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c882:	2043      	movs	r0, #67	@ 0x43
 800c884:	f7f7 f8dd 	bl	8003a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c888:	bf00      	nop
 800c88a:	3728      	adds	r7, #40	@ 0x28
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	40023800 	.word	0x40023800
 800c894:	40020000 	.word	0x40020000

0800c898 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b082      	sub	sp, #8
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f7fe ff6d 	bl	800b786 <USBH_LL_IncTimer>
}
 800c8ac:	bf00      	nop
 800c8ae:	3708      	adds	r7, #8
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7fe ffa5 	bl	800b812 <USBH_LL_Connect>
}
 800c8c8:	bf00      	nop
 800c8ca:	3708      	adds	r7, #8
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fe ffae 	bl	800b840 <USBH_LL_Disconnect>
}
 800c8e4:	bf00      	nop
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b083      	sub	sp, #12
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	70fb      	strb	r3, [r7, #3]
 800c8f8:	4613      	mov	r3, r2
 800c8fa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c8fc:	bf00      	nop
 800c8fe:	370c      	adds	r7, #12
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr

0800c908 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c916:	4618      	mov	r0, r3
 800c918:	f7fe ff5f 	bl	800b7da <USBH_LL_PortEnabled>
}
 800c91c:	bf00      	nop
 800c91e:	3708      	adds	r7, #8
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c932:	4618      	mov	r0, r3
 800c934:	f7fe ff5f 	bl	800b7f6 <USBH_LL_PortDisabled>
}
 800c938:	bf00      	nop
 800c93a:	3708      	adds	r7, #8
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d12a      	bne.n	800c9a8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c952:	4a18      	ldr	r2, [pc, #96]	@ (800c9b4 <USBH_LL_Init+0x74>)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	4a15      	ldr	r2, [pc, #84]	@ (800c9b4 <USBH_LL_Init+0x74>)
 800c95e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c962:	4b14      	ldr	r3, [pc, #80]	@ (800c9b4 <USBH_LL_Init+0x74>)
 800c964:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c968:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c96a:	4b12      	ldr	r3, [pc, #72]	@ (800c9b4 <USBH_LL_Init+0x74>)
 800c96c:	2208      	movs	r2, #8
 800c96e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c970:	4b10      	ldr	r3, [pc, #64]	@ (800c9b4 <USBH_LL_Init+0x74>)
 800c972:	2201      	movs	r2, #1
 800c974:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c976:	4b0f      	ldr	r3, [pc, #60]	@ (800c9b4 <USBH_LL_Init+0x74>)
 800c978:	2200      	movs	r2, #0
 800c97a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c97c:	4b0d      	ldr	r3, [pc, #52]	@ (800c9b4 <USBH_LL_Init+0x74>)
 800c97e:	2202      	movs	r2, #2
 800c980:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c982:	4b0c      	ldr	r3, [pc, #48]	@ (800c9b4 <USBH_LL_Init+0x74>)
 800c984:	2200      	movs	r2, #0
 800c986:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c988:	480a      	ldr	r0, [pc, #40]	@ (800c9b4 <USBH_LL_Init+0x74>)
 800c98a:	f7f7 fc7f 	bl	800428c <HAL_HCD_Init>
 800c98e:	4603      	mov	r3, r0
 800c990:	2b00      	cmp	r3, #0
 800c992:	d001      	beq.n	800c998 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c994:	f7f6 fc54 	bl	8003240 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c998:	4806      	ldr	r0, [pc, #24]	@ (800c9b4 <USBH_LL_Init+0x74>)
 800c99a:	f7f8 f8df 	bl	8004b5c <HAL_HCD_GetCurrentFrame>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f7fe fee0 	bl	800b768 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c9a8:	2300      	movs	r3, #0
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3708      	adds	r7, #8
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	20011c54 	.word	0x20011c54

0800c9b8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b084      	sub	sp, #16
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f7f8 f84c 	bl	8004a6c <HAL_HCD_Start>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c9d8:	7bfb      	ldrb	r3, [r7, #15]
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f000 f95e 	bl	800cc9c <USBH_Get_USB_Status>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b084      	sub	sp, #16
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ca04:	4618      	mov	r0, r3
 800ca06:	f7f8 f854 	bl	8004ab2 <HAL_HCD_Stop>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ca0e:	7bfb      	ldrb	r3, [r7, #15]
 800ca10:	4618      	mov	r0, r3
 800ca12:	f000 f943 	bl	800cc9c <USBH_Get_USB_Status>
 800ca16:	4603      	mov	r3, r0
 800ca18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3710      	adds	r7, #16
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7f8 f89e 	bl	8004b78 <HAL_HCD_GetCurrentSpeed>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	2b02      	cmp	r3, #2
 800ca40:	d00c      	beq.n	800ca5c <USBH_LL_GetSpeed+0x38>
 800ca42:	2b02      	cmp	r3, #2
 800ca44:	d80d      	bhi.n	800ca62 <USBH_LL_GetSpeed+0x3e>
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d002      	beq.n	800ca50 <USBH_LL_GetSpeed+0x2c>
 800ca4a:	2b01      	cmp	r3, #1
 800ca4c:	d003      	beq.n	800ca56 <USBH_LL_GetSpeed+0x32>
 800ca4e:	e008      	b.n	800ca62 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ca50:	2300      	movs	r3, #0
 800ca52:	73fb      	strb	r3, [r7, #15]
    break;
 800ca54:	e008      	b.n	800ca68 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ca56:	2301      	movs	r3, #1
 800ca58:	73fb      	strb	r3, [r7, #15]
    break;
 800ca5a:	e005      	b.n	800ca68 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ca5c:	2302      	movs	r3, #2
 800ca5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ca60:	e002      	b.n	800ca68 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ca62:	2301      	movs	r3, #1
 800ca64:	73fb      	strb	r3, [r7, #15]
    break;
 800ca66:	bf00      	nop
  }
  return  speed;
 800ca68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3710      	adds	r7, #16
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}

0800ca72 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b084      	sub	sp, #16
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7f8 f82f 	bl	8004aec <HAL_HCD_ResetPort>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ca92:	7bfb      	ldrb	r3, [r7, #15]
 800ca94:	4618      	mov	r0, r3
 800ca96:	f000 f901 	bl	800cc9c <USBH_Get_USB_Status>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3710      	adds	r7, #16
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	460b      	mov	r3, r1
 800cab2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800caba:	78fa      	ldrb	r2, [r7, #3]
 800cabc:	4611      	mov	r1, r2
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7f8 f837 	bl	8004b32 <HAL_HCD_HC_GetXferCount>
 800cac4:	4603      	mov	r3, r0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3708      	adds	r7, #8
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cace:	b590      	push	{r4, r7, lr}
 800cad0:	b089      	sub	sp, #36	@ 0x24
 800cad2:	af04      	add	r7, sp, #16
 800cad4:	6078      	str	r0, [r7, #4]
 800cad6:	4608      	mov	r0, r1
 800cad8:	4611      	mov	r1, r2
 800cada:	461a      	mov	r2, r3
 800cadc:	4603      	mov	r3, r0
 800cade:	70fb      	strb	r3, [r7, #3]
 800cae0:	460b      	mov	r3, r1
 800cae2:	70bb      	strb	r3, [r7, #2]
 800cae4:	4613      	mov	r3, r2
 800cae6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cae8:	2300      	movs	r3, #0
 800caea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800caec:	2300      	movs	r3, #0
 800caee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800caf6:	787c      	ldrb	r4, [r7, #1]
 800caf8:	78ba      	ldrb	r2, [r7, #2]
 800cafa:	78f9      	ldrb	r1, [r7, #3]
 800cafc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cafe:	9302      	str	r3, [sp, #8]
 800cb00:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cb04:	9301      	str	r3, [sp, #4]
 800cb06:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cb0a:	9300      	str	r3, [sp, #0]
 800cb0c:	4623      	mov	r3, r4
 800cb0e:	f7f7 fc24 	bl	800435a <HAL_HCD_HC_Init>
 800cb12:	4603      	mov	r3, r0
 800cb14:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800cb16:	7bfb      	ldrb	r3, [r7, #15]
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f000 f8bf 	bl	800cc9c <USBH_Get_USB_Status>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb22:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3714      	adds	r7, #20
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd90      	pop	{r4, r7, pc}

0800cb2c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	460b      	mov	r3, r1
 800cb36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cb46:	78fa      	ldrb	r2, [r7, #3]
 800cb48:	4611      	mov	r1, r2
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7f7 fcbd 	bl	80044ca <HAL_HCD_HC_Halt>
 800cb50:	4603      	mov	r3, r0
 800cb52:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cb54:	7bfb      	ldrb	r3, [r7, #15]
 800cb56:	4618      	mov	r0, r3
 800cb58:	f000 f8a0 	bl	800cc9c <USBH_Get_USB_Status>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb60:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3710      	adds	r7, #16
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}

0800cb6a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cb6a:	b590      	push	{r4, r7, lr}
 800cb6c:	b089      	sub	sp, #36	@ 0x24
 800cb6e:	af04      	add	r7, sp, #16
 800cb70:	6078      	str	r0, [r7, #4]
 800cb72:	4608      	mov	r0, r1
 800cb74:	4611      	mov	r1, r2
 800cb76:	461a      	mov	r2, r3
 800cb78:	4603      	mov	r3, r0
 800cb7a:	70fb      	strb	r3, [r7, #3]
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	70bb      	strb	r3, [r7, #2]
 800cb80:	4613      	mov	r3, r2
 800cb82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb84:	2300      	movs	r3, #0
 800cb86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800cb92:	787c      	ldrb	r4, [r7, #1]
 800cb94:	78ba      	ldrb	r2, [r7, #2]
 800cb96:	78f9      	ldrb	r1, [r7, #3]
 800cb98:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800cb9c:	9303      	str	r3, [sp, #12]
 800cb9e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cba0:	9302      	str	r3, [sp, #8]
 800cba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba4:	9301      	str	r3, [sp, #4]
 800cba6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cbaa:	9300      	str	r3, [sp, #0]
 800cbac:	4623      	mov	r3, r4
 800cbae:	f7f7 fcaf 	bl	8004510 <HAL_HCD_HC_SubmitRequest>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800cbb6:	7bfb      	ldrb	r3, [r7, #15]
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f000 f86f 	bl	800cc9c <USBH_Get_USB_Status>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3714      	adds	r7, #20
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd90      	pop	{r4, r7, pc}

0800cbcc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cbde:	78fa      	ldrb	r2, [r7, #3]
 800cbe0:	4611      	mov	r1, r2
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7f7 ff90 	bl	8004b08 <HAL_HCD_HC_GetURBState>
 800cbe8:	4603      	mov	r3, r0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3708      	adds	r7, #8
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}

0800cbf2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cbf2:	b580      	push	{r7, lr}
 800cbf4:	b082      	sub	sp, #8
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
 800cbfa:	460b      	mov	r3, r1
 800cbfc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d103      	bne.n	800cc10 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800cc08:	78fb      	ldrb	r3, [r7, #3]
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f000 f872 	bl	800ccf4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cc10:	20c8      	movs	r0, #200	@ 0xc8
 800cc12:	f7f6 fdfb 	bl	800380c <HAL_Delay>
  return USBH_OK;
 800cc16:	2300      	movs	r3, #0
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3708      	adds	r7, #8
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b085      	sub	sp, #20
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	460b      	mov	r3, r1
 800cc2a:	70fb      	strb	r3, [r7, #3]
 800cc2c:	4613      	mov	r3, r2
 800cc2e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cc36:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cc38:	78fa      	ldrb	r2, [r7, #3]
 800cc3a:	68f9      	ldr	r1, [r7, #12]
 800cc3c:	4613      	mov	r3, r2
 800cc3e:	011b      	lsls	r3, r3, #4
 800cc40:	1a9b      	subs	r3, r3, r2
 800cc42:	009b      	lsls	r3, r3, #2
 800cc44:	440b      	add	r3, r1
 800cc46:	3317      	adds	r3, #23
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d00a      	beq.n	800cc64 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800cc4e:	78fa      	ldrb	r2, [r7, #3]
 800cc50:	68f9      	ldr	r1, [r7, #12]
 800cc52:	4613      	mov	r3, r2
 800cc54:	011b      	lsls	r3, r3, #4
 800cc56:	1a9b      	subs	r3, r3, r2
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	440b      	add	r3, r1
 800cc5c:	333c      	adds	r3, #60	@ 0x3c
 800cc5e:	78ba      	ldrb	r2, [r7, #2]
 800cc60:	701a      	strb	r2, [r3, #0]
 800cc62:	e009      	b.n	800cc78 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cc64:	78fa      	ldrb	r2, [r7, #3]
 800cc66:	68f9      	ldr	r1, [r7, #12]
 800cc68:	4613      	mov	r3, r2
 800cc6a:	011b      	lsls	r3, r3, #4
 800cc6c:	1a9b      	subs	r3, r3, r2
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	440b      	add	r3, r1
 800cc72:	333d      	adds	r3, #61	@ 0x3d
 800cc74:	78ba      	ldrb	r2, [r7, #2]
 800cc76:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cc78:	2300      	movs	r3, #0
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3714      	adds	r7, #20
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc84:	4770      	bx	lr

0800cc86 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cc86:	b580      	push	{r7, lr}
 800cc88:	b082      	sub	sp, #8
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f7f6 fdbc 	bl	800380c <HAL_Delay>
}
 800cc94:	bf00      	nop
 800cc96:	3708      	adds	r7, #8
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b085      	sub	sp, #20
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	4603      	mov	r3, r0
 800cca4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cca6:	2300      	movs	r3, #0
 800cca8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ccaa:	79fb      	ldrb	r3, [r7, #7]
 800ccac:	2b03      	cmp	r3, #3
 800ccae:	d817      	bhi.n	800cce0 <USBH_Get_USB_Status+0x44>
 800ccb0:	a201      	add	r2, pc, #4	@ (adr r2, 800ccb8 <USBH_Get_USB_Status+0x1c>)
 800ccb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb6:	bf00      	nop
 800ccb8:	0800ccc9 	.word	0x0800ccc9
 800ccbc:	0800cccf 	.word	0x0800cccf
 800ccc0:	0800ccd5 	.word	0x0800ccd5
 800ccc4:	0800ccdb 	.word	0x0800ccdb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	73fb      	strb	r3, [r7, #15]
    break;
 800cccc:	e00b      	b.n	800cce6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ccce:	2302      	movs	r3, #2
 800ccd0:	73fb      	strb	r3, [r7, #15]
    break;
 800ccd2:	e008      	b.n	800cce6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	73fb      	strb	r3, [r7, #15]
    break;
 800ccd8:	e005      	b.n	800cce6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ccda:	2302      	movs	r3, #2
 800ccdc:	73fb      	strb	r3, [r7, #15]
    break;
 800ccde:	e002      	b.n	800cce6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cce0:	2302      	movs	r3, #2
 800cce2:	73fb      	strb	r3, [r7, #15]
    break;
 800cce4:	bf00      	nop
  }
  return usb_status;
 800cce6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3714      	adds	r7, #20
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr

0800ccf4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ccfe:	79fb      	ldrb	r3, [r7, #7]
 800cd00:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800cd02:	79fb      	ldrb	r3, [r7, #7]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d102      	bne.n	800cd0e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	73fb      	strb	r3, [r7, #15]
 800cd0c:	e001      	b.n	800cd12 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,(GPIO_PinState)data);
 800cd12:	7bfb      	ldrb	r3, [r7, #15]
 800cd14:	461a      	mov	r2, r3
 800cd16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cd1a:	4803      	ldr	r0, [pc, #12]	@ (800cd28 <MX_DriverVbusFS+0x34>)
 800cd1c:	f7f7 fa84 	bl	8004228 <HAL_GPIO_WritePin>
}
 800cd20:	bf00      	nop
 800cd22:	3710      	adds	r7, #16
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	40020000 	.word	0x40020000

0800cd2c <malloc>:
 800cd2c:	4b02      	ldr	r3, [pc, #8]	@ (800cd38 <malloc+0xc>)
 800cd2e:	4601      	mov	r1, r0
 800cd30:	6818      	ldr	r0, [r3, #0]
 800cd32:	f000 b82d 	b.w	800cd90 <_malloc_r>
 800cd36:	bf00      	nop
 800cd38:	20000248 	.word	0x20000248

0800cd3c <free>:
 800cd3c:	4b02      	ldr	r3, [pc, #8]	@ (800cd48 <free+0xc>)
 800cd3e:	4601      	mov	r1, r0
 800cd40:	6818      	ldr	r0, [r3, #0]
 800cd42:	f000 bb97 	b.w	800d474 <_free_r>
 800cd46:	bf00      	nop
 800cd48:	20000248 	.word	0x20000248

0800cd4c <sbrk_aligned>:
 800cd4c:	b570      	push	{r4, r5, r6, lr}
 800cd4e:	4e0f      	ldr	r6, [pc, #60]	@ (800cd8c <sbrk_aligned+0x40>)
 800cd50:	460c      	mov	r4, r1
 800cd52:	6831      	ldr	r1, [r6, #0]
 800cd54:	4605      	mov	r5, r0
 800cd56:	b911      	cbnz	r1, 800cd5e <sbrk_aligned+0x12>
 800cd58:	f000 fb34 	bl	800d3c4 <_sbrk_r>
 800cd5c:	6030      	str	r0, [r6, #0]
 800cd5e:	4621      	mov	r1, r4
 800cd60:	4628      	mov	r0, r5
 800cd62:	f000 fb2f 	bl	800d3c4 <_sbrk_r>
 800cd66:	1c43      	adds	r3, r0, #1
 800cd68:	d103      	bne.n	800cd72 <sbrk_aligned+0x26>
 800cd6a:	f04f 34ff 	mov.w	r4, #4294967295
 800cd6e:	4620      	mov	r0, r4
 800cd70:	bd70      	pop	{r4, r5, r6, pc}
 800cd72:	1cc4      	adds	r4, r0, #3
 800cd74:	f024 0403 	bic.w	r4, r4, #3
 800cd78:	42a0      	cmp	r0, r4
 800cd7a:	d0f8      	beq.n	800cd6e <sbrk_aligned+0x22>
 800cd7c:	1a21      	subs	r1, r4, r0
 800cd7e:	4628      	mov	r0, r5
 800cd80:	f000 fb20 	bl	800d3c4 <_sbrk_r>
 800cd84:	3001      	adds	r0, #1
 800cd86:	d1f2      	bne.n	800cd6e <sbrk_aligned+0x22>
 800cd88:	e7ef      	b.n	800cd6a <sbrk_aligned+0x1e>
 800cd8a:	bf00      	nop
 800cd8c:	20012034 	.word	0x20012034

0800cd90 <_malloc_r>:
 800cd90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd94:	1ccd      	adds	r5, r1, #3
 800cd96:	f025 0503 	bic.w	r5, r5, #3
 800cd9a:	3508      	adds	r5, #8
 800cd9c:	2d0c      	cmp	r5, #12
 800cd9e:	bf38      	it	cc
 800cda0:	250c      	movcc	r5, #12
 800cda2:	2d00      	cmp	r5, #0
 800cda4:	4606      	mov	r6, r0
 800cda6:	db01      	blt.n	800cdac <_malloc_r+0x1c>
 800cda8:	42a9      	cmp	r1, r5
 800cdaa:	d904      	bls.n	800cdb6 <_malloc_r+0x26>
 800cdac:	230c      	movs	r3, #12
 800cdae:	6033      	str	r3, [r6, #0]
 800cdb0:	2000      	movs	r0, #0
 800cdb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ce8c <_malloc_r+0xfc>
 800cdba:	f000 f869 	bl	800ce90 <__malloc_lock>
 800cdbe:	f8d8 3000 	ldr.w	r3, [r8]
 800cdc2:	461c      	mov	r4, r3
 800cdc4:	bb44      	cbnz	r4, 800ce18 <_malloc_r+0x88>
 800cdc6:	4629      	mov	r1, r5
 800cdc8:	4630      	mov	r0, r6
 800cdca:	f7ff ffbf 	bl	800cd4c <sbrk_aligned>
 800cdce:	1c43      	adds	r3, r0, #1
 800cdd0:	4604      	mov	r4, r0
 800cdd2:	d158      	bne.n	800ce86 <_malloc_r+0xf6>
 800cdd4:	f8d8 4000 	ldr.w	r4, [r8]
 800cdd8:	4627      	mov	r7, r4
 800cdda:	2f00      	cmp	r7, #0
 800cddc:	d143      	bne.n	800ce66 <_malloc_r+0xd6>
 800cdde:	2c00      	cmp	r4, #0
 800cde0:	d04b      	beq.n	800ce7a <_malloc_r+0xea>
 800cde2:	6823      	ldr	r3, [r4, #0]
 800cde4:	4639      	mov	r1, r7
 800cde6:	4630      	mov	r0, r6
 800cde8:	eb04 0903 	add.w	r9, r4, r3
 800cdec:	f000 faea 	bl	800d3c4 <_sbrk_r>
 800cdf0:	4581      	cmp	r9, r0
 800cdf2:	d142      	bne.n	800ce7a <_malloc_r+0xea>
 800cdf4:	6821      	ldr	r1, [r4, #0]
 800cdf6:	1a6d      	subs	r5, r5, r1
 800cdf8:	4629      	mov	r1, r5
 800cdfa:	4630      	mov	r0, r6
 800cdfc:	f7ff ffa6 	bl	800cd4c <sbrk_aligned>
 800ce00:	3001      	adds	r0, #1
 800ce02:	d03a      	beq.n	800ce7a <_malloc_r+0xea>
 800ce04:	6823      	ldr	r3, [r4, #0]
 800ce06:	442b      	add	r3, r5
 800ce08:	6023      	str	r3, [r4, #0]
 800ce0a:	f8d8 3000 	ldr.w	r3, [r8]
 800ce0e:	685a      	ldr	r2, [r3, #4]
 800ce10:	bb62      	cbnz	r2, 800ce6c <_malloc_r+0xdc>
 800ce12:	f8c8 7000 	str.w	r7, [r8]
 800ce16:	e00f      	b.n	800ce38 <_malloc_r+0xa8>
 800ce18:	6822      	ldr	r2, [r4, #0]
 800ce1a:	1b52      	subs	r2, r2, r5
 800ce1c:	d420      	bmi.n	800ce60 <_malloc_r+0xd0>
 800ce1e:	2a0b      	cmp	r2, #11
 800ce20:	d917      	bls.n	800ce52 <_malloc_r+0xc2>
 800ce22:	1961      	adds	r1, r4, r5
 800ce24:	42a3      	cmp	r3, r4
 800ce26:	6025      	str	r5, [r4, #0]
 800ce28:	bf18      	it	ne
 800ce2a:	6059      	strne	r1, [r3, #4]
 800ce2c:	6863      	ldr	r3, [r4, #4]
 800ce2e:	bf08      	it	eq
 800ce30:	f8c8 1000 	streq.w	r1, [r8]
 800ce34:	5162      	str	r2, [r4, r5]
 800ce36:	604b      	str	r3, [r1, #4]
 800ce38:	4630      	mov	r0, r6
 800ce3a:	f000 f82f 	bl	800ce9c <__malloc_unlock>
 800ce3e:	f104 000b 	add.w	r0, r4, #11
 800ce42:	1d23      	adds	r3, r4, #4
 800ce44:	f020 0007 	bic.w	r0, r0, #7
 800ce48:	1ac2      	subs	r2, r0, r3
 800ce4a:	bf1c      	itt	ne
 800ce4c:	1a1b      	subne	r3, r3, r0
 800ce4e:	50a3      	strne	r3, [r4, r2]
 800ce50:	e7af      	b.n	800cdb2 <_malloc_r+0x22>
 800ce52:	6862      	ldr	r2, [r4, #4]
 800ce54:	42a3      	cmp	r3, r4
 800ce56:	bf0c      	ite	eq
 800ce58:	f8c8 2000 	streq.w	r2, [r8]
 800ce5c:	605a      	strne	r2, [r3, #4]
 800ce5e:	e7eb      	b.n	800ce38 <_malloc_r+0xa8>
 800ce60:	4623      	mov	r3, r4
 800ce62:	6864      	ldr	r4, [r4, #4]
 800ce64:	e7ae      	b.n	800cdc4 <_malloc_r+0x34>
 800ce66:	463c      	mov	r4, r7
 800ce68:	687f      	ldr	r7, [r7, #4]
 800ce6a:	e7b6      	b.n	800cdda <_malloc_r+0x4a>
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	685b      	ldr	r3, [r3, #4]
 800ce70:	42a3      	cmp	r3, r4
 800ce72:	d1fb      	bne.n	800ce6c <_malloc_r+0xdc>
 800ce74:	2300      	movs	r3, #0
 800ce76:	6053      	str	r3, [r2, #4]
 800ce78:	e7de      	b.n	800ce38 <_malloc_r+0xa8>
 800ce7a:	230c      	movs	r3, #12
 800ce7c:	6033      	str	r3, [r6, #0]
 800ce7e:	4630      	mov	r0, r6
 800ce80:	f000 f80c 	bl	800ce9c <__malloc_unlock>
 800ce84:	e794      	b.n	800cdb0 <_malloc_r+0x20>
 800ce86:	6005      	str	r5, [r0, #0]
 800ce88:	e7d6      	b.n	800ce38 <_malloc_r+0xa8>
 800ce8a:	bf00      	nop
 800ce8c:	20012038 	.word	0x20012038

0800ce90 <__malloc_lock>:
 800ce90:	4801      	ldr	r0, [pc, #4]	@ (800ce98 <__malloc_lock+0x8>)
 800ce92:	f000 bae4 	b.w	800d45e <__retarget_lock_acquire_recursive>
 800ce96:	bf00      	nop
 800ce98:	2001217c 	.word	0x2001217c

0800ce9c <__malloc_unlock>:
 800ce9c:	4801      	ldr	r0, [pc, #4]	@ (800cea4 <__malloc_unlock+0x8>)
 800ce9e:	f000 badf 	b.w	800d460 <__retarget_lock_release_recursive>
 800cea2:	bf00      	nop
 800cea4:	2001217c 	.word	0x2001217c

0800cea8 <std>:
 800cea8:	2300      	movs	r3, #0
 800ceaa:	b510      	push	{r4, lr}
 800ceac:	4604      	mov	r4, r0
 800ceae:	e9c0 3300 	strd	r3, r3, [r0]
 800ceb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ceb6:	6083      	str	r3, [r0, #8]
 800ceb8:	8181      	strh	r1, [r0, #12]
 800ceba:	6643      	str	r3, [r0, #100]	@ 0x64
 800cebc:	81c2      	strh	r2, [r0, #14]
 800cebe:	6183      	str	r3, [r0, #24]
 800cec0:	4619      	mov	r1, r3
 800cec2:	2208      	movs	r2, #8
 800cec4:	305c      	adds	r0, #92	@ 0x5c
 800cec6:	f000 fa41 	bl	800d34c <memset>
 800ceca:	4b0d      	ldr	r3, [pc, #52]	@ (800cf00 <std+0x58>)
 800cecc:	6263      	str	r3, [r4, #36]	@ 0x24
 800cece:	4b0d      	ldr	r3, [pc, #52]	@ (800cf04 <std+0x5c>)
 800ced0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ced2:	4b0d      	ldr	r3, [pc, #52]	@ (800cf08 <std+0x60>)
 800ced4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ced6:	4b0d      	ldr	r3, [pc, #52]	@ (800cf0c <std+0x64>)
 800ced8:	6323      	str	r3, [r4, #48]	@ 0x30
 800ceda:	4b0d      	ldr	r3, [pc, #52]	@ (800cf10 <std+0x68>)
 800cedc:	6224      	str	r4, [r4, #32]
 800cede:	429c      	cmp	r4, r3
 800cee0:	d006      	beq.n	800cef0 <std+0x48>
 800cee2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cee6:	4294      	cmp	r4, r2
 800cee8:	d002      	beq.n	800cef0 <std+0x48>
 800ceea:	33d0      	adds	r3, #208	@ 0xd0
 800ceec:	429c      	cmp	r4, r3
 800ceee:	d105      	bne.n	800cefc <std+0x54>
 800cef0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cef8:	f000 bab0 	b.w	800d45c <__retarget_lock_init_recursive>
 800cefc:	bd10      	pop	{r4, pc}
 800cefe:	bf00      	nop
 800cf00:	0800d15d 	.word	0x0800d15d
 800cf04:	0800d17f 	.word	0x0800d17f
 800cf08:	0800d1b7 	.word	0x0800d1b7
 800cf0c:	0800d1db 	.word	0x0800d1db
 800cf10:	2001203c 	.word	0x2001203c

0800cf14 <stdio_exit_handler>:
 800cf14:	4a02      	ldr	r2, [pc, #8]	@ (800cf20 <stdio_exit_handler+0xc>)
 800cf16:	4903      	ldr	r1, [pc, #12]	@ (800cf24 <stdio_exit_handler+0x10>)
 800cf18:	4803      	ldr	r0, [pc, #12]	@ (800cf28 <stdio_exit_handler+0x14>)
 800cf1a:	f000 b869 	b.w	800cff0 <_fwalk_sglue>
 800cf1e:	bf00      	nop
 800cf20:	2000023c 	.word	0x2000023c
 800cf24:	0800de61 	.word	0x0800de61
 800cf28:	2000024c 	.word	0x2000024c

0800cf2c <cleanup_stdio>:
 800cf2c:	6841      	ldr	r1, [r0, #4]
 800cf2e:	4b0c      	ldr	r3, [pc, #48]	@ (800cf60 <cleanup_stdio+0x34>)
 800cf30:	4299      	cmp	r1, r3
 800cf32:	b510      	push	{r4, lr}
 800cf34:	4604      	mov	r4, r0
 800cf36:	d001      	beq.n	800cf3c <cleanup_stdio+0x10>
 800cf38:	f000 ff92 	bl	800de60 <_fflush_r>
 800cf3c:	68a1      	ldr	r1, [r4, #8]
 800cf3e:	4b09      	ldr	r3, [pc, #36]	@ (800cf64 <cleanup_stdio+0x38>)
 800cf40:	4299      	cmp	r1, r3
 800cf42:	d002      	beq.n	800cf4a <cleanup_stdio+0x1e>
 800cf44:	4620      	mov	r0, r4
 800cf46:	f000 ff8b 	bl	800de60 <_fflush_r>
 800cf4a:	68e1      	ldr	r1, [r4, #12]
 800cf4c:	4b06      	ldr	r3, [pc, #24]	@ (800cf68 <cleanup_stdio+0x3c>)
 800cf4e:	4299      	cmp	r1, r3
 800cf50:	d004      	beq.n	800cf5c <cleanup_stdio+0x30>
 800cf52:	4620      	mov	r0, r4
 800cf54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf58:	f000 bf82 	b.w	800de60 <_fflush_r>
 800cf5c:	bd10      	pop	{r4, pc}
 800cf5e:	bf00      	nop
 800cf60:	2001203c 	.word	0x2001203c
 800cf64:	200120a4 	.word	0x200120a4
 800cf68:	2001210c 	.word	0x2001210c

0800cf6c <global_stdio_init.part.0>:
 800cf6c:	b510      	push	{r4, lr}
 800cf6e:	4b0b      	ldr	r3, [pc, #44]	@ (800cf9c <global_stdio_init.part.0+0x30>)
 800cf70:	4c0b      	ldr	r4, [pc, #44]	@ (800cfa0 <global_stdio_init.part.0+0x34>)
 800cf72:	4a0c      	ldr	r2, [pc, #48]	@ (800cfa4 <global_stdio_init.part.0+0x38>)
 800cf74:	601a      	str	r2, [r3, #0]
 800cf76:	4620      	mov	r0, r4
 800cf78:	2200      	movs	r2, #0
 800cf7a:	2104      	movs	r1, #4
 800cf7c:	f7ff ff94 	bl	800cea8 <std>
 800cf80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf84:	2201      	movs	r2, #1
 800cf86:	2109      	movs	r1, #9
 800cf88:	f7ff ff8e 	bl	800cea8 <std>
 800cf8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf90:	2202      	movs	r2, #2
 800cf92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf96:	2112      	movs	r1, #18
 800cf98:	f7ff bf86 	b.w	800cea8 <std>
 800cf9c:	20012174 	.word	0x20012174
 800cfa0:	2001203c 	.word	0x2001203c
 800cfa4:	0800cf15 	.word	0x0800cf15

0800cfa8 <__sfp_lock_acquire>:
 800cfa8:	4801      	ldr	r0, [pc, #4]	@ (800cfb0 <__sfp_lock_acquire+0x8>)
 800cfaa:	f000 ba58 	b.w	800d45e <__retarget_lock_acquire_recursive>
 800cfae:	bf00      	nop
 800cfb0:	2001217d 	.word	0x2001217d

0800cfb4 <__sfp_lock_release>:
 800cfb4:	4801      	ldr	r0, [pc, #4]	@ (800cfbc <__sfp_lock_release+0x8>)
 800cfb6:	f000 ba53 	b.w	800d460 <__retarget_lock_release_recursive>
 800cfba:	bf00      	nop
 800cfbc:	2001217d 	.word	0x2001217d

0800cfc0 <__sinit>:
 800cfc0:	b510      	push	{r4, lr}
 800cfc2:	4604      	mov	r4, r0
 800cfc4:	f7ff fff0 	bl	800cfa8 <__sfp_lock_acquire>
 800cfc8:	6a23      	ldr	r3, [r4, #32]
 800cfca:	b11b      	cbz	r3, 800cfd4 <__sinit+0x14>
 800cfcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfd0:	f7ff bff0 	b.w	800cfb4 <__sfp_lock_release>
 800cfd4:	4b04      	ldr	r3, [pc, #16]	@ (800cfe8 <__sinit+0x28>)
 800cfd6:	6223      	str	r3, [r4, #32]
 800cfd8:	4b04      	ldr	r3, [pc, #16]	@ (800cfec <__sinit+0x2c>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d1f5      	bne.n	800cfcc <__sinit+0xc>
 800cfe0:	f7ff ffc4 	bl	800cf6c <global_stdio_init.part.0>
 800cfe4:	e7f2      	b.n	800cfcc <__sinit+0xc>
 800cfe6:	bf00      	nop
 800cfe8:	0800cf2d 	.word	0x0800cf2d
 800cfec:	20012174 	.word	0x20012174

0800cff0 <_fwalk_sglue>:
 800cff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cff4:	4607      	mov	r7, r0
 800cff6:	4688      	mov	r8, r1
 800cff8:	4614      	mov	r4, r2
 800cffa:	2600      	movs	r6, #0
 800cffc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d000:	f1b9 0901 	subs.w	r9, r9, #1
 800d004:	d505      	bpl.n	800d012 <_fwalk_sglue+0x22>
 800d006:	6824      	ldr	r4, [r4, #0]
 800d008:	2c00      	cmp	r4, #0
 800d00a:	d1f7      	bne.n	800cffc <_fwalk_sglue+0xc>
 800d00c:	4630      	mov	r0, r6
 800d00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d012:	89ab      	ldrh	r3, [r5, #12]
 800d014:	2b01      	cmp	r3, #1
 800d016:	d907      	bls.n	800d028 <_fwalk_sglue+0x38>
 800d018:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d01c:	3301      	adds	r3, #1
 800d01e:	d003      	beq.n	800d028 <_fwalk_sglue+0x38>
 800d020:	4629      	mov	r1, r5
 800d022:	4638      	mov	r0, r7
 800d024:	47c0      	blx	r8
 800d026:	4306      	orrs	r6, r0
 800d028:	3568      	adds	r5, #104	@ 0x68
 800d02a:	e7e9      	b.n	800d000 <_fwalk_sglue+0x10>

0800d02c <iprintf>:
 800d02c:	b40f      	push	{r0, r1, r2, r3}
 800d02e:	b507      	push	{r0, r1, r2, lr}
 800d030:	4906      	ldr	r1, [pc, #24]	@ (800d04c <iprintf+0x20>)
 800d032:	ab04      	add	r3, sp, #16
 800d034:	6808      	ldr	r0, [r1, #0]
 800d036:	f853 2b04 	ldr.w	r2, [r3], #4
 800d03a:	6881      	ldr	r1, [r0, #8]
 800d03c:	9301      	str	r3, [sp, #4]
 800d03e:	f000 fbe5 	bl	800d80c <_vfiprintf_r>
 800d042:	b003      	add	sp, #12
 800d044:	f85d eb04 	ldr.w	lr, [sp], #4
 800d048:	b004      	add	sp, #16
 800d04a:	4770      	bx	lr
 800d04c:	20000248 	.word	0x20000248

0800d050 <putchar>:
 800d050:	4b02      	ldr	r3, [pc, #8]	@ (800d05c <putchar+0xc>)
 800d052:	4601      	mov	r1, r0
 800d054:	6818      	ldr	r0, [r3, #0]
 800d056:	6882      	ldr	r2, [r0, #8]
 800d058:	f000 bf8c 	b.w	800df74 <_putc_r>
 800d05c:	20000248 	.word	0x20000248

0800d060 <_puts_r>:
 800d060:	6a03      	ldr	r3, [r0, #32]
 800d062:	b570      	push	{r4, r5, r6, lr}
 800d064:	6884      	ldr	r4, [r0, #8]
 800d066:	4605      	mov	r5, r0
 800d068:	460e      	mov	r6, r1
 800d06a:	b90b      	cbnz	r3, 800d070 <_puts_r+0x10>
 800d06c:	f7ff ffa8 	bl	800cfc0 <__sinit>
 800d070:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d072:	07db      	lsls	r3, r3, #31
 800d074:	d405      	bmi.n	800d082 <_puts_r+0x22>
 800d076:	89a3      	ldrh	r3, [r4, #12]
 800d078:	0598      	lsls	r0, r3, #22
 800d07a:	d402      	bmi.n	800d082 <_puts_r+0x22>
 800d07c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d07e:	f000 f9ee 	bl	800d45e <__retarget_lock_acquire_recursive>
 800d082:	89a3      	ldrh	r3, [r4, #12]
 800d084:	0719      	lsls	r1, r3, #28
 800d086:	d502      	bpl.n	800d08e <_puts_r+0x2e>
 800d088:	6923      	ldr	r3, [r4, #16]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d135      	bne.n	800d0fa <_puts_r+0x9a>
 800d08e:	4621      	mov	r1, r4
 800d090:	4628      	mov	r0, r5
 800d092:	f000 f905 	bl	800d2a0 <__swsetup_r>
 800d096:	b380      	cbz	r0, 800d0fa <_puts_r+0x9a>
 800d098:	f04f 35ff 	mov.w	r5, #4294967295
 800d09c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d09e:	07da      	lsls	r2, r3, #31
 800d0a0:	d405      	bmi.n	800d0ae <_puts_r+0x4e>
 800d0a2:	89a3      	ldrh	r3, [r4, #12]
 800d0a4:	059b      	lsls	r3, r3, #22
 800d0a6:	d402      	bmi.n	800d0ae <_puts_r+0x4e>
 800d0a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0aa:	f000 f9d9 	bl	800d460 <__retarget_lock_release_recursive>
 800d0ae:	4628      	mov	r0, r5
 800d0b0:	bd70      	pop	{r4, r5, r6, pc}
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	da04      	bge.n	800d0c0 <_puts_r+0x60>
 800d0b6:	69a2      	ldr	r2, [r4, #24]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	dc17      	bgt.n	800d0ec <_puts_r+0x8c>
 800d0bc:	290a      	cmp	r1, #10
 800d0be:	d015      	beq.n	800d0ec <_puts_r+0x8c>
 800d0c0:	6823      	ldr	r3, [r4, #0]
 800d0c2:	1c5a      	adds	r2, r3, #1
 800d0c4:	6022      	str	r2, [r4, #0]
 800d0c6:	7019      	strb	r1, [r3, #0]
 800d0c8:	68a3      	ldr	r3, [r4, #8]
 800d0ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d0ce:	3b01      	subs	r3, #1
 800d0d0:	60a3      	str	r3, [r4, #8]
 800d0d2:	2900      	cmp	r1, #0
 800d0d4:	d1ed      	bne.n	800d0b2 <_puts_r+0x52>
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	da11      	bge.n	800d0fe <_puts_r+0x9e>
 800d0da:	4622      	mov	r2, r4
 800d0dc:	210a      	movs	r1, #10
 800d0de:	4628      	mov	r0, r5
 800d0e0:	f000 f8a0 	bl	800d224 <__swbuf_r>
 800d0e4:	3001      	adds	r0, #1
 800d0e6:	d0d7      	beq.n	800d098 <_puts_r+0x38>
 800d0e8:	250a      	movs	r5, #10
 800d0ea:	e7d7      	b.n	800d09c <_puts_r+0x3c>
 800d0ec:	4622      	mov	r2, r4
 800d0ee:	4628      	mov	r0, r5
 800d0f0:	f000 f898 	bl	800d224 <__swbuf_r>
 800d0f4:	3001      	adds	r0, #1
 800d0f6:	d1e7      	bne.n	800d0c8 <_puts_r+0x68>
 800d0f8:	e7ce      	b.n	800d098 <_puts_r+0x38>
 800d0fa:	3e01      	subs	r6, #1
 800d0fc:	e7e4      	b.n	800d0c8 <_puts_r+0x68>
 800d0fe:	6823      	ldr	r3, [r4, #0]
 800d100:	1c5a      	adds	r2, r3, #1
 800d102:	6022      	str	r2, [r4, #0]
 800d104:	220a      	movs	r2, #10
 800d106:	701a      	strb	r2, [r3, #0]
 800d108:	e7ee      	b.n	800d0e8 <_puts_r+0x88>
	...

0800d10c <puts>:
 800d10c:	4b02      	ldr	r3, [pc, #8]	@ (800d118 <puts+0xc>)
 800d10e:	4601      	mov	r1, r0
 800d110:	6818      	ldr	r0, [r3, #0]
 800d112:	f7ff bfa5 	b.w	800d060 <_puts_r>
 800d116:	bf00      	nop
 800d118:	20000248 	.word	0x20000248

0800d11c <siprintf>:
 800d11c:	b40e      	push	{r1, r2, r3}
 800d11e:	b500      	push	{lr}
 800d120:	b09c      	sub	sp, #112	@ 0x70
 800d122:	ab1d      	add	r3, sp, #116	@ 0x74
 800d124:	9002      	str	r0, [sp, #8]
 800d126:	9006      	str	r0, [sp, #24]
 800d128:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d12c:	4809      	ldr	r0, [pc, #36]	@ (800d154 <siprintf+0x38>)
 800d12e:	9107      	str	r1, [sp, #28]
 800d130:	9104      	str	r1, [sp, #16]
 800d132:	4909      	ldr	r1, [pc, #36]	@ (800d158 <siprintf+0x3c>)
 800d134:	f853 2b04 	ldr.w	r2, [r3], #4
 800d138:	9105      	str	r1, [sp, #20]
 800d13a:	6800      	ldr	r0, [r0, #0]
 800d13c:	9301      	str	r3, [sp, #4]
 800d13e:	a902      	add	r1, sp, #8
 800d140:	f000 fa3e 	bl	800d5c0 <_svfiprintf_r>
 800d144:	9b02      	ldr	r3, [sp, #8]
 800d146:	2200      	movs	r2, #0
 800d148:	701a      	strb	r2, [r3, #0]
 800d14a:	b01c      	add	sp, #112	@ 0x70
 800d14c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d150:	b003      	add	sp, #12
 800d152:	4770      	bx	lr
 800d154:	20000248 	.word	0x20000248
 800d158:	ffff0208 	.word	0xffff0208

0800d15c <__sread>:
 800d15c:	b510      	push	{r4, lr}
 800d15e:	460c      	mov	r4, r1
 800d160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d164:	f000 f91c 	bl	800d3a0 <_read_r>
 800d168:	2800      	cmp	r0, #0
 800d16a:	bfab      	itete	ge
 800d16c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d16e:	89a3      	ldrhlt	r3, [r4, #12]
 800d170:	181b      	addge	r3, r3, r0
 800d172:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d176:	bfac      	ite	ge
 800d178:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d17a:	81a3      	strhlt	r3, [r4, #12]
 800d17c:	bd10      	pop	{r4, pc}

0800d17e <__swrite>:
 800d17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d182:	461f      	mov	r7, r3
 800d184:	898b      	ldrh	r3, [r1, #12]
 800d186:	05db      	lsls	r3, r3, #23
 800d188:	4605      	mov	r5, r0
 800d18a:	460c      	mov	r4, r1
 800d18c:	4616      	mov	r6, r2
 800d18e:	d505      	bpl.n	800d19c <__swrite+0x1e>
 800d190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d194:	2302      	movs	r3, #2
 800d196:	2200      	movs	r2, #0
 800d198:	f000 f8f0 	bl	800d37c <_lseek_r>
 800d19c:	89a3      	ldrh	r3, [r4, #12]
 800d19e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d1a6:	81a3      	strh	r3, [r4, #12]
 800d1a8:	4632      	mov	r2, r6
 800d1aa:	463b      	mov	r3, r7
 800d1ac:	4628      	mov	r0, r5
 800d1ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1b2:	f000 b917 	b.w	800d3e4 <_write_r>

0800d1b6 <__sseek>:
 800d1b6:	b510      	push	{r4, lr}
 800d1b8:	460c      	mov	r4, r1
 800d1ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1be:	f000 f8dd 	bl	800d37c <_lseek_r>
 800d1c2:	1c43      	adds	r3, r0, #1
 800d1c4:	89a3      	ldrh	r3, [r4, #12]
 800d1c6:	bf15      	itete	ne
 800d1c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d1ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d1ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d1d2:	81a3      	strheq	r3, [r4, #12]
 800d1d4:	bf18      	it	ne
 800d1d6:	81a3      	strhne	r3, [r4, #12]
 800d1d8:	bd10      	pop	{r4, pc}

0800d1da <__sclose>:
 800d1da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1de:	f000 b8bd 	b.w	800d35c <_close_r>
	...

0800d1e4 <_vsiprintf_r>:
 800d1e4:	b500      	push	{lr}
 800d1e6:	b09b      	sub	sp, #108	@ 0x6c
 800d1e8:	9100      	str	r1, [sp, #0]
 800d1ea:	9104      	str	r1, [sp, #16]
 800d1ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d1f0:	9105      	str	r1, [sp, #20]
 800d1f2:	9102      	str	r1, [sp, #8]
 800d1f4:	4905      	ldr	r1, [pc, #20]	@ (800d20c <_vsiprintf_r+0x28>)
 800d1f6:	9103      	str	r1, [sp, #12]
 800d1f8:	4669      	mov	r1, sp
 800d1fa:	f000 f9e1 	bl	800d5c0 <_svfiprintf_r>
 800d1fe:	9b00      	ldr	r3, [sp, #0]
 800d200:	2200      	movs	r2, #0
 800d202:	701a      	strb	r2, [r3, #0]
 800d204:	b01b      	add	sp, #108	@ 0x6c
 800d206:	f85d fb04 	ldr.w	pc, [sp], #4
 800d20a:	bf00      	nop
 800d20c:	ffff0208 	.word	0xffff0208

0800d210 <vsiprintf>:
 800d210:	4613      	mov	r3, r2
 800d212:	460a      	mov	r2, r1
 800d214:	4601      	mov	r1, r0
 800d216:	4802      	ldr	r0, [pc, #8]	@ (800d220 <vsiprintf+0x10>)
 800d218:	6800      	ldr	r0, [r0, #0]
 800d21a:	f7ff bfe3 	b.w	800d1e4 <_vsiprintf_r>
 800d21e:	bf00      	nop
 800d220:	20000248 	.word	0x20000248

0800d224 <__swbuf_r>:
 800d224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d226:	460e      	mov	r6, r1
 800d228:	4614      	mov	r4, r2
 800d22a:	4605      	mov	r5, r0
 800d22c:	b118      	cbz	r0, 800d236 <__swbuf_r+0x12>
 800d22e:	6a03      	ldr	r3, [r0, #32]
 800d230:	b90b      	cbnz	r3, 800d236 <__swbuf_r+0x12>
 800d232:	f7ff fec5 	bl	800cfc0 <__sinit>
 800d236:	69a3      	ldr	r3, [r4, #24]
 800d238:	60a3      	str	r3, [r4, #8]
 800d23a:	89a3      	ldrh	r3, [r4, #12]
 800d23c:	071a      	lsls	r2, r3, #28
 800d23e:	d501      	bpl.n	800d244 <__swbuf_r+0x20>
 800d240:	6923      	ldr	r3, [r4, #16]
 800d242:	b943      	cbnz	r3, 800d256 <__swbuf_r+0x32>
 800d244:	4621      	mov	r1, r4
 800d246:	4628      	mov	r0, r5
 800d248:	f000 f82a 	bl	800d2a0 <__swsetup_r>
 800d24c:	b118      	cbz	r0, 800d256 <__swbuf_r+0x32>
 800d24e:	f04f 37ff 	mov.w	r7, #4294967295
 800d252:	4638      	mov	r0, r7
 800d254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d256:	6823      	ldr	r3, [r4, #0]
 800d258:	6922      	ldr	r2, [r4, #16]
 800d25a:	1a98      	subs	r0, r3, r2
 800d25c:	6963      	ldr	r3, [r4, #20]
 800d25e:	b2f6      	uxtb	r6, r6
 800d260:	4283      	cmp	r3, r0
 800d262:	4637      	mov	r7, r6
 800d264:	dc05      	bgt.n	800d272 <__swbuf_r+0x4e>
 800d266:	4621      	mov	r1, r4
 800d268:	4628      	mov	r0, r5
 800d26a:	f000 fdf9 	bl	800de60 <_fflush_r>
 800d26e:	2800      	cmp	r0, #0
 800d270:	d1ed      	bne.n	800d24e <__swbuf_r+0x2a>
 800d272:	68a3      	ldr	r3, [r4, #8]
 800d274:	3b01      	subs	r3, #1
 800d276:	60a3      	str	r3, [r4, #8]
 800d278:	6823      	ldr	r3, [r4, #0]
 800d27a:	1c5a      	adds	r2, r3, #1
 800d27c:	6022      	str	r2, [r4, #0]
 800d27e:	701e      	strb	r6, [r3, #0]
 800d280:	6962      	ldr	r2, [r4, #20]
 800d282:	1c43      	adds	r3, r0, #1
 800d284:	429a      	cmp	r2, r3
 800d286:	d004      	beq.n	800d292 <__swbuf_r+0x6e>
 800d288:	89a3      	ldrh	r3, [r4, #12]
 800d28a:	07db      	lsls	r3, r3, #31
 800d28c:	d5e1      	bpl.n	800d252 <__swbuf_r+0x2e>
 800d28e:	2e0a      	cmp	r6, #10
 800d290:	d1df      	bne.n	800d252 <__swbuf_r+0x2e>
 800d292:	4621      	mov	r1, r4
 800d294:	4628      	mov	r0, r5
 800d296:	f000 fde3 	bl	800de60 <_fflush_r>
 800d29a:	2800      	cmp	r0, #0
 800d29c:	d0d9      	beq.n	800d252 <__swbuf_r+0x2e>
 800d29e:	e7d6      	b.n	800d24e <__swbuf_r+0x2a>

0800d2a0 <__swsetup_r>:
 800d2a0:	b538      	push	{r3, r4, r5, lr}
 800d2a2:	4b29      	ldr	r3, [pc, #164]	@ (800d348 <__swsetup_r+0xa8>)
 800d2a4:	4605      	mov	r5, r0
 800d2a6:	6818      	ldr	r0, [r3, #0]
 800d2a8:	460c      	mov	r4, r1
 800d2aa:	b118      	cbz	r0, 800d2b4 <__swsetup_r+0x14>
 800d2ac:	6a03      	ldr	r3, [r0, #32]
 800d2ae:	b90b      	cbnz	r3, 800d2b4 <__swsetup_r+0x14>
 800d2b0:	f7ff fe86 	bl	800cfc0 <__sinit>
 800d2b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2b8:	0719      	lsls	r1, r3, #28
 800d2ba:	d422      	bmi.n	800d302 <__swsetup_r+0x62>
 800d2bc:	06da      	lsls	r2, r3, #27
 800d2be:	d407      	bmi.n	800d2d0 <__swsetup_r+0x30>
 800d2c0:	2209      	movs	r2, #9
 800d2c2:	602a      	str	r2, [r5, #0]
 800d2c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2c8:	81a3      	strh	r3, [r4, #12]
 800d2ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ce:	e033      	b.n	800d338 <__swsetup_r+0x98>
 800d2d0:	0758      	lsls	r0, r3, #29
 800d2d2:	d512      	bpl.n	800d2fa <__swsetup_r+0x5a>
 800d2d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d2d6:	b141      	cbz	r1, 800d2ea <__swsetup_r+0x4a>
 800d2d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d2dc:	4299      	cmp	r1, r3
 800d2de:	d002      	beq.n	800d2e6 <__swsetup_r+0x46>
 800d2e0:	4628      	mov	r0, r5
 800d2e2:	f000 f8c7 	bl	800d474 <_free_r>
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d2ea:	89a3      	ldrh	r3, [r4, #12]
 800d2ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d2f0:	81a3      	strh	r3, [r4, #12]
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	6063      	str	r3, [r4, #4]
 800d2f6:	6923      	ldr	r3, [r4, #16]
 800d2f8:	6023      	str	r3, [r4, #0]
 800d2fa:	89a3      	ldrh	r3, [r4, #12]
 800d2fc:	f043 0308 	orr.w	r3, r3, #8
 800d300:	81a3      	strh	r3, [r4, #12]
 800d302:	6923      	ldr	r3, [r4, #16]
 800d304:	b94b      	cbnz	r3, 800d31a <__swsetup_r+0x7a>
 800d306:	89a3      	ldrh	r3, [r4, #12]
 800d308:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d30c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d310:	d003      	beq.n	800d31a <__swsetup_r+0x7a>
 800d312:	4621      	mov	r1, r4
 800d314:	4628      	mov	r0, r5
 800d316:	f000 fdf1 	bl	800defc <__smakebuf_r>
 800d31a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d31e:	f013 0201 	ands.w	r2, r3, #1
 800d322:	d00a      	beq.n	800d33a <__swsetup_r+0x9a>
 800d324:	2200      	movs	r2, #0
 800d326:	60a2      	str	r2, [r4, #8]
 800d328:	6962      	ldr	r2, [r4, #20]
 800d32a:	4252      	negs	r2, r2
 800d32c:	61a2      	str	r2, [r4, #24]
 800d32e:	6922      	ldr	r2, [r4, #16]
 800d330:	b942      	cbnz	r2, 800d344 <__swsetup_r+0xa4>
 800d332:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d336:	d1c5      	bne.n	800d2c4 <__swsetup_r+0x24>
 800d338:	bd38      	pop	{r3, r4, r5, pc}
 800d33a:	0799      	lsls	r1, r3, #30
 800d33c:	bf58      	it	pl
 800d33e:	6962      	ldrpl	r2, [r4, #20]
 800d340:	60a2      	str	r2, [r4, #8]
 800d342:	e7f4      	b.n	800d32e <__swsetup_r+0x8e>
 800d344:	2000      	movs	r0, #0
 800d346:	e7f7      	b.n	800d338 <__swsetup_r+0x98>
 800d348:	20000248 	.word	0x20000248

0800d34c <memset>:
 800d34c:	4402      	add	r2, r0
 800d34e:	4603      	mov	r3, r0
 800d350:	4293      	cmp	r3, r2
 800d352:	d100      	bne.n	800d356 <memset+0xa>
 800d354:	4770      	bx	lr
 800d356:	f803 1b01 	strb.w	r1, [r3], #1
 800d35a:	e7f9      	b.n	800d350 <memset+0x4>

0800d35c <_close_r>:
 800d35c:	b538      	push	{r3, r4, r5, lr}
 800d35e:	4d06      	ldr	r5, [pc, #24]	@ (800d378 <_close_r+0x1c>)
 800d360:	2300      	movs	r3, #0
 800d362:	4604      	mov	r4, r0
 800d364:	4608      	mov	r0, r1
 800d366:	602b      	str	r3, [r5, #0]
 800d368:	f7f6 f937 	bl	80035da <_close>
 800d36c:	1c43      	adds	r3, r0, #1
 800d36e:	d102      	bne.n	800d376 <_close_r+0x1a>
 800d370:	682b      	ldr	r3, [r5, #0]
 800d372:	b103      	cbz	r3, 800d376 <_close_r+0x1a>
 800d374:	6023      	str	r3, [r4, #0]
 800d376:	bd38      	pop	{r3, r4, r5, pc}
 800d378:	20012178 	.word	0x20012178

0800d37c <_lseek_r>:
 800d37c:	b538      	push	{r3, r4, r5, lr}
 800d37e:	4d07      	ldr	r5, [pc, #28]	@ (800d39c <_lseek_r+0x20>)
 800d380:	4604      	mov	r4, r0
 800d382:	4608      	mov	r0, r1
 800d384:	4611      	mov	r1, r2
 800d386:	2200      	movs	r2, #0
 800d388:	602a      	str	r2, [r5, #0]
 800d38a:	461a      	mov	r2, r3
 800d38c:	f7f6 f94c 	bl	8003628 <_lseek>
 800d390:	1c43      	adds	r3, r0, #1
 800d392:	d102      	bne.n	800d39a <_lseek_r+0x1e>
 800d394:	682b      	ldr	r3, [r5, #0]
 800d396:	b103      	cbz	r3, 800d39a <_lseek_r+0x1e>
 800d398:	6023      	str	r3, [r4, #0]
 800d39a:	bd38      	pop	{r3, r4, r5, pc}
 800d39c:	20012178 	.word	0x20012178

0800d3a0 <_read_r>:
 800d3a0:	b538      	push	{r3, r4, r5, lr}
 800d3a2:	4d07      	ldr	r5, [pc, #28]	@ (800d3c0 <_read_r+0x20>)
 800d3a4:	4604      	mov	r4, r0
 800d3a6:	4608      	mov	r0, r1
 800d3a8:	4611      	mov	r1, r2
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	602a      	str	r2, [r5, #0]
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	f7f6 f8f6 	bl	80035a0 <_read>
 800d3b4:	1c43      	adds	r3, r0, #1
 800d3b6:	d102      	bne.n	800d3be <_read_r+0x1e>
 800d3b8:	682b      	ldr	r3, [r5, #0]
 800d3ba:	b103      	cbz	r3, 800d3be <_read_r+0x1e>
 800d3bc:	6023      	str	r3, [r4, #0]
 800d3be:	bd38      	pop	{r3, r4, r5, pc}
 800d3c0:	20012178 	.word	0x20012178

0800d3c4 <_sbrk_r>:
 800d3c4:	b538      	push	{r3, r4, r5, lr}
 800d3c6:	4d06      	ldr	r5, [pc, #24]	@ (800d3e0 <_sbrk_r+0x1c>)
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	4604      	mov	r4, r0
 800d3cc:	4608      	mov	r0, r1
 800d3ce:	602b      	str	r3, [r5, #0]
 800d3d0:	f7f6 f938 	bl	8003644 <_sbrk>
 800d3d4:	1c43      	adds	r3, r0, #1
 800d3d6:	d102      	bne.n	800d3de <_sbrk_r+0x1a>
 800d3d8:	682b      	ldr	r3, [r5, #0]
 800d3da:	b103      	cbz	r3, 800d3de <_sbrk_r+0x1a>
 800d3dc:	6023      	str	r3, [r4, #0]
 800d3de:	bd38      	pop	{r3, r4, r5, pc}
 800d3e0:	20012178 	.word	0x20012178

0800d3e4 <_write_r>:
 800d3e4:	b538      	push	{r3, r4, r5, lr}
 800d3e6:	4d07      	ldr	r5, [pc, #28]	@ (800d404 <_write_r+0x20>)
 800d3e8:	4604      	mov	r4, r0
 800d3ea:	4608      	mov	r0, r1
 800d3ec:	4611      	mov	r1, r2
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	602a      	str	r2, [r5, #0]
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	f7f3 ff08 	bl	8001208 <_write>
 800d3f8:	1c43      	adds	r3, r0, #1
 800d3fa:	d102      	bne.n	800d402 <_write_r+0x1e>
 800d3fc:	682b      	ldr	r3, [r5, #0]
 800d3fe:	b103      	cbz	r3, 800d402 <_write_r+0x1e>
 800d400:	6023      	str	r3, [r4, #0]
 800d402:	bd38      	pop	{r3, r4, r5, pc}
 800d404:	20012178 	.word	0x20012178

0800d408 <__errno>:
 800d408:	4b01      	ldr	r3, [pc, #4]	@ (800d410 <__errno+0x8>)
 800d40a:	6818      	ldr	r0, [r3, #0]
 800d40c:	4770      	bx	lr
 800d40e:	bf00      	nop
 800d410:	20000248 	.word	0x20000248

0800d414 <__libc_init_array>:
 800d414:	b570      	push	{r4, r5, r6, lr}
 800d416:	4d0d      	ldr	r5, [pc, #52]	@ (800d44c <__libc_init_array+0x38>)
 800d418:	4c0d      	ldr	r4, [pc, #52]	@ (800d450 <__libc_init_array+0x3c>)
 800d41a:	1b64      	subs	r4, r4, r5
 800d41c:	10a4      	asrs	r4, r4, #2
 800d41e:	2600      	movs	r6, #0
 800d420:	42a6      	cmp	r6, r4
 800d422:	d109      	bne.n	800d438 <__libc_init_array+0x24>
 800d424:	4d0b      	ldr	r5, [pc, #44]	@ (800d454 <__libc_init_array+0x40>)
 800d426:	4c0c      	ldr	r4, [pc, #48]	@ (800d458 <__libc_init_array+0x44>)
 800d428:	f000 fe58 	bl	800e0dc <_init>
 800d42c:	1b64      	subs	r4, r4, r5
 800d42e:	10a4      	asrs	r4, r4, #2
 800d430:	2600      	movs	r6, #0
 800d432:	42a6      	cmp	r6, r4
 800d434:	d105      	bne.n	800d442 <__libc_init_array+0x2e>
 800d436:	bd70      	pop	{r4, r5, r6, pc}
 800d438:	f855 3b04 	ldr.w	r3, [r5], #4
 800d43c:	4798      	blx	r3
 800d43e:	3601      	adds	r6, #1
 800d440:	e7ee      	b.n	800d420 <__libc_init_array+0xc>
 800d442:	f855 3b04 	ldr.w	r3, [r5], #4
 800d446:	4798      	blx	r3
 800d448:	3601      	adds	r6, #1
 800d44a:	e7f2      	b.n	800d432 <__libc_init_array+0x1e>
 800d44c:	08010b48 	.word	0x08010b48
 800d450:	08010b48 	.word	0x08010b48
 800d454:	08010b48 	.word	0x08010b48
 800d458:	08010b4c 	.word	0x08010b4c

0800d45c <__retarget_lock_init_recursive>:
 800d45c:	4770      	bx	lr

0800d45e <__retarget_lock_acquire_recursive>:
 800d45e:	4770      	bx	lr

0800d460 <__retarget_lock_release_recursive>:
 800d460:	4770      	bx	lr

0800d462 <strcpy>:
 800d462:	4603      	mov	r3, r0
 800d464:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d468:	f803 2b01 	strb.w	r2, [r3], #1
 800d46c:	2a00      	cmp	r2, #0
 800d46e:	d1f9      	bne.n	800d464 <strcpy+0x2>
 800d470:	4770      	bx	lr
	...

0800d474 <_free_r>:
 800d474:	b538      	push	{r3, r4, r5, lr}
 800d476:	4605      	mov	r5, r0
 800d478:	2900      	cmp	r1, #0
 800d47a:	d041      	beq.n	800d500 <_free_r+0x8c>
 800d47c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d480:	1f0c      	subs	r4, r1, #4
 800d482:	2b00      	cmp	r3, #0
 800d484:	bfb8      	it	lt
 800d486:	18e4      	addlt	r4, r4, r3
 800d488:	f7ff fd02 	bl	800ce90 <__malloc_lock>
 800d48c:	4a1d      	ldr	r2, [pc, #116]	@ (800d504 <_free_r+0x90>)
 800d48e:	6813      	ldr	r3, [r2, #0]
 800d490:	b933      	cbnz	r3, 800d4a0 <_free_r+0x2c>
 800d492:	6063      	str	r3, [r4, #4]
 800d494:	6014      	str	r4, [r2, #0]
 800d496:	4628      	mov	r0, r5
 800d498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d49c:	f7ff bcfe 	b.w	800ce9c <__malloc_unlock>
 800d4a0:	42a3      	cmp	r3, r4
 800d4a2:	d908      	bls.n	800d4b6 <_free_r+0x42>
 800d4a4:	6820      	ldr	r0, [r4, #0]
 800d4a6:	1821      	adds	r1, r4, r0
 800d4a8:	428b      	cmp	r3, r1
 800d4aa:	bf01      	itttt	eq
 800d4ac:	6819      	ldreq	r1, [r3, #0]
 800d4ae:	685b      	ldreq	r3, [r3, #4]
 800d4b0:	1809      	addeq	r1, r1, r0
 800d4b2:	6021      	streq	r1, [r4, #0]
 800d4b4:	e7ed      	b.n	800d492 <_free_r+0x1e>
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	b10b      	cbz	r3, 800d4c0 <_free_r+0x4c>
 800d4bc:	42a3      	cmp	r3, r4
 800d4be:	d9fa      	bls.n	800d4b6 <_free_r+0x42>
 800d4c0:	6811      	ldr	r1, [r2, #0]
 800d4c2:	1850      	adds	r0, r2, r1
 800d4c4:	42a0      	cmp	r0, r4
 800d4c6:	d10b      	bne.n	800d4e0 <_free_r+0x6c>
 800d4c8:	6820      	ldr	r0, [r4, #0]
 800d4ca:	4401      	add	r1, r0
 800d4cc:	1850      	adds	r0, r2, r1
 800d4ce:	4283      	cmp	r3, r0
 800d4d0:	6011      	str	r1, [r2, #0]
 800d4d2:	d1e0      	bne.n	800d496 <_free_r+0x22>
 800d4d4:	6818      	ldr	r0, [r3, #0]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	6053      	str	r3, [r2, #4]
 800d4da:	4408      	add	r0, r1
 800d4dc:	6010      	str	r0, [r2, #0]
 800d4de:	e7da      	b.n	800d496 <_free_r+0x22>
 800d4e0:	d902      	bls.n	800d4e8 <_free_r+0x74>
 800d4e2:	230c      	movs	r3, #12
 800d4e4:	602b      	str	r3, [r5, #0]
 800d4e6:	e7d6      	b.n	800d496 <_free_r+0x22>
 800d4e8:	6820      	ldr	r0, [r4, #0]
 800d4ea:	1821      	adds	r1, r4, r0
 800d4ec:	428b      	cmp	r3, r1
 800d4ee:	bf04      	itt	eq
 800d4f0:	6819      	ldreq	r1, [r3, #0]
 800d4f2:	685b      	ldreq	r3, [r3, #4]
 800d4f4:	6063      	str	r3, [r4, #4]
 800d4f6:	bf04      	itt	eq
 800d4f8:	1809      	addeq	r1, r1, r0
 800d4fa:	6021      	streq	r1, [r4, #0]
 800d4fc:	6054      	str	r4, [r2, #4]
 800d4fe:	e7ca      	b.n	800d496 <_free_r+0x22>
 800d500:	bd38      	pop	{r3, r4, r5, pc}
 800d502:	bf00      	nop
 800d504:	20012038 	.word	0x20012038

0800d508 <__ssputs_r>:
 800d508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d50c:	688e      	ldr	r6, [r1, #8]
 800d50e:	461f      	mov	r7, r3
 800d510:	42be      	cmp	r6, r7
 800d512:	680b      	ldr	r3, [r1, #0]
 800d514:	4682      	mov	sl, r0
 800d516:	460c      	mov	r4, r1
 800d518:	4690      	mov	r8, r2
 800d51a:	d82d      	bhi.n	800d578 <__ssputs_r+0x70>
 800d51c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d520:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d524:	d026      	beq.n	800d574 <__ssputs_r+0x6c>
 800d526:	6965      	ldr	r5, [r4, #20]
 800d528:	6909      	ldr	r1, [r1, #16]
 800d52a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d52e:	eba3 0901 	sub.w	r9, r3, r1
 800d532:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d536:	1c7b      	adds	r3, r7, #1
 800d538:	444b      	add	r3, r9
 800d53a:	106d      	asrs	r5, r5, #1
 800d53c:	429d      	cmp	r5, r3
 800d53e:	bf38      	it	cc
 800d540:	461d      	movcc	r5, r3
 800d542:	0553      	lsls	r3, r2, #21
 800d544:	d527      	bpl.n	800d596 <__ssputs_r+0x8e>
 800d546:	4629      	mov	r1, r5
 800d548:	f7ff fc22 	bl	800cd90 <_malloc_r>
 800d54c:	4606      	mov	r6, r0
 800d54e:	b360      	cbz	r0, 800d5aa <__ssputs_r+0xa2>
 800d550:	6921      	ldr	r1, [r4, #16]
 800d552:	464a      	mov	r2, r9
 800d554:	f000 fd7e 	bl	800e054 <memcpy>
 800d558:	89a3      	ldrh	r3, [r4, #12]
 800d55a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d55e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d562:	81a3      	strh	r3, [r4, #12]
 800d564:	6126      	str	r6, [r4, #16]
 800d566:	6165      	str	r5, [r4, #20]
 800d568:	444e      	add	r6, r9
 800d56a:	eba5 0509 	sub.w	r5, r5, r9
 800d56e:	6026      	str	r6, [r4, #0]
 800d570:	60a5      	str	r5, [r4, #8]
 800d572:	463e      	mov	r6, r7
 800d574:	42be      	cmp	r6, r7
 800d576:	d900      	bls.n	800d57a <__ssputs_r+0x72>
 800d578:	463e      	mov	r6, r7
 800d57a:	6820      	ldr	r0, [r4, #0]
 800d57c:	4632      	mov	r2, r6
 800d57e:	4641      	mov	r1, r8
 800d580:	f000 fd2c 	bl	800dfdc <memmove>
 800d584:	68a3      	ldr	r3, [r4, #8]
 800d586:	1b9b      	subs	r3, r3, r6
 800d588:	60a3      	str	r3, [r4, #8]
 800d58a:	6823      	ldr	r3, [r4, #0]
 800d58c:	4433      	add	r3, r6
 800d58e:	6023      	str	r3, [r4, #0]
 800d590:	2000      	movs	r0, #0
 800d592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d596:	462a      	mov	r2, r5
 800d598:	f000 fd6a 	bl	800e070 <_realloc_r>
 800d59c:	4606      	mov	r6, r0
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	d1e0      	bne.n	800d564 <__ssputs_r+0x5c>
 800d5a2:	6921      	ldr	r1, [r4, #16]
 800d5a4:	4650      	mov	r0, sl
 800d5a6:	f7ff ff65 	bl	800d474 <_free_r>
 800d5aa:	230c      	movs	r3, #12
 800d5ac:	f8ca 3000 	str.w	r3, [sl]
 800d5b0:	89a3      	ldrh	r3, [r4, #12]
 800d5b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5b6:	81a3      	strh	r3, [r4, #12]
 800d5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5bc:	e7e9      	b.n	800d592 <__ssputs_r+0x8a>
	...

0800d5c0 <_svfiprintf_r>:
 800d5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c4:	4698      	mov	r8, r3
 800d5c6:	898b      	ldrh	r3, [r1, #12]
 800d5c8:	061b      	lsls	r3, r3, #24
 800d5ca:	b09d      	sub	sp, #116	@ 0x74
 800d5cc:	4607      	mov	r7, r0
 800d5ce:	460d      	mov	r5, r1
 800d5d0:	4614      	mov	r4, r2
 800d5d2:	d510      	bpl.n	800d5f6 <_svfiprintf_r+0x36>
 800d5d4:	690b      	ldr	r3, [r1, #16]
 800d5d6:	b973      	cbnz	r3, 800d5f6 <_svfiprintf_r+0x36>
 800d5d8:	2140      	movs	r1, #64	@ 0x40
 800d5da:	f7ff fbd9 	bl	800cd90 <_malloc_r>
 800d5de:	6028      	str	r0, [r5, #0]
 800d5e0:	6128      	str	r0, [r5, #16]
 800d5e2:	b930      	cbnz	r0, 800d5f2 <_svfiprintf_r+0x32>
 800d5e4:	230c      	movs	r3, #12
 800d5e6:	603b      	str	r3, [r7, #0]
 800d5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ec:	b01d      	add	sp, #116	@ 0x74
 800d5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5f2:	2340      	movs	r3, #64	@ 0x40
 800d5f4:	616b      	str	r3, [r5, #20]
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5fa:	2320      	movs	r3, #32
 800d5fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d600:	f8cd 800c 	str.w	r8, [sp, #12]
 800d604:	2330      	movs	r3, #48	@ 0x30
 800d606:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d7a4 <_svfiprintf_r+0x1e4>
 800d60a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d60e:	f04f 0901 	mov.w	r9, #1
 800d612:	4623      	mov	r3, r4
 800d614:	469a      	mov	sl, r3
 800d616:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d61a:	b10a      	cbz	r2, 800d620 <_svfiprintf_r+0x60>
 800d61c:	2a25      	cmp	r2, #37	@ 0x25
 800d61e:	d1f9      	bne.n	800d614 <_svfiprintf_r+0x54>
 800d620:	ebba 0b04 	subs.w	fp, sl, r4
 800d624:	d00b      	beq.n	800d63e <_svfiprintf_r+0x7e>
 800d626:	465b      	mov	r3, fp
 800d628:	4622      	mov	r2, r4
 800d62a:	4629      	mov	r1, r5
 800d62c:	4638      	mov	r0, r7
 800d62e:	f7ff ff6b 	bl	800d508 <__ssputs_r>
 800d632:	3001      	adds	r0, #1
 800d634:	f000 80a7 	beq.w	800d786 <_svfiprintf_r+0x1c6>
 800d638:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d63a:	445a      	add	r2, fp
 800d63c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d63e:	f89a 3000 	ldrb.w	r3, [sl]
 800d642:	2b00      	cmp	r3, #0
 800d644:	f000 809f 	beq.w	800d786 <_svfiprintf_r+0x1c6>
 800d648:	2300      	movs	r3, #0
 800d64a:	f04f 32ff 	mov.w	r2, #4294967295
 800d64e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d652:	f10a 0a01 	add.w	sl, sl, #1
 800d656:	9304      	str	r3, [sp, #16]
 800d658:	9307      	str	r3, [sp, #28]
 800d65a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d65e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d660:	4654      	mov	r4, sl
 800d662:	2205      	movs	r2, #5
 800d664:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d668:	484e      	ldr	r0, [pc, #312]	@ (800d7a4 <_svfiprintf_r+0x1e4>)
 800d66a:	f7f2 fdc9 	bl	8000200 <memchr>
 800d66e:	9a04      	ldr	r2, [sp, #16]
 800d670:	b9d8      	cbnz	r0, 800d6aa <_svfiprintf_r+0xea>
 800d672:	06d0      	lsls	r0, r2, #27
 800d674:	bf44      	itt	mi
 800d676:	2320      	movmi	r3, #32
 800d678:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d67c:	0711      	lsls	r1, r2, #28
 800d67e:	bf44      	itt	mi
 800d680:	232b      	movmi	r3, #43	@ 0x2b
 800d682:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d686:	f89a 3000 	ldrb.w	r3, [sl]
 800d68a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d68c:	d015      	beq.n	800d6ba <_svfiprintf_r+0xfa>
 800d68e:	9a07      	ldr	r2, [sp, #28]
 800d690:	4654      	mov	r4, sl
 800d692:	2000      	movs	r0, #0
 800d694:	f04f 0c0a 	mov.w	ip, #10
 800d698:	4621      	mov	r1, r4
 800d69a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d69e:	3b30      	subs	r3, #48	@ 0x30
 800d6a0:	2b09      	cmp	r3, #9
 800d6a2:	d94b      	bls.n	800d73c <_svfiprintf_r+0x17c>
 800d6a4:	b1b0      	cbz	r0, 800d6d4 <_svfiprintf_r+0x114>
 800d6a6:	9207      	str	r2, [sp, #28]
 800d6a8:	e014      	b.n	800d6d4 <_svfiprintf_r+0x114>
 800d6aa:	eba0 0308 	sub.w	r3, r0, r8
 800d6ae:	fa09 f303 	lsl.w	r3, r9, r3
 800d6b2:	4313      	orrs	r3, r2
 800d6b4:	9304      	str	r3, [sp, #16]
 800d6b6:	46a2      	mov	sl, r4
 800d6b8:	e7d2      	b.n	800d660 <_svfiprintf_r+0xa0>
 800d6ba:	9b03      	ldr	r3, [sp, #12]
 800d6bc:	1d19      	adds	r1, r3, #4
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	9103      	str	r1, [sp, #12]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	bfbb      	ittet	lt
 800d6c6:	425b      	neglt	r3, r3
 800d6c8:	f042 0202 	orrlt.w	r2, r2, #2
 800d6cc:	9307      	strge	r3, [sp, #28]
 800d6ce:	9307      	strlt	r3, [sp, #28]
 800d6d0:	bfb8      	it	lt
 800d6d2:	9204      	strlt	r2, [sp, #16]
 800d6d4:	7823      	ldrb	r3, [r4, #0]
 800d6d6:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6d8:	d10a      	bne.n	800d6f0 <_svfiprintf_r+0x130>
 800d6da:	7863      	ldrb	r3, [r4, #1]
 800d6dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6de:	d132      	bne.n	800d746 <_svfiprintf_r+0x186>
 800d6e0:	9b03      	ldr	r3, [sp, #12]
 800d6e2:	1d1a      	adds	r2, r3, #4
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	9203      	str	r2, [sp, #12]
 800d6e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d6ec:	3402      	adds	r4, #2
 800d6ee:	9305      	str	r3, [sp, #20]
 800d6f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d7b4 <_svfiprintf_r+0x1f4>
 800d6f4:	7821      	ldrb	r1, [r4, #0]
 800d6f6:	2203      	movs	r2, #3
 800d6f8:	4650      	mov	r0, sl
 800d6fa:	f7f2 fd81 	bl	8000200 <memchr>
 800d6fe:	b138      	cbz	r0, 800d710 <_svfiprintf_r+0x150>
 800d700:	9b04      	ldr	r3, [sp, #16]
 800d702:	eba0 000a 	sub.w	r0, r0, sl
 800d706:	2240      	movs	r2, #64	@ 0x40
 800d708:	4082      	lsls	r2, r0
 800d70a:	4313      	orrs	r3, r2
 800d70c:	3401      	adds	r4, #1
 800d70e:	9304      	str	r3, [sp, #16]
 800d710:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d714:	4824      	ldr	r0, [pc, #144]	@ (800d7a8 <_svfiprintf_r+0x1e8>)
 800d716:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d71a:	2206      	movs	r2, #6
 800d71c:	f7f2 fd70 	bl	8000200 <memchr>
 800d720:	2800      	cmp	r0, #0
 800d722:	d036      	beq.n	800d792 <_svfiprintf_r+0x1d2>
 800d724:	4b21      	ldr	r3, [pc, #132]	@ (800d7ac <_svfiprintf_r+0x1ec>)
 800d726:	bb1b      	cbnz	r3, 800d770 <_svfiprintf_r+0x1b0>
 800d728:	9b03      	ldr	r3, [sp, #12]
 800d72a:	3307      	adds	r3, #7
 800d72c:	f023 0307 	bic.w	r3, r3, #7
 800d730:	3308      	adds	r3, #8
 800d732:	9303      	str	r3, [sp, #12]
 800d734:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d736:	4433      	add	r3, r6
 800d738:	9309      	str	r3, [sp, #36]	@ 0x24
 800d73a:	e76a      	b.n	800d612 <_svfiprintf_r+0x52>
 800d73c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d740:	460c      	mov	r4, r1
 800d742:	2001      	movs	r0, #1
 800d744:	e7a8      	b.n	800d698 <_svfiprintf_r+0xd8>
 800d746:	2300      	movs	r3, #0
 800d748:	3401      	adds	r4, #1
 800d74a:	9305      	str	r3, [sp, #20]
 800d74c:	4619      	mov	r1, r3
 800d74e:	f04f 0c0a 	mov.w	ip, #10
 800d752:	4620      	mov	r0, r4
 800d754:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d758:	3a30      	subs	r2, #48	@ 0x30
 800d75a:	2a09      	cmp	r2, #9
 800d75c:	d903      	bls.n	800d766 <_svfiprintf_r+0x1a6>
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d0c6      	beq.n	800d6f0 <_svfiprintf_r+0x130>
 800d762:	9105      	str	r1, [sp, #20]
 800d764:	e7c4      	b.n	800d6f0 <_svfiprintf_r+0x130>
 800d766:	fb0c 2101 	mla	r1, ip, r1, r2
 800d76a:	4604      	mov	r4, r0
 800d76c:	2301      	movs	r3, #1
 800d76e:	e7f0      	b.n	800d752 <_svfiprintf_r+0x192>
 800d770:	ab03      	add	r3, sp, #12
 800d772:	9300      	str	r3, [sp, #0]
 800d774:	462a      	mov	r2, r5
 800d776:	4b0e      	ldr	r3, [pc, #56]	@ (800d7b0 <_svfiprintf_r+0x1f0>)
 800d778:	a904      	add	r1, sp, #16
 800d77a:	4638      	mov	r0, r7
 800d77c:	f3af 8000 	nop.w
 800d780:	1c42      	adds	r2, r0, #1
 800d782:	4606      	mov	r6, r0
 800d784:	d1d6      	bne.n	800d734 <_svfiprintf_r+0x174>
 800d786:	89ab      	ldrh	r3, [r5, #12]
 800d788:	065b      	lsls	r3, r3, #25
 800d78a:	f53f af2d 	bmi.w	800d5e8 <_svfiprintf_r+0x28>
 800d78e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d790:	e72c      	b.n	800d5ec <_svfiprintf_r+0x2c>
 800d792:	ab03      	add	r3, sp, #12
 800d794:	9300      	str	r3, [sp, #0]
 800d796:	462a      	mov	r2, r5
 800d798:	4b05      	ldr	r3, [pc, #20]	@ (800d7b0 <_svfiprintf_r+0x1f0>)
 800d79a:	a904      	add	r1, sp, #16
 800d79c:	4638      	mov	r0, r7
 800d79e:	f000 f9bb 	bl	800db18 <_printf_i>
 800d7a2:	e7ed      	b.n	800d780 <_svfiprintf_r+0x1c0>
 800d7a4:	08010b0c 	.word	0x08010b0c
 800d7a8:	08010b16 	.word	0x08010b16
 800d7ac:	00000000 	.word	0x00000000
 800d7b0:	0800d509 	.word	0x0800d509
 800d7b4:	08010b12 	.word	0x08010b12

0800d7b8 <__sfputc_r>:
 800d7b8:	6893      	ldr	r3, [r2, #8]
 800d7ba:	3b01      	subs	r3, #1
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	b410      	push	{r4}
 800d7c0:	6093      	str	r3, [r2, #8]
 800d7c2:	da08      	bge.n	800d7d6 <__sfputc_r+0x1e>
 800d7c4:	6994      	ldr	r4, [r2, #24]
 800d7c6:	42a3      	cmp	r3, r4
 800d7c8:	db01      	blt.n	800d7ce <__sfputc_r+0x16>
 800d7ca:	290a      	cmp	r1, #10
 800d7cc:	d103      	bne.n	800d7d6 <__sfputc_r+0x1e>
 800d7ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7d2:	f7ff bd27 	b.w	800d224 <__swbuf_r>
 800d7d6:	6813      	ldr	r3, [r2, #0]
 800d7d8:	1c58      	adds	r0, r3, #1
 800d7da:	6010      	str	r0, [r2, #0]
 800d7dc:	7019      	strb	r1, [r3, #0]
 800d7de:	4608      	mov	r0, r1
 800d7e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7e4:	4770      	bx	lr

0800d7e6 <__sfputs_r>:
 800d7e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7e8:	4606      	mov	r6, r0
 800d7ea:	460f      	mov	r7, r1
 800d7ec:	4614      	mov	r4, r2
 800d7ee:	18d5      	adds	r5, r2, r3
 800d7f0:	42ac      	cmp	r4, r5
 800d7f2:	d101      	bne.n	800d7f8 <__sfputs_r+0x12>
 800d7f4:	2000      	movs	r0, #0
 800d7f6:	e007      	b.n	800d808 <__sfputs_r+0x22>
 800d7f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7fc:	463a      	mov	r2, r7
 800d7fe:	4630      	mov	r0, r6
 800d800:	f7ff ffda 	bl	800d7b8 <__sfputc_r>
 800d804:	1c43      	adds	r3, r0, #1
 800d806:	d1f3      	bne.n	800d7f0 <__sfputs_r+0xa>
 800d808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d80c <_vfiprintf_r>:
 800d80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d810:	460d      	mov	r5, r1
 800d812:	b09d      	sub	sp, #116	@ 0x74
 800d814:	4614      	mov	r4, r2
 800d816:	4698      	mov	r8, r3
 800d818:	4606      	mov	r6, r0
 800d81a:	b118      	cbz	r0, 800d824 <_vfiprintf_r+0x18>
 800d81c:	6a03      	ldr	r3, [r0, #32]
 800d81e:	b90b      	cbnz	r3, 800d824 <_vfiprintf_r+0x18>
 800d820:	f7ff fbce 	bl	800cfc0 <__sinit>
 800d824:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d826:	07d9      	lsls	r1, r3, #31
 800d828:	d405      	bmi.n	800d836 <_vfiprintf_r+0x2a>
 800d82a:	89ab      	ldrh	r3, [r5, #12]
 800d82c:	059a      	lsls	r2, r3, #22
 800d82e:	d402      	bmi.n	800d836 <_vfiprintf_r+0x2a>
 800d830:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d832:	f7ff fe14 	bl	800d45e <__retarget_lock_acquire_recursive>
 800d836:	89ab      	ldrh	r3, [r5, #12]
 800d838:	071b      	lsls	r3, r3, #28
 800d83a:	d501      	bpl.n	800d840 <_vfiprintf_r+0x34>
 800d83c:	692b      	ldr	r3, [r5, #16]
 800d83e:	b99b      	cbnz	r3, 800d868 <_vfiprintf_r+0x5c>
 800d840:	4629      	mov	r1, r5
 800d842:	4630      	mov	r0, r6
 800d844:	f7ff fd2c 	bl	800d2a0 <__swsetup_r>
 800d848:	b170      	cbz	r0, 800d868 <_vfiprintf_r+0x5c>
 800d84a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d84c:	07dc      	lsls	r4, r3, #31
 800d84e:	d504      	bpl.n	800d85a <_vfiprintf_r+0x4e>
 800d850:	f04f 30ff 	mov.w	r0, #4294967295
 800d854:	b01d      	add	sp, #116	@ 0x74
 800d856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d85a:	89ab      	ldrh	r3, [r5, #12]
 800d85c:	0598      	lsls	r0, r3, #22
 800d85e:	d4f7      	bmi.n	800d850 <_vfiprintf_r+0x44>
 800d860:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d862:	f7ff fdfd 	bl	800d460 <__retarget_lock_release_recursive>
 800d866:	e7f3      	b.n	800d850 <_vfiprintf_r+0x44>
 800d868:	2300      	movs	r3, #0
 800d86a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d86c:	2320      	movs	r3, #32
 800d86e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d872:	f8cd 800c 	str.w	r8, [sp, #12]
 800d876:	2330      	movs	r3, #48	@ 0x30
 800d878:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800da28 <_vfiprintf_r+0x21c>
 800d87c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d880:	f04f 0901 	mov.w	r9, #1
 800d884:	4623      	mov	r3, r4
 800d886:	469a      	mov	sl, r3
 800d888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d88c:	b10a      	cbz	r2, 800d892 <_vfiprintf_r+0x86>
 800d88e:	2a25      	cmp	r2, #37	@ 0x25
 800d890:	d1f9      	bne.n	800d886 <_vfiprintf_r+0x7a>
 800d892:	ebba 0b04 	subs.w	fp, sl, r4
 800d896:	d00b      	beq.n	800d8b0 <_vfiprintf_r+0xa4>
 800d898:	465b      	mov	r3, fp
 800d89a:	4622      	mov	r2, r4
 800d89c:	4629      	mov	r1, r5
 800d89e:	4630      	mov	r0, r6
 800d8a0:	f7ff ffa1 	bl	800d7e6 <__sfputs_r>
 800d8a4:	3001      	adds	r0, #1
 800d8a6:	f000 80a7 	beq.w	800d9f8 <_vfiprintf_r+0x1ec>
 800d8aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8ac:	445a      	add	r2, fp
 800d8ae:	9209      	str	r2, [sp, #36]	@ 0x24
 800d8b0:	f89a 3000 	ldrb.w	r3, [sl]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	f000 809f 	beq.w	800d9f8 <_vfiprintf_r+0x1ec>
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d8c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8c4:	f10a 0a01 	add.w	sl, sl, #1
 800d8c8:	9304      	str	r3, [sp, #16]
 800d8ca:	9307      	str	r3, [sp, #28]
 800d8cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d8d0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d8d2:	4654      	mov	r4, sl
 800d8d4:	2205      	movs	r2, #5
 800d8d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8da:	4853      	ldr	r0, [pc, #332]	@ (800da28 <_vfiprintf_r+0x21c>)
 800d8dc:	f7f2 fc90 	bl	8000200 <memchr>
 800d8e0:	9a04      	ldr	r2, [sp, #16]
 800d8e2:	b9d8      	cbnz	r0, 800d91c <_vfiprintf_r+0x110>
 800d8e4:	06d1      	lsls	r1, r2, #27
 800d8e6:	bf44      	itt	mi
 800d8e8:	2320      	movmi	r3, #32
 800d8ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8ee:	0713      	lsls	r3, r2, #28
 800d8f0:	bf44      	itt	mi
 800d8f2:	232b      	movmi	r3, #43	@ 0x2b
 800d8f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8f8:	f89a 3000 	ldrb.w	r3, [sl]
 800d8fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8fe:	d015      	beq.n	800d92c <_vfiprintf_r+0x120>
 800d900:	9a07      	ldr	r2, [sp, #28]
 800d902:	4654      	mov	r4, sl
 800d904:	2000      	movs	r0, #0
 800d906:	f04f 0c0a 	mov.w	ip, #10
 800d90a:	4621      	mov	r1, r4
 800d90c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d910:	3b30      	subs	r3, #48	@ 0x30
 800d912:	2b09      	cmp	r3, #9
 800d914:	d94b      	bls.n	800d9ae <_vfiprintf_r+0x1a2>
 800d916:	b1b0      	cbz	r0, 800d946 <_vfiprintf_r+0x13a>
 800d918:	9207      	str	r2, [sp, #28]
 800d91a:	e014      	b.n	800d946 <_vfiprintf_r+0x13a>
 800d91c:	eba0 0308 	sub.w	r3, r0, r8
 800d920:	fa09 f303 	lsl.w	r3, r9, r3
 800d924:	4313      	orrs	r3, r2
 800d926:	9304      	str	r3, [sp, #16]
 800d928:	46a2      	mov	sl, r4
 800d92a:	e7d2      	b.n	800d8d2 <_vfiprintf_r+0xc6>
 800d92c:	9b03      	ldr	r3, [sp, #12]
 800d92e:	1d19      	adds	r1, r3, #4
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	9103      	str	r1, [sp, #12]
 800d934:	2b00      	cmp	r3, #0
 800d936:	bfbb      	ittet	lt
 800d938:	425b      	neglt	r3, r3
 800d93a:	f042 0202 	orrlt.w	r2, r2, #2
 800d93e:	9307      	strge	r3, [sp, #28]
 800d940:	9307      	strlt	r3, [sp, #28]
 800d942:	bfb8      	it	lt
 800d944:	9204      	strlt	r2, [sp, #16]
 800d946:	7823      	ldrb	r3, [r4, #0]
 800d948:	2b2e      	cmp	r3, #46	@ 0x2e
 800d94a:	d10a      	bne.n	800d962 <_vfiprintf_r+0x156>
 800d94c:	7863      	ldrb	r3, [r4, #1]
 800d94e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d950:	d132      	bne.n	800d9b8 <_vfiprintf_r+0x1ac>
 800d952:	9b03      	ldr	r3, [sp, #12]
 800d954:	1d1a      	adds	r2, r3, #4
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	9203      	str	r2, [sp, #12]
 800d95a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d95e:	3402      	adds	r4, #2
 800d960:	9305      	str	r3, [sp, #20]
 800d962:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800da38 <_vfiprintf_r+0x22c>
 800d966:	7821      	ldrb	r1, [r4, #0]
 800d968:	2203      	movs	r2, #3
 800d96a:	4650      	mov	r0, sl
 800d96c:	f7f2 fc48 	bl	8000200 <memchr>
 800d970:	b138      	cbz	r0, 800d982 <_vfiprintf_r+0x176>
 800d972:	9b04      	ldr	r3, [sp, #16]
 800d974:	eba0 000a 	sub.w	r0, r0, sl
 800d978:	2240      	movs	r2, #64	@ 0x40
 800d97a:	4082      	lsls	r2, r0
 800d97c:	4313      	orrs	r3, r2
 800d97e:	3401      	adds	r4, #1
 800d980:	9304      	str	r3, [sp, #16]
 800d982:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d986:	4829      	ldr	r0, [pc, #164]	@ (800da2c <_vfiprintf_r+0x220>)
 800d988:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d98c:	2206      	movs	r2, #6
 800d98e:	f7f2 fc37 	bl	8000200 <memchr>
 800d992:	2800      	cmp	r0, #0
 800d994:	d03f      	beq.n	800da16 <_vfiprintf_r+0x20a>
 800d996:	4b26      	ldr	r3, [pc, #152]	@ (800da30 <_vfiprintf_r+0x224>)
 800d998:	bb1b      	cbnz	r3, 800d9e2 <_vfiprintf_r+0x1d6>
 800d99a:	9b03      	ldr	r3, [sp, #12]
 800d99c:	3307      	adds	r3, #7
 800d99e:	f023 0307 	bic.w	r3, r3, #7
 800d9a2:	3308      	adds	r3, #8
 800d9a4:	9303      	str	r3, [sp, #12]
 800d9a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9a8:	443b      	add	r3, r7
 800d9aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9ac:	e76a      	b.n	800d884 <_vfiprintf_r+0x78>
 800d9ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9b2:	460c      	mov	r4, r1
 800d9b4:	2001      	movs	r0, #1
 800d9b6:	e7a8      	b.n	800d90a <_vfiprintf_r+0xfe>
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	3401      	adds	r4, #1
 800d9bc:	9305      	str	r3, [sp, #20]
 800d9be:	4619      	mov	r1, r3
 800d9c0:	f04f 0c0a 	mov.w	ip, #10
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9ca:	3a30      	subs	r2, #48	@ 0x30
 800d9cc:	2a09      	cmp	r2, #9
 800d9ce:	d903      	bls.n	800d9d8 <_vfiprintf_r+0x1cc>
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d0c6      	beq.n	800d962 <_vfiprintf_r+0x156>
 800d9d4:	9105      	str	r1, [sp, #20]
 800d9d6:	e7c4      	b.n	800d962 <_vfiprintf_r+0x156>
 800d9d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9dc:	4604      	mov	r4, r0
 800d9de:	2301      	movs	r3, #1
 800d9e0:	e7f0      	b.n	800d9c4 <_vfiprintf_r+0x1b8>
 800d9e2:	ab03      	add	r3, sp, #12
 800d9e4:	9300      	str	r3, [sp, #0]
 800d9e6:	462a      	mov	r2, r5
 800d9e8:	4b12      	ldr	r3, [pc, #72]	@ (800da34 <_vfiprintf_r+0x228>)
 800d9ea:	a904      	add	r1, sp, #16
 800d9ec:	4630      	mov	r0, r6
 800d9ee:	f3af 8000 	nop.w
 800d9f2:	4607      	mov	r7, r0
 800d9f4:	1c78      	adds	r0, r7, #1
 800d9f6:	d1d6      	bne.n	800d9a6 <_vfiprintf_r+0x19a>
 800d9f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d9fa:	07d9      	lsls	r1, r3, #31
 800d9fc:	d405      	bmi.n	800da0a <_vfiprintf_r+0x1fe>
 800d9fe:	89ab      	ldrh	r3, [r5, #12]
 800da00:	059a      	lsls	r2, r3, #22
 800da02:	d402      	bmi.n	800da0a <_vfiprintf_r+0x1fe>
 800da04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da06:	f7ff fd2b 	bl	800d460 <__retarget_lock_release_recursive>
 800da0a:	89ab      	ldrh	r3, [r5, #12]
 800da0c:	065b      	lsls	r3, r3, #25
 800da0e:	f53f af1f 	bmi.w	800d850 <_vfiprintf_r+0x44>
 800da12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800da14:	e71e      	b.n	800d854 <_vfiprintf_r+0x48>
 800da16:	ab03      	add	r3, sp, #12
 800da18:	9300      	str	r3, [sp, #0]
 800da1a:	462a      	mov	r2, r5
 800da1c:	4b05      	ldr	r3, [pc, #20]	@ (800da34 <_vfiprintf_r+0x228>)
 800da1e:	a904      	add	r1, sp, #16
 800da20:	4630      	mov	r0, r6
 800da22:	f000 f879 	bl	800db18 <_printf_i>
 800da26:	e7e4      	b.n	800d9f2 <_vfiprintf_r+0x1e6>
 800da28:	08010b0c 	.word	0x08010b0c
 800da2c:	08010b16 	.word	0x08010b16
 800da30:	00000000 	.word	0x00000000
 800da34:	0800d7e7 	.word	0x0800d7e7
 800da38:	08010b12 	.word	0x08010b12

0800da3c <_printf_common>:
 800da3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da40:	4616      	mov	r6, r2
 800da42:	4698      	mov	r8, r3
 800da44:	688a      	ldr	r2, [r1, #8]
 800da46:	690b      	ldr	r3, [r1, #16]
 800da48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800da4c:	4293      	cmp	r3, r2
 800da4e:	bfb8      	it	lt
 800da50:	4613      	movlt	r3, r2
 800da52:	6033      	str	r3, [r6, #0]
 800da54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800da58:	4607      	mov	r7, r0
 800da5a:	460c      	mov	r4, r1
 800da5c:	b10a      	cbz	r2, 800da62 <_printf_common+0x26>
 800da5e:	3301      	adds	r3, #1
 800da60:	6033      	str	r3, [r6, #0]
 800da62:	6823      	ldr	r3, [r4, #0]
 800da64:	0699      	lsls	r1, r3, #26
 800da66:	bf42      	ittt	mi
 800da68:	6833      	ldrmi	r3, [r6, #0]
 800da6a:	3302      	addmi	r3, #2
 800da6c:	6033      	strmi	r3, [r6, #0]
 800da6e:	6825      	ldr	r5, [r4, #0]
 800da70:	f015 0506 	ands.w	r5, r5, #6
 800da74:	d106      	bne.n	800da84 <_printf_common+0x48>
 800da76:	f104 0a19 	add.w	sl, r4, #25
 800da7a:	68e3      	ldr	r3, [r4, #12]
 800da7c:	6832      	ldr	r2, [r6, #0]
 800da7e:	1a9b      	subs	r3, r3, r2
 800da80:	42ab      	cmp	r3, r5
 800da82:	dc26      	bgt.n	800dad2 <_printf_common+0x96>
 800da84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800da88:	6822      	ldr	r2, [r4, #0]
 800da8a:	3b00      	subs	r3, #0
 800da8c:	bf18      	it	ne
 800da8e:	2301      	movne	r3, #1
 800da90:	0692      	lsls	r2, r2, #26
 800da92:	d42b      	bmi.n	800daec <_printf_common+0xb0>
 800da94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800da98:	4641      	mov	r1, r8
 800da9a:	4638      	mov	r0, r7
 800da9c:	47c8      	blx	r9
 800da9e:	3001      	adds	r0, #1
 800daa0:	d01e      	beq.n	800dae0 <_printf_common+0xa4>
 800daa2:	6823      	ldr	r3, [r4, #0]
 800daa4:	6922      	ldr	r2, [r4, #16]
 800daa6:	f003 0306 	and.w	r3, r3, #6
 800daaa:	2b04      	cmp	r3, #4
 800daac:	bf02      	ittt	eq
 800daae:	68e5      	ldreq	r5, [r4, #12]
 800dab0:	6833      	ldreq	r3, [r6, #0]
 800dab2:	1aed      	subeq	r5, r5, r3
 800dab4:	68a3      	ldr	r3, [r4, #8]
 800dab6:	bf0c      	ite	eq
 800dab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dabc:	2500      	movne	r5, #0
 800dabe:	4293      	cmp	r3, r2
 800dac0:	bfc4      	itt	gt
 800dac2:	1a9b      	subgt	r3, r3, r2
 800dac4:	18ed      	addgt	r5, r5, r3
 800dac6:	2600      	movs	r6, #0
 800dac8:	341a      	adds	r4, #26
 800daca:	42b5      	cmp	r5, r6
 800dacc:	d11a      	bne.n	800db04 <_printf_common+0xc8>
 800dace:	2000      	movs	r0, #0
 800dad0:	e008      	b.n	800dae4 <_printf_common+0xa8>
 800dad2:	2301      	movs	r3, #1
 800dad4:	4652      	mov	r2, sl
 800dad6:	4641      	mov	r1, r8
 800dad8:	4638      	mov	r0, r7
 800dada:	47c8      	blx	r9
 800dadc:	3001      	adds	r0, #1
 800dade:	d103      	bne.n	800dae8 <_printf_common+0xac>
 800dae0:	f04f 30ff 	mov.w	r0, #4294967295
 800dae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dae8:	3501      	adds	r5, #1
 800daea:	e7c6      	b.n	800da7a <_printf_common+0x3e>
 800daec:	18e1      	adds	r1, r4, r3
 800daee:	1c5a      	adds	r2, r3, #1
 800daf0:	2030      	movs	r0, #48	@ 0x30
 800daf2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800daf6:	4422      	add	r2, r4
 800daf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dafc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800db00:	3302      	adds	r3, #2
 800db02:	e7c7      	b.n	800da94 <_printf_common+0x58>
 800db04:	2301      	movs	r3, #1
 800db06:	4622      	mov	r2, r4
 800db08:	4641      	mov	r1, r8
 800db0a:	4638      	mov	r0, r7
 800db0c:	47c8      	blx	r9
 800db0e:	3001      	adds	r0, #1
 800db10:	d0e6      	beq.n	800dae0 <_printf_common+0xa4>
 800db12:	3601      	adds	r6, #1
 800db14:	e7d9      	b.n	800daca <_printf_common+0x8e>
	...

0800db18 <_printf_i>:
 800db18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db1c:	7e0f      	ldrb	r7, [r1, #24]
 800db1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800db20:	2f78      	cmp	r7, #120	@ 0x78
 800db22:	4691      	mov	r9, r2
 800db24:	4680      	mov	r8, r0
 800db26:	460c      	mov	r4, r1
 800db28:	469a      	mov	sl, r3
 800db2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800db2e:	d807      	bhi.n	800db40 <_printf_i+0x28>
 800db30:	2f62      	cmp	r7, #98	@ 0x62
 800db32:	d80a      	bhi.n	800db4a <_printf_i+0x32>
 800db34:	2f00      	cmp	r7, #0
 800db36:	f000 80d2 	beq.w	800dcde <_printf_i+0x1c6>
 800db3a:	2f58      	cmp	r7, #88	@ 0x58
 800db3c:	f000 80b9 	beq.w	800dcb2 <_printf_i+0x19a>
 800db40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800db48:	e03a      	b.n	800dbc0 <_printf_i+0xa8>
 800db4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800db4e:	2b15      	cmp	r3, #21
 800db50:	d8f6      	bhi.n	800db40 <_printf_i+0x28>
 800db52:	a101      	add	r1, pc, #4	@ (adr r1, 800db58 <_printf_i+0x40>)
 800db54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db58:	0800dbb1 	.word	0x0800dbb1
 800db5c:	0800dbc5 	.word	0x0800dbc5
 800db60:	0800db41 	.word	0x0800db41
 800db64:	0800db41 	.word	0x0800db41
 800db68:	0800db41 	.word	0x0800db41
 800db6c:	0800db41 	.word	0x0800db41
 800db70:	0800dbc5 	.word	0x0800dbc5
 800db74:	0800db41 	.word	0x0800db41
 800db78:	0800db41 	.word	0x0800db41
 800db7c:	0800db41 	.word	0x0800db41
 800db80:	0800db41 	.word	0x0800db41
 800db84:	0800dcc5 	.word	0x0800dcc5
 800db88:	0800dbef 	.word	0x0800dbef
 800db8c:	0800dc7f 	.word	0x0800dc7f
 800db90:	0800db41 	.word	0x0800db41
 800db94:	0800db41 	.word	0x0800db41
 800db98:	0800dce7 	.word	0x0800dce7
 800db9c:	0800db41 	.word	0x0800db41
 800dba0:	0800dbef 	.word	0x0800dbef
 800dba4:	0800db41 	.word	0x0800db41
 800dba8:	0800db41 	.word	0x0800db41
 800dbac:	0800dc87 	.word	0x0800dc87
 800dbb0:	6833      	ldr	r3, [r6, #0]
 800dbb2:	1d1a      	adds	r2, r3, #4
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	6032      	str	r2, [r6, #0]
 800dbb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dbbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	e09d      	b.n	800dd00 <_printf_i+0x1e8>
 800dbc4:	6833      	ldr	r3, [r6, #0]
 800dbc6:	6820      	ldr	r0, [r4, #0]
 800dbc8:	1d19      	adds	r1, r3, #4
 800dbca:	6031      	str	r1, [r6, #0]
 800dbcc:	0606      	lsls	r6, r0, #24
 800dbce:	d501      	bpl.n	800dbd4 <_printf_i+0xbc>
 800dbd0:	681d      	ldr	r5, [r3, #0]
 800dbd2:	e003      	b.n	800dbdc <_printf_i+0xc4>
 800dbd4:	0645      	lsls	r5, r0, #25
 800dbd6:	d5fb      	bpl.n	800dbd0 <_printf_i+0xb8>
 800dbd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dbdc:	2d00      	cmp	r5, #0
 800dbde:	da03      	bge.n	800dbe8 <_printf_i+0xd0>
 800dbe0:	232d      	movs	r3, #45	@ 0x2d
 800dbe2:	426d      	negs	r5, r5
 800dbe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dbe8:	4859      	ldr	r0, [pc, #356]	@ (800dd50 <_printf_i+0x238>)
 800dbea:	230a      	movs	r3, #10
 800dbec:	e011      	b.n	800dc12 <_printf_i+0xfa>
 800dbee:	6821      	ldr	r1, [r4, #0]
 800dbf0:	6833      	ldr	r3, [r6, #0]
 800dbf2:	0608      	lsls	r0, r1, #24
 800dbf4:	f853 5b04 	ldr.w	r5, [r3], #4
 800dbf8:	d402      	bmi.n	800dc00 <_printf_i+0xe8>
 800dbfa:	0649      	lsls	r1, r1, #25
 800dbfc:	bf48      	it	mi
 800dbfe:	b2ad      	uxthmi	r5, r5
 800dc00:	2f6f      	cmp	r7, #111	@ 0x6f
 800dc02:	4853      	ldr	r0, [pc, #332]	@ (800dd50 <_printf_i+0x238>)
 800dc04:	6033      	str	r3, [r6, #0]
 800dc06:	bf14      	ite	ne
 800dc08:	230a      	movne	r3, #10
 800dc0a:	2308      	moveq	r3, #8
 800dc0c:	2100      	movs	r1, #0
 800dc0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dc12:	6866      	ldr	r6, [r4, #4]
 800dc14:	60a6      	str	r6, [r4, #8]
 800dc16:	2e00      	cmp	r6, #0
 800dc18:	bfa2      	ittt	ge
 800dc1a:	6821      	ldrge	r1, [r4, #0]
 800dc1c:	f021 0104 	bicge.w	r1, r1, #4
 800dc20:	6021      	strge	r1, [r4, #0]
 800dc22:	b90d      	cbnz	r5, 800dc28 <_printf_i+0x110>
 800dc24:	2e00      	cmp	r6, #0
 800dc26:	d04b      	beq.n	800dcc0 <_printf_i+0x1a8>
 800dc28:	4616      	mov	r6, r2
 800dc2a:	fbb5 f1f3 	udiv	r1, r5, r3
 800dc2e:	fb03 5711 	mls	r7, r3, r1, r5
 800dc32:	5dc7      	ldrb	r7, [r0, r7]
 800dc34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dc38:	462f      	mov	r7, r5
 800dc3a:	42bb      	cmp	r3, r7
 800dc3c:	460d      	mov	r5, r1
 800dc3e:	d9f4      	bls.n	800dc2a <_printf_i+0x112>
 800dc40:	2b08      	cmp	r3, #8
 800dc42:	d10b      	bne.n	800dc5c <_printf_i+0x144>
 800dc44:	6823      	ldr	r3, [r4, #0]
 800dc46:	07df      	lsls	r7, r3, #31
 800dc48:	d508      	bpl.n	800dc5c <_printf_i+0x144>
 800dc4a:	6923      	ldr	r3, [r4, #16]
 800dc4c:	6861      	ldr	r1, [r4, #4]
 800dc4e:	4299      	cmp	r1, r3
 800dc50:	bfde      	ittt	le
 800dc52:	2330      	movle	r3, #48	@ 0x30
 800dc54:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dc58:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dc5c:	1b92      	subs	r2, r2, r6
 800dc5e:	6122      	str	r2, [r4, #16]
 800dc60:	f8cd a000 	str.w	sl, [sp]
 800dc64:	464b      	mov	r3, r9
 800dc66:	aa03      	add	r2, sp, #12
 800dc68:	4621      	mov	r1, r4
 800dc6a:	4640      	mov	r0, r8
 800dc6c:	f7ff fee6 	bl	800da3c <_printf_common>
 800dc70:	3001      	adds	r0, #1
 800dc72:	d14a      	bne.n	800dd0a <_printf_i+0x1f2>
 800dc74:	f04f 30ff 	mov.w	r0, #4294967295
 800dc78:	b004      	add	sp, #16
 800dc7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc7e:	6823      	ldr	r3, [r4, #0]
 800dc80:	f043 0320 	orr.w	r3, r3, #32
 800dc84:	6023      	str	r3, [r4, #0]
 800dc86:	4833      	ldr	r0, [pc, #204]	@ (800dd54 <_printf_i+0x23c>)
 800dc88:	2778      	movs	r7, #120	@ 0x78
 800dc8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dc8e:	6823      	ldr	r3, [r4, #0]
 800dc90:	6831      	ldr	r1, [r6, #0]
 800dc92:	061f      	lsls	r7, r3, #24
 800dc94:	f851 5b04 	ldr.w	r5, [r1], #4
 800dc98:	d402      	bmi.n	800dca0 <_printf_i+0x188>
 800dc9a:	065f      	lsls	r7, r3, #25
 800dc9c:	bf48      	it	mi
 800dc9e:	b2ad      	uxthmi	r5, r5
 800dca0:	6031      	str	r1, [r6, #0]
 800dca2:	07d9      	lsls	r1, r3, #31
 800dca4:	bf44      	itt	mi
 800dca6:	f043 0320 	orrmi.w	r3, r3, #32
 800dcaa:	6023      	strmi	r3, [r4, #0]
 800dcac:	b11d      	cbz	r5, 800dcb6 <_printf_i+0x19e>
 800dcae:	2310      	movs	r3, #16
 800dcb0:	e7ac      	b.n	800dc0c <_printf_i+0xf4>
 800dcb2:	4827      	ldr	r0, [pc, #156]	@ (800dd50 <_printf_i+0x238>)
 800dcb4:	e7e9      	b.n	800dc8a <_printf_i+0x172>
 800dcb6:	6823      	ldr	r3, [r4, #0]
 800dcb8:	f023 0320 	bic.w	r3, r3, #32
 800dcbc:	6023      	str	r3, [r4, #0]
 800dcbe:	e7f6      	b.n	800dcae <_printf_i+0x196>
 800dcc0:	4616      	mov	r6, r2
 800dcc2:	e7bd      	b.n	800dc40 <_printf_i+0x128>
 800dcc4:	6833      	ldr	r3, [r6, #0]
 800dcc6:	6825      	ldr	r5, [r4, #0]
 800dcc8:	6961      	ldr	r1, [r4, #20]
 800dcca:	1d18      	adds	r0, r3, #4
 800dccc:	6030      	str	r0, [r6, #0]
 800dcce:	062e      	lsls	r6, r5, #24
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	d501      	bpl.n	800dcd8 <_printf_i+0x1c0>
 800dcd4:	6019      	str	r1, [r3, #0]
 800dcd6:	e002      	b.n	800dcde <_printf_i+0x1c6>
 800dcd8:	0668      	lsls	r0, r5, #25
 800dcda:	d5fb      	bpl.n	800dcd4 <_printf_i+0x1bc>
 800dcdc:	8019      	strh	r1, [r3, #0]
 800dcde:	2300      	movs	r3, #0
 800dce0:	6123      	str	r3, [r4, #16]
 800dce2:	4616      	mov	r6, r2
 800dce4:	e7bc      	b.n	800dc60 <_printf_i+0x148>
 800dce6:	6833      	ldr	r3, [r6, #0]
 800dce8:	1d1a      	adds	r2, r3, #4
 800dcea:	6032      	str	r2, [r6, #0]
 800dcec:	681e      	ldr	r6, [r3, #0]
 800dcee:	6862      	ldr	r2, [r4, #4]
 800dcf0:	2100      	movs	r1, #0
 800dcf2:	4630      	mov	r0, r6
 800dcf4:	f7f2 fa84 	bl	8000200 <memchr>
 800dcf8:	b108      	cbz	r0, 800dcfe <_printf_i+0x1e6>
 800dcfa:	1b80      	subs	r0, r0, r6
 800dcfc:	6060      	str	r0, [r4, #4]
 800dcfe:	6863      	ldr	r3, [r4, #4]
 800dd00:	6123      	str	r3, [r4, #16]
 800dd02:	2300      	movs	r3, #0
 800dd04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd08:	e7aa      	b.n	800dc60 <_printf_i+0x148>
 800dd0a:	6923      	ldr	r3, [r4, #16]
 800dd0c:	4632      	mov	r2, r6
 800dd0e:	4649      	mov	r1, r9
 800dd10:	4640      	mov	r0, r8
 800dd12:	47d0      	blx	sl
 800dd14:	3001      	adds	r0, #1
 800dd16:	d0ad      	beq.n	800dc74 <_printf_i+0x15c>
 800dd18:	6823      	ldr	r3, [r4, #0]
 800dd1a:	079b      	lsls	r3, r3, #30
 800dd1c:	d413      	bmi.n	800dd46 <_printf_i+0x22e>
 800dd1e:	68e0      	ldr	r0, [r4, #12]
 800dd20:	9b03      	ldr	r3, [sp, #12]
 800dd22:	4298      	cmp	r0, r3
 800dd24:	bfb8      	it	lt
 800dd26:	4618      	movlt	r0, r3
 800dd28:	e7a6      	b.n	800dc78 <_printf_i+0x160>
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	4632      	mov	r2, r6
 800dd2e:	4649      	mov	r1, r9
 800dd30:	4640      	mov	r0, r8
 800dd32:	47d0      	blx	sl
 800dd34:	3001      	adds	r0, #1
 800dd36:	d09d      	beq.n	800dc74 <_printf_i+0x15c>
 800dd38:	3501      	adds	r5, #1
 800dd3a:	68e3      	ldr	r3, [r4, #12]
 800dd3c:	9903      	ldr	r1, [sp, #12]
 800dd3e:	1a5b      	subs	r3, r3, r1
 800dd40:	42ab      	cmp	r3, r5
 800dd42:	dcf2      	bgt.n	800dd2a <_printf_i+0x212>
 800dd44:	e7eb      	b.n	800dd1e <_printf_i+0x206>
 800dd46:	2500      	movs	r5, #0
 800dd48:	f104 0619 	add.w	r6, r4, #25
 800dd4c:	e7f5      	b.n	800dd3a <_printf_i+0x222>
 800dd4e:	bf00      	nop
 800dd50:	08010b1d 	.word	0x08010b1d
 800dd54:	08010b2e 	.word	0x08010b2e

0800dd58 <__sflush_r>:
 800dd58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd60:	0716      	lsls	r6, r2, #28
 800dd62:	4605      	mov	r5, r0
 800dd64:	460c      	mov	r4, r1
 800dd66:	d454      	bmi.n	800de12 <__sflush_r+0xba>
 800dd68:	684b      	ldr	r3, [r1, #4]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	dc02      	bgt.n	800dd74 <__sflush_r+0x1c>
 800dd6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	dd48      	ble.n	800de06 <__sflush_r+0xae>
 800dd74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dd76:	2e00      	cmp	r6, #0
 800dd78:	d045      	beq.n	800de06 <__sflush_r+0xae>
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dd80:	682f      	ldr	r7, [r5, #0]
 800dd82:	6a21      	ldr	r1, [r4, #32]
 800dd84:	602b      	str	r3, [r5, #0]
 800dd86:	d030      	beq.n	800ddea <__sflush_r+0x92>
 800dd88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dd8a:	89a3      	ldrh	r3, [r4, #12]
 800dd8c:	0759      	lsls	r1, r3, #29
 800dd8e:	d505      	bpl.n	800dd9c <__sflush_r+0x44>
 800dd90:	6863      	ldr	r3, [r4, #4]
 800dd92:	1ad2      	subs	r2, r2, r3
 800dd94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dd96:	b10b      	cbz	r3, 800dd9c <__sflush_r+0x44>
 800dd98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dd9a:	1ad2      	subs	r2, r2, r3
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dda0:	6a21      	ldr	r1, [r4, #32]
 800dda2:	4628      	mov	r0, r5
 800dda4:	47b0      	blx	r6
 800dda6:	1c43      	adds	r3, r0, #1
 800dda8:	89a3      	ldrh	r3, [r4, #12]
 800ddaa:	d106      	bne.n	800ddba <__sflush_r+0x62>
 800ddac:	6829      	ldr	r1, [r5, #0]
 800ddae:	291d      	cmp	r1, #29
 800ddb0:	d82b      	bhi.n	800de0a <__sflush_r+0xb2>
 800ddb2:	4a2a      	ldr	r2, [pc, #168]	@ (800de5c <__sflush_r+0x104>)
 800ddb4:	410a      	asrs	r2, r1
 800ddb6:	07d6      	lsls	r6, r2, #31
 800ddb8:	d427      	bmi.n	800de0a <__sflush_r+0xb2>
 800ddba:	2200      	movs	r2, #0
 800ddbc:	6062      	str	r2, [r4, #4]
 800ddbe:	04d9      	lsls	r1, r3, #19
 800ddc0:	6922      	ldr	r2, [r4, #16]
 800ddc2:	6022      	str	r2, [r4, #0]
 800ddc4:	d504      	bpl.n	800ddd0 <__sflush_r+0x78>
 800ddc6:	1c42      	adds	r2, r0, #1
 800ddc8:	d101      	bne.n	800ddce <__sflush_r+0x76>
 800ddca:	682b      	ldr	r3, [r5, #0]
 800ddcc:	b903      	cbnz	r3, 800ddd0 <__sflush_r+0x78>
 800ddce:	6560      	str	r0, [r4, #84]	@ 0x54
 800ddd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ddd2:	602f      	str	r7, [r5, #0]
 800ddd4:	b1b9      	cbz	r1, 800de06 <__sflush_r+0xae>
 800ddd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ddda:	4299      	cmp	r1, r3
 800dddc:	d002      	beq.n	800dde4 <__sflush_r+0x8c>
 800ddde:	4628      	mov	r0, r5
 800dde0:	f7ff fb48 	bl	800d474 <_free_r>
 800dde4:	2300      	movs	r3, #0
 800dde6:	6363      	str	r3, [r4, #52]	@ 0x34
 800dde8:	e00d      	b.n	800de06 <__sflush_r+0xae>
 800ddea:	2301      	movs	r3, #1
 800ddec:	4628      	mov	r0, r5
 800ddee:	47b0      	blx	r6
 800ddf0:	4602      	mov	r2, r0
 800ddf2:	1c50      	adds	r0, r2, #1
 800ddf4:	d1c9      	bne.n	800dd8a <__sflush_r+0x32>
 800ddf6:	682b      	ldr	r3, [r5, #0]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d0c6      	beq.n	800dd8a <__sflush_r+0x32>
 800ddfc:	2b1d      	cmp	r3, #29
 800ddfe:	d001      	beq.n	800de04 <__sflush_r+0xac>
 800de00:	2b16      	cmp	r3, #22
 800de02:	d11e      	bne.n	800de42 <__sflush_r+0xea>
 800de04:	602f      	str	r7, [r5, #0]
 800de06:	2000      	movs	r0, #0
 800de08:	e022      	b.n	800de50 <__sflush_r+0xf8>
 800de0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de0e:	b21b      	sxth	r3, r3
 800de10:	e01b      	b.n	800de4a <__sflush_r+0xf2>
 800de12:	690f      	ldr	r7, [r1, #16]
 800de14:	2f00      	cmp	r7, #0
 800de16:	d0f6      	beq.n	800de06 <__sflush_r+0xae>
 800de18:	0793      	lsls	r3, r2, #30
 800de1a:	680e      	ldr	r6, [r1, #0]
 800de1c:	bf08      	it	eq
 800de1e:	694b      	ldreq	r3, [r1, #20]
 800de20:	600f      	str	r7, [r1, #0]
 800de22:	bf18      	it	ne
 800de24:	2300      	movne	r3, #0
 800de26:	eba6 0807 	sub.w	r8, r6, r7
 800de2a:	608b      	str	r3, [r1, #8]
 800de2c:	f1b8 0f00 	cmp.w	r8, #0
 800de30:	dde9      	ble.n	800de06 <__sflush_r+0xae>
 800de32:	6a21      	ldr	r1, [r4, #32]
 800de34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800de36:	4643      	mov	r3, r8
 800de38:	463a      	mov	r2, r7
 800de3a:	4628      	mov	r0, r5
 800de3c:	47b0      	blx	r6
 800de3e:	2800      	cmp	r0, #0
 800de40:	dc08      	bgt.n	800de54 <__sflush_r+0xfc>
 800de42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de4a:	81a3      	strh	r3, [r4, #12]
 800de4c:	f04f 30ff 	mov.w	r0, #4294967295
 800de50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de54:	4407      	add	r7, r0
 800de56:	eba8 0800 	sub.w	r8, r8, r0
 800de5a:	e7e7      	b.n	800de2c <__sflush_r+0xd4>
 800de5c:	dfbffffe 	.word	0xdfbffffe

0800de60 <_fflush_r>:
 800de60:	b538      	push	{r3, r4, r5, lr}
 800de62:	690b      	ldr	r3, [r1, #16]
 800de64:	4605      	mov	r5, r0
 800de66:	460c      	mov	r4, r1
 800de68:	b913      	cbnz	r3, 800de70 <_fflush_r+0x10>
 800de6a:	2500      	movs	r5, #0
 800de6c:	4628      	mov	r0, r5
 800de6e:	bd38      	pop	{r3, r4, r5, pc}
 800de70:	b118      	cbz	r0, 800de7a <_fflush_r+0x1a>
 800de72:	6a03      	ldr	r3, [r0, #32]
 800de74:	b90b      	cbnz	r3, 800de7a <_fflush_r+0x1a>
 800de76:	f7ff f8a3 	bl	800cfc0 <__sinit>
 800de7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d0f3      	beq.n	800de6a <_fflush_r+0xa>
 800de82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800de84:	07d0      	lsls	r0, r2, #31
 800de86:	d404      	bmi.n	800de92 <_fflush_r+0x32>
 800de88:	0599      	lsls	r1, r3, #22
 800de8a:	d402      	bmi.n	800de92 <_fflush_r+0x32>
 800de8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de8e:	f7ff fae6 	bl	800d45e <__retarget_lock_acquire_recursive>
 800de92:	4628      	mov	r0, r5
 800de94:	4621      	mov	r1, r4
 800de96:	f7ff ff5f 	bl	800dd58 <__sflush_r>
 800de9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800de9c:	07da      	lsls	r2, r3, #31
 800de9e:	4605      	mov	r5, r0
 800dea0:	d4e4      	bmi.n	800de6c <_fflush_r+0xc>
 800dea2:	89a3      	ldrh	r3, [r4, #12]
 800dea4:	059b      	lsls	r3, r3, #22
 800dea6:	d4e1      	bmi.n	800de6c <_fflush_r+0xc>
 800dea8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800deaa:	f7ff fad9 	bl	800d460 <__retarget_lock_release_recursive>
 800deae:	e7dd      	b.n	800de6c <_fflush_r+0xc>

0800deb0 <__swhatbuf_r>:
 800deb0:	b570      	push	{r4, r5, r6, lr}
 800deb2:	460c      	mov	r4, r1
 800deb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deb8:	2900      	cmp	r1, #0
 800deba:	b096      	sub	sp, #88	@ 0x58
 800debc:	4615      	mov	r5, r2
 800debe:	461e      	mov	r6, r3
 800dec0:	da0d      	bge.n	800dede <__swhatbuf_r+0x2e>
 800dec2:	89a3      	ldrh	r3, [r4, #12]
 800dec4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dec8:	f04f 0100 	mov.w	r1, #0
 800decc:	bf14      	ite	ne
 800dece:	2340      	movne	r3, #64	@ 0x40
 800ded0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ded4:	2000      	movs	r0, #0
 800ded6:	6031      	str	r1, [r6, #0]
 800ded8:	602b      	str	r3, [r5, #0]
 800deda:	b016      	add	sp, #88	@ 0x58
 800dedc:	bd70      	pop	{r4, r5, r6, pc}
 800dede:	466a      	mov	r2, sp
 800dee0:	f000 f896 	bl	800e010 <_fstat_r>
 800dee4:	2800      	cmp	r0, #0
 800dee6:	dbec      	blt.n	800dec2 <__swhatbuf_r+0x12>
 800dee8:	9901      	ldr	r1, [sp, #4]
 800deea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800deee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800def2:	4259      	negs	r1, r3
 800def4:	4159      	adcs	r1, r3
 800def6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800defa:	e7eb      	b.n	800ded4 <__swhatbuf_r+0x24>

0800defc <__smakebuf_r>:
 800defc:	898b      	ldrh	r3, [r1, #12]
 800defe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df00:	079d      	lsls	r5, r3, #30
 800df02:	4606      	mov	r6, r0
 800df04:	460c      	mov	r4, r1
 800df06:	d507      	bpl.n	800df18 <__smakebuf_r+0x1c>
 800df08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800df0c:	6023      	str	r3, [r4, #0]
 800df0e:	6123      	str	r3, [r4, #16]
 800df10:	2301      	movs	r3, #1
 800df12:	6163      	str	r3, [r4, #20]
 800df14:	b003      	add	sp, #12
 800df16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df18:	ab01      	add	r3, sp, #4
 800df1a:	466a      	mov	r2, sp
 800df1c:	f7ff ffc8 	bl	800deb0 <__swhatbuf_r>
 800df20:	9f00      	ldr	r7, [sp, #0]
 800df22:	4605      	mov	r5, r0
 800df24:	4639      	mov	r1, r7
 800df26:	4630      	mov	r0, r6
 800df28:	f7fe ff32 	bl	800cd90 <_malloc_r>
 800df2c:	b948      	cbnz	r0, 800df42 <__smakebuf_r+0x46>
 800df2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df32:	059a      	lsls	r2, r3, #22
 800df34:	d4ee      	bmi.n	800df14 <__smakebuf_r+0x18>
 800df36:	f023 0303 	bic.w	r3, r3, #3
 800df3a:	f043 0302 	orr.w	r3, r3, #2
 800df3e:	81a3      	strh	r3, [r4, #12]
 800df40:	e7e2      	b.n	800df08 <__smakebuf_r+0xc>
 800df42:	89a3      	ldrh	r3, [r4, #12]
 800df44:	6020      	str	r0, [r4, #0]
 800df46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df4a:	81a3      	strh	r3, [r4, #12]
 800df4c:	9b01      	ldr	r3, [sp, #4]
 800df4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800df52:	b15b      	cbz	r3, 800df6c <__smakebuf_r+0x70>
 800df54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df58:	4630      	mov	r0, r6
 800df5a:	f000 f86b 	bl	800e034 <_isatty_r>
 800df5e:	b128      	cbz	r0, 800df6c <__smakebuf_r+0x70>
 800df60:	89a3      	ldrh	r3, [r4, #12]
 800df62:	f023 0303 	bic.w	r3, r3, #3
 800df66:	f043 0301 	orr.w	r3, r3, #1
 800df6a:	81a3      	strh	r3, [r4, #12]
 800df6c:	89a3      	ldrh	r3, [r4, #12]
 800df6e:	431d      	orrs	r5, r3
 800df70:	81a5      	strh	r5, [r4, #12]
 800df72:	e7cf      	b.n	800df14 <__smakebuf_r+0x18>

0800df74 <_putc_r>:
 800df74:	b570      	push	{r4, r5, r6, lr}
 800df76:	460d      	mov	r5, r1
 800df78:	4614      	mov	r4, r2
 800df7a:	4606      	mov	r6, r0
 800df7c:	b118      	cbz	r0, 800df86 <_putc_r+0x12>
 800df7e:	6a03      	ldr	r3, [r0, #32]
 800df80:	b90b      	cbnz	r3, 800df86 <_putc_r+0x12>
 800df82:	f7ff f81d 	bl	800cfc0 <__sinit>
 800df86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df88:	07d8      	lsls	r0, r3, #31
 800df8a:	d405      	bmi.n	800df98 <_putc_r+0x24>
 800df8c:	89a3      	ldrh	r3, [r4, #12]
 800df8e:	0599      	lsls	r1, r3, #22
 800df90:	d402      	bmi.n	800df98 <_putc_r+0x24>
 800df92:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df94:	f7ff fa63 	bl	800d45e <__retarget_lock_acquire_recursive>
 800df98:	68a3      	ldr	r3, [r4, #8]
 800df9a:	3b01      	subs	r3, #1
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	60a3      	str	r3, [r4, #8]
 800dfa0:	da05      	bge.n	800dfae <_putc_r+0x3a>
 800dfa2:	69a2      	ldr	r2, [r4, #24]
 800dfa4:	4293      	cmp	r3, r2
 800dfa6:	db12      	blt.n	800dfce <_putc_r+0x5a>
 800dfa8:	b2eb      	uxtb	r3, r5
 800dfaa:	2b0a      	cmp	r3, #10
 800dfac:	d00f      	beq.n	800dfce <_putc_r+0x5a>
 800dfae:	6823      	ldr	r3, [r4, #0]
 800dfb0:	1c5a      	adds	r2, r3, #1
 800dfb2:	6022      	str	r2, [r4, #0]
 800dfb4:	701d      	strb	r5, [r3, #0]
 800dfb6:	b2ed      	uxtb	r5, r5
 800dfb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dfba:	07da      	lsls	r2, r3, #31
 800dfbc:	d405      	bmi.n	800dfca <_putc_r+0x56>
 800dfbe:	89a3      	ldrh	r3, [r4, #12]
 800dfc0:	059b      	lsls	r3, r3, #22
 800dfc2:	d402      	bmi.n	800dfca <_putc_r+0x56>
 800dfc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dfc6:	f7ff fa4b 	bl	800d460 <__retarget_lock_release_recursive>
 800dfca:	4628      	mov	r0, r5
 800dfcc:	bd70      	pop	{r4, r5, r6, pc}
 800dfce:	4629      	mov	r1, r5
 800dfd0:	4622      	mov	r2, r4
 800dfd2:	4630      	mov	r0, r6
 800dfd4:	f7ff f926 	bl	800d224 <__swbuf_r>
 800dfd8:	4605      	mov	r5, r0
 800dfda:	e7ed      	b.n	800dfb8 <_putc_r+0x44>

0800dfdc <memmove>:
 800dfdc:	4288      	cmp	r0, r1
 800dfde:	b510      	push	{r4, lr}
 800dfe0:	eb01 0402 	add.w	r4, r1, r2
 800dfe4:	d902      	bls.n	800dfec <memmove+0x10>
 800dfe6:	4284      	cmp	r4, r0
 800dfe8:	4623      	mov	r3, r4
 800dfea:	d807      	bhi.n	800dffc <memmove+0x20>
 800dfec:	1e43      	subs	r3, r0, #1
 800dfee:	42a1      	cmp	r1, r4
 800dff0:	d008      	beq.n	800e004 <memmove+0x28>
 800dff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dff6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dffa:	e7f8      	b.n	800dfee <memmove+0x12>
 800dffc:	4402      	add	r2, r0
 800dffe:	4601      	mov	r1, r0
 800e000:	428a      	cmp	r2, r1
 800e002:	d100      	bne.n	800e006 <memmove+0x2a>
 800e004:	bd10      	pop	{r4, pc}
 800e006:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e00a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e00e:	e7f7      	b.n	800e000 <memmove+0x24>

0800e010 <_fstat_r>:
 800e010:	b538      	push	{r3, r4, r5, lr}
 800e012:	4d07      	ldr	r5, [pc, #28]	@ (800e030 <_fstat_r+0x20>)
 800e014:	2300      	movs	r3, #0
 800e016:	4604      	mov	r4, r0
 800e018:	4608      	mov	r0, r1
 800e01a:	4611      	mov	r1, r2
 800e01c:	602b      	str	r3, [r5, #0]
 800e01e:	f7f5 fae8 	bl	80035f2 <_fstat>
 800e022:	1c43      	adds	r3, r0, #1
 800e024:	d102      	bne.n	800e02c <_fstat_r+0x1c>
 800e026:	682b      	ldr	r3, [r5, #0]
 800e028:	b103      	cbz	r3, 800e02c <_fstat_r+0x1c>
 800e02a:	6023      	str	r3, [r4, #0]
 800e02c:	bd38      	pop	{r3, r4, r5, pc}
 800e02e:	bf00      	nop
 800e030:	20012178 	.word	0x20012178

0800e034 <_isatty_r>:
 800e034:	b538      	push	{r3, r4, r5, lr}
 800e036:	4d06      	ldr	r5, [pc, #24]	@ (800e050 <_isatty_r+0x1c>)
 800e038:	2300      	movs	r3, #0
 800e03a:	4604      	mov	r4, r0
 800e03c:	4608      	mov	r0, r1
 800e03e:	602b      	str	r3, [r5, #0]
 800e040:	f7f5 fae7 	bl	8003612 <_isatty>
 800e044:	1c43      	adds	r3, r0, #1
 800e046:	d102      	bne.n	800e04e <_isatty_r+0x1a>
 800e048:	682b      	ldr	r3, [r5, #0]
 800e04a:	b103      	cbz	r3, 800e04e <_isatty_r+0x1a>
 800e04c:	6023      	str	r3, [r4, #0]
 800e04e:	bd38      	pop	{r3, r4, r5, pc}
 800e050:	20012178 	.word	0x20012178

0800e054 <memcpy>:
 800e054:	440a      	add	r2, r1
 800e056:	4291      	cmp	r1, r2
 800e058:	f100 33ff 	add.w	r3, r0, #4294967295
 800e05c:	d100      	bne.n	800e060 <memcpy+0xc>
 800e05e:	4770      	bx	lr
 800e060:	b510      	push	{r4, lr}
 800e062:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e066:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e06a:	4291      	cmp	r1, r2
 800e06c:	d1f9      	bne.n	800e062 <memcpy+0xe>
 800e06e:	bd10      	pop	{r4, pc}

0800e070 <_realloc_r>:
 800e070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e074:	4680      	mov	r8, r0
 800e076:	4615      	mov	r5, r2
 800e078:	460c      	mov	r4, r1
 800e07a:	b921      	cbnz	r1, 800e086 <_realloc_r+0x16>
 800e07c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e080:	4611      	mov	r1, r2
 800e082:	f7fe be85 	b.w	800cd90 <_malloc_r>
 800e086:	b92a      	cbnz	r2, 800e094 <_realloc_r+0x24>
 800e088:	f7ff f9f4 	bl	800d474 <_free_r>
 800e08c:	2400      	movs	r4, #0
 800e08e:	4620      	mov	r0, r4
 800e090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e094:	f000 f81a 	bl	800e0cc <_malloc_usable_size_r>
 800e098:	4285      	cmp	r5, r0
 800e09a:	4606      	mov	r6, r0
 800e09c:	d802      	bhi.n	800e0a4 <_realloc_r+0x34>
 800e09e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e0a2:	d8f4      	bhi.n	800e08e <_realloc_r+0x1e>
 800e0a4:	4629      	mov	r1, r5
 800e0a6:	4640      	mov	r0, r8
 800e0a8:	f7fe fe72 	bl	800cd90 <_malloc_r>
 800e0ac:	4607      	mov	r7, r0
 800e0ae:	2800      	cmp	r0, #0
 800e0b0:	d0ec      	beq.n	800e08c <_realloc_r+0x1c>
 800e0b2:	42b5      	cmp	r5, r6
 800e0b4:	462a      	mov	r2, r5
 800e0b6:	4621      	mov	r1, r4
 800e0b8:	bf28      	it	cs
 800e0ba:	4632      	movcs	r2, r6
 800e0bc:	f7ff ffca 	bl	800e054 <memcpy>
 800e0c0:	4621      	mov	r1, r4
 800e0c2:	4640      	mov	r0, r8
 800e0c4:	f7ff f9d6 	bl	800d474 <_free_r>
 800e0c8:	463c      	mov	r4, r7
 800e0ca:	e7e0      	b.n	800e08e <_realloc_r+0x1e>

0800e0cc <_malloc_usable_size_r>:
 800e0cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0d0:	1f18      	subs	r0, r3, #4
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	bfbc      	itt	lt
 800e0d6:	580b      	ldrlt	r3, [r1, r0]
 800e0d8:	18c0      	addlt	r0, r0, r3
 800e0da:	4770      	bx	lr

0800e0dc <_init>:
 800e0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0de:	bf00      	nop
 800e0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0e2:	bc08      	pop	{r3}
 800e0e4:	469e      	mov	lr, r3
 800e0e6:	4770      	bx	lr

0800e0e8 <_fini>:
 800e0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ea:	bf00      	nop
 800e0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0ee:	bc08      	pop	{r3}
 800e0f0:	469e      	mov	lr, r3
 800e0f2:	4770      	bx	lr
