
bigger_touchscreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100ec  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c48  0801029c  0801029c  0001129c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ee4  08012ee4  000142f0  2**0
                  CONTENTS
  4 .ARM          00000008  08012ee4  08012ee4  00013ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012eec  08012eec  000142f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012eec  08012eec  00013eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012ef0  08012ef0  00013ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f0  20000000  08012ef4  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000142f0  2**0
                  CONTENTS
 10 .bss          00011f60  200002f0  200002f0  000142f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012250  20012250  000142f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000142f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022393  00000000  00000000  00014320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055f7  00000000  00000000  000366b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c60  00000000  00000000  0003bcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015b7  00000000  00000000  0003d910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002997e  00000000  00000000  0003eec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024ac3  00000000  00000000  00068845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebdf6  00000000  00000000  0008d308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001790fe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008120  00000000  00000000  00179144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00181264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002f0 	.word	0x200002f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010284 	.word	0x08010284

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002f4 	.word	0x200002f4
 80001ec:	08010284 	.word	0x08010284

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <XPT2046_TouchSelect>:
}

#endif /* SOFTWARE_SPI */

static void XPT2046_TouchSelect()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2110      	movs	r1, #16
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <XPT2046_TouchSelect+0x14>)
 800059a:	f004 fd41 	bl	8005020 <HAL_GPIO_WritePin>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000

080005a8 <XPT2046_TouchUnselect>:

static void XPT2046_TouchUnselect()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2110      	movs	r1, #16
 80005b0:	4802      	ldr	r0, [pc, #8]	@ (80005bc <XPT2046_TouchUnselect+0x14>)
 80005b2:	f004 fd35 	bl	8005020 <HAL_GPIO_WritePin>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000

080005c0 <XPT2046_TouchPressed>:

bool XPT2046_TouchPressed(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(XPT2046_IRQ_GPIO_Port, XPT2046_IRQ_Pin) == GPIO_PIN_RESET;
 80005c4:	2120      	movs	r1, #32
 80005c6:	4805      	ldr	r0, [pc, #20]	@ (80005dc <XPT2046_TouchPressed+0x1c>)
 80005c8:	f004 fd12 	bl	8004ff0 <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	bf0c      	ite	eq
 80005d2:	2301      	moveq	r3, #1
 80005d4:	2300      	movne	r3, #0
 80005d6:	b2db      	uxtb	r3, r3
}
 80005d8:	4618      	mov	r0, r3
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40020400 	.word	0x40020400

080005e0 <XPT2046_TouchGetCoordinates>:

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

#endif /* SOFTWARE_SPI */

    XPT2046_TouchSelect();
 80005ea:	f7ff ffd1 	bl	8000590 <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t avg_y = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	77fb      	strb	r3, [r7, #31]

    for(uint8_t i = 0; i < NUMBER_OF_SAMPLES; i++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	77bb      	strb	r3, [r7, #30]
 80005fe:	e03f      	b.n	8000680 <XPT2046_TouchGetCoordinates+0xa0>
    {
        if(!XPT2046_TouchPressed())
 8000600:	f7ff ffde 	bl	80005c0 <XPT2046_TouchPressed>
 8000604:	4603      	mov	r3, r0
 8000606:	f083 0301 	eor.w	r3, r3, #1
 800060a:	b2db      	uxtb	r3, r3
 800060c:	2b00      	cmp	r3, #0
 800060e:	d13b      	bne.n	8000688 <XPT2046_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 8000610:	7ffb      	ldrb	r3, [r7, #31]
 8000612:	3301      	adds	r3, #1
 8000614:	77fb      	strb	r3, [r7, #31]
	   x_raw[0] = spi_read_byte();
	   x_raw[1] = spi_read_byte();

#else

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	2201      	movs	r2, #1
 800061c:	4944      	ldr	r1, [pc, #272]	@ (8000730 <XPT2046_TouchGetCoordinates+0x150>)
 800061e:	4845      	ldr	r0, [pc, #276]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000620:	f007 fb83 	bl	8007d2a <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8000624:	f107 0210 	add.w	r2, r7, #16
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2302      	movs	r3, #2
 8000630:	4941      	ldr	r1, [pc, #260]	@ (8000738 <XPT2046_TouchGetCoordinates+0x158>)
 8000632:	4840      	ldr	r0, [pc, #256]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000634:	f007 fcbd 	bl	8007fb2 <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	2201      	movs	r2, #1
 800063e:	493f      	ldr	r1, [pc, #252]	@ (800073c <XPT2046_TouchGetCoordinates+0x15c>)
 8000640:	483c      	ldr	r0, [pc, #240]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000642:	f007 fb72 	bl	8007d2a <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 8000646:	f107 020c 	add.w	r2, r7, #12
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2302      	movs	r3, #2
 8000652:	4939      	ldr	r1, [pc, #228]	@ (8000738 <XPT2046_TouchGetCoordinates+0x158>)
 8000654:	4837      	ldr	r0, [pc, #220]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000656:	f007 fcac 	bl	8007fb2 <HAL_SPI_TransmitReceive>

#endif /* SOFTWARE_SPI */

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 800065a:	7b3b      	ldrb	r3, [r7, #12]
 800065c:	021b      	lsls	r3, r3, #8
 800065e:	7b7a      	ldrb	r2, [r7, #13]
 8000660:	4313      	orrs	r3, r2
 8000662:	461a      	mov	r2, r3
 8000664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000666:	4413      	add	r3, r2
 8000668:	627b      	str	r3, [r7, #36]	@ 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 800066a:	7c3b      	ldrb	r3, [r7, #16]
 800066c:	021b      	lsls	r3, r3, #8
 800066e:	7c7a      	ldrb	r2, [r7, #17]
 8000670:	4313      	orrs	r3, r2
 8000672:	461a      	mov	r2, r3
 8000674:	6a3b      	ldr	r3, [r7, #32]
 8000676:	4413      	add	r3, r2
 8000678:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < NUMBER_OF_SAMPLES; i++)
 800067a:	7fbb      	ldrb	r3, [r7, #30]
 800067c:	3301      	adds	r3, #1
 800067e:	77bb      	strb	r3, [r7, #30]
 8000680:	7fbb      	ldrb	r3, [r7, #30]
 8000682:	2b07      	cmp	r3, #7
 8000684:	d9bc      	bls.n	8000600 <XPT2046_TouchGetCoordinates+0x20>
 8000686:	e000      	b.n	800068a <XPT2046_TouchGetCoordinates+0xaa>
            break;
 8000688:	bf00      	nop
    }

    XPT2046_TouchUnselect();
 800068a:	f7ff ff8d 	bl	80005a8 <XPT2046_TouchUnselect>

    if(nsamples < NUMBER_OF_SAMPLES)
 800068e:	7ffb      	ldrb	r3, [r7, #31]
 8000690:	2b07      	cmp	r3, #7
 8000692:	d801      	bhi.n	8000698 <XPT2046_TouchGetCoordinates+0xb8>
        return false;
 8000694:	2300      	movs	r3, #0
 8000696:	e046      	b.n	8000726 <XPT2046_TouchGetCoordinates+0x146>

    uint32_t raw_x = (avg_x / NUMBER_OF_SAMPLES);
 8000698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800069a:	08db      	lsrs	r3, r3, #3
 800069c:	61bb      	str	r3, [r7, #24]
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	f640 5247 	movw	r2, #3399	@ 0xd47
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d802      	bhi.n	80006ae <XPT2046_TouchGetCoordinates+0xce>
 80006a8:	f640 5348 	movw	r3, #3400	@ 0xd48
 80006ac:	61bb      	str	r3, [r7, #24]
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	f247 1248 	movw	r2, #29000	@ 0x7148
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d902      	bls.n	80006be <XPT2046_TouchGetCoordinates+0xde>
 80006b8:	f247 1348 	movw	r3, #29000	@ 0x7148
 80006bc:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / NUMBER_OF_SAMPLES);
 80006be:	6a3b      	ldr	r3, [r7, #32]
 80006c0:	08db      	lsrs	r3, r3, #3
 80006c2:	617b      	str	r3, [r7, #20]
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	f640 42e3 	movw	r2, #3299	@ 0xce3
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d802      	bhi.n	80006d4 <XPT2046_TouchGetCoordinates+0xf4>
 80006ce:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80006d2:	617b      	str	r3, [r7, #20]
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	f247 5230 	movw	r2, #30000	@ 0x7530
 80006da:	4293      	cmp	r3, r2
 80006dc:	d902      	bls.n	80006e4 <XPT2046_TouchGetCoordinates+0x104>
 80006de:	f247 5330 	movw	r3, #30000	@ 0x7530
 80006e2:	617b      	str	r3, [r7, #20]
    // Uncomment this line to calibrate touchscreen:
//    printf("raw_x = %6d, raw_y = %6d\r\n", (int) raw_x, (int) raw_y);
//    printf("\x1b[1F");

#if (ORIENTATION == 0)
	*x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 80006e4:	69ba      	ldr	r2, [r7, #24]
 80006e6:	4613      	mov	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	019b      	lsls	r3, r3, #6
 80006ee:	f5a3 1384 	sub.w	r3, r3, #1081344	@ 0x108000
 80006f2:	f5a3 53d0 	sub.w	r3, r3, #6656	@ 0x1a00
 80006f6:	4a12      	ldr	r2, [pc, #72]	@ (8000740 <XPT2046_TouchGetCoordinates+0x160>)
 80006f8:	fba2 2303 	umull	r2, r3, r2, r3
 80006fc:	0b5b      	lsrs	r3, r3, #13
 80006fe:	b29a      	uxth	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	801a      	strh	r2, [r3, #0]
	*y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 8000704:	697a      	ldr	r2, [r7, #20]
 8000706:	4613      	mov	r3, r2
 8000708:	011b      	lsls	r3, r3, #4
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	011b      	lsls	r3, r3, #4
 800070e:	f5a3 2341 	sub.w	r3, r3, #790528	@ 0xc1000
 8000712:	f5a3 63b8 	sub.w	r3, r3, #1472	@ 0x5c0
 8000716:	4a0b      	ldr	r2, [pc, #44]	@ (8000744 <XPT2046_TouchGetCoordinates+0x164>)
 8000718:	fba2 2303 	umull	r2, r3, r2, r3
 800071c:	0b5b      	lsrs	r3, r3, #13
 800071e:	b29a      	uxth	r2, r3
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	801a      	strh	r2, [r3, #0]
#elif (ORIENTATION == 3)
    *x = XPT2046_SCALE_X - (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#endif

    return true;
 8000724:	2301      	movs	r3, #1
}
 8000726:	4618      	mov	r0, r3
 8000728:	3728      	adds	r7, #40	@ 0x28
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	08010b50 	.word	0x08010b50
 8000734:	20000414 	.word	0x20000414
 8000738:	08010b54 	.word	0x08010b54
 800073c:	08010b58 	.word	0x08010b58
 8000740:	51eb851f 	.word	0x51eb851f
 8000744:	4e8b8659 	.word	0x4e8b8659

08000748 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 800074e:	2300      	movs	r3, #0
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	2301      	movs	r3, #1
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2300      	movs	r3, #0
 8000758:	2200      	movs	r2, #0
 800075a:	2101      	movs	r1, #1
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fceb 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	461a      	mov	r2, r3
 8000766:	4bae      	ldr	r3, [pc, #696]	@ (8000a20 <lcdInit+0x2d8>)
 8000768:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 800076a:	2300      	movs	r3, #0
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	2301      	movs	r3, #1
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	2300      	movs	r3, #0
 8000774:	2201      	movs	r2, #1
 8000776:	2100      	movs	r1, #0
 8000778:	2000      	movs	r0, #0
 800077a:	f000 fcdd 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	4ba8      	ldr	r3, [pc, #672]	@ (8000a24 <lcdInit+0x2dc>)
 8000784:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8000786:	2300      	movs	r3, #0
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	2301      	movs	r3, #1
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2300      	movs	r3, #0
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	2001      	movs	r0, #1
 8000796:	f000 fccf 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	461a      	mov	r2, r3
 800079e:	4ba2      	ldr	r3, [pc, #648]	@ (8000a28 <lcdInit+0x2e0>)
 80007a0:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80007a2:	2300      	movs	r3, #0
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	2301      	movs	r3, #1
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2300      	movs	r3, #0
 80007ac:	2201      	movs	r2, #1
 80007ae:	2101      	movs	r1, #1
 80007b0:	2001      	movs	r0, #1
 80007b2:	f000 fcc1 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b9c      	ldr	r3, [pc, #624]	@ (8000a2c <lcdInit+0x2e4>)
 80007bc:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 80007be:	f000 fc91 	bl	80010e4 <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 80007c2:	2028      	movs	r0, #40	@ 0x28
 80007c4:	f000 fc98 	bl	80010f8 <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 80007c8:	20cf      	movs	r0, #207	@ 0xcf
 80007ca:	f000 fc95 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 fca2 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x83);
 80007d4:	2083      	movs	r0, #131	@ 0x83
 80007d6:	f000 fc9f 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x30);
 80007da:	2030      	movs	r0, #48	@ 0x30
 80007dc:	f000 fc9c 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xED);
 80007e0:	20ed      	movs	r0, #237	@ 0xed
 80007e2:	f000 fc89 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x64);
 80007e6:	2064      	movs	r0, #100	@ 0x64
 80007e8:	f000 fc96 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x03);
 80007ec:	2003      	movs	r0, #3
 80007ee:	f000 fc93 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x12);
 80007f2:	2012      	movs	r0, #18
 80007f4:	f000 fc90 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x81);
 80007f8:	2081      	movs	r0, #129	@ 0x81
 80007fa:	f000 fc8d 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xE8);
 80007fe:	20e8      	movs	r0, #232	@ 0xe8
 8000800:	f000 fc7a 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x85);
 8000804:	2085      	movs	r0, #133	@ 0x85
 8000806:	f000 fc87 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x01);
 800080a:	2001      	movs	r0, #1
 800080c:	f000 fc84 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x79);
 8000810:	2079      	movs	r0, #121	@ 0x79
 8000812:	f000 fc81 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xCB);
 8000816:	20cb      	movs	r0, #203	@ 0xcb
 8000818:	f000 fc6e 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x39);
 800081c:	2039      	movs	r0, #57	@ 0x39
 800081e:	f000 fc7b 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x2C);
 8000822:	202c      	movs	r0, #44	@ 0x2c
 8000824:	f000 fc78 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 8000828:	2000      	movs	r0, #0
 800082a:	f000 fc75 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x34);
 800082e:	2034      	movs	r0, #52	@ 0x34
 8000830:	f000 fc72 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x02);
 8000834:	2002      	movs	r0, #2
 8000836:	f000 fc6f 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xF7);
 800083a:	20f7      	movs	r0, #247	@ 0xf7
 800083c:	f000 fc5c 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x20);
 8000840:	2020      	movs	r0, #32
 8000842:	f000 fc69 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xEA);
 8000846:	20ea      	movs	r0, #234	@ 0xea
 8000848:	f000 fc56 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 800084c:	2000      	movs	r0, #0
 800084e:	f000 fc63 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 8000852:	2000      	movs	r0, #0
 8000854:	f000 fc60 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8000858:	20c0      	movs	r0, #192	@ 0xc0
 800085a:	f000 fc4d 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x26);
 800085e:	2026      	movs	r0, #38	@ 0x26
 8000860:	f000 fc5a 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 8000864:	20c1      	movs	r0, #193	@ 0xc1
 8000866:	f000 fc47 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x11);
 800086a:	2011      	movs	r0, #17
 800086c:	f000 fc54 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 8000870:	20c5      	movs	r0, #197	@ 0xc5
 8000872:	f000 fc41 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x35);
 8000876:	2035      	movs	r0, #53	@ 0x35
 8000878:	f000 fc4e 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3E);
 800087c:	203e      	movs	r0, #62	@ 0x3e
 800087e:	f000 fc4b 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 8000882:	20c7      	movs	r0, #199	@ 0xc7
 8000884:	f000 fc38 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0xBE);
 8000888:	20be      	movs	r0, #190	@ 0xbe
 800088a:	f000 fc45 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 800088e:	2036      	movs	r0, #54	@ 0x36
 8000890:	f000 fc32 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 8000894:	4b62      	ldr	r3, [pc, #392]	@ (8000a20 <lcdInit+0x2d8>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f000 fc3d 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 800089e:	203a      	movs	r0, #58	@ 0x3a
 80008a0:	f000 fc2a 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x55);
 80008a4:	2055      	movs	r0, #85	@ 0x55
 80008a6:	f000 fc37 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 80008aa:	20b1      	movs	r0, #177	@ 0xb1
 80008ac:	f000 fc24 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80008b0:	2000      	movs	r0, #0
 80008b2:	f000 fc31 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x1B);
 80008b6:	201b      	movs	r0, #27
 80008b8:	f000 fc2e 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xF2);
 80008bc:	20f2      	movs	r0, #242	@ 0xf2
 80008be:	f000 fc1b 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x08);
 80008c2:	2008      	movs	r0, #8
 80008c4:	f000 fc28 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 80008c8:	2026      	movs	r0, #38	@ 0x26
 80008ca:	f000 fc15 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x01);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f000 fc22 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 80008d4:	20e0      	movs	r0, #224	@ 0xe0
 80008d6:	f000 fc0f 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x1F);
 80008da:	201f      	movs	r0, #31
 80008dc:	f000 fc1c 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x1A);
 80008e0:	201a      	movs	r0, #26
 80008e2:	f000 fc19 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x18);
 80008e6:	2018      	movs	r0, #24
 80008e8:	f000 fc16 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0A);
 80008ec:	200a      	movs	r0, #10
 80008ee:	f000 fc13 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0F);
 80008f2:	200f      	movs	r0, #15
 80008f4:	f000 fc10 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x06);
 80008f8:	2006      	movs	r0, #6
 80008fa:	f000 fc0d 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x45);
 80008fe:	2045      	movs	r0, #69	@ 0x45
 8000900:	f000 fc0a 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x87);
 8000904:	2087      	movs	r0, #135	@ 0x87
 8000906:	f000 fc07 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x32);
 800090a:	2032      	movs	r0, #50	@ 0x32
 800090c:	f000 fc04 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0A);
 8000910:	200a      	movs	r0, #10
 8000912:	f000 fc01 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x07);
 8000916:	2007      	movs	r0, #7
 8000918:	f000 fbfe 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x02);
 800091c:	2002      	movs	r0, #2
 800091e:	f000 fbfb 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x07);
 8000922:	2007      	movs	r0, #7
 8000924:	f000 fbf8 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x05);
 8000928:	2005      	movs	r0, #5
 800092a:	f000 fbf5 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 800092e:	2000      	movs	r0, #0
 8000930:	f000 fbf2 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8000934:	20e1      	movs	r0, #225	@ 0xe1
 8000936:	f000 fbdf 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 800093a:	2000      	movs	r0, #0
 800093c:	f000 fbec 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x25);
 8000940:	2025      	movs	r0, #37	@ 0x25
 8000942:	f000 fbe9 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x27);
 8000946:	2027      	movs	r0, #39	@ 0x27
 8000948:	f000 fbe6 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x05);
 800094c:	2005      	movs	r0, #5
 800094e:	f000 fbe3 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x10);
 8000952:	2010      	movs	r0, #16
 8000954:	f000 fbe0 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x09);
 8000958:	2009      	movs	r0, #9
 800095a:	f000 fbdd 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3A);
 800095e:	203a      	movs	r0, #58	@ 0x3a
 8000960:	f000 fbda 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x78);
 8000964:	2078      	movs	r0, #120	@ 0x78
 8000966:	f000 fbd7 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x4D);
 800096a:	204d      	movs	r0, #77	@ 0x4d
 800096c:	f000 fbd4 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x05);
 8000970:	2005      	movs	r0, #5
 8000972:	f000 fbd1 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x18);
 8000976:	2018      	movs	r0, #24
 8000978:	f000 fbce 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0D);
 800097c:	200d      	movs	r0, #13
 800097e:	f000 fbcb 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x38);
 8000982:	2038      	movs	r0, #56	@ 0x38
 8000984:	f000 fbc8 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3A);
 8000988:	203a      	movs	r0, #58	@ 0x3a
 800098a:	f000 fbc5 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x1F);
 800098e:	201f      	movs	r0, #31
 8000990:	f000 fbc2 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 8000994:	202a      	movs	r0, #42	@ 0x2a
 8000996:	f000 fbaf 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 800099a:	2000      	movs	r0, #0
 800099c:	f000 fbbc 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f000 fbb9 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f000 fbb6 	bl	8001118 <lcdWriteData>
  lcdWriteData(0xEF);
 80009ac:	20ef      	movs	r0, #239	@ 0xef
 80009ae:	f000 fbb3 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80009b2:	202b      	movs	r0, #43	@ 0x2b
 80009b4:	f000 fba0 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80009b8:	2000      	movs	r0, #0
 80009ba:	f000 fbad 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009be:	2000      	movs	r0, #0
 80009c0:	f000 fbaa 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x01);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f000 fba7 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3F);
 80009ca:	203f      	movs	r0, #63	@ 0x3f
 80009cc:	f000 fba4 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 80009d0:	20b7      	movs	r0, #183	@ 0xb7
 80009d2:	f000 fb91 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x07);
 80009d6:	2007      	movs	r0, #7
 80009d8:	f000 fb9e 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 80009dc:	20b6      	movs	r0, #182	@ 0xb6
 80009de:	f000 fb8b 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x0A);
 80009e2:	200a      	movs	r0, #10
 80009e4:	f000 fb98 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x82);
 80009e8:	2082      	movs	r0, #130	@ 0x82
 80009ea:	f000 fb95 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x27);
 80009ee:	2027      	movs	r0, #39	@ 0x27
 80009f0:	f000 fb92 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009f4:	2000      	movs	r0, #0
 80009f6:	f000 fb8f 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 80009fa:	2011      	movs	r0, #17
 80009fc:	f000 fb7c 	bl	80010f8 <lcdWriteCommand>
  HAL_Delay(100);
 8000a00:	2064      	movs	r0, #100	@ 0x64
 8000a02:	f003 fd6d 	bl	80044e0 <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 8000a06:	2029      	movs	r0, #41	@ 0x29
 8000a08:	f000 fb76 	bl	80010f8 <lcdWriteCommand>
  HAL_Delay(100);
 8000a0c:	2064      	movs	r0, #100	@ 0x64
 8000a0e:	f003 fd67 	bl	80044e0 <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8000a12:	202c      	movs	r0, #44	@ 0x2c
 8000a14:	f000 fb70 	bl	80010f8 <lcdWriteCommand>
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000310 	.word	0x20000310
 8000a24:	20000311 	.word	0x20000311
 8000a28:	20000312 	.word	0x20000312
 8000a2c:	20000313 	.word	0x20000313

08000a30 <lcdFillRGB>:
		}
	}
}

void lcdFillRGB(uint16_t color)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a44:	885b      	ldrh	r3, [r3, #2]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f000 fafd 	bl	800104c <lcdSetWindow>
  int dimensions = lcdProperties.width * lcdProperties.height;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a5a:	885b      	ldrh	r3, [r3, #2]
 8000a5c:	fb02 f303 	mul.w	r3, r2, r3
 8000a60:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 8000a62:	e003      	b.n	8000a6c <lcdFillRGB+0x3c>
  {
    lcdWriteData(color);
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fb56 	bl	8001118 <lcdWriteData>
  while(dimensions--)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	1e5a      	subs	r2, r3, #1
 8000a70:	60fa      	str	r2, [r7, #12]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1f6      	bne.n	8000a64 <lcdFillRGB+0x34>
  }
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000018 	.word	0x20000018

08000a84 <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80fb      	strh	r3, [r7, #6]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	80bb      	strh	r3, [r7, #4]
 8000a92:	4613      	mov	r3, r2
 8000a94:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8000a96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <lcdDrawPixel+0x44>)
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	88fa      	ldrh	r2, [r7, #6]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d20f      	bcs.n	8000ac0 <lcdDrawPixel+0x3c>
 8000aa0:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <lcdDrawPixel+0x44>)
 8000aa2:	885b      	ldrh	r3, [r3, #2]
 8000aa4:	88ba      	ldrh	r2, [r7, #4]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d20a      	bcs.n	8000ac0 <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 8000aaa:	88bb      	ldrh	r3, [r7, #4]
 8000aac:	88fa      	ldrh	r2, [r7, #6]
 8000aae:	88b9      	ldrh	r1, [r7, #4]
 8000ab0:	88f8      	ldrh	r0, [r7, #6]
 8000ab2:	f000 facb 	bl	800104c <lcdSetWindow>
    lcdWriteData(color);
 8000ab6:	887b      	ldrh	r3, [r7, #2]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 fb2d 	bl	8001118 <lcdWriteData>
 8000abe:	e000      	b.n	8000ac2 <lcdDrawPixel+0x3e>
        return;
 8000ac0:	bf00      	nop
}
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000018 	.word	0x20000018

08000acc <lcdDrawHLine>:

void lcdDrawHLine(uint16_t x0, uint16_t x1, uint16_t y, uint16_t color)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4608      	mov	r0, r1
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4623      	mov	r3, r4
 8000adc:	80fb      	strh	r3, [r7, #6]
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80bb      	strh	r3, [r7, #4]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	807b      	strh	r3, [r7, #2]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	803b      	strh	r3, [r7, #0]
  // Allows for slightly better performance than setting individual pixels

	if (x1 < x0)
 8000aea:	88ba      	ldrh	r2, [r7, #4]
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d205      	bcs.n	8000afe <lcdDrawHLine+0x32>
	{
		// Switch x1 and x0
		swap(x0, x1);
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	817b      	strh	r3, [r7, #10]
 8000af6:	88bb      	ldrh	r3, [r7, #4]
 8000af8:	80fb      	strh	r3, [r7, #6]
 8000afa:	897b      	ldrh	r3, [r7, #10]
 8000afc:	80bb      	strh	r3, [r7, #4]
	}

	// Check limits
	if (x1 >= lcdProperties.width)
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	88ba      	ldrh	r2, [r7, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d303      	bcc.n	8000b10 <lcdDrawHLine+0x44>
	{
		x1 = lcdProperties.width - 1;
 8000b08:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	80bb      	strh	r3, [r7, #4]
	}

	if (x0 >= lcdProperties.width)
 8000b10:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	88fa      	ldrh	r2, [r7, #6]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d303      	bcc.n	8000b22 <lcdDrawHLine+0x56>
	{
		x0 = lcdProperties.width - 1;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	80fb      	strh	r3, [r7, #6]
	}

	lcdSetWindow(x0, y, x1, y);
 8000b22:	887b      	ldrh	r3, [r7, #2]
 8000b24:	88ba      	ldrh	r2, [r7, #4]
 8000b26:	8879      	ldrh	r1, [r7, #2]
 8000b28:	88f8      	ldrh	r0, [r7, #6]
 8000b2a:	f000 fa8f 	bl	800104c <lcdSetWindow>

	for (int line = x0; line <= x1; line++)
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	e006      	b.n	8000b42 <lcdDrawHLine+0x76>
	{
		lcdWriteData(color);
 8000b34:	883b      	ldrh	r3, [r7, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 faee 	bl	8001118 <lcdWriteData>
	for (int line = x0; line <= x1; line++)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	88bb      	ldrh	r3, [r7, #4]
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	ddf4      	ble.n	8000b34 <lcdDrawHLine+0x68>
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd90      	pop	{r4, r7, pc}
 8000b54:	20000018 	.word	0x20000018

08000b58 <lcdDrawVLine>:

void lcdDrawVLine(uint16_t x, uint16_t y0, uint16_t y1, uint16_t color)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4604      	mov	r4, r0
 8000b60:	4608      	mov	r0, r1
 8000b62:	4611      	mov	r1, r2
 8000b64:	461a      	mov	r2, r3
 8000b66:	4623      	mov	r3, r4
 8000b68:	80fb      	strh	r3, [r7, #6]
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80bb      	strh	r3, [r7, #4]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	807b      	strh	r3, [r7, #2]
 8000b72:	4613      	mov	r3, r2
 8000b74:	803b      	strh	r3, [r7, #0]
  if (y1 < y0)
 8000b76:	887a      	ldrh	r2, [r7, #2]
 8000b78:	88bb      	ldrh	r3, [r7, #4]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d205      	bcs.n	8000b8a <lcdDrawVLine+0x32>
  {
	  swap(y0, y1);
 8000b7e:	88bb      	ldrh	r3, [r7, #4]
 8000b80:	817b      	strh	r3, [r7, #10]
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	80bb      	strh	r3, [r7, #4]
 8000b86:	897b      	ldrh	r3, [r7, #10]
 8000b88:	807b      	strh	r3, [r7, #2]
  }

  if (x >= lcdProperties.width)
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	88fa      	ldrh	r2, [r7, #6]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d303      	bcc.n	8000b9c <lcdDrawVLine+0x44>
  {
    x = lcdProperties.width - 1;
 8000b94:	4b17      	ldr	r3, [pc, #92]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	80fb      	strh	r3, [r7, #6]
  }

  if (y0 >= lcdProperties.height)
 8000b9c:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000b9e:	885b      	ldrh	r3, [r3, #2]
 8000ba0:	88ba      	ldrh	r2, [r7, #4]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d303      	bcc.n	8000bae <lcdDrawVLine+0x56>
  {
    y0 = lcdProperties.height - 1;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000ba8:	885b      	ldrh	r3, [r3, #2]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	80bb      	strh	r3, [r7, #4]
  }

  if (y1 >= lcdProperties.height)
 8000bae:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000bb0:	885b      	ldrh	r3, [r3, #2]
 8000bb2:	887a      	ldrh	r2, [r7, #2]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d303      	bcc.n	8000bc0 <lcdDrawVLine+0x68>
  {
    y1 = lcdProperties.height - 1;
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000bba:	885b      	ldrh	r3, [r3, #2]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	807b      	strh	r3, [r7, #2]
  }

  lcdSetWindow(x, y0, x, y1);
 8000bc0:	887b      	ldrh	r3, [r7, #2]
 8000bc2:	88fa      	ldrh	r2, [r7, #6]
 8000bc4:	88b9      	ldrh	r1, [r7, #4]
 8000bc6:	88f8      	ldrh	r0, [r7, #6]
 8000bc8:	f000 fa40 	bl	800104c <lcdSetWindow>

  for(int line = y0; line <= y1; line++)
 8000bcc:	88bb      	ldrh	r3, [r7, #4]
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	e006      	b.n	8000be0 <lcdDrawVLine+0x88>
  {
	  lcdWriteData(color);
 8000bd2:	883b      	ldrh	r3, [r7, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fa9f 	bl	8001118 <lcdWriteData>
  for(int line = y0; line <= y1; line++)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	887b      	ldrh	r3, [r7, #2]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	ddf4      	ble.n	8000bd2 <lcdDrawVLine+0x7a>
  }
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd90      	pop	{r4, r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000018 	.word	0x20000018

08000bf8 <lcdDrawRect>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4608      	mov	r0, r1
 8000c02:	4611      	mov	r1, r2
 8000c04:	461a      	mov	r2, r3
 8000c06:	4623      	mov	r3, r4
 8000c08:	80fb      	strh	r3, [r7, #6]
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	80bb      	strh	r3, [r7, #4]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	807b      	strh	r3, [r7, #2]
 8000c12:	4613      	mov	r3, r2
 8000c14:	803b      	strh	r3, [r7, #0]
	lcdDrawHLine(x, x + w - 1, y, color);
 8000c16:	88f8      	ldrh	r0, [r7, #6]
 8000c18:	88fa      	ldrh	r2, [r7, #6]
 8000c1a:	887b      	ldrh	r3, [r7, #2]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	3b01      	subs	r3, #1
 8000c22:	b299      	uxth	r1, r3
 8000c24:	88ba      	ldrh	r2, [r7, #4]
 8000c26:	8b3b      	ldrh	r3, [r7, #24]
 8000c28:	f7ff ff50 	bl	8000acc <lcdDrawHLine>
	lcdDrawHLine(x, x + w - 1, y + h - 1, color);
 8000c2c:	88f8      	ldrh	r0, [r7, #6]
 8000c2e:	88fa      	ldrh	r2, [r7, #6]
 8000c30:	887b      	ldrh	r3, [r7, #2]
 8000c32:	4413      	add	r3, r2
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	3b01      	subs	r3, #1
 8000c38:	b299      	uxth	r1, r3
 8000c3a:	88ba      	ldrh	r2, [r7, #4]
 8000c3c:	883b      	ldrh	r3, [r7, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	3b01      	subs	r3, #1
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	8b3b      	ldrh	r3, [r7, #24]
 8000c48:	f7ff ff40 	bl	8000acc <lcdDrawHLine>
	lcdDrawVLine(x, y, y + h - 1, color);
 8000c4c:	88f8      	ldrh	r0, [r7, #6]
 8000c4e:	88b9      	ldrh	r1, [r7, #4]
 8000c50:	88ba      	ldrh	r2, [r7, #4]
 8000c52:	883b      	ldrh	r3, [r7, #0]
 8000c54:	4413      	add	r3, r2
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	8b3b      	ldrh	r3, [r7, #24]
 8000c5e:	f7ff ff7b 	bl	8000b58 <lcdDrawVLine>
	lcdDrawVLine(x + w - 1, y, y + h - 1, color);
 8000c62:	88fa      	ldrh	r2, [r7, #6]
 8000c64:	887b      	ldrh	r3, [r7, #2]
 8000c66:	4413      	add	r3, r2
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	b298      	uxth	r0, r3
 8000c6e:	88b9      	ldrh	r1, [r7, #4]
 8000c70:	88ba      	ldrh	r2, [r7, #4]
 8000c72:	883b      	ldrh	r3, [r7, #0]
 8000c74:	4413      	add	r3, r2
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	8b3b      	ldrh	r3, [r7, #24]
 8000c7e:	f7ff ff6b 	bl	8000b58 <lcdDrawVLine>
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd90      	pop	{r4, r7, pc}
	...

08000c8c <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4604      	mov	r4, r0
 8000c94:	4608      	mov	r0, r1
 8000c96:	4611      	mov	r1, r2
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	80fb      	strh	r3, [r7, #6]
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80bb      	strh	r3, [r7, #4]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	70fb      	strb	r3, [r7, #3]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cae:	4a4a      	ldr	r2, [pc, #296]	@ (8000dd8 <lcdDrawChar+0x14c>)
 8000cb0:	8812      	ldrh	r2, [r2, #0]
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	f280 808c 	bge.w	8000dd0 <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 8000cb8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cbc:	4a46      	ldr	r2, [pc, #280]	@ (8000dd8 <lcdDrawChar+0x14c>)
 8000cbe:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	f280 8085 	bge.w	8000dd0 <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cca:	4a44      	ldr	r2, [pc, #272]	@ (8000ddc <lcdDrawChar+0x150>)
 8000ccc:	6892      	ldr	r2, [r2, #8]
 8000cce:	8892      	ldrh	r2, [r2, #4]
 8000cd0:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db7c      	blt.n	8000dd0 <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8000cd6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cda:	4a40      	ldr	r2, [pc, #256]	@ (8000ddc <lcdDrawChar+0x150>)
 8000cdc:	6892      	ldr	r2, [r2, #8]
 8000cde:	88d2      	ldrh	r2, [r2, #6]
 8000ce0:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db74      	blt.n	8000dd0 <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8000ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8000ddc <lcdDrawChar+0x150>)
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	88db      	ldrh	r3, [r3, #6]
 8000cec:	08db      	lsrs	r3, r3, #3
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73bb      	strb	r3, [r7, #14]
 8000cfa:	e061      	b.n	8000dc0 <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	733b      	strb	r3, [r7, #12]
 8000d00:	e055      	b.n	8000dae <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8000d02:	4b36      	ldr	r3, [pc, #216]	@ (8000ddc <lcdDrawChar+0x150>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	78fa      	ldrb	r2, [r7, #3]
 8000d0a:	3a20      	subs	r2, #32
 8000d0c:	4933      	ldr	r1, [pc, #204]	@ (8000ddc <lcdDrawChar+0x150>)
 8000d0e:	6889      	ldr	r1, [r1, #8]
 8000d10:	88c9      	ldrh	r1, [r1, #6]
 8000d12:	fb01 f202 	mul.w	r2, r1, r2
 8000d16:	7ab9      	ldrb	r1, [r7, #10]
 8000d18:	fb02 f101 	mul.w	r1, r2, r1
 8000d1c:	7bba      	ldrb	r2, [r7, #14]
 8000d1e:	7ab8      	ldrb	r0, [r7, #10]
 8000d20:	fb00 f202 	mul.w	r2, r0, r2
 8000d24:	4411      	add	r1, r2
 8000d26:	7b3a      	ldrb	r2, [r7, #12]
 8000d28:	440a      	add	r2, r1
 8000d2a:	4413      	add	r3, r2
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	72fb      	strb	r3, [r7, #11]
 8000d34:	e032      	b.n	8000d9c <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 8000d36:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	da12      	bge.n	8000d64 <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 8000d3e:	7afb      	ldrb	r3, [r7, #11]
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	4413      	add	r3, r2
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	4413      	add	r3, r2
 8000d4e:	b298      	uxth	r0, r3
 8000d50:	7bbb      	ldrb	r3, [r7, #14]
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	88bb      	ldrh	r3, [r7, #4]
 8000d56:	4413      	add	r3, r2
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	883a      	ldrh	r2, [r7, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f7ff fe91 	bl	8000a84 <lcdDrawPixel>
 8000d62:	e015      	b.n	8000d90 <lcdDrawChar+0x104>
				}
				else if (bg != color)
 8000d64:	8c3a      	ldrh	r2, [r7, #32]
 8000d66:	883b      	ldrh	r3, [r7, #0]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d011      	beq.n	8000d90 <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 8000d6c:	7afb      	ldrb	r3, [r7, #11]
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	4413      	add	r3, r2
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	4413      	add	r3, r2
 8000d7c:	b298      	uxth	r0, r3
 8000d7e:	7bbb      	ldrb	r3, [r7, #14]
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	88bb      	ldrh	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	8c3a      	ldrh	r2, [r7, #32]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f7ff fe7a 	bl	8000a84 <lcdDrawPixel>
				}
				line <<= 1;
 8000d90:	7b7b      	ldrb	r3, [r7, #13]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 8000d96:	7afb      	ldrb	r3, [r7, #11]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	72fb      	strb	r3, [r7, #11]
 8000d9c:	7afb      	ldrb	r3, [r7, #11]
 8000d9e:	2b07      	cmp	r3, #7
 8000da0:	d9c9      	bls.n	8000d36 <lcdDrawChar+0xaa>
			}

			xP += 8;
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	3308      	adds	r3, #8
 8000da6:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8000da8:	7b3b      	ldrb	r3, [r7, #12]
 8000daa:	3301      	adds	r3, #1
 8000dac:	733b      	strb	r3, [r7, #12]
 8000dae:	7b3a      	ldrb	r2, [r7, #12]
 8000db0:	7abb      	ldrb	r3, [r7, #10]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d3a5      	bcc.n	8000d02 <lcdDrawChar+0x76>
		}

		xP = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000dba:	7bbb      	ldrb	r3, [r7, #14]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	73bb      	strb	r3, [r7, #14]
 8000dc0:	7bbb      	ldrb	r3, [r7, #14]
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <lcdDrawChar+0x150>)
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	88db      	ldrh	r3, [r3, #6]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d396      	bcc.n	8000cfc <lcdDrawChar+0x70>
 8000dce:	e000      	b.n	8000dd2 <lcdDrawChar+0x146>
		return;
 8000dd0:	bf00      	nop
	}
}
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd90      	pop	{r4, r7, pc}
 8000dd8:	20000018 	.word	0x20000018
 8000ddc:	20000020 	.word	0x20000020

08000de0 <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8000de0:	b40f      	push	{r0, r1, r2, r3}
 8000de2:	b590      	push	{r4, r7, lr}
 8000de4:	b085      	sub	sp, #20
 8000de6:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	69b9      	ldr	r1, [r7, #24]
 8000df2:	483d      	ldr	r0, [pc, #244]	@ (8000ee8 <lcdPrintf+0x108>)
 8000df4:	f00e fae0 	bl	800f3b8 <vsiprintf>
	va_end(lst);

	p = buf;
 8000df8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee8 <lcdPrintf+0x108>)
 8000dfa:	607b      	str	r3, [r7, #4]
	while (*p)
 8000dfc:	e067      	b.n	8000ece <lcdPrintf+0xee>
	{
		if (*p == '\n')
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b0a      	cmp	r3, #10
 8000e04:	d10c      	bne.n	8000e20 <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 8000e06:	4b39      	ldr	r3, [pc, #228]	@ (8000eec <lcdPrintf+0x10c>)
 8000e08:	885a      	ldrh	r2, [r3, #2]
 8000e0a:	4b39      	ldr	r3, [pc, #228]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	88db      	ldrh	r3, [r3, #6]
 8000e10:	4413      	add	r3, r2
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	4b35      	ldr	r3, [pc, #212]	@ (8000eec <lcdPrintf+0x10c>)
 8000e16:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 8000e18:	4b34      	ldr	r3, [pc, #208]	@ (8000eec <lcdPrintf+0x10c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	801a      	strh	r2, [r3, #0]
 8000e1e:	e04a      	b.n	8000eb6 <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b0d      	cmp	r3, #13
 8000e26:	d046      	beq.n	8000eb6 <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b09      	cmp	r3, #9
 8000e2e:	d10b      	bne.n	8000e48 <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 8000e30:	4b2e      	ldr	r3, [pc, #184]	@ (8000eec <lcdPrintf+0x10c>)
 8000e32:	881a      	ldrh	r2, [r3, #0]
 8000e34:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	889b      	ldrh	r3, [r3, #4]
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	4413      	add	r3, r2
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	4b2a      	ldr	r3, [pc, #168]	@ (8000eec <lcdPrintf+0x10c>)
 8000e44:	801a      	strh	r2, [r3, #0]
 8000e46:	e036      	b.n	8000eb6 <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8000e48:	4b28      	ldr	r3, [pc, #160]	@ (8000eec <lcdPrintf+0x10c>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	b218      	sxth	r0, r3
 8000e4e:	4b27      	ldr	r3, [pc, #156]	@ (8000eec <lcdPrintf+0x10c>)
 8000e50:	885b      	ldrh	r3, [r3, #2]
 8000e52:	b219      	sxth	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	781a      	ldrb	r2, [r3, #0]
 8000e58:	4b25      	ldr	r3, [pc, #148]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	b29c      	uxth	r4, r3
 8000e5e:	4b24      	ldr	r3, [pc, #144]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	4623      	mov	r3, r4
 8000e68:	f7ff ff10 	bl	8000c8c <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <lcdPrintf+0x10c>)
 8000e6e:	881a      	ldrh	r2, [r3, #0]
 8000e70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	889b      	ldrh	r3, [r3, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <lcdPrintf+0x10c>)
 8000e7c:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e80:	7b1b      	ldrb	r3, [r3, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d017      	beq.n	8000eb6 <lcdPrintf+0xd6>
 8000e86:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <lcdPrintf+0x10c>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <lcdPrintf+0x114>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	889b      	ldrh	r3, [r3, #4]
 8000e98:	1acb      	subs	r3, r1, r3
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	dd0b      	ble.n	8000eb6 <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8000e9e:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <lcdPrintf+0x10c>)
 8000ea0:	885a      	ldrh	r2, [r3, #2]
 8000ea2:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <lcdPrintf+0x110>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	88db      	ldrh	r3, [r3, #6]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <lcdPrintf+0x10c>)
 8000eae:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <lcdPrintf+0x10c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <lcdPrintf+0x10c>)
 8000ebe:	885a      	ldrh	r2, [r3, #2]
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <lcdPrintf+0x114>)
 8000ec2:	885b      	ldrh	r3, [r3, #2]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d302      	bcc.n	8000ece <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <lcdPrintf+0x10c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	805a      	strh	r2, [r3, #2]
	while (*p)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d193      	bne.n	8000dfe <lcdPrintf+0x1e>
		}
	}
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ee2:	b004      	add	sp, #16
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000314 	.word	0x20000314
 8000eec:	2000030c 	.word	0x2000030c
 8000ef0:	20000020 	.word	0x20000020
 8000ef4:	20000018 	.word	0x20000018

08000ef8 <lcdSetTextFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8000f00:	4a04      	ldr	r2, [pc, #16]	@ (8000f14 <lcdSetTextFont+0x1c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6093      	str	r3, [r2, #8]
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000020 	.word	0x20000020

08000f18 <lcdSetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	460a      	mov	r2, r1
 8000f22:	80fb      	strh	r3, [r7, #6]
 8000f24:	4613      	mov	r3, r2
 8000f26:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	4a05      	ldr	r2, [pc, #20]	@ (8000f40 <lcdSetTextColor+0x28>)
 8000f2c:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8000f2e:	88bb      	ldrh	r3, [r7, #4]
 8000f30:	4a03      	ldr	r2, [pc, #12]	@ (8000f40 <lcdSetTextColor+0x28>)
 8000f32:	6053      	str	r3, [r2, #4]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	20000020 	.word	0x20000020

08000f44 <lcdSetOrientation>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 8000f4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 8000f54:	2036      	movs	r0, #54	@ 0x36
 8000f56:	f000 f8cf 	bl	80010f8 <lcdWriteCommand>

	switch (lcdProperties.orientation)
 8000f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f5c:	791b      	ldrb	r3, [r3, #4]
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d83e      	bhi.n	8000fe0 <lcdSetOrientation+0x9c>
 8000f62:	a201      	add	r2, pc, #4	@ (adr r2, 8000f68 <lcdSetOrientation+0x24>)
 8000f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f68:	08000f79 	.word	0x08000f79
 8000f6c:	08000fad 	.word	0x08000fad
 8000f70:	08000f93 	.word	0x08000f93
 8000f74:	08000fc7 	.word	0x08000fc7
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 8000f78:	4b23      	ldr	r3, [pc, #140]	@ (8001008 <lcdSetOrientation+0xc4>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f8cb 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8000f82:	4b20      	ldr	r3, [pc, #128]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f84:	22f0      	movs	r2, #240	@ 0xf0
 8000f86:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8000f88:	4b1e      	ldr	r3, [pc, #120]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f8a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000f8e:	805a      	strh	r2, [r3, #2]
			break;
 8000f90:	e027      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 8000f92:	4b1e      	ldr	r3, [pc, #120]	@ (800100c <lcdSetOrientation+0xc8>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f8be 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f9e:	22f0      	movs	r2, #240	@ 0xf0
 8000fa0:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fa4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fa8:	805a      	strh	r2, [r3, #2]
			break;
 8000faa:	e01a      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8000fac:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <lcdSetOrientation+0xcc>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 f8b1 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fb8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fbc:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fc0:	22f0      	movs	r2, #240	@ 0xf0
 8000fc2:	805a      	strh	r2, [r3, #2]
			break;
 8000fc4:	e00d      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 8000fc6:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <lcdSetOrientation+0xd0>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f8a4 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fd2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fd6:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fda:	22f0      	movs	r2, #240	@ 0xf0
 8000fdc:	805a      	strh	r2, [r3, #2]
			break;
 8000fde:	e000      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		default:
			break;
 8000fe0:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8000fe2:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fec:	885b      	ldrh	r3, [r3, #2]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 f829 	bl	800104c <lcdSetWindow>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000018 	.word	0x20000018
 8001008:	20000310 	.word	0x20000310
 800100c:	20000312 	.word	0x20000312
 8001010:	20000311 	.word	0x20000311
 8001014:	20000313 	.word	0x20000313

08001018 <lcdSetCursor>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	460a      	mov	r2, r1
 8001022:	80fb      	strh	r3, [r7, #6]
 8001024:	4613      	mov	r3, r2
 8001026:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8001028:	4a07      	ldr	r2, [pc, #28]	@ (8001048 <lcdSetCursor+0x30>)
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 800102e:	4a06      	ldr	r2, [pc, #24]	@ (8001048 <lcdSetCursor+0x30>)
 8001030:	88bb      	ldrh	r3, [r7, #4]
 8001032:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 8001034:	88bb      	ldrh	r3, [r7, #4]
 8001036:	88fa      	ldrh	r2, [r7, #6]
 8001038:	88b9      	ldrh	r1, [r7, #4]
 800103a:	88f8      	ldrh	r0, [r7, #6]
 800103c:	f000 f806 	bl	800104c <lcdSetWindow>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2000030c 	.word	0x2000030c

0800104c <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4604      	mov	r4, r0
 8001054:	4608      	mov	r0, r1
 8001056:	4611      	mov	r1, r2
 8001058:	461a      	mov	r2, r3
 800105a:	4623      	mov	r3, r4
 800105c:	80fb      	strh	r3, [r7, #6]
 800105e:	4603      	mov	r3, r0
 8001060:	80bb      	strh	r3, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	807b      	strh	r3, [r7, #2]
 8001066:	4613      	mov	r3, r2
 8001068:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 800106a:	202a      	movs	r0, #42	@ 0x2a
 800106c:	f000 f844 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	b29b      	uxth	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f84e 	bl	8001118 <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	b29b      	uxth	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f848 	bl	8001118 <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 8001088:	887b      	ldrh	r3, [r7, #2]
 800108a:	0a1b      	lsrs	r3, r3, #8
 800108c:	b29b      	uxth	r3, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f842 	bl	8001118 <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	b29b      	uxth	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f83c 	bl	8001118 <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80010a0:	202b      	movs	r0, #43	@ 0x2b
 80010a2:	f000 f829 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 80010a6:	88bb      	ldrh	r3, [r7, #4]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f833 	bl	8001118 <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 f82d 	bl	8001118 <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 80010be:	883b      	ldrh	r3, [r7, #0]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 f827 	bl	8001118 <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 80010ca:	883b      	ldrh	r3, [r7, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f821 	bl	8001118 <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 80010d6:	202c      	movs	r0, #44	@ 0x2c
 80010d8:	f000 f80e 	bl	80010f8 <lcdWriteCommand>
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd90      	pop	{r4, r7, pc}

080010e4 <lcdReset>:
  }
  while (i < dataLength);
}

static void lcdReset(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 80010e8:	2001      	movs	r0, #1
 80010ea:	f000 f805 	bl	80010f8 <lcdWriteCommand>
	HAL_Delay(50);
 80010ee:	2032      	movs	r0, #50	@ 0x32
 80010f0:	f003 f9f6 	bl	80044e0 <HAL_Delay>
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 8001102:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8001106:	79fa      	ldrb	r2, [r7, #7]
 8001108:	b292      	uxth	r2, r2
 800110a:	801a      	strh	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 8001122:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <lcdWriteData+0x1c>)
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	8013      	strh	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	60020000 	.word	0x60020000

08001138 <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 8001138:	b490      	push	{r4, r7}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	4604      	mov	r4, r0
 8001140:	4608      	mov	r0, r1
 8001142:	4611      	mov	r1, r2
 8001144:	461a      	mov	r2, r3
 8001146:	4623      	mov	r3, r4
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	4603      	mov	r3, r0
 800114c:	71bb      	strb	r3, [r7, #6]
 800114e:	460b      	mov	r3, r1
 8001150:	717b      	strb	r3, [r7, #5]
 8001152:	4613      	mov	r3, r2
 8001154:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 800115a:	7f3b      	ldrb	r3, [r7, #28]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <lcdBuildMemoryAccessControlConfig+0x30>
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8001168:	7e3b      	ldrb	r3, [r7, #24]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <lcdBuildMemoryAccessControlConfig+0x3e>
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 8001176:	793b      	ldrb	r3, [r7, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <lcdBuildMemoryAccessControlConfig+0x4c>
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	f043 0310 	orr.w	r3, r3, #16
 8001182:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 8001184:	797b      	ldrb	r3, [r7, #5]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <lcdBuildMemoryAccessControlConfig+0x5a>
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	f043 0320 	orr.w	r3, r3, #32
 8001190:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <lcdBuildMemoryAccessControlConfig+0x68>
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800119e:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <lcdBuildMemoryAccessControlConfig+0x76>
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011ac:	73fb      	strb	r3, [r7, #15]
  return value;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc90      	pop	{r4, r7}
 80011b8:	4770      	bx	lr

080011ba <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011c2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011c6:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d013      	beq.n	80011fa <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80011d2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011d6:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80011da:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00b      	beq.n	80011fa <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80011e2:	e000      	b.n	80011e6 <ITM_SendChar+0x2c>
    {
      __NOP();
 80011e4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80011e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f9      	beq.n	80011e4 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80011f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80011fa:	687b      	ldr	r3, [r7, #4]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <_write>:
uint8_t handleTouch();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	e009      	b.n	800122e <_write+0x26>
		ITM_SendChar((*ptr++));  // Send the character via ITM
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1c5a      	adds	r2, r3, #1
 800121e:	60ba      	str	r2, [r7, #8]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ffc9 	bl	80011ba <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	3301      	adds	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	429a      	cmp	r2, r3
 8001234:	dbf1      	blt.n	800121a <_write+0x12>
	}
	return len;
 8001236:	687b      	ldr	r3, [r7, #4]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <USBH_HID_EventCallback>:
static uint8_t USB_BUSY = 0;
char qr_code_data[MAX_LINES][MAX_LINE_LENGTH] = { { '\0' } }; //static initializes strings with all null characters
HID_KEYBD_Info_TypeDef *Keyboard_Info;

/***DORJEE YOU HAVE TO CHANGE USBH_HID.H WHEN YOU GENERATE CODE****/
void USBH_HID_EventCallback(USBH_HandleTypeDef *phost) { //2.6s for 54 lines
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	Keyboard_Info = USBH_HID_GetKeybdInfo(phost);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f00b fa4d 	bl	800c6e8 <USBH_HID_GetKeybdInfo>
 800124e:	4603      	mov	r3, r0
 8001250:	4a47      	ldr	r2, [pc, #284]	@ (8001370 <USBH_HID_EventCallback+0x130>)
 8001252:	6013      	str	r3, [r2, #0]
	char key = USBH_HID_GetASCIICode(Keyboard_Info);
 8001254:	4b46      	ldr	r3, [pc, #280]	@ (8001370 <USBH_HID_EventCallback+0x130>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f00b faed 	bl	800c838 <USBH_HID_GetASCIICode>
 800125e:	4603      	mov	r3, r0
 8001260:	72fb      	strb	r3, [r7, #11]
	printf("%c\n", key);
 8001262:	7afb      	ldrb	r3, [r7, #11]
 8001264:	4619      	mov	r1, r3
 8001266:	4843      	ldr	r0, [pc, #268]	@ (8001374 <USBH_HID_EventCallback+0x134>)
 8001268:	f00d ffb4 	bl	800f1d4 <iprintf>
	//disable the touchscreen interrupt functionality when usb transmission starts
	//after tab it calls itself one more time, so disable after i=0
	if (i == 1) {
 800126c:	4b42      	ldr	r3, [pc, #264]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d102      	bne.n	800127a <USBH_HID_EventCallback+0x3a>
		USB_BUSY = 1;
 8001274:	4b41      	ldr	r3, [pc, #260]	@ (800137c <USBH_HID_EventCallback+0x13c>)
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
	}

	//store incoming chars. ignore null characters that come in for some reason
	if ((key != NULL_CHAR) && (key != SOH)) {
 800127a:	7afb      	ldrb	r3, [r7, #11]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d011      	beq.n	80012a4 <USBH_HID_EventCallback+0x64>
 8001280:	7afb      	ldrb	r3, [r7, #11]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d00e      	beq.n	80012a4 <USBH_HID_EventCallback+0x64>
		qr_code_data[i][j] = key;
 8001286:	4b3c      	ldr	r3, [pc, #240]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b3d      	ldr	r3, [pc, #244]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	493d      	ldr	r1, [pc, #244]	@ (8001384 <USBH_HID_EventCallback+0x144>)
 8001290:	0152      	lsls	r2, r2, #5
 8001292:	440a      	add	r2, r1
 8001294:	4413      	add	r3, r2
 8001296:	7afa      	ldrb	r2, [r7, #11]
 8001298:	701a      	strb	r2, [r3, #0]
		j++;
 800129a:	4b39      	ldr	r3, [pc, #228]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	4a37      	ldr	r2, [pc, #220]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 80012a2:	6013      	str	r3, [r2, #0]
	}
	//handle new line
	if (key == NEWLINE_CHAR) {
 80012a4:	7afb      	ldrb	r3, [r7, #11]
 80012a6:	2b0a      	cmp	r3, #10
 80012a8:	d107      	bne.n	80012ba <USBH_HID_EventCallback+0x7a>
		j = 0;
 80012aa:	4b35      	ldr	r3, [pc, #212]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
		i++;
 80012b0:	4b31      	ldr	r3, [pc, #196]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	4a30      	ldr	r2, [pc, #192]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 80012b8:	6013      	str	r3, [r2, #0]
	}
	//tab is the end of the qr code
	if (key == TAB) {
 80012ba:	7afb      	ldrb	r3, [r7, #11]
 80012bc:	2b09      	cmp	r3, #9
 80012be:	d152      	bne.n	8001366 <USBH_HID_EventCallback+0x126>
		for (int a = 0; a < 15; a++) {
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	e002      	b.n	80012cc <USBH_HID_EventCallback+0x8c>
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3301      	adds	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	2b0e      	cmp	r3, #14
 80012d0:	ddf9      	ble.n	80012c6 <USBH_HID_EventCallback+0x86>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d2:	b672      	cpsid	i
}
 80012d4:	bf00      	nop
			//printf("%s", qr_code_data[a]);
		}
		__disable_irq();
		//output_protocol(qr_code_data, i + 1);
		//check if the title is (10 chars + newline char) or less
		if (strlen(qr_code_data[0]) < (MAX_TITLE_SIZE + 1)) {
 80012d6:	482b      	ldr	r0, [pc, #172]	@ (8001384 <USBH_HID_EventCallback+0x144>)
 80012d8:	f7fe ff8a 	bl	80001f0 <strlen>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b0e      	cmp	r3, #14
 80012e0:	d83b      	bhi.n	800135a <USBH_HID_EventCallback+0x11a>
			uint8_t freeSectorNumber = getFreeSector();
 80012e2:	f002 f9f1 	bl	80036c8 <getFreeSector>
 80012e6:	4603      	mov	r3, r0
 80012e8:	72bb      	strb	r3, [r7, #10]
			//printf("free sector is %d\n", freeSectorNumber);
			//only store the protocol if all memory isnt full
			if (freeSectorNumber <= 10) { //i only got 10 pages rn
 80012ea:	7abb      	ldrb	r3, [r7, #10]
 80012ec:	2b0a      	cmp	r3, #10
 80012ee:	d82a      	bhi.n	8001346 <USBH_HID_EventCallback+0x106>
				//printf("why\n");
				storeProtocol(qr_code_data, freeSectorNumber);
 80012f0:	7abb      	ldrb	r3, [r7, #10]
 80012f2:	4619      	mov	r1, r3
 80012f4:	4823      	ldr	r0, [pc, #140]	@ (8001384 <USBH_HID_EventCallback+0x144>)
 80012f6:	f002 f821 	bl	800333c <storeProtocol>
				//go to the page num the new protocol is on
				page_num = freeSectorNumber;
 80012fa:	4a23      	ldr	r2, [pc, #140]	@ (8001388 <USBH_HID_EventCallback+0x148>)
 80012fc:	7abb      	ldrb	r3, [r7, #10]
 80012fe:	7013      	strb	r3, [r2, #0]
				DrawMainPage(page_num);
 8001300:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <USBH_HID_EventCallback+0x148>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fbdd 	bl	8001ac4 <DrawMainPage>
				currentPage = PAGE_MAIN;
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <USBH_HID_EventCallback+0x14c>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < MAX_LINES; a++) {
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	e013      	b.n	800133e <USBH_HID_EventCallback+0xfe>
					for (int b = 0; b < MAX_LINE_LENGTH; b++) {
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	e00a      	b.n	8001332 <USBH_HID_EventCallback+0xf2>
						qr_code_data[a][b] = '\0';
 800131c:	4a19      	ldr	r2, [pc, #100]	@ (8001384 <USBH_HID_EventCallback+0x144>)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	015b      	lsls	r3, r3, #5
 8001322:	441a      	add	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
					for (int b = 0; b < MAX_LINE_LENGTH; b++) {
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3301      	adds	r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b1f      	cmp	r3, #31
 8001336:	ddf1      	ble.n	800131c <USBH_HID_EventCallback+0xdc>
				for (int a = 0; a < MAX_LINES; a++) {
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	3301      	adds	r3, #1
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	2bc7      	cmp	r3, #199	@ 0xc7
 8001342:	dde8      	ble.n	8001316 <USBH_HID_EventCallback+0xd6>
 8001344:	e004      	b.n	8001350 <USBH_HID_EventCallback+0x110>
					}
				}
			} else {
				DrawQueuePage(queueSize);
 8001346:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <USBH_HID_EventCallback+0x150>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f000 feba 	bl	80020c4 <DrawQueuePage>
  __ASM volatile ("cpsie i" : : : "memory");
 8001350:	b662      	cpsie	i
}
 8001352:	bf00      	nop
			}
			__enable_irq();
			USB_BUSY = 0;
 8001354:	4b09      	ldr	r3, [pc, #36]	@ (800137c <USBH_HID_EventCallback+0x13c>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
		}
		i = 0;
 800135a:	4b07      	ldr	r3, [pc, #28]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
		j = 0;
 8001360:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
	}

}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200118dc 	.word	0x200118dc
 8001374:	0801029c 	.word	0x0801029c
 8001378:	200005d0 	.word	0x200005d0
 800137c:	2000ffd9 	.word	0x2000ffd9
 8001380:	200005d4 	.word	0x200005d4
 8001384:	2000ffdc 	.word	0x2000ffdc
 8001388:	20000267 	.word	0x20000267
 800138c:	20000594 	.word	0x20000594
 8001390:	2000ffd8 	.word	0x2000ffd8

08001394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139a:	f003 f82f 	bl	80043fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139e:	f000 f8ef 	bl	8001580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a2:	f000 fabf 	bl	8001924 <MX_GPIO_Init>
  MX_FMC_Init();
 80013a6:	f000 fa5b 	bl	8001860 <MX_FMC_Init>
  MX_TIM3_Init();
 80013aa:	f000 f9d7 	bl	800175c <MX_TIM3_Init>
  MX_SPI4_Init();
 80013ae:	f000 f951 	bl	8001654 <MX_SPI4_Init>
  MX_USB_HOST_Init();
 80013b2:	f00d fa0b 	bl	800e7cc <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80013b6:	f000 fa29 	bl	800180c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80013ba:	f000 f981 	bl	80016c0 <MX_TIM2_Init>
//  	erase_sector(6);
//  	erase_sector(7);
//  	erase_sector(8);
//  	erase_sector(9);
//  	erase_sector(10);
	HAL_GPIO_WritePin(LCD_NRST_GPIO_Port, LCD_NRST_Pin, GPIO_PIN_SET);
 80013be:	2201      	movs	r2, #1
 80013c0:	2140      	movs	r1, #64	@ 0x40
 80013c2:	4863      	ldr	r0, [pc, #396]	@ (8001550 <main+0x1bc>)
 80013c4:	f003 fe2c 	bl	8005020 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80013c8:	2032      	movs	r0, #50	@ 0x32
 80013ca:	f003 f889 	bl	80044e0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_NRST_GPIO_Port, LCD_NRST_Pin, GPIO_PIN_SET);
 80013ce:	2201      	movs	r2, #1
 80013d0:	2140      	movs	r1, #64	@ 0x40
 80013d2:	485f      	ldr	r0, [pc, #380]	@ (8001550 <main+0x1bc>)
 80013d4:	f003 fe24 	bl	8005020 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80013d8:	2032      	movs	r0, #50	@ 0x32
 80013da:	f003 f881 	bl	80044e0 <HAL_Delay>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013de:	2100      	movs	r1, #0
 80013e0:	485c      	ldr	r0, [pc, #368]	@ (8001554 <main+0x1c0>)
 80013e2:	f007 f9f1 	bl	80087c8 <HAL_TIM_PWM_Start>
	htim3.Instance->CCR1 = 50;
 80013e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001554 <main+0x1c0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2232      	movs	r2, #50	@ 0x32
 80013ec:	635a      	str	r2, [r3, #52]	@ 0x34

	lcdInit();
 80013ee:	f7ff f9ab 	bl	8000748 <lcdInit>
	//lcdTest();
	lcdSetOrientation(LCD_ORIENTATION_LANDSCAPE);
 80013f2:	2001      	movs	r0, #1
 80013f4:	f7ff fda6 	bl	8000f44 <lcdSetOrientation>
	DrawMainPage(1);
 80013f8:	2001      	movs	r0, #1
 80013fa:	f000 fb63 	bl	8001ac4 <DrawMainPage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80013fe:	f00d fa0b 	bl	800e818 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
		if (touchFlag) {
 8001402:	4b55      	ldr	r3, [pc, #340]	@ (8001558 <main+0x1c4>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d007      	beq.n	800141a <main+0x86>
			handleTouch();
 800140a:	f001 fb45 	bl	8002a98 <handleTouch>
			touchFlag = 0;
 800140e:	4b52      	ldr	r3, [pc, #328]	@ (8001558 <main+0x1c4>)
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 8001414:	2064      	movs	r0, #100	@ 0x64
 8001416:	f003 f863 	bl	80044e0 <HAL_Delay>
		}
		if (currentPage == PAGE_PROGRESS) {
 800141a:	4b50      	ldr	r3, [pc, #320]	@ (800155c <main+0x1c8>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b05      	cmp	r3, #5
 8001420:	d1ed      	bne.n	80013fe <main+0x6a>
			//when protocol finishes naturally, it will send a done signal

			if (HAL_UART_Receive(&huart2, &rx_byte, 1, 0) == HAL_OK) {
 8001422:	2300      	movs	r3, #0
 8001424:	2201      	movs	r2, #1
 8001426:	494e      	ldr	r1, [pc, #312]	@ (8001560 <main+0x1cc>)
 8001428:	484e      	ldr	r0, [pc, #312]	@ (8001564 <main+0x1d0>)
 800142a:	f008 f9be 	bl	80097aa <HAL_UART_Receive>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1e4      	bne.n	80013fe <main+0x6a>
				//protocol starts, get the protocl title
				if (rx_byte == 'T') {
 8001434:	4b4a      	ldr	r3, [pc, #296]	@ (8001560 <main+0x1cc>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b54      	cmp	r3, #84	@ 0x54
 800143a:	d10c      	bne.n	8001456 <main+0xc2>
					HAL_UART_Receive(&huart2, (uint8_t*) currentProtocolTitle, sizeof(currentProtocolTitle), 100);
 800143c:	2364      	movs	r3, #100	@ 0x64
 800143e:	2214      	movs	r2, #20
 8001440:	4949      	ldr	r1, [pc, #292]	@ (8001568 <main+0x1d4>)
 8001442:	4848      	ldr	r0, [pc, #288]	@ (8001564 <main+0x1d0>)
 8001444:	f008 f9b1 	bl	80097aa <HAL_UART_Receive>
					DrawProgressPage("FILL", rx_byte, rx_data);
 8001448:	4b45      	ldr	r3, [pc, #276]	@ (8001560 <main+0x1cc>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4a47      	ldr	r2, [pc, #284]	@ (800156c <main+0x1d8>)
 800144e:	4619      	mov	r1, r3
 8001450:	4847      	ldr	r0, [pc, #284]	@ (8001570 <main+0x1dc>)
 8001452:	f000 ff1d 	bl	8002290 <DrawProgressPage>
				}
				//repeat update
				if (rx_byte == 'R') {
 8001456:	4b42      	ldr	r3, [pc, #264]	@ (8001560 <main+0x1cc>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b52      	cmp	r3, #82	@ 0x52
 800145c:	d139      	bne.n	80014d2 <main+0x13e>
					char repeatUpdate[2];
					HAL_UART_Receive(&huart2, (uint8_t*) repeatUpdate, sizeof(repeatUpdate), 100);
 800145e:	f107 0118 	add.w	r1, r7, #24
 8001462:	2364      	movs	r3, #100	@ 0x64
 8001464:	2202      	movs	r2, #2
 8001466:	483f      	ldr	r0, [pc, #252]	@ (8001564 <main+0x1d0>)
 8001468:	f008 f99f 	bl	80097aa <HAL_UART_Receive>
					currentRepeatNum = atoi(repeatUpdate);
 800146c:	f107 0318 	add.w	r3, r7, #24
 8001470:	4618      	mov	r0, r3
 8001472:	f00d fca7 	bl	800edc4 <atoi>
 8001476:	4603      	mov	r3, r0
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b3e      	ldr	r3, [pc, #248]	@ (8001574 <main+0x1e0>)
 800147c:	701a      	strb	r2, [r3, #0]
					printf("%d\n", currentRepeatNum);
 800147e:	4b3d      	ldr	r3, [pc, #244]	@ (8001574 <main+0x1e0>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	4619      	mov	r1, r3
 8001486:	483c      	ldr	r0, [pc, #240]	@ (8001578 <main+0x1e4>)
 8001488:	f00d fea4 	bl	800f1d4 <iprintf>
					//repeat
					char repeat[20] = "";
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	f107 0308 	add.w	r3, r7, #8
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
					uint32_t repeatInt = ConvertCharsToInt('0', rx_data[12], rx_data[13]);
 800149e:	4b33      	ldr	r3, [pc, #204]	@ (800156c <main+0x1d8>)
 80014a0:	7b1b      	ldrb	r3, [r3, #12]
 80014a2:	4a32      	ldr	r2, [pc, #200]	@ (800156c <main+0x1d8>)
 80014a4:	7b52      	ldrb	r2, [r2, #13]
 80014a6:	4619      	mov	r1, r3
 80014a8:	2030      	movs	r0, #48	@ 0x30
 80014aa:	f001 fa2d 	bl	8002908 <ConvertCharsToInt>
 80014ae:	61f8      	str	r0, [r7, #28]
					//sprintf(repeat, "Repeat: %c%c", rx_data[11], rx_data[12]);
					sprintf(repeat, "Repeat: %d/%d", currentRepeatNum, repeatInt);
 80014b0:	4b30      	ldr	r3, [pc, #192]	@ (8001574 <main+0x1e0>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	461a      	mov	r2, r3
 80014b8:	1d38      	adds	r0, r7, #4
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	492f      	ldr	r1, [pc, #188]	@ (800157c <main+0x1e8>)
 80014be:	f00d ff01 	bl	800f2c4 <siprintf>
					lcdSetCursor(10, 150);
 80014c2:	2196      	movs	r1, #150	@ 0x96
 80014c4:	200a      	movs	r0, #10
 80014c6:	f7ff fda7 	bl	8001018 <lcdSetCursor>
					lcdPrintf(repeat);
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fc87 	bl	8000de0 <lcdPrintf>
				}
				//protocol starts, update progress screen
				if (rx_byte == 'B') {
 80014d2:	4b23      	ldr	r3, [pc, #140]	@ (8001560 <main+0x1cc>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b42      	cmp	r3, #66	@ 0x42
 80014d8:	d10c      	bne.n	80014f4 <main+0x160>
					HAL_UART_Receive(&huart2, (uint8_t*) rx_data, sizeof(rx_data), 100);
 80014da:	2364      	movs	r3, #100	@ 0x64
 80014dc:	2214      	movs	r2, #20
 80014de:	4923      	ldr	r1, [pc, #140]	@ (800156c <main+0x1d8>)
 80014e0:	4820      	ldr	r0, [pc, #128]	@ (8001564 <main+0x1d0>)
 80014e2:	f008 f962 	bl	80097aa <HAL_UART_Receive>
					DrawProgressPage("FILL", rx_byte, rx_data);
 80014e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001560 <main+0x1cc>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	4a20      	ldr	r2, [pc, #128]	@ (800156c <main+0x1d8>)
 80014ec:	4619      	mov	r1, r3
 80014ee:	4820      	ldr	r0, [pc, #128]	@ (8001570 <main+0x1dc>)
 80014f0:	f000 fece 	bl	8002290 <DrawProgressPage>
				}
				if (rx_byte == 'M') {
 80014f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <main+0x1cc>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b4d      	cmp	r3, #77	@ 0x4d
 80014fa:	d10c      	bne.n	8001516 <main+0x182>
					HAL_UART_Receive(&huart2, (uint8_t*) rx_data, sizeof(rx_data), 100);
 80014fc:	2364      	movs	r3, #100	@ 0x64
 80014fe:	2214      	movs	r2, #20
 8001500:	491a      	ldr	r1, [pc, #104]	@ (800156c <main+0x1d8>)
 8001502:	4818      	ldr	r0, [pc, #96]	@ (8001564 <main+0x1d0>)
 8001504:	f008 f951 	bl	80097aa <HAL_UART_Receive>
					DrawProgressPage("FILL", rx_byte, rx_data);
 8001508:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <main+0x1cc>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4a17      	ldr	r2, [pc, #92]	@ (800156c <main+0x1d8>)
 800150e:	4619      	mov	r1, r3
 8001510:	4817      	ldr	r0, [pc, #92]	@ (8001570 <main+0x1dc>)
 8001512:	f000 febd 	bl	8002290 <DrawProgressPage>
				}
				if (rx_byte == 'P' ) {
 8001516:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <main+0x1cc>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b50      	cmp	r3, #80	@ 0x50
 800151c:	d10c      	bne.n	8001538 <main+0x1a4>
					HAL_UART_Receive(&huart2, (uint8_t*) rx_data, sizeof(rx_data), 100);
 800151e:	2364      	movs	r3, #100	@ 0x64
 8001520:	2214      	movs	r2, #20
 8001522:	4912      	ldr	r1, [pc, #72]	@ (800156c <main+0x1d8>)
 8001524:	480f      	ldr	r0, [pc, #60]	@ (8001564 <main+0x1d0>)
 8001526:	f008 f940 	bl	80097aa <HAL_UART_Receive>
					DrawProgressPage("FILL", rx_byte, rx_data);
 800152a:	4b0d      	ldr	r3, [pc, #52]	@ (8001560 <main+0x1cc>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	4a0f      	ldr	r2, [pc, #60]	@ (800156c <main+0x1d8>)
 8001530:	4619      	mov	r1, r3
 8001532:	480f      	ldr	r0, [pc, #60]	@ (8001570 <main+0x1dc>)
 8001534:	f000 feac 	bl	8002290 <DrawProgressPage>
				}

				//protocol finishes
				if (rx_byte == 'D') {
 8001538:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <main+0x1cc>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b44      	cmp	r3, #68	@ 0x44
 800153e:	f47f af5e 	bne.w	80013fe <main+0x6a>
				    //go to success page
					currentPage = PAGE_FINISH;
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <main+0x1c8>)
 8001544:	2204      	movs	r2, #4
 8001546:	701a      	strb	r2, [r3, #0]
					DrawPageFinish();
 8001548:	f001 fa64 	bl	8002a14 <DrawPageFinish>
    MX_USB_HOST_Process();
 800154c:	e757      	b.n	80013fe <main+0x6a>
 800154e:	bf00      	nop
 8001550:	40020c00 	.word	0x40020c00
 8001554:	200004b4 	.word	0x200004b4
 8001558:	200005cc 	.word	0x200005cc
 800155c:	20000594 	.word	0x20000594
 8001560:	2000059c 	.word	0x2000059c
 8001564:	200004fc 	.word	0x200004fc
 8001568:	200005b4 	.word	0x200005b4
 800156c:	200005a0 	.word	0x200005a0
 8001570:	080102a0 	.word	0x080102a0
 8001574:	20000266 	.word	0x20000266
 8001578:	080102a8 	.word	0x080102a8
 800157c:	080102ac 	.word	0x080102ac

08001580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b094      	sub	sp, #80	@ 0x50
 8001584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001586:	f107 0320 	add.w	r3, r7, #32
 800158a:	2230      	movs	r2, #48	@ 0x30
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f00d ffb0 	bl	800f4f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a4:	2300      	movs	r3, #0
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	4b28      	ldr	r3, [pc, #160]	@ (800164c <SystemClock_Config+0xcc>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ac:	4a27      	ldr	r2, [pc, #156]	@ (800164c <SystemClock_Config+0xcc>)
 80015ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b4:	4b25      	ldr	r3, [pc, #148]	@ (800164c <SystemClock_Config+0xcc>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c0:	2300      	movs	r3, #0
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	4b22      	ldr	r3, [pc, #136]	@ (8001650 <SystemClock_Config+0xd0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a21      	ldr	r2, [pc, #132]	@ (8001650 <SystemClock_Config+0xd0>)
 80015ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <SystemClock_Config+0xd0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015dc:	2301      	movs	r3, #1
 80015de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e6:	2302      	movs	r3, #2
 80015e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015f0:	2308      	movs	r3, #8
 80015f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015f4:	23a8      	movs	r3, #168	@ 0xa8
 80015f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015f8:	2302      	movs	r3, #2
 80015fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015fc:	2307      	movs	r3, #7
 80015fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4618      	mov	r0, r3
 8001606:	f005 fe71 	bl	80072ec <HAL_RCC_OscConfig>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001610:	f002 fc3e 	bl	8003e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001614:	230f      	movs	r3, #15
 8001616:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001618:	2302      	movs	r3, #2
 800161a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001620:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001624:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001626:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800162a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	2105      	movs	r1, #5
 8001632:	4618      	mov	r0, r3
 8001634:	f006 f8d2 	bl	80077dc <HAL_RCC_ClockConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800163e:	f002 fc27 	bl	8003e90 <Error_Handler>
  }
}
 8001642:	bf00      	nop
 8001644:	3750      	adds	r7, #80	@ 0x50
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	40007000 	.word	0x40007000

08001654 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001658:	4b17      	ldr	r3, [pc, #92]	@ (80016b8 <MX_SPI4_Init+0x64>)
 800165a:	4a18      	ldr	r2, [pc, #96]	@ (80016bc <MX_SPI4_Init+0x68>)
 800165c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800165e:	4b16      	ldr	r3, [pc, #88]	@ (80016b8 <MX_SPI4_Init+0x64>)
 8001660:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001664:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001666:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <MX_SPI4_Init+0x64>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800166c:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <MX_SPI4_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001672:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <MX_SPI4_Init+0x64>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001678:	4b0f      	ldr	r3, [pc, #60]	@ (80016b8 <MX_SPI4_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800167e:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <MX_SPI4_Init+0x64>)
 8001680:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001684:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001686:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <MX_SPI4_Init+0x64>)
 8001688:	2230      	movs	r2, #48	@ 0x30
 800168a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800168c:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <MX_SPI4_Init+0x64>)
 800168e:	2200      	movs	r2, #0
 8001690:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001692:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <MX_SPI4_Init+0x64>)
 8001694:	2200      	movs	r2, #0
 8001696:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001698:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <MX_SPI4_Init+0x64>)
 800169a:	2200      	movs	r2, #0
 800169c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 800169e:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <MX_SPI4_Init+0x64>)
 80016a0:	220a      	movs	r2, #10
 80016a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80016a4:	4804      	ldr	r0, [pc, #16]	@ (80016b8 <MX_SPI4_Init+0x64>)
 80016a6:	f006 fab7 	bl	8007c18 <HAL_SPI_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80016b0:	f002 fbee 	bl	8003e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000414 	.word	0x20000414
 80016bc:	40013400 	.word	0x40013400

080016c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c6:	f107 0308 	add.w	r3, r7, #8
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d4:	463b      	mov	r3, r7
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001758 <MX_TIM2_Init+0x98>)
 80016de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 80016e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001758 <MX_TIM2_Init+0x98>)
 80016e6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80016ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001758 <MX_TIM2_Init+0x98>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80016f2:	4b19      	ldr	r3, [pc, #100]	@ (8001758 <MX_TIM2_Init+0x98>)
 80016f4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80016f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fa:	4b17      	ldr	r3, [pc, #92]	@ (8001758 <MX_TIM2_Init+0x98>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001700:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <MX_TIM2_Init+0x98>)
 8001702:	2200      	movs	r2, #0
 8001704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001706:	4814      	ldr	r0, [pc, #80]	@ (8001758 <MX_TIM2_Init+0x98>)
 8001708:	f006 ff20 	bl	800854c <HAL_TIM_Base_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001712:	f002 fbbd 	bl	8003e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001716:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800171a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800171c:	f107 0308 	add.w	r3, r7, #8
 8001720:	4619      	mov	r1, r3
 8001722:	480d      	ldr	r0, [pc, #52]	@ (8001758 <MX_TIM2_Init+0x98>)
 8001724:	f007 faca 	bl	8008cbc <HAL_TIM_ConfigClockSource>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800172e:	f002 fbaf 	bl	8003e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800173a:	463b      	mov	r3, r7
 800173c:	4619      	mov	r1, r3
 800173e:	4806      	ldr	r0, [pc, #24]	@ (8001758 <MX_TIM2_Init+0x98>)
 8001740:	f007 fec8 	bl	80094d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800174a:	f002 fba1 	bl	8003e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2000046c 	.word	0x2000046c

0800175c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	@ 0x28
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001762:	f107 0320 	add.w	r3, r7, #32
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	611a      	str	r2, [r3, #16]
 800177a:	615a      	str	r2, [r3, #20]
 800177c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800177e:	4b21      	ldr	r3, [pc, #132]	@ (8001804 <MX_TIM3_Init+0xa8>)
 8001780:	4a21      	ldr	r2, [pc, #132]	@ (8001808 <MX_TIM3_Init+0xac>)
 8001782:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168-1;
 8001784:	4b1f      	ldr	r3, [pc, #124]	@ (8001804 <MX_TIM3_Init+0xa8>)
 8001786:	22a7      	movs	r2, #167	@ 0xa7
 8001788:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178a:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <MX_TIM3_Init+0xa8>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001790:	4b1c      	ldr	r3, [pc, #112]	@ (8001804 <MX_TIM3_Init+0xa8>)
 8001792:	2264      	movs	r2, #100	@ 0x64
 8001794:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001796:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <MX_TIM3_Init+0xa8>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179c:	4b19      	ldr	r3, [pc, #100]	@ (8001804 <MX_TIM3_Init+0xa8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017a2:	4818      	ldr	r0, [pc, #96]	@ (8001804 <MX_TIM3_Init+0xa8>)
 80017a4:	f006 ffc1 	bl	800872a <HAL_TIM_PWM_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80017ae:	f002 fb6f 	bl	8003e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017ba:	f107 0320 	add.w	r3, r7, #32
 80017be:	4619      	mov	r1, r3
 80017c0:	4810      	ldr	r0, [pc, #64]	@ (8001804 <MX_TIM3_Init+0xa8>)
 80017c2:	f007 fe87 	bl	80094d4 <HAL_TIMEx_MasterConfigSynchronization>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80017cc:	f002 fb60 	bl	8003e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d0:	2360      	movs	r3, #96	@ 0x60
 80017d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2200      	movs	r2, #0
 80017e4:	4619      	mov	r1, r3
 80017e6:	4807      	ldr	r0, [pc, #28]	@ (8001804 <MX_TIM3_Init+0xa8>)
 80017e8:	f007 f9a6 	bl	8008b38 <HAL_TIM_PWM_ConfigChannel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80017f2:	f002 fb4d 	bl	8003e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017f6:	4803      	ldr	r0, [pc, #12]	@ (8001804 <MX_TIM3_Init+0xa8>)
 80017f8:	f002 fc08 	bl	800400c <HAL_TIM_MspPostInit>

}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	@ 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200004b4 	.word	0x200004b4
 8001808:	40000400 	.word	0x40000400

0800180c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001810:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001812:	4a12      	ldr	r2, [pc, #72]	@ (800185c <MX_USART2_UART_Init+0x50>)
 8001814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001818:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800181c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800181e:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001824:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800182a:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001830:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001832:	220c      	movs	r2, #12
 8001834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001836:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001842:	4805      	ldr	r0, [pc, #20]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001844:	f007 fed6 	bl	80095f4 <HAL_UART_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800184e:	f002 fb1f 	bl	8003e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200004fc 	.word	0x200004fc
 800185c:	40004400 	.word	0x40004400

08001860 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
 8001874:	615a      	str	r2, [r3, #20]
 8001876:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001878:	4b28      	ldr	r3, [pc, #160]	@ (800191c <MX_FMC_Init+0xbc>)
 800187a:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800187e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001880:	4b26      	ldr	r3, [pc, #152]	@ (800191c <MX_FMC_Init+0xbc>)
 8001882:	4a27      	ldr	r2, [pc, #156]	@ (8001920 <MX_FMC_Init+0xc0>)
 8001884:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001886:	4b25      	ldr	r3, [pc, #148]	@ (800191c <MX_FMC_Init+0xbc>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800188c:	4b23      	ldr	r3, [pc, #140]	@ (800191c <MX_FMC_Init+0xbc>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001892:	4b22      	ldr	r3, [pc, #136]	@ (800191c <MX_FMC_Init+0xbc>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001898:	4b20      	ldr	r3, [pc, #128]	@ (800191c <MX_FMC_Init+0xbc>)
 800189a:	2210      	movs	r2, #16
 800189c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800189e:	4b1f      	ldr	r3, [pc, #124]	@ (800191c <MX_FMC_Init+0xbc>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80018a4:	4b1d      	ldr	r3, [pc, #116]	@ (800191c <MX_FMC_Init+0xbc>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
 80018aa:	4b1c      	ldr	r3, [pc, #112]	@ (800191c <MX_FMC_Init+0xbc>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80018b0:	4b1a      	ldr	r3, [pc, #104]	@ (800191c <MX_FMC_Init+0xbc>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80018b6:	4b19      	ldr	r3, [pc, #100]	@ (800191c <MX_FMC_Init+0xbc>)
 80018b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80018be:	4b17      	ldr	r3, [pc, #92]	@ (800191c <MX_FMC_Init+0xbc>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80018c4:	4b15      	ldr	r3, [pc, #84]	@ (800191c <MX_FMC_Init+0xbc>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80018ca:	4b14      	ldr	r3, [pc, #80]	@ (800191c <MX_FMC_Init+0xbc>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80018d0:	4b12      	ldr	r3, [pc, #72]	@ (800191c <MX_FMC_Init+0xbc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80018d6:	4b11      	ldr	r3, [pc, #68]	@ (800191c <MX_FMC_Init+0xbc>)
 80018d8:	2200      	movs	r2, #0
 80018da:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	@ (800191c <MX_FMC_Init+0xbc>)
 80018de:	2200      	movs	r2, #0
 80018e0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 3;
 80018e2:	2303      	movs	r3, #3
 80018e4:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80018e6:	230f      	movs	r3, #15
 80018e8:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 2;
 80018ea:	2302      	movs	r3, #2
 80018ec:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 2;
 80018ee:	2302      	movs	r3, #2
 80018f0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80018f2:	2310      	movs	r3, #16
 80018f4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80018f6:	2311      	movs	r3, #17
 80018f8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2200      	movs	r2, #0
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	@ (800191c <MX_FMC_Init+0xbc>)
 8001906:	f006 fdd9 	bl	80084bc <HAL_SRAM_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8001910:	f002 fabe 	bl	8003e90 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001914:	bf00      	nop
 8001916:	3720      	adds	r7, #32
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000544 	.word	0x20000544
 8001920:	a0000104 	.word	0xa0000104

08001924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08c      	sub	sp, #48	@ 0x30
 8001928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192a:	f107 031c 	add.w	r3, r7, #28
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	61bb      	str	r3, [r7, #24]
 800193e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	4a5b      	ldr	r2, [pc, #364]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 8001944:	f043 0310 	orr.w	r3, r3, #16
 8001948:	6313      	str	r3, [r2, #48]	@ 0x30
 800194a:	4b59      	ldr	r3, [pc, #356]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	61bb      	str	r3, [r7, #24]
 8001954:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	4b55      	ldr	r3, [pc, #340]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	4a54      	ldr	r2, [pc, #336]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 8001960:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001964:	6313      	str	r3, [r2, #48]	@ 0x30
 8001966:	4b52      	ldr	r3, [pc, #328]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	4b4e      	ldr	r3, [pc, #312]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	4a4d      	ldr	r2, [pc, #308]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6313      	str	r3, [r2, #48]	@ 0x30
 8001982:	4b4b      	ldr	r3, [pc, #300]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b47      	ldr	r3, [pc, #284]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	4a46      	ldr	r2, [pc, #280]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	6313      	str	r3, [r2, #48]	@ 0x30
 800199e:	4b44      	ldr	r3, [pc, #272]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	4b40      	ldr	r3, [pc, #256]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 80019b4:	f043 0308 	orr.w	r3, r3, #8
 80019b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ba:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	4b39      	ldr	r3, [pc, #228]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	4a38      	ldr	r2, [pc, #224]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d6:	4b36      	ldr	r3, [pc, #216]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019e8:	4832      	ldr	r0, [pc, #200]	@ (8001ab4 <MX_GPIO_Init+0x190>)
 80019ea:	f003 fb19 	bl	8005020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019f4:	4830      	ldr	r0, [pc, #192]	@ (8001ab8 <MX_GPIO_Init+0x194>)
 80019f6:	f003 fb13 	bl	8005020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_NRST_GPIO_Port, LCD_NRST_Pin, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2140      	movs	r1, #64	@ 0x40
 80019fe:	482f      	ldr	r0, [pc, #188]	@ (8001abc <MX_GPIO_Init+0x198>)
 8001a00:	f003 fb0e 	bl	8005020 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001a04:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a16:	2305      	movs	r3, #5
 8001a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4827      	ldr	r0, [pc, #156]	@ (8001ac0 <MX_GPIO_Init+0x19c>)
 8001a22:	f003 f939 	bl	8004c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	481d      	ldr	r0, [pc, #116]	@ (8001ab4 <MX_GPIO_Init+0x190>)
 8001a40:	f003 f92a 	bl	8004c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8001a44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a52:	2300      	movs	r3, #0
 8001a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8001a56:	f107 031c 	add.w	r3, r7, #28
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4816      	ldr	r0, [pc, #88]	@ (8001ab8 <MX_GPIO_Init+0x194>)
 8001a5e:	f003 f91b 	bl	8004c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_NRST_Pin */
  GPIO_InitStruct.Pin = LCD_NRST_Pin;
 8001a62:	2340      	movs	r3, #64	@ 0x40
 8001a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a66:	2301      	movs	r3, #1
 8001a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_NRST_GPIO_Port, &GPIO_InitStruct);
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	4619      	mov	r1, r3
 8001a78:	4810      	ldr	r0, [pc, #64]	@ (8001abc <MX_GPIO_Init+0x198>)
 8001a7a:	f003 f90d 	bl	8004c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001a7e:	2320      	movs	r3, #32
 8001a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a82:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	4619      	mov	r1, r3
 8001a92:	480b      	ldr	r0, [pc, #44]	@ (8001ac0 <MX_GPIO_Init+0x19c>)
 8001a94:	f003 f900 	bl	8004c98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	2017      	movs	r0, #23
 8001a9e:	f002 fe1e 	bl	80046de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001aa2:	2017      	movs	r0, #23
 8001aa4:	f002 fe37 	bl	8004716 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aa8:	bf00      	nop
 8001aaa:	3730      	adds	r7, #48	@ 0x30
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	40020800 	.word	0x40020800
 8001abc:	40020c00 	.word	0x40020c00
 8001ac0:	40020400 	.word	0x40020400

08001ac4 <DrawMainPage>:
/**
 * @brief: Draw main page and handle button label and status updates
 * @param: page_num: determines which page should be drawn from 1-10
 * @retval: none
 */
void DrawMainPage(uint8_t page_num) {
 8001ac4:	b5b0      	push	{r4, r5, r7, lr}
 8001ac6:	b0a8      	sub	sp, #160	@ 0xa0
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
	//Draw "Protocol Title" box
	lcdFillRGB(COLOR_WHITE);
 8001ace:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001ad2:	f7fe ffad 	bl	8000a30 <lcdFillRGB>
	char empty[20] = "Empty\n"; //strings from flash memory come with newline at end
 8001ad6:	4a9c      	ldr	r2, [pc, #624]	@ (8001d48 <DrawMainPage+0x284>)
 8001ad8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001adc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ae0:	6018      	str	r0, [r3, #0]
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	8019      	strh	r1, [r3, #0]
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	0c0a      	lsrs	r2, r1, #16
 8001aea:	701a      	strb	r2, [r3, #0]
 8001aec:	f107 0387 	add.w	r3, r7, #135	@ 0x87
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	731a      	strb	r2, [r3, #12]
	char pageTitle[20] = "";
 8001afa:	2300      	movs	r3, #0
 8001afc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001afe:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
	sprintf(pageTitle, "Page %d", page_num);
 8001b0c:	79fa      	ldrb	r2, [r7, #7]
 8001b0e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b12:	498e      	ldr	r1, [pc, #568]	@ (8001d4c <DrawMainPage+0x288>)
 8001b14:	4618      	mov	r0, r3
 8001b16:	f00d fbd5 	bl	800f2c4 <siprintf>
	lcdSetCursor(10, 10);
 8001b1a:	210a      	movs	r1, #10
 8001b1c:	200a      	movs	r0, #10
 8001b1e:	f7ff fa7b 	bl	8001018 <lcdSetCursor>
	lcdSetTextColor(COLOR_BLACK, COLOR_WHITE);
 8001b22:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001b26:	2000      	movs	r0, #0
 8001b28:	f7ff f9f6 	bl	8000f18 <lcdSetTextColor>
	lcdSetTextFont(&Font20);
 8001b2c:	4888      	ldr	r0, [pc, #544]	@ (8001d50 <DrawMainPage+0x28c>)
 8001b2e:	f7ff f9e3 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf(pageTitle);
 8001b32:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff f952 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 8001b3c:	4885      	ldr	r0, [pc, #532]	@ (8001d54 <DrawMainPage+0x290>)
 8001b3e:	f7ff f9db 	bl	8000ef8 <lcdSetTextFont>

	//get button label info from flash memory
	char readBuffer1[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001b42:	2300      	movs	r3, #0
 8001b44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b46:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
 8001b54:	611a      	str	r2, [r3, #16]
 8001b56:	615a      	str	r2, [r3, #20]
 8001b58:	619a      	str	r2, [r3, #24]
	char readBuffer2[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
 8001b6c:	611a      	str	r2, [r3, #16]
 8001b6e:	615a      	str	r2, [r3, #20]
 8001b70:	619a      	str	r2, [r3, #24]
	char readBuffer3[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	f107 0310 	add.w	r3, r7, #16
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	611a      	str	r2, [r3, #16]
 8001b86:	615a      	str	r2, [r3, #20]
 8001b88:	619a      	str	r2, [r3, #24]

	//if the protocol exists, read from it. else, name it empty
	if (read_from_flash(readBuffer1, get_sector_address(page_num))) {
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f002 f879 	bl	8003c84 <get_sector_address>
 8001b92:	4602      	mov	r2, r0
 8001b94:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f001 fb99 	bl	80032d2 <read_from_flash>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00a      	beq.n	8001bbc <DrawMainPage+0xf8>
		strcpy(buttons[0].label, readBuffer1);
 8001ba6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001baa:	4619      	mov	r1, r3
 8001bac:	486a      	ldr	r0, [pc, #424]	@ (8001d58 <DrawMainPage+0x294>)
 8001bae:	f00d fd2c 	bl	800f60a <strcpy>
		buttons[0].status = NOT_EMPTY;
 8001bb2:	4b6a      	ldr	r3, [pc, #424]	@ (8001d5c <DrawMainPage+0x298>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8001bba:	e009      	b.n	8001bd0 <DrawMainPage+0x10c>
	} else {
		strcpy(buttons[0].label, empty);
 8001bbc:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4865      	ldr	r0, [pc, #404]	@ (8001d58 <DrawMainPage+0x294>)
 8001bc4:	f00d fd21 	bl	800f60a <strcpy>
		buttons[0].status = EMPTY;
 8001bc8:	4b64      	ldr	r3, [pc, #400]	@ (8001d5c <DrawMainPage+0x298>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}
	if (read_from_flash(readBuffer2,
			get_sector_address(page_num) + PROTOCOL_SIZE)) {
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 f856 	bl	8003c84 <get_sector_address>
 8001bd8:	4603      	mov	r3, r0
	if (read_from_flash(readBuffer2,
 8001bda:	f503 53bb 	add.w	r3, r3, #5984	@ 0x1760
 8001bde:	3310      	adds	r3, #16
 8001be0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001be4:	4619      	mov	r1, r3
 8001be6:	4610      	mov	r0, r2
 8001be8:	f001 fb73 	bl	80032d2 <read_from_flash>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00a      	beq.n	8001c08 <DrawMainPage+0x144>
		strcpy(buttons[1].label, readBuffer2);
 8001bf2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4859      	ldr	r0, [pc, #356]	@ (8001d60 <DrawMainPage+0x29c>)
 8001bfa:	f00d fd06 	bl	800f60a <strcpy>
		buttons[1].status = NOT_EMPTY;
 8001bfe:	4b57      	ldr	r3, [pc, #348]	@ (8001d5c <DrawMainPage+0x298>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8001c06:	e009      	b.n	8001c1c <DrawMainPage+0x158>
	} else {
		strcpy(buttons[1].label, empty);
 8001c08:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4854      	ldr	r0, [pc, #336]	@ (8001d60 <DrawMainPage+0x29c>)
 8001c10:	f00d fcfb 	bl	800f60a <strcpy>
		buttons[1].status = EMPTY;
 8001c14:	4b51      	ldr	r3, [pc, #324]	@ (8001d5c <DrawMainPage+0x298>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
	}
	if (read_from_flash(readBuffer3,
			get_sector_address(page_num) + 2 * PROTOCOL_SIZE)) {
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f002 f830 	bl	8003c84 <get_sector_address>
 8001c24:	4603      	mov	r3, r0
	if (read_from_flash(readBuffer3,
 8001c26:	f503 533b 	add.w	r3, r3, #11968	@ 0x2ec0
 8001c2a:	3320      	adds	r3, #32
 8001c2c:	f107 020c 	add.w	r2, r7, #12
 8001c30:	4619      	mov	r1, r3
 8001c32:	4610      	mov	r0, r2
 8001c34:	f001 fb4d 	bl	80032d2 <read_from_flash>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00a      	beq.n	8001c54 <DrawMainPage+0x190>
		strcpy(buttons[2].label, readBuffer3);
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	4619      	mov	r1, r3
 8001c44:	4847      	ldr	r0, [pc, #284]	@ (8001d64 <DrawMainPage+0x2a0>)
 8001c46:	f00d fce0 	bl	800f60a <strcpy>
		buttons[2].status = NOT_EMPTY;
 8001c4a:	4b44      	ldr	r3, [pc, #272]	@ (8001d5c <DrawMainPage+0x298>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8001c52:	e009      	b.n	8001c68 <DrawMainPage+0x1a4>
	} else {
		strcpy(buttons[2].label, empty);
 8001c54:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4842      	ldr	r0, [pc, #264]	@ (8001d64 <DrawMainPage+0x2a0>)
 8001c5c:	f00d fcd5 	bl	800f60a <strcpy>
		buttons[2].status = EMPTY;
 8001c60:	4b3e      	ldr	r3, [pc, #248]	@ (8001d5c <DrawMainPage+0x298>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	}

	// Draw buttons
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c6e:	e08d      	b.n	8001d8c <DrawMainPage+0x2c8>
		lcdDrawRect(buttons[i].x, buttons[i].y, buttons[i].w, buttons[i].h,
 8001c70:	4a3a      	ldr	r2, [pc, #232]	@ (8001d5c <DrawMainPage+0x298>)
 8001c72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c76:	212a      	movs	r1, #42	@ 0x2a
 8001c78:	fb01 f303 	mul.w	r3, r1, r3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	b218      	sxth	r0, r3
 8001c82:	4a36      	ldr	r2, [pc, #216]	@ (8001d5c <DrawMainPage+0x298>)
 8001c84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c88:	212a      	movs	r1, #42	@ 0x2a
 8001c8a:	fb01 f303 	mul.w	r3, r1, r3
 8001c8e:	4413      	add	r3, r2
 8001c90:	3302      	adds	r3, #2
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	b219      	sxth	r1, r3
 8001c96:	4a31      	ldr	r2, [pc, #196]	@ (8001d5c <DrawMainPage+0x298>)
 8001c98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c9c:	242a      	movs	r4, #42	@ 0x2a
 8001c9e:	fb04 f303 	mul.w	r3, r4, r3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	b21a      	sxth	r2, r3
 8001caa:	4c2c      	ldr	r4, [pc, #176]	@ (8001d5c <DrawMainPage+0x298>)
 8001cac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cb0:	252a      	movs	r5, #42	@ 0x2a
 8001cb2:	fb05 f303 	mul.w	r3, r5, r3
 8001cb6:	4423      	add	r3, r4
 8001cb8:	3306      	adds	r3, #6
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	2400      	movs	r4, #0
 8001cc0:	9400      	str	r4, [sp, #0]
 8001cc2:	f7fe ff99 	bl	8000bf8 <lcdDrawRect>
		COLOR_BLACK);
		buttons[i].label[strlen(buttons[i].label) - 1] = ' '; //dont display null terminator
 8001cc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cca:	222a      	movs	r2, #42	@ 0x2a
 8001ccc:	fb02 f303 	mul.w	r3, r2, r3
 8001cd0:	3308      	adds	r3, #8
 8001cd2:	4a22      	ldr	r2, [pc, #136]	@ (8001d5c <DrawMainPage+0x298>)
 8001cd4:	4413      	add	r3, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fa8a 	bl	80001f0 <strlen>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	491e      	ldr	r1, [pc, #120]	@ (8001d5c <DrawMainPage+0x298>)
 8001ce2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001ce6:	202a      	movs	r0, #42	@ 0x2a
 8001ce8:	fb00 f202 	mul.w	r2, r0, r2
 8001cec:	440a      	add	r2, r1
 8001cee:	4413      	add	r3, r2
 8001cf0:	3308      	adds	r3, #8
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	701a      	strb	r2, [r3, #0]
		lcdSetCursor(buttons[i].x + 10, buttons[i].y + 10);
 8001cf6:	4a19      	ldr	r2, [pc, #100]	@ (8001d5c <DrawMainPage+0x298>)
 8001cf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cfc:	212a      	movs	r1, #42	@ 0x2a
 8001cfe:	fb01 f303 	mul.w	r3, r1, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	330a      	adds	r3, #10
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	4914      	ldr	r1, [pc, #80]	@ (8001d5c <DrawMainPage+0x298>)
 8001d0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d10:	202a      	movs	r0, #42	@ 0x2a
 8001d12:	fb00 f303 	mul.w	r3, r0, r3
 8001d16:	440b      	add	r3, r1
 8001d18:	3302      	adds	r3, #2
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	330a      	adds	r3, #10
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	4619      	mov	r1, r3
 8001d22:	4610      	mov	r0, r2
 8001d24:	f7ff f978 	bl	8001018 <lcdSetCursor>
		if (buttons[i].status == EMPTY) {
 8001d28:	4a0c      	ldr	r2, [pc, #48]	@ (8001d5c <DrawMainPage+0x298>)
 8001d2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d2e:	212a      	movs	r1, #42	@ 0x2a
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	4413      	add	r3, r2
 8001d36:	3328      	adds	r3, #40	@ 0x28
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d116      	bne.n	8001d6c <DrawMainPage+0x2a8>
			lcdPrintf("EMPTY");
 8001d3e:	480a      	ldr	r0, [pc, #40]	@ (8001d68 <DrawMainPage+0x2a4>)
 8001d40:	f7ff f84e 	bl	8000de0 <lcdPrintf>
 8001d44:	e01d      	b.n	8001d82 <DrawMainPage+0x2be>
 8001d46:	bf00      	nop
 8001d48:	080102cc 	.word	0x080102cc
 8001d4c:	080102bc 	.word	0x080102bc
 8001d50:	20000010 	.word	0x20000010
 8001d54:	20000008 	.word	0x20000008
 8001d58:	20000038 	.word	0x20000038
 8001d5c:	20000030 	.word	0x20000030
 8001d60:	20000062 	.word	0x20000062
 8001d64:	2000008c 	.word	0x2000008c
 8001d68:	080102c4 	.word	0x080102c4
		} else {
			lcdPrintf(buttons[i].label);
 8001d6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d70:	222a      	movs	r2, #42	@ 0x2a
 8001d72:	fb02 f303 	mul.w	r3, r2, r3
 8001d76:	3308      	adds	r3, #8
 8001d78:	4a3a      	ldr	r2, [pc, #232]	@ (8001e64 <DrawMainPage+0x3a0>)
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff f82f 	bl	8000de0 <lcdPrintf>
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8001d82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d86:	3301      	adds	r3, #1
 8001d88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001d8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	f77f af6d 	ble.w	8001c70 <DrawMainPage+0x1ac>
		}
	}

	// Draw "Next" button
	if (page_num != 10) {
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2b0a      	cmp	r3, #10
 8001d9a:	d01e      	beq.n	8001dda <DrawMainPage+0x316>
		//BSP_LCD_SetTextColor(LCD_COLOR_RED);
		lcdDrawRect(nextButton.x, nextButton.y, nextButton.w, nextButton.h,
 8001d9c:	4b32      	ldr	r3, [pc, #200]	@ (8001e68 <DrawMainPage+0x3a4>)
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	b218      	sxth	r0, r3
 8001da2:	4b31      	ldr	r3, [pc, #196]	@ (8001e68 <DrawMainPage+0x3a4>)
 8001da4:	885b      	ldrh	r3, [r3, #2]
 8001da6:	b219      	sxth	r1, r3
 8001da8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e68 <DrawMainPage+0x3a4>)
 8001daa:	889b      	ldrh	r3, [r3, #4]
 8001dac:	b21a      	sxth	r2, r3
 8001dae:	4b2e      	ldr	r3, [pc, #184]	@ (8001e68 <DrawMainPage+0x3a4>)
 8001db0:	88db      	ldrh	r3, [r3, #6]
 8001db2:	b21b      	sxth	r3, r3
 8001db4:	2400      	movs	r4, #0
 8001db6:	9400      	str	r4, [sp, #0]
 8001db8:	f7fe ff1e 	bl	8000bf8 <lcdDrawRect>
		COLOR_BLACK);
		lcdSetCursor(nextButton.x + 5, nextButton.y + 5);
 8001dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001e68 <DrawMainPage+0x3a4>)
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	3305      	adds	r3, #5
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	4b28      	ldr	r3, [pc, #160]	@ (8001e68 <DrawMainPage+0x3a4>)
 8001dc6:	885b      	ldrh	r3, [r3, #2]
 8001dc8:	3305      	adds	r3, #5
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4610      	mov	r0, r2
 8001dd0:	f7ff f922 	bl	8001018 <lcdSetCursor>
		lcdPrintf(nextButton.label);
 8001dd4:	4825      	ldr	r0, [pc, #148]	@ (8001e6c <DrawMainPage+0x3a8>)
 8001dd6:	f7ff f803 	bl	8000de0 <lcdPrintf>
	}

	// Draw "Back" button
	if (page_num != 1) {
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d01e      	beq.n	8001e1e <DrawMainPage+0x35a>
		lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8001de0:	4b23      	ldr	r3, [pc, #140]	@ (8001e70 <DrawMainPage+0x3ac>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	b218      	sxth	r0, r3
 8001de6:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <DrawMainPage+0x3ac>)
 8001de8:	885b      	ldrh	r3, [r3, #2]
 8001dea:	b219      	sxth	r1, r3
 8001dec:	4b20      	ldr	r3, [pc, #128]	@ (8001e70 <DrawMainPage+0x3ac>)
 8001dee:	889b      	ldrh	r3, [r3, #4]
 8001df0:	b21a      	sxth	r2, r3
 8001df2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e70 <DrawMainPage+0x3ac>)
 8001df4:	88db      	ldrh	r3, [r3, #6]
 8001df6:	b21b      	sxth	r3, r3
 8001df8:	2400      	movs	r4, #0
 8001dfa:	9400      	str	r4, [sp, #0]
 8001dfc:	f7fe fefc 	bl	8000bf8 <lcdDrawRect>
		COLOR_BLACK);
		lcdSetCursor(backButton.x + 5, backButton.y + 5);
 8001e00:	4b1b      	ldr	r3, [pc, #108]	@ (8001e70 <DrawMainPage+0x3ac>)
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	3305      	adds	r3, #5
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <DrawMainPage+0x3ac>)
 8001e0a:	885b      	ldrh	r3, [r3, #2]
 8001e0c:	3305      	adds	r3, #5
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	4619      	mov	r1, r3
 8001e12:	4610      	mov	r0, r2
 8001e14:	f7ff f900 	bl	8001018 <lcdSetCursor>
		lcdPrintf(backButton.label);
 8001e18:	4816      	ldr	r0, [pc, #88]	@ (8001e74 <DrawMainPage+0x3b0>)
 8001e1a:	f7fe ffe1 	bl	8000de0 <lcdPrintf>
	}
//
	//draw "Queue" button on page 1
	lcdDrawRect(queueButton.x, queueButton.y, queueButton.w, queueButton.h,
 8001e1e:	4b16      	ldr	r3, [pc, #88]	@ (8001e78 <DrawMainPage+0x3b4>)
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	b218      	sxth	r0, r3
 8001e24:	4b14      	ldr	r3, [pc, #80]	@ (8001e78 <DrawMainPage+0x3b4>)
 8001e26:	885b      	ldrh	r3, [r3, #2]
 8001e28:	b219      	sxth	r1, r3
 8001e2a:	4b13      	ldr	r3, [pc, #76]	@ (8001e78 <DrawMainPage+0x3b4>)
 8001e2c:	889b      	ldrh	r3, [r3, #4]
 8001e2e:	b21a      	sxth	r2, r3
 8001e30:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <DrawMainPage+0x3b4>)
 8001e32:	88db      	ldrh	r3, [r3, #6]
 8001e34:	b21b      	sxth	r3, r3
 8001e36:	2400      	movs	r4, #0
 8001e38:	9400      	str	r4, [sp, #0]
 8001e3a:	f7fe fedd 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(queueButton.x + 5, queueButton.y + 5);
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e78 <DrawMainPage+0x3b4>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	3305      	adds	r3, #5
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <DrawMainPage+0x3b4>)
 8001e48:	885b      	ldrh	r3, [r3, #2]
 8001e4a:	3305      	adds	r3, #5
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4610      	mov	r0, r2
 8001e52:	f7ff f8e1 	bl	8001018 <lcdSetCursor>
	lcdPrintf(queueButton.label);
 8001e56:	4809      	ldr	r0, [pc, #36]	@ (8001e7c <DrawMainPage+0x3b8>)
 8001e58:	f7fe ffc2 	bl	8000de0 <lcdPrintf>
}
 8001e5c:	bf00      	nop
 8001e5e:	3798      	adds	r7, #152	@ 0x98
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bdb0      	pop	{r4, r5, r7, pc}
 8001e64:	20000030 	.word	0x20000030
 8001e68:	200001e4 	.word	0x200001e4
 8001e6c:	200001ec 	.word	0x200001ec
 8001e70:	200001b8 	.word	0x200001b8
 8001e74:	200001c0 	.word	0x200001c0
 8001e78:	200000b0 	.word	0x200000b0
 8001e7c:	200000b8 	.word	0x200000b8

08001e80 <DrawInfoPage>:
/**
 * @brief: Draw select page with run, delete and queue buttons
 * @param: protocolTitle: title of the protocol to be displayed
 * @retval: none
 */
void DrawInfoPage(char protocolTitle[MAX_LINE_LENGTH]) {
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	6078      	str	r0, [r7, #4]
	lcdFillRGB(COLOR_WHITE);
 8001e88:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e8c:	f7fe fdd0 	bl	8000a30 <lcdFillRGB>
	//Display protocol name at top of screen
	lcdSetCursor(90, 10);
 8001e90:	210a      	movs	r1, #10
 8001e92:	205a      	movs	r0, #90	@ 0x5a
 8001e94:	f7ff f8c0 	bl	8001018 <lcdSetCursor>
	lcdSetTextFont(&Font20);
 8001e98:	4844      	ldr	r0, [pc, #272]	@ (8001fac <DrawInfoPage+0x12c>)
 8001e9a:	f7ff f82d 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf(protocolTitle);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe ff9e 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 8001ea4:	4842      	ldr	r0, [pc, #264]	@ (8001fb0 <DrawInfoPage+0x130>)
 8001ea6:	f7ff f827 	bl	8000ef8 <lcdSetTextFont>

	//Draw "QueueSelect" button on select page
	lcdDrawRect(queueSelectButton.x, queueSelectButton.y, queueSelectButton.w,
 8001eaa:	4b42      	ldr	r3, [pc, #264]	@ (8001fb4 <DrawInfoPage+0x134>)
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	b218      	sxth	r0, r3
 8001eb0:	4b40      	ldr	r3, [pc, #256]	@ (8001fb4 <DrawInfoPage+0x134>)
 8001eb2:	885b      	ldrh	r3, [r3, #2]
 8001eb4:	b219      	sxth	r1, r3
 8001eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8001fb4 <DrawInfoPage+0x134>)
 8001eb8:	889b      	ldrh	r3, [r3, #4]
 8001eba:	b21a      	sxth	r2, r3
			queueSelectButton.h, COLOR_BLACK);
 8001ebc:	4b3d      	ldr	r3, [pc, #244]	@ (8001fb4 <DrawInfoPage+0x134>)
 8001ebe:	88db      	ldrh	r3, [r3, #6]
	lcdDrawRect(queueSelectButton.x, queueSelectButton.y, queueSelectButton.w,
 8001ec0:	b21b      	sxth	r3, r3
 8001ec2:	2400      	movs	r4, #0
 8001ec4:	9400      	str	r4, [sp, #0]
 8001ec6:	f7fe fe97 	bl	8000bf8 <lcdDrawRect>
	lcdSetCursor(queueSelectButton.x + 10, queueSelectButton.y + 10);
 8001eca:	4b3a      	ldr	r3, [pc, #232]	@ (8001fb4 <DrawInfoPage+0x134>)
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	330a      	adds	r3, #10
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	4b38      	ldr	r3, [pc, #224]	@ (8001fb4 <DrawInfoPage+0x134>)
 8001ed4:	885b      	ldrh	r3, [r3, #2]
 8001ed6:	330a      	adds	r3, #10
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	4619      	mov	r1, r3
 8001edc:	4610      	mov	r0, r2
 8001ede:	f7ff f89b 	bl	8001018 <lcdSetCursor>
	lcdPrintf(queueSelectButton.label);
 8001ee2:	4835      	ldr	r0, [pc, #212]	@ (8001fb8 <DrawInfoPage+0x138>)
 8001ee4:	f7fe ff7c 	bl	8000de0 <lcdPrintf>

	//Draw "Select" button
	lcdDrawRect(selectButton.x, selectButton.y, selectButton.w, selectButton.h,
 8001ee8:	4b34      	ldr	r3, [pc, #208]	@ (8001fbc <DrawInfoPage+0x13c>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	b218      	sxth	r0, r3
 8001eee:	4b33      	ldr	r3, [pc, #204]	@ (8001fbc <DrawInfoPage+0x13c>)
 8001ef0:	885b      	ldrh	r3, [r3, #2]
 8001ef2:	b219      	sxth	r1, r3
 8001ef4:	4b31      	ldr	r3, [pc, #196]	@ (8001fbc <DrawInfoPage+0x13c>)
 8001ef6:	889b      	ldrh	r3, [r3, #4]
 8001ef8:	b21a      	sxth	r2, r3
 8001efa:	4b30      	ldr	r3, [pc, #192]	@ (8001fbc <DrawInfoPage+0x13c>)
 8001efc:	88db      	ldrh	r3, [r3, #6]
 8001efe:	b21b      	sxth	r3, r3
 8001f00:	2400      	movs	r4, #0
 8001f02:	9400      	str	r4, [sp, #0]
 8001f04:	f7fe fe78 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(selectButton.x + 10, selectButton.y + 10);
 8001f08:	4b2c      	ldr	r3, [pc, #176]	@ (8001fbc <DrawInfoPage+0x13c>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	330a      	adds	r3, #10
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	4b2a      	ldr	r3, [pc, #168]	@ (8001fbc <DrawInfoPage+0x13c>)
 8001f12:	885b      	ldrh	r3, [r3, #2]
 8001f14:	330a      	adds	r3, #10
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	f7ff f87c 	bl	8001018 <lcdSetCursor>
	lcdPrintf(selectButton.label);
 8001f20:	4827      	ldr	r0, [pc, #156]	@ (8001fc0 <DrawInfoPage+0x140>)
 8001f22:	f7fe ff5d 	bl	8000de0 <lcdPrintf>

	//Draw "Delete" button
	lcdDrawRect(deleteButton.x, deleteButton.y, deleteButton.w, deleteButton.h,
 8001f26:	4b27      	ldr	r3, [pc, #156]	@ (8001fc4 <DrawInfoPage+0x144>)
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	b218      	sxth	r0, r3
 8001f2c:	4b25      	ldr	r3, [pc, #148]	@ (8001fc4 <DrawInfoPage+0x144>)
 8001f2e:	885b      	ldrh	r3, [r3, #2]
 8001f30:	b219      	sxth	r1, r3
 8001f32:	4b24      	ldr	r3, [pc, #144]	@ (8001fc4 <DrawInfoPage+0x144>)
 8001f34:	889b      	ldrh	r3, [r3, #4]
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	4b22      	ldr	r3, [pc, #136]	@ (8001fc4 <DrawInfoPage+0x144>)
 8001f3a:	88db      	ldrh	r3, [r3, #6]
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	2400      	movs	r4, #0
 8001f40:	9400      	str	r4, [sp, #0]
 8001f42:	f7fe fe59 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(deleteButton.x + 10, deleteButton.y + 10);
 8001f46:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc4 <DrawInfoPage+0x144>)
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	330a      	adds	r3, #10
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc4 <DrawInfoPage+0x144>)
 8001f50:	885b      	ldrh	r3, [r3, #2]
 8001f52:	330a      	adds	r3, #10
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	4619      	mov	r1, r3
 8001f58:	4610      	mov	r0, r2
 8001f5a:	f7ff f85d 	bl	8001018 <lcdSetCursor>
	lcdPrintf(deleteButton.label);
 8001f5e:	481a      	ldr	r0, [pc, #104]	@ (8001fc8 <DrawInfoPage+0x148>)
 8001f60:	f7fe ff3e 	bl	8000de0 <lcdPrintf>

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8001f64:	4b19      	ldr	r3, [pc, #100]	@ (8001fcc <DrawInfoPage+0x14c>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	b218      	sxth	r0, r3
 8001f6a:	4b18      	ldr	r3, [pc, #96]	@ (8001fcc <DrawInfoPage+0x14c>)
 8001f6c:	885b      	ldrh	r3, [r3, #2]
 8001f6e:	b219      	sxth	r1, r3
 8001f70:	4b16      	ldr	r3, [pc, #88]	@ (8001fcc <DrawInfoPage+0x14c>)
 8001f72:	889b      	ldrh	r3, [r3, #4]
 8001f74:	b21a      	sxth	r2, r3
 8001f76:	4b15      	ldr	r3, [pc, #84]	@ (8001fcc <DrawInfoPage+0x14c>)
 8001f78:	88db      	ldrh	r3, [r3, #6]
 8001f7a:	b21b      	sxth	r3, r3
 8001f7c:	2400      	movs	r4, #0
 8001f7e:	9400      	str	r4, [sp, #0]
 8001f80:	f7fe fe3a 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 8001f84:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <DrawInfoPage+0x14c>)
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	330a      	adds	r3, #10
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fcc <DrawInfoPage+0x14c>)
 8001f8e:	885b      	ldrh	r3, [r3, #2]
 8001f90:	330a      	adds	r3, #10
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	4619      	mov	r1, r3
 8001f96:	4610      	mov	r0, r2
 8001f98:	f7ff f83e 	bl	8001018 <lcdSetCursor>
	lcdPrintf(backButton.label);
 8001f9c:	480c      	ldr	r0, [pc, #48]	@ (8001fd0 <DrawInfoPage+0x150>)
 8001f9e:	f7fe ff1f 	bl	8000de0 <lcdPrintf>
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd90      	pop	{r4, r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000010 	.word	0x20000010
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	20000134 	.word	0x20000134
 8001fb8:	2000013c 	.word	0x2000013c
 8001fbc:	20000160 	.word	0x20000160
 8001fc0:	20000168 	.word	0x20000168
 8001fc4:	2000018c 	.word	0x2000018c
 8001fc8:	20000194 	.word	0x20000194
 8001fcc:	200001b8 	.word	0x200001b8
 8001fd0:	200001c0 	.word	0x200001c0

08001fd4 <DrawConfirmationPage>:
 * @brief: Confirmation page to delete a protocol
 * @param: sector: which sector in flash memory the protocol exists
 * @param: offset: which section of the sector the protocol exists
 * @retval: none
 */
void DrawConfirmationPage(uint32_t sector, uint32_t offset) {
 8001fd4:	b590      	push	{r4, r7, lr}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
	lcdFillRGB(COLOR_WHITE);
 8001fde:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001fe2:	f7fe fd25 	bl	8000a30 <lcdFillRGB>

	//display confirmation text
	lcdSetCursor(10, 10);
 8001fe6:	210a      	movs	r1, #10
 8001fe8:	200a      	movs	r0, #10
 8001fea:	f7ff f815 	bl	8001018 <lcdSetCursor>
	lcdSetTextFont(&Font20);
 8001fee:	482c      	ldr	r0, [pc, #176]	@ (80020a0 <DrawConfirmationPage+0xcc>)
 8001ff0:	f7fe ff82 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf("Delete: ");
 8001ff4:	482b      	ldr	r0, [pc, #172]	@ (80020a4 <DrawConfirmationPage+0xd0>)
 8001ff6:	f7fe fef3 	bl	8000de0 <lcdPrintf>
	lcdPrintf(buttons[offset].label);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	222a      	movs	r2, #42	@ 0x2a
 8001ffe:	fb02 f303 	mul.w	r3, r2, r3
 8002002:	3308      	adds	r3, #8
 8002004:	4a28      	ldr	r2, [pc, #160]	@ (80020a8 <DrawConfirmationPage+0xd4>)
 8002006:	4413      	add	r3, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fee9 	bl	8000de0 <lcdPrintf>
	lcdPrintf("?");
 800200e:	4827      	ldr	r0, [pc, #156]	@ (80020ac <DrawConfirmationPage+0xd8>)
 8002010:	f7fe fee6 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 8002014:	4826      	ldr	r0, [pc, #152]	@ (80020b0 <DrawConfirmationPage+0xdc>)
 8002016:	f7fe ff6f 	bl	8000ef8 <lcdSetTextFont>

	//Draw "Confirm" button
	lcdDrawRect(confirmButton.x, confirmButton.y, confirmButton.w,
 800201a:	4b26      	ldr	r3, [pc, #152]	@ (80020b4 <DrawConfirmationPage+0xe0>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	b218      	sxth	r0, r3
 8002020:	4b24      	ldr	r3, [pc, #144]	@ (80020b4 <DrawConfirmationPage+0xe0>)
 8002022:	885b      	ldrh	r3, [r3, #2]
 8002024:	b219      	sxth	r1, r3
 8002026:	4b23      	ldr	r3, [pc, #140]	@ (80020b4 <DrawConfirmationPage+0xe0>)
 8002028:	889b      	ldrh	r3, [r3, #4]
 800202a:	b21a      	sxth	r2, r3
			confirmButton.h, COLOR_BLACK);
 800202c:	4b21      	ldr	r3, [pc, #132]	@ (80020b4 <DrawConfirmationPage+0xe0>)
 800202e:	88db      	ldrh	r3, [r3, #6]
	lcdDrawRect(confirmButton.x, confirmButton.y, confirmButton.w,
 8002030:	b21b      	sxth	r3, r3
 8002032:	2400      	movs	r4, #0
 8002034:	9400      	str	r4, [sp, #0]
 8002036:	f7fe fddf 	bl	8000bf8 <lcdDrawRect>
	lcdSetCursor(confirmButton.x + 10, confirmButton.y + 10);
 800203a:	4b1e      	ldr	r3, [pc, #120]	@ (80020b4 <DrawConfirmationPage+0xe0>)
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	330a      	adds	r3, #10
 8002040:	b29a      	uxth	r2, r3
 8002042:	4b1c      	ldr	r3, [pc, #112]	@ (80020b4 <DrawConfirmationPage+0xe0>)
 8002044:	885b      	ldrh	r3, [r3, #2]
 8002046:	330a      	adds	r3, #10
 8002048:	b29b      	uxth	r3, r3
 800204a:	4619      	mov	r1, r3
 800204c:	4610      	mov	r0, r2
 800204e:	f7fe ffe3 	bl	8001018 <lcdSetCursor>
	lcdPrintf(confirmButton.label);
 8002052:	4819      	ldr	r0, [pc, #100]	@ (80020b8 <DrawConfirmationPage+0xe4>)
 8002054:	f7fe fec4 	bl	8000de0 <lcdPrintf>

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8002058:	4b18      	ldr	r3, [pc, #96]	@ (80020bc <DrawConfirmationPage+0xe8>)
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	b218      	sxth	r0, r3
 800205e:	4b17      	ldr	r3, [pc, #92]	@ (80020bc <DrawConfirmationPage+0xe8>)
 8002060:	885b      	ldrh	r3, [r3, #2]
 8002062:	b219      	sxth	r1, r3
 8002064:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <DrawConfirmationPage+0xe8>)
 8002066:	889b      	ldrh	r3, [r3, #4]
 8002068:	b21a      	sxth	r2, r3
 800206a:	4b14      	ldr	r3, [pc, #80]	@ (80020bc <DrawConfirmationPage+0xe8>)
 800206c:	88db      	ldrh	r3, [r3, #6]
 800206e:	b21b      	sxth	r3, r3
 8002070:	2400      	movs	r4, #0
 8002072:	9400      	str	r4, [sp, #0]
 8002074:	f7fe fdc0 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 8002078:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <DrawConfirmationPage+0xe8>)
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	330a      	adds	r3, #10
 800207e:	b29a      	uxth	r2, r3
 8002080:	4b0e      	ldr	r3, [pc, #56]	@ (80020bc <DrawConfirmationPage+0xe8>)
 8002082:	885b      	ldrh	r3, [r3, #2]
 8002084:	330a      	adds	r3, #10
 8002086:	b29b      	uxth	r3, r3
 8002088:	4619      	mov	r1, r3
 800208a:	4610      	mov	r0, r2
 800208c:	f7fe ffc4 	bl	8001018 <lcdSetCursor>
	lcdPrintf(backButton.label);
 8002090:	480b      	ldr	r0, [pc, #44]	@ (80020c0 <DrawConfirmationPage+0xec>)
 8002092:	f7fe fea5 	bl	8000de0 <lcdPrintf>
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	bd90      	pop	{r4, r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000010 	.word	0x20000010
 80020a4:	080102e0 	.word	0x080102e0
 80020a8:	20000030 	.word	0x20000030
 80020ac:	080102ec 	.word	0x080102ec
 80020b0:	20000008 	.word	0x20000008
 80020b4:	20000108 	.word	0x20000108
 80020b8:	20000110 	.word	0x20000110
 80020bc:	200001b8 	.word	0x200001b8
 80020c0:	200001c0 	.word	0x200001c0

080020c4 <DrawQueuePage>:
/**
 * @brief: Queue page has up to 10 protocols lined up
 * @param: queueSize: number of protocols in the queue
 * @retval: none
 */
void DrawQueuePage(uint8_t queueSize) {
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b093      	sub	sp, #76	@ 0x4c
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
	lcdFillRGB(COLOR_WHITE);
 80020ce:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80020d2:	f7fe fcad 	bl	8000a30 <lcdFillRGB>
	char pageTitle[20] = "";
 80020d6:	2300      	movs	r3, #0
 80020d8:	623b      	str	r3, [r7, #32]
 80020da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]
	sprintf(pageTitle, "Queue Size: %d", queueSize);
 80020e8:	79fa      	ldrb	r2, [r7, #7]
 80020ea:	f107 0320 	add.w	r3, r7, #32
 80020ee:	495e      	ldr	r1, [pc, #376]	@ (8002268 <DrawQueuePage+0x1a4>)
 80020f0:	4618      	mov	r0, r3
 80020f2:	f00d f8e7 	bl	800f2c4 <siprintf>
	//Display Queue at top of the screen
	lcdSetCursor(60, 10);
 80020f6:	210a      	movs	r1, #10
 80020f8:	203c      	movs	r0, #60	@ 0x3c
 80020fa:	f7fe ff8d 	bl	8001018 <lcdSetCursor>
	lcdSetTextFont(&Font20);
 80020fe:	485b      	ldr	r0, [pc, #364]	@ (800226c <DrawQueuePage+0x1a8>)
 8002100:	f7fe fefa 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf(pageTitle);
 8002104:	f107 0320 	add.w	r3, r7, #32
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fe69 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 800210e:	4858      	ldr	r0, [pc, #352]	@ (8002270 <DrawQueuePage+0x1ac>)
 8002110:	f7fe fef2 	bl	8000ef8 <lcdSetTextFont>

	//display protocols in queue here
	char format[20] = "";
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	f107 0310 	add.w	r3, r7, #16
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
	int startSpotX, startSpotY;
	for (uint8_t i = 0; i < queueSize; i++) {
 8002126:	2300      	movs	r3, #0
 8002128:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800212c:	e055      	b.n	80021da <DrawQueuePage+0x116>
		if (i < 5) {
 800212e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002132:	2b04      	cmp	r3, #4
 8002134:	d804      	bhi.n	8002140 <DrawQueuePage+0x7c>
			startSpotX = 10;
 8002136:	230a      	movs	r3, #10
 8002138:	63fb      	str	r3, [r7, #60]	@ 0x3c
			startSpotY = 50;
 800213a:	2332      	movs	r3, #50	@ 0x32
 800213c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800213e:	e004      	b.n	800214a <DrawQueuePage+0x86>
		} else {
			startSpotX = 160;
 8002140:	23a0      	movs	r3, #160	@ 0xa0
 8002142:	63fb      	str	r3, [r7, #60]	@ 0x3c
			startSpotY = 50 - 100;	//convoluted ik
 8002144:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 8002148:	63bb      	str	r3, [r7, #56]	@ 0x38
		}
		sprintf(format, "%d.) ", i + 1);
 800214a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	4947      	ldr	r1, [pc, #284]	@ (8002274 <DrawQueuePage+0x1b0>)
 8002156:	4618      	mov	r0, r3
 8002158:	f00d f8b4 	bl	800f2c4 <siprintf>
		lcdSetCursor(startSpotX, startSpotY + i * 20);
 800215c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800215e:	b298      	uxth	r0, r3
 8002160:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002164:	b29b      	uxth	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	0092      	lsls	r2, r2, #2
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	b29a      	uxth	r2, r3
 8002170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002172:	b29b      	uxth	r3, r3
 8002174:	4413      	add	r3, r2
 8002176:	b29b      	uxth	r3, r3
 8002178:	4619      	mov	r1, r3
 800217a:	f7fe ff4d 	bl	8001018 <lcdSetCursor>
		lcdSetTextFont(&Font12);
 800217e:	483e      	ldr	r0, [pc, #248]	@ (8002278 <DrawQueuePage+0x1b4>)
 8002180:	f7fe feba 	bl	8000ef8 <lcdSetTextFont>
		lcdPrintf(format);
 8002184:	f107 030c 	add.w	r3, r7, #12
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe fe29 	bl	8000de0 <lcdPrintf>
		lcdSetTextFont(&Font16);
 800218e:	4838      	ldr	r0, [pc, #224]	@ (8002270 <DrawQueuePage+0x1ac>)
 8002190:	f7fe feb2 	bl	8000ef8 <lcdSetTextFont>
		lcdSetCursor(startSpotX + 24, startSpotY + i * 20);
 8002194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002196:	b29b      	uxth	r3, r3
 8002198:	3318      	adds	r3, #24
 800219a:	b298      	uxth	r0, r3
 800219c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	0092      	lsls	r2, r2, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	4413      	add	r3, r2
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	4619      	mov	r1, r3
 80021b6:	f7fe ff2f 	bl	8001018 <lcdSetCursor>
		lcdPrintf(queueBuffer[i][0]);
 80021ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80021be:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 80021c2:	fb02 f303 	mul.w	r3, r2, r3
 80021c6:	4a2d      	ldr	r2, [pc, #180]	@ (800227c <DrawQueuePage+0x1b8>)
 80021c8:	4413      	add	r3, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fe08 	bl	8000de0 <lcdPrintf>
	for (uint8_t i = 0; i < queueSize; i++) {
 80021d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80021d4:	3301      	adds	r3, #1
 80021d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80021da:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d3a4      	bcc.n	800212e <DrawQueuePage+0x6a>

	}

	//Draw "Run" button
	lcdDrawRect(runButton.x, runButton.y, runButton.w, runButton.h,
 80021e4:	4b26      	ldr	r3, [pc, #152]	@ (8002280 <DrawQueuePage+0x1bc>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	b218      	sxth	r0, r3
 80021ea:	4b25      	ldr	r3, [pc, #148]	@ (8002280 <DrawQueuePage+0x1bc>)
 80021ec:	885b      	ldrh	r3, [r3, #2]
 80021ee:	b219      	sxth	r1, r3
 80021f0:	4b23      	ldr	r3, [pc, #140]	@ (8002280 <DrawQueuePage+0x1bc>)
 80021f2:	889b      	ldrh	r3, [r3, #4]
 80021f4:	b21a      	sxth	r2, r3
 80021f6:	4b22      	ldr	r3, [pc, #136]	@ (8002280 <DrawQueuePage+0x1bc>)
 80021f8:	88db      	ldrh	r3, [r3, #6]
 80021fa:	b21b      	sxth	r3, r3
 80021fc:	2400      	movs	r4, #0
 80021fe:	9400      	str	r4, [sp, #0]
 8002200:	f7fe fcfa 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(runButton.x + 10, runButton.y + 10);
 8002204:	4b1e      	ldr	r3, [pc, #120]	@ (8002280 <DrawQueuePage+0x1bc>)
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	330a      	adds	r3, #10
 800220a:	b29a      	uxth	r2, r3
 800220c:	4b1c      	ldr	r3, [pc, #112]	@ (8002280 <DrawQueuePage+0x1bc>)
 800220e:	885b      	ldrh	r3, [r3, #2]
 8002210:	330a      	adds	r3, #10
 8002212:	b29b      	uxth	r3, r3
 8002214:	4619      	mov	r1, r3
 8002216:	4610      	mov	r0, r2
 8002218:	f7fe fefe 	bl	8001018 <lcdSetCursor>
	lcdPrintf(runButton.label);
 800221c:	4819      	ldr	r0, [pc, #100]	@ (8002284 <DrawQueuePage+0x1c0>)
 800221e:	f7fe fddf 	bl	8000de0 <lcdPrintf>

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8002222:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <DrawQueuePage+0x1c4>)
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	b218      	sxth	r0, r3
 8002228:	4b17      	ldr	r3, [pc, #92]	@ (8002288 <DrawQueuePage+0x1c4>)
 800222a:	885b      	ldrh	r3, [r3, #2]
 800222c:	b219      	sxth	r1, r3
 800222e:	4b16      	ldr	r3, [pc, #88]	@ (8002288 <DrawQueuePage+0x1c4>)
 8002230:	889b      	ldrh	r3, [r3, #4]
 8002232:	b21a      	sxth	r2, r3
 8002234:	4b14      	ldr	r3, [pc, #80]	@ (8002288 <DrawQueuePage+0x1c4>)
 8002236:	88db      	ldrh	r3, [r3, #6]
 8002238:	b21b      	sxth	r3, r3
 800223a:	2400      	movs	r4, #0
 800223c:	9400      	str	r4, [sp, #0]
 800223e:	f7fe fcdb 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 8002242:	4b11      	ldr	r3, [pc, #68]	@ (8002288 <DrawQueuePage+0x1c4>)
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	330a      	adds	r3, #10
 8002248:	b29a      	uxth	r2, r3
 800224a:	4b0f      	ldr	r3, [pc, #60]	@ (8002288 <DrawQueuePage+0x1c4>)
 800224c:	885b      	ldrh	r3, [r3, #2]
 800224e:	330a      	adds	r3, #10
 8002250:	b29b      	uxth	r3, r3
 8002252:	4619      	mov	r1, r3
 8002254:	4610      	mov	r0, r2
 8002256:	f7fe fedf 	bl	8001018 <lcdSetCursor>
	lcdPrintf(backButton.label);
 800225a:	480c      	ldr	r0, [pc, #48]	@ (800228c <DrawQueuePage+0x1c8>)
 800225c:	f7fe fdc0 	bl	8000de0 <lcdPrintf>
}
 8002260:	bf00      	nop
 8002262:	3744      	adds	r7, #68	@ 0x44
 8002264:	46bd      	mov	sp, r7
 8002266:	bd90      	pop	{r4, r7, pc}
 8002268:	080102f0 	.word	0x080102f0
 800226c:	20000010 	.word	0x20000010
 8002270:	20000008 	.word	0x20000008
 8002274:	08010300 	.word	0x08010300
 8002278:	20000000 	.word	0x20000000
 800227c:	200005d8 	.word	0x200005d8
 8002280:	200000dc 	.word	0x200000dc
 8002284:	200000e4 	.word	0x200000e4
 8002288:	200001b8 	.word	0x200001b8
 800228c:	200001c0 	.word	0x200001c0

08002290 <DrawProgressPage>:
 * @param: protocolTitle: display protocol being run
 * @param: rx_byte: current motor movement type
 * @param: rx_data: current motor movement info
 * @retval: none
 */
void DrawProgressPage(char protocolTitle[20], uint8_t rx_byte, char *rx_data) {
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b0d5      	sub	sp, #340	@ 0x154
 8002294:	af02      	add	r7, sp, #8
 8002296:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800229a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800229e:	6018      	str	r0, [r3, #0]
 80022a0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80022a4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80022ae:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 80022b2:	460a      	mov	r2, r1
 80022b4:	701a      	strb	r2, [r3, #0]
	lcdFillRGB(COLOR_WHITE);
 80022b6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80022ba:	f7fe fbb9 	bl	8000a30 <lcdFillRGB>

	//protocol title
	lcdSetCursor(100, 10);
 80022be:	210a      	movs	r1, #10
 80022c0:	2064      	movs	r0, #100	@ 0x64
 80022c2:	f7fe fea9 	bl	8001018 <lcdSetCursor>
	lcdPrintf(currentProtocolTitle);
 80022c6:	48ca      	ldr	r0, [pc, #808]	@ (80025f0 <DrawProgressPage+0x360>)
 80022c8:	f7fe fd8a 	bl	8000de0 <lcdPrintf>

	//bind
	if (rx_byte == 'B') {
 80022cc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80022d0:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b42      	cmp	r3, #66	@ 0x42
 80022d8:	f040 8142 	bne.w	8002560 <DrawProgressPage+0x2d0>
		//protocol type
		char protocolType[20] = "";
 80022dc:	2300      	movs	r3, #0
 80022de:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80022e2:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	60da      	str	r2, [r3, #12]
		sprintf(protocolType, "Bind");
 80022f0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022f4:	49bf      	ldr	r1, [pc, #764]	@ (80025f4 <DrawProgressPage+0x364>)
 80022f6:	4618      	mov	r0, r3
 80022f8:	f00c ffe4 	bl	800f2c4 <siprintf>
		lcdSetCursor(10, 30);
 80022fc:	211e      	movs	r1, #30
 80022fe:	200a      	movs	r0, #10
 8002300:	f7fe fe8a 	bl	8001018 <lcdSetCursor>
		lcdSetTextFont(&Font16);
 8002304:	48bc      	ldr	r0, [pc, #752]	@ (80025f8 <DrawProgressPage+0x368>)
 8002306:	f7fe fdf7 	bl	8000ef8 <lcdSetTextFont>
		lcdPrintf(protocolType);
 800230a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fd66 	bl	8000de0 <lcdPrintf>
		//lcdSetTextFont(&Font16);
		//speed
		char speed[20] = "";
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800231a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	60da      	str	r2, [r3, #12]
		printf("start test\n");
 8002328:	48b4      	ldr	r0, [pc, #720]	@ (80025fc <DrawProgressPage+0x36c>)
 800232a:	f00c ffc3 	bl	800f2b4 <puts>
		uint32_t speedInt = ConvertCharsToInt('0', '0', rx_data[1]);
 800232e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002332:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	3301      	adds	r3, #1
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	2130      	movs	r1, #48	@ 0x30
 8002340:	2030      	movs	r0, #48	@ 0x30
 8002342:	f000 fae1 	bl	8002908 <ConvertCharsToInt>
 8002346:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
		sprintf(speed, "Speed: %d", speedInt);
 800234a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800234e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002352:	49ab      	ldr	r1, [pc, #684]	@ (8002600 <DrawProgressPage+0x370>)
 8002354:	4618      	mov	r0, r3
 8002356:	f00c ffb5 	bl	800f2c4 <siprintf>
		//printf("%d\n", speedInt);
		lcdSetCursor(10, 50);
 800235a:	2132      	movs	r1, #50	@ 0x32
 800235c:	200a      	movs	r0, #10
 800235e:	f7fe fe5b 	bl	8001018 <lcdSetCursor>
		lcdPrintf(speed);
 8002362:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe fd3a 	bl	8000de0 <lcdPrintf>
		//duration
		char duration[20] = "";
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002372:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	60da      	str	r2, [r3, #12]
		uint32_t durationInt = ConvertCharsToInt('0', rx_data[2], rx_data[3]);
 8002380:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002384:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	3302      	adds	r3, #2
 800238c:	7819      	ldrb	r1, [r3, #0]
 800238e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002392:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	3303      	adds	r3, #3
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	2030      	movs	r0, #48	@ 0x30
 80023a0:	f000 fab2 	bl	8002908 <ConvertCharsToInt>
 80023a4:	f8c7 0140 	str.w	r0, [r7, #320]	@ 0x140
		//sprintf(duration, "Duration: %c%c", rx_data[2], rx_data[3]);
		sprintf(duration, "Duration: %d", durationInt);
 80023a8:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80023ac:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 80023b0:	4994      	ldr	r1, [pc, #592]	@ (8002604 <DrawProgressPage+0x374>)
 80023b2:	4618      	mov	r0, r3
 80023b4:	f00c ff86 	bl	800f2c4 <siprintf>
		lcdSetCursor(10, 70);
 80023b8:	2146      	movs	r1, #70	@ 0x46
 80023ba:	200a      	movs	r0, #10
 80023bc:	f7fe fe2c 	bl	8001018 <lcdSetCursor>
		lcdPrintf(duration);
 80023c0:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe fd0b 	bl	8000de0 <lcdPrintf>
		//volume
		char volume[20] = "";
 80023ca:	2300      	movs	r3, #0
 80023cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80023d0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
		uint32_t volumeInt = ConvertCharsToInt(rx_data[4], rx_data[5], rx_data[6]);
 80023de:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80023e2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	3304      	adds	r3, #4
 80023ea:	7818      	ldrb	r0, [r3, #0]
 80023ec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80023f0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	3305      	adds	r3, #5
 80023f8:	7819      	ldrb	r1, [r3, #0]
 80023fa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80023fe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3306      	adds	r3, #6
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	f000 fa7d 	bl	8002908 <ConvertCharsToInt>
 800240e:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
		//sprintf(volume, "Volume: %c%c%c", rx_data[4], rx_data[5], rx_data[6]);
		sprintf(volume, "Volume: %d", volumeInt);
 8002412:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002416:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800241a:	497b      	ldr	r1, [pc, #492]	@ (8002608 <DrawProgressPage+0x378>)
 800241c:	4618      	mov	r0, r3
 800241e:	f00c ff51 	bl	800f2c4 <siprintf>
		lcdSetCursor(10, 90);
 8002422:	215a      	movs	r1, #90	@ 0x5a
 8002424:	200a      	movs	r0, #10
 8002426:	f7fe fdf7 	bl	8001018 <lcdSetCursor>
		lcdPrintf(volume);
 800242a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe fcd6 	bl	8000de0 <lcdPrintf>
		//depth
		char depth[20] = "";
 8002434:	2300      	movs	r3, #0
 8002436:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800243a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	60da      	str	r2, [r3, #12]
		uint32_t depthInt = ConvertCharsToInt(rx_data[7], rx_data[8], rx_data[9]);
 8002448:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800244c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	3307      	adds	r3, #7
 8002454:	7818      	ldrb	r0, [r3, #0]
 8002456:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800245a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	3308      	adds	r3, #8
 8002462:	7819      	ldrb	r1, [r3, #0]
 8002464:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002468:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	3309      	adds	r3, #9
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	f000 fa48 	bl	8002908 <ConvertCharsToInt>
 8002478:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138
		//sprintf(depth, "Depth: %c%c%c", rx_data[7], rx_data[8], rx_data[9]);
		sprintf(depth, "Depth: %d", depthInt);
 800247c:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002480:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8002484:	4961      	ldr	r1, [pc, #388]	@ (800260c <DrawProgressPage+0x37c>)
 8002486:	4618      	mov	r0, r3
 8002488:	f00c ff1c 	bl	800f2c4 <siprintf>
		lcdSetCursor(10, 110);
 800248c:	216e      	movs	r1, #110	@ 0x6e
 800248e:	200a      	movs	r0, #10
 8002490:	f7fe fdc2 	bl	8001018 <lcdSetCursor>
		lcdPrintf(depth);
 8002494:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe fca1 	bl	8000de0 <lcdPrintf>
		//pauseDuration
		char pauseDuration[20] = "";
 800249e:	2300      	movs	r3, #0
 80024a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024a4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
		uint32_t pauseInt = ConvertCharsToInt('0', rx_data[10], rx_data[11]);
 80024b2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80024b6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	330a      	adds	r3, #10
 80024be:	7819      	ldrb	r1, [r3, #0]
 80024c0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80024c4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	330b      	adds	r3, #11
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	2030      	movs	r0, #48	@ 0x30
 80024d2:	f000 fa19 	bl	8002908 <ConvertCharsToInt>
 80024d6:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
		sprintf(pauseDuration, "PauseDuration: %d", pauseInt);
 80024da:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80024de:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80024e2:	494b      	ldr	r1, [pc, #300]	@ (8002610 <DrawProgressPage+0x380>)
 80024e4:	4618      	mov	r0, r3
 80024e6:	f00c feed 	bl	800f2c4 <siprintf>
		lcdSetCursor(10, 130);
 80024ea:	2182      	movs	r1, #130	@ 0x82
 80024ec:	200a      	movs	r0, #10
 80024ee:	f7fe fd93 	bl	8001018 <lcdSetCursor>
		lcdPrintf(pauseDuration);
 80024f2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe fc72 	bl	8000de0 <lcdPrintf>
		//repeat
		char repeat[20] = "";
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002502:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	605a      	str	r2, [r3, #4]
 800250c:	609a      	str	r2, [r3, #8]
 800250e:	60da      	str	r2, [r3, #12]
		uint32_t repeatInt = ConvertCharsToInt('0', rx_data[12], rx_data[13]);
 8002510:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002514:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	330c      	adds	r3, #12
 800251c:	7819      	ldrb	r1, [r3, #0]
 800251e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002522:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	330d      	adds	r3, #13
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	2030      	movs	r0, #48	@ 0x30
 8002530:	f000 f9ea 	bl	8002908 <ConvertCharsToInt>
 8002534:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
		//sprintf(repeat, "Repeat: %c%c", rx_data[11], rx_data[12]);
		sprintf(repeat, "Repeat: %d/%d", currentRepeatNum, repeatInt);
 8002538:	4b36      	ldr	r3, [pc, #216]	@ (8002614 <DrawProgressPage+0x384>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	461a      	mov	r2, r3
 8002540:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 8002544:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002548:	4933      	ldr	r1, [pc, #204]	@ (8002618 <DrawProgressPage+0x388>)
 800254a:	f00c febb 	bl	800f2c4 <siprintf>
		lcdSetCursor(10, 150);
 800254e:	2196      	movs	r1, #150	@ 0x96
 8002550:	200a      	movs	r0, #10
 8002552:	f7fe fd61 	bl	8001018 <lcdSetCursor>
		lcdPrintf(repeat);
 8002556:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe fc40 	bl	8000de0 <lcdPrintf>
	}

	//pause
	if (rx_byte == 'P') {
 8002560:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002564:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b50      	cmp	r3, #80	@ 0x50
 800256c:	d15c      	bne.n	8002628 <DrawProgressPage+0x398>
		char protocolType[20] = "";
 800256e:	2300      	movs	r3, #0
 8002570:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002574:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
		sprintf(protocolType, "Pause");
 8002582:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002586:	4925      	ldr	r1, [pc, #148]	@ (800261c <DrawProgressPage+0x38c>)
 8002588:	4618      	mov	r0, r3
 800258a:	f00c fe9b 	bl	800f2c4 <siprintf>
		lcdSetCursor(60, 30);
 800258e:	211e      	movs	r1, #30
 8002590:	203c      	movs	r0, #60	@ 0x3c
 8002592:	f7fe fd41 	bl	8001018 <lcdSetCursor>
		lcdSetTextFont(&Font20);
 8002596:	4822      	ldr	r0, [pc, #136]	@ (8002620 <DrawProgressPage+0x390>)
 8002598:	f7fe fcae 	bl	8000ef8 <lcdSetTextFont>
		lcdPrintf(protocolType);
 800259c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fe fc1d 	bl	8000de0 <lcdPrintf>
		lcdSetTextFont(&Font16);
 80025a6:	4814      	ldr	r0, [pc, #80]	@ (80025f8 <DrawProgressPage+0x368>)
 80025a8:	f7fe fca6 	bl	8000ef8 <lcdSetTextFont>
		//duration
		char duration[20] = "";
 80025ac:	2300      	movs	r3, #0
 80025ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80025b0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
		sprintf(duration, "Duration: %c", rx_data[1]);
 80025be:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80025c2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	461a      	mov	r2, r3
 80025ce:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80025d2:	4914      	ldr	r1, [pc, #80]	@ (8002624 <DrawProgressPage+0x394>)
 80025d4:	4618      	mov	r0, r3
 80025d6:	f00c fe75 	bl	800f2c4 <siprintf>
		lcdSetCursor(60, 50);
 80025da:	2132      	movs	r1, #50	@ 0x32
 80025dc:	203c      	movs	r0, #60	@ 0x3c
 80025de:	f7fe fd1b 	bl	8001018 <lcdSetCursor>
		lcdPrintf(duration);
 80025e2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fbfa 	bl	8000de0 <lcdPrintf>
 80025ec:	e01c      	b.n	8002628 <DrawProgressPage+0x398>
 80025ee:	bf00      	nop
 80025f0:	200005b4 	.word	0x200005b4
 80025f4:	08010308 	.word	0x08010308
 80025f8:	20000008 	.word	0x20000008
 80025fc:	08010310 	.word	0x08010310
 8002600:	0801031c 	.word	0x0801031c
 8002604:	08010328 	.word	0x08010328
 8002608:	08010338 	.word	0x08010338
 800260c:	08010344 	.word	0x08010344
 8002610:	08010350 	.word	0x08010350
 8002614:	20000266 	.word	0x20000266
 8002618:	080102ac 	.word	0x080102ac
 800261c:	08010364 	.word	0x08010364
 8002620:	20000010 	.word	0x20000010
 8002624:	0801036c 	.word	0x0801036c
	}

	//move
	if (rx_byte == 'M') {
 8002628:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800262c:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b4d      	cmp	r3, #77	@ 0x4d
 8002634:	f040 80ca 	bne.w	80027cc <DrawProgressPage+0x53c>
		char protocolType[20] = "";
 8002638:	2300      	movs	r3, #0
 800263a:	667b      	str	r3, [r7, #100]	@ 0x64
 800263c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
		sprintf(protocolType, "Magnetize");
 800264a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800264e:	4974      	ldr	r1, [pc, #464]	@ (8002820 <DrawProgressPage+0x590>)
 8002650:	4618      	mov	r0, r3
 8002652:	f00c fe37 	bl	800f2c4 <siprintf>
		lcdSetCursor(60, 30);
 8002656:	211e      	movs	r1, #30
 8002658:	203c      	movs	r0, #60	@ 0x3c
 800265a:	f7fe fcdd 	bl	8001018 <lcdSetCursor>
		lcdSetTextFont(&Font20);
 800265e:	4871      	ldr	r0, [pc, #452]	@ (8002824 <DrawProgressPage+0x594>)
 8002660:	f7fe fc4a 	bl	8000ef8 <lcdSetTextFont>
		lcdPrintf(protocolType);
 8002664:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe fbb9 	bl	8000de0 <lcdPrintf>
		lcdSetTextFont(&Font16);
 800266e:	486e      	ldr	r0, [pc, #440]	@ (8002828 <DrawProgressPage+0x598>)
 8002670:	f7fe fc42 	bl	8000ef8 <lcdSetTextFont>
		//init surface time
		char initTime[20] = "";
 8002674:	2300      	movs	r3, #0
 8002676:	653b      	str	r3, [r7, #80]	@ 0x50
 8002678:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
		uint32_t initTimeInt = ConvertCharsToInt(rx_data[1], rx_data[2], rx_data[3]);
 8002686:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800268a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	3301      	adds	r3, #1
 8002692:	7818      	ldrb	r0, [r3, #0]
 8002694:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002698:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	3302      	adds	r3, #2
 80026a0:	7819      	ldrb	r1, [r3, #0]
 80026a2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80026a6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	3303      	adds	r3, #3
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	f000 f929 	bl	8002908 <ConvertCharsToInt>
 80026b6:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
		sprintf(initTime, "Init Time: %d", initTimeInt);
 80026ba:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80026be:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80026c2:	495a      	ldr	r1, [pc, #360]	@ (800282c <DrawProgressPage+0x59c>)
 80026c4:	4618      	mov	r0, r3
 80026c6:	f00c fdfd 	bl	800f2c4 <siprintf>
		lcdSetCursor(60, 50);
 80026ca:	2132      	movs	r1, #50	@ 0x32
 80026cc:	203c      	movs	r0, #60	@ 0x3c
 80026ce:	f7fe fca3 	bl	8001018 <lcdSetCursor>
		lcdPrintf(initTime);
 80026d2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fb82 	bl	8000de0 <lcdPrintf>
		//speed
		char speed[20] = "";
 80026dc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80026e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	60da      	str	r2, [r3, #12]
		sprintf(speed, "Speed: %d", ConvertCharsToInt('0', '0', rx_data[4]));
 80026f4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80026f8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	3304      	adds	r3, #4
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	2130      	movs	r1, #48	@ 0x30
 8002706:	2030      	movs	r0, #48	@ 0x30
 8002708:	f000 f8fe 	bl	8002908 <ConvertCharsToInt>
 800270c:	4602      	mov	r2, r0
 800270e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002712:	4947      	ldr	r1, [pc, #284]	@ (8002830 <DrawProgressPage+0x5a0>)
 8002714:	4618      	mov	r0, r3
 8002716:	f00c fdd5 	bl	800f2c4 <siprintf>
		lcdSetCursor(60, 70);
 800271a:	2146      	movs	r1, #70	@ 0x46
 800271c:	203c      	movs	r0, #60	@ 0x3c
 800271e:	f7fe fc7b 	bl	8001018 <lcdSetCursor>
		lcdPrintf(speed);
 8002722:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fb5a 	bl	8000de0 <lcdPrintf>
		//Stop at Sequences
		char stopNumber[20] = "";
 800272c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002730:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	3304      	adds	r3, #4
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]
 8002740:	609a      	str	r2, [r3, #8]
 8002742:	60da      	str	r2, [r3, #12]
		sprintf(stopNumber, "Stop Number: %d", ConvertCharsToInt('0', '0', rx_data[5]));
 8002744:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002748:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	3305      	adds	r3, #5
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	2130      	movs	r1, #48	@ 0x30
 8002756:	2030      	movs	r0, #48	@ 0x30
 8002758:	f000 f8d6 	bl	8002908 <ConvertCharsToInt>
 800275c:	4602      	mov	r2, r0
 800275e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002762:	4934      	ldr	r1, [pc, #208]	@ (8002834 <DrawProgressPage+0x5a4>)
 8002764:	4618      	mov	r0, r3
 8002766:	f00c fdad 	bl	800f2c4 <siprintf>
		lcdSetCursor(60, 90);
 800276a:	215a      	movs	r1, #90	@ 0x5a
 800276c:	203c      	movs	r0, #60	@ 0x3c
 800276e:	f7fe fc53 	bl	8001018 <lcdSetCursor>
		lcdPrintf(stopNumber);
 8002772:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fb32 	bl	8000de0 <lcdPrintf>
		//Sequence Pause Time
		char sequencePause[20] = "";
 800277c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002780:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	3304      	adds	r3, #4
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	605a      	str	r2, [r3, #4]
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	60da      	str	r2, [r3, #12]
		sprintf(sequencePause, "Sequence Pause: %d", ConvertCharsToInt('0', '0', rx_data[6]));
 8002794:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002798:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	3306      	adds	r3, #6
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	2130      	movs	r1, #48	@ 0x30
 80027a6:	2030      	movs	r0, #48	@ 0x30
 80027a8:	f000 f8ae 	bl	8002908 <ConvertCharsToInt>
 80027ac:	4602      	mov	r2, r0
 80027ae:	f107 0314 	add.w	r3, r7, #20
 80027b2:	4921      	ldr	r1, [pc, #132]	@ (8002838 <DrawProgressPage+0x5a8>)
 80027b4:	4618      	mov	r0, r3
 80027b6:	f00c fd85 	bl	800f2c4 <siprintf>
		lcdSetCursor(60, 110);
 80027ba:	216e      	movs	r1, #110	@ 0x6e
 80027bc:	203c      	movs	r0, #60	@ 0x3c
 80027be:	f7fe fc2b 	bl	8001018 <lcdSetCursor>
		lcdPrintf(sequencePause);
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe fb0a 	bl	8000de0 <lcdPrintf>
	//time remaining in protocol
//	char protocolTimeRemaining[25] = "";
//	sprintf(protocolTimeRemaining, "Remaining Time: %d", protocolTimer);
//	lcdSetCursor(60, 130);
//	lcdPrintf(protocolTimeRemaining);
	lcdSetCursor(10, 170);
 80027cc:	21aa      	movs	r1, #170	@ 0xaa
 80027ce:	200a      	movs	r0, #10
 80027d0:	f7fe fc22 	bl	8001018 <lcdSetCursor>
	DrawCountdownTime();
 80027d4:	f000 f836 	bl	8002844 <DrawCountdownTime>

	// Draw "Stop" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 80027d8:	4b18      	ldr	r3, [pc, #96]	@ (800283c <DrawProgressPage+0x5ac>)
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	b218      	sxth	r0, r3
 80027de:	4b17      	ldr	r3, [pc, #92]	@ (800283c <DrawProgressPage+0x5ac>)
 80027e0:	885b      	ldrh	r3, [r3, #2]
 80027e2:	b219      	sxth	r1, r3
 80027e4:	4b15      	ldr	r3, [pc, #84]	@ (800283c <DrawProgressPage+0x5ac>)
 80027e6:	889b      	ldrh	r3, [r3, #4]
 80027e8:	b21a      	sxth	r2, r3
 80027ea:	4b14      	ldr	r3, [pc, #80]	@ (800283c <DrawProgressPage+0x5ac>)
 80027ec:	88db      	ldrh	r3, [r3, #6]
 80027ee:	b21b      	sxth	r3, r3
 80027f0:	2400      	movs	r4, #0
 80027f2:	9400      	str	r4, [sp, #0]
 80027f4:	f7fe fa00 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 80027f8:	4b10      	ldr	r3, [pc, #64]	@ (800283c <DrawProgressPage+0x5ac>)
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	330a      	adds	r3, #10
 80027fe:	b29a      	uxth	r2, r3
 8002800:	4b0e      	ldr	r3, [pc, #56]	@ (800283c <DrawProgressPage+0x5ac>)
 8002802:	885b      	ldrh	r3, [r3, #2]
 8002804:	330a      	adds	r3, #10
 8002806:	b29b      	uxth	r3, r3
 8002808:	4619      	mov	r1, r3
 800280a:	4610      	mov	r0, r2
 800280c:	f7fe fc04 	bl	8001018 <lcdSetCursor>
	lcdPrintf("Stop");
 8002810:	480b      	ldr	r0, [pc, #44]	@ (8002840 <DrawProgressPage+0x5b0>)
 8002812:	f7fe fae5 	bl	8000de0 <lcdPrintf>
}
 8002816:	bf00      	nop
 8002818:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 800281c:	46bd      	mov	sp, r7
 800281e:	bd90      	pop	{r4, r7, pc}
 8002820:	0801037c 	.word	0x0801037c
 8002824:	20000010 	.word	0x20000010
 8002828:	20000008 	.word	0x20000008
 800282c:	08010388 	.word	0x08010388
 8002830:	0801031c 	.word	0x0801031c
 8002834:	08010398 	.word	0x08010398
 8002838:	080103a8 	.word	0x080103a8
 800283c:	200001b8 	.word	0x200001b8
 8002840:	080103bc 	.word	0x080103bc

08002844 <DrawCountdownTime>:

//dont want to update the whole progress page, just the countdown timer
void DrawCountdownTime (void) {
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af00      	add	r7, sp, #0
	//time remaining in protocol
	uint8_t minutes = protocolTimer / 60;
 800284a:	4b2b      	ldr	r3, [pc, #172]	@ (80028f8 <DrawCountdownTime+0xb4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a2b      	ldr	r2, [pc, #172]	@ (80028fc <DrawCountdownTime+0xb8>)
 8002850:	fb82 1203 	smull	r1, r2, r2, r3
 8002854:	441a      	add	r2, r3
 8002856:	1152      	asrs	r2, r2, #5
 8002858:	17db      	asrs	r3, r3, #31
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	77fb      	strb	r3, [r7, #31]
	uint8_t seconds = protocolTimer % 60;
 800285e:	4b26      	ldr	r3, [pc, #152]	@ (80028f8 <DrawCountdownTime+0xb4>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	4b26      	ldr	r3, [pc, #152]	@ (80028fc <DrawCountdownTime+0xb8>)
 8002864:	fb83 1302 	smull	r1, r3, r3, r2
 8002868:	4413      	add	r3, r2
 800286a:	1159      	asrs	r1, r3, #5
 800286c:	17d3      	asrs	r3, r2, #31
 800286e:	1ac9      	subs	r1, r1, r3
 8002870:	460b      	mov	r3, r1
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	1a5b      	subs	r3, r3, r1
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	1ad1      	subs	r1, r2, r3
 800287a:	460b      	mov	r3, r1
 800287c:	77bb      	strb	r3, [r7, #30]
	char protocolTimeRemaining[25] = "";
 800287e:	2300      	movs	r3, #0
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	f107 0308 	add.w	r3, r7, #8
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	609a      	str	r2, [r3, #8]
 800288e:	60da      	str	r2, [r3, #12]
 8002890:	611a      	str	r2, [r3, #16]
 8002892:	751a      	strb	r2, [r3, #20]
	if (seconds < 10) {
 8002894:	7fbb      	ldrb	r3, [r7, #30]
 8002896:	2b09      	cmp	r3, #9
 8002898:	d80c      	bhi.n	80028b4 <DrawCountdownTime+0x70>
		memset(protocolTimeRemaining, 0, 25); // Sets all elements of buffer to 0
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	2219      	movs	r2, #25
 800289e:	2100      	movs	r1, #0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f00c fe27 	bl	800f4f4 <memset>
		sprintf(protocolTimeRemaining, "Remaining Time: %d:0%d", minutes, seconds);
 80028a6:	7ffa      	ldrb	r2, [r7, #31]
 80028a8:	7fbb      	ldrb	r3, [r7, #30]
 80028aa:	1d38      	adds	r0, r7, #4
 80028ac:	4914      	ldr	r1, [pc, #80]	@ (8002900 <DrawCountdownTime+0xbc>)
 80028ae:	f00c fd09 	bl	800f2c4 <siprintf>
 80028b2:	e00b      	b.n	80028cc <DrawCountdownTime+0x88>
	} else {
		memset(protocolTimeRemaining, 0, 25); // Sets all elements of buffer to 0
 80028b4:	1d3b      	adds	r3, r7, #4
 80028b6:	2219      	movs	r2, #25
 80028b8:	2100      	movs	r1, #0
 80028ba:	4618      	mov	r0, r3
 80028bc:	f00c fe1a 	bl	800f4f4 <memset>
		sprintf(protocolTimeRemaining, "Remaining Time: %d:%d", minutes, seconds);
 80028c0:	7ffa      	ldrb	r2, [r7, #31]
 80028c2:	7fbb      	ldrb	r3, [r7, #30]
 80028c4:	1d38      	adds	r0, r7, #4
 80028c6:	490f      	ldr	r1, [pc, #60]	@ (8002904 <DrawCountdownTime+0xc0>)
 80028c8:	f00c fcfc 	bl	800f2c4 <siprintf>
	}
	protocolTimeRemaining[strlen(protocolTimeRemaining)] = NULL_CHAR;
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fd fc8e 	bl	80001f0 <strlen>
 80028d4:	4603      	mov	r3, r0
 80028d6:	3320      	adds	r3, #32
 80028d8:	443b      	add	r3, r7
 80028da:	2200      	movs	r2, #0
 80028dc:	f803 2c1c 	strb.w	r2, [r3, #-28]
	lcdSetCursor(10, 170);
 80028e0:	21aa      	movs	r1, #170	@ 0xaa
 80028e2:	200a      	movs	r0, #10
 80028e4:	f7fe fb98 	bl	8001018 <lcdSetCursor>
	lcdPrintf(protocolTimeRemaining);
 80028e8:	1d3b      	adds	r3, r7, #4
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe fa78 	bl	8000de0 <lcdPrintf>
}
 80028f0:	bf00      	nop
 80028f2:	3720      	adds	r7, #32
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000598 	.word	0x20000598
 80028fc:	88888889 	.word	0x88888889
 8002900:	080103c4 	.word	0x080103c4
 8002904:	080103dc 	.word	0x080103dc

08002908 <ConvertCharsToInt>:
 * @param: x: 100's place of the digit
 * @param: y: 10's place of the digit
 * @param: z: 1's place of the digit
 * @retval: converted integer
 */
uint32_t ConvertCharsToInt(char x, char y, char z) {
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
 8002912:	460b      	mov	r3, r1
 8002914:	71bb      	strb	r3, [r7, #6]
 8002916:	4613      	mov	r3, r2
 8002918:	717b      	strb	r3, [r7, #5]
	uint32_t returnVal = ((x - '0') * 100) + ((y - '0') * 10) + (z - '0');
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	3b30      	subs	r3, #48	@ 0x30
 800291e:	2264      	movs	r2, #100	@ 0x64
 8002920:	fb02 f103 	mul.w	r1, r2, r3
 8002924:	79bb      	ldrb	r3, [r7, #6]
 8002926:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	18ca      	adds	r2, r1, r3
 8002934:	797b      	ldrb	r3, [r7, #5]
 8002936:	3b30      	subs	r3, #48	@ 0x30
 8002938:	4413      	add	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
	return returnVal;
 800293c:	68fb      	ldr	r3, [r7, #12]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <DrawStopPage>:

void DrawStopPage(void) {
 800294c:	b590      	push	{r4, r7, lr}
 800294e:	b083      	sub	sp, #12
 8002950:	af02      	add	r7, sp, #8
	lcdFillRGB(COLOR_WHITE);
 8002952:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002956:	f7fe f86b 	bl	8000a30 <lcdFillRGB>

	//display confirmation text
	lcdSetCursor(100, 10);
 800295a:	210a      	movs	r1, #10
 800295c:	2064      	movs	r0, #100	@ 0x64
 800295e:	f7fe fb5b 	bl	8001018 <lcdSetCursor>
	lcdSetTextFont(&Font20);
 8002962:	4825      	ldr	r0, [pc, #148]	@ (80029f8 <DrawStopPage+0xac>)
 8002964:	f7fe fac8 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf("Stop?");
 8002968:	4824      	ldr	r0, [pc, #144]	@ (80029fc <DrawStopPage+0xb0>)
 800296a:	f7fe fa39 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 800296e:	4824      	ldr	r0, [pc, #144]	@ (8002a00 <DrawStopPage+0xb4>)
 8002970:	f7fe fac2 	bl	8000ef8 <lcdSetTextFont>

	//Draw "Yes" button
	lcdDrawRect(yesButton.x, yesButton.y, yesButton.w, yesButton.h,
 8002974:	4b23      	ldr	r3, [pc, #140]	@ (8002a04 <DrawStopPage+0xb8>)
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	b218      	sxth	r0, r3
 800297a:	4b22      	ldr	r3, [pc, #136]	@ (8002a04 <DrawStopPage+0xb8>)
 800297c:	885b      	ldrh	r3, [r3, #2]
 800297e:	b219      	sxth	r1, r3
 8002980:	4b20      	ldr	r3, [pc, #128]	@ (8002a04 <DrawStopPage+0xb8>)
 8002982:	889b      	ldrh	r3, [r3, #4]
 8002984:	b21a      	sxth	r2, r3
 8002986:	4b1f      	ldr	r3, [pc, #124]	@ (8002a04 <DrawStopPage+0xb8>)
 8002988:	88db      	ldrh	r3, [r3, #6]
 800298a:	b21b      	sxth	r3, r3
 800298c:	2400      	movs	r4, #0
 800298e:	9400      	str	r4, [sp, #0]
 8002990:	f7fe f932 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(yesButton.x + 10, yesButton.y + 10);
 8002994:	4b1b      	ldr	r3, [pc, #108]	@ (8002a04 <DrawStopPage+0xb8>)
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	330a      	adds	r3, #10
 800299a:	b29a      	uxth	r2, r3
 800299c:	4b19      	ldr	r3, [pc, #100]	@ (8002a04 <DrawStopPage+0xb8>)
 800299e:	885b      	ldrh	r3, [r3, #2]
 80029a0:	330a      	adds	r3, #10
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	4619      	mov	r1, r3
 80029a6:	4610      	mov	r0, r2
 80029a8:	f7fe fb36 	bl	8001018 <lcdSetCursor>
	lcdPrintf(yesButton.label);
 80029ac:	4816      	ldr	r0, [pc, #88]	@ (8002a08 <DrawStopPage+0xbc>)
 80029ae:	f7fe fa17 	bl	8000de0 <lcdPrintf>

	//Draw "No" button
	lcdDrawRect(noButton.x, noButton.y, noButton.w, noButton.h, COLOR_BLACK);
 80029b2:	4b16      	ldr	r3, [pc, #88]	@ (8002a0c <DrawStopPage+0xc0>)
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	b218      	sxth	r0, r3
 80029b8:	4b14      	ldr	r3, [pc, #80]	@ (8002a0c <DrawStopPage+0xc0>)
 80029ba:	885b      	ldrh	r3, [r3, #2]
 80029bc:	b219      	sxth	r1, r3
 80029be:	4b13      	ldr	r3, [pc, #76]	@ (8002a0c <DrawStopPage+0xc0>)
 80029c0:	889b      	ldrh	r3, [r3, #4]
 80029c2:	b21a      	sxth	r2, r3
 80029c4:	4b11      	ldr	r3, [pc, #68]	@ (8002a0c <DrawStopPage+0xc0>)
 80029c6:	88db      	ldrh	r3, [r3, #6]
 80029c8:	b21b      	sxth	r3, r3
 80029ca:	2400      	movs	r4, #0
 80029cc:	9400      	str	r4, [sp, #0]
 80029ce:	f7fe f913 	bl	8000bf8 <lcdDrawRect>
	lcdSetCursor(noButton.x + 10, noButton.y + 10);
 80029d2:	4b0e      	ldr	r3, [pc, #56]	@ (8002a0c <DrawStopPage+0xc0>)
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	330a      	adds	r3, #10
 80029d8:	b29a      	uxth	r2, r3
 80029da:	4b0c      	ldr	r3, [pc, #48]	@ (8002a0c <DrawStopPage+0xc0>)
 80029dc:	885b      	ldrh	r3, [r3, #2]
 80029de:	330a      	adds	r3, #10
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	4619      	mov	r1, r3
 80029e4:	4610      	mov	r0, r2
 80029e6:	f7fe fb17 	bl	8001018 <lcdSetCursor>
	lcdPrintf(noButton.label);
 80029ea:	4809      	ldr	r0, [pc, #36]	@ (8002a10 <DrawStopPage+0xc4>)
 80029ec:	f7fe f9f8 	bl	8000de0 <lcdPrintf>
}
 80029f0:	bf00      	nop
 80029f2:	3704      	adds	r7, #4
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd90      	pop	{r4, r7, pc}
 80029f8:	20000010 	.word	0x20000010
 80029fc:	080103f4 	.word	0x080103f4
 8002a00:	20000008 	.word	0x20000008
 8002a04:	20000210 	.word	0x20000210
 8002a08:	20000218 	.word	0x20000218
 8002a0c:	2000023c 	.word	0x2000023c
 8002a10:	20000244 	.word	0x20000244

08002a14 <DrawPageFinish>:

void DrawPageFinish(void) {
 8002a14:	b590      	push	{r4, r7, lr}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af02      	add	r7, sp, #8
	lcdFillRGB(COLOR_WHITE);
 8002a1a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002a1e:	f7fe f807 	bl	8000a30 <lcdFillRGB>

	//Draw "Success!" box
	lcdSetCursor(selectButton.x + 10, selectButton.y + 10);
 8002a22:	4b19      	ldr	r3, [pc, #100]	@ (8002a88 <DrawPageFinish+0x74>)
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	330a      	adds	r3, #10
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	4b17      	ldr	r3, [pc, #92]	@ (8002a88 <DrawPageFinish+0x74>)
 8002a2c:	885b      	ldrh	r3, [r3, #2]
 8002a2e:	330a      	adds	r3, #10
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	4619      	mov	r1, r3
 8002a34:	4610      	mov	r0, r2
 8002a36:	f7fe faef 	bl	8001018 <lcdSetCursor>
	lcdPrintf("Success!");
 8002a3a:	4814      	ldr	r0, [pc, #80]	@ (8002a8c <DrawPageFinish+0x78>)
 8002a3c:	f7fe f9d0 	bl	8000de0 <lcdPrintf>

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8002a40:	4b13      	ldr	r3, [pc, #76]	@ (8002a90 <DrawPageFinish+0x7c>)
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	b218      	sxth	r0, r3
 8002a46:	4b12      	ldr	r3, [pc, #72]	@ (8002a90 <DrawPageFinish+0x7c>)
 8002a48:	885b      	ldrh	r3, [r3, #2]
 8002a4a:	b219      	sxth	r1, r3
 8002a4c:	4b10      	ldr	r3, [pc, #64]	@ (8002a90 <DrawPageFinish+0x7c>)
 8002a4e:	889b      	ldrh	r3, [r3, #4]
 8002a50:	b21a      	sxth	r2, r3
 8002a52:	4b0f      	ldr	r3, [pc, #60]	@ (8002a90 <DrawPageFinish+0x7c>)
 8002a54:	88db      	ldrh	r3, [r3, #6]
 8002a56:	b21b      	sxth	r3, r3
 8002a58:	2400      	movs	r4, #0
 8002a5a:	9400      	str	r4, [sp, #0]
 8002a5c:	f7fe f8cc 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 8002a60:	4b0b      	ldr	r3, [pc, #44]	@ (8002a90 <DrawPageFinish+0x7c>)
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	330a      	adds	r3, #10
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	4b09      	ldr	r3, [pc, #36]	@ (8002a90 <DrawPageFinish+0x7c>)
 8002a6a:	885b      	ldrh	r3, [r3, #2]
 8002a6c:	330a      	adds	r3, #10
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f7fe fad0 	bl	8001018 <lcdSetCursor>
	lcdPrintf("Done");
 8002a78:	4806      	ldr	r0, [pc, #24]	@ (8002a94 <DrawPageFinish+0x80>)
 8002a7a:	f7fe f9b1 	bl	8000de0 <lcdPrintf>
}
 8002a7e:	bf00      	nop
 8002a80:	3704      	adds	r7, #4
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd90      	pop	{r4, r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000160 	.word	0x20000160
 8002a8c:	080103fc 	.word	0x080103fc
 8002a90:	200001b8 	.word	0x200001b8
 8002a94:	08010408 	.word	0x08010408

08002a98 <handleTouch>:

uint8_t handleTouch() {
 8002a98:	b590      	push	{r4, r7, lr}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
	static uint8_t protocol_num;
	static uint8_t protocol_offset = 0;
	uint16_t x = 0, y = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	80fb      	strh	r3, [r7, #6]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	80bb      	strh	r3, [r7, #4]
	if (!XPT2046_TouchGetCoordinates(&x, &y)) {
 8002aa6:	1d3a      	adds	r2, r7, #4
 8002aa8:	1dbb      	adds	r3, r7, #6
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fd fd97 	bl	80005e0 <XPT2046_TouchGetCoordinates>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f083 0301 	eor.w	r3, r3, #1
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <handleTouch+0x2a>
		//printf("failed\n");
		return 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e3ac      	b.n	800321c <handleTouch+0x784>
	}
	//map the x coordinate to be left is 0. also slight offset
	x = (TS_RIGHT - x) - 0;
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	80fb      	strh	r3, [r7, #6]
//	printf("touched\n");
//	printf("%d, %d\n", x, y);

	switch (currentPage) {
 8002acc:	4b8e      	ldr	r3, [pc, #568]	@ (8002d08 <handleTouch+0x270>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b06      	cmp	r3, #6
 8002ad2:	f200 839f 	bhi.w	8003214 <handleTouch+0x77c>
 8002ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8002adc <handleTouch+0x44>)
 8002ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002adc:	08002af9 	.word	0x08002af9
 8002ae0:	08002d2d 	.word	0x08002d2d
 8002ae4:	08002edf 	.word	0x08002edf
 8002ae8:	08002fd1 	.word	0x08002fd1
 8002aec:	080031b1 	.word	0x080031b1
 8002af0:	08003093 	.word	0x08003093
 8002af4:	08003109 	.word	0x08003109
	case PAGE_MAIN:
		//next button
		if ((x >= nextButton.x) && (x <= nextButton.x + nextButton.w)
 8002af8:	4b84      	ldr	r3, [pc, #528]	@ (8002d0c <handleTouch+0x274>)
 8002afa:	881a      	ldrh	r2, [r3, #0]
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d828      	bhi.n	8002b54 <handleTouch+0xbc>
 8002b02:	88fb      	ldrh	r3, [r7, #6]
 8002b04:	461a      	mov	r2, r3
 8002b06:	4b81      	ldr	r3, [pc, #516]	@ (8002d0c <handleTouch+0x274>)
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4b7f      	ldr	r3, [pc, #508]	@ (8002d0c <handleTouch+0x274>)
 8002b0e:	889b      	ldrh	r3, [r3, #4]
 8002b10:	440b      	add	r3, r1
 8002b12:	429a      	cmp	r2, r3
 8002b14:	dc1e      	bgt.n	8002b54 <handleTouch+0xbc>
				&& (y >= nextButton.y)
 8002b16:	4b7d      	ldr	r3, [pc, #500]	@ (8002d0c <handleTouch+0x274>)
 8002b18:	885a      	ldrh	r2, [r3, #2]
 8002b1a:	88bb      	ldrh	r3, [r7, #4]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d819      	bhi.n	8002b54 <handleTouch+0xbc>
				&& (y <= nextButton.y + nextButton.h + NEXT_BUTTON_OFFSET)
 8002b20:	88bb      	ldrh	r3, [r7, #4]
 8002b22:	461a      	mov	r2, r3
 8002b24:	4b79      	ldr	r3, [pc, #484]	@ (8002d0c <handleTouch+0x274>)
 8002b26:	885b      	ldrh	r3, [r3, #2]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4b78      	ldr	r3, [pc, #480]	@ (8002d0c <handleTouch+0x274>)
 8002b2c:	88db      	ldrh	r3, [r3, #6]
 8002b2e:	440b      	add	r3, r1
 8002b30:	333c      	adds	r3, #60	@ 0x3c
 8002b32:	429a      	cmp	r2, r3
 8002b34:	dc0e      	bgt.n	8002b54 <handleTouch+0xbc>
				&& (page_num != 10)) {
 8002b36:	4b76      	ldr	r3, [pc, #472]	@ (8002d10 <handleTouch+0x278>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b0a      	cmp	r3, #10
 8002b3c:	d00a      	beq.n	8002b54 <handleTouch+0xbc>
			//printf("touched\n");
			page_num++;
 8002b3e:	4b74      	ldr	r3, [pc, #464]	@ (8002d10 <handleTouch+0x278>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	3301      	adds	r3, #1
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	4b72      	ldr	r3, [pc, #456]	@ (8002d10 <handleTouch+0x278>)
 8002b48:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8002b4a:	4b71      	ldr	r3, [pc, #452]	@ (8002d10 <handleTouch+0x278>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe ffb8 	bl	8001ac4 <DrawMainPage>
		}
		//back button
		if ((x >= backButton.x) && (x <= backButton.x + backButton.w)
 8002b54:	4b6f      	ldr	r3, [pc, #444]	@ (8002d14 <handleTouch+0x27c>)
 8002b56:	881a      	ldrh	r2, [r3, #0]
 8002b58:	88fb      	ldrh	r3, [r7, #6]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d828      	bhi.n	8002bb0 <handleTouch+0x118>
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b6c      	ldr	r3, [pc, #432]	@ (8002d14 <handleTouch+0x27c>)
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	4619      	mov	r1, r3
 8002b68:	4b6a      	ldr	r3, [pc, #424]	@ (8002d14 <handleTouch+0x27c>)
 8002b6a:	889b      	ldrh	r3, [r3, #4]
 8002b6c:	440b      	add	r3, r1
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	dc1e      	bgt.n	8002bb0 <handleTouch+0x118>
				&& (y >= backButton.y)
 8002b72:	4b68      	ldr	r3, [pc, #416]	@ (8002d14 <handleTouch+0x27c>)
 8002b74:	885a      	ldrh	r2, [r3, #2]
 8002b76:	88bb      	ldrh	r3, [r7, #4]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d819      	bhi.n	8002bb0 <handleTouch+0x118>
				&& (y <= backButton.y + backButton.h + BACK_BUTTON_OFFSET)
 8002b7c:	88bb      	ldrh	r3, [r7, #4]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4b64      	ldr	r3, [pc, #400]	@ (8002d14 <handleTouch+0x27c>)
 8002b82:	885b      	ldrh	r3, [r3, #2]
 8002b84:	4619      	mov	r1, r3
 8002b86:	4b63      	ldr	r3, [pc, #396]	@ (8002d14 <handleTouch+0x27c>)
 8002b88:	88db      	ldrh	r3, [r3, #6]
 8002b8a:	440b      	add	r3, r1
 8002b8c:	333c      	adds	r3, #60	@ 0x3c
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	dc0e      	bgt.n	8002bb0 <handleTouch+0x118>
				&& (page_num != 1)) {
 8002b92:	4b5f      	ldr	r3, [pc, #380]	@ (8002d10 <handleTouch+0x278>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d00a      	beq.n	8002bb0 <handleTouch+0x118>
			//printf("touched\n");
			page_num--;
 8002b9a:	4b5d      	ldr	r3, [pc, #372]	@ (8002d10 <handleTouch+0x278>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4b5b      	ldr	r3, [pc, #364]	@ (8002d10 <handleTouch+0x278>)
 8002ba4:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8002ba6:	4b5a      	ldr	r3, [pc, #360]	@ (8002d10 <handleTouch+0x278>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe ff8a 	bl	8001ac4 <DrawMainPage>
		}
		//queue button
		if (x >= queueButton.x && x <= (queueButton.x + queueButton.w)
 8002bb0:	4b59      	ldr	r3, [pc, #356]	@ (8002d18 <handleTouch+0x280>)
 8002bb2:	881a      	ldrh	r2, [r3, #0]
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d821      	bhi.n	8002bfe <handleTouch+0x166>
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b56      	ldr	r3, [pc, #344]	@ (8002d18 <handleTouch+0x280>)
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4b54      	ldr	r3, [pc, #336]	@ (8002d18 <handleTouch+0x280>)
 8002bc6:	889b      	ldrh	r3, [r3, #4]
 8002bc8:	440b      	add	r3, r1
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	dc17      	bgt.n	8002bfe <handleTouch+0x166>
				&& y >= queueButton.y
 8002bce:	4b52      	ldr	r3, [pc, #328]	@ (8002d18 <handleTouch+0x280>)
 8002bd0:	885a      	ldrh	r2, [r3, #2]
 8002bd2:	88bb      	ldrh	r3, [r7, #4]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d812      	bhi.n	8002bfe <handleTouch+0x166>
				&& y <= (queueButton.y + queueButton.h + QUEUE_BUTTON_OFFSET)) {
 8002bd8:	88bb      	ldrh	r3, [r7, #4]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4b4e      	ldr	r3, [pc, #312]	@ (8002d18 <handleTouch+0x280>)
 8002bde:	885b      	ldrh	r3, [r3, #2]
 8002be0:	4619      	mov	r1, r3
 8002be2:	4b4d      	ldr	r3, [pc, #308]	@ (8002d18 <handleTouch+0x280>)
 8002be4:	88db      	ldrh	r3, [r3, #6]
 8002be6:	440b      	add	r3, r1
 8002be8:	3328      	adds	r3, #40	@ 0x28
 8002bea:	429a      	cmp	r2, r3
 8002bec:	dc07      	bgt.n	8002bfe <handleTouch+0x166>
			DrawQueuePage(queueSize);
 8002bee:	4b4b      	ldr	r3, [pc, #300]	@ (8002d1c <handleTouch+0x284>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fa66 	bl	80020c4 <DrawQueuePage>
			currentPage = PAGE_QUEUE;
 8002bf8:	4b43      	ldr	r3, [pc, #268]	@ (8002d08 <handleTouch+0x270>)
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	701a      	strb	r2, [r3, #0]
		}
		//three protocol buttons
		for (int i = 0; i < NUM_BUTTONS; i++) {
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	e07c      	b.n	8002cfe <handleTouch+0x266>
			if ((x >= buttons[i].x) && (x <= buttons[i].x + buttons[i].w)
 8002c04:	4a46      	ldr	r2, [pc, #280]	@ (8002d20 <handleTouch+0x288>)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	212a      	movs	r1, #42	@ 0x2a
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	881a      	ldrh	r2, [r3, #0]
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d86f      	bhi.n	8002cf8 <handleTouch+0x260>
 8002c18:	88fb      	ldrh	r3, [r7, #6]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	4a40      	ldr	r2, [pc, #256]	@ (8002d20 <handleTouch+0x288>)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	212a      	movs	r1, #42	@ 0x2a
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	461c      	mov	r4, r3
 8002c2c:	4a3c      	ldr	r2, [pc, #240]	@ (8002d20 <handleTouch+0x288>)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	212a      	movs	r1, #42	@ 0x2a
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	3304      	adds	r3, #4
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	4423      	add	r3, r4
 8002c3e:	4298      	cmp	r0, r3
 8002c40:	dc5a      	bgt.n	8002cf8 <handleTouch+0x260>
					&& (y >= buttons[i].y - PROTOCOL_BUTTON_OFFSET)
 8002c42:	88bb      	ldrh	r3, [r7, #4]
 8002c44:	4618      	mov	r0, r3
 8002c46:	4a36      	ldr	r2, [pc, #216]	@ (8002d20 <handleTouch+0x288>)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	212a      	movs	r1, #42	@ 0x2a
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	3302      	adds	r3, #2
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	3b14      	subs	r3, #20
 8002c58:	4298      	cmp	r0, r3
 8002c5a:	db4d      	blt.n	8002cf8 <handleTouch+0x260>
					&& (y
							<= buttons[i].y + buttons[i].h
 8002c5c:	88bb      	ldrh	r3, [r7, #4]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	4a2f      	ldr	r2, [pc, #188]	@ (8002d20 <handleTouch+0x288>)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	212a      	movs	r1, #42	@ 0x2a
 8002c66:	fb01 f303 	mul.w	r3, r1, r3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3302      	adds	r3, #2
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	461c      	mov	r4, r3
 8002c72:	4a2b      	ldr	r2, [pc, #172]	@ (8002d20 <handleTouch+0x288>)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	212a      	movs	r1, #42	@ 0x2a
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3306      	adds	r3, #6
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	4423      	add	r3, r4
									+ PROTOCOL_BUTTON_OFFSET)) {
 8002c84:	3314      	adds	r3, #20
					&& (y
 8002c86:	4298      	cmp	r0, r3
 8002c88:	dc36      	bgt.n	8002cf8 <handleTouch+0x260>
				//check which button has been pressed
				if (i == 0) {
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d106      	bne.n	8002c9e <handleTouch+0x206>
					protocol_num = 1;
 8002c90:	4b24      	ldr	r3, [pc, #144]	@ (8002d24 <handleTouch+0x28c>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]
					protocol_offset = 0;
 8002c96:	4b24      	ldr	r3, [pc, #144]	@ (8002d28 <handleTouch+0x290>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
 8002c9c:	e012      	b.n	8002cc4 <handleTouch+0x22c>
				} else if (i == 1) {
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d106      	bne.n	8002cb2 <handleTouch+0x21a>
					protocol_num = 1;
 8002ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d24 <handleTouch+0x28c>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
					protocol_offset = 1;
 8002caa:	4b1f      	ldr	r3, [pc, #124]	@ (8002d28 <handleTouch+0x290>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	e008      	b.n	8002cc4 <handleTouch+0x22c>
				} else if (i == 2) {
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d105      	bne.n	8002cc4 <handleTouch+0x22c>
					protocol_num = 1;
 8002cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d24 <handleTouch+0x28c>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	701a      	strb	r2, [r3, #0]
					protocol_offset = 2;
 8002cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8002d28 <handleTouch+0x290>)
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	701a      	strb	r2, [r3, #0]
				}
				//dont draw next page if the button says "Empty"
				if (buttons[i].status == NOT_EMPTY) {
 8002cc4:	4a16      	ldr	r2, [pc, #88]	@ (8002d20 <handleTouch+0x288>)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	212a      	movs	r1, #42	@ 0x2a
 8002cca:	fb01 f303 	mul.w	r3, r1, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	3328      	adds	r3, #40	@ 0x28
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d10c      	bne.n	8002cf2 <handleTouch+0x25a>
					currentPage = PAGE_SELECT;
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d08 <handleTouch+0x270>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]
					DrawInfoPage(buttons[i].label);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	222a      	movs	r2, #42	@ 0x2a
 8002ce2:	fb02 f303 	mul.w	r3, r2, r3
 8002ce6:	3308      	adds	r3, #8
 8002ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8002d20 <handleTouch+0x288>)
 8002cea:	4413      	add	r3, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff f8c7 	bl	8001e80 <DrawInfoPage>
				}
				HAL_Delay(100); //delay between switch to select page
 8002cf2:	2064      	movs	r0, #100	@ 0x64
 8002cf4:	f001 fbf4 	bl	80044e0 <HAL_Delay>
		for (int i = 0; i < NUM_BUTTONS; i++) {
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	f77f af7f 	ble.w	8002c04 <handleTouch+0x16c>
			}
		}
		break;
 8002d06:	e285      	b.n	8003214 <handleTouch+0x77c>
 8002d08:	20000594 	.word	0x20000594
 8002d0c:	200001e4 	.word	0x200001e4
 8002d10:	20000267 	.word	0x20000267
 8002d14:	200001b8 	.word	0x200001b8
 8002d18:	200000b0 	.word	0x200000b0
 8002d1c:	2000ffd8 	.word	0x2000ffd8
 8002d20:	20000030 	.word	0x20000030
 8002d24:	200118e0 	.word	0x200118e0
 8002d28:	200118e1 	.word	0x200118e1

	case PAGE_SELECT:
		//back button
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 8002d2c:	4b99      	ldr	r3, [pc, #612]	@ (8002f94 <handleTouch+0x4fc>)
 8002d2e:	881a      	ldrh	r2, [r3, #0]
 8002d30:	88fb      	ldrh	r3, [r7, #6]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d820      	bhi.n	8002d78 <handleTouch+0x2e0>
 8002d36:	88fb      	ldrh	r3, [r7, #6]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4b96      	ldr	r3, [pc, #600]	@ (8002f94 <handleTouch+0x4fc>)
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4b94      	ldr	r3, [pc, #592]	@ (8002f94 <handleTouch+0x4fc>)
 8002d42:	889b      	ldrh	r3, [r3, #4]
 8002d44:	440b      	add	r3, r1
 8002d46:	429a      	cmp	r2, r3
 8002d48:	dc16      	bgt.n	8002d78 <handleTouch+0x2e0>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 8002d4a:	4b92      	ldr	r3, [pc, #584]	@ (8002f94 <handleTouch+0x4fc>)
 8002d4c:	885a      	ldrh	r2, [r3, #2]
 8002d4e:	88bb      	ldrh	r3, [r7, #4]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d811      	bhi.n	8002d78 <handleTouch+0x2e0>
 8002d54:	88bb      	ldrh	r3, [r7, #4]
 8002d56:	461a      	mov	r2, r3
 8002d58:	4b8e      	ldr	r3, [pc, #568]	@ (8002f94 <handleTouch+0x4fc>)
 8002d5a:	885b      	ldrh	r3, [r3, #2]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4b8d      	ldr	r3, [pc, #564]	@ (8002f94 <handleTouch+0x4fc>)
 8002d60:	88db      	ldrh	r3, [r3, #6]
 8002d62:	440b      	add	r3, r1
 8002d64:	429a      	cmp	r2, r3
 8002d66:	dc07      	bgt.n	8002d78 <handleTouch+0x2e0>
			currentPage = PAGE_MAIN;
 8002d68:	4b8b      	ldr	r3, [pc, #556]	@ (8002f98 <handleTouch+0x500>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8002d6e:	4b8b      	ldr	r3, [pc, #556]	@ (8002f9c <handleTouch+0x504>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe fea6 	bl	8001ac4 <DrawMainPage>
		}
		//queueSelect button
		if (x >= queueSelectButton.x
 8002d78:	4b89      	ldr	r3, [pc, #548]	@ (8002fa0 <handleTouch+0x508>)
 8002d7a:	881a      	ldrh	r2, [r3, #0]
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d833      	bhi.n	8002dea <handleTouch+0x352>
				&& x <= (queueSelectButton.x + queueSelectButton.w)
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	461a      	mov	r2, r3
 8002d86:	4b86      	ldr	r3, [pc, #536]	@ (8002fa0 <handleTouch+0x508>)
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4b84      	ldr	r3, [pc, #528]	@ (8002fa0 <handleTouch+0x508>)
 8002d8e:	889b      	ldrh	r3, [r3, #4]
 8002d90:	440b      	add	r3, r1
 8002d92:	429a      	cmp	r2, r3
 8002d94:	dc29      	bgt.n	8002dea <handleTouch+0x352>
				&& y >= queueSelectButton.y
 8002d96:	4b82      	ldr	r3, [pc, #520]	@ (8002fa0 <handleTouch+0x508>)
 8002d98:	885a      	ldrh	r2, [r3, #2]
 8002d9a:	88bb      	ldrh	r3, [r7, #4]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d824      	bhi.n	8002dea <handleTouch+0x352>
				&& y <= (queueSelectButton.y + queueSelectButton.h)) {
 8002da0:	88bb      	ldrh	r3, [r7, #4]
 8002da2:	461a      	mov	r2, r3
 8002da4:	4b7e      	ldr	r3, [pc, #504]	@ (8002fa0 <handleTouch+0x508>)
 8002da6:	885b      	ldrh	r3, [r3, #2]
 8002da8:	4619      	mov	r1, r3
 8002daa:	4b7d      	ldr	r3, [pc, #500]	@ (8002fa0 <handleTouch+0x508>)
 8002dac:	88db      	ldrh	r3, [r3, #6]
 8002dae:	440b      	add	r3, r1
 8002db0:	429a      	cmp	r2, r3
 8002db2:	dc1a      	bgt.n	8002dea <handleTouch+0x352>
			//store the protocol in queueBuffer
			if (queueSize < MAX_QUEUE_SIZE) {
 8002db4:	4b7b      	ldr	r3, [pc, #492]	@ (8002fa4 <handleTouch+0x50c>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b09      	cmp	r3, #9
 8002dba:	d816      	bhi.n	8002dea <handleTouch+0x352>

				queueProtocol(page_num, protocol_offset);
 8002dbc:	4b77      	ldr	r3, [pc, #476]	@ (8002f9c <handleTouch+0x504>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4b79      	ldr	r3, [pc, #484]	@ (8002fa8 <handleTouch+0x510>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4610      	mov	r0, r2
 8002dca:	f000 fd03 	bl	80037d4 <queueProtocol>
				queueSize++;
 8002dce:	4b75      	ldr	r3, [pc, #468]	@ (8002fa4 <handleTouch+0x50c>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	4b73      	ldr	r3, [pc, #460]	@ (8002fa4 <handleTouch+0x50c>)
 8002dd8:	701a      	strb	r2, [r3, #0]
				currentPage = PAGE_QUEUE;
 8002dda:	4b6f      	ldr	r3, [pc, #444]	@ (8002f98 <handleTouch+0x500>)
 8002ddc:	2202      	movs	r2, #2
 8002dde:	701a      	strb	r2, [r3, #0]
				DrawQueuePage(queueSize);
 8002de0:	4b70      	ldr	r3, [pc, #448]	@ (8002fa4 <handleTouch+0x50c>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff f96d 	bl	80020c4 <DrawQueuePage>
			} else {
				//handle queue buffer being full
			}
		}
		//select button
		if (x >= selectButton.x && x <= (selectButton.x + selectButton.w)
 8002dea:	4b70      	ldr	r3, [pc, #448]	@ (8002fac <handleTouch+0x514>)
 8002dec:	881a      	ldrh	r2, [r3, #0]
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d845      	bhi.n	8002e80 <handleTouch+0x3e8>
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	461a      	mov	r2, r3
 8002df8:	4b6c      	ldr	r3, [pc, #432]	@ (8002fac <handleTouch+0x514>)
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4b6b      	ldr	r3, [pc, #428]	@ (8002fac <handleTouch+0x514>)
 8002e00:	889b      	ldrh	r3, [r3, #4]
 8002e02:	440b      	add	r3, r1
 8002e04:	429a      	cmp	r2, r3
 8002e06:	dc3b      	bgt.n	8002e80 <handleTouch+0x3e8>
				&& y >= selectButton.y
 8002e08:	4b68      	ldr	r3, [pc, #416]	@ (8002fac <handleTouch+0x514>)
 8002e0a:	885a      	ldrh	r2, [r3, #2]
 8002e0c:	88bb      	ldrh	r3, [r7, #4]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d836      	bhi.n	8002e80 <handleTouch+0x3e8>
				&& y <= (selectButton.y + selectButton.h)) {
 8002e12:	88bb      	ldrh	r3, [r7, #4]
 8002e14:	461a      	mov	r2, r3
 8002e16:	4b65      	ldr	r3, [pc, #404]	@ (8002fac <handleTouch+0x514>)
 8002e18:	885b      	ldrh	r3, [r3, #2]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4b63      	ldr	r3, [pc, #396]	@ (8002fac <handleTouch+0x514>)
 8002e1e:	88db      	ldrh	r3, [r3, #6]
 8002e20:	440b      	add	r3, r1
 8002e22:	429a      	cmp	r2, r3
 8002e24:	dc2c      	bgt.n	8002e80 <handleTouch+0x3e8>
			//transmit protocol and move to finish page
			transmitProtocol(page_num, protocol_offset);
 8002e26:	4b5d      	ldr	r3, [pc, #372]	@ (8002f9c <handleTouch+0x504>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4b5e      	ldr	r3, [pc, #376]	@ (8002fa8 <handleTouch+0x510>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	4619      	mov	r1, r3
 8002e32:	4610      	mov	r0, r2
 8002e34:	f000 fc7a 	bl	800372c <transmitProtocol>
			currentPage = PAGE_PROGRESS;
 8002e38:	4b57      	ldr	r3, [pc, #348]	@ (8002f98 <handleTouch+0x500>)
 8002e3a:	2205      	movs	r2, #5
 8002e3c:	701a      	strb	r2, [r3, #0]
			protocolTimer = 5999; //change this to the actual value dorjee
 8002e3e:	4b5c      	ldr	r3, [pc, #368]	@ (8002fb0 <handleTouch+0x518>)
 8002e40:	f241 726f 	movw	r2, #5999	@ 0x176f
 8002e44:	601a      	str	r2, [r3, #0]
			uint32_t flash_address = get_sector_address(page_num) + protocol_offset * PROTOCOL_SIZE;
 8002e46:	4b55      	ldr	r3, [pc, #340]	@ (8002f9c <handleTouch+0x504>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 ff1a 	bl	8003c84 <get_sector_address>
 8002e50:	4603      	mov	r3, r0
 8002e52:	4a55      	ldr	r2, [pc, #340]	@ (8002fa8 <handleTouch+0x510>)
 8002e54:	7812      	ldrb	r2, [r2, #0]
 8002e56:	4611      	mov	r1, r2
 8002e58:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002e5c:	fb01 f202 	mul.w	r2, r1, r2
 8002e60:	4413      	add	r3, r2
 8002e62:	60bb      	str	r3, [r7, #8]
			read_from_flash(currentProtocolTitle, flash_address);
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	4853      	ldr	r0, [pc, #332]	@ (8002fb4 <handleTouch+0x51c>)
 8002e68:	f000 fa33 	bl	80032d2 <read_from_flash>
			DrawProgressPage("FILL", rx_byte, rx_data);
 8002e6c:	4b52      	ldr	r3, [pc, #328]	@ (8002fb8 <handleTouch+0x520>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	4a52      	ldr	r2, [pc, #328]	@ (8002fbc <handleTouch+0x524>)
 8002e72:	4619      	mov	r1, r3
 8002e74:	4852      	ldr	r0, [pc, #328]	@ (8002fc0 <handleTouch+0x528>)
 8002e76:	f7ff fa0b 	bl	8002290 <DrawProgressPage>

			//start timer 2 interrupt for protocol timer count down
			HAL_TIM_Base_Start_IT(&htim2); //triggers every second
 8002e7a:	4852      	ldr	r0, [pc, #328]	@ (8002fc4 <handleTouch+0x52c>)
 8002e7c:	f005 fbb6 	bl	80085ec <HAL_TIM_Base_Start_IT>
		}
		//delete button
		if (x >= deleteButton.x && x <= (deleteButton.x + deleteButton.w)
 8002e80:	4b51      	ldr	r3, [pc, #324]	@ (8002fc8 <handleTouch+0x530>)
 8002e82:	881a      	ldrh	r2, [r3, #0]
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	f200 81b9 	bhi.w	80031fe <handleTouch+0x766>
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	4b4d      	ldr	r3, [pc, #308]	@ (8002fc8 <handleTouch+0x530>)
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	4619      	mov	r1, r3
 8002e96:	4b4c      	ldr	r3, [pc, #304]	@ (8002fc8 <handleTouch+0x530>)
 8002e98:	889b      	ldrh	r3, [r3, #4]
 8002e9a:	440b      	add	r3, r1
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	f300 81ae 	bgt.w	80031fe <handleTouch+0x766>
				&& y >= deleteButton.y
 8002ea2:	4b49      	ldr	r3, [pc, #292]	@ (8002fc8 <handleTouch+0x530>)
 8002ea4:	885a      	ldrh	r2, [r3, #2]
 8002ea6:	88bb      	ldrh	r3, [r7, #4]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	f200 81a8 	bhi.w	80031fe <handleTouch+0x766>
				&& y <= (deleteButton.y + deleteButton.h)) {
 8002eae:	88bb      	ldrh	r3, [r7, #4]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4b45      	ldr	r3, [pc, #276]	@ (8002fc8 <handleTouch+0x530>)
 8002eb4:	885b      	ldrh	r3, [r3, #2]
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4b43      	ldr	r3, [pc, #268]	@ (8002fc8 <handleTouch+0x530>)
 8002eba:	88db      	ldrh	r3, [r3, #6]
 8002ebc:	440b      	add	r3, r1
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	f300 819d 	bgt.w	80031fe <handleTouch+0x766>
			//move to delete confirmation page
			currentPage = PAGE_CONFIRMATION;
 8002ec4:	4b34      	ldr	r3, [pc, #208]	@ (8002f98 <handleTouch+0x500>)
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	701a      	strb	r2, [r3, #0]
			DrawConfirmationPage(page_num, protocol_offset);
 8002eca:	4b34      	ldr	r3, [pc, #208]	@ (8002f9c <handleTouch+0x504>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4b35      	ldr	r3, [pc, #212]	@ (8002fa8 <handleTouch+0x510>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	f7ff f87c 	bl	8001fd4 <DrawConfirmationPage>
		}
		break;
 8002edc:	e18f      	b.n	80031fe <handleTouch+0x766>

	case PAGE_QUEUE:
		//back button
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 8002ede:	4b2d      	ldr	r3, [pc, #180]	@ (8002f94 <handleTouch+0x4fc>)
 8002ee0:	881a      	ldrh	r2, [r3, #0]
 8002ee2:	88fb      	ldrh	r3, [r7, #6]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d820      	bhi.n	8002f2a <handleTouch+0x492>
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	461a      	mov	r2, r3
 8002eec:	4b29      	ldr	r3, [pc, #164]	@ (8002f94 <handleTouch+0x4fc>)
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4b28      	ldr	r3, [pc, #160]	@ (8002f94 <handleTouch+0x4fc>)
 8002ef4:	889b      	ldrh	r3, [r3, #4]
 8002ef6:	440b      	add	r3, r1
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	dc16      	bgt.n	8002f2a <handleTouch+0x492>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 8002efc:	4b25      	ldr	r3, [pc, #148]	@ (8002f94 <handleTouch+0x4fc>)
 8002efe:	885a      	ldrh	r2, [r3, #2]
 8002f00:	88bb      	ldrh	r3, [r7, #4]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d811      	bhi.n	8002f2a <handleTouch+0x492>
 8002f06:	88bb      	ldrh	r3, [r7, #4]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4b22      	ldr	r3, [pc, #136]	@ (8002f94 <handleTouch+0x4fc>)
 8002f0c:	885b      	ldrh	r3, [r3, #2]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4b20      	ldr	r3, [pc, #128]	@ (8002f94 <handleTouch+0x4fc>)
 8002f12:	88db      	ldrh	r3, [r3, #6]
 8002f14:	440b      	add	r3, r1
 8002f16:	429a      	cmp	r2, r3
 8002f18:	dc07      	bgt.n	8002f2a <handleTouch+0x492>
			currentPage = PAGE_MAIN;
 8002f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8002f98 <handleTouch+0x500>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8002f20:	4b1e      	ldr	r3, [pc, #120]	@ (8002f9c <handleTouch+0x504>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fe fdcd 	bl	8001ac4 <DrawMainPage>
		}
		//run button
		if (x >= runButton.x && x <= (runButton.x + runButton.w)
 8002f2a:	4b28      	ldr	r3, [pc, #160]	@ (8002fcc <handleTouch+0x534>)
 8002f2c:	881a      	ldrh	r2, [r3, #0]
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	f200 8166 	bhi.w	8003202 <handleTouch+0x76a>
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4b24      	ldr	r3, [pc, #144]	@ (8002fcc <handleTouch+0x534>)
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4b22      	ldr	r3, [pc, #136]	@ (8002fcc <handleTouch+0x534>)
 8002f42:	889b      	ldrh	r3, [r3, #4]
 8002f44:	440b      	add	r3, r1
 8002f46:	429a      	cmp	r2, r3
 8002f48:	f300 815b 	bgt.w	8003202 <handleTouch+0x76a>
				&& y >= runButton.y && y <= (runButton.y + runButton.h)) {
 8002f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8002fcc <handleTouch+0x534>)
 8002f4e:	885a      	ldrh	r2, [r3, #2]
 8002f50:	88bb      	ldrh	r3, [r7, #4]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	f200 8155 	bhi.w	8003202 <handleTouch+0x76a>
 8002f58:	88bb      	ldrh	r3, [r7, #4]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fcc <handleTouch+0x534>)
 8002f5e:	885b      	ldrh	r3, [r3, #2]
 8002f60:	4619      	mov	r1, r3
 8002f62:	4b1a      	ldr	r3, [pc, #104]	@ (8002fcc <handleTouch+0x534>)
 8002f64:	88db      	ldrh	r3, [r3, #6]
 8002f66:	440b      	add	r3, r1
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	f300 814a 	bgt.w	8003202 <handleTouch+0x76a>
			//handle queue functionality here dorjee
			transmitQueuedProtocols(queueSize);
 8002f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa4 <handleTouch+0x50c>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 fcae 	bl	80038d4 <transmitQueuedProtocols>
			queueSize = 0;
 8002f78:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa4 <handleTouch+0x50c>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	701a      	strb	r2, [r3, #0]
			currentPage = PAGE_PROGRESS;
 8002f7e:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <handleTouch+0x500>)
 8002f80:	2205      	movs	r2, #5
 8002f82:	701a      	strb	r2, [r3, #0]
			DrawProgressPage("FILL", rx_byte, rx_data);
 8002f84:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb8 <handleTouch+0x520>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	4a0c      	ldr	r2, [pc, #48]	@ (8002fbc <handleTouch+0x524>)
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	480c      	ldr	r0, [pc, #48]	@ (8002fc0 <handleTouch+0x528>)
 8002f8e:	f7ff f97f 	bl	8002290 <DrawProgressPage>
		}
		break;
 8002f92:	e136      	b.n	8003202 <handleTouch+0x76a>
 8002f94:	200001b8 	.word	0x200001b8
 8002f98:	20000594 	.word	0x20000594
 8002f9c:	20000267 	.word	0x20000267
 8002fa0:	20000134 	.word	0x20000134
 8002fa4:	2000ffd8 	.word	0x2000ffd8
 8002fa8:	200118e1 	.word	0x200118e1
 8002fac:	20000160 	.word	0x20000160
 8002fb0:	20000598 	.word	0x20000598
 8002fb4:	200005b4 	.word	0x200005b4
 8002fb8:	2000059c 	.word	0x2000059c
 8002fbc:	200005a0 	.word	0x200005a0
 8002fc0:	080102a0 	.word	0x080102a0
 8002fc4:	2000046c 	.word	0x2000046c
 8002fc8:	2000018c 	.word	0x2000018c
 8002fcc:	200000dc 	.word	0x200000dc

	case PAGE_CONFIRMATION:
		//back button
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 8002fd0:	4b94      	ldr	r3, [pc, #592]	@ (8003224 <handleTouch+0x78c>)
 8002fd2:	881a      	ldrh	r2, [r3, #0]
 8002fd4:	88fb      	ldrh	r3, [r7, #6]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d827      	bhi.n	800302a <handleTouch+0x592>
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4b91      	ldr	r3, [pc, #580]	@ (8003224 <handleTouch+0x78c>)
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4b8f      	ldr	r3, [pc, #572]	@ (8003224 <handleTouch+0x78c>)
 8002fe6:	889b      	ldrh	r3, [r3, #4]
 8002fe8:	440b      	add	r3, r1
 8002fea:	429a      	cmp	r2, r3
 8002fec:	dc1d      	bgt.n	800302a <handleTouch+0x592>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 8002fee:	4b8d      	ldr	r3, [pc, #564]	@ (8003224 <handleTouch+0x78c>)
 8002ff0:	885a      	ldrh	r2, [r3, #2]
 8002ff2:	88bb      	ldrh	r3, [r7, #4]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d818      	bhi.n	800302a <handleTouch+0x592>
 8002ff8:	88bb      	ldrh	r3, [r7, #4]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4b89      	ldr	r3, [pc, #548]	@ (8003224 <handleTouch+0x78c>)
 8002ffe:	885b      	ldrh	r3, [r3, #2]
 8003000:	4619      	mov	r1, r3
 8003002:	4b88      	ldr	r3, [pc, #544]	@ (8003224 <handleTouch+0x78c>)
 8003004:	88db      	ldrh	r3, [r3, #6]
 8003006:	440b      	add	r3, r1
 8003008:	429a      	cmp	r2, r3
 800300a:	dc0e      	bgt.n	800302a <handleTouch+0x592>
			currentPage = PAGE_SELECT;
 800300c:	4b86      	ldr	r3, [pc, #536]	@ (8003228 <handleTouch+0x790>)
 800300e:	2201      	movs	r2, #1
 8003010:	701a      	strb	r2, [r3, #0]
			DrawInfoPage(buttons[protocol_offset].label);
 8003012:	4b86      	ldr	r3, [pc, #536]	@ (800322c <handleTouch+0x794>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	232a      	movs	r3, #42	@ 0x2a
 800301a:	fb02 f303 	mul.w	r3, r2, r3
 800301e:	3308      	adds	r3, #8
 8003020:	4a83      	ldr	r2, [pc, #524]	@ (8003230 <handleTouch+0x798>)
 8003022:	4413      	add	r3, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f7fe ff2b 	bl	8001e80 <DrawInfoPage>
		}
		//confirm button
		if (x >= confirmButton.x && x <= (confirmButton.x + confirmButton.w)
 800302a:	4b82      	ldr	r3, [pc, #520]	@ (8003234 <handleTouch+0x79c>)
 800302c:	881a      	ldrh	r2, [r3, #0]
 800302e:	88fb      	ldrh	r3, [r7, #6]
 8003030:	429a      	cmp	r2, r3
 8003032:	f200 80e8 	bhi.w	8003206 <handleTouch+0x76e>
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	461a      	mov	r2, r3
 800303a:	4b7e      	ldr	r3, [pc, #504]	@ (8003234 <handleTouch+0x79c>)
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	4619      	mov	r1, r3
 8003040:	4b7c      	ldr	r3, [pc, #496]	@ (8003234 <handleTouch+0x79c>)
 8003042:	889b      	ldrh	r3, [r3, #4]
 8003044:	440b      	add	r3, r1
 8003046:	429a      	cmp	r2, r3
 8003048:	f300 80dd 	bgt.w	8003206 <handleTouch+0x76e>
				&& y >= confirmButton.y
 800304c:	4b79      	ldr	r3, [pc, #484]	@ (8003234 <handleTouch+0x79c>)
 800304e:	885a      	ldrh	r2, [r3, #2]
 8003050:	88bb      	ldrh	r3, [r7, #4]
 8003052:	429a      	cmp	r2, r3
 8003054:	f200 80d7 	bhi.w	8003206 <handleTouch+0x76e>
				&& y <= (confirmButton.y + confirmButton.h)) {
 8003058:	88bb      	ldrh	r3, [r7, #4]
 800305a:	461a      	mov	r2, r3
 800305c:	4b75      	ldr	r3, [pc, #468]	@ (8003234 <handleTouch+0x79c>)
 800305e:	885b      	ldrh	r3, [r3, #2]
 8003060:	4619      	mov	r1, r3
 8003062:	4b74      	ldr	r3, [pc, #464]	@ (8003234 <handleTouch+0x79c>)
 8003064:	88db      	ldrh	r3, [r3, #6]
 8003066:	440b      	add	r3, r1
 8003068:	429a      	cmp	r2, r3
 800306a:	f300 80cc 	bgt.w	8003206 <handleTouch+0x76e>
			//delete protocol and go back to main page
			deleteProtocol(page_num, protocol_offset);
 800306e:	4b72      	ldr	r3, [pc, #456]	@ (8003238 <handleTouch+0x7a0>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	4b6d      	ldr	r3, [pc, #436]	@ (800322c <handleTouch+0x794>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	4619      	mov	r1, r3
 800307a:	4610      	mov	r0, r2
 800307c:	f000 fc7a 	bl	8003974 <deleteProtocol>
			currentPage = PAGE_MAIN;
 8003080:	4b69      	ldr	r3, [pc, #420]	@ (8003228 <handleTouch+0x790>)
 8003082:	2200      	movs	r2, #0
 8003084:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8003086:	4b6c      	ldr	r3, [pc, #432]	@ (8003238 <handleTouch+0x7a0>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe fd1a 	bl	8001ac4 <DrawMainPage>
		}
		break;
 8003090:	e0b9      	b.n	8003206 <handleTouch+0x76e>

	case PAGE_PROGRESS:
		//stop button
		if ((x >= backButton.x) && (x <= backButton.x + backButton.w)
 8003092:	4b64      	ldr	r3, [pc, #400]	@ (8003224 <handleTouch+0x78c>)
 8003094:	881a      	ldrh	r2, [r3, #0]
 8003096:	88fb      	ldrh	r3, [r7, #6]
 8003098:	429a      	cmp	r2, r3
 800309a:	d81e      	bhi.n	80030da <handleTouch+0x642>
 800309c:	88fb      	ldrh	r3, [r7, #6]
 800309e:	461a      	mov	r2, r3
 80030a0:	4b60      	ldr	r3, [pc, #384]	@ (8003224 <handleTouch+0x78c>)
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	4619      	mov	r1, r3
 80030a6:	4b5f      	ldr	r3, [pc, #380]	@ (8003224 <handleTouch+0x78c>)
 80030a8:	889b      	ldrh	r3, [r3, #4]
 80030aa:	440b      	add	r3, r1
 80030ac:	429a      	cmp	r2, r3
 80030ae:	dc14      	bgt.n	80030da <handleTouch+0x642>
				&& (y >= backButton.y)
 80030b0:	4b5c      	ldr	r3, [pc, #368]	@ (8003224 <handleTouch+0x78c>)
 80030b2:	885a      	ldrh	r2, [r3, #2]
 80030b4:	88bb      	ldrh	r3, [r7, #4]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d80f      	bhi.n	80030da <handleTouch+0x642>
				&& (y <= backButton.y + backButton.h + BACK_BUTTON_OFFSET)) {
 80030ba:	88bb      	ldrh	r3, [r7, #4]
 80030bc:	461a      	mov	r2, r3
 80030be:	4b59      	ldr	r3, [pc, #356]	@ (8003224 <handleTouch+0x78c>)
 80030c0:	885b      	ldrh	r3, [r3, #2]
 80030c2:	4619      	mov	r1, r3
 80030c4:	4b57      	ldr	r3, [pc, #348]	@ (8003224 <handleTouch+0x78c>)
 80030c6:	88db      	ldrh	r3, [r3, #6]
 80030c8:	440b      	add	r3, r1
 80030ca:	333c      	adds	r3, #60	@ 0x3c
 80030cc:	429a      	cmp	r2, r3
 80030ce:	dc04      	bgt.n	80030da <handleTouch+0x642>
			//printf("touched\n");
			currentPage = PAGE_STOP;
 80030d0:	4b55      	ldr	r3, [pc, #340]	@ (8003228 <handleTouch+0x790>)
 80030d2:	2206      	movs	r2, #6
 80030d4:	701a      	strb	r2, [r3, #0]
			DrawStopPage();
 80030d6:	f7ff fc39 	bl	800294c <DrawStopPage>
		}
		//when protocol finishes naturally, it will send a done signal
		uint8_t done_signal;
		if (HAL_UART_Receive(&huart2, &done_signal, 1, 0) == HAL_OK) {
 80030da:	1cf9      	adds	r1, r7, #3
 80030dc:	2300      	movs	r3, #0
 80030de:	2201      	movs	r2, #1
 80030e0:	4856      	ldr	r0, [pc, #344]	@ (800323c <handleTouch+0x7a4>)
 80030e2:	f006 fb62 	bl	80097aa <HAL_UART_Receive>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f040 808e 	bne.w	800320a <handleTouch+0x772>
			if (done_signal == 'D') {
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	2b44      	cmp	r3, #68	@ 0x44
 80030f2:	f040 808a 	bne.w	800320a <handleTouch+0x772>
			    //go to success page
				currentPage = PAGE_FINISH;
 80030f6:	4b4c      	ldr	r3, [pc, #304]	@ (8003228 <handleTouch+0x790>)
 80030f8:	2204      	movs	r2, #4
 80030fa:	701a      	strb	r2, [r3, #0]
				DrawPageFinish();
 80030fc:	f7ff fc8a 	bl	8002a14 <DrawPageFinish>

				//stop the interrupt
				HAL_TIM_Base_Stop_IT(&htim2);
 8003100:	484f      	ldr	r0, [pc, #316]	@ (8003240 <handleTouch+0x7a8>)
 8003102:	f005 fae3 	bl	80086cc <HAL_TIM_Base_Stop_IT>
			}
		}
		break;
 8003106:	e080      	b.n	800320a <handleTouch+0x772>

	case PAGE_STOP:
		//no button
		if (x >= noButton.x && x <= (noButton.x + noButton.w) && y >= noButton.y
 8003108:	4b4e      	ldr	r3, [pc, #312]	@ (8003244 <handleTouch+0x7ac>)
 800310a:	881a      	ldrh	r2, [r3, #0]
 800310c:	88fb      	ldrh	r3, [r7, #6]
 800310e:	429a      	cmp	r2, r3
 8003110:	d822      	bhi.n	8003158 <handleTouch+0x6c0>
 8003112:	88fb      	ldrh	r3, [r7, #6]
 8003114:	461a      	mov	r2, r3
 8003116:	4b4b      	ldr	r3, [pc, #300]	@ (8003244 <handleTouch+0x7ac>)
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	4619      	mov	r1, r3
 800311c:	4b49      	ldr	r3, [pc, #292]	@ (8003244 <handleTouch+0x7ac>)
 800311e:	889b      	ldrh	r3, [r3, #4]
 8003120:	440b      	add	r3, r1
 8003122:	429a      	cmp	r2, r3
 8003124:	dc18      	bgt.n	8003158 <handleTouch+0x6c0>
 8003126:	4b47      	ldr	r3, [pc, #284]	@ (8003244 <handleTouch+0x7ac>)
 8003128:	885a      	ldrh	r2, [r3, #2]
 800312a:	88bb      	ldrh	r3, [r7, #4]
 800312c:	429a      	cmp	r2, r3
 800312e:	d813      	bhi.n	8003158 <handleTouch+0x6c0>
				&& y <= (noButton.y + noButton.h)) {
 8003130:	88bb      	ldrh	r3, [r7, #4]
 8003132:	461a      	mov	r2, r3
 8003134:	4b43      	ldr	r3, [pc, #268]	@ (8003244 <handleTouch+0x7ac>)
 8003136:	885b      	ldrh	r3, [r3, #2]
 8003138:	4619      	mov	r1, r3
 800313a:	4b42      	ldr	r3, [pc, #264]	@ (8003244 <handleTouch+0x7ac>)
 800313c:	88db      	ldrh	r3, [r3, #6]
 800313e:	440b      	add	r3, r1
 8003140:	429a      	cmp	r2, r3
 8003142:	dc09      	bgt.n	8003158 <handleTouch+0x6c0>
			currentPage = PAGE_PROGRESS;
 8003144:	4b38      	ldr	r3, [pc, #224]	@ (8003228 <handleTouch+0x790>)
 8003146:	2205      	movs	r2, #5
 8003148:	701a      	strb	r2, [r3, #0]
			DrawProgressPage("FILL", rx_byte, rx_data);
 800314a:	4b3f      	ldr	r3, [pc, #252]	@ (8003248 <handleTouch+0x7b0>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	4a3f      	ldr	r2, [pc, #252]	@ (800324c <handleTouch+0x7b4>)
 8003150:	4619      	mov	r1, r3
 8003152:	483f      	ldr	r0, [pc, #252]	@ (8003250 <handleTouch+0x7b8>)
 8003154:	f7ff f89c 	bl	8002290 <DrawProgressPage>
		}
		//yes button
		if (x >= yesButton.x && x <= (yesButton.x + yesButton.w)
 8003158:	4b3e      	ldr	r3, [pc, #248]	@ (8003254 <handleTouch+0x7bc>)
 800315a:	881a      	ldrh	r2, [r3, #0]
 800315c:	88fb      	ldrh	r3, [r7, #6]
 800315e:	429a      	cmp	r2, r3
 8003160:	d855      	bhi.n	800320e <handleTouch+0x776>
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	461a      	mov	r2, r3
 8003166:	4b3b      	ldr	r3, [pc, #236]	@ (8003254 <handleTouch+0x7bc>)
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	4619      	mov	r1, r3
 800316c:	4b39      	ldr	r3, [pc, #228]	@ (8003254 <handleTouch+0x7bc>)
 800316e:	889b      	ldrh	r3, [r3, #4]
 8003170:	440b      	add	r3, r1
 8003172:	429a      	cmp	r2, r3
 8003174:	dc4b      	bgt.n	800320e <handleTouch+0x776>
				&& y >= yesButton.y && y <= (yesButton.y + yesButton.h)) {
 8003176:	4b37      	ldr	r3, [pc, #220]	@ (8003254 <handleTouch+0x7bc>)
 8003178:	885a      	ldrh	r2, [r3, #2]
 800317a:	88bb      	ldrh	r3, [r7, #4]
 800317c:	429a      	cmp	r2, r3
 800317e:	d846      	bhi.n	800320e <handleTouch+0x776>
 8003180:	88bb      	ldrh	r3, [r7, #4]
 8003182:	461a      	mov	r2, r3
 8003184:	4b33      	ldr	r3, [pc, #204]	@ (8003254 <handleTouch+0x7bc>)
 8003186:	885b      	ldrh	r3, [r3, #2]
 8003188:	4619      	mov	r1, r3
 800318a:	4b32      	ldr	r3, [pc, #200]	@ (8003254 <handleTouch+0x7bc>)
 800318c:	88db      	ldrh	r3, [r3, #6]
 800318e:	440b      	add	r3, r1
 8003190:	429a      	cmp	r2, r3
 8003192:	dc3c      	bgt.n	800320e <handleTouch+0x776>
			//Send stop signal to ESP32 and go back to main page
			SendStopMotorsMessage();
 8003194:	f000 fd62 	bl	8003c5c <SendStopMotorsMessage>
			currentPage = PAGE_MAIN;
 8003198:	4b23      	ldr	r3, [pc, #140]	@ (8003228 <handleTouch+0x790>)
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 800319e:	4b26      	ldr	r3, [pc, #152]	@ (8003238 <handleTouch+0x7a0>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe fc8e 	bl	8001ac4 <DrawMainPage>

			//stop the interrupt
			HAL_TIM_Base_Stop_IT(&htim2);
 80031a8:	4825      	ldr	r0, [pc, #148]	@ (8003240 <handleTouch+0x7a8>)
 80031aa:	f005 fa8f 	bl	80086cc <HAL_TIM_Base_Stop_IT>
		}
		break;
 80031ae:	e02e      	b.n	800320e <handleTouch+0x776>

	case PAGE_FINISH:
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 80031b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003224 <handleTouch+0x78c>)
 80031b2:	881a      	ldrh	r2, [r3, #0]
 80031b4:	88fb      	ldrh	r3, [r7, #6]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d82b      	bhi.n	8003212 <handleTouch+0x77a>
 80031ba:	88fb      	ldrh	r3, [r7, #6]
 80031bc:	461a      	mov	r2, r3
 80031be:	4b19      	ldr	r3, [pc, #100]	@ (8003224 <handleTouch+0x78c>)
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	4619      	mov	r1, r3
 80031c4:	4b17      	ldr	r3, [pc, #92]	@ (8003224 <handleTouch+0x78c>)
 80031c6:	889b      	ldrh	r3, [r3, #4]
 80031c8:	440b      	add	r3, r1
 80031ca:	429a      	cmp	r2, r3
 80031cc:	dc21      	bgt.n	8003212 <handleTouch+0x77a>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 80031ce:	4b15      	ldr	r3, [pc, #84]	@ (8003224 <handleTouch+0x78c>)
 80031d0:	885a      	ldrh	r2, [r3, #2]
 80031d2:	88bb      	ldrh	r3, [r7, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d81c      	bhi.n	8003212 <handleTouch+0x77a>
 80031d8:	88bb      	ldrh	r3, [r7, #4]
 80031da:	461a      	mov	r2, r3
 80031dc:	4b11      	ldr	r3, [pc, #68]	@ (8003224 <handleTouch+0x78c>)
 80031de:	885b      	ldrh	r3, [r3, #2]
 80031e0:	4619      	mov	r1, r3
 80031e2:	4b10      	ldr	r3, [pc, #64]	@ (8003224 <handleTouch+0x78c>)
 80031e4:	88db      	ldrh	r3, [r3, #6]
 80031e6:	440b      	add	r3, r1
 80031e8:	429a      	cmp	r2, r3
 80031ea:	dc12      	bgt.n	8003212 <handleTouch+0x77a>
			currentPage = PAGE_MAIN;
 80031ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003228 <handleTouch+0x790>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 80031f2:	4b11      	ldr	r3, [pc, #68]	@ (8003238 <handleTouch+0x7a0>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fe fc64 	bl	8001ac4 <DrawMainPage>
		}
		break;
 80031fc:	e009      	b.n	8003212 <handleTouch+0x77a>
		break;
 80031fe:	bf00      	nop
 8003200:	e008      	b.n	8003214 <handleTouch+0x77c>
		break;
 8003202:	bf00      	nop
 8003204:	e006      	b.n	8003214 <handleTouch+0x77c>
		break;
 8003206:	bf00      	nop
 8003208:	e004      	b.n	8003214 <handleTouch+0x77c>
		break;
 800320a:	bf00      	nop
 800320c:	e002      	b.n	8003214 <handleTouch+0x77c>
		break;
 800320e:	bf00      	nop
 8003210:	e000      	b.n	8003214 <handleTouch+0x77c>
		break;
 8003212:	bf00      	nop
	}

	HAL_Delay(SCREEN_DELAY); //debouncing delay
 8003214:	2032      	movs	r0, #50	@ 0x32
 8003216:	f001 f963 	bl	80044e0 <HAL_Delay>
	return 1;
 800321a:	2301      	movs	r3, #1
}
 800321c:	4618      	mov	r0, r3
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	bd90      	pop	{r4, r7, pc}
 8003224:	200001b8 	.word	0x200001b8
 8003228:	20000594 	.word	0x20000594
 800322c:	200118e1 	.word	0x200118e1
 8003230:	20000030 	.word	0x20000030
 8003234:	20000108 	.word	0x20000108
 8003238:	20000267 	.word	0x20000267
 800323c:	200004fc 	.word	0x200004fc
 8003240:	2000046c 	.word	0x2000046c
 8003244:	2000023c 	.word	0x2000023c
 8003248:	2000059c 	.word	0x2000059c
 800324c:	200005a0 	.word	0x200005a0
 8003250:	080102a0 	.word	0x080102a0
 8003254:	20000210 	.word	0x20000210

08003258 <erase_sector>:
/**
 * @brief: Erase the memory from an entire sector
 * @param Sector: The sector number
 * @retval: none
 */
void erase_sector(uint32_t Sector) {
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();  // Unlock flash to enable erasing
 8003260:	f001 fb5a 	bl	8004918 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(sector_mapping(Sector), VOLTAGE_RANGE_3);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 fd75 	bl	8003d54 <sector_mapping>
 800326a:	4603      	mov	r3, r0
 800326c:	2102      	movs	r1, #2
 800326e:	4618      	mov	r0, r3
 8003270:	f001 fcc4 	bl	8004bfc <FLASH_Erase_Sector>
	HAL_FLASH_Lock();  // Lock flash after erasing
 8003274:	f001 fb72 	bl	800495c <HAL_FLASH_Lock>
}
 8003278:	bf00      	nop
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <write_to_flash>:
 * @param flash_address: address of string in flash memory that will be stored
 * @retval: none
 * Note: PLEASE UNLOCK AND LOCK FLASH BEFORE AND AFTER USING THIS FUNCTION,
 * IT DOES NOT DO IT ITSELF
 */
void write_to_flash(const char *data, uint32_t flash_address) {
 8003280:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8003284:	b085      	sub	sp, #20
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	6039      	str	r1, [r7, #0]
	//HAL_FLASH_Unlock();  // Unlock flash for writing

	for (uint8_t i = 0; i < strlen(data); i++) {
 800328c:	2300      	movs	r3, #0
 800328e:	73fb      	strb	r3, [r7, #15]
 8003290:	e012      	b.n	80032b8 <write_to_flash+0x38>
		//printf("%c", data[i]);
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flash_address + i, data[i]); // Write to flash
 8003292:	7bfa      	ldrb	r2, [r7, #15]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	18d1      	adds	r1, r2, r3
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	4413      	add	r3, r2
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2200      	movs	r2, #0
 80032a4:	4698      	mov	r8, r3
 80032a6:	4691      	mov	r9, r2
 80032a8:	4642      	mov	r2, r8
 80032aa:	464b      	mov	r3, r9
 80032ac:	2000      	movs	r0, #0
 80032ae:	f001 fadf 	bl	8004870 <HAL_FLASH_Program>
	for (uint8_t i = 0; i < strlen(data); i++) {
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	3301      	adds	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
 80032b8:	7bfc      	ldrb	r4, [r7, #15]
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fc ff98 	bl	80001f0 <strlen>
 80032c0:	4603      	mov	r3, r0
 80032c2:	429c      	cmp	r4, r3
 80032c4:	d3e5      	bcc.n	8003292 <write_to_flash+0x12>
	}

	//HAL_FLASH_Lock();  // Lock flash after writing
}
 80032c6:	bf00      	nop
 80032c8:	bf00      	nop
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

080032d2 <read_from_flash>:
 * @param flash_address: address of string in flash memory that will be read
 * @retval: failure if its reading trash from flash memory.
 * it literally does not read from flash btw if it detects 0xFF at the start
 * that means your output buffer will not be updated
 */
uint8_t read_from_flash(char *output, uint32_t flash_address) {
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
	// Read byte by byte from flash memory, get a whole string in output variable
	for (uint8_t i = 0; i < MAX_LINE_LENGTH; i++) {
 80032dc:	2300      	movs	r3, #0
 80032de:	73fb      	strb	r3, [r7, #15]
 80032e0:	e014      	b.n	800330c <read_from_flash+0x3a>
		char key = *(char*) (flash_address + i);
 80032e2:	7bfa      	ldrb	r2, [r7, #15]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	4413      	add	r3, r2
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	73bb      	strb	r3, [r7, #14]
		//check if reading trash (0xFF) from flash memory
		if (key == 0xFF) {
 80032ec:	7bbb      	ldrb	r3, [r7, #14]
 80032ee:	2bff      	cmp	r3, #255	@ 0xff
 80032f0:	d104      	bne.n	80032fc <read_from_flash+0x2a>
			if (i == 0) {
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d106      	bne.n	8003306 <read_from_flash+0x34>
				return 0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	e01b      	b.n	8003334 <read_from_flash+0x62>
			}
		} else {
			output[i] = key;
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	7bba      	ldrb	r2, [r7, #14]
 8003304:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX_LINE_LENGTH; i++) {
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	3301      	adds	r3, #1
 800330a:	73fb      	strb	r3, [r7, #15]
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	2b1f      	cmp	r3, #31
 8003310:	d9e7      	bls.n	80032e2 <read_from_flash+0x10>
		}
	}
	output[strlen(output)] = '\0'; //add null to the end of string for printing
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fc ff6c 	bl	80001f0 <strlen>
 8003318:	4602      	mov	r2, r0
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4413      	add	r3, r2
 800331e:	2200      	movs	r2, #0
 8003320:	701a      	strb	r2, [r3, #0]
	//printf("output is %s and strlen: %d\n", output, strlen(output));

	//error handling. G-codes are less than 32 chars, anything more is trash
	if (strlen(output) < MAX_LINE_LENGTH) {
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7fc ff64 	bl	80001f0 <strlen>
 8003328:	4603      	mov	r3, r0
 800332a:	2b1f      	cmp	r3, #31
 800332c:	d801      	bhi.n	8003332 <read_from_flash+0x60>
		return 1;
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <read_from_flash+0x62>
	} else {
		return 0;
 8003332:	2300      	movs	r3, #0
	}

}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <storeProtocol>:
 * @param gcode_file: array of G-code commands
 * @param sector: which sector to store protocol in
 * @retval: failure if sector is "full"
 */
uint8_t storeProtocol(char new_protocol[MAX_LINES][MAX_LINE_LENGTH],
		uint32_t sector) {
 800333c:	b580      	push	{r7, lr}
 800333e:	f5ad 4d96 	sub.w	sp, sp, #19200	@ 0x4b00
 8003342:	b088      	sub	sp, #32
 8003344:	af00      	add	r7, sp, #0
 8003346:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 800334a:	f6a3 331c 	subw	r3, r3, #2844	@ 0xb1c
 800334e:	6018      	str	r0, [r3, #0]
 8003350:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8003354:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 8003358:	6019      	str	r1, [r3, #0]

	//initialize variables
	int i = 0;  //protocol index
 800335a:	2300      	movs	r3, #0
 800335c:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003360:	f102 021c 	add.w	r2, r2, #28
 8003364:	6013      	str	r3, [r2, #0]
	int j = 0;  //line index
 8003366:	2300      	movs	r3, #0
 8003368:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800336c:	f102 0218 	add.w	r2, r2, #24
 8003370:	6013      	str	r3, [r2, #0]
	char protocolStorage[MAX_PROTOCOLS_IN_SECTOR][MAX_LINES][MAX_LINE_LENGTH] =
 8003372:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8003376:	f6a3 3318 	subw	r3, r3, #2840	@ 0xb18
 800337a:	4618      	mov	r0, r3
 800337c:	f44f 4396 	mov.w	r3, #19200	@ 0x4b00
 8003380:	461a      	mov	r2, r3
 8003382:	2100      	movs	r1, #0
 8003384:	f00c f8b6 	bl	800f4f4 <memset>
			{ { { '\0' } } };
	uint32_t flash_address = get_sector_address(sector);
 8003388:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 800338c:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	f000 fc77 	bl	8003c84 <get_sector_address>
 8003396:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 800339a:	f103 0314 	add.w	r3, r3, #20
 800339e:	6018      	str	r0, [r3, #0]

	//check if all sectors are full before storing a protocol
	uint8_t num_protocols = get_num_protocols_in_sector(sector);
 80033a0:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 80033a4:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	f000 f966 	bl	800367a <get_num_protocols_in_sector>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80033b4:	f102 0213 	add.w	r2, r2, #19
 80033b8:	7013      	strb	r3, [r2, #0]
	if (num_protocols == MAX_PROTOCOLS_IN_SECTOR) {
 80033ba:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80033be:	f103 0313 	add.w	r3, r3, #19
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d101      	bne.n	80033cc <storeProtocol+0x90>
		return 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	e150      	b.n	800366e <storeProtocol+0x332>
	}

	//read existing protocols in sector and put into the temp protocol storage
	for (i = 0; i < num_protocols; i++) {
 80033cc:	2300      	movs	r3, #0
 80033ce:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80033d2:	f102 021c 	add.w	r2, r2, #28
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	e05a      	b.n	8003490 <storeProtocol+0x154>
		for (j = 0; j < MAX_LINES; j++) {
 80033da:	2300      	movs	r3, #0
 80033dc:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80033e0:	f102 0218 	add.w	r2, r2, #24
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e041      	b.n	800346c <storeProtocol+0x130>
			//get the address for the current line in the current protocol
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80033e8:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80033ec:	f103 031c 	add.w	r3, r3, #28
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f241 7270 	movw	r2, #6000	@ 0x1770
 80033f6:	fb02 f303 	mul.w	r3, r2, r3
					+ j * MAX_LINE_LENGTH;
 80033fa:	461a      	mov	r2, r3
 80033fc:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003400:	f103 0318 	add.w	r3, r3, #24
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	015b      	lsls	r3, r3, #5
 8003408:	4413      	add	r3, r2
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 800340a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800340e:	f102 0214 	add.w	r2, r2, #20
 8003412:	6812      	ldr	r2, [r2, #0]
 8003414:	4413      	add	r3, r2
 8003416:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800341a:	f102 0208 	add.w	r2, r2, #8
 800341e:	6013      	str	r3, [r2, #0]
			//read lines from memory into buffer until you reach garbage
			read_from_flash(protocolStorage[i][j], temp_address); //only updates protocolStorage if its a valid line from memory
 8003420:	f107 0320 	add.w	r3, r7, #32
 8003424:	3b18      	subs	r3, #24
 8003426:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800342a:	f102 021c 	add.w	r2, r2, #28
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	21c8      	movs	r1, #200	@ 0xc8
 8003432:	fb02 f101 	mul.w	r1, r2, r1
 8003436:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800343a:	f102 0218 	add.w	r2, r2, #24
 800343e:	6812      	ldr	r2, [r2, #0]
 8003440:	440a      	add	r2, r1
 8003442:	0152      	lsls	r2, r2, #5
 8003444:	4413      	add	r3, r2
 8003446:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800344a:	f102 0208 	add.w	r2, r2, #8
 800344e:	6811      	ldr	r1, [r2, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff ff3e 	bl	80032d2 <read_from_flash>
		for (j = 0; j < MAX_LINES; j++) {
 8003456:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 800345a:	f103 0318 	add.w	r3, r3, #24
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3301      	adds	r3, #1
 8003462:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003466:	f102 0218 	add.w	r2, r2, #24
 800346a:	6013      	str	r3, [r2, #0]
 800346c:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003470:	f103 0318 	add.w	r3, r3, #24
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2bc7      	cmp	r3, #199	@ 0xc7
 8003478:	ddb6      	ble.n	80033e8 <storeProtocol+0xac>
	for (i = 0; i < num_protocols; i++) {
 800347a:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 800347e:	f103 031c 	add.w	r3, r3, #28
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3301      	adds	r3, #1
 8003486:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800348a:	f102 021c 	add.w	r2, r2, #28
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003494:	f103 0313 	add.w	r3, r3, #19
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800349e:	f102 021c 	add.w	r2, r2, #28
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	db98      	blt.n	80033da <storeProtocol+0x9e>
	}
	//output: we now have the existing protocols in the buffer.
	//they only have their first number of lines in. the rest of lines are null

	//put the new protocol into the temp protocol storage
	for (j = 0; j < MAX_LINES; j++) {
 80034a8:	2300      	movs	r3, #0
 80034aa:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80034ae:	f102 0218 	add.w	r2, r2, #24
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	e03b      	b.n	800352e <storeProtocol+0x1f2>
		//copy each line into the buffer from new protocol, should be null terminated from qr scanner
		if (new_protocol[j][0] != '\0') {
 80034b6:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80034ba:	f103 0318 	add.w	r3, r3, #24
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	015b      	lsls	r3, r3, #5
 80034c2:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 80034c6:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	4413      	add	r3, r2
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d021      	beq.n	8003518 <storeProtocol+0x1dc>
			strcpy(protocolStorage[i][j], new_protocol[j]);
 80034d4:	f107 0320 	add.w	r3, r7, #32
 80034d8:	3b18      	subs	r3, #24
 80034da:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80034de:	f102 021c 	add.w	r2, r2, #28
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	21c8      	movs	r1, #200	@ 0xc8
 80034e6:	fb02 f101 	mul.w	r1, r2, r1
 80034ea:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80034ee:	f102 0218 	add.w	r2, r2, #24
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	440a      	add	r2, r1
 80034f6:	0152      	lsls	r2, r2, #5
 80034f8:	1898      	adds	r0, r3, r2
 80034fa:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80034fe:	f103 0318 	add.w	r3, r3, #24
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	015b      	lsls	r3, r3, #5
 8003506:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 800350a:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 800350e:	6812      	ldr	r2, [r2, #0]
 8003510:	4413      	add	r3, r2
 8003512:	4619      	mov	r1, r3
 8003514:	f00c f879 	bl	800f60a <strcpy>
	for (j = 0; j < MAX_LINES; j++) {
 8003518:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 800351c:	f103 0318 	add.w	r3, r3, #24
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3301      	adds	r3, #1
 8003524:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003528:	f102 0218 	add.w	r2, r2, #24
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003532:	f103 0318 	add.w	r3, r3, #24
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2bc7      	cmp	r3, #199	@ 0xc7
 800353a:	ddbc      	ble.n	80034b6 <storeProtocol+0x17a>
	}
	//we now have the new protocol in the buffer.
	//it only has the first number of lines in. the rest of lines are null

	//write existing protocols and new protocol to flash memory, string-by-string
	erase_sector(sector); //erase sector before writing
 800353c:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8003540:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	f7ff fe87 	bl	8003258 <erase_sector>
	HAL_FLASH_Unlock(); // Unlock flash for writing. note: the erase_sector() unlocks and locks itself
 800354a:	f001 f9e5 	bl	8004918 <HAL_FLASH_Unlock>
	for (i = 0; i < (num_protocols + 1); i++) {
 800354e:	2300      	movs	r3, #0
 8003550:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003554:	f102 021c 	add.w	r2, r2, #28
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e078      	b.n	800364e <storeProtocol+0x312>
		for (j = 0; j < MAX_LINES; j++) {
 800355c:	2300      	movs	r3, #0
 800355e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003562:	f102 0218 	add.w	r2, r2, #24
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	e05f      	b.n	800362a <storeProtocol+0x2ee>
			//if first character of a line is null from qr scanner or trash from flash, ignore it
			if ((new_protocol[j][0] != '\0') && (new_protocol[j][0] != 0xFF)) {
 800356a:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 800356e:	f103 0318 	add.w	r3, r3, #24
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	015b      	lsls	r3, r3, #5
 8003576:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 800357a:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 800357e:	6812      	ldr	r2, [r2, #0]
 8003580:	4413      	add	r3, r2
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d045      	beq.n	8003614 <storeProtocol+0x2d8>
 8003588:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 800358c:	f103 0318 	add.w	r3, r3, #24
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	015b      	lsls	r3, r3, #5
 8003594:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 8003598:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 800359c:	6812      	ldr	r2, [r2, #0]
 800359e:	4413      	add	r3, r2
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2bff      	cmp	r3, #255	@ 0xff
 80035a4:	d036      	beq.n	8003614 <storeProtocol+0x2d8>
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80035a6:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80035aa:	f103 031c 	add.w	r3, r3, #28
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f241 7270 	movw	r2, #6000	@ 0x1770
 80035b4:	fb02 f303 	mul.w	r3, r2, r3
						+ j * MAX_LINE_LENGTH;
 80035b8:	461a      	mov	r2, r3
 80035ba:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80035be:	f103 0318 	add.w	r3, r3, #24
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	015b      	lsls	r3, r3, #5
 80035c6:	4413      	add	r3, r2
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80035c8:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80035cc:	f102 0214 	add.w	r2, r2, #20
 80035d0:	6812      	ldr	r2, [r2, #0]
 80035d2:	4413      	add	r3, r2
 80035d4:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80035d8:	f102 020c 	add.w	r2, r2, #12
 80035dc:	6013      	str	r3, [r2, #0]
				//printf("len: %d and data: %s", strlen(protocolStorage[i][j]), protocolStorage[i][j]);
				write_to_flash(protocolStorage[i][j], temp_address);
 80035de:	f107 0320 	add.w	r3, r7, #32
 80035e2:	3b18      	subs	r3, #24
 80035e4:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80035e8:	f102 021c 	add.w	r2, r2, #28
 80035ec:	6812      	ldr	r2, [r2, #0]
 80035ee:	21c8      	movs	r1, #200	@ 0xc8
 80035f0:	fb02 f101 	mul.w	r1, r2, r1
 80035f4:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80035f8:	f102 0218 	add.w	r2, r2, #24
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	440a      	add	r2, r1
 8003600:	0152      	lsls	r2, r2, #5
 8003602:	4413      	add	r3, r2
 8003604:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003608:	f102 020c 	add.w	r2, r2, #12
 800360c:	6811      	ldr	r1, [r2, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff fe36 	bl	8003280 <write_to_flash>
		for (j = 0; j < MAX_LINES; j++) {
 8003614:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003618:	f103 0318 	add.w	r3, r3, #24
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	3301      	adds	r3, #1
 8003620:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003624:	f102 0218 	add.w	r2, r2, #24
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 800362e:	f103 0318 	add.w	r3, r3, #24
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2bc7      	cmp	r3, #199	@ 0xc7
 8003636:	dd98      	ble.n	800356a <storeProtocol+0x22e>
	for (i = 0; i < (num_protocols + 1); i++) {
 8003638:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 800363c:	f103 031c 	add.w	r3, r3, #28
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3301      	adds	r3, #1
 8003644:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003648:	f102 021c 	add.w	r2, r2, #28
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003652:	f103 0313 	add.w	r3, r3, #19
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800365c:	f102 021c 	add.w	r2, r2, #28
 8003660:	6812      	ldr	r2, [r2, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	f77f af7a 	ble.w	800355c <storeProtocol+0x220>
			}
		}
	}
	HAL_FLASH_Lock();  // Unlock flash for writing
 8003668:	f001 f978 	bl	800495c <HAL_FLASH_Lock>

	//output:flash memory now has the lines of protocol storage in there
	//the remaining space is still 0xFF in flash
	return 1;
 800366c:	2301      	movs	r3, #1
}
 800366e:	4618      	mov	r0, r3
 8003670:	f507 4796 	add.w	r7, r7, #19200	@ 0x4b00
 8003674:	3720      	adds	r7, #32
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <get_num_protocols_in_sector>:

//return number of protocols in the sector
uint8_t get_num_protocols_in_sector(uint32_t sector) {
 800367a:	b580      	push	{r7, lr}
 800367c:	b086      	sub	sp, #24
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
	uint32_t flash_address = get_sector_address(sector);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fafe 	bl	8003c84 <get_sector_address>
 8003688:	6138      	str	r0, [r7, #16]

	uint8_t i = 0;
 800368a:	2300      	movs	r3, #0
 800368c:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 800368e:	2300      	movs	r3, #0
 8003690:	75fb      	strb	r3, [r7, #23]
 8003692:	e011      	b.n	80036b8 <get_num_protocols_in_sector+0x3e>
		uint8_t first_char = *(uint8_t*) (flash_address + i * PROTOCOL_SIZE);
 8003694:	7dfb      	ldrb	r3, [r7, #23]
 8003696:	f241 7270 	movw	r2, #6000	@ 0x1770
 800369a:	fb02 f303 	mul.w	r3, r2, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4413      	add	r3, r2
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	73fb      	strb	r3, [r7, #15]
		//memory in flash is default 0xFF
		if (first_char == 0xFF) {
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	2bff      	cmp	r3, #255	@ 0xff
 80036ac:	d101      	bne.n	80036b2 <get_num_protocols_in_sector+0x38>
			return i;
 80036ae:	7dfb      	ldrb	r3, [r7, #23]
 80036b0:	e006      	b.n	80036c0 <get_num_protocols_in_sector+0x46>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 80036b2:	7dfb      	ldrb	r3, [r7, #23]
 80036b4:	3301      	adds	r3, #1
 80036b6:	75fb      	strb	r3, [r7, #23]
 80036b8:	7dfb      	ldrb	r3, [r7, #23]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d9ea      	bls.n	8003694 <get_num_protocols_in_sector+0x1a>
		}
	}
	return i;
 80036be:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <getFreeSector>:

//check each sector sequentially for any space.
//return the first sector number you find that has space
uint8_t getFreeSector(void) {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
	uint8_t i = 1;
 80036ce:	2301      	movs	r3, #1
 80036d0:	73fb      	strb	r3, [r7, #15]
	//check every sector starting at 1
	for (i = 1; i < (NUMBER_OF_SECTORS + 1); i++) {
 80036d2:	2301      	movs	r3, #1
 80036d4:	73fb      	strb	r3, [r7, #15]
 80036d6:	e01f      	b.n	8003718 <getFreeSector+0x50>
		//check each potential protocol slot in the current sector
		for (uint8_t j = 0; j < MAX_PROTOCOLS_IN_SECTOR; j++) {
 80036d8:	2300      	movs	r3, #0
 80036da:	73bb      	strb	r3, [r7, #14]
 80036dc:	e016      	b.n	800370c <getFreeSector+0x44>
			//check first char of the given protocol in the current sector
			uint32_t flash_address = get_sector_address(i) + j * PROTOCOL_SIZE;
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 facf 	bl	8003c84 <get_sector_address>
 80036e6:	4602      	mov	r2, r0
 80036e8:	7bbb      	ldrb	r3, [r7, #14]
 80036ea:	f241 7170 	movw	r1, #6000	@ 0x1770
 80036ee:	fb01 f303 	mul.w	r3, r1, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	60bb      	str	r3, [r7, #8]
			char first_char = *(char*) (flash_address);
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	71fb      	strb	r3, [r7, #7]
			//if memory address is empty, this sector is free
			if (first_char == 0xFF) {
 80036fc:	79fb      	ldrb	r3, [r7, #7]
 80036fe:	2bff      	cmp	r3, #255	@ 0xff
 8003700:	d101      	bne.n	8003706 <getFreeSector+0x3e>
				return i;
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	e00e      	b.n	8003724 <getFreeSector+0x5c>
		for (uint8_t j = 0; j < MAX_PROTOCOLS_IN_SECTOR; j++) {
 8003706:	7bbb      	ldrb	r3, [r7, #14]
 8003708:	3301      	adds	r3, #1
 800370a:	73bb      	strb	r3, [r7, #14]
 800370c:	7bbb      	ldrb	r3, [r7, #14]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d9e5      	bls.n	80036de <getFreeSector+0x16>
	for (i = 1; i < (NUMBER_OF_SECTORS + 1); i++) {
 8003712:	7bfb      	ldrb	r3, [r7, #15]
 8003714:	3301      	adds	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	2b0e      	cmp	r3, #14
 800371c:	d9dc      	bls.n	80036d8 <getFreeSector+0x10>
			}
		}
	}
	//if somehow all sectors are full, return 15 or higher (16 in this case)
	return i + 1;
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	3301      	adds	r3, #1
 8003722:	b2db      	uxtb	r3, r3
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <transmitProtocol>:

/**
 * @brief: Transmit protocol from flash memory to ESP32 via UART string-by-string
 * @param sector: which sector the protocol is stored in
 */
void transmitProtocol(uint32_t sector, uint32_t offset) {
 800372c:	b580      	push	{r7, lr}
 800372e:	b08c      	sub	sp, #48	@ 0x30
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
	char output[MAX_LINE_LENGTH] = { '\0' };
 8003736:	2300      	movs	r3, #0
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	f107 030c 	add.w	r3, r7, #12
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	605a      	str	r2, [r3, #4]
 8003744:	609a      	str	r2, [r3, #8]
 8003746:	60da      	str	r2, [r3, #12]
 8003748:	611a      	str	r2, [r3, #16]
 800374a:	615a      	str	r2, [r3, #20]
 800374c:	619a      	str	r2, [r3, #24]
	uint32_t flash_address = get_sector_address(sector) + offset * PROTOCOL_SIZE;
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fa98 	bl	8003c84 <get_sector_address>
 8003754:	4602      	mov	r2, r0
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	f241 7170 	movw	r1, #6000	@ 0x1770
 800375c:	fb01 f303 	mul.w	r3, r1, r3
 8003760:	4413      	add	r3, r2
 8003762:	62bb      	str	r3, [r7, #40]	@ 0x28

	//printf("\nNew Protocol\n"); //just for debugging

	//we need to process up to 1028 G-code commands
	//but if we run into an invalid string, gcode file is over
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 8003764:	2300      	movs	r3, #0
 8003766:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800376a:	e028      	b.n	80037be <transmitProtocol+0x92>
		//an alternative to resetting the temp buffer is to only read up to newline
		memset(output, 0, MAX_LINE_LENGTH); // Sets all elements of buffer to 0
 800376c:	f107 0308 	add.w	r3, r7, #8
 8003770:	2220      	movs	r2, #32
 8003772:	2100      	movs	r1, #0
 8003774:	4618      	mov	r0, r3
 8003776:	f00b febd 	bl	800f4f4 <memset>
		if (read_from_flash(output, flash_address + i * MAX_LINE_LENGTH)) {
 800377a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800377e:	015b      	lsls	r3, r3, #5
 8003780:	461a      	mov	r2, r3
 8003782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003784:	441a      	add	r2, r3
 8003786:	f107 0308 	add.w	r3, r7, #8
 800378a:	4611      	mov	r1, r2
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff fda0 	bl	80032d2 <read_from_flash>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00d      	beq.n	80037b4 <transmitProtocol+0x88>
			//printf("%s", output);
			HAL_UART_Transmit(&huart2, (uint8_t*) output, strlen(output),
 8003798:	f107 0308 	add.w	r3, r7, #8
 800379c:	4618      	mov	r0, r3
 800379e:	f7fc fd27 	bl	80001f0 <strlen>
 80037a2:	4603      	mov	r3, r0
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	f107 0108 	add.w	r1, r7, #8
 80037aa:	f04f 33ff 	mov.w	r3, #4294967295
 80037ae:	4808      	ldr	r0, [pc, #32]	@ (80037d0 <transmitProtocol+0xa4>)
 80037b0:	f005 ff70 	bl	8009694 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 80037b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037b8:	3301      	adds	r3, #1
 80037ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80037be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037c2:	2bc7      	cmp	r3, #199	@ 0xc7
 80037c4:	d9d2      	bls.n	800376c <transmitProtocol+0x40>
			HAL_MAX_DELAY);
		}
	}
}
 80037c6:	bf00      	nop
 80037c8:	bf00      	nop
 80037ca:	3730      	adds	r7, #48	@ 0x30
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	200004fc 	.word	0x200004fc

080037d4 <queueProtocol>:

/**
 * @brief: Queue protocol from flash memory to RAM buffer
 * @param sector: which sector the protocol is stored in
 */
void queueProtocol(uint32_t sector, uint32_t offset) {
 80037d4:	b5b0      	push	{r4, r5, r7, lr}
 80037d6:	b08c      	sub	sp, #48	@ 0x30
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
	char output[MAX_LINE_LENGTH] = { '\0' };
 80037de:	2300      	movs	r3, #0
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	f107 030c 	add.w	r3, r7, #12
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	605a      	str	r2, [r3, #4]
 80037ec:	609a      	str	r2, [r3, #8]
 80037ee:	60da      	str	r2, [r3, #12]
 80037f0:	611a      	str	r2, [r3, #16]
 80037f2:	615a      	str	r2, [r3, #20]
 80037f4:	619a      	str	r2, [r3, #24]
	uint32_t flash_address = get_sector_address(sector) + offset * PROTOCOL_SIZE;
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fa44 	bl	8003c84 <get_sector_address>
 80037fc:	4602      	mov	r2, r0
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	f241 7170 	movw	r1, #6000	@ 0x1770
 8003804:	fb01 f303 	mul.w	r3, r1, r3
 8003808:	4413      	add	r3, r2
 800380a:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t last_line = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 8003812:	2300      	movs	r3, #0
 8003814:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8003818:	e030      	b.n	800387c <queueProtocol+0xa8>
		memset(output, 0, MAX_LINE_LENGTH); // Sets all elements of buffer to 0
 800381a:	f107 0308 	add.w	r3, r7, #8
 800381e:	2220      	movs	r2, #32
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f00b fe66 	bl	800f4f4 <memset>
		if (read_from_flash(output, flash_address + i * MAX_LINE_LENGTH)) {
 8003828:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800382c:	015b      	lsls	r3, r3, #5
 800382e:	461a      	mov	r2, r3
 8003830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003832:	441a      	add	r2, r3
 8003834:	f107 0308 	add.w	r3, r7, #8
 8003838:	4611      	mov	r1, r2
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff fd49 	bl	80032d2 <read_from_flash>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d015      	beq.n	8003872 <queueProtocol+0x9e>
			strcpy(queueBuffer[queueSize][i], output);
 8003846:	4b21      	ldr	r3, [pc, #132]	@ (80038cc <queueProtocol+0xf8>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	4619      	mov	r1, r3
 800384c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003850:	22c8      	movs	r2, #200	@ 0xc8
 8003852:	fb01 f202 	mul.w	r2, r1, r2
 8003856:	4413      	add	r3, r2
 8003858:	015b      	lsls	r3, r3, #5
 800385a:	4a1d      	ldr	r2, [pc, #116]	@ (80038d0 <queueProtocol+0xfc>)
 800385c:	4413      	add	r3, r2
 800385e:	f107 0208 	add.w	r2, r7, #8
 8003862:	4611      	mov	r1, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f00b fed0 	bl	800f60a <strcpy>
			last_line = i;
 800386a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800386e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 8003872:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003876:	3301      	adds	r3, #1
 8003878:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800387c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003880:	2bc7      	cmp	r3, #199	@ 0xc7
 8003882:	d9ca      	bls.n	800381a <queueProtocol+0x46>
		}
	}
	//dont store the tab operator of protocol for queueing
	queueBuffer[queueSize][last_line][strlen(queueBuffer[queueSize][last_line])
 8003884:	4b11      	ldr	r3, [pc, #68]	@ (80038cc <queueProtocol+0xf8>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	461d      	mov	r5, r3
 800388a:	f897 402f 	ldrb.w	r4, [r7, #47]	@ 0x2f
 800388e:	4b0f      	ldr	r3, [pc, #60]	@ (80038cc <queueProtocol+0xf8>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	4619      	mov	r1, r3
 8003894:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003898:	22c8      	movs	r2, #200	@ 0xc8
 800389a:	fb01 f202 	mul.w	r2, r1, r2
 800389e:	4413      	add	r3, r2
 80038a0:	015b      	lsls	r3, r3, #5
 80038a2:	4a0b      	ldr	r2, [pc, #44]	@ (80038d0 <queueProtocol+0xfc>)
 80038a4:	4413      	add	r3, r2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fc fca2 	bl	80001f0 <strlen>
 80038ac:	4603      	mov	r3, r0
			- 1] = NULL_CHAR; //strlen gives the size of string. tab operator is size-1
 80038ae:	3b01      	subs	r3, #1
 80038b0:	4907      	ldr	r1, [pc, #28]	@ (80038d0 <queueProtocol+0xfc>)
 80038b2:	22c8      	movs	r2, #200	@ 0xc8
 80038b4:	fb05 f202 	mul.w	r2, r5, r2
 80038b8:	4422      	add	r2, r4
 80038ba:	0152      	lsls	r2, r2, #5
 80038bc:	440a      	add	r2, r1
 80038be:	4413      	add	r3, r2
 80038c0:	2200      	movs	r2, #0
 80038c2:	701a      	strb	r2, [r3, #0]
}
 80038c4:	bf00      	nop
 80038c6:	3730      	adds	r7, #48	@ 0x30
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bdb0      	pop	{r4, r5, r7, pc}
 80038cc:	2000ffd8 	.word	0x2000ffd8
 80038d0:	200005d8 	.word	0x200005d8

080038d4 <transmitQueuedProtocols>:

/**
 * @brief: Transmit queued protocols from RAM buffer to ESP32 via UART string-by-string
 * @param queueSize:
 */
void transmitQueuedProtocols(uint8_t queueSize) {
 80038d4:	b590      	push	{r4, r7, lr}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	71fb      	strb	r3, [r7, #7]
	//i need to send a filler title
	//printf("FillerTitle\n");
	HAL_UART_Transmit(&huart2, (uint8_t*) "Filler\r\n", strlen("Filler\r\n"),
 80038de:	f04f 33ff 	mov.w	r3, #4294967295
 80038e2:	2208      	movs	r2, #8
 80038e4:	491f      	ldr	r1, [pc, #124]	@ (8003964 <transmitQueuedProtocols+0x90>)
 80038e6:	4820      	ldr	r0, [pc, #128]	@ (8003968 <transmitQueuedProtocols+0x94>)
 80038e8:	f005 fed4 	bl	8009694 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

	//transmit the queued protocols
	for (uint8_t i = 0; i < queueSize; i++) {
 80038ec:	2300      	movs	r3, #0
 80038ee:	73fb      	strb	r3, [r7, #15]
 80038f0:	e028      	b.n	8003944 <transmitQueuedProtocols+0x70>
		for (uint8_t j = 1; j < MAX_LINES; j++) {
 80038f2:	2301      	movs	r3, #1
 80038f4:	73bb      	strb	r3, [r7, #14]
 80038f6:	e01f      	b.n	8003938 <transmitQueuedProtocols+0x64>
			//printf(queueBuffer[i][j]);
			HAL_UART_Transmit(&huart2, (uint8_t*) queueBuffer[i][j],
 80038f8:	7bfa      	ldrb	r2, [r7, #15]
 80038fa:	7bbb      	ldrb	r3, [r7, #14]
 80038fc:	21c8      	movs	r1, #200	@ 0xc8
 80038fe:	fb01 f202 	mul.w	r2, r1, r2
 8003902:	4413      	add	r3, r2
 8003904:	015b      	lsls	r3, r3, #5
 8003906:	4a19      	ldr	r2, [pc, #100]	@ (800396c <transmitQueuedProtocols+0x98>)
 8003908:	189c      	adds	r4, r3, r2
					strlen(queueBuffer[i][j]), HAL_MAX_DELAY);
 800390a:	7bfa      	ldrb	r2, [r7, #15]
 800390c:	7bbb      	ldrb	r3, [r7, #14]
 800390e:	21c8      	movs	r1, #200	@ 0xc8
 8003910:	fb01 f202 	mul.w	r2, r1, r2
 8003914:	4413      	add	r3, r2
 8003916:	015b      	lsls	r3, r3, #5
 8003918:	4a14      	ldr	r2, [pc, #80]	@ (800396c <transmitQueuedProtocols+0x98>)
 800391a:	4413      	add	r3, r2
 800391c:	4618      	mov	r0, r3
 800391e:	f7fc fc67 	bl	80001f0 <strlen>
 8003922:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) queueBuffer[i][j],
 8003924:	b29a      	uxth	r2, r3
 8003926:	f04f 33ff 	mov.w	r3, #4294967295
 800392a:	4621      	mov	r1, r4
 800392c:	480e      	ldr	r0, [pc, #56]	@ (8003968 <transmitQueuedProtocols+0x94>)
 800392e:	f005 feb1 	bl	8009694 <HAL_UART_Transmit>
		for (uint8_t j = 1; j < MAX_LINES; j++) {
 8003932:	7bbb      	ldrb	r3, [r7, #14]
 8003934:	3301      	adds	r3, #1
 8003936:	73bb      	strb	r3, [r7, #14]
 8003938:	7bbb      	ldrb	r3, [r7, #14]
 800393a:	2bc7      	cmp	r3, #199	@ 0xc7
 800393c:	d9dc      	bls.n	80038f8 <transmitQueuedProtocols+0x24>
	for (uint8_t i = 0; i < queueSize; i++) {
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	3301      	adds	r3, #1
 8003942:	73fb      	strb	r3, [r7, #15]
 8003944:	7bfa      	ldrb	r2, [r7, #15]
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	429a      	cmp	r2, r3
 800394a:	d3d2      	bcc.n	80038f2 <transmitQueuedProtocols+0x1e>
//	//debugging print
//	for (int a = 0; a < queueSize; a++) {
//		printf("%s\n", queueBuffer[a]);
//	}
	//finish with a tab operator
	HAL_UART_Transmit(&huart2, (uint8_t*) "\t", 1, HAL_MAX_DELAY);
 800394c:	f04f 33ff 	mov.w	r3, #4294967295
 8003950:	2201      	movs	r2, #1
 8003952:	4907      	ldr	r1, [pc, #28]	@ (8003970 <transmitQueuedProtocols+0x9c>)
 8003954:	4804      	ldr	r0, [pc, #16]	@ (8003968 <transmitQueuedProtocols+0x94>)
 8003956:	f005 fe9d 	bl	8009694 <HAL_UART_Transmit>
}
 800395a:	bf00      	nop
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	bd90      	pop	{r4, r7, pc}
 8003962:	bf00      	nop
 8003964:	08010410 	.word	0x08010410
 8003968:	200004fc 	.word	0x200004fc
 800396c:	200005d8 	.word	0x200005d8
 8003970:	0801041c 	.word	0x0801041c

08003974 <deleteProtocol>:
 * @brief: Delete protocol from flash memory to ESP32 via UART string-by-string
 * @param sector: which sector the protocol is stored in
 * @param offset: the exact slot in the sector the protocol is stored in
 * @retval: none
 */
void deleteProtocol(uint32_t sector, uint32_t offset) {
 8003974:	b580      	push	{r7, lr}
 8003976:	f5ad 4d96 	sub.w	sp, sp, #19200	@ 0x4b00
 800397a:	b09c      	sub	sp, #112	@ 0x70
 800397c:	af00      	add	r7, sp, #0
 800397e:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003982:	f6a3 336c 	subw	r3, r3, #2924	@ 0xb6c
 8003986:	6018      	str	r0, [r3, #0]
 8003988:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 800398c:	f5a3 6337 	sub.w	r3, r3, #2928	@ 0xb70
 8003990:	6019      	str	r1, [r3, #0]
	//initialize variables
	uint8_t new_offset = offset + 1; //have it range from 1-3
 8003992:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003996:	f5a3 6337 	sub.w	r3, r3, #2928	@ 0xb70
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	3301      	adds	r3, #1
 80039a0:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80039a4:	f102 025f 	add.w	r2, r2, #95	@ 0x5f
 80039a8:	7013      	strb	r3, [r2, #0]
	int i = 0;
 80039aa:	2300      	movs	r3, #0
 80039ac:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80039b0:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 80039b4:	6013      	str	r3, [r2, #0]
	int j = 0; //indices for moving through flash memory
 80039b6:	2300      	movs	r3, #0
 80039b8:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80039bc:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 80039c0:	6013      	str	r3, [r2, #0]
	char protocolStorage[MAX_PROTOCOLS_IN_SECTOR][MAX_LINES][MAX_LINE_LENGTH] =
 80039c2:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 80039c6:	f6a3 3324 	subw	r3, r3, #2852	@ 0xb24
 80039ca:	4618      	mov	r0, r3
 80039cc:	f44f 4396 	mov.w	r3, #19200	@ 0x4b00
 80039d0:	461a      	mov	r2, r3
 80039d2:	2100      	movs	r1, #0
 80039d4:	f00b fd8e 	bl	800f4f4 <memset>
			{ { { '\0' } } };
	uint32_t flash_address = get_sector_address(sector);
 80039d8:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 80039dc:	f6a3 336c 	subw	r3, r3, #2924	@ 0xb6c
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	f000 f94f 	bl	8003c84 <get_sector_address>
 80039e6:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80039ea:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 80039ee:	6018      	str	r0, [r3, #0]
	char trashLine[MAX_LINE_LENGTH];
	memset(trashLine, 0xFF, sizeof(trashLine));
 80039f0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80039f4:	3b44      	subs	r3, #68	@ 0x44
 80039f6:	2220      	movs	r2, #32
 80039f8:	21ff      	movs	r1, #255	@ 0xff
 80039fa:	4618      	mov	r0, r3
 80039fc:	f00b fd7a 	bl	800f4f4 <memset>
	char nullLine[MAX_LINE_LENGTH];
	memset(nullLine, 0x00, sizeof(nullLine));
 8003a00:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003a04:	3b64      	subs	r3, #100	@ 0x64
 8003a06:	2220      	movs	r2, #32
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f00b fd72 	bl	800f4f4 <memset>
	uint8_t num_protocols = get_num_protocols_in_sector(sector);
 8003a10:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003a14:	f6a3 336c 	subw	r3, r3, #2924	@ 0xb6c
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	f7ff fe2e 	bl	800367a <get_num_protocols_in_sector>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003a24:	f102 0257 	add.w	r2, r2, #87	@ 0x57
 8003a28:	7013      	strb	r3, [r2, #0]

	int a = 0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003a30:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8003a34:	6013      	str	r3, [r2, #0]
	int b = 0; //separate indices for protocolstorage
 8003a36:	2300      	movs	r3, #0
 8003a38:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003a3c:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003a40:	6013      	str	r3, [r2, #0]

	//copy all protocols in sector to local buffer
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8003a42:	2300      	movs	r3, #0
 8003a44:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003a48:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	e082      	b.n	8003b56 <deleteProtocol+0x1e2>
		if (i != offset) {
 8003a50:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003a54:	f5a3 6337 	sub.w	r3, r3, #2928	@ 0xb70
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003a5e:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d06b      	beq.n	8003b40 <deleteProtocol+0x1cc>
			//copy all lines of the protocol into the buffer
			for (j = 0; j < MAX_LINES; j++) {
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003a6e:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	e04c      	b.n	8003b10 <deleteProtocol+0x19c>
				//get the address for the current line in the current protocol
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8003a76:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003a7a:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f241 7270 	movw	r2, #6000	@ 0x1770
 8003a84:	fb02 f303 	mul.w	r3, r2, r3
						+ j * MAX_LINE_LENGTH;
 8003a88:	461a      	mov	r2, r3
 8003a8a:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003a8e:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	015b      	lsls	r3, r3, #5
 8003a96:	4413      	add	r3, r2
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8003a98:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003a9c:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003aa8:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 8003aac:	6013      	str	r3, [r2, #0]
				//read lines from memory into buffer until you reach garbage
				read_from_flash(protocolStorage[a][b], temp_address); //only updates protocolStorage if its a valid line from memory
 8003aae:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003ab2:	3b24      	subs	r3, #36	@ 0x24
 8003ab4:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003ab8:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	21c8      	movs	r1, #200	@ 0xc8
 8003ac0:	fb02 f101 	mul.w	r1, r2, r1
 8003ac4:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003ac8:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	440a      	add	r2, r1
 8003ad0:	0152      	lsls	r2, r2, #5
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003ad8:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 8003adc:	6811      	ldr	r1, [r2, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff fbf7 	bl	80032d2 <read_from_flash>
				b++;
 8003ae4:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003ae8:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3301      	adds	r3, #1
 8003af0:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003af4:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003af8:	6013      	str	r3, [r2, #0]
			for (j = 0; j < MAX_LINES; j++) {
 8003afa:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003afe:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3301      	adds	r3, #1
 8003b06:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003b0a:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003b14:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2bc7      	cmp	r3, #199	@ 0xc7
 8003b1c:	ddab      	ble.n	8003a76 <deleteProtocol+0x102>
			}
			a++;
 8003b1e:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003b22:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003b2e:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8003b32:	6013      	str	r3, [r2, #0]
			b = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003b3a:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003b3e:	6013      	str	r3, [r2, #0]
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8003b40:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003b44:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003b50:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003b5a:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	f77f af75 	ble.w	8003a50 <deleteProtocol+0xdc>
		}
	}

	//write existing protocols except the one to be deleted back to flash
	erase_sector(sector); //erase sector before writing
 8003b66:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003b6a:	f6a3 336c 	subw	r3, r3, #2924	@ 0xb6c
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	f7ff fb72 	bl	8003258 <erase_sector>
	HAL_FLASH_Unlock(); // Unlock flash for writing. note: the erase_sector() unlocks and locks itself
 8003b74:	f000 fed0 	bl	8004918 <HAL_FLASH_Unlock>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003b7e:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	e05a      	b.n	8003c3c <deleteProtocol+0x2c8>
		for (j = 0; j < MAX_LINES; j++) {
 8003b86:	2300      	movs	r3, #0
 8003b88:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003b8c:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	e041      	b.n	8003c18 <deleteProtocol+0x2a4>
			//if first character of a line is null from qr scanner or trash from flash, ignore it
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8003b94:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003b98:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f241 7270 	movw	r2, #6000	@ 0x1770
 8003ba2:	fb02 f303 	mul.w	r3, r2, r3
					+ j * MAX_LINE_LENGTH;
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003bac:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	015b      	lsls	r3, r3, #5
 8003bb4:	4413      	add	r3, r2
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8003bb6:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003bba:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003bc6:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 8003bca:	6013      	str	r3, [r2, #0]
			write_to_flash(protocolStorage[i][j], temp_address);
 8003bcc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003bd0:	3b24      	subs	r3, #36	@ 0x24
 8003bd2:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003bd6:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	21c8      	movs	r1, #200	@ 0xc8
 8003bde:	fb02 f101 	mul.w	r1, r2, r1
 8003be2:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003be6:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003bea:	6812      	ldr	r2, [r2, #0]
 8003bec:	440a      	add	r2, r1
 8003bee:	0152      	lsls	r2, r2, #5
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003bf6:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 8003bfa:	6811      	ldr	r1, [r2, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff fb3f 	bl	8003280 <write_to_flash>
		for (j = 0; j < MAX_LINES; j++) {
 8003c02:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003c06:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003c12:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003c1c:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2bc7      	cmp	r3, #199	@ 0xc7
 8003c24:	ddb6      	ble.n	8003b94 <deleteProtocol+0x220>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8003c26:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003c2a:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003c36:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003c40:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	dd9d      	ble.n	8003b86 <deleteProtocol+0x212>

		}
	}
	HAL_FLASH_Lock();  // Unlock flash for writing
 8003c4a:	f000 fe87 	bl	800495c <HAL_FLASH_Lock>
}
 8003c4e:	bf00      	nop
 8003c50:	f507 4796 	add.w	r7, r7, #19200	@ 0x4b00
 8003c54:	3770      	adds	r7, #112	@ 0x70
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <SendStopMotorsMessage>:
//		}
//	}
//	HAL_FLASH_Lock();  // Unlock flash for writing
//}

void SendStopMotorsMessage(void) {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
	//printf("S\n");
	HAL_UART_Transmit(&huart2, (uint8_t*) "S", 1, HAL_MAX_DELAY);
 8003c60:	f04f 33ff 	mov.w	r3, #4294967295
 8003c64:	2201      	movs	r2, #1
 8003c66:	4904      	ldr	r1, [pc, #16]	@ (8003c78 <SendStopMotorsMessage+0x1c>)
 8003c68:	4804      	ldr	r0, [pc, #16]	@ (8003c7c <SendStopMotorsMessage+0x20>)
 8003c6a:	f005 fd13 	bl	8009694 <HAL_UART_Transmit>
	rx_byte = 0; //otherwise when you run a new protocol is has old info
 8003c6e:	4b04      	ldr	r3, [pc, #16]	@ (8003c80 <SendStopMotorsMessage+0x24>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
}
 8003c74:	bf00      	nop
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	08010420 	.word	0x08010420
 8003c7c:	200004fc 	.word	0x200004fc
 8003c80:	2000059c 	.word	0x2000059c

08003c84 <get_sector_address>:
void write_number_to_flash(uint32_t flash_address, uint32_t number) {
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flash_address, number);
}

//I name sectors from 1-14. the actual sectors are from 5-23. this functions maps them
uint32_t get_sector_address(uint32_t sector) {
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
	switch (sector) {
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	2b0d      	cmp	r3, #13
 8003c92:	d83b      	bhi.n	8003d0c <get_sector_address+0x88>
 8003c94:	a201      	add	r2, pc, #4	@ (adr r2, 8003c9c <get_sector_address+0x18>)
 8003c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9a:	bf00      	nop
 8003c9c:	08003cd5 	.word	0x08003cd5
 8003ca0:	08003cd9 	.word	0x08003cd9
 8003ca4:	08003cdd 	.word	0x08003cdd
 8003ca8:	08003ce1 	.word	0x08003ce1
 8003cac:	08003ce5 	.word	0x08003ce5
 8003cb0:	08003ce9 	.word	0x08003ce9
 8003cb4:	08003ced 	.word	0x08003ced
 8003cb8:	08003cf1 	.word	0x08003cf1
 8003cbc:	08003cf5 	.word	0x08003cf5
 8003cc0:	08003cf9 	.word	0x08003cf9
 8003cc4:	08003cfd 	.word	0x08003cfd
 8003cc8:	08003d01 	.word	0x08003d01
 8003ccc:	08003d05 	.word	0x08003d05
 8003cd0:	08003d09 	.word	0x08003d09
	case 1:
		return SECTOR_5;
 8003cd4:	4b11      	ldr	r3, [pc, #68]	@ (8003d1c <get_sector_address+0x98>)
 8003cd6:	e01a      	b.n	8003d0e <get_sector_address+0x8a>
	case 2:
		return SECTOR_6;
 8003cd8:	4b11      	ldr	r3, [pc, #68]	@ (8003d20 <get_sector_address+0x9c>)
 8003cda:	e018      	b.n	8003d0e <get_sector_address+0x8a>
	case 3:
		return SECTOR_7;
 8003cdc:	4b11      	ldr	r3, [pc, #68]	@ (8003d24 <get_sector_address+0xa0>)
 8003cde:	e016      	b.n	8003d0e <get_sector_address+0x8a>
	case 4:
		return SECTOR_8;
 8003ce0:	4b11      	ldr	r3, [pc, #68]	@ (8003d28 <get_sector_address+0xa4>)
 8003ce2:	e014      	b.n	8003d0e <get_sector_address+0x8a>
	case 5:
		return SECTOR_9;
 8003ce4:	4b11      	ldr	r3, [pc, #68]	@ (8003d2c <get_sector_address+0xa8>)
 8003ce6:	e012      	b.n	8003d0e <get_sector_address+0x8a>
	case 6:
		return SECTOR_10;
 8003ce8:	4b11      	ldr	r3, [pc, #68]	@ (8003d30 <get_sector_address+0xac>)
 8003cea:	e010      	b.n	8003d0e <get_sector_address+0x8a>
	case 7:
		return SECTOR_11;
 8003cec:	4b11      	ldr	r3, [pc, #68]	@ (8003d34 <get_sector_address+0xb0>)
 8003cee:	e00e      	b.n	8003d0e <get_sector_address+0x8a>
	case 8:
		return SECTOR_17;
 8003cf0:	4b11      	ldr	r3, [pc, #68]	@ (8003d38 <get_sector_address+0xb4>)
 8003cf2:	e00c      	b.n	8003d0e <get_sector_address+0x8a>
	case 9:
		return SECTOR_18;
 8003cf4:	4b11      	ldr	r3, [pc, #68]	@ (8003d3c <get_sector_address+0xb8>)
 8003cf6:	e00a      	b.n	8003d0e <get_sector_address+0x8a>
	case 10:
		return SECTOR_19;
 8003cf8:	4b11      	ldr	r3, [pc, #68]	@ (8003d40 <get_sector_address+0xbc>)
 8003cfa:	e008      	b.n	8003d0e <get_sector_address+0x8a>
	case 11:
		return SECTOR_20;
 8003cfc:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <get_sector_address+0xc0>)
 8003cfe:	e006      	b.n	8003d0e <get_sector_address+0x8a>
	case 12:
		return SECTOR_21;
 8003d00:	4b11      	ldr	r3, [pc, #68]	@ (8003d48 <get_sector_address+0xc4>)
 8003d02:	e004      	b.n	8003d0e <get_sector_address+0x8a>
	case 13:
		return SECTOR_22;
 8003d04:	4b11      	ldr	r3, [pc, #68]	@ (8003d4c <get_sector_address+0xc8>)
 8003d06:	e002      	b.n	8003d0e <get_sector_address+0x8a>
	case 14:
		return SECTOR_23;
 8003d08:	4b11      	ldr	r3, [pc, #68]	@ (8003d50 <get_sector_address+0xcc>)
 8003d0a:	e000      	b.n	8003d0e <get_sector_address+0x8a>
	default:
		break;
 8003d0c:	bf00      	nop
	}
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	08020000 	.word	0x08020000
 8003d20:	08040000 	.word	0x08040000
 8003d24:	08060000 	.word	0x08060000
 8003d28:	08080000 	.word	0x08080000
 8003d2c:	080a0000 	.word	0x080a0000
 8003d30:	080c0000 	.word	0x080c0000
 8003d34:	080e0000 	.word	0x080e0000
 8003d38:	08120000 	.word	0x08120000
 8003d3c:	08140000 	.word	0x08140000
 8003d40:	08160000 	.word	0x08160000
 8003d44:	08180000 	.word	0x08180000
 8003d48:	081a0000 	.word	0x081a0000
 8003d4c:	081c0000 	.word	0x081c0000
 8003d50:	081e0000 	.word	0x081e0000

08003d54 <sector_mapping>:

uint32_t sector_mapping(uint32_t sector) {
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
	switch (sector) {
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	2b0d      	cmp	r3, #13
 8003d62:	d83b      	bhi.n	8003ddc <sector_mapping+0x88>
 8003d64:	a201      	add	r2, pc, #4	@ (adr r2, 8003d6c <sector_mapping+0x18>)
 8003d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6a:	bf00      	nop
 8003d6c:	08003da5 	.word	0x08003da5
 8003d70:	08003da9 	.word	0x08003da9
 8003d74:	08003dad 	.word	0x08003dad
 8003d78:	08003db1 	.word	0x08003db1
 8003d7c:	08003db5 	.word	0x08003db5
 8003d80:	08003db9 	.word	0x08003db9
 8003d84:	08003dbd 	.word	0x08003dbd
 8003d88:	08003dc1 	.word	0x08003dc1
 8003d8c:	08003dc5 	.word	0x08003dc5
 8003d90:	08003dc9 	.word	0x08003dc9
 8003d94:	08003dcd 	.word	0x08003dcd
 8003d98:	08003dd1 	.word	0x08003dd1
 8003d9c:	08003dd5 	.word	0x08003dd5
 8003da0:	08003dd9 	.word	0x08003dd9
	case 1:
		return 5;
 8003da4:	2305      	movs	r3, #5
 8003da6:	e019      	b.n	8003ddc <sector_mapping+0x88>
	case 2:
		return 6;
 8003da8:	2306      	movs	r3, #6
 8003daa:	e017      	b.n	8003ddc <sector_mapping+0x88>
	case 3:
		return 7;
 8003dac:	2307      	movs	r3, #7
 8003dae:	e015      	b.n	8003ddc <sector_mapping+0x88>
	case 4:
		return 8;
 8003db0:	2308      	movs	r3, #8
 8003db2:	e013      	b.n	8003ddc <sector_mapping+0x88>
	case 5:
		return 9;
 8003db4:	2309      	movs	r3, #9
 8003db6:	e011      	b.n	8003ddc <sector_mapping+0x88>
	case 6:
		return 10;
 8003db8:	230a      	movs	r3, #10
 8003dba:	e00f      	b.n	8003ddc <sector_mapping+0x88>
	case 7:
		return 11;
 8003dbc:	230b      	movs	r3, #11
 8003dbe:	e00d      	b.n	8003ddc <sector_mapping+0x88>
	case 8:
		return 17;
 8003dc0:	2311      	movs	r3, #17
 8003dc2:	e00b      	b.n	8003ddc <sector_mapping+0x88>
	case 9:
		return 18;
 8003dc4:	2312      	movs	r3, #18
 8003dc6:	e009      	b.n	8003ddc <sector_mapping+0x88>
	case 10:
		return 19;
 8003dc8:	2313      	movs	r3, #19
 8003dca:	e007      	b.n	8003ddc <sector_mapping+0x88>
	case 11:
		return 20;
 8003dcc:	2314      	movs	r3, #20
 8003dce:	e005      	b.n	8003ddc <sector_mapping+0x88>
	case 12:
		return 21;
 8003dd0:	2315      	movs	r3, #21
 8003dd2:	e003      	b.n	8003ddc <sector_mapping+0x88>
	case 13:
		return 22;
 8003dd4:	2316      	movs	r3, #22
 8003dd6:	e001      	b.n	8003ddc <sector_mapping+0x88>
	case 14:
		return 23;
 8003dd8:	2317      	movs	r3, #23
 8003dda:	e7ff      	b.n	8003ddc <sector_mapping+0x88>
	}
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_GPIO_EXTI_Callback>:

/*** Touchscreen Interrupt Handler ****/
//t_irq_pin is default high. it gets driven low while the screen is touched.
//the interrupt is triggered on falling edge.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == T_IRQ_Pin) {
 8003df2:	88fb      	ldrh	r3, [r7, #6]
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d11d      	bne.n	8003e34 <HAL_GPIO_EXTI_Callback+0x4c>

		uint32_t current_time = HAL_GetTick(); // ms since startup
 8003df8:	f000 fb66 	bl	80044c8 <HAL_GetTick>
 8003dfc:	60f8      	str	r0, [r7, #12]

		//perform some debouncing for interrupt pin
		if ((current_time - last_interrupt_time) > DEBOUNCE_DELAY_MS) {
 8003dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8003e3c <HAL_GPIO_EXTI_Callback+0x54>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b1e      	cmp	r3, #30
 8003e08:	d914      	bls.n	8003e34 <HAL_GPIO_EXTI_Callback+0x4c>
			last_interrupt_time = current_time;
 8003e0a:	4a0c      	ldr	r2, [pc, #48]	@ (8003e3c <HAL_GPIO_EXTI_Callback+0x54>)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6013      	str	r3, [r2, #0]

			//handle the actual interrupt below
			uint8_t currentTouchedState = HAL_GPIO_ReadPin(T_IRQ_GPIO_Port,
 8003e10:	2120      	movs	r1, #32
 8003e12:	480b      	ldr	r0, [pc, #44]	@ (8003e40 <HAL_GPIO_EXTI_Callback+0x58>)
 8003e14:	f001 f8ec 	bl	8004ff0 <HAL_GPIO_ReadPin>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	72fb      	strb	r3, [r7, #11]
//			}
//			if (currentTouchedState == 0) {
//				printf("low");
//			}
			//printf("%d\n", currentTouchedState)
			if (XPT2046_TouchPressed() && !touchFlag) {
 8003e1c:	f7fc fbd0 	bl	80005c0 <XPT2046_TouchPressed>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d006      	beq.n	8003e34 <HAL_GPIO_EXTI_Callback+0x4c>
 8003e26:	4b07      	ldr	r3, [pc, #28]	@ (8003e44 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d102      	bne.n	8003e34 <HAL_GPIO_EXTI_Callback+0x4c>
				touchFlag = 1;
 8003e2e:	4b05      	ldr	r3, [pc, #20]	@ (8003e44 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	200005c8 	.word	0x200005c8
 8003e40:	40020400 	.word	0x40020400
 8003e44:	200005cc 	.word	0x200005cc

08003e48 <HAL_TIM_PeriodElapsedCallback>:

// This is called every time the timer overflows (i.e., when the interrupt triggers)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e58:	d112      	bne.n	8003e80 <HAL_TIM_PeriodElapsedCallback+0x38>
    {
        // Your code here — for example:
    	if (protocolTimer > 0) {
 8003e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e88 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	dd04      	ble.n	8003e6c <HAL_TIM_PeriodElapsedCallback+0x24>
    		protocolTimer--;
 8003e62:	4b09      	ldr	r3, [pc, #36]	@ (8003e88 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	4a07      	ldr	r2, [pc, #28]	@ (8003e88 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003e6a:	6013      	str	r3, [r2, #0]
    	}
    	if (currentPage == PAGE_PROGRESS) {
 8003e6c:	4b07      	ldr	r3, [pc, #28]	@ (8003e8c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b05      	cmp	r3, #5
 8003e72:	d105      	bne.n	8003e80 <HAL_TIM_PeriodElapsedCallback+0x38>
    		lcdSetCursor(10, 170);
 8003e74:	21aa      	movs	r1, #170	@ 0xaa
 8003e76:	200a      	movs	r0, #10
 8003e78:	f7fd f8ce 	bl	8001018 <lcdSetCursor>
    		DrawCountdownTime();
 8003e7c:	f7fe fce2 	bl	8002844 <DrawCountdownTime>
        	//DrawProgressPage("Fill", rx_byte, rx_data);
    	}

    }
}
 8003e80:	bf00      	nop
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20000598 	.word	0x20000598
 8003e8c:	20000594 	.word	0x20000594

08003e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003e94:	b672      	cpsid	i
}
 8003e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003e98:	bf00      	nop
 8003e9a:	e7fd      	b.n	8003e98 <Error_Handler+0x8>

08003e9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	607b      	str	r3, [r7, #4]
 8003ea6:	4b10      	ldr	r3, [pc, #64]	@ (8003ee8 <HAL_MspInit+0x4c>)
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eaa:	4a0f      	ldr	r2, [pc, #60]	@ (8003ee8 <HAL_MspInit+0x4c>)
 8003eac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee8 <HAL_MspInit+0x4c>)
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eba:	607b      	str	r3, [r7, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	603b      	str	r3, [r7, #0]
 8003ec2:	4b09      	ldr	r3, [pc, #36]	@ (8003ee8 <HAL_MspInit+0x4c>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec6:	4a08      	ldr	r2, [pc, #32]	@ (8003ee8 <HAL_MspInit+0x4c>)
 8003ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ece:	4b06      	ldr	r3, [pc, #24]	@ (8003ee8 <HAL_MspInit+0x4c>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40023800 	.word	0x40023800

08003eec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08a      	sub	sp, #40	@ 0x28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef4:	f107 0314 	add.w	r3, r7, #20
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	605a      	str	r2, [r3, #4]
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	60da      	str	r2, [r3, #12]
 8003f02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a19      	ldr	r2, [pc, #100]	@ (8003f70 <HAL_SPI_MspInit+0x84>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d12b      	bne.n	8003f66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	4b18      	ldr	r3, [pc, #96]	@ (8003f74 <HAL_SPI_MspInit+0x88>)
 8003f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f16:	4a17      	ldr	r2, [pc, #92]	@ (8003f74 <HAL_SPI_MspInit+0x88>)
 8003f18:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f1e:	4b15      	ldr	r3, [pc, #84]	@ (8003f74 <HAL_SPI_MspInit+0x88>)
 8003f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	4b11      	ldr	r3, [pc, #68]	@ (8003f74 <HAL_SPI_MspInit+0x88>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f32:	4a10      	ldr	r2, [pc, #64]	@ (8003f74 <HAL_SPI_MspInit+0x88>)
 8003f34:	f043 0310 	orr.w	r3, r3, #16
 8003f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8003f74 <HAL_SPI_MspInit+0x88>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3e:	f003 0310 	and.w	r3, r3, #16
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = T_SCK_Pin|T_CS_Pin|T_MISO_Pin|T_MOSI_Pin;
 8003f46:	2374      	movs	r3, #116	@ 0x74
 8003f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f52:	2303      	movs	r3, #3
 8003f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003f56:	2305      	movs	r3, #5
 8003f58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f5a:	f107 0314 	add.w	r3, r7, #20
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4805      	ldr	r0, [pc, #20]	@ (8003f78 <HAL_SPI_MspInit+0x8c>)
 8003f62:	f000 fe99 	bl	8004c98 <HAL_GPIO_Init>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 8003f66:	bf00      	nop
 8003f68:	3728      	adds	r7, #40	@ 0x28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40013400 	.word	0x40013400
 8003f74:	40023800 	.word	0x40023800
 8003f78:	40021000 	.word	0x40021000

08003f7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f8c:	d115      	bne.n	8003fba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc4 <HAL_TIM_Base_MspInit+0x48>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	4a0b      	ldr	r2, [pc, #44]	@ (8003fc4 <HAL_TIM_Base_MspInit+0x48>)
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f9e:	4b09      	ldr	r3, [pc, #36]	@ (8003fc4 <HAL_TIM_Base_MspInit+0x48>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003faa:	2200      	movs	r2, #0
 8003fac:	2100      	movs	r1, #0
 8003fae:	201c      	movs	r0, #28
 8003fb0:	f000 fb95 	bl	80046de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003fb4:	201c      	movs	r0, #28
 8003fb6:	f000 fbae 	bl	8004716 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003fba:	bf00      	nop
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40023800 	.word	0x40023800

08003fc8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8004004 <HAL_TIM_PWM_MspInit+0x3c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d10d      	bne.n	8003ff6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	4b0a      	ldr	r3, [pc, #40]	@ (8004008 <HAL_TIM_PWM_MspInit+0x40>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	4a09      	ldr	r2, [pc, #36]	@ (8004008 <HAL_TIM_PWM_MspInit+0x40>)
 8003fe4:	f043 0302 	orr.w	r3, r3, #2
 8003fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fea:	4b07      	ldr	r3, [pc, #28]	@ (8004008 <HAL_TIM_PWM_MspInit+0x40>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003ff6:	bf00      	nop
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40000400 	.word	0x40000400
 8004008:	40023800 	.word	0x40023800

0800400c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004014:	f107 030c 	add.w	r3, r7, #12
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	605a      	str	r2, [r3, #4]
 800401e:	609a      	str	r2, [r3, #8]
 8004020:	60da      	str	r2, [r3, #12]
 8004022:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a12      	ldr	r2, [pc, #72]	@ (8004074 <HAL_TIM_MspPostInit+0x68>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d11d      	bne.n	800406a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800402e:	2300      	movs	r3, #0
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	4b11      	ldr	r3, [pc, #68]	@ (8004078 <HAL_TIM_MspPostInit+0x6c>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004036:	4a10      	ldr	r2, [pc, #64]	@ (8004078 <HAL_TIM_MspPostInit+0x6c>)
 8004038:	f043 0302 	orr.w	r3, r3, #2
 800403c:	6313      	str	r3, [r2, #48]	@ 0x30
 800403e:	4b0e      	ldr	r3, [pc, #56]	@ (8004078 <HAL_TIM_MspPostInit+0x6c>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	60bb      	str	r3, [r7, #8]
 8004048:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BL_PWM_Pin;
 800404a:	2310      	movs	r3, #16
 800404c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404e:	2302      	movs	r3, #2
 8004050:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004056:	2300      	movs	r3, #0
 8004058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800405a:	2302      	movs	r3, #2
 800405c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_PWM_GPIO_Port, &GPIO_InitStruct);
 800405e:	f107 030c 	add.w	r3, r7, #12
 8004062:	4619      	mov	r1, r3
 8004064:	4805      	ldr	r0, [pc, #20]	@ (800407c <HAL_TIM_MspPostInit+0x70>)
 8004066:	f000 fe17 	bl	8004c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800406a:	bf00      	nop
 800406c:	3720      	adds	r7, #32
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40000400 	.word	0x40000400
 8004078:	40023800 	.word	0x40023800
 800407c:	40020400 	.word	0x40020400

08004080 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08a      	sub	sp, #40	@ 0x28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004088:	f107 0314 	add.w	r3, r7, #20
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	605a      	str	r2, [r3, #4]
 8004092:	609a      	str	r2, [r3, #8]
 8004094:	60da      	str	r2, [r3, #12]
 8004096:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1d      	ldr	r2, [pc, #116]	@ (8004114 <HAL_UART_MspInit+0x94>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d133      	bne.n	800410a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80040a2:	2300      	movs	r3, #0
 80040a4:	613b      	str	r3, [r7, #16]
 80040a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004118 <HAL_UART_MspInit+0x98>)
 80040a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004118 <HAL_UART_MspInit+0x98>)
 80040ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80040b2:	4b19      	ldr	r3, [pc, #100]	@ (8004118 <HAL_UART_MspInit+0x98>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	4b15      	ldr	r3, [pc, #84]	@ (8004118 <HAL_UART_MspInit+0x98>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c6:	4a14      	ldr	r2, [pc, #80]	@ (8004118 <HAL_UART_MspInit+0x98>)
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80040ce:	4b12      	ldr	r3, [pc, #72]	@ (8004118 <HAL_UART_MspInit+0x98>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040da:	230c      	movs	r3, #12
 80040dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040de:	2302      	movs	r3, #2
 80040e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040e6:	2303      	movs	r3, #3
 80040e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040ea:	2307      	movs	r3, #7
 80040ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ee:	f107 0314 	add.w	r3, r7, #20
 80040f2:	4619      	mov	r1, r3
 80040f4:	4809      	ldr	r0, [pc, #36]	@ (800411c <HAL_UART_MspInit+0x9c>)
 80040f6:	f000 fdcf 	bl	8004c98 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80040fa:	2200      	movs	r2, #0
 80040fc:	2100      	movs	r1, #0
 80040fe:	2026      	movs	r0, #38	@ 0x26
 8004100:	f000 faed 	bl	80046de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004104:	2026      	movs	r0, #38	@ 0x26
 8004106:	f000 fb06 	bl	8004716 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800410a:	bf00      	nop
 800410c:	3728      	adds	r7, #40	@ 0x28
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40004400 	.word	0x40004400
 8004118:	40023800 	.word	0x40023800
 800411c:	40020000 	.word	0x40020000

08004120 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004126:	1d3b      	adds	r3, r7, #4
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	605a      	str	r2, [r3, #4]
 800412e:	609a      	str	r2, [r3, #8]
 8004130:	60da      	str	r2, [r3, #12]
 8004132:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004134:	4b1c      	ldr	r3, [pc, #112]	@ (80041a8 <HAL_FMC_MspInit+0x88>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d131      	bne.n	80041a0 <HAL_FMC_MspInit+0x80>
    return;
  }
  FMC_Initialized = 1;
 800413c:	4b1a      	ldr	r3, [pc, #104]	@ (80041a8 <HAL_FMC_MspInit+0x88>)
 800413e:	2201      	movs	r2, #1
 8004140:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004142:	2300      	movs	r3, #0
 8004144:	603b      	str	r3, [r7, #0]
 8004146:	4b19      	ldr	r3, [pc, #100]	@ (80041ac <HAL_FMC_MspInit+0x8c>)
 8004148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414a:	4a18      	ldr	r2, [pc, #96]	@ (80041ac <HAL_FMC_MspInit+0x8c>)
 800414c:	f043 0301 	orr.w	r3, r3, #1
 8004150:	6393      	str	r3, [r2, #56]	@ 0x38
 8004152:	4b16      	ldr	r3, [pc, #88]	@ (80041ac <HAL_FMC_MspInit+0x8c>)
 8004154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800415e:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8004162:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004164:	2302      	movs	r3, #2
 8004166:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800416c:	2303      	movs	r3, #3
 800416e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004170:	230c      	movs	r3, #12
 8004172:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004174:	1d3b      	adds	r3, r7, #4
 8004176:	4619      	mov	r1, r3
 8004178:	480d      	ldr	r0, [pc, #52]	@ (80041b0 <HAL_FMC_MspInit+0x90>)
 800417a:	f000 fd8d 	bl	8004c98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800417e:	f64c 73b3 	movw	r3, #53171	@ 0xcfb3
 8004182:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004184:	2302      	movs	r3, #2
 8004186:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800418c:	2303      	movs	r3, #3
 800418e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004190:	230c      	movs	r3, #12
 8004192:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004194:	1d3b      	adds	r3, r7, #4
 8004196:	4619      	mov	r1, r3
 8004198:	4806      	ldr	r0, [pc, #24]	@ (80041b4 <HAL_FMC_MspInit+0x94>)
 800419a:	f000 fd7d 	bl	8004c98 <HAL_GPIO_Init>
 800419e:	e000      	b.n	80041a2 <HAL_FMC_MspInit+0x82>
    return;
 80041a0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	200118e4 	.word	0x200118e4
 80041ac:	40023800 	.word	0x40023800
 80041b0:	40021000 	.word	0x40021000
 80041b4:	40020c00 	.word	0x40020c00

080041b8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80041c0:	f7ff ffae 	bl	8004120 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80041d0:	bf00      	nop
 80041d2:	e7fd      	b.n	80041d0 <NMI_Handler+0x4>

080041d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041d8:	bf00      	nop
 80041da:	e7fd      	b.n	80041d8 <HardFault_Handler+0x4>

080041dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041e0:	bf00      	nop
 80041e2:	e7fd      	b.n	80041e0 <MemManage_Handler+0x4>

080041e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041e8:	bf00      	nop
 80041ea:	e7fd      	b.n	80041e8 <BusFault_Handler+0x4>

080041ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041f0:	bf00      	nop
 80041f2:	e7fd      	b.n	80041f0 <UsageFault_Handler+0x4>

080041f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041f8:	bf00      	nop
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004202:	b480      	push	{r7}
 8004204:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004206:	bf00      	nop
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004214:	bf00      	nop
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004222:	f000 f93d 	bl	80044a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004226:	bf00      	nop
 8004228:	bd80      	pop	{r7, pc}

0800422a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_IRQ_Pin);
 800422e:	2020      	movs	r0, #32
 8004230:	f000 ff10 	bl	8005054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004234:	bf00      	nop
 8004236:	bd80      	pop	{r7, pc}

08004238 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800423c:	4802      	ldr	r0, [pc, #8]	@ (8004248 <TIM2_IRQHandler+0x10>)
 800423e:	f004 fb8b 	bl	8008958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004242:	bf00      	nop
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	2000046c 	.word	0x2000046c

0800424c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004250:	4802      	ldr	r0, [pc, #8]	@ (800425c <USART2_IRQHandler+0x10>)
 8004252:	f005 fb41 	bl	80098d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004256:	bf00      	nop
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	200004fc 	.word	0x200004fc

08004260 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004264:	4802      	ldr	r0, [pc, #8]	@ (8004270 <OTG_FS_IRQHandler+0x10>)
 8004266:	f001 f9ed 	bl	8005644 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800426a:	bf00      	nop
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20011d24 	.word	0x20011d24

08004274 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	e00a      	b.n	800429c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004286:	f3af 8000 	nop.w
 800428a:	4601      	mov	r1, r0
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	60ba      	str	r2, [r7, #8]
 8004292:	b2ca      	uxtb	r2, r1
 8004294:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	3301      	adds	r3, #1
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	dbf0      	blt.n	8004286 <_read+0x12>
  }

  return len;
 80042a4:	687b      	ldr	r3, [r7, #4]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <_close>:
  }
  return len;
}

int _close(int file)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80042d6:	605a      	str	r2, [r3, #4]
  return 0;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <_isatty>:

int _isatty(int file)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80042ee:	2301      	movs	r3, #1
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
	...

08004318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004320:	4a14      	ldr	r2, [pc, #80]	@ (8004374 <_sbrk+0x5c>)
 8004322:	4b15      	ldr	r3, [pc, #84]	@ (8004378 <_sbrk+0x60>)
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800432c:	4b13      	ldr	r3, [pc, #76]	@ (800437c <_sbrk+0x64>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d102      	bne.n	800433a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004334:	4b11      	ldr	r3, [pc, #68]	@ (800437c <_sbrk+0x64>)
 8004336:	4a12      	ldr	r2, [pc, #72]	@ (8004380 <_sbrk+0x68>)
 8004338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800433a:	4b10      	ldr	r3, [pc, #64]	@ (800437c <_sbrk+0x64>)
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4413      	add	r3, r2
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	429a      	cmp	r2, r3
 8004346:	d207      	bcs.n	8004358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004348:	f00b f932 	bl	800f5b0 <__errno>
 800434c:	4603      	mov	r3, r0
 800434e:	220c      	movs	r2, #12
 8004350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004352:	f04f 33ff 	mov.w	r3, #4294967295
 8004356:	e009      	b.n	800436c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004358:	4b08      	ldr	r3, [pc, #32]	@ (800437c <_sbrk+0x64>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800435e:	4b07      	ldr	r3, [pc, #28]	@ (800437c <_sbrk+0x64>)
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	4a05      	ldr	r2, [pc, #20]	@ (800437c <_sbrk+0x64>)
 8004368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800436a:	68fb      	ldr	r3, [r7, #12]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	20030000 	.word	0x20030000
 8004378:	00000400 	.word	0x00000400
 800437c:	200118e8 	.word	0x200118e8
 8004380:	20012250 	.word	0x20012250

08004384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004388:	4b06      	ldr	r3, [pc, #24]	@ (80043a4 <SystemInit+0x20>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438e:	4a05      	ldr	r2, [pc, #20]	@ (80043a4 <SystemInit+0x20>)
 8004390:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004394:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004398:	bf00      	nop
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	e000ed00 	.word	0xe000ed00

080043a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80043a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80043e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80043ac:	f7ff ffea 	bl	8004384 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043b0:	480c      	ldr	r0, [pc, #48]	@ (80043e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80043b2:	490d      	ldr	r1, [pc, #52]	@ (80043e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80043b4:	4a0d      	ldr	r2, [pc, #52]	@ (80043ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80043b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043b8:	e002      	b.n	80043c0 <LoopCopyDataInit>

080043ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043be:	3304      	adds	r3, #4

080043c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043c4:	d3f9      	bcc.n	80043ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043c6:	4a0a      	ldr	r2, [pc, #40]	@ (80043f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80043c8:	4c0a      	ldr	r4, [pc, #40]	@ (80043f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80043ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043cc:	e001      	b.n	80043d2 <LoopFillZerobss>

080043ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043d0:	3204      	adds	r2, #4

080043d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043d4:	d3fb      	bcc.n	80043ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80043d6:	f00b f8f1 	bl	800f5bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043da:	f7fc ffdb 	bl	8001394 <main>
  bx  lr    
 80043de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80043e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80043e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043e8:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 80043ec:	08012ef4 	.word	0x08012ef4
  ldr r2, =_sbss
 80043f0:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 80043f4:	20012250 	.word	0x20012250

080043f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043f8:	e7fe      	b.n	80043f8 <ADC_IRQHandler>
	...

080043fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004400:	4b0e      	ldr	r3, [pc, #56]	@ (800443c <HAL_Init+0x40>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a0d      	ldr	r2, [pc, #52]	@ (800443c <HAL_Init+0x40>)
 8004406:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800440a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800440c:	4b0b      	ldr	r3, [pc, #44]	@ (800443c <HAL_Init+0x40>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a0a      	ldr	r2, [pc, #40]	@ (800443c <HAL_Init+0x40>)
 8004412:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004416:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004418:	4b08      	ldr	r3, [pc, #32]	@ (800443c <HAL_Init+0x40>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a07      	ldr	r2, [pc, #28]	@ (800443c <HAL_Init+0x40>)
 800441e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004424:	2003      	movs	r0, #3
 8004426:	f000 f94f 	bl	80046c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800442a:	200f      	movs	r0, #15
 800442c:	f000 f808 	bl	8004440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004430:	f7ff fd34 	bl	8003e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40023c00 	.word	0x40023c00

08004440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004448:	4b12      	ldr	r3, [pc, #72]	@ (8004494 <HAL_InitTick+0x54>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	4b12      	ldr	r3, [pc, #72]	@ (8004498 <HAL_InitTick+0x58>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	4619      	mov	r1, r3
 8004452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004456:	fbb3 f3f1 	udiv	r3, r3, r1
 800445a:	fbb2 f3f3 	udiv	r3, r2, r3
 800445e:	4618      	mov	r0, r3
 8004460:	f000 f967 	bl	8004732 <HAL_SYSTICK_Config>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e00e      	b.n	800448c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b0f      	cmp	r3, #15
 8004472:	d80a      	bhi.n	800448a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004474:	2200      	movs	r2, #0
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	f04f 30ff 	mov.w	r0, #4294967295
 800447c:	f000 f92f 	bl	80046de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004480:	4a06      	ldr	r2, [pc, #24]	@ (800449c <HAL_InitTick+0x5c>)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	e000      	b.n	800448c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
}
 800448c:	4618      	mov	r0, r3
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	20000268 	.word	0x20000268
 8004498:	20000270 	.word	0x20000270
 800449c:	2000026c 	.word	0x2000026c

080044a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044a4:	4b06      	ldr	r3, [pc, #24]	@ (80044c0 <HAL_IncTick+0x20>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	4b06      	ldr	r3, [pc, #24]	@ (80044c4 <HAL_IncTick+0x24>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4413      	add	r3, r2
 80044b0:	4a04      	ldr	r2, [pc, #16]	@ (80044c4 <HAL_IncTick+0x24>)
 80044b2:	6013      	str	r3, [r2, #0]
}
 80044b4:	bf00      	nop
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	20000270 	.word	0x20000270
 80044c4:	200118ec 	.word	0x200118ec

080044c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  return uwTick;
 80044cc:	4b03      	ldr	r3, [pc, #12]	@ (80044dc <HAL_GetTick+0x14>)
 80044ce:	681b      	ldr	r3, [r3, #0]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	200118ec 	.word	0x200118ec

080044e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044e8:	f7ff ffee 	bl	80044c8 <HAL_GetTick>
 80044ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f8:	d005      	beq.n	8004506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004524 <HAL_Delay+0x44>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004506:	bf00      	nop
 8004508:	f7ff ffde 	bl	80044c8 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	429a      	cmp	r2, r3
 8004516:	d8f7      	bhi.n	8004508 <HAL_Delay+0x28>
  {
  }
}
 8004518:	bf00      	nop
 800451a:	bf00      	nop
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	20000270 	.word	0x20000270

08004528 <__NVIC_SetPriorityGrouping>:
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004538:	4b0c      	ldr	r3, [pc, #48]	@ (800456c <__NVIC_SetPriorityGrouping+0x44>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004544:	4013      	ands	r3, r2
 8004546:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004550:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800455a:	4a04      	ldr	r2, [pc, #16]	@ (800456c <__NVIC_SetPriorityGrouping+0x44>)
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	60d3      	str	r3, [r2, #12]
}
 8004560:	bf00      	nop
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	e000ed00 	.word	0xe000ed00

08004570 <__NVIC_GetPriorityGrouping>:
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004574:	4b04      	ldr	r3, [pc, #16]	@ (8004588 <__NVIC_GetPriorityGrouping+0x18>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	0a1b      	lsrs	r3, r3, #8
 800457a:	f003 0307 	and.w	r3, r3, #7
}
 800457e:	4618      	mov	r0, r3
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	e000ed00 	.word	0xe000ed00

0800458c <__NVIC_EnableIRQ>:
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459a:	2b00      	cmp	r3, #0
 800459c:	db0b      	blt.n	80045b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800459e:	79fb      	ldrb	r3, [r7, #7]
 80045a0:	f003 021f 	and.w	r2, r3, #31
 80045a4:	4907      	ldr	r1, [pc, #28]	@ (80045c4 <__NVIC_EnableIRQ+0x38>)
 80045a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	2001      	movs	r0, #1
 80045ae:	fa00 f202 	lsl.w	r2, r0, r2
 80045b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	e000e100 	.word	0xe000e100

080045c8 <__NVIC_SetPriority>:
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	6039      	str	r1, [r7, #0]
 80045d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	db0a      	blt.n	80045f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	490c      	ldr	r1, [pc, #48]	@ (8004614 <__NVIC_SetPriority+0x4c>)
 80045e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e6:	0112      	lsls	r2, r2, #4
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	440b      	add	r3, r1
 80045ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80045f0:	e00a      	b.n	8004608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	4908      	ldr	r1, [pc, #32]	@ (8004618 <__NVIC_SetPriority+0x50>)
 80045f8:	79fb      	ldrb	r3, [r7, #7]
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	3b04      	subs	r3, #4
 8004600:	0112      	lsls	r2, r2, #4
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	440b      	add	r3, r1
 8004606:	761a      	strb	r2, [r3, #24]
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	e000e100 	.word	0xe000e100
 8004618:	e000ed00 	.word	0xe000ed00

0800461c <NVIC_EncodePriority>:
{
 800461c:	b480      	push	{r7}
 800461e:	b089      	sub	sp, #36	@ 0x24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f1c3 0307 	rsb	r3, r3, #7
 8004636:	2b04      	cmp	r3, #4
 8004638:	bf28      	it	cs
 800463a:	2304      	movcs	r3, #4
 800463c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	3304      	adds	r3, #4
 8004642:	2b06      	cmp	r3, #6
 8004644:	d902      	bls.n	800464c <NVIC_EncodePriority+0x30>
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	3b03      	subs	r3, #3
 800464a:	e000      	b.n	800464e <NVIC_EncodePriority+0x32>
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004650:	f04f 32ff 	mov.w	r2, #4294967295
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	43da      	mvns	r2, r3
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	401a      	ands	r2, r3
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004664:	f04f 31ff 	mov.w	r1, #4294967295
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	fa01 f303 	lsl.w	r3, r1, r3
 800466e:	43d9      	mvns	r1, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004674:	4313      	orrs	r3, r2
}
 8004676:	4618      	mov	r0, r3
 8004678:	3724      	adds	r7, #36	@ 0x24
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
	...

08004684 <SysTick_Config>:
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3b01      	subs	r3, #1
 8004690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004694:	d301      	bcc.n	800469a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004696:	2301      	movs	r3, #1
 8004698:	e00f      	b.n	80046ba <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800469a:	4a0a      	ldr	r2, [pc, #40]	@ (80046c4 <SysTick_Config+0x40>)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3b01      	subs	r3, #1
 80046a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046a2:	210f      	movs	r1, #15
 80046a4:	f04f 30ff 	mov.w	r0, #4294967295
 80046a8:	f7ff ff8e 	bl	80045c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046ac:	4b05      	ldr	r3, [pc, #20]	@ (80046c4 <SysTick_Config+0x40>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046b2:	4b04      	ldr	r3, [pc, #16]	@ (80046c4 <SysTick_Config+0x40>)
 80046b4:	2207      	movs	r2, #7
 80046b6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	e000e010 	.word	0xe000e010

080046c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff ff29 	bl	8004528 <__NVIC_SetPriorityGrouping>
}
 80046d6:	bf00      	nop
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046de:	b580      	push	{r7, lr}
 80046e0:	b086      	sub	sp, #24
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	4603      	mov	r3, r0
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	607a      	str	r2, [r7, #4]
 80046ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046f0:	f7ff ff3e 	bl	8004570 <__NVIC_GetPriorityGrouping>
 80046f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	6978      	ldr	r0, [r7, #20]
 80046fc:	f7ff ff8e 	bl	800461c <NVIC_EncodePriority>
 8004700:	4602      	mov	r2, r0
 8004702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004706:	4611      	mov	r1, r2
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff ff5d 	bl	80045c8 <__NVIC_SetPriority>
}
 800470e:	bf00      	nop
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	4603      	mov	r3, r0
 800471e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff ff31 	bl	800458c <__NVIC_EnableIRQ>
}
 800472a:	bf00      	nop
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff ffa2 	bl	8004684 <SysTick_Config>
 8004740:	4603      	mov	r3, r0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b084      	sub	sp, #16
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004756:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004758:	f7ff feb6 	bl	80044c8 <HAL_GetTick>
 800475c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d008      	beq.n	800477c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2280      	movs	r2, #128	@ 0x80
 800476e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e052      	b.n	8004822 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0216 	bic.w	r2, r2, #22
 800478a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695a      	ldr	r2, [r3, #20]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800479a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d103      	bne.n	80047ac <HAL_DMA_Abort+0x62>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d007      	beq.n	80047bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0208 	bic.w	r2, r2, #8
 80047ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0201 	bic.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047cc:	e013      	b.n	80047f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047ce:	f7ff fe7b 	bl	80044c8 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b05      	cmp	r3, #5
 80047da:	d90c      	bls.n	80047f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2220      	movs	r2, #32
 80047e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2203      	movs	r2, #3
 80047e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e015      	b.n	8004822 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1e4      	bne.n	80047ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004808:	223f      	movs	r2, #63	@ 0x3f
 800480a:	409a      	lsls	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d004      	beq.n	8004848 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2280      	movs	r2, #128	@ 0x80
 8004842:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e00c      	b.n	8004862 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2205      	movs	r2, #5
 800484c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0201 	bic.w	r2, r2, #1
 800485e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
	...

08004870 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004882:	4b23      	ldr	r3, [pc, #140]	@ (8004910 <HAL_FLASH_Program+0xa0>)
 8004884:	7e1b      	ldrb	r3, [r3, #24]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <HAL_FLASH_Program+0x1e>
 800488a:	2302      	movs	r3, #2
 800488c:	e03b      	b.n	8004906 <HAL_FLASH_Program+0x96>
 800488e:	4b20      	ldr	r3, [pc, #128]	@ (8004910 <HAL_FLASH_Program+0xa0>)
 8004890:	2201      	movs	r2, #1
 8004892:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004894:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004898:	f000 f870 	bl	800497c <FLASH_WaitForLastOperation>
 800489c:	4603      	mov	r3, r0
 800489e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80048a0:	7dfb      	ldrb	r3, [r7, #23]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d12b      	bne.n	80048fe <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d105      	bne.n	80048b8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80048ac:	783b      	ldrb	r3, [r7, #0]
 80048ae:	4619      	mov	r1, r3
 80048b0:	68b8      	ldr	r0, [r7, #8]
 80048b2:	f000 f91b 	bl	8004aec <FLASH_Program_Byte>
 80048b6:	e016      	b.n	80048e6 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d105      	bne.n	80048ca <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80048be:	883b      	ldrh	r3, [r7, #0]
 80048c0:	4619      	mov	r1, r3
 80048c2:	68b8      	ldr	r0, [r7, #8]
 80048c4:	f000 f8ee 	bl	8004aa4 <FLASH_Program_HalfWord>
 80048c8:	e00d      	b.n	80048e6 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d105      	bne.n	80048dc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	4619      	mov	r1, r3
 80048d4:	68b8      	ldr	r0, [r7, #8]
 80048d6:	f000 f8c3 	bl	8004a60 <FLASH_Program_Word>
 80048da:	e004      	b.n	80048e6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80048dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048e0:	68b8      	ldr	r0, [r7, #8]
 80048e2:	f000 f88b 	bl	80049fc <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80048e6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80048ea:	f000 f847 	bl	800497c <FLASH_WaitForLastOperation>
 80048ee:	4603      	mov	r3, r0
 80048f0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80048f2:	4b08      	ldr	r3, [pc, #32]	@ (8004914 <HAL_FLASH_Program+0xa4>)
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	4a07      	ldr	r2, [pc, #28]	@ (8004914 <HAL_FLASH_Program+0xa4>)
 80048f8:	f023 0301 	bic.w	r3, r3, #1
 80048fc:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80048fe:	4b04      	ldr	r3, [pc, #16]	@ (8004910 <HAL_FLASH_Program+0xa0>)
 8004900:	2200      	movs	r2, #0
 8004902:	761a      	strb	r2, [r3, #24]

  return status;
 8004904:	7dfb      	ldrb	r3, [r7, #23]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	200118f0 	.word	0x200118f0
 8004914:	40023c00 	.word	0x40023c00

08004918 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004922:	4b0b      	ldr	r3, [pc, #44]	@ (8004950 <HAL_FLASH_Unlock+0x38>)
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	da0b      	bge.n	8004942 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800492a:	4b09      	ldr	r3, [pc, #36]	@ (8004950 <HAL_FLASH_Unlock+0x38>)
 800492c:	4a09      	ldr	r2, [pc, #36]	@ (8004954 <HAL_FLASH_Unlock+0x3c>)
 800492e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004930:	4b07      	ldr	r3, [pc, #28]	@ (8004950 <HAL_FLASH_Unlock+0x38>)
 8004932:	4a09      	ldr	r2, [pc, #36]	@ (8004958 <HAL_FLASH_Unlock+0x40>)
 8004934:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004936:	4b06      	ldr	r3, [pc, #24]	@ (8004950 <HAL_FLASH_Unlock+0x38>)
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	da01      	bge.n	8004942 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004942:	79fb      	ldrb	r3, [r7, #7]
}
 8004944:	4618      	mov	r0, r3
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	40023c00 	.word	0x40023c00
 8004954:	45670123 	.word	0x45670123
 8004958:	cdef89ab 	.word	0xcdef89ab

0800495c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004960:	4b05      	ldr	r3, [pc, #20]	@ (8004978 <HAL_FLASH_Lock+0x1c>)
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	4a04      	ldr	r2, [pc, #16]	@ (8004978 <HAL_FLASH_Lock+0x1c>)
 8004966:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800496a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	40023c00 	.word	0x40023c00

0800497c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004988:	4b1a      	ldr	r3, [pc, #104]	@ (80049f4 <FLASH_WaitForLastOperation+0x78>)
 800498a:	2200      	movs	r2, #0
 800498c:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800498e:	f7ff fd9b 	bl	80044c8 <HAL_GetTick>
 8004992:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8004994:	e010      	b.n	80049b8 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499c:	d00c      	beq.n	80049b8 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d007      	beq.n	80049b4 <FLASH_WaitForLastOperation+0x38>
 80049a4:	f7ff fd90 	bl	80044c8 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d201      	bcs.n	80049b8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e019      	b.n	80049ec <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80049b8:	4b0f      	ldr	r3, [pc, #60]	@ (80049f8 <FLASH_WaitForLastOperation+0x7c>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1e8      	bne.n	8004996 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80049c4:	4b0c      	ldr	r3, [pc, #48]	@ (80049f8 <FLASH_WaitForLastOperation+0x7c>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80049d0:	4b09      	ldr	r3, [pc, #36]	@ (80049f8 <FLASH_WaitForLastOperation+0x7c>)
 80049d2:	2201      	movs	r2, #1
 80049d4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80049d6:	4b08      	ldr	r3, [pc, #32]	@ (80049f8 <FLASH_WaitForLastOperation+0x7c>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80049e2:	f000 f8a5 	bl	8004b30 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0

}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	200118f0 	.word	0x200118f0
 80049f8:	40023c00 	.word	0x40023c00

080049fc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004a08:	4b14      	ldr	r3, [pc, #80]	@ (8004a5c <FLASH_Program_DoubleWord+0x60>)
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	4a13      	ldr	r2, [pc, #76]	@ (8004a5c <FLASH_Program_DoubleWord+0x60>)
 8004a0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004a14:	4b11      	ldr	r3, [pc, #68]	@ (8004a5c <FLASH_Program_DoubleWord+0x60>)
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	4a10      	ldr	r2, [pc, #64]	@ (8004a5c <FLASH_Program_DoubleWord+0x60>)
 8004a1a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004a1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004a20:	4b0e      	ldr	r3, [pc, #56]	@ (8004a5c <FLASH_Program_DoubleWord+0x60>)
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	4a0d      	ldr	r2, [pc, #52]	@ (8004a5c <FLASH_Program_DoubleWord+0x60>)
 8004a26:	f043 0301 	orr.w	r3, r3, #1
 8004a2a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004a32:	f3bf 8f6f 	isb	sy
}
 8004a36:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8004a38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	000a      	movs	r2, r1
 8004a46:	2300      	movs	r3, #0
 8004a48:	68f9      	ldr	r1, [r7, #12]
 8004a4a:	3104      	adds	r1, #4
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	600b      	str	r3, [r1, #0]
}
 8004a50:	bf00      	nop
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	40023c00 	.word	0x40023c00

08004a60 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa0 <FLASH_Program_Word+0x40>)
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8004aa0 <FLASH_Program_Word+0x40>)
 8004a70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a74:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004a76:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa0 <FLASH_Program_Word+0x40>)
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	4a09      	ldr	r2, [pc, #36]	@ (8004aa0 <FLASH_Program_Word+0x40>)
 8004a7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a80:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004a82:	4b07      	ldr	r3, [pc, #28]	@ (8004aa0 <FLASH_Program_Word+0x40>)
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	4a06      	ldr	r2, [pc, #24]	@ (8004aa0 <FLASH_Program_Word+0x40>)
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	601a      	str	r2, [r3, #0]
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	40023c00 	.word	0x40023c00

08004aa4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae8 <FLASH_Program_HalfWord+0x44>)
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	4a0c      	ldr	r2, [pc, #48]	@ (8004ae8 <FLASH_Program_HalfWord+0x44>)
 8004ab6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004abc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae8 <FLASH_Program_HalfWord+0x44>)
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	4a09      	ldr	r2, [pc, #36]	@ (8004ae8 <FLASH_Program_HalfWord+0x44>)
 8004ac2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ac6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004ac8:	4b07      	ldr	r3, [pc, #28]	@ (8004ae8 <FLASH_Program_HalfWord+0x44>)
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	4a06      	ldr	r2, [pc, #24]	@ (8004ae8 <FLASH_Program_HalfWord+0x44>)
 8004ace:	f043 0301 	orr.w	r3, r3, #1
 8004ad2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	887a      	ldrh	r2, [r7, #2]
 8004ad8:	801a      	strh	r2, [r3, #0]
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40023c00 	.word	0x40023c00

08004aec <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	460b      	mov	r3, r1
 8004af6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004af8:	4b0c      	ldr	r3, [pc, #48]	@ (8004b2c <FLASH_Program_Byte+0x40>)
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	4a0b      	ldr	r2, [pc, #44]	@ (8004b2c <FLASH_Program_Byte+0x40>)
 8004afe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004b04:	4b09      	ldr	r3, [pc, #36]	@ (8004b2c <FLASH_Program_Byte+0x40>)
 8004b06:	4a09      	ldr	r2, [pc, #36]	@ (8004b2c <FLASH_Program_Byte+0x40>)
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004b0c:	4b07      	ldr	r3, [pc, #28]	@ (8004b2c <FLASH_Program_Byte+0x40>)
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	4a06      	ldr	r2, [pc, #24]	@ (8004b2c <FLASH_Program_Byte+0x40>)
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	78fa      	ldrb	r2, [r7, #3]
 8004b1c:	701a      	strb	r2, [r3, #0]
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40023c00 	.word	0x40023c00

08004b30 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004b34:	4b2f      	ldr	r3, [pc, #188]	@ (8004bf4 <FLASH_SetErrorCode+0xc4>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d008      	beq.n	8004b52 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004b40:	4b2d      	ldr	r3, [pc, #180]	@ (8004bf8 <FLASH_SetErrorCode+0xc8>)
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	f043 0310 	orr.w	r3, r3, #16
 8004b48:	4a2b      	ldr	r2, [pc, #172]	@ (8004bf8 <FLASH_SetErrorCode+0xc8>)
 8004b4a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004b4c:	4b29      	ldr	r3, [pc, #164]	@ (8004bf4 <FLASH_SetErrorCode+0xc4>)
 8004b4e:	2210      	movs	r2, #16
 8004b50:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004b52:	4b28      	ldr	r3, [pc, #160]	@ (8004bf4 <FLASH_SetErrorCode+0xc4>)
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d008      	beq.n	8004b70 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004b5e:	4b26      	ldr	r3, [pc, #152]	@ (8004bf8 <FLASH_SetErrorCode+0xc8>)
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f043 0308 	orr.w	r3, r3, #8
 8004b66:	4a24      	ldr	r2, [pc, #144]	@ (8004bf8 <FLASH_SetErrorCode+0xc8>)
 8004b68:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004b6a:	4b22      	ldr	r3, [pc, #136]	@ (8004bf4 <FLASH_SetErrorCode+0xc4>)
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004b70:	4b20      	ldr	r3, [pc, #128]	@ (8004bf4 <FLASH_SetErrorCode+0xc4>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf8 <FLASH_SetErrorCode+0xc8>)
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	f043 0304 	orr.w	r3, r3, #4
 8004b84:	4a1c      	ldr	r2, [pc, #112]	@ (8004bf8 <FLASH_SetErrorCode+0xc8>)
 8004b86:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004b88:	4b1a      	ldr	r3, [pc, #104]	@ (8004bf4 <FLASH_SetErrorCode+0xc4>)
 8004b8a:	2240      	movs	r2, #64	@ 0x40
 8004b8c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004b8e:	4b19      	ldr	r3, [pc, #100]	@ (8004bf4 <FLASH_SetErrorCode+0xc4>)
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d008      	beq.n	8004bac <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004b9a:	4b17      	ldr	r3, [pc, #92]	@ (8004bf8 <FLASH_SetErrorCode+0xc8>)
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	f043 0302 	orr.w	r3, r3, #2
 8004ba2:	4a15      	ldr	r2, [pc, #84]	@ (8004bf8 <FLASH_SetErrorCode+0xc8>)
 8004ba4:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004ba6:	4b13      	ldr	r3, [pc, #76]	@ (8004bf4 <FLASH_SetErrorCode+0xc4>)
 8004ba8:	2280      	movs	r2, #128	@ 0x80
 8004baa:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004bac:	4b11      	ldr	r3, [pc, #68]	@ (8004bf4 <FLASH_SetErrorCode+0xc4>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d009      	beq.n	8004bcc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8004bf8 <FLASH_SetErrorCode+0xc8>)
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	f043 0301 	orr.w	r3, r3, #1
 8004bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8004bf8 <FLASH_SetErrorCode+0xc8>)
 8004bc2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf4 <FLASH_SetErrorCode+0xc4>)
 8004bc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004bca:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004bcc:	4b09      	ldr	r3, [pc, #36]	@ (8004bf4 <FLASH_SetErrorCode+0xc4>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d008      	beq.n	8004bea <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004bd8:	4b07      	ldr	r3, [pc, #28]	@ (8004bf8 <FLASH_SetErrorCode+0xc8>)
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	f043 0320 	orr.w	r3, r3, #32
 8004be0:	4a05      	ldr	r2, [pc, #20]	@ (8004bf8 <FLASH_SetErrorCode+0xc8>)
 8004be2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004be4:	4b03      	ldr	r3, [pc, #12]	@ (8004bf4 <FLASH_SetErrorCode+0xc4>)
 8004be6:	2202      	movs	r2, #2
 8004be8:	60da      	str	r2, [r3, #12]
  }
}
 8004bea:	bf00      	nop
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	40023c00 	.word	0x40023c00
 8004bf8:	200118f0 	.word	0x200118f0

08004bfc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d102      	bne.n	8004c18 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	e010      	b.n	8004c3a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d103      	bne.n	8004c26 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004c1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	e009      	b.n	8004c3a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004c26:	78fb      	ldrb	r3, [r7, #3]
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d103      	bne.n	8004c34 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004c2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	e002      	b.n	8004c3a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004c34:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004c38:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b0b      	cmp	r3, #11
 8004c3e:	d902      	bls.n	8004c46 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3304      	adds	r3, #4
 8004c44:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c46:	4b13      	ldr	r3, [pc, #76]	@ (8004c94 <FLASH_Erase_Sector+0x98>)
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	4a12      	ldr	r2, [pc, #72]	@ (8004c94 <FLASH_Erase_Sector+0x98>)
 8004c4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c50:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004c52:	4b10      	ldr	r3, [pc, #64]	@ (8004c94 <FLASH_Erase_Sector+0x98>)
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	490f      	ldr	r1, [pc, #60]	@ (8004c94 <FLASH_Erase_Sector+0x98>)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c94 <FLASH_Erase_Sector+0x98>)
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	4a0c      	ldr	r2, [pc, #48]	@ (8004c94 <FLASH_Erase_Sector+0x98>)
 8004c64:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004c68:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c94 <FLASH_Erase_Sector+0x98>)
 8004c6c:	691a      	ldr	r2, [r3, #16]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	4313      	orrs	r3, r2
 8004c74:	4a07      	ldr	r2, [pc, #28]	@ (8004c94 <FLASH_Erase_Sector+0x98>)
 8004c76:	f043 0302 	orr.w	r3, r3, #2
 8004c7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004c7c:	4b05      	ldr	r3, [pc, #20]	@ (8004c94 <FLASH_Erase_Sector+0x98>)
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	4a04      	ldr	r2, [pc, #16]	@ (8004c94 <FLASH_Erase_Sector+0x98>)
 8004c82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c86:	6113      	str	r3, [r2, #16]
}
 8004c88:	bf00      	nop
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	40023c00 	.word	0x40023c00

08004c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b089      	sub	sp, #36	@ 0x24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61fb      	str	r3, [r7, #28]
 8004cb2:	e177      	b.n	8004fa4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	f040 8166 	bne.w	8004f9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f003 0303 	and.w	r3, r3, #3
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d005      	beq.n	8004cea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d130      	bne.n	8004d4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	2203      	movs	r2, #3
 8004cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfa:	43db      	mvns	r3, r3
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d20:	2201      	movs	r2, #1
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	091b      	lsrs	r3, r3, #4
 8004d36:	f003 0201 	and.w	r2, r3, #1
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f003 0303 	and.w	r3, r3, #3
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d017      	beq.n	8004d88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	2203      	movs	r2, #3
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f003 0303 	and.w	r3, r3, #3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d123      	bne.n	8004ddc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	08da      	lsrs	r2, r3, #3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3208      	adds	r2, #8
 8004d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	220f      	movs	r2, #15
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	43db      	mvns	r3, r3
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4013      	ands	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	08da      	lsrs	r2, r3, #3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	3208      	adds	r2, #8
 8004dd6:	69b9      	ldr	r1, [r7, #24]
 8004dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	2203      	movs	r2, #3
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	43db      	mvns	r3, r3
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	4013      	ands	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f003 0203 	and.w	r2, r3, #3
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 80c0 	beq.w	8004f9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	4b66      	ldr	r3, [pc, #408]	@ (8004fbc <HAL_GPIO_Init+0x324>)
 8004e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e26:	4a65      	ldr	r2, [pc, #404]	@ (8004fbc <HAL_GPIO_Init+0x324>)
 8004e28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e2e:	4b63      	ldr	r3, [pc, #396]	@ (8004fbc <HAL_GPIO_Init+0x324>)
 8004e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e3a:	4a61      	ldr	r2, [pc, #388]	@ (8004fc0 <HAL_GPIO_Init+0x328>)
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	089b      	lsrs	r3, r3, #2
 8004e40:	3302      	adds	r3, #2
 8004e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	f003 0303 	and.w	r3, r3, #3
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	220f      	movs	r2, #15
 8004e52:	fa02 f303 	lsl.w	r3, r2, r3
 8004e56:	43db      	mvns	r3, r3
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a58      	ldr	r2, [pc, #352]	@ (8004fc4 <HAL_GPIO_Init+0x32c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d037      	beq.n	8004ed6 <HAL_GPIO_Init+0x23e>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a57      	ldr	r2, [pc, #348]	@ (8004fc8 <HAL_GPIO_Init+0x330>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d031      	beq.n	8004ed2 <HAL_GPIO_Init+0x23a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a56      	ldr	r2, [pc, #344]	@ (8004fcc <HAL_GPIO_Init+0x334>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d02b      	beq.n	8004ece <HAL_GPIO_Init+0x236>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a55      	ldr	r2, [pc, #340]	@ (8004fd0 <HAL_GPIO_Init+0x338>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d025      	beq.n	8004eca <HAL_GPIO_Init+0x232>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a54      	ldr	r2, [pc, #336]	@ (8004fd4 <HAL_GPIO_Init+0x33c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d01f      	beq.n	8004ec6 <HAL_GPIO_Init+0x22e>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a53      	ldr	r2, [pc, #332]	@ (8004fd8 <HAL_GPIO_Init+0x340>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d019      	beq.n	8004ec2 <HAL_GPIO_Init+0x22a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a52      	ldr	r2, [pc, #328]	@ (8004fdc <HAL_GPIO_Init+0x344>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d013      	beq.n	8004ebe <HAL_GPIO_Init+0x226>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a51      	ldr	r2, [pc, #324]	@ (8004fe0 <HAL_GPIO_Init+0x348>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d00d      	beq.n	8004eba <HAL_GPIO_Init+0x222>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a50      	ldr	r2, [pc, #320]	@ (8004fe4 <HAL_GPIO_Init+0x34c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d007      	beq.n	8004eb6 <HAL_GPIO_Init+0x21e>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a4f      	ldr	r2, [pc, #316]	@ (8004fe8 <HAL_GPIO_Init+0x350>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d101      	bne.n	8004eb2 <HAL_GPIO_Init+0x21a>
 8004eae:	2309      	movs	r3, #9
 8004eb0:	e012      	b.n	8004ed8 <HAL_GPIO_Init+0x240>
 8004eb2:	230a      	movs	r3, #10
 8004eb4:	e010      	b.n	8004ed8 <HAL_GPIO_Init+0x240>
 8004eb6:	2308      	movs	r3, #8
 8004eb8:	e00e      	b.n	8004ed8 <HAL_GPIO_Init+0x240>
 8004eba:	2307      	movs	r3, #7
 8004ebc:	e00c      	b.n	8004ed8 <HAL_GPIO_Init+0x240>
 8004ebe:	2306      	movs	r3, #6
 8004ec0:	e00a      	b.n	8004ed8 <HAL_GPIO_Init+0x240>
 8004ec2:	2305      	movs	r3, #5
 8004ec4:	e008      	b.n	8004ed8 <HAL_GPIO_Init+0x240>
 8004ec6:	2304      	movs	r3, #4
 8004ec8:	e006      	b.n	8004ed8 <HAL_GPIO_Init+0x240>
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e004      	b.n	8004ed8 <HAL_GPIO_Init+0x240>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e002      	b.n	8004ed8 <HAL_GPIO_Init+0x240>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <HAL_GPIO_Init+0x240>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	f002 0203 	and.w	r2, r2, #3
 8004ede:	0092      	lsls	r2, r2, #2
 8004ee0:	4093      	lsls	r3, r2
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ee8:	4935      	ldr	r1, [pc, #212]	@ (8004fc0 <HAL_GPIO_Init+0x328>)
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	089b      	lsrs	r3, r3, #2
 8004eee:	3302      	adds	r3, #2
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ef6:	4b3d      	ldr	r3, [pc, #244]	@ (8004fec <HAL_GPIO_Init+0x354>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	43db      	mvns	r3, r3
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4013      	ands	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f1a:	4a34      	ldr	r2, [pc, #208]	@ (8004fec <HAL_GPIO_Init+0x354>)
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f20:	4b32      	ldr	r3, [pc, #200]	@ (8004fec <HAL_GPIO_Init+0x354>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f44:	4a29      	ldr	r2, [pc, #164]	@ (8004fec <HAL_GPIO_Init+0x354>)
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f4a:	4b28      	ldr	r3, [pc, #160]	@ (8004fec <HAL_GPIO_Init+0x354>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	43db      	mvns	r3, r3
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	4013      	ands	r3, r2
 8004f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f6e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fec <HAL_GPIO_Init+0x354>)
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f74:	4b1d      	ldr	r3, [pc, #116]	@ (8004fec <HAL_GPIO_Init+0x354>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	43db      	mvns	r3, r3
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	4013      	ands	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f98:	4a14      	ldr	r2, [pc, #80]	@ (8004fec <HAL_GPIO_Init+0x354>)
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	61fb      	str	r3, [r7, #28]
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	2b0f      	cmp	r3, #15
 8004fa8:	f67f ae84 	bls.w	8004cb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fac:	bf00      	nop
 8004fae:	bf00      	nop
 8004fb0:	3724      	adds	r7, #36	@ 0x24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	40013800 	.word	0x40013800
 8004fc4:	40020000 	.word	0x40020000
 8004fc8:	40020400 	.word	0x40020400
 8004fcc:	40020800 	.word	0x40020800
 8004fd0:	40020c00 	.word	0x40020c00
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	40021400 	.word	0x40021400
 8004fdc:	40021800 	.word	0x40021800
 8004fe0:	40021c00 	.word	0x40021c00
 8004fe4:	40022000 	.word	0x40022000
 8004fe8:	40022400 	.word	0x40022400
 8004fec:	40013c00 	.word	0x40013c00

08004ff0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	887b      	ldrh	r3, [r7, #2]
 8005002:	4013      	ands	r3, r2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005008:	2301      	movs	r3, #1
 800500a:	73fb      	strb	r3, [r7, #15]
 800500c:	e001      	b.n	8005012 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800500e:	2300      	movs	r3, #0
 8005010:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005012:	7bfb      	ldrb	r3, [r7, #15]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	807b      	strh	r3, [r7, #2]
 800502c:	4613      	mov	r3, r2
 800502e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005030:	787b      	ldrb	r3, [r7, #1]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005036:	887a      	ldrh	r2, [r7, #2]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800503c:	e003      	b.n	8005046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800503e:	887b      	ldrh	r3, [r7, #2]
 8005040:	041a      	lsls	r2, r3, #16
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	619a      	str	r2, [r3, #24]
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
	...

08005054 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	4603      	mov	r3, r0
 800505c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800505e:	4b08      	ldr	r3, [pc, #32]	@ (8005080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005060:	695a      	ldr	r2, [r3, #20]
 8005062:	88fb      	ldrh	r3, [r7, #6]
 8005064:	4013      	ands	r3, r2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d006      	beq.n	8005078 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800506a:	4a05      	ldr	r2, [pc, #20]	@ (8005080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800506c:	88fb      	ldrh	r3, [r7, #6]
 800506e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005070:	88fb      	ldrh	r3, [r7, #6]
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe feb8 	bl	8003de8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005078:	bf00      	nop
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40013c00 	.word	0x40013c00

08005084 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af02      	add	r7, sp, #8
 800508a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e059      	b.n	800514a <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d106      	bne.n	80050b6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f009 fbe9 	bl	800e888 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2203      	movs	r2, #3
 80050ba:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050c4:	d102      	bne.n	80050cc <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f005 fcaa 	bl	800aa2a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	7c1a      	ldrb	r2, [r3, #16]
 80050de:	f88d 2000 	strb.w	r2, [sp]
 80050e2:	3304      	adds	r3, #4
 80050e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050e6:	f005 fc2b 	bl	800a940 <USB_CoreInit>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d005      	beq.n	80050fc <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e026      	b.n	800514a <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2101      	movs	r1, #1
 8005102:	4618      	mov	r0, r3
 8005104:	f005 fca2 	bl	800aa4c <USB_SetCurrentMode>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2202      	movs	r2, #2
 8005112:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e017      	b.n	800514a <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	7c1a      	ldrb	r2, [r3, #16]
 8005122:	f88d 2000 	strb.w	r2, [sp]
 8005126:	3304      	adds	r3, #4
 8005128:	cb0e      	ldmia	r3, {r1, r2, r3}
 800512a:	f005 fe45 	bl	800adb8 <USB_HostInit>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d005      	beq.n	8005140 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e004      	b.n	800514a <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005152:	b590      	push	{r4, r7, lr}
 8005154:	b08b      	sub	sp, #44	@ 0x2c
 8005156:	af04      	add	r7, sp, #16
 8005158:	6078      	str	r0, [r7, #4]
 800515a:	4608      	mov	r0, r1
 800515c:	4611      	mov	r1, r2
 800515e:	461a      	mov	r2, r3
 8005160:	4603      	mov	r3, r0
 8005162:	70fb      	strb	r3, [r7, #3]
 8005164:	460b      	mov	r3, r1
 8005166:	70bb      	strb	r3, [r7, #2]
 8005168:	4613      	mov	r3, r2
 800516a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800516c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800516e:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005176:	2b01      	cmp	r3, #1
 8005178:	d101      	bne.n	800517e <HAL_HCD_HC_Init+0x2c>
 800517a:	2302      	movs	r3, #2
 800517c:	e09d      	b.n	80052ba <HAL_HCD_HC_Init+0x168>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8005186:	78fa      	ldrb	r2, [r7, #3]
 8005188:	6879      	ldr	r1, [r7, #4]
 800518a:	4613      	mov	r3, r2
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	1a9b      	subs	r3, r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	440b      	add	r3, r1
 8005194:	3319      	adds	r3, #25
 8005196:	2200      	movs	r2, #0
 8005198:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800519a:	78fa      	ldrb	r2, [r7, #3]
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	1a9b      	subs	r3, r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	3314      	adds	r3, #20
 80051aa:	787a      	ldrb	r2, [r7, #1]
 80051ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80051ae:	78fa      	ldrb	r2, [r7, #3]
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	4613      	mov	r3, r2
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	1a9b      	subs	r3, r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	440b      	add	r3, r1
 80051bc:	3315      	adds	r3, #21
 80051be:	78fa      	ldrb	r2, [r7, #3]
 80051c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80051c2:	78fa      	ldrb	r2, [r7, #3]
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	1a9b      	subs	r3, r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	440b      	add	r3, r1
 80051d0:	3326      	adds	r3, #38	@ 0x26
 80051d2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80051d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80051d8:	78fa      	ldrb	r2, [r7, #3]
 80051da:	78bb      	ldrb	r3, [r7, #2]
 80051dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051e0:	b2d8      	uxtb	r0, r3
 80051e2:	6879      	ldr	r1, [r7, #4]
 80051e4:	4613      	mov	r3, r2
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	1a9b      	subs	r3, r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	440b      	add	r3, r1
 80051ee:	3316      	adds	r3, #22
 80051f0:	4602      	mov	r2, r0
 80051f2:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	4619      	mov	r1, r3
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 fbc7 	bl	800598c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80051fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005202:	2b00      	cmp	r3, #0
 8005204:	da0a      	bge.n	800521c <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005206:	78fa      	ldrb	r2, [r7, #3]
 8005208:	6879      	ldr	r1, [r7, #4]
 800520a:	4613      	mov	r3, r2
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	1a9b      	subs	r3, r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	440b      	add	r3, r1
 8005214:	3317      	adds	r3, #23
 8005216:	2201      	movs	r2, #1
 8005218:	701a      	strb	r2, [r3, #0]
 800521a:	e009      	b.n	8005230 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800521c:	78fa      	ldrb	r2, [r7, #3]
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	4613      	mov	r3, r2
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	1a9b      	subs	r3, r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	440b      	add	r3, r1
 800522a:	3317      	adds	r3, #23
 800522c:	2200      	movs	r2, #0
 800522e:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4618      	mov	r0, r3
 8005236:	f005 ff23 	bl	800b080 <USB_GetHostSpeed>
 800523a:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800523c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005240:	2b01      	cmp	r3, #1
 8005242:	d10b      	bne.n	800525c <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8005244:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005248:	2b01      	cmp	r3, #1
 800524a:	d107      	bne.n	800525c <HAL_HCD_HC_Init+0x10a>
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d104      	bne.n	800525c <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2bbc      	cmp	r3, #188	@ 0xbc
 8005256:	d901      	bls.n	800525c <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8005258:	23bc      	movs	r3, #188	@ 0xbc
 800525a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800525c:	78fa      	ldrb	r2, [r7, #3]
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	4613      	mov	r3, r2
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	1a9b      	subs	r3, r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	440b      	add	r3, r1
 800526a:	3318      	adds	r3, #24
 800526c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005270:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8005272:	78fa      	ldrb	r2, [r7, #3]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	b298      	uxth	r0, r3
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	4613      	mov	r3, r2
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	1a9b      	subs	r3, r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	440b      	add	r3, r1
 8005284:	3328      	adds	r3, #40	@ 0x28
 8005286:	4602      	mov	r2, r0
 8005288:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6818      	ldr	r0, [r3, #0]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	b29b      	uxth	r3, r3
 8005292:	787c      	ldrb	r4, [r7, #1]
 8005294:	78ba      	ldrb	r2, [r7, #2]
 8005296:	78f9      	ldrb	r1, [r7, #3]
 8005298:	9302      	str	r3, [sp, #8]
 800529a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800529e:	9301      	str	r3, [sp, #4]
 80052a0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	4623      	mov	r3, r4
 80052a8:	f005 ff12 	bl	800b0d0 <USB_HC_Init>
 80052ac:	4603      	mov	r3, r0
 80052ae:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd90      	pop	{r4, r7, pc}

080052c2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	460b      	mov	r3, r1
 80052cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d101      	bne.n	80052e0 <HAL_HCD_HC_Halt+0x1e>
 80052dc:	2302      	movs	r3, #2
 80052de:	e00f      	b.n	8005300 <HAL_HCD_HC_Halt+0x3e>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	78fa      	ldrb	r2, [r7, #3]
 80052ee:	4611      	mov	r1, r2
 80052f0:	4618      	mov	r0, r3
 80052f2:	f006 faa4 	bl	800b83e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	4608      	mov	r0, r1
 8005312:	4611      	mov	r1, r2
 8005314:	461a      	mov	r2, r3
 8005316:	4603      	mov	r3, r0
 8005318:	70fb      	strb	r3, [r7, #3]
 800531a:	460b      	mov	r3, r1
 800531c:	70bb      	strb	r3, [r7, #2]
 800531e:	4613      	mov	r3, r2
 8005320:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005322:	78fa      	ldrb	r2, [r7, #3]
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	1a9b      	subs	r3, r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	440b      	add	r3, r1
 8005330:	3317      	adds	r3, #23
 8005332:	78ba      	ldrb	r2, [r7, #2]
 8005334:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005336:	78fa      	ldrb	r2, [r7, #3]
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	4613      	mov	r3, r2
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	1a9b      	subs	r3, r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	440b      	add	r3, r1
 8005344:	3326      	adds	r3, #38	@ 0x26
 8005346:	787a      	ldrb	r2, [r7, #1]
 8005348:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800534a:	7c3b      	ldrb	r3, [r7, #16]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d114      	bne.n	800537a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005350:	78fa      	ldrb	r2, [r7, #3]
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	4613      	mov	r3, r2
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	1a9b      	subs	r3, r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	332a      	adds	r3, #42	@ 0x2a
 8005360:	2203      	movs	r2, #3
 8005362:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005364:	78fa      	ldrb	r2, [r7, #3]
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	4613      	mov	r3, r2
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	1a9b      	subs	r3, r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	440b      	add	r3, r1
 8005372:	3319      	adds	r3, #25
 8005374:	7f3a      	ldrb	r2, [r7, #28]
 8005376:	701a      	strb	r2, [r3, #0]
 8005378:	e009      	b.n	800538e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800537a:	78fa      	ldrb	r2, [r7, #3]
 800537c:	6879      	ldr	r1, [r7, #4]
 800537e:	4613      	mov	r3, r2
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	1a9b      	subs	r3, r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	440b      	add	r3, r1
 8005388:	332a      	adds	r3, #42	@ 0x2a
 800538a:	2202      	movs	r2, #2
 800538c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800538e:	787b      	ldrb	r3, [r7, #1]
 8005390:	2b03      	cmp	r3, #3
 8005392:	f200 8102 	bhi.w	800559a <HAL_HCD_HC_SubmitRequest+0x292>
 8005396:	a201      	add	r2, pc, #4	@ (adr r2, 800539c <HAL_HCD_HC_SubmitRequest+0x94>)
 8005398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539c:	080053ad 	.word	0x080053ad
 80053a0:	08005585 	.word	0x08005585
 80053a4:	08005471 	.word	0x08005471
 80053a8:	080054fb 	.word	0x080054fb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80053ac:	7c3b      	ldrb	r3, [r7, #16]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	f040 80f5 	bne.w	800559e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80053b4:	78bb      	ldrb	r3, [r7, #2]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d12d      	bne.n	8005416 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80053ba:	8b3b      	ldrh	r3, [r7, #24]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d109      	bne.n	80053d4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80053c0:	78fa      	ldrb	r2, [r7, #3]
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	4613      	mov	r3, r2
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	1a9b      	subs	r3, r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	440b      	add	r3, r1
 80053ce:	333d      	adds	r3, #61	@ 0x3d
 80053d0:	2201      	movs	r2, #1
 80053d2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80053d4:	78fa      	ldrb	r2, [r7, #3]
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	4613      	mov	r3, r2
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	1a9b      	subs	r3, r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	440b      	add	r3, r1
 80053e2:	333d      	adds	r3, #61	@ 0x3d
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10a      	bne.n	8005400 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80053ea:	78fa      	ldrb	r2, [r7, #3]
 80053ec:	6879      	ldr	r1, [r7, #4]
 80053ee:	4613      	mov	r3, r2
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	1a9b      	subs	r3, r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	440b      	add	r3, r1
 80053f8:	332a      	adds	r3, #42	@ 0x2a
 80053fa:	2200      	movs	r2, #0
 80053fc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80053fe:	e0ce      	b.n	800559e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005400:	78fa      	ldrb	r2, [r7, #3]
 8005402:	6879      	ldr	r1, [r7, #4]
 8005404:	4613      	mov	r3, r2
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	1a9b      	subs	r3, r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	440b      	add	r3, r1
 800540e:	332a      	adds	r3, #42	@ 0x2a
 8005410:	2202      	movs	r2, #2
 8005412:	701a      	strb	r2, [r3, #0]
      break;
 8005414:	e0c3      	b.n	800559e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8005416:	78fa      	ldrb	r2, [r7, #3]
 8005418:	6879      	ldr	r1, [r7, #4]
 800541a:	4613      	mov	r3, r2
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	440b      	add	r3, r1
 8005424:	331a      	adds	r3, #26
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	2b01      	cmp	r3, #1
 800542a:	f040 80b8 	bne.w	800559e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800542e:	78fa      	ldrb	r2, [r7, #3]
 8005430:	6879      	ldr	r1, [r7, #4]
 8005432:	4613      	mov	r3, r2
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	1a9b      	subs	r3, r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	440b      	add	r3, r1
 800543c:	333c      	adds	r3, #60	@ 0x3c
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10a      	bne.n	800545a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005444:	78fa      	ldrb	r2, [r7, #3]
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	4613      	mov	r3, r2
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	1a9b      	subs	r3, r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	332a      	adds	r3, #42	@ 0x2a
 8005454:	2200      	movs	r2, #0
 8005456:	701a      	strb	r2, [r3, #0]
      break;
 8005458:	e0a1      	b.n	800559e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800545a:	78fa      	ldrb	r2, [r7, #3]
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	4613      	mov	r3, r2
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	1a9b      	subs	r3, r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	440b      	add	r3, r1
 8005468:	332a      	adds	r3, #42	@ 0x2a
 800546a:	2202      	movs	r2, #2
 800546c:	701a      	strb	r2, [r3, #0]
      break;
 800546e:	e096      	b.n	800559e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005470:	78bb      	ldrb	r3, [r7, #2]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d120      	bne.n	80054b8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005476:	78fa      	ldrb	r2, [r7, #3]
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	4613      	mov	r3, r2
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	1a9b      	subs	r3, r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	440b      	add	r3, r1
 8005484:	333d      	adds	r3, #61	@ 0x3d
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10a      	bne.n	80054a2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800548c:	78fa      	ldrb	r2, [r7, #3]
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	4613      	mov	r3, r2
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	1a9b      	subs	r3, r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	440b      	add	r3, r1
 800549a:	332a      	adds	r3, #42	@ 0x2a
 800549c:	2200      	movs	r2, #0
 800549e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80054a0:	e07e      	b.n	80055a0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80054a2:	78fa      	ldrb	r2, [r7, #3]
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	4613      	mov	r3, r2
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	1a9b      	subs	r3, r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	440b      	add	r3, r1
 80054b0:	332a      	adds	r3, #42	@ 0x2a
 80054b2:	2202      	movs	r2, #2
 80054b4:	701a      	strb	r2, [r3, #0]
      break;
 80054b6:	e073      	b.n	80055a0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80054b8:	78fa      	ldrb	r2, [r7, #3]
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	4613      	mov	r3, r2
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	1a9b      	subs	r3, r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	440b      	add	r3, r1
 80054c6:	333c      	adds	r3, #60	@ 0x3c
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10a      	bne.n	80054e4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80054ce:	78fa      	ldrb	r2, [r7, #3]
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	4613      	mov	r3, r2
 80054d4:	011b      	lsls	r3, r3, #4
 80054d6:	1a9b      	subs	r3, r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	440b      	add	r3, r1
 80054dc:	332a      	adds	r3, #42	@ 0x2a
 80054de:	2200      	movs	r2, #0
 80054e0:	701a      	strb	r2, [r3, #0]
      break;
 80054e2:	e05d      	b.n	80055a0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80054e4:	78fa      	ldrb	r2, [r7, #3]
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	4613      	mov	r3, r2
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	1a9b      	subs	r3, r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	440b      	add	r3, r1
 80054f2:	332a      	adds	r3, #42	@ 0x2a
 80054f4:	2202      	movs	r2, #2
 80054f6:	701a      	strb	r2, [r3, #0]
      break;
 80054f8:	e052      	b.n	80055a0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80054fa:	78bb      	ldrb	r3, [r7, #2]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d120      	bne.n	8005542 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005500:	78fa      	ldrb	r2, [r7, #3]
 8005502:	6879      	ldr	r1, [r7, #4]
 8005504:	4613      	mov	r3, r2
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	1a9b      	subs	r3, r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	440b      	add	r3, r1
 800550e:	333d      	adds	r3, #61	@ 0x3d
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10a      	bne.n	800552c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005516:	78fa      	ldrb	r2, [r7, #3]
 8005518:	6879      	ldr	r1, [r7, #4]
 800551a:	4613      	mov	r3, r2
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	1a9b      	subs	r3, r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	440b      	add	r3, r1
 8005524:	332a      	adds	r3, #42	@ 0x2a
 8005526:	2200      	movs	r2, #0
 8005528:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800552a:	e039      	b.n	80055a0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800552c:	78fa      	ldrb	r2, [r7, #3]
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	4613      	mov	r3, r2
 8005532:	011b      	lsls	r3, r3, #4
 8005534:	1a9b      	subs	r3, r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	440b      	add	r3, r1
 800553a:	332a      	adds	r3, #42	@ 0x2a
 800553c:	2202      	movs	r2, #2
 800553e:	701a      	strb	r2, [r3, #0]
      break;
 8005540:	e02e      	b.n	80055a0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005542:	78fa      	ldrb	r2, [r7, #3]
 8005544:	6879      	ldr	r1, [r7, #4]
 8005546:	4613      	mov	r3, r2
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	1a9b      	subs	r3, r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	440b      	add	r3, r1
 8005550:	333c      	adds	r3, #60	@ 0x3c
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10a      	bne.n	800556e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005558:	78fa      	ldrb	r2, [r7, #3]
 800555a:	6879      	ldr	r1, [r7, #4]
 800555c:	4613      	mov	r3, r2
 800555e:	011b      	lsls	r3, r3, #4
 8005560:	1a9b      	subs	r3, r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	440b      	add	r3, r1
 8005566:	332a      	adds	r3, #42	@ 0x2a
 8005568:	2200      	movs	r2, #0
 800556a:	701a      	strb	r2, [r3, #0]
      break;
 800556c:	e018      	b.n	80055a0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800556e:	78fa      	ldrb	r2, [r7, #3]
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	4613      	mov	r3, r2
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	1a9b      	subs	r3, r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	440b      	add	r3, r1
 800557c:	332a      	adds	r3, #42	@ 0x2a
 800557e:	2202      	movs	r2, #2
 8005580:	701a      	strb	r2, [r3, #0]
      break;
 8005582:	e00d      	b.n	80055a0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005584:	78fa      	ldrb	r2, [r7, #3]
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	4613      	mov	r3, r2
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	440b      	add	r3, r1
 8005592:	332a      	adds	r3, #42	@ 0x2a
 8005594:	2200      	movs	r2, #0
 8005596:	701a      	strb	r2, [r3, #0]
      break;
 8005598:	e002      	b.n	80055a0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800559a:	bf00      	nop
 800559c:	e000      	b.n	80055a0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800559e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80055a0:	78fa      	ldrb	r2, [r7, #3]
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	4613      	mov	r3, r2
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	1a9b      	subs	r3, r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	332c      	adds	r3, #44	@ 0x2c
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80055b4:	78fa      	ldrb	r2, [r7, #3]
 80055b6:	8b39      	ldrh	r1, [r7, #24]
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	4613      	mov	r3, r2
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	1a9b      	subs	r3, r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4403      	add	r3, r0
 80055c4:	3334      	adds	r3, #52	@ 0x34
 80055c6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80055c8:	78fa      	ldrb	r2, [r7, #3]
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	4613      	mov	r3, r2
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	1a9b      	subs	r3, r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	440b      	add	r3, r1
 80055d6:	334c      	adds	r3, #76	@ 0x4c
 80055d8:	2200      	movs	r2, #0
 80055da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80055dc:	78fa      	ldrb	r2, [r7, #3]
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	4613      	mov	r3, r2
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	440b      	add	r3, r1
 80055ea:	3338      	adds	r3, #56	@ 0x38
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80055f0:	78fa      	ldrb	r2, [r7, #3]
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	4613      	mov	r3, r2
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	1a9b      	subs	r3, r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	440b      	add	r3, r1
 80055fe:	3315      	adds	r3, #21
 8005600:	78fa      	ldrb	r2, [r7, #3]
 8005602:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005604:	78fa      	ldrb	r2, [r7, #3]
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	4613      	mov	r3, r2
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	1a9b      	subs	r3, r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	440b      	add	r3, r1
 8005612:	334d      	adds	r3, #77	@ 0x4d
 8005614:	2200      	movs	r2, #0
 8005616:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6818      	ldr	r0, [r3, #0]
 800561c:	78fa      	ldrb	r2, [r7, #3]
 800561e:	4613      	mov	r3, r2
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	1a9b      	subs	r3, r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	3310      	adds	r3, #16
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	4413      	add	r3, r2
 800562c:	1d19      	adds	r1, r3, #4
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	799b      	ldrb	r3, [r3, #6]
 8005632:	461a      	mov	r2, r3
 8005634:	f005 fe78 	bl	800b328 <USB_HC_StartXfer>
 8005638:	4603      	mov	r3, r0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop

08005644 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4618      	mov	r0, r3
 800565c:	f005 fb6c 	bl	800ad38 <USB_GetMode>
 8005660:	4603      	mov	r3, r0
 8005662:	2b01      	cmp	r3, #1
 8005664:	f040 80fb 	bne.w	800585e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4618      	mov	r0, r3
 800566e:	f005 fb2f 	bl	800acd0 <USB_ReadInterrupts>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 80f1 	beq.w	800585c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f005 fb26 	bl	800acd0 <USB_ReadInterrupts>
 8005684:	4603      	mov	r3, r0
 8005686:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800568a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800568e:	d104      	bne.n	800569a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005698:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4618      	mov	r0, r3
 80056a0:	f005 fb16 	bl	800acd0 <USB_ReadInterrupts>
 80056a4:	4603      	mov	r3, r0
 80056a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056ae:	d104      	bne.n	80056ba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80056b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4618      	mov	r0, r3
 80056c0:	f005 fb06 	bl	800acd0 <USB_ReadInterrupts>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80056ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056ce:	d104      	bne.n	80056da <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80056d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f005 faf6 	bl	800acd0 <USB_ReadInterrupts>
 80056e4:	4603      	mov	r3, r0
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d103      	bne.n	80056f6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2202      	movs	r2, #2
 80056f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f005 fae8 	bl	800acd0 <USB_ReadInterrupts>
 8005700:	4603      	mov	r3, r0
 8005702:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005706:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800570a:	d120      	bne.n	800574e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005714:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d113      	bne.n	800574e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005726:	2110      	movs	r1, #16
 8005728:	6938      	ldr	r0, [r7, #16]
 800572a:	f005 f9db 	bl	800aae4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800572e:	6938      	ldr	r0, [r7, #16]
 8005730:	f005 fa0a 	bl	800ab48 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	7a5b      	ldrb	r3, [r3, #9]
 8005738:	2b02      	cmp	r3, #2
 800573a:	d105      	bne.n	8005748 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2101      	movs	r1, #1
 8005742:	4618      	mov	r0, r3
 8005744:	f005 fbfc 	bl	800af40 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f009 f90d 	bl	800e968 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f005 fabc 	bl	800acd0 <USB_ReadInterrupts>
 8005758:	4603      	mov	r3, r0
 800575a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800575e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005762:	d102      	bne.n	800576a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f001 fd4d 	bl	8007204 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f005 faae 	bl	800acd0 <USB_ReadInterrupts>
 8005774:	4603      	mov	r3, r0
 8005776:	f003 0308 	and.w	r3, r3, #8
 800577a:	2b08      	cmp	r3, #8
 800577c:	d106      	bne.n	800578c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f009 f8d6 	bl	800e930 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2208      	movs	r2, #8
 800578a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4618      	mov	r0, r3
 8005792:	f005 fa9d 	bl	800acd0 <USB_ReadInterrupts>
 8005796:	4603      	mov	r3, r0
 8005798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800579c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057a0:	d139      	bne.n	8005816 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f006 f838 	bl	800b81c <USB_HC_ReadInterrupt>
 80057ac:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80057ae:	2300      	movs	r3, #0
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	e025      	b.n	8005800 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f003 030f 	and.w	r3, r3, #15
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	fa22 f303 	lsr.w	r3, r2, r3
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d018      	beq.n	80057fa <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057de:	d106      	bne.n	80057ee <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	4619      	mov	r1, r3
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f905 	bl	80059f6 <HCD_HC_IN_IRQHandler>
 80057ec:	e005      	b.n	80057fa <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	4619      	mov	r1, r3
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 ff67 	bl	80066c8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	3301      	adds	r3, #1
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	795b      	ldrb	r3, [r3, #5]
 8005804:	461a      	mov	r2, r3
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	4293      	cmp	r3, r2
 800580a:	d3d3      	bcc.n	80057b4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005814:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4618      	mov	r0, r3
 800581c:	f005 fa58 	bl	800acd0 <USB_ReadInterrupts>
 8005820:	4603      	mov	r3, r0
 8005822:	f003 0310 	and.w	r3, r3, #16
 8005826:	2b10      	cmp	r3, #16
 8005828:	d101      	bne.n	800582e <HAL_HCD_IRQHandler+0x1ea>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <HAL_HCD_IRQHandler+0x1ec>
 800582e:	2300      	movs	r3, #0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d014      	beq.n	800585e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699a      	ldr	r2, [r3, #24]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 0210 	bic.w	r2, r2, #16
 8005842:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f001 fbfe 	bl	8007046 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	699a      	ldr	r2, [r3, #24]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f042 0210 	orr.w	r2, r2, #16
 8005858:	619a      	str	r2, [r3, #24]
 800585a:	e000      	b.n	800585e <HAL_HCD_IRQHandler+0x21a>
      return;
 800585c:	bf00      	nop
    }
  }
}
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005872:	2b01      	cmp	r3, #1
 8005874:	d101      	bne.n	800587a <HAL_HCD_Start+0x16>
 8005876:	2302      	movs	r3, #2
 8005878:	e013      	b.n	80058a2 <HAL_HCD_Start+0x3e>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2101      	movs	r1, #1
 8005888:	4618      	mov	r0, r3
 800588a:	f005 fbc0 	bl	800b00e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f005 f8b8 	bl	800aa08 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b082      	sub	sp, #8
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_HCD_Stop+0x16>
 80058bc:	2302      	movs	r3, #2
 80058be:	e00d      	b.n	80058dc <HAL_HCD_Stop+0x32>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f006 f913 	bl	800baf8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f005 fb62 	bl	800afba <USB_ResetPort>
 80058f6:	4603      	mov	r3, r0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	460b      	mov	r3, r1
 800590a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800590c:	78fa      	ldrb	r2, [r7, #3]
 800590e:	6879      	ldr	r1, [r7, #4]
 8005910:	4613      	mov	r3, r2
 8005912:	011b      	lsls	r3, r3, #4
 8005914:	1a9b      	subs	r3, r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	440b      	add	r3, r1
 800591a:	334c      	adds	r3, #76	@ 0x4c
 800591c:	781b      	ldrb	r3, [r3, #0]
}
 800591e:	4618      	mov	r0, r3
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800592a:	b480      	push	{r7}
 800592c:	b083      	sub	sp, #12
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
 8005932:	460b      	mov	r3, r1
 8005934:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005936:	78fa      	ldrb	r2, [r7, #3]
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	4613      	mov	r3, r2
 800593c:	011b      	lsls	r3, r3, #4
 800593e:	1a9b      	subs	r3, r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	440b      	add	r3, r1
 8005944:	3338      	adds	r3, #56	@ 0x38
 8005946:	681b      	ldr	r3, [r3, #0]
}
 8005948:	4618      	mov	r0, r3
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4618      	mov	r0, r3
 8005962:	f005 fba4 	bl	800b0ae <USB_GetCurrentFrame>
 8005966:	4603      	mov	r3, r0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4618      	mov	r0, r3
 800597e:	f005 fb7f 	bl	800b080 <USB_GetHostSpeed>
 8005982:	4603      	mov	r3, r0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8005998:	78fa      	ldrb	r2, [r7, #3]
 800599a:	6879      	ldr	r1, [r7, #4]
 800599c:	4613      	mov	r3, r2
 800599e:	011b      	lsls	r3, r3, #4
 80059a0:	1a9b      	subs	r3, r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	440b      	add	r3, r1
 80059a6:	331a      	adds	r3, #26
 80059a8:	2200      	movs	r2, #0
 80059aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80059ac:	78fa      	ldrb	r2, [r7, #3]
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	4613      	mov	r3, r2
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	1a9b      	subs	r3, r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	331b      	adds	r3, #27
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80059c0:	78fa      	ldrb	r2, [r7, #3]
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	4613      	mov	r3, r2
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	1a9b      	subs	r3, r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	440b      	add	r3, r1
 80059ce:	3325      	adds	r3, #37	@ 0x25
 80059d0:	2200      	movs	r2, #0
 80059d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80059d4:	78fa      	ldrb	r2, [r7, #3]
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	4613      	mov	r3, r2
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	1a9b      	subs	r3, r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	440b      	add	r3, r1
 80059e2:	3324      	adds	r3, #36	@ 0x24
 80059e4:	2200      	movs	r2, #0
 80059e6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b086      	sub	sp, #24
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	460b      	mov	r3, r1
 8005a00:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	78fa      	ldrb	r2, [r7, #3]
 8005a12:	4611      	mov	r1, r2
 8005a14:	4618      	mov	r0, r3
 8005a16:	f005 f96e 	bl	800acf6 <USB_ReadChInterrupts>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d11a      	bne.n	8005a5a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005a24:	78fb      	ldrb	r3, [r7, #3]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a30:	461a      	mov	r2, r3
 8005a32:	2304      	movs	r3, #4
 8005a34:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005a36:	78fa      	ldrb	r2, [r7, #3]
 8005a38:	6879      	ldr	r1, [r7, #4]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	011b      	lsls	r3, r3, #4
 8005a3e:	1a9b      	subs	r3, r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	440b      	add	r3, r1
 8005a44:	334d      	adds	r3, #77	@ 0x4d
 8005a46:	2207      	movs	r2, #7
 8005a48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	78fa      	ldrb	r2, [r7, #3]
 8005a50:	4611      	mov	r1, r2
 8005a52:	4618      	mov	r0, r3
 8005a54:	f005 fef3 	bl	800b83e <USB_HC_Halt>
 8005a58:	e09e      	b.n	8005b98 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	78fa      	ldrb	r2, [r7, #3]
 8005a60:	4611      	mov	r1, r2
 8005a62:	4618      	mov	r0, r3
 8005a64:	f005 f947 	bl	800acf6 <USB_ReadChInterrupts>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a72:	d11b      	bne.n	8005aac <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8005a74:	78fb      	ldrb	r3, [r7, #3]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a80:	461a      	mov	r2, r3
 8005a82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005a86:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8005a88:	78fa      	ldrb	r2, [r7, #3]
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	011b      	lsls	r3, r3, #4
 8005a90:	1a9b      	subs	r3, r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	440b      	add	r3, r1
 8005a96:	334d      	adds	r3, #77	@ 0x4d
 8005a98:	2208      	movs	r2, #8
 8005a9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	78fa      	ldrb	r2, [r7, #3]
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f005 feca 	bl	800b83e <USB_HC_Halt>
 8005aaa:	e075      	b.n	8005b98 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	78fa      	ldrb	r2, [r7, #3]
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f005 f91e 	bl	800acf6 <USB_ReadChInterrupts>
 8005aba:	4603      	mov	r3, r0
 8005abc:	f003 0308 	and.w	r3, r3, #8
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d11a      	bne.n	8005afa <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005ac4:	78fb      	ldrb	r3, [r7, #3]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	2308      	movs	r3, #8
 8005ad4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005ad6:	78fa      	ldrb	r2, [r7, #3]
 8005ad8:	6879      	ldr	r1, [r7, #4]
 8005ada:	4613      	mov	r3, r2
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	1a9b      	subs	r3, r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	440b      	add	r3, r1
 8005ae4:	334d      	adds	r3, #77	@ 0x4d
 8005ae6:	2206      	movs	r2, #6
 8005ae8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	78fa      	ldrb	r2, [r7, #3]
 8005af0:	4611      	mov	r1, r2
 8005af2:	4618      	mov	r0, r3
 8005af4:	f005 fea3 	bl	800b83e <USB_HC_Halt>
 8005af8:	e04e      	b.n	8005b98 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	78fa      	ldrb	r2, [r7, #3]
 8005b00:	4611      	mov	r1, r2
 8005b02:	4618      	mov	r0, r3
 8005b04:	f005 f8f7 	bl	800acf6 <USB_ReadChInterrupts>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b12:	d11b      	bne.n	8005b4c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005b14:	78fb      	ldrb	r3, [r7, #3]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b20:	461a      	mov	r2, r3
 8005b22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b26:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005b28:	78fa      	ldrb	r2, [r7, #3]
 8005b2a:	6879      	ldr	r1, [r7, #4]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	011b      	lsls	r3, r3, #4
 8005b30:	1a9b      	subs	r3, r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	440b      	add	r3, r1
 8005b36:	334d      	adds	r3, #77	@ 0x4d
 8005b38:	2209      	movs	r2, #9
 8005b3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	78fa      	ldrb	r2, [r7, #3]
 8005b42:	4611      	mov	r1, r2
 8005b44:	4618      	mov	r0, r3
 8005b46:	f005 fe7a 	bl	800b83e <USB_HC_Halt>
 8005b4a:	e025      	b.n	8005b98 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	78fa      	ldrb	r2, [r7, #3]
 8005b52:	4611      	mov	r1, r2
 8005b54:	4618      	mov	r0, r3
 8005b56:	f005 f8ce 	bl	800acf6 <USB_ReadChInterrupts>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b60:	2b80      	cmp	r3, #128	@ 0x80
 8005b62:	d119      	bne.n	8005b98 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005b64:	78fb      	ldrb	r3, [r7, #3]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b70:	461a      	mov	r2, r3
 8005b72:	2380      	movs	r3, #128	@ 0x80
 8005b74:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005b76:	78fa      	ldrb	r2, [r7, #3]
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	1a9b      	subs	r3, r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	440b      	add	r3, r1
 8005b84:	334d      	adds	r3, #77	@ 0x4d
 8005b86:	2207      	movs	r2, #7
 8005b88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	78fa      	ldrb	r2, [r7, #3]
 8005b90:	4611      	mov	r1, r2
 8005b92:	4618      	mov	r0, r3
 8005b94:	f005 fe53 	bl	800b83e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	78fa      	ldrb	r2, [r7, #3]
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f005 f8a8 	bl	800acf6 <USB_ReadChInterrupts>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bb0:	d112      	bne.n	8005bd8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	78fa      	ldrb	r2, [r7, #3]
 8005bb8:	4611      	mov	r1, r2
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f005 fe3f 	bl	800b83e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005bc0:	78fb      	ldrb	r3, [r7, #3]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bcc:	461a      	mov	r2, r3
 8005bce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005bd2:	6093      	str	r3, [r2, #8]
 8005bd4:	f000 bd75 	b.w	80066c2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	78fa      	ldrb	r2, [r7, #3]
 8005bde:	4611      	mov	r1, r2
 8005be0:	4618      	mov	r0, r3
 8005be2:	f005 f888 	bl	800acf6 <USB_ReadChInterrupts>
 8005be6:	4603      	mov	r3, r0
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	f040 8128 	bne.w	8005e42 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005bf2:	78fb      	ldrb	r3, [r7, #3]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bfe:	461a      	mov	r2, r3
 8005c00:	2320      	movs	r3, #32
 8005c02:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005c04:	78fa      	ldrb	r2, [r7, #3]
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	011b      	lsls	r3, r3, #4
 8005c0c:	1a9b      	subs	r3, r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	440b      	add	r3, r1
 8005c12:	331b      	adds	r3, #27
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d119      	bne.n	8005c4e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005c1a:	78fa      	ldrb	r2, [r7, #3]
 8005c1c:	6879      	ldr	r1, [r7, #4]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	011b      	lsls	r3, r3, #4
 8005c22:	1a9b      	subs	r3, r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	440b      	add	r3, r1
 8005c28:	331b      	adds	r3, #27
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005c2e:	78fb      	ldrb	r3, [r7, #3]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	78fa      	ldrb	r2, [r7, #3]
 8005c3e:	0151      	lsls	r1, r2, #5
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	440a      	add	r2, r1
 8005c44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c4c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	799b      	ldrb	r3, [r3, #6]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d01b      	beq.n	8005c8e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005c56:	78fa      	ldrb	r2, [r7, #3]
 8005c58:	6879      	ldr	r1, [r7, #4]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	011b      	lsls	r3, r3, #4
 8005c5e:	1a9b      	subs	r3, r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	440b      	add	r3, r1
 8005c64:	3330      	adds	r3, #48	@ 0x30
 8005c66:	6819      	ldr	r1, [r3, #0]
 8005c68:	78fb      	ldrb	r3, [r7, #3]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c7a:	78fa      	ldrb	r2, [r7, #3]
 8005c7c:	1ac9      	subs	r1, r1, r3
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	4613      	mov	r3, r2
 8005c82:	011b      	lsls	r3, r3, #4
 8005c84:	1a9b      	subs	r3, r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4403      	add	r3, r0
 8005c8a:	3338      	adds	r3, #56	@ 0x38
 8005c8c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8005c8e:	78fa      	ldrb	r2, [r7, #3]
 8005c90:	6879      	ldr	r1, [r7, #4]
 8005c92:	4613      	mov	r3, r2
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	1a9b      	subs	r3, r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	440b      	add	r3, r1
 8005c9c:	334d      	adds	r3, #77	@ 0x4d
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8005ca2:	78fa      	ldrb	r2, [r7, #3]
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	1a9b      	subs	r3, r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	440b      	add	r3, r1
 8005cb0:	3344      	adds	r3, #68	@ 0x44
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005cb6:	78fb      	ldrb	r3, [r7, #3]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005cc8:	78fa      	ldrb	r2, [r7, #3]
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	1a9b      	subs	r3, r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	440b      	add	r3, r1
 8005cd6:	3326      	adds	r3, #38	@ 0x26
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005cde:	78fa      	ldrb	r2, [r7, #3]
 8005ce0:	6879      	ldr	r1, [r7, #4]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	1a9b      	subs	r3, r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	440b      	add	r3, r1
 8005cec:	3326      	adds	r3, #38	@ 0x26
 8005cee:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d110      	bne.n	8005d16 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	78fa      	ldrb	r2, [r7, #3]
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f005 fd9e 	bl	800b83e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005d02:	78fb      	ldrb	r3, [r7, #3]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d0e:	461a      	mov	r2, r3
 8005d10:	2310      	movs	r3, #16
 8005d12:	6093      	str	r3, [r2, #8]
 8005d14:	e03d      	b.n	8005d92 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005d16:	78fa      	ldrb	r2, [r7, #3]
 8005d18:	6879      	ldr	r1, [r7, #4]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	011b      	lsls	r3, r3, #4
 8005d1e:	1a9b      	subs	r3, r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	440b      	add	r3, r1
 8005d24:	3326      	adds	r3, #38	@ 0x26
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b03      	cmp	r3, #3
 8005d2a:	d00a      	beq.n	8005d42 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005d2c:	78fa      	ldrb	r2, [r7, #3]
 8005d2e:	6879      	ldr	r1, [r7, #4]
 8005d30:	4613      	mov	r3, r2
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	1a9b      	subs	r3, r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	440b      	add	r3, r1
 8005d3a:	3326      	adds	r3, #38	@ 0x26
 8005d3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d127      	bne.n	8005d92 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005d42:	78fb      	ldrb	r3, [r7, #3]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	78fa      	ldrb	r2, [r7, #3]
 8005d52:	0151      	lsls	r1, r2, #5
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	440a      	add	r2, r1
 8005d58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d60:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005d62:	78fa      	ldrb	r2, [r7, #3]
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	4613      	mov	r3, r2
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	1a9b      	subs	r3, r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	440b      	add	r3, r1
 8005d70:	334c      	adds	r3, #76	@ 0x4c
 8005d72:	2201      	movs	r2, #1
 8005d74:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005d76:	78fa      	ldrb	r2, [r7, #3]
 8005d78:	6879      	ldr	r1, [r7, #4]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	1a9b      	subs	r3, r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	440b      	add	r3, r1
 8005d84:	334c      	adds	r3, #76	@ 0x4c
 8005d86:	781a      	ldrb	r2, [r3, #0]
 8005d88:	78fb      	ldrb	r3, [r7, #3]
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f008 fdf9 	bl	800e984 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	799b      	ldrb	r3, [r3, #6]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d13b      	bne.n	8005e12 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8005d9a:	78fa      	ldrb	r2, [r7, #3]
 8005d9c:	6879      	ldr	r1, [r7, #4]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	011b      	lsls	r3, r3, #4
 8005da2:	1a9b      	subs	r3, r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	440b      	add	r3, r1
 8005da8:	3338      	adds	r3, #56	@ 0x38
 8005daa:	6819      	ldr	r1, [r3, #0]
 8005dac:	78fa      	ldrb	r2, [r7, #3]
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	4613      	mov	r3, r2
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	1a9b      	subs	r3, r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4403      	add	r3, r0
 8005dba:	3328      	adds	r3, #40	@ 0x28
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	440b      	add	r3, r1
 8005dc0:	1e59      	subs	r1, r3, #1
 8005dc2:	78fa      	ldrb	r2, [r7, #3]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	011b      	lsls	r3, r3, #4
 8005dca:	1a9b      	subs	r3, r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4403      	add	r3, r0
 8005dd0:	3328      	adds	r3, #40	@ 0x28
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 8470 	beq.w	80066c2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8005de2:	78fa      	ldrb	r2, [r7, #3]
 8005de4:	6879      	ldr	r1, [r7, #4]
 8005de6:	4613      	mov	r3, r2
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	1a9b      	subs	r3, r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	440b      	add	r3, r1
 8005df0:	333c      	adds	r3, #60	@ 0x3c
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	78fa      	ldrb	r2, [r7, #3]
 8005df6:	f083 0301 	eor.w	r3, r3, #1
 8005dfa:	b2d8      	uxtb	r0, r3
 8005dfc:	6879      	ldr	r1, [r7, #4]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	011b      	lsls	r3, r3, #4
 8005e02:	1a9b      	subs	r3, r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	440b      	add	r3, r1
 8005e08:	333c      	adds	r3, #60	@ 0x3c
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	701a      	strb	r2, [r3, #0]
 8005e0e:	f000 bc58 	b.w	80066c2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8005e12:	78fa      	ldrb	r2, [r7, #3]
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	4613      	mov	r3, r2
 8005e18:	011b      	lsls	r3, r3, #4
 8005e1a:	1a9b      	subs	r3, r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	440b      	add	r3, r1
 8005e20:	333c      	adds	r3, #60	@ 0x3c
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	78fa      	ldrb	r2, [r7, #3]
 8005e26:	f083 0301 	eor.w	r3, r3, #1
 8005e2a:	b2d8      	uxtb	r0, r3
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	1a9b      	subs	r3, r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	440b      	add	r3, r1
 8005e38:	333c      	adds	r3, #60	@ 0x3c
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	701a      	strb	r2, [r3, #0]
 8005e3e:	f000 bc40 	b.w	80066c2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	78fa      	ldrb	r2, [r7, #3]
 8005e48:	4611      	mov	r1, r2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f004 ff53 	bl	800acf6 <USB_ReadChInterrupts>
 8005e50:	4603      	mov	r3, r0
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	d131      	bne.n	8005ebe <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005e5a:	78fb      	ldrb	r3, [r7, #3]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e66:	461a      	mov	r2, r3
 8005e68:	2320      	movs	r3, #32
 8005e6a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005e6c:	78fa      	ldrb	r2, [r7, #3]
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	4613      	mov	r3, r2
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	1a9b      	subs	r3, r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	440b      	add	r3, r1
 8005e7a:	331a      	adds	r3, #26
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	f040 841f 	bne.w	80066c2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8005e84:	78fa      	ldrb	r2, [r7, #3]
 8005e86:	6879      	ldr	r1, [r7, #4]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	011b      	lsls	r3, r3, #4
 8005e8c:	1a9b      	subs	r3, r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	440b      	add	r3, r1
 8005e92:	331b      	adds	r3, #27
 8005e94:	2201      	movs	r2, #1
 8005e96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005e98:	78fa      	ldrb	r2, [r7, #3]
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	1a9b      	subs	r3, r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	334d      	adds	r3, #77	@ 0x4d
 8005ea8:	2203      	movs	r2, #3
 8005eaa:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	78fa      	ldrb	r2, [r7, #3]
 8005eb2:	4611      	mov	r1, r2
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f005 fcc2 	bl	800b83e <USB_HC_Halt>
 8005eba:	f000 bc02 	b.w	80066c2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	78fa      	ldrb	r2, [r7, #3]
 8005ec4:	4611      	mov	r1, r2
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f004 ff15 	bl	800acf6 <USB_ReadChInterrupts>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	f040 8305 	bne.w	80064e2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005ed8:	78fb      	ldrb	r3, [r7, #3]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005eea:	78fa      	ldrb	r2, [r7, #3]
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	011b      	lsls	r3, r3, #4
 8005ef2:	1a9b      	subs	r3, r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	440b      	add	r3, r1
 8005ef8:	334d      	adds	r3, #77	@ 0x4d
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d114      	bne.n	8005f2a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f00:	78fa      	ldrb	r2, [r7, #3]
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	4613      	mov	r3, r2
 8005f06:	011b      	lsls	r3, r3, #4
 8005f08:	1a9b      	subs	r3, r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	440b      	add	r3, r1
 8005f0e:	334d      	adds	r3, #77	@ 0x4d
 8005f10:	2202      	movs	r2, #2
 8005f12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005f14:	78fa      	ldrb	r2, [r7, #3]
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	011b      	lsls	r3, r3, #4
 8005f1c:	1a9b      	subs	r3, r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	440b      	add	r3, r1
 8005f22:	334c      	adds	r3, #76	@ 0x4c
 8005f24:	2201      	movs	r2, #1
 8005f26:	701a      	strb	r2, [r3, #0]
 8005f28:	e2cc      	b.n	80064c4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005f2a:	78fa      	ldrb	r2, [r7, #3]
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	011b      	lsls	r3, r3, #4
 8005f32:	1a9b      	subs	r3, r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	440b      	add	r3, r1
 8005f38:	334d      	adds	r3, #77	@ 0x4d
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	2b06      	cmp	r3, #6
 8005f3e:	d114      	bne.n	8005f6a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f40:	78fa      	ldrb	r2, [r7, #3]
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	4613      	mov	r3, r2
 8005f46:	011b      	lsls	r3, r3, #4
 8005f48:	1a9b      	subs	r3, r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	440b      	add	r3, r1
 8005f4e:	334d      	adds	r3, #77	@ 0x4d
 8005f50:	2202      	movs	r2, #2
 8005f52:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8005f54:	78fa      	ldrb	r2, [r7, #3]
 8005f56:	6879      	ldr	r1, [r7, #4]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	1a9b      	subs	r3, r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	440b      	add	r3, r1
 8005f62:	334c      	adds	r3, #76	@ 0x4c
 8005f64:	2205      	movs	r2, #5
 8005f66:	701a      	strb	r2, [r3, #0]
 8005f68:	e2ac      	b.n	80064c4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005f6a:	78fa      	ldrb	r2, [r7, #3]
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	011b      	lsls	r3, r3, #4
 8005f72:	1a9b      	subs	r3, r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	440b      	add	r3, r1
 8005f78:	334d      	adds	r3, #77	@ 0x4d
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	2b07      	cmp	r3, #7
 8005f7e:	d00b      	beq.n	8005f98 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005f80:	78fa      	ldrb	r2, [r7, #3]
 8005f82:	6879      	ldr	r1, [r7, #4]
 8005f84:	4613      	mov	r3, r2
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	1a9b      	subs	r3, r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	334d      	adds	r3, #77	@ 0x4d
 8005f90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005f92:	2b09      	cmp	r3, #9
 8005f94:	f040 80a6 	bne.w	80060e4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f98:	78fa      	ldrb	r2, [r7, #3]
 8005f9a:	6879      	ldr	r1, [r7, #4]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	011b      	lsls	r3, r3, #4
 8005fa0:	1a9b      	subs	r3, r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	334d      	adds	r3, #77	@ 0x4d
 8005fa8:	2202      	movs	r2, #2
 8005faa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005fac:	78fa      	ldrb	r2, [r7, #3]
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	1a9b      	subs	r3, r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	440b      	add	r3, r1
 8005fba:	3344      	adds	r3, #68	@ 0x44
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	1c59      	adds	r1, r3, #1
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	1a9b      	subs	r3, r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4403      	add	r3, r0
 8005fcc:	3344      	adds	r3, #68	@ 0x44
 8005fce:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005fd0:	78fa      	ldrb	r2, [r7, #3]
 8005fd2:	6879      	ldr	r1, [r7, #4]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	1a9b      	subs	r3, r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	440b      	add	r3, r1
 8005fde:	3344      	adds	r3, #68	@ 0x44
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d943      	bls.n	800606e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005fe6:	78fa      	ldrb	r2, [r7, #3]
 8005fe8:	6879      	ldr	r1, [r7, #4]
 8005fea:	4613      	mov	r3, r2
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	1a9b      	subs	r3, r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	440b      	add	r3, r1
 8005ff4:	3344      	adds	r3, #68	@ 0x44
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8005ffa:	78fa      	ldrb	r2, [r7, #3]
 8005ffc:	6879      	ldr	r1, [r7, #4]
 8005ffe:	4613      	mov	r3, r2
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	1a9b      	subs	r3, r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	440b      	add	r3, r1
 8006008:	331a      	adds	r3, #26
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d123      	bne.n	8006058 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8006010:	78fa      	ldrb	r2, [r7, #3]
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	4613      	mov	r3, r2
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	1a9b      	subs	r3, r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	440b      	add	r3, r1
 800601e:	331b      	adds	r3, #27
 8006020:	2200      	movs	r2, #0
 8006022:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8006024:	78fa      	ldrb	r2, [r7, #3]
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	4613      	mov	r3, r2
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	1a9b      	subs	r3, r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	440b      	add	r3, r1
 8006032:	331c      	adds	r3, #28
 8006034:	2200      	movs	r2, #0
 8006036:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006038:	78fb      	ldrb	r3, [r7, #3]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	4413      	add	r3, r2
 8006040:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	78fa      	ldrb	r2, [r7, #3]
 8006048:	0151      	lsls	r1, r2, #5
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	440a      	add	r2, r1
 800604e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006056:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006058:	78fa      	ldrb	r2, [r7, #3]
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	4613      	mov	r3, r2
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	1a9b      	subs	r3, r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	440b      	add	r3, r1
 8006066:	334c      	adds	r3, #76	@ 0x4c
 8006068:	2204      	movs	r2, #4
 800606a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800606c:	e229      	b.n	80064c2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800606e:	78fa      	ldrb	r2, [r7, #3]
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	4613      	mov	r3, r2
 8006074:	011b      	lsls	r3, r3, #4
 8006076:	1a9b      	subs	r3, r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	440b      	add	r3, r1
 800607c:	334c      	adds	r3, #76	@ 0x4c
 800607e:	2202      	movs	r2, #2
 8006080:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006082:	78fa      	ldrb	r2, [r7, #3]
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	4613      	mov	r3, r2
 8006088:	011b      	lsls	r3, r3, #4
 800608a:	1a9b      	subs	r3, r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	440b      	add	r3, r1
 8006090:	3326      	adds	r3, #38	@ 0x26
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00b      	beq.n	80060b0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006098:	78fa      	ldrb	r2, [r7, #3]
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	4613      	mov	r3, r2
 800609e:	011b      	lsls	r3, r3, #4
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	440b      	add	r3, r1
 80060a6:	3326      	adds	r3, #38	@ 0x26
 80060a8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	f040 8209 	bne.w	80064c2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060c6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060ce:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80060d0:	78fb      	ldrb	r3, [r7, #3]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060dc:	461a      	mov	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80060e2:	e1ee      	b.n	80064c2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80060e4:	78fa      	ldrb	r2, [r7, #3]
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	4613      	mov	r3, r2
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	1a9b      	subs	r3, r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	440b      	add	r3, r1
 80060f2:	334d      	adds	r3, #77	@ 0x4d
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2b05      	cmp	r3, #5
 80060f8:	f040 80c8 	bne.w	800628c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80060fc:	78fa      	ldrb	r2, [r7, #3]
 80060fe:	6879      	ldr	r1, [r7, #4]
 8006100:	4613      	mov	r3, r2
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	1a9b      	subs	r3, r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	440b      	add	r3, r1
 800610a:	334d      	adds	r3, #77	@ 0x4d
 800610c:	2202      	movs	r2, #2
 800610e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006110:	78fa      	ldrb	r2, [r7, #3]
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	4613      	mov	r3, r2
 8006116:	011b      	lsls	r3, r3, #4
 8006118:	1a9b      	subs	r3, r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	440b      	add	r3, r1
 800611e:	331b      	adds	r3, #27
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	2b01      	cmp	r3, #1
 8006124:	f040 81ce 	bne.w	80064c4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006128:	78fa      	ldrb	r2, [r7, #3]
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	4613      	mov	r3, r2
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	1a9b      	subs	r3, r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	440b      	add	r3, r1
 8006136:	3326      	adds	r3, #38	@ 0x26
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	2b03      	cmp	r3, #3
 800613c:	d16b      	bne.n	8006216 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800613e:	78fa      	ldrb	r2, [r7, #3]
 8006140:	6879      	ldr	r1, [r7, #4]
 8006142:	4613      	mov	r3, r2
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	1a9b      	subs	r3, r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	440b      	add	r3, r1
 800614c:	3348      	adds	r3, #72	@ 0x48
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	1c59      	adds	r1, r3, #1
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	4613      	mov	r3, r2
 8006156:	011b      	lsls	r3, r3, #4
 8006158:	1a9b      	subs	r3, r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4403      	add	r3, r0
 800615e:	3348      	adds	r3, #72	@ 0x48
 8006160:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8006162:	78fa      	ldrb	r2, [r7, #3]
 8006164:	6879      	ldr	r1, [r7, #4]
 8006166:	4613      	mov	r3, r2
 8006168:	011b      	lsls	r3, r3, #4
 800616a:	1a9b      	subs	r3, r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	440b      	add	r3, r1
 8006170:	3348      	adds	r3, #72	@ 0x48
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b02      	cmp	r3, #2
 8006176:	d943      	bls.n	8006200 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8006178:	78fa      	ldrb	r2, [r7, #3]
 800617a:	6879      	ldr	r1, [r7, #4]
 800617c:	4613      	mov	r3, r2
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	1a9b      	subs	r3, r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	440b      	add	r3, r1
 8006186:	3348      	adds	r3, #72	@ 0x48
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800618c:	78fa      	ldrb	r2, [r7, #3]
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	4613      	mov	r3, r2
 8006192:	011b      	lsls	r3, r3, #4
 8006194:	1a9b      	subs	r3, r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	440b      	add	r3, r1
 800619a:	331b      	adds	r3, #27
 800619c:	2200      	movs	r2, #0
 800619e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80061a0:	78fa      	ldrb	r2, [r7, #3]
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	4613      	mov	r3, r2
 80061a6:	011b      	lsls	r3, r3, #4
 80061a8:	1a9b      	subs	r3, r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	440b      	add	r3, r1
 80061ae:	3344      	adds	r3, #68	@ 0x44
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d809      	bhi.n	80061ca <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80061b6:	78fa      	ldrb	r2, [r7, #3]
 80061b8:	6879      	ldr	r1, [r7, #4]
 80061ba:	4613      	mov	r3, r2
 80061bc:	011b      	lsls	r3, r3, #4
 80061be:	1a9b      	subs	r3, r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	440b      	add	r3, r1
 80061c4:	331c      	adds	r3, #28
 80061c6:	2201      	movs	r2, #1
 80061c8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80061ca:	78fb      	ldrb	r3, [r7, #3]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	78fa      	ldrb	r2, [r7, #3]
 80061da:	0151      	lsls	r1, r2, #5
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	440a      	add	r2, r1
 80061e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061e8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80061ea:	78fa      	ldrb	r2, [r7, #3]
 80061ec:	6879      	ldr	r1, [r7, #4]
 80061ee:	4613      	mov	r3, r2
 80061f0:	011b      	lsls	r3, r3, #4
 80061f2:	1a9b      	subs	r3, r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	440b      	add	r3, r1
 80061f8:	334c      	adds	r3, #76	@ 0x4c
 80061fa:	2204      	movs	r2, #4
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	e014      	b.n	800622a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006200:	78fa      	ldrb	r2, [r7, #3]
 8006202:	6879      	ldr	r1, [r7, #4]
 8006204:	4613      	mov	r3, r2
 8006206:	011b      	lsls	r3, r3, #4
 8006208:	1a9b      	subs	r3, r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	440b      	add	r3, r1
 800620e:	334c      	adds	r3, #76	@ 0x4c
 8006210:	2202      	movs	r2, #2
 8006212:	701a      	strb	r2, [r3, #0]
 8006214:	e009      	b.n	800622a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006216:	78fa      	ldrb	r2, [r7, #3]
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	4613      	mov	r3, r2
 800621c:	011b      	lsls	r3, r3, #4
 800621e:	1a9b      	subs	r3, r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	440b      	add	r3, r1
 8006224:	334c      	adds	r3, #76	@ 0x4c
 8006226:	2202      	movs	r2, #2
 8006228:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800622a:	78fa      	ldrb	r2, [r7, #3]
 800622c:	6879      	ldr	r1, [r7, #4]
 800622e:	4613      	mov	r3, r2
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	1a9b      	subs	r3, r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	440b      	add	r3, r1
 8006238:	3326      	adds	r3, #38	@ 0x26
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00b      	beq.n	8006258 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006240:	78fa      	ldrb	r2, [r7, #3]
 8006242:	6879      	ldr	r1, [r7, #4]
 8006244:	4613      	mov	r3, r2
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	1a9b      	subs	r3, r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	440b      	add	r3, r1
 800624e:	3326      	adds	r3, #38	@ 0x26
 8006250:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006252:	2b02      	cmp	r3, #2
 8006254:	f040 8136 	bne.w	80064c4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006258:	78fb      	ldrb	r3, [r7, #3]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	4413      	add	r3, r2
 8006260:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800626e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006276:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006278:	78fb      	ldrb	r3, [r7, #3]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	4413      	add	r3, r2
 8006280:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006284:	461a      	mov	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	e11b      	b.n	80064c4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800628c:	78fa      	ldrb	r2, [r7, #3]
 800628e:	6879      	ldr	r1, [r7, #4]
 8006290:	4613      	mov	r3, r2
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	1a9b      	subs	r3, r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	440b      	add	r3, r1
 800629a:	334d      	adds	r3, #77	@ 0x4d
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	2b03      	cmp	r3, #3
 80062a0:	f040 8081 	bne.w	80063a6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80062a4:	78fa      	ldrb	r2, [r7, #3]
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	4613      	mov	r3, r2
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	1a9b      	subs	r3, r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	440b      	add	r3, r1
 80062b2:	334d      	adds	r3, #77	@ 0x4d
 80062b4:	2202      	movs	r2, #2
 80062b6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80062b8:	78fa      	ldrb	r2, [r7, #3]
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	4613      	mov	r3, r2
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	1a9b      	subs	r3, r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	440b      	add	r3, r1
 80062c6:	331b      	adds	r3, #27
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	f040 80fa 	bne.w	80064c4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80062d0:	78fa      	ldrb	r2, [r7, #3]
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	4613      	mov	r3, r2
 80062d6:	011b      	lsls	r3, r3, #4
 80062d8:	1a9b      	subs	r3, r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	440b      	add	r3, r1
 80062de:	334c      	adds	r3, #76	@ 0x4c
 80062e0:	2202      	movs	r2, #2
 80062e2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80062e4:	78fb      	ldrb	r3, [r7, #3]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	78fa      	ldrb	r2, [r7, #3]
 80062f4:	0151      	lsls	r1, r2, #5
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	440a      	add	r2, r1
 80062fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006302:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006304:	78fb      	ldrb	r3, [r7, #3]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	4413      	add	r3, r2
 800630c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	78fa      	ldrb	r2, [r7, #3]
 8006314:	0151      	lsls	r1, r2, #5
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	440a      	add	r2, r1
 800631a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800631e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006322:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	4413      	add	r3, r2
 800632c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	78fa      	ldrb	r2, [r7, #3]
 8006334:	0151      	lsls	r1, r2, #5
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	440a      	add	r2, r1
 800633a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800633e:	f023 0320 	bic.w	r3, r3, #32
 8006342:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006344:	78fa      	ldrb	r2, [r7, #3]
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	4613      	mov	r3, r2
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	1a9b      	subs	r3, r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	440b      	add	r3, r1
 8006352:	3326      	adds	r3, #38	@ 0x26
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00b      	beq.n	8006372 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800635a:	78fa      	ldrb	r2, [r7, #3]
 800635c:	6879      	ldr	r1, [r7, #4]
 800635e:	4613      	mov	r3, r2
 8006360:	011b      	lsls	r3, r3, #4
 8006362:	1a9b      	subs	r3, r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	440b      	add	r3, r1
 8006368:	3326      	adds	r3, #38	@ 0x26
 800636a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800636c:	2b02      	cmp	r3, #2
 800636e:	f040 80a9 	bne.w	80064c4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006372:	78fb      	ldrb	r3, [r7, #3]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	4413      	add	r3, r2
 800637a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006388:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006390:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006392:	78fb      	ldrb	r3, [r7, #3]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	4413      	add	r3, r2
 800639a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800639e:	461a      	mov	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6013      	str	r3, [r2, #0]
 80063a4:	e08e      	b.n	80064c4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80063a6:	78fa      	ldrb	r2, [r7, #3]
 80063a8:	6879      	ldr	r1, [r7, #4]
 80063aa:	4613      	mov	r3, r2
 80063ac:	011b      	lsls	r3, r3, #4
 80063ae:	1a9b      	subs	r3, r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	440b      	add	r3, r1
 80063b4:	334d      	adds	r3, #77	@ 0x4d
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b04      	cmp	r3, #4
 80063ba:	d143      	bne.n	8006444 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80063bc:	78fa      	ldrb	r2, [r7, #3]
 80063be:	6879      	ldr	r1, [r7, #4]
 80063c0:	4613      	mov	r3, r2
 80063c2:	011b      	lsls	r3, r3, #4
 80063c4:	1a9b      	subs	r3, r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	440b      	add	r3, r1
 80063ca:	334d      	adds	r3, #77	@ 0x4d
 80063cc:	2202      	movs	r2, #2
 80063ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80063d0:	78fa      	ldrb	r2, [r7, #3]
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	4613      	mov	r3, r2
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	1a9b      	subs	r3, r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	440b      	add	r3, r1
 80063de:	334c      	adds	r3, #76	@ 0x4c
 80063e0:	2202      	movs	r2, #2
 80063e2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80063e4:	78fa      	ldrb	r2, [r7, #3]
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	4613      	mov	r3, r2
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	1a9b      	subs	r3, r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	440b      	add	r3, r1
 80063f2:	3326      	adds	r3, #38	@ 0x26
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00a      	beq.n	8006410 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80063fa:	78fa      	ldrb	r2, [r7, #3]
 80063fc:	6879      	ldr	r1, [r7, #4]
 80063fe:	4613      	mov	r3, r2
 8006400:	011b      	lsls	r3, r3, #4
 8006402:	1a9b      	subs	r3, r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	440b      	add	r3, r1
 8006408:	3326      	adds	r3, #38	@ 0x26
 800640a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800640c:	2b02      	cmp	r3, #2
 800640e:	d159      	bne.n	80064c4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006410:	78fb      	ldrb	r3, [r7, #3]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	4413      	add	r3, r2
 8006418:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006426:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800642e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	4413      	add	r3, r2
 8006438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800643c:	461a      	mov	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	e03f      	b.n	80064c4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8006444:	78fa      	ldrb	r2, [r7, #3]
 8006446:	6879      	ldr	r1, [r7, #4]
 8006448:	4613      	mov	r3, r2
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	1a9b      	subs	r3, r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	440b      	add	r3, r1
 8006452:	334d      	adds	r3, #77	@ 0x4d
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b08      	cmp	r3, #8
 8006458:	d126      	bne.n	80064a8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800645a:	78fa      	ldrb	r2, [r7, #3]
 800645c:	6879      	ldr	r1, [r7, #4]
 800645e:	4613      	mov	r3, r2
 8006460:	011b      	lsls	r3, r3, #4
 8006462:	1a9b      	subs	r3, r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	440b      	add	r3, r1
 8006468:	334d      	adds	r3, #77	@ 0x4d
 800646a:	2202      	movs	r2, #2
 800646c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800646e:	78fa      	ldrb	r2, [r7, #3]
 8006470:	6879      	ldr	r1, [r7, #4]
 8006472:	4613      	mov	r3, r2
 8006474:	011b      	lsls	r3, r3, #4
 8006476:	1a9b      	subs	r3, r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	440b      	add	r3, r1
 800647c:	3344      	adds	r3, #68	@ 0x44
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	1c59      	adds	r1, r3, #1
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	4613      	mov	r3, r2
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	1a9b      	subs	r3, r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4403      	add	r3, r0
 800648e:	3344      	adds	r3, #68	@ 0x44
 8006490:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8006492:	78fa      	ldrb	r2, [r7, #3]
 8006494:	6879      	ldr	r1, [r7, #4]
 8006496:	4613      	mov	r3, r2
 8006498:	011b      	lsls	r3, r3, #4
 800649a:	1a9b      	subs	r3, r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	440b      	add	r3, r1
 80064a0:	334c      	adds	r3, #76	@ 0x4c
 80064a2:	2204      	movs	r2, #4
 80064a4:	701a      	strb	r2, [r3, #0]
 80064a6:	e00d      	b.n	80064c4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80064a8:	78fa      	ldrb	r2, [r7, #3]
 80064aa:	6879      	ldr	r1, [r7, #4]
 80064ac:	4613      	mov	r3, r2
 80064ae:	011b      	lsls	r3, r3, #4
 80064b0:	1a9b      	subs	r3, r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	440b      	add	r3, r1
 80064b6:	334d      	adds	r3, #77	@ 0x4d
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	f000 8100 	beq.w	80066c0 <HCD_HC_IN_IRQHandler+0xcca>
 80064c0:	e000      	b.n	80064c4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80064c2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80064c4:	78fa      	ldrb	r2, [r7, #3]
 80064c6:	6879      	ldr	r1, [r7, #4]
 80064c8:	4613      	mov	r3, r2
 80064ca:	011b      	lsls	r3, r3, #4
 80064cc:	1a9b      	subs	r3, r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	440b      	add	r3, r1
 80064d2:	334c      	adds	r3, #76	@ 0x4c
 80064d4:	781a      	ldrb	r2, [r3, #0]
 80064d6:	78fb      	ldrb	r3, [r7, #3]
 80064d8:	4619      	mov	r1, r3
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f008 fa52 	bl	800e984 <HAL_HCD_HC_NotifyURBChange_Callback>
 80064e0:	e0ef      	b.n	80066c2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	78fa      	ldrb	r2, [r7, #3]
 80064e8:	4611      	mov	r1, r2
 80064ea:	4618      	mov	r0, r3
 80064ec:	f004 fc03 	bl	800acf6 <USB_ReadChInterrupts>
 80064f0:	4603      	mov	r3, r0
 80064f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f6:	2b40      	cmp	r3, #64	@ 0x40
 80064f8:	d12f      	bne.n	800655a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80064fa:	78fb      	ldrb	r3, [r7, #3]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	4413      	add	r3, r2
 8006502:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006506:	461a      	mov	r2, r3
 8006508:	2340      	movs	r3, #64	@ 0x40
 800650a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800650c:	78fa      	ldrb	r2, [r7, #3]
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	4613      	mov	r3, r2
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	1a9b      	subs	r3, r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	440b      	add	r3, r1
 800651a:	334d      	adds	r3, #77	@ 0x4d
 800651c:	2205      	movs	r2, #5
 800651e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8006520:	78fa      	ldrb	r2, [r7, #3]
 8006522:	6879      	ldr	r1, [r7, #4]
 8006524:	4613      	mov	r3, r2
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	1a9b      	subs	r3, r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	440b      	add	r3, r1
 800652e:	331a      	adds	r3, #26
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d109      	bne.n	800654a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006536:	78fa      	ldrb	r2, [r7, #3]
 8006538:	6879      	ldr	r1, [r7, #4]
 800653a:	4613      	mov	r3, r2
 800653c:	011b      	lsls	r3, r3, #4
 800653e:	1a9b      	subs	r3, r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	440b      	add	r3, r1
 8006544:	3344      	adds	r3, #68	@ 0x44
 8006546:	2200      	movs	r2, #0
 8006548:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	78fa      	ldrb	r2, [r7, #3]
 8006550:	4611      	mov	r1, r2
 8006552:	4618      	mov	r0, r3
 8006554:	f005 f973 	bl	800b83e <USB_HC_Halt>
 8006558:	e0b3      	b.n	80066c2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	78fa      	ldrb	r2, [r7, #3]
 8006560:	4611      	mov	r1, r2
 8006562:	4618      	mov	r0, r3
 8006564:	f004 fbc7 	bl	800acf6 <USB_ReadChInterrupts>
 8006568:	4603      	mov	r3, r0
 800656a:	f003 0310 	and.w	r3, r3, #16
 800656e:	2b10      	cmp	r3, #16
 8006570:	f040 80a7 	bne.w	80066c2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006574:	78fa      	ldrb	r2, [r7, #3]
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	4613      	mov	r3, r2
 800657a:	011b      	lsls	r3, r3, #4
 800657c:	1a9b      	subs	r3, r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	440b      	add	r3, r1
 8006582:	3326      	adds	r3, #38	@ 0x26
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	2b03      	cmp	r3, #3
 8006588:	d11b      	bne.n	80065c2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800658a:	78fa      	ldrb	r2, [r7, #3]
 800658c:	6879      	ldr	r1, [r7, #4]
 800658e:	4613      	mov	r3, r2
 8006590:	011b      	lsls	r3, r3, #4
 8006592:	1a9b      	subs	r3, r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	440b      	add	r3, r1
 8006598:	3344      	adds	r3, #68	@ 0x44
 800659a:	2200      	movs	r2, #0
 800659c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800659e:	78fa      	ldrb	r2, [r7, #3]
 80065a0:	6879      	ldr	r1, [r7, #4]
 80065a2:	4613      	mov	r3, r2
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	1a9b      	subs	r3, r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	440b      	add	r3, r1
 80065ac:	334d      	adds	r3, #77	@ 0x4d
 80065ae:	2204      	movs	r2, #4
 80065b0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	78fa      	ldrb	r2, [r7, #3]
 80065b8:	4611      	mov	r1, r2
 80065ba:	4618      	mov	r0, r3
 80065bc:	f005 f93f 	bl	800b83e <USB_HC_Halt>
 80065c0:	e03f      	b.n	8006642 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80065c2:	78fa      	ldrb	r2, [r7, #3]
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	4613      	mov	r3, r2
 80065c8:	011b      	lsls	r3, r3, #4
 80065ca:	1a9b      	subs	r3, r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	440b      	add	r3, r1
 80065d0:	3326      	adds	r3, #38	@ 0x26
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00a      	beq.n	80065ee <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80065d8:	78fa      	ldrb	r2, [r7, #3]
 80065da:	6879      	ldr	r1, [r7, #4]
 80065dc:	4613      	mov	r3, r2
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	1a9b      	subs	r3, r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	440b      	add	r3, r1
 80065e6:	3326      	adds	r3, #38	@ 0x26
 80065e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d129      	bne.n	8006642 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80065ee:	78fa      	ldrb	r2, [r7, #3]
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	4613      	mov	r3, r2
 80065f4:	011b      	lsls	r3, r3, #4
 80065f6:	1a9b      	subs	r3, r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	440b      	add	r3, r1
 80065fc:	3344      	adds	r3, #68	@ 0x44
 80065fe:	2200      	movs	r2, #0
 8006600:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	799b      	ldrb	r3, [r3, #6]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <HCD_HC_IN_IRQHandler+0xc2a>
 800660a:	78fa      	ldrb	r2, [r7, #3]
 800660c:	6879      	ldr	r1, [r7, #4]
 800660e:	4613      	mov	r3, r2
 8006610:	011b      	lsls	r3, r3, #4
 8006612:	1a9b      	subs	r3, r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	440b      	add	r3, r1
 8006618:	331b      	adds	r3, #27
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d110      	bne.n	8006642 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8006620:	78fa      	ldrb	r2, [r7, #3]
 8006622:	6879      	ldr	r1, [r7, #4]
 8006624:	4613      	mov	r3, r2
 8006626:	011b      	lsls	r3, r3, #4
 8006628:	1a9b      	subs	r3, r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	440b      	add	r3, r1
 800662e:	334d      	adds	r3, #77	@ 0x4d
 8006630:	2204      	movs	r2, #4
 8006632:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	78fa      	ldrb	r2, [r7, #3]
 800663a:	4611      	mov	r1, r2
 800663c:	4618      	mov	r0, r3
 800663e:	f005 f8fe 	bl	800b83e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8006642:	78fa      	ldrb	r2, [r7, #3]
 8006644:	6879      	ldr	r1, [r7, #4]
 8006646:	4613      	mov	r3, r2
 8006648:	011b      	lsls	r3, r3, #4
 800664a:	1a9b      	subs	r3, r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	440b      	add	r3, r1
 8006650:	331b      	adds	r3, #27
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d129      	bne.n	80066ac <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006658:	78fa      	ldrb	r2, [r7, #3]
 800665a:	6879      	ldr	r1, [r7, #4]
 800665c:	4613      	mov	r3, r2
 800665e:	011b      	lsls	r3, r3, #4
 8006660:	1a9b      	subs	r3, r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	440b      	add	r3, r1
 8006666:	331b      	adds	r3, #27
 8006668:	2200      	movs	r2, #0
 800666a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800666c:	78fb      	ldrb	r3, [r7, #3]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	4413      	add	r3, r2
 8006674:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	78fa      	ldrb	r2, [r7, #3]
 800667c:	0151      	lsls	r1, r2, #5
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	440a      	add	r2, r1
 8006682:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006686:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800668a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800668c:	78fb      	ldrb	r3, [r7, #3]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	4413      	add	r3, r2
 8006694:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	78fa      	ldrb	r2, [r7, #3]
 800669c:	0151      	lsls	r1, r2, #5
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	440a      	add	r2, r1
 80066a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066a6:	f043 0320 	orr.w	r3, r3, #32
 80066aa:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80066ac:	78fb      	ldrb	r3, [r7, #3]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066b8:	461a      	mov	r2, r3
 80066ba:	2310      	movs	r3, #16
 80066bc:	6093      	str	r3, [r2, #8]
 80066be:	e000      	b.n	80066c2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80066c0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	460b      	mov	r3, r1
 80066d2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	78fa      	ldrb	r2, [r7, #3]
 80066e4:	4611      	mov	r1, r2
 80066e6:	4618      	mov	r0, r3
 80066e8:	f004 fb05 	bl	800acf6 <USB_ReadChInterrupts>
 80066ec:	4603      	mov	r3, r0
 80066ee:	f003 0304 	and.w	r3, r3, #4
 80066f2:	2b04      	cmp	r3, #4
 80066f4:	d11b      	bne.n	800672e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80066f6:	78fb      	ldrb	r3, [r7, #3]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006702:	461a      	mov	r2, r3
 8006704:	2304      	movs	r3, #4
 8006706:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006708:	78fa      	ldrb	r2, [r7, #3]
 800670a:	6879      	ldr	r1, [r7, #4]
 800670c:	4613      	mov	r3, r2
 800670e:	011b      	lsls	r3, r3, #4
 8006710:	1a9b      	subs	r3, r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	440b      	add	r3, r1
 8006716:	334d      	adds	r3, #77	@ 0x4d
 8006718:	2207      	movs	r2, #7
 800671a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	78fa      	ldrb	r2, [r7, #3]
 8006722:	4611      	mov	r1, r2
 8006724:	4618      	mov	r0, r3
 8006726:	f005 f88a 	bl	800b83e <USB_HC_Halt>
 800672a:	f000 bc89 	b.w	8007040 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	78fa      	ldrb	r2, [r7, #3]
 8006734:	4611      	mov	r1, r2
 8006736:	4618      	mov	r0, r3
 8006738:	f004 fadd 	bl	800acf6 <USB_ReadChInterrupts>
 800673c:	4603      	mov	r3, r0
 800673e:	f003 0320 	and.w	r3, r3, #32
 8006742:	2b20      	cmp	r3, #32
 8006744:	f040 8082 	bne.w	800684c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006748:	78fb      	ldrb	r3, [r7, #3]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	4413      	add	r3, r2
 8006750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006754:	461a      	mov	r2, r3
 8006756:	2320      	movs	r3, #32
 8006758:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800675a:	78fa      	ldrb	r2, [r7, #3]
 800675c:	6879      	ldr	r1, [r7, #4]
 800675e:	4613      	mov	r3, r2
 8006760:	011b      	lsls	r3, r3, #4
 8006762:	1a9b      	subs	r3, r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	440b      	add	r3, r1
 8006768:	3319      	adds	r3, #25
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d124      	bne.n	80067ba <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8006770:	78fa      	ldrb	r2, [r7, #3]
 8006772:	6879      	ldr	r1, [r7, #4]
 8006774:	4613      	mov	r3, r2
 8006776:	011b      	lsls	r3, r3, #4
 8006778:	1a9b      	subs	r3, r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	440b      	add	r3, r1
 800677e:	3319      	adds	r3, #25
 8006780:	2200      	movs	r2, #0
 8006782:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006784:	78fa      	ldrb	r2, [r7, #3]
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	4613      	mov	r3, r2
 800678a:	011b      	lsls	r3, r3, #4
 800678c:	1a9b      	subs	r3, r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	440b      	add	r3, r1
 8006792:	334c      	adds	r3, #76	@ 0x4c
 8006794:	2202      	movs	r2, #2
 8006796:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8006798:	78fa      	ldrb	r2, [r7, #3]
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	4613      	mov	r3, r2
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	1a9b      	subs	r3, r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	440b      	add	r3, r1
 80067a6:	334d      	adds	r3, #77	@ 0x4d
 80067a8:	2203      	movs	r2, #3
 80067aa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	78fa      	ldrb	r2, [r7, #3]
 80067b2:	4611      	mov	r1, r2
 80067b4:	4618      	mov	r0, r3
 80067b6:	f005 f842 	bl	800b83e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80067ba:	78fa      	ldrb	r2, [r7, #3]
 80067bc:	6879      	ldr	r1, [r7, #4]
 80067be:	4613      	mov	r3, r2
 80067c0:	011b      	lsls	r3, r3, #4
 80067c2:	1a9b      	subs	r3, r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	440b      	add	r3, r1
 80067c8:	331a      	adds	r3, #26
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	f040 8437 	bne.w	8007040 <HCD_HC_OUT_IRQHandler+0x978>
 80067d2:	78fa      	ldrb	r2, [r7, #3]
 80067d4:	6879      	ldr	r1, [r7, #4]
 80067d6:	4613      	mov	r3, r2
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	1a9b      	subs	r3, r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	440b      	add	r3, r1
 80067e0:	331b      	adds	r3, #27
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f040 842b 	bne.w	8007040 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80067ea:	78fa      	ldrb	r2, [r7, #3]
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	4613      	mov	r3, r2
 80067f0:	011b      	lsls	r3, r3, #4
 80067f2:	1a9b      	subs	r3, r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	440b      	add	r3, r1
 80067f8:	3326      	adds	r3, #38	@ 0x26
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d009      	beq.n	8006814 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8006800:	78fa      	ldrb	r2, [r7, #3]
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	4613      	mov	r3, r2
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	1a9b      	subs	r3, r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	440b      	add	r3, r1
 800680e:	331b      	adds	r3, #27
 8006810:	2201      	movs	r2, #1
 8006812:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8006814:	78fa      	ldrb	r2, [r7, #3]
 8006816:	6879      	ldr	r1, [r7, #4]
 8006818:	4613      	mov	r3, r2
 800681a:	011b      	lsls	r3, r3, #4
 800681c:	1a9b      	subs	r3, r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	440b      	add	r3, r1
 8006822:	334d      	adds	r3, #77	@ 0x4d
 8006824:	2203      	movs	r2, #3
 8006826:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	78fa      	ldrb	r2, [r7, #3]
 800682e:	4611      	mov	r1, r2
 8006830:	4618      	mov	r0, r3
 8006832:	f005 f804 	bl	800b83e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8006836:	78fa      	ldrb	r2, [r7, #3]
 8006838:	6879      	ldr	r1, [r7, #4]
 800683a:	4613      	mov	r3, r2
 800683c:	011b      	lsls	r3, r3, #4
 800683e:	1a9b      	subs	r3, r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	440b      	add	r3, r1
 8006844:	3344      	adds	r3, #68	@ 0x44
 8006846:	2200      	movs	r2, #0
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	e3f9      	b.n	8007040 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	78fa      	ldrb	r2, [r7, #3]
 8006852:	4611      	mov	r1, r2
 8006854:	4618      	mov	r0, r3
 8006856:	f004 fa4e 	bl	800acf6 <USB_ReadChInterrupts>
 800685a:	4603      	mov	r3, r0
 800685c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006864:	d111      	bne.n	800688a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8006866:	78fb      	ldrb	r3, [r7, #3]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	4413      	add	r3, r2
 800686e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006872:	461a      	mov	r2, r3
 8006874:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006878:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	78fa      	ldrb	r2, [r7, #3]
 8006880:	4611      	mov	r1, r2
 8006882:	4618      	mov	r0, r3
 8006884:	f004 ffdb 	bl	800b83e <USB_HC_Halt>
 8006888:	e3da      	b.n	8007040 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	78fa      	ldrb	r2, [r7, #3]
 8006890:	4611      	mov	r1, r2
 8006892:	4618      	mov	r0, r3
 8006894:	f004 fa2f 	bl	800acf6 <USB_ReadChInterrupts>
 8006898:	4603      	mov	r3, r0
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d168      	bne.n	8006974 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80068a2:	78fa      	ldrb	r2, [r7, #3]
 80068a4:	6879      	ldr	r1, [r7, #4]
 80068a6:	4613      	mov	r3, r2
 80068a8:	011b      	lsls	r3, r3, #4
 80068aa:	1a9b      	subs	r3, r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	440b      	add	r3, r1
 80068b0:	3344      	adds	r3, #68	@ 0x44
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	78fa      	ldrb	r2, [r7, #3]
 80068bc:	4611      	mov	r1, r2
 80068be:	4618      	mov	r0, r3
 80068c0:	f004 fa19 	bl	800acf6 <USB_ReadChInterrupts>
 80068c4:	4603      	mov	r3, r0
 80068c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ca:	2b40      	cmp	r3, #64	@ 0x40
 80068cc:	d112      	bne.n	80068f4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80068ce:	78fa      	ldrb	r2, [r7, #3]
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	4613      	mov	r3, r2
 80068d4:	011b      	lsls	r3, r3, #4
 80068d6:	1a9b      	subs	r3, r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	440b      	add	r3, r1
 80068dc:	3319      	adds	r3, #25
 80068de:	2201      	movs	r2, #1
 80068e0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80068e2:	78fb      	ldrb	r3, [r7, #3]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068ee:	461a      	mov	r2, r3
 80068f0:	2340      	movs	r3, #64	@ 0x40
 80068f2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80068f4:	78fa      	ldrb	r2, [r7, #3]
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	4613      	mov	r3, r2
 80068fa:	011b      	lsls	r3, r3, #4
 80068fc:	1a9b      	subs	r3, r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	440b      	add	r3, r1
 8006902:	331b      	adds	r3, #27
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d019      	beq.n	800693e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800690a:	78fa      	ldrb	r2, [r7, #3]
 800690c:	6879      	ldr	r1, [r7, #4]
 800690e:	4613      	mov	r3, r2
 8006910:	011b      	lsls	r3, r3, #4
 8006912:	1a9b      	subs	r3, r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	440b      	add	r3, r1
 8006918:	331b      	adds	r3, #27
 800691a:	2200      	movs	r2, #0
 800691c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800691e:	78fb      	ldrb	r3, [r7, #3]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	4413      	add	r3, r2
 8006926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	78fa      	ldrb	r2, [r7, #3]
 800692e:	0151      	lsls	r1, r2, #5
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	440a      	add	r2, r1
 8006934:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006938:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800693c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800693e:	78fb      	ldrb	r3, [r7, #3]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	4413      	add	r3, r2
 8006946:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800694a:	461a      	mov	r2, r3
 800694c:	2301      	movs	r3, #1
 800694e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8006950:	78fa      	ldrb	r2, [r7, #3]
 8006952:	6879      	ldr	r1, [r7, #4]
 8006954:	4613      	mov	r3, r2
 8006956:	011b      	lsls	r3, r3, #4
 8006958:	1a9b      	subs	r3, r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	440b      	add	r3, r1
 800695e:	334d      	adds	r3, #77	@ 0x4d
 8006960:	2201      	movs	r2, #1
 8006962:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	78fa      	ldrb	r2, [r7, #3]
 800696a:	4611      	mov	r1, r2
 800696c:	4618      	mov	r0, r3
 800696e:	f004 ff66 	bl	800b83e <USB_HC_Halt>
 8006972:	e365      	b.n	8007040 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	78fa      	ldrb	r2, [r7, #3]
 800697a:	4611      	mov	r1, r2
 800697c:	4618      	mov	r0, r3
 800697e:	f004 f9ba 	bl	800acf6 <USB_ReadChInterrupts>
 8006982:	4603      	mov	r3, r0
 8006984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006988:	2b40      	cmp	r3, #64	@ 0x40
 800698a:	d139      	bne.n	8006a00 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800698c:	78fa      	ldrb	r2, [r7, #3]
 800698e:	6879      	ldr	r1, [r7, #4]
 8006990:	4613      	mov	r3, r2
 8006992:	011b      	lsls	r3, r3, #4
 8006994:	1a9b      	subs	r3, r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	440b      	add	r3, r1
 800699a:	334d      	adds	r3, #77	@ 0x4d
 800699c:	2205      	movs	r2, #5
 800699e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80069a0:	78fa      	ldrb	r2, [r7, #3]
 80069a2:	6879      	ldr	r1, [r7, #4]
 80069a4:	4613      	mov	r3, r2
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	1a9b      	subs	r3, r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	440b      	add	r3, r1
 80069ae:	331a      	adds	r3, #26
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d109      	bne.n	80069ca <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80069b6:	78fa      	ldrb	r2, [r7, #3]
 80069b8:	6879      	ldr	r1, [r7, #4]
 80069ba:	4613      	mov	r3, r2
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	1a9b      	subs	r3, r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	440b      	add	r3, r1
 80069c4:	3319      	adds	r3, #25
 80069c6:	2201      	movs	r2, #1
 80069c8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80069ca:	78fa      	ldrb	r2, [r7, #3]
 80069cc:	6879      	ldr	r1, [r7, #4]
 80069ce:	4613      	mov	r3, r2
 80069d0:	011b      	lsls	r3, r3, #4
 80069d2:	1a9b      	subs	r3, r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	440b      	add	r3, r1
 80069d8:	3344      	adds	r3, #68	@ 0x44
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	78fa      	ldrb	r2, [r7, #3]
 80069e4:	4611      	mov	r1, r2
 80069e6:	4618      	mov	r0, r3
 80069e8:	f004 ff29 	bl	800b83e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80069ec:	78fb      	ldrb	r3, [r7, #3]
 80069ee:	015a      	lsls	r2, r3, #5
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	4413      	add	r3, r2
 80069f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069f8:	461a      	mov	r2, r3
 80069fa:	2340      	movs	r3, #64	@ 0x40
 80069fc:	6093      	str	r3, [r2, #8]
 80069fe:	e31f      	b.n	8007040 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	78fa      	ldrb	r2, [r7, #3]
 8006a06:	4611      	mov	r1, r2
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f004 f974 	bl	800acf6 <USB_ReadChInterrupts>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	f003 0308 	and.w	r3, r3, #8
 8006a14:	2b08      	cmp	r3, #8
 8006a16:	d11a      	bne.n	8006a4e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006a18:	78fb      	ldrb	r3, [r7, #3]
 8006a1a:	015a      	lsls	r2, r3, #5
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a24:	461a      	mov	r2, r3
 8006a26:	2308      	movs	r3, #8
 8006a28:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006a2a:	78fa      	ldrb	r2, [r7, #3]
 8006a2c:	6879      	ldr	r1, [r7, #4]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	011b      	lsls	r3, r3, #4
 8006a32:	1a9b      	subs	r3, r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	440b      	add	r3, r1
 8006a38:	334d      	adds	r3, #77	@ 0x4d
 8006a3a:	2206      	movs	r2, #6
 8006a3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	78fa      	ldrb	r2, [r7, #3]
 8006a44:	4611      	mov	r1, r2
 8006a46:	4618      	mov	r0, r3
 8006a48:	f004 fef9 	bl	800b83e <USB_HC_Halt>
 8006a4c:	e2f8      	b.n	8007040 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	78fa      	ldrb	r2, [r7, #3]
 8006a54:	4611      	mov	r1, r2
 8006a56:	4618      	mov	r0, r3
 8006a58:	f004 f94d 	bl	800acf6 <USB_ReadChInterrupts>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	f003 0310 	and.w	r3, r3, #16
 8006a62:	2b10      	cmp	r3, #16
 8006a64:	d144      	bne.n	8006af0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006a66:	78fa      	ldrb	r2, [r7, #3]
 8006a68:	6879      	ldr	r1, [r7, #4]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	011b      	lsls	r3, r3, #4
 8006a6e:	1a9b      	subs	r3, r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	440b      	add	r3, r1
 8006a74:	3344      	adds	r3, #68	@ 0x44
 8006a76:	2200      	movs	r2, #0
 8006a78:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8006a7a:	78fa      	ldrb	r2, [r7, #3]
 8006a7c:	6879      	ldr	r1, [r7, #4]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	011b      	lsls	r3, r3, #4
 8006a82:	1a9b      	subs	r3, r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	440b      	add	r3, r1
 8006a88:	334d      	adds	r3, #77	@ 0x4d
 8006a8a:	2204      	movs	r2, #4
 8006a8c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8006a8e:	78fa      	ldrb	r2, [r7, #3]
 8006a90:	6879      	ldr	r1, [r7, #4]
 8006a92:	4613      	mov	r3, r2
 8006a94:	011b      	lsls	r3, r3, #4
 8006a96:	1a9b      	subs	r3, r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	440b      	add	r3, r1
 8006a9c:	3319      	adds	r3, #25
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d114      	bne.n	8006ace <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8006aa4:	78fa      	ldrb	r2, [r7, #3]
 8006aa6:	6879      	ldr	r1, [r7, #4]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	011b      	lsls	r3, r3, #4
 8006aac:	1a9b      	subs	r3, r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	440b      	add	r3, r1
 8006ab2:	3318      	adds	r3, #24
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d109      	bne.n	8006ace <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8006aba:	78fa      	ldrb	r2, [r7, #3]
 8006abc:	6879      	ldr	r1, [r7, #4]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	011b      	lsls	r3, r3, #4
 8006ac2:	1a9b      	subs	r3, r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	440b      	add	r3, r1
 8006ac8:	3319      	adds	r3, #25
 8006aca:	2201      	movs	r2, #1
 8006acc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	78fa      	ldrb	r2, [r7, #3]
 8006ad4:	4611      	mov	r1, r2
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f004 feb1 	bl	800b83e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006adc:	78fb      	ldrb	r3, [r7, #3]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ae8:	461a      	mov	r2, r3
 8006aea:	2310      	movs	r3, #16
 8006aec:	6093      	str	r3, [r2, #8]
 8006aee:	e2a7      	b.n	8007040 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	78fa      	ldrb	r2, [r7, #3]
 8006af6:	4611      	mov	r1, r2
 8006af8:	4618      	mov	r0, r3
 8006afa:	f004 f8fc 	bl	800acf6 <USB_ReadChInterrupts>
 8006afe:	4603      	mov	r3, r0
 8006b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b04:	2b80      	cmp	r3, #128	@ 0x80
 8006b06:	f040 8083 	bne.w	8006c10 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	799b      	ldrb	r3, [r3, #6]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d111      	bne.n	8006b36 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8006b12:	78fa      	ldrb	r2, [r7, #3]
 8006b14:	6879      	ldr	r1, [r7, #4]
 8006b16:	4613      	mov	r3, r2
 8006b18:	011b      	lsls	r3, r3, #4
 8006b1a:	1a9b      	subs	r3, r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	440b      	add	r3, r1
 8006b20:	334d      	adds	r3, #77	@ 0x4d
 8006b22:	2207      	movs	r2, #7
 8006b24:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	78fa      	ldrb	r2, [r7, #3]
 8006b2c:	4611      	mov	r1, r2
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f004 fe85 	bl	800b83e <USB_HC_Halt>
 8006b34:	e062      	b.n	8006bfc <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8006b36:	78fa      	ldrb	r2, [r7, #3]
 8006b38:	6879      	ldr	r1, [r7, #4]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	011b      	lsls	r3, r3, #4
 8006b3e:	1a9b      	subs	r3, r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	440b      	add	r3, r1
 8006b44:	3344      	adds	r3, #68	@ 0x44
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	1c59      	adds	r1, r3, #1
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	011b      	lsls	r3, r3, #4
 8006b50:	1a9b      	subs	r3, r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4403      	add	r3, r0
 8006b56:	3344      	adds	r3, #68	@ 0x44
 8006b58:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006b5a:	78fa      	ldrb	r2, [r7, #3]
 8006b5c:	6879      	ldr	r1, [r7, #4]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	011b      	lsls	r3, r3, #4
 8006b62:	1a9b      	subs	r3, r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	440b      	add	r3, r1
 8006b68:	3344      	adds	r3, #68	@ 0x44
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d922      	bls.n	8006bb6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006b70:	78fa      	ldrb	r2, [r7, #3]
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	4613      	mov	r3, r2
 8006b76:	011b      	lsls	r3, r3, #4
 8006b78:	1a9b      	subs	r3, r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	440b      	add	r3, r1
 8006b7e:	3344      	adds	r3, #68	@ 0x44
 8006b80:	2200      	movs	r2, #0
 8006b82:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006b84:	78fa      	ldrb	r2, [r7, #3]
 8006b86:	6879      	ldr	r1, [r7, #4]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	011b      	lsls	r3, r3, #4
 8006b8c:	1a9b      	subs	r3, r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	440b      	add	r3, r1
 8006b92:	334c      	adds	r3, #76	@ 0x4c
 8006b94:	2204      	movs	r2, #4
 8006b96:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006b98:	78fa      	ldrb	r2, [r7, #3]
 8006b9a:	6879      	ldr	r1, [r7, #4]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	1a9b      	subs	r3, r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	440b      	add	r3, r1
 8006ba6:	334c      	adds	r3, #76	@ 0x4c
 8006ba8:	781a      	ldrb	r2, [r3, #0]
 8006baa:	78fb      	ldrb	r3, [r7, #3]
 8006bac:	4619      	mov	r1, r3
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f007 fee8 	bl	800e984 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006bb4:	e022      	b.n	8006bfc <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006bb6:	78fa      	ldrb	r2, [r7, #3]
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	011b      	lsls	r3, r3, #4
 8006bbe:	1a9b      	subs	r3, r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	440b      	add	r3, r1
 8006bc4:	334c      	adds	r3, #76	@ 0x4c
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006bca:	78fb      	ldrb	r3, [r7, #3]
 8006bcc:	015a      	lsls	r2, r3, #5
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006be0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006be8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006bea:	78fb      	ldrb	r3, [r7, #3]
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006bfc:	78fb      	ldrb	r3, [r7, #3]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c08:	461a      	mov	r2, r3
 8006c0a:	2380      	movs	r3, #128	@ 0x80
 8006c0c:	6093      	str	r3, [r2, #8]
 8006c0e:	e217      	b.n	8007040 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	78fa      	ldrb	r2, [r7, #3]
 8006c16:	4611      	mov	r1, r2
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f004 f86c 	bl	800acf6 <USB_ReadChInterrupts>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c28:	d11b      	bne.n	8006c62 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006c2a:	78fa      	ldrb	r2, [r7, #3]
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	011b      	lsls	r3, r3, #4
 8006c32:	1a9b      	subs	r3, r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	440b      	add	r3, r1
 8006c38:	334d      	adds	r3, #77	@ 0x4d
 8006c3a:	2209      	movs	r2, #9
 8006c3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	78fa      	ldrb	r2, [r7, #3]
 8006c44:	4611      	mov	r1, r2
 8006c46:	4618      	mov	r0, r3
 8006c48:	f004 fdf9 	bl	800b83e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006c4c:	78fb      	ldrb	r3, [r7, #3]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c58:	461a      	mov	r2, r3
 8006c5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c5e:	6093      	str	r3, [r2, #8]
 8006c60:	e1ee      	b.n	8007040 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	78fa      	ldrb	r2, [r7, #3]
 8006c68:	4611      	mov	r1, r2
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f004 f843 	bl	800acf6 <USB_ReadChInterrupts>
 8006c70:	4603      	mov	r3, r0
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	f040 81df 	bne.w	800703a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006c7c:	78fb      	ldrb	r3, [r7, #3]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c88:	461a      	mov	r2, r3
 8006c8a:	2302      	movs	r3, #2
 8006c8c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006c8e:	78fa      	ldrb	r2, [r7, #3]
 8006c90:	6879      	ldr	r1, [r7, #4]
 8006c92:	4613      	mov	r3, r2
 8006c94:	011b      	lsls	r3, r3, #4
 8006c96:	1a9b      	subs	r3, r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	440b      	add	r3, r1
 8006c9c:	334d      	adds	r3, #77	@ 0x4d
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	f040 8093 	bne.w	8006dcc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006ca6:	78fa      	ldrb	r2, [r7, #3]
 8006ca8:	6879      	ldr	r1, [r7, #4]
 8006caa:	4613      	mov	r3, r2
 8006cac:	011b      	lsls	r3, r3, #4
 8006cae:	1a9b      	subs	r3, r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	440b      	add	r3, r1
 8006cb4:	334d      	adds	r3, #77	@ 0x4d
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006cba:	78fa      	ldrb	r2, [r7, #3]
 8006cbc:	6879      	ldr	r1, [r7, #4]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	011b      	lsls	r3, r3, #4
 8006cc2:	1a9b      	subs	r3, r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	440b      	add	r3, r1
 8006cc8:	334c      	adds	r3, #76	@ 0x4c
 8006cca:	2201      	movs	r2, #1
 8006ccc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006cce:	78fa      	ldrb	r2, [r7, #3]
 8006cd0:	6879      	ldr	r1, [r7, #4]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	011b      	lsls	r3, r3, #4
 8006cd6:	1a9b      	subs	r3, r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	440b      	add	r3, r1
 8006cdc:	3326      	adds	r3, #38	@ 0x26
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d00b      	beq.n	8006cfc <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8006ce4:	78fa      	ldrb	r2, [r7, #3]
 8006ce6:	6879      	ldr	r1, [r7, #4]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	011b      	lsls	r3, r3, #4
 8006cec:	1a9b      	subs	r3, r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	440b      	add	r3, r1
 8006cf2:	3326      	adds	r3, #38	@ 0x26
 8006cf4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	f040 8190 	bne.w	800701c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	799b      	ldrb	r3, [r3, #6]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d115      	bne.n	8006d30 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8006d04:	78fa      	ldrb	r2, [r7, #3]
 8006d06:	6879      	ldr	r1, [r7, #4]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	1a9b      	subs	r3, r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	440b      	add	r3, r1
 8006d12:	333d      	adds	r3, #61	@ 0x3d
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	78fa      	ldrb	r2, [r7, #3]
 8006d18:	f083 0301 	eor.w	r3, r3, #1
 8006d1c:	b2d8      	uxtb	r0, r3
 8006d1e:	6879      	ldr	r1, [r7, #4]
 8006d20:	4613      	mov	r3, r2
 8006d22:	011b      	lsls	r3, r3, #4
 8006d24:	1a9b      	subs	r3, r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	440b      	add	r3, r1
 8006d2a:	333d      	adds	r3, #61	@ 0x3d
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	799b      	ldrb	r3, [r3, #6]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	f040 8171 	bne.w	800701c <HCD_HC_OUT_IRQHandler+0x954>
 8006d3a:	78fa      	ldrb	r2, [r7, #3]
 8006d3c:	6879      	ldr	r1, [r7, #4]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	011b      	lsls	r3, r3, #4
 8006d42:	1a9b      	subs	r3, r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	440b      	add	r3, r1
 8006d48:	3334      	adds	r3, #52	@ 0x34
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 8165 	beq.w	800701c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8006d52:	78fa      	ldrb	r2, [r7, #3]
 8006d54:	6879      	ldr	r1, [r7, #4]
 8006d56:	4613      	mov	r3, r2
 8006d58:	011b      	lsls	r3, r3, #4
 8006d5a:	1a9b      	subs	r3, r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	440b      	add	r3, r1
 8006d60:	3334      	adds	r3, #52	@ 0x34
 8006d62:	6819      	ldr	r1, [r3, #0]
 8006d64:	78fa      	ldrb	r2, [r7, #3]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	011b      	lsls	r3, r3, #4
 8006d6c:	1a9b      	subs	r3, r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4403      	add	r3, r0
 8006d72:	3328      	adds	r3, #40	@ 0x28
 8006d74:	881b      	ldrh	r3, [r3, #0]
 8006d76:	440b      	add	r3, r1
 8006d78:	1e59      	subs	r1, r3, #1
 8006d7a:	78fa      	ldrb	r2, [r7, #3]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	011b      	lsls	r3, r3, #4
 8006d82:	1a9b      	subs	r3, r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4403      	add	r3, r0
 8006d88:	3328      	adds	r3, #40	@ 0x28
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d90:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 813f 	beq.w	800701c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006d9e:	78fa      	ldrb	r2, [r7, #3]
 8006da0:	6879      	ldr	r1, [r7, #4]
 8006da2:	4613      	mov	r3, r2
 8006da4:	011b      	lsls	r3, r3, #4
 8006da6:	1a9b      	subs	r3, r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	440b      	add	r3, r1
 8006dac:	333d      	adds	r3, #61	@ 0x3d
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	78fa      	ldrb	r2, [r7, #3]
 8006db2:	f083 0301 	eor.w	r3, r3, #1
 8006db6:	b2d8      	uxtb	r0, r3
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	011b      	lsls	r3, r3, #4
 8006dbe:	1a9b      	subs	r3, r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	440b      	add	r3, r1
 8006dc4:	333d      	adds	r3, #61	@ 0x3d
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	701a      	strb	r2, [r3, #0]
 8006dca:	e127      	b.n	800701c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006dcc:	78fa      	ldrb	r2, [r7, #3]
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	1a9b      	subs	r3, r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	440b      	add	r3, r1
 8006dda:	334d      	adds	r3, #77	@ 0x4d
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	2b03      	cmp	r3, #3
 8006de0:	d120      	bne.n	8006e24 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006de2:	78fa      	ldrb	r2, [r7, #3]
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	4613      	mov	r3, r2
 8006de8:	011b      	lsls	r3, r3, #4
 8006dea:	1a9b      	subs	r3, r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	440b      	add	r3, r1
 8006df0:	334d      	adds	r3, #77	@ 0x4d
 8006df2:	2202      	movs	r2, #2
 8006df4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006df6:	78fa      	ldrb	r2, [r7, #3]
 8006df8:	6879      	ldr	r1, [r7, #4]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	011b      	lsls	r3, r3, #4
 8006dfe:	1a9b      	subs	r3, r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	440b      	add	r3, r1
 8006e04:	331b      	adds	r3, #27
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	f040 8107 	bne.w	800701c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006e0e:	78fa      	ldrb	r2, [r7, #3]
 8006e10:	6879      	ldr	r1, [r7, #4]
 8006e12:	4613      	mov	r3, r2
 8006e14:	011b      	lsls	r3, r3, #4
 8006e16:	1a9b      	subs	r3, r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	440b      	add	r3, r1
 8006e1c:	334c      	adds	r3, #76	@ 0x4c
 8006e1e:	2202      	movs	r2, #2
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	e0fb      	b.n	800701c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006e24:	78fa      	ldrb	r2, [r7, #3]
 8006e26:	6879      	ldr	r1, [r7, #4]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	011b      	lsls	r3, r3, #4
 8006e2c:	1a9b      	subs	r3, r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	440b      	add	r3, r1
 8006e32:	334d      	adds	r3, #77	@ 0x4d
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	d13a      	bne.n	8006eb0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006e3a:	78fa      	ldrb	r2, [r7, #3]
 8006e3c:	6879      	ldr	r1, [r7, #4]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	011b      	lsls	r3, r3, #4
 8006e42:	1a9b      	subs	r3, r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	440b      	add	r3, r1
 8006e48:	334d      	adds	r3, #77	@ 0x4d
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006e4e:	78fa      	ldrb	r2, [r7, #3]
 8006e50:	6879      	ldr	r1, [r7, #4]
 8006e52:	4613      	mov	r3, r2
 8006e54:	011b      	lsls	r3, r3, #4
 8006e56:	1a9b      	subs	r3, r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	440b      	add	r3, r1
 8006e5c:	334c      	adds	r3, #76	@ 0x4c
 8006e5e:	2202      	movs	r2, #2
 8006e60:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006e62:	78fa      	ldrb	r2, [r7, #3]
 8006e64:	6879      	ldr	r1, [r7, #4]
 8006e66:	4613      	mov	r3, r2
 8006e68:	011b      	lsls	r3, r3, #4
 8006e6a:	1a9b      	subs	r3, r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	440b      	add	r3, r1
 8006e70:	331b      	adds	r3, #27
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	f040 80d1 	bne.w	800701c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8006e7a:	78fa      	ldrb	r2, [r7, #3]
 8006e7c:	6879      	ldr	r1, [r7, #4]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	011b      	lsls	r3, r3, #4
 8006e82:	1a9b      	subs	r3, r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	440b      	add	r3, r1
 8006e88:	331b      	adds	r3, #27
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006e8e:	78fb      	ldrb	r3, [r7, #3]
 8006e90:	015a      	lsls	r2, r3, #5
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	4413      	add	r3, r2
 8006e96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	78fa      	ldrb	r2, [r7, #3]
 8006e9e:	0151      	lsls	r1, r2, #5
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	440a      	add	r2, r1
 8006ea4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ea8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006eac:	6053      	str	r3, [r2, #4]
 8006eae:	e0b5      	b.n	800701c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006eb0:	78fa      	ldrb	r2, [r7, #3]
 8006eb2:	6879      	ldr	r1, [r7, #4]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	011b      	lsls	r3, r3, #4
 8006eb8:	1a9b      	subs	r3, r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	440b      	add	r3, r1
 8006ebe:	334d      	adds	r3, #77	@ 0x4d
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	2b05      	cmp	r3, #5
 8006ec4:	d114      	bne.n	8006ef0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006ec6:	78fa      	ldrb	r2, [r7, #3]
 8006ec8:	6879      	ldr	r1, [r7, #4]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	011b      	lsls	r3, r3, #4
 8006ece:	1a9b      	subs	r3, r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	440b      	add	r3, r1
 8006ed4:	334d      	adds	r3, #77	@ 0x4d
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8006eda:	78fa      	ldrb	r2, [r7, #3]
 8006edc:	6879      	ldr	r1, [r7, #4]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	011b      	lsls	r3, r3, #4
 8006ee2:	1a9b      	subs	r3, r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	440b      	add	r3, r1
 8006ee8:	334c      	adds	r3, #76	@ 0x4c
 8006eea:	2202      	movs	r2, #2
 8006eec:	701a      	strb	r2, [r3, #0]
 8006eee:	e095      	b.n	800701c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006ef0:	78fa      	ldrb	r2, [r7, #3]
 8006ef2:	6879      	ldr	r1, [r7, #4]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	011b      	lsls	r3, r3, #4
 8006ef8:	1a9b      	subs	r3, r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	440b      	add	r3, r1
 8006efe:	334d      	adds	r3, #77	@ 0x4d
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	2b06      	cmp	r3, #6
 8006f04:	d114      	bne.n	8006f30 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006f06:	78fa      	ldrb	r2, [r7, #3]
 8006f08:	6879      	ldr	r1, [r7, #4]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	011b      	lsls	r3, r3, #4
 8006f0e:	1a9b      	subs	r3, r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	440b      	add	r3, r1
 8006f14:	334d      	adds	r3, #77	@ 0x4d
 8006f16:	2202      	movs	r2, #2
 8006f18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8006f1a:	78fa      	ldrb	r2, [r7, #3]
 8006f1c:	6879      	ldr	r1, [r7, #4]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	011b      	lsls	r3, r3, #4
 8006f22:	1a9b      	subs	r3, r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	440b      	add	r3, r1
 8006f28:	334c      	adds	r3, #76	@ 0x4c
 8006f2a:	2205      	movs	r2, #5
 8006f2c:	701a      	strb	r2, [r3, #0]
 8006f2e:	e075      	b.n	800701c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006f30:	78fa      	ldrb	r2, [r7, #3]
 8006f32:	6879      	ldr	r1, [r7, #4]
 8006f34:	4613      	mov	r3, r2
 8006f36:	011b      	lsls	r3, r3, #4
 8006f38:	1a9b      	subs	r3, r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	440b      	add	r3, r1
 8006f3e:	334d      	adds	r3, #77	@ 0x4d
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	2b07      	cmp	r3, #7
 8006f44:	d00a      	beq.n	8006f5c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006f46:	78fa      	ldrb	r2, [r7, #3]
 8006f48:	6879      	ldr	r1, [r7, #4]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	011b      	lsls	r3, r3, #4
 8006f4e:	1a9b      	subs	r3, r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	440b      	add	r3, r1
 8006f54:	334d      	adds	r3, #77	@ 0x4d
 8006f56:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006f58:	2b09      	cmp	r3, #9
 8006f5a:	d170      	bne.n	800703e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006f5c:	78fa      	ldrb	r2, [r7, #3]
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	4613      	mov	r3, r2
 8006f62:	011b      	lsls	r3, r3, #4
 8006f64:	1a9b      	subs	r3, r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	440b      	add	r3, r1
 8006f6a:	334d      	adds	r3, #77	@ 0x4d
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006f70:	78fa      	ldrb	r2, [r7, #3]
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	4613      	mov	r3, r2
 8006f76:	011b      	lsls	r3, r3, #4
 8006f78:	1a9b      	subs	r3, r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	440b      	add	r3, r1
 8006f7e:	3344      	adds	r3, #68	@ 0x44
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	1c59      	adds	r1, r3, #1
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	4613      	mov	r3, r2
 8006f88:	011b      	lsls	r3, r3, #4
 8006f8a:	1a9b      	subs	r3, r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4403      	add	r3, r0
 8006f90:	3344      	adds	r3, #68	@ 0x44
 8006f92:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006f94:	78fa      	ldrb	r2, [r7, #3]
 8006f96:	6879      	ldr	r1, [r7, #4]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	011b      	lsls	r3, r3, #4
 8006f9c:	1a9b      	subs	r3, r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	440b      	add	r3, r1
 8006fa2:	3344      	adds	r3, #68	@ 0x44
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d914      	bls.n	8006fd4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006faa:	78fa      	ldrb	r2, [r7, #3]
 8006fac:	6879      	ldr	r1, [r7, #4]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	011b      	lsls	r3, r3, #4
 8006fb2:	1a9b      	subs	r3, r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	440b      	add	r3, r1
 8006fb8:	3344      	adds	r3, #68	@ 0x44
 8006fba:	2200      	movs	r2, #0
 8006fbc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006fbe:	78fa      	ldrb	r2, [r7, #3]
 8006fc0:	6879      	ldr	r1, [r7, #4]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	011b      	lsls	r3, r3, #4
 8006fc6:	1a9b      	subs	r3, r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	440b      	add	r3, r1
 8006fcc:	334c      	adds	r3, #76	@ 0x4c
 8006fce:	2204      	movs	r2, #4
 8006fd0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006fd2:	e022      	b.n	800701a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006fd4:	78fa      	ldrb	r2, [r7, #3]
 8006fd6:	6879      	ldr	r1, [r7, #4]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	011b      	lsls	r3, r3, #4
 8006fdc:	1a9b      	subs	r3, r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	440b      	add	r3, r1
 8006fe2:	334c      	adds	r3, #76	@ 0x4c
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006fe8:	78fb      	ldrb	r3, [r7, #3]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006ffe:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007006:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007008:	78fb      	ldrb	r3, [r7, #3]
 800700a:	015a      	lsls	r2, r3, #5
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	4413      	add	r3, r2
 8007010:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007014:	461a      	mov	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800701a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800701c:	78fa      	ldrb	r2, [r7, #3]
 800701e:	6879      	ldr	r1, [r7, #4]
 8007020:	4613      	mov	r3, r2
 8007022:	011b      	lsls	r3, r3, #4
 8007024:	1a9b      	subs	r3, r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	440b      	add	r3, r1
 800702a:	334c      	adds	r3, #76	@ 0x4c
 800702c:	781a      	ldrb	r2, [r3, #0]
 800702e:	78fb      	ldrb	r3, [r7, #3]
 8007030:	4619      	mov	r1, r3
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f007 fca6 	bl	800e984 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007038:	e002      	b.n	8007040 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800703a:	bf00      	nop
 800703c:	e000      	b.n	8007040 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800703e:	bf00      	nop
  }
}
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b08a      	sub	sp, #40	@ 0x28
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007056:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	f003 030f 	and.w	r3, r3, #15
 8007066:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	0c5b      	lsrs	r3, r3, #17
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	091b      	lsrs	r3, r3, #4
 8007076:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800707a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	2b02      	cmp	r3, #2
 8007080:	d004      	beq.n	800708c <HCD_RXQLVL_IRQHandler+0x46>
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2b05      	cmp	r3, #5
 8007086:	f000 80b6 	beq.w	80071f6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800708a:	e0b7      	b.n	80071fc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 80b3 	beq.w	80071fa <HCD_RXQLVL_IRQHandler+0x1b4>
 8007094:	6879      	ldr	r1, [r7, #4]
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	4613      	mov	r3, r2
 800709a:	011b      	lsls	r3, r3, #4
 800709c:	1a9b      	subs	r3, r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	440b      	add	r3, r1
 80070a2:	332c      	adds	r3, #44	@ 0x2c
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 80a7 	beq.w	80071fa <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	69ba      	ldr	r2, [r7, #24]
 80070b0:	4613      	mov	r3, r2
 80070b2:	011b      	lsls	r3, r3, #4
 80070b4:	1a9b      	subs	r3, r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	440b      	add	r3, r1
 80070ba:	3338      	adds	r3, #56	@ 0x38
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	18d1      	adds	r1, r2, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	4613      	mov	r3, r2
 80070c8:	011b      	lsls	r3, r3, #4
 80070ca:	1a9b      	subs	r3, r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4403      	add	r3, r0
 80070d0:	3334      	adds	r3, #52	@ 0x34
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4299      	cmp	r1, r3
 80070d6:	f200 8083 	bhi.w	80071e0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6818      	ldr	r0, [r3, #0]
 80070de:	6879      	ldr	r1, [r7, #4]
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	4613      	mov	r3, r2
 80070e4:	011b      	lsls	r3, r3, #4
 80070e6:	1a9b      	subs	r3, r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	440b      	add	r3, r1
 80070ec:	332c      	adds	r3, #44	@ 0x2c
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	b292      	uxth	r2, r2
 80070f4:	4619      	mov	r1, r3
 80070f6:	f003 fd93 	bl	800ac20 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80070fa:	6879      	ldr	r1, [r7, #4]
 80070fc:	69ba      	ldr	r2, [r7, #24]
 80070fe:	4613      	mov	r3, r2
 8007100:	011b      	lsls	r3, r3, #4
 8007102:	1a9b      	subs	r3, r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	440b      	add	r3, r1
 8007108:	332c      	adds	r3, #44	@ 0x2c
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	18d1      	adds	r1, r2, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	4613      	mov	r3, r2
 8007116:	011b      	lsls	r3, r3, #4
 8007118:	1a9b      	subs	r3, r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4403      	add	r3, r0
 800711e:	332c      	adds	r3, #44	@ 0x2c
 8007120:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8007122:	6879      	ldr	r1, [r7, #4]
 8007124:	69ba      	ldr	r2, [r7, #24]
 8007126:	4613      	mov	r3, r2
 8007128:	011b      	lsls	r3, r3, #4
 800712a:	1a9b      	subs	r3, r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	440b      	add	r3, r1
 8007130:	3338      	adds	r3, #56	@ 0x38
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	18d1      	adds	r1, r2, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	4613      	mov	r3, r2
 800713e:	011b      	lsls	r3, r3, #4
 8007140:	1a9b      	subs	r3, r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4403      	add	r3, r0
 8007146:	3338      	adds	r3, #56	@ 0x38
 8007148:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	4413      	add	r3, r2
 8007152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	0cdb      	lsrs	r3, r3, #19
 800715a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800715e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007160:	6879      	ldr	r1, [r7, #4]
 8007162:	69ba      	ldr	r2, [r7, #24]
 8007164:	4613      	mov	r3, r2
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	1a9b      	subs	r3, r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	440b      	add	r3, r1
 800716e:	3328      	adds	r3, #40	@ 0x28
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	461a      	mov	r2, r3
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	4293      	cmp	r3, r2
 8007178:	d13f      	bne.n	80071fa <HCD_RXQLVL_IRQHandler+0x1b4>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d03c      	beq.n	80071fa <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	015a      	lsls	r2, r3, #5
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	4413      	add	r3, r2
 8007188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007196:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800719e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071ac:	461a      	mov	r2, r3
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80071b2:	6879      	ldr	r1, [r7, #4]
 80071b4:	69ba      	ldr	r2, [r7, #24]
 80071b6:	4613      	mov	r3, r2
 80071b8:	011b      	lsls	r3, r3, #4
 80071ba:	1a9b      	subs	r3, r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	440b      	add	r3, r1
 80071c0:	333c      	adds	r3, #60	@ 0x3c
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	f083 0301 	eor.w	r3, r3, #1
 80071c8:	b2d8      	uxtb	r0, r3
 80071ca:	6879      	ldr	r1, [r7, #4]
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	4613      	mov	r3, r2
 80071d0:	011b      	lsls	r3, r3, #4
 80071d2:	1a9b      	subs	r3, r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	440b      	add	r3, r1
 80071d8:	333c      	adds	r3, #60	@ 0x3c
 80071da:	4602      	mov	r2, r0
 80071dc:	701a      	strb	r2, [r3, #0]
      break;
 80071de:	e00c      	b.n	80071fa <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80071e0:	6879      	ldr	r1, [r7, #4]
 80071e2:	69ba      	ldr	r2, [r7, #24]
 80071e4:	4613      	mov	r3, r2
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	1a9b      	subs	r3, r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	440b      	add	r3, r1
 80071ee:	334c      	adds	r3, #76	@ 0x4c
 80071f0:	2204      	movs	r2, #4
 80071f2:	701a      	strb	r2, [r3, #0]
      break;
 80071f4:	e001      	b.n	80071fa <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80071f6:	bf00      	nop
 80071f8:	e000      	b.n	80071fc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80071fa:	bf00      	nop
  }
}
 80071fc:	bf00      	nop
 80071fe:	3728      	adds	r7, #40	@ 0x28
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007230:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f003 0302 	and.w	r3, r3, #2
 8007238:	2b02      	cmp	r3, #2
 800723a:	d10b      	bne.n	8007254 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b01      	cmp	r3, #1
 8007244:	d102      	bne.n	800724c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f007 fb80 	bl	800e94c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f043 0302 	orr.w	r3, r3, #2
 8007252:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f003 0308 	and.w	r3, r3, #8
 800725a:	2b08      	cmp	r3, #8
 800725c:	d132      	bne.n	80072c4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	f043 0308 	orr.w	r3, r3, #8
 8007264:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f003 0304 	and.w	r3, r3, #4
 800726c:	2b04      	cmp	r3, #4
 800726e:	d126      	bne.n	80072be <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	7a5b      	ldrb	r3, [r3, #9]
 8007274:	2b02      	cmp	r3, #2
 8007276:	d113      	bne.n	80072a0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800727e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007282:	d106      	bne.n	8007292 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2102      	movs	r1, #2
 800728a:	4618      	mov	r0, r3
 800728c:	f003 fe58 	bl	800af40 <USB_InitFSLSPClkSel>
 8007290:	e011      	b.n	80072b6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2101      	movs	r1, #1
 8007298:	4618      	mov	r0, r3
 800729a:	f003 fe51 	bl	800af40 <USB_InitFSLSPClkSel>
 800729e:	e00a      	b.n	80072b6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	79db      	ldrb	r3, [r3, #7]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d106      	bne.n	80072b6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072ae:	461a      	mov	r2, r3
 80072b0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80072b4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f007 fb72 	bl	800e9a0 <HAL_HCD_PortEnabled_Callback>
 80072bc:	e002      	b.n	80072c4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f007 fb7c 	bl	800e9bc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f003 0320 	and.w	r3, r3, #32
 80072ca:	2b20      	cmp	r3, #32
 80072cc:	d103      	bne.n	80072d6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	f043 0320 	orr.w	r3, r3, #32
 80072d4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80072dc:	461a      	mov	r2, r3
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	6013      	str	r3, [r2, #0]
}
 80072e2:	bf00      	nop
 80072e4:	3718      	adds	r7, #24
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e267      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d075      	beq.n	80073f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800730a:	4b88      	ldr	r3, [pc, #544]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f003 030c 	and.w	r3, r3, #12
 8007312:	2b04      	cmp	r3, #4
 8007314:	d00c      	beq.n	8007330 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007316:	4b85      	ldr	r3, [pc, #532]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800731e:	2b08      	cmp	r3, #8
 8007320:	d112      	bne.n	8007348 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007322:	4b82      	ldr	r3, [pc, #520]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800732a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800732e:	d10b      	bne.n	8007348 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007330:	4b7e      	ldr	r3, [pc, #504]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d05b      	beq.n	80073f4 <HAL_RCC_OscConfig+0x108>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d157      	bne.n	80073f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e242      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007350:	d106      	bne.n	8007360 <HAL_RCC_OscConfig+0x74>
 8007352:	4b76      	ldr	r3, [pc, #472]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a75      	ldr	r2, [pc, #468]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 8007358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800735c:	6013      	str	r3, [r2, #0]
 800735e:	e01d      	b.n	800739c <HAL_RCC_OscConfig+0xb0>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007368:	d10c      	bne.n	8007384 <HAL_RCC_OscConfig+0x98>
 800736a:	4b70      	ldr	r3, [pc, #448]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a6f      	ldr	r2, [pc, #444]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 8007370:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	4b6d      	ldr	r3, [pc, #436]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a6c      	ldr	r2, [pc, #432]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 800737c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007380:	6013      	str	r3, [r2, #0]
 8007382:	e00b      	b.n	800739c <HAL_RCC_OscConfig+0xb0>
 8007384:	4b69      	ldr	r3, [pc, #420]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a68      	ldr	r2, [pc, #416]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 800738a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800738e:	6013      	str	r3, [r2, #0]
 8007390:	4b66      	ldr	r3, [pc, #408]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a65      	ldr	r2, [pc, #404]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 8007396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800739a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d013      	beq.n	80073cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073a4:	f7fd f890 	bl	80044c8 <HAL_GetTick>
 80073a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073aa:	e008      	b.n	80073be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073ac:	f7fd f88c 	bl	80044c8 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	2b64      	cmp	r3, #100	@ 0x64
 80073b8:	d901      	bls.n	80073be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e207      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073be:	4b5b      	ldr	r3, [pc, #364]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0f0      	beq.n	80073ac <HAL_RCC_OscConfig+0xc0>
 80073ca:	e014      	b.n	80073f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073cc:	f7fd f87c 	bl	80044c8 <HAL_GetTick>
 80073d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073d2:	e008      	b.n	80073e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073d4:	f7fd f878 	bl	80044c8 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b64      	cmp	r3, #100	@ 0x64
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e1f3      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073e6:	4b51      	ldr	r3, [pc, #324]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1f0      	bne.n	80073d4 <HAL_RCC_OscConfig+0xe8>
 80073f2:	e000      	b.n	80073f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0302 	and.w	r3, r3, #2
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d063      	beq.n	80074ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007402:	4b4a      	ldr	r3, [pc, #296]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f003 030c 	and.w	r3, r3, #12
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00b      	beq.n	8007426 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800740e:	4b47      	ldr	r3, [pc, #284]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007416:	2b08      	cmp	r3, #8
 8007418:	d11c      	bne.n	8007454 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800741a:	4b44      	ldr	r3, [pc, #272]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d116      	bne.n	8007454 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007426:	4b41      	ldr	r3, [pc, #260]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d005      	beq.n	800743e <HAL_RCC_OscConfig+0x152>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d001      	beq.n	800743e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e1c7      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800743e:	4b3b      	ldr	r3, [pc, #236]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	4937      	ldr	r1, [pc, #220]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 800744e:	4313      	orrs	r3, r2
 8007450:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007452:	e03a      	b.n	80074ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d020      	beq.n	800749e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800745c:	4b34      	ldr	r3, [pc, #208]	@ (8007530 <HAL_RCC_OscConfig+0x244>)
 800745e:	2201      	movs	r2, #1
 8007460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007462:	f7fd f831 	bl	80044c8 <HAL_GetTick>
 8007466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007468:	e008      	b.n	800747c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800746a:	f7fd f82d 	bl	80044c8 <HAL_GetTick>
 800746e:	4602      	mov	r2, r0
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	2b02      	cmp	r3, #2
 8007476:	d901      	bls.n	800747c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e1a8      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800747c:	4b2b      	ldr	r3, [pc, #172]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	2b00      	cmp	r3, #0
 8007486:	d0f0      	beq.n	800746a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007488:	4b28      	ldr	r3, [pc, #160]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	00db      	lsls	r3, r3, #3
 8007496:	4925      	ldr	r1, [pc, #148]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 8007498:	4313      	orrs	r3, r2
 800749a:	600b      	str	r3, [r1, #0]
 800749c:	e015      	b.n	80074ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800749e:	4b24      	ldr	r3, [pc, #144]	@ (8007530 <HAL_RCC_OscConfig+0x244>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a4:	f7fd f810 	bl	80044c8 <HAL_GetTick>
 80074a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074aa:	e008      	b.n	80074be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074ac:	f7fd f80c 	bl	80044c8 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d901      	bls.n	80074be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e187      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074be:	4b1b      	ldr	r3, [pc, #108]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1f0      	bne.n	80074ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0308 	and.w	r3, r3, #8
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d036      	beq.n	8007544 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d016      	beq.n	800750c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074de:	4b15      	ldr	r3, [pc, #84]	@ (8007534 <HAL_RCC_OscConfig+0x248>)
 80074e0:	2201      	movs	r2, #1
 80074e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074e4:	f7fc fff0 	bl	80044c8 <HAL_GetTick>
 80074e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074ea:	e008      	b.n	80074fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074ec:	f7fc ffec 	bl	80044c8 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d901      	bls.n	80074fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e167      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074fe:	4b0b      	ldr	r3, [pc, #44]	@ (800752c <HAL_RCC_OscConfig+0x240>)
 8007500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b00      	cmp	r3, #0
 8007508:	d0f0      	beq.n	80074ec <HAL_RCC_OscConfig+0x200>
 800750a:	e01b      	b.n	8007544 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800750c:	4b09      	ldr	r3, [pc, #36]	@ (8007534 <HAL_RCC_OscConfig+0x248>)
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007512:	f7fc ffd9 	bl	80044c8 <HAL_GetTick>
 8007516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007518:	e00e      	b.n	8007538 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800751a:	f7fc ffd5 	bl	80044c8 <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	2b02      	cmp	r3, #2
 8007526:	d907      	bls.n	8007538 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e150      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
 800752c:	40023800 	.word	0x40023800
 8007530:	42470000 	.word	0x42470000
 8007534:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007538:	4b88      	ldr	r3, [pc, #544]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 800753a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800753c:	f003 0302 	and.w	r3, r3, #2
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1ea      	bne.n	800751a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 8097 	beq.w	8007680 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007552:	2300      	movs	r3, #0
 8007554:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007556:	4b81      	ldr	r3, [pc, #516]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 8007558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10f      	bne.n	8007582 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007562:	2300      	movs	r3, #0
 8007564:	60bb      	str	r3, [r7, #8]
 8007566:	4b7d      	ldr	r3, [pc, #500]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 8007568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756a:	4a7c      	ldr	r2, [pc, #496]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 800756c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007570:	6413      	str	r3, [r2, #64]	@ 0x40
 8007572:	4b7a      	ldr	r3, [pc, #488]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 8007574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800757a:	60bb      	str	r3, [r7, #8]
 800757c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800757e:	2301      	movs	r3, #1
 8007580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007582:	4b77      	ldr	r3, [pc, #476]	@ (8007760 <HAL_RCC_OscConfig+0x474>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800758a:	2b00      	cmp	r3, #0
 800758c:	d118      	bne.n	80075c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800758e:	4b74      	ldr	r3, [pc, #464]	@ (8007760 <HAL_RCC_OscConfig+0x474>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a73      	ldr	r2, [pc, #460]	@ (8007760 <HAL_RCC_OscConfig+0x474>)
 8007594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800759a:	f7fc ff95 	bl	80044c8 <HAL_GetTick>
 800759e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075a0:	e008      	b.n	80075b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075a2:	f7fc ff91 	bl	80044c8 <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d901      	bls.n	80075b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e10c      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075b4:	4b6a      	ldr	r3, [pc, #424]	@ (8007760 <HAL_RCC_OscConfig+0x474>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d0f0      	beq.n	80075a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d106      	bne.n	80075d6 <HAL_RCC_OscConfig+0x2ea>
 80075c8:	4b64      	ldr	r3, [pc, #400]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 80075ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075cc:	4a63      	ldr	r2, [pc, #396]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 80075ce:	f043 0301 	orr.w	r3, r3, #1
 80075d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80075d4:	e01c      	b.n	8007610 <HAL_RCC_OscConfig+0x324>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	2b05      	cmp	r3, #5
 80075dc:	d10c      	bne.n	80075f8 <HAL_RCC_OscConfig+0x30c>
 80075de:	4b5f      	ldr	r3, [pc, #380]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 80075e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075e2:	4a5e      	ldr	r2, [pc, #376]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 80075e4:	f043 0304 	orr.w	r3, r3, #4
 80075e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80075ea:	4b5c      	ldr	r3, [pc, #368]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 80075ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075ee:	4a5b      	ldr	r2, [pc, #364]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 80075f0:	f043 0301 	orr.w	r3, r3, #1
 80075f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80075f6:	e00b      	b.n	8007610 <HAL_RCC_OscConfig+0x324>
 80075f8:	4b58      	ldr	r3, [pc, #352]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 80075fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075fc:	4a57      	ldr	r2, [pc, #348]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 80075fe:	f023 0301 	bic.w	r3, r3, #1
 8007602:	6713      	str	r3, [r2, #112]	@ 0x70
 8007604:	4b55      	ldr	r3, [pc, #340]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 8007606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007608:	4a54      	ldr	r2, [pc, #336]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 800760a:	f023 0304 	bic.w	r3, r3, #4
 800760e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d015      	beq.n	8007644 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007618:	f7fc ff56 	bl	80044c8 <HAL_GetTick>
 800761c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800761e:	e00a      	b.n	8007636 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007620:	f7fc ff52 	bl	80044c8 <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800762e:	4293      	cmp	r3, r2
 8007630:	d901      	bls.n	8007636 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e0cb      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007636:	4b49      	ldr	r3, [pc, #292]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 8007638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d0ee      	beq.n	8007620 <HAL_RCC_OscConfig+0x334>
 8007642:	e014      	b.n	800766e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007644:	f7fc ff40 	bl	80044c8 <HAL_GetTick>
 8007648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800764a:	e00a      	b.n	8007662 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800764c:	f7fc ff3c 	bl	80044c8 <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800765a:	4293      	cmp	r3, r2
 800765c:	d901      	bls.n	8007662 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e0b5      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007662:	4b3e      	ldr	r3, [pc, #248]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 8007664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1ee      	bne.n	800764c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800766e:	7dfb      	ldrb	r3, [r7, #23]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d105      	bne.n	8007680 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007674:	4b39      	ldr	r3, [pc, #228]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 8007676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007678:	4a38      	ldr	r2, [pc, #224]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 800767a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800767e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 80a1 	beq.w	80077cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800768a:	4b34      	ldr	r3, [pc, #208]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f003 030c 	and.w	r3, r3, #12
 8007692:	2b08      	cmp	r3, #8
 8007694:	d05c      	beq.n	8007750 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	2b02      	cmp	r3, #2
 800769c:	d141      	bne.n	8007722 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800769e:	4b31      	ldr	r3, [pc, #196]	@ (8007764 <HAL_RCC_OscConfig+0x478>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076a4:	f7fc ff10 	bl	80044c8 <HAL_GetTick>
 80076a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076aa:	e008      	b.n	80076be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076ac:	f7fc ff0c 	bl	80044c8 <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d901      	bls.n	80076be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e087      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076be:	4b27      	ldr	r3, [pc, #156]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1f0      	bne.n	80076ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	69da      	ldr	r2, [r3, #28]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	431a      	orrs	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d8:	019b      	lsls	r3, r3, #6
 80076da:	431a      	orrs	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e0:	085b      	lsrs	r3, r3, #1
 80076e2:	3b01      	subs	r3, #1
 80076e4:	041b      	lsls	r3, r3, #16
 80076e6:	431a      	orrs	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ec:	061b      	lsls	r3, r3, #24
 80076ee:	491b      	ldr	r1, [pc, #108]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 80076f0:	4313      	orrs	r3, r2
 80076f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076f4:	4b1b      	ldr	r3, [pc, #108]	@ (8007764 <HAL_RCC_OscConfig+0x478>)
 80076f6:	2201      	movs	r2, #1
 80076f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076fa:	f7fc fee5 	bl	80044c8 <HAL_GetTick>
 80076fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007700:	e008      	b.n	8007714 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007702:	f7fc fee1 	bl	80044c8 <HAL_GetTick>
 8007706:	4602      	mov	r2, r0
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	2b02      	cmp	r3, #2
 800770e:	d901      	bls.n	8007714 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e05c      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007714:	4b11      	ldr	r3, [pc, #68]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d0f0      	beq.n	8007702 <HAL_RCC_OscConfig+0x416>
 8007720:	e054      	b.n	80077cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007722:	4b10      	ldr	r3, [pc, #64]	@ (8007764 <HAL_RCC_OscConfig+0x478>)
 8007724:	2200      	movs	r2, #0
 8007726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007728:	f7fc fece 	bl	80044c8 <HAL_GetTick>
 800772c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800772e:	e008      	b.n	8007742 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007730:	f7fc feca 	bl	80044c8 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	2b02      	cmp	r3, #2
 800773c:	d901      	bls.n	8007742 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e045      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007742:	4b06      	ldr	r3, [pc, #24]	@ (800775c <HAL_RCC_OscConfig+0x470>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1f0      	bne.n	8007730 <HAL_RCC_OscConfig+0x444>
 800774e:	e03d      	b.n	80077cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d107      	bne.n	8007768 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e038      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
 800775c:	40023800 	.word	0x40023800
 8007760:	40007000 	.word	0x40007000
 8007764:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007768:	4b1b      	ldr	r3, [pc, #108]	@ (80077d8 <HAL_RCC_OscConfig+0x4ec>)
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d028      	beq.n	80077c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007780:	429a      	cmp	r2, r3
 8007782:	d121      	bne.n	80077c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800778e:	429a      	cmp	r2, r3
 8007790:	d11a      	bne.n	80077c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007798:	4013      	ands	r3, r2
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800779e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d111      	bne.n	80077c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ae:	085b      	lsrs	r3, r3, #1
 80077b0:	3b01      	subs	r3, #1
 80077b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d107      	bne.n	80077c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d001      	beq.n	80077cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e000      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	40023800 	.word	0x40023800

080077dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e0cc      	b.n	800798a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077f0:	4b68      	ldr	r3, [pc, #416]	@ (8007994 <HAL_RCC_ClockConfig+0x1b8>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 030f 	and.w	r3, r3, #15
 80077f8:	683a      	ldr	r2, [r7, #0]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d90c      	bls.n	8007818 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077fe:	4b65      	ldr	r3, [pc, #404]	@ (8007994 <HAL_RCC_ClockConfig+0x1b8>)
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	b2d2      	uxtb	r2, r2
 8007804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007806:	4b63      	ldr	r3, [pc, #396]	@ (8007994 <HAL_RCC_ClockConfig+0x1b8>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 030f 	and.w	r3, r3, #15
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	429a      	cmp	r2, r3
 8007812:	d001      	beq.n	8007818 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e0b8      	b.n	800798a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0302 	and.w	r3, r3, #2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d020      	beq.n	8007866 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0304 	and.w	r3, r3, #4
 800782c:	2b00      	cmp	r3, #0
 800782e:	d005      	beq.n	800783c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007830:	4b59      	ldr	r3, [pc, #356]	@ (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	4a58      	ldr	r2, [pc, #352]	@ (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 8007836:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800783a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0308 	and.w	r3, r3, #8
 8007844:	2b00      	cmp	r3, #0
 8007846:	d005      	beq.n	8007854 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007848:	4b53      	ldr	r3, [pc, #332]	@ (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	4a52      	ldr	r2, [pc, #328]	@ (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 800784e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007852:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007854:	4b50      	ldr	r3, [pc, #320]	@ (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	494d      	ldr	r1, [pc, #308]	@ (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 8007862:	4313      	orrs	r3, r2
 8007864:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b00      	cmp	r3, #0
 8007870:	d044      	beq.n	80078fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d107      	bne.n	800788a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800787a:	4b47      	ldr	r3, [pc, #284]	@ (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007882:	2b00      	cmp	r3, #0
 8007884:	d119      	bne.n	80078ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e07f      	b.n	800798a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	2b02      	cmp	r3, #2
 8007890:	d003      	beq.n	800789a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007896:	2b03      	cmp	r3, #3
 8007898:	d107      	bne.n	80078aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800789a:	4b3f      	ldr	r3, [pc, #252]	@ (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d109      	bne.n	80078ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e06f      	b.n	800798a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078aa:	4b3b      	ldr	r3, [pc, #236]	@ (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0302 	and.w	r3, r3, #2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e067      	b.n	800798a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078ba:	4b37      	ldr	r3, [pc, #220]	@ (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f023 0203 	bic.w	r2, r3, #3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	4934      	ldr	r1, [pc, #208]	@ (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078cc:	f7fc fdfc 	bl	80044c8 <HAL_GetTick>
 80078d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078d2:	e00a      	b.n	80078ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078d4:	f7fc fdf8 	bl	80044c8 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d901      	bls.n	80078ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e04f      	b.n	800798a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ea:	4b2b      	ldr	r3, [pc, #172]	@ (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f003 020c 	and.w	r2, r3, #12
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d1eb      	bne.n	80078d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078fc:	4b25      	ldr	r3, [pc, #148]	@ (8007994 <HAL_RCC_ClockConfig+0x1b8>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 030f 	and.w	r3, r3, #15
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	429a      	cmp	r2, r3
 8007908:	d20c      	bcs.n	8007924 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800790a:	4b22      	ldr	r3, [pc, #136]	@ (8007994 <HAL_RCC_ClockConfig+0x1b8>)
 800790c:	683a      	ldr	r2, [r7, #0]
 800790e:	b2d2      	uxtb	r2, r2
 8007910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007912:	4b20      	ldr	r3, [pc, #128]	@ (8007994 <HAL_RCC_ClockConfig+0x1b8>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 030f 	and.w	r3, r3, #15
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	429a      	cmp	r2, r3
 800791e:	d001      	beq.n	8007924 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e032      	b.n	800798a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0304 	and.w	r3, r3, #4
 800792c:	2b00      	cmp	r3, #0
 800792e:	d008      	beq.n	8007942 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007930:	4b19      	ldr	r3, [pc, #100]	@ (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	4916      	ldr	r1, [pc, #88]	@ (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 800793e:	4313      	orrs	r3, r2
 8007940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0308 	and.w	r3, r3, #8
 800794a:	2b00      	cmp	r3, #0
 800794c:	d009      	beq.n	8007962 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800794e:	4b12      	ldr	r3, [pc, #72]	@ (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	00db      	lsls	r3, r3, #3
 800795c:	490e      	ldr	r1, [pc, #56]	@ (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 800795e:	4313      	orrs	r3, r2
 8007960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007962:	f000 f821 	bl	80079a8 <HAL_RCC_GetSysClockFreq>
 8007966:	4602      	mov	r2, r0
 8007968:	4b0b      	ldr	r3, [pc, #44]	@ (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	091b      	lsrs	r3, r3, #4
 800796e:	f003 030f 	and.w	r3, r3, #15
 8007972:	490a      	ldr	r1, [pc, #40]	@ (800799c <HAL_RCC_ClockConfig+0x1c0>)
 8007974:	5ccb      	ldrb	r3, [r1, r3]
 8007976:	fa22 f303 	lsr.w	r3, r2, r3
 800797a:	4a09      	ldr	r2, [pc, #36]	@ (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 800797c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800797e:	4b09      	ldr	r3, [pc, #36]	@ (80079a4 <HAL_RCC_ClockConfig+0x1c8>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4618      	mov	r0, r3
 8007984:	f7fc fd5c 	bl	8004440 <HAL_InitTick>

  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	40023c00 	.word	0x40023c00
 8007998:	40023800 	.word	0x40023800
 800799c:	08012a88 	.word	0x08012a88
 80079a0:	20000268 	.word	0x20000268
 80079a4:	2000026c 	.word	0x2000026c

080079a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079ac:	b094      	sub	sp, #80	@ 0x50
 80079ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80079b0:	2300      	movs	r3, #0
 80079b2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80079bc:	2300      	movs	r3, #0
 80079be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079c0:	4b79      	ldr	r3, [pc, #484]	@ (8007ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f003 030c 	and.w	r3, r3, #12
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	d00d      	beq.n	80079e8 <HAL_RCC_GetSysClockFreq+0x40>
 80079cc:	2b08      	cmp	r3, #8
 80079ce:	f200 80e1 	bhi.w	8007b94 <HAL_RCC_GetSysClockFreq+0x1ec>
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d002      	beq.n	80079dc <HAL_RCC_GetSysClockFreq+0x34>
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d003      	beq.n	80079e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80079da:	e0db      	b.n	8007b94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079dc:	4b73      	ldr	r3, [pc, #460]	@ (8007bac <HAL_RCC_GetSysClockFreq+0x204>)
 80079de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80079e0:	e0db      	b.n	8007b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079e2:	4b72      	ldr	r3, [pc, #456]	@ (8007bac <HAL_RCC_GetSysClockFreq+0x204>)
 80079e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80079e6:	e0d8      	b.n	8007b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079e8:	4b6f      	ldr	r3, [pc, #444]	@ (8007ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079f2:	4b6d      	ldr	r3, [pc, #436]	@ (8007ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d063      	beq.n	8007ac6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079fe:	4b6a      	ldr	r3, [pc, #424]	@ (8007ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	099b      	lsrs	r3, r3, #6
 8007a04:	2200      	movs	r2, #0
 8007a06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a10:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a12:	2300      	movs	r3, #0
 8007a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007a1a:	4622      	mov	r2, r4
 8007a1c:	462b      	mov	r3, r5
 8007a1e:	f04f 0000 	mov.w	r0, #0
 8007a22:	f04f 0100 	mov.w	r1, #0
 8007a26:	0159      	lsls	r1, r3, #5
 8007a28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a2c:	0150      	lsls	r0, r2, #5
 8007a2e:	4602      	mov	r2, r0
 8007a30:	460b      	mov	r3, r1
 8007a32:	4621      	mov	r1, r4
 8007a34:	1a51      	subs	r1, r2, r1
 8007a36:	6139      	str	r1, [r7, #16]
 8007a38:	4629      	mov	r1, r5
 8007a3a:	eb63 0301 	sbc.w	r3, r3, r1
 8007a3e:	617b      	str	r3, [r7, #20]
 8007a40:	f04f 0200 	mov.w	r2, #0
 8007a44:	f04f 0300 	mov.w	r3, #0
 8007a48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a4c:	4659      	mov	r1, fp
 8007a4e:	018b      	lsls	r3, r1, #6
 8007a50:	4651      	mov	r1, sl
 8007a52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a56:	4651      	mov	r1, sl
 8007a58:	018a      	lsls	r2, r1, #6
 8007a5a:	4651      	mov	r1, sl
 8007a5c:	ebb2 0801 	subs.w	r8, r2, r1
 8007a60:	4659      	mov	r1, fp
 8007a62:	eb63 0901 	sbc.w	r9, r3, r1
 8007a66:	f04f 0200 	mov.w	r2, #0
 8007a6a:	f04f 0300 	mov.w	r3, #0
 8007a6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a7a:	4690      	mov	r8, r2
 8007a7c:	4699      	mov	r9, r3
 8007a7e:	4623      	mov	r3, r4
 8007a80:	eb18 0303 	adds.w	r3, r8, r3
 8007a84:	60bb      	str	r3, [r7, #8]
 8007a86:	462b      	mov	r3, r5
 8007a88:	eb49 0303 	adc.w	r3, r9, r3
 8007a8c:	60fb      	str	r3, [r7, #12]
 8007a8e:	f04f 0200 	mov.w	r2, #0
 8007a92:	f04f 0300 	mov.w	r3, #0
 8007a96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	028b      	lsls	r3, r1, #10
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	028a      	lsls	r2, r1, #10
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007aae:	2200      	movs	r2, #0
 8007ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ab2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ab4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007ab8:	f7f8 fbf2 	bl	80002a0 <__aeabi_uldivmod>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ac4:	e058      	b.n	8007b78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ac6:	4b38      	ldr	r3, [pc, #224]	@ (8007ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	099b      	lsrs	r3, r3, #6
 8007acc:	2200      	movs	r2, #0
 8007ace:	4618      	mov	r0, r3
 8007ad0:	4611      	mov	r1, r2
 8007ad2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007ad6:	623b      	str	r3, [r7, #32]
 8007ad8:	2300      	movs	r3, #0
 8007ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8007adc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007ae0:	4642      	mov	r2, r8
 8007ae2:	464b      	mov	r3, r9
 8007ae4:	f04f 0000 	mov.w	r0, #0
 8007ae8:	f04f 0100 	mov.w	r1, #0
 8007aec:	0159      	lsls	r1, r3, #5
 8007aee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007af2:	0150      	lsls	r0, r2, #5
 8007af4:	4602      	mov	r2, r0
 8007af6:	460b      	mov	r3, r1
 8007af8:	4641      	mov	r1, r8
 8007afa:	ebb2 0a01 	subs.w	sl, r2, r1
 8007afe:	4649      	mov	r1, r9
 8007b00:	eb63 0b01 	sbc.w	fp, r3, r1
 8007b04:	f04f 0200 	mov.w	r2, #0
 8007b08:	f04f 0300 	mov.w	r3, #0
 8007b0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007b10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007b14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007b18:	ebb2 040a 	subs.w	r4, r2, sl
 8007b1c:	eb63 050b 	sbc.w	r5, r3, fp
 8007b20:	f04f 0200 	mov.w	r2, #0
 8007b24:	f04f 0300 	mov.w	r3, #0
 8007b28:	00eb      	lsls	r3, r5, #3
 8007b2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b2e:	00e2      	lsls	r2, r4, #3
 8007b30:	4614      	mov	r4, r2
 8007b32:	461d      	mov	r5, r3
 8007b34:	4643      	mov	r3, r8
 8007b36:	18e3      	adds	r3, r4, r3
 8007b38:	603b      	str	r3, [r7, #0]
 8007b3a:	464b      	mov	r3, r9
 8007b3c:	eb45 0303 	adc.w	r3, r5, r3
 8007b40:	607b      	str	r3, [r7, #4]
 8007b42:	f04f 0200 	mov.w	r2, #0
 8007b46:	f04f 0300 	mov.w	r3, #0
 8007b4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b4e:	4629      	mov	r1, r5
 8007b50:	028b      	lsls	r3, r1, #10
 8007b52:	4621      	mov	r1, r4
 8007b54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b58:	4621      	mov	r1, r4
 8007b5a:	028a      	lsls	r2, r1, #10
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b62:	2200      	movs	r2, #0
 8007b64:	61bb      	str	r3, [r7, #24]
 8007b66:	61fa      	str	r2, [r7, #28]
 8007b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b6c:	f7f8 fb98 	bl	80002a0 <__aeabi_uldivmod>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4613      	mov	r3, r2
 8007b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007b78:	4b0b      	ldr	r3, [pc, #44]	@ (8007ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	0c1b      	lsrs	r3, r3, #16
 8007b7e:	f003 0303 	and.w	r3, r3, #3
 8007b82:	3301      	adds	r3, #1
 8007b84:	005b      	lsls	r3, r3, #1
 8007b86:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007b88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b92:	e002      	b.n	8007b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b94:	4b05      	ldr	r3, [pc, #20]	@ (8007bac <HAL_RCC_GetSysClockFreq+0x204>)
 8007b96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3750      	adds	r7, #80	@ 0x50
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ba6:	bf00      	nop
 8007ba8:	40023800 	.word	0x40023800
 8007bac:	00f42400 	.word	0x00f42400

08007bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007bb4:	4b03      	ldr	r3, [pc, #12]	@ (8007bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	20000268 	.word	0x20000268

08007bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007bcc:	f7ff fff0 	bl	8007bb0 <HAL_RCC_GetHCLKFreq>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	4b05      	ldr	r3, [pc, #20]	@ (8007be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	0a9b      	lsrs	r3, r3, #10
 8007bd8:	f003 0307 	and.w	r3, r3, #7
 8007bdc:	4903      	ldr	r1, [pc, #12]	@ (8007bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bde:	5ccb      	ldrb	r3, [r1, r3]
 8007be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	40023800 	.word	0x40023800
 8007bec:	08012a98 	.word	0x08012a98

08007bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007bf4:	f7ff ffdc 	bl	8007bb0 <HAL_RCC_GetHCLKFreq>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	4b05      	ldr	r3, [pc, #20]	@ (8007c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	0b5b      	lsrs	r3, r3, #13
 8007c00:	f003 0307 	and.w	r3, r3, #7
 8007c04:	4903      	ldr	r1, [pc, #12]	@ (8007c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c06:	5ccb      	ldrb	r3, [r1, r3]
 8007c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	40023800 	.word	0x40023800
 8007c14:	08012a98 	.word	0x08012a98

08007c18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d101      	bne.n	8007c2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e07b      	b.n	8007d22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d108      	bne.n	8007c44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c3a:	d009      	beq.n	8007c50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	61da      	str	r2, [r3, #28]
 8007c42:	e005      	b.n	8007c50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d106      	bne.n	8007c70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7fc f93e 	bl	8003eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2202      	movs	r2, #2
 8007c74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007c98:	431a      	orrs	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ca2:	431a      	orrs	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	f003 0302 	and.w	r3, r3, #2
 8007cac:	431a      	orrs	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	431a      	orrs	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a1b      	ldr	r3, [r3, #32]
 8007cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cd4:	ea42 0103 	orr.w	r1, r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cdc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	0c1b      	lsrs	r3, r3, #16
 8007cee:	f003 0104 	and.w	r1, r3, #4
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf6:	f003 0210 	and.w	r2, r3, #16
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	69da      	ldr	r2, [r3, #28]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b088      	sub	sp, #32
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	60f8      	str	r0, [r7, #12]
 8007d32:	60b9      	str	r1, [r7, #8]
 8007d34:	603b      	str	r3, [r7, #0]
 8007d36:	4613      	mov	r3, r2
 8007d38:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d3a:	f7fc fbc5 	bl	80044c8 <HAL_GetTick>
 8007d3e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007d40:	88fb      	ldrh	r3, [r7, #6]
 8007d42:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d001      	beq.n	8007d54 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007d50:	2302      	movs	r3, #2
 8007d52:	e12a      	b.n	8007faa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d002      	beq.n	8007d60 <HAL_SPI_Transmit+0x36>
 8007d5a:	88fb      	ldrh	r3, [r7, #6]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e122      	b.n	8007faa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d101      	bne.n	8007d72 <HAL_SPI_Transmit+0x48>
 8007d6e:	2302      	movs	r3, #2
 8007d70:	e11b      	b.n	8007faa <HAL_SPI_Transmit+0x280>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2203      	movs	r2, #3
 8007d7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	88fa      	ldrh	r2, [r7, #6]
 8007d92:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	88fa      	ldrh	r2, [r7, #6]
 8007d98:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2200      	movs	r2, #0
 8007daa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dc0:	d10f      	bne.n	8007de2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007dd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007de0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dec:	2b40      	cmp	r3, #64	@ 0x40
 8007dee:	d007      	beq.n	8007e00 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007dfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e08:	d152      	bne.n	8007eb0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d002      	beq.n	8007e18 <HAL_SPI_Transmit+0xee>
 8007e12:	8b7b      	ldrh	r3, [r7, #26]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d145      	bne.n	8007ea4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e1c:	881a      	ldrh	r2, [r3, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e28:	1c9a      	adds	r2, r3, #2
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	3b01      	subs	r3, #1
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007e3c:	e032      	b.n	8007ea4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f003 0302 	and.w	r3, r3, #2
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d112      	bne.n	8007e72 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e50:	881a      	ldrh	r2, [r3, #0]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e5c:	1c9a      	adds	r2, r3, #2
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007e70:	e018      	b.n	8007ea4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e72:	f7fc fb29 	bl	80044c8 <HAL_GetTick>
 8007e76:	4602      	mov	r2, r0
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	683a      	ldr	r2, [r7, #0]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d803      	bhi.n	8007e8a <HAL_SPI_Transmit+0x160>
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e88:	d102      	bne.n	8007e90 <HAL_SPI_Transmit+0x166>
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d109      	bne.n	8007ea4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e082      	b.n	8007faa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1c7      	bne.n	8007e3e <HAL_SPI_Transmit+0x114>
 8007eae:	e053      	b.n	8007f58 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d002      	beq.n	8007ebe <HAL_SPI_Transmit+0x194>
 8007eb8:	8b7b      	ldrh	r3, [r7, #26]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d147      	bne.n	8007f4e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	330c      	adds	r3, #12
 8007ec8:	7812      	ldrb	r2, [r2, #0]
 8007eca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ed0:	1c5a      	adds	r2, r3, #1
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	3b01      	subs	r3, #1
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007ee4:	e033      	b.n	8007f4e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f003 0302 	and.w	r3, r3, #2
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d113      	bne.n	8007f1c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	330c      	adds	r3, #12
 8007efe:	7812      	ldrb	r2, [r2, #0]
 8007f00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	3b01      	subs	r3, #1
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007f1a:	e018      	b.n	8007f4e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f1c:	f7fc fad4 	bl	80044c8 <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d803      	bhi.n	8007f34 <HAL_SPI_Transmit+0x20a>
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f32:	d102      	bne.n	8007f3a <HAL_SPI_Transmit+0x210>
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d109      	bne.n	8007f4e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e02d      	b.n	8007faa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1c6      	bne.n	8007ee6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f58:	69fa      	ldr	r2, [r7, #28]
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f000 fa59 	bl	8008414 <SPI_EndRxTxTransaction>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d002      	beq.n	8007f6e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2220      	movs	r2, #32
 8007f6c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10a      	bne.n	8007f8c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f76:	2300      	movs	r3, #0
 8007f78:	617b      	str	r3, [r7, #20]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	617b      	str	r3, [r7, #20]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	617b      	str	r3, [r7, #20]
 8007f8a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d001      	beq.n	8007fa8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e000      	b.n	8007faa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
  }
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3720      	adds	r7, #32
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b08a      	sub	sp, #40	@ 0x28
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	607a      	str	r2, [r7, #4]
 8007fbe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fc4:	f7fc fa80 	bl	80044c8 <HAL_GetTick>
 8007fc8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007fd0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007fd8:	887b      	ldrh	r3, [r7, #2]
 8007fda:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007fdc:	7ffb      	ldrb	r3, [r7, #31]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d00c      	beq.n	8007ffc <HAL_SPI_TransmitReceive+0x4a>
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007fe8:	d106      	bne.n	8007ff8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d102      	bne.n	8007ff8 <HAL_SPI_TransmitReceive+0x46>
 8007ff2:	7ffb      	ldrb	r3, [r7, #31]
 8007ff4:	2b04      	cmp	r3, #4
 8007ff6:	d001      	beq.n	8007ffc <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	e17f      	b.n	80082fc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d005      	beq.n	800800e <HAL_SPI_TransmitReceive+0x5c>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d002      	beq.n	800800e <HAL_SPI_TransmitReceive+0x5c>
 8008008:	887b      	ldrh	r3, [r7, #2]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e174      	b.n	80082fc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008018:	2b01      	cmp	r3, #1
 800801a:	d101      	bne.n	8008020 <HAL_SPI_TransmitReceive+0x6e>
 800801c:	2302      	movs	r3, #2
 800801e:	e16d      	b.n	80082fc <HAL_SPI_TransmitReceive+0x34a>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b04      	cmp	r3, #4
 8008032:	d003      	beq.n	800803c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2205      	movs	r2, #5
 8008038:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	887a      	ldrh	r2, [r7, #2]
 800804c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	887a      	ldrh	r2, [r7, #2]
 8008052:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	887a      	ldrh	r2, [r7, #2]
 800805e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	887a      	ldrh	r2, [r7, #2]
 8008064:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800807c:	2b40      	cmp	r3, #64	@ 0x40
 800807e:	d007      	beq.n	8008090 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800808e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008098:	d17e      	bne.n	8008198 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d002      	beq.n	80080a8 <HAL_SPI_TransmitReceive+0xf6>
 80080a2:	8afb      	ldrh	r3, [r7, #22]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d16c      	bne.n	8008182 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ac:	881a      	ldrh	r2, [r3, #0]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080b8:	1c9a      	adds	r2, r3, #2
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	3b01      	subs	r3, #1
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080cc:	e059      	b.n	8008182 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f003 0302 	and.w	r3, r3, #2
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d11b      	bne.n	8008114 <HAL_SPI_TransmitReceive+0x162>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d016      	beq.n	8008114 <HAL_SPI_TransmitReceive+0x162>
 80080e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d113      	bne.n	8008114 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080f0:	881a      	ldrh	r2, [r3, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080fc:	1c9a      	adds	r2, r3, #2
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008106:	b29b      	uxth	r3, r3
 8008108:	3b01      	subs	r3, #1
 800810a:	b29a      	uxth	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008110:	2300      	movs	r3, #0
 8008112:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	2b01      	cmp	r3, #1
 8008120:	d119      	bne.n	8008156 <HAL_SPI_TransmitReceive+0x1a4>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008126:	b29b      	uxth	r3, r3
 8008128:	2b00      	cmp	r3, #0
 800812a:	d014      	beq.n	8008156 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68da      	ldr	r2, [r3, #12]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008136:	b292      	uxth	r2, r2
 8008138:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813e:	1c9a      	adds	r2, r3, #2
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008148:	b29b      	uxth	r3, r3
 800814a:	3b01      	subs	r3, #1
 800814c:	b29a      	uxth	r2, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008152:	2301      	movs	r3, #1
 8008154:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008156:	f7fc f9b7 	bl	80044c8 <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	6a3b      	ldr	r3, [r7, #32]
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008162:	429a      	cmp	r2, r3
 8008164:	d80d      	bhi.n	8008182 <HAL_SPI_TransmitReceive+0x1d0>
 8008166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800816c:	d009      	beq.n	8008182 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e0bc      	b.n	80082fc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008186:	b29b      	uxth	r3, r3
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1a0      	bne.n	80080ce <HAL_SPI_TransmitReceive+0x11c>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008190:	b29b      	uxth	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d19b      	bne.n	80080ce <HAL_SPI_TransmitReceive+0x11c>
 8008196:	e082      	b.n	800829e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d002      	beq.n	80081a6 <HAL_SPI_TransmitReceive+0x1f4>
 80081a0:	8afb      	ldrh	r3, [r7, #22]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d171      	bne.n	800828a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	330c      	adds	r3, #12
 80081b0:	7812      	ldrb	r2, [r2, #0]
 80081b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081b8:	1c5a      	adds	r2, r3, #1
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	3b01      	subs	r3, #1
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081cc:	e05d      	b.n	800828a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	f003 0302 	and.w	r3, r3, #2
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d11c      	bne.n	8008216 <HAL_SPI_TransmitReceive+0x264>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d017      	beq.n	8008216 <HAL_SPI_TransmitReceive+0x264>
 80081e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d114      	bne.n	8008216 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	330c      	adds	r3, #12
 80081f6:	7812      	ldrb	r2, [r2, #0]
 80081f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081fe:	1c5a      	adds	r2, r3, #1
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008208:	b29b      	uxth	r3, r3
 800820a:	3b01      	subs	r3, #1
 800820c:	b29a      	uxth	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008212:	2300      	movs	r3, #0
 8008214:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b01      	cmp	r3, #1
 8008222:	d119      	bne.n	8008258 <HAL_SPI_TransmitReceive+0x2a6>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008228:	b29b      	uxth	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d014      	beq.n	8008258 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68da      	ldr	r2, [r3, #12]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008238:	b2d2      	uxtb	r2, r2
 800823a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008240:	1c5a      	adds	r2, r3, #1
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800824a:	b29b      	uxth	r3, r3
 800824c:	3b01      	subs	r3, #1
 800824e:	b29a      	uxth	r2, r3
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008254:	2301      	movs	r3, #1
 8008256:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008258:	f7fc f936 	bl	80044c8 <HAL_GetTick>
 800825c:	4602      	mov	r2, r0
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008264:	429a      	cmp	r2, r3
 8008266:	d803      	bhi.n	8008270 <HAL_SPI_TransmitReceive+0x2be>
 8008268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826e:	d102      	bne.n	8008276 <HAL_SPI_TransmitReceive+0x2c4>
 8008270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008272:	2b00      	cmp	r3, #0
 8008274:	d109      	bne.n	800828a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	e038      	b.n	80082fc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800828e:	b29b      	uxth	r3, r3
 8008290:	2b00      	cmp	r3, #0
 8008292:	d19c      	bne.n	80081ce <HAL_SPI_TransmitReceive+0x21c>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008298:	b29b      	uxth	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d197      	bne.n	80081ce <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800829e:	6a3a      	ldr	r2, [r7, #32]
 80082a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 f8b6 	bl	8008414 <SPI_EndRxTxTransaction>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d008      	beq.n	80082c0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2220      	movs	r2, #32
 80082b2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e01d      	b.n	80082fc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10a      	bne.n	80082de <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082c8:	2300      	movs	r3, #0
 80082ca:	613b      	str	r3, [r7, #16]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	613b      	str	r3, [r7, #16]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	613b      	str	r3, [r7, #16]
 80082dc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d001      	beq.n	80082fa <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e000      	b.n	80082fc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80082fa:	2300      	movs	r3, #0
  }
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3728      	adds	r7, #40	@ 0x28
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b088      	sub	sp, #32
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	603b      	str	r3, [r7, #0]
 8008310:	4613      	mov	r3, r2
 8008312:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008314:	f7fc f8d8 	bl	80044c8 <HAL_GetTick>
 8008318:	4602      	mov	r2, r0
 800831a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800831c:	1a9b      	subs	r3, r3, r2
 800831e:	683a      	ldr	r2, [r7, #0]
 8008320:	4413      	add	r3, r2
 8008322:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008324:	f7fc f8d0 	bl	80044c8 <HAL_GetTick>
 8008328:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800832a:	4b39      	ldr	r3, [pc, #228]	@ (8008410 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	015b      	lsls	r3, r3, #5
 8008330:	0d1b      	lsrs	r3, r3, #20
 8008332:	69fa      	ldr	r2, [r7, #28]
 8008334:	fb02 f303 	mul.w	r3, r2, r3
 8008338:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800833a:	e054      	b.n	80083e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008342:	d050      	beq.n	80083e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008344:	f7fc f8c0 	bl	80044c8 <HAL_GetTick>
 8008348:	4602      	mov	r2, r0
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	69fa      	ldr	r2, [r7, #28]
 8008350:	429a      	cmp	r2, r3
 8008352:	d902      	bls.n	800835a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d13d      	bne.n	80083d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008368:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008372:	d111      	bne.n	8008398 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800837c:	d004      	beq.n	8008388 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008386:	d107      	bne.n	8008398 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008396:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800839c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083a0:	d10f      	bne.n	80083c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80083c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e017      	b.n	8008406 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d101      	bne.n	80083e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80083dc:	2300      	movs	r3, #0
 80083de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	3b01      	subs	r3, #1
 80083e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	689a      	ldr	r2, [r3, #8]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	4013      	ands	r3, r2
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	bf0c      	ite	eq
 80083f6:	2301      	moveq	r3, #1
 80083f8:	2300      	movne	r3, #0
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	461a      	mov	r2, r3
 80083fe:	79fb      	ldrb	r3, [r7, #7]
 8008400:	429a      	cmp	r2, r3
 8008402:	d19b      	bne.n	800833c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3720      	adds	r7, #32
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	20000268 	.word	0x20000268

08008414 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b088      	sub	sp, #32
 8008418:	af02      	add	r7, sp, #8
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	2201      	movs	r2, #1
 8008428:	2102      	movs	r1, #2
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f7ff ff6a 	bl	8008304 <SPI_WaitFlagStateUntilTimeout>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d007      	beq.n	8008446 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800843a:	f043 0220 	orr.w	r2, r3, #32
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e032      	b.n	80084ac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008446:	4b1b      	ldr	r3, [pc, #108]	@ (80084b4 <SPI_EndRxTxTransaction+0xa0>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a1b      	ldr	r2, [pc, #108]	@ (80084b8 <SPI_EndRxTxTransaction+0xa4>)
 800844c:	fba2 2303 	umull	r2, r3, r2, r3
 8008450:	0d5b      	lsrs	r3, r3, #21
 8008452:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008456:	fb02 f303 	mul.w	r3, r2, r3
 800845a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008464:	d112      	bne.n	800848c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2200      	movs	r2, #0
 800846e:	2180      	movs	r1, #128	@ 0x80
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f7ff ff47 	bl	8008304 <SPI_WaitFlagStateUntilTimeout>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d016      	beq.n	80084aa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008480:	f043 0220 	orr.w	r2, r3, #32
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e00f      	b.n	80084ac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00a      	beq.n	80084a8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	3b01      	subs	r3, #1
 8008496:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084a2:	2b80      	cmp	r3, #128	@ 0x80
 80084a4:	d0f2      	beq.n	800848c <SPI_EndRxTxTransaction+0x78>
 80084a6:	e000      	b.n	80084aa <SPI_EndRxTxTransaction+0x96>
        break;
 80084a8:	bf00      	nop
  }

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3718      	adds	r7, #24
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	20000268 	.word	0x20000268
 80084b8:	165e9f81 	.word	0x165e9f81

080084bc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e038      	b.n	8008544 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d106      	bne.n	80084ec <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f7fb fe66 	bl	80041b8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3308      	adds	r3, #8
 80084f4:	4619      	mov	r1, r3
 80084f6:	4610      	mov	r0, r2
 80084f8:	f002 f914 	bl	800a724 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6818      	ldr	r0, [r3, #0]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	461a      	mov	r2, r3
 8008506:	68b9      	ldr	r1, [r7, #8]
 8008508:	f002 f992 	bl	800a830 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6858      	ldr	r0, [r3, #4]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	689a      	ldr	r2, [r3, #8]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008518:	6879      	ldr	r1, [r7, #4]
 800851a:	f002 f9d9 	bl	800a8d0 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	6892      	ldr	r2, [r2, #8]
 8008526:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	6892      	ldr	r2, [r2, #8]
 8008532:	f041 0101 	orr.w	r1, r1, #1
 8008536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e041      	b.n	80085e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008564:	b2db      	uxtb	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d106      	bne.n	8008578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f7fb fd02 	bl	8003f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2202      	movs	r2, #2
 800857c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	3304      	adds	r3, #4
 8008588:	4619      	mov	r1, r3
 800858a:	4610      	mov	r0, r2
 800858c:	f000 fc86 	bl	8008e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
	...

080085ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d001      	beq.n	8008604 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e04e      	b.n	80086a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2202      	movs	r2, #2
 8008608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68da      	ldr	r2, [r3, #12]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f042 0201 	orr.w	r2, r2, #1
 800861a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a23      	ldr	r2, [pc, #140]	@ (80086b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d022      	beq.n	800866c <HAL_TIM_Base_Start_IT+0x80>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800862e:	d01d      	beq.n	800866c <HAL_TIM_Base_Start_IT+0x80>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a1f      	ldr	r2, [pc, #124]	@ (80086b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d018      	beq.n	800866c <HAL_TIM_Base_Start_IT+0x80>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a1e      	ldr	r2, [pc, #120]	@ (80086b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d013      	beq.n	800866c <HAL_TIM_Base_Start_IT+0x80>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a1c      	ldr	r2, [pc, #112]	@ (80086bc <HAL_TIM_Base_Start_IT+0xd0>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d00e      	beq.n	800866c <HAL_TIM_Base_Start_IT+0x80>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a1b      	ldr	r2, [pc, #108]	@ (80086c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d009      	beq.n	800866c <HAL_TIM_Base_Start_IT+0x80>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a19      	ldr	r2, [pc, #100]	@ (80086c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d004      	beq.n	800866c <HAL_TIM_Base_Start_IT+0x80>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a18      	ldr	r2, [pc, #96]	@ (80086c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d111      	bne.n	8008690 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f003 0307 	and.w	r3, r3, #7
 8008676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2b06      	cmp	r3, #6
 800867c:	d010      	beq.n	80086a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f042 0201 	orr.w	r2, r2, #1
 800868c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800868e:	e007      	b.n	80086a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f042 0201 	orr.w	r2, r2, #1
 800869e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	40010000 	.word	0x40010000
 80086b4:	40000400 	.word	0x40000400
 80086b8:	40000800 	.word	0x40000800
 80086bc:	40000c00 	.word	0x40000c00
 80086c0:	40010400 	.word	0x40010400
 80086c4:	40014000 	.word	0x40014000
 80086c8:	40001800 	.word	0x40001800

080086cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68da      	ldr	r2, [r3, #12]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f022 0201 	bic.w	r2, r2, #1
 80086e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6a1a      	ldr	r2, [r3, #32]
 80086ea:	f241 1311 	movw	r3, #4369	@ 0x1111
 80086ee:	4013      	ands	r3, r2
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10f      	bne.n	8008714 <HAL_TIM_Base_Stop_IT+0x48>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6a1a      	ldr	r2, [r3, #32]
 80086fa:	f240 4344 	movw	r3, #1092	@ 0x444
 80086fe:	4013      	ands	r3, r2
 8008700:	2b00      	cmp	r3, #0
 8008702:	d107      	bne.n	8008714 <HAL_TIM_Base_Stop_IT+0x48>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f022 0201 	bic.w	r2, r2, #1
 8008712:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	370c      	adds	r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr

0800872a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b082      	sub	sp, #8
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d101      	bne.n	800873c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e041      	b.n	80087c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b00      	cmp	r3, #0
 8008746:	d106      	bne.n	8008756 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f7fb fc39 	bl	8003fc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2202      	movs	r2, #2
 800875a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	3304      	adds	r3, #4
 8008766:	4619      	mov	r1, r3
 8008768:	4610      	mov	r0, r2
 800876a:	f000 fb97 	bl	8008e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d109      	bne.n	80087ec <HAL_TIM_PWM_Start+0x24>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	bf14      	ite	ne
 80087e4:	2301      	movne	r3, #1
 80087e6:	2300      	moveq	r3, #0
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	e022      	b.n	8008832 <HAL_TIM_PWM_Start+0x6a>
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	2b04      	cmp	r3, #4
 80087f0:	d109      	bne.n	8008806 <HAL_TIM_PWM_Start+0x3e>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	bf14      	ite	ne
 80087fe:	2301      	movne	r3, #1
 8008800:	2300      	moveq	r3, #0
 8008802:	b2db      	uxtb	r3, r3
 8008804:	e015      	b.n	8008832 <HAL_TIM_PWM_Start+0x6a>
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	2b08      	cmp	r3, #8
 800880a:	d109      	bne.n	8008820 <HAL_TIM_PWM_Start+0x58>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b01      	cmp	r3, #1
 8008816:	bf14      	ite	ne
 8008818:	2301      	movne	r3, #1
 800881a:	2300      	moveq	r3, #0
 800881c:	b2db      	uxtb	r3, r3
 800881e:	e008      	b.n	8008832 <HAL_TIM_PWM_Start+0x6a>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008826:	b2db      	uxtb	r3, r3
 8008828:	2b01      	cmp	r3, #1
 800882a:	bf14      	ite	ne
 800882c:	2301      	movne	r3, #1
 800882e:	2300      	moveq	r3, #0
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b00      	cmp	r3, #0
 8008834:	d001      	beq.n	800883a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e07c      	b.n	8008934 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d104      	bne.n	800884a <HAL_TIM_PWM_Start+0x82>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2202      	movs	r2, #2
 8008844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008848:	e013      	b.n	8008872 <HAL_TIM_PWM_Start+0xaa>
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	2b04      	cmp	r3, #4
 800884e:	d104      	bne.n	800885a <HAL_TIM_PWM_Start+0x92>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2202      	movs	r2, #2
 8008854:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008858:	e00b      	b.n	8008872 <HAL_TIM_PWM_Start+0xaa>
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b08      	cmp	r3, #8
 800885e:	d104      	bne.n	800886a <HAL_TIM_PWM_Start+0xa2>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2202      	movs	r2, #2
 8008864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008868:	e003      	b.n	8008872 <HAL_TIM_PWM_Start+0xaa>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2202      	movs	r2, #2
 800886e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2201      	movs	r2, #1
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	4618      	mov	r0, r3
 800887c:	f000 fe04 	bl	8009488 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a2d      	ldr	r2, [pc, #180]	@ (800893c <HAL_TIM_PWM_Start+0x174>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d004      	beq.n	8008894 <HAL_TIM_PWM_Start+0xcc>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a2c      	ldr	r2, [pc, #176]	@ (8008940 <HAL_TIM_PWM_Start+0x178>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d101      	bne.n	8008898 <HAL_TIM_PWM_Start+0xd0>
 8008894:	2301      	movs	r3, #1
 8008896:	e000      	b.n	800889a <HAL_TIM_PWM_Start+0xd2>
 8008898:	2300      	movs	r3, #0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d007      	beq.n	80088ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80088ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a22      	ldr	r2, [pc, #136]	@ (800893c <HAL_TIM_PWM_Start+0x174>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d022      	beq.n	80088fe <HAL_TIM_PWM_Start+0x136>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088c0:	d01d      	beq.n	80088fe <HAL_TIM_PWM_Start+0x136>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a1f      	ldr	r2, [pc, #124]	@ (8008944 <HAL_TIM_PWM_Start+0x17c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d018      	beq.n	80088fe <HAL_TIM_PWM_Start+0x136>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008948 <HAL_TIM_PWM_Start+0x180>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d013      	beq.n	80088fe <HAL_TIM_PWM_Start+0x136>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a1c      	ldr	r2, [pc, #112]	@ (800894c <HAL_TIM_PWM_Start+0x184>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d00e      	beq.n	80088fe <HAL_TIM_PWM_Start+0x136>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a16      	ldr	r2, [pc, #88]	@ (8008940 <HAL_TIM_PWM_Start+0x178>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d009      	beq.n	80088fe <HAL_TIM_PWM_Start+0x136>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a18      	ldr	r2, [pc, #96]	@ (8008950 <HAL_TIM_PWM_Start+0x188>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d004      	beq.n	80088fe <HAL_TIM_PWM_Start+0x136>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a16      	ldr	r2, [pc, #88]	@ (8008954 <HAL_TIM_PWM_Start+0x18c>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d111      	bne.n	8008922 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f003 0307 	and.w	r3, r3, #7
 8008908:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2b06      	cmp	r3, #6
 800890e:	d010      	beq.n	8008932 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f042 0201 	orr.w	r2, r2, #1
 800891e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008920:	e007      	b.n	8008932 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f042 0201 	orr.w	r2, r2, #1
 8008930:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	40010000 	.word	0x40010000
 8008940:	40010400 	.word	0x40010400
 8008944:	40000400 	.word	0x40000400
 8008948:	40000800 	.word	0x40000800
 800894c:	40000c00 	.word	0x40000c00
 8008950:	40014000 	.word	0x40014000
 8008954:	40001800 	.word	0x40001800

08008958 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	f003 0302 	and.w	r3, r3, #2
 8008976:	2b00      	cmp	r3, #0
 8008978:	d020      	beq.n	80089bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f003 0302 	and.w	r3, r3, #2
 8008980:	2b00      	cmp	r3, #0
 8008982:	d01b      	beq.n	80089bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f06f 0202 	mvn.w	r2, #2
 800898c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2201      	movs	r2, #1
 8008992:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	f003 0303 	and.w	r3, r3, #3
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d003      	beq.n	80089aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fa5b 	bl	8008e5e <HAL_TIM_IC_CaptureCallback>
 80089a8:	e005      	b.n	80089b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fa4d 	bl	8008e4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 fa5e 	bl	8008e72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	f003 0304 	and.w	r3, r3, #4
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d020      	beq.n	8008a08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f003 0304 	and.w	r3, r3, #4
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d01b      	beq.n	8008a08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f06f 0204 	mvn.w	r2, #4
 80089d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2202      	movs	r2, #2
 80089de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d003      	beq.n	80089f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fa35 	bl	8008e5e <HAL_TIM_IC_CaptureCallback>
 80089f4:	e005      	b.n	8008a02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fa27 	bl	8008e4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fa38 	bl	8008e72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	f003 0308 	and.w	r3, r3, #8
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d020      	beq.n	8008a54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f003 0308 	and.w	r3, r3, #8
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d01b      	beq.n	8008a54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f06f 0208 	mvn.w	r2, #8
 8008a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2204      	movs	r2, #4
 8008a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	69db      	ldr	r3, [r3, #28]
 8008a32:	f003 0303 	and.w	r3, r3, #3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fa0f 	bl	8008e5e <HAL_TIM_IC_CaptureCallback>
 8008a40:	e005      	b.n	8008a4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fa01 	bl	8008e4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fa12 	bl	8008e72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	f003 0310 	and.w	r3, r3, #16
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d020      	beq.n	8008aa0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f003 0310 	and.w	r3, r3, #16
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d01b      	beq.n	8008aa0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f06f 0210 	mvn.w	r2, #16
 8008a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2208      	movs	r2, #8
 8008a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d003      	beq.n	8008a8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f9e9 	bl	8008e5e <HAL_TIM_IC_CaptureCallback>
 8008a8c:	e005      	b.n	8008a9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 f9db 	bl	8008e4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f9ec 	bl	8008e72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	f003 0301 	and.w	r3, r3, #1
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00c      	beq.n	8008ac4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f003 0301 	and.w	r3, r3, #1
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d007      	beq.n	8008ac4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f06f 0201 	mvn.w	r2, #1
 8008abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7fb f9c2 	bl	8003e48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00c      	beq.n	8008ae8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d007      	beq.n	8008ae8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fd7c 	bl	80095e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00c      	beq.n	8008b0c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d007      	beq.n	8008b0c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f9bd 	bl	8008e86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	f003 0320 	and.w	r3, r3, #32
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00c      	beq.n	8008b30 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f003 0320 	and.w	r3, r3, #32
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d007      	beq.n	8008b30 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f06f 0220 	mvn.w	r2, #32
 8008b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fd4e 	bl	80095cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b30:	bf00      	nop
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b086      	sub	sp, #24
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d101      	bne.n	8008b56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008b52:	2302      	movs	r3, #2
 8008b54:	e0ae      	b.n	8008cb4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2b0c      	cmp	r3, #12
 8008b62:	f200 809f 	bhi.w	8008ca4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008b66:	a201      	add	r2, pc, #4	@ (adr r2, 8008b6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6c:	08008ba1 	.word	0x08008ba1
 8008b70:	08008ca5 	.word	0x08008ca5
 8008b74:	08008ca5 	.word	0x08008ca5
 8008b78:	08008ca5 	.word	0x08008ca5
 8008b7c:	08008be1 	.word	0x08008be1
 8008b80:	08008ca5 	.word	0x08008ca5
 8008b84:	08008ca5 	.word	0x08008ca5
 8008b88:	08008ca5 	.word	0x08008ca5
 8008b8c:	08008c23 	.word	0x08008c23
 8008b90:	08008ca5 	.word	0x08008ca5
 8008b94:	08008ca5 	.word	0x08008ca5
 8008b98:	08008ca5 	.word	0x08008ca5
 8008b9c:	08008c63 	.word	0x08008c63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68b9      	ldr	r1, [r7, #8]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 fa24 	bl	8008ff4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	699a      	ldr	r2, [r3, #24]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f042 0208 	orr.w	r2, r2, #8
 8008bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	699a      	ldr	r2, [r3, #24]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f022 0204 	bic.w	r2, r2, #4
 8008bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6999      	ldr	r1, [r3, #24]
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	691a      	ldr	r2, [r3, #16]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	430a      	orrs	r2, r1
 8008bdc:	619a      	str	r2, [r3, #24]
      break;
 8008bde:	e064      	b.n	8008caa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68b9      	ldr	r1, [r7, #8]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 fa74 	bl	80090d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	699a      	ldr	r2, [r3, #24]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	699a      	ldr	r2, [r3, #24]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	6999      	ldr	r1, [r3, #24]
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	021a      	lsls	r2, r3, #8
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	430a      	orrs	r2, r1
 8008c1e:	619a      	str	r2, [r3, #24]
      break;
 8008c20:	e043      	b.n	8008caa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	68b9      	ldr	r1, [r7, #8]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f000 fac9 	bl	80091c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	69da      	ldr	r2, [r3, #28]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f042 0208 	orr.w	r2, r2, #8
 8008c3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	69da      	ldr	r2, [r3, #28]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f022 0204 	bic.w	r2, r2, #4
 8008c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	69d9      	ldr	r1, [r3, #28]
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	691a      	ldr	r2, [r3, #16]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	430a      	orrs	r2, r1
 8008c5e:	61da      	str	r2, [r3, #28]
      break;
 8008c60:	e023      	b.n	8008caa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	68b9      	ldr	r1, [r7, #8]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f000 fb1d 	bl	80092a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	69da      	ldr	r2, [r3, #28]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	69da      	ldr	r2, [r3, #28]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	69d9      	ldr	r1, [r3, #28]
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	021a      	lsls	r2, r3, #8
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	61da      	str	r2, [r3, #28]
      break;
 8008ca2:	e002      	b.n	8008caa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ca8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3718      	adds	r7, #24
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d101      	bne.n	8008cd8 <HAL_TIM_ConfigClockSource+0x1c>
 8008cd4:	2302      	movs	r3, #2
 8008cd6:	e0b4      	b.n	8008e42 <HAL_TIM_ConfigClockSource+0x186>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008cfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68ba      	ldr	r2, [r7, #8]
 8008d06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d10:	d03e      	beq.n	8008d90 <HAL_TIM_ConfigClockSource+0xd4>
 8008d12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d16:	f200 8087 	bhi.w	8008e28 <HAL_TIM_ConfigClockSource+0x16c>
 8008d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d1e:	f000 8086 	beq.w	8008e2e <HAL_TIM_ConfigClockSource+0x172>
 8008d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d26:	d87f      	bhi.n	8008e28 <HAL_TIM_ConfigClockSource+0x16c>
 8008d28:	2b70      	cmp	r3, #112	@ 0x70
 8008d2a:	d01a      	beq.n	8008d62 <HAL_TIM_ConfigClockSource+0xa6>
 8008d2c:	2b70      	cmp	r3, #112	@ 0x70
 8008d2e:	d87b      	bhi.n	8008e28 <HAL_TIM_ConfigClockSource+0x16c>
 8008d30:	2b60      	cmp	r3, #96	@ 0x60
 8008d32:	d050      	beq.n	8008dd6 <HAL_TIM_ConfigClockSource+0x11a>
 8008d34:	2b60      	cmp	r3, #96	@ 0x60
 8008d36:	d877      	bhi.n	8008e28 <HAL_TIM_ConfigClockSource+0x16c>
 8008d38:	2b50      	cmp	r3, #80	@ 0x50
 8008d3a:	d03c      	beq.n	8008db6 <HAL_TIM_ConfigClockSource+0xfa>
 8008d3c:	2b50      	cmp	r3, #80	@ 0x50
 8008d3e:	d873      	bhi.n	8008e28 <HAL_TIM_ConfigClockSource+0x16c>
 8008d40:	2b40      	cmp	r3, #64	@ 0x40
 8008d42:	d058      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0x13a>
 8008d44:	2b40      	cmp	r3, #64	@ 0x40
 8008d46:	d86f      	bhi.n	8008e28 <HAL_TIM_ConfigClockSource+0x16c>
 8008d48:	2b30      	cmp	r3, #48	@ 0x30
 8008d4a:	d064      	beq.n	8008e16 <HAL_TIM_ConfigClockSource+0x15a>
 8008d4c:	2b30      	cmp	r3, #48	@ 0x30
 8008d4e:	d86b      	bhi.n	8008e28 <HAL_TIM_ConfigClockSource+0x16c>
 8008d50:	2b20      	cmp	r3, #32
 8008d52:	d060      	beq.n	8008e16 <HAL_TIM_ConfigClockSource+0x15a>
 8008d54:	2b20      	cmp	r3, #32
 8008d56:	d867      	bhi.n	8008e28 <HAL_TIM_ConfigClockSource+0x16c>
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d05c      	beq.n	8008e16 <HAL_TIM_ConfigClockSource+0x15a>
 8008d5c:	2b10      	cmp	r3, #16
 8008d5e:	d05a      	beq.n	8008e16 <HAL_TIM_ConfigClockSource+0x15a>
 8008d60:	e062      	b.n	8008e28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d72:	f000 fb69 	bl	8009448 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008d84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68ba      	ldr	r2, [r7, #8]
 8008d8c:	609a      	str	r2, [r3, #8]
      break;
 8008d8e:	e04f      	b.n	8008e30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008da0:	f000 fb52 	bl	8009448 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	689a      	ldr	r2, [r3, #8]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008db2:	609a      	str	r2, [r3, #8]
      break;
 8008db4:	e03c      	b.n	8008e30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	f000 fac6 	bl	8009354 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2150      	movs	r1, #80	@ 0x50
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f000 fb1f 	bl	8009412 <TIM_ITRx_SetConfig>
      break;
 8008dd4:	e02c      	b.n	8008e30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008de2:	461a      	mov	r2, r3
 8008de4:	f000 fae5 	bl	80093b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2160      	movs	r1, #96	@ 0x60
 8008dee:	4618      	mov	r0, r3
 8008df0:	f000 fb0f 	bl	8009412 <TIM_ITRx_SetConfig>
      break;
 8008df4:	e01c      	b.n	8008e30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e02:	461a      	mov	r2, r3
 8008e04:	f000 faa6 	bl	8009354 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2140      	movs	r1, #64	@ 0x40
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f000 faff 	bl	8009412 <TIM_ITRx_SetConfig>
      break;
 8008e14:	e00c      	b.n	8008e30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4619      	mov	r1, r3
 8008e20:	4610      	mov	r0, r2
 8008e22:	f000 faf6 	bl	8009412 <TIM_ITRx_SetConfig>
      break;
 8008e26:	e003      	b.n	8008e30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e2c:	e000      	b.n	8008e30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008e2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e4a:	b480      	push	{r7}
 8008e4c:	b083      	sub	sp, #12
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e52:	bf00      	nop
 8008e54:	370c      	adds	r7, #12
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr

08008e5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e5e:	b480      	push	{r7}
 8008e60:	b083      	sub	sp, #12
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e66:	bf00      	nop
 8008e68:	370c      	adds	r7, #12
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e72:	b480      	push	{r7}
 8008e74:	b083      	sub	sp, #12
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e7a:	bf00      	nop
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr

08008e86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e86:	b480      	push	{r7}
 8008e88:	b083      	sub	sp, #12
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e8e:	bf00      	nop
 8008e90:	370c      	adds	r7, #12
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
	...

08008e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a46      	ldr	r2, [pc, #280]	@ (8008fc8 <TIM_Base_SetConfig+0x12c>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d013      	beq.n	8008edc <TIM_Base_SetConfig+0x40>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008eba:	d00f      	beq.n	8008edc <TIM_Base_SetConfig+0x40>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a43      	ldr	r2, [pc, #268]	@ (8008fcc <TIM_Base_SetConfig+0x130>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d00b      	beq.n	8008edc <TIM_Base_SetConfig+0x40>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a42      	ldr	r2, [pc, #264]	@ (8008fd0 <TIM_Base_SetConfig+0x134>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d007      	beq.n	8008edc <TIM_Base_SetConfig+0x40>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a41      	ldr	r2, [pc, #260]	@ (8008fd4 <TIM_Base_SetConfig+0x138>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d003      	beq.n	8008edc <TIM_Base_SetConfig+0x40>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a40      	ldr	r2, [pc, #256]	@ (8008fd8 <TIM_Base_SetConfig+0x13c>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d108      	bne.n	8008eee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a35      	ldr	r2, [pc, #212]	@ (8008fc8 <TIM_Base_SetConfig+0x12c>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d02b      	beq.n	8008f4e <TIM_Base_SetConfig+0xb2>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008efc:	d027      	beq.n	8008f4e <TIM_Base_SetConfig+0xb2>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a32      	ldr	r2, [pc, #200]	@ (8008fcc <TIM_Base_SetConfig+0x130>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d023      	beq.n	8008f4e <TIM_Base_SetConfig+0xb2>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a31      	ldr	r2, [pc, #196]	@ (8008fd0 <TIM_Base_SetConfig+0x134>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d01f      	beq.n	8008f4e <TIM_Base_SetConfig+0xb2>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a30      	ldr	r2, [pc, #192]	@ (8008fd4 <TIM_Base_SetConfig+0x138>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d01b      	beq.n	8008f4e <TIM_Base_SetConfig+0xb2>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a2f      	ldr	r2, [pc, #188]	@ (8008fd8 <TIM_Base_SetConfig+0x13c>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d017      	beq.n	8008f4e <TIM_Base_SetConfig+0xb2>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4a2e      	ldr	r2, [pc, #184]	@ (8008fdc <TIM_Base_SetConfig+0x140>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d013      	beq.n	8008f4e <TIM_Base_SetConfig+0xb2>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a2d      	ldr	r2, [pc, #180]	@ (8008fe0 <TIM_Base_SetConfig+0x144>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d00f      	beq.n	8008f4e <TIM_Base_SetConfig+0xb2>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a2c      	ldr	r2, [pc, #176]	@ (8008fe4 <TIM_Base_SetConfig+0x148>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d00b      	beq.n	8008f4e <TIM_Base_SetConfig+0xb2>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a2b      	ldr	r2, [pc, #172]	@ (8008fe8 <TIM_Base_SetConfig+0x14c>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d007      	beq.n	8008f4e <TIM_Base_SetConfig+0xb2>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a2a      	ldr	r2, [pc, #168]	@ (8008fec <TIM_Base_SetConfig+0x150>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d003      	beq.n	8008f4e <TIM_Base_SetConfig+0xb2>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a29      	ldr	r2, [pc, #164]	@ (8008ff0 <TIM_Base_SetConfig+0x154>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d108      	bne.n	8008f60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	695b      	ldr	r3, [r3, #20]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	689a      	ldr	r2, [r3, #8]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a10      	ldr	r2, [pc, #64]	@ (8008fc8 <TIM_Base_SetConfig+0x12c>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d003      	beq.n	8008f94 <TIM_Base_SetConfig+0xf8>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a12      	ldr	r2, [pc, #72]	@ (8008fd8 <TIM_Base_SetConfig+0x13c>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d103      	bne.n	8008f9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	691a      	ldr	r2, [r3, #16]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	f003 0301 	and.w	r3, r3, #1
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d105      	bne.n	8008fba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	f023 0201 	bic.w	r2, r3, #1
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	611a      	str	r2, [r3, #16]
  }
}
 8008fba:	bf00      	nop
 8008fbc:	3714      	adds	r7, #20
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	40010000 	.word	0x40010000
 8008fcc:	40000400 	.word	0x40000400
 8008fd0:	40000800 	.word	0x40000800
 8008fd4:	40000c00 	.word	0x40000c00
 8008fd8:	40010400 	.word	0x40010400
 8008fdc:	40014000 	.word	0x40014000
 8008fe0:	40014400 	.word	0x40014400
 8008fe4:	40014800 	.word	0x40014800
 8008fe8:	40001800 	.word	0x40001800
 8008fec:	40001c00 	.word	0x40001c00
 8008ff0:	40002000 	.word	0x40002000

08008ff4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b087      	sub	sp, #28
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6a1b      	ldr	r3, [r3, #32]
 8009002:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a1b      	ldr	r3, [r3, #32]
 8009008:	f023 0201 	bic.w	r2, r3, #1
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f023 0303 	bic.w	r3, r3, #3
 800902a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	4313      	orrs	r3, r2
 8009034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	f023 0302 	bic.w	r3, r3, #2
 800903c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	697a      	ldr	r2, [r7, #20]
 8009044:	4313      	orrs	r3, r2
 8009046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a20      	ldr	r2, [pc, #128]	@ (80090cc <TIM_OC1_SetConfig+0xd8>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d003      	beq.n	8009058 <TIM_OC1_SetConfig+0x64>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a1f      	ldr	r2, [pc, #124]	@ (80090d0 <TIM_OC1_SetConfig+0xdc>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d10c      	bne.n	8009072 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	f023 0308 	bic.w	r3, r3, #8
 800905e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	4313      	orrs	r3, r2
 8009068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f023 0304 	bic.w	r3, r3, #4
 8009070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4a15      	ldr	r2, [pc, #84]	@ (80090cc <TIM_OC1_SetConfig+0xd8>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d003      	beq.n	8009082 <TIM_OC1_SetConfig+0x8e>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a14      	ldr	r2, [pc, #80]	@ (80090d0 <TIM_OC1_SetConfig+0xdc>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d111      	bne.n	80090a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	693a      	ldr	r2, [r7, #16]
 8009098:	4313      	orrs	r3, r2
 800909a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	4313      	orrs	r3, r2
 80090a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	693a      	ldr	r2, [r7, #16]
 80090aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	685a      	ldr	r2, [r3, #4]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	621a      	str	r2, [r3, #32]
}
 80090c0:	bf00      	nop
 80090c2:	371c      	adds	r7, #28
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	40010000 	.word	0x40010000
 80090d0:	40010400 	.word	0x40010400

080090d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b087      	sub	sp, #28
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a1b      	ldr	r3, [r3, #32]
 80090e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a1b      	ldr	r3, [r3, #32]
 80090e8:	f023 0210 	bic.w	r2, r3, #16
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800910a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	021b      	lsls	r3, r3, #8
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	4313      	orrs	r3, r2
 8009116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	f023 0320 	bic.w	r3, r3, #32
 800911e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	011b      	lsls	r3, r3, #4
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	4313      	orrs	r3, r2
 800912a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a22      	ldr	r2, [pc, #136]	@ (80091b8 <TIM_OC2_SetConfig+0xe4>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d003      	beq.n	800913c <TIM_OC2_SetConfig+0x68>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a21      	ldr	r2, [pc, #132]	@ (80091bc <TIM_OC2_SetConfig+0xe8>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d10d      	bne.n	8009158 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	011b      	lsls	r3, r3, #4
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	4313      	orrs	r3, r2
 800914e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009156:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a17      	ldr	r2, [pc, #92]	@ (80091b8 <TIM_OC2_SetConfig+0xe4>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d003      	beq.n	8009168 <TIM_OC2_SetConfig+0x94>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a16      	ldr	r2, [pc, #88]	@ (80091bc <TIM_OC2_SetConfig+0xe8>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d113      	bne.n	8009190 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800916e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009176:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	695b      	ldr	r3, [r3, #20]
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	4313      	orrs	r3, r2
 8009182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	693a      	ldr	r2, [r7, #16]
 800918c:	4313      	orrs	r3, r2
 800918e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	693a      	ldr	r2, [r7, #16]
 8009194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	697a      	ldr	r2, [r7, #20]
 80091a8:	621a      	str	r2, [r3, #32]
}
 80091aa:	bf00      	nop
 80091ac:	371c      	adds	r7, #28
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop
 80091b8:	40010000 	.word	0x40010000
 80091bc:	40010400 	.word	0x40010400

080091c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b087      	sub	sp, #28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a1b      	ldr	r3, [r3, #32]
 80091ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a1b      	ldr	r3, [r3, #32]
 80091d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	69db      	ldr	r3, [r3, #28]
 80091e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f023 0303 	bic.w	r3, r3, #3
 80091f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	4313      	orrs	r3, r2
 8009200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	021b      	lsls	r3, r3, #8
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	4313      	orrs	r3, r2
 8009214:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a21      	ldr	r2, [pc, #132]	@ (80092a0 <TIM_OC3_SetConfig+0xe0>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d003      	beq.n	8009226 <TIM_OC3_SetConfig+0x66>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a20      	ldr	r2, [pc, #128]	@ (80092a4 <TIM_OC3_SetConfig+0xe4>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d10d      	bne.n	8009242 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800922c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	021b      	lsls	r3, r3, #8
 8009234:	697a      	ldr	r2, [r7, #20]
 8009236:	4313      	orrs	r3, r2
 8009238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009240:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a16      	ldr	r2, [pc, #88]	@ (80092a0 <TIM_OC3_SetConfig+0xe0>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d003      	beq.n	8009252 <TIM_OC3_SetConfig+0x92>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a15      	ldr	r2, [pc, #84]	@ (80092a4 <TIM_OC3_SetConfig+0xe4>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d113      	bne.n	800927a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	695b      	ldr	r3, [r3, #20]
 8009266:	011b      	lsls	r3, r3, #4
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	4313      	orrs	r3, r2
 800926c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	699b      	ldr	r3, [r3, #24]
 8009272:	011b      	lsls	r3, r3, #4
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	4313      	orrs	r3, r2
 8009278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	693a      	ldr	r2, [r7, #16]
 800927e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	685a      	ldr	r2, [r3, #4]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	621a      	str	r2, [r3, #32]
}
 8009294:	bf00      	nop
 8009296:	371c      	adds	r7, #28
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	40010000 	.word	0x40010000
 80092a4:	40010400 	.word	0x40010400

080092a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b087      	sub	sp, #28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a1b      	ldr	r3, [r3, #32]
 80092bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	69db      	ldr	r3, [r3, #28]
 80092ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	021b      	lsls	r3, r3, #8
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	4313      	orrs	r3, r2
 80092ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80092f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	031b      	lsls	r3, r3, #12
 80092fa:	693a      	ldr	r2, [r7, #16]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4a12      	ldr	r2, [pc, #72]	@ (800934c <TIM_OC4_SetConfig+0xa4>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d003      	beq.n	8009310 <TIM_OC4_SetConfig+0x68>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a11      	ldr	r2, [pc, #68]	@ (8009350 <TIM_OC4_SetConfig+0xa8>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d109      	bne.n	8009324 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009316:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	695b      	ldr	r3, [r3, #20]
 800931c:	019b      	lsls	r3, r3, #6
 800931e:	697a      	ldr	r2, [r7, #20]
 8009320:	4313      	orrs	r3, r2
 8009322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	685a      	ldr	r2, [r3, #4]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	693a      	ldr	r2, [r7, #16]
 800933c:	621a      	str	r2, [r3, #32]
}
 800933e:	bf00      	nop
 8009340:	371c      	adds	r7, #28
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	40010000 	.word	0x40010000
 8009350:	40010400 	.word	0x40010400

08009354 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009354:	b480      	push	{r7}
 8009356:	b087      	sub	sp, #28
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6a1b      	ldr	r3, [r3, #32]
 8009364:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6a1b      	ldr	r3, [r3, #32]
 800936a:	f023 0201 	bic.w	r2, r3, #1
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800937e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	011b      	lsls	r3, r3, #4
 8009384:	693a      	ldr	r2, [r7, #16]
 8009386:	4313      	orrs	r3, r2
 8009388:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	f023 030a 	bic.w	r3, r3, #10
 8009390:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009392:	697a      	ldr	r2, [r7, #20]
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	4313      	orrs	r3, r2
 8009398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	693a      	ldr	r2, [r7, #16]
 800939e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	697a      	ldr	r2, [r7, #20]
 80093a4:	621a      	str	r2, [r3, #32]
}
 80093a6:	bf00      	nop
 80093a8:	371c      	adds	r7, #28
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr

080093b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b087      	sub	sp, #28
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	60f8      	str	r0, [r7, #12]
 80093ba:	60b9      	str	r1, [r7, #8]
 80093bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6a1b      	ldr	r3, [r3, #32]
 80093c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6a1b      	ldr	r3, [r3, #32]
 80093c8:	f023 0210 	bic.w	r2, r3, #16
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	699b      	ldr	r3, [r3, #24]
 80093d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80093dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	031b      	lsls	r3, r3, #12
 80093e2:	693a      	ldr	r2, [r7, #16]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80093ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	011b      	lsls	r3, r3, #4
 80093f4:	697a      	ldr	r2, [r7, #20]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	697a      	ldr	r2, [r7, #20]
 8009404:	621a      	str	r2, [r3, #32]
}
 8009406:	bf00      	nop
 8009408:	371c      	adds	r7, #28
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009412:	b480      	push	{r7}
 8009414:	b085      	sub	sp, #20
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009428:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	4313      	orrs	r3, r2
 8009430:	f043 0307 	orr.w	r3, r3, #7
 8009434:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	68fa      	ldr	r2, [r7, #12]
 800943a:	609a      	str	r2, [r3, #8]
}
 800943c:	bf00      	nop
 800943e:	3714      	adds	r7, #20
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009448:	b480      	push	{r7}
 800944a:	b087      	sub	sp, #28
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
 8009454:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009462:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	021a      	lsls	r2, r3, #8
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	431a      	orrs	r2, r3
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	4313      	orrs	r3, r2
 8009470:	697a      	ldr	r2, [r7, #20]
 8009472:	4313      	orrs	r3, r2
 8009474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	697a      	ldr	r2, [r7, #20]
 800947a:	609a      	str	r2, [r3, #8]
}
 800947c:	bf00      	nop
 800947e:	371c      	adds	r7, #28
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009488:	b480      	push	{r7}
 800948a:	b087      	sub	sp, #28
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	f003 031f 	and.w	r3, r3, #31
 800949a:	2201      	movs	r2, #1
 800949c:	fa02 f303 	lsl.w	r3, r2, r3
 80094a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6a1a      	ldr	r2, [r3, #32]
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	43db      	mvns	r3, r3
 80094aa:	401a      	ands	r2, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6a1a      	ldr	r2, [r3, #32]
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	f003 031f 	and.w	r3, r3, #31
 80094ba:	6879      	ldr	r1, [r7, #4]
 80094bc:	fa01 f303 	lsl.w	r3, r1, r3
 80094c0:	431a      	orrs	r2, r3
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	621a      	str	r2, [r3, #32]
}
 80094c6:	bf00      	nop
 80094c8:	371c      	adds	r7, #28
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
	...

080094d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d101      	bne.n	80094ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094e8:	2302      	movs	r3, #2
 80094ea:	e05a      	b.n	80095a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2202      	movs	r2, #2
 80094f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009512:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	4313      	orrs	r3, r2
 800951c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a21      	ldr	r2, [pc, #132]	@ (80095b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d022      	beq.n	8009576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009538:	d01d      	beq.n	8009576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a1d      	ldr	r2, [pc, #116]	@ (80095b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d018      	beq.n	8009576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a1b      	ldr	r2, [pc, #108]	@ (80095b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d013      	beq.n	8009576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a1a      	ldr	r2, [pc, #104]	@ (80095bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d00e      	beq.n	8009576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a18      	ldr	r2, [pc, #96]	@ (80095c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d009      	beq.n	8009576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a17      	ldr	r2, [pc, #92]	@ (80095c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d004      	beq.n	8009576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a15      	ldr	r2, [pc, #84]	@ (80095c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d10c      	bne.n	8009590 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800957c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	4313      	orrs	r3, r2
 8009586:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3714      	adds	r7, #20
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr
 80095ae:	bf00      	nop
 80095b0:	40010000 	.word	0x40010000
 80095b4:	40000400 	.word	0x40000400
 80095b8:	40000800 	.word	0x40000800
 80095bc:	40000c00 	.word	0x40000c00
 80095c0:	40010400 	.word	0x40010400
 80095c4:	40014000 	.word	0x40014000
 80095c8:	40001800 	.word	0x40001800

080095cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095d4:	bf00      	nop
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095e8:	bf00      	nop
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d101      	bne.n	8009606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	e042      	b.n	800968c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800960c:	b2db      	uxtb	r3, r3
 800960e:	2b00      	cmp	r3, #0
 8009610:	d106      	bne.n	8009620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7fa fd30 	bl	8004080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2224      	movs	r2, #36	@ 0x24
 8009624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68da      	ldr	r2, [r3, #12]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 fdff 	bl	800a23c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	691a      	ldr	r2, [r3, #16]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800964c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	695a      	ldr	r2, [r3, #20]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800965c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68da      	ldr	r2, [r3, #12]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800966c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2220      	movs	r2, #32
 8009678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2220      	movs	r2, #32
 8009680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b08a      	sub	sp, #40	@ 0x28
 8009698:	af02      	add	r7, sp, #8
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	603b      	str	r3, [r7, #0]
 80096a0:	4613      	mov	r3, r2
 80096a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80096a4:	2300      	movs	r3, #0
 80096a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b20      	cmp	r3, #32
 80096b2:	d175      	bne.n	80097a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d002      	beq.n	80096c0 <HAL_UART_Transmit+0x2c>
 80096ba:	88fb      	ldrh	r3, [r7, #6]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d101      	bne.n	80096c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e06e      	b.n	80097a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2200      	movs	r2, #0
 80096c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2221      	movs	r2, #33	@ 0x21
 80096ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80096d2:	f7fa fef9 	bl	80044c8 <HAL_GetTick>
 80096d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	88fa      	ldrh	r2, [r7, #6]
 80096dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	88fa      	ldrh	r2, [r7, #6]
 80096e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096ec:	d108      	bne.n	8009700 <HAL_UART_Transmit+0x6c>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	691b      	ldr	r3, [r3, #16]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d104      	bne.n	8009700 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80096f6:	2300      	movs	r3, #0
 80096f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	61bb      	str	r3, [r7, #24]
 80096fe:	e003      	b.n	8009708 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009704:	2300      	movs	r3, #0
 8009706:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009708:	e02e      	b.n	8009768 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	2200      	movs	r2, #0
 8009712:	2180      	movs	r1, #128	@ 0x80
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f000 fb9b 	bl	8009e50 <UART_WaitOnFlagUntilTimeout>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d005      	beq.n	800972c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2220      	movs	r2, #32
 8009724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009728:	2303      	movs	r3, #3
 800972a:	e03a      	b.n	80097a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10b      	bne.n	800974a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	881b      	ldrh	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009740:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	3302      	adds	r3, #2
 8009746:	61bb      	str	r3, [r7, #24]
 8009748:	e007      	b.n	800975a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	781a      	ldrb	r2, [r3, #0]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	3301      	adds	r3, #1
 8009758:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800975e:	b29b      	uxth	r3, r3
 8009760:	3b01      	subs	r3, #1
 8009762:	b29a      	uxth	r2, r3
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800976c:	b29b      	uxth	r3, r3
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1cb      	bne.n	800970a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	9300      	str	r3, [sp, #0]
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	2200      	movs	r2, #0
 800977a:	2140      	movs	r1, #64	@ 0x40
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f000 fb67 	bl	8009e50 <UART_WaitOnFlagUntilTimeout>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d005      	beq.n	8009794 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2220      	movs	r2, #32
 800978c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009790:	2303      	movs	r3, #3
 8009792:	e006      	b.n	80097a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2220      	movs	r2, #32
 8009798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800979c:	2300      	movs	r3, #0
 800979e:	e000      	b.n	80097a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80097a0:	2302      	movs	r3, #2
  }
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3720      	adds	r7, #32
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b08a      	sub	sp, #40	@ 0x28
 80097ae:	af02      	add	r7, sp, #8
 80097b0:	60f8      	str	r0, [r7, #12]
 80097b2:	60b9      	str	r1, [r7, #8]
 80097b4:	603b      	str	r3, [r7, #0]
 80097b6:	4613      	mov	r3, r2
 80097b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80097ba:	2300      	movs	r3, #0
 80097bc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b20      	cmp	r3, #32
 80097c8:	f040 8081 	bne.w	80098ce <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d002      	beq.n	80097d8 <HAL_UART_Receive+0x2e>
 80097d2:	88fb      	ldrh	r3, [r7, #6]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d101      	bne.n	80097dc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	e079      	b.n	80098d0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2200      	movs	r2, #0
 80097e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2222      	movs	r2, #34	@ 0x22
 80097e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097f0:	f7fa fe6a 	bl	80044c8 <HAL_GetTick>
 80097f4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	88fa      	ldrh	r2, [r7, #6]
 80097fa:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	88fa      	ldrh	r2, [r7, #6]
 8009800:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800980a:	d108      	bne.n	800981e <HAL_UART_Receive+0x74>
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d104      	bne.n	800981e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8009814:	2300      	movs	r3, #0
 8009816:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	61bb      	str	r3, [r7, #24]
 800981c:	e003      	b.n	8009826 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009822:	2300      	movs	r3, #0
 8009824:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009826:	e047      	b.n	80098b8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	2200      	movs	r2, #0
 8009830:	2120      	movs	r1, #32
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f000 fb0c 	bl	8009e50 <UART_WaitOnFlagUntilTimeout>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d005      	beq.n	800984a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2220      	movs	r2, #32
 8009842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8009846:	2303      	movs	r3, #3
 8009848:	e042      	b.n	80098d0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d10c      	bne.n	800986a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	b29b      	uxth	r3, r3
 8009858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800985c:	b29a      	uxth	r2, r3
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	3302      	adds	r3, #2
 8009866:	61bb      	str	r3, [r7, #24]
 8009868:	e01f      	b.n	80098aa <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009872:	d007      	beq.n	8009884 <HAL_UART_Receive+0xda>
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d10a      	bne.n	8009892 <HAL_UART_Receive+0xe8>
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d106      	bne.n	8009892 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	b2da      	uxtb	r2, r3
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	701a      	strb	r2, [r3, #0]
 8009890:	e008      	b.n	80098a4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	b2db      	uxtb	r3, r3
 800989a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800989e:	b2da      	uxtb	r2, r3
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	3301      	adds	r3, #1
 80098a8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	3b01      	subs	r3, #1
 80098b2:	b29a      	uxth	r2, r3
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80098bc:	b29b      	uxth	r3, r3
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1b2      	bne.n	8009828 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2220      	movs	r2, #32
 80098c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	e000      	b.n	80098d0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80098ce:	2302      	movs	r3, #2
  }
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3720      	adds	r7, #32
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b0ba      	sub	sp, #232	@ 0xe8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	695b      	ldr	r3, [r3, #20]
 80098fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80098fe:	2300      	movs	r3, #0
 8009900:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009904:	2300      	movs	r3, #0
 8009906:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800990a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800990e:	f003 030f 	and.w	r3, r3, #15
 8009912:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009916:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800991a:	2b00      	cmp	r3, #0
 800991c:	d10f      	bne.n	800993e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800991e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009922:	f003 0320 	and.w	r3, r3, #32
 8009926:	2b00      	cmp	r3, #0
 8009928:	d009      	beq.n	800993e <HAL_UART_IRQHandler+0x66>
 800992a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800992e:	f003 0320 	and.w	r3, r3, #32
 8009932:	2b00      	cmp	r3, #0
 8009934:	d003      	beq.n	800993e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fbc2 	bl	800a0c0 <UART_Receive_IT>
      return;
 800993c:	e25b      	b.n	8009df6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800993e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 80de 	beq.w	8009b04 <HAL_UART_IRQHandler+0x22c>
 8009948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800994c:	f003 0301 	and.w	r3, r3, #1
 8009950:	2b00      	cmp	r3, #0
 8009952:	d106      	bne.n	8009962 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009958:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800995c:	2b00      	cmp	r3, #0
 800995e:	f000 80d1 	beq.w	8009b04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009966:	f003 0301 	and.w	r3, r3, #1
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00b      	beq.n	8009986 <HAL_UART_IRQHandler+0xae>
 800996e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009976:	2b00      	cmp	r3, #0
 8009978:	d005      	beq.n	8009986 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800997e:	f043 0201 	orr.w	r2, r3, #1
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800998a:	f003 0304 	and.w	r3, r3, #4
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00b      	beq.n	80099aa <HAL_UART_IRQHandler+0xd2>
 8009992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009996:	f003 0301 	and.w	r3, r3, #1
 800999a:	2b00      	cmp	r3, #0
 800999c:	d005      	beq.n	80099aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099a2:	f043 0202 	orr.w	r2, r3, #2
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099ae:	f003 0302 	and.w	r3, r3, #2
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00b      	beq.n	80099ce <HAL_UART_IRQHandler+0xf6>
 80099b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099ba:	f003 0301 	and.w	r3, r3, #1
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d005      	beq.n	80099ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099c6:	f043 0204 	orr.w	r2, r3, #4
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80099ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099d2:	f003 0308 	and.w	r3, r3, #8
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d011      	beq.n	80099fe <HAL_UART_IRQHandler+0x126>
 80099da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099de:	f003 0320 	and.w	r3, r3, #32
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d105      	bne.n	80099f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80099e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099ea:	f003 0301 	and.w	r3, r3, #1
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d005      	beq.n	80099fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099f6:	f043 0208 	orr.w	r2, r3, #8
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 81f2 	beq.w	8009dec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a0c:	f003 0320 	and.w	r3, r3, #32
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d008      	beq.n	8009a26 <HAL_UART_IRQHandler+0x14e>
 8009a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a18:	f003 0320 	and.w	r3, r3, #32
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d002      	beq.n	8009a26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 fb4d 	bl	800a0c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	695b      	ldr	r3, [r3, #20]
 8009a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a30:	2b40      	cmp	r3, #64	@ 0x40
 8009a32:	bf0c      	ite	eq
 8009a34:	2301      	moveq	r3, #1
 8009a36:	2300      	movne	r3, #0
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a42:	f003 0308 	and.w	r3, r3, #8
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d103      	bne.n	8009a52 <HAL_UART_IRQHandler+0x17a>
 8009a4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d04f      	beq.n	8009af2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fa55 	bl	8009f02 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	695b      	ldr	r3, [r3, #20]
 8009a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a62:	2b40      	cmp	r3, #64	@ 0x40
 8009a64:	d141      	bne.n	8009aea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	3314      	adds	r3, #20
 8009a6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3314      	adds	r3, #20
 8009a8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009a92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009a96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009a9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009aa2:	e841 2300 	strex	r3, r2, [r1]
 8009aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009aaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1d9      	bne.n	8009a66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d013      	beq.n	8009ae2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009abe:	4a7e      	ldr	r2, [pc, #504]	@ (8009cb8 <HAL_UART_IRQHandler+0x3e0>)
 8009ac0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7fa feaf 	bl	800482a <HAL_DMA_Abort_IT>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d016      	beq.n	8009b00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009adc:	4610      	mov	r0, r2
 8009ade:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ae0:	e00e      	b.n	8009b00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f99e 	bl	8009e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ae8:	e00a      	b.n	8009b00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f99a 	bl	8009e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009af0:	e006      	b.n	8009b00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 f996 	bl	8009e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009afe:	e175      	b.n	8009dec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b00:	bf00      	nop
    return;
 8009b02:	e173      	b.n	8009dec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	f040 814f 	bne.w	8009dac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b12:	f003 0310 	and.w	r3, r3, #16
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f000 8148 	beq.w	8009dac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b20:	f003 0310 	and.w	r3, r3, #16
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f000 8141 	beq.w	8009dac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	60bb      	str	r3, [r7, #8]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	60bb      	str	r3, [r7, #8]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	60bb      	str	r3, [r7, #8]
 8009b3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b4a:	2b40      	cmp	r3, #64	@ 0x40
 8009b4c:	f040 80b6 	bne.w	8009cbc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009b5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f000 8145 	beq.w	8009df0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009b6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	f080 813e 	bcs.w	8009df0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b7a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b80:	69db      	ldr	r3, [r3, #28]
 8009b82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b86:	f000 8088 	beq.w	8009c9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	330c      	adds	r3, #12
 8009b90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b98:	e853 3f00 	ldrex	r3, [r3]
 8009b9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009ba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ba4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	330c      	adds	r3, #12
 8009bb2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009bb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009bba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009bc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009bc6:	e841 2300 	strex	r3, r2, [r1]
 8009bca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1d9      	bne.n	8009b8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	3314      	adds	r3, #20
 8009bdc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009be0:	e853 3f00 	ldrex	r3, [r3]
 8009be4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009be6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009be8:	f023 0301 	bic.w	r3, r3, #1
 8009bec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	3314      	adds	r3, #20
 8009bf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009bfa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009bfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009c02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009c06:	e841 2300 	strex	r3, r2, [r1]
 8009c0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009c0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1e1      	bne.n	8009bd6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	3314      	adds	r3, #20
 8009c18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c1c:	e853 3f00 	ldrex	r3, [r3]
 8009c20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009c22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	3314      	adds	r3, #20
 8009c32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009c36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009c38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009c3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009c3e:	e841 2300 	strex	r3, r2, [r1]
 8009c42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009c44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1e3      	bne.n	8009c12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2220      	movs	r2, #32
 8009c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	330c      	adds	r3, #12
 8009c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c62:	e853 3f00 	ldrex	r3, [r3]
 8009c66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009c68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c6a:	f023 0310 	bic.w	r3, r3, #16
 8009c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	330c      	adds	r3, #12
 8009c78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009c7c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009c7e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c84:	e841 2300 	strex	r3, r2, [r1]
 8009c88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009c8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1e3      	bne.n	8009c58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7fa fd58 	bl	800474a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2202      	movs	r2, #2
 8009c9e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	1ad3      	subs	r3, r2, r3
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	4619      	mov	r1, r3
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 f8c1 	bl	8009e38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009cb6:	e09b      	b.n	8009df0 <HAL_UART_IRQHandler+0x518>
 8009cb8:	08009fc9 	.word	0x08009fc9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f000 808e 	beq.w	8009df4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009cd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	f000 8089 	beq.w	8009df4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	330c      	adds	r3, #12
 8009ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cec:	e853 3f00 	ldrex	r3, [r3]
 8009cf0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009cf8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	330c      	adds	r3, #12
 8009d02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009d06:	647a      	str	r2, [r7, #68]	@ 0x44
 8009d08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d0e:	e841 2300 	strex	r3, r2, [r1]
 8009d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d1e3      	bne.n	8009ce2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	3314      	adds	r3, #20
 8009d20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d24:	e853 3f00 	ldrex	r3, [r3]
 8009d28:	623b      	str	r3, [r7, #32]
   return(result);
 8009d2a:	6a3b      	ldr	r3, [r7, #32]
 8009d2c:	f023 0301 	bic.w	r3, r3, #1
 8009d30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	3314      	adds	r3, #20
 8009d3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009d3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d46:	e841 2300 	strex	r3, r2, [r1]
 8009d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d1e3      	bne.n	8009d1a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2220      	movs	r2, #32
 8009d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	330c      	adds	r3, #12
 8009d66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	e853 3f00 	ldrex	r3, [r3]
 8009d6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f023 0310 	bic.w	r3, r3, #16
 8009d76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	330c      	adds	r3, #12
 8009d80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009d84:	61fa      	str	r2, [r7, #28]
 8009d86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d88:	69b9      	ldr	r1, [r7, #24]
 8009d8a:	69fa      	ldr	r2, [r7, #28]
 8009d8c:	e841 2300 	strex	r3, r2, [r1]
 8009d90:	617b      	str	r3, [r7, #20]
   return(result);
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d1e3      	bne.n	8009d60 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2202      	movs	r2, #2
 8009d9c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009da2:	4619      	mov	r1, r3
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f847 	bl	8009e38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009daa:	e023      	b.n	8009df4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d009      	beq.n	8009dcc <HAL_UART_IRQHandler+0x4f4>
 8009db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d003      	beq.n	8009dcc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 f913 	bl	8009ff0 <UART_Transmit_IT>
    return;
 8009dca:	e014      	b.n	8009df6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00e      	beq.n	8009df6 <HAL_UART_IRQHandler+0x51e>
 8009dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d008      	beq.n	8009df6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 f953 	bl	800a090 <UART_EndTransmit_IT>
    return;
 8009dea:	e004      	b.n	8009df6 <HAL_UART_IRQHandler+0x51e>
    return;
 8009dec:	bf00      	nop
 8009dee:	e002      	b.n	8009df6 <HAL_UART_IRQHandler+0x51e>
      return;
 8009df0:	bf00      	nop
 8009df2:	e000      	b.n	8009df6 <HAL_UART_IRQHandler+0x51e>
      return;
 8009df4:	bf00      	nop
  }
}
 8009df6:	37e8      	adds	r7, #232	@ 0xe8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009e04:	bf00      	nop
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b083      	sub	sp, #12
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009e18:	bf00      	nop
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009e2c:	bf00      	nop
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	460b      	mov	r3, r1
 8009e42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b086      	sub	sp, #24
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	603b      	str	r3, [r7, #0]
 8009e5c:	4613      	mov	r3, r2
 8009e5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e60:	e03b      	b.n	8009eda <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e62:	6a3b      	ldr	r3, [r7, #32]
 8009e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e68:	d037      	beq.n	8009eda <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e6a:	f7fa fb2d 	bl	80044c8 <HAL_GetTick>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	1ad3      	subs	r3, r2, r3
 8009e74:	6a3a      	ldr	r2, [r7, #32]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d302      	bcc.n	8009e80 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e7a:	6a3b      	ldr	r3, [r7, #32]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d101      	bne.n	8009e84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e80:	2303      	movs	r3, #3
 8009e82:	e03a      	b.n	8009efa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	f003 0304 	and.w	r3, r3, #4
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d023      	beq.n	8009eda <UART_WaitOnFlagUntilTimeout+0x8a>
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	2b80      	cmp	r3, #128	@ 0x80
 8009e96:	d020      	beq.n	8009eda <UART_WaitOnFlagUntilTimeout+0x8a>
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	2b40      	cmp	r3, #64	@ 0x40
 8009e9c:	d01d      	beq.n	8009eda <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f003 0308 	and.w	r3, r3, #8
 8009ea8:	2b08      	cmp	r3, #8
 8009eaa:	d116      	bne.n	8009eda <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009eac:	2300      	movs	r3, #0
 8009eae:	617b      	str	r3, [r7, #20]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	617b      	str	r3, [r7, #20]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	617b      	str	r3, [r7, #20]
 8009ec0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f000 f81d 	bl	8009f02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2208      	movs	r2, #8
 8009ecc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e00f      	b.n	8009efa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	4013      	ands	r3, r2
 8009ee4:	68ba      	ldr	r2, [r7, #8]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	bf0c      	ite	eq
 8009eea:	2301      	moveq	r3, #1
 8009eec:	2300      	movne	r3, #0
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	79fb      	ldrb	r3, [r7, #7]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d0b4      	beq.n	8009e62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3718      	adds	r7, #24
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f02:	b480      	push	{r7}
 8009f04:	b095      	sub	sp, #84	@ 0x54
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	330c      	adds	r3, #12
 8009f10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f14:	e853 3f00 	ldrex	r3, [r3]
 8009f18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	330c      	adds	r3, #12
 8009f28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009f2a:	643a      	str	r2, [r7, #64]	@ 0x40
 8009f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f32:	e841 2300 	strex	r3, r2, [r1]
 8009f36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1e5      	bne.n	8009f0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	3314      	adds	r3, #20
 8009f44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f46:	6a3b      	ldr	r3, [r7, #32]
 8009f48:	e853 3f00 	ldrex	r3, [r3]
 8009f4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	f023 0301 	bic.w	r3, r3, #1
 8009f54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	3314      	adds	r3, #20
 8009f5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f66:	e841 2300 	strex	r3, r2, [r1]
 8009f6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1e5      	bne.n	8009f3e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d119      	bne.n	8009fae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	330c      	adds	r3, #12
 8009f80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	e853 3f00 	ldrex	r3, [r3]
 8009f88:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	f023 0310 	bic.w	r3, r3, #16
 8009f90:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	330c      	adds	r3, #12
 8009f98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f9a:	61ba      	str	r2, [r7, #24]
 8009f9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9e:	6979      	ldr	r1, [r7, #20]
 8009fa0:	69ba      	ldr	r2, [r7, #24]
 8009fa2:	e841 2300 	strex	r3, r2, [r1]
 8009fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1e5      	bne.n	8009f7a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2220      	movs	r2, #32
 8009fb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009fbc:	bf00      	nop
 8009fbe:	3754      	adds	r7, #84	@ 0x54
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fe2:	68f8      	ldr	r0, [r7, #12]
 8009fe4:	f7ff ff1e 	bl	8009e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fe8:	bf00      	nop
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	2b21      	cmp	r3, #33	@ 0x21
 800a002:	d13e      	bne.n	800a082 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a00c:	d114      	bne.n	800a038 <UART_Transmit_IT+0x48>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d110      	bne.n	800a038 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6a1b      	ldr	r3, [r3, #32]
 800a01a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	881b      	ldrh	r3, [r3, #0]
 800a020:	461a      	mov	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a02a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a1b      	ldr	r3, [r3, #32]
 800a030:	1c9a      	adds	r2, r3, #2
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	621a      	str	r2, [r3, #32]
 800a036:	e008      	b.n	800a04a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6a1b      	ldr	r3, [r3, #32]
 800a03c:	1c59      	adds	r1, r3, #1
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	6211      	str	r1, [r2, #32]
 800a042:	781a      	ldrb	r2, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a04e:	b29b      	uxth	r3, r3
 800a050:	3b01      	subs	r3, #1
 800a052:	b29b      	uxth	r3, r3
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	4619      	mov	r1, r3
 800a058:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10f      	bne.n	800a07e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	68da      	ldr	r2, [r3, #12]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a06c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	68da      	ldr	r2, [r3, #12]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a07c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	e000      	b.n	800a084 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a082:	2302      	movs	r3, #2
  }
}
 800a084:	4618      	mov	r0, r3
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	68da      	ldr	r2, [r3, #12]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2220      	movs	r2, #32
 800a0ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f7ff fea3 	bl	8009dfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b08c      	sub	sp, #48	@ 0x30
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	2b22      	cmp	r3, #34	@ 0x22
 800a0d2:	f040 80ae 	bne.w	800a232 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0de:	d117      	bne.n	800a110 <UART_Receive_IT+0x50>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	691b      	ldr	r3, [r3, #16]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d113      	bne.n	800a110 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0fe:	b29a      	uxth	r2, r3
 800a100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a102:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a108:	1c9a      	adds	r2, r3, #2
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	629a      	str	r2, [r3, #40]	@ 0x28
 800a10e:	e026      	b.n	800a15e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a114:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a116:	2300      	movs	r3, #0
 800a118:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a122:	d007      	beq.n	800a134 <UART_Receive_IT+0x74>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d10a      	bne.n	800a142 <UART_Receive_IT+0x82>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	691b      	ldr	r3, [r3, #16]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d106      	bne.n	800a142 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	b2da      	uxtb	r2, r3
 800a13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a13e:	701a      	strb	r2, [r3, #0]
 800a140:	e008      	b.n	800a154 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a14e:	b2da      	uxtb	r2, r3
 800a150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a152:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a158:	1c5a      	adds	r2, r3, #1
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a162:	b29b      	uxth	r3, r3
 800a164:	3b01      	subs	r3, #1
 800a166:	b29b      	uxth	r3, r3
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	4619      	mov	r1, r3
 800a16c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d15d      	bne.n	800a22e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	68da      	ldr	r2, [r3, #12]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f022 0220 	bic.w	r2, r2, #32
 800a180:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68da      	ldr	r2, [r3, #12]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a190:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	695a      	ldr	r2, [r3, #20]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f022 0201 	bic.w	r2, r2, #1
 800a1a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2220      	movs	r2, #32
 800a1a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d135      	bne.n	800a224 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	330c      	adds	r3, #12
 800a1c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	e853 3f00 	ldrex	r3, [r3]
 800a1cc:	613b      	str	r3, [r7, #16]
   return(result);
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	f023 0310 	bic.w	r3, r3, #16
 800a1d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	330c      	adds	r3, #12
 800a1dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1de:	623a      	str	r2, [r7, #32]
 800a1e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e2:	69f9      	ldr	r1, [r7, #28]
 800a1e4:	6a3a      	ldr	r2, [r7, #32]
 800a1e6:	e841 2300 	strex	r3, r2, [r1]
 800a1ea:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1e5      	bne.n	800a1be <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 0310 	and.w	r3, r3, #16
 800a1fc:	2b10      	cmp	r3, #16
 800a1fe:	d10a      	bne.n	800a216 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a200:	2300      	movs	r3, #0
 800a202:	60fb      	str	r3, [r7, #12]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	60fb      	str	r3, [r7, #12]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	60fb      	str	r3, [r7, #12]
 800a214:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a21a:	4619      	mov	r1, r3
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f7ff fe0b 	bl	8009e38 <HAL_UARTEx_RxEventCallback>
 800a222:	e002      	b.n	800a22a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f7ff fdf3 	bl	8009e10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a22a:	2300      	movs	r3, #0
 800a22c:	e002      	b.n	800a234 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a22e:	2300      	movs	r3, #0
 800a230:	e000      	b.n	800a234 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a232:	2302      	movs	r3, #2
  }
}
 800a234:	4618      	mov	r0, r3
 800a236:	3730      	adds	r7, #48	@ 0x30
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a23c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a240:	b0c0      	sub	sp, #256	@ 0x100
 800a242:	af00      	add	r7, sp, #0
 800a244:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a258:	68d9      	ldr	r1, [r3, #12]
 800a25a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	ea40 0301 	orr.w	r3, r0, r1
 800a264:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a26a:	689a      	ldr	r2, [r3, #8]
 800a26c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	431a      	orrs	r2, r3
 800a274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a278:	695b      	ldr	r3, [r3, #20]
 800a27a:	431a      	orrs	r2, r3
 800a27c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a280:	69db      	ldr	r3, [r3, #28]
 800a282:	4313      	orrs	r3, r2
 800a284:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a294:	f021 010c 	bic.w	r1, r1, #12
 800a298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a2a2:	430b      	orrs	r3, r1
 800a2a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a2a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	695b      	ldr	r3, [r3, #20]
 800a2ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a2b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2b6:	6999      	ldr	r1, [r3, #24]
 800a2b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	ea40 0301 	orr.w	r3, r0, r1
 800a2c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a2c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	4b8f      	ldr	r3, [pc, #572]	@ (800a508 <UART_SetConfig+0x2cc>)
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d005      	beq.n	800a2dc <UART_SetConfig+0xa0>
 800a2d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	4b8d      	ldr	r3, [pc, #564]	@ (800a50c <UART_SetConfig+0x2d0>)
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d104      	bne.n	800a2e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a2dc:	f7fd fc88 	bl	8007bf0 <HAL_RCC_GetPCLK2Freq>
 800a2e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a2e4:	e003      	b.n	800a2ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a2e6:	f7fd fc6f 	bl	8007bc8 <HAL_RCC_GetPCLK1Freq>
 800a2ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2f2:	69db      	ldr	r3, [r3, #28]
 800a2f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2f8:	f040 810c 	bne.w	800a514 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a2fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a300:	2200      	movs	r2, #0
 800a302:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a306:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a30a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a30e:	4622      	mov	r2, r4
 800a310:	462b      	mov	r3, r5
 800a312:	1891      	adds	r1, r2, r2
 800a314:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a316:	415b      	adcs	r3, r3
 800a318:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a31a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a31e:	4621      	mov	r1, r4
 800a320:	eb12 0801 	adds.w	r8, r2, r1
 800a324:	4629      	mov	r1, r5
 800a326:	eb43 0901 	adc.w	r9, r3, r1
 800a32a:	f04f 0200 	mov.w	r2, #0
 800a32e:	f04f 0300 	mov.w	r3, #0
 800a332:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a336:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a33a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a33e:	4690      	mov	r8, r2
 800a340:	4699      	mov	r9, r3
 800a342:	4623      	mov	r3, r4
 800a344:	eb18 0303 	adds.w	r3, r8, r3
 800a348:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a34c:	462b      	mov	r3, r5
 800a34e:	eb49 0303 	adc.w	r3, r9, r3
 800a352:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a362:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a366:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a36a:	460b      	mov	r3, r1
 800a36c:	18db      	adds	r3, r3, r3
 800a36e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a370:	4613      	mov	r3, r2
 800a372:	eb42 0303 	adc.w	r3, r2, r3
 800a376:	657b      	str	r3, [r7, #84]	@ 0x54
 800a378:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a37c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a380:	f7f5 ff8e 	bl	80002a0 <__aeabi_uldivmod>
 800a384:	4602      	mov	r2, r0
 800a386:	460b      	mov	r3, r1
 800a388:	4b61      	ldr	r3, [pc, #388]	@ (800a510 <UART_SetConfig+0x2d4>)
 800a38a:	fba3 2302 	umull	r2, r3, r3, r2
 800a38e:	095b      	lsrs	r3, r3, #5
 800a390:	011c      	lsls	r4, r3, #4
 800a392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a396:	2200      	movs	r2, #0
 800a398:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a39c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a3a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a3a4:	4642      	mov	r2, r8
 800a3a6:	464b      	mov	r3, r9
 800a3a8:	1891      	adds	r1, r2, r2
 800a3aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a3ac:	415b      	adcs	r3, r3
 800a3ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a3b4:	4641      	mov	r1, r8
 800a3b6:	eb12 0a01 	adds.w	sl, r2, r1
 800a3ba:	4649      	mov	r1, r9
 800a3bc:	eb43 0b01 	adc.w	fp, r3, r1
 800a3c0:	f04f 0200 	mov.w	r2, #0
 800a3c4:	f04f 0300 	mov.w	r3, #0
 800a3c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a3cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a3d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a3d4:	4692      	mov	sl, r2
 800a3d6:	469b      	mov	fp, r3
 800a3d8:	4643      	mov	r3, r8
 800a3da:	eb1a 0303 	adds.w	r3, sl, r3
 800a3de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a3e2:	464b      	mov	r3, r9
 800a3e4:	eb4b 0303 	adc.w	r3, fp, r3
 800a3e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a3ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a3f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a3fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a400:	460b      	mov	r3, r1
 800a402:	18db      	adds	r3, r3, r3
 800a404:	643b      	str	r3, [r7, #64]	@ 0x40
 800a406:	4613      	mov	r3, r2
 800a408:	eb42 0303 	adc.w	r3, r2, r3
 800a40c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a40e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a412:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a416:	f7f5 ff43 	bl	80002a0 <__aeabi_uldivmod>
 800a41a:	4602      	mov	r2, r0
 800a41c:	460b      	mov	r3, r1
 800a41e:	4611      	mov	r1, r2
 800a420:	4b3b      	ldr	r3, [pc, #236]	@ (800a510 <UART_SetConfig+0x2d4>)
 800a422:	fba3 2301 	umull	r2, r3, r3, r1
 800a426:	095b      	lsrs	r3, r3, #5
 800a428:	2264      	movs	r2, #100	@ 0x64
 800a42a:	fb02 f303 	mul.w	r3, r2, r3
 800a42e:	1acb      	subs	r3, r1, r3
 800a430:	00db      	lsls	r3, r3, #3
 800a432:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a436:	4b36      	ldr	r3, [pc, #216]	@ (800a510 <UART_SetConfig+0x2d4>)
 800a438:	fba3 2302 	umull	r2, r3, r3, r2
 800a43c:	095b      	lsrs	r3, r3, #5
 800a43e:	005b      	lsls	r3, r3, #1
 800a440:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a444:	441c      	add	r4, r3
 800a446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a44a:	2200      	movs	r2, #0
 800a44c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a450:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a454:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a458:	4642      	mov	r2, r8
 800a45a:	464b      	mov	r3, r9
 800a45c:	1891      	adds	r1, r2, r2
 800a45e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a460:	415b      	adcs	r3, r3
 800a462:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a464:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a468:	4641      	mov	r1, r8
 800a46a:	1851      	adds	r1, r2, r1
 800a46c:	6339      	str	r1, [r7, #48]	@ 0x30
 800a46e:	4649      	mov	r1, r9
 800a470:	414b      	adcs	r3, r1
 800a472:	637b      	str	r3, [r7, #52]	@ 0x34
 800a474:	f04f 0200 	mov.w	r2, #0
 800a478:	f04f 0300 	mov.w	r3, #0
 800a47c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a480:	4659      	mov	r1, fp
 800a482:	00cb      	lsls	r3, r1, #3
 800a484:	4651      	mov	r1, sl
 800a486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a48a:	4651      	mov	r1, sl
 800a48c:	00ca      	lsls	r2, r1, #3
 800a48e:	4610      	mov	r0, r2
 800a490:	4619      	mov	r1, r3
 800a492:	4603      	mov	r3, r0
 800a494:	4642      	mov	r2, r8
 800a496:	189b      	adds	r3, r3, r2
 800a498:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a49c:	464b      	mov	r3, r9
 800a49e:	460a      	mov	r2, r1
 800a4a0:	eb42 0303 	adc.w	r3, r2, r3
 800a4a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a4a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a4b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a4b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a4bc:	460b      	mov	r3, r1
 800a4be:	18db      	adds	r3, r3, r3
 800a4c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	eb42 0303 	adc.w	r3, r2, r3
 800a4c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a4ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a4ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a4d2:	f7f5 fee5 	bl	80002a0 <__aeabi_uldivmod>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	460b      	mov	r3, r1
 800a4da:	4b0d      	ldr	r3, [pc, #52]	@ (800a510 <UART_SetConfig+0x2d4>)
 800a4dc:	fba3 1302 	umull	r1, r3, r3, r2
 800a4e0:	095b      	lsrs	r3, r3, #5
 800a4e2:	2164      	movs	r1, #100	@ 0x64
 800a4e4:	fb01 f303 	mul.w	r3, r1, r3
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	00db      	lsls	r3, r3, #3
 800a4ec:	3332      	adds	r3, #50	@ 0x32
 800a4ee:	4a08      	ldr	r2, [pc, #32]	@ (800a510 <UART_SetConfig+0x2d4>)
 800a4f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a4f4:	095b      	lsrs	r3, r3, #5
 800a4f6:	f003 0207 	and.w	r2, r3, #7
 800a4fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4422      	add	r2, r4
 800a502:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a504:	e106      	b.n	800a714 <UART_SetConfig+0x4d8>
 800a506:	bf00      	nop
 800a508:	40011000 	.word	0x40011000
 800a50c:	40011400 	.word	0x40011400
 800a510:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a518:	2200      	movs	r2, #0
 800a51a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a51e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a522:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a526:	4642      	mov	r2, r8
 800a528:	464b      	mov	r3, r9
 800a52a:	1891      	adds	r1, r2, r2
 800a52c:	6239      	str	r1, [r7, #32]
 800a52e:	415b      	adcs	r3, r3
 800a530:	627b      	str	r3, [r7, #36]	@ 0x24
 800a532:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a536:	4641      	mov	r1, r8
 800a538:	1854      	adds	r4, r2, r1
 800a53a:	4649      	mov	r1, r9
 800a53c:	eb43 0501 	adc.w	r5, r3, r1
 800a540:	f04f 0200 	mov.w	r2, #0
 800a544:	f04f 0300 	mov.w	r3, #0
 800a548:	00eb      	lsls	r3, r5, #3
 800a54a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a54e:	00e2      	lsls	r2, r4, #3
 800a550:	4614      	mov	r4, r2
 800a552:	461d      	mov	r5, r3
 800a554:	4643      	mov	r3, r8
 800a556:	18e3      	adds	r3, r4, r3
 800a558:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a55c:	464b      	mov	r3, r9
 800a55e:	eb45 0303 	adc.w	r3, r5, r3
 800a562:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a572:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a576:	f04f 0200 	mov.w	r2, #0
 800a57a:	f04f 0300 	mov.w	r3, #0
 800a57e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a582:	4629      	mov	r1, r5
 800a584:	008b      	lsls	r3, r1, #2
 800a586:	4621      	mov	r1, r4
 800a588:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a58c:	4621      	mov	r1, r4
 800a58e:	008a      	lsls	r2, r1, #2
 800a590:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a594:	f7f5 fe84 	bl	80002a0 <__aeabi_uldivmod>
 800a598:	4602      	mov	r2, r0
 800a59a:	460b      	mov	r3, r1
 800a59c:	4b60      	ldr	r3, [pc, #384]	@ (800a720 <UART_SetConfig+0x4e4>)
 800a59e:	fba3 2302 	umull	r2, r3, r3, r2
 800a5a2:	095b      	lsrs	r3, r3, #5
 800a5a4:	011c      	lsls	r4, r3, #4
 800a5a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a5b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a5b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a5b8:	4642      	mov	r2, r8
 800a5ba:	464b      	mov	r3, r9
 800a5bc:	1891      	adds	r1, r2, r2
 800a5be:	61b9      	str	r1, [r7, #24]
 800a5c0:	415b      	adcs	r3, r3
 800a5c2:	61fb      	str	r3, [r7, #28]
 800a5c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a5c8:	4641      	mov	r1, r8
 800a5ca:	1851      	adds	r1, r2, r1
 800a5cc:	6139      	str	r1, [r7, #16]
 800a5ce:	4649      	mov	r1, r9
 800a5d0:	414b      	adcs	r3, r1
 800a5d2:	617b      	str	r3, [r7, #20]
 800a5d4:	f04f 0200 	mov.w	r2, #0
 800a5d8:	f04f 0300 	mov.w	r3, #0
 800a5dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a5e0:	4659      	mov	r1, fp
 800a5e2:	00cb      	lsls	r3, r1, #3
 800a5e4:	4651      	mov	r1, sl
 800a5e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a5ea:	4651      	mov	r1, sl
 800a5ec:	00ca      	lsls	r2, r1, #3
 800a5ee:	4610      	mov	r0, r2
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	4642      	mov	r2, r8
 800a5f6:	189b      	adds	r3, r3, r2
 800a5f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a5fc:	464b      	mov	r3, r9
 800a5fe:	460a      	mov	r2, r1
 800a600:	eb42 0303 	adc.w	r3, r2, r3
 800a604:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a612:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a614:	f04f 0200 	mov.w	r2, #0
 800a618:	f04f 0300 	mov.w	r3, #0
 800a61c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a620:	4649      	mov	r1, r9
 800a622:	008b      	lsls	r3, r1, #2
 800a624:	4641      	mov	r1, r8
 800a626:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a62a:	4641      	mov	r1, r8
 800a62c:	008a      	lsls	r2, r1, #2
 800a62e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a632:	f7f5 fe35 	bl	80002a0 <__aeabi_uldivmod>
 800a636:	4602      	mov	r2, r0
 800a638:	460b      	mov	r3, r1
 800a63a:	4611      	mov	r1, r2
 800a63c:	4b38      	ldr	r3, [pc, #224]	@ (800a720 <UART_SetConfig+0x4e4>)
 800a63e:	fba3 2301 	umull	r2, r3, r3, r1
 800a642:	095b      	lsrs	r3, r3, #5
 800a644:	2264      	movs	r2, #100	@ 0x64
 800a646:	fb02 f303 	mul.w	r3, r2, r3
 800a64a:	1acb      	subs	r3, r1, r3
 800a64c:	011b      	lsls	r3, r3, #4
 800a64e:	3332      	adds	r3, #50	@ 0x32
 800a650:	4a33      	ldr	r2, [pc, #204]	@ (800a720 <UART_SetConfig+0x4e4>)
 800a652:	fba2 2303 	umull	r2, r3, r2, r3
 800a656:	095b      	lsrs	r3, r3, #5
 800a658:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a65c:	441c      	add	r4, r3
 800a65e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a662:	2200      	movs	r2, #0
 800a664:	673b      	str	r3, [r7, #112]	@ 0x70
 800a666:	677a      	str	r2, [r7, #116]	@ 0x74
 800a668:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a66c:	4642      	mov	r2, r8
 800a66e:	464b      	mov	r3, r9
 800a670:	1891      	adds	r1, r2, r2
 800a672:	60b9      	str	r1, [r7, #8]
 800a674:	415b      	adcs	r3, r3
 800a676:	60fb      	str	r3, [r7, #12]
 800a678:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a67c:	4641      	mov	r1, r8
 800a67e:	1851      	adds	r1, r2, r1
 800a680:	6039      	str	r1, [r7, #0]
 800a682:	4649      	mov	r1, r9
 800a684:	414b      	adcs	r3, r1
 800a686:	607b      	str	r3, [r7, #4]
 800a688:	f04f 0200 	mov.w	r2, #0
 800a68c:	f04f 0300 	mov.w	r3, #0
 800a690:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a694:	4659      	mov	r1, fp
 800a696:	00cb      	lsls	r3, r1, #3
 800a698:	4651      	mov	r1, sl
 800a69a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a69e:	4651      	mov	r1, sl
 800a6a0:	00ca      	lsls	r2, r1, #3
 800a6a2:	4610      	mov	r0, r2
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	4642      	mov	r2, r8
 800a6aa:	189b      	adds	r3, r3, r2
 800a6ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a6ae:	464b      	mov	r3, r9
 800a6b0:	460a      	mov	r2, r1
 800a6b2:	eb42 0303 	adc.w	r3, r2, r3
 800a6b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a6b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a6c2:	667a      	str	r2, [r7, #100]	@ 0x64
 800a6c4:	f04f 0200 	mov.w	r2, #0
 800a6c8:	f04f 0300 	mov.w	r3, #0
 800a6cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a6d0:	4649      	mov	r1, r9
 800a6d2:	008b      	lsls	r3, r1, #2
 800a6d4:	4641      	mov	r1, r8
 800a6d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a6da:	4641      	mov	r1, r8
 800a6dc:	008a      	lsls	r2, r1, #2
 800a6de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a6e2:	f7f5 fddd 	bl	80002a0 <__aeabi_uldivmod>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	4b0d      	ldr	r3, [pc, #52]	@ (800a720 <UART_SetConfig+0x4e4>)
 800a6ec:	fba3 1302 	umull	r1, r3, r3, r2
 800a6f0:	095b      	lsrs	r3, r3, #5
 800a6f2:	2164      	movs	r1, #100	@ 0x64
 800a6f4:	fb01 f303 	mul.w	r3, r1, r3
 800a6f8:	1ad3      	subs	r3, r2, r3
 800a6fa:	011b      	lsls	r3, r3, #4
 800a6fc:	3332      	adds	r3, #50	@ 0x32
 800a6fe:	4a08      	ldr	r2, [pc, #32]	@ (800a720 <UART_SetConfig+0x4e4>)
 800a700:	fba2 2303 	umull	r2, r3, r2, r3
 800a704:	095b      	lsrs	r3, r3, #5
 800a706:	f003 020f 	and.w	r2, r3, #15
 800a70a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4422      	add	r2, r4
 800a712:	609a      	str	r2, [r3, #8]
}
 800a714:	bf00      	nop
 800a716:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a71a:	46bd      	mov	sp, r7
 800a71c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a720:	51eb851f 	.word	0x51eb851f

0800a724 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800a724:	b480      	push	{r7}
 800a726:	b087      	sub	sp, #28
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FMC_BCR1_WFDIS */
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a738:	683a      	ldr	r2, [r7, #0]
 800a73a:	6812      	ldr	r2, [r2, #0]
 800a73c:	f023 0101 	bic.w	r1, r3, #1
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	2b08      	cmp	r3, #8
 800a74c:	d102      	bne.n	800a754 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a74e:	2340      	movs	r3, #64	@ 0x40
 800a750:	617b      	str	r3, [r7, #20]
 800a752:	e001      	b.n	800a758 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800a754:	2300      	movs	r3, #0
 800a756:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800a764:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800a76a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800a770:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800a776:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800a77c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800a782:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 800a788:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800a78e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 800a794:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800a79a:	4313      	orrs	r3, r2
 800a79c:	613b      	str	r3, [r7, #16]

#if defined(FMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	699b      	ldr	r3, [r3, #24]
 800a7a2:	693a      	ldr	r2, [r7, #16]
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WRAPMOD */
#if defined(FMC_BCR1_CCLKEN)
  btcr_reg |= Init->ContinuousClock;
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ac:	693a      	ldr	r2, [r7, #16]
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_CCLKEN */
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7b6:	693a      	ldr	r2, [r7, #16]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 800a7bc:	4b1b      	ldr	r3, [pc, #108]	@ (800a82c <FMC_NORSRAM_Init+0x108>)
 800a7be:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

#if defined(FMC_BCR1_WRAPMOD)
  mask |= FMC_BCR1_WRAPMOD;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a7c6:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WRAPMOD */
#if defined(FMC_BCR1_CCLKEN)
  mask |= FMC_BCR1_CCLKEN;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7ce:	60fb      	str	r3, [r7, #12]
#endif
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
#endif /* FMC_BCR1_WFDIS */
  mask |= FMC_BCR1_CPSIZE;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800a7d6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	43db      	mvns	r3, r3
 800a7e6:	ea02 0103 	and.w	r1, r2, r3
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	4319      	orrs	r1, r3
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(FMC_BCR1_CCLKEN)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a800:	d10c      	bne.n	800a81c <FMC_NORSRAM_Init+0xf8>
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d008      	beq.n	800a81c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a816:	431a      	orrs	r2, r3
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	601a      	str	r2, [r3, #0]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FMC_BCR1_WFDIS */

  return HAL_OK;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	371c      	adds	r7, #28
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr
 800a82a:	bf00      	nop
 800a82c:	0008fb7f 	.word	0x0008fb7f

0800a830 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a830:	b480      	push	{r7}
 800a832:	b087      	sub	sp, #28
 800a834:	af00      	add	r7, sp, #0
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	1c5a      	adds	r2, r3, #1
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a846:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	011b      	lsls	r3, r3, #4
 800a854:	431a      	orrs	r2, r3
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	021b      	lsls	r3, r3, #8
 800a85c:	431a      	orrs	r2, r3
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	041b      	lsls	r3, r3, #16
 800a864:	431a      	orrs	r2, r3
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	3b01      	subs	r3, #1
 800a86c:	051b      	lsls	r3, r3, #20
 800a86e:	431a      	orrs	r2, r3
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	695b      	ldr	r3, [r3, #20]
 800a874:	3b02      	subs	r3, #2
 800a876:	061b      	lsls	r3, r3, #24
 800a878:	431a      	orrs	r2, r3
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	699b      	ldr	r3, [r3, #24]
 800a87e:	4313      	orrs	r3, r2
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	3201      	adds	r2, #1
 800a884:	4319      	orrs	r1, r3
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

#if defined(FMC_BCR1_CCLKEN)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a894:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a898:	d113      	bne.n	800a8c2 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a8a2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	691b      	ldr	r3, [r3, #16]
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	051b      	lsls	r3, r3, #20
 800a8ac:	697a      	ldr	r2, [r7, #20]
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	431a      	orrs	r2, r3
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	605a      	str	r2, [r3, #4]
  }

#endif
  return HAL_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	371c      	adds	r7, #28
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	607a      	str	r2, [r7, #4]
 800a8dc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a8e4:	d11d      	bne.n	800a922 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a8ee:	4b13      	ldr	r3, [pc, #76]	@ (800a93c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800a8f0:	4013      	ands	r3, r2
 800a8f2:	68ba      	ldr	r2, [r7, #8]
 800a8f4:	6811      	ldr	r1, [r2, #0]
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	6852      	ldr	r2, [r2, #4]
 800a8fa:	0112      	lsls	r2, r2, #4
 800a8fc:	4311      	orrs	r1, r2
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	6892      	ldr	r2, [r2, #8]
 800a902:	0212      	lsls	r2, r2, #8
 800a904:	4311      	orrs	r1, r2
 800a906:	68ba      	ldr	r2, [r7, #8]
 800a908:	6992      	ldr	r2, [r2, #24]
 800a90a:	4311      	orrs	r1, r2
 800a90c:	68ba      	ldr	r2, [r7, #8]
 800a90e:	68d2      	ldr	r2, [r2, #12]
 800a910:	0412      	lsls	r2, r2, #16
 800a912:	430a      	orrs	r2, r1
 800a914:	ea43 0102 	orr.w	r1, r3, r2
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a920:	e005      	b.n	800a92e <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800a92a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3714      	adds	r7, #20
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr
 800a93c:	cff00000 	.word	0xcff00000

0800a940 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a940:	b084      	sub	sp, #16
 800a942:	b580      	push	{r7, lr}
 800a944:	b084      	sub	sp, #16
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
 800a94a:	f107 001c 	add.w	r0, r7, #28
 800a94e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a952:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a956:	2b01      	cmp	r3, #1
 800a958:	d123      	bne.n	800a9a2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a95e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a96e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a982:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a986:	2b01      	cmp	r3, #1
 800a988:	d105      	bne.n	800a996 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 f9dc 	bl	800ad54 <USB_CoreReset>
 800a99c:	4603      	mov	r3, r0
 800a99e:	73fb      	strb	r3, [r7, #15]
 800a9a0:	e01b      	b.n	800a9da <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f9d0 	bl	800ad54 <USB_CoreReset>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a9b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d106      	bne.n	800a9ce <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	639a      	str	r2, [r3, #56]	@ 0x38
 800a9cc:	e005      	b.n	800a9da <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a9da:	7fbb      	ldrb	r3, [r7, #30]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d10b      	bne.n	800a9f8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	f043 0206 	orr.w	r2, r3, #6
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	f043 0220 	orr.w	r2, r3, #32
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a9f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa04:	b004      	add	sp, #16
 800aa06:	4770      	bx	lr

0800aa08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	f043 0201 	orr.w	r2, r3, #1
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	370c      	adds	r7, #12
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr

0800aa2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aa2a:	b480      	push	{r7}
 800aa2c:	b083      	sub	sp, #12
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	f023 0201 	bic.w	r2, r3, #1
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aa3e:	2300      	movs	r3, #0
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	460b      	mov	r3, r1
 800aa56:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800aa68:	78fb      	ldrb	r3, [r7, #3]
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d115      	bne.n	800aa9a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800aa7a:	200a      	movs	r0, #10
 800aa7c:	f7f9 fd30 	bl	80044e0 <HAL_Delay>
      ms += 10U;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	330a      	adds	r3, #10
 800aa84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 f956 	bl	800ad38 <USB_GetMode>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d01e      	beq.n	800aad0 <USB_SetCurrentMode+0x84>
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2bc7      	cmp	r3, #199	@ 0xc7
 800aa96:	d9f0      	bls.n	800aa7a <USB_SetCurrentMode+0x2e>
 800aa98:	e01a      	b.n	800aad0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800aa9a:	78fb      	ldrb	r3, [r7, #3]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d115      	bne.n	800aacc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800aaac:	200a      	movs	r0, #10
 800aaae:	f7f9 fd17 	bl	80044e0 <HAL_Delay>
      ms += 10U;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	330a      	adds	r3, #10
 800aab6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 f93d 	bl	800ad38 <USB_GetMode>
 800aabe:	4603      	mov	r3, r0
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d005      	beq.n	800aad0 <USB_SetCurrentMode+0x84>
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2bc7      	cmp	r3, #199	@ 0xc7
 800aac8:	d9f0      	bls.n	800aaac <USB_SetCurrentMode+0x60>
 800aaca:	e001      	b.n	800aad0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	e005      	b.n	800aadc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2bc8      	cmp	r3, #200	@ 0xc8
 800aad4:	d101      	bne.n	800aada <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	e000      	b.n	800aadc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3710      	adds	r7, #16
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b085      	sub	sp, #20
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aafe:	d901      	bls.n	800ab04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ab00:	2303      	movs	r3, #3
 800ab02:	e01b      	b.n	800ab3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	691b      	ldr	r3, [r3, #16]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	daf2      	bge.n	800aaf2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	019b      	lsls	r3, r3, #6
 800ab14:	f043 0220 	orr.w	r2, r3, #32
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab28:	d901      	bls.n	800ab2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ab2a:	2303      	movs	r3, #3
 800ab2c:	e006      	b.n	800ab3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	691b      	ldr	r3, [r3, #16]
 800ab32:	f003 0320 	and.w	r3, r3, #32
 800ab36:	2b20      	cmp	r3, #32
 800ab38:	d0f0      	beq.n	800ab1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ab3a:	2300      	movs	r3, #0
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3714      	adds	r7, #20
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab50:	2300      	movs	r3, #0
 800ab52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	3301      	adds	r3, #1
 800ab58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab60:	d901      	bls.n	800ab66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ab62:	2303      	movs	r3, #3
 800ab64:	e018      	b.n	800ab98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	daf2      	bge.n	800ab54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2210      	movs	r2, #16
 800ab76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab84:	d901      	bls.n	800ab8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ab86:	2303      	movs	r3, #3
 800ab88:	e006      	b.n	800ab98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	691b      	ldr	r3, [r3, #16]
 800ab8e:	f003 0310 	and.w	r3, r3, #16
 800ab92:	2b10      	cmp	r3, #16
 800ab94:	d0f0      	beq.n	800ab78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3714      	adds	r7, #20
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b089      	sub	sp, #36	@ 0x24
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	60b9      	str	r1, [r7, #8]
 800abae:	4611      	mov	r1, r2
 800abb0:	461a      	mov	r2, r3
 800abb2:	460b      	mov	r3, r1
 800abb4:	71fb      	strb	r3, [r7, #7]
 800abb6:	4613      	mov	r3, r2
 800abb8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800abc2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d123      	bne.n	800ac12 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800abca:	88bb      	ldrh	r3, [r7, #4]
 800abcc:	3303      	adds	r3, #3
 800abce:	089b      	lsrs	r3, r3, #2
 800abd0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800abd2:	2300      	movs	r3, #0
 800abd4:	61bb      	str	r3, [r7, #24]
 800abd6:	e018      	b.n	800ac0a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800abd8:	79fb      	ldrb	r3, [r7, #7]
 800abda:	031a      	lsls	r2, r3, #12
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	4413      	add	r3, r2
 800abe0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abe4:	461a      	mov	r2, r3
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	6013      	str	r3, [r2, #0]
      pSrc++;
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	3301      	adds	r3, #1
 800abf0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	3301      	adds	r3, #1
 800abf6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	3301      	adds	r3, #1
 800abfc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	3301      	adds	r3, #1
 800ac02:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	3301      	adds	r3, #1
 800ac08:	61bb      	str	r3, [r7, #24]
 800ac0a:	69ba      	ldr	r2, [r7, #24]
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d3e2      	bcc.n	800abd8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3724      	adds	r7, #36	@ 0x24
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b08b      	sub	sp, #44	@ 0x2c
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ac36:	88fb      	ldrh	r3, [r7, #6]
 800ac38:	089b      	lsrs	r3, r3, #2
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ac3e:	88fb      	ldrh	r3, [r7, #6]
 800ac40:	f003 0303 	and.w	r3, r3, #3
 800ac44:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ac46:	2300      	movs	r3, #0
 800ac48:	623b      	str	r3, [r7, #32]
 800ac4a:	e014      	b.n	800ac76 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac56:	601a      	str	r2, [r3, #0]
    pDest++;
 800ac58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ac5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac60:	3301      	adds	r3, #1
 800ac62:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ac64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac66:	3301      	adds	r3, #1
 800ac68:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ac70:	6a3b      	ldr	r3, [r7, #32]
 800ac72:	3301      	adds	r3, #1
 800ac74:	623b      	str	r3, [r7, #32]
 800ac76:	6a3a      	ldr	r2, [r7, #32]
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d3e6      	bcc.n	800ac4c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ac7e:	8bfb      	ldrh	r3, [r7, #30]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d01e      	beq.n	800acc2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ac84:	2300      	movs	r3, #0
 800ac86:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac8e:	461a      	mov	r2, r3
 800ac90:	f107 0310 	add.w	r3, r7, #16
 800ac94:	6812      	ldr	r2, [r2, #0]
 800ac96:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ac98:	693a      	ldr	r2, [r7, #16]
 800ac9a:	6a3b      	ldr	r3, [r7, #32]
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	00db      	lsls	r3, r3, #3
 800aca0:	fa22 f303 	lsr.w	r3, r2, r3
 800aca4:	b2da      	uxtb	r2, r3
 800aca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca8:	701a      	strb	r2, [r3, #0]
      i++;
 800acaa:	6a3b      	ldr	r3, [r7, #32]
 800acac:	3301      	adds	r3, #1
 800acae:	623b      	str	r3, [r7, #32]
      pDest++;
 800acb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb2:	3301      	adds	r3, #1
 800acb4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800acb6:	8bfb      	ldrh	r3, [r7, #30]
 800acb8:	3b01      	subs	r3, #1
 800acba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800acbc:	8bfb      	ldrh	r3, [r7, #30]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1ea      	bne.n	800ac98 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800acc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	372c      	adds	r7, #44	@ 0x2c
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	695b      	ldr	r3, [r3, #20]
 800acdc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	699b      	ldr	r3, [r3, #24]
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	4013      	ands	r3, r2
 800ace6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ace8:	68fb      	ldr	r3, [r7, #12]
}
 800acea:	4618      	mov	r0, r3
 800acec:	3714      	adds	r7, #20
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr

0800acf6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800acf6:	b480      	push	{r7}
 800acf8:	b085      	sub	sp, #20
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
 800acfe:	460b      	mov	r3, r1
 800ad00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800ad06:	78fb      	ldrb	r3, [r7, #3]
 800ad08:	015a      	lsls	r2, r3, #5
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800ad16:	78fb      	ldrb	r3, [r7, #3]
 800ad18:	015a      	lsls	r2, r3, #5
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	68ba      	ldr	r2, [r7, #8]
 800ad26:	4013      	ands	r3, r2
 800ad28:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad2a:	68bb      	ldr	r3, [r7, #8]
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3714      	adds	r7, #20
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	695b      	ldr	r3, [r3, #20]
 800ad44:	f003 0301 	and.w	r3, r3, #1
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	3301      	adds	r3, #1
 800ad64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad6c:	d901      	bls.n	800ad72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ad6e:	2303      	movs	r3, #3
 800ad70:	e01b      	b.n	800adaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	daf2      	bge.n	800ad60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	691b      	ldr	r3, [r3, #16]
 800ad82:	f043 0201 	orr.w	r2, r3, #1
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad96:	d901      	bls.n	800ad9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ad98:	2303      	movs	r3, #3
 800ad9a:	e006      	b.n	800adaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	691b      	ldr	r3, [r3, #16]
 800ada0:	f003 0301 	and.w	r3, r3, #1
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d0f0      	beq.n	800ad8a <USB_CoreReset+0x36>

  return HAL_OK;
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3714      	adds	r7, #20
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
	...

0800adb8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800adb8:	b084      	sub	sp, #16
 800adba:	b580      	push	{r7, lr}
 800adbc:	b086      	sub	sp, #24
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
 800adc2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800adc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800adca:	2300      	movs	r3, #0
 800adcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800add8:	461a      	mov	r2, r3
 800adda:	2300      	movs	r3, #0
 800addc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ade2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adee:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adfa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d119      	bne.n	800ae42 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800ae0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d10a      	bne.n	800ae2c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ae24:	f043 0304 	orr.w	r3, r3, #4
 800ae28:	6013      	str	r3, [r2, #0]
 800ae2a:	e014      	b.n	800ae56 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ae3a:	f023 0304 	bic.w	r3, r3, #4
 800ae3e:	6013      	str	r3, [r2, #0]
 800ae40:	e009      	b.n	800ae56 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ae50:	f023 0304 	bic.w	r3, r3, #4
 800ae54:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ae56:	2110      	movs	r1, #16
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f7ff fe43 	bl	800aae4 <USB_FlushTxFifo>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d001      	beq.n	800ae68 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800ae64:	2301      	movs	r3, #1
 800ae66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7ff fe6d 	bl	800ab48 <USB_FlushRxFifo>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d001      	beq.n	800ae78 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800ae74:	2301      	movs	r3, #1
 800ae76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800ae78:	2300      	movs	r3, #0
 800ae7a:	613b      	str	r3, [r7, #16]
 800ae7c:	e015      	b.n	800aeaa <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	015a      	lsls	r2, r3, #5
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	4413      	add	r3, r2
 800ae86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae90:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	015a      	lsls	r2, r3, #5
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	4413      	add	r3, r2
 800ae9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae9e:	461a      	mov	r2, r3
 800aea0:	2300      	movs	r3, #0
 800aea2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	3301      	adds	r3, #1
 800aea8:	613b      	str	r3, [r7, #16]
 800aeaa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800aeae:	461a      	mov	r2, r3
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d3e3      	bcc.n	800ae7e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f04f 32ff 	mov.w	r2, #4294967295
 800aec2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	4a18      	ldr	r2, [pc, #96]	@ (800af28 <USB_HostInit+0x170>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d10b      	bne.n	800aee4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aed2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a15      	ldr	r2, [pc, #84]	@ (800af2c <USB_HostInit+0x174>)
 800aed8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	4a14      	ldr	r2, [pc, #80]	@ (800af30 <USB_HostInit+0x178>)
 800aede:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800aee2:	e009      	b.n	800aef8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2280      	movs	r2, #128	@ 0x80
 800aee8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4a11      	ldr	r2, [pc, #68]	@ (800af34 <USB_HostInit+0x17c>)
 800aeee:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	4a11      	ldr	r2, [pc, #68]	@ (800af38 <USB_HostInit+0x180>)
 800aef4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aef8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d105      	bne.n	800af0c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	699b      	ldr	r3, [r3, #24]
 800af04:	f043 0210 	orr.w	r2, r3, #16
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	699a      	ldr	r2, [r3, #24]
 800af10:	4b0a      	ldr	r3, [pc, #40]	@ (800af3c <USB_HostInit+0x184>)
 800af12:	4313      	orrs	r3, r2
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800af18:	7dfb      	ldrb	r3, [r7, #23]
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3718      	adds	r7, #24
 800af1e:	46bd      	mov	sp, r7
 800af20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af24:	b004      	add	sp, #16
 800af26:	4770      	bx	lr
 800af28:	40040000 	.word	0x40040000
 800af2c:	01000200 	.word	0x01000200
 800af30:	00e00300 	.word	0x00e00300
 800af34:	00600080 	.word	0x00600080
 800af38:	004000e0 	.word	0x004000e0
 800af3c:	a3200008 	.word	0xa3200008

0800af40 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	460b      	mov	r3, r1
 800af4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	68fa      	ldr	r2, [r7, #12]
 800af5a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800af5e:	f023 0303 	bic.w	r3, r3, #3
 800af62:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	78fb      	ldrb	r3, [r7, #3]
 800af6e:	f003 0303 	and.w	r3, r3, #3
 800af72:	68f9      	ldr	r1, [r7, #12]
 800af74:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800af78:	4313      	orrs	r3, r2
 800af7a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800af7c:	78fb      	ldrb	r3, [r7, #3]
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d107      	bne.n	800af92 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800af88:	461a      	mov	r2, r3
 800af8a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800af8e:	6053      	str	r3, [r2, #4]
 800af90:	e00c      	b.n	800afac <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800af92:	78fb      	ldrb	r3, [r7, #3]
 800af94:	2b02      	cmp	r3, #2
 800af96:	d107      	bne.n	800afa8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800af9e:	461a      	mov	r2, r3
 800afa0:	f241 7370 	movw	r3, #6000	@ 0x1770
 800afa4:	6053      	str	r3, [r2, #4]
 800afa6:	e001      	b.n	800afac <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800afa8:	2301      	movs	r3, #1
 800afaa:	e000      	b.n	800afae <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800afac:	2300      	movs	r3, #0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3714      	adds	r7, #20
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr

0800afba <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b084      	sub	sp, #16
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800afc6:	2300      	movs	r3, #0
 800afc8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800afda:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800afe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800afe8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800afea:	2064      	movs	r0, #100	@ 0x64
 800afec:	f7f9 fa78 	bl	80044e0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800aff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800affc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800affe:	200a      	movs	r0, #10
 800b000:	f7f9 fa6e 	bl	80044e0 <HAL_Delay>

  return HAL_OK;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	3710      	adds	r7, #16
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b00e:	b480      	push	{r7}
 800b010:	b085      	sub	sp, #20
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
 800b016:	460b      	mov	r3, r1
 800b018:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b01e:	2300      	movs	r3, #0
 800b020:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800b032:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d109      	bne.n	800b052 <USB_DriveVbus+0x44>
 800b03e:	78fb      	ldrb	r3, [r7, #3]
 800b040:	2b01      	cmp	r3, #1
 800b042:	d106      	bne.n	800b052 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	68fa      	ldr	r2, [r7, #12]
 800b048:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b04c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b050:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b058:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b05c:	d109      	bne.n	800b072 <USB_DriveVbus+0x64>
 800b05e:	78fb      	ldrb	r3, [r7, #3]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d106      	bne.n	800b072 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	68fa      	ldr	r2, [r7, #12]
 800b068:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b06c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b070:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b072:	2300      	movs	r3, #0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3714      	adds	r7, #20
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b08c:	2300      	movs	r3, #0
 800b08e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	0c5b      	lsrs	r3, r3, #17
 800b09e:	f003 0303 	and.w	r3, r3, #3
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3714      	adds	r7, #20
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr

0800b0ae <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800b0ae:	b480      	push	{r7}
 800b0b0:	b085      	sub	sp, #20
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b0c0:	689b      	ldr	r3, [r3, #8]
 800b0c2:	b29b      	uxth	r3, r3
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3714      	adds	r7, #20
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b088      	sub	sp, #32
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	4608      	mov	r0, r1
 800b0da:	4611      	mov	r1, r2
 800b0dc:	461a      	mov	r2, r3
 800b0de:	4603      	mov	r3, r0
 800b0e0:	70fb      	strb	r3, [r7, #3]
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	70bb      	strb	r3, [r7, #2]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800b0f2:	78fb      	ldrb	r3, [r7, #3]
 800b0f4:	015a      	lsls	r2, r3, #5
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0fe:	461a      	mov	r2, r3
 800b100:	f04f 33ff 	mov.w	r3, #4294967295
 800b104:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b106:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b10a:	2b03      	cmp	r3, #3
 800b10c:	d87c      	bhi.n	800b208 <USB_HC_Init+0x138>
 800b10e:	a201      	add	r2, pc, #4	@ (adr r2, 800b114 <USB_HC_Init+0x44>)
 800b110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b114:	0800b125 	.word	0x0800b125
 800b118:	0800b1cb 	.word	0x0800b1cb
 800b11c:	0800b125 	.word	0x0800b125
 800b120:	0800b18d 	.word	0x0800b18d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b124:	78fb      	ldrb	r3, [r7, #3]
 800b126:	015a      	lsls	r2, r3, #5
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	4413      	add	r3, r2
 800b12c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b130:	461a      	mov	r2, r3
 800b132:	f240 439d 	movw	r3, #1181	@ 0x49d
 800b136:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b138:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	da10      	bge.n	800b162 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b140:	78fb      	ldrb	r3, [r7, #3]
 800b142:	015a      	lsls	r2, r3, #5
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	4413      	add	r3, r2
 800b148:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b14c:	68db      	ldr	r3, [r3, #12]
 800b14e:	78fa      	ldrb	r2, [r7, #3]
 800b150:	0151      	lsls	r1, r2, #5
 800b152:	693a      	ldr	r2, [r7, #16]
 800b154:	440a      	add	r2, r1
 800b156:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b15a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b15e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800b160:	e055      	b.n	800b20e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4a6f      	ldr	r2, [pc, #444]	@ (800b324 <USB_HC_Init+0x254>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d151      	bne.n	800b20e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800b16a:	78fb      	ldrb	r3, [r7, #3]
 800b16c:	015a      	lsls	r2, r3, #5
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	4413      	add	r3, r2
 800b172:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	78fa      	ldrb	r2, [r7, #3]
 800b17a:	0151      	lsls	r1, r2, #5
 800b17c:	693a      	ldr	r2, [r7, #16]
 800b17e:	440a      	add	r2, r1
 800b180:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b184:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b188:	60d3      	str	r3, [r2, #12]
      break;
 800b18a:	e040      	b.n	800b20e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b18c:	78fb      	ldrb	r3, [r7, #3]
 800b18e:	015a      	lsls	r2, r3, #5
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	4413      	add	r3, r2
 800b194:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b198:	461a      	mov	r2, r3
 800b19a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800b19e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b1a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	da34      	bge.n	800b212 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b1a8:	78fb      	ldrb	r3, [r7, #3]
 800b1aa:	015a      	lsls	r2, r3, #5
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	78fa      	ldrb	r2, [r7, #3]
 800b1b8:	0151      	lsls	r1, r2, #5
 800b1ba:	693a      	ldr	r2, [r7, #16]
 800b1bc:	440a      	add	r2, r1
 800b1be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b1c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b1c6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b1c8:	e023      	b.n	800b212 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b1ca:	78fb      	ldrb	r3, [r7, #3]
 800b1cc:	015a      	lsls	r2, r3, #5
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	f240 2325 	movw	r3, #549	@ 0x225
 800b1dc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b1de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	da17      	bge.n	800b216 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b1e6:	78fb      	ldrb	r3, [r7, #3]
 800b1e8:	015a      	lsls	r2, r3, #5
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	78fa      	ldrb	r2, [r7, #3]
 800b1f6:	0151      	lsls	r1, r2, #5
 800b1f8:	693a      	ldr	r2, [r7, #16]
 800b1fa:	440a      	add	r2, r1
 800b1fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b200:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800b204:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b206:	e006      	b.n	800b216 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800b208:	2301      	movs	r3, #1
 800b20a:	77fb      	strb	r3, [r7, #31]
      break;
 800b20c:	e004      	b.n	800b218 <USB_HC_Init+0x148>
      break;
 800b20e:	bf00      	nop
 800b210:	e002      	b.n	800b218 <USB_HC_Init+0x148>
      break;
 800b212:	bf00      	nop
 800b214:	e000      	b.n	800b218 <USB_HC_Init+0x148>
      break;
 800b216:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b218:	78fb      	ldrb	r3, [r7, #3]
 800b21a:	015a      	lsls	r2, r3, #5
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	4413      	add	r3, r2
 800b220:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b224:	461a      	mov	r2, r3
 800b226:	2300      	movs	r3, #0
 800b228:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800b22a:	78fb      	ldrb	r3, [r7, #3]
 800b22c:	015a      	lsls	r2, r3, #5
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	4413      	add	r3, r2
 800b232:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	78fa      	ldrb	r2, [r7, #3]
 800b23a:	0151      	lsls	r1, r2, #5
 800b23c:	693a      	ldr	r2, [r7, #16]
 800b23e:	440a      	add	r2, r1
 800b240:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b244:	f043 0302 	orr.w	r3, r3, #2
 800b248:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b250:	699a      	ldr	r2, [r3, #24]
 800b252:	78fb      	ldrb	r3, [r7, #3]
 800b254:	f003 030f 	and.w	r3, r3, #15
 800b258:	2101      	movs	r1, #1
 800b25a:	fa01 f303 	lsl.w	r3, r1, r3
 800b25e:	6939      	ldr	r1, [r7, #16]
 800b260:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b264:	4313      	orrs	r3, r2
 800b266:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	699b      	ldr	r3, [r3, #24]
 800b26c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b274:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	da03      	bge.n	800b284 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b27c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b280:	61bb      	str	r3, [r7, #24]
 800b282:	e001      	b.n	800b288 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800b284:	2300      	movs	r3, #0
 800b286:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f7ff fef9 	bl	800b080 <USB_GetHostSpeed>
 800b28e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800b290:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b294:	2b02      	cmp	r3, #2
 800b296:	d106      	bne.n	800b2a6 <USB_HC_Init+0x1d6>
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d003      	beq.n	800b2a6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b29e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b2a2:	617b      	str	r3, [r7, #20]
 800b2a4:	e001      	b.n	800b2aa <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b2aa:	787b      	ldrb	r3, [r7, #1]
 800b2ac:	059b      	lsls	r3, r3, #22
 800b2ae:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b2b2:	78bb      	ldrb	r3, [r7, #2]
 800b2b4:	02db      	lsls	r3, r3, #11
 800b2b6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b2ba:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b2bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b2c0:	049b      	lsls	r3, r3, #18
 800b2c2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b2c6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800b2c8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800b2ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b2ce:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b2d0:	69bb      	ldr	r3, [r7, #24]
 800b2d2:	431a      	orrs	r2, r3
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b2d8:	78fa      	ldrb	r2, [r7, #3]
 800b2da:	0151      	lsls	r1, r2, #5
 800b2dc:	693a      	ldr	r2, [r7, #16]
 800b2de:	440a      	add	r2, r1
 800b2e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b2e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b2e8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800b2ea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b2ee:	2b03      	cmp	r3, #3
 800b2f0:	d003      	beq.n	800b2fa <USB_HC_Init+0x22a>
 800b2f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d10f      	bne.n	800b31a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800b2fa:	78fb      	ldrb	r3, [r7, #3]
 800b2fc:	015a      	lsls	r2, r3, #5
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	4413      	add	r3, r2
 800b302:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	78fa      	ldrb	r2, [r7, #3]
 800b30a:	0151      	lsls	r1, r2, #5
 800b30c:	693a      	ldr	r2, [r7, #16]
 800b30e:	440a      	add	r2, r1
 800b310:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b314:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b318:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b31a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3720      	adds	r7, #32
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	40040000 	.word	0x40040000

0800b328 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b08c      	sub	sp, #48	@ 0x30
 800b32c:	af02      	add	r7, sp, #8
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	4613      	mov	r3, r2
 800b334:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	785b      	ldrb	r3, [r3, #1]
 800b33e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800b340:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b344:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	4a5d      	ldr	r2, [pc, #372]	@ (800b4c0 <USB_HC_StartXfer+0x198>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d12f      	bne.n	800b3ae <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800b34e:	79fb      	ldrb	r3, [r7, #7]
 800b350:	2b01      	cmp	r3, #1
 800b352:	d11c      	bne.n	800b38e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	7c9b      	ldrb	r3, [r3, #18]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d003      	beq.n	800b364 <USB_HC_StartXfer+0x3c>
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	7c9b      	ldrb	r3, [r3, #18]
 800b360:	2b02      	cmp	r3, #2
 800b362:	d124      	bne.n	800b3ae <USB_HC_StartXfer+0x86>
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	799b      	ldrb	r3, [r3, #6]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d120      	bne.n	800b3ae <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	015a      	lsls	r2, r3, #5
 800b370:	6a3b      	ldr	r3, [r7, #32]
 800b372:	4413      	add	r3, r2
 800b374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b378:	68db      	ldr	r3, [r3, #12]
 800b37a:	69fa      	ldr	r2, [r7, #28]
 800b37c:	0151      	lsls	r1, r2, #5
 800b37e:	6a3a      	ldr	r2, [r7, #32]
 800b380:	440a      	add	r2, r1
 800b382:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b38a:	60d3      	str	r3, [r2, #12]
 800b38c:	e00f      	b.n	800b3ae <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	791b      	ldrb	r3, [r3, #4]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d10b      	bne.n	800b3ae <USB_HC_StartXfer+0x86>
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	795b      	ldrb	r3, [r3, #5]
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d107      	bne.n	800b3ae <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	785b      	ldrb	r3, [r3, #1]
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	68f8      	ldr	r0, [r7, #12]
 800b3a6:	f000 fb6b 	bl	800ba80 <USB_DoPing>
        return HAL_OK;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	e232      	b.n	800b814 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	799b      	ldrb	r3, [r3, #6]
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d158      	bne.n	800b468 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	78db      	ldrb	r3, [r3, #3]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d007      	beq.n	800b3d2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b3c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b3c4:	68ba      	ldr	r2, [r7, #8]
 800b3c6:	8a92      	ldrh	r2, [r2, #20]
 800b3c8:	fb03 f202 	mul.w	r2, r3, r2
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	61da      	str	r2, [r3, #28]
 800b3d0:	e07c      	b.n	800b4cc <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	7c9b      	ldrb	r3, [r3, #18]
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d130      	bne.n	800b43c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	6a1b      	ldr	r3, [r3, #32]
 800b3de:	2bbc      	cmp	r3, #188	@ 0xbc
 800b3e0:	d918      	bls.n	800b414 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	8a9b      	ldrh	r3, [r3, #20]
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	69da      	ldr	r2, [r3, #28]
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d003      	beq.n	800b404 <USB_HC_StartXfer+0xdc>
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	2b02      	cmp	r3, #2
 800b402:	d103      	bne.n	800b40c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	2202      	movs	r2, #2
 800b408:	60da      	str	r2, [r3, #12]
 800b40a:	e05f      	b.n	800b4cc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	2201      	movs	r2, #1
 800b410:	60da      	str	r2, [r3, #12]
 800b412:	e05b      	b.n	800b4cc <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	6a1a      	ldr	r2, [r3, #32]
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	2b01      	cmp	r3, #1
 800b422:	d007      	beq.n	800b434 <USB_HC_StartXfer+0x10c>
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	2b02      	cmp	r3, #2
 800b42a:	d003      	beq.n	800b434 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	2204      	movs	r2, #4
 800b430:	60da      	str	r2, [r3, #12]
 800b432:	e04b      	b.n	800b4cc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	2203      	movs	r2, #3
 800b438:	60da      	str	r2, [r3, #12]
 800b43a:	e047      	b.n	800b4cc <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800b43c:	79fb      	ldrb	r3, [r7, #7]
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d10d      	bne.n	800b45e <USB_HC_StartXfer+0x136>
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	6a1b      	ldr	r3, [r3, #32]
 800b446:	68ba      	ldr	r2, [r7, #8]
 800b448:	8a92      	ldrh	r2, [r2, #20]
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d907      	bls.n	800b45e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b44e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b450:	68ba      	ldr	r2, [r7, #8]
 800b452:	8a92      	ldrh	r2, [r2, #20]
 800b454:	fb03 f202 	mul.w	r2, r3, r2
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	61da      	str	r2, [r3, #28]
 800b45c:	e036      	b.n	800b4cc <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	6a1a      	ldr	r2, [r3, #32]
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	61da      	str	r2, [r3, #28]
 800b466:	e031      	b.n	800b4cc <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	6a1b      	ldr	r3, [r3, #32]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d018      	beq.n	800b4a2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	6a1b      	ldr	r3, [r3, #32]
 800b474:	68ba      	ldr	r2, [r7, #8]
 800b476:	8a92      	ldrh	r2, [r2, #20]
 800b478:	4413      	add	r3, r2
 800b47a:	3b01      	subs	r3, #1
 800b47c:	68ba      	ldr	r2, [r7, #8]
 800b47e:	8a92      	ldrh	r2, [r2, #20]
 800b480:	fbb3 f3f2 	udiv	r3, r3, r2
 800b484:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800b486:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b488:	8b7b      	ldrh	r3, [r7, #26]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d90b      	bls.n	800b4a6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800b48e:	8b7b      	ldrh	r3, [r7, #26]
 800b490:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b492:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b494:	68ba      	ldr	r2, [r7, #8]
 800b496:	8a92      	ldrh	r2, [r2, #20]
 800b498:	fb03 f202 	mul.w	r2, r3, r2
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	61da      	str	r2, [r3, #28]
 800b4a0:	e001      	b.n	800b4a6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	78db      	ldrb	r3, [r3, #3]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d00a      	beq.n	800b4c4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b4ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b4b0:	68ba      	ldr	r2, [r7, #8]
 800b4b2:	8a92      	ldrh	r2, [r2, #20]
 800b4b4:	fb03 f202 	mul.w	r2, r3, r2
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	61da      	str	r2, [r3, #28]
 800b4bc:	e006      	b.n	800b4cc <USB_HC_StartXfer+0x1a4>
 800b4be:	bf00      	nop
 800b4c0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	6a1a      	ldr	r2, [r3, #32]
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	69db      	ldr	r3, [r3, #28]
 800b4d0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b4d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b4d6:	04d9      	lsls	r1, r3, #19
 800b4d8:	4ba3      	ldr	r3, [pc, #652]	@ (800b768 <USB_HC_StartXfer+0x440>)
 800b4da:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b4dc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	7d9b      	ldrb	r3, [r3, #22]
 800b4e2:	075b      	lsls	r3, r3, #29
 800b4e4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b4e8:	69f9      	ldr	r1, [r7, #28]
 800b4ea:	0148      	lsls	r0, r1, #5
 800b4ec:	6a39      	ldr	r1, [r7, #32]
 800b4ee:	4401      	add	r1, r0
 800b4f0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b4f4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b4f6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b4f8:	79fb      	ldrb	r3, [r7, #7]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d009      	beq.n	800b512 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	6999      	ldr	r1, [r3, #24]
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	015a      	lsls	r2, r3, #5
 800b506:	6a3b      	ldr	r3, [r7, #32]
 800b508:	4413      	add	r3, r2
 800b50a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b50e:	460a      	mov	r2, r1
 800b510:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b512:	6a3b      	ldr	r3, [r7, #32]
 800b514:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	f003 0301 	and.w	r3, r3, #1
 800b51e:	2b00      	cmp	r3, #0
 800b520:	bf0c      	ite	eq
 800b522:	2301      	moveq	r3, #1
 800b524:	2300      	movne	r3, #0
 800b526:	b2db      	uxtb	r3, r3
 800b528:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b52a:	69fb      	ldr	r3, [r7, #28]
 800b52c:	015a      	lsls	r2, r3, #5
 800b52e:	6a3b      	ldr	r3, [r7, #32]
 800b530:	4413      	add	r3, r2
 800b532:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	69fa      	ldr	r2, [r7, #28]
 800b53a:	0151      	lsls	r1, r2, #5
 800b53c:	6a3a      	ldr	r2, [r7, #32]
 800b53e:	440a      	add	r2, r1
 800b540:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b544:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b548:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	015a      	lsls	r2, r3, #5
 800b54e:	6a3b      	ldr	r3, [r7, #32]
 800b550:	4413      	add	r3, r2
 800b552:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	7e7b      	ldrb	r3, [r7, #25]
 800b55a:	075b      	lsls	r3, r3, #29
 800b55c:	69f9      	ldr	r1, [r7, #28]
 800b55e:	0148      	lsls	r0, r1, #5
 800b560:	6a39      	ldr	r1, [r7, #32]
 800b562:	4401      	add	r1, r0
 800b564:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800b568:	4313      	orrs	r3, r2
 800b56a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	799b      	ldrb	r3, [r3, #6]
 800b570:	2b01      	cmp	r3, #1
 800b572:	f040 80c3 	bne.w	800b6fc <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	7c5b      	ldrb	r3, [r3, #17]
 800b57a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b57c:	68ba      	ldr	r2, [r7, #8]
 800b57e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b580:	4313      	orrs	r3, r2
 800b582:	69fa      	ldr	r2, [r7, #28]
 800b584:	0151      	lsls	r1, r2, #5
 800b586:	6a3a      	ldr	r2, [r7, #32]
 800b588:	440a      	add	r2, r1
 800b58a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b58e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b592:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	015a      	lsls	r2, r3, #5
 800b598:	6a3b      	ldr	r3, [r7, #32]
 800b59a:	4413      	add	r3, r2
 800b59c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	69fa      	ldr	r2, [r7, #28]
 800b5a4:	0151      	lsls	r1, r2, #5
 800b5a6:	6a3a      	ldr	r2, [r7, #32]
 800b5a8:	440a      	add	r2, r1
 800b5aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b5ae:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b5b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	79db      	ldrb	r3, [r3, #7]
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d123      	bne.n	800b604 <USB_HC_StartXfer+0x2dc>
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	78db      	ldrb	r3, [r3, #3]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d11f      	bne.n	800b604 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b5c4:	69fb      	ldr	r3, [r7, #28]
 800b5c6:	015a      	lsls	r2, r3, #5
 800b5c8:	6a3b      	ldr	r3, [r7, #32]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	69fa      	ldr	r2, [r7, #28]
 800b5d4:	0151      	lsls	r1, r2, #5
 800b5d6:	6a3a      	ldr	r2, [r7, #32]
 800b5d8:	440a      	add	r2, r1
 800b5da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b5de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b5e2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800b5e4:	69fb      	ldr	r3, [r7, #28]
 800b5e6:	015a      	lsls	r2, r3, #5
 800b5e8:	6a3b      	ldr	r3, [r7, #32]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5f0:	68db      	ldr	r3, [r3, #12]
 800b5f2:	69fa      	ldr	r2, [r7, #28]
 800b5f4:	0151      	lsls	r1, r2, #5
 800b5f6:	6a3a      	ldr	r2, [r7, #32]
 800b5f8:	440a      	add	r2, r1
 800b5fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b5fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b602:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	7c9b      	ldrb	r3, [r3, #18]
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d003      	beq.n	800b614 <USB_HC_StartXfer+0x2ec>
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	7c9b      	ldrb	r3, [r3, #18]
 800b610:	2b03      	cmp	r3, #3
 800b612:	d117      	bne.n	800b644 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d113      	bne.n	800b644 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	78db      	ldrb	r3, [r3, #3]
 800b620:	2b01      	cmp	r3, #1
 800b622:	d10f      	bne.n	800b644 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b624:	69fb      	ldr	r3, [r7, #28]
 800b626:	015a      	lsls	r2, r3, #5
 800b628:	6a3b      	ldr	r3, [r7, #32]
 800b62a:	4413      	add	r3, r2
 800b62c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	69fa      	ldr	r2, [r7, #28]
 800b634:	0151      	lsls	r1, r2, #5
 800b636:	6a3a      	ldr	r2, [r7, #32]
 800b638:	440a      	add	r2, r1
 800b63a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b63e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b642:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	7c9b      	ldrb	r3, [r3, #18]
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d162      	bne.n	800b712 <USB_HC_StartXfer+0x3ea>
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	78db      	ldrb	r3, [r3, #3]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d15e      	bne.n	800b712 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	3b01      	subs	r3, #1
 800b65a:	2b03      	cmp	r3, #3
 800b65c:	d858      	bhi.n	800b710 <USB_HC_StartXfer+0x3e8>
 800b65e:	a201      	add	r2, pc, #4	@ (adr r2, 800b664 <USB_HC_StartXfer+0x33c>)
 800b660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b664:	0800b675 	.word	0x0800b675
 800b668:	0800b697 	.word	0x0800b697
 800b66c:	0800b6b9 	.word	0x0800b6b9
 800b670:	0800b6db 	.word	0x0800b6db
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	015a      	lsls	r2, r3, #5
 800b678:	6a3b      	ldr	r3, [r7, #32]
 800b67a:	4413      	add	r3, r2
 800b67c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	69fa      	ldr	r2, [r7, #28]
 800b684:	0151      	lsls	r1, r2, #5
 800b686:	6a3a      	ldr	r2, [r7, #32]
 800b688:	440a      	add	r2, r1
 800b68a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b68e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b692:	6053      	str	r3, [r2, #4]
          break;
 800b694:	e03d      	b.n	800b712 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	015a      	lsls	r2, r3, #5
 800b69a:	6a3b      	ldr	r3, [r7, #32]
 800b69c:	4413      	add	r3, r2
 800b69e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	69fa      	ldr	r2, [r7, #28]
 800b6a6:	0151      	lsls	r1, r2, #5
 800b6a8:	6a3a      	ldr	r2, [r7, #32]
 800b6aa:	440a      	add	r2, r1
 800b6ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b6b0:	f043 030e 	orr.w	r3, r3, #14
 800b6b4:	6053      	str	r3, [r2, #4]
          break;
 800b6b6:	e02c      	b.n	800b712 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	015a      	lsls	r2, r3, #5
 800b6bc:	6a3b      	ldr	r3, [r7, #32]
 800b6be:	4413      	add	r3, r2
 800b6c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	69fa      	ldr	r2, [r7, #28]
 800b6c8:	0151      	lsls	r1, r2, #5
 800b6ca:	6a3a      	ldr	r2, [r7, #32]
 800b6cc:	440a      	add	r2, r1
 800b6ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b6d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b6d6:	6053      	str	r3, [r2, #4]
          break;
 800b6d8:	e01b      	b.n	800b712 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	015a      	lsls	r2, r3, #5
 800b6de:	6a3b      	ldr	r3, [r7, #32]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	69fa      	ldr	r2, [r7, #28]
 800b6ea:	0151      	lsls	r1, r2, #5
 800b6ec:	6a3a      	ldr	r2, [r7, #32]
 800b6ee:	440a      	add	r2, r1
 800b6f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b6f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b6f8:	6053      	str	r3, [r2, #4]
          break;
 800b6fa:	e00a      	b.n	800b712 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	015a      	lsls	r2, r3, #5
 800b700:	6a3b      	ldr	r3, [r7, #32]
 800b702:	4413      	add	r3, r2
 800b704:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b708:	461a      	mov	r2, r3
 800b70a:	2300      	movs	r3, #0
 800b70c:	6053      	str	r3, [r2, #4]
 800b70e:	e000      	b.n	800b712 <USB_HC_StartXfer+0x3ea>
          break;
 800b710:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	015a      	lsls	r2, r3, #5
 800b716:	6a3b      	ldr	r3, [r7, #32]
 800b718:	4413      	add	r3, r2
 800b71a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b728:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	78db      	ldrb	r3, [r3, #3]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d004      	beq.n	800b73c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b738:	613b      	str	r3, [r7, #16]
 800b73a:	e003      	b.n	800b744 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b742:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b74a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b74c:	69fb      	ldr	r3, [r7, #28]
 800b74e:	015a      	lsls	r2, r3, #5
 800b750:	6a3b      	ldr	r3, [r7, #32]
 800b752:	4413      	add	r3, r2
 800b754:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b758:	461a      	mov	r2, r3
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b75e:	79fb      	ldrb	r3, [r7, #7]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d003      	beq.n	800b76c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800b764:	2300      	movs	r3, #0
 800b766:	e055      	b.n	800b814 <USB_HC_StartXfer+0x4ec>
 800b768:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	78db      	ldrb	r3, [r3, #3]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d14e      	bne.n	800b812 <USB_HC_StartXfer+0x4ea>
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	6a1b      	ldr	r3, [r3, #32]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d04a      	beq.n	800b812 <USB_HC_StartXfer+0x4ea>
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	79db      	ldrb	r3, [r3, #7]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d146      	bne.n	800b812 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	7c9b      	ldrb	r3, [r3, #18]
 800b788:	2b03      	cmp	r3, #3
 800b78a:	d831      	bhi.n	800b7f0 <USB_HC_StartXfer+0x4c8>
 800b78c:	a201      	add	r2, pc, #4	@ (adr r2, 800b794 <USB_HC_StartXfer+0x46c>)
 800b78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b792:	bf00      	nop
 800b794:	0800b7a5 	.word	0x0800b7a5
 800b798:	0800b7c9 	.word	0x0800b7c9
 800b79c:	0800b7a5 	.word	0x0800b7a5
 800b7a0:	0800b7c9 	.word	0x0800b7c9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	6a1b      	ldr	r3, [r3, #32]
 800b7a8:	3303      	adds	r3, #3
 800b7aa:	089b      	lsrs	r3, r3, #2
 800b7ac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b7ae:	8afa      	ldrh	r2, [r7, #22]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d91c      	bls.n	800b7f4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	699b      	ldr	r3, [r3, #24]
 800b7be:	f043 0220 	orr.w	r2, r3, #32
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	619a      	str	r2, [r3, #24]
        }
        break;
 800b7c6:	e015      	b.n	800b7f4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	6a1b      	ldr	r3, [r3, #32]
 800b7cc:	3303      	adds	r3, #3
 800b7ce:	089b      	lsrs	r3, r3, #2
 800b7d0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b7d2:	8afa      	ldrh	r2, [r7, #22]
 800b7d4:	6a3b      	ldr	r3, [r7, #32]
 800b7d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b7da:	691b      	ldr	r3, [r3, #16]
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d90a      	bls.n	800b7f8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	699b      	ldr	r3, [r3, #24]
 800b7e6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	619a      	str	r2, [r3, #24]
        }
        break;
 800b7ee:	e003      	b.n	800b7f8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800b7f0:	bf00      	nop
 800b7f2:	e002      	b.n	800b7fa <USB_HC_StartXfer+0x4d2>
        break;
 800b7f4:	bf00      	nop
 800b7f6:	e000      	b.n	800b7fa <USB_HC_StartXfer+0x4d2>
        break;
 800b7f8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	6999      	ldr	r1, [r3, #24]
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	785a      	ldrb	r2, [r3, #1]
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	6a1b      	ldr	r3, [r3, #32]
 800b806:	b29b      	uxth	r3, r3
 800b808:	2000      	movs	r0, #0
 800b80a:	9000      	str	r0, [sp, #0]
 800b80c:	68f8      	ldr	r0, [r7, #12]
 800b80e:	f7ff f9c9 	bl	800aba4 <USB_WritePacket>
  }

  return HAL_OK;
 800b812:	2300      	movs	r3, #0
}
 800b814:	4618      	mov	r0, r3
 800b816:	3728      	adds	r7, #40	@ 0x28
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b085      	sub	sp, #20
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b82e:	695b      	ldr	r3, [r3, #20]
 800b830:	b29b      	uxth	r3, r3
}
 800b832:	4618      	mov	r0, r3
 800b834:	3714      	adds	r7, #20
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr

0800b83e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b83e:	b480      	push	{r7}
 800b840:	b089      	sub	sp, #36	@ 0x24
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
 800b846:	460b      	mov	r3, r1
 800b848:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800b84e:	78fb      	ldrb	r3, [r7, #3]
 800b850:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800b852:	2300      	movs	r3, #0
 800b854:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	015a      	lsls	r2, r3, #5
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	4413      	add	r3, r2
 800b85e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	0c9b      	lsrs	r3, r3, #18
 800b866:	f003 0303 	and.w	r3, r3, #3
 800b86a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b86c:	69bb      	ldr	r3, [r7, #24]
 800b86e:	015a      	lsls	r2, r3, #5
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	4413      	add	r3, r2
 800b874:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	0fdb      	lsrs	r3, r3, #31
 800b87c:	f003 0301 	and.w	r3, r3, #1
 800b880:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800b882:	69bb      	ldr	r3, [r7, #24]
 800b884:	015a      	lsls	r2, r3, #5
 800b886:	69fb      	ldr	r3, [r7, #28]
 800b888:	4413      	add	r3, r2
 800b88a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	0fdb      	lsrs	r3, r3, #31
 800b892:	f003 0301 	and.w	r3, r3, #1
 800b896:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	689b      	ldr	r3, [r3, #8]
 800b89c:	f003 0320 	and.w	r3, r3, #32
 800b8a0:	2b20      	cmp	r3, #32
 800b8a2:	d10d      	bne.n	800b8c0 <USB_HC_Halt+0x82>
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d10a      	bne.n	800b8c0 <USB_HC_Halt+0x82>
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d005      	beq.n	800b8bc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d002      	beq.n	800b8bc <USB_HC_Halt+0x7e>
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	2b03      	cmp	r3, #3
 800b8ba:	d101      	bne.n	800b8c0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	e0d8      	b.n	800ba72 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d002      	beq.n	800b8cc <USB_HC_Halt+0x8e>
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	2b02      	cmp	r3, #2
 800b8ca:	d173      	bne.n	800b9b4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	015a      	lsls	r2, r3, #5
 800b8d0:	69fb      	ldr	r3, [r7, #28]
 800b8d2:	4413      	add	r3, r2
 800b8d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	69ba      	ldr	r2, [r7, #24]
 800b8dc:	0151      	lsls	r1, r2, #5
 800b8de:	69fa      	ldr	r2, [r7, #28]
 800b8e0:	440a      	add	r2, r1
 800b8e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b8e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b8ea:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	689b      	ldr	r3, [r3, #8]
 800b8f0:	f003 0320 	and.w	r3, r3, #32
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d14a      	bne.n	800b98e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b900:	2b00      	cmp	r3, #0
 800b902:	d133      	bne.n	800b96c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	015a      	lsls	r2, r3, #5
 800b908:	69fb      	ldr	r3, [r7, #28]
 800b90a:	4413      	add	r3, r2
 800b90c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	69ba      	ldr	r2, [r7, #24]
 800b914:	0151      	lsls	r1, r2, #5
 800b916:	69fa      	ldr	r2, [r7, #28]
 800b918:	440a      	add	r2, r1
 800b91a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b91e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b922:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	015a      	lsls	r2, r3, #5
 800b928:	69fb      	ldr	r3, [r7, #28]
 800b92a:	4413      	add	r3, r2
 800b92c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	69ba      	ldr	r2, [r7, #24]
 800b934:	0151      	lsls	r1, r2, #5
 800b936:	69fa      	ldr	r2, [r7, #28]
 800b938:	440a      	add	r2, r1
 800b93a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b93e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b942:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	3301      	adds	r3, #1
 800b948:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b950:	d82e      	bhi.n	800b9b0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	015a      	lsls	r2, r3, #5
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	4413      	add	r3, r2
 800b95a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b964:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b968:	d0ec      	beq.n	800b944 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b96a:	e081      	b.n	800ba70 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b96c:	69bb      	ldr	r3, [r7, #24]
 800b96e:	015a      	lsls	r2, r3, #5
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	4413      	add	r3, r2
 800b974:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	69ba      	ldr	r2, [r7, #24]
 800b97c:	0151      	lsls	r1, r2, #5
 800b97e:	69fa      	ldr	r2, [r7, #28]
 800b980:	440a      	add	r2, r1
 800b982:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b986:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b98a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b98c:	e070      	b.n	800ba70 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b98e:	69bb      	ldr	r3, [r7, #24]
 800b990:	015a      	lsls	r2, r3, #5
 800b992:	69fb      	ldr	r3, [r7, #28]
 800b994:	4413      	add	r3, r2
 800b996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	69ba      	ldr	r2, [r7, #24]
 800b99e:	0151      	lsls	r1, r2, #5
 800b9a0:	69fa      	ldr	r2, [r7, #28]
 800b9a2:	440a      	add	r2, r1
 800b9a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b9a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b9ac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b9ae:	e05f      	b.n	800ba70 <USB_HC_Halt+0x232>
            break;
 800b9b0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b9b2:	e05d      	b.n	800ba70 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	015a      	lsls	r2, r3, #5
 800b9b8:	69fb      	ldr	r3, [r7, #28]
 800b9ba:	4413      	add	r3, r2
 800b9bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	69ba      	ldr	r2, [r7, #24]
 800b9c4:	0151      	lsls	r1, r2, #5
 800b9c6:	69fa      	ldr	r2, [r7, #28]
 800b9c8:	440a      	add	r2, r1
 800b9ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b9ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b9d2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b9da:	691b      	ldr	r3, [r3, #16]
 800b9dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d133      	bne.n	800ba4c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b9e4:	69bb      	ldr	r3, [r7, #24]
 800b9e6:	015a      	lsls	r2, r3, #5
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	69ba      	ldr	r2, [r7, #24]
 800b9f4:	0151      	lsls	r1, r2, #5
 800b9f6:	69fa      	ldr	r2, [r7, #28]
 800b9f8:	440a      	add	r2, r1
 800b9fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b9fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ba02:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ba04:	69bb      	ldr	r3, [r7, #24]
 800ba06:	015a      	lsls	r2, r3, #5
 800ba08:	69fb      	ldr	r3, [r7, #28]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	69ba      	ldr	r2, [r7, #24]
 800ba14:	0151      	lsls	r1, r2, #5
 800ba16:	69fa      	ldr	r2, [r7, #28]
 800ba18:	440a      	add	r2, r1
 800ba1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ba1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ba22:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	3301      	adds	r3, #1
 800ba28:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ba30:	d81d      	bhi.n	800ba6e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	015a      	lsls	r2, r3, #5
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	4413      	add	r3, r2
 800ba3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba48:	d0ec      	beq.n	800ba24 <USB_HC_Halt+0x1e6>
 800ba4a:	e011      	b.n	800ba70 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ba4c:	69bb      	ldr	r3, [r7, #24]
 800ba4e:	015a      	lsls	r2, r3, #5
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	4413      	add	r3, r2
 800ba54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	69ba      	ldr	r2, [r7, #24]
 800ba5c:	0151      	lsls	r1, r2, #5
 800ba5e:	69fa      	ldr	r2, [r7, #28]
 800ba60:	440a      	add	r2, r1
 800ba62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ba66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ba6a:	6013      	str	r3, [r2, #0]
 800ba6c:	e000      	b.n	800ba70 <USB_HC_Halt+0x232>
          break;
 800ba6e:	bf00      	nop
    }
  }

  return HAL_OK;
 800ba70:	2300      	movs	r3, #0
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3724      	adds	r7, #36	@ 0x24
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr
	...

0800ba80 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b087      	sub	sp, #28
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	460b      	mov	r3, r1
 800ba8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ba90:	78fb      	ldrb	r3, [r7, #3]
 800ba92:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ba94:	2301      	movs	r3, #1
 800ba96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	04da      	lsls	r2, r3, #19
 800ba9c:	4b15      	ldr	r3, [pc, #84]	@ (800baf4 <USB_DoPing+0x74>)
 800ba9e:	4013      	ands	r3, r2
 800baa0:	693a      	ldr	r2, [r7, #16]
 800baa2:	0151      	lsls	r1, r2, #5
 800baa4:	697a      	ldr	r2, [r7, #20]
 800baa6:	440a      	add	r2, r1
 800baa8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800baac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bab0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	015a      	lsls	r2, r3, #5
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	4413      	add	r3, r2
 800baba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bac8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bad0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	015a      	lsls	r2, r3, #5
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	4413      	add	r3, r2
 800bada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bade:	461a      	mov	r2, r3
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	371c      	adds	r7, #28
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop
 800baf4:	1ff80000 	.word	0x1ff80000

0800baf8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b088      	sub	sp, #32
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800bb00:	2300      	movs	r3, #0
 800bb02:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f7fe ff8c 	bl	800aa2a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bb12:	2110      	movs	r1, #16
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f7fe ffe5 	bl	800aae4 <USB_FlushTxFifo>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d001      	beq.n	800bb24 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800bb20:	2301      	movs	r3, #1
 800bb22:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f7ff f80f 	bl	800ab48 <USB_FlushRxFifo>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d001      	beq.n	800bb34 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800bb30:	2301      	movs	r3, #1
 800bb32:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800bb34:	2300      	movs	r3, #0
 800bb36:	61bb      	str	r3, [r7, #24]
 800bb38:	e01f      	b.n	800bb7a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800bb3a:	69bb      	ldr	r3, [r7, #24]
 800bb3c:	015a      	lsls	r2, r3, #5
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	4413      	add	r3, r2
 800bb42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bb50:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb58:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bb60:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	015a      	lsls	r2, r3, #5
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	4413      	add	r3, r2
 800bb6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb6e:	461a      	mov	r2, r3
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	3301      	adds	r3, #1
 800bb78:	61bb      	str	r3, [r7, #24]
 800bb7a:	69bb      	ldr	r3, [r7, #24]
 800bb7c:	2b0f      	cmp	r3, #15
 800bb7e:	d9dc      	bls.n	800bb3a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800bb80:	2300      	movs	r3, #0
 800bb82:	61bb      	str	r3, [r7, #24]
 800bb84:	e034      	b.n	800bbf0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800bb86:	69bb      	ldr	r3, [r7, #24]
 800bb88:	015a      	lsls	r2, r3, #5
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bb9c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bba4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bbac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800bbae:	69bb      	ldr	r3, [r7, #24]
 800bbb0:	015a      	lsls	r2, r3, #5
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bbba:	461a      	mov	r2, r3
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bbcc:	d80c      	bhi.n	800bbe8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	015a      	lsls	r2, r3, #5
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	4413      	add	r3, r2
 800bbd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bbe0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bbe4:	d0ec      	beq.n	800bbc0 <USB_StopHost+0xc8>
 800bbe6:	e000      	b.n	800bbea <USB_StopHost+0xf2>
        break;
 800bbe8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	3301      	adds	r3, #1
 800bbee:	61bb      	str	r3, [r7, #24]
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	2b0f      	cmp	r3, #15
 800bbf4:	d9c7      	bls.n	800bb86 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	f04f 33ff 	mov.w	r3, #4294967295
 800bc02:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f04f 32ff 	mov.w	r2, #4294967295
 800bc0a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f7fe fefb 	bl	800aa08 <USB_EnableGlobalInt>

  return ret;
 800bc12:	7ffb      	ldrb	r3, [r7, #31]
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3720      	adds	r7, #32
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800bc1c:	b590      	push	{r4, r7, lr}
 800bc1e:	b08b      	sub	sp, #44	@ 0x2c
 800bc20:	af04      	add	r7, sp, #16
 800bc22:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint16_t ep_mps;
  uint8_t max_ep;
  uint8_t num = 0U;
 800bc24:	2300      	movs	r3, #0
 800bc26:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bc2e:	7919      	ldrb	r1, [r3, #4]
 800bc30:	23ff      	movs	r3, #255	@ 0xff
 800bc32:	2201      	movs	r2, #1
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f001 f873 	bl	800cd20 <USBH_FindInterface>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bc3e:	7dbb      	ldrb	r3, [r7, #22]
 800bc40:	2bff      	cmp	r3, #255	@ 0xff
 800bc42:	d002      	beq.n	800bc4a <USBH_HID_InterfaceInit+0x2e>
 800bc44:	7dbb      	ldrb	r3, [r7, #22]
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	d90f      	bls.n	800bc6a <USBH_HID_InterfaceInit+0x4e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 800bc4a:	48a9      	ldr	r0, [pc, #676]	@ (800bef0 <USBH_HID_InterfaceInit+0x2d4>)
 800bc4c:	f003 fac2 	bl	800f1d4 <iprintf>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4619      	mov	r1, r3
 800bc5a:	48a6      	ldr	r0, [pc, #664]	@ (800bef4 <USBH_HID_InterfaceInit+0x2d8>)
 800bc5c:	f003 faba 	bl	800f1d4 <iprintf>
 800bc60:	200a      	movs	r0, #10
 800bc62:	f003 fac9 	bl	800f1f8 <putchar>
    return USBH_FAIL;
 800bc66:	2302      	movs	r3, #2
 800bc68:	e13d      	b.n	800bee6 <USBH_HID_InterfaceInit+0x2ca>
  }

  status = USBH_SelectInterface(phost, interface);
 800bc6a:	7dbb      	ldrb	r3, [r7, #22]
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 ffee 	bl	800cc50 <USBH_SelectInterface>
 800bc74:	4603      	mov	r3, r0
 800bc76:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 800bc78:	7d7b      	ldrb	r3, [r7, #21]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d001      	beq.n	800bc82 <USBH_HID_InterfaceInit+0x66>
  {
    return USBH_FAIL;
 800bc7e:	2302      	movs	r3, #2
 800bc80:	e131      	b.n	800bee6 <USBH_HID_InterfaceInit+0x2ca>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800bc88:	2034      	movs	r0, #52	@ 0x34
 800bc8a:	f003 f89f 	bl	800edcc <malloc>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bc98:	69db      	ldr	r3, [r3, #28]
 800bc9a:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d10a      	bne.n	800bcb8 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
 800bca2:	4893      	ldr	r0, [pc, #588]	@ (800bef0 <USBH_HID_InterfaceInit+0x2d4>)
 800bca4:	f003 fa96 	bl	800f1d4 <iprintf>
 800bca8:	4893      	ldr	r0, [pc, #588]	@ (800bef8 <USBH_HID_InterfaceInit+0x2dc>)
 800bcaa:	f003 fa93 	bl	800f1d4 <iprintf>
 800bcae:	200a      	movs	r0, #10
 800bcb0:	f003 faa2 	bl	800f1f8 <putchar>
    return USBH_FAIL;
 800bcb4:	2302      	movs	r3, #2
 800bcb6:	e116      	b.n	800bee6 <USBH_HID_InterfaceInit+0x2ca>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 800bcb8:	2234      	movs	r2, #52	@ 0x34
 800bcba:	2100      	movs	r1, #0
 800bcbc:	6938      	ldr	r0, [r7, #16]
 800bcbe:	f003 fc19 	bl	800f4f4 <memset>

  HID_Handle->state = USBH_HID_ERROR;
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	2207      	movs	r2, #7
 800bcc6:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800bcc8:	7dbb      	ldrb	r3, [r7, #22]
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	211a      	movs	r1, #26
 800bcce:	fb01 f303 	mul.w	r3, r1, r3
 800bcd2:	4413      	add	r3, r2
 800bcd4:	f203 3349 	addw	r3, r3, #841	@ 0x349
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d109      	bne.n	800bcf2 <USBH_HID_InterfaceInit+0xd6>
  {
    USBH_UsrLog("KeyBoard device found!");
 800bcde:	4887      	ldr	r0, [pc, #540]	@ (800befc <USBH_HID_InterfaceInit+0x2e0>)
 800bce0:	f003 fa78 	bl	800f1d4 <iprintf>
 800bce4:	200a      	movs	r0, #10
 800bce6:	f003 fa87 	bl	800f1f8 <putchar>
    HID_Handle->Init = USBH_HID_KeybdInit;
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	4a84      	ldr	r2, [pc, #528]	@ (800bf00 <USBH_HID_InterfaceInit+0x2e4>)
 800bcee:	631a      	str	r2, [r3, #48]	@ 0x30
 800bcf0:	e01c      	b.n	800bd2c <USBH_HID_InterfaceInit+0x110>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 800bcf2:	7dbb      	ldrb	r3, [r7, #22]
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	211a      	movs	r1, #26
 800bcf8:	fb01 f303 	mul.w	r3, r1, r3
 800bcfc:	4413      	add	r3, r2
 800bcfe:	f203 3349 	addw	r3, r3, #841	@ 0x349
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	d109      	bne.n	800bd1c <USBH_HID_InterfaceInit+0x100>
  {
    USBH_UsrLog("Mouse device found!");
 800bd08:	487e      	ldr	r0, [pc, #504]	@ (800bf04 <USBH_HID_InterfaceInit+0x2e8>)
 800bd0a:	f003 fa63 	bl	800f1d4 <iprintf>
 800bd0e:	200a      	movs	r0, #10
 800bd10:	f003 fa72 	bl	800f1f8 <putchar>
    HID_Handle->Init = USBH_HID_MouseInit;
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	4a7c      	ldr	r2, [pc, #496]	@ (800bf08 <USBH_HID_InterfaceInit+0x2ec>)
 800bd18:	631a      	str	r2, [r3, #48]	@ 0x30
 800bd1a:	e007      	b.n	800bd2c <USBH_HID_InterfaceInit+0x110>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
 800bd1c:	487b      	ldr	r0, [pc, #492]	@ (800bf0c <USBH_HID_InterfaceInit+0x2f0>)
 800bd1e:	f003 fa59 	bl	800f1d4 <iprintf>
 800bd22:	200a      	movs	r0, #10
 800bd24:	f003 fa68 	bl	800f1f8 <putchar>
    return USBH_FAIL;
 800bd28:	2302      	movs	r3, #2
 800bd2a:	e0dc      	b.n	800bee6 <USBH_HID_InterfaceInit+0x2ca>
  }

  HID_Handle->state     = USBH_HID_INIT;
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = USBH_HID_REQ_INIT;
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	2200      	movs	r2, #0
 800bd36:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bd38:	7dbb      	ldrb	r3, [r7, #22]
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	211a      	movs	r1, #26
 800bd3e:	fb01 f303 	mul.w	r3, r1, r3
 800bd42:	4413      	add	r3, r2
 800bd44:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800bd48:	781a      	ldrb	r2, [r3, #0]
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bd4e:	7dbb      	ldrb	r3, [r7, #22]
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	211a      	movs	r1, #26
 800bd54:	fb01 f303 	mul.w	r3, r1, r3
 800bd58:	4413      	add	r3, r2
 800bd5a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800bd5e:	881a      	ldrh	r2, [r3, #0]
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800bd64:	7dbb      	ldrb	r3, [r7, #22]
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	211a      	movs	r1, #26
 800bd6a:	fb01 f303 	mul.w	r3, r1, r3
 800bd6e:	4413      	add	r3, r2
 800bd70:	f203 3352 	addw	r3, r3, #850	@ 0x352
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	461a      	mov	r2, r3
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll < HID_MIN_POLL)
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	8b9b      	ldrh	r3, [r3, #28]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d102      	bne.n	800bd8a <USBH_HID_InterfaceInit+0x16e>
  {
    HID_Handle->poll = HID_MIN_POLL;
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	2201      	movs	r2, #1
 800bd88:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 800bd8a:	7dbb      	ldrb	r3, [r7, #22]
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	211a      	movs	r1, #26
 800bd90:	fb01 f303 	mul.w	r3, r1, r3
 800bd94:	4413      	add	r3, r2
 800bd96:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	2b02      	cmp	r3, #2
 800bd9e:	bf28      	it	cs
 800bda0:	2302      	movcs	r3, #2
 800bda2:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 800bda4:	2300      	movs	r3, #0
 800bda6:	75fb      	strb	r3, [r7, #23]
 800bda8:	e097      	b.n	800beda <USBH_HID_InterfaceInit+0x2be>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 800bdaa:	7dbb      	ldrb	r3, [r7, #22]
 800bdac:	7df9      	ldrb	r1, [r7, #23]
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	3101      	adds	r1, #1
 800bdb2:	00c9      	lsls	r1, r1, #3
 800bdb4:	201a      	movs	r0, #26
 800bdb6:	fb00 f303 	mul.w	r3, r0, r3
 800bdba:	440b      	add	r3, r1
 800bdbc:	4413      	add	r3, r2
 800bdbe:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	b25b      	sxtb	r3, r3
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	da42      	bge.n	800be50 <USBH_HID_InterfaceInit+0x234>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800bdca:	7dbb      	ldrb	r3, [r7, #22]
 800bdcc:	7df9      	ldrb	r1, [r7, #23]
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	3101      	adds	r1, #1
 800bdd2:	00c9      	lsls	r1, r1, #3
 800bdd4:	201a      	movs	r0, #26
 800bdd6:	fb00 f303 	mul.w	r3, r0, r3
 800bdda:	440b      	add	r3, r1
 800bddc:	4413      	add	r3, r2
 800bdde:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800bde2:	781a      	ldrb	r2, [r3, #0]
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	791b      	ldrb	r3, [r3, #4]
 800bdec:	4619      	mov	r1, r3
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f002 fc89 	bl	800e706 <USBH_AllocPipe>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	705a      	strb	r2, [r3, #1]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800bdfc:	7dbb      	ldrb	r3, [r7, #22]
 800bdfe:	7df9      	ldrb	r1, [r7, #23]
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	3101      	adds	r1, #1
 800be04:	00c9      	lsls	r1, r1, #3
 800be06:	201a      	movs	r0, #26
 800be08:	fb00 f303 	mul.w	r3, r0, r3
 800be0c:	440b      	add	r3, r1
 800be0e:	4413      	add	r3, r2
 800be10:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800be14:	881b      	ldrh	r3, [r3, #0]
 800be16:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	7859      	ldrb	r1, [r3, #1]
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	7918      	ldrb	r0, [r3, #4]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800be2c:	89ba      	ldrh	r2, [r7, #12]
 800be2e:	9202      	str	r2, [sp, #8]
 800be30:	2203      	movs	r2, #3
 800be32:	9201      	str	r2, [sp, #4]
 800be34:	9300      	str	r3, [sp, #0]
 800be36:	4623      	mov	r3, r4
 800be38:	4602      	mov	r2, r0
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f002 fc34 	bl	800e6a8 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	785b      	ldrb	r3, [r3, #1]
 800be44:	2200      	movs	r2, #0
 800be46:	4619      	mov	r1, r3
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f002 ff35 	bl	800ecb8 <USBH_LL_SetToggle>
 800be4e:	e041      	b.n	800bed4 <USBH_HID_InterfaceInit+0x2b8>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800be50:	7dbb      	ldrb	r3, [r7, #22]
 800be52:	7df9      	ldrb	r1, [r7, #23]
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	3101      	adds	r1, #1
 800be58:	00c9      	lsls	r1, r1, #3
 800be5a:	201a      	movs	r0, #26
 800be5c:	fb00 f303 	mul.w	r3, r0, r3
 800be60:	440b      	add	r3, r1
 800be62:	4413      	add	r3, r2
 800be64:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800be68:	781a      	ldrb	r2, [r3, #0]
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe = USBH_AllocPipe(phost, HID_Handle->OutEp);
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	78db      	ldrb	r3, [r3, #3]
 800be72:	4619      	mov	r1, r3
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f002 fc46 	bl	800e706 <USBH_AllocPipe>
 800be7a:	4603      	mov	r3, r0
 800be7c:	461a      	mov	r2, r3
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	701a      	strb	r2, [r3, #0]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800be82:	7dbb      	ldrb	r3, [r7, #22]
 800be84:	7df9      	ldrb	r1, [r7, #23]
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	3101      	adds	r1, #1
 800be8a:	00c9      	lsls	r1, r1, #3
 800be8c:	201a      	movs	r0, #26
 800be8e:	fb00 f303 	mul.w	r3, r0, r3
 800be92:	440b      	add	r3, r1
 800be94:	4413      	add	r3, r2
 800be96:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800be9a:	881b      	ldrh	r3, [r3, #0]
 800be9c:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	7819      	ldrb	r1, [r3, #0]
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	78d8      	ldrb	r0, [r3, #3]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800beb2:	89ba      	ldrh	r2, [r7, #12]
 800beb4:	9202      	str	r2, [sp, #8]
 800beb6:	2203      	movs	r2, #3
 800beb8:	9201      	str	r2, [sp, #4]
 800beba:	9300      	str	r3, [sp, #0]
 800bebc:	4623      	mov	r3, r4
 800bebe:	4602      	mov	r2, r0
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f002 fbf1 	bl	800e6a8 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	2200      	movs	r2, #0
 800becc:	4619      	mov	r1, r3
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f002 fef2 	bl	800ecb8 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 800bed4:	7dfb      	ldrb	r3, [r7, #23]
 800bed6:	3301      	adds	r3, #1
 800bed8:	75fb      	strb	r3, [r7, #23]
 800beda:	7dfa      	ldrb	r2, [r7, #23]
 800bedc:	7bfb      	ldrb	r3, [r7, #15]
 800bede:	429a      	cmp	r2, r3
 800bee0:	f4ff af63 	bcc.w	800bdaa <USBH_HID_InterfaceInit+0x18e>
    }
  }

  return USBH_OK;
 800bee4:	2300      	movs	r3, #0
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	371c      	adds	r7, #28
 800beea:	46bd      	mov	sp, r7
 800beec:	bd90      	pop	{r4, r7, pc}
 800beee:	bf00      	nop
 800bef0:	08010428 	.word	0x08010428
 800bef4:	08010434 	.word	0x08010434
 800bef8:	0801045c 	.word	0x0801045c
 800befc:	08010484 	.word	0x08010484
 800bf00:	0800c641 	.word	0x0800c641
 800bf04:	0801049c 	.word	0x0801049c
 800bf08:	0800c891 	.word	0x0800c891
 800bf0c:	080104b0 	.word	0x080104b0

0800bf10 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf1e:	69db      	ldr	r3, [r3, #28]
 800bf20:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	785b      	ldrb	r3, [r3, #1]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00e      	beq.n	800bf48 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	785b      	ldrb	r3, [r3, #1]
 800bf2e:	4619      	mov	r1, r3
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f002 fbd8 	bl	800e6e6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	785b      	ldrb	r3, [r3, #1]
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f002 fc03 	bl	800e748 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2200      	movs	r2, #0
 800bf46:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d00e      	beq.n	800bf6e <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	4619      	mov	r1, r3
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f002 fbc5 	bl	800e6e6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	781b      	ldrb	r3, [r3, #0]
 800bf60:	4619      	mov	r1, r3
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f002 fbf0 	bl	800e748 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf74:	69db      	ldr	r3, [r3, #28]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d00b      	beq.n	800bf92 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf80:	69db      	ldr	r3, [r3, #28]
 800bf82:	4618      	mov	r0, r3
 800bf84:	f002 ff2a 	bl	800eddc <free>
    phost->pActiveClass->pData = 0U;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf8e:	2200      	movs	r2, #0
 800bf90:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800bf92:	2300      	movs	r3, #0
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3710      	adds	r7, #16
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bfb2:	69db      	ldr	r3, [r3, #28]
 800bfb4:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	795b      	ldrb	r3, [r3, #5]
 800bfba:	2b05      	cmp	r3, #5
 800bfbc:	d872      	bhi.n	800c0a4 <USBH_HID_ClassRequest+0x108>
 800bfbe:	a201      	add	r2, pc, #4	@ (adr r2, 800bfc4 <USBH_HID_ClassRequest+0x28>)
 800bfc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfc4:	0800bfdd 	.word	0x0800bfdd
 800bfc8:	0800c0a5 	.word	0x0800c0a5
 800bfcc:	0800bff7 	.word	0x0800bff7
 800bfd0:	0800bfdd 	.word	0x0800bfdd
 800bfd4:	0800c033 	.word	0x0800c033
 800bfd8:	0800c05d 	.word	0x0800c05d
  {
    case USBH_HID_REQ_INIT:
    case USBH_HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	331c      	adds	r3, #28
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	4610      	mov	r0, r2
 800bfea:	f000 fa15 	bl	800c418 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = USBH_HID_REQ_GET_REPORT_DESC;
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	2202      	movs	r2, #2
 800bff2:	715a      	strb	r2, [r3, #5]

      break;
 800bff4:	e05d      	b.n	800c0b2 <USBH_HID_ClassRequest+0x116>
    case USBH_HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bffa:	4619      	mov	r1, r3
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 f965 	bl	800c2cc <USBH_HID_GetHIDReportDescriptor>
 800c002:	4603      	mov	r3, r0
 800c004:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800c006:	7bbb      	ldrb	r3, [r7, #14]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d103      	bne.n	800c014 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = USBH_HID_REQ_SET_IDLE;
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	2204      	movs	r2, #4
 800c010:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 800c012:	e049      	b.n	800c0a8 <USBH_HID_ClassRequest+0x10c>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800c014:	7bbb      	ldrb	r3, [r7, #14]
 800c016:	2b03      	cmp	r3, #3
 800c018:	d146      	bne.n	800c0a8 <USBH_HID_ClassRequest+0x10c>
        USBH_ErrLog("Control error: HID: Device Get Report Descriptor request failed");
 800c01a:	4828      	ldr	r0, [pc, #160]	@ (800c0bc <USBH_HID_ClassRequest+0x120>)
 800c01c:	f003 f8da 	bl	800f1d4 <iprintf>
 800c020:	4827      	ldr	r0, [pc, #156]	@ (800c0c0 <USBH_HID_ClassRequest+0x124>)
 800c022:	f003 f8d7 	bl	800f1d4 <iprintf>
 800c026:	200a      	movs	r0, #10
 800c028:	f003 f8e6 	bl	800f1f8 <putchar>
        status = USBH_FAIL;
 800c02c:	2302      	movs	r3, #2
 800c02e:	73fb      	strb	r3, [r7, #15]
      break;
 800c030:	e03a      	b.n	800c0a8 <USBH_HID_ClassRequest+0x10c>

    case USBH_HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 800c032:	2200      	movs	r2, #0
 800c034:	2100      	movs	r1, #0
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 f974 	bl	800c324 <USBH_HID_SetIdle>
 800c03c:	4603      	mov	r3, r0
 800c03e:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 800c040:	7bbb      	ldrb	r3, [r7, #14]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d103      	bne.n	800c04e <USBH_HID_ClassRequest+0xb2>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	2205      	movs	r2, #5
 800c04a:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 800c04c:	e02e      	b.n	800c0ac <USBH_HID_ClassRequest+0x110>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 800c04e:	7bbb      	ldrb	r3, [r7, #14]
 800c050:	2b03      	cmp	r3, #3
 800c052:	d12b      	bne.n	800c0ac <USBH_HID_ClassRequest+0x110>
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	2205      	movs	r2, #5
 800c058:	715a      	strb	r2, [r3, #5]
      break;
 800c05a:	e027      	b.n	800c0ac <USBH_HID_ClassRequest+0x110>

    case USBH_HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 800c05c:	2100      	movs	r1, #0
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 f9b4 	bl	800c3cc <USBH_HID_SetProtocol>
 800c064:	4603      	mov	r3, r0
 800c066:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800c068:	7bbb      	ldrb	r3, [r7, #14]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d10b      	bne.n	800c086 <USBH_HID_ClassRequest+0xea>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_IDLE;
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	2201      	movs	r2, #1
 800c072:	715a      	strb	r2, [r3, #5]

        /* all requests performed */
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c07a:	2102      	movs	r1, #2
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	4798      	blx	r3
        status = USBH_OK;
 800c080:	2300      	movs	r3, #0
 800c082:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 800c084:	e014      	b.n	800c0b0 <USBH_HID_ClassRequest+0x114>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800c086:	7bbb      	ldrb	r3, [r7, #14]
 800c088:	2b03      	cmp	r3, #3
 800c08a:	d111      	bne.n	800c0b0 <USBH_HID_ClassRequest+0x114>
        USBH_ErrLog("Control error: HID: Device Set protocol request failed");
 800c08c:	480b      	ldr	r0, [pc, #44]	@ (800c0bc <USBH_HID_ClassRequest+0x120>)
 800c08e:	f003 f8a1 	bl	800f1d4 <iprintf>
 800c092:	480c      	ldr	r0, [pc, #48]	@ (800c0c4 <USBH_HID_ClassRequest+0x128>)
 800c094:	f003 f89e 	bl	800f1d4 <iprintf>
 800c098:	200a      	movs	r0, #10
 800c09a:	f003 f8ad 	bl	800f1f8 <putchar>
        status = USBH_FAIL;
 800c09e:	2302      	movs	r3, #2
 800c0a0:	73fb      	strb	r3, [r7, #15]
      break;
 800c0a2:	e005      	b.n	800c0b0 <USBH_HID_ClassRequest+0x114>

    case USBH_HID_REQ_IDLE:
    default:
      break;
 800c0a4:	bf00      	nop
 800c0a6:	e004      	b.n	800c0b2 <USBH_HID_ClassRequest+0x116>
      break;
 800c0a8:	bf00      	nop
 800c0aa:	e002      	b.n	800c0b2 <USBH_HID_ClassRequest+0x116>
      break;
 800c0ac:	bf00      	nop
 800c0ae:	e000      	b.n	800c0b2 <USBH_HID_ClassRequest+0x116>
      break;
 800c0b0:	bf00      	nop
  }

  return status;
 800c0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3710      	adds	r7, #16
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	080104c8 	.word	0x080104c8
 800c0c0:	080104d0 	.word	0x080104d0
 800c0c4:	08010510 	.word	0x08010510

0800c0c8 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b088      	sub	sp, #32
 800c0cc:	af02      	add	r7, sp, #8
 800c0ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c0da:	69db      	ldr	r3, [r3, #28]
 800c0dc:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	789b      	ldrb	r3, [r3, #2]
 800c0e2:	2b06      	cmp	r3, #6
 800c0e4:	f200 80c1 	bhi.w	800c26a <USBH_HID_Process+0x1a2>
 800c0e8:	a201      	add	r2, pc, #4	@ (adr r2, 800c0f0 <USBH_HID_Process+0x28>)
 800c0ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ee:	bf00      	nop
 800c0f0:	0800c10d 	.word	0x0800c10d
 800c0f4:	0800c145 	.word	0x0800c145
 800c0f8:	0800c26b 	.word	0x0800c26b
 800c0fc:	0800c26b 	.word	0x0800c26b
 800c100:	0800c1b5 	.word	0x0800c1b5
 800c104:	0800c19f 	.word	0x0800c19f
 800c108:	0800c1e3 	.word	0x0800c1e3
  {
    case USBH_HID_INIT:
      status = HID_Handle->Init(phost);
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	4798      	blx	r3
 800c114:	4603      	mov	r3, r0
 800c116:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800c118:	7dfb      	ldrb	r3, [r7, #23]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d103      	bne.n	800c126 <USBH_HID_Process+0x5e>
      {
        HID_Handle->state = USBH_HID_IDLE;
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	2201      	movs	r2, #1
 800c122:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c124:	e0a6      	b.n	800c274 <USBH_HID_Process+0x1ac>
        USBH_ErrLog("HID Class Init failed");
 800c126:	4856      	ldr	r0, [pc, #344]	@ (800c280 <USBH_HID_Process+0x1b8>)
 800c128:	f003 f854 	bl	800f1d4 <iprintf>
 800c12c:	4855      	ldr	r0, [pc, #340]	@ (800c284 <USBH_HID_Process+0x1bc>)
 800c12e:	f003 f851 	bl	800f1d4 <iprintf>
 800c132:	200a      	movs	r0, #10
 800c134:	f003 f860 	bl	800f1f8 <putchar>
        HID_Handle->state = USBH_HID_ERROR;
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	2207      	movs	r2, #7
 800c13c:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800c13e:	2302      	movs	r3, #2
 800c140:	75fb      	strb	r3, [r7, #23]
      break;
 800c142:	e097      	b.n	800c274 <USBH_HID_Process+0x1ac>

    case USBH_HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	695a      	ldr	r2, [r3, #20]
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	8b1b      	ldrh	r3, [r3, #24]
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	9300      	str	r3, [sp, #0]
 800c150:	4613      	mov	r3, r2
 800c152:	2200      	movs	r2, #0
 800c154:	2101      	movs	r1, #1
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 f90c 	bl	800c374 <USBH_HID_GetReport>
 800c15c:	4603      	mov	r3, r0
 800c15e:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800c160:	7dfb      	ldrb	r3, [r7, #23]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d103      	bne.n	800c16e <USBH_HID_Process+0xa6>
      {
        HID_Handle->state = USBH_HID_SYNC;
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	2205      	movs	r2, #5
 800c16a:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c16c:	e082      	b.n	800c274 <USBH_HID_Process+0x1ac>
      else if (status == USBH_BUSY)
 800c16e:	7dfb      	ldrb	r3, [r7, #23]
 800c170:	2b01      	cmp	r3, #1
 800c172:	d105      	bne.n	800c180 <USBH_HID_Process+0xb8>
        HID_Handle->state = USBH_HID_IDLE;
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	2201      	movs	r2, #1
 800c178:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800c17a:	2300      	movs	r3, #0
 800c17c:	75fb      	strb	r3, [r7, #23]
      break;
 800c17e:	e079      	b.n	800c274 <USBH_HID_Process+0x1ac>
      else if (status == USBH_NOT_SUPPORTED)
 800c180:	7dfb      	ldrb	r3, [r7, #23]
 800c182:	2b03      	cmp	r3, #3
 800c184:	d105      	bne.n	800c192 <USBH_HID_Process+0xca>
        HID_Handle->state = USBH_HID_SYNC;
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	2205      	movs	r2, #5
 800c18a:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800c18c:	2300      	movs	r3, #0
 800c18e:	75fb      	strb	r3, [r7, #23]
      break;
 800c190:	e070      	b.n	800c274 <USBH_HID_Process+0x1ac>
        HID_Handle->state = USBH_HID_ERROR;
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	2207      	movs	r2, #7
 800c196:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800c198:	2302      	movs	r3, #2
 800c19a:	75fb      	strb	r3, [r7, #23]
      break;
 800c19c:	e06a      	b.n	800c274 <USBH_HID_Process+0x1ac>

    case USBH_HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c1a4:	f003 0301 	and.w	r3, r3, #1
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d060      	beq.n	800c26e <USBH_HID_Process+0x1a6>
      {
        HID_Handle->state = USBH_HID_GET_DATA;
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	2204      	movs	r2, #4
 800c1b0:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c1b2:	e05c      	b.n	800c26e <USBH_HID_Process+0x1a6>

    case USBH_HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800c1bc:	b2da      	uxtb	r2, r3
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	785b      	ldrb	r3, [r3, #1]
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f002 fa51 	bl	800e66a <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = USBH_HID_POLL;
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	2206      	movs	r2, #6
 800c1cc:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      break;
 800c1e0:	e048      	b.n	800c274 <USBH_HID_Process+0x1ac>

    case USBH_HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	785b      	ldrb	r3, [r3, #1]
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f002 fd3b 	bl	800ec64 <USBH_LL_GetURBState>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d124      	bne.n	800c23e <USBH_HID_Process+0x176>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	785b      	ldrb	r3, [r3, #1]
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f002 fca0 	bl	800eb40 <USBH_LL_GetLastXferSize>
 800c200:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U) && (HID_Handle->fifo.buf != NULL))
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d132      	bne.n	800c272 <USBH_HID_Process+0x1aa>
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d02f      	beq.n	800c272 <USBH_HID_Process+0x1aa>
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	689b      	ldr	r3, [r3, #8]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d02b      	beq.n	800c272 <USBH_HID_Process+0x1aa>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	f103 0008 	add.w	r0, r3, #8
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	6959      	ldr	r1, [r3, #20]
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	8b1b      	ldrh	r3, [r3, #24]
 800c228:	461a      	mov	r2, r3
 800c22a:	f000 f9b5 	bl	800c598 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	2201      	movs	r2, #1
 800c232:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          USBH_HID_EventCallback(phost);
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f7f5 f802 	bl	8001240 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = USBH_HID_GET_DATA;
          }
        }
      }
      break;
 800c23c:	e019      	b.n	800c272 <USBH_HID_Process+0x1aa>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	785b      	ldrb	r3, [r3, #1]
 800c242:	4619      	mov	r1, r3
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f002 fd0d 	bl	800ec64 <USBH_LL_GetURBState>
 800c24a:	4603      	mov	r3, r0
 800c24c:	2b05      	cmp	r3, #5
 800c24e:	d110      	bne.n	800c272 <USBH_HID_Process+0x1aa>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	7e9b      	ldrb	r3, [r3, #26]
 800c254:	4619      	mov	r1, r3
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f001 fcb6 	bl	800dbc8 <USBH_ClrFeature>
 800c25c:	4603      	mov	r3, r0
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d107      	bne.n	800c272 <USBH_HID_Process+0x1aa>
            HID_Handle->state = USBH_HID_GET_DATA;
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	2204      	movs	r2, #4
 800c266:	709a      	strb	r2, [r3, #2]
      break;
 800c268:	e003      	b.n	800c272 <USBH_HID_Process+0x1aa>

    default:
      break;
 800c26a:	bf00      	nop
 800c26c:	e002      	b.n	800c274 <USBH_HID_Process+0x1ac>
      break;
 800c26e:	bf00      	nop
 800c270:	e000      	b.n	800c274 <USBH_HID_Process+0x1ac>
      break;
 800c272:	bf00      	nop
  }

  return status;
 800c274:	7dfb      	ldrb	r3, [r7, #23]
}
 800c276:	4618      	mov	r0, r3
 800c278:	3718      	adds	r7, #24
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	080104c8 	.word	0x080104c8
 800c284:	08010548 	.word	0x08010548

0800c288 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c296:	69db      	ldr	r3, [r3, #28]
 800c298:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == USBH_HID_POLL)
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	789b      	ldrb	r3, [r3, #2]
 800c29e:	2b06      	cmp	r3, #6
 800c2a0:	d10c      	bne.n	800c2bc <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	6a1b      	ldr	r3, [r3, #32]
 800c2ac:	1ad3      	subs	r3, r2, r3
 800c2ae:	68fa      	ldr	r2, [r7, #12]
 800c2b0:	8b92      	ldrh	r2, [r2, #28]
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d302      	bcc.n	800c2bc <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = USBH_HID_GET_DATA;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2204      	movs	r2, #4
 800c2ba:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 800c2bc:	2300      	movs	r3, #0
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3714      	adds	r7, #20
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr
	...

0800c2cc <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b086      	sub	sp, #24
 800c2d0:	af02      	add	r7, sp, #8
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	807b      	strh	r3, [r7, #2]

  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800c2d8:	887b      	ldrh	r3, [r7, #2]
 800c2da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2de:	d90a      	bls.n	800c2f6 <USBH_HID_GetHIDReportDescriptor+0x2a>
  {
    USBH_ErrLog("Control error: Get HID Report Descriptor failed, data buffer size issue");
 800c2e0:	480e      	ldr	r0, [pc, #56]	@ (800c31c <USBH_HID_GetHIDReportDescriptor+0x50>)
 800c2e2:	f002 ff77 	bl	800f1d4 <iprintf>
 800c2e6:	480e      	ldr	r0, [pc, #56]	@ (800c320 <USBH_HID_GetHIDReportDescriptor+0x54>)
 800c2e8:	f002 ff74 	bl	800f1d4 <iprintf>
 800c2ec:	200a      	movs	r0, #10
 800c2ee:	f002 ff83 	bl	800f1f8 <putchar>
    return USBH_NOT_SUPPORTED;
 800c2f2:	2303      	movs	r3, #3
 800c2f4:	e00e      	b.n	800c314 <USBH_HID_GetHIDReportDescriptor+0x48>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800c2fc:	887b      	ldrh	r3, [r7, #2]
 800c2fe:	9300      	str	r3, [sp, #0]
 800c300:	4613      	mov	r3, r2
 800c302:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
 800c306:	2101      	movs	r1, #1
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f001 fbbd 	bl	800da88 <USBH_GetDescriptor>
 800c30e:	4603      	mov	r3, r0
 800c310:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800c312:	7bfb      	ldrb	r3, [r7, #15]
}
 800c314:	4618      	mov	r0, r3
 800c316:	3710      	adds	r7, #16
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	080104c8 	.word	0x080104c8
 800c320:	08010560 	.word	0x08010560

0800c324 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b082      	sub	sp, #8
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	460b      	mov	r3, r1
 800c32e:	70fb      	strb	r3, [r7, #3]
 800c330:	4613      	mov	r3, r2
 800c332:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2221      	movs	r2, #33	@ 0x21
 800c338:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	220a      	movs	r2, #10
 800c33e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 800c340:	78fb      	ldrb	r3, [r7, #3]
 800c342:	b29b      	uxth	r3, r3
 800c344:	021b      	lsls	r3, r3, #8
 800c346:	b29a      	uxth	r2, r3
 800c348:	78bb      	ldrb	r3, [r7, #2]
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	4313      	orrs	r3, r2
 800c34e:	b29a      	uxth	r2, r3
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2200      	movs	r2, #0
 800c35e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800c360:	2200      	movs	r2, #0
 800c362:	2100      	movs	r1, #0
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f001 ff64 	bl	800e232 <USBH_CtlReq>
 800c36a:	4603      	mov	r3, r0
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3708      	adds	r7, #8
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	607b      	str	r3, [r7, #4]
 800c37e:	460b      	mov	r3, r1
 800c380:	72fb      	strb	r3, [r7, #11]
 800c382:	4613      	mov	r3, r2
 800c384:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	22a1      	movs	r2, #161	@ 0xa1
 800c38a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2201      	movs	r2, #1
 800c390:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800c392:	7afb      	ldrb	r3, [r7, #11]
 800c394:	b29b      	uxth	r3, r3
 800c396:	021b      	lsls	r3, r3, #8
 800c398:	b29a      	uxth	r2, r3
 800c39a:	7abb      	ldrb	r3, [r7, #10]
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	b29a      	uxth	r2, r3
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800c3ac:	7e3b      	ldrb	r3, [r7, #24]
 800c3ae:	b29a      	uxth	r2, r3
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800c3b4:	7e3b      	ldrb	r3, [r7, #24]
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	6879      	ldr	r1, [r7, #4]
 800c3bc:	68f8      	ldr	r0, [r7, #12]
 800c3be:	f001 ff38 	bl	800e232 <USBH_CtlReq>
 800c3c2:	4603      	mov	r3, r0
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3710      	adds	r7, #16
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2221      	movs	r2, #33	@ 0x21
 800c3dc:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	220b      	movs	r2, #11
 800c3e2:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 800c3e4:	78fb      	ldrb	r3, [r7, #3]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d003      	beq.n	800c3f2 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	825a      	strh	r2, [r3, #18]
 800c3f0:	e002      	b.n	800c3f8 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2200      	movs	r2, #0
 800c402:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800c404:	2200      	movs	r2, #0
 800c406:	2100      	movs	r1, #0
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f001 ff12 	bl	800e232 <USBH_CtlReq>
 800c40e:	4603      	mov	r3, r0

}
 800c410:	4618      	mov	r0, r3
 800c412:	3708      	adds	r7, #8
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	3302      	adds	r3, #2
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	461a      	mov	r2, r3
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	3303      	adds	r3, #3
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	021b      	lsls	r3, r3, #8
 800c436:	b29b      	uxth	r3, r3
 800c438:	4313      	orrs	r3, r2
 800c43a:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800c43c:	897b      	ldrh	r3, [r7, #10]
 800c43e:	2b09      	cmp	r3, #9
 800c440:	d941      	bls.n	800c4c6 <USBH_HID_ParseHIDDesc+0xae>
  {
    ptr = USB_LEN_CFG_DESC;
 800c442:	2309      	movs	r3, #9
 800c444:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 800c446:	e03a      	b.n	800c4be <USBH_HID_ParseHIDDesc+0xa6>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c448:	f107 0308 	add.w	r3, r7, #8
 800c44c:	4619      	mov	r1, r3
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	f001 fed5 	bl	800e1fe <USBH_GetNextDesc>
 800c454:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	785b      	ldrb	r3, [r3, #1]
 800c45a:	2b21      	cmp	r3, #33	@ 0x21
 800c45c:	d12f      	bne.n	800c4be <USBH_HID_ParseHIDDesc+0xa6>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	781a      	ldrb	r2, [r3, #0]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	785a      	ldrb	r2, [r3, #1]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	3302      	adds	r3, #2
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	461a      	mov	r2, r3
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	3303      	adds	r3, #3
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	021b      	lsls	r3, r3, #8
 800c47e:	b29b      	uxth	r3, r3
 800c480:	4313      	orrs	r3, r2
 800c482:	b29a      	uxth	r2, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	791a      	ldrb	r2, [r3, #4]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	795a      	ldrb	r2, [r3, #5]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	799a      	ldrb	r2, [r3, #6]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	3307      	adds	r3, #7
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	3308      	adds	r3, #8
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	021b      	lsls	r3, r3, #8
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	b29a      	uxth	r2, r3
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	811a      	strh	r2, [r3, #8]
        break;
 800c4ba:	bf00      	nop
      }
    }
  }
}
 800c4bc:	e003      	b.n	800c4c6 <USBH_HID_ParseHIDDesc+0xae>
    while (ptr < CfgDescLen)
 800c4be:	893b      	ldrh	r3, [r7, #8]
 800c4c0:	897a      	ldrh	r2, [r7, #10]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d8c0      	bhi.n	800c448 <USBH_HID_ParseHIDDesc+0x30>
}
 800c4c6:	bf00      	nop
 800c4c8:	3710      	adds	r7, #16
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}

0800c4ce <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 800c4ce:	b480      	push	{r7}
 800c4d0:	b085      	sub	sp, #20
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	60f8      	str	r0, [r7, #12]
 800c4d6:	60b9      	str	r1, [r7, #8]
 800c4d8:	4613      	mov	r3, r2
 800c4da:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	88fa      	ldrh	r2, [r7, #6]
 800c4f2:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	68ba      	ldr	r2, [r7, #8]
 800c4f8:	601a      	str	r2, [r3, #0]
}
 800c4fa:	bf00      	nop
 800c4fc:	3714      	adds	r7, #20
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr

0800c506 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 800c506:	b480      	push	{r7}
 800c508:	b087      	sub	sp, #28
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	60f8      	str	r0, [r7, #12]
 800c50e:	60b9      	str	r1, [r7, #8]
 800c510:	4613      	mov	r3, r2
 800c512:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	7a9b      	ldrb	r3, [r3, #10]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d131      	bne.n	800c584 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	2201      	movs	r2, #1
 800c524:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800c526:	2300      	movs	r3, #0
 800c528:	82fb      	strh	r3, [r7, #22]
 800c52a:	e027      	b.n	800c57c <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	88da      	ldrh	r2, [r3, #6]
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	889b      	ldrh	r3, [r3, #4]
 800c534:	429a      	cmp	r2, r3
 800c536:	d019      	beq.n	800c56c <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	68fa      	ldr	r2, [r7, #12]
 800c53e:	88d2      	ldrh	r2, [r2, #6]
 800c540:	441a      	add	r2, r3
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	1c59      	adds	r1, r3, #1
 800c546:	6139      	str	r1, [r7, #16]
 800c548:	7812      	ldrb	r2, [r2, #0]
 800c54a:	701a      	strb	r2, [r3, #0]
        f->tail++;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	88db      	ldrh	r3, [r3, #6]
 800c550:	3301      	adds	r3, #1
 800c552:	b29a      	uxth	r2, r3
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	88da      	ldrh	r2, [r3, #6]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	891b      	ldrh	r3, [r3, #8]
 800c560:	429a      	cmp	r2, r3
 800c562:	d108      	bne.n	800c576 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2200      	movs	r2, #0
 800c568:	80da      	strh	r2, [r3, #6]
 800c56a:	e004      	b.n	800c576 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2200      	movs	r2, #0
 800c570:	729a      	strb	r2, [r3, #10]
        return i;
 800c572:	8afb      	ldrh	r3, [r7, #22]
 800c574:	e00a      	b.n	800c58c <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 800c576:	8afb      	ldrh	r3, [r7, #22]
 800c578:	3301      	adds	r3, #1
 800c57a:	82fb      	strh	r3, [r7, #22]
 800c57c:	8afa      	ldrh	r2, [r7, #22]
 800c57e:	88fb      	ldrh	r3, [r7, #6]
 800c580:	429a      	cmp	r2, r3
 800c582:	d3d3      	bcc.n	800c52c <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2200      	movs	r2, #0
 800c588:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800c58a:	88fb      	ldrh	r3, [r7, #6]
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	371c      	adds	r7, #28
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr

0800c598 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800c598:	b480      	push	{r7}
 800c59a:	b087      	sub	sp, #28
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	7a9b      	ldrb	r3, [r3, #10]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d13c      	bne.n	800c62c <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	82fb      	strh	r3, [r7, #22]
 800c5bc:	e032      	b.n	800c624 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	889b      	ldrh	r3, [r3, #4]
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	68fa      	ldr	r2, [r7, #12]
 800c5c6:	88d2      	ldrh	r2, [r2, #6]
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d00a      	beq.n	800c5e2 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	889b      	ldrh	r3, [r3, #4]
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	68fa      	ldr	r2, [r7, #12]
 800c5d4:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d108      	bne.n	800c5ec <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	88db      	ldrh	r3, [r3, #6]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d104      	bne.n	800c5ec <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	729a      	strb	r2, [r3, #10]
        return i;
 800c5e8:	8afb      	ldrh	r3, [r7, #22]
 800c5ea:	e023      	b.n	800c634 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	1c5a      	adds	r2, r3, #1
 800c5f0:	613a      	str	r2, [r7, #16]
 800c5f2:	68fa      	ldr	r2, [r7, #12]
 800c5f4:	6812      	ldr	r2, [r2, #0]
 800c5f6:	68f9      	ldr	r1, [r7, #12]
 800c5f8:	8889      	ldrh	r1, [r1, #4]
 800c5fa:	440a      	add	r2, r1
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	7013      	strb	r3, [r2, #0]
        f->head++;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	889b      	ldrh	r3, [r3, #4]
 800c604:	3301      	adds	r3, #1
 800c606:	b29a      	uxth	r2, r3
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	889a      	ldrh	r2, [r3, #4]
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	891b      	ldrh	r3, [r3, #8]
 800c614:	429a      	cmp	r2, r3
 800c616:	d102      	bne.n	800c61e <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2200      	movs	r2, #0
 800c61c:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 800c61e:	8afb      	ldrh	r3, [r7, #22]
 800c620:	3301      	adds	r3, #1
 800c622:	82fb      	strh	r3, [r7, #22]
 800c624:	8afa      	ldrh	r2, [r7, #22]
 800c626:	88fb      	ldrh	r3, [r7, #6]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d3c8      	bcc.n	800c5be <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2200      	movs	r2, #0
 800c630:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800c632:	88fb      	ldrh	r3, [r7, #6]
}
 800c634:	4618      	mov	r0, r3
 800c636:	371c      	adds	r7, #28
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr

0800c640 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c64e:	69db      	ldr	r3, [r3, #28]
 800c650:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 800c652:	4b22      	ldr	r3, [pc, #136]	@ (800c6dc <USBH_HID_KeybdInit+0x9c>)
 800c654:	2200      	movs	r2, #0
 800c656:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 800c658:	4b20      	ldr	r3, [pc, #128]	@ (800c6dc <USBH_HID_KeybdInit+0x9c>)
 800c65a:	2200      	movs	r2, #0
 800c65c:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 800c65e:	4b1f      	ldr	r3, [pc, #124]	@ (800c6dc <USBH_HID_KeybdInit+0x9c>)
 800c660:	2200      	movs	r2, #0
 800c662:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 800c664:	4b1d      	ldr	r3, [pc, #116]	@ (800c6dc <USBH_HID_KeybdInit+0x9c>)
 800c666:	2200      	movs	r2, #0
 800c668:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 800c66a:	4b1c      	ldr	r3, [pc, #112]	@ (800c6dc <USBH_HID_KeybdInit+0x9c>)
 800c66c:	2200      	movs	r2, #0
 800c66e:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 800c670:	4b1a      	ldr	r3, [pc, #104]	@ (800c6dc <USBH_HID_KeybdInit+0x9c>)
 800c672:	2200      	movs	r2, #0
 800c674:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 800c676:	4b19      	ldr	r3, [pc, #100]	@ (800c6dc <USBH_HID_KeybdInit+0x9c>)
 800c678:	2200      	movs	r2, #0
 800c67a:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 800c67c:	4b17      	ldr	r3, [pc, #92]	@ (800c6dc <USBH_HID_KeybdInit+0x9c>)
 800c67e:	2200      	movs	r2, #0
 800c680:	721a      	strb	r2, [r3, #8]

  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800c682:	2300      	movs	r3, #0
 800c684:	60fb      	str	r3, [r7, #12]
 800c686:	e00c      	b.n	800c6a2 <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 800c688:	4a15      	ldr	r2, [pc, #84]	@ (800c6e0 <USBH_HID_KeybdInit+0xa0>)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	4413      	add	r3, r2
 800c68e:	2200      	movs	r2, #0
 800c690:	701a      	strb	r2, [r3, #0]
    keybd_rx_report_buf[x] = 0U;
 800c692:	4a14      	ldr	r2, [pc, #80]	@ (800c6e4 <USBH_HID_KeybdInit+0xa4>)
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	4413      	add	r3, r2
 800c698:	2200      	movs	r2, #0
 800c69a:	701a      	strb	r2, [r3, #0]
  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	3301      	adds	r3, #1
 800c6a0:	60fb      	str	r3, [r7, #12]
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2b07      	cmp	r3, #7
 800c6a6:	d9ef      	bls.n	800c688 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	8b1b      	ldrh	r3, [r3, #24]
 800c6ac:	2b08      	cmp	r3, #8
 800c6ae:	d902      	bls.n	800c6b6 <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	2208      	movs	r2, #8
 800c6b4:	831a      	strh	r2, [r3, #24]
  }

  HID_Handle->pData = keybd_rx_report_buf;
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	4a0a      	ldr	r2, [pc, #40]	@ (800c6e4 <USBH_HID_KeybdInit+0xa4>)
 800c6ba:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	f103 0008 	add.w	r0, r3, #8
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c6c8:	2250      	movs	r2, #80	@ 0x50
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	f7ff feff 	bl	800c4ce <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800c6d0:	2300      	movs	r3, #0
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3710      	adds	r7, #16
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	20011910 	.word	0x20011910
 800c6e0:	20011928 	.word	0x20011928
 800c6e4:	20011920 	.word	0x20011920

0800c6e8 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 f80d 	bl	800c710 <USBH_HID_KeybdDecode>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d101      	bne.n	800c700 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 800c6fc:	4b03      	ldr	r3, [pc, #12]	@ (800c70c <USBH_HID_GetKeybdInfo+0x24>)
 800c6fe:	e000      	b.n	800c702 <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800c700:	2300      	movs	r3, #0
  }
}
 800c702:	4618      	mov	r0, r3
 800c704:	3708      	adds	r7, #8
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	20011910 	.word	0x20011910

0800c710 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c71e:	69db      	ldr	r3, [r3, #28]
 800c720:	60bb      	str	r3, [r7, #8]

  if ((HID_Handle->length == 0U) || (HID_Handle->fifo.buf == NULL))
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	8b1b      	ldrh	r3, [r3, #24]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d003      	beq.n	800c732 <USBH_HID_KeybdDecode+0x22>
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	689b      	ldr	r3, [r3, #8]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d101      	bne.n	800c736 <USBH_HID_KeybdDecode+0x26>
  {
    return USBH_FAIL;
 800c732:	2302      	movs	r3, #2
 800c734:	e066      	b.n	800c804 <USBH_HID_KeybdDecode+0xf4>
  }

  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	f103 0008 	add.w	r0, r3, #8
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	8b1b      	ldrh	r3, [r3, #24]
 800c740:	461a      	mov	r2, r3
 800c742:	4932      	ldr	r1, [pc, #200]	@ (800c80c <USBH_HID_KeybdDecode+0xfc>)
 800c744:	f7ff fedf 	bl	800c506 <USBH_HID_FifoRead>
 800c748:	4603      	mov	r3, r0
 800c74a:	461a      	mov	r2, r3
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	8b1b      	ldrh	r3, [r3, #24]
 800c750:	429a      	cmp	r2, r3
 800c752:	d156      	bne.n	800c802 <USBH_HID_KeybdDecode+0xf2>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 800c754:	2100      	movs	r1, #0
 800c756:	482e      	ldr	r0, [pc, #184]	@ (800c810 <USBH_HID_KeybdDecode+0x100>)
 800c758:	f000 f8e4 	bl	800c924 <HID_ReadItem>
 800c75c:	4603      	mov	r3, r0
 800c75e:	b2da      	uxtb	r2, r3
 800c760:	4b2c      	ldr	r3, [pc, #176]	@ (800c814 <USBH_HID_KeybdDecode+0x104>)
 800c762:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800c764:	2100      	movs	r1, #0
 800c766:	482c      	ldr	r0, [pc, #176]	@ (800c818 <USBH_HID_KeybdDecode+0x108>)
 800c768:	f000 f8dc 	bl	800c924 <HID_ReadItem>
 800c76c:	4603      	mov	r3, r0
 800c76e:	b2da      	uxtb	r2, r3
 800c770:	4b28      	ldr	r3, [pc, #160]	@ (800c814 <USBH_HID_KeybdDecode+0x104>)
 800c772:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 800c774:	2100      	movs	r1, #0
 800c776:	4829      	ldr	r0, [pc, #164]	@ (800c81c <USBH_HID_KeybdDecode+0x10c>)
 800c778:	f000 f8d4 	bl	800c924 <HID_ReadItem>
 800c77c:	4603      	mov	r3, r0
 800c77e:	b2da      	uxtb	r2, r3
 800c780:	4b24      	ldr	r3, [pc, #144]	@ (800c814 <USBH_HID_KeybdDecode+0x104>)
 800c782:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800c784:	2100      	movs	r1, #0
 800c786:	4826      	ldr	r0, [pc, #152]	@ (800c820 <USBH_HID_KeybdDecode+0x110>)
 800c788:	f000 f8cc 	bl	800c924 <HID_ReadItem>
 800c78c:	4603      	mov	r3, r0
 800c78e:	b2da      	uxtb	r2, r3
 800c790:	4b20      	ldr	r3, [pc, #128]	@ (800c814 <USBH_HID_KeybdDecode+0x104>)
 800c792:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800c794:	2100      	movs	r1, #0
 800c796:	4823      	ldr	r0, [pc, #140]	@ (800c824 <USBH_HID_KeybdDecode+0x114>)
 800c798:	f000 f8c4 	bl	800c924 <HID_ReadItem>
 800c79c:	4603      	mov	r3, r0
 800c79e:	b2da      	uxtb	r2, r3
 800c7a0:	4b1c      	ldr	r3, [pc, #112]	@ (800c814 <USBH_HID_KeybdDecode+0x104>)
 800c7a2:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 800c7a4:	2100      	movs	r1, #0
 800c7a6:	4820      	ldr	r0, [pc, #128]	@ (800c828 <USBH_HID_KeybdDecode+0x118>)
 800c7a8:	f000 f8bc 	bl	800c924 <HID_ReadItem>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	b2da      	uxtb	r2, r3
 800c7b0:	4b18      	ldr	r3, [pc, #96]	@ (800c814 <USBH_HID_KeybdDecode+0x104>)
 800c7b2:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 800c7b4:	2100      	movs	r1, #0
 800c7b6:	481d      	ldr	r0, [pc, #116]	@ (800c82c <USBH_HID_KeybdDecode+0x11c>)
 800c7b8:	f000 f8b4 	bl	800c924 <HID_ReadItem>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	b2da      	uxtb	r2, r3
 800c7c0:	4b14      	ldr	r3, [pc, #80]	@ (800c814 <USBH_HID_KeybdDecode+0x104>)
 800c7c2:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 800c7c4:	2100      	movs	r1, #0
 800c7c6:	481a      	ldr	r0, [pc, #104]	@ (800c830 <USBH_HID_KeybdDecode+0x120>)
 800c7c8:	f000 f8ac 	bl	800c924 <HID_ReadItem>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	b2da      	uxtb	r2, r3
 800c7d0:	4b10      	ldr	r3, [pc, #64]	@ (800c814 <USBH_HID_KeybdDecode+0x104>)
 800c7d2:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	73fb      	strb	r3, [r7, #15]
 800c7d8:	e00e      	b.n	800c7f8 <USBH_HID_KeybdDecode+0xe8>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800c7da:	7bfb      	ldrb	r3, [r7, #15]
 800c7dc:	4619      	mov	r1, r3
 800c7de:	4815      	ldr	r0, [pc, #84]	@ (800c834 <USBH_HID_KeybdDecode+0x124>)
 800c7e0:	f000 f8a0 	bl	800c924 <HID_ReadItem>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	7bfb      	ldrb	r3, [r7, #15]
 800c7e8:	b2d1      	uxtb	r1, r2
 800c7ea:	4a0a      	ldr	r2, [pc, #40]	@ (800c814 <USBH_HID_KeybdDecode+0x104>)
 800c7ec:	4413      	add	r3, r2
 800c7ee:	460a      	mov	r2, r1
 800c7f0:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800c7f2:	7bfb      	ldrb	r3, [r7, #15]
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	73fb      	strb	r3, [r7, #15]
 800c7f8:	7bfb      	ldrb	r3, [r7, #15]
 800c7fa:	2b05      	cmp	r3, #5
 800c7fc:	d9ed      	bls.n	800c7da <USBH_HID_KeybdDecode+0xca>
    }

    return USBH_OK;
 800c7fe:	2300      	movs	r3, #0
 800c800:	e000      	b.n	800c804 <USBH_HID_KeybdDecode+0xf4>
  }
  return   USBH_FAIL;
 800c802:	2302      	movs	r3, #2
}
 800c804:	4618      	mov	r0, r3
 800c806:	3710      	adds	r7, #16
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}
 800c80c:	20011928 	.word	0x20011928
 800c810:	08012aa0 	.word	0x08012aa0
 800c814:	20011910 	.word	0x20011910
 800c818:	08012ac0 	.word	0x08012ac0
 800c81c:	08012ae0 	.word	0x08012ae0
 800c820:	08012b00 	.word	0x08012b00
 800c824:	08012b20 	.word	0x08012b20
 800c828:	08012b40 	.word	0x08012b40
 800c82c:	08012b60 	.word	0x08012b60
 800c830:	08012b80 	.word	0x08012b80
 800c834:	08012ba0 	.word	0x08012ba0

0800c838 <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 800c838:	b480      	push	{r7}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	789b      	ldrb	r3, [r3, #2]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d103      	bne.n	800c850 <USBH_HID_GetASCIICode+0x18>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	799b      	ldrb	r3, [r3, #6]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d009      	beq.n	800c864 <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	7a5b      	ldrb	r3, [r3, #9]
 800c854:	461a      	mov	r2, r3
 800c856:	4b0b      	ldr	r3, [pc, #44]	@ (800c884 <USBH_HID_GetASCIICode+0x4c>)
 800c858:	5c9b      	ldrb	r3, [r3, r2]
 800c85a:	461a      	mov	r2, r3
 800c85c:	4b0a      	ldr	r3, [pc, #40]	@ (800c888 <USBH_HID_GetASCIICode+0x50>)
 800c85e:	5c9b      	ldrb	r3, [r3, r2]
 800c860:	73fb      	strb	r3, [r7, #15]
 800c862:	e008      	b.n	800c876 <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	7a5b      	ldrb	r3, [r3, #9]
 800c868:	461a      	mov	r2, r3
 800c86a:	4b06      	ldr	r3, [pc, #24]	@ (800c884 <USBH_HID_GetASCIICode+0x4c>)
 800c86c:	5c9b      	ldrb	r3, [r3, r2]
 800c86e:	461a      	mov	r2, r3
 800c870:	4b06      	ldr	r3, [pc, #24]	@ (800c88c <USBH_HID_GetASCIICode+0x54>)
 800c872:	5c9b      	ldrb	r3, [r3, r2]
 800c874:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 800c876:	7bfb      	ldrb	r3, [r7, #15]
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3714      	adds	r7, #20
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr
 800c884:	08012cc8 	.word	0x08012cc8
 800c888:	08012c44 	.word	0x08012c44
 800c88c:	08012bc0 	.word	0x08012bc0

0800c890 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c89e:	69db      	ldr	r3, [r3, #28]
 800c8a0:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 800c8a2:	4b1d      	ldr	r3, [pc, #116]	@ (800c918 <USBH_HID_MouseInit+0x88>)
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 800c8a8:	4b1b      	ldr	r3, [pc, #108]	@ (800c918 <USBH_HID_MouseInit+0x88>)
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 800c8ae:	4b1a      	ldr	r3, [pc, #104]	@ (800c918 <USBH_HID_MouseInit+0x88>)
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 800c8b4:	4b18      	ldr	r3, [pc, #96]	@ (800c918 <USBH_HID_MouseInit+0x88>)
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 800c8ba:	4b17      	ldr	r3, [pc, #92]	@ (800c918 <USBH_HID_MouseInit+0x88>)
 800c8bc:	2200      	movs	r2, #0
 800c8be:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	60fb      	str	r3, [r7, #12]
 800c8c4:	e00c      	b.n	800c8e0 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 800c8c6:	4a15      	ldr	r2, [pc, #84]	@ (800c91c <USBH_HID_MouseInit+0x8c>)
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 800c8d0:	4a13      	ldr	r2, [pc, #76]	@ (800c920 <USBH_HID_MouseInit+0x90>)
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	4413      	add	r3, r2
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	3301      	adds	r3, #1
 800c8de:	60fb      	str	r3, [r7, #12]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2b07      	cmp	r3, #7
 800c8e4:	d9ef      	bls.n	800c8c6 <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	8b1b      	ldrh	r3, [r3, #24]
 800c8ea:	2b08      	cmp	r3, #8
 800c8ec:	d902      	bls.n	800c8f4 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	2208      	movs	r2, #8
 800c8f2:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = mouse_rx_report_buf;
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	4a0a      	ldr	r2, [pc, #40]	@ (800c920 <USBH_HID_MouseInit+0x90>)
 800c8f8:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	f103 0008 	add.w	r0, r3, #8
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c906:	2250      	movs	r2, #80	@ 0x50
 800c908:	4619      	mov	r1, r3
 800c90a:	f7ff fde0 	bl	800c4ce <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800c90e:	2300      	movs	r3, #0
}
 800c910:	4618      	mov	r0, r3
 800c912:	3710      	adds	r7, #16
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}
 800c918:	20011930 	.word	0x20011930
 800c91c:	20011938 	.word	0x20011938
 800c920:	20011940 	.word	0x20011940

0800c924 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800c924:	b480      	push	{r7}
 800c926:	b089      	sub	sp, #36	@ 0x24
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	460b      	mov	r3, r1
 800c92e:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 800c930:	2300      	movs	r3, #0
 800c932:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 800c934:	2300      	movs	r3, #0
 800c936:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	7a1b      	ldrb	r3, [r3, #8]
 800c942:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, we may need to offset ri->data.*/
  if (ri->count > 0U)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	7a5b      	ldrb	r3, [r3, #9]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d01a      	beq.n	800c982 <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	7a5b      	ldrb	r3, [r3, #9]
 800c950:	78fa      	ldrb	r2, [r7, #3]
 800c952:	429a      	cmp	r2, r3
 800c954:	d301      	bcc.n	800c95a <HID_ReadItem+0x36>
    {
      return (0U);
 800c956:	2300      	movs	r3, #0
 800c958:	e078      	b.n	800ca4c <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800c95a:	78fb      	ldrb	r3, [r7, #3]
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	6852      	ldr	r2, [r2, #4]
 800c960:	fb02 f303 	mul.w	r3, r2, r3
 800c964:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800c966:	7cfb      	ldrb	r3, [r7, #19]
 800c968:	68fa      	ldr	r2, [r7, #12]
 800c96a:	4413      	add	r3, r2
 800c96c:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	08db      	lsrs	r3, r3, #3
 800c972:	697a      	ldr	r2, [r7, #20]
 800c974:	4413      	add	r3, r2
 800c976:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	f003 0307 	and.w	r3, r3, #7
 800c980:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800c982:	2300      	movs	r3, #0
 800c984:	61bb      	str	r3, [r7, #24]
 800c986:	e00a      	b.n	800c99e <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	461a      	mov	r2, r3
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	00db      	lsls	r3, r3, #3
 800c992:	fa02 f303 	lsl.w	r3, r2, r3
 800c996:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800c998:	69bb      	ldr	r3, [r7, #24]
 800c99a:	3301      	adds	r3, #1
 800c99c:	61bb      	str	r3, [r7, #24]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	f003 0307 	and.w	r3, r3, #7
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d004      	beq.n	800c9b4 <HID_ReadItem+0x90>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	08db      	lsrs	r3, r3, #3
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	e002      	b.n	800c9ba <HID_ReadItem+0x96>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	08db      	lsrs	r3, r3, #3
 800c9ba:	69ba      	ldr	r2, [r7, #24]
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d8e3      	bhi.n	800c988 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 800c9c0:	7cfb      	ldrb	r3, [r7, #19]
 800c9c2:	69fa      	ldr	r2, [r7, #28]
 800c9c4:	40da      	lsrs	r2, r3
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	f04f 31ff 	mov.w	r1, #4294967295
 800c9ce:	fa01 f303 	lsl.w	r3, r1, r3
 800c9d2:	43db      	mvns	r3, r3
 800c9d4:	4013      	ands	r3, r2
 800c9d6:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	68db      	ldr	r3, [r3, #12]
 800c9dc:	69fa      	ldr	r2, [r7, #28]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d304      	bcc.n	800c9ec <HID_ReadItem+0xc8>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	691b      	ldr	r3, [r3, #16]
 800c9e6:	69fa      	ldr	r2, [r7, #28]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d901      	bls.n	800c9f0 <HID_ReadItem+0xcc>
  {
    return (0U);
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	e02d      	b.n	800ca4c <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	7a9b      	ldrb	r3, [r3, #10]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d01e      	beq.n	800ca36 <HID_ReadItem+0x112>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	3b01      	subs	r3, #1
 800c9fe:	69fa      	ldr	r2, [r7, #28]
 800ca00:	fa22 f303 	lsr.w	r3, r2, r3
 800ca04:	f003 0301 	and.w	r3, r3, #1
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d014      	beq.n	800ca36 <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	2201      	movs	r2, #1
 800ca12:	fa02 f303 	lsl.w	r3, r2, r3
 800ca16:	425b      	negs	r3, r3
 800ca18:	69fa      	ldr	r2, [r7, #28]
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	69db      	ldr	r3, [r3, #28]
 800ca22:	2b01      	cmp	r3, #1
 800ca24:	d101      	bne.n	800ca2a <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	e010      	b.n	800ca4c <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	69db      	ldr	r3, [r3, #28]
 800ca2e:	68ba      	ldr	r2, [r7, #8]
 800ca30:	fb02 f303 	mul.w	r3, r2, r3
 800ca34:	e00a      	b.n	800ca4c <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	69db      	ldr	r3, [r3, #28]
 800ca3a:	2b01      	cmp	r3, #1
 800ca3c:	d101      	bne.n	800ca42 <HID_ReadItem+0x11e>
    {
      return (val);
 800ca3e:	69fb      	ldr	r3, [r7, #28]
 800ca40:	e004      	b.n	800ca4c <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	69db      	ldr	r3, [r3, #28]
 800ca46:	69fa      	ldr	r2, [r7, #28]
 800ca48:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3724      	adds	r7, #36	@ 0x24
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	60f8      	str	r0, [r7, #12]
 800ca60:	60b9      	str	r1, [r7, #8]
 800ca62:	4613      	mov	r3, r2
 800ca64:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d10a      	bne.n	800ca82 <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800ca6c:	481c      	ldr	r0, [pc, #112]	@ (800cae0 <USBH_Init+0x88>)
 800ca6e:	f002 fbb1 	bl	800f1d4 <iprintf>
 800ca72:	481c      	ldr	r0, [pc, #112]	@ (800cae4 <USBH_Init+0x8c>)
 800ca74:	f002 fbae 	bl	800f1d4 <iprintf>
 800ca78:	200a      	movs	r0, #10
 800ca7a:	f002 fbbd 	bl	800f1f8 <putchar>
    return USBH_FAIL;
 800ca7e:	2302      	movs	r3, #2
 800ca80:	e029      	b.n	800cad6 <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	79fa      	ldrb	r2, [r7, #7]
 800ca86:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2200      	movs	r2, #0
 800ca96:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ca9a:	68f8      	ldr	r0, [r7, #12]
 800ca9c:	f000 f824 	bl	800cae8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2200      	movs	r2, #0
 800caa4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2200      	movs	r2, #0
 800caac:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2200      	movs	r2, #0
 800cab4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2200      	movs	r2, #0
 800cabc:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d003      	beq.n	800cace <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	68ba      	ldr	r2, [r7, #8]
 800caca:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800cace:	68f8      	ldr	r0, [r7, #12]
 800cad0:	f001 ff82 	bl	800e9d8 <USBH_LL_Init>

  return USBH_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3710      	adds	r7, #16
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	080105ec 	.word	0x080105ec
 800cae4:	080105f4 	.word	0x080105f4

0800cae8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800caf0:	2300      	movs	r3, #0
 800caf2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800caf4:	2300      	movs	r3, #0
 800caf6:	60fb      	str	r3, [r7, #12]
 800caf8:	e009      	b.n	800cb0e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	33e0      	adds	r3, #224	@ 0xe0
 800cb00:	009b      	lsls	r3, r3, #2
 800cb02:	4413      	add	r3, r2
 800cb04:	2200      	movs	r2, #0
 800cb06:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	60fb      	str	r3, [r7, #12]
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	2b0f      	cmp	r3, #15
 800cb12:	d9f2      	bls.n	800cafa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cb14:	2300      	movs	r3, #0
 800cb16:	60fb      	str	r3, [r7, #12]
 800cb18:	e009      	b.n	800cb2e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	4413      	add	r3, r2
 800cb20:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cb24:	2200      	movs	r2, #0
 800cb26:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	60fb      	str	r3, [r7, #12]
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb34:	d3f1      	bcc.n	800cb1a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2201      	movs	r2, #1
 800cb46:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2201      	movs	r2, #1
 800cb54:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2240      	movs	r2, #64	@ 0x40
 800cb5a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2200      	movs	r2, #0
 800cb66:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2201      	movs	r2, #1
 800cb6e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2200      	movs	r2, #0
 800cb76:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	331c      	adds	r3, #28
 800cb86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f002 fcb1 	bl	800f4f4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cb98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb9c:	2100      	movs	r1, #0
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f002 fca8 	bl	800f4f4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800cbaa:	2212      	movs	r2, #18
 800cbac:	2100      	movs	r1, #0
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f002 fca0 	bl	800f4f4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800cbba:	223e      	movs	r2, #62	@ 0x3e
 800cbbc:	2100      	movs	r1, #0
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f002 fc98 	bl	800f4f4 <memset>

  return USBH_OK;
 800cbc4:	2300      	movs	r3, #0
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3710      	adds	r7, #16
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
	...

0800cbd0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b084      	sub	sp, #16
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d01f      	beq.n	800cc24 <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d10e      	bne.n	800cc0c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800cbf4:	1c59      	adds	r1, r3, #1
 800cbf6:	687a      	ldr	r2, [r7, #4]
 800cbf8:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	33de      	adds	r3, #222	@ 0xde
 800cc00:	6839      	ldr	r1, [r7, #0]
 800cc02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800cc06:	2300      	movs	r3, #0
 800cc08:	73fb      	strb	r3, [r7, #15]
 800cc0a:	e016      	b.n	800cc3a <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800cc0c:	480d      	ldr	r0, [pc, #52]	@ (800cc44 <USBH_RegisterClass+0x74>)
 800cc0e:	f002 fae1 	bl	800f1d4 <iprintf>
 800cc12:	480d      	ldr	r0, [pc, #52]	@ (800cc48 <USBH_RegisterClass+0x78>)
 800cc14:	f002 fade 	bl	800f1d4 <iprintf>
 800cc18:	200a      	movs	r0, #10
 800cc1a:	f002 faed 	bl	800f1f8 <putchar>
      status = USBH_FAIL;
 800cc1e:	2302      	movs	r3, #2
 800cc20:	73fb      	strb	r3, [r7, #15]
 800cc22:	e00a      	b.n	800cc3a <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800cc24:	4807      	ldr	r0, [pc, #28]	@ (800cc44 <USBH_RegisterClass+0x74>)
 800cc26:	f002 fad5 	bl	800f1d4 <iprintf>
 800cc2a:	4808      	ldr	r0, [pc, #32]	@ (800cc4c <USBH_RegisterClass+0x7c>)
 800cc2c:	f002 fad2 	bl	800f1d4 <iprintf>
 800cc30:	200a      	movs	r0, #10
 800cc32:	f002 fae1 	bl	800f1f8 <putchar>
    status = USBH_FAIL;
 800cc36:	2302      	movs	r3, #2
 800cc38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cc3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3710      	adds	r7, #16
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	080105ec 	.word	0x080105ec
 800cc48:	08010608 	.word	0x08010608
 800cc4c:	08010624 	.word	0x08010624

0800cc50 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	460b      	mov	r3, r1
 800cc5a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800cc66:	78fa      	ldrb	r2, [r7, #3]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d23c      	bcs.n	800cce6 <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	78fa      	ldrb	r2, [r7, #3]
 800cc70:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800cc74:	78fb      	ldrb	r3, [r7, #3]
 800cc76:	4619      	mov	r1, r3
 800cc78:	4823      	ldr	r0, [pc, #140]	@ (800cd08 <USBH_SelectInterface+0xb8>)
 800cc7a:	f002 faab 	bl	800f1d4 <iprintf>
 800cc7e:	200a      	movs	r0, #10
 800cc80:	f002 faba 	bl	800f1f8 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800cc84:	78fb      	ldrb	r3, [r7, #3]
 800cc86:	687a      	ldr	r2, [r7, #4]
 800cc88:	211a      	movs	r1, #26
 800cc8a:	fb01 f303 	mul.w	r3, r1, r3
 800cc8e:	4413      	add	r3, r2
 800cc90:	f203 3347 	addw	r3, r3, #839	@ 0x347
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	4619      	mov	r1, r3
 800cc98:	481c      	ldr	r0, [pc, #112]	@ (800cd0c <USBH_SelectInterface+0xbc>)
 800cc9a:	f002 fa9b 	bl	800f1d4 <iprintf>
 800cc9e:	200a      	movs	r0, #10
 800cca0:	f002 faaa 	bl	800f1f8 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800cca4:	78fb      	ldrb	r3, [r7, #3]
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	211a      	movs	r1, #26
 800ccaa:	fb01 f303 	mul.w	r3, r1, r3
 800ccae:	4413      	add	r3, r2
 800ccb0:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	4815      	ldr	r0, [pc, #84]	@ (800cd10 <USBH_SelectInterface+0xc0>)
 800ccba:	f002 fa8b 	bl	800f1d4 <iprintf>
 800ccbe:	200a      	movs	r0, #10
 800ccc0:	f002 fa9a 	bl	800f1f8 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800ccc4:	78fb      	ldrb	r3, [r7, #3]
 800ccc6:	687a      	ldr	r2, [r7, #4]
 800ccc8:	211a      	movs	r1, #26
 800ccca:	fb01 f303 	mul.w	r3, r1, r3
 800ccce:	4413      	add	r3, r2
 800ccd0:	f203 3349 	addw	r3, r3, #841	@ 0x349
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	480e      	ldr	r0, [pc, #56]	@ (800cd14 <USBH_SelectInterface+0xc4>)
 800ccda:	f002 fa7b 	bl	800f1d4 <iprintf>
 800ccde:	200a      	movs	r0, #10
 800cce0:	f002 fa8a 	bl	800f1f8 <putchar>
 800cce4:	e00a      	b.n	800ccfc <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800cce6:	480c      	ldr	r0, [pc, #48]	@ (800cd18 <USBH_SelectInterface+0xc8>)
 800cce8:	f002 fa74 	bl	800f1d4 <iprintf>
 800ccec:	480b      	ldr	r0, [pc, #44]	@ (800cd1c <USBH_SelectInterface+0xcc>)
 800ccee:	f002 fa71 	bl	800f1d4 <iprintf>
 800ccf2:	200a      	movs	r0, #10
 800ccf4:	f002 fa80 	bl	800f1f8 <putchar>
    status = USBH_FAIL;
 800ccf8:	2302      	movs	r3, #2
 800ccfa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ccfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3710      	adds	r7, #16
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	0801063c 	.word	0x0801063c
 800cd0c:	0801065c 	.word	0x0801065c
 800cd10:	0801066c 	.word	0x0801066c
 800cd14:	0801067c 	.word	0x0801067c
 800cd18:	080105ec 	.word	0x080105ec
 800cd1c:	0801068c 	.word	0x0801068c

0800cd20 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b087      	sub	sp, #28
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	4608      	mov	r0, r1
 800cd2a:	4611      	mov	r1, r2
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	4603      	mov	r3, r0
 800cd30:	70fb      	strb	r3, [r7, #3]
 800cd32:	460b      	mov	r3, r1
 800cd34:	70bb      	strb	r3, [r7, #2]
 800cd36:	4613      	mov	r3, r2
 800cd38:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800cd48:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cd4a:	e025      	b.n	800cd98 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800cd4c:	7dfb      	ldrb	r3, [r7, #23]
 800cd4e:	221a      	movs	r2, #26
 800cd50:	fb02 f303 	mul.w	r3, r2, r3
 800cd54:	3308      	adds	r3, #8
 800cd56:	68fa      	ldr	r2, [r7, #12]
 800cd58:	4413      	add	r3, r2
 800cd5a:	3302      	adds	r3, #2
 800cd5c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	795b      	ldrb	r3, [r3, #5]
 800cd62:	78fa      	ldrb	r2, [r7, #3]
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d002      	beq.n	800cd6e <USBH_FindInterface+0x4e>
 800cd68:	78fb      	ldrb	r3, [r7, #3]
 800cd6a:	2bff      	cmp	r3, #255	@ 0xff
 800cd6c:	d111      	bne.n	800cd92 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cd72:	78ba      	ldrb	r2, [r7, #2]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d002      	beq.n	800cd7e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cd78:	78bb      	ldrb	r3, [r7, #2]
 800cd7a:	2bff      	cmp	r3, #255	@ 0xff
 800cd7c:	d109      	bne.n	800cd92 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cd7e:	693b      	ldr	r3, [r7, #16]
 800cd80:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cd82:	787a      	ldrb	r2, [r7, #1]
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d002      	beq.n	800cd8e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cd88:	787b      	ldrb	r3, [r7, #1]
 800cd8a:	2bff      	cmp	r3, #255	@ 0xff
 800cd8c:	d101      	bne.n	800cd92 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800cd8e:	7dfb      	ldrb	r3, [r7, #23]
 800cd90:	e006      	b.n	800cda0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800cd92:	7dfb      	ldrb	r3, [r7, #23]
 800cd94:	3301      	adds	r3, #1
 800cd96:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cd98:	7dfb      	ldrb	r3, [r7, #23]
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	d9d6      	bls.n	800cd4c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800cd9e:	23ff      	movs	r3, #255	@ 0xff
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	371c      	adds	r7, #28
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr

0800cdac <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b082      	sub	sp, #8
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f001 fe4b 	bl	800ea50 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800cdba:	2101      	movs	r1, #1
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f001 ff64 	bl	800ec8a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800cdc2:	2300      	movs	r3, #0
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3708      	adds	r7, #8
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b088      	sub	sp, #32
 800cdd0:	af04      	add	r7, sp, #16
 800cdd2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cdd4:	2302      	movs	r3, #2
 800cdd6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800cde2:	b2db      	uxtb	r3, r3
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d102      	bne.n	800cdee <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2203      	movs	r2, #3
 800cdec:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	2b0b      	cmp	r3, #11
 800cdf6:	f200 8237 	bhi.w	800d268 <USBH_Process+0x49c>
 800cdfa:	a201      	add	r2, pc, #4	@ (adr r2, 800ce00 <USBH_Process+0x34>)
 800cdfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce00:	0800ce31 	.word	0x0800ce31
 800ce04:	0800ce6f 	.word	0x0800ce6f
 800ce08:	0800ceef 	.word	0x0800ceef
 800ce0c:	0800d1f7 	.word	0x0800d1f7
 800ce10:	0800d269 	.word	0x0800d269
 800ce14:	0800cf8f 	.word	0x0800cf8f
 800ce18:	0800d179 	.word	0x0800d179
 800ce1c:	0800cfdd 	.word	0x0800cfdd
 800ce20:	0800cffd 	.word	0x0800cffd
 800ce24:	0800d027 	.word	0x0800d027
 800ce28:	0800d083 	.word	0x0800d083
 800ce2c:	0800d1df 	.word	0x0800d1df
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800ce36:	b2db      	uxtb	r3, r3
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	f000 8217 	beq.w	800d26c <USBH_Process+0x4a0>
      {
        USBH_UsrLog("USB Device Connected");
 800ce3e:	48a4      	ldr	r0, [pc, #656]	@ (800d0d0 <USBH_Process+0x304>)
 800ce40:	f002 f9c8 	bl	800f1d4 <iprintf>
 800ce44:	200a      	movs	r0, #10
 800ce46:	f002 f9d7 	bl	800f1f8 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ce50:	20c8      	movs	r0, #200	@ 0xc8
 800ce52:	f001 ff64 	bl	800ed1e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f001 fe57 	bl	800eb0a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2200      	movs	r2, #0
 800ce68:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ce6c:	e1fe      	b.n	800d26c <USBH_Process+0x4a0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d10d      	bne.n	800ce94 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800ce78:	4896      	ldr	r0, [pc, #600]	@ (800d0d4 <USBH_Process+0x308>)
 800ce7a:	f002 f9ab 	bl	800f1d4 <iprintf>
 800ce7e:	200a      	movs	r0, #10
 800ce80:	f002 f9ba 	bl	800f1f8 <putchar>
        phost->device.RstCnt = 0U;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2200      	movs	r2, #0
 800ce88:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2202      	movs	r2, #2
 800ce90:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ce92:	e1f8      	b.n	800d286 <USBH_Process+0x4ba>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800ce9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ce9e:	d91a      	bls.n	800ced6 <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800cea6:	3301      	adds	r3, #1
 800cea8:	b2da      	uxtb	r2, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800ceb6:	2b03      	cmp	r3, #3
 800ceb8:	d909      	bls.n	800cece <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800ceba:	4887      	ldr	r0, [pc, #540]	@ (800d0d8 <USBH_Process+0x30c>)
 800cebc:	f002 f98a 	bl	800f1d4 <iprintf>
 800cec0:	200a      	movs	r0, #10
 800cec2:	f002 f999 	bl	800f1f8 <putchar>
            phost->gState = HOST_ABORT_STATE;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	220d      	movs	r2, #13
 800ceca:	701a      	strb	r2, [r3, #0]
      break;
 800cecc:	e1db      	b.n	800d286 <USBH_Process+0x4ba>
            phost->gState = HOST_IDLE;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2200      	movs	r2, #0
 800ced2:	701a      	strb	r2, [r3, #0]
      break;
 800ced4:	e1d7      	b.n	800d286 <USBH_Process+0x4ba>
          phost->Timeout += 10U;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800cedc:	f103 020a 	add.w	r2, r3, #10
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800cee6:	200a      	movs	r0, #10
 800cee8:	f001 ff19 	bl	800ed1e <USBH_Delay>
      break;
 800ceec:	e1cb      	b.n	800d286 <USBH_Process+0x4ba>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d005      	beq.n	800cf04 <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cefe:	2104      	movs	r1, #4
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800cf04:	2064      	movs	r0, #100	@ 0x64
 800cf06:	f001 ff0a 	bl	800ed1e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f001 fdd6 	bl	800eabc <USBH_LL_GetSpeed>
 800cf10:	4603      	mov	r3, r0
 800cf12:	461a      	mov	r2, r3
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2205      	movs	r2, #5
 800cf1e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800cf20:	2100      	movs	r1, #0
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f001 fbef 	bl	800e706 <USBH_AllocPipe>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	461a      	mov	r2, r3
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800cf30:	2180      	movs	r1, #128	@ 0x80
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f001 fbe7 	bl	800e706 <USBH_AllocPipe>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	7919      	ldrb	r1, [r3, #4]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cf50:	687a      	ldr	r2, [r7, #4]
 800cf52:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cf54:	9202      	str	r2, [sp, #8]
 800cf56:	2200      	movs	r2, #0
 800cf58:	9201      	str	r2, [sp, #4]
 800cf5a:	9300      	str	r3, [sp, #0]
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	2280      	movs	r2, #128	@ 0x80
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f001 fba1 	bl	800e6a8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	7959      	ldrb	r1, [r3, #5]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cf7a:	9202      	str	r2, [sp, #8]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	9201      	str	r2, [sp, #4]
 800cf80:	9300      	str	r3, [sp, #0]
 800cf82:	4603      	mov	r3, r0
 800cf84:	2200      	movs	r2, #0
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f001 fb8e 	bl	800e6a8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cf8c:	e17b      	b.n	800d286 <USBH_Process+0x4ba>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f000 f98c 	bl	800d2ac <USBH_HandleEnum>
 800cf94:	4603      	mov	r3, r0
 800cf96:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800cf98:	7bbb      	ldrb	r3, [r7, #14]
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	f040 8167 	bne.w	800d270 <USBH_Process+0x4a4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800cfa2:	484e      	ldr	r0, [pc, #312]	@ (800d0dc <USBH_Process+0x310>)
 800cfa4:	f002 f916 	bl	800f1d4 <iprintf>
 800cfa8:	200a      	movs	r0, #10
 800cfaa:	f002 f925 	bl	800f1f8 <putchar>

        phost->device.current_interface = 0U;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	d109      	bne.n	800cfd4 <USBH_Process+0x208>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800cfc0:	4847      	ldr	r0, [pc, #284]	@ (800d0e0 <USBH_Process+0x314>)
 800cfc2:	f002 f907 	bl	800f1d4 <iprintf>
 800cfc6:	200a      	movs	r0, #10
 800cfc8:	f002 f916 	bl	800f1f8 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2208      	movs	r2, #8
 800cfd0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cfd2:	e14d      	b.n	800d270 <USBH_Process+0x4a4>
          phost->gState = HOST_INPUT;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2207      	movs	r2, #7
 800cfd8:	701a      	strb	r2, [r3, #0]
      break;
 800cfda:	e149      	b.n	800d270 <USBH_Process+0x4a4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	f000 8146 	beq.w	800d274 <USBH_Process+0x4a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cfee:	2101      	movs	r1, #1
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2208      	movs	r2, #8
 800cff8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800cffa:	e13b      	b.n	800d274 <USBH_Process+0x4a8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800d002:	4619      	mov	r1, r3
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f000 fd98 	bl	800db3a <USBH_SetCfg>
 800d00a:	4603      	mov	r3, r0
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	f040 8133 	bne.w	800d278 <USBH_Process+0x4ac>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2209      	movs	r2, #9
 800d016:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800d018:	4832      	ldr	r0, [pc, #200]	@ (800d0e4 <USBH_Process+0x318>)
 800d01a:	f002 f8db 	bl	800f1d4 <iprintf>
 800d01e:	200a      	movs	r0, #10
 800d020:	f002 f8ea 	bl	800f1f8 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d024:	e128      	b.n	800d278 <USBH_Process+0x4ac>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800d02c:	f003 0320 	and.w	r3, r3, #32
 800d030:	2b00      	cmp	r3, #0
 800d032:	d022      	beq.n	800d07a <USBH_Process+0x2ae>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800d034:	2101      	movs	r1, #1
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 fda2 	bl	800db80 <USBH_SetFeature>
 800d03c:	4603      	mov	r3, r0
 800d03e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d040:	7bbb      	ldrb	r3, [r7, #14]
 800d042:	b2db      	uxtb	r3, r3
 800d044:	2b00      	cmp	r3, #0
 800d046:	d109      	bne.n	800d05c <USBH_Process+0x290>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800d048:	4827      	ldr	r0, [pc, #156]	@ (800d0e8 <USBH_Process+0x31c>)
 800d04a:	f002 f8c3 	bl	800f1d4 <iprintf>
 800d04e:	200a      	movs	r0, #10
 800d050:	f002 f8d2 	bl	800f1f8 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	220a      	movs	r2, #10
 800d058:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d05a:	e10f      	b.n	800d27c <USBH_Process+0x4b0>
        else if (status == USBH_NOT_SUPPORTED)
 800d05c:	7bbb      	ldrb	r3, [r7, #14]
 800d05e:	b2db      	uxtb	r3, r3
 800d060:	2b03      	cmp	r3, #3
 800d062:	f040 810b 	bne.w	800d27c <USBH_Process+0x4b0>
          USBH_UsrLog("Remote wakeup not supported by the device");
 800d066:	4821      	ldr	r0, [pc, #132]	@ (800d0ec <USBH_Process+0x320>)
 800d068:	f002 f8b4 	bl	800f1d4 <iprintf>
 800d06c:	200a      	movs	r0, #10
 800d06e:	f002 f8c3 	bl	800f1f8 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	220a      	movs	r2, #10
 800d076:	701a      	strb	r2, [r3, #0]
      break;
 800d078:	e100      	b.n	800d27c <USBH_Process+0x4b0>
        phost->gState = HOST_CHECK_CLASS;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	220a      	movs	r2, #10
 800d07e:	701a      	strb	r2, [r3, #0]
      break;
 800d080:	e0fc      	b.n	800d27c <USBH_Process+0x4b0>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d106      	bne.n	800d09a <USBH_Process+0x2ce>
      {
        USBH_UsrLog("No Class has been registered.");
 800d08c:	4818      	ldr	r0, [pc, #96]	@ (800d0f0 <USBH_Process+0x324>)
 800d08e:	f002 f8a1 	bl	800f1d4 <iprintf>
 800d092:	200a      	movs	r0, #10
 800d094:	f002 f8b0 	bl	800f1f8 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d098:	e0f5      	b.n	800d286 <USBH_Process+0x4ba>
        phost->pActiveClass = NULL;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2200      	movs	r2, #0
 800d09e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	73fb      	strb	r3, [r7, #15]
 800d0a6:	e028      	b.n	800d0fa <USBH_Process+0x32e>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d0a8:	7bfa      	ldrb	r2, [r7, #15]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	32de      	adds	r2, #222	@ 0xde
 800d0ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0b2:	791a      	ldrb	r2, [r3, #4]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d11a      	bne.n	800d0f4 <USBH_Process+0x328>
            phost->pActiveClass = phost->pClass[idx];
 800d0be:	7bfa      	ldrb	r2, [r7, #15]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	32de      	adds	r2, #222	@ 0xde
 800d0c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800d0ce:	e017      	b.n	800d100 <USBH_Process+0x334>
 800d0d0:	080106ac 	.word	0x080106ac
 800d0d4:	080106c4 	.word	0x080106c4
 800d0d8:	080106e0 	.word	0x080106e0
 800d0dc:	0801070c 	.word	0x0801070c
 800d0e0:	08010720 	.word	0x08010720
 800d0e4:	08010748 	.word	0x08010748
 800d0e8:	08010764 	.word	0x08010764
 800d0ec:	08010784 	.word	0x08010784
 800d0f0:	080107b0 	.word	0x080107b0
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d0f4:	7bfb      	ldrb	r3, [r7, #15]
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	73fb      	strb	r3, [r7, #15]
 800d0fa:	7bfb      	ldrb	r3, [r7, #15]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d0d3      	beq.n	800d0a8 <USBH_Process+0x2dc>
        if (phost->pActiveClass != NULL)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d106:	2b00      	cmp	r3, #0
 800d108:	d02c      	beq.n	800d164 <USBH_Process+0x398>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	4798      	blx	r3
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d114      	bne.n	800d146 <USBH_Process+0x37a>
            phost->gState = HOST_CLASS_REQUEST;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2206      	movs	r2, #6
 800d120:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4619      	mov	r1, r3
 800d12c:	4858      	ldr	r0, [pc, #352]	@ (800d290 <USBH_Process+0x4c4>)
 800d12e:	f002 f851 	bl	800f1d4 <iprintf>
 800d132:	200a      	movs	r0, #10
 800d134:	f002 f860 	bl	800f1f8 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d13e:	2103      	movs	r1, #3
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	4798      	blx	r3
      break;
 800d144:	e09f      	b.n	800d286 <USBH_Process+0x4ba>
            phost->gState = HOST_ABORT_STATE;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	220d      	movs	r2, #13
 800d14a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	4619      	mov	r1, r3
 800d156:	484f      	ldr	r0, [pc, #316]	@ (800d294 <USBH_Process+0x4c8>)
 800d158:	f002 f83c 	bl	800f1d4 <iprintf>
 800d15c:	200a      	movs	r0, #10
 800d15e:	f002 f84b 	bl	800f1f8 <putchar>
      break;
 800d162:	e090      	b.n	800d286 <USBH_Process+0x4ba>
          phost->gState = HOST_ABORT_STATE;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	220d      	movs	r2, #13
 800d168:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800d16a:	484b      	ldr	r0, [pc, #300]	@ (800d298 <USBH_Process+0x4cc>)
 800d16c:	f002 f832 	bl	800f1d4 <iprintf>
 800d170:	200a      	movs	r0, #10
 800d172:	f002 f841 	bl	800f1f8 <putchar>
      break;
 800d176:	e086      	b.n	800d286 <USBH_Process+0x4ba>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d020      	beq.n	800d1c4 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d188:	691b      	ldr	r3, [r3, #16]
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	4798      	blx	r3
 800d18e:	4603      	mov	r3, r0
 800d190:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d192:	7bbb      	ldrb	r3, [r7, #14]
 800d194:	b2db      	uxtb	r3, r3
 800d196:	2b00      	cmp	r3, #0
 800d198:	d103      	bne.n	800d1a2 <USBH_Process+0x3d6>
        {
          phost->gState = HOST_CLASS;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	220b      	movs	r2, #11
 800d19e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d1a0:	e06e      	b.n	800d280 <USBH_Process+0x4b4>
        else if (status == USBH_FAIL)
 800d1a2:	7bbb      	ldrb	r3, [r7, #14]
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	2b02      	cmp	r3, #2
 800d1a8:	d16a      	bne.n	800d280 <USBH_Process+0x4b4>
          phost->gState = HOST_ABORT_STATE;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	220d      	movs	r2, #13
 800d1ae:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800d1b0:	483a      	ldr	r0, [pc, #232]	@ (800d29c <USBH_Process+0x4d0>)
 800d1b2:	f002 f80f 	bl	800f1d4 <iprintf>
 800d1b6:	483a      	ldr	r0, [pc, #232]	@ (800d2a0 <USBH_Process+0x4d4>)
 800d1b8:	f002 f80c 	bl	800f1d4 <iprintf>
 800d1bc:	200a      	movs	r0, #10
 800d1be:	f002 f81b 	bl	800f1f8 <putchar>
      break;
 800d1c2:	e05d      	b.n	800d280 <USBH_Process+0x4b4>
        phost->gState = HOST_ABORT_STATE;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	220d      	movs	r2, #13
 800d1c8:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800d1ca:	4834      	ldr	r0, [pc, #208]	@ (800d29c <USBH_Process+0x4d0>)
 800d1cc:	f002 f802 	bl	800f1d4 <iprintf>
 800d1d0:	4834      	ldr	r0, [pc, #208]	@ (800d2a4 <USBH_Process+0x4d8>)
 800d1d2:	f001 ffff 	bl	800f1d4 <iprintf>
 800d1d6:	200a      	movs	r0, #10
 800d1d8:	f002 f80e 	bl	800f1f8 <putchar>
      break;
 800d1dc:	e050      	b.n	800d280 <USBH_Process+0x4b4>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d04d      	beq.n	800d284 <USBH_Process+0x4b8>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d1ee:	695b      	ldr	r3, [r3, #20]
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	4798      	blx	r3
      }
      break;
 800d1f4:	e046      	b.n	800d284 <USBH_Process+0x4b8>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f7ff fc72 	bl	800cae8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d009      	beq.n	800d222 <USBH_Process+0x456>
      {
        phost->pActiveClass->DeInit(phost);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d214:	68db      	ldr	r3, [r3, #12]
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2200      	movs	r2, #0
 800d21e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d005      	beq.n	800d238 <USBH_Process+0x46c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d232:	2105      	movs	r1, #5
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800d238:	481b      	ldr	r0, [pc, #108]	@ (800d2a8 <USBH_Process+0x4dc>)
 800d23a:	f001 ffcb 	bl	800f1d4 <iprintf>
 800d23e:	200a      	movs	r0, #10
 800d240:	f001 ffda 	bl	800f1f8 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d107      	bne.n	800d260 <USBH_Process+0x494>
      {
        phost->device.is_ReEnumerated = 0U;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2200      	movs	r2, #0
 800d254:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f7ff fda7 	bl	800cdac <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d25e:	e012      	b.n	800d286 <USBH_Process+0x4ba>
        (void)USBH_LL_Start(phost);
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f001 fbf5 	bl	800ea50 <USBH_LL_Start>
      break;
 800d266:	e00e      	b.n	800d286 <USBH_Process+0x4ba>

    case HOST_ABORT_STATE:
    default :
      break;
 800d268:	bf00      	nop
 800d26a:	e00c      	b.n	800d286 <USBH_Process+0x4ba>
      break;
 800d26c:	bf00      	nop
 800d26e:	e00a      	b.n	800d286 <USBH_Process+0x4ba>
      break;
 800d270:	bf00      	nop
 800d272:	e008      	b.n	800d286 <USBH_Process+0x4ba>
    break;
 800d274:	bf00      	nop
 800d276:	e006      	b.n	800d286 <USBH_Process+0x4ba>
      break;
 800d278:	bf00      	nop
 800d27a:	e004      	b.n	800d286 <USBH_Process+0x4ba>
      break;
 800d27c:	bf00      	nop
 800d27e:	e002      	b.n	800d286 <USBH_Process+0x4ba>
      break;
 800d280:	bf00      	nop
 800d282:	e000      	b.n	800d286 <USBH_Process+0x4ba>
      break;
 800d284:	bf00      	nop
  }
  return USBH_OK;
 800d286:	2300      	movs	r3, #0
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3710      	adds	r7, #16
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	080107d0 	.word	0x080107d0
 800d294:	080107e4 	.word	0x080107e4
 800d298:	08010804 	.word	0x08010804
 800d29c:	080105ec 	.word	0x080105ec
 800d2a0:	0801082c 	.word	0x0801082c
 800d2a4:	08010854 	.word	0x08010854
 800d2a8:	0801086c 	.word	0x0801086c

0800d2ac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b088      	sub	sp, #32
 800d2b0:	af04      	add	r7, sp, #16
 800d2b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	785b      	ldrb	r3, [r3, #1]
 800d2c0:	2b07      	cmp	r3, #7
 800d2c2:	f200 827b 	bhi.w	800d7bc <USBH_HandleEnum+0x510>
 800d2c6:	a201      	add	r2, pc, #4	@ (adr r2, 800d2cc <USBH_HandleEnum+0x20>)
 800d2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2cc:	0800d2ed 	.word	0x0800d2ed
 800d2d0:	0800d3c5 	.word	0x0800d3c5
 800d2d4:	0800d475 	.word	0x0800d475
 800d2d8:	0800d531 	.word	0x0800d531
 800d2dc:	0800d5b9 	.word	0x0800d5b9
 800d2e0:	0800d66b 	.word	0x0800d66b
 800d2e4:	0800d6df 	.word	0x0800d6df
 800d2e8:	0800d751 	.word	0x0800d751
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d2ec:	2108      	movs	r1, #8
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 fb16 	bl	800d920 <USBH_Get_DevDesc>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d2f8:	7bbb      	ldrb	r3, [r7, #14]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d12e      	bne.n	800d35c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2201      	movs	r2, #1
 800d30c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	7919      	ldrb	r1, [r3, #4]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d322:	9202      	str	r2, [sp, #8]
 800d324:	2200      	movs	r2, #0
 800d326:	9201      	str	r2, [sp, #4]
 800d328:	9300      	str	r3, [sp, #0]
 800d32a:	4603      	mov	r3, r0
 800d32c:	2280      	movs	r2, #128	@ 0x80
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f001 f9ba 	bl	800e6a8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	7959      	ldrb	r1, [r3, #5]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d344:	687a      	ldr	r2, [r7, #4]
 800d346:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d348:	9202      	str	r2, [sp, #8]
 800d34a:	2200      	movs	r2, #0
 800d34c:	9201      	str	r2, [sp, #4]
 800d34e:	9300      	str	r3, [sp, #0]
 800d350:	4603      	mov	r3, r0
 800d352:	2200      	movs	r2, #0
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f001 f9a7 	bl	800e6a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d35a:	e231      	b.n	800d7c0 <USBH_HandleEnum+0x514>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d35c:	7bbb      	ldrb	r3, [r7, #14]
 800d35e:	2b03      	cmp	r3, #3
 800d360:	f040 822e 	bne.w	800d7c0 <USBH_HandleEnum+0x514>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800d364:	48ae      	ldr	r0, [pc, #696]	@ (800d620 <USBH_HandleEnum+0x374>)
 800d366:	f001 ff35 	bl	800f1d4 <iprintf>
 800d36a:	48ae      	ldr	r0, [pc, #696]	@ (800d624 <USBH_HandleEnum+0x378>)
 800d36c:	f001 ff32 	bl	800f1d4 <iprintf>
 800d370:	200a      	movs	r0, #10
 800d372:	f001 ff41 	bl	800f1f8 <putchar>
        phost->device.EnumCnt++;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d37c:	3301      	adds	r3, #1
 800d37e:	b2da      	uxtb	r2, r3
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d38c:	2b03      	cmp	r3, #3
 800d38e:	d909      	bls.n	800d3a4 <USBH_HandleEnum+0xf8>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d390:	48a5      	ldr	r0, [pc, #660]	@ (800d628 <USBH_HandleEnum+0x37c>)
 800d392:	f001 ff1f 	bl	800f1d4 <iprintf>
 800d396:	200a      	movs	r0, #10
 800d398:	f001 ff2e 	bl	800f1f8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	220d      	movs	r2, #13
 800d3a0:	701a      	strb	r2, [r3, #0]
      break;
 800d3a2:	e20d      	b.n	800d7c0 <USBH_HandleEnum+0x514>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	795b      	ldrb	r3, [r3, #5]
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f001 f9cc 	bl	800e748 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	791b      	ldrb	r3, [r3, #4]
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f001 f9c6 	bl	800e748 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	701a      	strb	r2, [r3, #0]
      break;
 800d3c2:	e1fd      	b.n	800d7c0 <USBH_HandleEnum+0x514>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d3c4:	2112      	movs	r1, #18
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f000 faaa 	bl	800d920 <USBH_Get_DevDesc>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d3d0:	7bbb      	ldrb	r3, [r7, #14]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d117      	bne.n	800d406 <USBH_HandleEnum+0x15a>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f8b3 3330 	ldrh.w	r3, [r3, #816]	@ 0x330
 800d3dc:	4619      	mov	r1, r3
 800d3de:	4893      	ldr	r0, [pc, #588]	@ (800d62c <USBH_HandleEnum+0x380>)
 800d3e0:	f001 fef8 	bl	800f1d4 <iprintf>
 800d3e4:	200a      	movs	r0, #10
 800d3e6:	f001 ff07 	bl	800f1f8 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8b3 332e 	ldrh.w	r3, [r3, #814]	@ 0x32e
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	488f      	ldr	r0, [pc, #572]	@ (800d630 <USBH_HandleEnum+0x384>)
 800d3f4:	f001 feee 	bl	800f1d4 <iprintf>
 800d3f8:	200a      	movs	r0, #10
 800d3fa:	f001 fefd 	bl	800f1f8 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2202      	movs	r2, #2
 800d402:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d404:	e1de      	b.n	800d7c4 <USBH_HandleEnum+0x518>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d406:	7bbb      	ldrb	r3, [r7, #14]
 800d408:	2b03      	cmp	r3, #3
 800d40a:	f040 81db 	bne.w	800d7c4 <USBH_HandleEnum+0x518>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800d40e:	4884      	ldr	r0, [pc, #528]	@ (800d620 <USBH_HandleEnum+0x374>)
 800d410:	f001 fee0 	bl	800f1d4 <iprintf>
 800d414:	4887      	ldr	r0, [pc, #540]	@ (800d634 <USBH_HandleEnum+0x388>)
 800d416:	f001 fedd 	bl	800f1d4 <iprintf>
 800d41a:	200a      	movs	r0, #10
 800d41c:	f001 feec 	bl	800f1f8 <putchar>
        phost->device.EnumCnt++;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d426:	3301      	adds	r3, #1
 800d428:	b2da      	uxtb	r2, r3
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d436:	2b03      	cmp	r3, #3
 800d438:	d909      	bls.n	800d44e <USBH_HandleEnum+0x1a2>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d43a:	487b      	ldr	r0, [pc, #492]	@ (800d628 <USBH_HandleEnum+0x37c>)
 800d43c:	f001 feca 	bl	800f1d4 <iprintf>
 800d440:	200a      	movs	r0, #10
 800d442:	f001 fed9 	bl	800f1f8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	220d      	movs	r2, #13
 800d44a:	701a      	strb	r2, [r3, #0]
      break;
 800d44c:	e1ba      	b.n	800d7c4 <USBH_HandleEnum+0x518>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	795b      	ldrb	r3, [r3, #5]
 800d452:	4619      	mov	r1, r3
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f001 f977 	bl	800e748 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	791b      	ldrb	r3, [r3, #4]
 800d45e:	4619      	mov	r1, r3
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f001 f971 	bl	800e748 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2200      	movs	r2, #0
 800d46a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2200      	movs	r2, #0
 800d470:	701a      	strb	r2, [r3, #0]
      break;
 800d472:	e1a7      	b.n	800d7c4 <USBH_HandleEnum+0x518>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d474:	2101      	movs	r1, #1
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 fb3b 	bl	800daf2 <USBH_SetAddress>
 800d47c:	4603      	mov	r3, r0
 800d47e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d480:	7bbb      	ldrb	r3, [r7, #14]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d13a      	bne.n	800d4fc <USBH_HandleEnum+0x250>
      {
        USBH_Delay(2U);
 800d486:	2002      	movs	r0, #2
 800d488:	f001 fc49 	bl	800ed1e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2201      	movs	r2, #1
 800d490:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f893 331c 	ldrb.w	r3, [r3, #796]	@ 0x31c
 800d49a:	4619      	mov	r1, r3
 800d49c:	4866      	ldr	r0, [pc, #408]	@ (800d638 <USBH_HandleEnum+0x38c>)
 800d49e:	f001 fe99 	bl	800f1d4 <iprintf>
 800d4a2:	200a      	movs	r0, #10
 800d4a4:	f001 fea8 	bl	800f1f8 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2203      	movs	r2, #3
 800d4ac:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	7919      	ldrb	r1, [r3, #4]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d4c2:	9202      	str	r2, [sp, #8]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	9201      	str	r2, [sp, #4]
 800d4c8:	9300      	str	r3, [sp, #0]
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	2280      	movs	r2, #128	@ 0x80
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f001 f8ea 	bl	800e6a8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	7959      	ldrb	r1, [r3, #5]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d4e8:	9202      	str	r2, [sp, #8]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	9201      	str	r2, [sp, #4]
 800d4ee:	9300      	str	r3, [sp, #0]
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f001 f8d7 	bl	800e6a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d4fa:	e165      	b.n	800d7c8 <USBH_HandleEnum+0x51c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d4fc:	7bbb      	ldrb	r3, [r7, #14]
 800d4fe:	2b03      	cmp	r3, #3
 800d500:	f040 8162 	bne.w	800d7c8 <USBH_HandleEnum+0x51c>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800d504:	4846      	ldr	r0, [pc, #280]	@ (800d620 <USBH_HandleEnum+0x374>)
 800d506:	f001 fe65 	bl	800f1d4 <iprintf>
 800d50a:	484c      	ldr	r0, [pc, #304]	@ (800d63c <USBH_HandleEnum+0x390>)
 800d50c:	f001 fe62 	bl	800f1d4 <iprintf>
 800d510:	200a      	movs	r0, #10
 800d512:	f001 fe71 	bl	800f1f8 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d516:	4844      	ldr	r0, [pc, #272]	@ (800d628 <USBH_HandleEnum+0x37c>)
 800d518:	f001 fe5c 	bl	800f1d4 <iprintf>
 800d51c:	200a      	movs	r0, #10
 800d51e:	f001 fe6b 	bl	800f1f8 <putchar>
        phost->gState = HOST_ABORT_STATE;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	220d      	movs	r2, #13
 800d526:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2200      	movs	r2, #0
 800d52c:	705a      	strb	r2, [r3, #1]
      break;
 800d52e:	e14b      	b.n	800d7c8 <USBH_HandleEnum+0x51c>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d530:	2109      	movs	r1, #9
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 fa2e 	bl	800d994 <USBH_Get_CfgDesc>
 800d538:	4603      	mov	r3, r0
 800d53a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d53c:	7bbb      	ldrb	r3, [r7, #14]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d103      	bne.n	800d54a <USBH_HandleEnum+0x29e>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2204      	movs	r2, #4
 800d546:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d548:	e140      	b.n	800d7cc <USBH_HandleEnum+0x520>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d54a:	7bbb      	ldrb	r3, [r7, #14]
 800d54c:	2b03      	cmp	r3, #3
 800d54e:	f040 813d 	bne.w	800d7cc <USBH_HandleEnum+0x520>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800d552:	4833      	ldr	r0, [pc, #204]	@ (800d620 <USBH_HandleEnum+0x374>)
 800d554:	f001 fe3e 	bl	800f1d4 <iprintf>
 800d558:	4839      	ldr	r0, [pc, #228]	@ (800d640 <USBH_HandleEnum+0x394>)
 800d55a:	f001 fe3b 	bl	800f1d4 <iprintf>
 800d55e:	200a      	movs	r0, #10
 800d560:	f001 fe4a 	bl	800f1f8 <putchar>
        phost->device.EnumCnt++;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d56a:	3301      	adds	r3, #1
 800d56c:	b2da      	uxtb	r2, r3
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d57a:	2b03      	cmp	r3, #3
 800d57c:	d909      	bls.n	800d592 <USBH_HandleEnum+0x2e6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d57e:	482a      	ldr	r0, [pc, #168]	@ (800d628 <USBH_HandleEnum+0x37c>)
 800d580:	f001 fe28 	bl	800f1d4 <iprintf>
 800d584:	200a      	movs	r0, #10
 800d586:	f001 fe37 	bl	800f1f8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	220d      	movs	r2, #13
 800d58e:	701a      	strb	r2, [r3, #0]
      break;
 800d590:	e11c      	b.n	800d7cc <USBH_HandleEnum+0x520>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	795b      	ldrb	r3, [r3, #5]
 800d596:	4619      	mov	r1, r3
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f001 f8d5 	bl	800e748 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	791b      	ldrb	r3, [r3, #4]
 800d5a2:	4619      	mov	r1, r3
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f001 f8cf 	bl	800e748 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	701a      	strb	r2, [r3, #0]
      break;
 800d5b6:	e109      	b.n	800d7cc <USBH_HandleEnum+0x520>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800d5be:	4619      	mov	r1, r3
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f000 f9e7 	bl	800d994 <USBH_Get_CfgDesc>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d5ca:	7bbb      	ldrb	r3, [r7, #14]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d103      	bne.n	800d5d8 <USBH_HandleEnum+0x32c>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2205      	movs	r2, #5
 800d5d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d5d6:	e0fb      	b.n	800d7d0 <USBH_HandleEnum+0x524>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d5d8:	7bbb      	ldrb	r3, [r7, #14]
 800d5da:	2b03      	cmp	r3, #3
 800d5dc:	f040 80f8 	bne.w	800d7d0 <USBH_HandleEnum+0x524>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800d5e0:	480f      	ldr	r0, [pc, #60]	@ (800d620 <USBH_HandleEnum+0x374>)
 800d5e2:	f001 fdf7 	bl	800f1d4 <iprintf>
 800d5e6:	4816      	ldr	r0, [pc, #88]	@ (800d640 <USBH_HandleEnum+0x394>)
 800d5e8:	f001 fdf4 	bl	800f1d4 <iprintf>
 800d5ec:	200a      	movs	r0, #10
 800d5ee:	f001 fe03 	bl	800f1f8 <putchar>
        phost->device.EnumCnt++;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d5f8:	3301      	adds	r3, #1
 800d5fa:	b2da      	uxtb	r2, r3
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d608:	2b03      	cmp	r3, #3
 800d60a:	d91b      	bls.n	800d644 <USBH_HandleEnum+0x398>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d60c:	4806      	ldr	r0, [pc, #24]	@ (800d628 <USBH_HandleEnum+0x37c>)
 800d60e:	f001 fde1 	bl	800f1d4 <iprintf>
 800d612:	200a      	movs	r0, #10
 800d614:	f001 fdf0 	bl	800f1f8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	220d      	movs	r2, #13
 800d61c:	701a      	strb	r2, [r3, #0]
      break;
 800d61e:	e0d7      	b.n	800d7d0 <USBH_HandleEnum+0x524>
 800d620:	080105ec 	.word	0x080105ec
 800d624:	08010884 	.word	0x08010884
 800d628:	080108b8 	.word	0x080108b8
 800d62c:	080108f8 	.word	0x080108f8
 800d630:	08010904 	.word	0x08010904
 800d634:	08010910 	.word	0x08010910
 800d638:	0801094c 	.word	0x0801094c
 800d63c:	08010964 	.word	0x08010964
 800d640:	08010998 	.word	0x08010998
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	795b      	ldrb	r3, [r3, #5]
 800d648:	4619      	mov	r1, r3
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f001 f87c 	bl	800e748 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	791b      	ldrb	r3, [r3, #4]
 800d654:	4619      	mov	r1, r3
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f001 f876 	bl	800e748 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2200      	movs	r2, #0
 800d660:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2200      	movs	r2, #0
 800d666:	701a      	strb	r2, [r3, #0]
      break;
 800d668:	e0b2      	b.n	800d7d0 <USBH_HandleEnum+0x524>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800d670:	2b00      	cmp	r3, #0
 800d672:	d02a      	beq.n	800d6ca <USBH_HandleEnum+0x41e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d680:	23ff      	movs	r3, #255	@ 0xff
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f000 f9be 	bl	800da04 <USBH_Get_StringDesc>
 800d688:	4603      	mov	r3, r0
 800d68a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d68c:	7bbb      	ldrb	r3, [r7, #14]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d10d      	bne.n	800d6ae <USBH_HandleEnum+0x402>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d698:	4619      	mov	r1, r3
 800d69a:	4853      	ldr	r0, [pc, #332]	@ (800d7e8 <USBH_HandleEnum+0x53c>)
 800d69c:	f001 fd9a 	bl	800f1d4 <iprintf>
 800d6a0:	200a      	movs	r0, #10
 800d6a2:	f001 fda9 	bl	800f1f8 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2206      	movs	r2, #6
 800d6aa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d6ac:	e092      	b.n	800d7d4 <USBH_HandleEnum+0x528>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d6ae:	7bbb      	ldrb	r3, [r7, #14]
 800d6b0:	2b03      	cmp	r3, #3
 800d6b2:	f040 808f 	bne.w	800d7d4 <USBH_HandleEnum+0x528>
          USBH_UsrLog("Manufacturer : N/A");
 800d6b6:	484d      	ldr	r0, [pc, #308]	@ (800d7ec <USBH_HandleEnum+0x540>)
 800d6b8:	f001 fd8c 	bl	800f1d4 <iprintf>
 800d6bc:	200a      	movs	r0, #10
 800d6be:	f001 fd9b 	bl	800f1f8 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2206      	movs	r2, #6
 800d6c6:	705a      	strb	r2, [r3, #1]
      break;
 800d6c8:	e084      	b.n	800d7d4 <USBH_HandleEnum+0x528>
        USBH_UsrLog("Manufacturer : N/A");
 800d6ca:	4848      	ldr	r0, [pc, #288]	@ (800d7ec <USBH_HandleEnum+0x540>)
 800d6cc:	f001 fd82 	bl	800f1d4 <iprintf>
 800d6d0:	200a      	movs	r0, #10
 800d6d2:	f001 fd91 	bl	800f1f8 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2206      	movs	r2, #6
 800d6da:	705a      	strb	r2, [r3, #1]
      break;
 800d6dc:	e07a      	b.n	800d7d4 <USBH_HandleEnum+0x528>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d029      	beq.n	800d73c <USBH_HandleEnum+0x490>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d6f4:	23ff      	movs	r3, #255	@ 0xff
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f000 f984 	bl	800da04 <USBH_Get_StringDesc>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d700:	7bbb      	ldrb	r3, [r7, #14]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d10d      	bne.n	800d722 <USBH_HandleEnum+0x476>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d70c:	4619      	mov	r1, r3
 800d70e:	4838      	ldr	r0, [pc, #224]	@ (800d7f0 <USBH_HandleEnum+0x544>)
 800d710:	f001 fd60 	bl	800f1d4 <iprintf>
 800d714:	200a      	movs	r0, #10
 800d716:	f001 fd6f 	bl	800f1f8 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2207      	movs	r2, #7
 800d71e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d720:	e05a      	b.n	800d7d8 <USBH_HandleEnum+0x52c>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d722:	7bbb      	ldrb	r3, [r7, #14]
 800d724:	2b03      	cmp	r3, #3
 800d726:	d157      	bne.n	800d7d8 <USBH_HandleEnum+0x52c>
          USBH_UsrLog("Product : N/A");
 800d728:	4832      	ldr	r0, [pc, #200]	@ (800d7f4 <USBH_HandleEnum+0x548>)
 800d72a:	f001 fd53 	bl	800f1d4 <iprintf>
 800d72e:	200a      	movs	r0, #10
 800d730:	f001 fd62 	bl	800f1f8 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2207      	movs	r2, #7
 800d738:	705a      	strb	r2, [r3, #1]
      break;
 800d73a:	e04d      	b.n	800d7d8 <USBH_HandleEnum+0x52c>
        USBH_UsrLog("Product : N/A");
 800d73c:	482d      	ldr	r0, [pc, #180]	@ (800d7f4 <USBH_HandleEnum+0x548>)
 800d73e:	f001 fd49 	bl	800f1d4 <iprintf>
 800d742:	200a      	movs	r0, #10
 800d744:	f001 fd58 	bl	800f1f8 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2207      	movs	r2, #7
 800d74c:	705a      	strb	r2, [r3, #1]
      break;
 800d74e:	e043      	b.n	800d7d8 <USBH_HandleEnum+0x52c>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800d756:	2b00      	cmp	r3, #0
 800d758:	d027      	beq.n	800d7aa <USBH_HandleEnum+0x4fe>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d766:	23ff      	movs	r3, #255	@ 0xff
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f000 f94b 	bl	800da04 <USBH_Get_StringDesc>
 800d76e:	4603      	mov	r3, r0
 800d770:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d772:	7bbb      	ldrb	r3, [r7, #14]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d10c      	bne.n	800d792 <USBH_HandleEnum+0x4e6>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d77e:	4619      	mov	r1, r3
 800d780:	481d      	ldr	r0, [pc, #116]	@ (800d7f8 <USBH_HandleEnum+0x54c>)
 800d782:	f001 fd27 	bl	800f1d4 <iprintf>
 800d786:	200a      	movs	r0, #10
 800d788:	f001 fd36 	bl	800f1f8 <putchar>
          Status = USBH_OK;
 800d78c:	2300      	movs	r3, #0
 800d78e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d790:	e024      	b.n	800d7dc <USBH_HandleEnum+0x530>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d792:	7bbb      	ldrb	r3, [r7, #14]
 800d794:	2b03      	cmp	r3, #3
 800d796:	d121      	bne.n	800d7dc <USBH_HandleEnum+0x530>
          USBH_UsrLog("Serial Number : N/A");
 800d798:	4818      	ldr	r0, [pc, #96]	@ (800d7fc <USBH_HandleEnum+0x550>)
 800d79a:	f001 fd1b 	bl	800f1d4 <iprintf>
 800d79e:	200a      	movs	r0, #10
 800d7a0:	f001 fd2a 	bl	800f1f8 <putchar>
          Status = USBH_OK;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	73fb      	strb	r3, [r7, #15]
      break;
 800d7a8:	e018      	b.n	800d7dc <USBH_HandleEnum+0x530>
        USBH_UsrLog("Serial Number : N/A");
 800d7aa:	4814      	ldr	r0, [pc, #80]	@ (800d7fc <USBH_HandleEnum+0x550>)
 800d7ac:	f001 fd12 	bl	800f1d4 <iprintf>
 800d7b0:	200a      	movs	r0, #10
 800d7b2:	f001 fd21 	bl	800f1f8 <putchar>
        Status = USBH_OK;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	73fb      	strb	r3, [r7, #15]
      break;
 800d7ba:	e00f      	b.n	800d7dc <USBH_HandleEnum+0x530>

    default:
      break;
 800d7bc:	bf00      	nop
 800d7be:	e00e      	b.n	800d7de <USBH_HandleEnum+0x532>
      break;
 800d7c0:	bf00      	nop
 800d7c2:	e00c      	b.n	800d7de <USBH_HandleEnum+0x532>
      break;
 800d7c4:	bf00      	nop
 800d7c6:	e00a      	b.n	800d7de <USBH_HandleEnum+0x532>
      break;
 800d7c8:	bf00      	nop
 800d7ca:	e008      	b.n	800d7de <USBH_HandleEnum+0x532>
      break;
 800d7cc:	bf00      	nop
 800d7ce:	e006      	b.n	800d7de <USBH_HandleEnum+0x532>
      break;
 800d7d0:	bf00      	nop
 800d7d2:	e004      	b.n	800d7de <USBH_HandleEnum+0x532>
      break;
 800d7d4:	bf00      	nop
 800d7d6:	e002      	b.n	800d7de <USBH_HandleEnum+0x532>
      break;
 800d7d8:	bf00      	nop
 800d7da:	e000      	b.n	800d7de <USBH_HandleEnum+0x532>
      break;
 800d7dc:	bf00      	nop
  }
  return Status;
 800d7de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3710      	adds	r7, #16
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	080109dc 	.word	0x080109dc
 800d7ec:	080109f0 	.word	0x080109f0
 800d7f0:	08010a04 	.word	0x08010a04
 800d7f4:	08010a14 	.word	0x08010a14
 800d7f8:	08010a24 	.word	0x08010a24
 800d7fc:	08010a38 	.word	0x08010a38

0800d800 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d800:	b480      	push	{r7}
 800d802:	b083      	sub	sp, #12
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	683a      	ldr	r2, [r7, #0]
 800d80e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800d812:	bf00      	nop
 800d814:	370c      	adds	r7, #12
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr

0800d81e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d81e:	b580      	push	{r7, lr}
 800d820:	b082      	sub	sp, #8
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d82c:	1c5a      	adds	r2, r3, #1
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f000 f804 	bl	800d842 <USBH_HandleSof>
}
 800d83a:	bf00      	nop
 800d83c:	3708      	adds	r7, #8
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}

0800d842 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d842:	b580      	push	{r7, lr}
 800d844:	b082      	sub	sp, #8
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	2b0b      	cmp	r3, #11
 800d852:	d10a      	bne.n	800d86a <USBH_HandleSof+0x28>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d005      	beq.n	800d86a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d864:	699b      	ldr	r3, [r3, #24]
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	4798      	blx	r3
  }
}
 800d86a:	bf00      	nop
 800d86c:	3708      	adds	r7, #8
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}

0800d872 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d872:	b480      	push	{r7}
 800d874:	b083      	sub	sp, #12
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2201      	movs	r2, #1
 800d87e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800d882:	bf00      	nop
}
 800d884:	370c      	adds	r7, #12
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr

0800d88e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d88e:	b480      	push	{r7}
 800d890:	b083      	sub	sp, #12
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2200      	movs	r2, #0
 800d89a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800d89e:	bf00      	nop
}
 800d8a0:	370c      	adds	r7, #12
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a8:	4770      	bx	lr

0800d8aa <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d8aa:	b480      	push	{r7}
 800d8ac:	b083      	sub	sp, #12
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d8ca:	2300      	movs	r3, #0
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	370c      	adds	r7, #12
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr

0800d8d8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f001 f8c4 	bl	800ea86 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	791b      	ldrb	r3, [r3, #4]
 800d902:	4619      	mov	r1, r3
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f000 ff1f 	bl	800e748 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	795b      	ldrb	r3, [r3, #5]
 800d90e:	4619      	mov	r1, r3
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f000 ff19 	bl	800e748 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d916:	2300      	movs	r3, #0
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3708      	adds	r7, #8
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b086      	sub	sp, #24
 800d924:	af02      	add	r7, sp, #8
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	460b      	mov	r3, r1
 800d92a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800d92c:	887b      	ldrh	r3, [r7, #2]
 800d92e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d932:	d90a      	bls.n	800d94a <USBH_Get_DevDesc+0x2a>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
 800d934:	4815      	ldr	r0, [pc, #84]	@ (800d98c <USBH_Get_DevDesc+0x6c>)
 800d936:	f001 fc4d 	bl	800f1d4 <iprintf>
 800d93a:	4815      	ldr	r0, [pc, #84]	@ (800d990 <USBH_Get_DevDesc+0x70>)
 800d93c:	f001 fc4a 	bl	800f1d4 <iprintf>
 800d940:	200a      	movs	r0, #10
 800d942:	f001 fc59 	bl	800f1f8 <putchar>
    return USBH_NOT_SUPPORTED;
 800d946:	2303      	movs	r3, #3
 800d948:	e01b      	b.n	800d982 <USBH_Get_DevDesc+0x62>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d950:	887b      	ldrh	r3, [r7, #2]
 800d952:	9300      	str	r3, [sp, #0]
 800d954:	4613      	mov	r3, r2
 800d956:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d95a:	2100      	movs	r1, #0
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f000 f893 	bl	800da88 <USBH_GetDescriptor>
 800d962:	4603      	mov	r3, r0
 800d964:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800d966:	7bfb      	ldrb	r3, [r7, #15]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d109      	bne.n	800d980 <USBH_Get_DevDesc+0x60>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d972:	887a      	ldrh	r2, [r7, #2]
 800d974:	4619      	mov	r1, r3
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 f94a 	bl	800dc10 <USBH_ParseDevDesc>
 800d97c:	4603      	mov	r3, r0
 800d97e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d980:	7bfb      	ldrb	r3, [r7, #15]
}
 800d982:	4618      	mov	r0, r3
 800d984:	3710      	adds	r7, #16
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	08010a4c 	.word	0x08010a4c
 800d990:	08010a54 	.word	0x08010a54

0800d994 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b086      	sub	sp, #24
 800d998:	af02      	add	r7, sp, #8
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	460b      	mov	r3, r1
 800d99e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	331c      	adds	r3, #28
 800d9a4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800d9a6:	887b      	ldrh	r3, [r7, #2]
 800d9a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d9ac:	d90a      	bls.n	800d9c4 <USBH_Get_CfgDesc+0x30>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
 800d9ae:	4813      	ldr	r0, [pc, #76]	@ (800d9fc <USBH_Get_CfgDesc+0x68>)
 800d9b0:	f001 fc10 	bl	800f1d4 <iprintf>
 800d9b4:	4812      	ldr	r0, [pc, #72]	@ (800da00 <USBH_Get_CfgDesc+0x6c>)
 800d9b6:	f001 fc0d 	bl	800f1d4 <iprintf>
 800d9ba:	200a      	movs	r0, #10
 800d9bc:	f001 fc1c 	bl	800f1f8 <putchar>
    return USBH_NOT_SUPPORTED;
 800d9c0:	2303      	movs	r3, #3
 800d9c2:	e016      	b.n	800d9f2 <USBH_Get_CfgDesc+0x5e>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d9c4:	887b      	ldrh	r3, [r7, #2]
 800d9c6:	9300      	str	r3, [sp, #0]
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d9ce:	2100      	movs	r1, #0
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f000 f859 	bl	800da88 <USBH_GetDescriptor>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800d9da:	7bfb      	ldrb	r3, [r7, #15]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d107      	bne.n	800d9f0 <USBH_Get_CfgDesc+0x5c>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800d9e0:	887b      	ldrh	r3, [r7, #2]
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	68b9      	ldr	r1, [r7, #8]
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f000 f9c2 	bl	800dd70 <USBH_ParseCfgDesc>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3710      	adds	r7, #16
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	08010a4c 	.word	0x08010a4c
 800da00:	08010a98 	.word	0x08010a98

0800da04 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b088      	sub	sp, #32
 800da08:	af02      	add	r7, sp, #8
 800da0a:	60f8      	str	r0, [r7, #12]
 800da0c:	607a      	str	r2, [r7, #4]
 800da0e:	461a      	mov	r2, r3
 800da10:	460b      	mov	r3, r1
 800da12:	72fb      	strb	r3, [r7, #11]
 800da14:	4613      	mov	r3, r2
 800da16:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800da18:	893b      	ldrh	r3, [r7, #8]
 800da1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da1e:	d802      	bhi.n	800da26 <USBH_Get_StringDesc+0x22>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d10a      	bne.n	800da3c <USBH_Get_StringDesc+0x38>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
 800da26:	4816      	ldr	r0, [pc, #88]	@ (800da80 <USBH_Get_StringDesc+0x7c>)
 800da28:	f001 fbd4 	bl	800f1d4 <iprintf>
 800da2c:	4815      	ldr	r0, [pc, #84]	@ (800da84 <USBH_Get_StringDesc+0x80>)
 800da2e:	f001 fbd1 	bl	800f1d4 <iprintf>
 800da32:	200a      	movs	r0, #10
 800da34:	f001 fbe0 	bl	800f1f8 <putchar>
    return USBH_NOT_SUPPORTED;
 800da38:	2303      	movs	r3, #3
 800da3a:	e01c      	b.n	800da76 <USBH_Get_StringDesc+0x72>
  }

  status = USBH_GetDescriptor(phost,
 800da3c:	7afb      	ldrb	r3, [r7, #11]
 800da3e:	b29b      	uxth	r3, r3
 800da40:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800da44:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800da4c:	893b      	ldrh	r3, [r7, #8]
 800da4e:	9300      	str	r3, [sp, #0]
 800da50:	460b      	mov	r3, r1
 800da52:	2100      	movs	r1, #0
 800da54:	68f8      	ldr	r0, [r7, #12]
 800da56:	f000 f817 	bl	800da88 <USBH_GetDescriptor>
 800da5a:	4603      	mov	r3, r0
 800da5c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800da5e:	7dfb      	ldrb	r3, [r7, #23]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d107      	bne.n	800da74 <USBH_Get_StringDesc+0x70>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800da6a:	893a      	ldrh	r2, [r7, #8]
 800da6c:	6879      	ldr	r1, [r7, #4]
 800da6e:	4618      	mov	r0, r3
 800da70:	f000 fb92 	bl	800e198 <USBH_ParseStringDesc>
  }

  return status;
 800da74:	7dfb      	ldrb	r3, [r7, #23]
}
 800da76:	4618      	mov	r0, r3
 800da78:	3718      	adds	r7, #24
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}
 800da7e:	bf00      	nop
 800da80:	08010a4c 	.word	0x08010a4c
 800da84:	08010ae4 	.word	0x08010ae4

0800da88 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b084      	sub	sp, #16
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	607b      	str	r3, [r7, #4]
 800da92:	460b      	mov	r3, r1
 800da94:	72fb      	strb	r3, [r7, #11]
 800da96:	4613      	mov	r3, r2
 800da98:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	789b      	ldrb	r3, [r3, #2]
 800da9e:	2b01      	cmp	r3, #1
 800daa0:	d11c      	bne.n	800dadc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800daa2:	7afb      	ldrb	r3, [r7, #11]
 800daa4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800daa8:	b2da      	uxtb	r2, r3
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	2206      	movs	r2, #6
 800dab2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	893a      	ldrh	r2, [r7, #8]
 800dab8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800daba:	893b      	ldrh	r3, [r7, #8]
 800dabc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dac0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dac4:	d104      	bne.n	800dad0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	f240 4209 	movw	r2, #1033	@ 0x409
 800dacc:	829a      	strh	r2, [r3, #20]
 800dace:	e002      	b.n	800dad6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	2200      	movs	r2, #0
 800dad4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	8b3a      	ldrh	r2, [r7, #24]
 800dada:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800dadc:	8b3b      	ldrh	r3, [r7, #24]
 800dade:	461a      	mov	r2, r3
 800dae0:	6879      	ldr	r1, [r7, #4]
 800dae2:	68f8      	ldr	r0, [r7, #12]
 800dae4:	f000 fba5 	bl	800e232 <USBH_CtlReq>
 800dae8:	4603      	mov	r3, r0
}
 800daea:	4618      	mov	r0, r3
 800daec:	3710      	adds	r7, #16
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}

0800daf2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800daf2:	b580      	push	{r7, lr}
 800daf4:	b082      	sub	sp, #8
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	6078      	str	r0, [r7, #4]
 800dafa:	460b      	mov	r3, r1
 800dafc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	789b      	ldrb	r3, [r3, #2]
 800db02:	2b01      	cmp	r3, #1
 800db04:	d10f      	bne.n	800db26 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2200      	movs	r2, #0
 800db0a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2205      	movs	r2, #5
 800db10:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800db12:	78fb      	ldrb	r3, [r7, #3]
 800db14:	b29a      	uxth	r2, r3
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2200      	movs	r2, #0
 800db1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2200      	movs	r2, #0
 800db24:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800db26:	2200      	movs	r2, #0
 800db28:	2100      	movs	r1, #0
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f000 fb81 	bl	800e232 <USBH_CtlReq>
 800db30:	4603      	mov	r3, r0
}
 800db32:	4618      	mov	r0, r3
 800db34:	3708      	adds	r7, #8
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}

0800db3a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800db3a:	b580      	push	{r7, lr}
 800db3c:	b082      	sub	sp, #8
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]
 800db42:	460b      	mov	r3, r1
 800db44:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	789b      	ldrb	r3, [r3, #2]
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	d10e      	bne.n	800db6c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2200      	movs	r2, #0
 800db52:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2209      	movs	r2, #9
 800db58:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	887a      	ldrh	r2, [r7, #2]
 800db5e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2200      	movs	r2, #0
 800db6a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800db6c:	2200      	movs	r2, #0
 800db6e:	2100      	movs	r1, #0
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f000 fb5e 	bl	800e232 <USBH_CtlReq>
 800db76:	4603      	mov	r3, r0
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3708      	adds	r7, #8
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}

0800db80 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b082      	sub	sp, #8
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	460b      	mov	r3, r1
 800db8a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	789b      	ldrb	r3, [r3, #2]
 800db90:	2b01      	cmp	r3, #1
 800db92:	d10f      	bne.n	800dbb4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2200      	movs	r2, #0
 800db98:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2203      	movs	r2, #3
 800db9e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800dba0:	78fb      	ldrb	r3, [r7, #3]
 800dba2:	b29a      	uxth	r2, r3
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	2100      	movs	r1, #0
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f000 fb3a 	bl	800e232 <USBH_CtlReq>
 800dbbe:	4603      	mov	r3, r0
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3708      	adds	r7, #8
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b082      	sub	sp, #8
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	789b      	ldrb	r3, [r3, #2]
 800dbd8:	2b01      	cmp	r3, #1
 800dbda:	d10f      	bne.n	800dbfc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2202      	movs	r2, #2
 800dbe0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2201      	movs	r2, #1
 800dbe6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2200      	movs	r2, #0
 800dbec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800dbee:	78fb      	ldrb	r3, [r7, #3]
 800dbf0:	b29a      	uxth	r2, r3
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	2100      	movs	r1, #0
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f000 fb16 	bl	800e232 <USBH_CtlReq>
 800dc06:	4603      	mov	r3, r0
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3708      	adds	r7, #8
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800dc10:	b480      	push	{r7}
 800dc12:	b087      	sub	sp, #28
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	60b9      	str	r1, [r7, #8]
 800dc1a:	4613      	mov	r3, r2
 800dc1c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800dc24:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800dc26:	2300      	movs	r3, #0
 800dc28:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d101      	bne.n	800dc34 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800dc30:	2302      	movs	r3, #2
 800dc32:	e094      	b.n	800dd5e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	781a      	ldrb	r2, [r3, #0]
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	785a      	ldrb	r2, [r3, #1]
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	3302      	adds	r3, #2
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	3303      	adds	r3, #3
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	021b      	lsls	r3, r3, #8
 800dc54:	b29b      	uxth	r3, r3
 800dc56:	4313      	orrs	r3, r2
 800dc58:	b29a      	uxth	r2, r3
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	791a      	ldrb	r2, [r3, #4]
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	795a      	ldrb	r2, [r3, #5]
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	799a      	ldrb	r2, [r3, #6]
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	79da      	ldrb	r2, [r3, #7]
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d004      	beq.n	800dc92 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d11b      	bne.n	800dcca <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	79db      	ldrb	r3, [r3, #7]
 800dc96:	2b20      	cmp	r3, #32
 800dc98:	dc0f      	bgt.n	800dcba <USBH_ParseDevDesc+0xaa>
 800dc9a:	2b08      	cmp	r3, #8
 800dc9c:	db0f      	blt.n	800dcbe <USBH_ParseDevDesc+0xae>
 800dc9e:	3b08      	subs	r3, #8
 800dca0:	4a32      	ldr	r2, [pc, #200]	@ (800dd6c <USBH_ParseDevDesc+0x15c>)
 800dca2:	fa22 f303 	lsr.w	r3, r2, r3
 800dca6:	f003 0301 	and.w	r3, r3, #1
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	bf14      	ite	ne
 800dcae:	2301      	movne	r3, #1
 800dcb0:	2300      	moveq	r3, #0
 800dcb2:	b2db      	uxtb	r3, r3
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d106      	bne.n	800dcc6 <USBH_ParseDevDesc+0xb6>
 800dcb8:	e001      	b.n	800dcbe <USBH_ParseDevDesc+0xae>
 800dcba:	2b40      	cmp	r3, #64	@ 0x40
 800dcbc:	d003      	beq.n	800dcc6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	2208      	movs	r2, #8
 800dcc2:	71da      	strb	r2, [r3, #7]
        break;
 800dcc4:	e000      	b.n	800dcc8 <USBH_ParseDevDesc+0xb8>
        break;
 800dcc6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800dcc8:	e00e      	b.n	800dce8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dcd0:	2b02      	cmp	r3, #2
 800dcd2:	d107      	bne.n	800dce4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	79db      	ldrb	r3, [r3, #7]
 800dcd8:	2b08      	cmp	r3, #8
 800dcda:	d005      	beq.n	800dce8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	2208      	movs	r2, #8
 800dce0:	71da      	strb	r2, [r3, #7]
 800dce2:	e001      	b.n	800dce8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800dce4:	2303      	movs	r3, #3
 800dce6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800dce8:	88fb      	ldrh	r3, [r7, #6]
 800dcea:	2b08      	cmp	r3, #8
 800dcec:	d936      	bls.n	800dd5c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	3308      	adds	r3, #8
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	3309      	adds	r3, #9
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	021b      	lsls	r3, r3, #8
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	4313      	orrs	r3, r2
 800dd02:	b29a      	uxth	r2, r3
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	330a      	adds	r3, #10
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	461a      	mov	r2, r3
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	330b      	adds	r3, #11
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	021b      	lsls	r3, r3, #8
 800dd18:	b29b      	uxth	r3, r3
 800dd1a:	4313      	orrs	r3, r2
 800dd1c:	b29a      	uxth	r2, r3
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	330c      	adds	r3, #12
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	461a      	mov	r2, r3
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	330d      	adds	r3, #13
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	021b      	lsls	r3, r3, #8
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	4313      	orrs	r3, r2
 800dd36:	b29a      	uxth	r2, r3
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	7b9a      	ldrb	r2, [r3, #14]
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	7bda      	ldrb	r2, [r3, #15]
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	7c1a      	ldrb	r2, [r3, #16]
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	7c5a      	ldrb	r2, [r3, #17]
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800dd5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	371c      	adds	r7, #28
 800dd62:	46bd      	mov	sp, r7
 800dd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd68:	4770      	bx	lr
 800dd6a:	bf00      	nop
 800dd6c:	01000101 	.word	0x01000101

0800dd70 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b08c      	sub	sp, #48	@ 0x30
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	60f8      	str	r0, [r7, #12]
 800dd78:	60b9      	str	r1, [r7, #8]
 800dd7a:	4613      	mov	r3, r2
 800dd7c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800dd84:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800dd86:	2300      	movs	r3, #0
 800dd88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800dd92:	2300      	movs	r3, #0
 800dd94:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d101      	bne.n	800dda2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800dd9e:	2302      	movs	r3, #2
 800dda0:	e0da      	b.n	800df58 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800dda6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	2b09      	cmp	r3, #9
 800ddac:	d002      	beq.n	800ddb4 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800ddae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddb0:	2209      	movs	r2, #9
 800ddb2:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	781a      	ldrb	r2, [r3, #0]
 800ddb8:	6a3b      	ldr	r3, [r7, #32]
 800ddba:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	785a      	ldrb	r2, [r3, #1]
 800ddc0:	6a3b      	ldr	r3, [r7, #32]
 800ddc2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	3302      	adds	r3, #2
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	461a      	mov	r2, r3
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	3303      	adds	r3, #3
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	021b      	lsls	r3, r3, #8
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	4313      	orrs	r3, r2
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ddde:	bf28      	it	cs
 800dde0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800dde4:	b29a      	uxth	r2, r3
 800dde6:	6a3b      	ldr	r3, [r7, #32]
 800dde8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	791a      	ldrb	r2, [r3, #4]
 800ddee:	6a3b      	ldr	r3, [r7, #32]
 800ddf0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	795a      	ldrb	r2, [r3, #5]
 800ddf6:	6a3b      	ldr	r3, [r7, #32]
 800ddf8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	799a      	ldrb	r2, [r3, #6]
 800ddfe:	6a3b      	ldr	r3, [r7, #32]
 800de00:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	79da      	ldrb	r2, [r3, #7]
 800de06:	6a3b      	ldr	r3, [r7, #32]
 800de08:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	7a1a      	ldrb	r2, [r3, #8]
 800de0e:	6a3b      	ldr	r3, [r7, #32]
 800de10:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800de12:	88fb      	ldrh	r3, [r7, #6]
 800de14:	2b09      	cmp	r3, #9
 800de16:	f240 809d 	bls.w	800df54 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800de1a:	2309      	movs	r3, #9
 800de1c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800de1e:	2300      	movs	r3, #0
 800de20:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800de22:	e081      	b.n	800df28 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800de24:	f107 0316 	add.w	r3, r7, #22
 800de28:	4619      	mov	r1, r3
 800de2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de2c:	f000 f9e7 	bl	800e1fe <USBH_GetNextDesc>
 800de30:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800de32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de34:	785b      	ldrb	r3, [r3, #1]
 800de36:	2b04      	cmp	r3, #4
 800de38:	d176      	bne.n	800df28 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800de3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	2b09      	cmp	r3, #9
 800de40:	d002      	beq.n	800de48 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800de42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de44:	2209      	movs	r2, #9
 800de46:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800de48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800de4c:	221a      	movs	r2, #26
 800de4e:	fb02 f303 	mul.w	r3, r2, r3
 800de52:	3308      	adds	r3, #8
 800de54:	6a3a      	ldr	r2, [r7, #32]
 800de56:	4413      	add	r3, r2
 800de58:	3302      	adds	r3, #2
 800de5a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800de5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800de5e:	69f8      	ldr	r0, [r7, #28]
 800de60:	f000 f87e 	bl	800df60 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800de64:	2300      	movs	r3, #0
 800de66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800de6a:	2300      	movs	r3, #0
 800de6c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800de6e:	e043      	b.n	800def8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800de70:	f107 0316 	add.w	r3, r7, #22
 800de74:	4619      	mov	r1, r3
 800de76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de78:	f000 f9c1 	bl	800e1fe <USBH_GetNextDesc>
 800de7c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800de7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de80:	785b      	ldrb	r3, [r3, #1]
 800de82:	2b05      	cmp	r3, #5
 800de84:	d138      	bne.n	800def8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800de86:	69fb      	ldr	r3, [r7, #28]
 800de88:	795b      	ldrb	r3, [r3, #5]
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	d113      	bne.n	800deb6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800de8e:	69fb      	ldr	r3, [r7, #28]
 800de90:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800de92:	2b02      	cmp	r3, #2
 800de94:	d003      	beq.n	800de9e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800de96:	69fb      	ldr	r3, [r7, #28]
 800de98:	799b      	ldrb	r3, [r3, #6]
 800de9a:	2b03      	cmp	r3, #3
 800de9c:	d10b      	bne.n	800deb6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800de9e:	69fb      	ldr	r3, [r7, #28]
 800dea0:	79db      	ldrb	r3, [r3, #7]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d10b      	bne.n	800debe <USBH_ParseCfgDesc+0x14e>
 800dea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	2b09      	cmp	r3, #9
 800deac:	d007      	beq.n	800debe <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800deae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deb0:	2209      	movs	r2, #9
 800deb2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800deb4:	e003      	b.n	800debe <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800deb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deb8:	2207      	movs	r2, #7
 800deba:	701a      	strb	r2, [r3, #0]
 800debc:	e000      	b.n	800dec0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800debe:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800dec0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dec4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800dec8:	3201      	adds	r2, #1
 800deca:	00d2      	lsls	r2, r2, #3
 800decc:	211a      	movs	r1, #26
 800dece:	fb01 f303 	mul.w	r3, r1, r3
 800ded2:	4413      	add	r3, r2
 800ded4:	3308      	adds	r3, #8
 800ded6:	6a3a      	ldr	r2, [r7, #32]
 800ded8:	4413      	add	r3, r2
 800deda:	3304      	adds	r3, #4
 800dedc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800dede:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dee0:	69b9      	ldr	r1, [r7, #24]
 800dee2:	68f8      	ldr	r0, [r7, #12]
 800dee4:	f000 f870 	bl	800dfc8 <USBH_ParseEPDesc>
 800dee8:	4603      	mov	r3, r0
 800deea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800deee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800def2:	3301      	adds	r3, #1
 800def4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800def8:	69fb      	ldr	r3, [r7, #28]
 800defa:	791b      	ldrb	r3, [r3, #4]
 800defc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800df00:	429a      	cmp	r2, r3
 800df02:	d204      	bcs.n	800df0e <USBH_ParseCfgDesc+0x19e>
 800df04:	6a3b      	ldr	r3, [r7, #32]
 800df06:	885a      	ldrh	r2, [r3, #2]
 800df08:	8afb      	ldrh	r3, [r7, #22]
 800df0a:	429a      	cmp	r2, r3
 800df0c:	d8b0      	bhi.n	800de70 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800df0e:	69fb      	ldr	r3, [r7, #28]
 800df10:	791b      	ldrb	r3, [r3, #4]
 800df12:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800df16:	429a      	cmp	r2, r3
 800df18:	d201      	bcs.n	800df1e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800df1a:	2303      	movs	r3, #3
 800df1c:	e01c      	b.n	800df58 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800df1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df22:	3301      	adds	r3, #1
 800df24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800df28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d805      	bhi.n	800df3c <USBH_ParseCfgDesc+0x1cc>
 800df30:	6a3b      	ldr	r3, [r7, #32]
 800df32:	885a      	ldrh	r2, [r3, #2]
 800df34:	8afb      	ldrh	r3, [r7, #22]
 800df36:	429a      	cmp	r2, r3
 800df38:	f63f af74 	bhi.w	800de24 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800df3c:	6a3b      	ldr	r3, [r7, #32]
 800df3e:	791b      	ldrb	r3, [r3, #4]
 800df40:	2b02      	cmp	r3, #2
 800df42:	bf28      	it	cs
 800df44:	2302      	movcs	r3, #2
 800df46:	b2db      	uxtb	r3, r3
 800df48:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d201      	bcs.n	800df54 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800df50:	2303      	movs	r3, #3
 800df52:	e001      	b.n	800df58 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800df54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3730      	adds	r7, #48	@ 0x30
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}

0800df60 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800df60:	b480      	push	{r7}
 800df62:	b083      	sub	sp, #12
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	781a      	ldrb	r2, [r3, #0]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	785a      	ldrb	r2, [r3, #1]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	789a      	ldrb	r2, [r3, #2]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	78da      	ldrb	r2, [r3, #3]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	3304      	adds	r3, #4
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	2b02      	cmp	r3, #2
 800df92:	bf28      	it	cs
 800df94:	2302      	movcs	r3, #2
 800df96:	b2da      	uxtb	r2, r3
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	795a      	ldrb	r2, [r3, #5]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	799a      	ldrb	r2, [r3, #6]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	79da      	ldrb	r2, [r3, #7]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	7a1a      	ldrb	r2, [r3, #8]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	721a      	strb	r2, [r3, #8]
}
 800dfbc:	bf00      	nop
 800dfbe:	370c      	adds	r7, #12
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr

0800dfc8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b087      	sub	sp, #28
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	60b9      	str	r1, [r7, #8]
 800dfd2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	781a      	ldrb	r2, [r3, #0]
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	785a      	ldrb	r2, [r3, #1]
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	789a      	ldrb	r2, [r3, #2]
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	78da      	ldrb	r2, [r3, #3]
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	3304      	adds	r3, #4
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	461a      	mov	r2, r3
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	3305      	adds	r3, #5
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	021b      	lsls	r3, r3, #8
 800e008:	b29b      	uxth	r3, r3
 800e00a:	4313      	orrs	r3, r2
 800e00c:	b29a      	uxth	r2, r3
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	799a      	ldrb	r2, [r3, #6]
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	889b      	ldrh	r3, [r3, #4]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d009      	beq.n	800e036 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800e026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e02a:	d804      	bhi.n	800e036 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800e030:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e034:	d901      	bls.n	800e03a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800e036:	2303      	movs	r3, #3
 800e038:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e040:	2b00      	cmp	r3, #0
 800e042:	d136      	bne.n	800e0b2 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	78db      	ldrb	r3, [r3, #3]
 800e048:	f003 0303 	and.w	r3, r3, #3
 800e04c:	2b02      	cmp	r3, #2
 800e04e:	d108      	bne.n	800e062 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	889b      	ldrh	r3, [r3, #4]
 800e054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e058:	f240 8097 	bls.w	800e18a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e05c:	2303      	movs	r3, #3
 800e05e:	75fb      	strb	r3, [r7, #23]
 800e060:	e093      	b.n	800e18a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	78db      	ldrb	r3, [r3, #3]
 800e066:	f003 0303 	and.w	r3, r3, #3
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d107      	bne.n	800e07e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	889b      	ldrh	r3, [r3, #4]
 800e072:	2b40      	cmp	r3, #64	@ 0x40
 800e074:	f240 8089 	bls.w	800e18a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e078:	2303      	movs	r3, #3
 800e07a:	75fb      	strb	r3, [r7, #23]
 800e07c:	e085      	b.n	800e18a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	78db      	ldrb	r3, [r3, #3]
 800e082:	f003 0303 	and.w	r3, r3, #3
 800e086:	2b01      	cmp	r3, #1
 800e088:	d005      	beq.n	800e096 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	78db      	ldrb	r3, [r3, #3]
 800e08e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e092:	2b03      	cmp	r3, #3
 800e094:	d10a      	bne.n	800e0ac <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	799b      	ldrb	r3, [r3, #6]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d003      	beq.n	800e0a6 <USBH_ParseEPDesc+0xde>
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	799b      	ldrb	r3, [r3, #6]
 800e0a2:	2b10      	cmp	r3, #16
 800e0a4:	d970      	bls.n	800e188 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800e0a6:	2303      	movs	r3, #3
 800e0a8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e0aa:	e06d      	b.n	800e188 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e0ac:	2303      	movs	r3, #3
 800e0ae:	75fb      	strb	r3, [r7, #23]
 800e0b0:	e06b      	b.n	800e18a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e0b8:	2b01      	cmp	r3, #1
 800e0ba:	d13c      	bne.n	800e136 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	78db      	ldrb	r3, [r3, #3]
 800e0c0:	f003 0303 	and.w	r3, r3, #3
 800e0c4:	2b02      	cmp	r3, #2
 800e0c6:	d005      	beq.n	800e0d4 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	78db      	ldrb	r3, [r3, #3]
 800e0cc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d106      	bne.n	800e0e2 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	889b      	ldrh	r3, [r3, #4]
 800e0d8:	2b40      	cmp	r3, #64	@ 0x40
 800e0da:	d956      	bls.n	800e18a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e0dc:	2303      	movs	r3, #3
 800e0de:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e0e0:	e053      	b.n	800e18a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	78db      	ldrb	r3, [r3, #3]
 800e0e6:	f003 0303 	and.w	r3, r3, #3
 800e0ea:	2b01      	cmp	r3, #1
 800e0ec:	d10e      	bne.n	800e10c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	799b      	ldrb	r3, [r3, #6]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d007      	beq.n	800e106 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800e0fa:	2b10      	cmp	r3, #16
 800e0fc:	d803      	bhi.n	800e106 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800e0fe:	68bb      	ldr	r3, [r7, #8]
 800e100:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800e102:	2b40      	cmp	r3, #64	@ 0x40
 800e104:	d941      	bls.n	800e18a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e106:	2303      	movs	r3, #3
 800e108:	75fb      	strb	r3, [r7, #23]
 800e10a:	e03e      	b.n	800e18a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	78db      	ldrb	r3, [r3, #3]
 800e110:	f003 0303 	and.w	r3, r3, #3
 800e114:	2b03      	cmp	r3, #3
 800e116:	d10b      	bne.n	800e130 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	799b      	ldrb	r3, [r3, #6]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d004      	beq.n	800e12a <USBH_ParseEPDesc+0x162>
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	889b      	ldrh	r3, [r3, #4]
 800e124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e128:	d32f      	bcc.n	800e18a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e12a:	2303      	movs	r3, #3
 800e12c:	75fb      	strb	r3, [r7, #23]
 800e12e:	e02c      	b.n	800e18a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e130:	2303      	movs	r3, #3
 800e132:	75fb      	strb	r3, [r7, #23]
 800e134:	e029      	b.n	800e18a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e13c:	2b02      	cmp	r3, #2
 800e13e:	d120      	bne.n	800e182 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	78db      	ldrb	r3, [r3, #3]
 800e144:	f003 0303 	and.w	r3, r3, #3
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d106      	bne.n	800e15a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	889b      	ldrh	r3, [r3, #4]
 800e150:	2b08      	cmp	r3, #8
 800e152:	d01a      	beq.n	800e18a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e154:	2303      	movs	r3, #3
 800e156:	75fb      	strb	r3, [r7, #23]
 800e158:	e017      	b.n	800e18a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	78db      	ldrb	r3, [r3, #3]
 800e15e:	f003 0303 	and.w	r3, r3, #3
 800e162:	2b03      	cmp	r3, #3
 800e164:	d10a      	bne.n	800e17c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	799b      	ldrb	r3, [r3, #6]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d003      	beq.n	800e176 <USBH_ParseEPDesc+0x1ae>
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	889b      	ldrh	r3, [r3, #4]
 800e172:	2b08      	cmp	r3, #8
 800e174:	d909      	bls.n	800e18a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e176:	2303      	movs	r3, #3
 800e178:	75fb      	strb	r3, [r7, #23]
 800e17a:	e006      	b.n	800e18a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e17c:	2303      	movs	r3, #3
 800e17e:	75fb      	strb	r3, [r7, #23]
 800e180:	e003      	b.n	800e18a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800e182:	2303      	movs	r3, #3
 800e184:	75fb      	strb	r3, [r7, #23]
 800e186:	e000      	b.n	800e18a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e188:	bf00      	nop
  }

  return status;
 800e18a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	371c      	adds	r7, #28
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr

0800e198 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e198:	b480      	push	{r7}
 800e19a:	b087      	sub	sp, #28
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	60f8      	str	r0, [r7, #12]
 800e1a0:	60b9      	str	r1, [r7, #8]
 800e1a2:	4613      	mov	r3, r2
 800e1a4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	2b03      	cmp	r3, #3
 800e1ae:	d120      	bne.n	800e1f2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	1e9a      	subs	r2, r3, #2
 800e1b6:	88fb      	ldrh	r3, [r7, #6]
 800e1b8:	4293      	cmp	r3, r2
 800e1ba:	bf28      	it	cs
 800e1bc:	4613      	movcs	r3, r2
 800e1be:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	3302      	adds	r3, #2
 800e1c4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	82fb      	strh	r3, [r7, #22]
 800e1ca:	e00b      	b.n	800e1e4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e1cc:	8afb      	ldrh	r3, [r7, #22]
 800e1ce:	68fa      	ldr	r2, [r7, #12]
 800e1d0:	4413      	add	r3, r2
 800e1d2:	781a      	ldrb	r2, [r3, #0]
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	3301      	adds	r3, #1
 800e1dc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e1de:	8afb      	ldrh	r3, [r7, #22]
 800e1e0:	3302      	adds	r3, #2
 800e1e2:	82fb      	strh	r3, [r7, #22]
 800e1e4:	8afa      	ldrh	r2, [r7, #22]
 800e1e6:	8abb      	ldrh	r3, [r7, #20]
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d3ef      	bcc.n	800e1cc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	701a      	strb	r2, [r3, #0]
  }
}
 800e1f2:	bf00      	nop
 800e1f4:	371c      	adds	r7, #28
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fc:	4770      	bx	lr

0800e1fe <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e1fe:	b480      	push	{r7}
 800e200:	b085      	sub	sp, #20
 800e202:	af00      	add	r7, sp, #0
 800e204:	6078      	str	r0, [r7, #4]
 800e206:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	881b      	ldrh	r3, [r3, #0]
 800e20c:	687a      	ldr	r2, [r7, #4]
 800e20e:	7812      	ldrb	r2, [r2, #0]
 800e210:	4413      	add	r3, r2
 800e212:	b29a      	uxth	r2, r3
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	781b      	ldrb	r3, [r3, #0]
 800e21c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	4413      	add	r3, r2
 800e222:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e224:	68fb      	ldr	r3, [r7, #12]
}
 800e226:	4618      	mov	r0, r3
 800e228:	3714      	adds	r7, #20
 800e22a:	46bd      	mov	sp, r7
 800e22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e230:	4770      	bx	lr

0800e232 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e232:	b580      	push	{r7, lr}
 800e234:	b086      	sub	sp, #24
 800e236:	af00      	add	r7, sp, #0
 800e238:	60f8      	str	r0, [r7, #12]
 800e23a:	60b9      	str	r1, [r7, #8]
 800e23c:	4613      	mov	r3, r2
 800e23e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e240:	2301      	movs	r3, #1
 800e242:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	789b      	ldrb	r3, [r3, #2]
 800e248:	2b01      	cmp	r3, #1
 800e24a:	d002      	beq.n	800e252 <USBH_CtlReq+0x20>
 800e24c:	2b02      	cmp	r3, #2
 800e24e:	d00f      	beq.n	800e270 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800e250:	e027      	b.n	800e2a2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	68ba      	ldr	r2, [r7, #8]
 800e256:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	88fa      	ldrh	r2, [r7, #6]
 800e25c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2201      	movs	r2, #1
 800e262:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2202      	movs	r2, #2
 800e268:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e26a:	2301      	movs	r3, #1
 800e26c:	75fb      	strb	r3, [r7, #23]
      break;
 800e26e:	e018      	b.n	800e2a2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800e270:	68f8      	ldr	r0, [r7, #12]
 800e272:	f000 f81b 	bl	800e2ac <USBH_HandleControl>
 800e276:	4603      	mov	r3, r0
 800e278:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e27a:	7dfb      	ldrb	r3, [r7, #23]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d002      	beq.n	800e286 <USBH_CtlReq+0x54>
 800e280:	7dfb      	ldrb	r3, [r7, #23]
 800e282:	2b03      	cmp	r3, #3
 800e284:	d106      	bne.n	800e294 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	2201      	movs	r2, #1
 800e28a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2200      	movs	r2, #0
 800e290:	761a      	strb	r2, [r3, #24]
      break;
 800e292:	e005      	b.n	800e2a0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800e294:	7dfb      	ldrb	r3, [r7, #23]
 800e296:	2b02      	cmp	r3, #2
 800e298:	d102      	bne.n	800e2a0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2201      	movs	r2, #1
 800e29e:	709a      	strb	r2, [r3, #2]
      break;
 800e2a0:	bf00      	nop
  }
  return status;
 800e2a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3718      	adds	r7, #24
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}

0800e2ac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b086      	sub	sp, #24
 800e2b0:	af02      	add	r7, sp, #8
 800e2b2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	7e1b      	ldrb	r3, [r3, #24]
 800e2c0:	3b01      	subs	r3, #1
 800e2c2:	2b0a      	cmp	r3, #10
 800e2c4:	f200 815f 	bhi.w	800e586 <USBH_HandleControl+0x2da>
 800e2c8:	a201      	add	r2, pc, #4	@ (adr r2, 800e2d0 <USBH_HandleControl+0x24>)
 800e2ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ce:	bf00      	nop
 800e2d0:	0800e2fd 	.word	0x0800e2fd
 800e2d4:	0800e317 	.word	0x0800e317
 800e2d8:	0800e381 	.word	0x0800e381
 800e2dc:	0800e3a7 	.word	0x0800e3a7
 800e2e0:	0800e3df 	.word	0x0800e3df
 800e2e4:	0800e409 	.word	0x0800e409
 800e2e8:	0800e45b 	.word	0x0800e45b
 800e2ec:	0800e47d 	.word	0x0800e47d
 800e2f0:	0800e4b9 	.word	0x0800e4b9
 800e2f4:	0800e4df 	.word	0x0800e4df
 800e2f8:	0800e51d 	.word	0x0800e51d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f103 0110 	add.w	r1, r3, #16
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	795b      	ldrb	r3, [r3, #5]
 800e306:	461a      	mov	r2, r3
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f000 f951 	bl	800e5b0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2202      	movs	r2, #2
 800e312:	761a      	strb	r2, [r3, #24]
      break;
 800e314:	e142      	b.n	800e59c <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	795b      	ldrb	r3, [r3, #5]
 800e31a:	4619      	mov	r1, r3
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f000 fca1 	bl	800ec64 <USBH_LL_GetURBState>
 800e322:	4603      	mov	r3, r0
 800e324:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e326:	7bbb      	ldrb	r3, [r7, #14]
 800e328:	2b01      	cmp	r3, #1
 800e32a:	d11e      	bne.n	800e36a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	7c1b      	ldrb	r3, [r3, #16]
 800e330:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e334:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	8adb      	ldrh	r3, [r3, #22]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d00a      	beq.n	800e354 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e33e:	7b7b      	ldrb	r3, [r7, #13]
 800e340:	2b80      	cmp	r3, #128	@ 0x80
 800e342:	d103      	bne.n	800e34c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2203      	movs	r2, #3
 800e348:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e34a:	e11e      	b.n	800e58a <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2205      	movs	r2, #5
 800e350:	761a      	strb	r2, [r3, #24]
      break;
 800e352:	e11a      	b.n	800e58a <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 800e354:	7b7b      	ldrb	r3, [r7, #13]
 800e356:	2b80      	cmp	r3, #128	@ 0x80
 800e358:	d103      	bne.n	800e362 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2209      	movs	r2, #9
 800e35e:	761a      	strb	r2, [r3, #24]
      break;
 800e360:	e113      	b.n	800e58a <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2207      	movs	r2, #7
 800e366:	761a      	strb	r2, [r3, #24]
      break;
 800e368:	e10f      	b.n	800e58a <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e36a:	7bbb      	ldrb	r3, [r7, #14]
 800e36c:	2b04      	cmp	r3, #4
 800e36e:	d003      	beq.n	800e378 <USBH_HandleControl+0xcc>
 800e370:	7bbb      	ldrb	r3, [r7, #14]
 800e372:	2b02      	cmp	r3, #2
 800e374:	f040 8109 	bne.w	800e58a <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	220b      	movs	r2, #11
 800e37c:	761a      	strb	r2, [r3, #24]
      break;
 800e37e:	e104      	b.n	800e58a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e386:	b29a      	uxth	r2, r3
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6899      	ldr	r1, [r3, #8]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	899a      	ldrh	r2, [r3, #12]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	791b      	ldrb	r3, [r3, #4]
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f000 f948 	bl	800e62e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2204      	movs	r2, #4
 800e3a2:	761a      	strb	r2, [r3, #24]
      break;
 800e3a4:	e0fa      	b.n	800e59c <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	791b      	ldrb	r3, [r3, #4]
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f000 fc59 	bl	800ec64 <USBH_LL_GetURBState>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e3b6:	7bbb      	ldrb	r3, [r7, #14]
 800e3b8:	2b01      	cmp	r3, #1
 800e3ba:	d102      	bne.n	800e3c2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2209      	movs	r2, #9
 800e3c0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e3c2:	7bbb      	ldrb	r3, [r7, #14]
 800e3c4:	2b05      	cmp	r3, #5
 800e3c6:	d102      	bne.n	800e3ce <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e3c8:	2303      	movs	r3, #3
 800e3ca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e3cc:	e0df      	b.n	800e58e <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800e3ce:	7bbb      	ldrb	r3, [r7, #14]
 800e3d0:	2b04      	cmp	r3, #4
 800e3d2:	f040 80dc 	bne.w	800e58e <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	220b      	movs	r2, #11
 800e3da:	761a      	strb	r2, [r3, #24]
      break;
 800e3dc:	e0d7      	b.n	800e58e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6899      	ldr	r1, [r3, #8]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	899a      	ldrh	r2, [r3, #12]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	795b      	ldrb	r3, [r3, #5]
 800e3ea:	2001      	movs	r0, #1
 800e3ec:	9000      	str	r0, [sp, #0]
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f000 f8f8 	bl	800e5e4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e3fa:	b29a      	uxth	r2, r3
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2206      	movs	r2, #6
 800e404:	761a      	strb	r2, [r3, #24]
      break;
 800e406:	e0c9      	b.n	800e59c <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	795b      	ldrb	r3, [r3, #5]
 800e40c:	4619      	mov	r1, r3
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f000 fc28 	bl	800ec64 <USBH_LL_GetURBState>
 800e414:	4603      	mov	r3, r0
 800e416:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e418:	7bbb      	ldrb	r3, [r7, #14]
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	d103      	bne.n	800e426 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2207      	movs	r2, #7
 800e422:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e424:	e0b5      	b.n	800e592 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 800e426:	7bbb      	ldrb	r3, [r7, #14]
 800e428:	2b05      	cmp	r3, #5
 800e42a:	d105      	bne.n	800e438 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	220c      	movs	r2, #12
 800e430:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e432:	2303      	movs	r3, #3
 800e434:	73fb      	strb	r3, [r7, #15]
      break;
 800e436:	e0ac      	b.n	800e592 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e438:	7bbb      	ldrb	r3, [r7, #14]
 800e43a:	2b02      	cmp	r3, #2
 800e43c:	d103      	bne.n	800e446 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2205      	movs	r2, #5
 800e442:	761a      	strb	r2, [r3, #24]
      break;
 800e444:	e0a5      	b.n	800e592 <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 800e446:	7bbb      	ldrb	r3, [r7, #14]
 800e448:	2b04      	cmp	r3, #4
 800e44a:	f040 80a2 	bne.w	800e592 <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	220b      	movs	r2, #11
 800e452:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e454:	2302      	movs	r3, #2
 800e456:	73fb      	strb	r3, [r7, #15]
      break;
 800e458:	e09b      	b.n	800e592 <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	791b      	ldrb	r3, [r3, #4]
 800e45e:	2200      	movs	r2, #0
 800e460:	2100      	movs	r1, #0
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 f8e3 	bl	800e62e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e46e:	b29a      	uxth	r2, r3
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2208      	movs	r2, #8
 800e478:	761a      	strb	r2, [r3, #24]

      break;
 800e47a:	e08f      	b.n	800e59c <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	791b      	ldrb	r3, [r3, #4]
 800e480:	4619      	mov	r1, r3
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f000 fbee 	bl	800ec64 <USBH_LL_GetURBState>
 800e488:	4603      	mov	r3, r0
 800e48a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e48c:	7bbb      	ldrb	r3, [r7, #14]
 800e48e:	2b01      	cmp	r3, #1
 800e490:	d105      	bne.n	800e49e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	220d      	movs	r2, #13
 800e496:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e498:	2300      	movs	r3, #0
 800e49a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e49c:	e07b      	b.n	800e596 <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 800e49e:	7bbb      	ldrb	r3, [r7, #14]
 800e4a0:	2b04      	cmp	r3, #4
 800e4a2:	d103      	bne.n	800e4ac <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	220b      	movs	r2, #11
 800e4a8:	761a      	strb	r2, [r3, #24]
      break;
 800e4aa:	e074      	b.n	800e596 <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 800e4ac:	7bbb      	ldrb	r3, [r7, #14]
 800e4ae:	2b05      	cmp	r3, #5
 800e4b0:	d171      	bne.n	800e596 <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 800e4b2:	2303      	movs	r3, #3
 800e4b4:	73fb      	strb	r3, [r7, #15]
      break;
 800e4b6:	e06e      	b.n	800e596 <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	795b      	ldrb	r3, [r3, #5]
 800e4bc:	2201      	movs	r2, #1
 800e4be:	9200      	str	r2, [sp, #0]
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	2100      	movs	r1, #0
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f000 f88d 	bl	800e5e4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e4d0:	b29a      	uxth	r2, r3
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	220a      	movs	r2, #10
 800e4da:	761a      	strb	r2, [r3, #24]
      break;
 800e4dc:	e05e      	b.n	800e59c <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	795b      	ldrb	r3, [r3, #5]
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f000 fbbd 	bl	800ec64 <USBH_LL_GetURBState>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e4ee:	7bbb      	ldrb	r3, [r7, #14]
 800e4f0:	2b01      	cmp	r3, #1
 800e4f2:	d105      	bne.n	800e500 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	220d      	movs	r2, #13
 800e4fc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e4fe:	e04c      	b.n	800e59a <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e500:	7bbb      	ldrb	r3, [r7, #14]
 800e502:	2b02      	cmp	r3, #2
 800e504:	d103      	bne.n	800e50e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2209      	movs	r2, #9
 800e50a:	761a      	strb	r2, [r3, #24]
      break;
 800e50c:	e045      	b.n	800e59a <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800e50e:	7bbb      	ldrb	r3, [r7, #14]
 800e510:	2b04      	cmp	r3, #4
 800e512:	d142      	bne.n	800e59a <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	220b      	movs	r2, #11
 800e518:	761a      	strb	r2, [r3, #24]
      break;
 800e51a:	e03e      	b.n	800e59a <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	7e5b      	ldrb	r3, [r3, #25]
 800e520:	3301      	adds	r3, #1
 800e522:	b2da      	uxtb	r2, r3
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	765a      	strb	r2, [r3, #25]
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	7e5b      	ldrb	r3, [r3, #25]
 800e52c:	2b02      	cmp	r3, #2
 800e52e:	d806      	bhi.n	800e53e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2201      	movs	r2, #1
 800e534:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2201      	movs	r2, #1
 800e53a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e53c:	e02e      	b.n	800e59c <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e544:	2106      	movs	r1, #6
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2200      	movs	r2, #0
 800e54e:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800e550:	4815      	ldr	r0, [pc, #84]	@ (800e5a8 <USBH_HandleControl+0x2fc>)
 800e552:	f000 fe3f 	bl	800f1d4 <iprintf>
 800e556:	4815      	ldr	r0, [pc, #84]	@ (800e5ac <USBH_HandleControl+0x300>)
 800e558:	f000 fe3c 	bl	800f1d4 <iprintf>
 800e55c:	200a      	movs	r0, #10
 800e55e:	f000 fe4b 	bl	800f1f8 <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	795b      	ldrb	r3, [r3, #5]
 800e566:	4619      	mov	r1, r3
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f000 f8ed 	bl	800e748 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	791b      	ldrb	r3, [r3, #4]
 800e572:	4619      	mov	r1, r3
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f000 f8e7 	bl	800e748 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2200      	movs	r2, #0
 800e57e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e580:	2302      	movs	r3, #2
 800e582:	73fb      	strb	r3, [r7, #15]
      break;
 800e584:	e00a      	b.n	800e59c <USBH_HandleControl+0x2f0>

    default:
      break;
 800e586:	bf00      	nop
 800e588:	e008      	b.n	800e59c <USBH_HandleControl+0x2f0>
      break;
 800e58a:	bf00      	nop
 800e58c:	e006      	b.n	800e59c <USBH_HandleControl+0x2f0>
      break;
 800e58e:	bf00      	nop
 800e590:	e004      	b.n	800e59c <USBH_HandleControl+0x2f0>
      break;
 800e592:	bf00      	nop
 800e594:	e002      	b.n	800e59c <USBH_HandleControl+0x2f0>
      break;
 800e596:	bf00      	nop
 800e598:	e000      	b.n	800e59c <USBH_HandleControl+0x2f0>
      break;
 800e59a:	bf00      	nop
  }

  return status;
 800e59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e59e:	4618      	mov	r0, r3
 800e5a0:	3710      	adds	r7, #16
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}
 800e5a6:	bf00      	nop
 800e5a8:	08010a4c 	.word	0x08010a4c
 800e5ac:	08010b28 	.word	0x08010b28

0800e5b0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b088      	sub	sp, #32
 800e5b4:	af04      	add	r7, sp, #16
 800e5b6:	60f8      	str	r0, [r7, #12]
 800e5b8:	60b9      	str	r1, [r7, #8]
 800e5ba:	4613      	mov	r3, r2
 800e5bc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e5be:	79f9      	ldrb	r1, [r7, #7]
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	9303      	str	r3, [sp, #12]
 800e5c4:	2308      	movs	r3, #8
 800e5c6:	9302      	str	r3, [sp, #8]
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	9301      	str	r3, [sp, #4]
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	9300      	str	r3, [sp, #0]
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	68f8      	ldr	r0, [r7, #12]
 800e5d6:	f000 fb14 	bl	800ec02 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e5da:	2300      	movs	r3, #0
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3710      	adds	r7, #16
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b088      	sub	sp, #32
 800e5e8:	af04      	add	r7, sp, #16
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	4611      	mov	r1, r2
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	460b      	mov	r3, r1
 800e5f4:	80fb      	strh	r3, [r7, #6]
 800e5f6:	4613      	mov	r3, r2
 800e5f8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e600:	2b00      	cmp	r3, #0
 800e602:	d001      	beq.n	800e608 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e604:	2300      	movs	r3, #0
 800e606:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e608:	7979      	ldrb	r1, [r7, #5]
 800e60a:	7e3b      	ldrb	r3, [r7, #24]
 800e60c:	9303      	str	r3, [sp, #12]
 800e60e:	88fb      	ldrh	r3, [r7, #6]
 800e610:	9302      	str	r3, [sp, #8]
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	9301      	str	r3, [sp, #4]
 800e616:	2301      	movs	r3, #1
 800e618:	9300      	str	r3, [sp, #0]
 800e61a:	2300      	movs	r3, #0
 800e61c:	2200      	movs	r2, #0
 800e61e:	68f8      	ldr	r0, [r7, #12]
 800e620:	f000 faef 	bl	800ec02 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e624:	2300      	movs	r3, #0
}
 800e626:	4618      	mov	r0, r3
 800e628:	3710      	adds	r7, #16
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}

0800e62e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e62e:	b580      	push	{r7, lr}
 800e630:	b088      	sub	sp, #32
 800e632:	af04      	add	r7, sp, #16
 800e634:	60f8      	str	r0, [r7, #12]
 800e636:	60b9      	str	r1, [r7, #8]
 800e638:	4611      	mov	r1, r2
 800e63a:	461a      	mov	r2, r3
 800e63c:	460b      	mov	r3, r1
 800e63e:	80fb      	strh	r3, [r7, #6]
 800e640:	4613      	mov	r3, r2
 800e642:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e644:	7979      	ldrb	r1, [r7, #5]
 800e646:	2300      	movs	r3, #0
 800e648:	9303      	str	r3, [sp, #12]
 800e64a:	88fb      	ldrh	r3, [r7, #6]
 800e64c:	9302      	str	r3, [sp, #8]
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	9301      	str	r3, [sp, #4]
 800e652:	2301      	movs	r3, #1
 800e654:	9300      	str	r3, [sp, #0]
 800e656:	2300      	movs	r3, #0
 800e658:	2201      	movs	r2, #1
 800e65a:	68f8      	ldr	r0, [r7, #12]
 800e65c:	f000 fad1 	bl	800ec02 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e660:	2300      	movs	r3, #0

}
 800e662:	4618      	mov	r0, r3
 800e664:	3710      	adds	r7, #16
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}

0800e66a <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800e66a:	b580      	push	{r7, lr}
 800e66c:	b088      	sub	sp, #32
 800e66e:	af04      	add	r7, sp, #16
 800e670:	60f8      	str	r0, [r7, #12]
 800e672:	60b9      	str	r1, [r7, #8]
 800e674:	4611      	mov	r1, r2
 800e676:	461a      	mov	r2, r3
 800e678:	460b      	mov	r3, r1
 800e67a:	71fb      	strb	r3, [r7, #7]
 800e67c:	4613      	mov	r3, r2
 800e67e:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e680:	79fb      	ldrb	r3, [r7, #7]
 800e682:	b29b      	uxth	r3, r3
 800e684:	79b9      	ldrb	r1, [r7, #6]
 800e686:	2200      	movs	r2, #0
 800e688:	9203      	str	r2, [sp, #12]
 800e68a:	9302      	str	r3, [sp, #8]
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	9301      	str	r3, [sp, #4]
 800e690:	2301      	movs	r3, #1
 800e692:	9300      	str	r3, [sp, #0]
 800e694:	2303      	movs	r3, #3
 800e696:	2201      	movs	r2, #1
 800e698:	68f8      	ldr	r0, [r7, #12]
 800e69a:	f000 fab2 	bl	800ec02 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800e69e:	2300      	movs	r3, #0
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3710      	adds	r7, #16
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}

0800e6a8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b086      	sub	sp, #24
 800e6ac:	af04      	add	r7, sp, #16
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	4608      	mov	r0, r1
 800e6b2:	4611      	mov	r1, r2
 800e6b4:	461a      	mov	r2, r3
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	70fb      	strb	r3, [r7, #3]
 800e6ba:	460b      	mov	r3, r1
 800e6bc:	70bb      	strb	r3, [r7, #2]
 800e6be:	4613      	mov	r3, r2
 800e6c0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e6c2:	7878      	ldrb	r0, [r7, #1]
 800e6c4:	78ba      	ldrb	r2, [r7, #2]
 800e6c6:	78f9      	ldrb	r1, [r7, #3]
 800e6c8:	8b3b      	ldrh	r3, [r7, #24]
 800e6ca:	9302      	str	r3, [sp, #8]
 800e6cc:	7d3b      	ldrb	r3, [r7, #20]
 800e6ce:	9301      	str	r3, [sp, #4]
 800e6d0:	7c3b      	ldrb	r3, [r7, #16]
 800e6d2:	9300      	str	r3, [sp, #0]
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f000 fa45 	bl	800eb66 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e6dc:	2300      	movs	r3, #0
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3708      	adds	r7, #8
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}

0800e6e6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e6e6:	b580      	push	{r7, lr}
 800e6e8:	b082      	sub	sp, #8
 800e6ea:	af00      	add	r7, sp, #0
 800e6ec:	6078      	str	r0, [r7, #4]
 800e6ee:	460b      	mov	r3, r1
 800e6f0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e6f2:	78fb      	ldrb	r3, [r7, #3]
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f000 fa64 	bl	800ebc4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e6fc:	2300      	movs	r3, #0
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3708      	adds	r7, #8
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}

0800e706 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e706:	b580      	push	{r7, lr}
 800e708:	b084      	sub	sp, #16
 800e70a:	af00      	add	r7, sp, #0
 800e70c:	6078      	str	r0, [r7, #4]
 800e70e:	460b      	mov	r3, r1
 800e710:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f000 f836 	bl	800e784 <USBH_GetFreePipe>
 800e718:	4603      	mov	r3, r0
 800e71a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e71c:	89fb      	ldrh	r3, [r7, #14]
 800e71e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e722:	4293      	cmp	r3, r2
 800e724:	d00a      	beq.n	800e73c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e726:	78fa      	ldrb	r2, [r7, #3]
 800e728:	89fb      	ldrh	r3, [r7, #14]
 800e72a:	f003 030f 	and.w	r3, r3, #15
 800e72e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e732:	6879      	ldr	r1, [r7, #4]
 800e734:	33e0      	adds	r3, #224	@ 0xe0
 800e736:	009b      	lsls	r3, r3, #2
 800e738:	440b      	add	r3, r1
 800e73a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e73c:	89fb      	ldrh	r3, [r7, #14]
 800e73e:	b2db      	uxtb	r3, r3
}
 800e740:	4618      	mov	r0, r3
 800e742:	3710      	adds	r7, #16
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}

0800e748 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e748:	b480      	push	{r7}
 800e74a:	b083      	sub	sp, #12
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
 800e750:	460b      	mov	r3, r1
 800e752:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e754:	78fb      	ldrb	r3, [r7, #3]
 800e756:	2b0f      	cmp	r3, #15
 800e758:	d80d      	bhi.n	800e776 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e75a:	78fb      	ldrb	r3, [r7, #3]
 800e75c:	687a      	ldr	r2, [r7, #4]
 800e75e:	33e0      	adds	r3, #224	@ 0xe0
 800e760:	009b      	lsls	r3, r3, #2
 800e762:	4413      	add	r3, r2
 800e764:	685a      	ldr	r2, [r3, #4]
 800e766:	78fb      	ldrb	r3, [r7, #3]
 800e768:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e76c:	6879      	ldr	r1, [r7, #4]
 800e76e:	33e0      	adds	r3, #224	@ 0xe0
 800e770:	009b      	lsls	r3, r3, #2
 800e772:	440b      	add	r3, r1
 800e774:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e776:	2300      	movs	r3, #0
}
 800e778:	4618      	mov	r0, r3
 800e77a:	370c      	adds	r7, #12
 800e77c:	46bd      	mov	sp, r7
 800e77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e782:	4770      	bx	lr

0800e784 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e784:	b480      	push	{r7}
 800e786:	b085      	sub	sp, #20
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e78c:	2300      	movs	r3, #0
 800e78e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e790:	2300      	movs	r3, #0
 800e792:	73fb      	strb	r3, [r7, #15]
 800e794:	e00f      	b.n	800e7b6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e796:	7bfb      	ldrb	r3, [r7, #15]
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	33e0      	adds	r3, #224	@ 0xe0
 800e79c:	009b      	lsls	r3, r3, #2
 800e79e:	4413      	add	r3, r2
 800e7a0:	685b      	ldr	r3, [r3, #4]
 800e7a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d102      	bne.n	800e7b0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e7aa:	7bfb      	ldrb	r3, [r7, #15]
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	e007      	b.n	800e7c0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e7b0:	7bfb      	ldrb	r3, [r7, #15]
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	73fb      	strb	r3, [r7, #15]
 800e7b6:	7bfb      	ldrb	r3, [r7, #15]
 800e7b8:	2b0f      	cmp	r3, #15
 800e7ba:	d9ec      	bls.n	800e796 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e7bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3714      	adds	r7, #20
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr

0800e7cc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e7d0:	2201      	movs	r2, #1
 800e7d2:	490e      	ldr	r1, [pc, #56]	@ (800e80c <MX_USB_HOST_Init+0x40>)
 800e7d4:	480e      	ldr	r0, [pc, #56]	@ (800e810 <MX_USB_HOST_Init+0x44>)
 800e7d6:	f7fe f93f 	bl	800ca58 <USBH_Init>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d001      	beq.n	800e7e4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e7e0:	f7f5 fb56 	bl	8003e90 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800e7e4:	490b      	ldr	r1, [pc, #44]	@ (800e814 <MX_USB_HOST_Init+0x48>)
 800e7e6:	480a      	ldr	r0, [pc, #40]	@ (800e810 <MX_USB_HOST_Init+0x44>)
 800e7e8:	f7fe f9f2 	bl	800cbd0 <USBH_RegisterClass>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d001      	beq.n	800e7f6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e7f2:	f7f5 fb4d 	bl	8003e90 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e7f6:	4806      	ldr	r0, [pc, #24]	@ (800e810 <MX_USB_HOST_Init+0x44>)
 800e7f8:	f7fe fad8 	bl	800cdac <USBH_Start>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d001      	beq.n	800e806 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e802:	f7f5 fb45 	bl	8003e90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e806:	bf00      	nop
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop
 800e80c:	0800e82d 	.word	0x0800e82d
 800e810:	20011948 	.word	0x20011948
 800e814:	20000274 	.word	0x20000274

0800e818 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800e81c:	4802      	ldr	r0, [pc, #8]	@ (800e828 <MX_USB_HOST_Process+0x10>)
 800e81e:	f7fe fad5 	bl	800cdcc <USBH_Process>
}
 800e822:	bf00      	nop
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	20011948 	.word	0x20011948

0800e82c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e82c:	b480      	push	{r7}
 800e82e:	b083      	sub	sp, #12
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	460b      	mov	r3, r1
 800e836:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e838:	78fb      	ldrb	r3, [r7, #3]
 800e83a:	3b01      	subs	r3, #1
 800e83c:	2b04      	cmp	r3, #4
 800e83e:	d819      	bhi.n	800e874 <USBH_UserProcess+0x48>
 800e840:	a201      	add	r2, pc, #4	@ (adr r2, 800e848 <USBH_UserProcess+0x1c>)
 800e842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e846:	bf00      	nop
 800e848:	0800e875 	.word	0x0800e875
 800e84c:	0800e865 	.word	0x0800e865
 800e850:	0800e875 	.word	0x0800e875
 800e854:	0800e86d 	.word	0x0800e86d
 800e858:	0800e85d 	.word	0x0800e85d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e85c:	4b09      	ldr	r3, [pc, #36]	@ (800e884 <USBH_UserProcess+0x58>)
 800e85e:	2203      	movs	r2, #3
 800e860:	701a      	strb	r2, [r3, #0]
  break;
 800e862:	e008      	b.n	800e876 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e864:	4b07      	ldr	r3, [pc, #28]	@ (800e884 <USBH_UserProcess+0x58>)
 800e866:	2202      	movs	r2, #2
 800e868:	701a      	strb	r2, [r3, #0]
  break;
 800e86a:	e004      	b.n	800e876 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e86c:	4b05      	ldr	r3, [pc, #20]	@ (800e884 <USBH_UserProcess+0x58>)
 800e86e:	2201      	movs	r2, #1
 800e870:	701a      	strb	r2, [r3, #0]
  break;
 800e872:	e000      	b.n	800e876 <USBH_UserProcess+0x4a>

  default:
  break;
 800e874:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e876:	bf00      	nop
 800e878:	370c      	adds	r7, #12
 800e87a:	46bd      	mov	sp, r7
 800e87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e880:	4770      	bx	lr
 800e882:	bf00      	nop
 800e884:	20011d20 	.word	0x20011d20

0800e888 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b08a      	sub	sp, #40	@ 0x28
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e890:	f107 0314 	add.w	r3, r7, #20
 800e894:	2200      	movs	r2, #0
 800e896:	601a      	str	r2, [r3, #0]
 800e898:	605a      	str	r2, [r3, #4]
 800e89a:	609a      	str	r2, [r3, #8]
 800e89c:	60da      	str	r2, [r3, #12]
 800e89e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e8a8:	d13a      	bne.n	800e920 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	613b      	str	r3, [r7, #16]
 800e8ae:	4b1e      	ldr	r3, [pc, #120]	@ (800e928 <HAL_HCD_MspInit+0xa0>)
 800e8b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8b2:	4a1d      	ldr	r2, [pc, #116]	@ (800e928 <HAL_HCD_MspInit+0xa0>)
 800e8b4:	f043 0301 	orr.w	r3, r3, #1
 800e8b8:	6313      	str	r3, [r2, #48]	@ 0x30
 800e8ba:	4b1b      	ldr	r3, [pc, #108]	@ (800e928 <HAL_HCD_MspInit+0xa0>)
 800e8bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8be:	f003 0301 	and.w	r3, r3, #1
 800e8c2:	613b      	str	r3, [r7, #16]
 800e8c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e8c6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e8ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8cc:	2302      	movs	r3, #2
 800e8ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e8d4:	2303      	movs	r3, #3
 800e8d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e8d8:	230a      	movs	r3, #10
 800e8da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e8dc:	f107 0314 	add.w	r3, r7, #20
 800e8e0:	4619      	mov	r1, r3
 800e8e2:	4812      	ldr	r0, [pc, #72]	@ (800e92c <HAL_HCD_MspInit+0xa4>)
 800e8e4:	f7f6 f9d8 	bl	8004c98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e8e8:	4b0f      	ldr	r3, [pc, #60]	@ (800e928 <HAL_HCD_MspInit+0xa0>)
 800e8ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e8ec:	4a0e      	ldr	r2, [pc, #56]	@ (800e928 <HAL_HCD_MspInit+0xa0>)
 800e8ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8f2:	6353      	str	r3, [r2, #52]	@ 0x34
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	60fb      	str	r3, [r7, #12]
 800e8f8:	4b0b      	ldr	r3, [pc, #44]	@ (800e928 <HAL_HCD_MspInit+0xa0>)
 800e8fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e8fc:	4a0a      	ldr	r2, [pc, #40]	@ (800e928 <HAL_HCD_MspInit+0xa0>)
 800e8fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e902:	6453      	str	r3, [r2, #68]	@ 0x44
 800e904:	4b08      	ldr	r3, [pc, #32]	@ (800e928 <HAL_HCD_MspInit+0xa0>)
 800e906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e908:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e90c:	60fb      	str	r3, [r7, #12]
 800e90e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e910:	2200      	movs	r2, #0
 800e912:	2100      	movs	r1, #0
 800e914:	2043      	movs	r0, #67	@ 0x43
 800e916:	f7f5 fee2 	bl	80046de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e91a:	2043      	movs	r0, #67	@ 0x43
 800e91c:	f7f5 fefb 	bl	8004716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e920:	bf00      	nop
 800e922:	3728      	adds	r7, #40	@ 0x28
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}
 800e928:	40023800 	.word	0x40023800
 800e92c:	40020000 	.word	0x40020000

0800e930 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e93e:	4618      	mov	r0, r3
 800e940:	f7fe ff6d 	bl	800d81e <USBH_LL_IncTimer>
}
 800e944:	bf00      	nop
 800e946:	3708      	adds	r7, #8
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7fe ffa5 	bl	800d8aa <USBH_LL_Connect>
}
 800e960:	bf00      	nop
 800e962:	3708      	adds	r7, #8
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}

0800e968 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e976:	4618      	mov	r0, r3
 800e978:	f7fe ffae 	bl	800d8d8 <USBH_LL_Disconnect>
}
 800e97c:	bf00      	nop
 800e97e:	3708      	adds	r7, #8
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}

0800e984 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e984:	b480      	push	{r7}
 800e986:	b083      	sub	sp, #12
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	460b      	mov	r3, r1
 800e98e:	70fb      	strb	r3, [r7, #3]
 800e990:	4613      	mov	r3, r2
 800e992:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e994:	bf00      	nop
 800e996:	370c      	adds	r7, #12
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr

0800e9a0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b082      	sub	sp, #8
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f7fe ff5f 	bl	800d872 <USBH_LL_PortEnabled>
}
 800e9b4:	bf00      	nop
 800e9b6:	3708      	adds	r7, #8
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b082      	sub	sp, #8
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7fe ff5f 	bl	800d88e <USBH_LL_PortDisabled>
}
 800e9d0:	bf00      	nop
 800e9d2:	3708      	adds	r7, #8
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800e9e6:	2b01      	cmp	r3, #1
 800e9e8:	d12a      	bne.n	800ea40 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e9ea:	4a18      	ldr	r2, [pc, #96]	@ (800ea4c <USBH_LL_Init+0x74>)
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	4a15      	ldr	r2, [pc, #84]	@ (800ea4c <USBH_LL_Init+0x74>)
 800e9f6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e9fa:	4b14      	ldr	r3, [pc, #80]	@ (800ea4c <USBH_LL_Init+0x74>)
 800e9fc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ea00:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ea02:	4b12      	ldr	r3, [pc, #72]	@ (800ea4c <USBH_LL_Init+0x74>)
 800ea04:	2208      	movs	r2, #8
 800ea06:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ea08:	4b10      	ldr	r3, [pc, #64]	@ (800ea4c <USBH_LL_Init+0x74>)
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ea0e:	4b0f      	ldr	r3, [pc, #60]	@ (800ea4c <USBH_LL_Init+0x74>)
 800ea10:	2200      	movs	r2, #0
 800ea12:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ea14:	4b0d      	ldr	r3, [pc, #52]	@ (800ea4c <USBH_LL_Init+0x74>)
 800ea16:	2202      	movs	r2, #2
 800ea18:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ea1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ea4c <USBH_LL_Init+0x74>)
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ea20:	480a      	ldr	r0, [pc, #40]	@ (800ea4c <USBH_LL_Init+0x74>)
 800ea22:	f7f6 fb2f 	bl	8005084 <HAL_HCD_Init>
 800ea26:	4603      	mov	r3, r0
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d001      	beq.n	800ea30 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ea2c:	f7f5 fa30 	bl	8003e90 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ea30:	4806      	ldr	r0, [pc, #24]	@ (800ea4c <USBH_LL_Init+0x74>)
 800ea32:	f7f6 ff8f 	bl	8005954 <HAL_HCD_GetCurrentFrame>
 800ea36:	4603      	mov	r3, r0
 800ea38:	4619      	mov	r1, r3
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f7fe fee0 	bl	800d800 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ea40:	2300      	movs	r3, #0
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3708      	adds	r7, #8
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	20011d24 	.word	0x20011d24

0800ea50 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b084      	sub	sp, #16
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7f6 fefc 	bl	8005864 <HAL_HCD_Start>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ea70:	7bfb      	ldrb	r3, [r7, #15]
 800ea72:	4618      	mov	r0, r3
 800ea74:	f000 f95e 	bl	800ed34 <USBH_Get_USB_Status>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3710      	adds	r7, #16
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}

0800ea86 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ea86:	b580      	push	{r7, lr}
 800ea88:	b084      	sub	sp, #16
 800ea8a:	af00      	add	r7, sp, #0
 800ea8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ea92:	2300      	movs	r3, #0
 800ea94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f7f6 ff04 	bl	80058aa <HAL_HCD_Stop>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eaa6:	7bfb      	ldrb	r3, [r7, #15]
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f000 f943 	bl	800ed34 <USBH_Get_USB_Status>
 800eaae:	4603      	mov	r3, r0
 800eab0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eab2:	7bbb      	ldrb	r3, [r7, #14]
}
 800eab4:	4618      	mov	r0, r3
 800eab6:	3710      	adds	r7, #16
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}

0800eabc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b084      	sub	sp, #16
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800eac4:	2301      	movs	r3, #1
 800eac6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800eace:	4618      	mov	r0, r3
 800ead0:	f7f6 ff4e 	bl	8005970 <HAL_HCD_GetCurrentSpeed>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b02      	cmp	r3, #2
 800ead8:	d00c      	beq.n	800eaf4 <USBH_LL_GetSpeed+0x38>
 800eada:	2b02      	cmp	r3, #2
 800eadc:	d80d      	bhi.n	800eafa <USBH_LL_GetSpeed+0x3e>
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d002      	beq.n	800eae8 <USBH_LL_GetSpeed+0x2c>
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	d003      	beq.n	800eaee <USBH_LL_GetSpeed+0x32>
 800eae6:	e008      	b.n	800eafa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800eae8:	2300      	movs	r3, #0
 800eaea:	73fb      	strb	r3, [r7, #15]
    break;
 800eaec:	e008      	b.n	800eb00 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800eaee:	2301      	movs	r3, #1
 800eaf0:	73fb      	strb	r3, [r7, #15]
    break;
 800eaf2:	e005      	b.n	800eb00 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800eaf4:	2302      	movs	r3, #2
 800eaf6:	73fb      	strb	r3, [r7, #15]
    break;
 800eaf8:	e002      	b.n	800eb00 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800eafa:	2301      	movs	r3, #1
 800eafc:	73fb      	strb	r3, [r7, #15]
    break;
 800eafe:	bf00      	nop
  }
  return  speed;
 800eb00:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	3710      	adds	r7, #16
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}

0800eb0a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800eb0a:	b580      	push	{r7, lr}
 800eb0c:	b084      	sub	sp, #16
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb12:	2300      	movs	r3, #0
 800eb14:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eb16:	2300      	movs	r3, #0
 800eb18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7f6 fedf 	bl	80058e4 <HAL_HCD_ResetPort>
 800eb26:	4603      	mov	r3, r0
 800eb28:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eb2a:	7bfb      	ldrb	r3, [r7, #15]
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f000 f901 	bl	800ed34 <USBH_Get_USB_Status>
 800eb32:	4603      	mov	r3, r0
 800eb34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb36:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3710      	adds	r7, #16
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}

0800eb40 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b082      	sub	sp, #8
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	460b      	mov	r3, r1
 800eb4a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800eb52:	78fa      	ldrb	r2, [r7, #3]
 800eb54:	4611      	mov	r1, r2
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7f6 fee7 	bl	800592a <HAL_HCD_HC_GetXferCount>
 800eb5c:	4603      	mov	r3, r0
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3708      	adds	r7, #8
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}

0800eb66 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800eb66:	b590      	push	{r4, r7, lr}
 800eb68:	b089      	sub	sp, #36	@ 0x24
 800eb6a:	af04      	add	r7, sp, #16
 800eb6c:	6078      	str	r0, [r7, #4]
 800eb6e:	4608      	mov	r0, r1
 800eb70:	4611      	mov	r1, r2
 800eb72:	461a      	mov	r2, r3
 800eb74:	4603      	mov	r3, r0
 800eb76:	70fb      	strb	r3, [r7, #3]
 800eb78:	460b      	mov	r3, r1
 800eb7a:	70bb      	strb	r3, [r7, #2]
 800eb7c:	4613      	mov	r3, r2
 800eb7e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb80:	2300      	movs	r3, #0
 800eb82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eb84:	2300      	movs	r3, #0
 800eb86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800eb8e:	787c      	ldrb	r4, [r7, #1]
 800eb90:	78ba      	ldrb	r2, [r7, #2]
 800eb92:	78f9      	ldrb	r1, [r7, #3]
 800eb94:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800eb96:	9302      	str	r3, [sp, #8]
 800eb98:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800eb9c:	9301      	str	r3, [sp, #4]
 800eb9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eba2:	9300      	str	r3, [sp, #0]
 800eba4:	4623      	mov	r3, r4
 800eba6:	f7f6 fad4 	bl	8005152 <HAL_HCD_HC_Init>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ebae:	7bfb      	ldrb	r3, [r7, #15]
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f000 f8bf 	bl	800ed34 <USBH_Get_USB_Status>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebba:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3714      	adds	r7, #20
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd90      	pop	{r4, r7, pc}

0800ebc4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	460b      	mov	r3, r1
 800ebce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ebde:	78fa      	ldrb	r2, [r7, #3]
 800ebe0:	4611      	mov	r1, r2
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f7f6 fb6d 	bl	80052c2 <HAL_HCD_HC_Halt>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ebec:	7bfb      	ldrb	r3, [r7, #15]
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f000 f8a0 	bl	800ed34 <USBH_Get_USB_Status>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3710      	adds	r7, #16
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}

0800ec02 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ec02:	b590      	push	{r4, r7, lr}
 800ec04:	b089      	sub	sp, #36	@ 0x24
 800ec06:	af04      	add	r7, sp, #16
 800ec08:	6078      	str	r0, [r7, #4]
 800ec0a:	4608      	mov	r0, r1
 800ec0c:	4611      	mov	r1, r2
 800ec0e:	461a      	mov	r2, r3
 800ec10:	4603      	mov	r3, r0
 800ec12:	70fb      	strb	r3, [r7, #3]
 800ec14:	460b      	mov	r3, r1
 800ec16:	70bb      	strb	r3, [r7, #2]
 800ec18:	4613      	mov	r3, r2
 800ec1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ec20:	2300      	movs	r3, #0
 800ec22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ec2a:	787c      	ldrb	r4, [r7, #1]
 800ec2c:	78ba      	ldrb	r2, [r7, #2]
 800ec2e:	78f9      	ldrb	r1, [r7, #3]
 800ec30:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ec34:	9303      	str	r3, [sp, #12]
 800ec36:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ec38:	9302      	str	r3, [sp, #8]
 800ec3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec3c:	9301      	str	r3, [sp, #4]
 800ec3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ec42:	9300      	str	r3, [sp, #0]
 800ec44:	4623      	mov	r3, r4
 800ec46:	f7f6 fb5f 	bl	8005308 <HAL_HCD_HC_SubmitRequest>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ec4e:	7bfb      	ldrb	r3, [r7, #15]
 800ec50:	4618      	mov	r0, r3
 800ec52:	f000 f86f 	bl	800ed34 <USBH_Get_USB_Status>
 800ec56:	4603      	mov	r3, r0
 800ec58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3714      	adds	r7, #20
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd90      	pop	{r4, r7, pc}

0800ec64 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ec76:	78fa      	ldrb	r2, [r7, #3]
 800ec78:	4611      	mov	r1, r2
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7f6 fe40 	bl	8005900 <HAL_HCD_HC_GetURBState>
 800ec80:	4603      	mov	r3, r0
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3708      	adds	r7, #8
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}

0800ec8a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ec8a:	b580      	push	{r7, lr}
 800ec8c:	b082      	sub	sp, #8
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
 800ec92:	460b      	mov	r3, r1
 800ec94:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ec9c:	2b01      	cmp	r3, #1
 800ec9e:	d103      	bne.n	800eca8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800eca0:	78fb      	ldrb	r3, [r7, #3]
 800eca2:	4618      	mov	r0, r3
 800eca4:	f000 f872 	bl	800ed8c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800eca8:	20c8      	movs	r0, #200	@ 0xc8
 800ecaa:	f7f5 fc19 	bl	80044e0 <HAL_Delay>
  return USBH_OK;
 800ecae:	2300      	movs	r3, #0
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3708      	adds	r7, #8
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}

0800ecb8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b085      	sub	sp, #20
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	460b      	mov	r3, r1
 800ecc2:	70fb      	strb	r3, [r7, #3]
 800ecc4:	4613      	mov	r3, r2
 800ecc6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ecce:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ecd0:	78fa      	ldrb	r2, [r7, #3]
 800ecd2:	68f9      	ldr	r1, [r7, #12]
 800ecd4:	4613      	mov	r3, r2
 800ecd6:	011b      	lsls	r3, r3, #4
 800ecd8:	1a9b      	subs	r3, r3, r2
 800ecda:	009b      	lsls	r3, r3, #2
 800ecdc:	440b      	add	r3, r1
 800ecde:	3317      	adds	r3, #23
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d00a      	beq.n	800ecfc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ece6:	78fa      	ldrb	r2, [r7, #3]
 800ece8:	68f9      	ldr	r1, [r7, #12]
 800ecea:	4613      	mov	r3, r2
 800ecec:	011b      	lsls	r3, r3, #4
 800ecee:	1a9b      	subs	r3, r3, r2
 800ecf0:	009b      	lsls	r3, r3, #2
 800ecf2:	440b      	add	r3, r1
 800ecf4:	333c      	adds	r3, #60	@ 0x3c
 800ecf6:	78ba      	ldrb	r2, [r7, #2]
 800ecf8:	701a      	strb	r2, [r3, #0]
 800ecfa:	e009      	b.n	800ed10 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ecfc:	78fa      	ldrb	r2, [r7, #3]
 800ecfe:	68f9      	ldr	r1, [r7, #12]
 800ed00:	4613      	mov	r3, r2
 800ed02:	011b      	lsls	r3, r3, #4
 800ed04:	1a9b      	subs	r3, r3, r2
 800ed06:	009b      	lsls	r3, r3, #2
 800ed08:	440b      	add	r3, r1
 800ed0a:	333d      	adds	r3, #61	@ 0x3d
 800ed0c:	78ba      	ldrb	r2, [r7, #2]
 800ed0e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ed10:	2300      	movs	r3, #0
}
 800ed12:	4618      	mov	r0, r3
 800ed14:	3714      	adds	r7, #20
 800ed16:	46bd      	mov	sp, r7
 800ed18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1c:	4770      	bx	lr

0800ed1e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ed1e:	b580      	push	{r7, lr}
 800ed20:	b082      	sub	sp, #8
 800ed22:	af00      	add	r7, sp, #0
 800ed24:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f7f5 fbda 	bl	80044e0 <HAL_Delay>
}
 800ed2c:	bf00      	nop
 800ed2e:	3708      	adds	r7, #8
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ed34:	b480      	push	{r7}
 800ed36:	b085      	sub	sp, #20
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ed42:	79fb      	ldrb	r3, [r7, #7]
 800ed44:	2b03      	cmp	r3, #3
 800ed46:	d817      	bhi.n	800ed78 <USBH_Get_USB_Status+0x44>
 800ed48:	a201      	add	r2, pc, #4	@ (adr r2, 800ed50 <USBH_Get_USB_Status+0x1c>)
 800ed4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed4e:	bf00      	nop
 800ed50:	0800ed61 	.word	0x0800ed61
 800ed54:	0800ed67 	.word	0x0800ed67
 800ed58:	0800ed6d 	.word	0x0800ed6d
 800ed5c:	0800ed73 	.word	0x0800ed73
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ed60:	2300      	movs	r3, #0
 800ed62:	73fb      	strb	r3, [r7, #15]
    break;
 800ed64:	e00b      	b.n	800ed7e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ed66:	2302      	movs	r3, #2
 800ed68:	73fb      	strb	r3, [r7, #15]
    break;
 800ed6a:	e008      	b.n	800ed7e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ed70:	e005      	b.n	800ed7e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ed72:	2302      	movs	r3, #2
 800ed74:	73fb      	strb	r3, [r7, #15]
    break;
 800ed76:	e002      	b.n	800ed7e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ed78:	2302      	movs	r3, #2
 800ed7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ed7c:	bf00      	nop
  }
  return usb_status;
 800ed7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	3714      	adds	r7, #20
 800ed84:	46bd      	mov	sp, r7
 800ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8a:	4770      	bx	lr

0800ed8c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b084      	sub	sp, #16
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	4603      	mov	r3, r0
 800ed94:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ed96:	79fb      	ldrb	r3, [r7, #7]
 800ed98:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ed9a:	79fb      	ldrb	r3, [r7, #7]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d102      	bne.n	800eda6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800eda0:	2300      	movs	r3, #0
 800eda2:	73fb      	strb	r3, [r7, #15]
 800eda4:	e001      	b.n	800edaa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800eda6:	2301      	movs	r3, #1
 800eda8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,(GPIO_PinState)data);
 800edaa:	7bfb      	ldrb	r3, [r7, #15]
 800edac:	461a      	mov	r2, r3
 800edae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800edb2:	4803      	ldr	r0, [pc, #12]	@ (800edc0 <MX_DriverVbusFS+0x34>)
 800edb4:	f7f6 f934 	bl	8005020 <HAL_GPIO_WritePin>
}
 800edb8:	bf00      	nop
 800edba:	3710      	adds	r7, #16
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}
 800edc0:	40020000 	.word	0x40020000

0800edc4 <atoi>:
 800edc4:	220a      	movs	r2, #10
 800edc6:	2100      	movs	r1, #0
 800edc8:	f000 b938 	b.w	800f03c <strtol>

0800edcc <malloc>:
 800edcc:	4b02      	ldr	r3, [pc, #8]	@ (800edd8 <malloc+0xc>)
 800edce:	4601      	mov	r1, r0
 800edd0:	6818      	ldr	r0, [r3, #0]
 800edd2:	f000 b82d 	b.w	800ee30 <_malloc_r>
 800edd6:	bf00      	nop
 800edd8:	200002a0 	.word	0x200002a0

0800eddc <free>:
 800eddc:	4b02      	ldr	r3, [pc, #8]	@ (800ede8 <free+0xc>)
 800edde:	4601      	mov	r1, r0
 800ede0:	6818      	ldr	r0, [r3, #0]
 800ede2:	f000 bc1b 	b.w	800f61c <_free_r>
 800ede6:	bf00      	nop
 800ede8:	200002a0 	.word	0x200002a0

0800edec <sbrk_aligned>:
 800edec:	b570      	push	{r4, r5, r6, lr}
 800edee:	4e0f      	ldr	r6, [pc, #60]	@ (800ee2c <sbrk_aligned+0x40>)
 800edf0:	460c      	mov	r4, r1
 800edf2:	6831      	ldr	r1, [r6, #0]
 800edf4:	4605      	mov	r5, r0
 800edf6:	b911      	cbnz	r1, 800edfe <sbrk_aligned+0x12>
 800edf8:	f000 fbb8 	bl	800f56c <_sbrk_r>
 800edfc:	6030      	str	r0, [r6, #0]
 800edfe:	4621      	mov	r1, r4
 800ee00:	4628      	mov	r0, r5
 800ee02:	f000 fbb3 	bl	800f56c <_sbrk_r>
 800ee06:	1c43      	adds	r3, r0, #1
 800ee08:	d103      	bne.n	800ee12 <sbrk_aligned+0x26>
 800ee0a:	f04f 34ff 	mov.w	r4, #4294967295
 800ee0e:	4620      	mov	r0, r4
 800ee10:	bd70      	pop	{r4, r5, r6, pc}
 800ee12:	1cc4      	adds	r4, r0, #3
 800ee14:	f024 0403 	bic.w	r4, r4, #3
 800ee18:	42a0      	cmp	r0, r4
 800ee1a:	d0f8      	beq.n	800ee0e <sbrk_aligned+0x22>
 800ee1c:	1a21      	subs	r1, r4, r0
 800ee1e:	4628      	mov	r0, r5
 800ee20:	f000 fba4 	bl	800f56c <_sbrk_r>
 800ee24:	3001      	adds	r0, #1
 800ee26:	d1f2      	bne.n	800ee0e <sbrk_aligned+0x22>
 800ee28:	e7ef      	b.n	800ee0a <sbrk_aligned+0x1e>
 800ee2a:	bf00      	nop
 800ee2c:	20012104 	.word	0x20012104

0800ee30 <_malloc_r>:
 800ee30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee34:	1ccd      	adds	r5, r1, #3
 800ee36:	f025 0503 	bic.w	r5, r5, #3
 800ee3a:	3508      	adds	r5, #8
 800ee3c:	2d0c      	cmp	r5, #12
 800ee3e:	bf38      	it	cc
 800ee40:	250c      	movcc	r5, #12
 800ee42:	2d00      	cmp	r5, #0
 800ee44:	4606      	mov	r6, r0
 800ee46:	db01      	blt.n	800ee4c <_malloc_r+0x1c>
 800ee48:	42a9      	cmp	r1, r5
 800ee4a:	d904      	bls.n	800ee56 <_malloc_r+0x26>
 800ee4c:	230c      	movs	r3, #12
 800ee4e:	6033      	str	r3, [r6, #0]
 800ee50:	2000      	movs	r0, #0
 800ee52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ef2c <_malloc_r+0xfc>
 800ee5a:	f000 f869 	bl	800ef30 <__malloc_lock>
 800ee5e:	f8d8 3000 	ldr.w	r3, [r8]
 800ee62:	461c      	mov	r4, r3
 800ee64:	bb44      	cbnz	r4, 800eeb8 <_malloc_r+0x88>
 800ee66:	4629      	mov	r1, r5
 800ee68:	4630      	mov	r0, r6
 800ee6a:	f7ff ffbf 	bl	800edec <sbrk_aligned>
 800ee6e:	1c43      	adds	r3, r0, #1
 800ee70:	4604      	mov	r4, r0
 800ee72:	d158      	bne.n	800ef26 <_malloc_r+0xf6>
 800ee74:	f8d8 4000 	ldr.w	r4, [r8]
 800ee78:	4627      	mov	r7, r4
 800ee7a:	2f00      	cmp	r7, #0
 800ee7c:	d143      	bne.n	800ef06 <_malloc_r+0xd6>
 800ee7e:	2c00      	cmp	r4, #0
 800ee80:	d04b      	beq.n	800ef1a <_malloc_r+0xea>
 800ee82:	6823      	ldr	r3, [r4, #0]
 800ee84:	4639      	mov	r1, r7
 800ee86:	4630      	mov	r0, r6
 800ee88:	eb04 0903 	add.w	r9, r4, r3
 800ee8c:	f000 fb6e 	bl	800f56c <_sbrk_r>
 800ee90:	4581      	cmp	r9, r0
 800ee92:	d142      	bne.n	800ef1a <_malloc_r+0xea>
 800ee94:	6821      	ldr	r1, [r4, #0]
 800ee96:	1a6d      	subs	r5, r5, r1
 800ee98:	4629      	mov	r1, r5
 800ee9a:	4630      	mov	r0, r6
 800ee9c:	f7ff ffa6 	bl	800edec <sbrk_aligned>
 800eea0:	3001      	adds	r0, #1
 800eea2:	d03a      	beq.n	800ef1a <_malloc_r+0xea>
 800eea4:	6823      	ldr	r3, [r4, #0]
 800eea6:	442b      	add	r3, r5
 800eea8:	6023      	str	r3, [r4, #0]
 800eeaa:	f8d8 3000 	ldr.w	r3, [r8]
 800eeae:	685a      	ldr	r2, [r3, #4]
 800eeb0:	bb62      	cbnz	r2, 800ef0c <_malloc_r+0xdc>
 800eeb2:	f8c8 7000 	str.w	r7, [r8]
 800eeb6:	e00f      	b.n	800eed8 <_malloc_r+0xa8>
 800eeb8:	6822      	ldr	r2, [r4, #0]
 800eeba:	1b52      	subs	r2, r2, r5
 800eebc:	d420      	bmi.n	800ef00 <_malloc_r+0xd0>
 800eebe:	2a0b      	cmp	r2, #11
 800eec0:	d917      	bls.n	800eef2 <_malloc_r+0xc2>
 800eec2:	1961      	adds	r1, r4, r5
 800eec4:	42a3      	cmp	r3, r4
 800eec6:	6025      	str	r5, [r4, #0]
 800eec8:	bf18      	it	ne
 800eeca:	6059      	strne	r1, [r3, #4]
 800eecc:	6863      	ldr	r3, [r4, #4]
 800eece:	bf08      	it	eq
 800eed0:	f8c8 1000 	streq.w	r1, [r8]
 800eed4:	5162      	str	r2, [r4, r5]
 800eed6:	604b      	str	r3, [r1, #4]
 800eed8:	4630      	mov	r0, r6
 800eeda:	f000 f82f 	bl	800ef3c <__malloc_unlock>
 800eede:	f104 000b 	add.w	r0, r4, #11
 800eee2:	1d23      	adds	r3, r4, #4
 800eee4:	f020 0007 	bic.w	r0, r0, #7
 800eee8:	1ac2      	subs	r2, r0, r3
 800eeea:	bf1c      	itt	ne
 800eeec:	1a1b      	subne	r3, r3, r0
 800eeee:	50a3      	strne	r3, [r4, r2]
 800eef0:	e7af      	b.n	800ee52 <_malloc_r+0x22>
 800eef2:	6862      	ldr	r2, [r4, #4]
 800eef4:	42a3      	cmp	r3, r4
 800eef6:	bf0c      	ite	eq
 800eef8:	f8c8 2000 	streq.w	r2, [r8]
 800eefc:	605a      	strne	r2, [r3, #4]
 800eefe:	e7eb      	b.n	800eed8 <_malloc_r+0xa8>
 800ef00:	4623      	mov	r3, r4
 800ef02:	6864      	ldr	r4, [r4, #4]
 800ef04:	e7ae      	b.n	800ee64 <_malloc_r+0x34>
 800ef06:	463c      	mov	r4, r7
 800ef08:	687f      	ldr	r7, [r7, #4]
 800ef0a:	e7b6      	b.n	800ee7a <_malloc_r+0x4a>
 800ef0c:	461a      	mov	r2, r3
 800ef0e:	685b      	ldr	r3, [r3, #4]
 800ef10:	42a3      	cmp	r3, r4
 800ef12:	d1fb      	bne.n	800ef0c <_malloc_r+0xdc>
 800ef14:	2300      	movs	r3, #0
 800ef16:	6053      	str	r3, [r2, #4]
 800ef18:	e7de      	b.n	800eed8 <_malloc_r+0xa8>
 800ef1a:	230c      	movs	r3, #12
 800ef1c:	6033      	str	r3, [r6, #0]
 800ef1e:	4630      	mov	r0, r6
 800ef20:	f000 f80c 	bl	800ef3c <__malloc_unlock>
 800ef24:	e794      	b.n	800ee50 <_malloc_r+0x20>
 800ef26:	6005      	str	r5, [r0, #0]
 800ef28:	e7d6      	b.n	800eed8 <_malloc_r+0xa8>
 800ef2a:	bf00      	nop
 800ef2c:	20012108 	.word	0x20012108

0800ef30 <__malloc_lock>:
 800ef30:	4801      	ldr	r0, [pc, #4]	@ (800ef38 <__malloc_lock+0x8>)
 800ef32:	f000 bb68 	b.w	800f606 <__retarget_lock_acquire_recursive>
 800ef36:	bf00      	nop
 800ef38:	2001224c 	.word	0x2001224c

0800ef3c <__malloc_unlock>:
 800ef3c:	4801      	ldr	r0, [pc, #4]	@ (800ef44 <__malloc_unlock+0x8>)
 800ef3e:	f000 bb63 	b.w	800f608 <__retarget_lock_release_recursive>
 800ef42:	bf00      	nop
 800ef44:	2001224c 	.word	0x2001224c

0800ef48 <_strtol_l.constprop.0>:
 800ef48:	2b24      	cmp	r3, #36	@ 0x24
 800ef4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef4e:	4686      	mov	lr, r0
 800ef50:	4690      	mov	r8, r2
 800ef52:	d801      	bhi.n	800ef58 <_strtol_l.constprop.0+0x10>
 800ef54:	2b01      	cmp	r3, #1
 800ef56:	d106      	bne.n	800ef66 <_strtol_l.constprop.0+0x1e>
 800ef58:	f000 fb2a 	bl	800f5b0 <__errno>
 800ef5c:	2316      	movs	r3, #22
 800ef5e:	6003      	str	r3, [r0, #0]
 800ef60:	2000      	movs	r0, #0
 800ef62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef66:	4834      	ldr	r0, [pc, #208]	@ (800f038 <_strtol_l.constprop.0+0xf0>)
 800ef68:	460d      	mov	r5, r1
 800ef6a:	462a      	mov	r2, r5
 800ef6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef70:	5d06      	ldrb	r6, [r0, r4]
 800ef72:	f016 0608 	ands.w	r6, r6, #8
 800ef76:	d1f8      	bne.n	800ef6a <_strtol_l.constprop.0+0x22>
 800ef78:	2c2d      	cmp	r4, #45	@ 0x2d
 800ef7a:	d12d      	bne.n	800efd8 <_strtol_l.constprop.0+0x90>
 800ef7c:	782c      	ldrb	r4, [r5, #0]
 800ef7e:	2601      	movs	r6, #1
 800ef80:	1c95      	adds	r5, r2, #2
 800ef82:	f033 0210 	bics.w	r2, r3, #16
 800ef86:	d109      	bne.n	800ef9c <_strtol_l.constprop.0+0x54>
 800ef88:	2c30      	cmp	r4, #48	@ 0x30
 800ef8a:	d12a      	bne.n	800efe2 <_strtol_l.constprop.0+0x9a>
 800ef8c:	782a      	ldrb	r2, [r5, #0]
 800ef8e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ef92:	2a58      	cmp	r2, #88	@ 0x58
 800ef94:	d125      	bne.n	800efe2 <_strtol_l.constprop.0+0x9a>
 800ef96:	786c      	ldrb	r4, [r5, #1]
 800ef98:	2310      	movs	r3, #16
 800ef9a:	3502      	adds	r5, #2
 800ef9c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800efa0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800efa4:	2200      	movs	r2, #0
 800efa6:	fbbc f9f3 	udiv	r9, ip, r3
 800efaa:	4610      	mov	r0, r2
 800efac:	fb03 ca19 	mls	sl, r3, r9, ip
 800efb0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800efb4:	2f09      	cmp	r7, #9
 800efb6:	d81b      	bhi.n	800eff0 <_strtol_l.constprop.0+0xa8>
 800efb8:	463c      	mov	r4, r7
 800efba:	42a3      	cmp	r3, r4
 800efbc:	dd27      	ble.n	800f00e <_strtol_l.constprop.0+0xc6>
 800efbe:	1c57      	adds	r7, r2, #1
 800efc0:	d007      	beq.n	800efd2 <_strtol_l.constprop.0+0x8a>
 800efc2:	4581      	cmp	r9, r0
 800efc4:	d320      	bcc.n	800f008 <_strtol_l.constprop.0+0xc0>
 800efc6:	d101      	bne.n	800efcc <_strtol_l.constprop.0+0x84>
 800efc8:	45a2      	cmp	sl, r4
 800efca:	db1d      	blt.n	800f008 <_strtol_l.constprop.0+0xc0>
 800efcc:	fb00 4003 	mla	r0, r0, r3, r4
 800efd0:	2201      	movs	r2, #1
 800efd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800efd6:	e7eb      	b.n	800efb0 <_strtol_l.constprop.0+0x68>
 800efd8:	2c2b      	cmp	r4, #43	@ 0x2b
 800efda:	bf04      	itt	eq
 800efdc:	782c      	ldrbeq	r4, [r5, #0]
 800efde:	1c95      	addeq	r5, r2, #2
 800efe0:	e7cf      	b.n	800ef82 <_strtol_l.constprop.0+0x3a>
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d1da      	bne.n	800ef9c <_strtol_l.constprop.0+0x54>
 800efe6:	2c30      	cmp	r4, #48	@ 0x30
 800efe8:	bf0c      	ite	eq
 800efea:	2308      	moveq	r3, #8
 800efec:	230a      	movne	r3, #10
 800efee:	e7d5      	b.n	800ef9c <_strtol_l.constprop.0+0x54>
 800eff0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800eff4:	2f19      	cmp	r7, #25
 800eff6:	d801      	bhi.n	800effc <_strtol_l.constprop.0+0xb4>
 800eff8:	3c37      	subs	r4, #55	@ 0x37
 800effa:	e7de      	b.n	800efba <_strtol_l.constprop.0+0x72>
 800effc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f000:	2f19      	cmp	r7, #25
 800f002:	d804      	bhi.n	800f00e <_strtol_l.constprop.0+0xc6>
 800f004:	3c57      	subs	r4, #87	@ 0x57
 800f006:	e7d8      	b.n	800efba <_strtol_l.constprop.0+0x72>
 800f008:	f04f 32ff 	mov.w	r2, #4294967295
 800f00c:	e7e1      	b.n	800efd2 <_strtol_l.constprop.0+0x8a>
 800f00e:	1c53      	adds	r3, r2, #1
 800f010:	d108      	bne.n	800f024 <_strtol_l.constprop.0+0xdc>
 800f012:	2322      	movs	r3, #34	@ 0x22
 800f014:	f8ce 3000 	str.w	r3, [lr]
 800f018:	4660      	mov	r0, ip
 800f01a:	f1b8 0f00 	cmp.w	r8, #0
 800f01e:	d0a0      	beq.n	800ef62 <_strtol_l.constprop.0+0x1a>
 800f020:	1e69      	subs	r1, r5, #1
 800f022:	e006      	b.n	800f032 <_strtol_l.constprop.0+0xea>
 800f024:	b106      	cbz	r6, 800f028 <_strtol_l.constprop.0+0xe0>
 800f026:	4240      	negs	r0, r0
 800f028:	f1b8 0f00 	cmp.w	r8, #0
 800f02c:	d099      	beq.n	800ef62 <_strtol_l.constprop.0+0x1a>
 800f02e:	2a00      	cmp	r2, #0
 800f030:	d1f6      	bne.n	800f020 <_strtol_l.constprop.0+0xd8>
 800f032:	f8c8 1000 	str.w	r1, [r8]
 800f036:	e794      	b.n	800ef62 <_strtol_l.constprop.0+0x1a>
 800f038:	08012db1 	.word	0x08012db1

0800f03c <strtol>:
 800f03c:	4613      	mov	r3, r2
 800f03e:	460a      	mov	r2, r1
 800f040:	4601      	mov	r1, r0
 800f042:	4802      	ldr	r0, [pc, #8]	@ (800f04c <strtol+0x10>)
 800f044:	6800      	ldr	r0, [r0, #0]
 800f046:	f7ff bf7f 	b.w	800ef48 <_strtol_l.constprop.0>
 800f04a:	bf00      	nop
 800f04c:	200002a0 	.word	0x200002a0

0800f050 <std>:
 800f050:	2300      	movs	r3, #0
 800f052:	b510      	push	{r4, lr}
 800f054:	4604      	mov	r4, r0
 800f056:	e9c0 3300 	strd	r3, r3, [r0]
 800f05a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f05e:	6083      	str	r3, [r0, #8]
 800f060:	8181      	strh	r1, [r0, #12]
 800f062:	6643      	str	r3, [r0, #100]	@ 0x64
 800f064:	81c2      	strh	r2, [r0, #14]
 800f066:	6183      	str	r3, [r0, #24]
 800f068:	4619      	mov	r1, r3
 800f06a:	2208      	movs	r2, #8
 800f06c:	305c      	adds	r0, #92	@ 0x5c
 800f06e:	f000 fa41 	bl	800f4f4 <memset>
 800f072:	4b0d      	ldr	r3, [pc, #52]	@ (800f0a8 <std+0x58>)
 800f074:	6263      	str	r3, [r4, #36]	@ 0x24
 800f076:	4b0d      	ldr	r3, [pc, #52]	@ (800f0ac <std+0x5c>)
 800f078:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f07a:	4b0d      	ldr	r3, [pc, #52]	@ (800f0b0 <std+0x60>)
 800f07c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f07e:	4b0d      	ldr	r3, [pc, #52]	@ (800f0b4 <std+0x64>)
 800f080:	6323      	str	r3, [r4, #48]	@ 0x30
 800f082:	4b0d      	ldr	r3, [pc, #52]	@ (800f0b8 <std+0x68>)
 800f084:	6224      	str	r4, [r4, #32]
 800f086:	429c      	cmp	r4, r3
 800f088:	d006      	beq.n	800f098 <std+0x48>
 800f08a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f08e:	4294      	cmp	r4, r2
 800f090:	d002      	beq.n	800f098 <std+0x48>
 800f092:	33d0      	adds	r3, #208	@ 0xd0
 800f094:	429c      	cmp	r4, r3
 800f096:	d105      	bne.n	800f0a4 <std+0x54>
 800f098:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f09c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0a0:	f000 bab0 	b.w	800f604 <__retarget_lock_init_recursive>
 800f0a4:	bd10      	pop	{r4, pc}
 800f0a6:	bf00      	nop
 800f0a8:	0800f305 	.word	0x0800f305
 800f0ac:	0800f327 	.word	0x0800f327
 800f0b0:	0800f35f 	.word	0x0800f35f
 800f0b4:	0800f383 	.word	0x0800f383
 800f0b8:	2001210c 	.word	0x2001210c

0800f0bc <stdio_exit_handler>:
 800f0bc:	4a02      	ldr	r2, [pc, #8]	@ (800f0c8 <stdio_exit_handler+0xc>)
 800f0be:	4903      	ldr	r1, [pc, #12]	@ (800f0cc <stdio_exit_handler+0x10>)
 800f0c0:	4803      	ldr	r0, [pc, #12]	@ (800f0d0 <stdio_exit_handler+0x14>)
 800f0c2:	f000 b869 	b.w	800f198 <_fwalk_sglue>
 800f0c6:	bf00      	nop
 800f0c8:	20000294 	.word	0x20000294
 800f0cc:	08010009 	.word	0x08010009
 800f0d0:	200002a4 	.word	0x200002a4

0800f0d4 <cleanup_stdio>:
 800f0d4:	6841      	ldr	r1, [r0, #4]
 800f0d6:	4b0c      	ldr	r3, [pc, #48]	@ (800f108 <cleanup_stdio+0x34>)
 800f0d8:	4299      	cmp	r1, r3
 800f0da:	b510      	push	{r4, lr}
 800f0dc:	4604      	mov	r4, r0
 800f0de:	d001      	beq.n	800f0e4 <cleanup_stdio+0x10>
 800f0e0:	f000 ff92 	bl	8010008 <_fflush_r>
 800f0e4:	68a1      	ldr	r1, [r4, #8]
 800f0e6:	4b09      	ldr	r3, [pc, #36]	@ (800f10c <cleanup_stdio+0x38>)
 800f0e8:	4299      	cmp	r1, r3
 800f0ea:	d002      	beq.n	800f0f2 <cleanup_stdio+0x1e>
 800f0ec:	4620      	mov	r0, r4
 800f0ee:	f000 ff8b 	bl	8010008 <_fflush_r>
 800f0f2:	68e1      	ldr	r1, [r4, #12]
 800f0f4:	4b06      	ldr	r3, [pc, #24]	@ (800f110 <cleanup_stdio+0x3c>)
 800f0f6:	4299      	cmp	r1, r3
 800f0f8:	d004      	beq.n	800f104 <cleanup_stdio+0x30>
 800f0fa:	4620      	mov	r0, r4
 800f0fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f100:	f000 bf82 	b.w	8010008 <_fflush_r>
 800f104:	bd10      	pop	{r4, pc}
 800f106:	bf00      	nop
 800f108:	2001210c 	.word	0x2001210c
 800f10c:	20012174 	.word	0x20012174
 800f110:	200121dc 	.word	0x200121dc

0800f114 <global_stdio_init.part.0>:
 800f114:	b510      	push	{r4, lr}
 800f116:	4b0b      	ldr	r3, [pc, #44]	@ (800f144 <global_stdio_init.part.0+0x30>)
 800f118:	4c0b      	ldr	r4, [pc, #44]	@ (800f148 <global_stdio_init.part.0+0x34>)
 800f11a:	4a0c      	ldr	r2, [pc, #48]	@ (800f14c <global_stdio_init.part.0+0x38>)
 800f11c:	601a      	str	r2, [r3, #0]
 800f11e:	4620      	mov	r0, r4
 800f120:	2200      	movs	r2, #0
 800f122:	2104      	movs	r1, #4
 800f124:	f7ff ff94 	bl	800f050 <std>
 800f128:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f12c:	2201      	movs	r2, #1
 800f12e:	2109      	movs	r1, #9
 800f130:	f7ff ff8e 	bl	800f050 <std>
 800f134:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f138:	2202      	movs	r2, #2
 800f13a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f13e:	2112      	movs	r1, #18
 800f140:	f7ff bf86 	b.w	800f050 <std>
 800f144:	20012244 	.word	0x20012244
 800f148:	2001210c 	.word	0x2001210c
 800f14c:	0800f0bd 	.word	0x0800f0bd

0800f150 <__sfp_lock_acquire>:
 800f150:	4801      	ldr	r0, [pc, #4]	@ (800f158 <__sfp_lock_acquire+0x8>)
 800f152:	f000 ba58 	b.w	800f606 <__retarget_lock_acquire_recursive>
 800f156:	bf00      	nop
 800f158:	2001224d 	.word	0x2001224d

0800f15c <__sfp_lock_release>:
 800f15c:	4801      	ldr	r0, [pc, #4]	@ (800f164 <__sfp_lock_release+0x8>)
 800f15e:	f000 ba53 	b.w	800f608 <__retarget_lock_release_recursive>
 800f162:	bf00      	nop
 800f164:	2001224d 	.word	0x2001224d

0800f168 <__sinit>:
 800f168:	b510      	push	{r4, lr}
 800f16a:	4604      	mov	r4, r0
 800f16c:	f7ff fff0 	bl	800f150 <__sfp_lock_acquire>
 800f170:	6a23      	ldr	r3, [r4, #32]
 800f172:	b11b      	cbz	r3, 800f17c <__sinit+0x14>
 800f174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f178:	f7ff bff0 	b.w	800f15c <__sfp_lock_release>
 800f17c:	4b04      	ldr	r3, [pc, #16]	@ (800f190 <__sinit+0x28>)
 800f17e:	6223      	str	r3, [r4, #32]
 800f180:	4b04      	ldr	r3, [pc, #16]	@ (800f194 <__sinit+0x2c>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d1f5      	bne.n	800f174 <__sinit+0xc>
 800f188:	f7ff ffc4 	bl	800f114 <global_stdio_init.part.0>
 800f18c:	e7f2      	b.n	800f174 <__sinit+0xc>
 800f18e:	bf00      	nop
 800f190:	0800f0d5 	.word	0x0800f0d5
 800f194:	20012244 	.word	0x20012244

0800f198 <_fwalk_sglue>:
 800f198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f19c:	4607      	mov	r7, r0
 800f19e:	4688      	mov	r8, r1
 800f1a0:	4614      	mov	r4, r2
 800f1a2:	2600      	movs	r6, #0
 800f1a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f1a8:	f1b9 0901 	subs.w	r9, r9, #1
 800f1ac:	d505      	bpl.n	800f1ba <_fwalk_sglue+0x22>
 800f1ae:	6824      	ldr	r4, [r4, #0]
 800f1b0:	2c00      	cmp	r4, #0
 800f1b2:	d1f7      	bne.n	800f1a4 <_fwalk_sglue+0xc>
 800f1b4:	4630      	mov	r0, r6
 800f1b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1ba:	89ab      	ldrh	r3, [r5, #12]
 800f1bc:	2b01      	cmp	r3, #1
 800f1be:	d907      	bls.n	800f1d0 <_fwalk_sglue+0x38>
 800f1c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	d003      	beq.n	800f1d0 <_fwalk_sglue+0x38>
 800f1c8:	4629      	mov	r1, r5
 800f1ca:	4638      	mov	r0, r7
 800f1cc:	47c0      	blx	r8
 800f1ce:	4306      	orrs	r6, r0
 800f1d0:	3568      	adds	r5, #104	@ 0x68
 800f1d2:	e7e9      	b.n	800f1a8 <_fwalk_sglue+0x10>

0800f1d4 <iprintf>:
 800f1d4:	b40f      	push	{r0, r1, r2, r3}
 800f1d6:	b507      	push	{r0, r1, r2, lr}
 800f1d8:	4906      	ldr	r1, [pc, #24]	@ (800f1f4 <iprintf+0x20>)
 800f1da:	ab04      	add	r3, sp, #16
 800f1dc:	6808      	ldr	r0, [r1, #0]
 800f1de:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1e2:	6881      	ldr	r1, [r0, #8]
 800f1e4:	9301      	str	r3, [sp, #4]
 800f1e6:	f000 fbe5 	bl	800f9b4 <_vfiprintf_r>
 800f1ea:	b003      	add	sp, #12
 800f1ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1f0:	b004      	add	sp, #16
 800f1f2:	4770      	bx	lr
 800f1f4:	200002a0 	.word	0x200002a0

0800f1f8 <putchar>:
 800f1f8:	4b02      	ldr	r3, [pc, #8]	@ (800f204 <putchar+0xc>)
 800f1fa:	4601      	mov	r1, r0
 800f1fc:	6818      	ldr	r0, [r3, #0]
 800f1fe:	6882      	ldr	r2, [r0, #8]
 800f200:	f000 bf8c 	b.w	801011c <_putc_r>
 800f204:	200002a0 	.word	0x200002a0

0800f208 <_puts_r>:
 800f208:	6a03      	ldr	r3, [r0, #32]
 800f20a:	b570      	push	{r4, r5, r6, lr}
 800f20c:	6884      	ldr	r4, [r0, #8]
 800f20e:	4605      	mov	r5, r0
 800f210:	460e      	mov	r6, r1
 800f212:	b90b      	cbnz	r3, 800f218 <_puts_r+0x10>
 800f214:	f7ff ffa8 	bl	800f168 <__sinit>
 800f218:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f21a:	07db      	lsls	r3, r3, #31
 800f21c:	d405      	bmi.n	800f22a <_puts_r+0x22>
 800f21e:	89a3      	ldrh	r3, [r4, #12]
 800f220:	0598      	lsls	r0, r3, #22
 800f222:	d402      	bmi.n	800f22a <_puts_r+0x22>
 800f224:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f226:	f000 f9ee 	bl	800f606 <__retarget_lock_acquire_recursive>
 800f22a:	89a3      	ldrh	r3, [r4, #12]
 800f22c:	0719      	lsls	r1, r3, #28
 800f22e:	d502      	bpl.n	800f236 <_puts_r+0x2e>
 800f230:	6923      	ldr	r3, [r4, #16]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d135      	bne.n	800f2a2 <_puts_r+0x9a>
 800f236:	4621      	mov	r1, r4
 800f238:	4628      	mov	r0, r5
 800f23a:	f000 f905 	bl	800f448 <__swsetup_r>
 800f23e:	b380      	cbz	r0, 800f2a2 <_puts_r+0x9a>
 800f240:	f04f 35ff 	mov.w	r5, #4294967295
 800f244:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f246:	07da      	lsls	r2, r3, #31
 800f248:	d405      	bmi.n	800f256 <_puts_r+0x4e>
 800f24a:	89a3      	ldrh	r3, [r4, #12]
 800f24c:	059b      	lsls	r3, r3, #22
 800f24e:	d402      	bmi.n	800f256 <_puts_r+0x4e>
 800f250:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f252:	f000 f9d9 	bl	800f608 <__retarget_lock_release_recursive>
 800f256:	4628      	mov	r0, r5
 800f258:	bd70      	pop	{r4, r5, r6, pc}
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	da04      	bge.n	800f268 <_puts_r+0x60>
 800f25e:	69a2      	ldr	r2, [r4, #24]
 800f260:	429a      	cmp	r2, r3
 800f262:	dc17      	bgt.n	800f294 <_puts_r+0x8c>
 800f264:	290a      	cmp	r1, #10
 800f266:	d015      	beq.n	800f294 <_puts_r+0x8c>
 800f268:	6823      	ldr	r3, [r4, #0]
 800f26a:	1c5a      	adds	r2, r3, #1
 800f26c:	6022      	str	r2, [r4, #0]
 800f26e:	7019      	strb	r1, [r3, #0]
 800f270:	68a3      	ldr	r3, [r4, #8]
 800f272:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f276:	3b01      	subs	r3, #1
 800f278:	60a3      	str	r3, [r4, #8]
 800f27a:	2900      	cmp	r1, #0
 800f27c:	d1ed      	bne.n	800f25a <_puts_r+0x52>
 800f27e:	2b00      	cmp	r3, #0
 800f280:	da11      	bge.n	800f2a6 <_puts_r+0x9e>
 800f282:	4622      	mov	r2, r4
 800f284:	210a      	movs	r1, #10
 800f286:	4628      	mov	r0, r5
 800f288:	f000 f8a0 	bl	800f3cc <__swbuf_r>
 800f28c:	3001      	adds	r0, #1
 800f28e:	d0d7      	beq.n	800f240 <_puts_r+0x38>
 800f290:	250a      	movs	r5, #10
 800f292:	e7d7      	b.n	800f244 <_puts_r+0x3c>
 800f294:	4622      	mov	r2, r4
 800f296:	4628      	mov	r0, r5
 800f298:	f000 f898 	bl	800f3cc <__swbuf_r>
 800f29c:	3001      	adds	r0, #1
 800f29e:	d1e7      	bne.n	800f270 <_puts_r+0x68>
 800f2a0:	e7ce      	b.n	800f240 <_puts_r+0x38>
 800f2a2:	3e01      	subs	r6, #1
 800f2a4:	e7e4      	b.n	800f270 <_puts_r+0x68>
 800f2a6:	6823      	ldr	r3, [r4, #0]
 800f2a8:	1c5a      	adds	r2, r3, #1
 800f2aa:	6022      	str	r2, [r4, #0]
 800f2ac:	220a      	movs	r2, #10
 800f2ae:	701a      	strb	r2, [r3, #0]
 800f2b0:	e7ee      	b.n	800f290 <_puts_r+0x88>
	...

0800f2b4 <puts>:
 800f2b4:	4b02      	ldr	r3, [pc, #8]	@ (800f2c0 <puts+0xc>)
 800f2b6:	4601      	mov	r1, r0
 800f2b8:	6818      	ldr	r0, [r3, #0]
 800f2ba:	f7ff bfa5 	b.w	800f208 <_puts_r>
 800f2be:	bf00      	nop
 800f2c0:	200002a0 	.word	0x200002a0

0800f2c4 <siprintf>:
 800f2c4:	b40e      	push	{r1, r2, r3}
 800f2c6:	b500      	push	{lr}
 800f2c8:	b09c      	sub	sp, #112	@ 0x70
 800f2ca:	ab1d      	add	r3, sp, #116	@ 0x74
 800f2cc:	9002      	str	r0, [sp, #8]
 800f2ce:	9006      	str	r0, [sp, #24]
 800f2d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f2d4:	4809      	ldr	r0, [pc, #36]	@ (800f2fc <siprintf+0x38>)
 800f2d6:	9107      	str	r1, [sp, #28]
 800f2d8:	9104      	str	r1, [sp, #16]
 800f2da:	4909      	ldr	r1, [pc, #36]	@ (800f300 <siprintf+0x3c>)
 800f2dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2e0:	9105      	str	r1, [sp, #20]
 800f2e2:	6800      	ldr	r0, [r0, #0]
 800f2e4:	9301      	str	r3, [sp, #4]
 800f2e6:	a902      	add	r1, sp, #8
 800f2e8:	f000 fa3e 	bl	800f768 <_svfiprintf_r>
 800f2ec:	9b02      	ldr	r3, [sp, #8]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	701a      	strb	r2, [r3, #0]
 800f2f2:	b01c      	add	sp, #112	@ 0x70
 800f2f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2f8:	b003      	add	sp, #12
 800f2fa:	4770      	bx	lr
 800f2fc:	200002a0 	.word	0x200002a0
 800f300:	ffff0208 	.word	0xffff0208

0800f304 <__sread>:
 800f304:	b510      	push	{r4, lr}
 800f306:	460c      	mov	r4, r1
 800f308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f30c:	f000 f91c 	bl	800f548 <_read_r>
 800f310:	2800      	cmp	r0, #0
 800f312:	bfab      	itete	ge
 800f314:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f316:	89a3      	ldrhlt	r3, [r4, #12]
 800f318:	181b      	addge	r3, r3, r0
 800f31a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f31e:	bfac      	ite	ge
 800f320:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f322:	81a3      	strhlt	r3, [r4, #12]
 800f324:	bd10      	pop	{r4, pc}

0800f326 <__swrite>:
 800f326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f32a:	461f      	mov	r7, r3
 800f32c:	898b      	ldrh	r3, [r1, #12]
 800f32e:	05db      	lsls	r3, r3, #23
 800f330:	4605      	mov	r5, r0
 800f332:	460c      	mov	r4, r1
 800f334:	4616      	mov	r6, r2
 800f336:	d505      	bpl.n	800f344 <__swrite+0x1e>
 800f338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f33c:	2302      	movs	r3, #2
 800f33e:	2200      	movs	r2, #0
 800f340:	f000 f8f0 	bl	800f524 <_lseek_r>
 800f344:	89a3      	ldrh	r3, [r4, #12]
 800f346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f34a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f34e:	81a3      	strh	r3, [r4, #12]
 800f350:	4632      	mov	r2, r6
 800f352:	463b      	mov	r3, r7
 800f354:	4628      	mov	r0, r5
 800f356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f35a:	f000 b917 	b.w	800f58c <_write_r>

0800f35e <__sseek>:
 800f35e:	b510      	push	{r4, lr}
 800f360:	460c      	mov	r4, r1
 800f362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f366:	f000 f8dd 	bl	800f524 <_lseek_r>
 800f36a:	1c43      	adds	r3, r0, #1
 800f36c:	89a3      	ldrh	r3, [r4, #12]
 800f36e:	bf15      	itete	ne
 800f370:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f372:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f376:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f37a:	81a3      	strheq	r3, [r4, #12]
 800f37c:	bf18      	it	ne
 800f37e:	81a3      	strhne	r3, [r4, #12]
 800f380:	bd10      	pop	{r4, pc}

0800f382 <__sclose>:
 800f382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f386:	f000 b8bd 	b.w	800f504 <_close_r>
	...

0800f38c <_vsiprintf_r>:
 800f38c:	b500      	push	{lr}
 800f38e:	b09b      	sub	sp, #108	@ 0x6c
 800f390:	9100      	str	r1, [sp, #0]
 800f392:	9104      	str	r1, [sp, #16]
 800f394:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f398:	9105      	str	r1, [sp, #20]
 800f39a:	9102      	str	r1, [sp, #8]
 800f39c:	4905      	ldr	r1, [pc, #20]	@ (800f3b4 <_vsiprintf_r+0x28>)
 800f39e:	9103      	str	r1, [sp, #12]
 800f3a0:	4669      	mov	r1, sp
 800f3a2:	f000 f9e1 	bl	800f768 <_svfiprintf_r>
 800f3a6:	9b00      	ldr	r3, [sp, #0]
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	701a      	strb	r2, [r3, #0]
 800f3ac:	b01b      	add	sp, #108	@ 0x6c
 800f3ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800f3b2:	bf00      	nop
 800f3b4:	ffff0208 	.word	0xffff0208

0800f3b8 <vsiprintf>:
 800f3b8:	4613      	mov	r3, r2
 800f3ba:	460a      	mov	r2, r1
 800f3bc:	4601      	mov	r1, r0
 800f3be:	4802      	ldr	r0, [pc, #8]	@ (800f3c8 <vsiprintf+0x10>)
 800f3c0:	6800      	ldr	r0, [r0, #0]
 800f3c2:	f7ff bfe3 	b.w	800f38c <_vsiprintf_r>
 800f3c6:	bf00      	nop
 800f3c8:	200002a0 	.word	0x200002a0

0800f3cc <__swbuf_r>:
 800f3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ce:	460e      	mov	r6, r1
 800f3d0:	4614      	mov	r4, r2
 800f3d2:	4605      	mov	r5, r0
 800f3d4:	b118      	cbz	r0, 800f3de <__swbuf_r+0x12>
 800f3d6:	6a03      	ldr	r3, [r0, #32]
 800f3d8:	b90b      	cbnz	r3, 800f3de <__swbuf_r+0x12>
 800f3da:	f7ff fec5 	bl	800f168 <__sinit>
 800f3de:	69a3      	ldr	r3, [r4, #24]
 800f3e0:	60a3      	str	r3, [r4, #8]
 800f3e2:	89a3      	ldrh	r3, [r4, #12]
 800f3e4:	071a      	lsls	r2, r3, #28
 800f3e6:	d501      	bpl.n	800f3ec <__swbuf_r+0x20>
 800f3e8:	6923      	ldr	r3, [r4, #16]
 800f3ea:	b943      	cbnz	r3, 800f3fe <__swbuf_r+0x32>
 800f3ec:	4621      	mov	r1, r4
 800f3ee:	4628      	mov	r0, r5
 800f3f0:	f000 f82a 	bl	800f448 <__swsetup_r>
 800f3f4:	b118      	cbz	r0, 800f3fe <__swbuf_r+0x32>
 800f3f6:	f04f 37ff 	mov.w	r7, #4294967295
 800f3fa:	4638      	mov	r0, r7
 800f3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3fe:	6823      	ldr	r3, [r4, #0]
 800f400:	6922      	ldr	r2, [r4, #16]
 800f402:	1a98      	subs	r0, r3, r2
 800f404:	6963      	ldr	r3, [r4, #20]
 800f406:	b2f6      	uxtb	r6, r6
 800f408:	4283      	cmp	r3, r0
 800f40a:	4637      	mov	r7, r6
 800f40c:	dc05      	bgt.n	800f41a <__swbuf_r+0x4e>
 800f40e:	4621      	mov	r1, r4
 800f410:	4628      	mov	r0, r5
 800f412:	f000 fdf9 	bl	8010008 <_fflush_r>
 800f416:	2800      	cmp	r0, #0
 800f418:	d1ed      	bne.n	800f3f6 <__swbuf_r+0x2a>
 800f41a:	68a3      	ldr	r3, [r4, #8]
 800f41c:	3b01      	subs	r3, #1
 800f41e:	60a3      	str	r3, [r4, #8]
 800f420:	6823      	ldr	r3, [r4, #0]
 800f422:	1c5a      	adds	r2, r3, #1
 800f424:	6022      	str	r2, [r4, #0]
 800f426:	701e      	strb	r6, [r3, #0]
 800f428:	6962      	ldr	r2, [r4, #20]
 800f42a:	1c43      	adds	r3, r0, #1
 800f42c:	429a      	cmp	r2, r3
 800f42e:	d004      	beq.n	800f43a <__swbuf_r+0x6e>
 800f430:	89a3      	ldrh	r3, [r4, #12]
 800f432:	07db      	lsls	r3, r3, #31
 800f434:	d5e1      	bpl.n	800f3fa <__swbuf_r+0x2e>
 800f436:	2e0a      	cmp	r6, #10
 800f438:	d1df      	bne.n	800f3fa <__swbuf_r+0x2e>
 800f43a:	4621      	mov	r1, r4
 800f43c:	4628      	mov	r0, r5
 800f43e:	f000 fde3 	bl	8010008 <_fflush_r>
 800f442:	2800      	cmp	r0, #0
 800f444:	d0d9      	beq.n	800f3fa <__swbuf_r+0x2e>
 800f446:	e7d6      	b.n	800f3f6 <__swbuf_r+0x2a>

0800f448 <__swsetup_r>:
 800f448:	b538      	push	{r3, r4, r5, lr}
 800f44a:	4b29      	ldr	r3, [pc, #164]	@ (800f4f0 <__swsetup_r+0xa8>)
 800f44c:	4605      	mov	r5, r0
 800f44e:	6818      	ldr	r0, [r3, #0]
 800f450:	460c      	mov	r4, r1
 800f452:	b118      	cbz	r0, 800f45c <__swsetup_r+0x14>
 800f454:	6a03      	ldr	r3, [r0, #32]
 800f456:	b90b      	cbnz	r3, 800f45c <__swsetup_r+0x14>
 800f458:	f7ff fe86 	bl	800f168 <__sinit>
 800f45c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f460:	0719      	lsls	r1, r3, #28
 800f462:	d422      	bmi.n	800f4aa <__swsetup_r+0x62>
 800f464:	06da      	lsls	r2, r3, #27
 800f466:	d407      	bmi.n	800f478 <__swsetup_r+0x30>
 800f468:	2209      	movs	r2, #9
 800f46a:	602a      	str	r2, [r5, #0]
 800f46c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f470:	81a3      	strh	r3, [r4, #12]
 800f472:	f04f 30ff 	mov.w	r0, #4294967295
 800f476:	e033      	b.n	800f4e0 <__swsetup_r+0x98>
 800f478:	0758      	lsls	r0, r3, #29
 800f47a:	d512      	bpl.n	800f4a2 <__swsetup_r+0x5a>
 800f47c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f47e:	b141      	cbz	r1, 800f492 <__swsetup_r+0x4a>
 800f480:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f484:	4299      	cmp	r1, r3
 800f486:	d002      	beq.n	800f48e <__swsetup_r+0x46>
 800f488:	4628      	mov	r0, r5
 800f48a:	f000 f8c7 	bl	800f61c <_free_r>
 800f48e:	2300      	movs	r3, #0
 800f490:	6363      	str	r3, [r4, #52]	@ 0x34
 800f492:	89a3      	ldrh	r3, [r4, #12]
 800f494:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f498:	81a3      	strh	r3, [r4, #12]
 800f49a:	2300      	movs	r3, #0
 800f49c:	6063      	str	r3, [r4, #4]
 800f49e:	6923      	ldr	r3, [r4, #16]
 800f4a0:	6023      	str	r3, [r4, #0]
 800f4a2:	89a3      	ldrh	r3, [r4, #12]
 800f4a4:	f043 0308 	orr.w	r3, r3, #8
 800f4a8:	81a3      	strh	r3, [r4, #12]
 800f4aa:	6923      	ldr	r3, [r4, #16]
 800f4ac:	b94b      	cbnz	r3, 800f4c2 <__swsetup_r+0x7a>
 800f4ae:	89a3      	ldrh	r3, [r4, #12]
 800f4b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f4b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f4b8:	d003      	beq.n	800f4c2 <__swsetup_r+0x7a>
 800f4ba:	4621      	mov	r1, r4
 800f4bc:	4628      	mov	r0, r5
 800f4be:	f000 fdf1 	bl	80100a4 <__smakebuf_r>
 800f4c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4c6:	f013 0201 	ands.w	r2, r3, #1
 800f4ca:	d00a      	beq.n	800f4e2 <__swsetup_r+0x9a>
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	60a2      	str	r2, [r4, #8]
 800f4d0:	6962      	ldr	r2, [r4, #20]
 800f4d2:	4252      	negs	r2, r2
 800f4d4:	61a2      	str	r2, [r4, #24]
 800f4d6:	6922      	ldr	r2, [r4, #16]
 800f4d8:	b942      	cbnz	r2, 800f4ec <__swsetup_r+0xa4>
 800f4da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f4de:	d1c5      	bne.n	800f46c <__swsetup_r+0x24>
 800f4e0:	bd38      	pop	{r3, r4, r5, pc}
 800f4e2:	0799      	lsls	r1, r3, #30
 800f4e4:	bf58      	it	pl
 800f4e6:	6962      	ldrpl	r2, [r4, #20]
 800f4e8:	60a2      	str	r2, [r4, #8]
 800f4ea:	e7f4      	b.n	800f4d6 <__swsetup_r+0x8e>
 800f4ec:	2000      	movs	r0, #0
 800f4ee:	e7f7      	b.n	800f4e0 <__swsetup_r+0x98>
 800f4f0:	200002a0 	.word	0x200002a0

0800f4f4 <memset>:
 800f4f4:	4402      	add	r2, r0
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	4293      	cmp	r3, r2
 800f4fa:	d100      	bne.n	800f4fe <memset+0xa>
 800f4fc:	4770      	bx	lr
 800f4fe:	f803 1b01 	strb.w	r1, [r3], #1
 800f502:	e7f9      	b.n	800f4f8 <memset+0x4>

0800f504 <_close_r>:
 800f504:	b538      	push	{r3, r4, r5, lr}
 800f506:	4d06      	ldr	r5, [pc, #24]	@ (800f520 <_close_r+0x1c>)
 800f508:	2300      	movs	r3, #0
 800f50a:	4604      	mov	r4, r0
 800f50c:	4608      	mov	r0, r1
 800f50e:	602b      	str	r3, [r5, #0]
 800f510:	f7f4 fecd 	bl	80042ae <_close>
 800f514:	1c43      	adds	r3, r0, #1
 800f516:	d102      	bne.n	800f51e <_close_r+0x1a>
 800f518:	682b      	ldr	r3, [r5, #0]
 800f51a:	b103      	cbz	r3, 800f51e <_close_r+0x1a>
 800f51c:	6023      	str	r3, [r4, #0]
 800f51e:	bd38      	pop	{r3, r4, r5, pc}
 800f520:	20012248 	.word	0x20012248

0800f524 <_lseek_r>:
 800f524:	b538      	push	{r3, r4, r5, lr}
 800f526:	4d07      	ldr	r5, [pc, #28]	@ (800f544 <_lseek_r+0x20>)
 800f528:	4604      	mov	r4, r0
 800f52a:	4608      	mov	r0, r1
 800f52c:	4611      	mov	r1, r2
 800f52e:	2200      	movs	r2, #0
 800f530:	602a      	str	r2, [r5, #0]
 800f532:	461a      	mov	r2, r3
 800f534:	f7f4 fee2 	bl	80042fc <_lseek>
 800f538:	1c43      	adds	r3, r0, #1
 800f53a:	d102      	bne.n	800f542 <_lseek_r+0x1e>
 800f53c:	682b      	ldr	r3, [r5, #0]
 800f53e:	b103      	cbz	r3, 800f542 <_lseek_r+0x1e>
 800f540:	6023      	str	r3, [r4, #0]
 800f542:	bd38      	pop	{r3, r4, r5, pc}
 800f544:	20012248 	.word	0x20012248

0800f548 <_read_r>:
 800f548:	b538      	push	{r3, r4, r5, lr}
 800f54a:	4d07      	ldr	r5, [pc, #28]	@ (800f568 <_read_r+0x20>)
 800f54c:	4604      	mov	r4, r0
 800f54e:	4608      	mov	r0, r1
 800f550:	4611      	mov	r1, r2
 800f552:	2200      	movs	r2, #0
 800f554:	602a      	str	r2, [r5, #0]
 800f556:	461a      	mov	r2, r3
 800f558:	f7f4 fe8c 	bl	8004274 <_read>
 800f55c:	1c43      	adds	r3, r0, #1
 800f55e:	d102      	bne.n	800f566 <_read_r+0x1e>
 800f560:	682b      	ldr	r3, [r5, #0]
 800f562:	b103      	cbz	r3, 800f566 <_read_r+0x1e>
 800f564:	6023      	str	r3, [r4, #0]
 800f566:	bd38      	pop	{r3, r4, r5, pc}
 800f568:	20012248 	.word	0x20012248

0800f56c <_sbrk_r>:
 800f56c:	b538      	push	{r3, r4, r5, lr}
 800f56e:	4d06      	ldr	r5, [pc, #24]	@ (800f588 <_sbrk_r+0x1c>)
 800f570:	2300      	movs	r3, #0
 800f572:	4604      	mov	r4, r0
 800f574:	4608      	mov	r0, r1
 800f576:	602b      	str	r3, [r5, #0]
 800f578:	f7f4 fece 	bl	8004318 <_sbrk>
 800f57c:	1c43      	adds	r3, r0, #1
 800f57e:	d102      	bne.n	800f586 <_sbrk_r+0x1a>
 800f580:	682b      	ldr	r3, [r5, #0]
 800f582:	b103      	cbz	r3, 800f586 <_sbrk_r+0x1a>
 800f584:	6023      	str	r3, [r4, #0]
 800f586:	bd38      	pop	{r3, r4, r5, pc}
 800f588:	20012248 	.word	0x20012248

0800f58c <_write_r>:
 800f58c:	b538      	push	{r3, r4, r5, lr}
 800f58e:	4d07      	ldr	r5, [pc, #28]	@ (800f5ac <_write_r+0x20>)
 800f590:	4604      	mov	r4, r0
 800f592:	4608      	mov	r0, r1
 800f594:	4611      	mov	r1, r2
 800f596:	2200      	movs	r2, #0
 800f598:	602a      	str	r2, [r5, #0]
 800f59a:	461a      	mov	r2, r3
 800f59c:	f7f1 fe34 	bl	8001208 <_write>
 800f5a0:	1c43      	adds	r3, r0, #1
 800f5a2:	d102      	bne.n	800f5aa <_write_r+0x1e>
 800f5a4:	682b      	ldr	r3, [r5, #0]
 800f5a6:	b103      	cbz	r3, 800f5aa <_write_r+0x1e>
 800f5a8:	6023      	str	r3, [r4, #0]
 800f5aa:	bd38      	pop	{r3, r4, r5, pc}
 800f5ac:	20012248 	.word	0x20012248

0800f5b0 <__errno>:
 800f5b0:	4b01      	ldr	r3, [pc, #4]	@ (800f5b8 <__errno+0x8>)
 800f5b2:	6818      	ldr	r0, [r3, #0]
 800f5b4:	4770      	bx	lr
 800f5b6:	bf00      	nop
 800f5b8:	200002a0 	.word	0x200002a0

0800f5bc <__libc_init_array>:
 800f5bc:	b570      	push	{r4, r5, r6, lr}
 800f5be:	4d0d      	ldr	r5, [pc, #52]	@ (800f5f4 <__libc_init_array+0x38>)
 800f5c0:	4c0d      	ldr	r4, [pc, #52]	@ (800f5f8 <__libc_init_array+0x3c>)
 800f5c2:	1b64      	subs	r4, r4, r5
 800f5c4:	10a4      	asrs	r4, r4, #2
 800f5c6:	2600      	movs	r6, #0
 800f5c8:	42a6      	cmp	r6, r4
 800f5ca:	d109      	bne.n	800f5e0 <__libc_init_array+0x24>
 800f5cc:	4d0b      	ldr	r5, [pc, #44]	@ (800f5fc <__libc_init_array+0x40>)
 800f5ce:	4c0c      	ldr	r4, [pc, #48]	@ (800f600 <__libc_init_array+0x44>)
 800f5d0:	f000 fe58 	bl	8010284 <_init>
 800f5d4:	1b64      	subs	r4, r4, r5
 800f5d6:	10a4      	asrs	r4, r4, #2
 800f5d8:	2600      	movs	r6, #0
 800f5da:	42a6      	cmp	r6, r4
 800f5dc:	d105      	bne.n	800f5ea <__libc_init_array+0x2e>
 800f5de:	bd70      	pop	{r4, r5, r6, pc}
 800f5e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5e4:	4798      	blx	r3
 800f5e6:	3601      	adds	r6, #1
 800f5e8:	e7ee      	b.n	800f5c8 <__libc_init_array+0xc>
 800f5ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5ee:	4798      	blx	r3
 800f5f0:	3601      	adds	r6, #1
 800f5f2:	e7f2      	b.n	800f5da <__libc_init_array+0x1e>
 800f5f4:	08012eec 	.word	0x08012eec
 800f5f8:	08012eec 	.word	0x08012eec
 800f5fc:	08012eec 	.word	0x08012eec
 800f600:	08012ef0 	.word	0x08012ef0

0800f604 <__retarget_lock_init_recursive>:
 800f604:	4770      	bx	lr

0800f606 <__retarget_lock_acquire_recursive>:
 800f606:	4770      	bx	lr

0800f608 <__retarget_lock_release_recursive>:
 800f608:	4770      	bx	lr

0800f60a <strcpy>:
 800f60a:	4603      	mov	r3, r0
 800f60c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f610:	f803 2b01 	strb.w	r2, [r3], #1
 800f614:	2a00      	cmp	r2, #0
 800f616:	d1f9      	bne.n	800f60c <strcpy+0x2>
 800f618:	4770      	bx	lr
	...

0800f61c <_free_r>:
 800f61c:	b538      	push	{r3, r4, r5, lr}
 800f61e:	4605      	mov	r5, r0
 800f620:	2900      	cmp	r1, #0
 800f622:	d041      	beq.n	800f6a8 <_free_r+0x8c>
 800f624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f628:	1f0c      	subs	r4, r1, #4
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	bfb8      	it	lt
 800f62e:	18e4      	addlt	r4, r4, r3
 800f630:	f7ff fc7e 	bl	800ef30 <__malloc_lock>
 800f634:	4a1d      	ldr	r2, [pc, #116]	@ (800f6ac <_free_r+0x90>)
 800f636:	6813      	ldr	r3, [r2, #0]
 800f638:	b933      	cbnz	r3, 800f648 <_free_r+0x2c>
 800f63a:	6063      	str	r3, [r4, #4]
 800f63c:	6014      	str	r4, [r2, #0]
 800f63e:	4628      	mov	r0, r5
 800f640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f644:	f7ff bc7a 	b.w	800ef3c <__malloc_unlock>
 800f648:	42a3      	cmp	r3, r4
 800f64a:	d908      	bls.n	800f65e <_free_r+0x42>
 800f64c:	6820      	ldr	r0, [r4, #0]
 800f64e:	1821      	adds	r1, r4, r0
 800f650:	428b      	cmp	r3, r1
 800f652:	bf01      	itttt	eq
 800f654:	6819      	ldreq	r1, [r3, #0]
 800f656:	685b      	ldreq	r3, [r3, #4]
 800f658:	1809      	addeq	r1, r1, r0
 800f65a:	6021      	streq	r1, [r4, #0]
 800f65c:	e7ed      	b.n	800f63a <_free_r+0x1e>
 800f65e:	461a      	mov	r2, r3
 800f660:	685b      	ldr	r3, [r3, #4]
 800f662:	b10b      	cbz	r3, 800f668 <_free_r+0x4c>
 800f664:	42a3      	cmp	r3, r4
 800f666:	d9fa      	bls.n	800f65e <_free_r+0x42>
 800f668:	6811      	ldr	r1, [r2, #0]
 800f66a:	1850      	adds	r0, r2, r1
 800f66c:	42a0      	cmp	r0, r4
 800f66e:	d10b      	bne.n	800f688 <_free_r+0x6c>
 800f670:	6820      	ldr	r0, [r4, #0]
 800f672:	4401      	add	r1, r0
 800f674:	1850      	adds	r0, r2, r1
 800f676:	4283      	cmp	r3, r0
 800f678:	6011      	str	r1, [r2, #0]
 800f67a:	d1e0      	bne.n	800f63e <_free_r+0x22>
 800f67c:	6818      	ldr	r0, [r3, #0]
 800f67e:	685b      	ldr	r3, [r3, #4]
 800f680:	6053      	str	r3, [r2, #4]
 800f682:	4408      	add	r0, r1
 800f684:	6010      	str	r0, [r2, #0]
 800f686:	e7da      	b.n	800f63e <_free_r+0x22>
 800f688:	d902      	bls.n	800f690 <_free_r+0x74>
 800f68a:	230c      	movs	r3, #12
 800f68c:	602b      	str	r3, [r5, #0]
 800f68e:	e7d6      	b.n	800f63e <_free_r+0x22>
 800f690:	6820      	ldr	r0, [r4, #0]
 800f692:	1821      	adds	r1, r4, r0
 800f694:	428b      	cmp	r3, r1
 800f696:	bf04      	itt	eq
 800f698:	6819      	ldreq	r1, [r3, #0]
 800f69a:	685b      	ldreq	r3, [r3, #4]
 800f69c:	6063      	str	r3, [r4, #4]
 800f69e:	bf04      	itt	eq
 800f6a0:	1809      	addeq	r1, r1, r0
 800f6a2:	6021      	streq	r1, [r4, #0]
 800f6a4:	6054      	str	r4, [r2, #4]
 800f6a6:	e7ca      	b.n	800f63e <_free_r+0x22>
 800f6a8:	bd38      	pop	{r3, r4, r5, pc}
 800f6aa:	bf00      	nop
 800f6ac:	20012108 	.word	0x20012108

0800f6b0 <__ssputs_r>:
 800f6b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6b4:	688e      	ldr	r6, [r1, #8]
 800f6b6:	461f      	mov	r7, r3
 800f6b8:	42be      	cmp	r6, r7
 800f6ba:	680b      	ldr	r3, [r1, #0]
 800f6bc:	4682      	mov	sl, r0
 800f6be:	460c      	mov	r4, r1
 800f6c0:	4690      	mov	r8, r2
 800f6c2:	d82d      	bhi.n	800f720 <__ssputs_r+0x70>
 800f6c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f6c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f6cc:	d026      	beq.n	800f71c <__ssputs_r+0x6c>
 800f6ce:	6965      	ldr	r5, [r4, #20]
 800f6d0:	6909      	ldr	r1, [r1, #16]
 800f6d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f6d6:	eba3 0901 	sub.w	r9, r3, r1
 800f6da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f6de:	1c7b      	adds	r3, r7, #1
 800f6e0:	444b      	add	r3, r9
 800f6e2:	106d      	asrs	r5, r5, #1
 800f6e4:	429d      	cmp	r5, r3
 800f6e6:	bf38      	it	cc
 800f6e8:	461d      	movcc	r5, r3
 800f6ea:	0553      	lsls	r3, r2, #21
 800f6ec:	d527      	bpl.n	800f73e <__ssputs_r+0x8e>
 800f6ee:	4629      	mov	r1, r5
 800f6f0:	f7ff fb9e 	bl	800ee30 <_malloc_r>
 800f6f4:	4606      	mov	r6, r0
 800f6f6:	b360      	cbz	r0, 800f752 <__ssputs_r+0xa2>
 800f6f8:	6921      	ldr	r1, [r4, #16]
 800f6fa:	464a      	mov	r2, r9
 800f6fc:	f000 fd7e 	bl	80101fc <memcpy>
 800f700:	89a3      	ldrh	r3, [r4, #12]
 800f702:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f70a:	81a3      	strh	r3, [r4, #12]
 800f70c:	6126      	str	r6, [r4, #16]
 800f70e:	6165      	str	r5, [r4, #20]
 800f710:	444e      	add	r6, r9
 800f712:	eba5 0509 	sub.w	r5, r5, r9
 800f716:	6026      	str	r6, [r4, #0]
 800f718:	60a5      	str	r5, [r4, #8]
 800f71a:	463e      	mov	r6, r7
 800f71c:	42be      	cmp	r6, r7
 800f71e:	d900      	bls.n	800f722 <__ssputs_r+0x72>
 800f720:	463e      	mov	r6, r7
 800f722:	6820      	ldr	r0, [r4, #0]
 800f724:	4632      	mov	r2, r6
 800f726:	4641      	mov	r1, r8
 800f728:	f000 fd2c 	bl	8010184 <memmove>
 800f72c:	68a3      	ldr	r3, [r4, #8]
 800f72e:	1b9b      	subs	r3, r3, r6
 800f730:	60a3      	str	r3, [r4, #8]
 800f732:	6823      	ldr	r3, [r4, #0]
 800f734:	4433      	add	r3, r6
 800f736:	6023      	str	r3, [r4, #0]
 800f738:	2000      	movs	r0, #0
 800f73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f73e:	462a      	mov	r2, r5
 800f740:	f000 fd6a 	bl	8010218 <_realloc_r>
 800f744:	4606      	mov	r6, r0
 800f746:	2800      	cmp	r0, #0
 800f748:	d1e0      	bne.n	800f70c <__ssputs_r+0x5c>
 800f74a:	6921      	ldr	r1, [r4, #16]
 800f74c:	4650      	mov	r0, sl
 800f74e:	f7ff ff65 	bl	800f61c <_free_r>
 800f752:	230c      	movs	r3, #12
 800f754:	f8ca 3000 	str.w	r3, [sl]
 800f758:	89a3      	ldrh	r3, [r4, #12]
 800f75a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f75e:	81a3      	strh	r3, [r4, #12]
 800f760:	f04f 30ff 	mov.w	r0, #4294967295
 800f764:	e7e9      	b.n	800f73a <__ssputs_r+0x8a>
	...

0800f768 <_svfiprintf_r>:
 800f768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f76c:	4698      	mov	r8, r3
 800f76e:	898b      	ldrh	r3, [r1, #12]
 800f770:	061b      	lsls	r3, r3, #24
 800f772:	b09d      	sub	sp, #116	@ 0x74
 800f774:	4607      	mov	r7, r0
 800f776:	460d      	mov	r5, r1
 800f778:	4614      	mov	r4, r2
 800f77a:	d510      	bpl.n	800f79e <_svfiprintf_r+0x36>
 800f77c:	690b      	ldr	r3, [r1, #16]
 800f77e:	b973      	cbnz	r3, 800f79e <_svfiprintf_r+0x36>
 800f780:	2140      	movs	r1, #64	@ 0x40
 800f782:	f7ff fb55 	bl	800ee30 <_malloc_r>
 800f786:	6028      	str	r0, [r5, #0]
 800f788:	6128      	str	r0, [r5, #16]
 800f78a:	b930      	cbnz	r0, 800f79a <_svfiprintf_r+0x32>
 800f78c:	230c      	movs	r3, #12
 800f78e:	603b      	str	r3, [r7, #0]
 800f790:	f04f 30ff 	mov.w	r0, #4294967295
 800f794:	b01d      	add	sp, #116	@ 0x74
 800f796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f79a:	2340      	movs	r3, #64	@ 0x40
 800f79c:	616b      	str	r3, [r5, #20]
 800f79e:	2300      	movs	r3, #0
 800f7a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7a2:	2320      	movs	r3, #32
 800f7a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f7a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7ac:	2330      	movs	r3, #48	@ 0x30
 800f7ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f94c <_svfiprintf_r+0x1e4>
 800f7b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f7b6:	f04f 0901 	mov.w	r9, #1
 800f7ba:	4623      	mov	r3, r4
 800f7bc:	469a      	mov	sl, r3
 800f7be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7c2:	b10a      	cbz	r2, 800f7c8 <_svfiprintf_r+0x60>
 800f7c4:	2a25      	cmp	r2, #37	@ 0x25
 800f7c6:	d1f9      	bne.n	800f7bc <_svfiprintf_r+0x54>
 800f7c8:	ebba 0b04 	subs.w	fp, sl, r4
 800f7cc:	d00b      	beq.n	800f7e6 <_svfiprintf_r+0x7e>
 800f7ce:	465b      	mov	r3, fp
 800f7d0:	4622      	mov	r2, r4
 800f7d2:	4629      	mov	r1, r5
 800f7d4:	4638      	mov	r0, r7
 800f7d6:	f7ff ff6b 	bl	800f6b0 <__ssputs_r>
 800f7da:	3001      	adds	r0, #1
 800f7dc:	f000 80a7 	beq.w	800f92e <_svfiprintf_r+0x1c6>
 800f7e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7e2:	445a      	add	r2, fp
 800f7e4:	9209      	str	r2, [sp, #36]	@ 0x24
 800f7e6:	f89a 3000 	ldrb.w	r3, [sl]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	f000 809f 	beq.w	800f92e <_svfiprintf_r+0x1c6>
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800f7f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f7fa:	f10a 0a01 	add.w	sl, sl, #1
 800f7fe:	9304      	str	r3, [sp, #16]
 800f800:	9307      	str	r3, [sp, #28]
 800f802:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f806:	931a      	str	r3, [sp, #104]	@ 0x68
 800f808:	4654      	mov	r4, sl
 800f80a:	2205      	movs	r2, #5
 800f80c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f810:	484e      	ldr	r0, [pc, #312]	@ (800f94c <_svfiprintf_r+0x1e4>)
 800f812:	f7f0 fcf5 	bl	8000200 <memchr>
 800f816:	9a04      	ldr	r2, [sp, #16]
 800f818:	b9d8      	cbnz	r0, 800f852 <_svfiprintf_r+0xea>
 800f81a:	06d0      	lsls	r0, r2, #27
 800f81c:	bf44      	itt	mi
 800f81e:	2320      	movmi	r3, #32
 800f820:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f824:	0711      	lsls	r1, r2, #28
 800f826:	bf44      	itt	mi
 800f828:	232b      	movmi	r3, #43	@ 0x2b
 800f82a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f82e:	f89a 3000 	ldrb.w	r3, [sl]
 800f832:	2b2a      	cmp	r3, #42	@ 0x2a
 800f834:	d015      	beq.n	800f862 <_svfiprintf_r+0xfa>
 800f836:	9a07      	ldr	r2, [sp, #28]
 800f838:	4654      	mov	r4, sl
 800f83a:	2000      	movs	r0, #0
 800f83c:	f04f 0c0a 	mov.w	ip, #10
 800f840:	4621      	mov	r1, r4
 800f842:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f846:	3b30      	subs	r3, #48	@ 0x30
 800f848:	2b09      	cmp	r3, #9
 800f84a:	d94b      	bls.n	800f8e4 <_svfiprintf_r+0x17c>
 800f84c:	b1b0      	cbz	r0, 800f87c <_svfiprintf_r+0x114>
 800f84e:	9207      	str	r2, [sp, #28]
 800f850:	e014      	b.n	800f87c <_svfiprintf_r+0x114>
 800f852:	eba0 0308 	sub.w	r3, r0, r8
 800f856:	fa09 f303 	lsl.w	r3, r9, r3
 800f85a:	4313      	orrs	r3, r2
 800f85c:	9304      	str	r3, [sp, #16]
 800f85e:	46a2      	mov	sl, r4
 800f860:	e7d2      	b.n	800f808 <_svfiprintf_r+0xa0>
 800f862:	9b03      	ldr	r3, [sp, #12]
 800f864:	1d19      	adds	r1, r3, #4
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	9103      	str	r1, [sp, #12]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	bfbb      	ittet	lt
 800f86e:	425b      	neglt	r3, r3
 800f870:	f042 0202 	orrlt.w	r2, r2, #2
 800f874:	9307      	strge	r3, [sp, #28]
 800f876:	9307      	strlt	r3, [sp, #28]
 800f878:	bfb8      	it	lt
 800f87a:	9204      	strlt	r2, [sp, #16]
 800f87c:	7823      	ldrb	r3, [r4, #0]
 800f87e:	2b2e      	cmp	r3, #46	@ 0x2e
 800f880:	d10a      	bne.n	800f898 <_svfiprintf_r+0x130>
 800f882:	7863      	ldrb	r3, [r4, #1]
 800f884:	2b2a      	cmp	r3, #42	@ 0x2a
 800f886:	d132      	bne.n	800f8ee <_svfiprintf_r+0x186>
 800f888:	9b03      	ldr	r3, [sp, #12]
 800f88a:	1d1a      	adds	r2, r3, #4
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	9203      	str	r2, [sp, #12]
 800f890:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f894:	3402      	adds	r4, #2
 800f896:	9305      	str	r3, [sp, #20]
 800f898:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f95c <_svfiprintf_r+0x1f4>
 800f89c:	7821      	ldrb	r1, [r4, #0]
 800f89e:	2203      	movs	r2, #3
 800f8a0:	4650      	mov	r0, sl
 800f8a2:	f7f0 fcad 	bl	8000200 <memchr>
 800f8a6:	b138      	cbz	r0, 800f8b8 <_svfiprintf_r+0x150>
 800f8a8:	9b04      	ldr	r3, [sp, #16]
 800f8aa:	eba0 000a 	sub.w	r0, r0, sl
 800f8ae:	2240      	movs	r2, #64	@ 0x40
 800f8b0:	4082      	lsls	r2, r0
 800f8b2:	4313      	orrs	r3, r2
 800f8b4:	3401      	adds	r4, #1
 800f8b6:	9304      	str	r3, [sp, #16]
 800f8b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8bc:	4824      	ldr	r0, [pc, #144]	@ (800f950 <_svfiprintf_r+0x1e8>)
 800f8be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f8c2:	2206      	movs	r2, #6
 800f8c4:	f7f0 fc9c 	bl	8000200 <memchr>
 800f8c8:	2800      	cmp	r0, #0
 800f8ca:	d036      	beq.n	800f93a <_svfiprintf_r+0x1d2>
 800f8cc:	4b21      	ldr	r3, [pc, #132]	@ (800f954 <_svfiprintf_r+0x1ec>)
 800f8ce:	bb1b      	cbnz	r3, 800f918 <_svfiprintf_r+0x1b0>
 800f8d0:	9b03      	ldr	r3, [sp, #12]
 800f8d2:	3307      	adds	r3, #7
 800f8d4:	f023 0307 	bic.w	r3, r3, #7
 800f8d8:	3308      	adds	r3, #8
 800f8da:	9303      	str	r3, [sp, #12]
 800f8dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8de:	4433      	add	r3, r6
 800f8e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8e2:	e76a      	b.n	800f7ba <_svfiprintf_r+0x52>
 800f8e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8e8:	460c      	mov	r4, r1
 800f8ea:	2001      	movs	r0, #1
 800f8ec:	e7a8      	b.n	800f840 <_svfiprintf_r+0xd8>
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	3401      	adds	r4, #1
 800f8f2:	9305      	str	r3, [sp, #20]
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	f04f 0c0a 	mov.w	ip, #10
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f900:	3a30      	subs	r2, #48	@ 0x30
 800f902:	2a09      	cmp	r2, #9
 800f904:	d903      	bls.n	800f90e <_svfiprintf_r+0x1a6>
 800f906:	2b00      	cmp	r3, #0
 800f908:	d0c6      	beq.n	800f898 <_svfiprintf_r+0x130>
 800f90a:	9105      	str	r1, [sp, #20]
 800f90c:	e7c4      	b.n	800f898 <_svfiprintf_r+0x130>
 800f90e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f912:	4604      	mov	r4, r0
 800f914:	2301      	movs	r3, #1
 800f916:	e7f0      	b.n	800f8fa <_svfiprintf_r+0x192>
 800f918:	ab03      	add	r3, sp, #12
 800f91a:	9300      	str	r3, [sp, #0]
 800f91c:	462a      	mov	r2, r5
 800f91e:	4b0e      	ldr	r3, [pc, #56]	@ (800f958 <_svfiprintf_r+0x1f0>)
 800f920:	a904      	add	r1, sp, #16
 800f922:	4638      	mov	r0, r7
 800f924:	f3af 8000 	nop.w
 800f928:	1c42      	adds	r2, r0, #1
 800f92a:	4606      	mov	r6, r0
 800f92c:	d1d6      	bne.n	800f8dc <_svfiprintf_r+0x174>
 800f92e:	89ab      	ldrh	r3, [r5, #12]
 800f930:	065b      	lsls	r3, r3, #25
 800f932:	f53f af2d 	bmi.w	800f790 <_svfiprintf_r+0x28>
 800f936:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f938:	e72c      	b.n	800f794 <_svfiprintf_r+0x2c>
 800f93a:	ab03      	add	r3, sp, #12
 800f93c:	9300      	str	r3, [sp, #0]
 800f93e:	462a      	mov	r2, r5
 800f940:	4b05      	ldr	r3, [pc, #20]	@ (800f958 <_svfiprintf_r+0x1f0>)
 800f942:	a904      	add	r1, sp, #16
 800f944:	4638      	mov	r0, r7
 800f946:	f000 f9bb 	bl	800fcc0 <_printf_i>
 800f94a:	e7ed      	b.n	800f928 <_svfiprintf_r+0x1c0>
 800f94c:	08012eb1 	.word	0x08012eb1
 800f950:	08012ebb 	.word	0x08012ebb
 800f954:	00000000 	.word	0x00000000
 800f958:	0800f6b1 	.word	0x0800f6b1
 800f95c:	08012eb7 	.word	0x08012eb7

0800f960 <__sfputc_r>:
 800f960:	6893      	ldr	r3, [r2, #8]
 800f962:	3b01      	subs	r3, #1
 800f964:	2b00      	cmp	r3, #0
 800f966:	b410      	push	{r4}
 800f968:	6093      	str	r3, [r2, #8]
 800f96a:	da08      	bge.n	800f97e <__sfputc_r+0x1e>
 800f96c:	6994      	ldr	r4, [r2, #24]
 800f96e:	42a3      	cmp	r3, r4
 800f970:	db01      	blt.n	800f976 <__sfputc_r+0x16>
 800f972:	290a      	cmp	r1, #10
 800f974:	d103      	bne.n	800f97e <__sfputc_r+0x1e>
 800f976:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f97a:	f7ff bd27 	b.w	800f3cc <__swbuf_r>
 800f97e:	6813      	ldr	r3, [r2, #0]
 800f980:	1c58      	adds	r0, r3, #1
 800f982:	6010      	str	r0, [r2, #0]
 800f984:	7019      	strb	r1, [r3, #0]
 800f986:	4608      	mov	r0, r1
 800f988:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f98c:	4770      	bx	lr

0800f98e <__sfputs_r>:
 800f98e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f990:	4606      	mov	r6, r0
 800f992:	460f      	mov	r7, r1
 800f994:	4614      	mov	r4, r2
 800f996:	18d5      	adds	r5, r2, r3
 800f998:	42ac      	cmp	r4, r5
 800f99a:	d101      	bne.n	800f9a0 <__sfputs_r+0x12>
 800f99c:	2000      	movs	r0, #0
 800f99e:	e007      	b.n	800f9b0 <__sfputs_r+0x22>
 800f9a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9a4:	463a      	mov	r2, r7
 800f9a6:	4630      	mov	r0, r6
 800f9a8:	f7ff ffda 	bl	800f960 <__sfputc_r>
 800f9ac:	1c43      	adds	r3, r0, #1
 800f9ae:	d1f3      	bne.n	800f998 <__sfputs_r+0xa>
 800f9b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f9b4 <_vfiprintf_r>:
 800f9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b8:	460d      	mov	r5, r1
 800f9ba:	b09d      	sub	sp, #116	@ 0x74
 800f9bc:	4614      	mov	r4, r2
 800f9be:	4698      	mov	r8, r3
 800f9c0:	4606      	mov	r6, r0
 800f9c2:	b118      	cbz	r0, 800f9cc <_vfiprintf_r+0x18>
 800f9c4:	6a03      	ldr	r3, [r0, #32]
 800f9c6:	b90b      	cbnz	r3, 800f9cc <_vfiprintf_r+0x18>
 800f9c8:	f7ff fbce 	bl	800f168 <__sinit>
 800f9cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f9ce:	07d9      	lsls	r1, r3, #31
 800f9d0:	d405      	bmi.n	800f9de <_vfiprintf_r+0x2a>
 800f9d2:	89ab      	ldrh	r3, [r5, #12]
 800f9d4:	059a      	lsls	r2, r3, #22
 800f9d6:	d402      	bmi.n	800f9de <_vfiprintf_r+0x2a>
 800f9d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f9da:	f7ff fe14 	bl	800f606 <__retarget_lock_acquire_recursive>
 800f9de:	89ab      	ldrh	r3, [r5, #12]
 800f9e0:	071b      	lsls	r3, r3, #28
 800f9e2:	d501      	bpl.n	800f9e8 <_vfiprintf_r+0x34>
 800f9e4:	692b      	ldr	r3, [r5, #16]
 800f9e6:	b99b      	cbnz	r3, 800fa10 <_vfiprintf_r+0x5c>
 800f9e8:	4629      	mov	r1, r5
 800f9ea:	4630      	mov	r0, r6
 800f9ec:	f7ff fd2c 	bl	800f448 <__swsetup_r>
 800f9f0:	b170      	cbz	r0, 800fa10 <_vfiprintf_r+0x5c>
 800f9f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f9f4:	07dc      	lsls	r4, r3, #31
 800f9f6:	d504      	bpl.n	800fa02 <_vfiprintf_r+0x4e>
 800f9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f9fc:	b01d      	add	sp, #116	@ 0x74
 800f9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa02:	89ab      	ldrh	r3, [r5, #12]
 800fa04:	0598      	lsls	r0, r3, #22
 800fa06:	d4f7      	bmi.n	800f9f8 <_vfiprintf_r+0x44>
 800fa08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa0a:	f7ff fdfd 	bl	800f608 <__retarget_lock_release_recursive>
 800fa0e:	e7f3      	b.n	800f9f8 <_vfiprintf_r+0x44>
 800fa10:	2300      	movs	r3, #0
 800fa12:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa14:	2320      	movs	r3, #32
 800fa16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fa1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa1e:	2330      	movs	r3, #48	@ 0x30
 800fa20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fbd0 <_vfiprintf_r+0x21c>
 800fa24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fa28:	f04f 0901 	mov.w	r9, #1
 800fa2c:	4623      	mov	r3, r4
 800fa2e:	469a      	mov	sl, r3
 800fa30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa34:	b10a      	cbz	r2, 800fa3a <_vfiprintf_r+0x86>
 800fa36:	2a25      	cmp	r2, #37	@ 0x25
 800fa38:	d1f9      	bne.n	800fa2e <_vfiprintf_r+0x7a>
 800fa3a:	ebba 0b04 	subs.w	fp, sl, r4
 800fa3e:	d00b      	beq.n	800fa58 <_vfiprintf_r+0xa4>
 800fa40:	465b      	mov	r3, fp
 800fa42:	4622      	mov	r2, r4
 800fa44:	4629      	mov	r1, r5
 800fa46:	4630      	mov	r0, r6
 800fa48:	f7ff ffa1 	bl	800f98e <__sfputs_r>
 800fa4c:	3001      	adds	r0, #1
 800fa4e:	f000 80a7 	beq.w	800fba0 <_vfiprintf_r+0x1ec>
 800fa52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa54:	445a      	add	r2, fp
 800fa56:	9209      	str	r2, [sp, #36]	@ 0x24
 800fa58:	f89a 3000 	ldrb.w	r3, [sl]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	f000 809f 	beq.w	800fba0 <_vfiprintf_r+0x1ec>
 800fa62:	2300      	movs	r3, #0
 800fa64:	f04f 32ff 	mov.w	r2, #4294967295
 800fa68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa6c:	f10a 0a01 	add.w	sl, sl, #1
 800fa70:	9304      	str	r3, [sp, #16]
 800fa72:	9307      	str	r3, [sp, #28]
 800fa74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fa78:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa7a:	4654      	mov	r4, sl
 800fa7c:	2205      	movs	r2, #5
 800fa7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa82:	4853      	ldr	r0, [pc, #332]	@ (800fbd0 <_vfiprintf_r+0x21c>)
 800fa84:	f7f0 fbbc 	bl	8000200 <memchr>
 800fa88:	9a04      	ldr	r2, [sp, #16]
 800fa8a:	b9d8      	cbnz	r0, 800fac4 <_vfiprintf_r+0x110>
 800fa8c:	06d1      	lsls	r1, r2, #27
 800fa8e:	bf44      	itt	mi
 800fa90:	2320      	movmi	r3, #32
 800fa92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa96:	0713      	lsls	r3, r2, #28
 800fa98:	bf44      	itt	mi
 800fa9a:	232b      	movmi	r3, #43	@ 0x2b
 800fa9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800faa0:	f89a 3000 	ldrb.w	r3, [sl]
 800faa4:	2b2a      	cmp	r3, #42	@ 0x2a
 800faa6:	d015      	beq.n	800fad4 <_vfiprintf_r+0x120>
 800faa8:	9a07      	ldr	r2, [sp, #28]
 800faaa:	4654      	mov	r4, sl
 800faac:	2000      	movs	r0, #0
 800faae:	f04f 0c0a 	mov.w	ip, #10
 800fab2:	4621      	mov	r1, r4
 800fab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fab8:	3b30      	subs	r3, #48	@ 0x30
 800faba:	2b09      	cmp	r3, #9
 800fabc:	d94b      	bls.n	800fb56 <_vfiprintf_r+0x1a2>
 800fabe:	b1b0      	cbz	r0, 800faee <_vfiprintf_r+0x13a>
 800fac0:	9207      	str	r2, [sp, #28]
 800fac2:	e014      	b.n	800faee <_vfiprintf_r+0x13a>
 800fac4:	eba0 0308 	sub.w	r3, r0, r8
 800fac8:	fa09 f303 	lsl.w	r3, r9, r3
 800facc:	4313      	orrs	r3, r2
 800face:	9304      	str	r3, [sp, #16]
 800fad0:	46a2      	mov	sl, r4
 800fad2:	e7d2      	b.n	800fa7a <_vfiprintf_r+0xc6>
 800fad4:	9b03      	ldr	r3, [sp, #12]
 800fad6:	1d19      	adds	r1, r3, #4
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	9103      	str	r1, [sp, #12]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	bfbb      	ittet	lt
 800fae0:	425b      	neglt	r3, r3
 800fae2:	f042 0202 	orrlt.w	r2, r2, #2
 800fae6:	9307      	strge	r3, [sp, #28]
 800fae8:	9307      	strlt	r3, [sp, #28]
 800faea:	bfb8      	it	lt
 800faec:	9204      	strlt	r2, [sp, #16]
 800faee:	7823      	ldrb	r3, [r4, #0]
 800faf0:	2b2e      	cmp	r3, #46	@ 0x2e
 800faf2:	d10a      	bne.n	800fb0a <_vfiprintf_r+0x156>
 800faf4:	7863      	ldrb	r3, [r4, #1]
 800faf6:	2b2a      	cmp	r3, #42	@ 0x2a
 800faf8:	d132      	bne.n	800fb60 <_vfiprintf_r+0x1ac>
 800fafa:	9b03      	ldr	r3, [sp, #12]
 800fafc:	1d1a      	adds	r2, r3, #4
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	9203      	str	r2, [sp, #12]
 800fb02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fb06:	3402      	adds	r4, #2
 800fb08:	9305      	str	r3, [sp, #20]
 800fb0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fbe0 <_vfiprintf_r+0x22c>
 800fb0e:	7821      	ldrb	r1, [r4, #0]
 800fb10:	2203      	movs	r2, #3
 800fb12:	4650      	mov	r0, sl
 800fb14:	f7f0 fb74 	bl	8000200 <memchr>
 800fb18:	b138      	cbz	r0, 800fb2a <_vfiprintf_r+0x176>
 800fb1a:	9b04      	ldr	r3, [sp, #16]
 800fb1c:	eba0 000a 	sub.w	r0, r0, sl
 800fb20:	2240      	movs	r2, #64	@ 0x40
 800fb22:	4082      	lsls	r2, r0
 800fb24:	4313      	orrs	r3, r2
 800fb26:	3401      	adds	r4, #1
 800fb28:	9304      	str	r3, [sp, #16]
 800fb2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb2e:	4829      	ldr	r0, [pc, #164]	@ (800fbd4 <_vfiprintf_r+0x220>)
 800fb30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fb34:	2206      	movs	r2, #6
 800fb36:	f7f0 fb63 	bl	8000200 <memchr>
 800fb3a:	2800      	cmp	r0, #0
 800fb3c:	d03f      	beq.n	800fbbe <_vfiprintf_r+0x20a>
 800fb3e:	4b26      	ldr	r3, [pc, #152]	@ (800fbd8 <_vfiprintf_r+0x224>)
 800fb40:	bb1b      	cbnz	r3, 800fb8a <_vfiprintf_r+0x1d6>
 800fb42:	9b03      	ldr	r3, [sp, #12]
 800fb44:	3307      	adds	r3, #7
 800fb46:	f023 0307 	bic.w	r3, r3, #7
 800fb4a:	3308      	adds	r3, #8
 800fb4c:	9303      	str	r3, [sp, #12]
 800fb4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb50:	443b      	add	r3, r7
 800fb52:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb54:	e76a      	b.n	800fa2c <_vfiprintf_r+0x78>
 800fb56:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb5a:	460c      	mov	r4, r1
 800fb5c:	2001      	movs	r0, #1
 800fb5e:	e7a8      	b.n	800fab2 <_vfiprintf_r+0xfe>
 800fb60:	2300      	movs	r3, #0
 800fb62:	3401      	adds	r4, #1
 800fb64:	9305      	str	r3, [sp, #20]
 800fb66:	4619      	mov	r1, r3
 800fb68:	f04f 0c0a 	mov.w	ip, #10
 800fb6c:	4620      	mov	r0, r4
 800fb6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb72:	3a30      	subs	r2, #48	@ 0x30
 800fb74:	2a09      	cmp	r2, #9
 800fb76:	d903      	bls.n	800fb80 <_vfiprintf_r+0x1cc>
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d0c6      	beq.n	800fb0a <_vfiprintf_r+0x156>
 800fb7c:	9105      	str	r1, [sp, #20]
 800fb7e:	e7c4      	b.n	800fb0a <_vfiprintf_r+0x156>
 800fb80:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb84:	4604      	mov	r4, r0
 800fb86:	2301      	movs	r3, #1
 800fb88:	e7f0      	b.n	800fb6c <_vfiprintf_r+0x1b8>
 800fb8a:	ab03      	add	r3, sp, #12
 800fb8c:	9300      	str	r3, [sp, #0]
 800fb8e:	462a      	mov	r2, r5
 800fb90:	4b12      	ldr	r3, [pc, #72]	@ (800fbdc <_vfiprintf_r+0x228>)
 800fb92:	a904      	add	r1, sp, #16
 800fb94:	4630      	mov	r0, r6
 800fb96:	f3af 8000 	nop.w
 800fb9a:	4607      	mov	r7, r0
 800fb9c:	1c78      	adds	r0, r7, #1
 800fb9e:	d1d6      	bne.n	800fb4e <_vfiprintf_r+0x19a>
 800fba0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fba2:	07d9      	lsls	r1, r3, #31
 800fba4:	d405      	bmi.n	800fbb2 <_vfiprintf_r+0x1fe>
 800fba6:	89ab      	ldrh	r3, [r5, #12]
 800fba8:	059a      	lsls	r2, r3, #22
 800fbaa:	d402      	bmi.n	800fbb2 <_vfiprintf_r+0x1fe>
 800fbac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fbae:	f7ff fd2b 	bl	800f608 <__retarget_lock_release_recursive>
 800fbb2:	89ab      	ldrh	r3, [r5, #12]
 800fbb4:	065b      	lsls	r3, r3, #25
 800fbb6:	f53f af1f 	bmi.w	800f9f8 <_vfiprintf_r+0x44>
 800fbba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fbbc:	e71e      	b.n	800f9fc <_vfiprintf_r+0x48>
 800fbbe:	ab03      	add	r3, sp, #12
 800fbc0:	9300      	str	r3, [sp, #0]
 800fbc2:	462a      	mov	r2, r5
 800fbc4:	4b05      	ldr	r3, [pc, #20]	@ (800fbdc <_vfiprintf_r+0x228>)
 800fbc6:	a904      	add	r1, sp, #16
 800fbc8:	4630      	mov	r0, r6
 800fbca:	f000 f879 	bl	800fcc0 <_printf_i>
 800fbce:	e7e4      	b.n	800fb9a <_vfiprintf_r+0x1e6>
 800fbd0:	08012eb1 	.word	0x08012eb1
 800fbd4:	08012ebb 	.word	0x08012ebb
 800fbd8:	00000000 	.word	0x00000000
 800fbdc:	0800f98f 	.word	0x0800f98f
 800fbe0:	08012eb7 	.word	0x08012eb7

0800fbe4 <_printf_common>:
 800fbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbe8:	4616      	mov	r6, r2
 800fbea:	4698      	mov	r8, r3
 800fbec:	688a      	ldr	r2, [r1, #8]
 800fbee:	690b      	ldr	r3, [r1, #16]
 800fbf0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fbf4:	4293      	cmp	r3, r2
 800fbf6:	bfb8      	it	lt
 800fbf8:	4613      	movlt	r3, r2
 800fbfa:	6033      	str	r3, [r6, #0]
 800fbfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fc00:	4607      	mov	r7, r0
 800fc02:	460c      	mov	r4, r1
 800fc04:	b10a      	cbz	r2, 800fc0a <_printf_common+0x26>
 800fc06:	3301      	adds	r3, #1
 800fc08:	6033      	str	r3, [r6, #0]
 800fc0a:	6823      	ldr	r3, [r4, #0]
 800fc0c:	0699      	lsls	r1, r3, #26
 800fc0e:	bf42      	ittt	mi
 800fc10:	6833      	ldrmi	r3, [r6, #0]
 800fc12:	3302      	addmi	r3, #2
 800fc14:	6033      	strmi	r3, [r6, #0]
 800fc16:	6825      	ldr	r5, [r4, #0]
 800fc18:	f015 0506 	ands.w	r5, r5, #6
 800fc1c:	d106      	bne.n	800fc2c <_printf_common+0x48>
 800fc1e:	f104 0a19 	add.w	sl, r4, #25
 800fc22:	68e3      	ldr	r3, [r4, #12]
 800fc24:	6832      	ldr	r2, [r6, #0]
 800fc26:	1a9b      	subs	r3, r3, r2
 800fc28:	42ab      	cmp	r3, r5
 800fc2a:	dc26      	bgt.n	800fc7a <_printf_common+0x96>
 800fc2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fc30:	6822      	ldr	r2, [r4, #0]
 800fc32:	3b00      	subs	r3, #0
 800fc34:	bf18      	it	ne
 800fc36:	2301      	movne	r3, #1
 800fc38:	0692      	lsls	r2, r2, #26
 800fc3a:	d42b      	bmi.n	800fc94 <_printf_common+0xb0>
 800fc3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fc40:	4641      	mov	r1, r8
 800fc42:	4638      	mov	r0, r7
 800fc44:	47c8      	blx	r9
 800fc46:	3001      	adds	r0, #1
 800fc48:	d01e      	beq.n	800fc88 <_printf_common+0xa4>
 800fc4a:	6823      	ldr	r3, [r4, #0]
 800fc4c:	6922      	ldr	r2, [r4, #16]
 800fc4e:	f003 0306 	and.w	r3, r3, #6
 800fc52:	2b04      	cmp	r3, #4
 800fc54:	bf02      	ittt	eq
 800fc56:	68e5      	ldreq	r5, [r4, #12]
 800fc58:	6833      	ldreq	r3, [r6, #0]
 800fc5a:	1aed      	subeq	r5, r5, r3
 800fc5c:	68a3      	ldr	r3, [r4, #8]
 800fc5e:	bf0c      	ite	eq
 800fc60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fc64:	2500      	movne	r5, #0
 800fc66:	4293      	cmp	r3, r2
 800fc68:	bfc4      	itt	gt
 800fc6a:	1a9b      	subgt	r3, r3, r2
 800fc6c:	18ed      	addgt	r5, r5, r3
 800fc6e:	2600      	movs	r6, #0
 800fc70:	341a      	adds	r4, #26
 800fc72:	42b5      	cmp	r5, r6
 800fc74:	d11a      	bne.n	800fcac <_printf_common+0xc8>
 800fc76:	2000      	movs	r0, #0
 800fc78:	e008      	b.n	800fc8c <_printf_common+0xa8>
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	4652      	mov	r2, sl
 800fc7e:	4641      	mov	r1, r8
 800fc80:	4638      	mov	r0, r7
 800fc82:	47c8      	blx	r9
 800fc84:	3001      	adds	r0, #1
 800fc86:	d103      	bne.n	800fc90 <_printf_common+0xac>
 800fc88:	f04f 30ff 	mov.w	r0, #4294967295
 800fc8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc90:	3501      	adds	r5, #1
 800fc92:	e7c6      	b.n	800fc22 <_printf_common+0x3e>
 800fc94:	18e1      	adds	r1, r4, r3
 800fc96:	1c5a      	adds	r2, r3, #1
 800fc98:	2030      	movs	r0, #48	@ 0x30
 800fc9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fc9e:	4422      	add	r2, r4
 800fca0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fca4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fca8:	3302      	adds	r3, #2
 800fcaa:	e7c7      	b.n	800fc3c <_printf_common+0x58>
 800fcac:	2301      	movs	r3, #1
 800fcae:	4622      	mov	r2, r4
 800fcb0:	4641      	mov	r1, r8
 800fcb2:	4638      	mov	r0, r7
 800fcb4:	47c8      	blx	r9
 800fcb6:	3001      	adds	r0, #1
 800fcb8:	d0e6      	beq.n	800fc88 <_printf_common+0xa4>
 800fcba:	3601      	adds	r6, #1
 800fcbc:	e7d9      	b.n	800fc72 <_printf_common+0x8e>
	...

0800fcc0 <_printf_i>:
 800fcc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fcc4:	7e0f      	ldrb	r7, [r1, #24]
 800fcc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fcc8:	2f78      	cmp	r7, #120	@ 0x78
 800fcca:	4691      	mov	r9, r2
 800fccc:	4680      	mov	r8, r0
 800fcce:	460c      	mov	r4, r1
 800fcd0:	469a      	mov	sl, r3
 800fcd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fcd6:	d807      	bhi.n	800fce8 <_printf_i+0x28>
 800fcd8:	2f62      	cmp	r7, #98	@ 0x62
 800fcda:	d80a      	bhi.n	800fcf2 <_printf_i+0x32>
 800fcdc:	2f00      	cmp	r7, #0
 800fcde:	f000 80d2 	beq.w	800fe86 <_printf_i+0x1c6>
 800fce2:	2f58      	cmp	r7, #88	@ 0x58
 800fce4:	f000 80b9 	beq.w	800fe5a <_printf_i+0x19a>
 800fce8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fcec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fcf0:	e03a      	b.n	800fd68 <_printf_i+0xa8>
 800fcf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fcf6:	2b15      	cmp	r3, #21
 800fcf8:	d8f6      	bhi.n	800fce8 <_printf_i+0x28>
 800fcfa:	a101      	add	r1, pc, #4	@ (adr r1, 800fd00 <_printf_i+0x40>)
 800fcfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fd00:	0800fd59 	.word	0x0800fd59
 800fd04:	0800fd6d 	.word	0x0800fd6d
 800fd08:	0800fce9 	.word	0x0800fce9
 800fd0c:	0800fce9 	.word	0x0800fce9
 800fd10:	0800fce9 	.word	0x0800fce9
 800fd14:	0800fce9 	.word	0x0800fce9
 800fd18:	0800fd6d 	.word	0x0800fd6d
 800fd1c:	0800fce9 	.word	0x0800fce9
 800fd20:	0800fce9 	.word	0x0800fce9
 800fd24:	0800fce9 	.word	0x0800fce9
 800fd28:	0800fce9 	.word	0x0800fce9
 800fd2c:	0800fe6d 	.word	0x0800fe6d
 800fd30:	0800fd97 	.word	0x0800fd97
 800fd34:	0800fe27 	.word	0x0800fe27
 800fd38:	0800fce9 	.word	0x0800fce9
 800fd3c:	0800fce9 	.word	0x0800fce9
 800fd40:	0800fe8f 	.word	0x0800fe8f
 800fd44:	0800fce9 	.word	0x0800fce9
 800fd48:	0800fd97 	.word	0x0800fd97
 800fd4c:	0800fce9 	.word	0x0800fce9
 800fd50:	0800fce9 	.word	0x0800fce9
 800fd54:	0800fe2f 	.word	0x0800fe2f
 800fd58:	6833      	ldr	r3, [r6, #0]
 800fd5a:	1d1a      	adds	r2, r3, #4
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	6032      	str	r2, [r6, #0]
 800fd60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fd64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fd68:	2301      	movs	r3, #1
 800fd6a:	e09d      	b.n	800fea8 <_printf_i+0x1e8>
 800fd6c:	6833      	ldr	r3, [r6, #0]
 800fd6e:	6820      	ldr	r0, [r4, #0]
 800fd70:	1d19      	adds	r1, r3, #4
 800fd72:	6031      	str	r1, [r6, #0]
 800fd74:	0606      	lsls	r6, r0, #24
 800fd76:	d501      	bpl.n	800fd7c <_printf_i+0xbc>
 800fd78:	681d      	ldr	r5, [r3, #0]
 800fd7a:	e003      	b.n	800fd84 <_printf_i+0xc4>
 800fd7c:	0645      	lsls	r5, r0, #25
 800fd7e:	d5fb      	bpl.n	800fd78 <_printf_i+0xb8>
 800fd80:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fd84:	2d00      	cmp	r5, #0
 800fd86:	da03      	bge.n	800fd90 <_printf_i+0xd0>
 800fd88:	232d      	movs	r3, #45	@ 0x2d
 800fd8a:	426d      	negs	r5, r5
 800fd8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd90:	4859      	ldr	r0, [pc, #356]	@ (800fef8 <_printf_i+0x238>)
 800fd92:	230a      	movs	r3, #10
 800fd94:	e011      	b.n	800fdba <_printf_i+0xfa>
 800fd96:	6821      	ldr	r1, [r4, #0]
 800fd98:	6833      	ldr	r3, [r6, #0]
 800fd9a:	0608      	lsls	r0, r1, #24
 800fd9c:	f853 5b04 	ldr.w	r5, [r3], #4
 800fda0:	d402      	bmi.n	800fda8 <_printf_i+0xe8>
 800fda2:	0649      	lsls	r1, r1, #25
 800fda4:	bf48      	it	mi
 800fda6:	b2ad      	uxthmi	r5, r5
 800fda8:	2f6f      	cmp	r7, #111	@ 0x6f
 800fdaa:	4853      	ldr	r0, [pc, #332]	@ (800fef8 <_printf_i+0x238>)
 800fdac:	6033      	str	r3, [r6, #0]
 800fdae:	bf14      	ite	ne
 800fdb0:	230a      	movne	r3, #10
 800fdb2:	2308      	moveq	r3, #8
 800fdb4:	2100      	movs	r1, #0
 800fdb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fdba:	6866      	ldr	r6, [r4, #4]
 800fdbc:	60a6      	str	r6, [r4, #8]
 800fdbe:	2e00      	cmp	r6, #0
 800fdc0:	bfa2      	ittt	ge
 800fdc2:	6821      	ldrge	r1, [r4, #0]
 800fdc4:	f021 0104 	bicge.w	r1, r1, #4
 800fdc8:	6021      	strge	r1, [r4, #0]
 800fdca:	b90d      	cbnz	r5, 800fdd0 <_printf_i+0x110>
 800fdcc:	2e00      	cmp	r6, #0
 800fdce:	d04b      	beq.n	800fe68 <_printf_i+0x1a8>
 800fdd0:	4616      	mov	r6, r2
 800fdd2:	fbb5 f1f3 	udiv	r1, r5, r3
 800fdd6:	fb03 5711 	mls	r7, r3, r1, r5
 800fdda:	5dc7      	ldrb	r7, [r0, r7]
 800fddc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fde0:	462f      	mov	r7, r5
 800fde2:	42bb      	cmp	r3, r7
 800fde4:	460d      	mov	r5, r1
 800fde6:	d9f4      	bls.n	800fdd2 <_printf_i+0x112>
 800fde8:	2b08      	cmp	r3, #8
 800fdea:	d10b      	bne.n	800fe04 <_printf_i+0x144>
 800fdec:	6823      	ldr	r3, [r4, #0]
 800fdee:	07df      	lsls	r7, r3, #31
 800fdf0:	d508      	bpl.n	800fe04 <_printf_i+0x144>
 800fdf2:	6923      	ldr	r3, [r4, #16]
 800fdf4:	6861      	ldr	r1, [r4, #4]
 800fdf6:	4299      	cmp	r1, r3
 800fdf8:	bfde      	ittt	le
 800fdfa:	2330      	movle	r3, #48	@ 0x30
 800fdfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fe00:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fe04:	1b92      	subs	r2, r2, r6
 800fe06:	6122      	str	r2, [r4, #16]
 800fe08:	f8cd a000 	str.w	sl, [sp]
 800fe0c:	464b      	mov	r3, r9
 800fe0e:	aa03      	add	r2, sp, #12
 800fe10:	4621      	mov	r1, r4
 800fe12:	4640      	mov	r0, r8
 800fe14:	f7ff fee6 	bl	800fbe4 <_printf_common>
 800fe18:	3001      	adds	r0, #1
 800fe1a:	d14a      	bne.n	800feb2 <_printf_i+0x1f2>
 800fe1c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe20:	b004      	add	sp, #16
 800fe22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe26:	6823      	ldr	r3, [r4, #0]
 800fe28:	f043 0320 	orr.w	r3, r3, #32
 800fe2c:	6023      	str	r3, [r4, #0]
 800fe2e:	4833      	ldr	r0, [pc, #204]	@ (800fefc <_printf_i+0x23c>)
 800fe30:	2778      	movs	r7, #120	@ 0x78
 800fe32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fe36:	6823      	ldr	r3, [r4, #0]
 800fe38:	6831      	ldr	r1, [r6, #0]
 800fe3a:	061f      	lsls	r7, r3, #24
 800fe3c:	f851 5b04 	ldr.w	r5, [r1], #4
 800fe40:	d402      	bmi.n	800fe48 <_printf_i+0x188>
 800fe42:	065f      	lsls	r7, r3, #25
 800fe44:	bf48      	it	mi
 800fe46:	b2ad      	uxthmi	r5, r5
 800fe48:	6031      	str	r1, [r6, #0]
 800fe4a:	07d9      	lsls	r1, r3, #31
 800fe4c:	bf44      	itt	mi
 800fe4e:	f043 0320 	orrmi.w	r3, r3, #32
 800fe52:	6023      	strmi	r3, [r4, #0]
 800fe54:	b11d      	cbz	r5, 800fe5e <_printf_i+0x19e>
 800fe56:	2310      	movs	r3, #16
 800fe58:	e7ac      	b.n	800fdb4 <_printf_i+0xf4>
 800fe5a:	4827      	ldr	r0, [pc, #156]	@ (800fef8 <_printf_i+0x238>)
 800fe5c:	e7e9      	b.n	800fe32 <_printf_i+0x172>
 800fe5e:	6823      	ldr	r3, [r4, #0]
 800fe60:	f023 0320 	bic.w	r3, r3, #32
 800fe64:	6023      	str	r3, [r4, #0]
 800fe66:	e7f6      	b.n	800fe56 <_printf_i+0x196>
 800fe68:	4616      	mov	r6, r2
 800fe6a:	e7bd      	b.n	800fde8 <_printf_i+0x128>
 800fe6c:	6833      	ldr	r3, [r6, #0]
 800fe6e:	6825      	ldr	r5, [r4, #0]
 800fe70:	6961      	ldr	r1, [r4, #20]
 800fe72:	1d18      	adds	r0, r3, #4
 800fe74:	6030      	str	r0, [r6, #0]
 800fe76:	062e      	lsls	r6, r5, #24
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	d501      	bpl.n	800fe80 <_printf_i+0x1c0>
 800fe7c:	6019      	str	r1, [r3, #0]
 800fe7e:	e002      	b.n	800fe86 <_printf_i+0x1c6>
 800fe80:	0668      	lsls	r0, r5, #25
 800fe82:	d5fb      	bpl.n	800fe7c <_printf_i+0x1bc>
 800fe84:	8019      	strh	r1, [r3, #0]
 800fe86:	2300      	movs	r3, #0
 800fe88:	6123      	str	r3, [r4, #16]
 800fe8a:	4616      	mov	r6, r2
 800fe8c:	e7bc      	b.n	800fe08 <_printf_i+0x148>
 800fe8e:	6833      	ldr	r3, [r6, #0]
 800fe90:	1d1a      	adds	r2, r3, #4
 800fe92:	6032      	str	r2, [r6, #0]
 800fe94:	681e      	ldr	r6, [r3, #0]
 800fe96:	6862      	ldr	r2, [r4, #4]
 800fe98:	2100      	movs	r1, #0
 800fe9a:	4630      	mov	r0, r6
 800fe9c:	f7f0 f9b0 	bl	8000200 <memchr>
 800fea0:	b108      	cbz	r0, 800fea6 <_printf_i+0x1e6>
 800fea2:	1b80      	subs	r0, r0, r6
 800fea4:	6060      	str	r0, [r4, #4]
 800fea6:	6863      	ldr	r3, [r4, #4]
 800fea8:	6123      	str	r3, [r4, #16]
 800feaa:	2300      	movs	r3, #0
 800feac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800feb0:	e7aa      	b.n	800fe08 <_printf_i+0x148>
 800feb2:	6923      	ldr	r3, [r4, #16]
 800feb4:	4632      	mov	r2, r6
 800feb6:	4649      	mov	r1, r9
 800feb8:	4640      	mov	r0, r8
 800feba:	47d0      	blx	sl
 800febc:	3001      	adds	r0, #1
 800febe:	d0ad      	beq.n	800fe1c <_printf_i+0x15c>
 800fec0:	6823      	ldr	r3, [r4, #0]
 800fec2:	079b      	lsls	r3, r3, #30
 800fec4:	d413      	bmi.n	800feee <_printf_i+0x22e>
 800fec6:	68e0      	ldr	r0, [r4, #12]
 800fec8:	9b03      	ldr	r3, [sp, #12]
 800feca:	4298      	cmp	r0, r3
 800fecc:	bfb8      	it	lt
 800fece:	4618      	movlt	r0, r3
 800fed0:	e7a6      	b.n	800fe20 <_printf_i+0x160>
 800fed2:	2301      	movs	r3, #1
 800fed4:	4632      	mov	r2, r6
 800fed6:	4649      	mov	r1, r9
 800fed8:	4640      	mov	r0, r8
 800feda:	47d0      	blx	sl
 800fedc:	3001      	adds	r0, #1
 800fede:	d09d      	beq.n	800fe1c <_printf_i+0x15c>
 800fee0:	3501      	adds	r5, #1
 800fee2:	68e3      	ldr	r3, [r4, #12]
 800fee4:	9903      	ldr	r1, [sp, #12]
 800fee6:	1a5b      	subs	r3, r3, r1
 800fee8:	42ab      	cmp	r3, r5
 800feea:	dcf2      	bgt.n	800fed2 <_printf_i+0x212>
 800feec:	e7eb      	b.n	800fec6 <_printf_i+0x206>
 800feee:	2500      	movs	r5, #0
 800fef0:	f104 0619 	add.w	r6, r4, #25
 800fef4:	e7f5      	b.n	800fee2 <_printf_i+0x222>
 800fef6:	bf00      	nop
 800fef8:	08012ec2 	.word	0x08012ec2
 800fefc:	08012ed3 	.word	0x08012ed3

0800ff00 <__sflush_r>:
 800ff00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ff04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff08:	0716      	lsls	r6, r2, #28
 800ff0a:	4605      	mov	r5, r0
 800ff0c:	460c      	mov	r4, r1
 800ff0e:	d454      	bmi.n	800ffba <__sflush_r+0xba>
 800ff10:	684b      	ldr	r3, [r1, #4]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	dc02      	bgt.n	800ff1c <__sflush_r+0x1c>
 800ff16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	dd48      	ble.n	800ffae <__sflush_r+0xae>
 800ff1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ff1e:	2e00      	cmp	r6, #0
 800ff20:	d045      	beq.n	800ffae <__sflush_r+0xae>
 800ff22:	2300      	movs	r3, #0
 800ff24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ff28:	682f      	ldr	r7, [r5, #0]
 800ff2a:	6a21      	ldr	r1, [r4, #32]
 800ff2c:	602b      	str	r3, [r5, #0]
 800ff2e:	d030      	beq.n	800ff92 <__sflush_r+0x92>
 800ff30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ff32:	89a3      	ldrh	r3, [r4, #12]
 800ff34:	0759      	lsls	r1, r3, #29
 800ff36:	d505      	bpl.n	800ff44 <__sflush_r+0x44>
 800ff38:	6863      	ldr	r3, [r4, #4]
 800ff3a:	1ad2      	subs	r2, r2, r3
 800ff3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ff3e:	b10b      	cbz	r3, 800ff44 <__sflush_r+0x44>
 800ff40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ff42:	1ad2      	subs	r2, r2, r3
 800ff44:	2300      	movs	r3, #0
 800ff46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ff48:	6a21      	ldr	r1, [r4, #32]
 800ff4a:	4628      	mov	r0, r5
 800ff4c:	47b0      	blx	r6
 800ff4e:	1c43      	adds	r3, r0, #1
 800ff50:	89a3      	ldrh	r3, [r4, #12]
 800ff52:	d106      	bne.n	800ff62 <__sflush_r+0x62>
 800ff54:	6829      	ldr	r1, [r5, #0]
 800ff56:	291d      	cmp	r1, #29
 800ff58:	d82b      	bhi.n	800ffb2 <__sflush_r+0xb2>
 800ff5a:	4a2a      	ldr	r2, [pc, #168]	@ (8010004 <__sflush_r+0x104>)
 800ff5c:	410a      	asrs	r2, r1
 800ff5e:	07d6      	lsls	r6, r2, #31
 800ff60:	d427      	bmi.n	800ffb2 <__sflush_r+0xb2>
 800ff62:	2200      	movs	r2, #0
 800ff64:	6062      	str	r2, [r4, #4]
 800ff66:	04d9      	lsls	r1, r3, #19
 800ff68:	6922      	ldr	r2, [r4, #16]
 800ff6a:	6022      	str	r2, [r4, #0]
 800ff6c:	d504      	bpl.n	800ff78 <__sflush_r+0x78>
 800ff6e:	1c42      	adds	r2, r0, #1
 800ff70:	d101      	bne.n	800ff76 <__sflush_r+0x76>
 800ff72:	682b      	ldr	r3, [r5, #0]
 800ff74:	b903      	cbnz	r3, 800ff78 <__sflush_r+0x78>
 800ff76:	6560      	str	r0, [r4, #84]	@ 0x54
 800ff78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ff7a:	602f      	str	r7, [r5, #0]
 800ff7c:	b1b9      	cbz	r1, 800ffae <__sflush_r+0xae>
 800ff7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ff82:	4299      	cmp	r1, r3
 800ff84:	d002      	beq.n	800ff8c <__sflush_r+0x8c>
 800ff86:	4628      	mov	r0, r5
 800ff88:	f7ff fb48 	bl	800f61c <_free_r>
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff90:	e00d      	b.n	800ffae <__sflush_r+0xae>
 800ff92:	2301      	movs	r3, #1
 800ff94:	4628      	mov	r0, r5
 800ff96:	47b0      	blx	r6
 800ff98:	4602      	mov	r2, r0
 800ff9a:	1c50      	adds	r0, r2, #1
 800ff9c:	d1c9      	bne.n	800ff32 <__sflush_r+0x32>
 800ff9e:	682b      	ldr	r3, [r5, #0]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d0c6      	beq.n	800ff32 <__sflush_r+0x32>
 800ffa4:	2b1d      	cmp	r3, #29
 800ffa6:	d001      	beq.n	800ffac <__sflush_r+0xac>
 800ffa8:	2b16      	cmp	r3, #22
 800ffaa:	d11e      	bne.n	800ffea <__sflush_r+0xea>
 800ffac:	602f      	str	r7, [r5, #0]
 800ffae:	2000      	movs	r0, #0
 800ffb0:	e022      	b.n	800fff8 <__sflush_r+0xf8>
 800ffb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ffb6:	b21b      	sxth	r3, r3
 800ffb8:	e01b      	b.n	800fff2 <__sflush_r+0xf2>
 800ffba:	690f      	ldr	r7, [r1, #16]
 800ffbc:	2f00      	cmp	r7, #0
 800ffbe:	d0f6      	beq.n	800ffae <__sflush_r+0xae>
 800ffc0:	0793      	lsls	r3, r2, #30
 800ffc2:	680e      	ldr	r6, [r1, #0]
 800ffc4:	bf08      	it	eq
 800ffc6:	694b      	ldreq	r3, [r1, #20]
 800ffc8:	600f      	str	r7, [r1, #0]
 800ffca:	bf18      	it	ne
 800ffcc:	2300      	movne	r3, #0
 800ffce:	eba6 0807 	sub.w	r8, r6, r7
 800ffd2:	608b      	str	r3, [r1, #8]
 800ffd4:	f1b8 0f00 	cmp.w	r8, #0
 800ffd8:	dde9      	ble.n	800ffae <__sflush_r+0xae>
 800ffda:	6a21      	ldr	r1, [r4, #32]
 800ffdc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ffde:	4643      	mov	r3, r8
 800ffe0:	463a      	mov	r2, r7
 800ffe2:	4628      	mov	r0, r5
 800ffe4:	47b0      	blx	r6
 800ffe6:	2800      	cmp	r0, #0
 800ffe8:	dc08      	bgt.n	800fffc <__sflush_r+0xfc>
 800ffea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fff2:	81a3      	strh	r3, [r4, #12]
 800fff4:	f04f 30ff 	mov.w	r0, #4294967295
 800fff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fffc:	4407      	add	r7, r0
 800fffe:	eba8 0800 	sub.w	r8, r8, r0
 8010002:	e7e7      	b.n	800ffd4 <__sflush_r+0xd4>
 8010004:	dfbffffe 	.word	0xdfbffffe

08010008 <_fflush_r>:
 8010008:	b538      	push	{r3, r4, r5, lr}
 801000a:	690b      	ldr	r3, [r1, #16]
 801000c:	4605      	mov	r5, r0
 801000e:	460c      	mov	r4, r1
 8010010:	b913      	cbnz	r3, 8010018 <_fflush_r+0x10>
 8010012:	2500      	movs	r5, #0
 8010014:	4628      	mov	r0, r5
 8010016:	bd38      	pop	{r3, r4, r5, pc}
 8010018:	b118      	cbz	r0, 8010022 <_fflush_r+0x1a>
 801001a:	6a03      	ldr	r3, [r0, #32]
 801001c:	b90b      	cbnz	r3, 8010022 <_fflush_r+0x1a>
 801001e:	f7ff f8a3 	bl	800f168 <__sinit>
 8010022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d0f3      	beq.n	8010012 <_fflush_r+0xa>
 801002a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801002c:	07d0      	lsls	r0, r2, #31
 801002e:	d404      	bmi.n	801003a <_fflush_r+0x32>
 8010030:	0599      	lsls	r1, r3, #22
 8010032:	d402      	bmi.n	801003a <_fflush_r+0x32>
 8010034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010036:	f7ff fae6 	bl	800f606 <__retarget_lock_acquire_recursive>
 801003a:	4628      	mov	r0, r5
 801003c:	4621      	mov	r1, r4
 801003e:	f7ff ff5f 	bl	800ff00 <__sflush_r>
 8010042:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010044:	07da      	lsls	r2, r3, #31
 8010046:	4605      	mov	r5, r0
 8010048:	d4e4      	bmi.n	8010014 <_fflush_r+0xc>
 801004a:	89a3      	ldrh	r3, [r4, #12]
 801004c:	059b      	lsls	r3, r3, #22
 801004e:	d4e1      	bmi.n	8010014 <_fflush_r+0xc>
 8010050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010052:	f7ff fad9 	bl	800f608 <__retarget_lock_release_recursive>
 8010056:	e7dd      	b.n	8010014 <_fflush_r+0xc>

08010058 <__swhatbuf_r>:
 8010058:	b570      	push	{r4, r5, r6, lr}
 801005a:	460c      	mov	r4, r1
 801005c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010060:	2900      	cmp	r1, #0
 8010062:	b096      	sub	sp, #88	@ 0x58
 8010064:	4615      	mov	r5, r2
 8010066:	461e      	mov	r6, r3
 8010068:	da0d      	bge.n	8010086 <__swhatbuf_r+0x2e>
 801006a:	89a3      	ldrh	r3, [r4, #12]
 801006c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010070:	f04f 0100 	mov.w	r1, #0
 8010074:	bf14      	ite	ne
 8010076:	2340      	movne	r3, #64	@ 0x40
 8010078:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801007c:	2000      	movs	r0, #0
 801007e:	6031      	str	r1, [r6, #0]
 8010080:	602b      	str	r3, [r5, #0]
 8010082:	b016      	add	sp, #88	@ 0x58
 8010084:	bd70      	pop	{r4, r5, r6, pc}
 8010086:	466a      	mov	r2, sp
 8010088:	f000 f896 	bl	80101b8 <_fstat_r>
 801008c:	2800      	cmp	r0, #0
 801008e:	dbec      	blt.n	801006a <__swhatbuf_r+0x12>
 8010090:	9901      	ldr	r1, [sp, #4]
 8010092:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010096:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801009a:	4259      	negs	r1, r3
 801009c:	4159      	adcs	r1, r3
 801009e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80100a2:	e7eb      	b.n	801007c <__swhatbuf_r+0x24>

080100a4 <__smakebuf_r>:
 80100a4:	898b      	ldrh	r3, [r1, #12]
 80100a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100a8:	079d      	lsls	r5, r3, #30
 80100aa:	4606      	mov	r6, r0
 80100ac:	460c      	mov	r4, r1
 80100ae:	d507      	bpl.n	80100c0 <__smakebuf_r+0x1c>
 80100b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80100b4:	6023      	str	r3, [r4, #0]
 80100b6:	6123      	str	r3, [r4, #16]
 80100b8:	2301      	movs	r3, #1
 80100ba:	6163      	str	r3, [r4, #20]
 80100bc:	b003      	add	sp, #12
 80100be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100c0:	ab01      	add	r3, sp, #4
 80100c2:	466a      	mov	r2, sp
 80100c4:	f7ff ffc8 	bl	8010058 <__swhatbuf_r>
 80100c8:	9f00      	ldr	r7, [sp, #0]
 80100ca:	4605      	mov	r5, r0
 80100cc:	4639      	mov	r1, r7
 80100ce:	4630      	mov	r0, r6
 80100d0:	f7fe feae 	bl	800ee30 <_malloc_r>
 80100d4:	b948      	cbnz	r0, 80100ea <__smakebuf_r+0x46>
 80100d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100da:	059a      	lsls	r2, r3, #22
 80100dc:	d4ee      	bmi.n	80100bc <__smakebuf_r+0x18>
 80100de:	f023 0303 	bic.w	r3, r3, #3
 80100e2:	f043 0302 	orr.w	r3, r3, #2
 80100e6:	81a3      	strh	r3, [r4, #12]
 80100e8:	e7e2      	b.n	80100b0 <__smakebuf_r+0xc>
 80100ea:	89a3      	ldrh	r3, [r4, #12]
 80100ec:	6020      	str	r0, [r4, #0]
 80100ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80100f2:	81a3      	strh	r3, [r4, #12]
 80100f4:	9b01      	ldr	r3, [sp, #4]
 80100f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80100fa:	b15b      	cbz	r3, 8010114 <__smakebuf_r+0x70>
 80100fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010100:	4630      	mov	r0, r6
 8010102:	f000 f86b 	bl	80101dc <_isatty_r>
 8010106:	b128      	cbz	r0, 8010114 <__smakebuf_r+0x70>
 8010108:	89a3      	ldrh	r3, [r4, #12]
 801010a:	f023 0303 	bic.w	r3, r3, #3
 801010e:	f043 0301 	orr.w	r3, r3, #1
 8010112:	81a3      	strh	r3, [r4, #12]
 8010114:	89a3      	ldrh	r3, [r4, #12]
 8010116:	431d      	orrs	r5, r3
 8010118:	81a5      	strh	r5, [r4, #12]
 801011a:	e7cf      	b.n	80100bc <__smakebuf_r+0x18>

0801011c <_putc_r>:
 801011c:	b570      	push	{r4, r5, r6, lr}
 801011e:	460d      	mov	r5, r1
 8010120:	4614      	mov	r4, r2
 8010122:	4606      	mov	r6, r0
 8010124:	b118      	cbz	r0, 801012e <_putc_r+0x12>
 8010126:	6a03      	ldr	r3, [r0, #32]
 8010128:	b90b      	cbnz	r3, 801012e <_putc_r+0x12>
 801012a:	f7ff f81d 	bl	800f168 <__sinit>
 801012e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010130:	07d8      	lsls	r0, r3, #31
 8010132:	d405      	bmi.n	8010140 <_putc_r+0x24>
 8010134:	89a3      	ldrh	r3, [r4, #12]
 8010136:	0599      	lsls	r1, r3, #22
 8010138:	d402      	bmi.n	8010140 <_putc_r+0x24>
 801013a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801013c:	f7ff fa63 	bl	800f606 <__retarget_lock_acquire_recursive>
 8010140:	68a3      	ldr	r3, [r4, #8]
 8010142:	3b01      	subs	r3, #1
 8010144:	2b00      	cmp	r3, #0
 8010146:	60a3      	str	r3, [r4, #8]
 8010148:	da05      	bge.n	8010156 <_putc_r+0x3a>
 801014a:	69a2      	ldr	r2, [r4, #24]
 801014c:	4293      	cmp	r3, r2
 801014e:	db12      	blt.n	8010176 <_putc_r+0x5a>
 8010150:	b2eb      	uxtb	r3, r5
 8010152:	2b0a      	cmp	r3, #10
 8010154:	d00f      	beq.n	8010176 <_putc_r+0x5a>
 8010156:	6823      	ldr	r3, [r4, #0]
 8010158:	1c5a      	adds	r2, r3, #1
 801015a:	6022      	str	r2, [r4, #0]
 801015c:	701d      	strb	r5, [r3, #0]
 801015e:	b2ed      	uxtb	r5, r5
 8010160:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010162:	07da      	lsls	r2, r3, #31
 8010164:	d405      	bmi.n	8010172 <_putc_r+0x56>
 8010166:	89a3      	ldrh	r3, [r4, #12]
 8010168:	059b      	lsls	r3, r3, #22
 801016a:	d402      	bmi.n	8010172 <_putc_r+0x56>
 801016c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801016e:	f7ff fa4b 	bl	800f608 <__retarget_lock_release_recursive>
 8010172:	4628      	mov	r0, r5
 8010174:	bd70      	pop	{r4, r5, r6, pc}
 8010176:	4629      	mov	r1, r5
 8010178:	4622      	mov	r2, r4
 801017a:	4630      	mov	r0, r6
 801017c:	f7ff f926 	bl	800f3cc <__swbuf_r>
 8010180:	4605      	mov	r5, r0
 8010182:	e7ed      	b.n	8010160 <_putc_r+0x44>

08010184 <memmove>:
 8010184:	4288      	cmp	r0, r1
 8010186:	b510      	push	{r4, lr}
 8010188:	eb01 0402 	add.w	r4, r1, r2
 801018c:	d902      	bls.n	8010194 <memmove+0x10>
 801018e:	4284      	cmp	r4, r0
 8010190:	4623      	mov	r3, r4
 8010192:	d807      	bhi.n	80101a4 <memmove+0x20>
 8010194:	1e43      	subs	r3, r0, #1
 8010196:	42a1      	cmp	r1, r4
 8010198:	d008      	beq.n	80101ac <memmove+0x28>
 801019a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801019e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80101a2:	e7f8      	b.n	8010196 <memmove+0x12>
 80101a4:	4402      	add	r2, r0
 80101a6:	4601      	mov	r1, r0
 80101a8:	428a      	cmp	r2, r1
 80101aa:	d100      	bne.n	80101ae <memmove+0x2a>
 80101ac:	bd10      	pop	{r4, pc}
 80101ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80101b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80101b6:	e7f7      	b.n	80101a8 <memmove+0x24>

080101b8 <_fstat_r>:
 80101b8:	b538      	push	{r3, r4, r5, lr}
 80101ba:	4d07      	ldr	r5, [pc, #28]	@ (80101d8 <_fstat_r+0x20>)
 80101bc:	2300      	movs	r3, #0
 80101be:	4604      	mov	r4, r0
 80101c0:	4608      	mov	r0, r1
 80101c2:	4611      	mov	r1, r2
 80101c4:	602b      	str	r3, [r5, #0]
 80101c6:	f7f4 f87e 	bl	80042c6 <_fstat>
 80101ca:	1c43      	adds	r3, r0, #1
 80101cc:	d102      	bne.n	80101d4 <_fstat_r+0x1c>
 80101ce:	682b      	ldr	r3, [r5, #0]
 80101d0:	b103      	cbz	r3, 80101d4 <_fstat_r+0x1c>
 80101d2:	6023      	str	r3, [r4, #0]
 80101d4:	bd38      	pop	{r3, r4, r5, pc}
 80101d6:	bf00      	nop
 80101d8:	20012248 	.word	0x20012248

080101dc <_isatty_r>:
 80101dc:	b538      	push	{r3, r4, r5, lr}
 80101de:	4d06      	ldr	r5, [pc, #24]	@ (80101f8 <_isatty_r+0x1c>)
 80101e0:	2300      	movs	r3, #0
 80101e2:	4604      	mov	r4, r0
 80101e4:	4608      	mov	r0, r1
 80101e6:	602b      	str	r3, [r5, #0]
 80101e8:	f7f4 f87d 	bl	80042e6 <_isatty>
 80101ec:	1c43      	adds	r3, r0, #1
 80101ee:	d102      	bne.n	80101f6 <_isatty_r+0x1a>
 80101f0:	682b      	ldr	r3, [r5, #0]
 80101f2:	b103      	cbz	r3, 80101f6 <_isatty_r+0x1a>
 80101f4:	6023      	str	r3, [r4, #0]
 80101f6:	bd38      	pop	{r3, r4, r5, pc}
 80101f8:	20012248 	.word	0x20012248

080101fc <memcpy>:
 80101fc:	440a      	add	r2, r1
 80101fe:	4291      	cmp	r1, r2
 8010200:	f100 33ff 	add.w	r3, r0, #4294967295
 8010204:	d100      	bne.n	8010208 <memcpy+0xc>
 8010206:	4770      	bx	lr
 8010208:	b510      	push	{r4, lr}
 801020a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801020e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010212:	4291      	cmp	r1, r2
 8010214:	d1f9      	bne.n	801020a <memcpy+0xe>
 8010216:	bd10      	pop	{r4, pc}

08010218 <_realloc_r>:
 8010218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801021c:	4680      	mov	r8, r0
 801021e:	4615      	mov	r5, r2
 8010220:	460c      	mov	r4, r1
 8010222:	b921      	cbnz	r1, 801022e <_realloc_r+0x16>
 8010224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010228:	4611      	mov	r1, r2
 801022a:	f7fe be01 	b.w	800ee30 <_malloc_r>
 801022e:	b92a      	cbnz	r2, 801023c <_realloc_r+0x24>
 8010230:	f7ff f9f4 	bl	800f61c <_free_r>
 8010234:	2400      	movs	r4, #0
 8010236:	4620      	mov	r0, r4
 8010238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801023c:	f000 f81a 	bl	8010274 <_malloc_usable_size_r>
 8010240:	4285      	cmp	r5, r0
 8010242:	4606      	mov	r6, r0
 8010244:	d802      	bhi.n	801024c <_realloc_r+0x34>
 8010246:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801024a:	d8f4      	bhi.n	8010236 <_realloc_r+0x1e>
 801024c:	4629      	mov	r1, r5
 801024e:	4640      	mov	r0, r8
 8010250:	f7fe fdee 	bl	800ee30 <_malloc_r>
 8010254:	4607      	mov	r7, r0
 8010256:	2800      	cmp	r0, #0
 8010258:	d0ec      	beq.n	8010234 <_realloc_r+0x1c>
 801025a:	42b5      	cmp	r5, r6
 801025c:	462a      	mov	r2, r5
 801025e:	4621      	mov	r1, r4
 8010260:	bf28      	it	cs
 8010262:	4632      	movcs	r2, r6
 8010264:	f7ff ffca 	bl	80101fc <memcpy>
 8010268:	4621      	mov	r1, r4
 801026a:	4640      	mov	r0, r8
 801026c:	f7ff f9d6 	bl	800f61c <_free_r>
 8010270:	463c      	mov	r4, r7
 8010272:	e7e0      	b.n	8010236 <_realloc_r+0x1e>

08010274 <_malloc_usable_size_r>:
 8010274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010278:	1f18      	subs	r0, r3, #4
 801027a:	2b00      	cmp	r3, #0
 801027c:	bfbc      	itt	lt
 801027e:	580b      	ldrlt	r3, [r1, r0]
 8010280:	18c0      	addlt	r0, r0, r3
 8010282:	4770      	bx	lr

08010284 <_init>:
 8010284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010286:	bf00      	nop
 8010288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801028a:	bc08      	pop	{r3}
 801028c:	469e      	mov	lr, r3
 801028e:	4770      	bx	lr

08010290 <_fini>:
 8010290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010292:	bf00      	nop
 8010294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010296:	bc08      	pop	{r3}
 8010298:	469e      	mov	lr, r3
 801029a:	4770      	bx	lr
