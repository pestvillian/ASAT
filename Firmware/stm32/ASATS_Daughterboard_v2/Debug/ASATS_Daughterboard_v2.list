
ASATS_Daughterboard_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100b8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c60  08010268  08010268  00011268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ec8  08012ec8  0001431c  2**0
                  CONTENTS
  4 .ARM          00000008  08012ec8  08012ec8  00013ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ed0  08012ed0  0001431c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ed0  08012ed0  00013ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012ed4  08012ed4  00013ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000031c  20000000  08012ed8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001431c  2**0
                  CONTENTS
 10 .bss          00012918  2000031c  2000031c  0001431c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012c34  20012c34  0001431c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001431c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000220a7  00000000  00000000  0001434c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055ca  00000000  00000000  000363f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c68  00000000  00000000  0003b9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015be  00000000  00000000  0003d628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000299d2  00000000  00000000  0003ebe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024be6  00000000  00000000  000685b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebf63  00000000  00000000  0008d19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00179101  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008150  00000000  00000000  00179144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000093  00000000  00000000  00181294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000031c 	.word	0x2000031c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010250 	.word	0x08010250

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000320 	.word	0x20000320
 80001ec:	08010250 	.word	0x08010250

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <XPT2046_TouchSelect>:
}

#endif /* SOFTWARE_SPI */

static void XPT2046_TouchSelect()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2110      	movs	r1, #16
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <XPT2046_TouchSelect+0x14>)
 800059a:	f004 fe37 	bl	800520c <HAL_GPIO_WritePin>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000

080005a8 <XPT2046_TouchUnselect>:

static void XPT2046_TouchUnselect()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2110      	movs	r1, #16
 80005b0:	4802      	ldr	r0, [pc, #8]	@ (80005bc <XPT2046_TouchUnselect+0x14>)
 80005b2:	f004 fe2b 	bl	800520c <HAL_GPIO_WritePin>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000

080005c0 <XPT2046_TouchPressed>:

bool XPT2046_TouchPressed(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(XPT2046_IRQ_GPIO_Port, XPT2046_IRQ_Pin) == GPIO_PIN_RESET;
 80005c4:	2110      	movs	r1, #16
 80005c6:	4805      	ldr	r0, [pc, #20]	@ (80005dc <XPT2046_TouchPressed+0x1c>)
 80005c8:	f004 fe08 	bl	80051dc <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	bf0c      	ite	eq
 80005d2:	2301      	moveq	r3, #1
 80005d4:	2300      	movne	r3, #0
 80005d6:	b2db      	uxtb	r3, r3
}
 80005d8:	4618      	mov	r0, r3
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40020400 	.word	0x40020400

080005e0 <XPT2046_TouchGetCoordinates>:

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

#endif /* SOFTWARE_SPI */

    XPT2046_TouchSelect();
 80005ea:	f7ff ffd1 	bl	8000590 <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t avg_y = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	77fb      	strb	r3, [r7, #31]

    for(uint8_t i = 0; i < NUMBER_OF_SAMPLES; i++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	77bb      	strb	r3, [r7, #30]
 80005fe:	e03f      	b.n	8000680 <XPT2046_TouchGetCoordinates+0xa0>
    {
        if(!XPT2046_TouchPressed())
 8000600:	f7ff ffde 	bl	80005c0 <XPT2046_TouchPressed>
 8000604:	4603      	mov	r3, r0
 8000606:	f083 0301 	eor.w	r3, r3, #1
 800060a:	b2db      	uxtb	r3, r3
 800060c:	2b00      	cmp	r3, #0
 800060e:	d13b      	bne.n	8000688 <XPT2046_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 8000610:	7ffb      	ldrb	r3, [r7, #31]
 8000612:	3301      	adds	r3, #1
 8000614:	77fb      	strb	r3, [r7, #31]
	   x_raw[0] = spi_read_byte();
	   x_raw[1] = spi_read_byte();

#else

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	2201      	movs	r2, #1
 800061c:	4944      	ldr	r1, [pc, #272]	@ (8000730 <XPT2046_TouchGetCoordinates+0x150>)
 800061e:	4845      	ldr	r0, [pc, #276]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000620:	f007 fc79 	bl	8007f16 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8000624:	f107 0210 	add.w	r2, r7, #16
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2302      	movs	r3, #2
 8000630:	4941      	ldr	r1, [pc, #260]	@ (8000738 <XPT2046_TouchGetCoordinates+0x158>)
 8000632:	4840      	ldr	r0, [pc, #256]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000634:	f007 fdb3 	bl	800819e <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	2201      	movs	r2, #1
 800063e:	493f      	ldr	r1, [pc, #252]	@ (800073c <XPT2046_TouchGetCoordinates+0x15c>)
 8000640:	483c      	ldr	r0, [pc, #240]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000642:	f007 fc68 	bl	8007f16 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 8000646:	f107 020c 	add.w	r2, r7, #12
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2302      	movs	r3, #2
 8000652:	4939      	ldr	r1, [pc, #228]	@ (8000738 <XPT2046_TouchGetCoordinates+0x158>)
 8000654:	4837      	ldr	r0, [pc, #220]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000656:	f007 fda2 	bl	800819e <HAL_SPI_TransmitReceive>

#endif /* SOFTWARE_SPI */

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 800065a:	7b3b      	ldrb	r3, [r7, #12]
 800065c:	021b      	lsls	r3, r3, #8
 800065e:	7b7a      	ldrb	r2, [r7, #13]
 8000660:	4313      	orrs	r3, r2
 8000662:	461a      	mov	r2, r3
 8000664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000666:	4413      	add	r3, r2
 8000668:	627b      	str	r3, [r7, #36]	@ 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 800066a:	7c3b      	ldrb	r3, [r7, #16]
 800066c:	021b      	lsls	r3, r3, #8
 800066e:	7c7a      	ldrb	r2, [r7, #17]
 8000670:	4313      	orrs	r3, r2
 8000672:	461a      	mov	r2, r3
 8000674:	6a3b      	ldr	r3, [r7, #32]
 8000676:	4413      	add	r3, r2
 8000678:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < NUMBER_OF_SAMPLES; i++)
 800067a:	7fbb      	ldrb	r3, [r7, #30]
 800067c:	3301      	adds	r3, #1
 800067e:	77bb      	strb	r3, [r7, #30]
 8000680:	7fbb      	ldrb	r3, [r7, #30]
 8000682:	2b07      	cmp	r3, #7
 8000684:	d9bc      	bls.n	8000600 <XPT2046_TouchGetCoordinates+0x20>
 8000686:	e000      	b.n	800068a <XPT2046_TouchGetCoordinates+0xaa>
            break;
 8000688:	bf00      	nop
    }

    XPT2046_TouchUnselect();
 800068a:	f7ff ff8d 	bl	80005a8 <XPT2046_TouchUnselect>

    if(nsamples < NUMBER_OF_SAMPLES)
 800068e:	7ffb      	ldrb	r3, [r7, #31]
 8000690:	2b07      	cmp	r3, #7
 8000692:	d801      	bhi.n	8000698 <XPT2046_TouchGetCoordinates+0xb8>
        return false;
 8000694:	2300      	movs	r3, #0
 8000696:	e046      	b.n	8000726 <XPT2046_TouchGetCoordinates+0x146>

    uint32_t raw_x = (avg_x / NUMBER_OF_SAMPLES);
 8000698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800069a:	08db      	lsrs	r3, r3, #3
 800069c:	61bb      	str	r3, [r7, #24]
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	f640 5247 	movw	r2, #3399	@ 0xd47
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d802      	bhi.n	80006ae <XPT2046_TouchGetCoordinates+0xce>
 80006a8:	f640 5348 	movw	r3, #3400	@ 0xd48
 80006ac:	61bb      	str	r3, [r7, #24]
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	f247 1248 	movw	r2, #29000	@ 0x7148
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d902      	bls.n	80006be <XPT2046_TouchGetCoordinates+0xde>
 80006b8:	f247 1348 	movw	r3, #29000	@ 0x7148
 80006bc:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / NUMBER_OF_SAMPLES);
 80006be:	6a3b      	ldr	r3, [r7, #32]
 80006c0:	08db      	lsrs	r3, r3, #3
 80006c2:	617b      	str	r3, [r7, #20]
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	f640 42e3 	movw	r2, #3299	@ 0xce3
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d802      	bhi.n	80006d4 <XPT2046_TouchGetCoordinates+0xf4>
 80006ce:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80006d2:	617b      	str	r3, [r7, #20]
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	f247 5230 	movw	r2, #30000	@ 0x7530
 80006da:	4293      	cmp	r3, r2
 80006dc:	d902      	bls.n	80006e4 <XPT2046_TouchGetCoordinates+0x104>
 80006de:	f247 5330 	movw	r3, #30000	@ 0x7530
 80006e2:	617b      	str	r3, [r7, #20]
    // Uncomment this line to calibrate touchscreen:
//    printf("raw_x = %6d, raw_y = %6d\r\n", (int) raw_x, (int) raw_y);
//    printf("\x1b[1F");

#if (ORIENTATION == 0)
	*x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 80006e4:	69ba      	ldr	r2, [r7, #24]
 80006e6:	4613      	mov	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	019b      	lsls	r3, r3, #6
 80006ee:	f5a3 1384 	sub.w	r3, r3, #1081344	@ 0x108000
 80006f2:	f5a3 53d0 	sub.w	r3, r3, #6656	@ 0x1a00
 80006f6:	4a12      	ldr	r2, [pc, #72]	@ (8000740 <XPT2046_TouchGetCoordinates+0x160>)
 80006f8:	fba2 2303 	umull	r2, r3, r2, r3
 80006fc:	0b5b      	lsrs	r3, r3, #13
 80006fe:	b29a      	uxth	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	801a      	strh	r2, [r3, #0]
	*y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 8000704:	697a      	ldr	r2, [r7, #20]
 8000706:	4613      	mov	r3, r2
 8000708:	011b      	lsls	r3, r3, #4
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	011b      	lsls	r3, r3, #4
 800070e:	f5a3 2341 	sub.w	r3, r3, #790528	@ 0xc1000
 8000712:	f5a3 63b8 	sub.w	r3, r3, #1472	@ 0x5c0
 8000716:	4a0b      	ldr	r2, [pc, #44]	@ (8000744 <XPT2046_TouchGetCoordinates+0x164>)
 8000718:	fba2 2303 	umull	r2, r3, r2, r3
 800071c:	0b5b      	lsrs	r3, r3, #13
 800071e:	b29a      	uxth	r2, r3
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	801a      	strh	r2, [r3, #0]
#elif (ORIENTATION == 3)
    *x = XPT2046_SCALE_X - (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#endif

    return true;
 8000724:	2301      	movs	r3, #1
}
 8000726:	4618      	mov	r0, r3
 8000728:	3728      	adds	r7, #40	@ 0x28
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	08010b34 	.word	0x08010b34
 8000734:	20000440 	.word	0x20000440
 8000738:	08010b38 	.word	0x08010b38
 800073c:	08010b3c 	.word	0x08010b3c
 8000740:	51eb851f 	.word	0x51eb851f
 8000744:	4e8b8659 	.word	0x4e8b8659

08000748 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 800074e:	2300      	movs	r3, #0
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	2301      	movs	r3, #1
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2300      	movs	r3, #0
 8000758:	2200      	movs	r2, #0
 800075a:	2101      	movs	r1, #1
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fceb 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	461a      	mov	r2, r3
 8000766:	4bae      	ldr	r3, [pc, #696]	@ (8000a20 <lcdInit+0x2d8>)
 8000768:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 800076a:	2300      	movs	r3, #0
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	2301      	movs	r3, #1
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	2300      	movs	r3, #0
 8000774:	2201      	movs	r2, #1
 8000776:	2100      	movs	r1, #0
 8000778:	2000      	movs	r0, #0
 800077a:	f000 fcdd 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	4ba8      	ldr	r3, [pc, #672]	@ (8000a24 <lcdInit+0x2dc>)
 8000784:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8000786:	2300      	movs	r3, #0
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	2301      	movs	r3, #1
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2300      	movs	r3, #0
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	2001      	movs	r0, #1
 8000796:	f000 fccf 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	461a      	mov	r2, r3
 800079e:	4ba2      	ldr	r3, [pc, #648]	@ (8000a28 <lcdInit+0x2e0>)
 80007a0:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80007a2:	2300      	movs	r3, #0
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	2301      	movs	r3, #1
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2300      	movs	r3, #0
 80007ac:	2201      	movs	r2, #1
 80007ae:	2101      	movs	r1, #1
 80007b0:	2001      	movs	r0, #1
 80007b2:	f000 fcc1 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b9c      	ldr	r3, [pc, #624]	@ (8000a2c <lcdInit+0x2e4>)
 80007bc:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 80007be:	f000 fc91 	bl	80010e4 <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 80007c2:	2028      	movs	r0, #40	@ 0x28
 80007c4:	f000 fc98 	bl	80010f8 <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 80007c8:	20cf      	movs	r0, #207	@ 0xcf
 80007ca:	f000 fc95 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 fca2 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x83);
 80007d4:	2083      	movs	r0, #131	@ 0x83
 80007d6:	f000 fc9f 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x30);
 80007da:	2030      	movs	r0, #48	@ 0x30
 80007dc:	f000 fc9c 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xED);
 80007e0:	20ed      	movs	r0, #237	@ 0xed
 80007e2:	f000 fc89 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x64);
 80007e6:	2064      	movs	r0, #100	@ 0x64
 80007e8:	f000 fc96 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x03);
 80007ec:	2003      	movs	r0, #3
 80007ee:	f000 fc93 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x12);
 80007f2:	2012      	movs	r0, #18
 80007f4:	f000 fc90 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x81);
 80007f8:	2081      	movs	r0, #129	@ 0x81
 80007fa:	f000 fc8d 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xE8);
 80007fe:	20e8      	movs	r0, #232	@ 0xe8
 8000800:	f000 fc7a 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x85);
 8000804:	2085      	movs	r0, #133	@ 0x85
 8000806:	f000 fc87 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x01);
 800080a:	2001      	movs	r0, #1
 800080c:	f000 fc84 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x79);
 8000810:	2079      	movs	r0, #121	@ 0x79
 8000812:	f000 fc81 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xCB);
 8000816:	20cb      	movs	r0, #203	@ 0xcb
 8000818:	f000 fc6e 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x39);
 800081c:	2039      	movs	r0, #57	@ 0x39
 800081e:	f000 fc7b 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x2C);
 8000822:	202c      	movs	r0, #44	@ 0x2c
 8000824:	f000 fc78 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 8000828:	2000      	movs	r0, #0
 800082a:	f000 fc75 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x34);
 800082e:	2034      	movs	r0, #52	@ 0x34
 8000830:	f000 fc72 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x02);
 8000834:	2002      	movs	r0, #2
 8000836:	f000 fc6f 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xF7);
 800083a:	20f7      	movs	r0, #247	@ 0xf7
 800083c:	f000 fc5c 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x20);
 8000840:	2020      	movs	r0, #32
 8000842:	f000 fc69 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xEA);
 8000846:	20ea      	movs	r0, #234	@ 0xea
 8000848:	f000 fc56 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 800084c:	2000      	movs	r0, #0
 800084e:	f000 fc63 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 8000852:	2000      	movs	r0, #0
 8000854:	f000 fc60 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8000858:	20c0      	movs	r0, #192	@ 0xc0
 800085a:	f000 fc4d 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x26);
 800085e:	2026      	movs	r0, #38	@ 0x26
 8000860:	f000 fc5a 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 8000864:	20c1      	movs	r0, #193	@ 0xc1
 8000866:	f000 fc47 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x11);
 800086a:	2011      	movs	r0, #17
 800086c:	f000 fc54 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 8000870:	20c5      	movs	r0, #197	@ 0xc5
 8000872:	f000 fc41 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x35);
 8000876:	2035      	movs	r0, #53	@ 0x35
 8000878:	f000 fc4e 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3E);
 800087c:	203e      	movs	r0, #62	@ 0x3e
 800087e:	f000 fc4b 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 8000882:	20c7      	movs	r0, #199	@ 0xc7
 8000884:	f000 fc38 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0xBE);
 8000888:	20be      	movs	r0, #190	@ 0xbe
 800088a:	f000 fc45 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 800088e:	2036      	movs	r0, #54	@ 0x36
 8000890:	f000 fc32 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 8000894:	4b62      	ldr	r3, [pc, #392]	@ (8000a20 <lcdInit+0x2d8>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f000 fc3d 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 800089e:	203a      	movs	r0, #58	@ 0x3a
 80008a0:	f000 fc2a 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x55);
 80008a4:	2055      	movs	r0, #85	@ 0x55
 80008a6:	f000 fc37 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 80008aa:	20b1      	movs	r0, #177	@ 0xb1
 80008ac:	f000 fc24 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80008b0:	2000      	movs	r0, #0
 80008b2:	f000 fc31 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x1B);
 80008b6:	201b      	movs	r0, #27
 80008b8:	f000 fc2e 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xF2);
 80008bc:	20f2      	movs	r0, #242	@ 0xf2
 80008be:	f000 fc1b 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x08);
 80008c2:	2008      	movs	r0, #8
 80008c4:	f000 fc28 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 80008c8:	2026      	movs	r0, #38	@ 0x26
 80008ca:	f000 fc15 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x01);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f000 fc22 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 80008d4:	20e0      	movs	r0, #224	@ 0xe0
 80008d6:	f000 fc0f 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x1F);
 80008da:	201f      	movs	r0, #31
 80008dc:	f000 fc1c 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x1A);
 80008e0:	201a      	movs	r0, #26
 80008e2:	f000 fc19 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x18);
 80008e6:	2018      	movs	r0, #24
 80008e8:	f000 fc16 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0A);
 80008ec:	200a      	movs	r0, #10
 80008ee:	f000 fc13 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0F);
 80008f2:	200f      	movs	r0, #15
 80008f4:	f000 fc10 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x06);
 80008f8:	2006      	movs	r0, #6
 80008fa:	f000 fc0d 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x45);
 80008fe:	2045      	movs	r0, #69	@ 0x45
 8000900:	f000 fc0a 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x87);
 8000904:	2087      	movs	r0, #135	@ 0x87
 8000906:	f000 fc07 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x32);
 800090a:	2032      	movs	r0, #50	@ 0x32
 800090c:	f000 fc04 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0A);
 8000910:	200a      	movs	r0, #10
 8000912:	f000 fc01 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x07);
 8000916:	2007      	movs	r0, #7
 8000918:	f000 fbfe 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x02);
 800091c:	2002      	movs	r0, #2
 800091e:	f000 fbfb 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x07);
 8000922:	2007      	movs	r0, #7
 8000924:	f000 fbf8 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x05);
 8000928:	2005      	movs	r0, #5
 800092a:	f000 fbf5 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 800092e:	2000      	movs	r0, #0
 8000930:	f000 fbf2 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8000934:	20e1      	movs	r0, #225	@ 0xe1
 8000936:	f000 fbdf 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 800093a:	2000      	movs	r0, #0
 800093c:	f000 fbec 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x25);
 8000940:	2025      	movs	r0, #37	@ 0x25
 8000942:	f000 fbe9 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x27);
 8000946:	2027      	movs	r0, #39	@ 0x27
 8000948:	f000 fbe6 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x05);
 800094c:	2005      	movs	r0, #5
 800094e:	f000 fbe3 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x10);
 8000952:	2010      	movs	r0, #16
 8000954:	f000 fbe0 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x09);
 8000958:	2009      	movs	r0, #9
 800095a:	f000 fbdd 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3A);
 800095e:	203a      	movs	r0, #58	@ 0x3a
 8000960:	f000 fbda 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x78);
 8000964:	2078      	movs	r0, #120	@ 0x78
 8000966:	f000 fbd7 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x4D);
 800096a:	204d      	movs	r0, #77	@ 0x4d
 800096c:	f000 fbd4 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x05);
 8000970:	2005      	movs	r0, #5
 8000972:	f000 fbd1 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x18);
 8000976:	2018      	movs	r0, #24
 8000978:	f000 fbce 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0D);
 800097c:	200d      	movs	r0, #13
 800097e:	f000 fbcb 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x38);
 8000982:	2038      	movs	r0, #56	@ 0x38
 8000984:	f000 fbc8 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3A);
 8000988:	203a      	movs	r0, #58	@ 0x3a
 800098a:	f000 fbc5 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x1F);
 800098e:	201f      	movs	r0, #31
 8000990:	f000 fbc2 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 8000994:	202a      	movs	r0, #42	@ 0x2a
 8000996:	f000 fbaf 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 800099a:	2000      	movs	r0, #0
 800099c:	f000 fbbc 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f000 fbb9 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f000 fbb6 	bl	8001118 <lcdWriteData>
  lcdWriteData(0xEF);
 80009ac:	20ef      	movs	r0, #239	@ 0xef
 80009ae:	f000 fbb3 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80009b2:	202b      	movs	r0, #43	@ 0x2b
 80009b4:	f000 fba0 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80009b8:	2000      	movs	r0, #0
 80009ba:	f000 fbad 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009be:	2000      	movs	r0, #0
 80009c0:	f000 fbaa 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x01);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f000 fba7 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3F);
 80009ca:	203f      	movs	r0, #63	@ 0x3f
 80009cc:	f000 fba4 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 80009d0:	20b7      	movs	r0, #183	@ 0xb7
 80009d2:	f000 fb91 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x07);
 80009d6:	2007      	movs	r0, #7
 80009d8:	f000 fb9e 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 80009dc:	20b6      	movs	r0, #182	@ 0xb6
 80009de:	f000 fb8b 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x0A);
 80009e2:	200a      	movs	r0, #10
 80009e4:	f000 fb98 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x82);
 80009e8:	2082      	movs	r0, #130	@ 0x82
 80009ea:	f000 fb95 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x27);
 80009ee:	2027      	movs	r0, #39	@ 0x27
 80009f0:	f000 fb92 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009f4:	2000      	movs	r0, #0
 80009f6:	f000 fb8f 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 80009fa:	2011      	movs	r0, #17
 80009fc:	f000 fb7c 	bl	80010f8 <lcdWriteCommand>
  HAL_Delay(100);
 8000a00:	2064      	movs	r0, #100	@ 0x64
 8000a02:	f003 fe63 	bl	80046cc <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 8000a06:	2029      	movs	r0, #41	@ 0x29
 8000a08:	f000 fb76 	bl	80010f8 <lcdWriteCommand>
  HAL_Delay(100);
 8000a0c:	2064      	movs	r0, #100	@ 0x64
 8000a0e:	f003 fe5d 	bl	80046cc <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8000a12:	202c      	movs	r0, #44	@ 0x2c
 8000a14:	f000 fb70 	bl	80010f8 <lcdWriteCommand>
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000033c 	.word	0x2000033c
 8000a24:	2000033d 	.word	0x2000033d
 8000a28:	2000033e 	.word	0x2000033e
 8000a2c:	2000033f 	.word	0x2000033f

08000a30 <lcdFillRGB>:
		}
	}
}

void lcdFillRGB(uint16_t color)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a44:	885b      	ldrh	r3, [r3, #2]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f000 fafd 	bl	800104c <lcdSetWindow>
  int dimensions = lcdProperties.width * lcdProperties.height;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a5a:	885b      	ldrh	r3, [r3, #2]
 8000a5c:	fb02 f303 	mul.w	r3, r2, r3
 8000a60:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 8000a62:	e003      	b.n	8000a6c <lcdFillRGB+0x3c>
  {
    lcdWriteData(color);
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fb56 	bl	8001118 <lcdWriteData>
  while(dimensions--)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	1e5a      	subs	r2, r3, #1
 8000a70:	60fa      	str	r2, [r7, #12]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1f6      	bne.n	8000a64 <lcdFillRGB+0x34>
  }
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000018 	.word	0x20000018

08000a84 <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80fb      	strh	r3, [r7, #6]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	80bb      	strh	r3, [r7, #4]
 8000a92:	4613      	mov	r3, r2
 8000a94:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8000a96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <lcdDrawPixel+0x44>)
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	88fa      	ldrh	r2, [r7, #6]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d20f      	bcs.n	8000ac0 <lcdDrawPixel+0x3c>
 8000aa0:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <lcdDrawPixel+0x44>)
 8000aa2:	885b      	ldrh	r3, [r3, #2]
 8000aa4:	88ba      	ldrh	r2, [r7, #4]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d20a      	bcs.n	8000ac0 <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 8000aaa:	88bb      	ldrh	r3, [r7, #4]
 8000aac:	88fa      	ldrh	r2, [r7, #6]
 8000aae:	88b9      	ldrh	r1, [r7, #4]
 8000ab0:	88f8      	ldrh	r0, [r7, #6]
 8000ab2:	f000 facb 	bl	800104c <lcdSetWindow>
    lcdWriteData(color);
 8000ab6:	887b      	ldrh	r3, [r7, #2]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 fb2d 	bl	8001118 <lcdWriteData>
 8000abe:	e000      	b.n	8000ac2 <lcdDrawPixel+0x3e>
        return;
 8000ac0:	bf00      	nop
}
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000018 	.word	0x20000018

08000acc <lcdDrawHLine>:

void lcdDrawHLine(uint16_t x0, uint16_t x1, uint16_t y, uint16_t color)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4608      	mov	r0, r1
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4623      	mov	r3, r4
 8000adc:	80fb      	strh	r3, [r7, #6]
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80bb      	strh	r3, [r7, #4]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	807b      	strh	r3, [r7, #2]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	803b      	strh	r3, [r7, #0]
  // Allows for slightly better performance than setting individual pixels

	if (x1 < x0)
 8000aea:	88ba      	ldrh	r2, [r7, #4]
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d205      	bcs.n	8000afe <lcdDrawHLine+0x32>
	{
		// Switch x1 and x0
		swap(x0, x1);
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	817b      	strh	r3, [r7, #10]
 8000af6:	88bb      	ldrh	r3, [r7, #4]
 8000af8:	80fb      	strh	r3, [r7, #6]
 8000afa:	897b      	ldrh	r3, [r7, #10]
 8000afc:	80bb      	strh	r3, [r7, #4]
	}

	// Check limits
	if (x1 >= lcdProperties.width)
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	88ba      	ldrh	r2, [r7, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d303      	bcc.n	8000b10 <lcdDrawHLine+0x44>
	{
		x1 = lcdProperties.width - 1;
 8000b08:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	80bb      	strh	r3, [r7, #4]
	}

	if (x0 >= lcdProperties.width)
 8000b10:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	88fa      	ldrh	r2, [r7, #6]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d303      	bcc.n	8000b22 <lcdDrawHLine+0x56>
	{
		x0 = lcdProperties.width - 1;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	80fb      	strh	r3, [r7, #6]
	}

	lcdSetWindow(x0, y, x1, y);
 8000b22:	887b      	ldrh	r3, [r7, #2]
 8000b24:	88ba      	ldrh	r2, [r7, #4]
 8000b26:	8879      	ldrh	r1, [r7, #2]
 8000b28:	88f8      	ldrh	r0, [r7, #6]
 8000b2a:	f000 fa8f 	bl	800104c <lcdSetWindow>

	for (int line = x0; line <= x1; line++)
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	e006      	b.n	8000b42 <lcdDrawHLine+0x76>
	{
		lcdWriteData(color);
 8000b34:	883b      	ldrh	r3, [r7, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 faee 	bl	8001118 <lcdWriteData>
	for (int line = x0; line <= x1; line++)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	88bb      	ldrh	r3, [r7, #4]
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	ddf4      	ble.n	8000b34 <lcdDrawHLine+0x68>
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd90      	pop	{r4, r7, pc}
 8000b54:	20000018 	.word	0x20000018

08000b58 <lcdDrawVLine>:

void lcdDrawVLine(uint16_t x, uint16_t y0, uint16_t y1, uint16_t color)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4604      	mov	r4, r0
 8000b60:	4608      	mov	r0, r1
 8000b62:	4611      	mov	r1, r2
 8000b64:	461a      	mov	r2, r3
 8000b66:	4623      	mov	r3, r4
 8000b68:	80fb      	strh	r3, [r7, #6]
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80bb      	strh	r3, [r7, #4]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	807b      	strh	r3, [r7, #2]
 8000b72:	4613      	mov	r3, r2
 8000b74:	803b      	strh	r3, [r7, #0]
  if (y1 < y0)
 8000b76:	887a      	ldrh	r2, [r7, #2]
 8000b78:	88bb      	ldrh	r3, [r7, #4]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d205      	bcs.n	8000b8a <lcdDrawVLine+0x32>
  {
	  swap(y0, y1);
 8000b7e:	88bb      	ldrh	r3, [r7, #4]
 8000b80:	817b      	strh	r3, [r7, #10]
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	80bb      	strh	r3, [r7, #4]
 8000b86:	897b      	ldrh	r3, [r7, #10]
 8000b88:	807b      	strh	r3, [r7, #2]
  }

  if (x >= lcdProperties.width)
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	88fa      	ldrh	r2, [r7, #6]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d303      	bcc.n	8000b9c <lcdDrawVLine+0x44>
  {
    x = lcdProperties.width - 1;
 8000b94:	4b17      	ldr	r3, [pc, #92]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	80fb      	strh	r3, [r7, #6]
  }

  if (y0 >= lcdProperties.height)
 8000b9c:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000b9e:	885b      	ldrh	r3, [r3, #2]
 8000ba0:	88ba      	ldrh	r2, [r7, #4]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d303      	bcc.n	8000bae <lcdDrawVLine+0x56>
  {
    y0 = lcdProperties.height - 1;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000ba8:	885b      	ldrh	r3, [r3, #2]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	80bb      	strh	r3, [r7, #4]
  }

  if (y1 >= lcdProperties.height)
 8000bae:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000bb0:	885b      	ldrh	r3, [r3, #2]
 8000bb2:	887a      	ldrh	r2, [r7, #2]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d303      	bcc.n	8000bc0 <lcdDrawVLine+0x68>
  {
    y1 = lcdProperties.height - 1;
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000bba:	885b      	ldrh	r3, [r3, #2]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	807b      	strh	r3, [r7, #2]
  }

  lcdSetWindow(x, y0, x, y1);
 8000bc0:	887b      	ldrh	r3, [r7, #2]
 8000bc2:	88fa      	ldrh	r2, [r7, #6]
 8000bc4:	88b9      	ldrh	r1, [r7, #4]
 8000bc6:	88f8      	ldrh	r0, [r7, #6]
 8000bc8:	f000 fa40 	bl	800104c <lcdSetWindow>

  for(int line = y0; line <= y1; line++)
 8000bcc:	88bb      	ldrh	r3, [r7, #4]
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	e006      	b.n	8000be0 <lcdDrawVLine+0x88>
  {
	  lcdWriteData(color);
 8000bd2:	883b      	ldrh	r3, [r7, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fa9f 	bl	8001118 <lcdWriteData>
  for(int line = y0; line <= y1; line++)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	887b      	ldrh	r3, [r7, #2]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	ddf4      	ble.n	8000bd2 <lcdDrawVLine+0x7a>
  }
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd90      	pop	{r4, r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000018 	.word	0x20000018

08000bf8 <lcdDrawRect>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4608      	mov	r0, r1
 8000c02:	4611      	mov	r1, r2
 8000c04:	461a      	mov	r2, r3
 8000c06:	4623      	mov	r3, r4
 8000c08:	80fb      	strh	r3, [r7, #6]
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	80bb      	strh	r3, [r7, #4]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	807b      	strh	r3, [r7, #2]
 8000c12:	4613      	mov	r3, r2
 8000c14:	803b      	strh	r3, [r7, #0]
	lcdDrawHLine(x, x + w - 1, y, color);
 8000c16:	88f8      	ldrh	r0, [r7, #6]
 8000c18:	88fa      	ldrh	r2, [r7, #6]
 8000c1a:	887b      	ldrh	r3, [r7, #2]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	3b01      	subs	r3, #1
 8000c22:	b299      	uxth	r1, r3
 8000c24:	88ba      	ldrh	r2, [r7, #4]
 8000c26:	8b3b      	ldrh	r3, [r7, #24]
 8000c28:	f7ff ff50 	bl	8000acc <lcdDrawHLine>
	lcdDrawHLine(x, x + w - 1, y + h - 1, color);
 8000c2c:	88f8      	ldrh	r0, [r7, #6]
 8000c2e:	88fa      	ldrh	r2, [r7, #6]
 8000c30:	887b      	ldrh	r3, [r7, #2]
 8000c32:	4413      	add	r3, r2
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	3b01      	subs	r3, #1
 8000c38:	b299      	uxth	r1, r3
 8000c3a:	88ba      	ldrh	r2, [r7, #4]
 8000c3c:	883b      	ldrh	r3, [r7, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	3b01      	subs	r3, #1
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	8b3b      	ldrh	r3, [r7, #24]
 8000c48:	f7ff ff40 	bl	8000acc <lcdDrawHLine>
	lcdDrawVLine(x, y, y + h - 1, color);
 8000c4c:	88f8      	ldrh	r0, [r7, #6]
 8000c4e:	88b9      	ldrh	r1, [r7, #4]
 8000c50:	88ba      	ldrh	r2, [r7, #4]
 8000c52:	883b      	ldrh	r3, [r7, #0]
 8000c54:	4413      	add	r3, r2
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	8b3b      	ldrh	r3, [r7, #24]
 8000c5e:	f7ff ff7b 	bl	8000b58 <lcdDrawVLine>
	lcdDrawVLine(x + w - 1, y, y + h - 1, color);
 8000c62:	88fa      	ldrh	r2, [r7, #6]
 8000c64:	887b      	ldrh	r3, [r7, #2]
 8000c66:	4413      	add	r3, r2
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	b298      	uxth	r0, r3
 8000c6e:	88b9      	ldrh	r1, [r7, #4]
 8000c70:	88ba      	ldrh	r2, [r7, #4]
 8000c72:	883b      	ldrh	r3, [r7, #0]
 8000c74:	4413      	add	r3, r2
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	8b3b      	ldrh	r3, [r7, #24]
 8000c7e:	f7ff ff6b 	bl	8000b58 <lcdDrawVLine>
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd90      	pop	{r4, r7, pc}
	...

08000c8c <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4604      	mov	r4, r0
 8000c94:	4608      	mov	r0, r1
 8000c96:	4611      	mov	r1, r2
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	80fb      	strh	r3, [r7, #6]
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80bb      	strh	r3, [r7, #4]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	70fb      	strb	r3, [r7, #3]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cae:	4a4a      	ldr	r2, [pc, #296]	@ (8000dd8 <lcdDrawChar+0x14c>)
 8000cb0:	8812      	ldrh	r2, [r2, #0]
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	f280 808c 	bge.w	8000dd0 <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 8000cb8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cbc:	4a46      	ldr	r2, [pc, #280]	@ (8000dd8 <lcdDrawChar+0x14c>)
 8000cbe:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	f280 8085 	bge.w	8000dd0 <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cca:	4a44      	ldr	r2, [pc, #272]	@ (8000ddc <lcdDrawChar+0x150>)
 8000ccc:	6892      	ldr	r2, [r2, #8]
 8000cce:	8892      	ldrh	r2, [r2, #4]
 8000cd0:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db7c      	blt.n	8000dd0 <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8000cd6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cda:	4a40      	ldr	r2, [pc, #256]	@ (8000ddc <lcdDrawChar+0x150>)
 8000cdc:	6892      	ldr	r2, [r2, #8]
 8000cde:	88d2      	ldrh	r2, [r2, #6]
 8000ce0:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db74      	blt.n	8000dd0 <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8000ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8000ddc <lcdDrawChar+0x150>)
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	88db      	ldrh	r3, [r3, #6]
 8000cec:	08db      	lsrs	r3, r3, #3
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73bb      	strb	r3, [r7, #14]
 8000cfa:	e061      	b.n	8000dc0 <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	733b      	strb	r3, [r7, #12]
 8000d00:	e055      	b.n	8000dae <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8000d02:	4b36      	ldr	r3, [pc, #216]	@ (8000ddc <lcdDrawChar+0x150>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	78fa      	ldrb	r2, [r7, #3]
 8000d0a:	3a20      	subs	r2, #32
 8000d0c:	4933      	ldr	r1, [pc, #204]	@ (8000ddc <lcdDrawChar+0x150>)
 8000d0e:	6889      	ldr	r1, [r1, #8]
 8000d10:	88c9      	ldrh	r1, [r1, #6]
 8000d12:	fb01 f202 	mul.w	r2, r1, r2
 8000d16:	7ab9      	ldrb	r1, [r7, #10]
 8000d18:	fb02 f101 	mul.w	r1, r2, r1
 8000d1c:	7bba      	ldrb	r2, [r7, #14]
 8000d1e:	7ab8      	ldrb	r0, [r7, #10]
 8000d20:	fb00 f202 	mul.w	r2, r0, r2
 8000d24:	4411      	add	r1, r2
 8000d26:	7b3a      	ldrb	r2, [r7, #12]
 8000d28:	440a      	add	r2, r1
 8000d2a:	4413      	add	r3, r2
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	72fb      	strb	r3, [r7, #11]
 8000d34:	e032      	b.n	8000d9c <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 8000d36:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	da12      	bge.n	8000d64 <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 8000d3e:	7afb      	ldrb	r3, [r7, #11]
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	4413      	add	r3, r2
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	4413      	add	r3, r2
 8000d4e:	b298      	uxth	r0, r3
 8000d50:	7bbb      	ldrb	r3, [r7, #14]
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	88bb      	ldrh	r3, [r7, #4]
 8000d56:	4413      	add	r3, r2
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	883a      	ldrh	r2, [r7, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f7ff fe91 	bl	8000a84 <lcdDrawPixel>
 8000d62:	e015      	b.n	8000d90 <lcdDrawChar+0x104>
				}
				else if (bg != color)
 8000d64:	8c3a      	ldrh	r2, [r7, #32]
 8000d66:	883b      	ldrh	r3, [r7, #0]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d011      	beq.n	8000d90 <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 8000d6c:	7afb      	ldrb	r3, [r7, #11]
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	4413      	add	r3, r2
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	4413      	add	r3, r2
 8000d7c:	b298      	uxth	r0, r3
 8000d7e:	7bbb      	ldrb	r3, [r7, #14]
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	88bb      	ldrh	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	8c3a      	ldrh	r2, [r7, #32]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f7ff fe7a 	bl	8000a84 <lcdDrawPixel>
				}
				line <<= 1;
 8000d90:	7b7b      	ldrb	r3, [r7, #13]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 8000d96:	7afb      	ldrb	r3, [r7, #11]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	72fb      	strb	r3, [r7, #11]
 8000d9c:	7afb      	ldrb	r3, [r7, #11]
 8000d9e:	2b07      	cmp	r3, #7
 8000da0:	d9c9      	bls.n	8000d36 <lcdDrawChar+0xaa>
			}

			xP += 8;
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	3308      	adds	r3, #8
 8000da6:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8000da8:	7b3b      	ldrb	r3, [r7, #12]
 8000daa:	3301      	adds	r3, #1
 8000dac:	733b      	strb	r3, [r7, #12]
 8000dae:	7b3a      	ldrb	r2, [r7, #12]
 8000db0:	7abb      	ldrb	r3, [r7, #10]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d3a5      	bcc.n	8000d02 <lcdDrawChar+0x76>
		}

		xP = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000dba:	7bbb      	ldrb	r3, [r7, #14]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	73bb      	strb	r3, [r7, #14]
 8000dc0:	7bbb      	ldrb	r3, [r7, #14]
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <lcdDrawChar+0x150>)
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	88db      	ldrh	r3, [r3, #6]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d396      	bcc.n	8000cfc <lcdDrawChar+0x70>
 8000dce:	e000      	b.n	8000dd2 <lcdDrawChar+0x146>
		return;
 8000dd0:	bf00      	nop
	}
}
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd90      	pop	{r4, r7, pc}
 8000dd8:	20000018 	.word	0x20000018
 8000ddc:	20000020 	.word	0x20000020

08000de0 <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8000de0:	b40f      	push	{r0, r1, r2, r3}
 8000de2:	b590      	push	{r4, r7, lr}
 8000de4:	b085      	sub	sp, #20
 8000de6:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	69b9      	ldr	r1, [r7, #24]
 8000df2:	483d      	ldr	r0, [pc, #244]	@ (8000ee8 <lcdPrintf+0x108>)
 8000df4:	f00e fac6 	bl	800f384 <vsiprintf>
	va_end(lst);

	p = buf;
 8000df8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee8 <lcdPrintf+0x108>)
 8000dfa:	607b      	str	r3, [r7, #4]
	while (*p)
 8000dfc:	e067      	b.n	8000ece <lcdPrintf+0xee>
	{
		if (*p == '\n')
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b0a      	cmp	r3, #10
 8000e04:	d10c      	bne.n	8000e20 <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 8000e06:	4b39      	ldr	r3, [pc, #228]	@ (8000eec <lcdPrintf+0x10c>)
 8000e08:	885a      	ldrh	r2, [r3, #2]
 8000e0a:	4b39      	ldr	r3, [pc, #228]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	88db      	ldrh	r3, [r3, #6]
 8000e10:	4413      	add	r3, r2
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	4b35      	ldr	r3, [pc, #212]	@ (8000eec <lcdPrintf+0x10c>)
 8000e16:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 8000e18:	4b34      	ldr	r3, [pc, #208]	@ (8000eec <lcdPrintf+0x10c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	801a      	strh	r2, [r3, #0]
 8000e1e:	e04a      	b.n	8000eb6 <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b0d      	cmp	r3, #13
 8000e26:	d046      	beq.n	8000eb6 <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b09      	cmp	r3, #9
 8000e2e:	d10b      	bne.n	8000e48 <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 8000e30:	4b2e      	ldr	r3, [pc, #184]	@ (8000eec <lcdPrintf+0x10c>)
 8000e32:	881a      	ldrh	r2, [r3, #0]
 8000e34:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	889b      	ldrh	r3, [r3, #4]
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	4413      	add	r3, r2
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	4b2a      	ldr	r3, [pc, #168]	@ (8000eec <lcdPrintf+0x10c>)
 8000e44:	801a      	strh	r2, [r3, #0]
 8000e46:	e036      	b.n	8000eb6 <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8000e48:	4b28      	ldr	r3, [pc, #160]	@ (8000eec <lcdPrintf+0x10c>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	b218      	sxth	r0, r3
 8000e4e:	4b27      	ldr	r3, [pc, #156]	@ (8000eec <lcdPrintf+0x10c>)
 8000e50:	885b      	ldrh	r3, [r3, #2]
 8000e52:	b219      	sxth	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	781a      	ldrb	r2, [r3, #0]
 8000e58:	4b25      	ldr	r3, [pc, #148]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	b29c      	uxth	r4, r3
 8000e5e:	4b24      	ldr	r3, [pc, #144]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	4623      	mov	r3, r4
 8000e68:	f7ff ff10 	bl	8000c8c <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <lcdPrintf+0x10c>)
 8000e6e:	881a      	ldrh	r2, [r3, #0]
 8000e70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	889b      	ldrh	r3, [r3, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <lcdPrintf+0x10c>)
 8000e7c:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e80:	7b1b      	ldrb	r3, [r3, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d017      	beq.n	8000eb6 <lcdPrintf+0xd6>
 8000e86:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <lcdPrintf+0x10c>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <lcdPrintf+0x114>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	889b      	ldrh	r3, [r3, #4]
 8000e98:	1acb      	subs	r3, r1, r3
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	dd0b      	ble.n	8000eb6 <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8000e9e:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <lcdPrintf+0x10c>)
 8000ea0:	885a      	ldrh	r2, [r3, #2]
 8000ea2:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <lcdPrintf+0x110>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	88db      	ldrh	r3, [r3, #6]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <lcdPrintf+0x10c>)
 8000eae:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <lcdPrintf+0x10c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <lcdPrintf+0x10c>)
 8000ebe:	885a      	ldrh	r2, [r3, #2]
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <lcdPrintf+0x114>)
 8000ec2:	885b      	ldrh	r3, [r3, #2]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d302      	bcc.n	8000ece <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <lcdPrintf+0x10c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	805a      	strh	r2, [r3, #2]
	while (*p)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d193      	bne.n	8000dfe <lcdPrintf+0x1e>
		}
	}
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ee2:	b004      	add	sp, #16
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000340 	.word	0x20000340
 8000eec:	20000338 	.word	0x20000338
 8000ef0:	20000020 	.word	0x20000020
 8000ef4:	20000018 	.word	0x20000018

08000ef8 <lcdSetTextFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8000f00:	4a04      	ldr	r2, [pc, #16]	@ (8000f14 <lcdSetTextFont+0x1c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6093      	str	r3, [r2, #8]
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000020 	.word	0x20000020

08000f18 <lcdSetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	460a      	mov	r2, r1
 8000f22:	80fb      	strh	r3, [r7, #6]
 8000f24:	4613      	mov	r3, r2
 8000f26:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	4a05      	ldr	r2, [pc, #20]	@ (8000f40 <lcdSetTextColor+0x28>)
 8000f2c:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8000f2e:	88bb      	ldrh	r3, [r7, #4]
 8000f30:	4a03      	ldr	r2, [pc, #12]	@ (8000f40 <lcdSetTextColor+0x28>)
 8000f32:	6053      	str	r3, [r2, #4]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	20000020 	.word	0x20000020

08000f44 <lcdSetOrientation>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 8000f4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 8000f54:	2036      	movs	r0, #54	@ 0x36
 8000f56:	f000 f8cf 	bl	80010f8 <lcdWriteCommand>

	switch (lcdProperties.orientation)
 8000f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f5c:	791b      	ldrb	r3, [r3, #4]
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d83e      	bhi.n	8000fe0 <lcdSetOrientation+0x9c>
 8000f62:	a201      	add	r2, pc, #4	@ (adr r2, 8000f68 <lcdSetOrientation+0x24>)
 8000f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f68:	08000f79 	.word	0x08000f79
 8000f6c:	08000fad 	.word	0x08000fad
 8000f70:	08000f93 	.word	0x08000f93
 8000f74:	08000fc7 	.word	0x08000fc7
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 8000f78:	4b23      	ldr	r3, [pc, #140]	@ (8001008 <lcdSetOrientation+0xc4>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f8cb 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8000f82:	4b20      	ldr	r3, [pc, #128]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f84:	22f0      	movs	r2, #240	@ 0xf0
 8000f86:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8000f88:	4b1e      	ldr	r3, [pc, #120]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f8a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000f8e:	805a      	strh	r2, [r3, #2]
			break;
 8000f90:	e027      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 8000f92:	4b1e      	ldr	r3, [pc, #120]	@ (800100c <lcdSetOrientation+0xc8>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f8be 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f9e:	22f0      	movs	r2, #240	@ 0xf0
 8000fa0:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fa4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fa8:	805a      	strh	r2, [r3, #2]
			break;
 8000faa:	e01a      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8000fac:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <lcdSetOrientation+0xcc>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 f8b1 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fb8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fbc:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fc0:	22f0      	movs	r2, #240	@ 0xf0
 8000fc2:	805a      	strh	r2, [r3, #2]
			break;
 8000fc4:	e00d      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 8000fc6:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <lcdSetOrientation+0xd0>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f8a4 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fd2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fd6:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fda:	22f0      	movs	r2, #240	@ 0xf0
 8000fdc:	805a      	strh	r2, [r3, #2]
			break;
 8000fde:	e000      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		default:
			break;
 8000fe0:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8000fe2:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fec:	885b      	ldrh	r3, [r3, #2]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 f829 	bl	800104c <lcdSetWindow>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000018 	.word	0x20000018
 8001008:	2000033c 	.word	0x2000033c
 800100c:	2000033e 	.word	0x2000033e
 8001010:	2000033d 	.word	0x2000033d
 8001014:	2000033f 	.word	0x2000033f

08001018 <lcdSetCursor>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	460a      	mov	r2, r1
 8001022:	80fb      	strh	r3, [r7, #6]
 8001024:	4613      	mov	r3, r2
 8001026:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8001028:	4a07      	ldr	r2, [pc, #28]	@ (8001048 <lcdSetCursor+0x30>)
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 800102e:	4a06      	ldr	r2, [pc, #24]	@ (8001048 <lcdSetCursor+0x30>)
 8001030:	88bb      	ldrh	r3, [r7, #4]
 8001032:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 8001034:	88bb      	ldrh	r3, [r7, #4]
 8001036:	88fa      	ldrh	r2, [r7, #6]
 8001038:	88b9      	ldrh	r1, [r7, #4]
 800103a:	88f8      	ldrh	r0, [r7, #6]
 800103c:	f000 f806 	bl	800104c <lcdSetWindow>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000338 	.word	0x20000338

0800104c <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4604      	mov	r4, r0
 8001054:	4608      	mov	r0, r1
 8001056:	4611      	mov	r1, r2
 8001058:	461a      	mov	r2, r3
 800105a:	4623      	mov	r3, r4
 800105c:	80fb      	strh	r3, [r7, #6]
 800105e:	4603      	mov	r3, r0
 8001060:	80bb      	strh	r3, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	807b      	strh	r3, [r7, #2]
 8001066:	4613      	mov	r3, r2
 8001068:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 800106a:	202a      	movs	r0, #42	@ 0x2a
 800106c:	f000 f844 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	b29b      	uxth	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f84e 	bl	8001118 <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	b29b      	uxth	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f848 	bl	8001118 <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 8001088:	887b      	ldrh	r3, [r7, #2]
 800108a:	0a1b      	lsrs	r3, r3, #8
 800108c:	b29b      	uxth	r3, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f842 	bl	8001118 <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	b29b      	uxth	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f83c 	bl	8001118 <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80010a0:	202b      	movs	r0, #43	@ 0x2b
 80010a2:	f000 f829 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 80010a6:	88bb      	ldrh	r3, [r7, #4]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f833 	bl	8001118 <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 f82d 	bl	8001118 <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 80010be:	883b      	ldrh	r3, [r7, #0]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 f827 	bl	8001118 <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 80010ca:	883b      	ldrh	r3, [r7, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f821 	bl	8001118 <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 80010d6:	202c      	movs	r0, #44	@ 0x2c
 80010d8:	f000 f80e 	bl	80010f8 <lcdWriteCommand>
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd90      	pop	{r4, r7, pc}

080010e4 <lcdReset>:
  }
  while (i < dataLength);
}

static void lcdReset(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 80010e8:	2001      	movs	r0, #1
 80010ea:	f000 f805 	bl	80010f8 <lcdWriteCommand>
	HAL_Delay(50);
 80010ee:	2032      	movs	r0, #50	@ 0x32
 80010f0:	f003 faec 	bl	80046cc <HAL_Delay>
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 8001102:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8001106:	79fa      	ldrb	r2, [r7, #7]
 8001108:	b292      	uxth	r2, r2
 800110a:	801a      	strh	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 8001122:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <lcdWriteData+0x1c>)
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	8013      	strh	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	60020000 	.word	0x60020000

08001138 <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 8001138:	b490      	push	{r4, r7}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	4604      	mov	r4, r0
 8001140:	4608      	mov	r0, r1
 8001142:	4611      	mov	r1, r2
 8001144:	461a      	mov	r2, r3
 8001146:	4623      	mov	r3, r4
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	4603      	mov	r3, r0
 800114c:	71bb      	strb	r3, [r7, #6]
 800114e:	460b      	mov	r3, r1
 8001150:	717b      	strb	r3, [r7, #5]
 8001152:	4613      	mov	r3, r2
 8001154:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 800115a:	7f3b      	ldrb	r3, [r7, #28]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <lcdBuildMemoryAccessControlConfig+0x30>
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8001168:	7e3b      	ldrb	r3, [r7, #24]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <lcdBuildMemoryAccessControlConfig+0x3e>
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 8001176:	793b      	ldrb	r3, [r7, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <lcdBuildMemoryAccessControlConfig+0x4c>
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	f043 0310 	orr.w	r3, r3, #16
 8001182:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 8001184:	797b      	ldrb	r3, [r7, #5]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <lcdBuildMemoryAccessControlConfig+0x5a>
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	f043 0320 	orr.w	r3, r3, #32
 8001190:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <lcdBuildMemoryAccessControlConfig+0x68>
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800119e:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <lcdBuildMemoryAccessControlConfig+0x76>
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011ac:	73fb      	strb	r3, [r7, #15]
  return value;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc90      	pop	{r4, r7}
 80011b8:	4770      	bx	lr

080011ba <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011c2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011c6:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d013      	beq.n	80011fa <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80011d2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011d6:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80011da:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00b      	beq.n	80011fa <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80011e2:	e000      	b.n	80011e6 <ITM_SendChar+0x2c>
    {
      __NOP();
 80011e4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80011e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f9      	beq.n	80011e4 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80011f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80011fa:	687b      	ldr	r3, [r7, #4]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <_write>:
uint8_t handleTouch();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	e009      	b.n	800122e <_write+0x26>
		ITM_SendChar((*ptr++));  // Send the character via ITM
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1c5a      	adds	r2, r3, #1
 800121e:	60ba      	str	r2, [r7, #8]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ffc9 	bl	80011ba <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	3301      	adds	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	429a      	cmp	r2, r3
 8001234:	dbf1      	blt.n	800121a <_write+0x12>
	}
	return len;
 8001236:	687b      	ldr	r3, [r7, #4]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <USBH_HID_EventCallback>:
static uint8_t USB_BUSY = 0;
char qr_code_data[MAX_LINES][MAX_LINE_LENGTH] = { { '\0' } }; //static initializes strings with all null characters
HID_KEYBD_Info_TypeDef *Keyboard_Info;

/***DORJEE YOU HAVE TO CHANGE USBH_HID.H WHEN YOU GENERATE CODE****/
void USBH_HID_EventCallback(USBH_HandleTypeDef *phost) { //2.6s for 54 lines
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	Keyboard_Info = USBH_HID_GetKeybdInfo(phost);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f00b fa19 	bl	800c680 <USBH_HID_GetKeybdInfo>
 800124e:	4603      	mov	r3, r0
 8001250:	4a47      	ldr	r2, [pc, #284]	@ (8001370 <USBH_HID_EventCallback+0x130>)
 8001252:	6013      	str	r3, [r2, #0]
	char key = USBH_HID_GetASCIICode(Keyboard_Info);
 8001254:	4b46      	ldr	r3, [pc, #280]	@ (8001370 <USBH_HID_EventCallback+0x130>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f00b fab9 	bl	800c7d0 <USBH_HID_GetASCIICode>
 800125e:	4603      	mov	r3, r0
 8001260:	72fb      	strb	r3, [r7, #11]
	printf("%c\n", key);
 8001262:	7afb      	ldrb	r3, [r7, #11]
 8001264:	4619      	mov	r1, r3
 8001266:	4843      	ldr	r0, [pc, #268]	@ (8001374 <USBH_HID_EventCallback+0x134>)
 8001268:	f00d ff9a 	bl	800f1a0 <iprintf>
	//disable the touchscreen interrupt functionality when usb transmission starts
	//after tab it calls itself one more time, so disable after i=0
	if (i == 1) {
 800126c:	4b42      	ldr	r3, [pc, #264]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d102      	bne.n	800127a <USBH_HID_EventCallback+0x3a>
		USB_BUSY = 1;
 8001274:	4b41      	ldr	r3, [pc, #260]	@ (800137c <USBH_HID_EventCallback+0x13c>)
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
	}

	//store incoming chars. ignore null characters that come in for some reason
	if ((key != NULL_CHAR) && (key != SOH)) {
 800127a:	7afb      	ldrb	r3, [r7, #11]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d011      	beq.n	80012a4 <USBH_HID_EventCallback+0x64>
 8001280:	7afb      	ldrb	r3, [r7, #11]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d00e      	beq.n	80012a4 <USBH_HID_EventCallback+0x64>
		qr_code_data[i][j] = key;
 8001286:	4b3c      	ldr	r3, [pc, #240]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b3d      	ldr	r3, [pc, #244]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	493d      	ldr	r1, [pc, #244]	@ (8001384 <USBH_HID_EventCallback+0x144>)
 8001290:	0152      	lsls	r2, r2, #5
 8001292:	440a      	add	r2, r1
 8001294:	4413      	add	r3, r2
 8001296:	7afa      	ldrb	r2, [r7, #11]
 8001298:	701a      	strb	r2, [r3, #0]
		j++;
 800129a:	4b39      	ldr	r3, [pc, #228]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	4a37      	ldr	r2, [pc, #220]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 80012a2:	6013      	str	r3, [r2, #0]
	}
	//handle new line
	if (key == NEWLINE_CHAR) {
 80012a4:	7afb      	ldrb	r3, [r7, #11]
 80012a6:	2b0a      	cmp	r3, #10
 80012a8:	d107      	bne.n	80012ba <USBH_HID_EventCallback+0x7a>
		j = 0;
 80012aa:	4b35      	ldr	r3, [pc, #212]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
		i++;
 80012b0:	4b31      	ldr	r3, [pc, #196]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	4a30      	ldr	r2, [pc, #192]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 80012b8:	6013      	str	r3, [r2, #0]
	}
	//tab is the end of the qr code
	if (key == TAB) {
 80012ba:	7afb      	ldrb	r3, [r7, #11]
 80012bc:	2b09      	cmp	r3, #9
 80012be:	d152      	bne.n	8001366 <USBH_HID_EventCallback+0x126>
		for (int a = 0; a < 15; a++) {
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	e002      	b.n	80012cc <USBH_HID_EventCallback+0x8c>
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3301      	adds	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	2b0e      	cmp	r3, #14
 80012d0:	ddf9      	ble.n	80012c6 <USBH_HID_EventCallback+0x86>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d2:	b672      	cpsid	i
}
 80012d4:	bf00      	nop
			//printf("%s", qr_code_data[a]);
		}
		__disable_irq();
		//output_protocol(qr_code_data, i + 1);
		//check if the title is (10 chars + newline char) or less
		if (strlen(qr_code_data[0]) < (MAX_TITLE_SIZE + 1)) {
 80012d6:	482b      	ldr	r0, [pc, #172]	@ (8001384 <USBH_HID_EventCallback+0x144>)
 80012d8:	f7fe ff8a 	bl	80001f0 <strlen>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b0e      	cmp	r3, #14
 80012e0:	d83b      	bhi.n	800135a <USBH_HID_EventCallback+0x11a>
			uint8_t freeSectorNumber = getFreeSector();
 80012e2:	f002 fb13 	bl	800390c <getFreeSector>
 80012e6:	4603      	mov	r3, r0
 80012e8:	72bb      	strb	r3, [r7, #10]
			//printf("free sector is %d\n", freeSectorNumber);
			//only store the protocol if all memory isnt full
			if (freeSectorNumber <= 10) { //i only got 10 pages rn
 80012ea:	7abb      	ldrb	r3, [r7, #10]
 80012ec:	2b0a      	cmp	r3, #10
 80012ee:	d82a      	bhi.n	8001346 <USBH_HID_EventCallback+0x106>
				//printf("why\n");
				storeProtocol(qr_code_data, freeSectorNumber);
 80012f0:	7abb      	ldrb	r3, [r7, #10]
 80012f2:	4619      	mov	r1, r3
 80012f4:	4823      	ldr	r0, [pc, #140]	@ (8001384 <USBH_HID_EventCallback+0x144>)
 80012f6:	f002 f943 	bl	8003580 <storeProtocol>
				//go to the page num the new protocol is on
				page_num = freeSectorNumber;
 80012fa:	4a23      	ldr	r2, [pc, #140]	@ (8001388 <USBH_HID_EventCallback+0x148>)
 80012fc:	7abb      	ldrb	r3, [r7, #10]
 80012fe:	7013      	strb	r3, [r2, #0]
				DrawMainPage(page_num);
 8001300:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <USBH_HID_EventCallback+0x148>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fbed 	bl	8001ae4 <DrawMainPage>
				currentPage = PAGE_MAIN;
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <USBH_HID_EventCallback+0x14c>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < MAX_LINES; a++) {
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	e013      	b.n	800133e <USBH_HID_EventCallback+0xfe>
					for (int b = 0; b < MAX_LINE_LENGTH; b++) {
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	e00a      	b.n	8001332 <USBH_HID_EventCallback+0xf2>
						qr_code_data[a][b] = '\0';
 800131c:	4a19      	ldr	r2, [pc, #100]	@ (8001384 <USBH_HID_EventCallback+0x144>)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	015b      	lsls	r3, r3, #5
 8001322:	441a      	add	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
					for (int b = 0; b < MAX_LINE_LENGTH; b++) {
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3301      	adds	r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b1f      	cmp	r3, #31
 8001336:	ddf1      	ble.n	800131c <USBH_HID_EventCallback+0xdc>
				for (int a = 0; a < MAX_LINES; a++) {
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	3301      	adds	r3, #1
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	2bc7      	cmp	r3, #199	@ 0xc7
 8001342:	dde8      	ble.n	8001316 <USBH_HID_EventCallback+0xd6>
 8001344:	e004      	b.n	8001350 <USBH_HID_EventCallback+0x110>
					}
				}
			} else {
				DrawQueuePage(queueSize);
 8001346:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <USBH_HID_EventCallback+0x150>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f000 feec 	bl	8002128 <DrawQueuePage>
  __ASM volatile ("cpsie i" : : : "memory");
 8001350:	b662      	cpsie	i
}
 8001352:	bf00      	nop
			}
			__enable_irq();
			USB_BUSY = 0;
 8001354:	4b09      	ldr	r3, [pc, #36]	@ (800137c <USBH_HID_EventCallback+0x13c>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
		}
		i = 0;
 800135a:	4b07      	ldr	r3, [pc, #28]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
		j = 0;
 8001360:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
	}

}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20011908 	.word	0x20011908
 8001374:	08010268 	.word	0x08010268
 8001378:	200005fc 	.word	0x200005fc
 800137c:	20010005 	.word	0x20010005
 8001380:	20000600 	.word	0x20000600
 8001384:	20010008 	.word	0x20010008
 8001388:	20000293 	.word	0x20000293
 800138c:	200005c0 	.word	0x200005c0
 8001390:	20010004 	.word	0x20010004

08001394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139a:	f003 f925 	bl	80045e8 <HAL_Init>
//	HAL_Delay(50);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139e:	f000 f909 	bl	80015b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a2:	f000 fad9 	bl	8001958 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 80013a6:	f00d f9e9 	bl	800e77c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80013aa:	f000 fa49 	bl	8001840 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80013ae:	f000 f9ef 	bl	8001790 <MX_TIM3_Init>
  MX_TIM2_Init();
 80013b2:	f000 f99f 	bl	80016f4 <MX_TIM2_Init>
  MX_FMC_Init();
 80013b6:	f000 fa6d 	bl	8001894 <MX_FMC_Init>
  MX_SPI4_Init();
 80013ba:	f000 f965 	bl	8001688 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */

	printf("start program\n");
 80013be:	486e      	ldr	r0, [pc, #440]	@ (8001578 <main+0x1e4>)
 80013c0:	f00d ff5e 	bl	800f280 <puts>
//  	erase_sector(6);
//  	erase_sector(7);
//  	erase_sector(8);
//  	erase_sector(9);
//  	erase_sector(10);
	HAL_GPIO_WritePin(LCD_NRST_GPIO_Port, LCD_NRST_Pin, GPIO_PIN_SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	2140      	movs	r1, #64	@ 0x40
 80013c8:	486c      	ldr	r0, [pc, #432]	@ (800157c <main+0x1e8>)
 80013ca:	f003 ff1f 	bl	800520c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80013ce:	2032      	movs	r0, #50	@ 0x32
 80013d0:	f003 f97c 	bl	80046cc <HAL_Delay>
	HAL_GPIO_WritePin(LCD_NRST_GPIO_Port, LCD_NRST_Pin, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	2140      	movs	r1, #64	@ 0x40
 80013d8:	4868      	ldr	r0, [pc, #416]	@ (800157c <main+0x1e8>)
 80013da:	f003 ff17 	bl	800520c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80013de:	2032      	movs	r0, #50	@ 0x32
 80013e0:	f003 f974 	bl	80046cc <HAL_Delay>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80013e4:	2104      	movs	r1, #4
 80013e6:	4866      	ldr	r0, [pc, #408]	@ (8001580 <main+0x1ec>)
 80013e8:	f007 fae4 	bl	80089b4 <HAL_TIM_PWM_Start>
	htim3.Instance->CCR2 = 50;
 80013ec:	4b64      	ldr	r3, [pc, #400]	@ (8001580 <main+0x1ec>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2232      	movs	r2, #50	@ 0x32
 80013f2:	639a      	str	r2, [r3, #56]	@ 0x38

	lcdInit();
 80013f4:	f7ff f9a8 	bl	8000748 <lcdInit>
	//lcdTest();
	lcdSetOrientation(LCD_ORIENTATION_LANDSCAPE);
 80013f8:	2001      	movs	r0, #1
 80013fa:	f7ff fda3 	bl	8000f44 <lcdSetOrientation>
	DrawMainPage(1);
 80013fe:	2001      	movs	r0, #1
 8001400:	f000 fb70 	bl	8001ae4 <DrawMainPage>

	HAL_GPIO_WritePin(OTG_FS_PSO_GPIO_Port, OTG_FS_PSO_Pin, GPIO_PIN_RESET); //turn fan on
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800140a:	485e      	ldr	r0, [pc, #376]	@ (8001584 <main+0x1f0>)
 800140c:	f003 fefe 	bl	800520c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001410:	f00d f9da 	bl	800e7c8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

		if (touchFlag) {
 8001414:	4b5c      	ldr	r3, [pc, #368]	@ (8001588 <main+0x1f4>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00a      	beq.n	8001432 <main+0x9e>
			printf("touced\n");
 800141c:	485b      	ldr	r0, [pc, #364]	@ (800158c <main+0x1f8>)
 800141e:	f00d ff2f 	bl	800f280 <puts>
			handleTouch();
 8001422:	f001 fbc5 	bl	8002bb0 <handleTouch>
			touchFlag = 0;
 8001426:	4b58      	ldr	r3, [pc, #352]	@ (8001588 <main+0x1f4>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 800142c:	2064      	movs	r0, #100	@ 0x64
 800142e:	f003 f94d 	bl	80046cc <HAL_Delay>
		}
		if (currentPage == PAGE_PROGRESS) {
 8001432:	4b57      	ldr	r3, [pc, #348]	@ (8001590 <main+0x1fc>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b05      	cmp	r3, #5
 8001438:	d1ea      	bne.n	8001410 <main+0x7c>
			//when protocol finishes naturally, it will send a done signal

			if (HAL_UART_Receive(&huart2, &rx_byte, 1, 0) == HAL_OK) {
 800143a:	2300      	movs	r3, #0
 800143c:	2201      	movs	r2, #1
 800143e:	4955      	ldr	r1, [pc, #340]	@ (8001594 <main+0x200>)
 8001440:	4855      	ldr	r0, [pc, #340]	@ (8001598 <main+0x204>)
 8001442:	f008 f97c 	bl	800973e <HAL_UART_Receive>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1e1      	bne.n	8001410 <main+0x7c>
				//protocol starts, get the protocl title
				if (rx_byte == 'T') {
 800144c:	4b51      	ldr	r3, [pc, #324]	@ (8001594 <main+0x200>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b54      	cmp	r3, #84	@ 0x54
 8001452:	d111      	bne.n	8001478 <main+0xe4>
					memset(currentProtocolTitle, 0, MAX_LINE_LENGTH);
 8001454:	2220      	movs	r2, #32
 8001456:	2100      	movs	r1, #0
 8001458:	4850      	ldr	r0, [pc, #320]	@ (800159c <main+0x208>)
 800145a:	f00e f831 	bl	800f4c0 <memset>
					HAL_UART_Receive(&huart2, (uint8_t*) currentProtocolTitle,
 800145e:	2364      	movs	r3, #100	@ 0x64
 8001460:	2214      	movs	r2, #20
 8001462:	494e      	ldr	r1, [pc, #312]	@ (800159c <main+0x208>)
 8001464:	484c      	ldr	r0, [pc, #304]	@ (8001598 <main+0x204>)
 8001466:	f008 f96a 	bl	800973e <HAL_UART_Receive>
							sizeof(currentProtocolTitle), 100);
					DrawProgressPage("FILL", rx_byte, rx_data);
 800146a:	4b4a      	ldr	r3, [pc, #296]	@ (8001594 <main+0x200>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	4a4c      	ldr	r2, [pc, #304]	@ (80015a0 <main+0x20c>)
 8001470:	4619      	mov	r1, r3
 8001472:	484c      	ldr	r0, [pc, #304]	@ (80015a4 <main+0x210>)
 8001474:	f000 ff42 	bl	80022fc <DrawProgressPage>
				}
				//repeat update
				if (rx_byte == 'R') {
 8001478:	4b46      	ldr	r3, [pc, #280]	@ (8001594 <main+0x200>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b52      	cmp	r3, #82	@ 0x52
 800147e:	d139      	bne.n	80014f4 <main+0x160>
					char repeatUpdate[2];
					HAL_UART_Receive(&huart2, (uint8_t*) repeatUpdate,
 8001480:	f107 0118 	add.w	r1, r7, #24
 8001484:	2364      	movs	r3, #100	@ 0x64
 8001486:	2202      	movs	r2, #2
 8001488:	4843      	ldr	r0, [pc, #268]	@ (8001598 <main+0x204>)
 800148a:	f008 f958 	bl	800973e <HAL_UART_Receive>
							sizeof(repeatUpdate), 100);
					currentRepeatNum = atoi(repeatUpdate);
 800148e:	f107 0318 	add.w	r3, r7, #24
 8001492:	4618      	mov	r0, r3
 8001494:	f00d fc7c 	bl	800ed90 <atoi>
 8001498:	4603      	mov	r3, r0
 800149a:	b2da      	uxtb	r2, r3
 800149c:	4b42      	ldr	r3, [pc, #264]	@ (80015a8 <main+0x214>)
 800149e:	701a      	strb	r2, [r3, #0]
					printf("%d\n", currentRepeatNum);
 80014a0:	4b41      	ldr	r3, [pc, #260]	@ (80015a8 <main+0x214>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4619      	mov	r1, r3
 80014a8:	4840      	ldr	r0, [pc, #256]	@ (80015ac <main+0x218>)
 80014aa:	f00d fe79 	bl	800f1a0 <iprintf>
					//repeat
					char repeat[20] = "";
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
					uint32_t repeatInt = ConvertCharsToInt('0', rx_data[12],
 80014c0:	4b37      	ldr	r3, [pc, #220]	@ (80015a0 <main+0x20c>)
 80014c2:	7b1b      	ldrb	r3, [r3, #12]
 80014c4:	4a36      	ldr	r2, [pc, #216]	@ (80015a0 <main+0x20c>)
 80014c6:	7b52      	ldrb	r2, [r2, #13]
 80014c8:	4619      	mov	r1, r3
 80014ca:	2030      	movs	r0, #48	@ 0x30
 80014cc:	f001 fa52 	bl	8002974 <ConvertCharsToInt>
 80014d0:	61f8      	str	r0, [r7, #28]
							rx_data[13]);
					//sprintf(repeat, "Repeat: %c%c", rx_data[11], rx_data[12]);
					sprintf(repeat, "Repeat: %d/%d", currentRepeatNum,
 80014d2:	4b35      	ldr	r3, [pc, #212]	@ (80015a8 <main+0x214>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	461a      	mov	r2, r3
 80014da:	1d38      	adds	r0, r7, #4
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	4934      	ldr	r1, [pc, #208]	@ (80015b0 <main+0x21c>)
 80014e0:	f00d fed6 	bl	800f290 <siprintf>
							repeatInt);
					lcdSetCursor(10, 150);
 80014e4:	2196      	movs	r1, #150	@ 0x96
 80014e6:	200a      	movs	r0, #10
 80014e8:	f7ff fd96 	bl	8001018 <lcdSetCursor>
					lcdPrintf(repeat);
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fc76 	bl	8000de0 <lcdPrintf>
				}
				//protocol starts, update progress screen
				if (rx_byte == 'B') {
 80014f4:	4b27      	ldr	r3, [pc, #156]	@ (8001594 <main+0x200>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b42      	cmp	r3, #66	@ 0x42
 80014fa:	d10f      	bne.n	800151c <main+0x188>
					currentRepeatNum = 1;
 80014fc:	4b2a      	ldr	r3, [pc, #168]	@ (80015a8 <main+0x214>)
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive(&huart2, (uint8_t*) rx_data,
 8001502:	2364      	movs	r3, #100	@ 0x64
 8001504:	2214      	movs	r2, #20
 8001506:	4926      	ldr	r1, [pc, #152]	@ (80015a0 <main+0x20c>)
 8001508:	4823      	ldr	r0, [pc, #140]	@ (8001598 <main+0x204>)
 800150a:	f008 f918 	bl	800973e <HAL_UART_Receive>
							sizeof(rx_data), 100);
					DrawProgressPage("FILL", rx_byte, rx_data);
 800150e:	4b21      	ldr	r3, [pc, #132]	@ (8001594 <main+0x200>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	4a23      	ldr	r2, [pc, #140]	@ (80015a0 <main+0x20c>)
 8001514:	4619      	mov	r1, r3
 8001516:	4823      	ldr	r0, [pc, #140]	@ (80015a4 <main+0x210>)
 8001518:	f000 fef0 	bl	80022fc <DrawProgressPage>
				}
				if (rx_byte == 'M') {
 800151c:	4b1d      	ldr	r3, [pc, #116]	@ (8001594 <main+0x200>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b4d      	cmp	r3, #77	@ 0x4d
 8001522:	d10c      	bne.n	800153e <main+0x1aa>
					HAL_UART_Receive(&huart2, (uint8_t*) rx_data,
 8001524:	2364      	movs	r3, #100	@ 0x64
 8001526:	2214      	movs	r2, #20
 8001528:	491d      	ldr	r1, [pc, #116]	@ (80015a0 <main+0x20c>)
 800152a:	481b      	ldr	r0, [pc, #108]	@ (8001598 <main+0x204>)
 800152c:	f008 f907 	bl	800973e <HAL_UART_Receive>
							sizeof(rx_data), 100);
					DrawProgressPage("FILL", rx_byte, rx_data);
 8001530:	4b18      	ldr	r3, [pc, #96]	@ (8001594 <main+0x200>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4a1a      	ldr	r2, [pc, #104]	@ (80015a0 <main+0x20c>)
 8001536:	4619      	mov	r1, r3
 8001538:	481a      	ldr	r0, [pc, #104]	@ (80015a4 <main+0x210>)
 800153a:	f000 fedf 	bl	80022fc <DrawProgressPage>
				}
				if (rx_byte == 'P') {
 800153e:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <main+0x200>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b50      	cmp	r3, #80	@ 0x50
 8001544:	d10c      	bne.n	8001560 <main+0x1cc>
					HAL_UART_Receive(&huart2, (uint8_t*) rx_data,
 8001546:	2364      	movs	r3, #100	@ 0x64
 8001548:	2214      	movs	r2, #20
 800154a:	4915      	ldr	r1, [pc, #84]	@ (80015a0 <main+0x20c>)
 800154c:	4812      	ldr	r0, [pc, #72]	@ (8001598 <main+0x204>)
 800154e:	f008 f8f6 	bl	800973e <HAL_UART_Receive>
							sizeof(rx_data), 100);
					DrawProgressPage("FILL", rx_byte, rx_data);
 8001552:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <main+0x200>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	4a12      	ldr	r2, [pc, #72]	@ (80015a0 <main+0x20c>)
 8001558:	4619      	mov	r1, r3
 800155a:	4812      	ldr	r0, [pc, #72]	@ (80015a4 <main+0x210>)
 800155c:	f000 fece 	bl	80022fc <DrawProgressPage>
				}

				//protocol finishes
				if (rx_byte == 'D') {
 8001560:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <main+0x200>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b44      	cmp	r3, #68	@ 0x44
 8001566:	f47f af53 	bne.w	8001410 <main+0x7c>
					//go to success page
					currentPage = PAGE_FINISH;
 800156a:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <main+0x1fc>)
 800156c:	2204      	movs	r2, #4
 800156e:	701a      	strb	r2, [r3, #0]
					DrawPageFinish();
 8001570:	f001 fadc 	bl	8002b2c <DrawPageFinish>
    MX_USB_HOST_Process();
 8001574:	e74c      	b.n	8001410 <main+0x7c>
 8001576:	bf00      	nop
 8001578:	0801026c 	.word	0x0801026c
 800157c:	40020c00 	.word	0x40020c00
 8001580:	200004e0 	.word	0x200004e0
 8001584:	40020400 	.word	0x40020400
 8001588:	200005f8 	.word	0x200005f8
 800158c:	0801027c 	.word	0x0801027c
 8001590:	200005c0 	.word	0x200005c0
 8001594:	200005c8 	.word	0x200005c8
 8001598:	20000528 	.word	0x20000528
 800159c:	200005e0 	.word	0x200005e0
 80015a0:	200005cc 	.word	0x200005cc
 80015a4:	08010284 	.word	0x08010284
 80015a8:	20000292 	.word	0x20000292
 80015ac:	0801028c 	.word	0x0801028c
 80015b0:	08010290 	.word	0x08010290

080015b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b094      	sub	sp, #80	@ 0x50
 80015b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ba:	f107 0320 	add.w	r3, r7, #32
 80015be:	2230      	movs	r2, #48	@ 0x30
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f00d ff7c 	bl	800f4c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	4b28      	ldr	r3, [pc, #160]	@ (8001680 <SystemClock_Config+0xcc>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e0:	4a27      	ldr	r2, [pc, #156]	@ (8001680 <SystemClock_Config+0xcc>)
 80015e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e8:	4b25      	ldr	r3, [pc, #148]	@ (8001680 <SystemClock_Config+0xcc>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	4b22      	ldr	r3, [pc, #136]	@ (8001684 <SystemClock_Config+0xd0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a21      	ldr	r2, [pc, #132]	@ (8001684 <SystemClock_Config+0xd0>)
 80015fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	4b1f      	ldr	r3, [pc, #124]	@ (8001684 <SystemClock_Config+0xd0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001610:	2301      	movs	r3, #1
 8001612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001614:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800161a:	2302      	movs	r3, #2
 800161c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800161e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001624:	2308      	movs	r3, #8
 8001626:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001628:	23a8      	movs	r3, #168	@ 0xa8
 800162a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800162c:	2302      	movs	r3, #2
 800162e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001630:	2307      	movs	r3, #7
 8001632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001634:	f107 0320 	add.w	r3, r7, #32
 8001638:	4618      	mov	r0, r3
 800163a:	f005 ff4d 	bl	80074d8 <HAL_RCC_OscConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001644:	f002 fd22 	bl	800408c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001648:	230f      	movs	r3, #15
 800164a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800164c:	2302      	movs	r3, #2
 800164e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001654:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800165a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800165e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	2105      	movs	r1, #5
 8001666:	4618      	mov	r0, r3
 8001668:	f006 f9ae 	bl	80079c8 <HAL_RCC_ClockConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001672:	f002 fd0b 	bl	800408c <Error_Handler>
  }
}
 8001676:	bf00      	nop
 8001678:	3750      	adds	r7, #80	@ 0x50
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800
 8001684:	40007000 	.word	0x40007000

08001688 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800168c:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <MX_SPI4_Init+0x64>)
 800168e:	4a18      	ldr	r2, [pc, #96]	@ (80016f0 <MX_SPI4_Init+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001692:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <MX_SPI4_Init+0x64>)
 8001694:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001698:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800169a:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <MX_SPI4_Init+0x64>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80016a0:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <MX_SPI4_Init+0x64>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016a6:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <MX_SPI4_Init+0x64>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <MX_SPI4_Init+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <MX_SPI4_Init+0x64>)
 80016b4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80016b8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80016ba:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <MX_SPI4_Init+0x64>)
 80016bc:	2228      	movs	r2, #40	@ 0x28
 80016be:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c0:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <MX_SPI4_Init+0x64>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80016c6:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <MX_SPI4_Init+0x64>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016cc:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <MX_SPI4_Init+0x64>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <MX_SPI4_Init+0x64>)
 80016d4:	220a      	movs	r2, #10
 80016d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80016d8:	4804      	ldr	r0, [pc, #16]	@ (80016ec <MX_SPI4_Init+0x64>)
 80016da:	f006 fb93 	bl	8007e04 <HAL_SPI_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80016e4:	f002 fcd2 	bl	800408c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000440 	.word	0x20000440
 80016f0:	40013400 	.word	0x40013400

080016f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fa:	f107 0308 	add.w	r3, r7, #8
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001708:	463b      	mov	r3, r7
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001710:	4b1e      	ldr	r3, [pc, #120]	@ (800178c <MX_TIM2_Init+0x98>)
 8001712:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001716:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8001718:	4b1c      	ldr	r3, [pc, #112]	@ (800178c <MX_TIM2_Init+0x98>)
 800171a:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800171e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001720:	4b1a      	ldr	r3, [pc, #104]	@ (800178c <MX_TIM2_Init+0x98>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001726:	4b19      	ldr	r3, [pc, #100]	@ (800178c <MX_TIM2_Init+0x98>)
 8001728:	f242 7210 	movw	r2, #10000	@ 0x2710
 800172c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172e:	4b17      	ldr	r3, [pc, #92]	@ (800178c <MX_TIM2_Init+0x98>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001734:	4b15      	ldr	r3, [pc, #84]	@ (800178c <MX_TIM2_Init+0x98>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800173a:	4814      	ldr	r0, [pc, #80]	@ (800178c <MX_TIM2_Init+0x98>)
 800173c:	f006 fffc 	bl	8008738 <HAL_TIM_Base_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001746:	f002 fca1 	bl	800408c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800174e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	4619      	mov	r1, r3
 8001756:	480d      	ldr	r0, [pc, #52]	@ (800178c <MX_TIM2_Init+0x98>)
 8001758:	f007 fab6 	bl	8008cc8 <HAL_TIM_ConfigClockSource>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001762:	f002 fc93 	bl	800408c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800176e:	463b      	mov	r3, r7
 8001770:	4619      	mov	r1, r3
 8001772:	4806      	ldr	r0, [pc, #24]	@ (800178c <MX_TIM2_Init+0x98>)
 8001774:	f007 fe8c 	bl	8009490 <HAL_TIMEx_MasterConfigSynchronization>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800177e:	f002 fc85 	bl	800408c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000498 	.word	0x20000498

08001790 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	@ 0x28
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001796:	f107 0320 	add.w	r3, r7, #32
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]
 80017ae:	615a      	str	r2, [r3, #20]
 80017b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017b2:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <MX_TIM3_Init+0xa8>)
 80017b4:	4a21      	ldr	r2, [pc, #132]	@ (800183c <MX_TIM3_Init+0xac>)
 80017b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168-1;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <MX_TIM3_Init+0xa8>)
 80017ba:	22a7      	movs	r2, #167	@ 0xa7
 80017bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017be:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <MX_TIM3_Init+0xa8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80017c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <MX_TIM3_Init+0xa8>)
 80017c6:	2263      	movs	r2, #99	@ 0x63
 80017c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <MX_TIM3_Init+0xa8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d0:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <MX_TIM3_Init+0xa8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017d6:	4818      	ldr	r0, [pc, #96]	@ (8001838 <MX_TIM3_Init+0xa8>)
 80017d8:	f007 f89d 	bl	8008916 <HAL_TIM_PWM_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80017e2:	f002 fc53 	bl	800408c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017ee:	f107 0320 	add.w	r3, r7, #32
 80017f2:	4619      	mov	r1, r3
 80017f4:	4810      	ldr	r0, [pc, #64]	@ (8001838 <MX_TIM3_Init+0xa8>)
 80017f6:	f007 fe4b 	bl	8009490 <HAL_TIMEx_MasterConfigSynchronization>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001800:	f002 fc44 	bl	800408c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001804:	2370      	movs	r3, #112	@ 0x70
 8001806:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	2204      	movs	r2, #4
 8001818:	4619      	mov	r1, r3
 800181a:	4807      	ldr	r0, [pc, #28]	@ (8001838 <MX_TIM3_Init+0xa8>)
 800181c:	f007 f992 	bl	8008b44 <HAL_TIM_PWM_ConfigChannel>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001826:	f002 fc31 	bl	800408c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800182a:	4803      	ldr	r0, [pc, #12]	@ (8001838 <MX_TIM3_Init+0xa8>)
 800182c:	f002 fce6 	bl	80041fc <HAL_TIM_MspPostInit>

}
 8001830:	bf00      	nop
 8001832:	3728      	adds	r7, #40	@ 0x28
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200004e0 	.word	0x200004e0
 800183c:	40000400 	.word	0x40000400

08001840 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001844:	4b11      	ldr	r3, [pc, #68]	@ (800188c <MX_USART2_UART_Init+0x4c>)
 8001846:	4a12      	ldr	r2, [pc, #72]	@ (8001890 <MX_USART2_UART_Init+0x50>)
 8001848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800184a:	4b10      	ldr	r3, [pc, #64]	@ (800188c <MX_USART2_UART_Init+0x4c>)
 800184c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001852:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <MX_USART2_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001858:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <MX_USART2_UART_Init+0x4c>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800185e:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <MX_USART2_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001864:	4b09      	ldr	r3, [pc, #36]	@ (800188c <MX_USART2_UART_Init+0x4c>)
 8001866:	220c      	movs	r2, #12
 8001868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186a:	4b08      	ldr	r3, [pc, #32]	@ (800188c <MX_USART2_UART_Init+0x4c>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <MX_USART2_UART_Init+0x4c>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001876:	4805      	ldr	r0, [pc, #20]	@ (800188c <MX_USART2_UART_Init+0x4c>)
 8001878:	f007 fe86 	bl	8009588 <HAL_UART_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001882:	f002 fc03 	bl	800408c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000528 	.word	0x20000528
 8001890:	40004400 	.word	0x40004400

08001894 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
 80018a8:	615a      	str	r2, [r3, #20]
 80018aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80018ac:	4b28      	ldr	r3, [pc, #160]	@ (8001950 <MX_FMC_Init+0xbc>)
 80018ae:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80018b2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80018b4:	4b26      	ldr	r3, [pc, #152]	@ (8001950 <MX_FMC_Init+0xbc>)
 80018b6:	4a27      	ldr	r2, [pc, #156]	@ (8001954 <MX_FMC_Init+0xc0>)
 80018b8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80018ba:	4b25      	ldr	r3, [pc, #148]	@ (8001950 <MX_FMC_Init+0xbc>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80018c0:	4b23      	ldr	r3, [pc, #140]	@ (8001950 <MX_FMC_Init+0xbc>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80018c6:	4b22      	ldr	r3, [pc, #136]	@ (8001950 <MX_FMC_Init+0xbc>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80018cc:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <MX_FMC_Init+0xbc>)
 80018ce:	2210      	movs	r2, #16
 80018d0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80018d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001950 <MX_FMC_Init+0xbc>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80018d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001950 <MX_FMC_Init+0xbc>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
 80018de:	4b1c      	ldr	r3, [pc, #112]	@ (8001950 <MX_FMC_Init+0xbc>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80018e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001950 <MX_FMC_Init+0xbc>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80018ea:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <MX_FMC_Init+0xbc>)
 80018ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80018f2:	4b17      	ldr	r3, [pc, #92]	@ (8001950 <MX_FMC_Init+0xbc>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80018f8:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <MX_FMC_Init+0xbc>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80018fe:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <MX_FMC_Init+0xbc>)
 8001900:	2200      	movs	r2, #0
 8001902:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001904:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <MX_FMC_Init+0xbc>)
 8001906:	2200      	movs	r2, #0
 8001908:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800190a:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <MX_FMC_Init+0xbc>)
 800190c:	2200      	movs	r2, #0
 800190e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001910:	4b0f      	ldr	r3, [pc, #60]	@ (8001950 <MX_FMC_Init+0xbc>)
 8001912:	2200      	movs	r2, #0
 8001914:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001916:	230f      	movs	r3, #15
 8001918:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800191a:	230f      	movs	r3, #15
 800191c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800191e:	23ff      	movs	r3, #255	@ 0xff
 8001920:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001922:	230f      	movs	r3, #15
 8001924:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001926:	2310      	movs	r3, #16
 8001928:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800192a:	2311      	movs	r3, #17
 800192c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	2200      	movs	r2, #0
 8001936:	4619      	mov	r1, r3
 8001938:	4805      	ldr	r0, [pc, #20]	@ (8001950 <MX_FMC_Init+0xbc>)
 800193a:	f006 feb5 	bl	80086a8 <HAL_SRAM_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8001944:	f002 fba2 	bl	800408c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001948:	bf00      	nop
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000570 	.word	0x20000570
 8001954:	a0000104 	.word	0xa0000104

08001958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08c      	sub	sp, #48	@ 0x30
 800195c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195e:	f107 031c 	add.w	r3, r7, #28
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	61bb      	str	r3, [r7, #24]
 8001972:	4b58      	ldr	r3, [pc, #352]	@ (8001ad4 <MX_GPIO_Init+0x17c>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	4a57      	ldr	r2, [pc, #348]	@ (8001ad4 <MX_GPIO_Init+0x17c>)
 8001978:	f043 0310 	orr.w	r3, r3, #16
 800197c:	6313      	str	r3, [r2, #48]	@ 0x30
 800197e:	4b55      	ldr	r3, [pc, #340]	@ (8001ad4 <MX_GPIO_Init+0x17c>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	61bb      	str	r3, [r7, #24]
 8001988:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	4b51      	ldr	r3, [pc, #324]	@ (8001ad4 <MX_GPIO_Init+0x17c>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	4a50      	ldr	r2, [pc, #320]	@ (8001ad4 <MX_GPIO_Init+0x17c>)
 8001994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001998:	6313      	str	r3, [r2, #48]	@ 0x30
 800199a:	4b4e      	ldr	r3, [pc, #312]	@ (8001ad4 <MX_GPIO_Init+0x17c>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b4a      	ldr	r3, [pc, #296]	@ (8001ad4 <MX_GPIO_Init+0x17c>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	4a49      	ldr	r2, [pc, #292]	@ (8001ad4 <MX_GPIO_Init+0x17c>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b6:	4b47      	ldr	r3, [pc, #284]	@ (8001ad4 <MX_GPIO_Init+0x17c>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b43      	ldr	r3, [pc, #268]	@ (8001ad4 <MX_GPIO_Init+0x17c>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	4a42      	ldr	r2, [pc, #264]	@ (8001ad4 <MX_GPIO_Init+0x17c>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d2:	4b40      	ldr	r3, [pc, #256]	@ (8001ad4 <MX_GPIO_Init+0x17c>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ad4 <MX_GPIO_Init+0x17c>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	4a3b      	ldr	r2, [pc, #236]	@ (8001ad4 <MX_GPIO_Init+0x17c>)
 80019e8:	f043 0308 	orr.w	r3, r3, #8
 80019ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ee:	4b39      	ldr	r3, [pc, #228]	@ (8001ad4 <MX_GPIO_Init+0x17c>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	4b35      	ldr	r3, [pc, #212]	@ (8001ad4 <MX_GPIO_Init+0x17c>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	4a34      	ldr	r2, [pc, #208]	@ (8001ad4 <MX_GPIO_Init+0x17c>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0a:	4b32      	ldr	r3, [pc, #200]	@ (8001ad4 <MX_GPIO_Init+0x17c>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FAN_EN_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001a1c:	482e      	ldr	r0, [pc, #184]	@ (8001ad8 <MX_GPIO_Init+0x180>)
 8001a1e:	f003 fbf5 	bl	800520c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_NRST_GPIO_Port, LCD_NRST_Pin, GPIO_PIN_RESET);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2140      	movs	r1, #64	@ 0x40
 8001a26:	482d      	ldr	r0, [pc, #180]	@ (8001adc <MX_GPIO_Init+0x184>)
 8001a28:	f003 fbf0 	bl	800520c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PSO_GPIO_Port, OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a32:	482b      	ldr	r0, [pc, #172]	@ (8001ae0 <MX_GPIO_Init+0x188>)
 8001a34:	f003 fbea 	bl	800520c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FAN_EN_Pin DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = FAN_EN_Pin|DEBUG_LED_Pin;
 8001a38:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a4a:	f107 031c 	add.w	r3, r7, #28
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4821      	ldr	r0, [pc, #132]	@ (8001ad8 <MX_GPIO_Init+0x180>)
 8001a52:	f003 fa17 	bl	8004e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_NRST_Pin */
  GPIO_InitStruct.Pin = LCD_NRST_Pin;
 8001a56:	2340      	movs	r3, #64	@ 0x40
 8001a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_NRST_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 031c 	add.w	r3, r7, #28
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	481b      	ldr	r0, [pc, #108]	@ (8001adc <MX_GPIO_Init+0x184>)
 8001a6e:	f003 fa09 	bl	8004e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_IRQ_Pin OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|OTG_FS_OC_Pin;
 8001a72:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a78:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a82:	f107 031c 	add.w	r3, r7, #28
 8001a86:	4619      	mov	r1, r3
 8001a88:	4815      	ldr	r0, [pc, #84]	@ (8001ae0 <MX_GPIO_Init+0x188>)
 8001a8a:	f003 f9fb 	bl	8004e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PSO_Pin;
 8001a8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PSO_GPIO_Port, &GPIO_InitStruct);
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	480e      	ldr	r0, [pc, #56]	@ (8001ae0 <MX_GPIO_Init+0x188>)
 8001aa8:	f003 f9ec 	bl	8004e84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2100      	movs	r1, #0
 8001ab0:	200a      	movs	r0, #10
 8001ab2:	f002 ff0a 	bl	80048ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001ab6:	200a      	movs	r0, #10
 8001ab8:	f002 ff23 	bl	8004902 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001abc:	2200      	movs	r2, #0
 8001abe:	2100      	movs	r1, #0
 8001ac0:	2017      	movs	r0, #23
 8001ac2:	f002 ff02 	bl	80048ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ac6:	2017      	movs	r0, #23
 8001ac8:	f002 ff1b 	bl	8004902 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001acc:	bf00      	nop
 8001ace:	3730      	adds	r7, #48	@ 0x30
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020800 	.word	0x40020800
 8001adc:	40020c00 	.word	0x40020c00
 8001ae0:	40020400 	.word	0x40020400

08001ae4 <DrawMainPage>:
/**
 * @brief: Draw main page and handle button label and status updates
 * @param: page_num: determines which page should be drawn from 1-10
 * @retval: none
 */
void DrawMainPage(uint8_t page_num) {
 8001ae4:	b5b0      	push	{r4, r5, r7, lr}
 8001ae6:	b0a8      	sub	sp, #160	@ 0xa0
 8001ae8:	af02      	add	r7, sp, #8
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
	//Draw "Protocol Title" box
	lcdFillRGB(COLOR_WHITE);
 8001aee:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001af2:	f7fe ff9d 	bl	8000a30 <lcdFillRGB>
	char empty[20] = "Empty\n"; //strings from flash memory come with newline at end
 8001af6:	4a9c      	ldr	r2, [pc, #624]	@ (8001d68 <DrawMainPage+0x284>)
 8001af8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001afc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b00:	6018      	str	r0, [r3, #0]
 8001b02:	3304      	adds	r3, #4
 8001b04:	8019      	strh	r1, [r3, #0]
 8001b06:	3302      	adds	r3, #2
 8001b08:	0c0a      	lsrs	r2, r1, #16
 8001b0a:	701a      	strb	r2, [r3, #0]
 8001b0c:	f107 0387 	add.w	r3, r7, #135	@ 0x87
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	731a      	strb	r2, [r3, #12]
	char pageTitle[20] = "";
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001b1e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
	sprintf(pageTitle, "Page %d", page_num);
 8001b2c:	79fa      	ldrb	r2, [r7, #7]
 8001b2e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b32:	498e      	ldr	r1, [pc, #568]	@ (8001d6c <DrawMainPage+0x288>)
 8001b34:	4618      	mov	r0, r3
 8001b36:	f00d fbab 	bl	800f290 <siprintf>
	lcdSetCursor(10, 10);
 8001b3a:	210a      	movs	r1, #10
 8001b3c:	200a      	movs	r0, #10
 8001b3e:	f7ff fa6b 	bl	8001018 <lcdSetCursor>
	lcdSetTextColor(COLOR_BLACK, COLOR_WHITE);
 8001b42:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001b46:	2000      	movs	r0, #0
 8001b48:	f7ff f9e6 	bl	8000f18 <lcdSetTextColor>
	lcdSetTextFont(&Font20);
 8001b4c:	4888      	ldr	r0, [pc, #544]	@ (8001d70 <DrawMainPage+0x28c>)
 8001b4e:	f7ff f9d3 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf(pageTitle);
 8001b52:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f942 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 8001b5c:	4885      	ldr	r0, [pc, #532]	@ (8001d74 <DrawMainPage+0x290>)
 8001b5e:	f7ff f9cb 	bl	8000ef8 <lcdSetTextFont>

	//get button label info from flash memory
	char readBuffer1[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001b62:	2300      	movs	r3, #0
 8001b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b66:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
 8001b74:	611a      	str	r2, [r3, #16]
 8001b76:	615a      	str	r2, [r3, #20]
 8001b78:	619a      	str	r2, [r3, #24]
	char readBuffer2[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b7e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
 8001b8c:	611a      	str	r2, [r3, #16]
 8001b8e:	615a      	str	r2, [r3, #20]
 8001b90:	619a      	str	r2, [r3, #24]
	char readBuffer3[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	f107 0310 	add.w	r3, r7, #16
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
 8001ba4:	611a      	str	r2, [r3, #16]
 8001ba6:	615a      	str	r2, [r3, #20]
 8001ba8:	619a      	str	r2, [r3, #24]

	//if the protocol exists, read from it. else, name it empty
	if (read_from_flash(readBuffer1, get_sector_address(page_num))) {
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f002 f98b 	bl	8003ec8 <get_sector_address>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001bb8:	4611      	mov	r1, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f001 fcab 	bl	8003516 <read_from_flash>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00a      	beq.n	8001bdc <DrawMainPage+0xf8>
		strcpy(buttons[0].label, readBuffer1);
 8001bc6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001bca:	4619      	mov	r1, r3
 8001bcc:	486a      	ldr	r0, [pc, #424]	@ (8001d78 <DrawMainPage+0x294>)
 8001bce:	f00d fd02 	bl	800f5d6 <strcpy>
		buttons[0].status = NOT_EMPTY;
 8001bd2:	4b6a      	ldr	r3, [pc, #424]	@ (8001d7c <DrawMainPage+0x298>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8001bda:	e009      	b.n	8001bf0 <DrawMainPage+0x10c>
	} else {
		strcpy(buttons[0].label, empty);
 8001bdc:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001be0:	4619      	mov	r1, r3
 8001be2:	4865      	ldr	r0, [pc, #404]	@ (8001d78 <DrawMainPage+0x294>)
 8001be4:	f00d fcf7 	bl	800f5d6 <strcpy>
		buttons[0].status = EMPTY;
 8001be8:	4b64      	ldr	r3, [pc, #400]	@ (8001d7c <DrawMainPage+0x298>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}
	if (read_from_flash(readBuffer2,
			get_sector_address(page_num) + PROTOCOL_SIZE)) {
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f002 f968 	bl	8003ec8 <get_sector_address>
 8001bf8:	4603      	mov	r3, r0
	if (read_from_flash(readBuffer2,
 8001bfa:	f503 53bb 	add.w	r3, r3, #5984	@ 0x1760
 8001bfe:	3310      	adds	r3, #16
 8001c00:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001c04:	4619      	mov	r1, r3
 8001c06:	4610      	mov	r0, r2
 8001c08:	f001 fc85 	bl	8003516 <read_from_flash>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00a      	beq.n	8001c28 <DrawMainPage+0x144>
		strcpy(buttons[1].label, readBuffer2);
 8001c12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c16:	4619      	mov	r1, r3
 8001c18:	4859      	ldr	r0, [pc, #356]	@ (8001d80 <DrawMainPage+0x29c>)
 8001c1a:	f00d fcdc 	bl	800f5d6 <strcpy>
		buttons[1].status = NOT_EMPTY;
 8001c1e:	4b57      	ldr	r3, [pc, #348]	@ (8001d7c <DrawMainPage+0x298>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8001c26:	e009      	b.n	8001c3c <DrawMainPage+0x158>
	} else {
		strcpy(buttons[1].label, empty);
 8001c28:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4854      	ldr	r0, [pc, #336]	@ (8001d80 <DrawMainPage+0x29c>)
 8001c30:	f00d fcd1 	bl	800f5d6 <strcpy>
		buttons[1].status = EMPTY;
 8001c34:	4b51      	ldr	r3, [pc, #324]	@ (8001d7c <DrawMainPage+0x298>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
	}
	if (read_from_flash(readBuffer3,
			get_sector_address(page_num) + 2 * PROTOCOL_SIZE)) {
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f002 f942 	bl	8003ec8 <get_sector_address>
 8001c44:	4603      	mov	r3, r0
	if (read_from_flash(readBuffer3,
 8001c46:	f503 533b 	add.w	r3, r3, #11968	@ 0x2ec0
 8001c4a:	3320      	adds	r3, #32
 8001c4c:	f107 020c 	add.w	r2, r7, #12
 8001c50:	4619      	mov	r1, r3
 8001c52:	4610      	mov	r0, r2
 8001c54:	f001 fc5f 	bl	8003516 <read_from_flash>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00a      	beq.n	8001c74 <DrawMainPage+0x190>
		strcpy(buttons[2].label, readBuffer3);
 8001c5e:	f107 030c 	add.w	r3, r7, #12
 8001c62:	4619      	mov	r1, r3
 8001c64:	4847      	ldr	r0, [pc, #284]	@ (8001d84 <DrawMainPage+0x2a0>)
 8001c66:	f00d fcb6 	bl	800f5d6 <strcpy>
		buttons[2].status = NOT_EMPTY;
 8001c6a:	4b44      	ldr	r3, [pc, #272]	@ (8001d7c <DrawMainPage+0x298>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8001c72:	e009      	b.n	8001c88 <DrawMainPage+0x1a4>
	} else {
		strcpy(buttons[2].label, empty);
 8001c74:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4842      	ldr	r0, [pc, #264]	@ (8001d84 <DrawMainPage+0x2a0>)
 8001c7c:	f00d fcab 	bl	800f5d6 <strcpy>
		buttons[2].status = EMPTY;
 8001c80:	4b3e      	ldr	r3, [pc, #248]	@ (8001d7c <DrawMainPage+0x298>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	}

	// Draw buttons
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c8e:	e08d      	b.n	8001dac <DrawMainPage+0x2c8>
		lcdDrawRect(buttons[i].x, buttons[i].y, buttons[i].w, buttons[i].h,
 8001c90:	4a3a      	ldr	r2, [pc, #232]	@ (8001d7c <DrawMainPage+0x298>)
 8001c92:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c96:	212a      	movs	r1, #42	@ 0x2a
 8001c98:	fb01 f303 	mul.w	r3, r1, r3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	b218      	sxth	r0, r3
 8001ca2:	4a36      	ldr	r2, [pc, #216]	@ (8001d7c <DrawMainPage+0x298>)
 8001ca4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ca8:	212a      	movs	r1, #42	@ 0x2a
 8001caa:	fb01 f303 	mul.w	r3, r1, r3
 8001cae:	4413      	add	r3, r2
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	b219      	sxth	r1, r3
 8001cb6:	4a31      	ldr	r2, [pc, #196]	@ (8001d7c <DrawMainPage+0x298>)
 8001cb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cbc:	242a      	movs	r4, #42	@ 0x2a
 8001cbe:	fb04 f303 	mul.w	r3, r4, r3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	b21a      	sxth	r2, r3
 8001cca:	4c2c      	ldr	r4, [pc, #176]	@ (8001d7c <DrawMainPage+0x298>)
 8001ccc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cd0:	252a      	movs	r5, #42	@ 0x2a
 8001cd2:	fb05 f303 	mul.w	r3, r5, r3
 8001cd6:	4423      	add	r3, r4
 8001cd8:	3306      	adds	r3, #6
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b21b      	sxth	r3, r3
 8001cde:	2400      	movs	r4, #0
 8001ce0:	9400      	str	r4, [sp, #0]
 8001ce2:	f7fe ff89 	bl	8000bf8 <lcdDrawRect>
		COLOR_BLACK);
		buttons[i].label[strlen(buttons[i].label) - 1] = ' '; //dont display null terminator
 8001ce6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cea:	222a      	movs	r2, #42	@ 0x2a
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	3308      	adds	r3, #8
 8001cf2:	4a22      	ldr	r2, [pc, #136]	@ (8001d7c <DrawMainPage+0x298>)
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fa7a 	bl	80001f0 <strlen>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	491e      	ldr	r1, [pc, #120]	@ (8001d7c <DrawMainPage+0x298>)
 8001d02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001d06:	202a      	movs	r0, #42	@ 0x2a
 8001d08:	fb00 f202 	mul.w	r2, r0, r2
 8001d0c:	440a      	add	r2, r1
 8001d0e:	4413      	add	r3, r2
 8001d10:	3308      	adds	r3, #8
 8001d12:	2220      	movs	r2, #32
 8001d14:	701a      	strb	r2, [r3, #0]
		lcdSetCursor(buttons[i].x + 10, buttons[i].y + 10);
 8001d16:	4a19      	ldr	r2, [pc, #100]	@ (8001d7c <DrawMainPage+0x298>)
 8001d18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d1c:	212a      	movs	r1, #42	@ 0x2a
 8001d1e:	fb01 f303 	mul.w	r3, r1, r3
 8001d22:	4413      	add	r3, r2
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	330a      	adds	r3, #10
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	4914      	ldr	r1, [pc, #80]	@ (8001d7c <DrawMainPage+0x298>)
 8001d2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d30:	202a      	movs	r0, #42	@ 0x2a
 8001d32:	fb00 f303 	mul.w	r3, r0, r3
 8001d36:	440b      	add	r3, r1
 8001d38:	3302      	adds	r3, #2
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	330a      	adds	r3, #10
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	4619      	mov	r1, r3
 8001d42:	4610      	mov	r0, r2
 8001d44:	f7ff f968 	bl	8001018 <lcdSetCursor>
		if (buttons[i].status == EMPTY) {
 8001d48:	4a0c      	ldr	r2, [pc, #48]	@ (8001d7c <DrawMainPage+0x298>)
 8001d4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d4e:	212a      	movs	r1, #42	@ 0x2a
 8001d50:	fb01 f303 	mul.w	r3, r1, r3
 8001d54:	4413      	add	r3, r2
 8001d56:	3328      	adds	r3, #40	@ 0x28
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d116      	bne.n	8001d8c <DrawMainPage+0x2a8>
			lcdPrintf("EMPTY");
 8001d5e:	480a      	ldr	r0, [pc, #40]	@ (8001d88 <DrawMainPage+0x2a4>)
 8001d60:	f7ff f83e 	bl	8000de0 <lcdPrintf>
 8001d64:	e01d      	b.n	8001da2 <DrawMainPage+0x2be>
 8001d66:	bf00      	nop
 8001d68:	080102b0 	.word	0x080102b0
 8001d6c:	080102a0 	.word	0x080102a0
 8001d70:	20000010 	.word	0x20000010
 8001d74:	20000008 	.word	0x20000008
 8001d78:	20000038 	.word	0x20000038
 8001d7c:	20000030 	.word	0x20000030
 8001d80:	20000062 	.word	0x20000062
 8001d84:	2000008c 	.word	0x2000008c
 8001d88:	080102a8 	.word	0x080102a8
		} else {
			lcdPrintf(buttons[i].label);
 8001d8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d90:	222a      	movs	r2, #42	@ 0x2a
 8001d92:	fb02 f303 	mul.w	r3, r2, r3
 8001d96:	3308      	adds	r3, #8
 8001d98:	4a3a      	ldr	r2, [pc, #232]	@ (8001e84 <DrawMainPage+0x3a0>)
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff f81f 	bl	8000de0 <lcdPrintf>
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8001da2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001da6:	3301      	adds	r3, #1
 8001da8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001dac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	f77f af6d 	ble.w	8001c90 <DrawMainPage+0x1ac>
		}
	}

	// Draw "Next" button
	if (page_num != 10) {
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	2b0a      	cmp	r3, #10
 8001dba:	d01e      	beq.n	8001dfa <DrawMainPage+0x316>
		//BSP_LCD_SetTextColor(LCD_COLOR_RED);
		lcdDrawRect(nextButton.x, nextButton.y, nextButton.w, nextButton.h,
 8001dbc:	4b32      	ldr	r3, [pc, #200]	@ (8001e88 <DrawMainPage+0x3a4>)
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	b218      	sxth	r0, r3
 8001dc2:	4b31      	ldr	r3, [pc, #196]	@ (8001e88 <DrawMainPage+0x3a4>)
 8001dc4:	885b      	ldrh	r3, [r3, #2]
 8001dc6:	b219      	sxth	r1, r3
 8001dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e88 <DrawMainPage+0x3a4>)
 8001dca:	889b      	ldrh	r3, [r3, #4]
 8001dcc:	b21a      	sxth	r2, r3
 8001dce:	4b2e      	ldr	r3, [pc, #184]	@ (8001e88 <DrawMainPage+0x3a4>)
 8001dd0:	88db      	ldrh	r3, [r3, #6]
 8001dd2:	b21b      	sxth	r3, r3
 8001dd4:	2400      	movs	r4, #0
 8001dd6:	9400      	str	r4, [sp, #0]
 8001dd8:	f7fe ff0e 	bl	8000bf8 <lcdDrawRect>
		COLOR_BLACK);
		lcdSetCursor(nextButton.x + 5, nextButton.y + 5);
 8001ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8001e88 <DrawMainPage+0x3a4>)
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	3305      	adds	r3, #5
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	4b28      	ldr	r3, [pc, #160]	@ (8001e88 <DrawMainPage+0x3a4>)
 8001de6:	885b      	ldrh	r3, [r3, #2]
 8001de8:	3305      	adds	r3, #5
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	4619      	mov	r1, r3
 8001dee:	4610      	mov	r0, r2
 8001df0:	f7ff f912 	bl	8001018 <lcdSetCursor>
		lcdPrintf(nextButton.label);
 8001df4:	4825      	ldr	r0, [pc, #148]	@ (8001e8c <DrawMainPage+0x3a8>)
 8001df6:	f7fe fff3 	bl	8000de0 <lcdPrintf>
	}

	// Draw "Back" button
	if (page_num != 1) {
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d01e      	beq.n	8001e3e <DrawMainPage+0x35a>
		lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8001e00:	4b23      	ldr	r3, [pc, #140]	@ (8001e90 <DrawMainPage+0x3ac>)
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	b218      	sxth	r0, r3
 8001e06:	4b22      	ldr	r3, [pc, #136]	@ (8001e90 <DrawMainPage+0x3ac>)
 8001e08:	885b      	ldrh	r3, [r3, #2]
 8001e0a:	b219      	sxth	r1, r3
 8001e0c:	4b20      	ldr	r3, [pc, #128]	@ (8001e90 <DrawMainPage+0x3ac>)
 8001e0e:	889b      	ldrh	r3, [r3, #4]
 8001e10:	b21a      	sxth	r2, r3
 8001e12:	4b1f      	ldr	r3, [pc, #124]	@ (8001e90 <DrawMainPage+0x3ac>)
 8001e14:	88db      	ldrh	r3, [r3, #6]
 8001e16:	b21b      	sxth	r3, r3
 8001e18:	2400      	movs	r4, #0
 8001e1a:	9400      	str	r4, [sp, #0]
 8001e1c:	f7fe feec 	bl	8000bf8 <lcdDrawRect>
		COLOR_BLACK);
		lcdSetCursor(backButton.x + 5, backButton.y + 5);
 8001e20:	4b1b      	ldr	r3, [pc, #108]	@ (8001e90 <DrawMainPage+0x3ac>)
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	3305      	adds	r3, #5
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	4b19      	ldr	r3, [pc, #100]	@ (8001e90 <DrawMainPage+0x3ac>)
 8001e2a:	885b      	ldrh	r3, [r3, #2]
 8001e2c:	3305      	adds	r3, #5
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	4619      	mov	r1, r3
 8001e32:	4610      	mov	r0, r2
 8001e34:	f7ff f8f0 	bl	8001018 <lcdSetCursor>
		lcdPrintf(backButton.label);
 8001e38:	4816      	ldr	r0, [pc, #88]	@ (8001e94 <DrawMainPage+0x3b0>)
 8001e3a:	f7fe ffd1 	bl	8000de0 <lcdPrintf>
	}
//
	//draw "Queue" button on page 1
	lcdDrawRect(queueButton.x, queueButton.y, queueButton.w, queueButton.h,
 8001e3e:	4b16      	ldr	r3, [pc, #88]	@ (8001e98 <DrawMainPage+0x3b4>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	b218      	sxth	r0, r3
 8001e44:	4b14      	ldr	r3, [pc, #80]	@ (8001e98 <DrawMainPage+0x3b4>)
 8001e46:	885b      	ldrh	r3, [r3, #2]
 8001e48:	b219      	sxth	r1, r3
 8001e4a:	4b13      	ldr	r3, [pc, #76]	@ (8001e98 <DrawMainPage+0x3b4>)
 8001e4c:	889b      	ldrh	r3, [r3, #4]
 8001e4e:	b21a      	sxth	r2, r3
 8001e50:	4b11      	ldr	r3, [pc, #68]	@ (8001e98 <DrawMainPage+0x3b4>)
 8001e52:	88db      	ldrh	r3, [r3, #6]
 8001e54:	b21b      	sxth	r3, r3
 8001e56:	2400      	movs	r4, #0
 8001e58:	9400      	str	r4, [sp, #0]
 8001e5a:	f7fe fecd 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(queueButton.x + 5, queueButton.y + 5);
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e98 <DrawMainPage+0x3b4>)
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	3305      	adds	r3, #5
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <DrawMainPage+0x3b4>)
 8001e68:	885b      	ldrh	r3, [r3, #2]
 8001e6a:	3305      	adds	r3, #5
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4610      	mov	r0, r2
 8001e72:	f7ff f8d1 	bl	8001018 <lcdSetCursor>
	lcdPrintf(queueButton.label);
 8001e76:	4809      	ldr	r0, [pc, #36]	@ (8001e9c <DrawMainPage+0x3b8>)
 8001e78:	f7fe ffb2 	bl	8000de0 <lcdPrintf>
}
 8001e7c:	bf00      	nop
 8001e7e:	3798      	adds	r7, #152	@ 0x98
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bdb0      	pop	{r4, r5, r7, pc}
 8001e84:	20000030 	.word	0x20000030
 8001e88:	200001e4 	.word	0x200001e4
 8001e8c:	200001ec 	.word	0x200001ec
 8001e90:	200001b8 	.word	0x200001b8
 8001e94:	200001c0 	.word	0x200001c0
 8001e98:	200000b0 	.word	0x200000b0
 8001e9c:	200000b8 	.word	0x200000b8

08001ea0 <DrawInfoPage>:
/**
 * @brief: Draw select page with run, delete and queue buttons
 * @param: protocolTitle: title of the protocol to be displayed
 * @retval: none
 */
void DrawInfoPage(char protocolTitle[MAX_LINE_LENGTH]) {
 8001ea0:	b590      	push	{r4, r7, lr}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	6078      	str	r0, [r7, #4]
	lcdFillRGB(COLOR_WHITE);
 8001ea8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001eac:	f7fe fdc0 	bl	8000a30 <lcdFillRGB>
	//Display protocol name at top of screen
	lcdSetCursor(90, 10);
 8001eb0:	210a      	movs	r1, #10
 8001eb2:	205a      	movs	r0, #90	@ 0x5a
 8001eb4:	f7ff f8b0 	bl	8001018 <lcdSetCursor>
	lcdSetTextFont(&Font20);
 8001eb8:	4853      	ldr	r0, [pc, #332]	@ (8002008 <DrawInfoPage+0x168>)
 8001eba:	f7ff f81d 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf(protocolTitle);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7fe ff8e 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 8001ec4:	4851      	ldr	r0, [pc, #324]	@ (800200c <DrawInfoPage+0x16c>)
 8001ec6:	f7ff f817 	bl	8000ef8 <lcdSetTextFont>

	//Draw "QueueSelect" button on select page
	lcdDrawRect(queueSelectButton.x, queueSelectButton.y, queueSelectButton.w,
 8001eca:	4b51      	ldr	r3, [pc, #324]	@ (8002010 <DrawInfoPage+0x170>)
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	b218      	sxth	r0, r3
 8001ed0:	4b4f      	ldr	r3, [pc, #316]	@ (8002010 <DrawInfoPage+0x170>)
 8001ed2:	885b      	ldrh	r3, [r3, #2]
 8001ed4:	b219      	sxth	r1, r3
 8001ed6:	4b4e      	ldr	r3, [pc, #312]	@ (8002010 <DrawInfoPage+0x170>)
 8001ed8:	889b      	ldrh	r3, [r3, #4]
 8001eda:	b21a      	sxth	r2, r3
			queueSelectButton.h, COLOR_BLACK);
 8001edc:	4b4c      	ldr	r3, [pc, #304]	@ (8002010 <DrawInfoPage+0x170>)
 8001ede:	88db      	ldrh	r3, [r3, #6]
	lcdDrawRect(queueSelectButton.x, queueSelectButton.y, queueSelectButton.w,
 8001ee0:	b21b      	sxth	r3, r3
 8001ee2:	2400      	movs	r4, #0
 8001ee4:	9400      	str	r4, [sp, #0]
 8001ee6:	f7fe fe87 	bl	8000bf8 <lcdDrawRect>
	lcdSetCursor(queueSelectButton.x + 10, queueSelectButton.y + 10);
 8001eea:	4b49      	ldr	r3, [pc, #292]	@ (8002010 <DrawInfoPage+0x170>)
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	330a      	adds	r3, #10
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	4b47      	ldr	r3, [pc, #284]	@ (8002010 <DrawInfoPage+0x170>)
 8001ef4:	885b      	ldrh	r3, [r3, #2]
 8001ef6:	330a      	adds	r3, #10
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	4619      	mov	r1, r3
 8001efc:	4610      	mov	r0, r2
 8001efe:	f7ff f88b 	bl	8001018 <lcdSetCursor>
	lcdPrintf(queueSelectButton.label);
 8001f02:	4844      	ldr	r0, [pc, #272]	@ (8002014 <DrawInfoPage+0x174>)
 8001f04:	f7fe ff6c 	bl	8000de0 <lcdPrintf>

	//Draw "Select" button
	lcdDrawRect(selectButton.x, selectButton.y, selectButton.w, selectButton.h,
 8001f08:	4b43      	ldr	r3, [pc, #268]	@ (8002018 <DrawInfoPage+0x178>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	b218      	sxth	r0, r3
 8001f0e:	4b42      	ldr	r3, [pc, #264]	@ (8002018 <DrawInfoPage+0x178>)
 8001f10:	885b      	ldrh	r3, [r3, #2]
 8001f12:	b219      	sxth	r1, r3
 8001f14:	4b40      	ldr	r3, [pc, #256]	@ (8002018 <DrawInfoPage+0x178>)
 8001f16:	889b      	ldrh	r3, [r3, #4]
 8001f18:	b21a      	sxth	r2, r3
 8001f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8002018 <DrawInfoPage+0x178>)
 8001f1c:	88db      	ldrh	r3, [r3, #6]
 8001f1e:	b21b      	sxth	r3, r3
 8001f20:	2400      	movs	r4, #0
 8001f22:	9400      	str	r4, [sp, #0]
 8001f24:	f7fe fe68 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(selectButton.x + 10, selectButton.y + 10);
 8001f28:	4b3b      	ldr	r3, [pc, #236]	@ (8002018 <DrawInfoPage+0x178>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	330a      	adds	r3, #10
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	4b39      	ldr	r3, [pc, #228]	@ (8002018 <DrawInfoPage+0x178>)
 8001f32:	885b      	ldrh	r3, [r3, #2]
 8001f34:	330a      	adds	r3, #10
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	f7ff f86c 	bl	8001018 <lcdSetCursor>
	lcdPrintf(selectButton.label);
 8001f40:	4836      	ldr	r0, [pc, #216]	@ (800201c <DrawInfoPage+0x17c>)
 8001f42:	f7fe ff4d 	bl	8000de0 <lcdPrintf>

	//Draw "Delete" button
	lcdDrawRect(deleteButton.x, deleteButton.y, deleteButton.w, deleteButton.h,
 8001f46:	4b36      	ldr	r3, [pc, #216]	@ (8002020 <DrawInfoPage+0x180>)
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	b218      	sxth	r0, r3
 8001f4c:	4b34      	ldr	r3, [pc, #208]	@ (8002020 <DrawInfoPage+0x180>)
 8001f4e:	885b      	ldrh	r3, [r3, #2]
 8001f50:	b219      	sxth	r1, r3
 8001f52:	4b33      	ldr	r3, [pc, #204]	@ (8002020 <DrawInfoPage+0x180>)
 8001f54:	889b      	ldrh	r3, [r3, #4]
 8001f56:	b21a      	sxth	r2, r3
 8001f58:	4b31      	ldr	r3, [pc, #196]	@ (8002020 <DrawInfoPage+0x180>)
 8001f5a:	88db      	ldrh	r3, [r3, #6]
 8001f5c:	b21b      	sxth	r3, r3
 8001f5e:	2400      	movs	r4, #0
 8001f60:	9400      	str	r4, [sp, #0]
 8001f62:	f7fe fe49 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(deleteButton.x + 10, deleteButton.y + 10);
 8001f66:	4b2e      	ldr	r3, [pc, #184]	@ (8002020 <DrawInfoPage+0x180>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	330a      	adds	r3, #10
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8002020 <DrawInfoPage+0x180>)
 8001f70:	885b      	ldrh	r3, [r3, #2]
 8001f72:	330a      	adds	r3, #10
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	4619      	mov	r1, r3
 8001f78:	4610      	mov	r0, r2
 8001f7a:	f7ff f84d 	bl	8001018 <lcdSetCursor>
	lcdPrintf(deleteButton.label);
 8001f7e:	4829      	ldr	r0, [pc, #164]	@ (8002024 <DrawInfoPage+0x184>)
 8001f80:	f7fe ff2e 	bl	8000de0 <lcdPrintf>

	// Draw "Info" button
	lcdDrawRect(protocolInfoButton.x, protocolInfoButton.y,
 8001f84:	4b28      	ldr	r3, [pc, #160]	@ (8002028 <DrawInfoPage+0x188>)
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	b218      	sxth	r0, r3
 8001f8a:	4b27      	ldr	r3, [pc, #156]	@ (8002028 <DrawInfoPage+0x188>)
 8001f8c:	885b      	ldrh	r3, [r3, #2]
 8001f8e:	b219      	sxth	r1, r3
			protocolInfoButton.w, protocolInfoButton.h,
 8001f90:	4b25      	ldr	r3, [pc, #148]	@ (8002028 <DrawInfoPage+0x188>)
 8001f92:	889b      	ldrh	r3, [r3, #4]
	lcdDrawRect(protocolInfoButton.x, protocolInfoButton.y,
 8001f94:	b21a      	sxth	r2, r3
			protocolInfoButton.w, protocolInfoButton.h,
 8001f96:	4b24      	ldr	r3, [pc, #144]	@ (8002028 <DrawInfoPage+0x188>)
 8001f98:	88db      	ldrh	r3, [r3, #6]
	lcdDrawRect(protocolInfoButton.x, protocolInfoButton.y,
 8001f9a:	b21b      	sxth	r3, r3
 8001f9c:	2400      	movs	r4, #0
 8001f9e:	9400      	str	r4, [sp, #0]
 8001fa0:	f7fe fe2a 	bl	8000bf8 <lcdDrawRect>
			COLOR_BLACK);
	lcdSetCursor(protocolInfoButton.x + 10, protocolInfoButton.y + 10);
 8001fa4:	4b20      	ldr	r3, [pc, #128]	@ (8002028 <DrawInfoPage+0x188>)
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	330a      	adds	r3, #10
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	4b1e      	ldr	r3, [pc, #120]	@ (8002028 <DrawInfoPage+0x188>)
 8001fae:	885b      	ldrh	r3, [r3, #2]
 8001fb0:	330a      	adds	r3, #10
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	f7ff f82e 	bl	8001018 <lcdSetCursor>
	lcdPrintf(protocolInfoButton.label);
 8001fbc:	481b      	ldr	r0, [pc, #108]	@ (800202c <DrawInfoPage+0x18c>)
 8001fbe:	f7fe ff0f 	bl	8000de0 <lcdPrintf>

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8002030 <DrawInfoPage+0x190>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	b218      	sxth	r0, r3
 8001fc8:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <DrawInfoPage+0x190>)
 8001fca:	885b      	ldrh	r3, [r3, #2]
 8001fcc:	b219      	sxth	r1, r3
 8001fce:	4b18      	ldr	r3, [pc, #96]	@ (8002030 <DrawInfoPage+0x190>)
 8001fd0:	889b      	ldrh	r3, [r3, #4]
 8001fd2:	b21a      	sxth	r2, r3
 8001fd4:	4b16      	ldr	r3, [pc, #88]	@ (8002030 <DrawInfoPage+0x190>)
 8001fd6:	88db      	ldrh	r3, [r3, #6]
 8001fd8:	b21b      	sxth	r3, r3
 8001fda:	2400      	movs	r4, #0
 8001fdc:	9400      	str	r4, [sp, #0]
 8001fde:	f7fe fe0b 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 8001fe2:	4b13      	ldr	r3, [pc, #76]	@ (8002030 <DrawInfoPage+0x190>)
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	330a      	adds	r3, #10
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <DrawInfoPage+0x190>)
 8001fec:	885b      	ldrh	r3, [r3, #2]
 8001fee:	330a      	adds	r3, #10
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	f7ff f80f 	bl	8001018 <lcdSetCursor>
	lcdPrintf(backButton.label);
 8001ffa:	480e      	ldr	r0, [pc, #56]	@ (8002034 <DrawInfoPage+0x194>)
 8001ffc:	f7fe fef0 	bl	8000de0 <lcdPrintf>
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	bd90      	pop	{r4, r7, pc}
 8002008:	20000010 	.word	0x20000010
 800200c:	20000008 	.word	0x20000008
 8002010:	20000134 	.word	0x20000134
 8002014:	2000013c 	.word	0x2000013c
 8002018:	20000160 	.word	0x20000160
 800201c:	20000168 	.word	0x20000168
 8002020:	2000018c 	.word	0x2000018c
 8002024:	20000194 	.word	0x20000194
 8002028:	20000268 	.word	0x20000268
 800202c:	20000270 	.word	0x20000270
 8002030:	200001b8 	.word	0x200001b8
 8002034:	200001c0 	.word	0x200001c0

08002038 <DrawConfirmationPage>:
 * @brief: Confirmation page to delete a protocol
 * @param: sector: which sector in flash memory the protocol exists
 * @param: offset: which section of the sector the protocol exists
 * @retval: none
 */
void DrawConfirmationPage(uint32_t sector, uint32_t offset) {
 8002038:	b590      	push	{r4, r7, lr}
 800203a:	b085      	sub	sp, #20
 800203c:	af02      	add	r7, sp, #8
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
	lcdFillRGB(COLOR_WHITE);
 8002042:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002046:	f7fe fcf3 	bl	8000a30 <lcdFillRGB>

	//display confirmation text
	lcdSetCursor(10, 10);
 800204a:	210a      	movs	r1, #10
 800204c:	200a      	movs	r0, #10
 800204e:	f7fe ffe3 	bl	8001018 <lcdSetCursor>
	lcdSetTextFont(&Font20);
 8002052:	482c      	ldr	r0, [pc, #176]	@ (8002104 <DrawConfirmationPage+0xcc>)
 8002054:	f7fe ff50 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf("Delete: ");
 8002058:	482b      	ldr	r0, [pc, #172]	@ (8002108 <DrawConfirmationPage+0xd0>)
 800205a:	f7fe fec1 	bl	8000de0 <lcdPrintf>
	lcdPrintf(buttons[offset].label);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	222a      	movs	r2, #42	@ 0x2a
 8002062:	fb02 f303 	mul.w	r3, r2, r3
 8002066:	3308      	adds	r3, #8
 8002068:	4a28      	ldr	r2, [pc, #160]	@ (800210c <DrawConfirmationPage+0xd4>)
 800206a:	4413      	add	r3, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe feb7 	bl	8000de0 <lcdPrintf>
	lcdPrintf("?");
 8002072:	4827      	ldr	r0, [pc, #156]	@ (8002110 <DrawConfirmationPage+0xd8>)
 8002074:	f7fe feb4 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 8002078:	4826      	ldr	r0, [pc, #152]	@ (8002114 <DrawConfirmationPage+0xdc>)
 800207a:	f7fe ff3d 	bl	8000ef8 <lcdSetTextFont>

	//Draw "Confirm" button
	lcdDrawRect(confirmButton.x, confirmButton.y, confirmButton.w,
 800207e:	4b26      	ldr	r3, [pc, #152]	@ (8002118 <DrawConfirmationPage+0xe0>)
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	b218      	sxth	r0, r3
 8002084:	4b24      	ldr	r3, [pc, #144]	@ (8002118 <DrawConfirmationPage+0xe0>)
 8002086:	885b      	ldrh	r3, [r3, #2]
 8002088:	b219      	sxth	r1, r3
 800208a:	4b23      	ldr	r3, [pc, #140]	@ (8002118 <DrawConfirmationPage+0xe0>)
 800208c:	889b      	ldrh	r3, [r3, #4]
 800208e:	b21a      	sxth	r2, r3
			confirmButton.h, COLOR_BLACK);
 8002090:	4b21      	ldr	r3, [pc, #132]	@ (8002118 <DrawConfirmationPage+0xe0>)
 8002092:	88db      	ldrh	r3, [r3, #6]
	lcdDrawRect(confirmButton.x, confirmButton.y, confirmButton.w,
 8002094:	b21b      	sxth	r3, r3
 8002096:	2400      	movs	r4, #0
 8002098:	9400      	str	r4, [sp, #0]
 800209a:	f7fe fdad 	bl	8000bf8 <lcdDrawRect>
	lcdSetCursor(confirmButton.x + 10, confirmButton.y + 10);
 800209e:	4b1e      	ldr	r3, [pc, #120]	@ (8002118 <DrawConfirmationPage+0xe0>)
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	330a      	adds	r3, #10
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002118 <DrawConfirmationPage+0xe0>)
 80020a8:	885b      	ldrh	r3, [r3, #2]
 80020aa:	330a      	adds	r3, #10
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	4619      	mov	r1, r3
 80020b0:	4610      	mov	r0, r2
 80020b2:	f7fe ffb1 	bl	8001018 <lcdSetCursor>
	lcdPrintf(confirmButton.label);
 80020b6:	4819      	ldr	r0, [pc, #100]	@ (800211c <DrawConfirmationPage+0xe4>)
 80020b8:	f7fe fe92 	bl	8000de0 <lcdPrintf>

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 80020bc:	4b18      	ldr	r3, [pc, #96]	@ (8002120 <DrawConfirmationPage+0xe8>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	b218      	sxth	r0, r3
 80020c2:	4b17      	ldr	r3, [pc, #92]	@ (8002120 <DrawConfirmationPage+0xe8>)
 80020c4:	885b      	ldrh	r3, [r3, #2]
 80020c6:	b219      	sxth	r1, r3
 80020c8:	4b15      	ldr	r3, [pc, #84]	@ (8002120 <DrawConfirmationPage+0xe8>)
 80020ca:	889b      	ldrh	r3, [r3, #4]
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	4b14      	ldr	r3, [pc, #80]	@ (8002120 <DrawConfirmationPage+0xe8>)
 80020d0:	88db      	ldrh	r3, [r3, #6]
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	2400      	movs	r4, #0
 80020d6:	9400      	str	r4, [sp, #0]
 80020d8:	f7fe fd8e 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 80020dc:	4b10      	ldr	r3, [pc, #64]	@ (8002120 <DrawConfirmationPage+0xe8>)
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	330a      	adds	r3, #10
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002120 <DrawConfirmationPage+0xe8>)
 80020e6:	885b      	ldrh	r3, [r3, #2]
 80020e8:	330a      	adds	r3, #10
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	4619      	mov	r1, r3
 80020ee:	4610      	mov	r0, r2
 80020f0:	f7fe ff92 	bl	8001018 <lcdSetCursor>
	lcdPrintf(backButton.label);
 80020f4:	480b      	ldr	r0, [pc, #44]	@ (8002124 <DrawConfirmationPage+0xec>)
 80020f6:	f7fe fe73 	bl	8000de0 <lcdPrintf>
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd90      	pop	{r4, r7, pc}
 8002102:	bf00      	nop
 8002104:	20000010 	.word	0x20000010
 8002108:	080102c4 	.word	0x080102c4
 800210c:	20000030 	.word	0x20000030
 8002110:	080102d0 	.word	0x080102d0
 8002114:	20000008 	.word	0x20000008
 8002118:	20000108 	.word	0x20000108
 800211c:	20000110 	.word	0x20000110
 8002120:	200001b8 	.word	0x200001b8
 8002124:	200001c0 	.word	0x200001c0

08002128 <DrawQueuePage>:
/**
 * @brief: Queue page has up to 10 protocols lined up
 * @param: queueSize: number of protocols in the queue
 * @retval: none
 */
void DrawQueuePage(uint8_t queueSize) {
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b093      	sub	sp, #76	@ 0x4c
 800212c:	af02      	add	r7, sp, #8
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
	lcdFillRGB(COLOR_WHITE);
 8002132:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002136:	f7fe fc7b 	bl	8000a30 <lcdFillRGB>
	char pageTitle[20] = "";
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
 800213e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	609a      	str	r2, [r3, #8]
 800214a:	60da      	str	r2, [r3, #12]
	sprintf(pageTitle, "Queue Size: %d", queueSize);
 800214c:	79fa      	ldrb	r2, [r7, #7]
 800214e:	f107 0320 	add.w	r3, r7, #32
 8002152:	4960      	ldr	r1, [pc, #384]	@ (80022d4 <DrawQueuePage+0x1ac>)
 8002154:	4618      	mov	r0, r3
 8002156:	f00d f89b 	bl	800f290 <siprintf>
	//Display Queue at top of the screen
	lcdSetCursor(60, 10);
 800215a:	210a      	movs	r1, #10
 800215c:	203c      	movs	r0, #60	@ 0x3c
 800215e:	f7fe ff5b 	bl	8001018 <lcdSetCursor>
	lcdSetTextFont(&Font20);
 8002162:	485d      	ldr	r0, [pc, #372]	@ (80022d8 <DrawQueuePage+0x1b0>)
 8002164:	f7fe fec8 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf(pageTitle);
 8002168:	f107 0320 	add.w	r3, r7, #32
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe fe37 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 8002172:	485a      	ldr	r0, [pc, #360]	@ (80022dc <DrawQueuePage+0x1b4>)
 8002174:	f7fe fec0 	bl	8000ef8 <lcdSetTextFont>

	//display protocols in queue here
	char format[20] = "";
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	f107 0310 	add.w	r3, r7, #16
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
	int startSpotX, startSpotY;
	for (uint8_t i = 0; i < queueSize; i++) {
 800218a:	2300      	movs	r3, #0
 800218c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002190:	e055      	b.n	800223e <DrawQueuePage+0x116>
		if (i < 5) {
 8002192:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002196:	2b04      	cmp	r3, #4
 8002198:	d804      	bhi.n	80021a4 <DrawQueuePage+0x7c>
			startSpotX = 10;
 800219a:	230a      	movs	r3, #10
 800219c:	63fb      	str	r3, [r7, #60]	@ 0x3c
			startSpotY = 50;
 800219e:	2332      	movs	r3, #50	@ 0x32
 80021a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80021a2:	e004      	b.n	80021ae <DrawQueuePage+0x86>
		} else {
			startSpotX = 160;
 80021a4:	23a0      	movs	r3, #160	@ 0xa0
 80021a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			startSpotY = 50 - 100;	//convoluted ik
 80021a8:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 80021ac:	63bb      	str	r3, [r7, #56]	@ 0x38
		}
		sprintf(format, "%d.) ", i + 1);
 80021ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	f107 030c 	add.w	r3, r7, #12
 80021b8:	4949      	ldr	r1, [pc, #292]	@ (80022e0 <DrawQueuePage+0x1b8>)
 80021ba:	4618      	mov	r0, r3
 80021bc:	f00d f868 	bl	800f290 <siprintf>
		lcdSetCursor(startSpotX, startSpotY + i * 20);
 80021c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021c2:	b298      	uxth	r0, r3
 80021c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	0092      	lsls	r2, r2, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	4413      	add	r3, r2
 80021da:	b29b      	uxth	r3, r3
 80021dc:	4619      	mov	r1, r3
 80021de:	f7fe ff1b 	bl	8001018 <lcdSetCursor>
		lcdSetTextFont(&Font12);
 80021e2:	4840      	ldr	r0, [pc, #256]	@ (80022e4 <DrawQueuePage+0x1bc>)
 80021e4:	f7fe fe88 	bl	8000ef8 <lcdSetTextFont>
		lcdPrintf(format);
 80021e8:	f107 030c 	add.w	r3, r7, #12
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe fdf7 	bl	8000de0 <lcdPrintf>
		lcdSetTextFont(&Font16);
 80021f2:	483a      	ldr	r0, [pc, #232]	@ (80022dc <DrawQueuePage+0x1b4>)
 80021f4:	f7fe fe80 	bl	8000ef8 <lcdSetTextFont>
		lcdSetCursor(startSpotX + 24, startSpotY + i * 20);
 80021f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	3318      	adds	r3, #24
 80021fe:	b298      	uxth	r0, r3
 8002200:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002204:	b29b      	uxth	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	0092      	lsls	r2, r2, #2
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	b29a      	uxth	r2, r3
 8002210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002212:	b29b      	uxth	r3, r3
 8002214:	4413      	add	r3, r2
 8002216:	b29b      	uxth	r3, r3
 8002218:	4619      	mov	r1, r3
 800221a:	f7fe fefd 	bl	8001018 <lcdSetCursor>
		lcdPrintf(queueBuffer[i][0]);
 800221e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002222:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	4a2f      	ldr	r2, [pc, #188]	@ (80022e8 <DrawQueuePage+0x1c0>)
 800222c:	4413      	add	r3, r2
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe fdd6 	bl	8000de0 <lcdPrintf>
	for (uint8_t i = 0; i < queueSize; i++) {
 8002234:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002238:	3301      	adds	r3, #1
 800223a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800223e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	429a      	cmp	r2, r3
 8002246:	d3a4      	bcc.n	8002192 <DrawQueuePage+0x6a>

	}

	//Draw "Run" button
	if (queueSize > 0) {
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d01e      	beq.n	800228c <DrawQueuePage+0x164>
		lcdDrawRect(runButton.x, runButton.y, runButton.w, runButton.h,
 800224e:	4b27      	ldr	r3, [pc, #156]	@ (80022ec <DrawQueuePage+0x1c4>)
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	b218      	sxth	r0, r3
 8002254:	4b25      	ldr	r3, [pc, #148]	@ (80022ec <DrawQueuePage+0x1c4>)
 8002256:	885b      	ldrh	r3, [r3, #2]
 8002258:	b219      	sxth	r1, r3
 800225a:	4b24      	ldr	r3, [pc, #144]	@ (80022ec <DrawQueuePage+0x1c4>)
 800225c:	889b      	ldrh	r3, [r3, #4]
 800225e:	b21a      	sxth	r2, r3
 8002260:	4b22      	ldr	r3, [pc, #136]	@ (80022ec <DrawQueuePage+0x1c4>)
 8002262:	88db      	ldrh	r3, [r3, #6]
 8002264:	b21b      	sxth	r3, r3
 8002266:	2400      	movs	r4, #0
 8002268:	9400      	str	r4, [sp, #0]
 800226a:	f7fe fcc5 	bl	8000bf8 <lcdDrawRect>
		COLOR_BLACK);
		lcdSetCursor(runButton.x + 10, runButton.y + 10);
 800226e:	4b1f      	ldr	r3, [pc, #124]	@ (80022ec <DrawQueuePage+0x1c4>)
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	330a      	adds	r3, #10
 8002274:	b29a      	uxth	r2, r3
 8002276:	4b1d      	ldr	r3, [pc, #116]	@ (80022ec <DrawQueuePage+0x1c4>)
 8002278:	885b      	ldrh	r3, [r3, #2]
 800227a:	330a      	adds	r3, #10
 800227c:	b29b      	uxth	r3, r3
 800227e:	4619      	mov	r1, r3
 8002280:	4610      	mov	r0, r2
 8002282:	f7fe fec9 	bl	8001018 <lcdSetCursor>
		lcdPrintf(runButton.label);
 8002286:	481a      	ldr	r0, [pc, #104]	@ (80022f0 <DrawQueuePage+0x1c8>)
 8002288:	f7fe fdaa 	bl	8000de0 <lcdPrintf>
	}

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 800228c:	4b19      	ldr	r3, [pc, #100]	@ (80022f4 <DrawQueuePage+0x1cc>)
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	b218      	sxth	r0, r3
 8002292:	4b18      	ldr	r3, [pc, #96]	@ (80022f4 <DrawQueuePage+0x1cc>)
 8002294:	885b      	ldrh	r3, [r3, #2]
 8002296:	b219      	sxth	r1, r3
 8002298:	4b16      	ldr	r3, [pc, #88]	@ (80022f4 <DrawQueuePage+0x1cc>)
 800229a:	889b      	ldrh	r3, [r3, #4]
 800229c:	b21a      	sxth	r2, r3
 800229e:	4b15      	ldr	r3, [pc, #84]	@ (80022f4 <DrawQueuePage+0x1cc>)
 80022a0:	88db      	ldrh	r3, [r3, #6]
 80022a2:	b21b      	sxth	r3, r3
 80022a4:	2400      	movs	r4, #0
 80022a6:	9400      	str	r4, [sp, #0]
 80022a8:	f7fe fca6 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 80022ac:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <DrawQueuePage+0x1cc>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	330a      	adds	r3, #10
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	4b0f      	ldr	r3, [pc, #60]	@ (80022f4 <DrawQueuePage+0x1cc>)
 80022b6:	885b      	ldrh	r3, [r3, #2]
 80022b8:	330a      	adds	r3, #10
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	4619      	mov	r1, r3
 80022be:	4610      	mov	r0, r2
 80022c0:	f7fe feaa 	bl	8001018 <lcdSetCursor>
	lcdPrintf(backButton.label);
 80022c4:	480c      	ldr	r0, [pc, #48]	@ (80022f8 <DrawQueuePage+0x1d0>)
 80022c6:	f7fe fd8b 	bl	8000de0 <lcdPrintf>
}
 80022ca:	bf00      	nop
 80022cc:	3744      	adds	r7, #68	@ 0x44
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd90      	pop	{r4, r7, pc}
 80022d2:	bf00      	nop
 80022d4:	080102d4 	.word	0x080102d4
 80022d8:	20000010 	.word	0x20000010
 80022dc:	20000008 	.word	0x20000008
 80022e0:	080102e4 	.word	0x080102e4
 80022e4:	20000000 	.word	0x20000000
 80022e8:	20000604 	.word	0x20000604
 80022ec:	200000dc 	.word	0x200000dc
 80022f0:	200000e4 	.word	0x200000e4
 80022f4:	200001b8 	.word	0x200001b8
 80022f8:	200001c0 	.word	0x200001c0

080022fc <DrawProgressPage>:
 * @param: protocolTitle: display protocol being run
 * @param: rx_byte: current motor movement type
 * @param: rx_data: current motor movement info
 * @retval: none
 */
void DrawProgressPage(char protocolTitle[20], uint8_t rx_byte, char *rx_data) {
 80022fc:	b590      	push	{r4, r7, lr}
 80022fe:	b0d5      	sub	sp, #340	@ 0x154
 8002300:	af02      	add	r7, sp, #8
 8002302:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002306:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800230a:	6018      	str	r0, [r3, #0]
 800230c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002310:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800231a:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800231e:	460a      	mov	r2, r1
 8002320:	701a      	strb	r2, [r3, #0]
	lcdFillRGB(COLOR_WHITE);
 8002322:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002326:	f7fe fb83 	bl	8000a30 <lcdFillRGB>

	//protocol title
	lcdSetCursor(100, 10);
 800232a:	210a      	movs	r1, #10
 800232c:	2064      	movs	r0, #100	@ 0x64
 800232e:	f7fe fe73 	bl	8001018 <lcdSetCursor>
	lcdPrintf(currentProtocolTitle);
 8002332:	48ca      	ldr	r0, [pc, #808]	@ (800265c <DrawProgressPage+0x360>)
 8002334:	f7fe fd54 	bl	8000de0 <lcdPrintf>

	//bindt
	if (rx_byte == 'B') {
 8002338:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800233c:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b42      	cmp	r3, #66	@ 0x42
 8002344:	f040 8142 	bne.w	80025cc <DrawProgressPage+0x2d0>
		//protocol type
		char protocolType[20] = "";
 8002348:	2300      	movs	r3, #0
 800234a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800234e:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	60da      	str	r2, [r3, #12]
		sprintf(protocolType, "Bind");
 800235c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002360:	49bf      	ldr	r1, [pc, #764]	@ (8002660 <DrawProgressPage+0x364>)
 8002362:	4618      	mov	r0, r3
 8002364:	f00c ff94 	bl	800f290 <siprintf>
		lcdSetCursor(10, 30);
 8002368:	211e      	movs	r1, #30
 800236a:	200a      	movs	r0, #10
 800236c:	f7fe fe54 	bl	8001018 <lcdSetCursor>
		lcdSetTextFont(&Font16);
 8002370:	48bc      	ldr	r0, [pc, #752]	@ (8002664 <DrawProgressPage+0x368>)
 8002372:	f7fe fdc1 	bl	8000ef8 <lcdSetTextFont>
		lcdPrintf(protocolType);
 8002376:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe fd30 	bl	8000de0 <lcdPrintf>
		//lcdSetTextFont(&Font16);
		//speed
		char speed[20] = "";
 8002380:	2300      	movs	r3, #0
 8002382:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
		printf("start test\n");
 8002394:	48b4      	ldr	r0, [pc, #720]	@ (8002668 <DrawProgressPage+0x36c>)
 8002396:	f00c ff73 	bl	800f280 <puts>
		uint32_t speedInt = ConvertCharsToInt('0', '0', rx_data[1]);
 800239a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800239e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	3301      	adds	r3, #1
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	2130      	movs	r1, #48	@ 0x30
 80023ac:	2030      	movs	r0, #48	@ 0x30
 80023ae:	f000 fae1 	bl	8002974 <ConvertCharsToInt>
 80023b2:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
		sprintf(speed, "Speed: %d", speedInt);
 80023b6:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80023ba:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80023be:	49ab      	ldr	r1, [pc, #684]	@ (800266c <DrawProgressPage+0x370>)
 80023c0:	4618      	mov	r0, r3
 80023c2:	f00c ff65 	bl	800f290 <siprintf>
		//printf("%d\n", speedInt);
		lcdSetCursor(10, 50);
 80023c6:	2132      	movs	r1, #50	@ 0x32
 80023c8:	200a      	movs	r0, #10
 80023ca:	f7fe fe25 	bl	8001018 <lcdSetCursor>
		lcdPrintf(speed);
 80023ce:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fd04 	bl	8000de0 <lcdPrintf>
		//duration
		char duration[20] = "";
 80023d8:	2300      	movs	r3, #0
 80023da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80023de:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	609a      	str	r2, [r3, #8]
 80023ea:	60da      	str	r2, [r3, #12]
		uint32_t durationInt = ConvertCharsToInt('0', rx_data[2], rx_data[3]);
 80023ec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80023f0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	3302      	adds	r3, #2
 80023f8:	7819      	ldrb	r1, [r3, #0]
 80023fa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80023fe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3303      	adds	r3, #3
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	2030      	movs	r0, #48	@ 0x30
 800240c:	f000 fab2 	bl	8002974 <ConvertCharsToInt>
 8002410:	f8c7 0140 	str.w	r0, [r7, #320]	@ 0x140
		//sprintf(duration, "Duration: %c%c", rx_data[2], rx_data[3]);
		sprintf(duration, "Duration: %d", durationInt);
 8002414:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8002418:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 800241c:	4994      	ldr	r1, [pc, #592]	@ (8002670 <DrawProgressPage+0x374>)
 800241e:	4618      	mov	r0, r3
 8002420:	f00c ff36 	bl	800f290 <siprintf>
		lcdSetCursor(10, 70);
 8002424:	2146      	movs	r1, #70	@ 0x46
 8002426:	200a      	movs	r0, #10
 8002428:	f7fe fdf6 	bl	8001018 <lcdSetCursor>
		lcdPrintf(duration);
 800242c:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe fcd5 	bl	8000de0 <lcdPrintf>
		//volume
		char volume[20] = "";
 8002436:	2300      	movs	r3, #0
 8002438:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800243c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
		uint32_t volumeInt = ConvertCharsToInt(rx_data[4], rx_data[5],
 800244a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800244e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	3304      	adds	r3, #4
 8002456:	7818      	ldrb	r0, [r3, #0]
 8002458:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800245c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	3305      	adds	r3, #5
 8002464:	7819      	ldrb	r1, [r3, #0]
				rx_data[6]);
 8002466:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800246a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	3306      	adds	r3, #6
		uint32_t volumeInt = ConvertCharsToInt(rx_data[4], rx_data[5],
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	f000 fa7d 	bl	8002974 <ConvertCharsToInt>
 800247a:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
		//sprintf(volume, "Volume: %c%c%c", rx_data[4], rx_data[5], rx_data[6]);
		sprintf(volume, "Volume: %d", volumeInt);
 800247e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002482:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8002486:	497b      	ldr	r1, [pc, #492]	@ (8002674 <DrawProgressPage+0x378>)
 8002488:	4618      	mov	r0, r3
 800248a:	f00c ff01 	bl	800f290 <siprintf>
		lcdSetCursor(10, 90);
 800248e:	215a      	movs	r1, #90	@ 0x5a
 8002490:	200a      	movs	r0, #10
 8002492:	f7fe fdc1 	bl	8001018 <lcdSetCursor>
		lcdPrintf(volume);
 8002496:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fca0 	bl	8000de0 <lcdPrintf>
		//depth
		char depth[20] = "";
 80024a0:	2300      	movs	r3, #0
 80024a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80024a6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	605a      	str	r2, [r3, #4]
 80024b0:	609a      	str	r2, [r3, #8]
 80024b2:	60da      	str	r2, [r3, #12]
		uint32_t depthInt = ConvertCharsToInt(rx_data[7], rx_data[8],
 80024b4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80024b8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	3307      	adds	r3, #7
 80024c0:	7818      	ldrb	r0, [r3, #0]
 80024c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80024c6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3308      	adds	r3, #8
 80024ce:	7819      	ldrb	r1, [r3, #0]
				rx_data[9]);
 80024d0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80024d4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	3309      	adds	r3, #9
		uint32_t depthInt = ConvertCharsToInt(rx_data[7], rx_data[8],
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	f000 fa48 	bl	8002974 <ConvertCharsToInt>
 80024e4:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138
		//sprintf(depth, "Depth: %c%c%c", rx_data[7], rx_data[8], rx_data[9]);
		sprintf(depth, "Depth: %d", depthInt);
 80024e8:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80024ec:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 80024f0:	4961      	ldr	r1, [pc, #388]	@ (8002678 <DrawProgressPage+0x37c>)
 80024f2:	4618      	mov	r0, r3
 80024f4:	f00c fecc 	bl	800f290 <siprintf>
		lcdSetCursor(10, 110);
 80024f8:	216e      	movs	r1, #110	@ 0x6e
 80024fa:	200a      	movs	r0, #10
 80024fc:	f7fe fd8c 	bl	8001018 <lcdSetCursor>
		lcdPrintf(depth);
 8002500:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe fc6b 	bl	8000de0 <lcdPrintf>
		//pauseDuration
		char pauseDuration[20] = "";
 800250a:	2300      	movs	r3, #0
 800250c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002510:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
		uint32_t pauseInt = ConvertCharsToInt('0', rx_data[10], rx_data[11]);
 800251e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002522:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	330a      	adds	r3, #10
 800252a:	7819      	ldrb	r1, [r3, #0]
 800252c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002530:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	330b      	adds	r3, #11
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	2030      	movs	r0, #48	@ 0x30
 800253e:	f000 fa19 	bl	8002974 <ConvertCharsToInt>
 8002542:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
		sprintf(pauseDuration, "PauseDuration: %d", pauseInt);
 8002546:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800254a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800254e:	494b      	ldr	r1, [pc, #300]	@ (800267c <DrawProgressPage+0x380>)
 8002550:	4618      	mov	r0, r3
 8002552:	f00c fe9d 	bl	800f290 <siprintf>
		lcdSetCursor(10, 130);
 8002556:	2182      	movs	r1, #130	@ 0x82
 8002558:	200a      	movs	r0, #10
 800255a:	f7fe fd5d 	bl	8001018 <lcdSetCursor>
		lcdPrintf(pauseDuration);
 800255e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe fc3c 	bl	8000de0 <lcdPrintf>
		//repeat
		char repeat[20] = "";
 8002568:	2300      	movs	r3, #0
 800256a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800256e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	605a      	str	r2, [r3, #4]
 8002578:	609a      	str	r2, [r3, #8]
 800257a:	60da      	str	r2, [r3, #12]
		uint32_t repeatInt = ConvertCharsToInt('0', rx_data[12], rx_data[13]);
 800257c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002580:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	330c      	adds	r3, #12
 8002588:	7819      	ldrb	r1, [r3, #0]
 800258a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800258e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	330d      	adds	r3, #13
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	2030      	movs	r0, #48	@ 0x30
 800259c:	f000 f9ea 	bl	8002974 <ConvertCharsToInt>
 80025a0:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
		//sprintf(repeat, "Repeat: %c%c", rx_data[11], rx_data[12]);
		sprintf(repeat, "Repeat: %d/%d", currentRepeatNum, repeatInt);
 80025a4:	4b36      	ldr	r3, [pc, #216]	@ (8002680 <DrawProgressPage+0x384>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	461a      	mov	r2, r3
 80025ac:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 80025b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80025b4:	4933      	ldr	r1, [pc, #204]	@ (8002684 <DrawProgressPage+0x388>)
 80025b6:	f00c fe6b 	bl	800f290 <siprintf>
		lcdSetCursor(10, 150);
 80025ba:	2196      	movs	r1, #150	@ 0x96
 80025bc:	200a      	movs	r0, #10
 80025be:	f7fe fd2b 	bl	8001018 <lcdSetCursor>
		lcdPrintf(repeat);
 80025c2:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe fc0a 	bl	8000de0 <lcdPrintf>
	}

	//pause
	if (rx_byte == 'P') {
 80025cc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80025d0:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b50      	cmp	r3, #80	@ 0x50
 80025d8:	d15c      	bne.n	8002694 <DrawProgressPage+0x398>
		char protocolType[20] = "";
 80025da:	2300      	movs	r3, #0
 80025dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80025e0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
		sprintf(protocolType, "Pause");
 80025ee:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80025f2:	4925      	ldr	r1, [pc, #148]	@ (8002688 <DrawProgressPage+0x38c>)
 80025f4:	4618      	mov	r0, r3
 80025f6:	f00c fe4b 	bl	800f290 <siprintf>
		lcdSetCursor(60, 30);
 80025fa:	211e      	movs	r1, #30
 80025fc:	203c      	movs	r0, #60	@ 0x3c
 80025fe:	f7fe fd0b 	bl	8001018 <lcdSetCursor>
		lcdSetTextFont(&Font20);
 8002602:	4822      	ldr	r0, [pc, #136]	@ (800268c <DrawProgressPage+0x390>)
 8002604:	f7fe fc78 	bl	8000ef8 <lcdSetTextFont>
		lcdPrintf(protocolType);
 8002608:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800260c:	4618      	mov	r0, r3
 800260e:	f7fe fbe7 	bl	8000de0 <lcdPrintf>
		lcdSetTextFont(&Font16);
 8002612:	4814      	ldr	r0, [pc, #80]	@ (8002664 <DrawProgressPage+0x368>)
 8002614:	f7fe fc70 	bl	8000ef8 <lcdSetTextFont>
		//duration
		char duration[20] = "";
 8002618:	2300      	movs	r3, #0
 800261a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800261c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
		sprintf(duration, "Duration: %c", rx_data[1]);
 800262a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800262e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800263e:	4914      	ldr	r1, [pc, #80]	@ (8002690 <DrawProgressPage+0x394>)
 8002640:	4618      	mov	r0, r3
 8002642:	f00c fe25 	bl	800f290 <siprintf>
		lcdSetCursor(60, 50);
 8002646:	2132      	movs	r1, #50	@ 0x32
 8002648:	203c      	movs	r0, #60	@ 0x3c
 800264a:	f7fe fce5 	bl	8001018 <lcdSetCursor>
		lcdPrintf(duration);
 800264e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fbc4 	bl	8000de0 <lcdPrintf>
 8002658:	e01c      	b.n	8002694 <DrawProgressPage+0x398>
 800265a:	bf00      	nop
 800265c:	200005e0 	.word	0x200005e0
 8002660:	080102ec 	.word	0x080102ec
 8002664:	20000008 	.word	0x20000008
 8002668:	080102f4 	.word	0x080102f4
 800266c:	08010300 	.word	0x08010300
 8002670:	0801030c 	.word	0x0801030c
 8002674:	0801031c 	.word	0x0801031c
 8002678:	08010328 	.word	0x08010328
 800267c:	08010334 	.word	0x08010334
 8002680:	20000292 	.word	0x20000292
 8002684:	08010290 	.word	0x08010290
 8002688:	08010348 	.word	0x08010348
 800268c:	20000010 	.word	0x20000010
 8002690:	08010350 	.word	0x08010350
	}

	//move
	if (rx_byte == 'M') {
 8002694:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002698:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b4d      	cmp	r3, #77	@ 0x4d
 80026a0:	f040 80ca 	bne.w	8002838 <DrawProgressPage+0x53c>
		char protocolType[20] = "";
 80026a4:	2300      	movs	r3, #0
 80026a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80026a8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
		sprintf(protocolType, "Magnetize");
 80026b6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80026ba:	4974      	ldr	r1, [pc, #464]	@ (800288c <DrawProgressPage+0x590>)
 80026bc:	4618      	mov	r0, r3
 80026be:	f00c fde7 	bl	800f290 <siprintf>
		lcdSetCursor(60, 30);
 80026c2:	211e      	movs	r1, #30
 80026c4:	203c      	movs	r0, #60	@ 0x3c
 80026c6:	f7fe fca7 	bl	8001018 <lcdSetCursor>
		lcdSetTextFont(&Font20);
 80026ca:	4871      	ldr	r0, [pc, #452]	@ (8002890 <DrawProgressPage+0x594>)
 80026cc:	f7fe fc14 	bl	8000ef8 <lcdSetTextFont>
		lcdPrintf(protocolType);
 80026d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fe fb83 	bl	8000de0 <lcdPrintf>
		lcdSetTextFont(&Font16);
 80026da:	486e      	ldr	r0, [pc, #440]	@ (8002894 <DrawProgressPage+0x598>)
 80026dc:	f7fe fc0c 	bl	8000ef8 <lcdSetTextFont>
		//init surface time
		char initTime[20] = "";
 80026e0:	2300      	movs	r3, #0
 80026e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80026e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
		uint32_t initTimeInt = ConvertCharsToInt(rx_data[1], rx_data[2],
 80026f2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80026f6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	7818      	ldrb	r0, [r3, #0]
 8002700:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002704:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3302      	adds	r3, #2
 800270c:	7819      	ldrb	r1, [r3, #0]
				rx_data[3]);
 800270e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002712:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	3303      	adds	r3, #3
		uint32_t initTimeInt = ConvertCharsToInt(rx_data[1], rx_data[2],
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	f000 f929 	bl	8002974 <ConvertCharsToInt>
 8002722:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
		sprintf(initTime, "Init Time: %d", initTimeInt);
 8002726:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800272a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800272e:	495a      	ldr	r1, [pc, #360]	@ (8002898 <DrawProgressPage+0x59c>)
 8002730:	4618      	mov	r0, r3
 8002732:	f00c fdad 	bl	800f290 <siprintf>
		lcdSetCursor(60, 50);
 8002736:	2132      	movs	r1, #50	@ 0x32
 8002738:	203c      	movs	r0, #60	@ 0x3c
 800273a:	f7fe fc6d 	bl	8001018 <lcdSetCursor>
		lcdPrintf(initTime);
 800273e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fb4c 	bl	8000de0 <lcdPrintf>
		//speed
		char speed[20] = "";
 8002748:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800274c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	3304      	adds	r3, #4
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	605a      	str	r2, [r3, #4]
 800275c:	609a      	str	r2, [r3, #8]
 800275e:	60da      	str	r2, [r3, #12]
		sprintf(speed, "Speed: %d", ConvertCharsToInt('0', '0', rx_data[4]));
 8002760:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002764:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	3304      	adds	r3, #4
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	2130      	movs	r1, #48	@ 0x30
 8002772:	2030      	movs	r0, #48	@ 0x30
 8002774:	f000 f8fe 	bl	8002974 <ConvertCharsToInt>
 8002778:	4602      	mov	r2, r0
 800277a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800277e:	4947      	ldr	r1, [pc, #284]	@ (800289c <DrawProgressPage+0x5a0>)
 8002780:	4618      	mov	r0, r3
 8002782:	f00c fd85 	bl	800f290 <siprintf>
		lcdSetCursor(60, 70);
 8002786:	2146      	movs	r1, #70	@ 0x46
 8002788:	203c      	movs	r0, #60	@ 0x3c
 800278a:	f7fe fc45 	bl	8001018 <lcdSetCursor>
		lcdPrintf(speed);
 800278e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fb24 	bl	8000de0 <lcdPrintf>
		//Stop at Sequences
		char stopNumber[20] = "";
 8002798:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800279c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	3304      	adds	r3, #4
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	605a      	str	r2, [r3, #4]
 80027ac:	609a      	str	r2, [r3, #8]
 80027ae:	60da      	str	r2, [r3, #12]
		sprintf(stopNumber, "Stop Number: %d",
				ConvertCharsToInt('0', '0', rx_data[5]));
 80027b0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80027b4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	3305      	adds	r3, #5
		sprintf(stopNumber, "Stop Number: %d",
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	2130      	movs	r1, #48	@ 0x30
 80027c2:	2030      	movs	r0, #48	@ 0x30
 80027c4:	f000 f8d6 	bl	8002974 <ConvertCharsToInt>
 80027c8:	4602      	mov	r2, r0
 80027ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027ce:	4934      	ldr	r1, [pc, #208]	@ (80028a0 <DrawProgressPage+0x5a4>)
 80027d0:	4618      	mov	r0, r3
 80027d2:	f00c fd5d 	bl	800f290 <siprintf>
		lcdSetCursor(60, 90);
 80027d6:	215a      	movs	r1, #90	@ 0x5a
 80027d8:	203c      	movs	r0, #60	@ 0x3c
 80027da:	f7fe fc1d 	bl	8001018 <lcdSetCursor>
		lcdPrintf(stopNumber);
 80027de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe fafc 	bl	8000de0 <lcdPrintf>
		//Sequence Pause Time
		char sequencePause[20] = "";
 80027e8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80027ec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	3304      	adds	r3, #4
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	605a      	str	r2, [r3, #4]
 80027fc:	609a      	str	r2, [r3, #8]
 80027fe:	60da      	str	r2, [r3, #12]
		sprintf(sequencePause, "Sequence Pause: %d",
				ConvertCharsToInt('0', '0', rx_data[6]));
 8002800:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002804:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	3306      	adds	r3, #6
		sprintf(sequencePause, "Sequence Pause: %d",
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	461a      	mov	r2, r3
 8002810:	2130      	movs	r1, #48	@ 0x30
 8002812:	2030      	movs	r0, #48	@ 0x30
 8002814:	f000 f8ae 	bl	8002974 <ConvertCharsToInt>
 8002818:	4602      	mov	r2, r0
 800281a:	f107 0314 	add.w	r3, r7, #20
 800281e:	4921      	ldr	r1, [pc, #132]	@ (80028a4 <DrawProgressPage+0x5a8>)
 8002820:	4618      	mov	r0, r3
 8002822:	f00c fd35 	bl	800f290 <siprintf>
		lcdSetCursor(60, 110);
 8002826:	216e      	movs	r1, #110	@ 0x6e
 8002828:	203c      	movs	r0, #60	@ 0x3c
 800282a:	f7fe fbf5 	bl	8001018 <lcdSetCursor>
		lcdPrintf(sequencePause);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe fad4 	bl	8000de0 <lcdPrintf>
	//time remaining in protocol
//	char protocolTimeRemaining[25] = "";
//	sprintf(protocolTimeRemaining, "Remaining Time: %d", protocolTimer);
//	lcdSetCursor(60, 130);
//	lcdPrintf(protocolTimeRemaining);
	lcdSetCursor(10, 170);
 8002838:	21aa      	movs	r1, #170	@ 0xaa
 800283a:	200a      	movs	r0, #10
 800283c:	f7fe fbec 	bl	8001018 <lcdSetCursor>
	DrawCountdownTime();
 8002840:	f000 f836 	bl	80028b0 <DrawCountdownTime>

	// Draw "Stop" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8002844:	4b18      	ldr	r3, [pc, #96]	@ (80028a8 <DrawProgressPage+0x5ac>)
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	b218      	sxth	r0, r3
 800284a:	4b17      	ldr	r3, [pc, #92]	@ (80028a8 <DrawProgressPage+0x5ac>)
 800284c:	885b      	ldrh	r3, [r3, #2]
 800284e:	b219      	sxth	r1, r3
 8002850:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <DrawProgressPage+0x5ac>)
 8002852:	889b      	ldrh	r3, [r3, #4]
 8002854:	b21a      	sxth	r2, r3
 8002856:	4b14      	ldr	r3, [pc, #80]	@ (80028a8 <DrawProgressPage+0x5ac>)
 8002858:	88db      	ldrh	r3, [r3, #6]
 800285a:	b21b      	sxth	r3, r3
 800285c:	2400      	movs	r4, #0
 800285e:	9400      	str	r4, [sp, #0]
 8002860:	f7fe f9ca 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 8002864:	4b10      	ldr	r3, [pc, #64]	@ (80028a8 <DrawProgressPage+0x5ac>)
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	330a      	adds	r3, #10
 800286a:	b29a      	uxth	r2, r3
 800286c:	4b0e      	ldr	r3, [pc, #56]	@ (80028a8 <DrawProgressPage+0x5ac>)
 800286e:	885b      	ldrh	r3, [r3, #2]
 8002870:	330a      	adds	r3, #10
 8002872:	b29b      	uxth	r3, r3
 8002874:	4619      	mov	r1, r3
 8002876:	4610      	mov	r0, r2
 8002878:	f7fe fbce 	bl	8001018 <lcdSetCursor>
	lcdPrintf("Stop");
 800287c:	480b      	ldr	r0, [pc, #44]	@ (80028ac <DrawProgressPage+0x5b0>)
 800287e:	f7fe faaf 	bl	8000de0 <lcdPrintf>
}
 8002882:	bf00      	nop
 8002884:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 8002888:	46bd      	mov	sp, r7
 800288a:	bd90      	pop	{r4, r7, pc}
 800288c:	08010360 	.word	0x08010360
 8002890:	20000010 	.word	0x20000010
 8002894:	20000008 	.word	0x20000008
 8002898:	0801036c 	.word	0x0801036c
 800289c:	08010300 	.word	0x08010300
 80028a0:	0801037c 	.word	0x0801037c
 80028a4:	0801038c 	.word	0x0801038c
 80028a8:	200001b8 	.word	0x200001b8
 80028ac:	080103a0 	.word	0x080103a0

080028b0 <DrawCountdownTime>:

//dont want to update the whole progress page, just the countdown timer
void DrawCountdownTime(void) {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
	//time remaining in protocol
	uint8_t minutes = protocolTimer / 60;
 80028b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002964 <DrawCountdownTime+0xb4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a2b      	ldr	r2, [pc, #172]	@ (8002968 <DrawCountdownTime+0xb8>)
 80028bc:	fb82 1203 	smull	r1, r2, r2, r3
 80028c0:	441a      	add	r2, r3
 80028c2:	1152      	asrs	r2, r2, #5
 80028c4:	17db      	asrs	r3, r3, #31
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	77fb      	strb	r3, [r7, #31]
	uint8_t seconds = protocolTimer % 60;
 80028ca:	4b26      	ldr	r3, [pc, #152]	@ (8002964 <DrawCountdownTime+0xb4>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	4b26      	ldr	r3, [pc, #152]	@ (8002968 <DrawCountdownTime+0xb8>)
 80028d0:	fb83 1302 	smull	r1, r3, r3, r2
 80028d4:	4413      	add	r3, r2
 80028d6:	1159      	asrs	r1, r3, #5
 80028d8:	17d3      	asrs	r3, r2, #31
 80028da:	1ac9      	subs	r1, r1, r3
 80028dc:	460b      	mov	r3, r1
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	1a5b      	subs	r3, r3, r1
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	1ad1      	subs	r1, r2, r3
 80028e6:	460b      	mov	r3, r1
 80028e8:	77bb      	strb	r3, [r7, #30]
	char protocolTimeRemaining[25] = "";
 80028ea:	2300      	movs	r3, #0
 80028ec:	607b      	str	r3, [r7, #4]
 80028ee:	f107 0308 	add.w	r3, r7, #8
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	605a      	str	r2, [r3, #4]
 80028f8:	609a      	str	r2, [r3, #8]
 80028fa:	60da      	str	r2, [r3, #12]
 80028fc:	611a      	str	r2, [r3, #16]
 80028fe:	751a      	strb	r2, [r3, #20]
	if (seconds < 10) {
 8002900:	7fbb      	ldrb	r3, [r7, #30]
 8002902:	2b09      	cmp	r3, #9
 8002904:	d80c      	bhi.n	8002920 <DrawCountdownTime+0x70>
		memset(protocolTimeRemaining, 0, 25); // Sets all elements of buffer to 0
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	2219      	movs	r2, #25
 800290a:	2100      	movs	r1, #0
 800290c:	4618      	mov	r0, r3
 800290e:	f00c fdd7 	bl	800f4c0 <memset>
		sprintf(protocolTimeRemaining, "Remaining Time: %d:0%d", minutes,
 8002912:	7ffa      	ldrb	r2, [r7, #31]
 8002914:	7fbb      	ldrb	r3, [r7, #30]
 8002916:	1d38      	adds	r0, r7, #4
 8002918:	4914      	ldr	r1, [pc, #80]	@ (800296c <DrawCountdownTime+0xbc>)
 800291a:	f00c fcb9 	bl	800f290 <siprintf>
 800291e:	e00b      	b.n	8002938 <DrawCountdownTime+0x88>
				seconds);
	} else {
		memset(protocolTimeRemaining, 0, 25); // Sets all elements of buffer to 0
 8002920:	1d3b      	adds	r3, r7, #4
 8002922:	2219      	movs	r2, #25
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f00c fdca 	bl	800f4c0 <memset>
		sprintf(protocolTimeRemaining, "Remaining Time: %d:%d", minutes,
 800292c:	7ffa      	ldrb	r2, [r7, #31]
 800292e:	7fbb      	ldrb	r3, [r7, #30]
 8002930:	1d38      	adds	r0, r7, #4
 8002932:	490f      	ldr	r1, [pc, #60]	@ (8002970 <DrawCountdownTime+0xc0>)
 8002934:	f00c fcac 	bl	800f290 <siprintf>
				seconds);
	}
	protocolTimeRemaining[strlen(protocolTimeRemaining)] = NULL_CHAR;
 8002938:	1d3b      	adds	r3, r7, #4
 800293a:	4618      	mov	r0, r3
 800293c:	f7fd fc58 	bl	80001f0 <strlen>
 8002940:	4603      	mov	r3, r0
 8002942:	3320      	adds	r3, #32
 8002944:	443b      	add	r3, r7
 8002946:	2200      	movs	r2, #0
 8002948:	f803 2c1c 	strb.w	r2, [r3, #-28]
	lcdSetCursor(10, 170);
 800294c:	21aa      	movs	r1, #170	@ 0xaa
 800294e:	200a      	movs	r0, #10
 8002950:	f7fe fb62 	bl	8001018 <lcdSetCursor>
	lcdPrintf(protocolTimeRemaining);
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe fa42 	bl	8000de0 <lcdPrintf>
}
 800295c:	bf00      	nop
 800295e:	3720      	adds	r7, #32
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	200005c4 	.word	0x200005c4
 8002968:	88888889 	.word	0x88888889
 800296c:	080103a8 	.word	0x080103a8
 8002970:	080103c0 	.word	0x080103c0

08002974 <ConvertCharsToInt>:
 * @param: x: 100's place of the digit
 * @param: y: 10's place of the digit
 * @param: z: 1's place of the digit
 * @retval: converted integer
 */
uint32_t ConvertCharsToInt(char x, char y, char z) {
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	71fb      	strb	r3, [r7, #7]
 800297e:	460b      	mov	r3, r1
 8002980:	71bb      	strb	r3, [r7, #6]
 8002982:	4613      	mov	r3, r2
 8002984:	717b      	strb	r3, [r7, #5]
	uint32_t returnVal = ((x - '0') * 100) + ((y - '0') * 10) + (z - '0');
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	3b30      	subs	r3, #48	@ 0x30
 800298a:	2264      	movs	r2, #100	@ 0x64
 800298c:	fb02 f103 	mul.w	r1, r2, r3
 8002990:	79bb      	ldrb	r3, [r7, #6]
 8002992:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	18ca      	adds	r2, r1, r3
 80029a0:	797b      	ldrb	r3, [r7, #5]
 80029a2:	3b30      	subs	r3, #48	@ 0x30
 80029a4:	4413      	add	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
	return returnVal;
 80029a8:	68fb      	ldr	r3, [r7, #12]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <DrawProtocolInfoPage>:
 * @param: protocolTitle: display protocol being run
 * @param: rx_byte: current motor movement type
 * @param: rx_data: current motor movement info
 * @retval: none
 */
void DrawProtocolInfoPage(uint32_t page_num, uint32_t offset) {
 80029b8:	b590      	push	{r4, r7, lr}
 80029ba:	b08b      	sub	sp, #44	@ 0x2c
 80029bc:	af02      	add	r7, sp, #8
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
	lcdFillRGB(COLOR_WHITE);
 80029c2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80029c6:	f7fe f833 	bl	8000a30 <lcdFillRGB>

	//protocol title
	lcdSetCursor(100, 10);
 80029ca:	210a      	movs	r1, #10
 80029cc:	2064      	movs	r0, #100	@ 0x64
 80029ce:	f7fe fb23 	bl	8001018 <lcdSetCursor>
	char protocolTitle[20] = "";
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	f107 030c 	add.w	r3, r7, #12
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	605a      	str	r2, [r3, #4]
 80029e0:	609a      	str	r2, [r3, #8]
 80029e2:	60da      	str	r2, [r3, #12]
	uint32_t current_flash_address = get_sector_address(
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f001 fa6f 	bl	8003ec8 <get_sector_address>
 80029ea:	4602      	mov	r2, r0
			page_num) + offset * PROTOCOL_SIZE;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	f241 7170 	movw	r1, #6000	@ 0x1770
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
	uint32_t current_flash_address = get_sector_address(
 80029f6:	4413      	add	r3, r2
 80029f8:	61fb      	str	r3, [r7, #28]
	read_from_flash(protocolTitle, current_flash_address);
 80029fa:	f107 0308 	add.w	r3, r7, #8
 80029fe:	69f9      	ldr	r1, [r7, #28]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fd88 	bl	8003516 <read_from_flash>
	lcdPrintf(protocolTitle);
 8002a06:	f107 0308 	add.w	r3, r7, #8
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe f9e8 	bl	8000de0 <lcdPrintf>

	//get the next protocol line
	current_flash_address += MAX_LINE_LENGTH;
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	3320      	adds	r3, #32
 8002a14:	61fb      	str	r3, [r7, #28]
//		lcdSetCursor(60, 110);
//		lcdPrintf(sequencePause);
//	}

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8002a16:	4b11      	ldr	r3, [pc, #68]	@ (8002a5c <DrawProtocolInfoPage+0xa4>)
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	b218      	sxth	r0, r3
 8002a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a5c <DrawProtocolInfoPage+0xa4>)
 8002a1e:	885b      	ldrh	r3, [r3, #2]
 8002a20:	b219      	sxth	r1, r3
 8002a22:	4b0e      	ldr	r3, [pc, #56]	@ (8002a5c <DrawProtocolInfoPage+0xa4>)
 8002a24:	889b      	ldrh	r3, [r3, #4]
 8002a26:	b21a      	sxth	r2, r3
 8002a28:	4b0c      	ldr	r3, [pc, #48]	@ (8002a5c <DrawProtocolInfoPage+0xa4>)
 8002a2a:	88db      	ldrh	r3, [r3, #6]
 8002a2c:	b21b      	sxth	r3, r3
 8002a2e:	2400      	movs	r4, #0
 8002a30:	9400      	str	r4, [sp, #0]
 8002a32:	f7fe f8e1 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 8002a36:	4b09      	ldr	r3, [pc, #36]	@ (8002a5c <DrawProtocolInfoPage+0xa4>)
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	330a      	adds	r3, #10
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	4b07      	ldr	r3, [pc, #28]	@ (8002a5c <DrawProtocolInfoPage+0xa4>)
 8002a40:	885b      	ldrh	r3, [r3, #2]
 8002a42:	330a      	adds	r3, #10
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	4619      	mov	r1, r3
 8002a48:	4610      	mov	r0, r2
 8002a4a:	f7fe fae5 	bl	8001018 <lcdSetCursor>
	lcdPrintf(backButton.label);
 8002a4e:	4804      	ldr	r0, [pc, #16]	@ (8002a60 <DrawProtocolInfoPage+0xa8>)
 8002a50:	f7fe f9c6 	bl	8000de0 <lcdPrintf>
}
 8002a54:	bf00      	nop
 8002a56:	3724      	adds	r7, #36	@ 0x24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd90      	pop	{r4, r7, pc}
 8002a5c:	200001b8 	.word	0x200001b8
 8002a60:	200001c0 	.word	0x200001c0

08002a64 <DrawStopPage>:

void DrawStopPage(void) {
 8002a64:	b590      	push	{r4, r7, lr}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af02      	add	r7, sp, #8
	lcdFillRGB(COLOR_WHITE);
 8002a6a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002a6e:	f7fd ffdf 	bl	8000a30 <lcdFillRGB>

	//display confirmation text
	lcdSetCursor(100, 10);
 8002a72:	210a      	movs	r1, #10
 8002a74:	2064      	movs	r0, #100	@ 0x64
 8002a76:	f7fe facf 	bl	8001018 <lcdSetCursor>
	lcdSetTextFont(&Font20);
 8002a7a:	4825      	ldr	r0, [pc, #148]	@ (8002b10 <DrawStopPage+0xac>)
 8002a7c:	f7fe fa3c 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf("Stop?");
 8002a80:	4824      	ldr	r0, [pc, #144]	@ (8002b14 <DrawStopPage+0xb0>)
 8002a82:	f7fe f9ad 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 8002a86:	4824      	ldr	r0, [pc, #144]	@ (8002b18 <DrawStopPage+0xb4>)
 8002a88:	f7fe fa36 	bl	8000ef8 <lcdSetTextFont>

	//Draw "Yes" button
	lcdDrawRect(yesButton.x, yesButton.y, yesButton.w, yesButton.h,
 8002a8c:	4b23      	ldr	r3, [pc, #140]	@ (8002b1c <DrawStopPage+0xb8>)
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	b218      	sxth	r0, r3
 8002a92:	4b22      	ldr	r3, [pc, #136]	@ (8002b1c <DrawStopPage+0xb8>)
 8002a94:	885b      	ldrh	r3, [r3, #2]
 8002a96:	b219      	sxth	r1, r3
 8002a98:	4b20      	ldr	r3, [pc, #128]	@ (8002b1c <DrawStopPage+0xb8>)
 8002a9a:	889b      	ldrh	r3, [r3, #4]
 8002a9c:	b21a      	sxth	r2, r3
 8002a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8002b1c <DrawStopPage+0xb8>)
 8002aa0:	88db      	ldrh	r3, [r3, #6]
 8002aa2:	b21b      	sxth	r3, r3
 8002aa4:	2400      	movs	r4, #0
 8002aa6:	9400      	str	r4, [sp, #0]
 8002aa8:	f7fe f8a6 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(yesButton.x + 10, yesButton.y + 10);
 8002aac:	4b1b      	ldr	r3, [pc, #108]	@ (8002b1c <DrawStopPage+0xb8>)
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	330a      	adds	r3, #10
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	4b19      	ldr	r3, [pc, #100]	@ (8002b1c <DrawStopPage+0xb8>)
 8002ab6:	885b      	ldrh	r3, [r3, #2]
 8002ab8:	330a      	adds	r3, #10
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	4619      	mov	r1, r3
 8002abe:	4610      	mov	r0, r2
 8002ac0:	f7fe faaa 	bl	8001018 <lcdSetCursor>
	lcdPrintf(yesButton.label);
 8002ac4:	4816      	ldr	r0, [pc, #88]	@ (8002b20 <DrawStopPage+0xbc>)
 8002ac6:	f7fe f98b 	bl	8000de0 <lcdPrintf>

	//Draw "No" button
	lcdDrawRect(noButton.x, noButton.y, noButton.w, noButton.h, COLOR_BLACK);
 8002aca:	4b16      	ldr	r3, [pc, #88]	@ (8002b24 <DrawStopPage+0xc0>)
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	b218      	sxth	r0, r3
 8002ad0:	4b14      	ldr	r3, [pc, #80]	@ (8002b24 <DrawStopPage+0xc0>)
 8002ad2:	885b      	ldrh	r3, [r3, #2]
 8002ad4:	b219      	sxth	r1, r3
 8002ad6:	4b13      	ldr	r3, [pc, #76]	@ (8002b24 <DrawStopPage+0xc0>)
 8002ad8:	889b      	ldrh	r3, [r3, #4]
 8002ada:	b21a      	sxth	r2, r3
 8002adc:	4b11      	ldr	r3, [pc, #68]	@ (8002b24 <DrawStopPage+0xc0>)
 8002ade:	88db      	ldrh	r3, [r3, #6]
 8002ae0:	b21b      	sxth	r3, r3
 8002ae2:	2400      	movs	r4, #0
 8002ae4:	9400      	str	r4, [sp, #0]
 8002ae6:	f7fe f887 	bl	8000bf8 <lcdDrawRect>
	lcdSetCursor(noButton.x + 10, noButton.y + 10);
 8002aea:	4b0e      	ldr	r3, [pc, #56]	@ (8002b24 <DrawStopPage+0xc0>)
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	330a      	adds	r3, #10
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	4b0c      	ldr	r3, [pc, #48]	@ (8002b24 <DrawStopPage+0xc0>)
 8002af4:	885b      	ldrh	r3, [r3, #2]
 8002af6:	330a      	adds	r3, #10
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	4619      	mov	r1, r3
 8002afc:	4610      	mov	r0, r2
 8002afe:	f7fe fa8b 	bl	8001018 <lcdSetCursor>
	lcdPrintf(noButton.label);
 8002b02:	4809      	ldr	r0, [pc, #36]	@ (8002b28 <DrawStopPage+0xc4>)
 8002b04:	f7fe f96c 	bl	8000de0 <lcdPrintf>
}
 8002b08:	bf00      	nop
 8002b0a:	3704      	adds	r7, #4
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd90      	pop	{r4, r7, pc}
 8002b10:	20000010 	.word	0x20000010
 8002b14:	080103d8 	.word	0x080103d8
 8002b18:	20000008 	.word	0x20000008
 8002b1c:	20000210 	.word	0x20000210
 8002b20:	20000218 	.word	0x20000218
 8002b24:	2000023c 	.word	0x2000023c
 8002b28:	20000244 	.word	0x20000244

08002b2c <DrawPageFinish>:

void DrawPageFinish(void) {
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af02      	add	r7, sp, #8
	lcdFillRGB(COLOR_WHITE);
 8002b32:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002b36:	f7fd ff7b 	bl	8000a30 <lcdFillRGB>

	//Draw "Success!" box
	lcdSetCursor(selectButton.x + 10, selectButton.y + 10);
 8002b3a:	4b19      	ldr	r3, [pc, #100]	@ (8002ba0 <DrawPageFinish+0x74>)
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	330a      	adds	r3, #10
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	4b17      	ldr	r3, [pc, #92]	@ (8002ba0 <DrawPageFinish+0x74>)
 8002b44:	885b      	ldrh	r3, [r3, #2]
 8002b46:	330a      	adds	r3, #10
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	f7fe fa63 	bl	8001018 <lcdSetCursor>
	lcdPrintf("Success!");
 8002b52:	4814      	ldr	r0, [pc, #80]	@ (8002ba4 <DrawPageFinish+0x78>)
 8002b54:	f7fe f944 	bl	8000de0 <lcdPrintf>

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8002b58:	4b13      	ldr	r3, [pc, #76]	@ (8002ba8 <DrawPageFinish+0x7c>)
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	b218      	sxth	r0, r3
 8002b5e:	4b12      	ldr	r3, [pc, #72]	@ (8002ba8 <DrawPageFinish+0x7c>)
 8002b60:	885b      	ldrh	r3, [r3, #2]
 8002b62:	b219      	sxth	r1, r3
 8002b64:	4b10      	ldr	r3, [pc, #64]	@ (8002ba8 <DrawPageFinish+0x7c>)
 8002b66:	889b      	ldrh	r3, [r3, #4]
 8002b68:	b21a      	sxth	r2, r3
 8002b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba8 <DrawPageFinish+0x7c>)
 8002b6c:	88db      	ldrh	r3, [r3, #6]
 8002b6e:	b21b      	sxth	r3, r3
 8002b70:	2400      	movs	r4, #0
 8002b72:	9400      	str	r4, [sp, #0]
 8002b74:	f7fe f840 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 8002b78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba8 <DrawPageFinish+0x7c>)
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	330a      	adds	r3, #10
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	4b09      	ldr	r3, [pc, #36]	@ (8002ba8 <DrawPageFinish+0x7c>)
 8002b82:	885b      	ldrh	r3, [r3, #2]
 8002b84:	330a      	adds	r3, #10
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	f7fe fa44 	bl	8001018 <lcdSetCursor>
	lcdPrintf("Done");
 8002b90:	4806      	ldr	r0, [pc, #24]	@ (8002bac <DrawPageFinish+0x80>)
 8002b92:	f7fe f925 	bl	8000de0 <lcdPrintf>
}
 8002b96:	bf00      	nop
 8002b98:	3704      	adds	r7, #4
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd90      	pop	{r4, r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000160 	.word	0x20000160
 8002ba4:	080103e0 	.word	0x080103e0
 8002ba8:	200001b8 	.word	0x200001b8
 8002bac:	080103ec 	.word	0x080103ec

08002bb0 <handleTouch>:

uint8_t handleTouch() {
 8002bb0:	b590      	push	{r4, r7, lr}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
	static uint8_t protocol_num;
	static uint8_t protocol_offset = 0;
	uint16_t x = 0, y = 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	80fb      	strh	r3, [r7, #6]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	80bb      	strh	r3, [r7, #4]
	if (!XPT2046_TouchGetCoordinates(&x, &y)) {
 8002bbe:	1d3a      	adds	r2, r7, #4
 8002bc0:	1dbb      	adds	r3, r7, #6
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fd fd0b 	bl	80005e0 <XPT2046_TouchGetCoordinates>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f083 0301 	eor.w	r3, r3, #1
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <handleTouch+0x2c>
		//printf("failed\n");
		return 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f000 bc43 	b.w	8003462 <handleTouch+0x8b2>
	}
	//map the x coordinate to be left is 0. also slight offset
	x = (TS_RIGHT - x) - 0;
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	80fb      	strh	r3, [r7, #6]
//	printf("touched\n");
//	printf("%d, %d\n", x, y);

	switch (currentPage) {
 8002be6:	4b90      	ldr	r3, [pc, #576]	@ (8002e28 <handleTouch+0x278>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b07      	cmp	r3, #7
 8002bec:	f200 8435 	bhi.w	800345a <handleTouch+0x8aa>
 8002bf0:	a201      	add	r2, pc, #4	@ (adr r2, 8002bf8 <handleTouch+0x48>)
 8002bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf6:	bf00      	nop
 8002bf8:	08002c19 	.word	0x08002c19
 8002bfc:	08002e4d 	.word	0x08002e4d
 8002c00:	080030a9 	.word	0x080030a9
 8002c04:	08003169 	.word	0x08003169
 8002c08:	080033f3 	.word	0x080033f3
 8002c0c:	0800322b 	.word	0x0800322b
 8002c10:	08003399 	.word	0x08003399
 8002c14:	080032e5 	.word	0x080032e5
	case PAGE_MAIN:
		//next button
		if ((x >= nextButton.x) && (x <= nextButton.x + nextButton.w)
 8002c18:	4b84      	ldr	r3, [pc, #528]	@ (8002e2c <handleTouch+0x27c>)
 8002c1a:	881a      	ldrh	r2, [r3, #0]
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d828      	bhi.n	8002c74 <handleTouch+0xc4>
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	461a      	mov	r2, r3
 8002c26:	4b81      	ldr	r3, [pc, #516]	@ (8002e2c <handleTouch+0x27c>)
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4b7f      	ldr	r3, [pc, #508]	@ (8002e2c <handleTouch+0x27c>)
 8002c2e:	889b      	ldrh	r3, [r3, #4]
 8002c30:	440b      	add	r3, r1
 8002c32:	429a      	cmp	r2, r3
 8002c34:	dc1e      	bgt.n	8002c74 <handleTouch+0xc4>
				&& (y >= nextButton.y)
 8002c36:	4b7d      	ldr	r3, [pc, #500]	@ (8002e2c <handleTouch+0x27c>)
 8002c38:	885a      	ldrh	r2, [r3, #2]
 8002c3a:	88bb      	ldrh	r3, [r7, #4]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d819      	bhi.n	8002c74 <handleTouch+0xc4>
				&& (y <= nextButton.y + nextButton.h + NEXT_BUTTON_OFFSET)
 8002c40:	88bb      	ldrh	r3, [r7, #4]
 8002c42:	461a      	mov	r2, r3
 8002c44:	4b79      	ldr	r3, [pc, #484]	@ (8002e2c <handleTouch+0x27c>)
 8002c46:	885b      	ldrh	r3, [r3, #2]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4b78      	ldr	r3, [pc, #480]	@ (8002e2c <handleTouch+0x27c>)
 8002c4c:	88db      	ldrh	r3, [r3, #6]
 8002c4e:	440b      	add	r3, r1
 8002c50:	333c      	adds	r3, #60	@ 0x3c
 8002c52:	429a      	cmp	r2, r3
 8002c54:	dc0e      	bgt.n	8002c74 <handleTouch+0xc4>
				&& (page_num != 10)) {
 8002c56:	4b76      	ldr	r3, [pc, #472]	@ (8002e30 <handleTouch+0x280>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b0a      	cmp	r3, #10
 8002c5c:	d00a      	beq.n	8002c74 <handleTouch+0xc4>
			//printf("touched\n");
			page_num++;
 8002c5e:	4b74      	ldr	r3, [pc, #464]	@ (8002e30 <handleTouch+0x280>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	3301      	adds	r3, #1
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	4b72      	ldr	r3, [pc, #456]	@ (8002e30 <handleTouch+0x280>)
 8002c68:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8002c6a:	4b71      	ldr	r3, [pc, #452]	@ (8002e30 <handleTouch+0x280>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe ff38 	bl	8001ae4 <DrawMainPage>
		}
		//back button
		if ((x >= backButton.x) && (x <= backButton.x + backButton.w)
 8002c74:	4b6f      	ldr	r3, [pc, #444]	@ (8002e34 <handleTouch+0x284>)
 8002c76:	881a      	ldrh	r2, [r3, #0]
 8002c78:	88fb      	ldrh	r3, [r7, #6]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d828      	bhi.n	8002cd0 <handleTouch+0x120>
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	461a      	mov	r2, r3
 8002c82:	4b6c      	ldr	r3, [pc, #432]	@ (8002e34 <handleTouch+0x284>)
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	4619      	mov	r1, r3
 8002c88:	4b6a      	ldr	r3, [pc, #424]	@ (8002e34 <handleTouch+0x284>)
 8002c8a:	889b      	ldrh	r3, [r3, #4]
 8002c8c:	440b      	add	r3, r1
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	dc1e      	bgt.n	8002cd0 <handleTouch+0x120>
				&& (y >= backButton.y)
 8002c92:	4b68      	ldr	r3, [pc, #416]	@ (8002e34 <handleTouch+0x284>)
 8002c94:	885a      	ldrh	r2, [r3, #2]
 8002c96:	88bb      	ldrh	r3, [r7, #4]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d819      	bhi.n	8002cd0 <handleTouch+0x120>
				&& (y <= backButton.y + backButton.h + BACK_BUTTON_OFFSET)
 8002c9c:	88bb      	ldrh	r3, [r7, #4]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4b64      	ldr	r3, [pc, #400]	@ (8002e34 <handleTouch+0x284>)
 8002ca2:	885b      	ldrh	r3, [r3, #2]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4b63      	ldr	r3, [pc, #396]	@ (8002e34 <handleTouch+0x284>)
 8002ca8:	88db      	ldrh	r3, [r3, #6]
 8002caa:	440b      	add	r3, r1
 8002cac:	333c      	adds	r3, #60	@ 0x3c
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	dc0e      	bgt.n	8002cd0 <handleTouch+0x120>
				&& (page_num != 1)) {
 8002cb2:	4b5f      	ldr	r3, [pc, #380]	@ (8002e30 <handleTouch+0x280>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d00a      	beq.n	8002cd0 <handleTouch+0x120>
			//printf("touched\n");
			page_num--;
 8002cba:	4b5d      	ldr	r3, [pc, #372]	@ (8002e30 <handleTouch+0x280>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4b5b      	ldr	r3, [pc, #364]	@ (8002e30 <handleTouch+0x280>)
 8002cc4:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8002cc6:	4b5a      	ldr	r3, [pc, #360]	@ (8002e30 <handleTouch+0x280>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe ff0a 	bl	8001ae4 <DrawMainPage>
		}
		//queue button
		if (x >= queueButton.x && x <= (queueButton.x + queueButton.w)
 8002cd0:	4b59      	ldr	r3, [pc, #356]	@ (8002e38 <handleTouch+0x288>)
 8002cd2:	881a      	ldrh	r2, [r3, #0]
 8002cd4:	88fb      	ldrh	r3, [r7, #6]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d821      	bhi.n	8002d1e <handleTouch+0x16e>
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4b56      	ldr	r3, [pc, #344]	@ (8002e38 <handleTouch+0x288>)
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4b54      	ldr	r3, [pc, #336]	@ (8002e38 <handleTouch+0x288>)
 8002ce6:	889b      	ldrh	r3, [r3, #4]
 8002ce8:	440b      	add	r3, r1
 8002cea:	429a      	cmp	r2, r3
 8002cec:	dc17      	bgt.n	8002d1e <handleTouch+0x16e>
				&& y >= queueButton.y
 8002cee:	4b52      	ldr	r3, [pc, #328]	@ (8002e38 <handleTouch+0x288>)
 8002cf0:	885a      	ldrh	r2, [r3, #2]
 8002cf2:	88bb      	ldrh	r3, [r7, #4]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d812      	bhi.n	8002d1e <handleTouch+0x16e>
				&& y <= (queueButton.y + queueButton.h + QUEUE_BUTTON_OFFSET)) {
 8002cf8:	88bb      	ldrh	r3, [r7, #4]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4b4e      	ldr	r3, [pc, #312]	@ (8002e38 <handleTouch+0x288>)
 8002cfe:	885b      	ldrh	r3, [r3, #2]
 8002d00:	4619      	mov	r1, r3
 8002d02:	4b4d      	ldr	r3, [pc, #308]	@ (8002e38 <handleTouch+0x288>)
 8002d04:	88db      	ldrh	r3, [r3, #6]
 8002d06:	440b      	add	r3, r1
 8002d08:	3328      	adds	r3, #40	@ 0x28
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	dc07      	bgt.n	8002d1e <handleTouch+0x16e>
			DrawQueuePage(queueSize);
 8002d0e:	4b4b      	ldr	r3, [pc, #300]	@ (8002e3c <handleTouch+0x28c>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fa08 	bl	8002128 <DrawQueuePage>
			currentPage = PAGE_QUEUE;
 8002d18:	4b43      	ldr	r3, [pc, #268]	@ (8002e28 <handleTouch+0x278>)
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	701a      	strb	r2, [r3, #0]
		}
		//three protocol buttons
		for (int i = 0; i < NUM_BUTTONS; i++) {
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	e07c      	b.n	8002e1e <handleTouch+0x26e>
			if ((x >= buttons[i].x) && (x <= buttons[i].x + buttons[i].w)
 8002d24:	4a46      	ldr	r2, [pc, #280]	@ (8002e40 <handleTouch+0x290>)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	212a      	movs	r1, #42	@ 0x2a
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	881a      	ldrh	r2, [r3, #0]
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d86f      	bhi.n	8002e18 <handleTouch+0x268>
 8002d38:	88fb      	ldrh	r3, [r7, #6]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	4a40      	ldr	r2, [pc, #256]	@ (8002e40 <handleTouch+0x290>)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	212a      	movs	r1, #42	@ 0x2a
 8002d42:	fb01 f303 	mul.w	r3, r1, r3
 8002d46:	4413      	add	r3, r2
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	461c      	mov	r4, r3
 8002d4c:	4a3c      	ldr	r2, [pc, #240]	@ (8002e40 <handleTouch+0x290>)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	212a      	movs	r1, #42	@ 0x2a
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	3304      	adds	r3, #4
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	4423      	add	r3, r4
 8002d5e:	4298      	cmp	r0, r3
 8002d60:	dc5a      	bgt.n	8002e18 <handleTouch+0x268>
					&& (y >= buttons[i].y - PROTOCOL_BUTTON_OFFSET)
 8002d62:	88bb      	ldrh	r3, [r7, #4]
 8002d64:	4618      	mov	r0, r3
 8002d66:	4a36      	ldr	r2, [pc, #216]	@ (8002e40 <handleTouch+0x290>)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	212a      	movs	r1, #42	@ 0x2a
 8002d6c:	fb01 f303 	mul.w	r3, r1, r3
 8002d70:	4413      	add	r3, r2
 8002d72:	3302      	adds	r3, #2
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	3b14      	subs	r3, #20
 8002d78:	4298      	cmp	r0, r3
 8002d7a:	db4d      	blt.n	8002e18 <handleTouch+0x268>
					&& (y
							<= buttons[i].y + buttons[i].h
 8002d7c:	88bb      	ldrh	r3, [r7, #4]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	4a2f      	ldr	r2, [pc, #188]	@ (8002e40 <handleTouch+0x290>)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	212a      	movs	r1, #42	@ 0x2a
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	461c      	mov	r4, r3
 8002d92:	4a2b      	ldr	r2, [pc, #172]	@ (8002e40 <handleTouch+0x290>)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	212a      	movs	r1, #42	@ 0x2a
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3306      	adds	r3, #6
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	4423      	add	r3, r4
									+ PROTOCOL_BUTTON_OFFSET)) {
 8002da4:	3314      	adds	r3, #20
					&& (y
 8002da6:	4298      	cmp	r0, r3
 8002da8:	dc36      	bgt.n	8002e18 <handleTouch+0x268>
				//check which button has been pressed
				if (i == 0) {
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d106      	bne.n	8002dbe <handleTouch+0x20e>
					protocol_num = 1;
 8002db0:	4b24      	ldr	r3, [pc, #144]	@ (8002e44 <handleTouch+0x294>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	701a      	strb	r2, [r3, #0]
					protocol_offset = 0;
 8002db6:	4b24      	ldr	r3, [pc, #144]	@ (8002e48 <handleTouch+0x298>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
 8002dbc:	e012      	b.n	8002de4 <handleTouch+0x234>
				} else if (i == 1) {
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d106      	bne.n	8002dd2 <handleTouch+0x222>
					protocol_num = 1;
 8002dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e44 <handleTouch+0x294>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]
					protocol_offset = 1;
 8002dca:	4b1f      	ldr	r3, [pc, #124]	@ (8002e48 <handleTouch+0x298>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]
 8002dd0:	e008      	b.n	8002de4 <handleTouch+0x234>
				} else if (i == 2) {
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d105      	bne.n	8002de4 <handleTouch+0x234>
					protocol_num = 1;
 8002dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e44 <handleTouch+0x294>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	701a      	strb	r2, [r3, #0]
					protocol_offset = 2;
 8002dde:	4b1a      	ldr	r3, [pc, #104]	@ (8002e48 <handleTouch+0x298>)
 8002de0:	2202      	movs	r2, #2
 8002de2:	701a      	strb	r2, [r3, #0]
				}
				//dont draw next page if the button says "Empty"
				if (buttons[i].status == NOT_EMPTY) {
 8002de4:	4a16      	ldr	r2, [pc, #88]	@ (8002e40 <handleTouch+0x290>)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	212a      	movs	r1, #42	@ 0x2a
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	3328      	adds	r3, #40	@ 0x28
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d10c      	bne.n	8002e12 <handleTouch+0x262>
					currentPage = PAGE_SELECT;
 8002df8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <handleTouch+0x278>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	701a      	strb	r2, [r3, #0]
					DrawInfoPage(buttons[i].label);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	222a      	movs	r2, #42	@ 0x2a
 8002e02:	fb02 f303 	mul.w	r3, r2, r3
 8002e06:	3308      	adds	r3, #8
 8002e08:	4a0d      	ldr	r2, [pc, #52]	@ (8002e40 <handleTouch+0x290>)
 8002e0a:	4413      	add	r3, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff f847 	bl	8001ea0 <DrawInfoPage>
				}
				HAL_Delay(100); //delay between switch to select page
 8002e12:	2064      	movs	r0, #100	@ 0x64
 8002e14:	f001 fc5a 	bl	80046cc <HAL_Delay>
		for (int i = 0; i < NUM_BUTTONS; i++) {
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	f77f af7f 	ble.w	8002d24 <handleTouch+0x174>
			}
		}
		break;
 8002e26:	e318      	b.n	800345a <handleTouch+0x8aa>
 8002e28:	200005c0 	.word	0x200005c0
 8002e2c:	200001e4 	.word	0x200001e4
 8002e30:	20000293 	.word	0x20000293
 8002e34:	200001b8 	.word	0x200001b8
 8002e38:	200000b0 	.word	0x200000b0
 8002e3c:	20010004 	.word	0x20010004
 8002e40:	20000030 	.word	0x20000030
 8002e44:	2001190c 	.word	0x2001190c
 8002e48:	2001190d 	.word	0x2001190d

	case PAGE_SELECT:
		//back button
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 8002e4c:	4b86      	ldr	r3, [pc, #536]	@ (8003068 <handleTouch+0x4b8>)
 8002e4e:	881a      	ldrh	r2, [r3, #0]
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d820      	bhi.n	8002e98 <handleTouch+0x2e8>
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4b83      	ldr	r3, [pc, #524]	@ (8003068 <handleTouch+0x4b8>)
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4b81      	ldr	r3, [pc, #516]	@ (8003068 <handleTouch+0x4b8>)
 8002e62:	889b      	ldrh	r3, [r3, #4]
 8002e64:	440b      	add	r3, r1
 8002e66:	429a      	cmp	r2, r3
 8002e68:	dc16      	bgt.n	8002e98 <handleTouch+0x2e8>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 8002e6a:	4b7f      	ldr	r3, [pc, #508]	@ (8003068 <handleTouch+0x4b8>)
 8002e6c:	885a      	ldrh	r2, [r3, #2]
 8002e6e:	88bb      	ldrh	r3, [r7, #4]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d811      	bhi.n	8002e98 <handleTouch+0x2e8>
 8002e74:	88bb      	ldrh	r3, [r7, #4]
 8002e76:	461a      	mov	r2, r3
 8002e78:	4b7b      	ldr	r3, [pc, #492]	@ (8003068 <handleTouch+0x4b8>)
 8002e7a:	885b      	ldrh	r3, [r3, #2]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4b7a      	ldr	r3, [pc, #488]	@ (8003068 <handleTouch+0x4b8>)
 8002e80:	88db      	ldrh	r3, [r3, #6]
 8002e82:	440b      	add	r3, r1
 8002e84:	429a      	cmp	r2, r3
 8002e86:	dc07      	bgt.n	8002e98 <handleTouch+0x2e8>
			currentPage = PAGE_MAIN;
 8002e88:	4b78      	ldr	r3, [pc, #480]	@ (800306c <handleTouch+0x4bc>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8002e8e:	4b78      	ldr	r3, [pc, #480]	@ (8003070 <handleTouch+0x4c0>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe fe26 	bl	8001ae4 <DrawMainPage>
		}
		//queueSelect button
		if (x >= queueSelectButton.x
 8002e98:	4b76      	ldr	r3, [pc, #472]	@ (8003074 <handleTouch+0x4c4>)
 8002e9a:	881a      	ldrh	r2, [r3, #0]
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d833      	bhi.n	8002f0a <handleTouch+0x35a>
				&& x <= (queueSelectButton.x + queueSelectButton.w)
 8002ea2:	88fb      	ldrh	r3, [r7, #6]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b73      	ldr	r3, [pc, #460]	@ (8003074 <handleTouch+0x4c4>)
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4b71      	ldr	r3, [pc, #452]	@ (8003074 <handleTouch+0x4c4>)
 8002eae:	889b      	ldrh	r3, [r3, #4]
 8002eb0:	440b      	add	r3, r1
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	dc29      	bgt.n	8002f0a <handleTouch+0x35a>
				&& y >= queueSelectButton.y
 8002eb6:	4b6f      	ldr	r3, [pc, #444]	@ (8003074 <handleTouch+0x4c4>)
 8002eb8:	885a      	ldrh	r2, [r3, #2]
 8002eba:	88bb      	ldrh	r3, [r7, #4]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d824      	bhi.n	8002f0a <handleTouch+0x35a>
				&& y <= (queueSelectButton.y + queueSelectButton.h)) {
 8002ec0:	88bb      	ldrh	r3, [r7, #4]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	4b6b      	ldr	r3, [pc, #428]	@ (8003074 <handleTouch+0x4c4>)
 8002ec6:	885b      	ldrh	r3, [r3, #2]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4b6a      	ldr	r3, [pc, #424]	@ (8003074 <handleTouch+0x4c4>)
 8002ecc:	88db      	ldrh	r3, [r3, #6]
 8002ece:	440b      	add	r3, r1
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	dc1a      	bgt.n	8002f0a <handleTouch+0x35a>
			//store the protocol in queueBuffer
			if (queueSize < MAX_QUEUE_SIZE) {
 8002ed4:	4b68      	ldr	r3, [pc, #416]	@ (8003078 <handleTouch+0x4c8>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b09      	cmp	r3, #9
 8002eda:	d816      	bhi.n	8002f0a <handleTouch+0x35a>

				queueProtocol(page_num, protocol_offset);
 8002edc:	4b64      	ldr	r3, [pc, #400]	@ (8003070 <handleTouch+0x4c0>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b66      	ldr	r3, [pc, #408]	@ (800307c <handleTouch+0x4cc>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4610      	mov	r0, r2
 8002eea:	f000 fd95 	bl	8003a18 <queueProtocol>
				queueSize++;
 8002eee:	4b62      	ldr	r3, [pc, #392]	@ (8003078 <handleTouch+0x4c8>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	4b60      	ldr	r3, [pc, #384]	@ (8003078 <handleTouch+0x4c8>)
 8002ef8:	701a      	strb	r2, [r3, #0]
				currentPage = PAGE_QUEUE;
 8002efa:	4b5c      	ldr	r3, [pc, #368]	@ (800306c <handleTouch+0x4bc>)
 8002efc:	2202      	movs	r2, #2
 8002efe:	701a      	strb	r2, [r3, #0]
				DrawQueuePage(queueSize);
 8002f00:	4b5d      	ldr	r3, [pc, #372]	@ (8003078 <handleTouch+0x4c8>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff f90f 	bl	8002128 <DrawQueuePage>
			} else {
				//handle queue buffer being full
			}
		}
		//select button
		if (x >= selectButton.x && x <= (selectButton.x + selectButton.w)
 8002f0a:	4b5d      	ldr	r3, [pc, #372]	@ (8003080 <handleTouch+0x4d0>)
 8002f0c:	881a      	ldrh	r2, [r3, #0]
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d84f      	bhi.n	8002fb4 <handleTouch+0x404>
 8002f14:	88fb      	ldrh	r3, [r7, #6]
 8002f16:	461a      	mov	r2, r3
 8002f18:	4b59      	ldr	r3, [pc, #356]	@ (8003080 <handleTouch+0x4d0>)
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4b58      	ldr	r3, [pc, #352]	@ (8003080 <handleTouch+0x4d0>)
 8002f20:	889b      	ldrh	r3, [r3, #4]
 8002f22:	440b      	add	r3, r1
 8002f24:	429a      	cmp	r2, r3
 8002f26:	dc45      	bgt.n	8002fb4 <handleTouch+0x404>
				&& y >= selectButton.y
 8002f28:	4b55      	ldr	r3, [pc, #340]	@ (8003080 <handleTouch+0x4d0>)
 8002f2a:	885a      	ldrh	r2, [r3, #2]
 8002f2c:	88bb      	ldrh	r3, [r7, #4]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d840      	bhi.n	8002fb4 <handleTouch+0x404>
				&& y <= (selectButton.y + selectButton.h)) {
 8002f32:	88bb      	ldrh	r3, [r7, #4]
 8002f34:	461a      	mov	r2, r3
 8002f36:	4b52      	ldr	r3, [pc, #328]	@ (8003080 <handleTouch+0x4d0>)
 8002f38:	885b      	ldrh	r3, [r3, #2]
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4b50      	ldr	r3, [pc, #320]	@ (8003080 <handleTouch+0x4d0>)
 8002f3e:	88db      	ldrh	r3, [r3, #6]
 8002f40:	440b      	add	r3, r1
 8002f42:	429a      	cmp	r2, r3
 8002f44:	dc36      	bgt.n	8002fb4 <handleTouch+0x404>
			//transmit protocol and move to finish page
			transmitProtocol(page_num, protocol_offset);
 8002f46:	4b4a      	ldr	r3, [pc, #296]	@ (8003070 <handleTouch+0x4c0>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4b4b      	ldr	r3, [pc, #300]	@ (800307c <handleTouch+0x4cc>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	4619      	mov	r1, r3
 8002f52:	4610      	mov	r0, r2
 8002f54:	f000 fd0c 	bl	8003970 <transmitProtocol>
			currentPage = PAGE_PROGRESS;
 8002f58:	4b44      	ldr	r3, [pc, #272]	@ (800306c <handleTouch+0x4bc>)
 8002f5a:	2205      	movs	r2, #5
 8002f5c:	701a      	strb	r2, [r3, #0]
			protocolTimer = 5999; //change this to the actual value dorjee
 8002f5e:	4b49      	ldr	r3, [pc, #292]	@ (8003084 <handleTouch+0x4d4>)
 8002f60:	f241 726f 	movw	r2, #5999	@ 0x176f
 8002f64:	601a      	str	r2, [r3, #0]
			uint32_t flash_address = get_sector_address(
 8002f66:	4b42      	ldr	r3, [pc, #264]	@ (8003070 <handleTouch+0x4c0>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 ffac 	bl	8003ec8 <get_sector_address>
 8002f70:	4603      	mov	r3, r0
					page_num) + protocol_offset * PROTOCOL_SIZE;
 8002f72:	4a42      	ldr	r2, [pc, #264]	@ (800307c <handleTouch+0x4cc>)
 8002f74:	7812      	ldrb	r2, [r2, #0]
 8002f76:	4611      	mov	r1, r2
 8002f78:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002f7c:	fb01 f202 	mul.w	r2, r1, r2
			uint32_t flash_address = get_sector_address(
 8002f80:	4413      	add	r3, r2
 8002f82:	60bb      	str	r3, [r7, #8]
			//clear currentProtocolTitle buffer
			memset(currentProtocolTitle, 0, MAX_LINE_LENGTH);
 8002f84:	2220      	movs	r2, #32
 8002f86:	2100      	movs	r1, #0
 8002f88:	483f      	ldr	r0, [pc, #252]	@ (8003088 <handleTouch+0x4d8>)
 8002f8a:	f00c fa99 	bl	800f4c0 <memset>
			read_from_flash(currentProtocolTitle, flash_address);
 8002f8e:	68b9      	ldr	r1, [r7, #8]
 8002f90:	483d      	ldr	r0, [pc, #244]	@ (8003088 <handleTouch+0x4d8>)
 8002f92:	f000 fac0 	bl	8003516 <read_from_flash>
			DrawProgressPage("FILL", rx_byte, rx_data);
 8002f96:	4b3d      	ldr	r3, [pc, #244]	@ (800308c <handleTouch+0x4dc>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	4a3d      	ldr	r2, [pc, #244]	@ (8003090 <handleTouch+0x4e0>)
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	483d      	ldr	r0, [pc, #244]	@ (8003094 <handleTouch+0x4e4>)
 8002fa0:	f7ff f9ac 	bl	80022fc <DrawProgressPage>

			//start timer 2 interrupt for protocol timer count down
			HAL_TIM_Base_Start_IT(&htim2); //triggers every second
 8002fa4:	483c      	ldr	r0, [pc, #240]	@ (8003098 <handleTouch+0x4e8>)
 8002fa6:	f005 fc17 	bl	80087d8 <HAL_TIM_Base_Start_IT>
			HAL_GPIO_WritePin(FAN_EN_GPIO_Port, FAN_EN_Pin, GPIO_PIN_SET); //turn fan on
 8002faa:	2201      	movs	r2, #1
 8002fac:	2120      	movs	r1, #32
 8002fae:	483b      	ldr	r0, [pc, #236]	@ (800309c <handleTouch+0x4ec>)
 8002fb0:	f002 f92c 	bl	800520c <HAL_GPIO_WritePin>
		}
		//info button
		if (x >= protocolInfoButton.x
 8002fb4:	4b3a      	ldr	r3, [pc, #232]	@ (80030a0 <handleTouch+0x4f0>)
 8002fb6:	881a      	ldrh	r2, [r3, #0]
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d824      	bhi.n	8003008 <handleTouch+0x458>
				&& x <= (protocolInfoButton.x + protocolInfoButton.w)
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b37      	ldr	r3, [pc, #220]	@ (80030a0 <handleTouch+0x4f0>)
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4b35      	ldr	r3, [pc, #212]	@ (80030a0 <handleTouch+0x4f0>)
 8002fca:	889b      	ldrh	r3, [r3, #4]
 8002fcc:	440b      	add	r3, r1
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	dc1a      	bgt.n	8003008 <handleTouch+0x458>
				&& y >= protocolInfoButton.y
 8002fd2:	4b33      	ldr	r3, [pc, #204]	@ (80030a0 <handleTouch+0x4f0>)
 8002fd4:	885a      	ldrh	r2, [r3, #2]
 8002fd6:	88bb      	ldrh	r3, [r7, #4]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d815      	bhi.n	8003008 <handleTouch+0x458>
				&& y <= (protocolInfoButton.y + protocolInfoButton.h)) {
 8002fdc:	88bb      	ldrh	r3, [r7, #4]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4b2f      	ldr	r3, [pc, #188]	@ (80030a0 <handleTouch+0x4f0>)
 8002fe2:	885b      	ldrh	r3, [r3, #2]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4b2e      	ldr	r3, [pc, #184]	@ (80030a0 <handleTouch+0x4f0>)
 8002fe8:	88db      	ldrh	r3, [r3, #6]
 8002fea:	440b      	add	r3, r1
 8002fec:	429a      	cmp	r2, r3
 8002fee:	dc0b      	bgt.n	8003008 <handleTouch+0x458>
			//move to delete confirmation page
			currentPage = PAGE_PROTOCOL_INFO;
 8002ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800306c <handleTouch+0x4bc>)
 8002ff2:	2206      	movs	r2, #6
 8002ff4:	701a      	strb	r2, [r3, #0]
			DrawProtocolInfoPage(page_num, protocol_offset);
 8002ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8003070 <handleTouch+0x4c0>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800307c <handleTouch+0x4cc>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	4619      	mov	r1, r3
 8003002:	4610      	mov	r0, r2
 8003004:	f7ff fcd8 	bl	80029b8 <DrawProtocolInfoPage>
		}
		//delete button
		if (x >= deleteButton.x && x <= (deleteButton.x + deleteButton.w)
 8003008:	4b26      	ldr	r3, [pc, #152]	@ (80030a4 <handleTouch+0x4f4>)
 800300a:	881a      	ldrh	r2, [r3, #0]
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	429a      	cmp	r2, r3
 8003010:	f200 8216 	bhi.w	8003440 <handleTouch+0x890>
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	461a      	mov	r2, r3
 8003018:	4b22      	ldr	r3, [pc, #136]	@ (80030a4 <handleTouch+0x4f4>)
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	4619      	mov	r1, r3
 800301e:	4b21      	ldr	r3, [pc, #132]	@ (80030a4 <handleTouch+0x4f4>)
 8003020:	889b      	ldrh	r3, [r3, #4]
 8003022:	440b      	add	r3, r1
 8003024:	429a      	cmp	r2, r3
 8003026:	f300 820b 	bgt.w	8003440 <handleTouch+0x890>
				&& y >= deleteButton.y
 800302a:	4b1e      	ldr	r3, [pc, #120]	@ (80030a4 <handleTouch+0x4f4>)
 800302c:	885a      	ldrh	r2, [r3, #2]
 800302e:	88bb      	ldrh	r3, [r7, #4]
 8003030:	429a      	cmp	r2, r3
 8003032:	f200 8205 	bhi.w	8003440 <handleTouch+0x890>
				&& y <= (deleteButton.y + deleteButton.h)) {
 8003036:	88bb      	ldrh	r3, [r7, #4]
 8003038:	461a      	mov	r2, r3
 800303a:	4b1a      	ldr	r3, [pc, #104]	@ (80030a4 <handleTouch+0x4f4>)
 800303c:	885b      	ldrh	r3, [r3, #2]
 800303e:	4619      	mov	r1, r3
 8003040:	4b18      	ldr	r3, [pc, #96]	@ (80030a4 <handleTouch+0x4f4>)
 8003042:	88db      	ldrh	r3, [r3, #6]
 8003044:	440b      	add	r3, r1
 8003046:	429a      	cmp	r2, r3
 8003048:	f300 81fa 	bgt.w	8003440 <handleTouch+0x890>
			//move to delete confirmation page
			currentPage = PAGE_CONFIRMATION;
 800304c:	4b07      	ldr	r3, [pc, #28]	@ (800306c <handleTouch+0x4bc>)
 800304e:	2203      	movs	r2, #3
 8003050:	701a      	strb	r2, [r3, #0]
			DrawConfirmationPage(page_num, protocol_offset);
 8003052:	4b07      	ldr	r3, [pc, #28]	@ (8003070 <handleTouch+0x4c0>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	4b08      	ldr	r3, [pc, #32]	@ (800307c <handleTouch+0x4cc>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	4619      	mov	r1, r3
 800305e:	4610      	mov	r0, r2
 8003060:	f7fe ffea 	bl	8002038 <DrawConfirmationPage>
		}
		break;
 8003064:	e1ec      	b.n	8003440 <handleTouch+0x890>
 8003066:	bf00      	nop
 8003068:	200001b8 	.word	0x200001b8
 800306c:	200005c0 	.word	0x200005c0
 8003070:	20000293 	.word	0x20000293
 8003074:	20000134 	.word	0x20000134
 8003078:	20010004 	.word	0x20010004
 800307c:	2001190d 	.word	0x2001190d
 8003080:	20000160 	.word	0x20000160
 8003084:	200005c4 	.word	0x200005c4
 8003088:	200005e0 	.word	0x200005e0
 800308c:	200005c8 	.word	0x200005c8
 8003090:	200005cc 	.word	0x200005cc
 8003094:	08010284 	.word	0x08010284
 8003098:	20000498 	.word	0x20000498
 800309c:	40020800 	.word	0x40020800
 80030a0:	20000268 	.word	0x20000268
 80030a4:	2000018c 	.word	0x2000018c

	case PAGE_QUEUE:
		//back button
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 80030a8:	4b80      	ldr	r3, [pc, #512]	@ (80032ac <handleTouch+0x6fc>)
 80030aa:	881a      	ldrh	r2, [r3, #0]
 80030ac:	88fb      	ldrh	r3, [r7, #6]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d820      	bhi.n	80030f4 <handleTouch+0x544>
 80030b2:	88fb      	ldrh	r3, [r7, #6]
 80030b4:	461a      	mov	r2, r3
 80030b6:	4b7d      	ldr	r3, [pc, #500]	@ (80032ac <handleTouch+0x6fc>)
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	4619      	mov	r1, r3
 80030bc:	4b7b      	ldr	r3, [pc, #492]	@ (80032ac <handleTouch+0x6fc>)
 80030be:	889b      	ldrh	r3, [r3, #4]
 80030c0:	440b      	add	r3, r1
 80030c2:	429a      	cmp	r2, r3
 80030c4:	dc16      	bgt.n	80030f4 <handleTouch+0x544>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 80030c6:	4b79      	ldr	r3, [pc, #484]	@ (80032ac <handleTouch+0x6fc>)
 80030c8:	885a      	ldrh	r2, [r3, #2]
 80030ca:	88bb      	ldrh	r3, [r7, #4]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d811      	bhi.n	80030f4 <handleTouch+0x544>
 80030d0:	88bb      	ldrh	r3, [r7, #4]
 80030d2:	461a      	mov	r2, r3
 80030d4:	4b75      	ldr	r3, [pc, #468]	@ (80032ac <handleTouch+0x6fc>)
 80030d6:	885b      	ldrh	r3, [r3, #2]
 80030d8:	4619      	mov	r1, r3
 80030da:	4b74      	ldr	r3, [pc, #464]	@ (80032ac <handleTouch+0x6fc>)
 80030dc:	88db      	ldrh	r3, [r3, #6]
 80030de:	440b      	add	r3, r1
 80030e0:	429a      	cmp	r2, r3
 80030e2:	dc07      	bgt.n	80030f4 <handleTouch+0x544>
			currentPage = PAGE_MAIN;
 80030e4:	4b72      	ldr	r3, [pc, #456]	@ (80032b0 <handleTouch+0x700>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 80030ea:	4b72      	ldr	r3, [pc, #456]	@ (80032b4 <handleTouch+0x704>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe fcf8 	bl	8001ae4 <DrawMainPage>
		}
		//run button
		if (x >= runButton.x && x <= (runButton.x + runButton.w)
 80030f4:	4b70      	ldr	r3, [pc, #448]	@ (80032b8 <handleTouch+0x708>)
 80030f6:	881a      	ldrh	r2, [r3, #0]
 80030f8:	88fb      	ldrh	r3, [r7, #6]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	f200 81a2 	bhi.w	8003444 <handleTouch+0x894>
 8003100:	88fb      	ldrh	r3, [r7, #6]
 8003102:	461a      	mov	r2, r3
 8003104:	4b6c      	ldr	r3, [pc, #432]	@ (80032b8 <handleTouch+0x708>)
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	4619      	mov	r1, r3
 800310a:	4b6b      	ldr	r3, [pc, #428]	@ (80032b8 <handleTouch+0x708>)
 800310c:	889b      	ldrh	r3, [r3, #4]
 800310e:	440b      	add	r3, r1
 8003110:	429a      	cmp	r2, r3
 8003112:	f300 8197 	bgt.w	8003444 <handleTouch+0x894>
				&& y >= runButton.y && y <= (runButton.y + runButton.h)
 8003116:	4b68      	ldr	r3, [pc, #416]	@ (80032b8 <handleTouch+0x708>)
 8003118:	885a      	ldrh	r2, [r3, #2]
 800311a:	88bb      	ldrh	r3, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	f200 8191 	bhi.w	8003444 <handleTouch+0x894>
 8003122:	88bb      	ldrh	r3, [r7, #4]
 8003124:	461a      	mov	r2, r3
 8003126:	4b64      	ldr	r3, [pc, #400]	@ (80032b8 <handleTouch+0x708>)
 8003128:	885b      	ldrh	r3, [r3, #2]
 800312a:	4619      	mov	r1, r3
 800312c:	4b62      	ldr	r3, [pc, #392]	@ (80032b8 <handleTouch+0x708>)
 800312e:	88db      	ldrh	r3, [r3, #6]
 8003130:	440b      	add	r3, r1
 8003132:	429a      	cmp	r2, r3
 8003134:	f300 8186 	bgt.w	8003444 <handleTouch+0x894>
				&& (queueSize > 0)) {
 8003138:	4b60      	ldr	r3, [pc, #384]	@ (80032bc <handleTouch+0x70c>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 8181 	beq.w	8003444 <handleTouch+0x894>
			//handle queue functionality here dorjee
			transmitQueuedProtocols(queueSize);
 8003142:	4b5e      	ldr	r3, [pc, #376]	@ (80032bc <handleTouch+0x70c>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fce6 	bl	8003b18 <transmitQueuedProtocols>
			queueSize = 0;
 800314c:	4b5b      	ldr	r3, [pc, #364]	@ (80032bc <handleTouch+0x70c>)
 800314e:	2200      	movs	r2, #0
 8003150:	701a      	strb	r2, [r3, #0]
			currentPage = PAGE_PROGRESS;
 8003152:	4b57      	ldr	r3, [pc, #348]	@ (80032b0 <handleTouch+0x700>)
 8003154:	2205      	movs	r2, #5
 8003156:	701a      	strb	r2, [r3, #0]
			DrawProgressPage("FILL", rx_byte, rx_data);
 8003158:	4b59      	ldr	r3, [pc, #356]	@ (80032c0 <handleTouch+0x710>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	4a59      	ldr	r2, [pc, #356]	@ (80032c4 <handleTouch+0x714>)
 800315e:	4619      	mov	r1, r3
 8003160:	4859      	ldr	r0, [pc, #356]	@ (80032c8 <handleTouch+0x718>)
 8003162:	f7ff f8cb 	bl	80022fc <DrawProgressPage>
		}
		break;
 8003166:	e16d      	b.n	8003444 <handleTouch+0x894>

	case PAGE_CONFIRMATION:
		//back button
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 8003168:	4b50      	ldr	r3, [pc, #320]	@ (80032ac <handleTouch+0x6fc>)
 800316a:	881a      	ldrh	r2, [r3, #0]
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	429a      	cmp	r2, r3
 8003170:	d827      	bhi.n	80031c2 <handleTouch+0x612>
 8003172:	88fb      	ldrh	r3, [r7, #6]
 8003174:	461a      	mov	r2, r3
 8003176:	4b4d      	ldr	r3, [pc, #308]	@ (80032ac <handleTouch+0x6fc>)
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	4619      	mov	r1, r3
 800317c:	4b4b      	ldr	r3, [pc, #300]	@ (80032ac <handleTouch+0x6fc>)
 800317e:	889b      	ldrh	r3, [r3, #4]
 8003180:	440b      	add	r3, r1
 8003182:	429a      	cmp	r2, r3
 8003184:	dc1d      	bgt.n	80031c2 <handleTouch+0x612>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 8003186:	4b49      	ldr	r3, [pc, #292]	@ (80032ac <handleTouch+0x6fc>)
 8003188:	885a      	ldrh	r2, [r3, #2]
 800318a:	88bb      	ldrh	r3, [r7, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	d818      	bhi.n	80031c2 <handleTouch+0x612>
 8003190:	88bb      	ldrh	r3, [r7, #4]
 8003192:	461a      	mov	r2, r3
 8003194:	4b45      	ldr	r3, [pc, #276]	@ (80032ac <handleTouch+0x6fc>)
 8003196:	885b      	ldrh	r3, [r3, #2]
 8003198:	4619      	mov	r1, r3
 800319a:	4b44      	ldr	r3, [pc, #272]	@ (80032ac <handleTouch+0x6fc>)
 800319c:	88db      	ldrh	r3, [r3, #6]
 800319e:	440b      	add	r3, r1
 80031a0:	429a      	cmp	r2, r3
 80031a2:	dc0e      	bgt.n	80031c2 <handleTouch+0x612>
			currentPage = PAGE_SELECT;
 80031a4:	4b42      	ldr	r3, [pc, #264]	@ (80032b0 <handleTouch+0x700>)
 80031a6:	2201      	movs	r2, #1
 80031a8:	701a      	strb	r2, [r3, #0]
			DrawInfoPage(buttons[protocol_offset].label);
 80031aa:	4b48      	ldr	r3, [pc, #288]	@ (80032cc <handleTouch+0x71c>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	232a      	movs	r3, #42	@ 0x2a
 80031b2:	fb02 f303 	mul.w	r3, r2, r3
 80031b6:	3308      	adds	r3, #8
 80031b8:	4a45      	ldr	r2, [pc, #276]	@ (80032d0 <handleTouch+0x720>)
 80031ba:	4413      	add	r3, r2
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fe fe6f 	bl	8001ea0 <DrawInfoPage>
		}
		//confirm button
		if (x >= confirmButton.x && x <= (confirmButton.x + confirmButton.w)
 80031c2:	4b44      	ldr	r3, [pc, #272]	@ (80032d4 <handleTouch+0x724>)
 80031c4:	881a      	ldrh	r2, [r3, #0]
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	f200 813d 	bhi.w	8003448 <handleTouch+0x898>
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b40      	ldr	r3, [pc, #256]	@ (80032d4 <handleTouch+0x724>)
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	4619      	mov	r1, r3
 80031d8:	4b3e      	ldr	r3, [pc, #248]	@ (80032d4 <handleTouch+0x724>)
 80031da:	889b      	ldrh	r3, [r3, #4]
 80031dc:	440b      	add	r3, r1
 80031de:	429a      	cmp	r2, r3
 80031e0:	f300 8132 	bgt.w	8003448 <handleTouch+0x898>
				&& y >= confirmButton.y
 80031e4:	4b3b      	ldr	r3, [pc, #236]	@ (80032d4 <handleTouch+0x724>)
 80031e6:	885a      	ldrh	r2, [r3, #2]
 80031e8:	88bb      	ldrh	r3, [r7, #4]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	f200 812c 	bhi.w	8003448 <handleTouch+0x898>
				&& y <= (confirmButton.y + confirmButton.h)) {
 80031f0:	88bb      	ldrh	r3, [r7, #4]
 80031f2:	461a      	mov	r2, r3
 80031f4:	4b37      	ldr	r3, [pc, #220]	@ (80032d4 <handleTouch+0x724>)
 80031f6:	885b      	ldrh	r3, [r3, #2]
 80031f8:	4619      	mov	r1, r3
 80031fa:	4b36      	ldr	r3, [pc, #216]	@ (80032d4 <handleTouch+0x724>)
 80031fc:	88db      	ldrh	r3, [r3, #6]
 80031fe:	440b      	add	r3, r1
 8003200:	429a      	cmp	r2, r3
 8003202:	f300 8121 	bgt.w	8003448 <handleTouch+0x898>
			//delete protocol and go back to main page
			deleteProtocol(page_num, protocol_offset);
 8003206:	4b2b      	ldr	r3, [pc, #172]	@ (80032b4 <handleTouch+0x704>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	4b2f      	ldr	r3, [pc, #188]	@ (80032cc <handleTouch+0x71c>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	4619      	mov	r1, r3
 8003212:	4610      	mov	r0, r2
 8003214:	f000 fcd0 	bl	8003bb8 <deleteProtocol>
			currentPage = PAGE_MAIN;
 8003218:	4b25      	ldr	r3, [pc, #148]	@ (80032b0 <handleTouch+0x700>)
 800321a:	2200      	movs	r2, #0
 800321c:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 800321e:	4b25      	ldr	r3, [pc, #148]	@ (80032b4 <handleTouch+0x704>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe fc5e 	bl	8001ae4 <DrawMainPage>
		}
		break;
 8003228:	e10e      	b.n	8003448 <handleTouch+0x898>

	case PAGE_PROGRESS:
		//stop button
		if ((x >= backButton.x) && (x <= backButton.x + backButton.w)
 800322a:	4b20      	ldr	r3, [pc, #128]	@ (80032ac <handleTouch+0x6fc>)
 800322c:	881a      	ldrh	r2, [r3, #0]
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	429a      	cmp	r2, r3
 8003232:	d81e      	bhi.n	8003272 <handleTouch+0x6c2>
 8003234:	88fb      	ldrh	r3, [r7, #6]
 8003236:	461a      	mov	r2, r3
 8003238:	4b1c      	ldr	r3, [pc, #112]	@ (80032ac <handleTouch+0x6fc>)
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	4619      	mov	r1, r3
 800323e:	4b1b      	ldr	r3, [pc, #108]	@ (80032ac <handleTouch+0x6fc>)
 8003240:	889b      	ldrh	r3, [r3, #4]
 8003242:	440b      	add	r3, r1
 8003244:	429a      	cmp	r2, r3
 8003246:	dc14      	bgt.n	8003272 <handleTouch+0x6c2>
				&& (y >= backButton.y)
 8003248:	4b18      	ldr	r3, [pc, #96]	@ (80032ac <handleTouch+0x6fc>)
 800324a:	885a      	ldrh	r2, [r3, #2]
 800324c:	88bb      	ldrh	r3, [r7, #4]
 800324e:	429a      	cmp	r2, r3
 8003250:	d80f      	bhi.n	8003272 <handleTouch+0x6c2>
				&& (y <= backButton.y + backButton.h + BACK_BUTTON_OFFSET)) {
 8003252:	88bb      	ldrh	r3, [r7, #4]
 8003254:	461a      	mov	r2, r3
 8003256:	4b15      	ldr	r3, [pc, #84]	@ (80032ac <handleTouch+0x6fc>)
 8003258:	885b      	ldrh	r3, [r3, #2]
 800325a:	4619      	mov	r1, r3
 800325c:	4b13      	ldr	r3, [pc, #76]	@ (80032ac <handleTouch+0x6fc>)
 800325e:	88db      	ldrh	r3, [r3, #6]
 8003260:	440b      	add	r3, r1
 8003262:	333c      	adds	r3, #60	@ 0x3c
 8003264:	429a      	cmp	r2, r3
 8003266:	dc04      	bgt.n	8003272 <handleTouch+0x6c2>
			//printf("touched\n");
			currentPage = PAGE_STOP;
 8003268:	4b11      	ldr	r3, [pc, #68]	@ (80032b0 <handleTouch+0x700>)
 800326a:	2207      	movs	r2, #7
 800326c:	701a      	strb	r2, [r3, #0]
			DrawStopPage();
 800326e:	f7ff fbf9 	bl	8002a64 <DrawStopPage>
		}
		//when protocol finishes naturally, it will send a done signal
		uint8_t done_signal;
		if (HAL_UART_Receive(&huart2, &done_signal, 1, 0) == HAL_OK) {
 8003272:	1cf9      	adds	r1, r7, #3
 8003274:	2300      	movs	r3, #0
 8003276:	2201      	movs	r2, #1
 8003278:	4817      	ldr	r0, [pc, #92]	@ (80032d8 <handleTouch+0x728>)
 800327a:	f006 fa60 	bl	800973e <HAL_UART_Receive>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	f040 80e3 	bne.w	800344c <handleTouch+0x89c>
			if (done_signal == 'D') {
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	2b44      	cmp	r3, #68	@ 0x44
 800328a:	f040 80df 	bne.w	800344c <handleTouch+0x89c>
				//go to success page
				currentPage = PAGE_FINISH;
 800328e:	4b08      	ldr	r3, [pc, #32]	@ (80032b0 <handleTouch+0x700>)
 8003290:	2204      	movs	r2, #4
 8003292:	701a      	strb	r2, [r3, #0]
				DrawPageFinish();
 8003294:	f7ff fc4a 	bl	8002b2c <DrawPageFinish>

				//stop the interrupt and turn fan off
				HAL_TIM_Base_Stop_IT(&htim2);
 8003298:	4810      	ldr	r0, [pc, #64]	@ (80032dc <handleTouch+0x72c>)
 800329a:	f005 fb0d 	bl	80088b8 <HAL_TIM_Base_Stop_IT>
				HAL_GPIO_WritePin(FAN_EN_GPIO_Port, FAN_EN_Pin, GPIO_PIN_RESET);
 800329e:	2200      	movs	r2, #0
 80032a0:	2120      	movs	r1, #32
 80032a2:	480f      	ldr	r0, [pc, #60]	@ (80032e0 <handleTouch+0x730>)
 80032a4:	f001 ffb2 	bl	800520c <HAL_GPIO_WritePin>
			}
		}
		break;
 80032a8:	e0d0      	b.n	800344c <handleTouch+0x89c>
 80032aa:	bf00      	nop
 80032ac:	200001b8 	.word	0x200001b8
 80032b0:	200005c0 	.word	0x200005c0
 80032b4:	20000293 	.word	0x20000293
 80032b8:	200000dc 	.word	0x200000dc
 80032bc:	20010004 	.word	0x20010004
 80032c0:	200005c8 	.word	0x200005c8
 80032c4:	200005cc 	.word	0x200005cc
 80032c8:	08010284 	.word	0x08010284
 80032cc:	2001190d 	.word	0x2001190d
 80032d0:	20000030 	.word	0x20000030
 80032d4:	20000108 	.word	0x20000108
 80032d8:	20000528 	.word	0x20000528
 80032dc:	20000498 	.word	0x20000498
 80032e0:	40020800 	.word	0x40020800

	case PAGE_STOP:
		//no button
		if (x >= noButton.x && x <= (noButton.x + noButton.w) && y >= noButton.y
 80032e4:	4b61      	ldr	r3, [pc, #388]	@ (800346c <handleTouch+0x8bc>)
 80032e6:	881a      	ldrh	r2, [r3, #0]
 80032e8:	88fb      	ldrh	r3, [r7, #6]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d822      	bhi.n	8003334 <handleTouch+0x784>
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	461a      	mov	r2, r3
 80032f2:	4b5e      	ldr	r3, [pc, #376]	@ (800346c <handleTouch+0x8bc>)
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	4619      	mov	r1, r3
 80032f8:	4b5c      	ldr	r3, [pc, #368]	@ (800346c <handleTouch+0x8bc>)
 80032fa:	889b      	ldrh	r3, [r3, #4]
 80032fc:	440b      	add	r3, r1
 80032fe:	429a      	cmp	r2, r3
 8003300:	dc18      	bgt.n	8003334 <handleTouch+0x784>
 8003302:	4b5a      	ldr	r3, [pc, #360]	@ (800346c <handleTouch+0x8bc>)
 8003304:	885a      	ldrh	r2, [r3, #2]
 8003306:	88bb      	ldrh	r3, [r7, #4]
 8003308:	429a      	cmp	r2, r3
 800330a:	d813      	bhi.n	8003334 <handleTouch+0x784>
				&& y <= (noButton.y + noButton.h)) {
 800330c:	88bb      	ldrh	r3, [r7, #4]
 800330e:	461a      	mov	r2, r3
 8003310:	4b56      	ldr	r3, [pc, #344]	@ (800346c <handleTouch+0x8bc>)
 8003312:	885b      	ldrh	r3, [r3, #2]
 8003314:	4619      	mov	r1, r3
 8003316:	4b55      	ldr	r3, [pc, #340]	@ (800346c <handleTouch+0x8bc>)
 8003318:	88db      	ldrh	r3, [r3, #6]
 800331a:	440b      	add	r3, r1
 800331c:	429a      	cmp	r2, r3
 800331e:	dc09      	bgt.n	8003334 <handleTouch+0x784>
			currentPage = PAGE_PROGRESS;
 8003320:	4b53      	ldr	r3, [pc, #332]	@ (8003470 <handleTouch+0x8c0>)
 8003322:	2205      	movs	r2, #5
 8003324:	701a      	strb	r2, [r3, #0]
			DrawProgressPage("FILL", rx_byte, rx_data);
 8003326:	4b53      	ldr	r3, [pc, #332]	@ (8003474 <handleTouch+0x8c4>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	4a53      	ldr	r2, [pc, #332]	@ (8003478 <handleTouch+0x8c8>)
 800332c:	4619      	mov	r1, r3
 800332e:	4853      	ldr	r0, [pc, #332]	@ (800347c <handleTouch+0x8cc>)
 8003330:	f7fe ffe4 	bl	80022fc <DrawProgressPage>
		}
		//yes button
		if (x >= yesButton.x && x <= (yesButton.x + yesButton.w)
 8003334:	4b52      	ldr	r3, [pc, #328]	@ (8003480 <handleTouch+0x8d0>)
 8003336:	881a      	ldrh	r2, [r3, #0]
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	429a      	cmp	r2, r3
 800333c:	f200 8088 	bhi.w	8003450 <handleTouch+0x8a0>
 8003340:	88fb      	ldrh	r3, [r7, #6]
 8003342:	461a      	mov	r2, r3
 8003344:	4b4e      	ldr	r3, [pc, #312]	@ (8003480 <handleTouch+0x8d0>)
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	4619      	mov	r1, r3
 800334a:	4b4d      	ldr	r3, [pc, #308]	@ (8003480 <handleTouch+0x8d0>)
 800334c:	889b      	ldrh	r3, [r3, #4]
 800334e:	440b      	add	r3, r1
 8003350:	429a      	cmp	r2, r3
 8003352:	dc7d      	bgt.n	8003450 <handleTouch+0x8a0>
				&& y >= yesButton.y && y <= (yesButton.y + yesButton.h)) {
 8003354:	4b4a      	ldr	r3, [pc, #296]	@ (8003480 <handleTouch+0x8d0>)
 8003356:	885a      	ldrh	r2, [r3, #2]
 8003358:	88bb      	ldrh	r3, [r7, #4]
 800335a:	429a      	cmp	r2, r3
 800335c:	d878      	bhi.n	8003450 <handleTouch+0x8a0>
 800335e:	88bb      	ldrh	r3, [r7, #4]
 8003360:	461a      	mov	r2, r3
 8003362:	4b47      	ldr	r3, [pc, #284]	@ (8003480 <handleTouch+0x8d0>)
 8003364:	885b      	ldrh	r3, [r3, #2]
 8003366:	4619      	mov	r1, r3
 8003368:	4b45      	ldr	r3, [pc, #276]	@ (8003480 <handleTouch+0x8d0>)
 800336a:	88db      	ldrh	r3, [r3, #6]
 800336c:	440b      	add	r3, r1
 800336e:	429a      	cmp	r2, r3
 8003370:	dc6e      	bgt.n	8003450 <handleTouch+0x8a0>
			//Send stop signal to ESP32 and go back to main page
			SendStopMotorsMessage();
 8003372:	f000 fd95 	bl	8003ea0 <SendStopMotorsMessage>
			currentPage = PAGE_MAIN;
 8003376:	4b3e      	ldr	r3, [pc, #248]	@ (8003470 <handleTouch+0x8c0>)
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 800337c:	4b41      	ldr	r3, [pc, #260]	@ (8003484 <handleTouch+0x8d4>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7fe fbaf 	bl	8001ae4 <DrawMainPage>

			//stop the interrupt and turn fan off
			HAL_TIM_Base_Stop_IT(&htim2);
 8003386:	4840      	ldr	r0, [pc, #256]	@ (8003488 <handleTouch+0x8d8>)
 8003388:	f005 fa96 	bl	80088b8 <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(FAN_EN_GPIO_Port, FAN_EN_Pin, GPIO_PIN_RESET);
 800338c:	2200      	movs	r2, #0
 800338e:	2120      	movs	r1, #32
 8003390:	483e      	ldr	r0, [pc, #248]	@ (800348c <handleTouch+0x8dc>)
 8003392:	f001 ff3b 	bl	800520c <HAL_GPIO_WritePin>
		}
		break;
 8003396:	e05b      	b.n	8003450 <handleTouch+0x8a0>

	case PAGE_PROTOCOL_INFO:
		//back button
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 8003398:	4b3d      	ldr	r3, [pc, #244]	@ (8003490 <handleTouch+0x8e0>)
 800339a:	881a      	ldrh	r2, [r3, #0]
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d858      	bhi.n	8003454 <handleTouch+0x8a4>
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	461a      	mov	r2, r3
 80033a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003490 <handleTouch+0x8e0>)
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	4619      	mov	r1, r3
 80033ac:	4b38      	ldr	r3, [pc, #224]	@ (8003490 <handleTouch+0x8e0>)
 80033ae:	889b      	ldrh	r3, [r3, #4]
 80033b0:	440b      	add	r3, r1
 80033b2:	429a      	cmp	r2, r3
 80033b4:	dc4e      	bgt.n	8003454 <handleTouch+0x8a4>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 80033b6:	4b36      	ldr	r3, [pc, #216]	@ (8003490 <handleTouch+0x8e0>)
 80033b8:	885a      	ldrh	r2, [r3, #2]
 80033ba:	88bb      	ldrh	r3, [r7, #4]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d849      	bhi.n	8003454 <handleTouch+0x8a4>
 80033c0:	88bb      	ldrh	r3, [r7, #4]
 80033c2:	461a      	mov	r2, r3
 80033c4:	4b32      	ldr	r3, [pc, #200]	@ (8003490 <handleTouch+0x8e0>)
 80033c6:	885b      	ldrh	r3, [r3, #2]
 80033c8:	4619      	mov	r1, r3
 80033ca:	4b31      	ldr	r3, [pc, #196]	@ (8003490 <handleTouch+0x8e0>)
 80033cc:	88db      	ldrh	r3, [r3, #6]
 80033ce:	440b      	add	r3, r1
 80033d0:	429a      	cmp	r2, r3
 80033d2:	dc3f      	bgt.n	8003454 <handleTouch+0x8a4>
			currentPage = PAGE_SELECT;
 80033d4:	4b26      	ldr	r3, [pc, #152]	@ (8003470 <handleTouch+0x8c0>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	701a      	strb	r2, [r3, #0]
			DrawInfoPage(buttons[i].label);
 80033da:	4b2e      	ldr	r3, [pc, #184]	@ (8003494 <handleTouch+0x8e4>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	222a      	movs	r2, #42	@ 0x2a
 80033e0:	fb02 f303 	mul.w	r3, r2, r3
 80033e4:	3308      	adds	r3, #8
 80033e6:	4a2c      	ldr	r2, [pc, #176]	@ (8003498 <handleTouch+0x8e8>)
 80033e8:	4413      	add	r3, r2
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fe fd58 	bl	8001ea0 <DrawInfoPage>
		}
		break;
 80033f0:	e030      	b.n	8003454 <handleTouch+0x8a4>

	case PAGE_FINISH:
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 80033f2:	4b27      	ldr	r3, [pc, #156]	@ (8003490 <handleTouch+0x8e0>)
 80033f4:	881a      	ldrh	r2, [r3, #0]
 80033f6:	88fb      	ldrh	r3, [r7, #6]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d82d      	bhi.n	8003458 <handleTouch+0x8a8>
 80033fc:	88fb      	ldrh	r3, [r7, #6]
 80033fe:	461a      	mov	r2, r3
 8003400:	4b23      	ldr	r3, [pc, #140]	@ (8003490 <handleTouch+0x8e0>)
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	4619      	mov	r1, r3
 8003406:	4b22      	ldr	r3, [pc, #136]	@ (8003490 <handleTouch+0x8e0>)
 8003408:	889b      	ldrh	r3, [r3, #4]
 800340a:	440b      	add	r3, r1
 800340c:	429a      	cmp	r2, r3
 800340e:	dc23      	bgt.n	8003458 <handleTouch+0x8a8>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 8003410:	4b1f      	ldr	r3, [pc, #124]	@ (8003490 <handleTouch+0x8e0>)
 8003412:	885a      	ldrh	r2, [r3, #2]
 8003414:	88bb      	ldrh	r3, [r7, #4]
 8003416:	429a      	cmp	r2, r3
 8003418:	d81e      	bhi.n	8003458 <handleTouch+0x8a8>
 800341a:	88bb      	ldrh	r3, [r7, #4]
 800341c:	461a      	mov	r2, r3
 800341e:	4b1c      	ldr	r3, [pc, #112]	@ (8003490 <handleTouch+0x8e0>)
 8003420:	885b      	ldrh	r3, [r3, #2]
 8003422:	4619      	mov	r1, r3
 8003424:	4b1a      	ldr	r3, [pc, #104]	@ (8003490 <handleTouch+0x8e0>)
 8003426:	88db      	ldrh	r3, [r3, #6]
 8003428:	440b      	add	r3, r1
 800342a:	429a      	cmp	r2, r3
 800342c:	dc14      	bgt.n	8003458 <handleTouch+0x8a8>
			currentPage = PAGE_MAIN;
 800342e:	4b10      	ldr	r3, [pc, #64]	@ (8003470 <handleTouch+0x8c0>)
 8003430:	2200      	movs	r2, #0
 8003432:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8003434:	4b13      	ldr	r3, [pc, #76]	@ (8003484 <handleTouch+0x8d4>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7fe fb53 	bl	8001ae4 <DrawMainPage>
		}
		break;
 800343e:	e00b      	b.n	8003458 <handleTouch+0x8a8>
		break;
 8003440:	bf00      	nop
 8003442:	e00a      	b.n	800345a <handleTouch+0x8aa>
		break;
 8003444:	bf00      	nop
 8003446:	e008      	b.n	800345a <handleTouch+0x8aa>
		break;
 8003448:	bf00      	nop
 800344a:	e006      	b.n	800345a <handleTouch+0x8aa>
		break;
 800344c:	bf00      	nop
 800344e:	e004      	b.n	800345a <handleTouch+0x8aa>
		break;
 8003450:	bf00      	nop
 8003452:	e002      	b.n	800345a <handleTouch+0x8aa>
		break;
 8003454:	bf00      	nop
 8003456:	e000      	b.n	800345a <handleTouch+0x8aa>
		break;
 8003458:	bf00      	nop
	}

	HAL_Delay(SCREEN_DELAY); //debouncing delay
 800345a:	2032      	movs	r0, #50	@ 0x32
 800345c:	f001 f936 	bl	80046cc <HAL_Delay>
	return 1;
 8003460:	2301      	movs	r3, #1
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	bd90      	pop	{r4, r7, pc}
 800346a:	bf00      	nop
 800346c:	2000023c 	.word	0x2000023c
 8003470:	200005c0 	.word	0x200005c0
 8003474:	200005c8 	.word	0x200005c8
 8003478:	200005cc 	.word	0x200005cc
 800347c:	08010284 	.word	0x08010284
 8003480:	20000210 	.word	0x20000210
 8003484:	20000293 	.word	0x20000293
 8003488:	20000498 	.word	0x20000498
 800348c:	40020800 	.word	0x40020800
 8003490:	200001b8 	.word	0x200001b8
 8003494:	200005fc 	.word	0x200005fc
 8003498:	20000030 	.word	0x20000030

0800349c <erase_sector>:
/**
 * @brief: Erase the memory from an entire sector
 * @param Sector: The sector number
 * @retval: none
 */
void erase_sector(uint32_t Sector) {
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();  // Unlock flash to enable erasing
 80034a4:	f001 fb2e 	bl	8004b04 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(sector_mapping(Sector), VOLTAGE_RANGE_3);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 fd75 	bl	8003f98 <sector_mapping>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2102      	movs	r1, #2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f001 fc98 	bl	8004de8 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();  // Lock flash after erasing
 80034b8:	f001 fb46 	bl	8004b48 <HAL_FLASH_Lock>
}
 80034bc:	bf00      	nop
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <write_to_flash>:
 * @param flash_address: address of string in flash memory that will be stored
 * @retval: none
 * Note: PLEASE UNLOCK AND LOCK FLASH BEFORE AND AFTER USING THIS FUNCTION,
 * IT DOES NOT DO IT ITSELF
 */
void write_to_flash(const char *data, uint32_t flash_address) {
 80034c4:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 80034c8:	b085      	sub	sp, #20
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	6039      	str	r1, [r7, #0]
	//HAL_FLASH_Unlock();  // Unlock flash for writing

	for (uint8_t i = 0; i < strlen(data); i++) {
 80034d0:	2300      	movs	r3, #0
 80034d2:	73fb      	strb	r3, [r7, #15]
 80034d4:	e012      	b.n	80034fc <write_to_flash+0x38>
		//printf("%c", data[i]);
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flash_address + i, data[i]); // Write to flash
 80034d6:	7bfa      	ldrb	r2, [r7, #15]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	18d1      	adds	r1, r2, r3
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	4413      	add	r3, r2
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2200      	movs	r2, #0
 80034e8:	4698      	mov	r8, r3
 80034ea:	4691      	mov	r9, r2
 80034ec:	4642      	mov	r2, r8
 80034ee:	464b      	mov	r3, r9
 80034f0:	2000      	movs	r0, #0
 80034f2:	f001 fab3 	bl	8004a5c <HAL_FLASH_Program>
	for (uint8_t i = 0; i < strlen(data); i++) {
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
 80034f8:	3301      	adds	r3, #1
 80034fa:	73fb      	strb	r3, [r7, #15]
 80034fc:	7bfc      	ldrb	r4, [r7, #15]
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fc fe76 	bl	80001f0 <strlen>
 8003504:	4603      	mov	r3, r0
 8003506:	429c      	cmp	r4, r3
 8003508:	d3e5      	bcc.n	80034d6 <write_to_flash+0x12>
	}

	//HAL_FLASH_Lock();  // Lock flash after writing
}
 800350a:	bf00      	nop
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

08003516 <read_from_flash>:
 * @param flash_address: address of string in flash memory that will be read
 * @retval: failure if its reading trash from flash memory.
 * it literally does not read from flash btw if it detects 0xFF at the start
 * that means your output buffer will not be updated
 */
uint8_t read_from_flash(char *output, uint32_t flash_address) {
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	6039      	str	r1, [r7, #0]
	// Read byte by byte from flash memory, get a whole string in output variable
	for (uint8_t i = 0; i < MAX_LINE_LENGTH; i++) {
 8003520:	2300      	movs	r3, #0
 8003522:	73fb      	strb	r3, [r7, #15]
 8003524:	e014      	b.n	8003550 <read_from_flash+0x3a>
		char key = *(char*) (flash_address + i);
 8003526:	7bfa      	ldrb	r2, [r7, #15]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	4413      	add	r3, r2
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	73bb      	strb	r3, [r7, #14]
		//check if reading trash (0xFF) from flash memory
		if (key == 0xFF) {
 8003530:	7bbb      	ldrb	r3, [r7, #14]
 8003532:	2bff      	cmp	r3, #255	@ 0xff
 8003534:	d104      	bne.n	8003540 <read_from_flash+0x2a>
			if (i == 0) {
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d106      	bne.n	800354a <read_from_flash+0x34>
				return 0;
 800353c:	2300      	movs	r3, #0
 800353e:	e01b      	b.n	8003578 <read_from_flash+0x62>
			}
		} else {
			output[i] = key;
 8003540:	7bfb      	ldrb	r3, [r7, #15]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	7bba      	ldrb	r2, [r7, #14]
 8003548:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX_LINE_LENGTH; i++) {
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	3301      	adds	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	2b1f      	cmp	r3, #31
 8003554:	d9e7      	bls.n	8003526 <read_from_flash+0x10>
		}
	}
	output[strlen(output)] = '\0'; //add null to the end of string for printing
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fc fe4a 	bl	80001f0 <strlen>
 800355c:	4602      	mov	r2, r0
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4413      	add	r3, r2
 8003562:	2200      	movs	r2, #0
 8003564:	701a      	strb	r2, [r3, #0]
	//printf("output is %s and strlen: %d\n", output, strlen(output));

	//error handling. G-codes are less than 32 chars, anything more is trash
	if (strlen(output) < MAX_LINE_LENGTH) {
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fc fe42 	bl	80001f0 <strlen>
 800356c:	4603      	mov	r3, r0
 800356e:	2b1f      	cmp	r3, #31
 8003570:	d801      	bhi.n	8003576 <read_from_flash+0x60>
		return 1;
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <read_from_flash+0x62>
	} else {
		return 0;
 8003576:	2300      	movs	r3, #0
	}

}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <storeProtocol>:
 * @param gcode_file: array of G-code commands
 * @param sector: which sector to store protocol in
 * @retval: failure if sector is "full"
 */
uint8_t storeProtocol(char new_protocol[MAX_LINES][MAX_LINE_LENGTH],
		uint32_t sector) {
 8003580:	b580      	push	{r7, lr}
 8003582:	f5ad 4d96 	sub.w	sp, sp, #19200	@ 0x4b00
 8003586:	b088      	sub	sp, #32
 8003588:	af00      	add	r7, sp, #0
 800358a:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 800358e:	f6a3 331c 	subw	r3, r3, #2844	@ 0xb1c
 8003592:	6018      	str	r0, [r3, #0]
 8003594:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8003598:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 800359c:	6019      	str	r1, [r3, #0]

	//initialize variables
	int i = 0;  //protocol index
 800359e:	2300      	movs	r3, #0
 80035a0:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80035a4:	f102 021c 	add.w	r2, r2, #28
 80035a8:	6013      	str	r3, [r2, #0]
	int j = 0;  //line index
 80035aa:	2300      	movs	r3, #0
 80035ac:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80035b0:	f102 0218 	add.w	r2, r2, #24
 80035b4:	6013      	str	r3, [r2, #0]
	char protocolStorage[MAX_PROTOCOLS_IN_SECTOR][MAX_LINES][MAX_LINE_LENGTH] =
 80035b6:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 80035ba:	f6a3 3318 	subw	r3, r3, #2840	@ 0xb18
 80035be:	4618      	mov	r0, r3
 80035c0:	f44f 4396 	mov.w	r3, #19200	@ 0x4b00
 80035c4:	461a      	mov	r2, r3
 80035c6:	2100      	movs	r1, #0
 80035c8:	f00b ff7a 	bl	800f4c0 <memset>
			{ { { '\0' } } };
	uint32_t flash_address = get_sector_address(sector);
 80035cc:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 80035d0:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	f000 fc77 	bl	8003ec8 <get_sector_address>
 80035da:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80035de:	f103 0314 	add.w	r3, r3, #20
 80035e2:	6018      	str	r0, [r3, #0]

	//check if all sectors are full before storing a protocol
	uint8_t num_protocols = get_num_protocols_in_sector(sector);
 80035e4:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 80035e8:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 80035ec:	6818      	ldr	r0, [r3, #0]
 80035ee:	f000 f966 	bl	80038be <get_num_protocols_in_sector>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80035f8:	f102 0213 	add.w	r2, r2, #19
 80035fc:	7013      	strb	r3, [r2, #0]
	if (num_protocols == MAX_PROTOCOLS_IN_SECTOR) {
 80035fe:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003602:	f103 0313 	add.w	r3, r3, #19
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b03      	cmp	r3, #3
 800360a:	d101      	bne.n	8003610 <storeProtocol+0x90>
		return 0;
 800360c:	2300      	movs	r3, #0
 800360e:	e150      	b.n	80038b2 <storeProtocol+0x332>
	}

	//read existing protocols in sector and put into the temp protocol storage
	for (i = 0; i < num_protocols; i++) {
 8003610:	2300      	movs	r3, #0
 8003612:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003616:	f102 021c 	add.w	r2, r2, #28
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	e05a      	b.n	80036d4 <storeProtocol+0x154>
		for (j = 0; j < MAX_LINES; j++) {
 800361e:	2300      	movs	r3, #0
 8003620:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003624:	f102 0218 	add.w	r2, r2, #24
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	e041      	b.n	80036b0 <storeProtocol+0x130>
			//get the address for the current line in the current protocol
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 800362c:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003630:	f103 031c 	add.w	r3, r3, #28
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f241 7270 	movw	r2, #6000	@ 0x1770
 800363a:	fb02 f303 	mul.w	r3, r2, r3
					+ j * MAX_LINE_LENGTH;
 800363e:	461a      	mov	r2, r3
 8003640:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003644:	f103 0318 	add.w	r3, r3, #24
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	015b      	lsls	r3, r3, #5
 800364c:	4413      	add	r3, r2
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 800364e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003652:	f102 0214 	add.w	r2, r2, #20
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	4413      	add	r3, r2
 800365a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800365e:	f102 0208 	add.w	r2, r2, #8
 8003662:	6013      	str	r3, [r2, #0]
			//read lines from memory into buffer until you reach garbage
			read_from_flash(protocolStorage[i][j], temp_address); //only updates protocolStorage if its a valid line from memory
 8003664:	f107 0320 	add.w	r3, r7, #32
 8003668:	3b18      	subs	r3, #24
 800366a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800366e:	f102 021c 	add.w	r2, r2, #28
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	21c8      	movs	r1, #200	@ 0xc8
 8003676:	fb02 f101 	mul.w	r1, r2, r1
 800367a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800367e:	f102 0218 	add.w	r2, r2, #24
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	440a      	add	r2, r1
 8003686:	0152      	lsls	r2, r2, #5
 8003688:	4413      	add	r3, r2
 800368a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800368e:	f102 0208 	add.w	r2, r2, #8
 8003692:	6811      	ldr	r1, [r2, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff ff3e 	bl	8003516 <read_from_flash>
		for (j = 0; j < MAX_LINES; j++) {
 800369a:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 800369e:	f103 0318 	add.w	r3, r3, #24
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3301      	adds	r3, #1
 80036a6:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80036aa:	f102 0218 	add.w	r2, r2, #24
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80036b4:	f103 0318 	add.w	r3, r3, #24
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2bc7      	cmp	r3, #199	@ 0xc7
 80036bc:	ddb6      	ble.n	800362c <storeProtocol+0xac>
	for (i = 0; i < num_protocols; i++) {
 80036be:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80036c2:	f103 031c 	add.w	r3, r3, #28
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3301      	adds	r3, #1
 80036ca:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80036ce:	f102 021c 	add.w	r2, r2, #28
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80036d8:	f103 0313 	add.w	r3, r3, #19
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80036e2:	f102 021c 	add.w	r2, r2, #28
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	db98      	blt.n	800361e <storeProtocol+0x9e>
	}
	//output: we now have the existing protocols in the buffer.
	//they only have their first number of lines in. the rest of lines are null

	//put the new protocol into the temp protocol storage
	for (j = 0; j < MAX_LINES; j++) {
 80036ec:	2300      	movs	r3, #0
 80036ee:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80036f2:	f102 0218 	add.w	r2, r2, #24
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	e03b      	b.n	8003772 <storeProtocol+0x1f2>
		//copy each line into the buffer from new protocol, should be null terminated from qr scanner
		if (new_protocol[j][0] != '\0') {
 80036fa:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80036fe:	f103 0318 	add.w	r3, r3, #24
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	015b      	lsls	r3, r3, #5
 8003706:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 800370a:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	4413      	add	r3, r2
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d021      	beq.n	800375c <storeProtocol+0x1dc>
			strcpy(protocolStorage[i][j], new_protocol[j]);
 8003718:	f107 0320 	add.w	r3, r7, #32
 800371c:	3b18      	subs	r3, #24
 800371e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003722:	f102 021c 	add.w	r2, r2, #28
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	21c8      	movs	r1, #200	@ 0xc8
 800372a:	fb02 f101 	mul.w	r1, r2, r1
 800372e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003732:	f102 0218 	add.w	r2, r2, #24
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	440a      	add	r2, r1
 800373a:	0152      	lsls	r2, r2, #5
 800373c:	1898      	adds	r0, r3, r2
 800373e:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003742:	f103 0318 	add.w	r3, r3, #24
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	015b      	lsls	r3, r3, #5
 800374a:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 800374e:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 8003752:	6812      	ldr	r2, [r2, #0]
 8003754:	4413      	add	r3, r2
 8003756:	4619      	mov	r1, r3
 8003758:	f00b ff3d 	bl	800f5d6 <strcpy>
	for (j = 0; j < MAX_LINES; j++) {
 800375c:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003760:	f103 0318 	add.w	r3, r3, #24
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3301      	adds	r3, #1
 8003768:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800376c:	f102 0218 	add.w	r2, r2, #24
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003776:	f103 0318 	add.w	r3, r3, #24
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2bc7      	cmp	r3, #199	@ 0xc7
 800377e:	ddbc      	ble.n	80036fa <storeProtocol+0x17a>
	}
	//we now have the new protocol in the buffer.
	//it only has the first number of lines in. the rest of lines are null

	//write existing protocols and new protocol to flash memory, string-by-string
	erase_sector(sector); //erase sector before writing
 8003780:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8003784:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	f7ff fe87 	bl	800349c <erase_sector>
	HAL_FLASH_Unlock(); // Unlock flash for writing. note: the erase_sector() unlocks and locks itself
 800378e:	f001 f9b9 	bl	8004b04 <HAL_FLASH_Unlock>
	for (i = 0; i < (num_protocols + 1); i++) {
 8003792:	2300      	movs	r3, #0
 8003794:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003798:	f102 021c 	add.w	r2, r2, #28
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e078      	b.n	8003892 <storeProtocol+0x312>
		for (j = 0; j < MAX_LINES; j++) {
 80037a0:	2300      	movs	r3, #0
 80037a2:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80037a6:	f102 0218 	add.w	r2, r2, #24
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	e05f      	b.n	800386e <storeProtocol+0x2ee>
			//if first character of a line is null from qr scanner or trash from flash, ignore it
			if ((new_protocol[j][0] != '\0') && (new_protocol[j][0] != 0xFF)) {
 80037ae:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80037b2:	f103 0318 	add.w	r3, r3, #24
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	015b      	lsls	r3, r3, #5
 80037ba:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 80037be:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	4413      	add	r3, r2
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d045      	beq.n	8003858 <storeProtocol+0x2d8>
 80037cc:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80037d0:	f103 0318 	add.w	r3, r3, #24
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	015b      	lsls	r3, r3, #5
 80037d8:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 80037dc:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 80037e0:	6812      	ldr	r2, [r2, #0]
 80037e2:	4413      	add	r3, r2
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2bff      	cmp	r3, #255	@ 0xff
 80037e8:	d036      	beq.n	8003858 <storeProtocol+0x2d8>
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80037ea:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80037ee:	f103 031c 	add.w	r3, r3, #28
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f241 7270 	movw	r2, #6000	@ 0x1770
 80037f8:	fb02 f303 	mul.w	r3, r2, r3
						+ j * MAX_LINE_LENGTH;
 80037fc:	461a      	mov	r2, r3
 80037fe:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003802:	f103 0318 	add.w	r3, r3, #24
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	015b      	lsls	r3, r3, #5
 800380a:	4413      	add	r3, r2
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 800380c:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003810:	f102 0214 	add.w	r2, r2, #20
 8003814:	6812      	ldr	r2, [r2, #0]
 8003816:	4413      	add	r3, r2
 8003818:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800381c:	f102 020c 	add.w	r2, r2, #12
 8003820:	6013      	str	r3, [r2, #0]
				//printf("len: %d and data: %s", strlen(protocolStorage[i][j]), protocolStorage[i][j]);
				write_to_flash(protocolStorage[i][j], temp_address);
 8003822:	f107 0320 	add.w	r3, r7, #32
 8003826:	3b18      	subs	r3, #24
 8003828:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800382c:	f102 021c 	add.w	r2, r2, #28
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	21c8      	movs	r1, #200	@ 0xc8
 8003834:	fb02 f101 	mul.w	r1, r2, r1
 8003838:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800383c:	f102 0218 	add.w	r2, r2, #24
 8003840:	6812      	ldr	r2, [r2, #0]
 8003842:	440a      	add	r2, r1
 8003844:	0152      	lsls	r2, r2, #5
 8003846:	4413      	add	r3, r2
 8003848:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800384c:	f102 020c 	add.w	r2, r2, #12
 8003850:	6811      	ldr	r1, [r2, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff fe36 	bl	80034c4 <write_to_flash>
		for (j = 0; j < MAX_LINES; j++) {
 8003858:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 800385c:	f103 0318 	add.w	r3, r3, #24
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3301      	adds	r3, #1
 8003864:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003868:	f102 0218 	add.w	r2, r2, #24
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003872:	f103 0318 	add.w	r3, r3, #24
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2bc7      	cmp	r3, #199	@ 0xc7
 800387a:	dd98      	ble.n	80037ae <storeProtocol+0x22e>
	for (i = 0; i < (num_protocols + 1); i++) {
 800387c:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003880:	f103 031c 	add.w	r3, r3, #28
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3301      	adds	r3, #1
 8003888:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800388c:	f102 021c 	add.w	r2, r2, #28
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003896:	f103 0313 	add.w	r3, r3, #19
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80038a0:	f102 021c 	add.w	r2, r2, #28
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	f77f af7a 	ble.w	80037a0 <storeProtocol+0x220>
			}
		}
	}
	HAL_FLASH_Lock();  // Unlock flash for writing
 80038ac:	f001 f94c 	bl	8004b48 <HAL_FLASH_Lock>

	//output:flash memory now has the lines of protocol storage in there
	//the remaining space is still 0xFF in flash
	return 1;
 80038b0:	2301      	movs	r3, #1
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	f507 4796 	add.w	r7, r7, #19200	@ 0x4b00
 80038b8:	3720      	adds	r7, #32
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <get_num_protocols_in_sector>:

//return number of protocols in the sector
uint8_t get_num_protocols_in_sector(uint32_t sector) {
 80038be:	b580      	push	{r7, lr}
 80038c0:	b086      	sub	sp, #24
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
	uint32_t flash_address = get_sector_address(sector);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fafe 	bl	8003ec8 <get_sector_address>
 80038cc:	6138      	str	r0, [r7, #16]

	uint8_t i = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 80038d2:	2300      	movs	r3, #0
 80038d4:	75fb      	strb	r3, [r7, #23]
 80038d6:	e011      	b.n	80038fc <get_num_protocols_in_sector+0x3e>
		uint8_t first_char = *(uint8_t*) (flash_address + i * PROTOCOL_SIZE);
 80038d8:	7dfb      	ldrb	r3, [r7, #23]
 80038da:	f241 7270 	movw	r2, #6000	@ 0x1770
 80038de:	fb02 f303 	mul.w	r3, r2, r3
 80038e2:	461a      	mov	r2, r3
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4413      	add	r3, r2
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	73fb      	strb	r3, [r7, #15]
		//memory in flash is default 0xFF
		if (first_char == 0xFF) {
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	2bff      	cmp	r3, #255	@ 0xff
 80038f0:	d101      	bne.n	80038f6 <get_num_protocols_in_sector+0x38>
			return i;
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
 80038f4:	e006      	b.n	8003904 <get_num_protocols_in_sector+0x46>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 80038f6:	7dfb      	ldrb	r3, [r7, #23]
 80038f8:	3301      	adds	r3, #1
 80038fa:	75fb      	strb	r3, [r7, #23]
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d9ea      	bls.n	80038d8 <get_num_protocols_in_sector+0x1a>
		}
	}
	return i;
 8003902:	7dfb      	ldrb	r3, [r7, #23]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <getFreeSector>:

//check each sector sequentially for any space.
//return the first sector number you find that has space
uint8_t getFreeSector(void) {
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
	uint8_t i = 1;
 8003912:	2301      	movs	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
	//check every sector starting at 1
	for (i = 1; i < (NUMBER_OF_SECTORS + 1); i++) {
 8003916:	2301      	movs	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
 800391a:	e01f      	b.n	800395c <getFreeSector+0x50>
		//check each potential protocol slot in the current sector
		for (uint8_t j = 0; j < MAX_PROTOCOLS_IN_SECTOR; j++) {
 800391c:	2300      	movs	r3, #0
 800391e:	73bb      	strb	r3, [r7, #14]
 8003920:	e016      	b.n	8003950 <getFreeSector+0x44>
			//check first char of the given protocol in the current sector
			uint32_t flash_address = get_sector_address(i) + j * PROTOCOL_SIZE;
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	4618      	mov	r0, r3
 8003926:	f000 facf 	bl	8003ec8 <get_sector_address>
 800392a:	4602      	mov	r2, r0
 800392c:	7bbb      	ldrb	r3, [r7, #14]
 800392e:	f241 7170 	movw	r1, #6000	@ 0x1770
 8003932:	fb01 f303 	mul.w	r3, r1, r3
 8003936:	4413      	add	r3, r2
 8003938:	60bb      	str	r3, [r7, #8]
			char first_char = *(char*) (flash_address);
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	71fb      	strb	r3, [r7, #7]
			//if memory address is empty, this sector is free
			if (first_char == 0xFF) {
 8003940:	79fb      	ldrb	r3, [r7, #7]
 8003942:	2bff      	cmp	r3, #255	@ 0xff
 8003944:	d101      	bne.n	800394a <getFreeSector+0x3e>
				return i;
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	e00e      	b.n	8003968 <getFreeSector+0x5c>
		for (uint8_t j = 0; j < MAX_PROTOCOLS_IN_SECTOR; j++) {
 800394a:	7bbb      	ldrb	r3, [r7, #14]
 800394c:	3301      	adds	r3, #1
 800394e:	73bb      	strb	r3, [r7, #14]
 8003950:	7bbb      	ldrb	r3, [r7, #14]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d9e5      	bls.n	8003922 <getFreeSector+0x16>
	for (i = 1; i < (NUMBER_OF_SECTORS + 1); i++) {
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	3301      	adds	r3, #1
 800395a:	73fb      	strb	r3, [r7, #15]
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	2b0e      	cmp	r3, #14
 8003960:	d9dc      	bls.n	800391c <getFreeSector+0x10>
			}
		}
	}
	//if somehow all sectors are full, return 15 or higher (16 in this case)
	return i + 1;
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	3301      	adds	r3, #1
 8003966:	b2db      	uxtb	r3, r3
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <transmitProtocol>:

/**
 * @brief: Transmit protocol from flash memory to ESP32 via UART string-by-string
 * @param sector: which sector the protocol is stored in
 */
void transmitProtocol(uint32_t sector, uint32_t offset) {
 8003970:	b580      	push	{r7, lr}
 8003972:	b08c      	sub	sp, #48	@ 0x30
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
	char output[MAX_LINE_LENGTH] = { '\0' };
 800397a:	2300      	movs	r3, #0
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	f107 030c 	add.w	r3, r7, #12
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	605a      	str	r2, [r3, #4]
 8003988:	609a      	str	r2, [r3, #8]
 800398a:	60da      	str	r2, [r3, #12]
 800398c:	611a      	str	r2, [r3, #16]
 800398e:	615a      	str	r2, [r3, #20]
 8003990:	619a      	str	r2, [r3, #24]
	uint32_t flash_address = get_sector_address(sector) + offset * PROTOCOL_SIZE;
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fa98 	bl	8003ec8 <get_sector_address>
 8003998:	4602      	mov	r2, r0
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	f241 7170 	movw	r1, #6000	@ 0x1770
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	4413      	add	r3, r2
 80039a6:	62bb      	str	r3, [r7, #40]	@ 0x28

	//printf("\nNew Protocol\n"); //just for debugging

	//we need to process up to 1028 G-code commands
	//but if we run into an invalid string, gcode file is over
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 80039a8:	2300      	movs	r3, #0
 80039aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80039ae:	e028      	b.n	8003a02 <transmitProtocol+0x92>
		//an alternative to resetting the temp buffer is to only read up to newline
		memset(output, 0, MAX_LINE_LENGTH); // Sets all elements of buffer to 0
 80039b0:	f107 0308 	add.w	r3, r7, #8
 80039b4:	2220      	movs	r2, #32
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f00b fd81 	bl	800f4c0 <memset>
		if (read_from_flash(output, flash_address + i * MAX_LINE_LENGTH)) {
 80039be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80039c2:	015b      	lsls	r3, r3, #5
 80039c4:	461a      	mov	r2, r3
 80039c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c8:	441a      	add	r2, r3
 80039ca:	f107 0308 	add.w	r3, r7, #8
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff fda0 	bl	8003516 <read_from_flash>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00d      	beq.n	80039f8 <transmitProtocol+0x88>
			//printf("%s", output);
			HAL_UART_Transmit(&huart2, (uint8_t*) output, strlen(output),
 80039dc:	f107 0308 	add.w	r3, r7, #8
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fc fc05 	bl	80001f0 <strlen>
 80039e6:	4603      	mov	r3, r0
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	f107 0108 	add.w	r1, r7, #8
 80039ee:	f04f 33ff 	mov.w	r3, #4294967295
 80039f2:	4808      	ldr	r0, [pc, #32]	@ (8003a14 <transmitProtocol+0xa4>)
 80039f4:	f005 fe18 	bl	8009628 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 80039f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80039fc:	3301      	adds	r3, #1
 80039fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003a02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003a06:	2bc7      	cmp	r3, #199	@ 0xc7
 8003a08:	d9d2      	bls.n	80039b0 <transmitProtocol+0x40>
			HAL_MAX_DELAY);
		}
	}
}
 8003a0a:	bf00      	nop
 8003a0c:	bf00      	nop
 8003a0e:	3730      	adds	r7, #48	@ 0x30
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20000528 	.word	0x20000528

08003a18 <queueProtocol>:

/**
 * @brief: Queue protocol from flash memory to RAM buffer
 * @param sector: which sector the protocol is stored in
 */
void queueProtocol(uint32_t sector, uint32_t offset) {
 8003a18:	b5b0      	push	{r4, r5, r7, lr}
 8003a1a:	b08c      	sub	sp, #48	@ 0x30
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
	char output[MAX_LINE_LENGTH] = { '\0' };
 8003a22:	2300      	movs	r3, #0
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	f107 030c 	add.w	r3, r7, #12
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	605a      	str	r2, [r3, #4]
 8003a30:	609a      	str	r2, [r3, #8]
 8003a32:	60da      	str	r2, [r3, #12]
 8003a34:	611a      	str	r2, [r3, #16]
 8003a36:	615a      	str	r2, [r3, #20]
 8003a38:	619a      	str	r2, [r3, #24]
	uint32_t flash_address = get_sector_address(sector) + offset * PROTOCOL_SIZE;
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 fa44 	bl	8003ec8 <get_sector_address>
 8003a40:	4602      	mov	r2, r0
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	f241 7170 	movw	r1, #6000	@ 0x1770
 8003a48:	fb01 f303 	mul.w	r3, r1, r3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t last_line = 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 8003a56:	2300      	movs	r3, #0
 8003a58:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8003a5c:	e030      	b.n	8003ac0 <queueProtocol+0xa8>
		memset(output, 0, MAX_LINE_LENGTH); // Sets all elements of buffer to 0
 8003a5e:	f107 0308 	add.w	r3, r7, #8
 8003a62:	2220      	movs	r2, #32
 8003a64:	2100      	movs	r1, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f00b fd2a 	bl	800f4c0 <memset>
		if (read_from_flash(output, flash_address + i * MAX_LINE_LENGTH)) {
 8003a6c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a70:	015b      	lsls	r3, r3, #5
 8003a72:	461a      	mov	r2, r3
 8003a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a76:	441a      	add	r2, r3
 8003a78:	f107 0308 	add.w	r3, r7, #8
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff fd49 	bl	8003516 <read_from_flash>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d015      	beq.n	8003ab6 <queueProtocol+0x9e>
			strcpy(queueBuffer[queueSize][i], output);
 8003a8a:	4b21      	ldr	r3, [pc, #132]	@ (8003b10 <queueProtocol+0xf8>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	4619      	mov	r1, r3
 8003a90:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a94:	22c8      	movs	r2, #200	@ 0xc8
 8003a96:	fb01 f202 	mul.w	r2, r1, r2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	015b      	lsls	r3, r3, #5
 8003a9e:	4a1d      	ldr	r2, [pc, #116]	@ (8003b14 <queueProtocol+0xfc>)
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f107 0208 	add.w	r2, r7, #8
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f00b fd94 	bl	800f5d6 <strcpy>
			last_line = i;
 8003aae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003ab2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 8003ab6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003aba:	3301      	adds	r3, #1
 8003abc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8003ac0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003ac4:	2bc7      	cmp	r3, #199	@ 0xc7
 8003ac6:	d9ca      	bls.n	8003a5e <queueProtocol+0x46>
		}
	}
	//dont store the tab operator of protocol for queueing
	queueBuffer[queueSize][last_line][strlen(queueBuffer[queueSize][last_line])
 8003ac8:	4b11      	ldr	r3, [pc, #68]	@ (8003b10 <queueProtocol+0xf8>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	461d      	mov	r5, r3
 8003ace:	f897 402f 	ldrb.w	r4, [r7, #47]	@ 0x2f
 8003ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8003b10 <queueProtocol+0xf8>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003adc:	22c8      	movs	r2, #200	@ 0xc8
 8003ade:	fb01 f202 	mul.w	r2, r1, r2
 8003ae2:	4413      	add	r3, r2
 8003ae4:	015b      	lsls	r3, r3, #5
 8003ae6:	4a0b      	ldr	r2, [pc, #44]	@ (8003b14 <queueProtocol+0xfc>)
 8003ae8:	4413      	add	r3, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fc fb80 	bl	80001f0 <strlen>
 8003af0:	4603      	mov	r3, r0
			- 1] = NULL_CHAR; //strlen gives the size of string. tab operator is size-1
 8003af2:	3b01      	subs	r3, #1
 8003af4:	4907      	ldr	r1, [pc, #28]	@ (8003b14 <queueProtocol+0xfc>)
 8003af6:	22c8      	movs	r2, #200	@ 0xc8
 8003af8:	fb05 f202 	mul.w	r2, r5, r2
 8003afc:	4422      	add	r2, r4
 8003afe:	0152      	lsls	r2, r2, #5
 8003b00:	440a      	add	r2, r1
 8003b02:	4413      	add	r3, r2
 8003b04:	2200      	movs	r2, #0
 8003b06:	701a      	strb	r2, [r3, #0]
}
 8003b08:	bf00      	nop
 8003b0a:	3730      	adds	r7, #48	@ 0x30
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8003b10:	20010004 	.word	0x20010004
 8003b14:	20000604 	.word	0x20000604

08003b18 <transmitQueuedProtocols>:

/**
 * @brief: Transmit queued protocols from RAM buffer to ESP32 via UART string-by-string
 * @param queueSize:
 */
void transmitQueuedProtocols(uint8_t queueSize) {
 8003b18:	b590      	push	{r4, r7, lr}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	71fb      	strb	r3, [r7, #7]
	//i need to send a filler title
	//printf("FillerTitle\n");
	HAL_UART_Transmit(&huart2, (uint8_t*) "Filler\r\n", strlen("Filler\r\n"),
 8003b22:	f04f 33ff 	mov.w	r3, #4294967295
 8003b26:	2208      	movs	r2, #8
 8003b28:	491f      	ldr	r1, [pc, #124]	@ (8003ba8 <transmitQueuedProtocols+0x90>)
 8003b2a:	4820      	ldr	r0, [pc, #128]	@ (8003bac <transmitQueuedProtocols+0x94>)
 8003b2c:	f005 fd7c 	bl	8009628 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

	//transmit the queued protocols
	for (uint8_t i = 0; i < queueSize; i++) {
 8003b30:	2300      	movs	r3, #0
 8003b32:	73fb      	strb	r3, [r7, #15]
 8003b34:	e028      	b.n	8003b88 <transmitQueuedProtocols+0x70>
		for (uint8_t j = 1; j < MAX_LINES; j++) {
 8003b36:	2301      	movs	r3, #1
 8003b38:	73bb      	strb	r3, [r7, #14]
 8003b3a:	e01f      	b.n	8003b7c <transmitQueuedProtocols+0x64>
			//printf(queueBuffer[i][j]);
			HAL_UART_Transmit(&huart2, (uint8_t*) queueBuffer[i][j],
 8003b3c:	7bfa      	ldrb	r2, [r7, #15]
 8003b3e:	7bbb      	ldrb	r3, [r7, #14]
 8003b40:	21c8      	movs	r1, #200	@ 0xc8
 8003b42:	fb01 f202 	mul.w	r2, r1, r2
 8003b46:	4413      	add	r3, r2
 8003b48:	015b      	lsls	r3, r3, #5
 8003b4a:	4a19      	ldr	r2, [pc, #100]	@ (8003bb0 <transmitQueuedProtocols+0x98>)
 8003b4c:	189c      	adds	r4, r3, r2
					strlen(queueBuffer[i][j]), HAL_MAX_DELAY);
 8003b4e:	7bfa      	ldrb	r2, [r7, #15]
 8003b50:	7bbb      	ldrb	r3, [r7, #14]
 8003b52:	21c8      	movs	r1, #200	@ 0xc8
 8003b54:	fb01 f202 	mul.w	r2, r1, r2
 8003b58:	4413      	add	r3, r2
 8003b5a:	015b      	lsls	r3, r3, #5
 8003b5c:	4a14      	ldr	r2, [pc, #80]	@ (8003bb0 <transmitQueuedProtocols+0x98>)
 8003b5e:	4413      	add	r3, r2
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fc fb45 	bl	80001f0 <strlen>
 8003b66:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) queueBuffer[i][j],
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6e:	4621      	mov	r1, r4
 8003b70:	480e      	ldr	r0, [pc, #56]	@ (8003bac <transmitQueuedProtocols+0x94>)
 8003b72:	f005 fd59 	bl	8009628 <HAL_UART_Transmit>
		for (uint8_t j = 1; j < MAX_LINES; j++) {
 8003b76:	7bbb      	ldrb	r3, [r7, #14]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	73bb      	strb	r3, [r7, #14]
 8003b7c:	7bbb      	ldrb	r3, [r7, #14]
 8003b7e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003b80:	d9dc      	bls.n	8003b3c <transmitQueuedProtocols+0x24>
	for (uint8_t i = 0; i < queueSize; i++) {
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	3301      	adds	r3, #1
 8003b86:	73fb      	strb	r3, [r7, #15]
 8003b88:	7bfa      	ldrb	r2, [r7, #15]
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d3d2      	bcc.n	8003b36 <transmitQueuedProtocols+0x1e>
//	//debugging print
//	for (int a = 0; a < queueSize; a++) {
//		printf("%s\n", queueBuffer[a]);
//	}
	//finish with a tab operator
	HAL_UART_Transmit(&huart2, (uint8_t*) "\t", 1, HAL_MAX_DELAY);
 8003b90:	f04f 33ff 	mov.w	r3, #4294967295
 8003b94:	2201      	movs	r2, #1
 8003b96:	4907      	ldr	r1, [pc, #28]	@ (8003bb4 <transmitQueuedProtocols+0x9c>)
 8003b98:	4804      	ldr	r0, [pc, #16]	@ (8003bac <transmitQueuedProtocols+0x94>)
 8003b9a:	f005 fd45 	bl	8009628 <HAL_UART_Transmit>
}
 8003b9e:	bf00      	nop
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd90      	pop	{r4, r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	080103f4 	.word	0x080103f4
 8003bac:	20000528 	.word	0x20000528
 8003bb0:	20000604 	.word	0x20000604
 8003bb4:	08010400 	.word	0x08010400

08003bb8 <deleteProtocol>:
 * @brief: Delete protocol from flash memory to ESP32 via UART string-by-string
 * @param sector: which sector the protocol is stored in
 * @param offset: the exact slot in the sector the protocol is stored in
 * @retval: none
 */
void deleteProtocol(uint32_t sector, uint32_t offset) {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	f5ad 4d96 	sub.w	sp, sp, #19200	@ 0x4b00
 8003bbe:	b09c      	sub	sp, #112	@ 0x70
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003bc6:	f6a3 336c 	subw	r3, r3, #2924	@ 0xb6c
 8003bca:	6018      	str	r0, [r3, #0]
 8003bcc:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003bd0:	f5a3 6337 	sub.w	r3, r3, #2928	@ 0xb70
 8003bd4:	6019      	str	r1, [r3, #0]
	//initialize variables
	uint8_t new_offset = offset + 1; //have it range from 1-3
 8003bd6:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003bda:	f5a3 6337 	sub.w	r3, r3, #2928	@ 0xb70
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	3301      	adds	r3, #1
 8003be4:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003be8:	f102 025f 	add.w	r2, r2, #95	@ 0x5f
 8003bec:	7013      	strb	r3, [r2, #0]
	int i = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003bf4:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003bf8:	6013      	str	r3, [r2, #0]
	int j = 0; //indices for moving through flash memory
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003c00:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003c04:	6013      	str	r3, [r2, #0]
	char protocolStorage[MAX_PROTOCOLS_IN_SECTOR][MAX_LINES][MAX_LINE_LENGTH] =
 8003c06:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003c0a:	f6a3 3324 	subw	r3, r3, #2852	@ 0xb24
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f44f 4396 	mov.w	r3, #19200	@ 0x4b00
 8003c14:	461a      	mov	r2, r3
 8003c16:	2100      	movs	r1, #0
 8003c18:	f00b fc52 	bl	800f4c0 <memset>
			{ { { '\0' } } };
	uint32_t flash_address = get_sector_address(sector);
 8003c1c:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003c20:	f6a3 336c 	subw	r3, r3, #2924	@ 0xb6c
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	f000 f94f 	bl	8003ec8 <get_sector_address>
 8003c2a:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003c2e:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8003c32:	6018      	str	r0, [r3, #0]
	char trashLine[MAX_LINE_LENGTH];
	memset(trashLine, 0xFF, sizeof(trashLine));
 8003c34:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003c38:	3b44      	subs	r3, #68	@ 0x44
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	21ff      	movs	r1, #255	@ 0xff
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f00b fc3e 	bl	800f4c0 <memset>
	char nullLine[MAX_LINE_LENGTH];
	memset(nullLine, 0x00, sizeof(nullLine));
 8003c44:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003c48:	3b64      	subs	r3, #100	@ 0x64
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f00b fc36 	bl	800f4c0 <memset>
	uint8_t num_protocols = get_num_protocols_in_sector(sector);
 8003c54:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003c58:	f6a3 336c 	subw	r3, r3, #2924	@ 0xb6c
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	f7ff fe2e 	bl	80038be <get_num_protocols_in_sector>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003c68:	f102 0257 	add.w	r2, r2, #87	@ 0x57
 8003c6c:	7013      	strb	r3, [r2, #0]

	int a = 0;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003c74:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8003c78:	6013      	str	r3, [r2, #0]
	int b = 0; //separate indices for protocolstorage
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003c80:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003c84:	6013      	str	r3, [r2, #0]

	//copy all protocols in sector to local buffer
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8003c86:	2300      	movs	r3, #0
 8003c88:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003c8c:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	e082      	b.n	8003d9a <deleteProtocol+0x1e2>
		if (i != offset) {
 8003c94:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003c98:	f5a3 6337 	sub.w	r3, r3, #2928	@ 0xb70
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003ca2:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d06b      	beq.n	8003d84 <deleteProtocol+0x1cc>
			//copy all lines of the protocol into the buffer
			for (j = 0; j < MAX_LINES; j++) {
 8003cac:	2300      	movs	r3, #0
 8003cae:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003cb2:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	e04c      	b.n	8003d54 <deleteProtocol+0x19c>
				//get the address for the current line in the current protocol
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8003cba:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003cbe:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f241 7270 	movw	r2, #6000	@ 0x1770
 8003cc8:	fb02 f303 	mul.w	r3, r2, r3
						+ j * MAX_LINE_LENGTH;
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003cd2:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	015b      	lsls	r3, r3, #5
 8003cda:	4413      	add	r3, r2
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8003cdc:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003ce0:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8003ce4:	6812      	ldr	r2, [r2, #0]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003cec:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 8003cf0:	6013      	str	r3, [r2, #0]
				//read lines from memory into buffer until you reach garbage
				read_from_flash(protocolStorage[a][b], temp_address); //only updates protocolStorage if its a valid line from memory
 8003cf2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003cf6:	3b24      	subs	r3, #36	@ 0x24
 8003cf8:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003cfc:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8003d00:	6812      	ldr	r2, [r2, #0]
 8003d02:	21c8      	movs	r1, #200	@ 0xc8
 8003d04:	fb02 f101 	mul.w	r1, r2, r1
 8003d08:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003d0c:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	440a      	add	r2, r1
 8003d14:	0152      	lsls	r2, r2, #5
 8003d16:	4413      	add	r3, r2
 8003d18:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003d1c:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 8003d20:	6811      	ldr	r1, [r2, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff fbf7 	bl	8003516 <read_from_flash>
				b++;
 8003d28:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003d2c:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3301      	adds	r3, #1
 8003d34:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003d38:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003d3c:	6013      	str	r3, [r2, #0]
			for (j = 0; j < MAX_LINES; j++) {
 8003d3e:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003d42:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003d4e:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003d58:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003d60:	ddab      	ble.n	8003cba <deleteProtocol+0x102>
			}
			a++;
 8003d62:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003d66:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003d72:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8003d76:	6013      	str	r3, [r2, #0]
			b = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003d7e:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003d82:	6013      	str	r3, [r2, #0]
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8003d84:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003d88:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003d94:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003d9e:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	f77f af75 	ble.w	8003c94 <deleteProtocol+0xdc>
		}
	}

	//write existing protocols except the one to be deleted back to flash
	erase_sector(sector); //erase sector before writing
 8003daa:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003dae:	f6a3 336c 	subw	r3, r3, #2924	@ 0xb6c
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	f7ff fb72 	bl	800349c <erase_sector>
	HAL_FLASH_Unlock(); // Unlock flash for writing. note: the erase_sector() unlocks and locks itself
 8003db8:	f000 fea4 	bl	8004b04 <HAL_FLASH_Unlock>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003dc2:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	e05a      	b.n	8003e80 <deleteProtocol+0x2c8>
		for (j = 0; j < MAX_LINES; j++) {
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003dd0:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	e041      	b.n	8003e5c <deleteProtocol+0x2a4>
			//if first character of a line is null from qr scanner or trash from flash, ignore it
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8003dd8:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003ddc:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f241 7270 	movw	r2, #6000	@ 0x1770
 8003de6:	fb02 f303 	mul.w	r3, r2, r3
					+ j * MAX_LINE_LENGTH;
 8003dea:	461a      	mov	r2, r3
 8003dec:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003df0:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	015b      	lsls	r3, r3, #5
 8003df8:	4413      	add	r3, r2
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8003dfa:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003dfe:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8003e02:	6812      	ldr	r2, [r2, #0]
 8003e04:	4413      	add	r3, r2
 8003e06:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003e0a:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 8003e0e:	6013      	str	r3, [r2, #0]
			write_to_flash(protocolStorage[i][j], temp_address);
 8003e10:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003e14:	3b24      	subs	r3, #36	@ 0x24
 8003e16:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003e1a:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	21c8      	movs	r1, #200	@ 0xc8
 8003e22:	fb02 f101 	mul.w	r1, r2, r1
 8003e26:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003e2a:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	440a      	add	r2, r1
 8003e32:	0152      	lsls	r2, r2, #5
 8003e34:	4413      	add	r3, r2
 8003e36:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003e3a:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 8003e3e:	6811      	ldr	r1, [r2, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff fb3f 	bl	80034c4 <write_to_flash>
		for (j = 0; j < MAX_LINES; j++) {
 8003e46:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003e4a:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3301      	adds	r3, #1
 8003e52:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003e56:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003e60:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2bc7      	cmp	r3, #199	@ 0xc7
 8003e68:	ddb6      	ble.n	8003dd8 <deleteProtocol+0x220>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8003e6a:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003e6e:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3301      	adds	r3, #1
 8003e76:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003e7a:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003e84:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	dd9d      	ble.n	8003dca <deleteProtocol+0x212>

		}
	}
	HAL_FLASH_Lock();  // Unlock flash for writing
 8003e8e:	f000 fe5b 	bl	8004b48 <HAL_FLASH_Lock>
}
 8003e92:	bf00      	nop
 8003e94:	f507 4796 	add.w	r7, r7, #19200	@ 0x4b00
 8003e98:	3770      	adds	r7, #112	@ 0x70
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <SendStopMotorsMessage>:
//		}
//	}
//	HAL_FLASH_Lock();  // Unlock flash for writing
//}

void SendStopMotorsMessage(void) {
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
	//printf("S\n");
	HAL_UART_Transmit(&huart2, (uint8_t*) "S", 1, HAL_MAX_DELAY);
 8003ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	4904      	ldr	r1, [pc, #16]	@ (8003ebc <SendStopMotorsMessage+0x1c>)
 8003eac:	4804      	ldr	r0, [pc, #16]	@ (8003ec0 <SendStopMotorsMessage+0x20>)
 8003eae:	f005 fbbb 	bl	8009628 <HAL_UART_Transmit>
	rx_byte = 0; //otherwise when you run a new protocol is has old info
 8003eb2:	4b04      	ldr	r3, [pc, #16]	@ (8003ec4 <SendStopMotorsMessage+0x24>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	701a      	strb	r2, [r3, #0]
}
 8003eb8:	bf00      	nop
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	08010404 	.word	0x08010404
 8003ec0:	20000528 	.word	0x20000528
 8003ec4:	200005c8 	.word	0x200005c8

08003ec8 <get_sector_address>:
void write_number_to_flash(uint32_t flash_address, uint32_t number) {
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flash_address, number);
}

//I name sectors from 1-14. the actual sectors are from 5-23. this functions maps them
uint32_t get_sector_address(uint32_t sector) {
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
	switch (sector) {
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	2b0d      	cmp	r3, #13
 8003ed6:	d83b      	bhi.n	8003f50 <get_sector_address+0x88>
 8003ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee0 <get_sector_address+0x18>)
 8003eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ede:	bf00      	nop
 8003ee0:	08003f19 	.word	0x08003f19
 8003ee4:	08003f1d 	.word	0x08003f1d
 8003ee8:	08003f21 	.word	0x08003f21
 8003eec:	08003f25 	.word	0x08003f25
 8003ef0:	08003f29 	.word	0x08003f29
 8003ef4:	08003f2d 	.word	0x08003f2d
 8003ef8:	08003f31 	.word	0x08003f31
 8003efc:	08003f35 	.word	0x08003f35
 8003f00:	08003f39 	.word	0x08003f39
 8003f04:	08003f3d 	.word	0x08003f3d
 8003f08:	08003f41 	.word	0x08003f41
 8003f0c:	08003f45 	.word	0x08003f45
 8003f10:	08003f49 	.word	0x08003f49
 8003f14:	08003f4d 	.word	0x08003f4d
	case 1:
		return SECTOR_5;
 8003f18:	4b11      	ldr	r3, [pc, #68]	@ (8003f60 <get_sector_address+0x98>)
 8003f1a:	e01a      	b.n	8003f52 <get_sector_address+0x8a>
	case 2:
		return SECTOR_6;
 8003f1c:	4b11      	ldr	r3, [pc, #68]	@ (8003f64 <get_sector_address+0x9c>)
 8003f1e:	e018      	b.n	8003f52 <get_sector_address+0x8a>
	case 3:
		return SECTOR_7;
 8003f20:	4b11      	ldr	r3, [pc, #68]	@ (8003f68 <get_sector_address+0xa0>)
 8003f22:	e016      	b.n	8003f52 <get_sector_address+0x8a>
	case 4:
		return SECTOR_8;
 8003f24:	4b11      	ldr	r3, [pc, #68]	@ (8003f6c <get_sector_address+0xa4>)
 8003f26:	e014      	b.n	8003f52 <get_sector_address+0x8a>
	case 5:
		return SECTOR_9;
 8003f28:	4b11      	ldr	r3, [pc, #68]	@ (8003f70 <get_sector_address+0xa8>)
 8003f2a:	e012      	b.n	8003f52 <get_sector_address+0x8a>
	case 6:
		return SECTOR_10;
 8003f2c:	4b11      	ldr	r3, [pc, #68]	@ (8003f74 <get_sector_address+0xac>)
 8003f2e:	e010      	b.n	8003f52 <get_sector_address+0x8a>
	case 7:
		return SECTOR_11;
 8003f30:	4b11      	ldr	r3, [pc, #68]	@ (8003f78 <get_sector_address+0xb0>)
 8003f32:	e00e      	b.n	8003f52 <get_sector_address+0x8a>
	case 8:
		return SECTOR_17;
 8003f34:	4b11      	ldr	r3, [pc, #68]	@ (8003f7c <get_sector_address+0xb4>)
 8003f36:	e00c      	b.n	8003f52 <get_sector_address+0x8a>
	case 9:
		return SECTOR_18;
 8003f38:	4b11      	ldr	r3, [pc, #68]	@ (8003f80 <get_sector_address+0xb8>)
 8003f3a:	e00a      	b.n	8003f52 <get_sector_address+0x8a>
	case 10:
		return SECTOR_19;
 8003f3c:	4b11      	ldr	r3, [pc, #68]	@ (8003f84 <get_sector_address+0xbc>)
 8003f3e:	e008      	b.n	8003f52 <get_sector_address+0x8a>
	case 11:
		return SECTOR_20;
 8003f40:	4b11      	ldr	r3, [pc, #68]	@ (8003f88 <get_sector_address+0xc0>)
 8003f42:	e006      	b.n	8003f52 <get_sector_address+0x8a>
	case 12:
		return SECTOR_21;
 8003f44:	4b11      	ldr	r3, [pc, #68]	@ (8003f8c <get_sector_address+0xc4>)
 8003f46:	e004      	b.n	8003f52 <get_sector_address+0x8a>
	case 13:
		return SECTOR_22;
 8003f48:	4b11      	ldr	r3, [pc, #68]	@ (8003f90 <get_sector_address+0xc8>)
 8003f4a:	e002      	b.n	8003f52 <get_sector_address+0x8a>
	case 14:
		return SECTOR_23;
 8003f4c:	4b11      	ldr	r3, [pc, #68]	@ (8003f94 <get_sector_address+0xcc>)
 8003f4e:	e000      	b.n	8003f52 <get_sector_address+0x8a>
	default:
		break;
 8003f50:	bf00      	nop
	}
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	08020000 	.word	0x08020000
 8003f64:	08040000 	.word	0x08040000
 8003f68:	08060000 	.word	0x08060000
 8003f6c:	08080000 	.word	0x08080000
 8003f70:	080a0000 	.word	0x080a0000
 8003f74:	080c0000 	.word	0x080c0000
 8003f78:	080e0000 	.word	0x080e0000
 8003f7c:	08120000 	.word	0x08120000
 8003f80:	08140000 	.word	0x08140000
 8003f84:	08160000 	.word	0x08160000
 8003f88:	08180000 	.word	0x08180000
 8003f8c:	081a0000 	.word	0x081a0000
 8003f90:	081c0000 	.word	0x081c0000
 8003f94:	081e0000 	.word	0x081e0000

08003f98 <sector_mapping>:

uint32_t sector_mapping(uint32_t sector) {
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
	switch (sector) {
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	2b0d      	cmp	r3, #13
 8003fa6:	d83b      	bhi.n	8004020 <sector_mapping+0x88>
 8003fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb0 <sector_mapping+0x18>)
 8003faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fae:	bf00      	nop
 8003fb0:	08003fe9 	.word	0x08003fe9
 8003fb4:	08003fed 	.word	0x08003fed
 8003fb8:	08003ff1 	.word	0x08003ff1
 8003fbc:	08003ff5 	.word	0x08003ff5
 8003fc0:	08003ff9 	.word	0x08003ff9
 8003fc4:	08003ffd 	.word	0x08003ffd
 8003fc8:	08004001 	.word	0x08004001
 8003fcc:	08004005 	.word	0x08004005
 8003fd0:	08004009 	.word	0x08004009
 8003fd4:	0800400d 	.word	0x0800400d
 8003fd8:	08004011 	.word	0x08004011
 8003fdc:	08004015 	.word	0x08004015
 8003fe0:	08004019 	.word	0x08004019
 8003fe4:	0800401d 	.word	0x0800401d
	case 1:
		return 5;
 8003fe8:	2305      	movs	r3, #5
 8003fea:	e019      	b.n	8004020 <sector_mapping+0x88>
	case 2:
		return 6;
 8003fec:	2306      	movs	r3, #6
 8003fee:	e017      	b.n	8004020 <sector_mapping+0x88>
	case 3:
		return 7;
 8003ff0:	2307      	movs	r3, #7
 8003ff2:	e015      	b.n	8004020 <sector_mapping+0x88>
	case 4:
		return 8;
 8003ff4:	2308      	movs	r3, #8
 8003ff6:	e013      	b.n	8004020 <sector_mapping+0x88>
	case 5:
		return 9;
 8003ff8:	2309      	movs	r3, #9
 8003ffa:	e011      	b.n	8004020 <sector_mapping+0x88>
	case 6:
		return 10;
 8003ffc:	230a      	movs	r3, #10
 8003ffe:	e00f      	b.n	8004020 <sector_mapping+0x88>
	case 7:
		return 11;
 8004000:	230b      	movs	r3, #11
 8004002:	e00d      	b.n	8004020 <sector_mapping+0x88>
	case 8:
		return 17;
 8004004:	2311      	movs	r3, #17
 8004006:	e00b      	b.n	8004020 <sector_mapping+0x88>
	case 9:
		return 18;
 8004008:	2312      	movs	r3, #18
 800400a:	e009      	b.n	8004020 <sector_mapping+0x88>
	case 10:
		return 19;
 800400c:	2313      	movs	r3, #19
 800400e:	e007      	b.n	8004020 <sector_mapping+0x88>
	case 11:
		return 20;
 8004010:	2314      	movs	r3, #20
 8004012:	e005      	b.n	8004020 <sector_mapping+0x88>
	case 12:
		return 21;
 8004014:	2315      	movs	r3, #21
 8004016:	e003      	b.n	8004020 <sector_mapping+0x88>
	case 13:
		return 22;
 8004018:	2316      	movs	r3, #22
 800401a:	e001      	b.n	8004020 <sector_mapping+0x88>
	case 14:
		return 23;
 800401c:	2317      	movs	r3, #23
 800401e:	e7ff      	b.n	8004020 <sector_mapping+0x88>
	}
}
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_GPIO_EXTI_Callback>:

/*** Touchscreen Interrupt Handler ****/
//t_irq_pin is default high. it gets driven low while the screen is touched.
//the interrupt is triggered on falling edge.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == T_IRQ_Pin) {
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	2b10      	cmp	r3, #16
 800403a:	d11d      	bne.n	8004078 <HAL_GPIO_EXTI_Callback+0x4c>

		uint32_t current_time = HAL_GetTick(); // ms since startup
 800403c:	f000 fb3a 	bl	80046b4 <HAL_GetTick>
 8004040:	60f8      	str	r0, [r7, #12]

		//perform some debouncing for interrupt pin
		if ((current_time - last_interrupt_time) > DEBOUNCE_DELAY_MS) {
 8004042:	4b0f      	ldr	r3, [pc, #60]	@ (8004080 <HAL_GPIO_EXTI_Callback+0x54>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b1e      	cmp	r3, #30
 800404c:	d914      	bls.n	8004078 <HAL_GPIO_EXTI_Callback+0x4c>
			last_interrupt_time = current_time;
 800404e:	4a0c      	ldr	r2, [pc, #48]	@ (8004080 <HAL_GPIO_EXTI_Callback+0x54>)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6013      	str	r3, [r2, #0]

			//handle the actual interrupt below
			uint8_t currentTouchedState = HAL_GPIO_ReadPin(T_IRQ_GPIO_Port,
 8004054:	2110      	movs	r1, #16
 8004056:	480b      	ldr	r0, [pc, #44]	@ (8004084 <HAL_GPIO_EXTI_Callback+0x58>)
 8004058:	f001 f8c0 	bl	80051dc <HAL_GPIO_ReadPin>
 800405c:	4603      	mov	r3, r0
 800405e:	72fb      	strb	r3, [r7, #11]
			T_IRQ_Pin);
			//printf("%d\n", currentTouchedState)
			if (XPT2046_TouchPressed() && !touchFlag) {
 8004060:	f7fc faae 	bl	80005c0 <XPT2046_TouchPressed>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d006      	beq.n	8004078 <HAL_GPIO_EXTI_Callback+0x4c>
 800406a:	4b07      	ldr	r3, [pc, #28]	@ (8004088 <HAL_GPIO_EXTI_Callback+0x5c>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d102      	bne.n	8004078 <HAL_GPIO_EXTI_Callback+0x4c>
				touchFlag = 1;
 8004072:	4b05      	ldr	r3, [pc, #20]	@ (8004088 <HAL_GPIO_EXTI_Callback+0x5c>)
 8004074:	2201      	movs	r2, #1
 8004076:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == OTG_FS_OC_Pin) {
		//HAL_GPIO_WritePin(OTG_FS_PSO_GPIO_Port, OTG_FS_PSO_Pin, GPIO_PIN_SET);
	}
}
 8004078:	bf00      	nop
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	200005f4 	.word	0x200005f4
 8004084:	40020400 	.word	0x40020400
 8004088:	200005f8 	.word	0x200005f8

0800408c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004090:	b672      	cpsid	i
}
 8004092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004094:	bf00      	nop
 8004096:	e7fd      	b.n	8004094 <Error_Handler+0x8>

08004098 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800409e:	2300      	movs	r3, #0
 80040a0:	607b      	str	r3, [r7, #4]
 80040a2:	4b10      	ldr	r3, [pc, #64]	@ (80040e4 <HAL_MspInit+0x4c>)
 80040a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a6:	4a0f      	ldr	r2, [pc, #60]	@ (80040e4 <HAL_MspInit+0x4c>)
 80040a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80040ae:	4b0d      	ldr	r3, [pc, #52]	@ (80040e4 <HAL_MspInit+0x4c>)
 80040b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040b6:	607b      	str	r3, [r7, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040ba:	2300      	movs	r3, #0
 80040bc:	603b      	str	r3, [r7, #0]
 80040be:	4b09      	ldr	r3, [pc, #36]	@ (80040e4 <HAL_MspInit+0x4c>)
 80040c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c2:	4a08      	ldr	r2, [pc, #32]	@ (80040e4 <HAL_MspInit+0x4c>)
 80040c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80040ca:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <HAL_MspInit+0x4c>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40023800 	.word	0x40023800

080040e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08a      	sub	sp, #40	@ 0x28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f0:	f107 0314 	add.w	r3, r7, #20
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	609a      	str	r2, [r3, #8]
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a19      	ldr	r2, [pc, #100]	@ (800416c <HAL_SPI_MspInit+0x84>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d12b      	bne.n	8004162 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800410a:	2300      	movs	r3, #0
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	4b18      	ldr	r3, [pc, #96]	@ (8004170 <HAL_SPI_MspInit+0x88>)
 8004110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004112:	4a17      	ldr	r2, [pc, #92]	@ (8004170 <HAL_SPI_MspInit+0x88>)
 8004114:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004118:	6453      	str	r3, [r2, #68]	@ 0x44
 800411a:	4b15      	ldr	r3, [pc, #84]	@ (8004170 <HAL_SPI_MspInit+0x88>)
 800411c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800411e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004126:	2300      	movs	r3, #0
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	4b11      	ldr	r3, [pc, #68]	@ (8004170 <HAL_SPI_MspInit+0x88>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412e:	4a10      	ldr	r2, [pc, #64]	@ (8004170 <HAL_SPI_MspInit+0x88>)
 8004130:	f043 0310 	orr.w	r3, r3, #16
 8004134:	6313      	str	r3, [r2, #48]	@ 0x30
 8004136:	4b0e      	ldr	r3, [pc, #56]	@ (8004170 <HAL_SPI_MspInit+0x88>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413a:	f003 0310 	and.w	r3, r3, #16
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = T_SCK_Pin|T_CS_Pin|T_MISO_Pin|T_MOSI_Pin;
 8004142:	2374      	movs	r3, #116	@ 0x74
 8004144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004146:	2302      	movs	r3, #2
 8004148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414a:	2300      	movs	r3, #0
 800414c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800414e:	2303      	movs	r3, #3
 8004150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004152:	2305      	movs	r3, #5
 8004154:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004156:	f107 0314 	add.w	r3, r7, #20
 800415a:	4619      	mov	r1, r3
 800415c:	4805      	ldr	r0, [pc, #20]	@ (8004174 <HAL_SPI_MspInit+0x8c>)
 800415e:	f000 fe91 	bl	8004e84 <HAL_GPIO_Init>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 8004162:	bf00      	nop
 8004164:	3728      	adds	r7, #40	@ 0x28
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40013400 	.word	0x40013400
 8004170:	40023800 	.word	0x40023800
 8004174:	40021000 	.word	0x40021000

08004178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004188:	d10d      	bne.n	80041a6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	4b09      	ldr	r3, [pc, #36]	@ (80041b4 <HAL_TIM_Base_MspInit+0x3c>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004192:	4a08      	ldr	r2, [pc, #32]	@ (80041b4 <HAL_TIM_Base_MspInit+0x3c>)
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	6413      	str	r3, [r2, #64]	@ 0x40
 800419a:	4b06      	ldr	r3, [pc, #24]	@ (80041b4 <HAL_TIM_Base_MspInit+0x3c>)
 800419c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80041a6:	bf00      	nop
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40023800 	.word	0x40023800

080041b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a0b      	ldr	r2, [pc, #44]	@ (80041f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d10d      	bne.n	80041e6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	4b0a      	ldr	r3, [pc, #40]	@ (80041f8 <HAL_TIM_PWM_MspInit+0x40>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d2:	4a09      	ldr	r2, [pc, #36]	@ (80041f8 <HAL_TIM_PWM_MspInit+0x40>)
 80041d4:	f043 0302 	orr.w	r3, r3, #2
 80041d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80041da:	4b07      	ldr	r3, [pc, #28]	@ (80041f8 <HAL_TIM_PWM_MspInit+0x40>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80041e6:	bf00      	nop
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40000400 	.word	0x40000400
 80041f8:	40023800 	.word	0x40023800

080041fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004204:	f107 030c 	add.w	r3, r7, #12
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	605a      	str	r2, [r3, #4]
 800420e:	609a      	str	r2, [r3, #8]
 8004210:	60da      	str	r2, [r3, #12]
 8004212:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a12      	ldr	r2, [pc, #72]	@ (8004264 <HAL_TIM_MspPostInit+0x68>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d11d      	bne.n	800425a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800421e:	2300      	movs	r3, #0
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	4b11      	ldr	r3, [pc, #68]	@ (8004268 <HAL_TIM_MspPostInit+0x6c>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004226:	4a10      	ldr	r2, [pc, #64]	@ (8004268 <HAL_TIM_MspPostInit+0x6c>)
 8004228:	f043 0302 	orr.w	r3, r3, #2
 800422c:	6313      	str	r3, [r2, #48]	@ 0x30
 800422e:	4b0e      	ldr	r3, [pc, #56]	@ (8004268 <HAL_TIM_MspPostInit+0x6c>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	60bb      	str	r3, [r7, #8]
 8004238:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = BL_PWM_Pin;
 800423a:	2320      	movs	r3, #32
 800423c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423e:	2302      	movs	r3, #2
 8004240:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004246:	2300      	movs	r3, #0
 8004248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800424a:	2302      	movs	r3, #2
 800424c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_PWM_GPIO_Port, &GPIO_InitStruct);
 800424e:	f107 030c 	add.w	r3, r7, #12
 8004252:	4619      	mov	r1, r3
 8004254:	4805      	ldr	r0, [pc, #20]	@ (800426c <HAL_TIM_MspPostInit+0x70>)
 8004256:	f000 fe15 	bl	8004e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800425a:	bf00      	nop
 800425c:	3720      	adds	r7, #32
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40000400 	.word	0x40000400
 8004268:	40023800 	.word	0x40023800
 800426c:	40020400 	.word	0x40020400

08004270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	@ 0x28
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004278:	f107 0314 	add.w	r3, r7, #20
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	605a      	str	r2, [r3, #4]
 8004282:	609a      	str	r2, [r3, #8]
 8004284:	60da      	str	r2, [r3, #12]
 8004286:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a1d      	ldr	r2, [pc, #116]	@ (8004304 <HAL_UART_MspInit+0x94>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d133      	bne.n	80042fa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004292:	2300      	movs	r3, #0
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	4b1c      	ldr	r3, [pc, #112]	@ (8004308 <HAL_UART_MspInit+0x98>)
 8004298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429a:	4a1b      	ldr	r2, [pc, #108]	@ (8004308 <HAL_UART_MspInit+0x98>)
 800429c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80042a2:	4b19      	ldr	r3, [pc, #100]	@ (8004308 <HAL_UART_MspInit+0x98>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042aa:	613b      	str	r3, [r7, #16]
 80042ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	4b15      	ldr	r3, [pc, #84]	@ (8004308 <HAL_UART_MspInit+0x98>)
 80042b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b6:	4a14      	ldr	r2, [pc, #80]	@ (8004308 <HAL_UART_MspInit+0x98>)
 80042b8:	f043 0301 	orr.w	r3, r3, #1
 80042bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80042be:	4b12      	ldr	r3, [pc, #72]	@ (8004308 <HAL_UART_MspInit+0x98>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80042ca:	230c      	movs	r3, #12
 80042cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ce:	2302      	movs	r3, #2
 80042d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d2:	2300      	movs	r3, #0
 80042d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042d6:	2303      	movs	r3, #3
 80042d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80042da:	2307      	movs	r3, #7
 80042dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042de:	f107 0314 	add.w	r3, r7, #20
 80042e2:	4619      	mov	r1, r3
 80042e4:	4809      	ldr	r0, [pc, #36]	@ (800430c <HAL_UART_MspInit+0x9c>)
 80042e6:	f000 fdcd 	bl	8004e84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80042ea:	2200      	movs	r2, #0
 80042ec:	2100      	movs	r1, #0
 80042ee:	2026      	movs	r0, #38	@ 0x26
 80042f0:	f000 faeb 	bl	80048ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80042f4:	2026      	movs	r0, #38	@ 0x26
 80042f6:	f000 fb04 	bl	8004902 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80042fa:	bf00      	nop
 80042fc:	3728      	adds	r7, #40	@ 0x28
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40004400 	.word	0x40004400
 8004308:	40023800 	.word	0x40023800
 800430c:	40020000 	.word	0x40020000

08004310 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004316:	1d3b      	adds	r3, r7, #4
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	605a      	str	r2, [r3, #4]
 800431e:	609a      	str	r2, [r3, #8]
 8004320:	60da      	str	r2, [r3, #12]
 8004322:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004324:	4b1c      	ldr	r3, [pc, #112]	@ (8004398 <HAL_FMC_MspInit+0x88>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d131      	bne.n	8004390 <HAL_FMC_MspInit+0x80>
    return;
  }
  FMC_Initialized = 1;
 800432c:	4b1a      	ldr	r3, [pc, #104]	@ (8004398 <HAL_FMC_MspInit+0x88>)
 800432e:	2201      	movs	r2, #1
 8004330:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004332:	2300      	movs	r3, #0
 8004334:	603b      	str	r3, [r7, #0]
 8004336:	4b19      	ldr	r3, [pc, #100]	@ (800439c <HAL_FMC_MspInit+0x8c>)
 8004338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433a:	4a18      	ldr	r2, [pc, #96]	@ (800439c <HAL_FMC_MspInit+0x8c>)
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	6393      	str	r3, [r2, #56]	@ 0x38
 8004342:	4b16      	ldr	r3, [pc, #88]	@ (800439c <HAL_FMC_MspInit+0x8c>)
 8004344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800434e:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8004352:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004354:	2302      	movs	r3, #2
 8004356:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800435c:	2303      	movs	r3, #3
 800435e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004360:	230c      	movs	r3, #12
 8004362:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004364:	1d3b      	adds	r3, r7, #4
 8004366:	4619      	mov	r1, r3
 8004368:	480d      	ldr	r0, [pc, #52]	@ (80043a0 <HAL_FMC_MspInit+0x90>)
 800436a:	f000 fd8b 	bl	8004e84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800436e:	f64c 73b3 	movw	r3, #53171	@ 0xcfb3
 8004372:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004374:	2302      	movs	r3, #2
 8004376:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004378:	2300      	movs	r3, #0
 800437a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800437c:	2303      	movs	r3, #3
 800437e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004380:	230c      	movs	r3, #12
 8004382:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004384:	1d3b      	adds	r3, r7, #4
 8004386:	4619      	mov	r1, r3
 8004388:	4806      	ldr	r0, [pc, #24]	@ (80043a4 <HAL_FMC_MspInit+0x94>)
 800438a:	f000 fd7b 	bl	8004e84 <HAL_GPIO_Init>
 800438e:	e000      	b.n	8004392 <HAL_FMC_MspInit+0x82>
    return;
 8004390:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	20011910 	.word	0x20011910
 800439c:	40023800 	.word	0x40023800
 80043a0:	40021000 	.word	0x40021000
 80043a4:	40020c00 	.word	0x40020c00

080043a8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80043b0:	f7ff ffae 	bl	8004310 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80043b4:	bf00      	nop
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80043c0:	bf00      	nop
 80043c2:	e7fd      	b.n	80043c0 <NMI_Handler+0x4>

080043c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043c8:	bf00      	nop
 80043ca:	e7fd      	b.n	80043c8 <HardFault_Handler+0x4>

080043cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043d0:	bf00      	nop
 80043d2:	e7fd      	b.n	80043d0 <MemManage_Handler+0x4>

080043d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043d8:	bf00      	nop
 80043da:	e7fd      	b.n	80043d8 <BusFault_Handler+0x4>

080043dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043e0:	bf00      	nop
 80043e2:	e7fd      	b.n	80043e0 <UsageFault_Handler+0x4>

080043e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043e8:	bf00      	nop
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043f2:	b480      	push	{r7}
 80043f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043f6:	bf00      	nop
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004404:	bf00      	nop
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004412:	f000 f93b 	bl	800468c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004416:	bf00      	nop
 8004418:	bd80      	pop	{r7, pc}

0800441a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_IRQ_Pin);
 800441e:	2010      	movs	r0, #16
 8004420:	f000 ff0e 	bl	8005240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004424:	bf00      	nop
 8004426:	bd80      	pop	{r7, pc}

08004428 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OTG_FS_OC_Pin);
 800442c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004430:	f000 ff06 	bl	8005240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004434:	bf00      	nop
 8004436:	bd80      	pop	{r7, pc}

08004438 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800443c:	4802      	ldr	r0, [pc, #8]	@ (8004448 <USART2_IRQHandler+0x10>)
 800443e:	f005 fa15 	bl	800986c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004442:	bf00      	nop
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000528 	.word	0x20000528

0800444c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004450:	4802      	ldr	r0, [pc, #8]	@ (800445c <OTG_FS_IRQHandler+0x10>)
 8004452:	f001 f9ed 	bl	8005830 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004456:	bf00      	nop
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20012708 	.word	0x20012708

08004460 <_read>:
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	e00a      	b.n	8004488 <_read+0x28>
 8004472:	f3af 8000 	nop.w
 8004476:	4601      	mov	r1, r0
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	60ba      	str	r2, [r7, #8]
 800447e:	b2ca      	uxtb	r2, r1
 8004480:	701a      	strb	r2, [r3, #0]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	3301      	adds	r3, #1
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	429a      	cmp	r2, r3
 800448e:	dbf0      	blt.n	8004472 <_read+0x12>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <_close>:
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	f04f 33ff 	mov.w	r3, #4294967295
 80044a6:	4618      	mov	r0, r3
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <_fstat>:
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	6039      	str	r1, [r7, #0]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80044c2:	605a      	str	r2, [r3, #4]
 80044c4:	2300      	movs	r3, #0
 80044c6:	4618      	mov	r0, r3
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <_isatty>:
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	2301      	movs	r3, #1
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <_lseek>:
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	2300      	movs	r3, #0
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
	...

08004504 <_sbrk>:
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	4a14      	ldr	r2, [pc, #80]	@ (8004560 <_sbrk+0x5c>)
 800450e:	4b15      	ldr	r3, [pc, #84]	@ (8004564 <_sbrk+0x60>)
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	4b13      	ldr	r3, [pc, #76]	@ (8004568 <_sbrk+0x64>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d102      	bne.n	8004526 <_sbrk+0x22>
 8004520:	4b11      	ldr	r3, [pc, #68]	@ (8004568 <_sbrk+0x64>)
 8004522:	4a12      	ldr	r2, [pc, #72]	@ (800456c <_sbrk+0x68>)
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	4b10      	ldr	r3, [pc, #64]	@ (8004568 <_sbrk+0x64>)
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4413      	add	r3, r2
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	429a      	cmp	r2, r3
 8004532:	d207      	bcs.n	8004544 <_sbrk+0x40>
 8004534:	f00b f822 	bl	800f57c <__errno>
 8004538:	4603      	mov	r3, r0
 800453a:	220c      	movs	r2, #12
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	f04f 33ff 	mov.w	r3, #4294967295
 8004542:	e009      	b.n	8004558 <_sbrk+0x54>
 8004544:	4b08      	ldr	r3, [pc, #32]	@ (8004568 <_sbrk+0x64>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	4b07      	ldr	r3, [pc, #28]	@ (8004568 <_sbrk+0x64>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4413      	add	r3, r2
 8004552:	4a05      	ldr	r2, [pc, #20]	@ (8004568 <_sbrk+0x64>)
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4618      	mov	r0, r3
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	20030000 	.word	0x20030000
 8004564:	00000400 	.word	0x00000400
 8004568:	20011914 	.word	0x20011914
 800456c:	20012c38 	.word	0x20012c38

08004570 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004574:	4b06      	ldr	r3, [pc, #24]	@ (8004590 <SystemInit+0x20>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457a:	4a05      	ldr	r2, [pc, #20]	@ (8004590 <SystemInit+0x20>)
 800457c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004580:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004584:	bf00      	nop
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	e000ed00 	.word	0xe000ed00

08004594 <Reset_Handler>:
 8004594:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80045cc <LoopFillZerobss+0xe>
 8004598:	f7ff ffea 	bl	8004570 <SystemInit>
 800459c:	480c      	ldr	r0, [pc, #48]	@ (80045d0 <LoopFillZerobss+0x12>)
 800459e:	490d      	ldr	r1, [pc, #52]	@ (80045d4 <LoopFillZerobss+0x16>)
 80045a0:	4a0d      	ldr	r2, [pc, #52]	@ (80045d8 <LoopFillZerobss+0x1a>)
 80045a2:	2300      	movs	r3, #0
 80045a4:	e002      	b.n	80045ac <LoopCopyDataInit>

080045a6 <CopyDataInit>:
 80045a6:	58d4      	ldr	r4, [r2, r3]
 80045a8:	50c4      	str	r4, [r0, r3]
 80045aa:	3304      	adds	r3, #4

080045ac <LoopCopyDataInit>:
 80045ac:	18c4      	adds	r4, r0, r3
 80045ae:	428c      	cmp	r4, r1
 80045b0:	d3f9      	bcc.n	80045a6 <CopyDataInit>
 80045b2:	4a0a      	ldr	r2, [pc, #40]	@ (80045dc <LoopFillZerobss+0x1e>)
 80045b4:	4c0a      	ldr	r4, [pc, #40]	@ (80045e0 <LoopFillZerobss+0x22>)
 80045b6:	2300      	movs	r3, #0
 80045b8:	e001      	b.n	80045be <LoopFillZerobss>

080045ba <FillZerobss>:
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	3204      	adds	r2, #4

080045be <LoopFillZerobss>:
 80045be:	42a2      	cmp	r2, r4
 80045c0:	d3fb      	bcc.n	80045ba <FillZerobss>
 80045c2:	f00a ffe1 	bl	800f588 <__libc_init_array>
 80045c6:	f7fc fee5 	bl	8001394 <main>
 80045ca:	4770      	bx	lr
 80045cc:	20030000 	.word	0x20030000
 80045d0:	20000000 	.word	0x20000000
 80045d4:	2000031c 	.word	0x2000031c
 80045d8:	08012ed8 	.word	0x08012ed8
 80045dc:	2000031c 	.word	0x2000031c
 80045e0:	20012c34 	.word	0x20012c34

080045e4 <ADC_IRQHandler>:
 80045e4:	e7fe      	b.n	80045e4 <ADC_IRQHandler>
	...

080045e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004628 <HAL_Init+0x40>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004628 <HAL_Init+0x40>)
 80045f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004628 <HAL_Init+0x40>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a0a      	ldr	r2, [pc, #40]	@ (8004628 <HAL_Init+0x40>)
 80045fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004602:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004604:	4b08      	ldr	r3, [pc, #32]	@ (8004628 <HAL_Init+0x40>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a07      	ldr	r2, [pc, #28]	@ (8004628 <HAL_Init+0x40>)
 800460a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800460e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004610:	2003      	movs	r0, #3
 8004612:	f000 f94f 	bl	80048b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004616:	200f      	movs	r0, #15
 8004618:	f000 f808 	bl	800462c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800461c:	f7ff fd3c 	bl	8004098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	40023c00 	.word	0x40023c00

0800462c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004634:	4b12      	ldr	r3, [pc, #72]	@ (8004680 <HAL_InitTick+0x54>)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	4b12      	ldr	r3, [pc, #72]	@ (8004684 <HAL_InitTick+0x58>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	4619      	mov	r1, r3
 800463e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004642:	fbb3 f3f1 	udiv	r3, r3, r1
 8004646:	fbb2 f3f3 	udiv	r3, r2, r3
 800464a:	4618      	mov	r0, r3
 800464c:	f000 f967 	bl	800491e <HAL_SYSTICK_Config>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e00e      	b.n	8004678 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b0f      	cmp	r3, #15
 800465e:	d80a      	bhi.n	8004676 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004660:	2200      	movs	r2, #0
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	f04f 30ff 	mov.w	r0, #4294967295
 8004668:	f000 f92f 	bl	80048ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800466c:	4a06      	ldr	r2, [pc, #24]	@ (8004688 <HAL_InitTick+0x5c>)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	e000      	b.n	8004678 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
}
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20000294 	.word	0x20000294
 8004684:	2000029c 	.word	0x2000029c
 8004688:	20000298 	.word	0x20000298

0800468c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004690:	4b06      	ldr	r3, [pc, #24]	@ (80046ac <HAL_IncTick+0x20>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	4b06      	ldr	r3, [pc, #24]	@ (80046b0 <HAL_IncTick+0x24>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4413      	add	r3, r2
 800469c:	4a04      	ldr	r2, [pc, #16]	@ (80046b0 <HAL_IncTick+0x24>)
 800469e:	6013      	str	r3, [r2, #0]
}
 80046a0:	bf00      	nop
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	2000029c 	.word	0x2000029c
 80046b0:	20011918 	.word	0x20011918

080046b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  return uwTick;
 80046b8:	4b03      	ldr	r3, [pc, #12]	@ (80046c8 <HAL_GetTick+0x14>)
 80046ba:	681b      	ldr	r3, [r3, #0]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	20011918 	.word	0x20011918

080046cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046d4:	f7ff ffee 	bl	80046b4 <HAL_GetTick>
 80046d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e4:	d005      	beq.n	80046f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004710 <HAL_Delay+0x44>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4413      	add	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046f2:	bf00      	nop
 80046f4:	f7ff ffde 	bl	80046b4 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	429a      	cmp	r2, r3
 8004702:	d8f7      	bhi.n	80046f4 <HAL_Delay+0x28>
  {
  }
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	2000029c 	.word	0x2000029c

08004714 <__NVIC_SetPriorityGrouping>:
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004724:	4b0c      	ldr	r3, [pc, #48]	@ (8004758 <__NVIC_SetPriorityGrouping+0x44>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004730:	4013      	ands	r3, r2
 8004732:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800473c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004746:	4a04      	ldr	r2, [pc, #16]	@ (8004758 <__NVIC_SetPriorityGrouping+0x44>)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	60d3      	str	r3, [r2, #12]
}
 800474c:	bf00      	nop
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	e000ed00 	.word	0xe000ed00

0800475c <__NVIC_GetPriorityGrouping>:
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004760:	4b04      	ldr	r3, [pc, #16]	@ (8004774 <__NVIC_GetPriorityGrouping+0x18>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	0a1b      	lsrs	r3, r3, #8
 8004766:	f003 0307 	and.w	r3, r3, #7
}
 800476a:	4618      	mov	r0, r3
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	e000ed00 	.word	0xe000ed00

08004778 <__NVIC_EnableIRQ>:
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004786:	2b00      	cmp	r3, #0
 8004788:	db0b      	blt.n	80047a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800478a:	79fb      	ldrb	r3, [r7, #7]
 800478c:	f003 021f 	and.w	r2, r3, #31
 8004790:	4907      	ldr	r1, [pc, #28]	@ (80047b0 <__NVIC_EnableIRQ+0x38>)
 8004792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004796:	095b      	lsrs	r3, r3, #5
 8004798:	2001      	movs	r0, #1
 800479a:	fa00 f202 	lsl.w	r2, r0, r2
 800479e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	e000e100 	.word	0xe000e100

080047b4 <__NVIC_SetPriority>:
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4603      	mov	r3, r0
 80047bc:	6039      	str	r1, [r7, #0]
 80047be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	db0a      	blt.n	80047de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	490c      	ldr	r1, [pc, #48]	@ (8004800 <__NVIC_SetPriority+0x4c>)
 80047ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d2:	0112      	lsls	r2, r2, #4
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	440b      	add	r3, r1
 80047d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80047dc:	e00a      	b.n	80047f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	4908      	ldr	r1, [pc, #32]	@ (8004804 <__NVIC_SetPriority+0x50>)
 80047e4:	79fb      	ldrb	r3, [r7, #7]
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	3b04      	subs	r3, #4
 80047ec:	0112      	lsls	r2, r2, #4
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	440b      	add	r3, r1
 80047f2:	761a      	strb	r2, [r3, #24]
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	e000e100 	.word	0xe000e100
 8004804:	e000ed00 	.word	0xe000ed00

08004808 <NVIC_EncodePriority>:
{
 8004808:	b480      	push	{r7}
 800480a:	b089      	sub	sp, #36	@ 0x24
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f1c3 0307 	rsb	r3, r3, #7
 8004822:	2b04      	cmp	r3, #4
 8004824:	bf28      	it	cs
 8004826:	2304      	movcs	r3, #4
 8004828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	3304      	adds	r3, #4
 800482e:	2b06      	cmp	r3, #6
 8004830:	d902      	bls.n	8004838 <NVIC_EncodePriority+0x30>
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	3b03      	subs	r3, #3
 8004836:	e000      	b.n	800483a <NVIC_EncodePriority+0x32>
 8004838:	2300      	movs	r3, #0
 800483a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800483c:	f04f 32ff 	mov.w	r2, #4294967295
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	43da      	mvns	r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	401a      	ands	r2, r3
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004850:	f04f 31ff 	mov.w	r1, #4294967295
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	fa01 f303 	lsl.w	r3, r1, r3
 800485a:	43d9      	mvns	r1, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004860:	4313      	orrs	r3, r2
}
 8004862:	4618      	mov	r0, r3
 8004864:	3724      	adds	r7, #36	@ 0x24
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
	...

08004870 <SysTick_Config>:
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3b01      	subs	r3, #1
 800487c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004880:	d301      	bcc.n	8004886 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004882:	2301      	movs	r3, #1
 8004884:	e00f      	b.n	80048a6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004886:	4a0a      	ldr	r2, [pc, #40]	@ (80048b0 <SysTick_Config+0x40>)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3b01      	subs	r3, #1
 800488c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800488e:	210f      	movs	r1, #15
 8004890:	f04f 30ff 	mov.w	r0, #4294967295
 8004894:	f7ff ff8e 	bl	80047b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004898:	4b05      	ldr	r3, [pc, #20]	@ (80048b0 <SysTick_Config+0x40>)
 800489a:	2200      	movs	r2, #0
 800489c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800489e:	4b04      	ldr	r3, [pc, #16]	@ (80048b0 <SysTick_Config+0x40>)
 80048a0:	2207      	movs	r2, #7
 80048a2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	e000e010 	.word	0xe000e010

080048b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7ff ff29 	bl	8004714 <__NVIC_SetPriorityGrouping>
}
 80048c2:	bf00      	nop
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b086      	sub	sp, #24
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	4603      	mov	r3, r0
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	607a      	str	r2, [r7, #4]
 80048d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048dc:	f7ff ff3e 	bl	800475c <__NVIC_GetPriorityGrouping>
 80048e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	68b9      	ldr	r1, [r7, #8]
 80048e6:	6978      	ldr	r0, [r7, #20]
 80048e8:	f7ff ff8e 	bl	8004808 <NVIC_EncodePriority>
 80048ec:	4602      	mov	r2, r0
 80048ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048f2:	4611      	mov	r1, r2
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff ff5d 	bl	80047b4 <__NVIC_SetPriority>
}
 80048fa:	bf00      	nop
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	4603      	mov	r3, r0
 800490a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800490c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff ff31 	bl	8004778 <__NVIC_EnableIRQ>
}
 8004916:	bf00      	nop
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b082      	sub	sp, #8
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff ffa2 	bl	8004870 <SysTick_Config>
 800492c:	4603      	mov	r3, r0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b084      	sub	sp, #16
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004942:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004944:	f7ff feb6 	bl	80046b4 <HAL_GetTick>
 8004948:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d008      	beq.n	8004968 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2280      	movs	r2, #128	@ 0x80
 800495a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e052      	b.n	8004a0e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0216 	bic.w	r2, r2, #22
 8004976:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695a      	ldr	r2, [r3, #20]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004986:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498c:	2b00      	cmp	r3, #0
 800498e:	d103      	bne.n	8004998 <HAL_DMA_Abort+0x62>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004994:	2b00      	cmp	r3, #0
 8004996:	d007      	beq.n	80049a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0208 	bic.w	r2, r2, #8
 80049a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0201 	bic.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049b8:	e013      	b.n	80049e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049ba:	f7ff fe7b 	bl	80046b4 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b05      	cmp	r3, #5
 80049c6:	d90c      	bls.n	80049e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2220      	movs	r2, #32
 80049cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2203      	movs	r2, #3
 80049d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e015      	b.n	8004a0e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e4      	bne.n	80049ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f4:	223f      	movs	r2, #63	@ 0x3f
 80049f6:	409a      	lsls	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d004      	beq.n	8004a34 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2280      	movs	r2, #128	@ 0x80
 8004a2e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e00c      	b.n	8004a4e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2205      	movs	r2, #5
 8004a38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0201 	bic.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
	...

08004a5c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004a6e:	4b23      	ldr	r3, [pc, #140]	@ (8004afc <HAL_FLASH_Program+0xa0>)
 8004a70:	7e1b      	ldrb	r3, [r3, #24]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d101      	bne.n	8004a7a <HAL_FLASH_Program+0x1e>
 8004a76:	2302      	movs	r3, #2
 8004a78:	e03b      	b.n	8004af2 <HAL_FLASH_Program+0x96>
 8004a7a:	4b20      	ldr	r3, [pc, #128]	@ (8004afc <HAL_FLASH_Program+0xa0>)
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a80:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004a84:	f000 f870 	bl	8004b68 <FLASH_WaitForLastOperation>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004a8c:	7dfb      	ldrb	r3, [r7, #23]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d12b      	bne.n	8004aea <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d105      	bne.n	8004aa4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004a98:	783b      	ldrb	r3, [r7, #0]
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	68b8      	ldr	r0, [r7, #8]
 8004a9e:	f000 f91b 	bl	8004cd8 <FLASH_Program_Byte>
 8004aa2:	e016      	b.n	8004ad2 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d105      	bne.n	8004ab6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004aaa:	883b      	ldrh	r3, [r7, #0]
 8004aac:	4619      	mov	r1, r3
 8004aae:	68b8      	ldr	r0, [r7, #8]
 8004ab0:	f000 f8ee 	bl	8004c90 <FLASH_Program_HalfWord>
 8004ab4:	e00d      	b.n	8004ad2 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d105      	bne.n	8004ac8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	68b8      	ldr	r0, [r7, #8]
 8004ac2:	f000 f8c3 	bl	8004c4c <FLASH_Program_Word>
 8004ac6:	e004      	b.n	8004ad2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004ac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004acc:	68b8      	ldr	r0, [r7, #8]
 8004ace:	f000 f88b 	bl	8004be8 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ad2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004ad6:	f000 f847 	bl	8004b68 <FLASH_WaitForLastOperation>
 8004ada:	4603      	mov	r3, r0
 8004adc:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8004ade:	4b08      	ldr	r3, [pc, #32]	@ (8004b00 <HAL_FLASH_Program+0xa4>)
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	4a07      	ldr	r2, [pc, #28]	@ (8004b00 <HAL_FLASH_Program+0xa4>)
 8004ae4:	f023 0301 	bic.w	r3, r3, #1
 8004ae8:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004aea:	4b04      	ldr	r3, [pc, #16]	@ (8004afc <HAL_FLASH_Program+0xa0>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	761a      	strb	r2, [r3, #24]

  return status;
 8004af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	2001191c 	.word	0x2001191c
 8004b00:	40023c00 	.word	0x40023c00

08004b04 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b3c <HAL_FLASH_Unlock+0x38>)
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	da0b      	bge.n	8004b2e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004b16:	4b09      	ldr	r3, [pc, #36]	@ (8004b3c <HAL_FLASH_Unlock+0x38>)
 8004b18:	4a09      	ldr	r2, [pc, #36]	@ (8004b40 <HAL_FLASH_Unlock+0x3c>)
 8004b1a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004b1c:	4b07      	ldr	r3, [pc, #28]	@ (8004b3c <HAL_FLASH_Unlock+0x38>)
 8004b1e:	4a09      	ldr	r2, [pc, #36]	@ (8004b44 <HAL_FLASH_Unlock+0x40>)
 8004b20:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b22:	4b06      	ldr	r3, [pc, #24]	@ (8004b3c <HAL_FLASH_Unlock+0x38>)
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	da01      	bge.n	8004b2e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004b2e:	79fb      	ldrb	r3, [r7, #7]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	40023c00 	.word	0x40023c00
 8004b40:	45670123 	.word	0x45670123
 8004b44:	cdef89ab 	.word	0xcdef89ab

08004b48 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004b4c:	4b05      	ldr	r3, [pc, #20]	@ (8004b64 <HAL_FLASH_Lock+0x1c>)
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	4a04      	ldr	r2, [pc, #16]	@ (8004b64 <HAL_FLASH_Lock+0x1c>)
 8004b52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b56:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	40023c00 	.word	0x40023c00

08004b68 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004b74:	4b1a      	ldr	r3, [pc, #104]	@ (8004be0 <FLASH_WaitForLastOperation+0x78>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004b7a:	f7ff fd9b 	bl	80046b4 <HAL_GetTick>
 8004b7e:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8004b80:	e010      	b.n	8004ba4 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b88:	d00c      	beq.n	8004ba4 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d007      	beq.n	8004ba0 <FLASH_WaitForLastOperation+0x38>
 8004b90:	f7ff fd90 	bl	80046b4 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d201      	bcs.n	8004ba4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e019      	b.n	8004bd8 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8004ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8004be4 <FLASH_WaitForLastOperation+0x7c>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e8      	bne.n	8004b82 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004be4 <FLASH_WaitForLastOperation+0x7c>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004bbc:	4b09      	ldr	r3, [pc, #36]	@ (8004be4 <FLASH_WaitForLastOperation+0x7c>)
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004bc2:	4b08      	ldr	r3, [pc, #32]	@ (8004be4 <FLASH_WaitForLastOperation+0x7c>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004bce:	f000 f8a5 	bl	8004d1c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0

}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	2001191c 	.word	0x2001191c
 8004be4:	40023c00 	.word	0x40023c00

08004be8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004bf4:	4b14      	ldr	r3, [pc, #80]	@ (8004c48 <FLASH_Program_DoubleWord+0x60>)
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	4a13      	ldr	r2, [pc, #76]	@ (8004c48 <FLASH_Program_DoubleWord+0x60>)
 8004bfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bfe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004c00:	4b11      	ldr	r3, [pc, #68]	@ (8004c48 <FLASH_Program_DoubleWord+0x60>)
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	4a10      	ldr	r2, [pc, #64]	@ (8004c48 <FLASH_Program_DoubleWord+0x60>)
 8004c06:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004c0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8004c48 <FLASH_Program_DoubleWord+0x60>)
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	4a0d      	ldr	r2, [pc, #52]	@ (8004c48 <FLASH_Program_DoubleWord+0x60>)
 8004c12:	f043 0301 	orr.w	r3, r3, #1
 8004c16:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004c1e:	f3bf 8f6f 	isb	sy
}
 8004c22:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8004c24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	000a      	movs	r2, r1
 8004c32:	2300      	movs	r3, #0
 8004c34:	68f9      	ldr	r1, [r7, #12]
 8004c36:	3104      	adds	r1, #4
 8004c38:	4613      	mov	r3, r2
 8004c3a:	600b      	str	r3, [r1, #0]
}
 8004c3c:	bf00      	nop
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	40023c00 	.word	0x40023c00

08004c4c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c56:	4b0d      	ldr	r3, [pc, #52]	@ (8004c8c <FLASH_Program_Word+0x40>)
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8004c8c <FLASH_Program_Word+0x40>)
 8004c5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c60:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004c62:	4b0a      	ldr	r3, [pc, #40]	@ (8004c8c <FLASH_Program_Word+0x40>)
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	4a09      	ldr	r2, [pc, #36]	@ (8004c8c <FLASH_Program_Word+0x40>)
 8004c68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c6c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c6e:	4b07      	ldr	r3, [pc, #28]	@ (8004c8c <FLASH_Program_Word+0x40>)
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	4a06      	ldr	r2, [pc, #24]	@ (8004c8c <FLASH_Program_Word+0x40>)
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	601a      	str	r2, [r3, #0]
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	40023c00 	.word	0x40023c00

08004c90 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8004cd4 <FLASH_Program_HalfWord+0x44>)
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	4a0c      	ldr	r2, [pc, #48]	@ (8004cd4 <FLASH_Program_HalfWord+0x44>)
 8004ca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd4 <FLASH_Program_HalfWord+0x44>)
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	4a09      	ldr	r2, [pc, #36]	@ (8004cd4 <FLASH_Program_HalfWord+0x44>)
 8004cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004cb4:	4b07      	ldr	r3, [pc, #28]	@ (8004cd4 <FLASH_Program_HalfWord+0x44>)
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	4a06      	ldr	r2, [pc, #24]	@ (8004cd4 <FLASH_Program_HalfWord+0x44>)
 8004cba:	f043 0301 	orr.w	r3, r3, #1
 8004cbe:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	887a      	ldrh	r2, [r7, #2]
 8004cc4:	801a      	strh	r2, [r3, #0]
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	40023c00 	.word	0x40023c00

08004cd8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8004d18 <FLASH_Program_Byte+0x40>)
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8004d18 <FLASH_Program_Byte+0x40>)
 8004cea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004cf0:	4b09      	ldr	r3, [pc, #36]	@ (8004d18 <FLASH_Program_Byte+0x40>)
 8004cf2:	4a09      	ldr	r2, [pc, #36]	@ (8004d18 <FLASH_Program_Byte+0x40>)
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004cf8:	4b07      	ldr	r3, [pc, #28]	@ (8004d18 <FLASH_Program_Byte+0x40>)
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	4a06      	ldr	r2, [pc, #24]	@ (8004d18 <FLASH_Program_Byte+0x40>)
 8004cfe:	f043 0301 	orr.w	r3, r3, #1
 8004d02:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	78fa      	ldrb	r2, [r7, #3]
 8004d08:	701a      	strb	r2, [r3, #0]
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40023c00 	.word	0x40023c00

08004d1c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004d20:	4b2f      	ldr	r3, [pc, #188]	@ (8004de0 <FLASH_SetErrorCode+0xc4>)
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d008      	beq.n	8004d3e <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8004de4 <FLASH_SetErrorCode+0xc8>)
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	f043 0310 	orr.w	r3, r3, #16
 8004d34:	4a2b      	ldr	r2, [pc, #172]	@ (8004de4 <FLASH_SetErrorCode+0xc8>)
 8004d36:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004d38:	4b29      	ldr	r3, [pc, #164]	@ (8004de0 <FLASH_SetErrorCode+0xc4>)
 8004d3a:	2210      	movs	r2, #16
 8004d3c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004d3e:	4b28      	ldr	r3, [pc, #160]	@ (8004de0 <FLASH_SetErrorCode+0xc4>)
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d008      	beq.n	8004d5c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004d4a:	4b26      	ldr	r3, [pc, #152]	@ (8004de4 <FLASH_SetErrorCode+0xc8>)
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	f043 0308 	orr.w	r3, r3, #8
 8004d52:	4a24      	ldr	r2, [pc, #144]	@ (8004de4 <FLASH_SetErrorCode+0xc8>)
 8004d54:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004d56:	4b22      	ldr	r3, [pc, #136]	@ (8004de0 <FLASH_SetErrorCode+0xc4>)
 8004d58:	2220      	movs	r2, #32
 8004d5a:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004d5c:	4b20      	ldr	r3, [pc, #128]	@ (8004de0 <FLASH_SetErrorCode+0xc4>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d008      	beq.n	8004d7a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004d68:	4b1e      	ldr	r3, [pc, #120]	@ (8004de4 <FLASH_SetErrorCode+0xc8>)
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	f043 0304 	orr.w	r3, r3, #4
 8004d70:	4a1c      	ldr	r2, [pc, #112]	@ (8004de4 <FLASH_SetErrorCode+0xc8>)
 8004d72:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004d74:	4b1a      	ldr	r3, [pc, #104]	@ (8004de0 <FLASH_SetErrorCode+0xc4>)
 8004d76:	2240      	movs	r2, #64	@ 0x40
 8004d78:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004d7a:	4b19      	ldr	r3, [pc, #100]	@ (8004de0 <FLASH_SetErrorCode+0xc4>)
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d008      	beq.n	8004d98 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004d86:	4b17      	ldr	r3, [pc, #92]	@ (8004de4 <FLASH_SetErrorCode+0xc8>)
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	f043 0302 	orr.w	r3, r3, #2
 8004d8e:	4a15      	ldr	r2, [pc, #84]	@ (8004de4 <FLASH_SetErrorCode+0xc8>)
 8004d90:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004d92:	4b13      	ldr	r3, [pc, #76]	@ (8004de0 <FLASH_SetErrorCode+0xc4>)
 8004d94:	2280      	movs	r2, #128	@ 0x80
 8004d96:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004d98:	4b11      	ldr	r3, [pc, #68]	@ (8004de0 <FLASH_SetErrorCode+0xc4>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d009      	beq.n	8004db8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004da4:	4b0f      	ldr	r3, [pc, #60]	@ (8004de4 <FLASH_SetErrorCode+0xc8>)
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	f043 0301 	orr.w	r3, r3, #1
 8004dac:	4a0d      	ldr	r2, [pc, #52]	@ (8004de4 <FLASH_SetErrorCode+0xc8>)
 8004dae:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004db0:	4b0b      	ldr	r3, [pc, #44]	@ (8004de0 <FLASH_SetErrorCode+0xc4>)
 8004db2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004db6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004db8:	4b09      	ldr	r3, [pc, #36]	@ (8004de0 <FLASH_SetErrorCode+0xc4>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004dc4:	4b07      	ldr	r3, [pc, #28]	@ (8004de4 <FLASH_SetErrorCode+0xc8>)
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	f043 0320 	orr.w	r3, r3, #32
 8004dcc:	4a05      	ldr	r2, [pc, #20]	@ (8004de4 <FLASH_SetErrorCode+0xc8>)
 8004dce:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004dd0:	4b03      	ldr	r3, [pc, #12]	@ (8004de0 <FLASH_SetErrorCode+0xc4>)
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	60da      	str	r2, [r3, #12]
  }
}
 8004dd6:	bf00      	nop
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	40023c00 	.word	0x40023c00
 8004de4:	2001191c 	.word	0x2001191c

08004de8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d102      	bne.n	8004e04 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	e010      	b.n	8004e26 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004e04:	78fb      	ldrb	r3, [r7, #3]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d103      	bne.n	8004e12 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004e0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	e009      	b.n	8004e26 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004e12:	78fb      	ldrb	r3, [r7, #3]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d103      	bne.n	8004e20 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004e18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	e002      	b.n	8004e26 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004e20:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004e24:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b0b      	cmp	r3, #11
 8004e2a:	d902      	bls.n	8004e32 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004e32:	4b13      	ldr	r3, [pc, #76]	@ (8004e80 <FLASH_Erase_Sector+0x98>)
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	4a12      	ldr	r2, [pc, #72]	@ (8004e80 <FLASH_Erase_Sector+0x98>)
 8004e38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e3c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004e3e:	4b10      	ldr	r3, [pc, #64]	@ (8004e80 <FLASH_Erase_Sector+0x98>)
 8004e40:	691a      	ldr	r2, [r3, #16]
 8004e42:	490f      	ldr	r1, [pc, #60]	@ (8004e80 <FLASH_Erase_Sector+0x98>)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e80 <FLASH_Erase_Sector+0x98>)
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	4a0c      	ldr	r2, [pc, #48]	@ (8004e80 <FLASH_Erase_Sector+0x98>)
 8004e50:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004e54:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004e56:	4b0a      	ldr	r3, [pc, #40]	@ (8004e80 <FLASH_Erase_Sector+0x98>)
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	4a07      	ldr	r2, [pc, #28]	@ (8004e80 <FLASH_Erase_Sector+0x98>)
 8004e62:	f043 0302 	orr.w	r3, r3, #2
 8004e66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004e68:	4b05      	ldr	r3, [pc, #20]	@ (8004e80 <FLASH_Erase_Sector+0x98>)
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	4a04      	ldr	r2, [pc, #16]	@ (8004e80 <FLASH_Erase_Sector+0x98>)
 8004e6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e72:	6113      	str	r3, [r2, #16]
}
 8004e74:	bf00      	nop
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	40023c00 	.word	0x40023c00

08004e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b089      	sub	sp, #36	@ 0x24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61fb      	str	r3, [r7, #28]
 8004e9e:	e177      	b.n	8005190 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	f040 8166 	bne.w	800518a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d005      	beq.n	8004ed6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d130      	bne.n	8004f38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	2203      	movs	r2, #3
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	43db      	mvns	r3, r3
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	4013      	ands	r3, r2
 8004eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	fa02 f303 	lsl.w	r3, r2, r3
 8004f14:	43db      	mvns	r3, r3
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	091b      	lsrs	r3, r3, #4
 8004f22:	f003 0201 	and.w	r2, r3, #1
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f003 0303 	and.w	r3, r3, #3
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d017      	beq.n	8004f74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	2203      	movs	r2, #3
 8004f50:	fa02 f303 	lsl.w	r3, r2, r3
 8004f54:	43db      	mvns	r3, r3
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	4013      	ands	r3, r2
 8004f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f003 0303 	and.w	r3, r3, #3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d123      	bne.n	8004fc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	08da      	lsrs	r2, r3, #3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3208      	adds	r2, #8
 8004f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	220f      	movs	r2, #15
 8004f98:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9c:	43db      	mvns	r3, r3
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	691a      	ldr	r2, [r3, #16]
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	08da      	lsrs	r2, r3, #3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3208      	adds	r2, #8
 8004fc2:	69b9      	ldr	r1, [r7, #24]
 8004fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	2203      	movs	r2, #3
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f003 0203 	and.w	r2, r3, #3
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 80c0 	beq.w	800518a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	4b66      	ldr	r3, [pc, #408]	@ (80051a8 <HAL_GPIO_Init+0x324>)
 8005010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005012:	4a65      	ldr	r2, [pc, #404]	@ (80051a8 <HAL_GPIO_Init+0x324>)
 8005014:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005018:	6453      	str	r3, [r2, #68]	@ 0x44
 800501a:	4b63      	ldr	r3, [pc, #396]	@ (80051a8 <HAL_GPIO_Init+0x324>)
 800501c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800501e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005026:	4a61      	ldr	r2, [pc, #388]	@ (80051ac <HAL_GPIO_Init+0x328>)
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	089b      	lsrs	r3, r3, #2
 800502c:	3302      	adds	r3, #2
 800502e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	220f      	movs	r2, #15
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	43db      	mvns	r3, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	4013      	ands	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a58      	ldr	r2, [pc, #352]	@ (80051b0 <HAL_GPIO_Init+0x32c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d037      	beq.n	80050c2 <HAL_GPIO_Init+0x23e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a57      	ldr	r2, [pc, #348]	@ (80051b4 <HAL_GPIO_Init+0x330>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d031      	beq.n	80050be <HAL_GPIO_Init+0x23a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a56      	ldr	r2, [pc, #344]	@ (80051b8 <HAL_GPIO_Init+0x334>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d02b      	beq.n	80050ba <HAL_GPIO_Init+0x236>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a55      	ldr	r2, [pc, #340]	@ (80051bc <HAL_GPIO_Init+0x338>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d025      	beq.n	80050b6 <HAL_GPIO_Init+0x232>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a54      	ldr	r2, [pc, #336]	@ (80051c0 <HAL_GPIO_Init+0x33c>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d01f      	beq.n	80050b2 <HAL_GPIO_Init+0x22e>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a53      	ldr	r2, [pc, #332]	@ (80051c4 <HAL_GPIO_Init+0x340>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d019      	beq.n	80050ae <HAL_GPIO_Init+0x22a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a52      	ldr	r2, [pc, #328]	@ (80051c8 <HAL_GPIO_Init+0x344>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d013      	beq.n	80050aa <HAL_GPIO_Init+0x226>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a51      	ldr	r2, [pc, #324]	@ (80051cc <HAL_GPIO_Init+0x348>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d00d      	beq.n	80050a6 <HAL_GPIO_Init+0x222>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a50      	ldr	r2, [pc, #320]	@ (80051d0 <HAL_GPIO_Init+0x34c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d007      	beq.n	80050a2 <HAL_GPIO_Init+0x21e>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a4f      	ldr	r2, [pc, #316]	@ (80051d4 <HAL_GPIO_Init+0x350>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d101      	bne.n	800509e <HAL_GPIO_Init+0x21a>
 800509a:	2309      	movs	r3, #9
 800509c:	e012      	b.n	80050c4 <HAL_GPIO_Init+0x240>
 800509e:	230a      	movs	r3, #10
 80050a0:	e010      	b.n	80050c4 <HAL_GPIO_Init+0x240>
 80050a2:	2308      	movs	r3, #8
 80050a4:	e00e      	b.n	80050c4 <HAL_GPIO_Init+0x240>
 80050a6:	2307      	movs	r3, #7
 80050a8:	e00c      	b.n	80050c4 <HAL_GPIO_Init+0x240>
 80050aa:	2306      	movs	r3, #6
 80050ac:	e00a      	b.n	80050c4 <HAL_GPIO_Init+0x240>
 80050ae:	2305      	movs	r3, #5
 80050b0:	e008      	b.n	80050c4 <HAL_GPIO_Init+0x240>
 80050b2:	2304      	movs	r3, #4
 80050b4:	e006      	b.n	80050c4 <HAL_GPIO_Init+0x240>
 80050b6:	2303      	movs	r3, #3
 80050b8:	e004      	b.n	80050c4 <HAL_GPIO_Init+0x240>
 80050ba:	2302      	movs	r3, #2
 80050bc:	e002      	b.n	80050c4 <HAL_GPIO_Init+0x240>
 80050be:	2301      	movs	r3, #1
 80050c0:	e000      	b.n	80050c4 <HAL_GPIO_Init+0x240>
 80050c2:	2300      	movs	r3, #0
 80050c4:	69fa      	ldr	r2, [r7, #28]
 80050c6:	f002 0203 	and.w	r2, r2, #3
 80050ca:	0092      	lsls	r2, r2, #2
 80050cc:	4093      	lsls	r3, r2
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050d4:	4935      	ldr	r1, [pc, #212]	@ (80051ac <HAL_GPIO_Init+0x328>)
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	089b      	lsrs	r3, r3, #2
 80050da:	3302      	adds	r3, #2
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050e2:	4b3d      	ldr	r3, [pc, #244]	@ (80051d8 <HAL_GPIO_Init+0x354>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	43db      	mvns	r3, r3
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	4013      	ands	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005106:	4a34      	ldr	r2, [pc, #208]	@ (80051d8 <HAL_GPIO_Init+0x354>)
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800510c:	4b32      	ldr	r3, [pc, #200]	@ (80051d8 <HAL_GPIO_Init+0x354>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	43db      	mvns	r3, r3
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	4013      	ands	r3, r2
 800511a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005130:	4a29      	ldr	r2, [pc, #164]	@ (80051d8 <HAL_GPIO_Init+0x354>)
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005136:	4b28      	ldr	r3, [pc, #160]	@ (80051d8 <HAL_GPIO_Init+0x354>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	43db      	mvns	r3, r3
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	4013      	ands	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800515a:	4a1f      	ldr	r2, [pc, #124]	@ (80051d8 <HAL_GPIO_Init+0x354>)
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005160:	4b1d      	ldr	r3, [pc, #116]	@ (80051d8 <HAL_GPIO_Init+0x354>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	43db      	mvns	r3, r3
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	4013      	ands	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005184:	4a14      	ldr	r2, [pc, #80]	@ (80051d8 <HAL_GPIO_Init+0x354>)
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	3301      	adds	r3, #1
 800518e:	61fb      	str	r3, [r7, #28]
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	2b0f      	cmp	r3, #15
 8005194:	f67f ae84 	bls.w	8004ea0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005198:	bf00      	nop
 800519a:	bf00      	nop
 800519c:	3724      	adds	r7, #36	@ 0x24
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40023800 	.word	0x40023800
 80051ac:	40013800 	.word	0x40013800
 80051b0:	40020000 	.word	0x40020000
 80051b4:	40020400 	.word	0x40020400
 80051b8:	40020800 	.word	0x40020800
 80051bc:	40020c00 	.word	0x40020c00
 80051c0:	40021000 	.word	0x40021000
 80051c4:	40021400 	.word	0x40021400
 80051c8:	40021800 	.word	0x40021800
 80051cc:	40021c00 	.word	0x40021c00
 80051d0:	40022000 	.word	0x40022000
 80051d4:	40022400 	.word	0x40022400
 80051d8:	40013c00 	.word	0x40013c00

080051dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	460b      	mov	r3, r1
 80051e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691a      	ldr	r2, [r3, #16]
 80051ec:	887b      	ldrh	r3, [r7, #2]
 80051ee:	4013      	ands	r3, r2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051f4:	2301      	movs	r3, #1
 80051f6:	73fb      	strb	r3, [r7, #15]
 80051f8:	e001      	b.n	80051fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051fa:	2300      	movs	r3, #0
 80051fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	807b      	strh	r3, [r7, #2]
 8005218:	4613      	mov	r3, r2
 800521a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800521c:	787b      	ldrb	r3, [r7, #1]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005222:	887a      	ldrh	r2, [r7, #2]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005228:	e003      	b.n	8005232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800522a:	887b      	ldrh	r3, [r7, #2]
 800522c:	041a      	lsls	r2, r3, #16
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	619a      	str	r2, [r3, #24]
}
 8005232:	bf00      	nop
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
	...

08005240 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800524a:	4b08      	ldr	r3, [pc, #32]	@ (800526c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800524c:	695a      	ldr	r2, [r3, #20]
 800524e:	88fb      	ldrh	r3, [r7, #6]
 8005250:	4013      	ands	r3, r2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d006      	beq.n	8005264 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005256:	4a05      	ldr	r2, [pc, #20]	@ (800526c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005258:	88fb      	ldrh	r3, [r7, #6]
 800525a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800525c:	88fb      	ldrh	r3, [r7, #6]
 800525e:	4618      	mov	r0, r3
 8005260:	f7fe fee4 	bl	800402c <HAL_GPIO_EXTI_Callback>
  }
}
 8005264:	bf00      	nop
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40013c00 	.word	0x40013c00

08005270 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af02      	add	r7, sp, #8
 8005276:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e059      	b.n	8005336 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	d106      	bne.n	80052a2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f009 facb 	bl	800e838 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2203      	movs	r2, #3
 80052a6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052b0:	d102      	bne.n	80052b8 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4618      	mov	r0, r3
 80052be:	f005 fb7e 	bl	800a9be <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6818      	ldr	r0, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	7c1a      	ldrb	r2, [r3, #16]
 80052ca:	f88d 2000 	strb.w	r2, [sp]
 80052ce:	3304      	adds	r3, #4
 80052d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052d2:	f005 faff 	bl	800a8d4 <USB_CoreInit>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d005      	beq.n	80052e8 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e026      	b.n	8005336 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2101      	movs	r1, #1
 80052ee:	4618      	mov	r0, r3
 80052f0:	f005 fb76 	bl	800a9e0 <USB_SetCurrentMode>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d005      	beq.n	8005306 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2202      	movs	r2, #2
 80052fe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e017      	b.n	8005336 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	7c1a      	ldrb	r2, [r3, #16]
 800530e:	f88d 2000 	strb.w	r2, [sp]
 8005312:	3304      	adds	r3, #4
 8005314:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005316:	f005 fd19 	bl	800ad4c <USB_HostInit>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d005      	beq.n	800532c <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e004      	b.n	8005336 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800533e:	b590      	push	{r4, r7, lr}
 8005340:	b08b      	sub	sp, #44	@ 0x2c
 8005342:	af04      	add	r7, sp, #16
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	4608      	mov	r0, r1
 8005348:	4611      	mov	r1, r2
 800534a:	461a      	mov	r2, r3
 800534c:	4603      	mov	r3, r0
 800534e:	70fb      	strb	r3, [r7, #3]
 8005350:	460b      	mov	r3, r1
 8005352:	70bb      	strb	r3, [r7, #2]
 8005354:	4613      	mov	r3, r2
 8005356:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8005358:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800535a:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005362:	2b01      	cmp	r3, #1
 8005364:	d101      	bne.n	800536a <HAL_HCD_HC_Init+0x2c>
 8005366:	2302      	movs	r3, #2
 8005368:	e09d      	b.n	80054a6 <HAL_HCD_HC_Init+0x168>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8005372:	78fa      	ldrb	r2, [r7, #3]
 8005374:	6879      	ldr	r1, [r7, #4]
 8005376:	4613      	mov	r3, r2
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	1a9b      	subs	r3, r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	440b      	add	r3, r1
 8005380:	3319      	adds	r3, #25
 8005382:	2200      	movs	r2, #0
 8005384:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005386:	78fa      	ldrb	r2, [r7, #3]
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	4613      	mov	r3, r2
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	1a9b      	subs	r3, r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	440b      	add	r3, r1
 8005394:	3314      	adds	r3, #20
 8005396:	787a      	ldrb	r2, [r7, #1]
 8005398:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800539a:	78fa      	ldrb	r2, [r7, #3]
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	1a9b      	subs	r3, r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	3315      	adds	r3, #21
 80053aa:	78fa      	ldrb	r2, [r7, #3]
 80053ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80053ae:	78fa      	ldrb	r2, [r7, #3]
 80053b0:	6879      	ldr	r1, [r7, #4]
 80053b2:	4613      	mov	r3, r2
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	1a9b      	subs	r3, r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	440b      	add	r3, r1
 80053bc:	3326      	adds	r3, #38	@ 0x26
 80053be:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80053c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80053c4:	78fa      	ldrb	r2, [r7, #3]
 80053c6:	78bb      	ldrb	r3, [r7, #2]
 80053c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053cc:	b2d8      	uxtb	r0, r3
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	4613      	mov	r3, r2
 80053d2:	011b      	lsls	r3, r3, #4
 80053d4:	1a9b      	subs	r3, r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	440b      	add	r3, r1
 80053da:	3316      	adds	r3, #22
 80053dc:	4602      	mov	r2, r0
 80053de:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80053e0:	78fb      	ldrb	r3, [r7, #3]
 80053e2:	4619      	mov	r1, r3
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fbc7 	bl	8005b78 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80053ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	da0a      	bge.n	8005408 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80053f2:	78fa      	ldrb	r2, [r7, #3]
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	4613      	mov	r3, r2
 80053f8:	011b      	lsls	r3, r3, #4
 80053fa:	1a9b      	subs	r3, r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	440b      	add	r3, r1
 8005400:	3317      	adds	r3, #23
 8005402:	2201      	movs	r2, #1
 8005404:	701a      	strb	r2, [r3, #0]
 8005406:	e009      	b.n	800541c <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005408:	78fa      	ldrb	r2, [r7, #3]
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	4613      	mov	r3, r2
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	1a9b      	subs	r3, r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	440b      	add	r3, r1
 8005416:	3317      	adds	r3, #23
 8005418:	2200      	movs	r2, #0
 800541a:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f005 fdf7 	bl	800b014 <USB_GetHostSpeed>
 8005426:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8005428:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800542c:	2b01      	cmp	r3, #1
 800542e:	d10b      	bne.n	8005448 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8005430:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005434:	2b01      	cmp	r3, #1
 8005436:	d107      	bne.n	8005448 <HAL_HCD_HC_Init+0x10a>
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d104      	bne.n	8005448 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2bbc      	cmp	r3, #188	@ 0xbc
 8005442:	d901      	bls.n	8005448 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8005444:	23bc      	movs	r3, #188	@ 0xbc
 8005446:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8005448:	78fa      	ldrb	r2, [r7, #3]
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	4613      	mov	r3, r2
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	1a9b      	subs	r3, r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	3318      	adds	r3, #24
 8005458:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800545c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800545e:	78fa      	ldrb	r2, [r7, #3]
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	b298      	uxth	r0, r3
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	4613      	mov	r3, r2
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	1a9b      	subs	r3, r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	440b      	add	r3, r1
 8005470:	3328      	adds	r3, #40	@ 0x28
 8005472:	4602      	mov	r2, r0
 8005474:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6818      	ldr	r0, [r3, #0]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	b29b      	uxth	r3, r3
 800547e:	787c      	ldrb	r4, [r7, #1]
 8005480:	78ba      	ldrb	r2, [r7, #2]
 8005482:	78f9      	ldrb	r1, [r7, #3]
 8005484:	9302      	str	r3, [sp, #8]
 8005486:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800548a:	9301      	str	r3, [sp, #4]
 800548c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	4623      	mov	r3, r4
 8005494:	f005 fde6 	bl	800b064 <USB_HC_Init>
 8005498:	4603      	mov	r3, r0
 800549a:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	371c      	adds	r7, #28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd90      	pop	{r4, r7, pc}

080054ae <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	460b      	mov	r3, r1
 80054b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_HCD_HC_Halt+0x1e>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e00f      	b.n	80054ec <HAL_HCD_HC_Halt+0x3e>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	78fa      	ldrb	r2, [r7, #3]
 80054da:	4611      	mov	r1, r2
 80054dc:	4618      	mov	r0, r3
 80054de:	f006 f978 	bl	800b7d2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80054ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	4608      	mov	r0, r1
 80054fe:	4611      	mov	r1, r2
 8005500:	461a      	mov	r2, r3
 8005502:	4603      	mov	r3, r0
 8005504:	70fb      	strb	r3, [r7, #3]
 8005506:	460b      	mov	r3, r1
 8005508:	70bb      	strb	r3, [r7, #2]
 800550a:	4613      	mov	r3, r2
 800550c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800550e:	78fa      	ldrb	r2, [r7, #3]
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	4613      	mov	r3, r2
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	1a9b      	subs	r3, r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	440b      	add	r3, r1
 800551c:	3317      	adds	r3, #23
 800551e:	78ba      	ldrb	r2, [r7, #2]
 8005520:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005522:	78fa      	ldrb	r2, [r7, #3]
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	1a9b      	subs	r3, r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	440b      	add	r3, r1
 8005530:	3326      	adds	r3, #38	@ 0x26
 8005532:	787a      	ldrb	r2, [r7, #1]
 8005534:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005536:	7c3b      	ldrb	r3, [r7, #16]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d114      	bne.n	8005566 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800553c:	78fa      	ldrb	r2, [r7, #3]
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	4613      	mov	r3, r2
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	1a9b      	subs	r3, r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	332a      	adds	r3, #42	@ 0x2a
 800554c:	2203      	movs	r2, #3
 800554e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005550:	78fa      	ldrb	r2, [r7, #3]
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	4613      	mov	r3, r2
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	1a9b      	subs	r3, r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	440b      	add	r3, r1
 800555e:	3319      	adds	r3, #25
 8005560:	7f3a      	ldrb	r2, [r7, #28]
 8005562:	701a      	strb	r2, [r3, #0]
 8005564:	e009      	b.n	800557a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005566:	78fa      	ldrb	r2, [r7, #3]
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	4613      	mov	r3, r2
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	1a9b      	subs	r3, r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	332a      	adds	r3, #42	@ 0x2a
 8005576:	2202      	movs	r2, #2
 8005578:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800557a:	787b      	ldrb	r3, [r7, #1]
 800557c:	2b03      	cmp	r3, #3
 800557e:	f200 8102 	bhi.w	8005786 <HAL_HCD_HC_SubmitRequest+0x292>
 8005582:	a201      	add	r2, pc, #4	@ (adr r2, 8005588 <HAL_HCD_HC_SubmitRequest+0x94>)
 8005584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005588:	08005599 	.word	0x08005599
 800558c:	08005771 	.word	0x08005771
 8005590:	0800565d 	.word	0x0800565d
 8005594:	080056e7 	.word	0x080056e7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8005598:	7c3b      	ldrb	r3, [r7, #16]
 800559a:	2b01      	cmp	r3, #1
 800559c:	f040 80f5 	bne.w	800578a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80055a0:	78bb      	ldrb	r3, [r7, #2]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d12d      	bne.n	8005602 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80055a6:	8b3b      	ldrh	r3, [r7, #24]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d109      	bne.n	80055c0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80055ac:	78fa      	ldrb	r2, [r7, #3]
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	4613      	mov	r3, r2
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	1a9b      	subs	r3, r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	333d      	adds	r3, #61	@ 0x3d
 80055bc:	2201      	movs	r2, #1
 80055be:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80055c0:	78fa      	ldrb	r2, [r7, #3]
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	4613      	mov	r3, r2
 80055c6:	011b      	lsls	r3, r3, #4
 80055c8:	1a9b      	subs	r3, r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	440b      	add	r3, r1
 80055ce:	333d      	adds	r3, #61	@ 0x3d
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10a      	bne.n	80055ec <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80055d6:	78fa      	ldrb	r2, [r7, #3]
 80055d8:	6879      	ldr	r1, [r7, #4]
 80055da:	4613      	mov	r3, r2
 80055dc:	011b      	lsls	r3, r3, #4
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	440b      	add	r3, r1
 80055e4:	332a      	adds	r3, #42	@ 0x2a
 80055e6:	2200      	movs	r2, #0
 80055e8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80055ea:	e0ce      	b.n	800578a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80055ec:	78fa      	ldrb	r2, [r7, #3]
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	4613      	mov	r3, r2
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	1a9b      	subs	r3, r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	440b      	add	r3, r1
 80055fa:	332a      	adds	r3, #42	@ 0x2a
 80055fc:	2202      	movs	r2, #2
 80055fe:	701a      	strb	r2, [r3, #0]
      break;
 8005600:	e0c3      	b.n	800578a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8005602:	78fa      	ldrb	r2, [r7, #3]
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	331a      	adds	r3, #26
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b01      	cmp	r3, #1
 8005616:	f040 80b8 	bne.w	800578a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800561a:	78fa      	ldrb	r2, [r7, #3]
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	4613      	mov	r3, r2
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	1a9b      	subs	r3, r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	440b      	add	r3, r1
 8005628:	333c      	adds	r3, #60	@ 0x3c
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10a      	bne.n	8005646 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005630:	78fa      	ldrb	r2, [r7, #3]
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	4613      	mov	r3, r2
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	1a9b      	subs	r3, r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	332a      	adds	r3, #42	@ 0x2a
 8005640:	2200      	movs	r2, #0
 8005642:	701a      	strb	r2, [r3, #0]
      break;
 8005644:	e0a1      	b.n	800578a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005646:	78fa      	ldrb	r2, [r7, #3]
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	4613      	mov	r3, r2
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	1a9b      	subs	r3, r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	440b      	add	r3, r1
 8005654:	332a      	adds	r3, #42	@ 0x2a
 8005656:	2202      	movs	r2, #2
 8005658:	701a      	strb	r2, [r3, #0]
      break;
 800565a:	e096      	b.n	800578a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800565c:	78bb      	ldrb	r3, [r7, #2]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d120      	bne.n	80056a4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005662:	78fa      	ldrb	r2, [r7, #3]
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	440b      	add	r3, r1
 8005670:	333d      	adds	r3, #61	@ 0x3d
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10a      	bne.n	800568e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005678:	78fa      	ldrb	r2, [r7, #3]
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	4613      	mov	r3, r2
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	1a9b      	subs	r3, r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	332a      	adds	r3, #42	@ 0x2a
 8005688:	2200      	movs	r2, #0
 800568a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800568c:	e07e      	b.n	800578c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	4613      	mov	r3, r2
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	440b      	add	r3, r1
 800569c:	332a      	adds	r3, #42	@ 0x2a
 800569e:	2202      	movs	r2, #2
 80056a0:	701a      	strb	r2, [r3, #0]
      break;
 80056a2:	e073      	b.n	800578c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80056a4:	78fa      	ldrb	r2, [r7, #3]
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	4613      	mov	r3, r2
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	1a9b      	subs	r3, r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	333c      	adds	r3, #60	@ 0x3c
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10a      	bne.n	80056d0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80056ba:	78fa      	ldrb	r2, [r7, #3]
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	4613      	mov	r3, r2
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	1a9b      	subs	r3, r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	440b      	add	r3, r1
 80056c8:	332a      	adds	r3, #42	@ 0x2a
 80056ca:	2200      	movs	r2, #0
 80056cc:	701a      	strb	r2, [r3, #0]
      break;
 80056ce:	e05d      	b.n	800578c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80056d0:	78fa      	ldrb	r2, [r7, #3]
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	4613      	mov	r3, r2
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	1a9b      	subs	r3, r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	440b      	add	r3, r1
 80056de:	332a      	adds	r3, #42	@ 0x2a
 80056e0:	2202      	movs	r2, #2
 80056e2:	701a      	strb	r2, [r3, #0]
      break;
 80056e4:	e052      	b.n	800578c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80056e6:	78bb      	ldrb	r3, [r7, #2]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d120      	bne.n	800572e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80056ec:	78fa      	ldrb	r2, [r7, #3]
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	4613      	mov	r3, r2
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	1a9b      	subs	r3, r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	440b      	add	r3, r1
 80056fa:	333d      	adds	r3, #61	@ 0x3d
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10a      	bne.n	8005718 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005702:	78fa      	ldrb	r2, [r7, #3]
 8005704:	6879      	ldr	r1, [r7, #4]
 8005706:	4613      	mov	r3, r2
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	1a9b      	subs	r3, r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	440b      	add	r3, r1
 8005710:	332a      	adds	r3, #42	@ 0x2a
 8005712:	2200      	movs	r2, #0
 8005714:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005716:	e039      	b.n	800578c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005718:	78fa      	ldrb	r2, [r7, #3]
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	4613      	mov	r3, r2
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	1a9b      	subs	r3, r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	440b      	add	r3, r1
 8005726:	332a      	adds	r3, #42	@ 0x2a
 8005728:	2202      	movs	r2, #2
 800572a:	701a      	strb	r2, [r3, #0]
      break;
 800572c:	e02e      	b.n	800578c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800572e:	78fa      	ldrb	r2, [r7, #3]
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	4613      	mov	r3, r2
 8005734:	011b      	lsls	r3, r3, #4
 8005736:	1a9b      	subs	r3, r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	440b      	add	r3, r1
 800573c:	333c      	adds	r3, #60	@ 0x3c
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10a      	bne.n	800575a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005744:	78fa      	ldrb	r2, [r7, #3]
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	4613      	mov	r3, r2
 800574a:	011b      	lsls	r3, r3, #4
 800574c:	1a9b      	subs	r3, r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	440b      	add	r3, r1
 8005752:	332a      	adds	r3, #42	@ 0x2a
 8005754:	2200      	movs	r2, #0
 8005756:	701a      	strb	r2, [r3, #0]
      break;
 8005758:	e018      	b.n	800578c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800575a:	78fa      	ldrb	r2, [r7, #3]
 800575c:	6879      	ldr	r1, [r7, #4]
 800575e:	4613      	mov	r3, r2
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	1a9b      	subs	r3, r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	440b      	add	r3, r1
 8005768:	332a      	adds	r3, #42	@ 0x2a
 800576a:	2202      	movs	r2, #2
 800576c:	701a      	strb	r2, [r3, #0]
      break;
 800576e:	e00d      	b.n	800578c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005770:	78fa      	ldrb	r2, [r7, #3]
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	4613      	mov	r3, r2
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	1a9b      	subs	r3, r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	332a      	adds	r3, #42	@ 0x2a
 8005780:	2200      	movs	r2, #0
 8005782:	701a      	strb	r2, [r3, #0]
      break;
 8005784:	e002      	b.n	800578c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8005786:	bf00      	nop
 8005788:	e000      	b.n	800578c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800578a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800578c:	78fa      	ldrb	r2, [r7, #3]
 800578e:	6879      	ldr	r1, [r7, #4]
 8005790:	4613      	mov	r3, r2
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	1a9b      	subs	r3, r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	440b      	add	r3, r1
 800579a:	332c      	adds	r3, #44	@ 0x2c
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80057a0:	78fa      	ldrb	r2, [r7, #3]
 80057a2:	8b39      	ldrh	r1, [r7, #24]
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	4613      	mov	r3, r2
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4403      	add	r3, r0
 80057b0:	3334      	adds	r3, #52	@ 0x34
 80057b2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80057b4:	78fa      	ldrb	r2, [r7, #3]
 80057b6:	6879      	ldr	r1, [r7, #4]
 80057b8:	4613      	mov	r3, r2
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	1a9b      	subs	r3, r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	440b      	add	r3, r1
 80057c2:	334c      	adds	r3, #76	@ 0x4c
 80057c4:	2200      	movs	r2, #0
 80057c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80057c8:	78fa      	ldrb	r2, [r7, #3]
 80057ca:	6879      	ldr	r1, [r7, #4]
 80057cc:	4613      	mov	r3, r2
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	1a9b      	subs	r3, r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	440b      	add	r3, r1
 80057d6:	3338      	adds	r3, #56	@ 0x38
 80057d8:	2200      	movs	r2, #0
 80057da:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80057dc:	78fa      	ldrb	r2, [r7, #3]
 80057de:	6879      	ldr	r1, [r7, #4]
 80057e0:	4613      	mov	r3, r2
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	1a9b      	subs	r3, r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	440b      	add	r3, r1
 80057ea:	3315      	adds	r3, #21
 80057ec:	78fa      	ldrb	r2, [r7, #3]
 80057ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80057f0:	78fa      	ldrb	r2, [r7, #3]
 80057f2:	6879      	ldr	r1, [r7, #4]
 80057f4:	4613      	mov	r3, r2
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	1a9b      	subs	r3, r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	440b      	add	r3, r1
 80057fe:	334d      	adds	r3, #77	@ 0x4d
 8005800:	2200      	movs	r2, #0
 8005802:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6818      	ldr	r0, [r3, #0]
 8005808:	78fa      	ldrb	r2, [r7, #3]
 800580a:	4613      	mov	r3, r2
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	1a9b      	subs	r3, r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	3310      	adds	r3, #16
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	4413      	add	r3, r2
 8005818:	1d19      	adds	r1, r3, #4
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	799b      	ldrb	r3, [r3, #6]
 800581e:	461a      	mov	r2, r3
 8005820:	f005 fd4c 	bl	800b2bc <USB_HC_StartXfer>
 8005824:	4603      	mov	r3, r0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop

08005830 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f005 fa40 	bl	800accc <USB_GetMode>
 800584c:	4603      	mov	r3, r0
 800584e:	2b01      	cmp	r3, #1
 8005850:	f040 80fb 	bne.w	8005a4a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4618      	mov	r0, r3
 800585a:	f005 fa03 	bl	800ac64 <USB_ReadInterrupts>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 80f1 	beq.w	8005a48 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4618      	mov	r0, r3
 800586c:	f005 f9fa 	bl	800ac64 <USB_ReadInterrupts>
 8005870:	4603      	mov	r3, r0
 8005872:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005876:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800587a:	d104      	bne.n	8005886 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005884:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f005 f9ea 	bl	800ac64 <USB_ReadInterrupts>
 8005890:	4603      	mov	r3, r0
 8005892:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005896:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800589a:	d104      	bne.n	80058a6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80058a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f005 f9da 	bl	800ac64 <USB_ReadInterrupts>
 80058b0:	4603      	mov	r3, r0
 80058b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80058b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058ba:	d104      	bne.n	80058c6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80058c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f005 f9ca 	bl	800ac64 <USB_ReadInterrupts>
 80058d0:	4603      	mov	r3, r0
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d103      	bne.n	80058e2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2202      	movs	r2, #2
 80058e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f005 f9bc 	bl	800ac64 <USB_ReadInterrupts>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058f6:	d120      	bne.n	800593a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005900:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d113      	bne.n	800593a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005912:	2110      	movs	r1, #16
 8005914:	6938      	ldr	r0, [r7, #16]
 8005916:	f005 f8af 	bl	800aa78 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800591a:	6938      	ldr	r0, [r7, #16]
 800591c:	f005 f8de 	bl	800aadc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	7a5b      	ldrb	r3, [r3, #9]
 8005924:	2b02      	cmp	r3, #2
 8005926:	d105      	bne.n	8005934 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2101      	movs	r1, #1
 800592e:	4618      	mov	r0, r3
 8005930:	f005 fad0 	bl	800aed4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f008 fffd 	bl	800e934 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f005 f990 	bl	800ac64 <USB_ReadInterrupts>
 8005944:	4603      	mov	r3, r0
 8005946:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800594a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800594e:	d102      	bne.n	8005956 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f001 fd4d 	bl	80073f0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4618      	mov	r0, r3
 800595c:	f005 f982 	bl	800ac64 <USB_ReadInterrupts>
 8005960:	4603      	mov	r3, r0
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b08      	cmp	r3, #8
 8005968:	d106      	bne.n	8005978 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f008 ffc6 	bl	800e8fc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2208      	movs	r2, #8
 8005976:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4618      	mov	r0, r3
 800597e:	f005 f971 	bl	800ac64 <USB_ReadInterrupts>
 8005982:	4603      	mov	r3, r0
 8005984:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005988:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800598c:	d139      	bne.n	8005a02 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f005 ff0c 	bl	800b7b0 <USB_HC_ReadInterrupt>
 8005998:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800599a:	2300      	movs	r3, #0
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	e025      	b.n	80059ec <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	fa22 f303 	lsr.w	r3, r2, r3
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d018      	beq.n	80059e6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059ca:	d106      	bne.n	80059da <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f905 	bl	8005be2 <HCD_HC_IN_IRQHandler>
 80059d8:	e005      	b.n	80059e6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	4619      	mov	r1, r3
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 ff67 	bl	80068b4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	3301      	adds	r3, #1
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	795b      	ldrb	r3, [r3, #5]
 80059f0:	461a      	mov	r2, r3
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d3d3      	bcc.n	80059a0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005a00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f005 f92c 	bl	800ac64 <USB_ReadInterrupts>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	f003 0310 	and.w	r3, r3, #16
 8005a12:	2b10      	cmp	r3, #16
 8005a14:	d101      	bne.n	8005a1a <HAL_HCD_IRQHandler+0x1ea>
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <HAL_HCD_IRQHandler+0x1ec>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d014      	beq.n	8005a4a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	699a      	ldr	r2, [r3, #24]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0210 	bic.w	r2, r2, #16
 8005a2e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f001 fbfe 	bl	8007232 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	699a      	ldr	r2, [r3, #24]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f042 0210 	orr.w	r2, r2, #16
 8005a44:	619a      	str	r2, [r3, #24]
 8005a46:	e000      	b.n	8005a4a <HAL_HCD_IRQHandler+0x21a>
      return;
 8005a48:	bf00      	nop
    }
  }
}
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_HCD_Start+0x16>
 8005a62:	2302      	movs	r3, #2
 8005a64:	e013      	b.n	8005a8e <HAL_HCD_Start+0x3e>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2101      	movs	r1, #1
 8005a74:	4618      	mov	r0, r3
 8005a76:	f005 fa94 	bl	800afa2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f004 ff8c 	bl	800a99c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b082      	sub	sp, #8
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_HCD_Stop+0x16>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e00d      	b.n	8005ac8 <HAL_HCD_Stop+0x32>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f005 ffe7 	bl	800ba8c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f005 fa36 	bl	800af4e <USB_ResetPort>
 8005ae2:	4603      	mov	r3, r0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3708      	adds	r7, #8
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	460b      	mov	r3, r1
 8005af6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005af8:	78fa      	ldrb	r2, [r7, #3]
 8005afa:	6879      	ldr	r1, [r7, #4]
 8005afc:	4613      	mov	r3, r2
 8005afe:	011b      	lsls	r3, r3, #4
 8005b00:	1a9b      	subs	r3, r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	440b      	add	r3, r1
 8005b06:	334c      	adds	r3, #76	@ 0x4c
 8005b08:	781b      	ldrb	r3, [r3, #0]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	460b      	mov	r3, r1
 8005b20:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005b22:	78fa      	ldrb	r2, [r7, #3]
 8005b24:	6879      	ldr	r1, [r7, #4]
 8005b26:	4613      	mov	r3, r2
 8005b28:	011b      	lsls	r3, r3, #4
 8005b2a:	1a9b      	subs	r3, r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	440b      	add	r3, r1
 8005b30:	3338      	adds	r3, #56	@ 0x38
 8005b32:	681b      	ldr	r3, [r3, #0]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f005 fa78 	bl	800b042 <USB_GetCurrentFrame>
 8005b52:	4603      	mov	r3, r0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f005 fa53 	bl	800b014 <USB_GetHostSpeed>
 8005b6e:	4603      	mov	r3, r0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8005b84:	78fa      	ldrb	r2, [r7, #3]
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	011b      	lsls	r3, r3, #4
 8005b8c:	1a9b      	subs	r3, r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	440b      	add	r3, r1
 8005b92:	331a      	adds	r3, #26
 8005b94:	2200      	movs	r2, #0
 8005b96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8005b98:	78fa      	ldrb	r2, [r7, #3]
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	1a9b      	subs	r3, r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	331b      	adds	r3, #27
 8005ba8:	2200      	movs	r2, #0
 8005baa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8005bac:	78fa      	ldrb	r2, [r7, #3]
 8005bae:	6879      	ldr	r1, [r7, #4]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	1a9b      	subs	r3, r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	440b      	add	r3, r1
 8005bba:	3325      	adds	r3, #37	@ 0x25
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8005bc0:	78fa      	ldrb	r2, [r7, #3]
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	1a9b      	subs	r3, r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	440b      	add	r3, r1
 8005bce:	3324      	adds	r3, #36	@ 0x24
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b086      	sub	sp, #24
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	460b      	mov	r3, r1
 8005bec:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	78fa      	ldrb	r2, [r7, #3]
 8005bfe:	4611      	mov	r1, r2
 8005c00:	4618      	mov	r0, r3
 8005c02:	f005 f842 	bl	800ac8a <USB_ReadChInterrupts>
 8005c06:	4603      	mov	r3, r0
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d11a      	bne.n	8005c46 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005c10:	78fb      	ldrb	r3, [r7, #3]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	2304      	movs	r3, #4
 8005c20:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005c22:	78fa      	ldrb	r2, [r7, #3]
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	4613      	mov	r3, r2
 8005c28:	011b      	lsls	r3, r3, #4
 8005c2a:	1a9b      	subs	r3, r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	440b      	add	r3, r1
 8005c30:	334d      	adds	r3, #77	@ 0x4d
 8005c32:	2207      	movs	r2, #7
 8005c34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	78fa      	ldrb	r2, [r7, #3]
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f005 fdc7 	bl	800b7d2 <USB_HC_Halt>
 8005c44:	e09e      	b.n	8005d84 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	78fa      	ldrb	r2, [r7, #3]
 8005c4c:	4611      	mov	r1, r2
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f005 f81b 	bl	800ac8a <USB_ReadChInterrupts>
 8005c54:	4603      	mov	r3, r0
 8005c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c5e:	d11b      	bne.n	8005c98 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005c72:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8005c74:	78fa      	ldrb	r2, [r7, #3]
 8005c76:	6879      	ldr	r1, [r7, #4]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	1a9b      	subs	r3, r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	440b      	add	r3, r1
 8005c82:	334d      	adds	r3, #77	@ 0x4d
 8005c84:	2208      	movs	r2, #8
 8005c86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	78fa      	ldrb	r2, [r7, #3]
 8005c8e:	4611      	mov	r1, r2
 8005c90:	4618      	mov	r0, r3
 8005c92:	f005 fd9e 	bl	800b7d2 <USB_HC_Halt>
 8005c96:	e075      	b.n	8005d84 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	78fa      	ldrb	r2, [r7, #3]
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f004 fff2 	bl	800ac8a <USB_ReadChInterrupts>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	f003 0308 	and.w	r3, r3, #8
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d11a      	bne.n	8005ce6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005cb0:	78fb      	ldrb	r3, [r7, #3]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	2308      	movs	r3, #8
 8005cc0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005cc2:	78fa      	ldrb	r2, [r7, #3]
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	011b      	lsls	r3, r3, #4
 8005cca:	1a9b      	subs	r3, r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	440b      	add	r3, r1
 8005cd0:	334d      	adds	r3, #77	@ 0x4d
 8005cd2:	2206      	movs	r2, #6
 8005cd4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	78fa      	ldrb	r2, [r7, #3]
 8005cdc:	4611      	mov	r1, r2
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f005 fd77 	bl	800b7d2 <USB_HC_Halt>
 8005ce4:	e04e      	b.n	8005d84 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	78fa      	ldrb	r2, [r7, #3]
 8005cec:	4611      	mov	r1, r2
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f004 ffcb 	bl	800ac8a <USB_ReadChInterrupts>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cfe:	d11b      	bne.n	8005d38 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005d00:	78fb      	ldrb	r3, [r7, #3]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d12:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005d14:	78fa      	ldrb	r2, [r7, #3]
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	1a9b      	subs	r3, r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	334d      	adds	r3, #77	@ 0x4d
 8005d24:	2209      	movs	r2, #9
 8005d26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	78fa      	ldrb	r2, [r7, #3]
 8005d2e:	4611      	mov	r1, r2
 8005d30:	4618      	mov	r0, r3
 8005d32:	f005 fd4e 	bl	800b7d2 <USB_HC_Halt>
 8005d36:	e025      	b.n	8005d84 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	78fa      	ldrb	r2, [r7, #3]
 8005d3e:	4611      	mov	r1, r2
 8005d40:	4618      	mov	r0, r3
 8005d42:	f004 ffa2 	bl	800ac8a <USB_ReadChInterrupts>
 8005d46:	4603      	mov	r3, r0
 8005d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d4c:	2b80      	cmp	r3, #128	@ 0x80
 8005d4e:	d119      	bne.n	8005d84 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005d50:	78fb      	ldrb	r3, [r7, #3]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	2380      	movs	r3, #128	@ 0x80
 8005d60:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005d62:	78fa      	ldrb	r2, [r7, #3]
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	4613      	mov	r3, r2
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	1a9b      	subs	r3, r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	440b      	add	r3, r1
 8005d70:	334d      	adds	r3, #77	@ 0x4d
 8005d72:	2207      	movs	r2, #7
 8005d74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	78fa      	ldrb	r2, [r7, #3]
 8005d7c:	4611      	mov	r1, r2
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f005 fd27 	bl	800b7d2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	78fa      	ldrb	r2, [r7, #3]
 8005d8a:	4611      	mov	r1, r2
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f004 ff7c 	bl	800ac8a <USB_ReadChInterrupts>
 8005d92:	4603      	mov	r3, r0
 8005d94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d9c:	d112      	bne.n	8005dc4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	78fa      	ldrb	r2, [r7, #3]
 8005da4:	4611      	mov	r1, r2
 8005da6:	4618      	mov	r0, r3
 8005da8:	f005 fd13 	bl	800b7d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005dac:	78fb      	ldrb	r3, [r7, #3]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005db8:	461a      	mov	r2, r3
 8005dba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005dbe:	6093      	str	r3, [r2, #8]
 8005dc0:	f000 bd75 	b.w	80068ae <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	78fa      	ldrb	r2, [r7, #3]
 8005dca:	4611      	mov	r1, r2
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f004 ff5c 	bl	800ac8a <USB_ReadChInterrupts>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	f040 8128 	bne.w	800602e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005dde:	78fb      	ldrb	r3, [r7, #3]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dea:	461a      	mov	r2, r3
 8005dec:	2320      	movs	r3, #32
 8005dee:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005df0:	78fa      	ldrb	r2, [r7, #3]
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	4613      	mov	r3, r2
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	1a9b      	subs	r3, r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	440b      	add	r3, r1
 8005dfe:	331b      	adds	r3, #27
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d119      	bne.n	8005e3a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005e06:	78fa      	ldrb	r2, [r7, #3]
 8005e08:	6879      	ldr	r1, [r7, #4]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	011b      	lsls	r3, r3, #4
 8005e0e:	1a9b      	subs	r3, r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	440b      	add	r3, r1
 8005e14:	331b      	adds	r3, #27
 8005e16:	2200      	movs	r2, #0
 8005e18:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005e1a:	78fb      	ldrb	r3, [r7, #3]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	78fa      	ldrb	r2, [r7, #3]
 8005e2a:	0151      	lsls	r1, r2, #5
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	440a      	add	r2, r1
 8005e30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e38:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	799b      	ldrb	r3, [r3, #6]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d01b      	beq.n	8005e7a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005e42:	78fa      	ldrb	r2, [r7, #3]
 8005e44:	6879      	ldr	r1, [r7, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	011b      	lsls	r3, r3, #4
 8005e4a:	1a9b      	subs	r3, r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	440b      	add	r3, r1
 8005e50:	3330      	adds	r3, #48	@ 0x30
 8005e52:	6819      	ldr	r1, [r3, #0]
 8005e54:	78fb      	ldrb	r3, [r7, #3]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e66:	78fa      	ldrb	r2, [r7, #3]
 8005e68:	1ac9      	subs	r1, r1, r3
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	011b      	lsls	r3, r3, #4
 8005e70:	1a9b      	subs	r3, r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4403      	add	r3, r0
 8005e76:	3338      	adds	r3, #56	@ 0x38
 8005e78:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8005e7a:	78fa      	ldrb	r2, [r7, #3]
 8005e7c:	6879      	ldr	r1, [r7, #4]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	011b      	lsls	r3, r3, #4
 8005e82:	1a9b      	subs	r3, r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	440b      	add	r3, r1
 8005e88:	334d      	adds	r3, #77	@ 0x4d
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8005e8e:	78fa      	ldrb	r2, [r7, #3]
 8005e90:	6879      	ldr	r1, [r7, #4]
 8005e92:	4613      	mov	r3, r2
 8005e94:	011b      	lsls	r3, r3, #4
 8005e96:	1a9b      	subs	r3, r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	440b      	add	r3, r1
 8005e9c:	3344      	adds	r3, #68	@ 0x44
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005ea2:	78fb      	ldrb	r3, [r7, #3]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eae:	461a      	mov	r2, r3
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005eb4:	78fa      	ldrb	r2, [r7, #3]
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	1a9b      	subs	r3, r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	440b      	add	r3, r1
 8005ec2:	3326      	adds	r3, #38	@ 0x26
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00a      	beq.n	8005ee0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005eca:	78fa      	ldrb	r2, [r7, #3]
 8005ecc:	6879      	ldr	r1, [r7, #4]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	1a9b      	subs	r3, r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	440b      	add	r3, r1
 8005ed8:	3326      	adds	r3, #38	@ 0x26
 8005eda:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d110      	bne.n	8005f02 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	78fa      	ldrb	r2, [r7, #3]
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f005 fc72 	bl	800b7d2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005eee:	78fb      	ldrb	r3, [r7, #3]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005efa:	461a      	mov	r2, r3
 8005efc:	2310      	movs	r3, #16
 8005efe:	6093      	str	r3, [r2, #8]
 8005f00:	e03d      	b.n	8005f7e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005f02:	78fa      	ldrb	r2, [r7, #3]
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	4613      	mov	r3, r2
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	1a9b      	subs	r3, r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	440b      	add	r3, r1
 8005f10:	3326      	adds	r3, #38	@ 0x26
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b03      	cmp	r3, #3
 8005f16:	d00a      	beq.n	8005f2e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005f18:	78fa      	ldrb	r2, [r7, #3]
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	1a9b      	subs	r3, r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	440b      	add	r3, r1
 8005f26:	3326      	adds	r3, #38	@ 0x26
 8005f28:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d127      	bne.n	8005f7e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005f2e:	78fb      	ldrb	r3, [r7, #3]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	78fa      	ldrb	r2, [r7, #3]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f4c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005f4e:	78fa      	ldrb	r2, [r7, #3]
 8005f50:	6879      	ldr	r1, [r7, #4]
 8005f52:	4613      	mov	r3, r2
 8005f54:	011b      	lsls	r3, r3, #4
 8005f56:	1a9b      	subs	r3, r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	440b      	add	r3, r1
 8005f5c:	334c      	adds	r3, #76	@ 0x4c
 8005f5e:	2201      	movs	r2, #1
 8005f60:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005f62:	78fa      	ldrb	r2, [r7, #3]
 8005f64:	6879      	ldr	r1, [r7, #4]
 8005f66:	4613      	mov	r3, r2
 8005f68:	011b      	lsls	r3, r3, #4
 8005f6a:	1a9b      	subs	r3, r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	440b      	add	r3, r1
 8005f70:	334c      	adds	r3, #76	@ 0x4c
 8005f72:	781a      	ldrb	r2, [r3, #0]
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	4619      	mov	r1, r3
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f008 fce9 	bl	800e950 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	799b      	ldrb	r3, [r3, #6]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d13b      	bne.n	8005ffe <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8005f86:	78fa      	ldrb	r2, [r7, #3]
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	1a9b      	subs	r3, r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	440b      	add	r3, r1
 8005f94:	3338      	adds	r3, #56	@ 0x38
 8005f96:	6819      	ldr	r1, [r3, #0]
 8005f98:	78fa      	ldrb	r2, [r7, #3]
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	011b      	lsls	r3, r3, #4
 8005fa0:	1a9b      	subs	r3, r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4403      	add	r3, r0
 8005fa6:	3328      	adds	r3, #40	@ 0x28
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	440b      	add	r3, r1
 8005fac:	1e59      	subs	r1, r3, #1
 8005fae:	78fa      	ldrb	r2, [r7, #3]
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	011b      	lsls	r3, r3, #4
 8005fb6:	1a9b      	subs	r3, r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4403      	add	r3, r0
 8005fbc:	3328      	adds	r3, #40	@ 0x28
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 8470 	beq.w	80068ae <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8005fce:	78fa      	ldrb	r2, [r7, #3]
 8005fd0:	6879      	ldr	r1, [r7, #4]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	011b      	lsls	r3, r3, #4
 8005fd6:	1a9b      	subs	r3, r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	440b      	add	r3, r1
 8005fdc:	333c      	adds	r3, #60	@ 0x3c
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	78fa      	ldrb	r2, [r7, #3]
 8005fe2:	f083 0301 	eor.w	r3, r3, #1
 8005fe6:	b2d8      	uxtb	r0, r3
 8005fe8:	6879      	ldr	r1, [r7, #4]
 8005fea:	4613      	mov	r3, r2
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	1a9b      	subs	r3, r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	440b      	add	r3, r1
 8005ff4:	333c      	adds	r3, #60	@ 0x3c
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	701a      	strb	r2, [r3, #0]
 8005ffa:	f000 bc58 	b.w	80068ae <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8005ffe:	78fa      	ldrb	r2, [r7, #3]
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	4613      	mov	r3, r2
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	1a9b      	subs	r3, r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	440b      	add	r3, r1
 800600c:	333c      	adds	r3, #60	@ 0x3c
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	78fa      	ldrb	r2, [r7, #3]
 8006012:	f083 0301 	eor.w	r3, r3, #1
 8006016:	b2d8      	uxtb	r0, r3
 8006018:	6879      	ldr	r1, [r7, #4]
 800601a:	4613      	mov	r3, r2
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	1a9b      	subs	r3, r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	440b      	add	r3, r1
 8006024:	333c      	adds	r3, #60	@ 0x3c
 8006026:	4602      	mov	r2, r0
 8006028:	701a      	strb	r2, [r3, #0]
 800602a:	f000 bc40 	b.w	80068ae <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	78fa      	ldrb	r2, [r7, #3]
 8006034:	4611      	mov	r1, r2
 8006036:	4618      	mov	r0, r3
 8006038:	f004 fe27 	bl	800ac8a <USB_ReadChInterrupts>
 800603c:	4603      	mov	r3, r0
 800603e:	f003 0320 	and.w	r3, r3, #32
 8006042:	2b20      	cmp	r3, #32
 8006044:	d131      	bne.n	80060aa <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006046:	78fb      	ldrb	r3, [r7, #3]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	4413      	add	r3, r2
 800604e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006052:	461a      	mov	r2, r3
 8006054:	2320      	movs	r3, #32
 8006056:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8006058:	78fa      	ldrb	r2, [r7, #3]
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	4613      	mov	r3, r2
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	1a9b      	subs	r3, r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	440b      	add	r3, r1
 8006066:	331a      	adds	r3, #26
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	2b01      	cmp	r3, #1
 800606c:	f040 841f 	bne.w	80068ae <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8006070:	78fa      	ldrb	r2, [r7, #3]
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	4613      	mov	r3, r2
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	1a9b      	subs	r3, r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	440b      	add	r3, r1
 800607e:	331b      	adds	r3, #27
 8006080:	2201      	movs	r2, #1
 8006082:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8006084:	78fa      	ldrb	r2, [r7, #3]
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	4613      	mov	r3, r2
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	1a9b      	subs	r3, r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	440b      	add	r3, r1
 8006092:	334d      	adds	r3, #77	@ 0x4d
 8006094:	2203      	movs	r2, #3
 8006096:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	78fa      	ldrb	r2, [r7, #3]
 800609e:	4611      	mov	r1, r2
 80060a0:	4618      	mov	r0, r3
 80060a2:	f005 fb96 	bl	800b7d2 <USB_HC_Halt>
 80060a6:	f000 bc02 	b.w	80068ae <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	78fa      	ldrb	r2, [r7, #3]
 80060b0:	4611      	mov	r1, r2
 80060b2:	4618      	mov	r0, r3
 80060b4:	f004 fde9 	bl	800ac8a <USB_ReadChInterrupts>
 80060b8:	4603      	mov	r3, r0
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b02      	cmp	r3, #2
 80060c0:	f040 8305 	bne.w	80066ce <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060d0:	461a      	mov	r2, r3
 80060d2:	2302      	movs	r3, #2
 80060d4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80060d6:	78fa      	ldrb	r2, [r7, #3]
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	4613      	mov	r3, r2
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	1a9b      	subs	r3, r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	440b      	add	r3, r1
 80060e4:	334d      	adds	r3, #77	@ 0x4d
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d114      	bne.n	8006116 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80060ec:	78fa      	ldrb	r2, [r7, #3]
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	4613      	mov	r3, r2
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	1a9b      	subs	r3, r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	440b      	add	r3, r1
 80060fa:	334d      	adds	r3, #77	@ 0x4d
 80060fc:	2202      	movs	r2, #2
 80060fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006100:	78fa      	ldrb	r2, [r7, #3]
 8006102:	6879      	ldr	r1, [r7, #4]
 8006104:	4613      	mov	r3, r2
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	1a9b      	subs	r3, r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	440b      	add	r3, r1
 800610e:	334c      	adds	r3, #76	@ 0x4c
 8006110:	2201      	movs	r2, #1
 8006112:	701a      	strb	r2, [r3, #0]
 8006114:	e2cc      	b.n	80066b0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006116:	78fa      	ldrb	r2, [r7, #3]
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	4613      	mov	r3, r2
 800611c:	011b      	lsls	r3, r3, #4
 800611e:	1a9b      	subs	r3, r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	440b      	add	r3, r1
 8006124:	334d      	adds	r3, #77	@ 0x4d
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b06      	cmp	r3, #6
 800612a:	d114      	bne.n	8006156 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800612c:	78fa      	ldrb	r2, [r7, #3]
 800612e:	6879      	ldr	r1, [r7, #4]
 8006130:	4613      	mov	r3, r2
 8006132:	011b      	lsls	r3, r3, #4
 8006134:	1a9b      	subs	r3, r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	440b      	add	r3, r1
 800613a:	334d      	adds	r3, #77	@ 0x4d
 800613c:	2202      	movs	r2, #2
 800613e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8006140:	78fa      	ldrb	r2, [r7, #3]
 8006142:	6879      	ldr	r1, [r7, #4]
 8006144:	4613      	mov	r3, r2
 8006146:	011b      	lsls	r3, r3, #4
 8006148:	1a9b      	subs	r3, r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	440b      	add	r3, r1
 800614e:	334c      	adds	r3, #76	@ 0x4c
 8006150:	2205      	movs	r2, #5
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	e2ac      	b.n	80066b0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006156:	78fa      	ldrb	r2, [r7, #3]
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	4613      	mov	r3, r2
 800615c:	011b      	lsls	r3, r3, #4
 800615e:	1a9b      	subs	r3, r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	440b      	add	r3, r1
 8006164:	334d      	adds	r3, #77	@ 0x4d
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	2b07      	cmp	r3, #7
 800616a:	d00b      	beq.n	8006184 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800616c:	78fa      	ldrb	r2, [r7, #3]
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	4613      	mov	r3, r2
 8006172:	011b      	lsls	r3, r3, #4
 8006174:	1a9b      	subs	r3, r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	440b      	add	r3, r1
 800617a:	334d      	adds	r3, #77	@ 0x4d
 800617c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800617e:	2b09      	cmp	r3, #9
 8006180:	f040 80a6 	bne.w	80062d0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006184:	78fa      	ldrb	r2, [r7, #3]
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	4613      	mov	r3, r2
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	1a9b      	subs	r3, r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	440b      	add	r3, r1
 8006192:	334d      	adds	r3, #77	@ 0x4d
 8006194:	2202      	movs	r2, #2
 8006196:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006198:	78fa      	ldrb	r2, [r7, #3]
 800619a:	6879      	ldr	r1, [r7, #4]
 800619c:	4613      	mov	r3, r2
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	1a9b      	subs	r3, r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	3344      	adds	r3, #68	@ 0x44
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	1c59      	adds	r1, r3, #1
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	4613      	mov	r3, r2
 80061b0:	011b      	lsls	r3, r3, #4
 80061b2:	1a9b      	subs	r3, r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4403      	add	r3, r0
 80061b8:	3344      	adds	r3, #68	@ 0x44
 80061ba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80061bc:	78fa      	ldrb	r2, [r7, #3]
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	4613      	mov	r3, r2
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	1a9b      	subs	r3, r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	440b      	add	r3, r1
 80061ca:	3344      	adds	r3, #68	@ 0x44
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d943      	bls.n	800625a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80061d2:	78fa      	ldrb	r2, [r7, #3]
 80061d4:	6879      	ldr	r1, [r7, #4]
 80061d6:	4613      	mov	r3, r2
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	1a9b      	subs	r3, r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	440b      	add	r3, r1
 80061e0:	3344      	adds	r3, #68	@ 0x44
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80061e6:	78fa      	ldrb	r2, [r7, #3]
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	4613      	mov	r3, r2
 80061ec:	011b      	lsls	r3, r3, #4
 80061ee:	1a9b      	subs	r3, r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	440b      	add	r3, r1
 80061f4:	331a      	adds	r3, #26
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d123      	bne.n	8006244 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80061fc:	78fa      	ldrb	r2, [r7, #3]
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	4613      	mov	r3, r2
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	1a9b      	subs	r3, r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	440b      	add	r3, r1
 800620a:	331b      	adds	r3, #27
 800620c:	2200      	movs	r2, #0
 800620e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8006210:	78fa      	ldrb	r2, [r7, #3]
 8006212:	6879      	ldr	r1, [r7, #4]
 8006214:	4613      	mov	r3, r2
 8006216:	011b      	lsls	r3, r3, #4
 8006218:	1a9b      	subs	r3, r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	440b      	add	r3, r1
 800621e:	331c      	adds	r3, #28
 8006220:	2200      	movs	r2, #0
 8006222:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006224:	78fb      	ldrb	r3, [r7, #3]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	4413      	add	r3, r2
 800622c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	78fa      	ldrb	r2, [r7, #3]
 8006234:	0151      	lsls	r1, r2, #5
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	440a      	add	r2, r1
 800623a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800623e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006242:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006244:	78fa      	ldrb	r2, [r7, #3]
 8006246:	6879      	ldr	r1, [r7, #4]
 8006248:	4613      	mov	r3, r2
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	1a9b      	subs	r3, r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	440b      	add	r3, r1
 8006252:	334c      	adds	r3, #76	@ 0x4c
 8006254:	2204      	movs	r2, #4
 8006256:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006258:	e229      	b.n	80066ae <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800625a:	78fa      	ldrb	r2, [r7, #3]
 800625c:	6879      	ldr	r1, [r7, #4]
 800625e:	4613      	mov	r3, r2
 8006260:	011b      	lsls	r3, r3, #4
 8006262:	1a9b      	subs	r3, r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	440b      	add	r3, r1
 8006268:	334c      	adds	r3, #76	@ 0x4c
 800626a:	2202      	movs	r2, #2
 800626c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800626e:	78fa      	ldrb	r2, [r7, #3]
 8006270:	6879      	ldr	r1, [r7, #4]
 8006272:	4613      	mov	r3, r2
 8006274:	011b      	lsls	r3, r3, #4
 8006276:	1a9b      	subs	r3, r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	440b      	add	r3, r1
 800627c:	3326      	adds	r3, #38	@ 0x26
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00b      	beq.n	800629c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006284:	78fa      	ldrb	r2, [r7, #3]
 8006286:	6879      	ldr	r1, [r7, #4]
 8006288:	4613      	mov	r3, r2
 800628a:	011b      	lsls	r3, r3, #4
 800628c:	1a9b      	subs	r3, r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	440b      	add	r3, r1
 8006292:	3326      	adds	r3, #38	@ 0x26
 8006294:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006296:	2b02      	cmp	r3, #2
 8006298:	f040 8209 	bne.w	80066ae <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80062b2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80062ba:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80062bc:	78fb      	ldrb	r3, [r7, #3]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062c8:	461a      	mov	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80062ce:	e1ee      	b.n	80066ae <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80062d0:	78fa      	ldrb	r2, [r7, #3]
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	4613      	mov	r3, r2
 80062d6:	011b      	lsls	r3, r3, #4
 80062d8:	1a9b      	subs	r3, r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	440b      	add	r3, r1
 80062de:	334d      	adds	r3, #77	@ 0x4d
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	2b05      	cmp	r3, #5
 80062e4:	f040 80c8 	bne.w	8006478 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80062e8:	78fa      	ldrb	r2, [r7, #3]
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	4613      	mov	r3, r2
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	1a9b      	subs	r3, r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	440b      	add	r3, r1
 80062f6:	334d      	adds	r3, #77	@ 0x4d
 80062f8:	2202      	movs	r2, #2
 80062fa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80062fc:	78fa      	ldrb	r2, [r7, #3]
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	4613      	mov	r3, r2
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	1a9b      	subs	r3, r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	440b      	add	r3, r1
 800630a:	331b      	adds	r3, #27
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	2b01      	cmp	r3, #1
 8006310:	f040 81ce 	bne.w	80066b0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006314:	78fa      	ldrb	r2, [r7, #3]
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	4613      	mov	r3, r2
 800631a:	011b      	lsls	r3, r3, #4
 800631c:	1a9b      	subs	r3, r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	440b      	add	r3, r1
 8006322:	3326      	adds	r3, #38	@ 0x26
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	2b03      	cmp	r3, #3
 8006328:	d16b      	bne.n	8006402 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800632a:	78fa      	ldrb	r2, [r7, #3]
 800632c:	6879      	ldr	r1, [r7, #4]
 800632e:	4613      	mov	r3, r2
 8006330:	011b      	lsls	r3, r3, #4
 8006332:	1a9b      	subs	r3, r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	440b      	add	r3, r1
 8006338:	3348      	adds	r3, #72	@ 0x48
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	1c59      	adds	r1, r3, #1
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	4613      	mov	r3, r2
 8006342:	011b      	lsls	r3, r3, #4
 8006344:	1a9b      	subs	r3, r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4403      	add	r3, r0
 800634a:	3348      	adds	r3, #72	@ 0x48
 800634c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800634e:	78fa      	ldrb	r2, [r7, #3]
 8006350:	6879      	ldr	r1, [r7, #4]
 8006352:	4613      	mov	r3, r2
 8006354:	011b      	lsls	r3, r3, #4
 8006356:	1a9b      	subs	r3, r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	440b      	add	r3, r1
 800635c:	3348      	adds	r3, #72	@ 0x48
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b02      	cmp	r3, #2
 8006362:	d943      	bls.n	80063ec <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8006364:	78fa      	ldrb	r2, [r7, #3]
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	4613      	mov	r3, r2
 800636a:	011b      	lsls	r3, r3, #4
 800636c:	1a9b      	subs	r3, r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	440b      	add	r3, r1
 8006372:	3348      	adds	r3, #72	@ 0x48
 8006374:	2200      	movs	r2, #0
 8006376:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8006378:	78fa      	ldrb	r2, [r7, #3]
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	4613      	mov	r3, r2
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	1a9b      	subs	r3, r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	440b      	add	r3, r1
 8006386:	331b      	adds	r3, #27
 8006388:	2200      	movs	r2, #0
 800638a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800638c:	78fa      	ldrb	r2, [r7, #3]
 800638e:	6879      	ldr	r1, [r7, #4]
 8006390:	4613      	mov	r3, r2
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	1a9b      	subs	r3, r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	440b      	add	r3, r1
 800639a:	3344      	adds	r3, #68	@ 0x44
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d809      	bhi.n	80063b6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80063a2:	78fa      	ldrb	r2, [r7, #3]
 80063a4:	6879      	ldr	r1, [r7, #4]
 80063a6:	4613      	mov	r3, r2
 80063a8:	011b      	lsls	r3, r3, #4
 80063aa:	1a9b      	subs	r3, r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	440b      	add	r3, r1
 80063b0:	331c      	adds	r3, #28
 80063b2:	2201      	movs	r2, #1
 80063b4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80063b6:	78fb      	ldrb	r3, [r7, #3]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	78fa      	ldrb	r2, [r7, #3]
 80063c6:	0151      	lsls	r1, r2, #5
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	440a      	add	r2, r1
 80063cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063d4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80063d6:	78fa      	ldrb	r2, [r7, #3]
 80063d8:	6879      	ldr	r1, [r7, #4]
 80063da:	4613      	mov	r3, r2
 80063dc:	011b      	lsls	r3, r3, #4
 80063de:	1a9b      	subs	r3, r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	440b      	add	r3, r1
 80063e4:	334c      	adds	r3, #76	@ 0x4c
 80063e6:	2204      	movs	r2, #4
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	e014      	b.n	8006416 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80063ec:	78fa      	ldrb	r2, [r7, #3]
 80063ee:	6879      	ldr	r1, [r7, #4]
 80063f0:	4613      	mov	r3, r2
 80063f2:	011b      	lsls	r3, r3, #4
 80063f4:	1a9b      	subs	r3, r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	440b      	add	r3, r1
 80063fa:	334c      	adds	r3, #76	@ 0x4c
 80063fc:	2202      	movs	r2, #2
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	e009      	b.n	8006416 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006402:	78fa      	ldrb	r2, [r7, #3]
 8006404:	6879      	ldr	r1, [r7, #4]
 8006406:	4613      	mov	r3, r2
 8006408:	011b      	lsls	r3, r3, #4
 800640a:	1a9b      	subs	r3, r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	440b      	add	r3, r1
 8006410:	334c      	adds	r3, #76	@ 0x4c
 8006412:	2202      	movs	r2, #2
 8006414:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006416:	78fa      	ldrb	r2, [r7, #3]
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	4613      	mov	r3, r2
 800641c:	011b      	lsls	r3, r3, #4
 800641e:	1a9b      	subs	r3, r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	440b      	add	r3, r1
 8006424:	3326      	adds	r3, #38	@ 0x26
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00b      	beq.n	8006444 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800642c:	78fa      	ldrb	r2, [r7, #3]
 800642e:	6879      	ldr	r1, [r7, #4]
 8006430:	4613      	mov	r3, r2
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	1a9b      	subs	r3, r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	440b      	add	r3, r1
 800643a:	3326      	adds	r3, #38	@ 0x26
 800643c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800643e:	2b02      	cmp	r3, #2
 8006440:	f040 8136 	bne.w	80066b0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	4413      	add	r3, r2
 800644c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800645a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006462:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006464:	78fb      	ldrb	r3, [r7, #3]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	4413      	add	r3, r2
 800646c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006470:	461a      	mov	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6013      	str	r3, [r2, #0]
 8006476:	e11b      	b.n	80066b0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006478:	78fa      	ldrb	r2, [r7, #3]
 800647a:	6879      	ldr	r1, [r7, #4]
 800647c:	4613      	mov	r3, r2
 800647e:	011b      	lsls	r3, r3, #4
 8006480:	1a9b      	subs	r3, r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	440b      	add	r3, r1
 8006486:	334d      	adds	r3, #77	@ 0x4d
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	2b03      	cmp	r3, #3
 800648c:	f040 8081 	bne.w	8006592 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006490:	78fa      	ldrb	r2, [r7, #3]
 8006492:	6879      	ldr	r1, [r7, #4]
 8006494:	4613      	mov	r3, r2
 8006496:	011b      	lsls	r3, r3, #4
 8006498:	1a9b      	subs	r3, r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	440b      	add	r3, r1
 800649e:	334d      	adds	r3, #77	@ 0x4d
 80064a0:	2202      	movs	r2, #2
 80064a2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80064a4:	78fa      	ldrb	r2, [r7, #3]
 80064a6:	6879      	ldr	r1, [r7, #4]
 80064a8:	4613      	mov	r3, r2
 80064aa:	011b      	lsls	r3, r3, #4
 80064ac:	1a9b      	subs	r3, r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	440b      	add	r3, r1
 80064b2:	331b      	adds	r3, #27
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	f040 80fa 	bne.w	80066b0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80064bc:	78fa      	ldrb	r2, [r7, #3]
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	4613      	mov	r3, r2
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	1a9b      	subs	r3, r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	440b      	add	r3, r1
 80064ca:	334c      	adds	r3, #76	@ 0x4c
 80064cc:	2202      	movs	r2, #2
 80064ce:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	78fa      	ldrb	r2, [r7, #3]
 80064e0:	0151      	lsls	r1, r2, #5
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	440a      	add	r2, r1
 80064e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064ee:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	78fa      	ldrb	r2, [r7, #3]
 8006500:	0151      	lsls	r1, r2, #5
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	440a      	add	r2, r1
 8006506:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800650a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800650e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	4413      	add	r3, r2
 8006518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	78fa      	ldrb	r2, [r7, #3]
 8006520:	0151      	lsls	r1, r2, #5
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	440a      	add	r2, r1
 8006526:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800652a:	f023 0320 	bic.w	r3, r3, #32
 800652e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006530:	78fa      	ldrb	r2, [r7, #3]
 8006532:	6879      	ldr	r1, [r7, #4]
 8006534:	4613      	mov	r3, r2
 8006536:	011b      	lsls	r3, r3, #4
 8006538:	1a9b      	subs	r3, r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	440b      	add	r3, r1
 800653e:	3326      	adds	r3, #38	@ 0x26
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00b      	beq.n	800655e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006546:	78fa      	ldrb	r2, [r7, #3]
 8006548:	6879      	ldr	r1, [r7, #4]
 800654a:	4613      	mov	r3, r2
 800654c:	011b      	lsls	r3, r3, #4
 800654e:	1a9b      	subs	r3, r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	440b      	add	r3, r1
 8006554:	3326      	adds	r3, #38	@ 0x26
 8006556:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006558:	2b02      	cmp	r3, #2
 800655a:	f040 80a9 	bne.w	80066b0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800655e:	78fb      	ldrb	r3, [r7, #3]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	4413      	add	r3, r2
 8006566:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006574:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800657c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800657e:	78fb      	ldrb	r3, [r7, #3]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	4413      	add	r3, r2
 8006586:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800658a:	461a      	mov	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	e08e      	b.n	80066b0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006592:	78fa      	ldrb	r2, [r7, #3]
 8006594:	6879      	ldr	r1, [r7, #4]
 8006596:	4613      	mov	r3, r2
 8006598:	011b      	lsls	r3, r3, #4
 800659a:	1a9b      	subs	r3, r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	440b      	add	r3, r1
 80065a0:	334d      	adds	r3, #77	@ 0x4d
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	2b04      	cmp	r3, #4
 80065a6:	d143      	bne.n	8006630 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80065a8:	78fa      	ldrb	r2, [r7, #3]
 80065aa:	6879      	ldr	r1, [r7, #4]
 80065ac:	4613      	mov	r3, r2
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	1a9b      	subs	r3, r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	440b      	add	r3, r1
 80065b6:	334d      	adds	r3, #77	@ 0x4d
 80065b8:	2202      	movs	r2, #2
 80065ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80065bc:	78fa      	ldrb	r2, [r7, #3]
 80065be:	6879      	ldr	r1, [r7, #4]
 80065c0:	4613      	mov	r3, r2
 80065c2:	011b      	lsls	r3, r3, #4
 80065c4:	1a9b      	subs	r3, r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	440b      	add	r3, r1
 80065ca:	334c      	adds	r3, #76	@ 0x4c
 80065cc:	2202      	movs	r2, #2
 80065ce:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80065d0:	78fa      	ldrb	r2, [r7, #3]
 80065d2:	6879      	ldr	r1, [r7, #4]
 80065d4:	4613      	mov	r3, r2
 80065d6:	011b      	lsls	r3, r3, #4
 80065d8:	1a9b      	subs	r3, r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	440b      	add	r3, r1
 80065de:	3326      	adds	r3, #38	@ 0x26
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80065e6:	78fa      	ldrb	r2, [r7, #3]
 80065e8:	6879      	ldr	r1, [r7, #4]
 80065ea:	4613      	mov	r3, r2
 80065ec:	011b      	lsls	r3, r3, #4
 80065ee:	1a9b      	subs	r3, r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	440b      	add	r3, r1
 80065f4:	3326      	adds	r3, #38	@ 0x26
 80065f6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d159      	bne.n	80066b0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	4413      	add	r3, r2
 8006604:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006612:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800661a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	4413      	add	r3, r2
 8006624:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006628:	461a      	mov	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	e03f      	b.n	80066b0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8006630:	78fa      	ldrb	r2, [r7, #3]
 8006632:	6879      	ldr	r1, [r7, #4]
 8006634:	4613      	mov	r3, r2
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	1a9b      	subs	r3, r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	440b      	add	r3, r1
 800663e:	334d      	adds	r3, #77	@ 0x4d
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	2b08      	cmp	r3, #8
 8006644:	d126      	bne.n	8006694 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006646:	78fa      	ldrb	r2, [r7, #3]
 8006648:	6879      	ldr	r1, [r7, #4]
 800664a:	4613      	mov	r3, r2
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	1a9b      	subs	r3, r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	440b      	add	r3, r1
 8006654:	334d      	adds	r3, #77	@ 0x4d
 8006656:	2202      	movs	r2, #2
 8006658:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800665a:	78fa      	ldrb	r2, [r7, #3]
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	4613      	mov	r3, r2
 8006660:	011b      	lsls	r3, r3, #4
 8006662:	1a9b      	subs	r3, r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	440b      	add	r3, r1
 8006668:	3344      	adds	r3, #68	@ 0x44
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	1c59      	adds	r1, r3, #1
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	4613      	mov	r3, r2
 8006672:	011b      	lsls	r3, r3, #4
 8006674:	1a9b      	subs	r3, r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4403      	add	r3, r0
 800667a:	3344      	adds	r3, #68	@ 0x44
 800667c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800667e:	78fa      	ldrb	r2, [r7, #3]
 8006680:	6879      	ldr	r1, [r7, #4]
 8006682:	4613      	mov	r3, r2
 8006684:	011b      	lsls	r3, r3, #4
 8006686:	1a9b      	subs	r3, r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	440b      	add	r3, r1
 800668c:	334c      	adds	r3, #76	@ 0x4c
 800668e:	2204      	movs	r2, #4
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	e00d      	b.n	80066b0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8006694:	78fa      	ldrb	r2, [r7, #3]
 8006696:	6879      	ldr	r1, [r7, #4]
 8006698:	4613      	mov	r3, r2
 800669a:	011b      	lsls	r3, r3, #4
 800669c:	1a9b      	subs	r3, r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	440b      	add	r3, r1
 80066a2:	334d      	adds	r3, #77	@ 0x4d
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	f000 8100 	beq.w	80068ac <HCD_HC_IN_IRQHandler+0xcca>
 80066ac:	e000      	b.n	80066b0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80066ae:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80066b0:	78fa      	ldrb	r2, [r7, #3]
 80066b2:	6879      	ldr	r1, [r7, #4]
 80066b4:	4613      	mov	r3, r2
 80066b6:	011b      	lsls	r3, r3, #4
 80066b8:	1a9b      	subs	r3, r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	440b      	add	r3, r1
 80066be:	334c      	adds	r3, #76	@ 0x4c
 80066c0:	781a      	ldrb	r2, [r3, #0]
 80066c2:	78fb      	ldrb	r3, [r7, #3]
 80066c4:	4619      	mov	r1, r3
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f008 f942 	bl	800e950 <HAL_HCD_HC_NotifyURBChange_Callback>
 80066cc:	e0ef      	b.n	80068ae <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	78fa      	ldrb	r2, [r7, #3]
 80066d4:	4611      	mov	r1, r2
 80066d6:	4618      	mov	r0, r3
 80066d8:	f004 fad7 	bl	800ac8a <USB_ReadChInterrupts>
 80066dc:	4603      	mov	r3, r0
 80066de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e2:	2b40      	cmp	r3, #64	@ 0x40
 80066e4:	d12f      	bne.n	8006746 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80066e6:	78fb      	ldrb	r3, [r7, #3]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066f2:	461a      	mov	r2, r3
 80066f4:	2340      	movs	r3, #64	@ 0x40
 80066f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80066f8:	78fa      	ldrb	r2, [r7, #3]
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	4613      	mov	r3, r2
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	1a9b      	subs	r3, r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	440b      	add	r3, r1
 8006706:	334d      	adds	r3, #77	@ 0x4d
 8006708:	2205      	movs	r2, #5
 800670a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800670c:	78fa      	ldrb	r2, [r7, #3]
 800670e:	6879      	ldr	r1, [r7, #4]
 8006710:	4613      	mov	r3, r2
 8006712:	011b      	lsls	r3, r3, #4
 8006714:	1a9b      	subs	r3, r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	440b      	add	r3, r1
 800671a:	331a      	adds	r3, #26
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d109      	bne.n	8006736 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006722:	78fa      	ldrb	r2, [r7, #3]
 8006724:	6879      	ldr	r1, [r7, #4]
 8006726:	4613      	mov	r3, r2
 8006728:	011b      	lsls	r3, r3, #4
 800672a:	1a9b      	subs	r3, r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	440b      	add	r3, r1
 8006730:	3344      	adds	r3, #68	@ 0x44
 8006732:	2200      	movs	r2, #0
 8006734:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	78fa      	ldrb	r2, [r7, #3]
 800673c:	4611      	mov	r1, r2
 800673e:	4618      	mov	r0, r3
 8006740:	f005 f847 	bl	800b7d2 <USB_HC_Halt>
 8006744:	e0b3      	b.n	80068ae <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	78fa      	ldrb	r2, [r7, #3]
 800674c:	4611      	mov	r1, r2
 800674e:	4618      	mov	r0, r3
 8006750:	f004 fa9b 	bl	800ac8a <USB_ReadChInterrupts>
 8006754:	4603      	mov	r3, r0
 8006756:	f003 0310 	and.w	r3, r3, #16
 800675a:	2b10      	cmp	r3, #16
 800675c:	f040 80a7 	bne.w	80068ae <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006760:	78fa      	ldrb	r2, [r7, #3]
 8006762:	6879      	ldr	r1, [r7, #4]
 8006764:	4613      	mov	r3, r2
 8006766:	011b      	lsls	r3, r3, #4
 8006768:	1a9b      	subs	r3, r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	440b      	add	r3, r1
 800676e:	3326      	adds	r3, #38	@ 0x26
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b03      	cmp	r3, #3
 8006774:	d11b      	bne.n	80067ae <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006776:	78fa      	ldrb	r2, [r7, #3]
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	4613      	mov	r3, r2
 800677c:	011b      	lsls	r3, r3, #4
 800677e:	1a9b      	subs	r3, r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	440b      	add	r3, r1
 8006784:	3344      	adds	r3, #68	@ 0x44
 8006786:	2200      	movs	r2, #0
 8006788:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800678a:	78fa      	ldrb	r2, [r7, #3]
 800678c:	6879      	ldr	r1, [r7, #4]
 800678e:	4613      	mov	r3, r2
 8006790:	011b      	lsls	r3, r3, #4
 8006792:	1a9b      	subs	r3, r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	440b      	add	r3, r1
 8006798:	334d      	adds	r3, #77	@ 0x4d
 800679a:	2204      	movs	r2, #4
 800679c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	78fa      	ldrb	r2, [r7, #3]
 80067a4:	4611      	mov	r1, r2
 80067a6:	4618      	mov	r0, r3
 80067a8:	f005 f813 	bl	800b7d2 <USB_HC_Halt>
 80067ac:	e03f      	b.n	800682e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80067ae:	78fa      	ldrb	r2, [r7, #3]
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	4613      	mov	r3, r2
 80067b4:	011b      	lsls	r3, r3, #4
 80067b6:	1a9b      	subs	r3, r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	440b      	add	r3, r1
 80067bc:	3326      	adds	r3, #38	@ 0x26
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00a      	beq.n	80067da <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80067c4:	78fa      	ldrb	r2, [r7, #3]
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	4613      	mov	r3, r2
 80067ca:	011b      	lsls	r3, r3, #4
 80067cc:	1a9b      	subs	r3, r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	440b      	add	r3, r1
 80067d2:	3326      	adds	r3, #38	@ 0x26
 80067d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d129      	bne.n	800682e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80067da:	78fa      	ldrb	r2, [r7, #3]
 80067dc:	6879      	ldr	r1, [r7, #4]
 80067de:	4613      	mov	r3, r2
 80067e0:	011b      	lsls	r3, r3, #4
 80067e2:	1a9b      	subs	r3, r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	440b      	add	r3, r1
 80067e8:	3344      	adds	r3, #68	@ 0x44
 80067ea:	2200      	movs	r2, #0
 80067ec:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	799b      	ldrb	r3, [r3, #6]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00a      	beq.n	800680c <HCD_HC_IN_IRQHandler+0xc2a>
 80067f6:	78fa      	ldrb	r2, [r7, #3]
 80067f8:	6879      	ldr	r1, [r7, #4]
 80067fa:	4613      	mov	r3, r2
 80067fc:	011b      	lsls	r3, r3, #4
 80067fe:	1a9b      	subs	r3, r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	440b      	add	r3, r1
 8006804:	331b      	adds	r3, #27
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d110      	bne.n	800682e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800680c:	78fa      	ldrb	r2, [r7, #3]
 800680e:	6879      	ldr	r1, [r7, #4]
 8006810:	4613      	mov	r3, r2
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	1a9b      	subs	r3, r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	440b      	add	r3, r1
 800681a:	334d      	adds	r3, #77	@ 0x4d
 800681c:	2204      	movs	r2, #4
 800681e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	78fa      	ldrb	r2, [r7, #3]
 8006826:	4611      	mov	r1, r2
 8006828:	4618      	mov	r0, r3
 800682a:	f004 ffd2 	bl	800b7d2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800682e:	78fa      	ldrb	r2, [r7, #3]
 8006830:	6879      	ldr	r1, [r7, #4]
 8006832:	4613      	mov	r3, r2
 8006834:	011b      	lsls	r3, r3, #4
 8006836:	1a9b      	subs	r3, r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	440b      	add	r3, r1
 800683c:	331b      	adds	r3, #27
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d129      	bne.n	8006898 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006844:	78fa      	ldrb	r2, [r7, #3]
 8006846:	6879      	ldr	r1, [r7, #4]
 8006848:	4613      	mov	r3, r2
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	1a9b      	subs	r3, r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	440b      	add	r3, r1
 8006852:	331b      	adds	r3, #27
 8006854:	2200      	movs	r2, #0
 8006856:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006858:	78fb      	ldrb	r3, [r7, #3]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	4413      	add	r3, r2
 8006860:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	78fa      	ldrb	r2, [r7, #3]
 8006868:	0151      	lsls	r1, r2, #5
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	440a      	add	r2, r1
 800686e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006876:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8006878:	78fb      	ldrb	r3, [r7, #3]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	4413      	add	r3, r2
 8006880:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	78fa      	ldrb	r2, [r7, #3]
 8006888:	0151      	lsls	r1, r2, #5
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	440a      	add	r2, r1
 800688e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006892:	f043 0320 	orr.w	r3, r3, #32
 8006896:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006898:	78fb      	ldrb	r3, [r7, #3]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068a4:	461a      	mov	r2, r3
 80068a6:	2310      	movs	r3, #16
 80068a8:	6093      	str	r3, [r2, #8]
 80068aa:	e000      	b.n	80068ae <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80068ac:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	78fa      	ldrb	r2, [r7, #3]
 80068d0:	4611      	mov	r1, r2
 80068d2:	4618      	mov	r0, r3
 80068d4:	f004 f9d9 	bl	800ac8a <USB_ReadChInterrupts>
 80068d8:	4603      	mov	r3, r0
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d11b      	bne.n	800691a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80068e2:	78fb      	ldrb	r3, [r7, #3]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068ee:	461a      	mov	r2, r3
 80068f0:	2304      	movs	r3, #4
 80068f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80068f4:	78fa      	ldrb	r2, [r7, #3]
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	4613      	mov	r3, r2
 80068fa:	011b      	lsls	r3, r3, #4
 80068fc:	1a9b      	subs	r3, r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	440b      	add	r3, r1
 8006902:	334d      	adds	r3, #77	@ 0x4d
 8006904:	2207      	movs	r2, #7
 8006906:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	78fa      	ldrb	r2, [r7, #3]
 800690e:	4611      	mov	r1, r2
 8006910:	4618      	mov	r0, r3
 8006912:	f004 ff5e 	bl	800b7d2 <USB_HC_Halt>
 8006916:	f000 bc89 	b.w	800722c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	78fa      	ldrb	r2, [r7, #3]
 8006920:	4611      	mov	r1, r2
 8006922:	4618      	mov	r0, r3
 8006924:	f004 f9b1 	bl	800ac8a <USB_ReadChInterrupts>
 8006928:	4603      	mov	r3, r0
 800692a:	f003 0320 	and.w	r3, r3, #32
 800692e:	2b20      	cmp	r3, #32
 8006930:	f040 8082 	bne.w	8006a38 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006934:	78fb      	ldrb	r3, [r7, #3]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	4413      	add	r3, r2
 800693c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006940:	461a      	mov	r2, r3
 8006942:	2320      	movs	r3, #32
 8006944:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8006946:	78fa      	ldrb	r2, [r7, #3]
 8006948:	6879      	ldr	r1, [r7, #4]
 800694a:	4613      	mov	r3, r2
 800694c:	011b      	lsls	r3, r3, #4
 800694e:	1a9b      	subs	r3, r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	440b      	add	r3, r1
 8006954:	3319      	adds	r3, #25
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d124      	bne.n	80069a6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800695c:	78fa      	ldrb	r2, [r7, #3]
 800695e:	6879      	ldr	r1, [r7, #4]
 8006960:	4613      	mov	r3, r2
 8006962:	011b      	lsls	r3, r3, #4
 8006964:	1a9b      	subs	r3, r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	440b      	add	r3, r1
 800696a:	3319      	adds	r3, #25
 800696c:	2200      	movs	r2, #0
 800696e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006970:	78fa      	ldrb	r2, [r7, #3]
 8006972:	6879      	ldr	r1, [r7, #4]
 8006974:	4613      	mov	r3, r2
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	1a9b      	subs	r3, r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	440b      	add	r3, r1
 800697e:	334c      	adds	r3, #76	@ 0x4c
 8006980:	2202      	movs	r2, #2
 8006982:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8006984:	78fa      	ldrb	r2, [r7, #3]
 8006986:	6879      	ldr	r1, [r7, #4]
 8006988:	4613      	mov	r3, r2
 800698a:	011b      	lsls	r3, r3, #4
 800698c:	1a9b      	subs	r3, r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	440b      	add	r3, r1
 8006992:	334d      	adds	r3, #77	@ 0x4d
 8006994:	2203      	movs	r2, #3
 8006996:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	78fa      	ldrb	r2, [r7, #3]
 800699e:	4611      	mov	r1, r2
 80069a0:	4618      	mov	r0, r3
 80069a2:	f004 ff16 	bl	800b7d2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80069a6:	78fa      	ldrb	r2, [r7, #3]
 80069a8:	6879      	ldr	r1, [r7, #4]
 80069aa:	4613      	mov	r3, r2
 80069ac:	011b      	lsls	r3, r3, #4
 80069ae:	1a9b      	subs	r3, r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	440b      	add	r3, r1
 80069b4:	331a      	adds	r3, #26
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	f040 8437 	bne.w	800722c <HCD_HC_OUT_IRQHandler+0x978>
 80069be:	78fa      	ldrb	r2, [r7, #3]
 80069c0:	6879      	ldr	r1, [r7, #4]
 80069c2:	4613      	mov	r3, r2
 80069c4:	011b      	lsls	r3, r3, #4
 80069c6:	1a9b      	subs	r3, r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	440b      	add	r3, r1
 80069cc:	331b      	adds	r3, #27
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f040 842b 	bne.w	800722c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80069d6:	78fa      	ldrb	r2, [r7, #3]
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	4613      	mov	r3, r2
 80069dc:	011b      	lsls	r3, r3, #4
 80069de:	1a9b      	subs	r3, r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	440b      	add	r3, r1
 80069e4:	3326      	adds	r3, #38	@ 0x26
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d009      	beq.n	8006a00 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80069ec:	78fa      	ldrb	r2, [r7, #3]
 80069ee:	6879      	ldr	r1, [r7, #4]
 80069f0:	4613      	mov	r3, r2
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	1a9b      	subs	r3, r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	440b      	add	r3, r1
 80069fa:	331b      	adds	r3, #27
 80069fc:	2201      	movs	r2, #1
 80069fe:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8006a00:	78fa      	ldrb	r2, [r7, #3]
 8006a02:	6879      	ldr	r1, [r7, #4]
 8006a04:	4613      	mov	r3, r2
 8006a06:	011b      	lsls	r3, r3, #4
 8006a08:	1a9b      	subs	r3, r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	440b      	add	r3, r1
 8006a0e:	334d      	adds	r3, #77	@ 0x4d
 8006a10:	2203      	movs	r2, #3
 8006a12:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	78fa      	ldrb	r2, [r7, #3]
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f004 fed8 	bl	800b7d2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8006a22:	78fa      	ldrb	r2, [r7, #3]
 8006a24:	6879      	ldr	r1, [r7, #4]
 8006a26:	4613      	mov	r3, r2
 8006a28:	011b      	lsls	r3, r3, #4
 8006a2a:	1a9b      	subs	r3, r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	440b      	add	r3, r1
 8006a30:	3344      	adds	r3, #68	@ 0x44
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	e3f9      	b.n	800722c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	78fa      	ldrb	r2, [r7, #3]
 8006a3e:	4611      	mov	r1, r2
 8006a40:	4618      	mov	r0, r3
 8006a42:	f004 f922 	bl	800ac8a <USB_ReadChInterrupts>
 8006a46:	4603      	mov	r3, r0
 8006a48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a50:	d111      	bne.n	8006a76 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8006a52:	78fb      	ldrb	r3, [r7, #3]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a64:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	78fa      	ldrb	r2, [r7, #3]
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f004 feaf 	bl	800b7d2 <USB_HC_Halt>
 8006a74:	e3da      	b.n	800722c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	78fa      	ldrb	r2, [r7, #3]
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f004 f903 	bl	800ac8a <USB_ReadChInterrupts>
 8006a84:	4603      	mov	r3, r0
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d168      	bne.n	8006b60 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006a8e:	78fa      	ldrb	r2, [r7, #3]
 8006a90:	6879      	ldr	r1, [r7, #4]
 8006a92:	4613      	mov	r3, r2
 8006a94:	011b      	lsls	r3, r3, #4
 8006a96:	1a9b      	subs	r3, r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	440b      	add	r3, r1
 8006a9c:	3344      	adds	r3, #68	@ 0x44
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	78fa      	ldrb	r2, [r7, #3]
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f004 f8ed 	bl	800ac8a <USB_ReadChInterrupts>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab6:	2b40      	cmp	r3, #64	@ 0x40
 8006ab8:	d112      	bne.n	8006ae0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8006aba:	78fa      	ldrb	r2, [r7, #3]
 8006abc:	6879      	ldr	r1, [r7, #4]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	011b      	lsls	r3, r3, #4
 8006ac2:	1a9b      	subs	r3, r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	440b      	add	r3, r1
 8006ac8:	3319      	adds	r3, #25
 8006aca:	2201      	movs	r2, #1
 8006acc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006ace:	78fb      	ldrb	r3, [r7, #3]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ada:	461a      	mov	r2, r3
 8006adc:	2340      	movs	r3, #64	@ 0x40
 8006ade:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8006ae0:	78fa      	ldrb	r2, [r7, #3]
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	011b      	lsls	r3, r3, #4
 8006ae8:	1a9b      	subs	r3, r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	440b      	add	r3, r1
 8006aee:	331b      	adds	r3, #27
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d019      	beq.n	8006b2a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006af6:	78fa      	ldrb	r2, [r7, #3]
 8006af8:	6879      	ldr	r1, [r7, #4]
 8006afa:	4613      	mov	r3, r2
 8006afc:	011b      	lsls	r3, r3, #4
 8006afe:	1a9b      	subs	r3, r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	440b      	add	r3, r1
 8006b04:	331b      	adds	r3, #27
 8006b06:	2200      	movs	r2, #0
 8006b08:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006b0a:	78fb      	ldrb	r3, [r7, #3]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	78fa      	ldrb	r2, [r7, #3]
 8006b1a:	0151      	lsls	r1, r2, #5
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	440a      	add	r2, r1
 8006b20:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b28:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8006b2a:	78fb      	ldrb	r3, [r7, #3]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b36:	461a      	mov	r2, r3
 8006b38:	2301      	movs	r3, #1
 8006b3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8006b3c:	78fa      	ldrb	r2, [r7, #3]
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	4613      	mov	r3, r2
 8006b42:	011b      	lsls	r3, r3, #4
 8006b44:	1a9b      	subs	r3, r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	440b      	add	r3, r1
 8006b4a:	334d      	adds	r3, #77	@ 0x4d
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	78fa      	ldrb	r2, [r7, #3]
 8006b56:	4611      	mov	r1, r2
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f004 fe3a 	bl	800b7d2 <USB_HC_Halt>
 8006b5e:	e365      	b.n	800722c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	78fa      	ldrb	r2, [r7, #3]
 8006b66:	4611      	mov	r1, r2
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f004 f88e 	bl	800ac8a <USB_ReadChInterrupts>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b74:	2b40      	cmp	r3, #64	@ 0x40
 8006b76:	d139      	bne.n	8006bec <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8006b78:	78fa      	ldrb	r2, [r7, #3]
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	011b      	lsls	r3, r3, #4
 8006b80:	1a9b      	subs	r3, r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	440b      	add	r3, r1
 8006b86:	334d      	adds	r3, #77	@ 0x4d
 8006b88:	2205      	movs	r2, #5
 8006b8a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8006b8c:	78fa      	ldrb	r2, [r7, #3]
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	4613      	mov	r3, r2
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	1a9b      	subs	r3, r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	440b      	add	r3, r1
 8006b9a:	331a      	adds	r3, #26
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d109      	bne.n	8006bb6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8006ba2:	78fa      	ldrb	r2, [r7, #3]
 8006ba4:	6879      	ldr	r1, [r7, #4]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	1a9b      	subs	r3, r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	440b      	add	r3, r1
 8006bb0:	3319      	adds	r3, #25
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8006bb6:	78fa      	ldrb	r2, [r7, #3]
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	011b      	lsls	r3, r3, #4
 8006bbe:	1a9b      	subs	r3, r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	440b      	add	r3, r1
 8006bc4:	3344      	adds	r3, #68	@ 0x44
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	78fa      	ldrb	r2, [r7, #3]
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f004 fdfd 	bl	800b7d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006bd8:	78fb      	ldrb	r3, [r7, #3]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006be4:	461a      	mov	r2, r3
 8006be6:	2340      	movs	r3, #64	@ 0x40
 8006be8:	6093      	str	r3, [r2, #8]
 8006bea:	e31f      	b.n	800722c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	78fa      	ldrb	r2, [r7, #3]
 8006bf2:	4611      	mov	r1, r2
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f004 f848 	bl	800ac8a <USB_ReadChInterrupts>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	f003 0308 	and.w	r3, r3, #8
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d11a      	bne.n	8006c3a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006c04:	78fb      	ldrb	r3, [r7, #3]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c10:	461a      	mov	r2, r3
 8006c12:	2308      	movs	r3, #8
 8006c14:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006c16:	78fa      	ldrb	r2, [r7, #3]
 8006c18:	6879      	ldr	r1, [r7, #4]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	011b      	lsls	r3, r3, #4
 8006c1e:	1a9b      	subs	r3, r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	440b      	add	r3, r1
 8006c24:	334d      	adds	r3, #77	@ 0x4d
 8006c26:	2206      	movs	r2, #6
 8006c28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	78fa      	ldrb	r2, [r7, #3]
 8006c30:	4611      	mov	r1, r2
 8006c32:	4618      	mov	r0, r3
 8006c34:	f004 fdcd 	bl	800b7d2 <USB_HC_Halt>
 8006c38:	e2f8      	b.n	800722c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	78fa      	ldrb	r2, [r7, #3]
 8006c40:	4611      	mov	r1, r2
 8006c42:	4618      	mov	r0, r3
 8006c44:	f004 f821 	bl	800ac8a <USB_ReadChInterrupts>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	f003 0310 	and.w	r3, r3, #16
 8006c4e:	2b10      	cmp	r3, #16
 8006c50:	d144      	bne.n	8006cdc <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006c52:	78fa      	ldrb	r2, [r7, #3]
 8006c54:	6879      	ldr	r1, [r7, #4]
 8006c56:	4613      	mov	r3, r2
 8006c58:	011b      	lsls	r3, r3, #4
 8006c5a:	1a9b      	subs	r3, r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	440b      	add	r3, r1
 8006c60:	3344      	adds	r3, #68	@ 0x44
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8006c66:	78fa      	ldrb	r2, [r7, #3]
 8006c68:	6879      	ldr	r1, [r7, #4]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	011b      	lsls	r3, r3, #4
 8006c6e:	1a9b      	subs	r3, r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	440b      	add	r3, r1
 8006c74:	334d      	adds	r3, #77	@ 0x4d
 8006c76:	2204      	movs	r2, #4
 8006c78:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8006c7a:	78fa      	ldrb	r2, [r7, #3]
 8006c7c:	6879      	ldr	r1, [r7, #4]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	011b      	lsls	r3, r3, #4
 8006c82:	1a9b      	subs	r3, r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	440b      	add	r3, r1
 8006c88:	3319      	adds	r3, #25
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d114      	bne.n	8006cba <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8006c90:	78fa      	ldrb	r2, [r7, #3]
 8006c92:	6879      	ldr	r1, [r7, #4]
 8006c94:	4613      	mov	r3, r2
 8006c96:	011b      	lsls	r3, r3, #4
 8006c98:	1a9b      	subs	r3, r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	440b      	add	r3, r1
 8006c9e:	3318      	adds	r3, #24
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d109      	bne.n	8006cba <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8006ca6:	78fa      	ldrb	r2, [r7, #3]
 8006ca8:	6879      	ldr	r1, [r7, #4]
 8006caa:	4613      	mov	r3, r2
 8006cac:	011b      	lsls	r3, r3, #4
 8006cae:	1a9b      	subs	r3, r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	440b      	add	r3, r1
 8006cb4:	3319      	adds	r3, #25
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	78fa      	ldrb	r2, [r7, #3]
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f004 fd85 	bl	800b7d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006cc8:	78fb      	ldrb	r3, [r7, #3]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	2310      	movs	r3, #16
 8006cd8:	6093      	str	r3, [r2, #8]
 8006cda:	e2a7      	b.n	800722c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	78fa      	ldrb	r2, [r7, #3]
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f003 ffd0 	bl	800ac8a <USB_ReadChInterrupts>
 8006cea:	4603      	mov	r3, r0
 8006cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cf0:	2b80      	cmp	r3, #128	@ 0x80
 8006cf2:	f040 8083 	bne.w	8006dfc <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	799b      	ldrb	r3, [r3, #6]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d111      	bne.n	8006d22 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8006cfe:	78fa      	ldrb	r2, [r7, #3]
 8006d00:	6879      	ldr	r1, [r7, #4]
 8006d02:	4613      	mov	r3, r2
 8006d04:	011b      	lsls	r3, r3, #4
 8006d06:	1a9b      	subs	r3, r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	440b      	add	r3, r1
 8006d0c:	334d      	adds	r3, #77	@ 0x4d
 8006d0e:	2207      	movs	r2, #7
 8006d10:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	78fa      	ldrb	r2, [r7, #3]
 8006d18:	4611      	mov	r1, r2
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f004 fd59 	bl	800b7d2 <USB_HC_Halt>
 8006d20:	e062      	b.n	8006de8 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8006d22:	78fa      	ldrb	r2, [r7, #3]
 8006d24:	6879      	ldr	r1, [r7, #4]
 8006d26:	4613      	mov	r3, r2
 8006d28:	011b      	lsls	r3, r3, #4
 8006d2a:	1a9b      	subs	r3, r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	440b      	add	r3, r1
 8006d30:	3344      	adds	r3, #68	@ 0x44
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	1c59      	adds	r1, r3, #1
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	011b      	lsls	r3, r3, #4
 8006d3c:	1a9b      	subs	r3, r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4403      	add	r3, r0
 8006d42:	3344      	adds	r3, #68	@ 0x44
 8006d44:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006d46:	78fa      	ldrb	r2, [r7, #3]
 8006d48:	6879      	ldr	r1, [r7, #4]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	011b      	lsls	r3, r3, #4
 8006d4e:	1a9b      	subs	r3, r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	440b      	add	r3, r1
 8006d54:	3344      	adds	r3, #68	@ 0x44
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d922      	bls.n	8006da2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006d5c:	78fa      	ldrb	r2, [r7, #3]
 8006d5e:	6879      	ldr	r1, [r7, #4]
 8006d60:	4613      	mov	r3, r2
 8006d62:	011b      	lsls	r3, r3, #4
 8006d64:	1a9b      	subs	r3, r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	440b      	add	r3, r1
 8006d6a:	3344      	adds	r3, #68	@ 0x44
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006d70:	78fa      	ldrb	r2, [r7, #3]
 8006d72:	6879      	ldr	r1, [r7, #4]
 8006d74:	4613      	mov	r3, r2
 8006d76:	011b      	lsls	r3, r3, #4
 8006d78:	1a9b      	subs	r3, r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	440b      	add	r3, r1
 8006d7e:	334c      	adds	r3, #76	@ 0x4c
 8006d80:	2204      	movs	r2, #4
 8006d82:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006d84:	78fa      	ldrb	r2, [r7, #3]
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	011b      	lsls	r3, r3, #4
 8006d8c:	1a9b      	subs	r3, r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	440b      	add	r3, r1
 8006d92:	334c      	adds	r3, #76	@ 0x4c
 8006d94:	781a      	ldrb	r2, [r3, #0]
 8006d96:	78fb      	ldrb	r3, [r7, #3]
 8006d98:	4619      	mov	r1, r3
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f007 fdd8 	bl	800e950 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006da0:	e022      	b.n	8006de8 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006da2:	78fa      	ldrb	r2, [r7, #3]
 8006da4:	6879      	ldr	r1, [r7, #4]
 8006da6:	4613      	mov	r3, r2
 8006da8:	011b      	lsls	r3, r3, #4
 8006daa:	1a9b      	subs	r3, r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	440b      	add	r3, r1
 8006db0:	334c      	adds	r3, #76	@ 0x4c
 8006db2:	2202      	movs	r2, #2
 8006db4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006db6:	78fb      	ldrb	r3, [r7, #3]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006dcc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006dd4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006dd6:	78fb      	ldrb	r3, [r7, #3]
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006de2:	461a      	mov	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006de8:	78fb      	ldrb	r3, [r7, #3]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006df4:	461a      	mov	r2, r3
 8006df6:	2380      	movs	r3, #128	@ 0x80
 8006df8:	6093      	str	r3, [r2, #8]
 8006dfa:	e217      	b.n	800722c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	78fa      	ldrb	r2, [r7, #3]
 8006e02:	4611      	mov	r1, r2
 8006e04:	4618      	mov	r0, r3
 8006e06:	f003 ff40 	bl	800ac8a <USB_ReadChInterrupts>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e14:	d11b      	bne.n	8006e4e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006e16:	78fa      	ldrb	r2, [r7, #3]
 8006e18:	6879      	ldr	r1, [r7, #4]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	1a9b      	subs	r3, r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	440b      	add	r3, r1
 8006e24:	334d      	adds	r3, #77	@ 0x4d
 8006e26:	2209      	movs	r2, #9
 8006e28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	78fa      	ldrb	r2, [r7, #3]
 8006e30:	4611      	mov	r1, r2
 8006e32:	4618      	mov	r0, r3
 8006e34:	f004 fccd 	bl	800b7d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006e38:	78fb      	ldrb	r3, [r7, #3]
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e44:	461a      	mov	r2, r3
 8006e46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e4a:	6093      	str	r3, [r2, #8]
 8006e4c:	e1ee      	b.n	800722c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	78fa      	ldrb	r2, [r7, #3]
 8006e54:	4611      	mov	r1, r2
 8006e56:	4618      	mov	r0, r3
 8006e58:	f003 ff17 	bl	800ac8a <USB_ReadChInterrupts>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	f040 81df 	bne.w	8007226 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006e68:	78fb      	ldrb	r3, [r7, #3]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e74:	461a      	mov	r2, r3
 8006e76:	2302      	movs	r3, #2
 8006e78:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006e7a:	78fa      	ldrb	r2, [r7, #3]
 8006e7c:	6879      	ldr	r1, [r7, #4]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	011b      	lsls	r3, r3, #4
 8006e82:	1a9b      	subs	r3, r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	440b      	add	r3, r1
 8006e88:	334d      	adds	r3, #77	@ 0x4d
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	f040 8093 	bne.w	8006fb8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006e92:	78fa      	ldrb	r2, [r7, #3]
 8006e94:	6879      	ldr	r1, [r7, #4]
 8006e96:	4613      	mov	r3, r2
 8006e98:	011b      	lsls	r3, r3, #4
 8006e9a:	1a9b      	subs	r3, r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	440b      	add	r3, r1
 8006ea0:	334d      	adds	r3, #77	@ 0x4d
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006ea6:	78fa      	ldrb	r2, [r7, #3]
 8006ea8:	6879      	ldr	r1, [r7, #4]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	011b      	lsls	r3, r3, #4
 8006eae:	1a9b      	subs	r3, r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	440b      	add	r3, r1
 8006eb4:	334c      	adds	r3, #76	@ 0x4c
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006eba:	78fa      	ldrb	r2, [r7, #3]
 8006ebc:	6879      	ldr	r1, [r7, #4]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	011b      	lsls	r3, r3, #4
 8006ec2:	1a9b      	subs	r3, r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	440b      	add	r3, r1
 8006ec8:	3326      	adds	r3, #38	@ 0x26
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d00b      	beq.n	8006ee8 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8006ed0:	78fa      	ldrb	r2, [r7, #3]
 8006ed2:	6879      	ldr	r1, [r7, #4]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	011b      	lsls	r3, r3, #4
 8006ed8:	1a9b      	subs	r3, r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	440b      	add	r3, r1
 8006ede:	3326      	adds	r3, #38	@ 0x26
 8006ee0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	f040 8190 	bne.w	8007208 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	799b      	ldrb	r3, [r3, #6]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d115      	bne.n	8006f1c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8006ef0:	78fa      	ldrb	r2, [r7, #3]
 8006ef2:	6879      	ldr	r1, [r7, #4]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	011b      	lsls	r3, r3, #4
 8006ef8:	1a9b      	subs	r3, r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	440b      	add	r3, r1
 8006efe:	333d      	adds	r3, #61	@ 0x3d
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	78fa      	ldrb	r2, [r7, #3]
 8006f04:	f083 0301 	eor.w	r3, r3, #1
 8006f08:	b2d8      	uxtb	r0, r3
 8006f0a:	6879      	ldr	r1, [r7, #4]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	011b      	lsls	r3, r3, #4
 8006f10:	1a9b      	subs	r3, r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	440b      	add	r3, r1
 8006f16:	333d      	adds	r3, #61	@ 0x3d
 8006f18:	4602      	mov	r2, r0
 8006f1a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	799b      	ldrb	r3, [r3, #6]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	f040 8171 	bne.w	8007208 <HCD_HC_OUT_IRQHandler+0x954>
 8006f26:	78fa      	ldrb	r2, [r7, #3]
 8006f28:	6879      	ldr	r1, [r7, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	011b      	lsls	r3, r3, #4
 8006f2e:	1a9b      	subs	r3, r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	440b      	add	r3, r1
 8006f34:	3334      	adds	r3, #52	@ 0x34
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 8165 	beq.w	8007208 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8006f3e:	78fa      	ldrb	r2, [r7, #3]
 8006f40:	6879      	ldr	r1, [r7, #4]
 8006f42:	4613      	mov	r3, r2
 8006f44:	011b      	lsls	r3, r3, #4
 8006f46:	1a9b      	subs	r3, r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	440b      	add	r3, r1
 8006f4c:	3334      	adds	r3, #52	@ 0x34
 8006f4e:	6819      	ldr	r1, [r3, #0]
 8006f50:	78fa      	ldrb	r2, [r7, #3]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	4613      	mov	r3, r2
 8006f56:	011b      	lsls	r3, r3, #4
 8006f58:	1a9b      	subs	r3, r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4403      	add	r3, r0
 8006f5e:	3328      	adds	r3, #40	@ 0x28
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	440b      	add	r3, r1
 8006f64:	1e59      	subs	r1, r3, #1
 8006f66:	78fa      	ldrb	r2, [r7, #3]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	1a9b      	subs	r3, r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4403      	add	r3, r0
 8006f74:	3328      	adds	r3, #40	@ 0x28
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f7c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 813f 	beq.w	8007208 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006f8a:	78fa      	ldrb	r2, [r7, #3]
 8006f8c:	6879      	ldr	r1, [r7, #4]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	011b      	lsls	r3, r3, #4
 8006f92:	1a9b      	subs	r3, r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	440b      	add	r3, r1
 8006f98:	333d      	adds	r3, #61	@ 0x3d
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	78fa      	ldrb	r2, [r7, #3]
 8006f9e:	f083 0301 	eor.w	r3, r3, #1
 8006fa2:	b2d8      	uxtb	r0, r3
 8006fa4:	6879      	ldr	r1, [r7, #4]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	011b      	lsls	r3, r3, #4
 8006faa:	1a9b      	subs	r3, r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	440b      	add	r3, r1
 8006fb0:	333d      	adds	r3, #61	@ 0x3d
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	701a      	strb	r2, [r3, #0]
 8006fb6:	e127      	b.n	8007208 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006fb8:	78fa      	ldrb	r2, [r7, #3]
 8006fba:	6879      	ldr	r1, [r7, #4]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	011b      	lsls	r3, r3, #4
 8006fc0:	1a9b      	subs	r3, r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	440b      	add	r3, r1
 8006fc6:	334d      	adds	r3, #77	@ 0x4d
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	2b03      	cmp	r3, #3
 8006fcc:	d120      	bne.n	8007010 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006fce:	78fa      	ldrb	r2, [r7, #3]
 8006fd0:	6879      	ldr	r1, [r7, #4]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	011b      	lsls	r3, r3, #4
 8006fd6:	1a9b      	subs	r3, r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	440b      	add	r3, r1
 8006fdc:	334d      	adds	r3, #77	@ 0x4d
 8006fde:	2202      	movs	r2, #2
 8006fe0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006fe2:	78fa      	ldrb	r2, [r7, #3]
 8006fe4:	6879      	ldr	r1, [r7, #4]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	1a9b      	subs	r3, r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	440b      	add	r3, r1
 8006ff0:	331b      	adds	r3, #27
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	f040 8107 	bne.w	8007208 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006ffa:	78fa      	ldrb	r2, [r7, #3]
 8006ffc:	6879      	ldr	r1, [r7, #4]
 8006ffe:	4613      	mov	r3, r2
 8007000:	011b      	lsls	r3, r3, #4
 8007002:	1a9b      	subs	r3, r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	440b      	add	r3, r1
 8007008:	334c      	adds	r3, #76	@ 0x4c
 800700a:	2202      	movs	r2, #2
 800700c:	701a      	strb	r2, [r3, #0]
 800700e:	e0fb      	b.n	8007208 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8007010:	78fa      	ldrb	r2, [r7, #3]
 8007012:	6879      	ldr	r1, [r7, #4]
 8007014:	4613      	mov	r3, r2
 8007016:	011b      	lsls	r3, r3, #4
 8007018:	1a9b      	subs	r3, r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	440b      	add	r3, r1
 800701e:	334d      	adds	r3, #77	@ 0x4d
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	2b04      	cmp	r3, #4
 8007024:	d13a      	bne.n	800709c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007026:	78fa      	ldrb	r2, [r7, #3]
 8007028:	6879      	ldr	r1, [r7, #4]
 800702a:	4613      	mov	r3, r2
 800702c:	011b      	lsls	r3, r3, #4
 800702e:	1a9b      	subs	r3, r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	440b      	add	r3, r1
 8007034:	334d      	adds	r3, #77	@ 0x4d
 8007036:	2202      	movs	r2, #2
 8007038:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800703a:	78fa      	ldrb	r2, [r7, #3]
 800703c:	6879      	ldr	r1, [r7, #4]
 800703e:	4613      	mov	r3, r2
 8007040:	011b      	lsls	r3, r3, #4
 8007042:	1a9b      	subs	r3, r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	440b      	add	r3, r1
 8007048:	334c      	adds	r3, #76	@ 0x4c
 800704a:	2202      	movs	r2, #2
 800704c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800704e:	78fa      	ldrb	r2, [r7, #3]
 8007050:	6879      	ldr	r1, [r7, #4]
 8007052:	4613      	mov	r3, r2
 8007054:	011b      	lsls	r3, r3, #4
 8007056:	1a9b      	subs	r3, r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	440b      	add	r3, r1
 800705c:	331b      	adds	r3, #27
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	2b01      	cmp	r3, #1
 8007062:	f040 80d1 	bne.w	8007208 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8007066:	78fa      	ldrb	r2, [r7, #3]
 8007068:	6879      	ldr	r1, [r7, #4]
 800706a:	4613      	mov	r3, r2
 800706c:	011b      	lsls	r3, r3, #4
 800706e:	1a9b      	subs	r3, r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	440b      	add	r3, r1
 8007074:	331b      	adds	r3, #27
 8007076:	2200      	movs	r2, #0
 8007078:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800707a:	78fb      	ldrb	r3, [r7, #3]
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	4413      	add	r3, r2
 8007082:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	78fa      	ldrb	r2, [r7, #3]
 800708a:	0151      	lsls	r1, r2, #5
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	440a      	add	r2, r1
 8007090:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007094:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007098:	6053      	str	r3, [r2, #4]
 800709a:	e0b5      	b.n	8007208 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800709c:	78fa      	ldrb	r2, [r7, #3]
 800709e:	6879      	ldr	r1, [r7, #4]
 80070a0:	4613      	mov	r3, r2
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	1a9b      	subs	r3, r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	440b      	add	r3, r1
 80070aa:	334d      	adds	r3, #77	@ 0x4d
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	2b05      	cmp	r3, #5
 80070b0:	d114      	bne.n	80070dc <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80070b2:	78fa      	ldrb	r2, [r7, #3]
 80070b4:	6879      	ldr	r1, [r7, #4]
 80070b6:	4613      	mov	r3, r2
 80070b8:	011b      	lsls	r3, r3, #4
 80070ba:	1a9b      	subs	r3, r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	440b      	add	r3, r1
 80070c0:	334d      	adds	r3, #77	@ 0x4d
 80070c2:	2202      	movs	r2, #2
 80070c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80070c6:	78fa      	ldrb	r2, [r7, #3]
 80070c8:	6879      	ldr	r1, [r7, #4]
 80070ca:	4613      	mov	r3, r2
 80070cc:	011b      	lsls	r3, r3, #4
 80070ce:	1a9b      	subs	r3, r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	440b      	add	r3, r1
 80070d4:	334c      	adds	r3, #76	@ 0x4c
 80070d6:	2202      	movs	r2, #2
 80070d8:	701a      	strb	r2, [r3, #0]
 80070da:	e095      	b.n	8007208 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80070dc:	78fa      	ldrb	r2, [r7, #3]
 80070de:	6879      	ldr	r1, [r7, #4]
 80070e0:	4613      	mov	r3, r2
 80070e2:	011b      	lsls	r3, r3, #4
 80070e4:	1a9b      	subs	r3, r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	440b      	add	r3, r1
 80070ea:	334d      	adds	r3, #77	@ 0x4d
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	2b06      	cmp	r3, #6
 80070f0:	d114      	bne.n	800711c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80070f2:	78fa      	ldrb	r2, [r7, #3]
 80070f4:	6879      	ldr	r1, [r7, #4]
 80070f6:	4613      	mov	r3, r2
 80070f8:	011b      	lsls	r3, r3, #4
 80070fa:	1a9b      	subs	r3, r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	440b      	add	r3, r1
 8007100:	334d      	adds	r3, #77	@ 0x4d
 8007102:	2202      	movs	r2, #2
 8007104:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8007106:	78fa      	ldrb	r2, [r7, #3]
 8007108:	6879      	ldr	r1, [r7, #4]
 800710a:	4613      	mov	r3, r2
 800710c:	011b      	lsls	r3, r3, #4
 800710e:	1a9b      	subs	r3, r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	440b      	add	r3, r1
 8007114:	334c      	adds	r3, #76	@ 0x4c
 8007116:	2205      	movs	r2, #5
 8007118:	701a      	strb	r2, [r3, #0]
 800711a:	e075      	b.n	8007208 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800711c:	78fa      	ldrb	r2, [r7, #3]
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	4613      	mov	r3, r2
 8007122:	011b      	lsls	r3, r3, #4
 8007124:	1a9b      	subs	r3, r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	440b      	add	r3, r1
 800712a:	334d      	adds	r3, #77	@ 0x4d
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	2b07      	cmp	r3, #7
 8007130:	d00a      	beq.n	8007148 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8007132:	78fa      	ldrb	r2, [r7, #3]
 8007134:	6879      	ldr	r1, [r7, #4]
 8007136:	4613      	mov	r3, r2
 8007138:	011b      	lsls	r3, r3, #4
 800713a:	1a9b      	subs	r3, r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	440b      	add	r3, r1
 8007140:	334d      	adds	r3, #77	@ 0x4d
 8007142:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007144:	2b09      	cmp	r3, #9
 8007146:	d170      	bne.n	800722a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007148:	78fa      	ldrb	r2, [r7, #3]
 800714a:	6879      	ldr	r1, [r7, #4]
 800714c:	4613      	mov	r3, r2
 800714e:	011b      	lsls	r3, r3, #4
 8007150:	1a9b      	subs	r3, r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	440b      	add	r3, r1
 8007156:	334d      	adds	r3, #77	@ 0x4d
 8007158:	2202      	movs	r2, #2
 800715a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800715c:	78fa      	ldrb	r2, [r7, #3]
 800715e:	6879      	ldr	r1, [r7, #4]
 8007160:	4613      	mov	r3, r2
 8007162:	011b      	lsls	r3, r3, #4
 8007164:	1a9b      	subs	r3, r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	440b      	add	r3, r1
 800716a:	3344      	adds	r3, #68	@ 0x44
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	1c59      	adds	r1, r3, #1
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	4613      	mov	r3, r2
 8007174:	011b      	lsls	r3, r3, #4
 8007176:	1a9b      	subs	r3, r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4403      	add	r3, r0
 800717c:	3344      	adds	r3, #68	@ 0x44
 800717e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007180:	78fa      	ldrb	r2, [r7, #3]
 8007182:	6879      	ldr	r1, [r7, #4]
 8007184:	4613      	mov	r3, r2
 8007186:	011b      	lsls	r3, r3, #4
 8007188:	1a9b      	subs	r3, r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	440b      	add	r3, r1
 800718e:	3344      	adds	r3, #68	@ 0x44
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b02      	cmp	r3, #2
 8007194:	d914      	bls.n	80071c0 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8007196:	78fa      	ldrb	r2, [r7, #3]
 8007198:	6879      	ldr	r1, [r7, #4]
 800719a:	4613      	mov	r3, r2
 800719c:	011b      	lsls	r3, r3, #4
 800719e:	1a9b      	subs	r3, r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	440b      	add	r3, r1
 80071a4:	3344      	adds	r3, #68	@ 0x44
 80071a6:	2200      	movs	r2, #0
 80071a8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80071aa:	78fa      	ldrb	r2, [r7, #3]
 80071ac:	6879      	ldr	r1, [r7, #4]
 80071ae:	4613      	mov	r3, r2
 80071b0:	011b      	lsls	r3, r3, #4
 80071b2:	1a9b      	subs	r3, r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	440b      	add	r3, r1
 80071b8:	334c      	adds	r3, #76	@ 0x4c
 80071ba:	2204      	movs	r2, #4
 80071bc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80071be:	e022      	b.n	8007206 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80071c0:	78fa      	ldrb	r2, [r7, #3]
 80071c2:	6879      	ldr	r1, [r7, #4]
 80071c4:	4613      	mov	r3, r2
 80071c6:	011b      	lsls	r3, r3, #4
 80071c8:	1a9b      	subs	r3, r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	440b      	add	r3, r1
 80071ce:	334c      	adds	r3, #76	@ 0x4c
 80071d0:	2202      	movs	r2, #2
 80071d2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80071d4:	78fb      	ldrb	r3, [r7, #3]
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80071ea:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071f2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80071f4:	78fb      	ldrb	r3, [r7, #3]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007200:	461a      	mov	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007206:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007208:	78fa      	ldrb	r2, [r7, #3]
 800720a:	6879      	ldr	r1, [r7, #4]
 800720c:	4613      	mov	r3, r2
 800720e:	011b      	lsls	r3, r3, #4
 8007210:	1a9b      	subs	r3, r3, r2
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	440b      	add	r3, r1
 8007216:	334c      	adds	r3, #76	@ 0x4c
 8007218:	781a      	ldrb	r2, [r3, #0]
 800721a:	78fb      	ldrb	r3, [r7, #3]
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f007 fb96 	bl	800e950 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007224:	e002      	b.n	800722c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8007226:	bf00      	nop
 8007228:	e000      	b.n	800722c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800722a:	bf00      	nop
  }
}
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b08a      	sub	sp, #40	@ 0x28
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007242:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	f003 030f 	and.w	r3, r3, #15
 8007252:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	0c5b      	lsrs	r3, r3, #17
 8007258:	f003 030f 	and.w	r3, r3, #15
 800725c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	091b      	lsrs	r3, r3, #4
 8007262:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007266:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	2b02      	cmp	r3, #2
 800726c:	d004      	beq.n	8007278 <HCD_RXQLVL_IRQHandler+0x46>
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2b05      	cmp	r3, #5
 8007272:	f000 80b6 	beq.w	80073e2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007276:	e0b7      	b.n	80073e8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 80b3 	beq.w	80073e6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8007280:	6879      	ldr	r1, [r7, #4]
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	4613      	mov	r3, r2
 8007286:	011b      	lsls	r3, r3, #4
 8007288:	1a9b      	subs	r3, r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	440b      	add	r3, r1
 800728e:	332c      	adds	r3, #44	@ 0x2c
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 80a7 	beq.w	80073e6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8007298:	6879      	ldr	r1, [r7, #4]
 800729a:	69ba      	ldr	r2, [r7, #24]
 800729c:	4613      	mov	r3, r2
 800729e:	011b      	lsls	r3, r3, #4
 80072a0:	1a9b      	subs	r3, r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	440b      	add	r3, r1
 80072a6:	3338      	adds	r3, #56	@ 0x38
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	18d1      	adds	r1, r2, r3
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	69ba      	ldr	r2, [r7, #24]
 80072b2:	4613      	mov	r3, r2
 80072b4:	011b      	lsls	r3, r3, #4
 80072b6:	1a9b      	subs	r3, r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4403      	add	r3, r0
 80072bc:	3334      	adds	r3, #52	@ 0x34
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4299      	cmp	r1, r3
 80072c2:	f200 8083 	bhi.w	80073cc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6818      	ldr	r0, [r3, #0]
 80072ca:	6879      	ldr	r1, [r7, #4]
 80072cc:	69ba      	ldr	r2, [r7, #24]
 80072ce:	4613      	mov	r3, r2
 80072d0:	011b      	lsls	r3, r3, #4
 80072d2:	1a9b      	subs	r3, r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	440b      	add	r3, r1
 80072d8:	332c      	adds	r3, #44	@ 0x2c
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	b292      	uxth	r2, r2
 80072e0:	4619      	mov	r1, r3
 80072e2:	f003 fc67 	bl	800abb4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80072e6:	6879      	ldr	r1, [r7, #4]
 80072e8:	69ba      	ldr	r2, [r7, #24]
 80072ea:	4613      	mov	r3, r2
 80072ec:	011b      	lsls	r3, r3, #4
 80072ee:	1a9b      	subs	r3, r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	440b      	add	r3, r1
 80072f4:	332c      	adds	r3, #44	@ 0x2c
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	18d1      	adds	r1, r2, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	4613      	mov	r3, r2
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	1a9b      	subs	r3, r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4403      	add	r3, r0
 800730a:	332c      	adds	r3, #44	@ 0x2c
 800730c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800730e:	6879      	ldr	r1, [r7, #4]
 8007310:	69ba      	ldr	r2, [r7, #24]
 8007312:	4613      	mov	r3, r2
 8007314:	011b      	lsls	r3, r3, #4
 8007316:	1a9b      	subs	r3, r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	440b      	add	r3, r1
 800731c:	3338      	adds	r3, #56	@ 0x38
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	18d1      	adds	r1, r2, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	69ba      	ldr	r2, [r7, #24]
 8007328:	4613      	mov	r3, r2
 800732a:	011b      	lsls	r3, r3, #4
 800732c:	1a9b      	subs	r3, r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4403      	add	r3, r0
 8007332:	3338      	adds	r3, #56	@ 0x38
 8007334:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	4413      	add	r3, r2
 800733e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	0cdb      	lsrs	r3, r3, #19
 8007346:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800734a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800734c:	6879      	ldr	r1, [r7, #4]
 800734e:	69ba      	ldr	r2, [r7, #24]
 8007350:	4613      	mov	r3, r2
 8007352:	011b      	lsls	r3, r3, #4
 8007354:	1a9b      	subs	r3, r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	440b      	add	r3, r1
 800735a:	3328      	adds	r3, #40	@ 0x28
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	4293      	cmp	r3, r2
 8007364:	d13f      	bne.n	80073e6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d03c      	beq.n	80073e6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	4413      	add	r3, r2
 8007374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007382:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800738a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	6a3b      	ldr	r3, [r7, #32]
 8007392:	4413      	add	r3, r2
 8007394:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007398:	461a      	mov	r2, r3
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800739e:	6879      	ldr	r1, [r7, #4]
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	4613      	mov	r3, r2
 80073a4:	011b      	lsls	r3, r3, #4
 80073a6:	1a9b      	subs	r3, r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	440b      	add	r3, r1
 80073ac:	333c      	adds	r3, #60	@ 0x3c
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	f083 0301 	eor.w	r3, r3, #1
 80073b4:	b2d8      	uxtb	r0, r3
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	4613      	mov	r3, r2
 80073bc:	011b      	lsls	r3, r3, #4
 80073be:	1a9b      	subs	r3, r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	440b      	add	r3, r1
 80073c4:	333c      	adds	r3, #60	@ 0x3c
 80073c6:	4602      	mov	r2, r0
 80073c8:	701a      	strb	r2, [r3, #0]
      break;
 80073ca:	e00c      	b.n	80073e6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80073cc:	6879      	ldr	r1, [r7, #4]
 80073ce:	69ba      	ldr	r2, [r7, #24]
 80073d0:	4613      	mov	r3, r2
 80073d2:	011b      	lsls	r3, r3, #4
 80073d4:	1a9b      	subs	r3, r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	440b      	add	r3, r1
 80073da:	334c      	adds	r3, #76	@ 0x4c
 80073dc:	2204      	movs	r2, #4
 80073de:	701a      	strb	r2, [r3, #0]
      break;
 80073e0:	e001      	b.n	80073e6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80073e2:	bf00      	nop
 80073e4:	e000      	b.n	80073e8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80073e6:	bf00      	nop
  }
}
 80073e8:	bf00      	nop
 80073ea:	3728      	adds	r7, #40	@ 0x28
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800741c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f003 0302 	and.w	r3, r3, #2
 8007424:	2b02      	cmp	r3, #2
 8007426:	d10b      	bne.n	8007440 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	2b01      	cmp	r3, #1
 8007430:	d102      	bne.n	8007438 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f007 fa70 	bl	800e918 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	f043 0302 	orr.w	r3, r3, #2
 800743e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f003 0308 	and.w	r3, r3, #8
 8007446:	2b08      	cmp	r3, #8
 8007448:	d132      	bne.n	80074b0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f043 0308 	orr.w	r3, r3, #8
 8007450:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f003 0304 	and.w	r3, r3, #4
 8007458:	2b04      	cmp	r3, #4
 800745a:	d126      	bne.n	80074aa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	7a5b      	ldrb	r3, [r3, #9]
 8007460:	2b02      	cmp	r3, #2
 8007462:	d113      	bne.n	800748c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800746a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800746e:	d106      	bne.n	800747e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2102      	movs	r1, #2
 8007476:	4618      	mov	r0, r3
 8007478:	f003 fd2c 	bl	800aed4 <USB_InitFSLSPClkSel>
 800747c:	e011      	b.n	80074a2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2101      	movs	r1, #1
 8007484:	4618      	mov	r0, r3
 8007486:	f003 fd25 	bl	800aed4 <USB_InitFSLSPClkSel>
 800748a:	e00a      	b.n	80074a2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	79db      	ldrb	r3, [r3, #7]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d106      	bne.n	80074a2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800749a:	461a      	mov	r2, r3
 800749c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80074a0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f007 fa62 	bl	800e96c <HAL_HCD_PortEnabled_Callback>
 80074a8:	e002      	b.n	80074b0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f007 fa6c 	bl	800e988 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f003 0320 	and.w	r3, r3, #32
 80074b6:	2b20      	cmp	r3, #32
 80074b8:	d103      	bne.n	80074c2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	f043 0320 	orr.w	r3, r3, #32
 80074c0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80074c8:	461a      	mov	r2, r3
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	6013      	str	r3, [r2, #0]
}
 80074ce:	bf00      	nop
 80074d0:	3718      	adds	r7, #24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d101      	bne.n	80074ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e267      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d075      	beq.n	80075e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80074f6:	4b88      	ldr	r3, [pc, #544]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f003 030c 	and.w	r3, r3, #12
 80074fe:	2b04      	cmp	r3, #4
 8007500:	d00c      	beq.n	800751c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007502:	4b85      	ldr	r3, [pc, #532]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800750a:	2b08      	cmp	r3, #8
 800750c:	d112      	bne.n	8007534 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800750e:	4b82      	ldr	r3, [pc, #520]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007516:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800751a:	d10b      	bne.n	8007534 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800751c:	4b7e      	ldr	r3, [pc, #504]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d05b      	beq.n	80075e0 <HAL_RCC_OscConfig+0x108>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d157      	bne.n	80075e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e242      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800753c:	d106      	bne.n	800754c <HAL_RCC_OscConfig+0x74>
 800753e:	4b76      	ldr	r3, [pc, #472]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a75      	ldr	r2, [pc, #468]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	e01d      	b.n	8007588 <HAL_RCC_OscConfig+0xb0>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007554:	d10c      	bne.n	8007570 <HAL_RCC_OscConfig+0x98>
 8007556:	4b70      	ldr	r3, [pc, #448]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a6f      	ldr	r2, [pc, #444]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 800755c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007560:	6013      	str	r3, [r2, #0]
 8007562:	4b6d      	ldr	r3, [pc, #436]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a6c      	ldr	r2, [pc, #432]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800756c:	6013      	str	r3, [r2, #0]
 800756e:	e00b      	b.n	8007588 <HAL_RCC_OscConfig+0xb0>
 8007570:	4b69      	ldr	r3, [pc, #420]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a68      	ldr	r2, [pc, #416]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800757a:	6013      	str	r3, [r2, #0]
 800757c:	4b66      	ldr	r3, [pc, #408]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a65      	ldr	r2, [pc, #404]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007582:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d013      	beq.n	80075b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007590:	f7fd f890 	bl	80046b4 <HAL_GetTick>
 8007594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007596:	e008      	b.n	80075aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007598:	f7fd f88c 	bl	80046b4 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	2b64      	cmp	r3, #100	@ 0x64
 80075a4:	d901      	bls.n	80075aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e207      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075aa:	4b5b      	ldr	r3, [pc, #364]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d0f0      	beq.n	8007598 <HAL_RCC_OscConfig+0xc0>
 80075b6:	e014      	b.n	80075e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075b8:	f7fd f87c 	bl	80046b4 <HAL_GetTick>
 80075bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075be:	e008      	b.n	80075d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075c0:	f7fd f878 	bl	80046b4 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	2b64      	cmp	r3, #100	@ 0x64
 80075cc:	d901      	bls.n	80075d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e1f3      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075d2:	4b51      	ldr	r3, [pc, #324]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1f0      	bne.n	80075c0 <HAL_RCC_OscConfig+0xe8>
 80075de:	e000      	b.n	80075e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0302 	and.w	r3, r3, #2
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d063      	beq.n	80076b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80075ee:	4b4a      	ldr	r3, [pc, #296]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f003 030c 	and.w	r3, r3, #12
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00b      	beq.n	8007612 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075fa:	4b47      	ldr	r3, [pc, #284]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007602:	2b08      	cmp	r3, #8
 8007604:	d11c      	bne.n	8007640 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007606:	4b44      	ldr	r3, [pc, #272]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d116      	bne.n	8007640 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007612:	4b41      	ldr	r3, [pc, #260]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0302 	and.w	r3, r3, #2
 800761a:	2b00      	cmp	r3, #0
 800761c:	d005      	beq.n	800762a <HAL_RCC_OscConfig+0x152>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d001      	beq.n	800762a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e1c7      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800762a:	4b3b      	ldr	r3, [pc, #236]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	00db      	lsls	r3, r3, #3
 8007638:	4937      	ldr	r1, [pc, #220]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 800763a:	4313      	orrs	r3, r2
 800763c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800763e:	e03a      	b.n	80076b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d020      	beq.n	800768a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007648:	4b34      	ldr	r3, [pc, #208]	@ (800771c <HAL_RCC_OscConfig+0x244>)
 800764a:	2201      	movs	r2, #1
 800764c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800764e:	f7fd f831 	bl	80046b4 <HAL_GetTick>
 8007652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007654:	e008      	b.n	8007668 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007656:	f7fd f82d 	bl	80046b4 <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	2b02      	cmp	r3, #2
 8007662:	d901      	bls.n	8007668 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e1a8      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007668:	4b2b      	ldr	r3, [pc, #172]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0302 	and.w	r3, r3, #2
 8007670:	2b00      	cmp	r3, #0
 8007672:	d0f0      	beq.n	8007656 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007674:	4b28      	ldr	r3, [pc, #160]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	00db      	lsls	r3, r3, #3
 8007682:	4925      	ldr	r1, [pc, #148]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007684:	4313      	orrs	r3, r2
 8007686:	600b      	str	r3, [r1, #0]
 8007688:	e015      	b.n	80076b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800768a:	4b24      	ldr	r3, [pc, #144]	@ (800771c <HAL_RCC_OscConfig+0x244>)
 800768c:	2200      	movs	r2, #0
 800768e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007690:	f7fd f810 	bl	80046b4 <HAL_GetTick>
 8007694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007696:	e008      	b.n	80076aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007698:	f7fd f80c 	bl	80046b4 <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d901      	bls.n	80076aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e187      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076aa:	4b1b      	ldr	r3, [pc, #108]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1f0      	bne.n	8007698 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0308 	and.w	r3, r3, #8
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d036      	beq.n	8007730 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d016      	beq.n	80076f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076ca:	4b15      	ldr	r3, [pc, #84]	@ (8007720 <HAL_RCC_OscConfig+0x248>)
 80076cc:	2201      	movs	r2, #1
 80076ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076d0:	f7fc fff0 	bl	80046b4 <HAL_GetTick>
 80076d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076d6:	e008      	b.n	80076ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076d8:	f7fc ffec 	bl	80046b4 <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d901      	bls.n	80076ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e167      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 80076ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076ee:	f003 0302 	and.w	r3, r3, #2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0f0      	beq.n	80076d8 <HAL_RCC_OscConfig+0x200>
 80076f6:	e01b      	b.n	8007730 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076f8:	4b09      	ldr	r3, [pc, #36]	@ (8007720 <HAL_RCC_OscConfig+0x248>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076fe:	f7fc ffd9 	bl	80046b4 <HAL_GetTick>
 8007702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007704:	e00e      	b.n	8007724 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007706:	f7fc ffd5 	bl	80046b4 <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	2b02      	cmp	r3, #2
 8007712:	d907      	bls.n	8007724 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e150      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
 8007718:	40023800 	.word	0x40023800
 800771c:	42470000 	.word	0x42470000
 8007720:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007724:	4b88      	ldr	r3, [pc, #544]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007728:	f003 0302 	and.w	r3, r3, #2
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1ea      	bne.n	8007706 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 0304 	and.w	r3, r3, #4
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 8097 	beq.w	800786c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800773e:	2300      	movs	r3, #0
 8007740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007742:	4b81      	ldr	r3, [pc, #516]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10f      	bne.n	800776e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800774e:	2300      	movs	r3, #0
 8007750:	60bb      	str	r3, [r7, #8]
 8007752:	4b7d      	ldr	r3, [pc, #500]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007756:	4a7c      	ldr	r2, [pc, #496]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800775c:	6413      	str	r3, [r2, #64]	@ 0x40
 800775e:	4b7a      	ldr	r3, [pc, #488]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007766:	60bb      	str	r3, [r7, #8]
 8007768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800776a:	2301      	movs	r3, #1
 800776c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800776e:	4b77      	ldr	r3, [pc, #476]	@ (800794c <HAL_RCC_OscConfig+0x474>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007776:	2b00      	cmp	r3, #0
 8007778:	d118      	bne.n	80077ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800777a:	4b74      	ldr	r3, [pc, #464]	@ (800794c <HAL_RCC_OscConfig+0x474>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a73      	ldr	r2, [pc, #460]	@ (800794c <HAL_RCC_OscConfig+0x474>)
 8007780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007786:	f7fc ff95 	bl	80046b4 <HAL_GetTick>
 800778a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800778c:	e008      	b.n	80077a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800778e:	f7fc ff91 	bl	80046b4 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	2b02      	cmp	r3, #2
 800779a:	d901      	bls.n	80077a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e10c      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077a0:	4b6a      	ldr	r3, [pc, #424]	@ (800794c <HAL_RCC_OscConfig+0x474>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d0f0      	beq.n	800778e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d106      	bne.n	80077c2 <HAL_RCC_OscConfig+0x2ea>
 80077b4:	4b64      	ldr	r3, [pc, #400]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80077b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077b8:	4a63      	ldr	r2, [pc, #396]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80077ba:	f043 0301 	orr.w	r3, r3, #1
 80077be:	6713      	str	r3, [r2, #112]	@ 0x70
 80077c0:	e01c      	b.n	80077fc <HAL_RCC_OscConfig+0x324>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	2b05      	cmp	r3, #5
 80077c8:	d10c      	bne.n	80077e4 <HAL_RCC_OscConfig+0x30c>
 80077ca:	4b5f      	ldr	r3, [pc, #380]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80077cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ce:	4a5e      	ldr	r2, [pc, #376]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80077d0:	f043 0304 	orr.w	r3, r3, #4
 80077d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80077d6:	4b5c      	ldr	r3, [pc, #368]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80077d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077da:	4a5b      	ldr	r2, [pc, #364]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80077dc:	f043 0301 	orr.w	r3, r3, #1
 80077e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80077e2:	e00b      	b.n	80077fc <HAL_RCC_OscConfig+0x324>
 80077e4:	4b58      	ldr	r3, [pc, #352]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80077e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077e8:	4a57      	ldr	r2, [pc, #348]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80077ea:	f023 0301 	bic.w	r3, r3, #1
 80077ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80077f0:	4b55      	ldr	r3, [pc, #340]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80077f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077f4:	4a54      	ldr	r2, [pc, #336]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80077f6:	f023 0304 	bic.w	r3, r3, #4
 80077fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d015      	beq.n	8007830 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007804:	f7fc ff56 	bl	80046b4 <HAL_GetTick>
 8007808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800780a:	e00a      	b.n	8007822 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800780c:	f7fc ff52 	bl	80046b4 <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800781a:	4293      	cmp	r3, r2
 800781c:	d901      	bls.n	8007822 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e0cb      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007822:	4b49      	ldr	r3, [pc, #292]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b00      	cmp	r3, #0
 800782c:	d0ee      	beq.n	800780c <HAL_RCC_OscConfig+0x334>
 800782e:	e014      	b.n	800785a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007830:	f7fc ff40 	bl	80046b4 <HAL_GetTick>
 8007834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007836:	e00a      	b.n	800784e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007838:	f7fc ff3c 	bl	80046b4 <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007846:	4293      	cmp	r3, r2
 8007848:	d901      	bls.n	800784e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e0b5      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800784e:	4b3e      	ldr	r3, [pc, #248]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007852:	f003 0302 	and.w	r3, r3, #2
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1ee      	bne.n	8007838 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800785a:	7dfb      	ldrb	r3, [r7, #23]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d105      	bne.n	800786c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007860:	4b39      	ldr	r3, [pc, #228]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007864:	4a38      	ldr	r2, [pc, #224]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800786a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 80a1 	beq.w	80079b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007876:	4b34      	ldr	r3, [pc, #208]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f003 030c 	and.w	r3, r3, #12
 800787e:	2b08      	cmp	r3, #8
 8007880:	d05c      	beq.n	800793c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	2b02      	cmp	r3, #2
 8007888:	d141      	bne.n	800790e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800788a:	4b31      	ldr	r3, [pc, #196]	@ (8007950 <HAL_RCC_OscConfig+0x478>)
 800788c:	2200      	movs	r2, #0
 800788e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007890:	f7fc ff10 	bl	80046b4 <HAL_GetTick>
 8007894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007896:	e008      	b.n	80078aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007898:	f7fc ff0c 	bl	80046b4 <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d901      	bls.n	80078aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e087      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078aa:	4b27      	ldr	r3, [pc, #156]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1f0      	bne.n	8007898 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	69da      	ldr	r2, [r3, #28]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	431a      	orrs	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c4:	019b      	lsls	r3, r3, #6
 80078c6:	431a      	orrs	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078cc:	085b      	lsrs	r3, r3, #1
 80078ce:	3b01      	subs	r3, #1
 80078d0:	041b      	lsls	r3, r3, #16
 80078d2:	431a      	orrs	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d8:	061b      	lsls	r3, r3, #24
 80078da:	491b      	ldr	r1, [pc, #108]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078e0:	4b1b      	ldr	r3, [pc, #108]	@ (8007950 <HAL_RCC_OscConfig+0x478>)
 80078e2:	2201      	movs	r2, #1
 80078e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078e6:	f7fc fee5 	bl	80046b4 <HAL_GetTick>
 80078ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078ec:	e008      	b.n	8007900 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078ee:	f7fc fee1 	bl	80046b4 <HAL_GetTick>
 80078f2:	4602      	mov	r2, r0
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d901      	bls.n	8007900 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e05c      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007900:	4b11      	ldr	r3, [pc, #68]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d0f0      	beq.n	80078ee <HAL_RCC_OscConfig+0x416>
 800790c:	e054      	b.n	80079b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800790e:	4b10      	ldr	r3, [pc, #64]	@ (8007950 <HAL_RCC_OscConfig+0x478>)
 8007910:	2200      	movs	r2, #0
 8007912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007914:	f7fc fece 	bl	80046b4 <HAL_GetTick>
 8007918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800791a:	e008      	b.n	800792e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800791c:	f7fc feca 	bl	80046b4 <HAL_GetTick>
 8007920:	4602      	mov	r2, r0
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	2b02      	cmp	r3, #2
 8007928:	d901      	bls.n	800792e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e045      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800792e:	4b06      	ldr	r3, [pc, #24]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1f0      	bne.n	800791c <HAL_RCC_OscConfig+0x444>
 800793a:	e03d      	b.n	80079b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d107      	bne.n	8007954 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e038      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
 8007948:	40023800 	.word	0x40023800
 800794c:	40007000 	.word	0x40007000
 8007950:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007954:	4b1b      	ldr	r3, [pc, #108]	@ (80079c4 <HAL_RCC_OscConfig+0x4ec>)
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d028      	beq.n	80079b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800796c:	429a      	cmp	r2, r3
 800796e:	d121      	bne.n	80079b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800797a:	429a      	cmp	r2, r3
 800797c:	d11a      	bne.n	80079b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007984:	4013      	ands	r3, r2
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800798a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800798c:	4293      	cmp	r3, r2
 800798e:	d111      	bne.n	80079b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800799a:	085b      	lsrs	r3, r3, #1
 800799c:	3b01      	subs	r3, #1
 800799e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d107      	bne.n	80079b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d001      	beq.n	80079b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e000      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3718      	adds	r7, #24
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	40023800 	.word	0x40023800

080079c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e0cc      	b.n	8007b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079dc:	4b68      	ldr	r3, [pc, #416]	@ (8007b80 <HAL_RCC_ClockConfig+0x1b8>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 030f 	and.w	r3, r3, #15
 80079e4:	683a      	ldr	r2, [r7, #0]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d90c      	bls.n	8007a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079ea:	4b65      	ldr	r3, [pc, #404]	@ (8007b80 <HAL_RCC_ClockConfig+0x1b8>)
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	b2d2      	uxtb	r2, r2
 80079f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079f2:	4b63      	ldr	r3, [pc, #396]	@ (8007b80 <HAL_RCC_ClockConfig+0x1b8>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 030f 	and.w	r3, r3, #15
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d001      	beq.n	8007a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e0b8      	b.n	8007b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0302 	and.w	r3, r3, #2
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d020      	beq.n	8007a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0304 	and.w	r3, r3, #4
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d005      	beq.n	8007a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a1c:	4b59      	ldr	r3, [pc, #356]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	4a58      	ldr	r2, [pc, #352]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007a22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007a26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0308 	and.w	r3, r3, #8
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d005      	beq.n	8007a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a34:	4b53      	ldr	r3, [pc, #332]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	4a52      	ldr	r2, [pc, #328]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007a3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a40:	4b50      	ldr	r3, [pc, #320]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	494d      	ldr	r1, [pc, #308]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d044      	beq.n	8007ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d107      	bne.n	8007a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a66:	4b47      	ldr	r3, [pc, #284]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d119      	bne.n	8007aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e07f      	b.n	8007b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d003      	beq.n	8007a86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d107      	bne.n	8007a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a86:	4b3f      	ldr	r3, [pc, #252]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d109      	bne.n	8007aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e06f      	b.n	8007b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a96:	4b3b      	ldr	r3, [pc, #236]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e067      	b.n	8007b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007aa6:	4b37      	ldr	r3, [pc, #220]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f023 0203 	bic.w	r2, r3, #3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	4934      	ldr	r1, [pc, #208]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ab8:	f7fc fdfc 	bl	80046b4 <HAL_GetTick>
 8007abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007abe:	e00a      	b.n	8007ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ac0:	f7fc fdf8 	bl	80046b4 <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d901      	bls.n	8007ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e04f      	b.n	8007b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	f003 020c 	and.w	r2, r3, #12
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d1eb      	bne.n	8007ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ae8:	4b25      	ldr	r3, [pc, #148]	@ (8007b80 <HAL_RCC_ClockConfig+0x1b8>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 030f 	and.w	r3, r3, #15
 8007af0:	683a      	ldr	r2, [r7, #0]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d20c      	bcs.n	8007b10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007af6:	4b22      	ldr	r3, [pc, #136]	@ (8007b80 <HAL_RCC_ClockConfig+0x1b8>)
 8007af8:	683a      	ldr	r2, [r7, #0]
 8007afa:	b2d2      	uxtb	r2, r2
 8007afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007afe:	4b20      	ldr	r3, [pc, #128]	@ (8007b80 <HAL_RCC_ClockConfig+0x1b8>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 030f 	and.w	r3, r3, #15
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d001      	beq.n	8007b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e032      	b.n	8007b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0304 	and.w	r3, r3, #4
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d008      	beq.n	8007b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b1c:	4b19      	ldr	r3, [pc, #100]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	4916      	ldr	r1, [pc, #88]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0308 	and.w	r3, r3, #8
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d009      	beq.n	8007b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b3a:	4b12      	ldr	r3, [pc, #72]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	490e      	ldr	r1, [pc, #56]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007b4e:	f000 f821 	bl	8007b94 <HAL_RCC_GetSysClockFreq>
 8007b52:	4602      	mov	r2, r0
 8007b54:	4b0b      	ldr	r3, [pc, #44]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	091b      	lsrs	r3, r3, #4
 8007b5a:	f003 030f 	and.w	r3, r3, #15
 8007b5e:	490a      	ldr	r1, [pc, #40]	@ (8007b88 <HAL_RCC_ClockConfig+0x1c0>)
 8007b60:	5ccb      	ldrb	r3, [r1, r3]
 8007b62:	fa22 f303 	lsr.w	r3, r2, r3
 8007b66:	4a09      	ldr	r2, [pc, #36]	@ (8007b8c <HAL_RCC_ClockConfig+0x1c4>)
 8007b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007b6a:	4b09      	ldr	r3, [pc, #36]	@ (8007b90 <HAL_RCC_ClockConfig+0x1c8>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fc fd5c 	bl	800462c <HAL_InitTick>

  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	40023c00 	.word	0x40023c00
 8007b84:	40023800 	.word	0x40023800
 8007b88:	08012a6c 	.word	0x08012a6c
 8007b8c:	20000294 	.word	0x20000294
 8007b90:	20000298 	.word	0x20000298

08007b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b98:	b094      	sub	sp, #80	@ 0x50
 8007b9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bac:	4b79      	ldr	r3, [pc, #484]	@ (8007d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f003 030c 	and.w	r3, r3, #12
 8007bb4:	2b08      	cmp	r3, #8
 8007bb6:	d00d      	beq.n	8007bd4 <HAL_RCC_GetSysClockFreq+0x40>
 8007bb8:	2b08      	cmp	r3, #8
 8007bba:	f200 80e1 	bhi.w	8007d80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d002      	beq.n	8007bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8007bc2:	2b04      	cmp	r3, #4
 8007bc4:	d003      	beq.n	8007bce <HAL_RCC_GetSysClockFreq+0x3a>
 8007bc6:	e0db      	b.n	8007d80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007bc8:	4b73      	ldr	r3, [pc, #460]	@ (8007d98 <HAL_RCC_GetSysClockFreq+0x204>)
 8007bca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007bcc:	e0db      	b.n	8007d86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007bce:	4b72      	ldr	r3, [pc, #456]	@ (8007d98 <HAL_RCC_GetSysClockFreq+0x204>)
 8007bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007bd2:	e0d8      	b.n	8007d86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007bd4:	4b6f      	ldr	r3, [pc, #444]	@ (8007d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bdc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007bde:	4b6d      	ldr	r3, [pc, #436]	@ (8007d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d063      	beq.n	8007cb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bea:	4b6a      	ldr	r3, [pc, #424]	@ (8007d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	099b      	lsrs	r3, r3, #6
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007bf4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bfe:	2300      	movs	r3, #0
 8007c00:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007c06:	4622      	mov	r2, r4
 8007c08:	462b      	mov	r3, r5
 8007c0a:	f04f 0000 	mov.w	r0, #0
 8007c0e:	f04f 0100 	mov.w	r1, #0
 8007c12:	0159      	lsls	r1, r3, #5
 8007c14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c18:	0150      	lsls	r0, r2, #5
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	4621      	mov	r1, r4
 8007c20:	1a51      	subs	r1, r2, r1
 8007c22:	6139      	str	r1, [r7, #16]
 8007c24:	4629      	mov	r1, r5
 8007c26:	eb63 0301 	sbc.w	r3, r3, r1
 8007c2a:	617b      	str	r3, [r7, #20]
 8007c2c:	f04f 0200 	mov.w	r2, #0
 8007c30:	f04f 0300 	mov.w	r3, #0
 8007c34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c38:	4659      	mov	r1, fp
 8007c3a:	018b      	lsls	r3, r1, #6
 8007c3c:	4651      	mov	r1, sl
 8007c3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c42:	4651      	mov	r1, sl
 8007c44:	018a      	lsls	r2, r1, #6
 8007c46:	4651      	mov	r1, sl
 8007c48:	ebb2 0801 	subs.w	r8, r2, r1
 8007c4c:	4659      	mov	r1, fp
 8007c4e:	eb63 0901 	sbc.w	r9, r3, r1
 8007c52:	f04f 0200 	mov.w	r2, #0
 8007c56:	f04f 0300 	mov.w	r3, #0
 8007c5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c66:	4690      	mov	r8, r2
 8007c68:	4699      	mov	r9, r3
 8007c6a:	4623      	mov	r3, r4
 8007c6c:	eb18 0303 	adds.w	r3, r8, r3
 8007c70:	60bb      	str	r3, [r7, #8]
 8007c72:	462b      	mov	r3, r5
 8007c74:	eb49 0303 	adc.w	r3, r9, r3
 8007c78:	60fb      	str	r3, [r7, #12]
 8007c7a:	f04f 0200 	mov.w	r2, #0
 8007c7e:	f04f 0300 	mov.w	r3, #0
 8007c82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007c86:	4629      	mov	r1, r5
 8007c88:	028b      	lsls	r3, r1, #10
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c90:	4621      	mov	r1, r4
 8007c92:	028a      	lsls	r2, r1, #10
 8007c94:	4610      	mov	r0, r2
 8007c96:	4619      	mov	r1, r3
 8007c98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ca0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007ca4:	f7f8 fafc 	bl	80002a0 <__aeabi_uldivmod>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	4613      	mov	r3, r2
 8007cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cb0:	e058      	b.n	8007d64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cb2:	4b38      	ldr	r3, [pc, #224]	@ (8007d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	099b      	lsrs	r3, r3, #6
 8007cb8:	2200      	movs	r2, #0
 8007cba:	4618      	mov	r0, r3
 8007cbc:	4611      	mov	r1, r2
 8007cbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007cc2:	623b      	str	r3, [r7, #32]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007ccc:	4642      	mov	r2, r8
 8007cce:	464b      	mov	r3, r9
 8007cd0:	f04f 0000 	mov.w	r0, #0
 8007cd4:	f04f 0100 	mov.w	r1, #0
 8007cd8:	0159      	lsls	r1, r3, #5
 8007cda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007cde:	0150      	lsls	r0, r2, #5
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4641      	mov	r1, r8
 8007ce6:	ebb2 0a01 	subs.w	sl, r2, r1
 8007cea:	4649      	mov	r1, r9
 8007cec:	eb63 0b01 	sbc.w	fp, r3, r1
 8007cf0:	f04f 0200 	mov.w	r2, #0
 8007cf4:	f04f 0300 	mov.w	r3, #0
 8007cf8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007cfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007d00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007d04:	ebb2 040a 	subs.w	r4, r2, sl
 8007d08:	eb63 050b 	sbc.w	r5, r3, fp
 8007d0c:	f04f 0200 	mov.w	r2, #0
 8007d10:	f04f 0300 	mov.w	r3, #0
 8007d14:	00eb      	lsls	r3, r5, #3
 8007d16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d1a:	00e2      	lsls	r2, r4, #3
 8007d1c:	4614      	mov	r4, r2
 8007d1e:	461d      	mov	r5, r3
 8007d20:	4643      	mov	r3, r8
 8007d22:	18e3      	adds	r3, r4, r3
 8007d24:	603b      	str	r3, [r7, #0]
 8007d26:	464b      	mov	r3, r9
 8007d28:	eb45 0303 	adc.w	r3, r5, r3
 8007d2c:	607b      	str	r3, [r7, #4]
 8007d2e:	f04f 0200 	mov.w	r2, #0
 8007d32:	f04f 0300 	mov.w	r3, #0
 8007d36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	028b      	lsls	r3, r1, #10
 8007d3e:	4621      	mov	r1, r4
 8007d40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d44:	4621      	mov	r1, r4
 8007d46:	028a      	lsls	r2, r1, #10
 8007d48:	4610      	mov	r0, r2
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d4e:	2200      	movs	r2, #0
 8007d50:	61bb      	str	r3, [r7, #24]
 8007d52:	61fa      	str	r2, [r7, #28]
 8007d54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d58:	f7f8 faa2 	bl	80002a0 <__aeabi_uldivmod>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	460b      	mov	r3, r1
 8007d60:	4613      	mov	r3, r2
 8007d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007d64:	4b0b      	ldr	r3, [pc, #44]	@ (8007d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	0c1b      	lsrs	r3, r3, #16
 8007d6a:	f003 0303 	and.w	r3, r3, #3
 8007d6e:	3301      	adds	r3, #1
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007d74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007d76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007d7e:	e002      	b.n	8007d86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d80:	4b05      	ldr	r3, [pc, #20]	@ (8007d98 <HAL_RCC_GetSysClockFreq+0x204>)
 8007d82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007d84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3750      	adds	r7, #80	@ 0x50
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d92:	bf00      	nop
 8007d94:	40023800 	.word	0x40023800
 8007d98:	00f42400 	.word	0x00f42400

08007d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007da0:	4b03      	ldr	r3, [pc, #12]	@ (8007db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007da2:	681b      	ldr	r3, [r3, #0]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	20000294 	.word	0x20000294

08007db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007db8:	f7ff fff0 	bl	8007d9c <HAL_RCC_GetHCLKFreq>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	4b05      	ldr	r3, [pc, #20]	@ (8007dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	0a9b      	lsrs	r3, r3, #10
 8007dc4:	f003 0307 	and.w	r3, r3, #7
 8007dc8:	4903      	ldr	r1, [pc, #12]	@ (8007dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007dca:	5ccb      	ldrb	r3, [r1, r3]
 8007dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	40023800 	.word	0x40023800
 8007dd8:	08012a7c 	.word	0x08012a7c

08007ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007de0:	f7ff ffdc 	bl	8007d9c <HAL_RCC_GetHCLKFreq>
 8007de4:	4602      	mov	r2, r0
 8007de6:	4b05      	ldr	r3, [pc, #20]	@ (8007dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	0b5b      	lsrs	r3, r3, #13
 8007dec:	f003 0307 	and.w	r3, r3, #7
 8007df0:	4903      	ldr	r1, [pc, #12]	@ (8007e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007df2:	5ccb      	ldrb	r3, [r1, r3]
 8007df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	40023800 	.word	0x40023800
 8007e00:	08012a7c 	.word	0x08012a7c

08007e04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e07b      	b.n	8007f0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d108      	bne.n	8007e30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e26:	d009      	beq.n	8007e3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	61da      	str	r2, [r3, #28]
 8007e2e:	e005      	b.n	8007e3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d106      	bne.n	8007e5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7fc f946 	bl	80040e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007e84:	431a      	orrs	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e8e:	431a      	orrs	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	f003 0302 	and.w	r3, r3, #2
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007eac:	431a      	orrs	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	69db      	ldr	r3, [r3, #28]
 8007eb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ec0:	ea42 0103 	orr.w	r1, r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	0c1b      	lsrs	r3, r3, #16
 8007eda:	f003 0104 	and.w	r1, r3, #4
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee2:	f003 0210 	and.w	r2, r3, #16
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	430a      	orrs	r2, r1
 8007eec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	69da      	ldr	r2, [r3, #28]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007efc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b088      	sub	sp, #32
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	60f8      	str	r0, [r7, #12]
 8007f1e:	60b9      	str	r1, [r7, #8]
 8007f20:	603b      	str	r3, [r7, #0]
 8007f22:	4613      	mov	r3, r2
 8007f24:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f26:	f7fc fbc5 	bl	80046b4 <HAL_GetTick>
 8007f2a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007f2c:	88fb      	ldrh	r3, [r7, #6]
 8007f2e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d001      	beq.n	8007f40 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	e12a      	b.n	8008196 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d002      	beq.n	8007f4c <HAL_SPI_Transmit+0x36>
 8007f46:	88fb      	ldrh	r3, [r7, #6]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e122      	b.n	8008196 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d101      	bne.n	8007f5e <HAL_SPI_Transmit+0x48>
 8007f5a:	2302      	movs	r3, #2
 8007f5c:	e11b      	b.n	8008196 <HAL_SPI_Transmit+0x280>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2203      	movs	r2, #3
 8007f6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	88fa      	ldrh	r2, [r7, #6]
 8007f7e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	88fa      	ldrh	r2, [r7, #6]
 8007f84:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fac:	d10f      	bne.n	8007fce <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fbc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fcc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fd8:	2b40      	cmp	r3, #64	@ 0x40
 8007fda:	d007      	beq.n	8007fec <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ff4:	d152      	bne.n	800809c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d002      	beq.n	8008004 <HAL_SPI_Transmit+0xee>
 8007ffe:	8b7b      	ldrh	r3, [r7, #26]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d145      	bne.n	8008090 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008008:	881a      	ldrh	r2, [r3, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008014:	1c9a      	adds	r2, r3, #2
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800801e:	b29b      	uxth	r3, r3
 8008020:	3b01      	subs	r3, #1
 8008022:	b29a      	uxth	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008028:	e032      	b.n	8008090 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f003 0302 	and.w	r3, r3, #2
 8008034:	2b02      	cmp	r3, #2
 8008036:	d112      	bne.n	800805e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800803c:	881a      	ldrh	r2, [r3, #0]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008048:	1c9a      	adds	r2, r3, #2
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008052:	b29b      	uxth	r3, r3
 8008054:	3b01      	subs	r3, #1
 8008056:	b29a      	uxth	r2, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800805c:	e018      	b.n	8008090 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800805e:	f7fc fb29 	bl	80046b4 <HAL_GetTick>
 8008062:	4602      	mov	r2, r0
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	683a      	ldr	r2, [r7, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	d803      	bhi.n	8008076 <HAL_SPI_Transmit+0x160>
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008074:	d102      	bne.n	800807c <HAL_SPI_Transmit+0x166>
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d109      	bne.n	8008090 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	e082      	b.n	8008196 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008094:	b29b      	uxth	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1c7      	bne.n	800802a <HAL_SPI_Transmit+0x114>
 800809a:	e053      	b.n	8008144 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d002      	beq.n	80080aa <HAL_SPI_Transmit+0x194>
 80080a4:	8b7b      	ldrh	r3, [r7, #26]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d147      	bne.n	800813a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	330c      	adds	r3, #12
 80080b4:	7812      	ldrb	r2, [r2, #0]
 80080b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080bc:	1c5a      	adds	r2, r3, #1
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	3b01      	subs	r3, #1
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80080d0:	e033      	b.n	800813a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f003 0302 	and.w	r3, r3, #2
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d113      	bne.n	8008108 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	330c      	adds	r3, #12
 80080ea:	7812      	ldrb	r2, [r2, #0]
 80080ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080f2:	1c5a      	adds	r2, r3, #1
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	3b01      	subs	r3, #1
 8008100:	b29a      	uxth	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008106:	e018      	b.n	800813a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008108:	f7fc fad4 	bl	80046b4 <HAL_GetTick>
 800810c:	4602      	mov	r2, r0
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	429a      	cmp	r2, r3
 8008116:	d803      	bhi.n	8008120 <HAL_SPI_Transmit+0x20a>
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800811e:	d102      	bne.n	8008126 <HAL_SPI_Transmit+0x210>
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d109      	bne.n	800813a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e02d      	b.n	8008196 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800813e:	b29b      	uxth	r3, r3
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1c6      	bne.n	80080d2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008144:	69fa      	ldr	r2, [r7, #28]
 8008146:	6839      	ldr	r1, [r7, #0]
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f000 fa59 	bl	8008600 <SPI_EndRxTxTransaction>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d002      	beq.n	800815a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2220      	movs	r2, #32
 8008158:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10a      	bne.n	8008178 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008162:	2300      	movs	r3, #0
 8008164:	617b      	str	r3, [r7, #20]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	617b      	str	r3, [r7, #20]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	617b      	str	r3, [r7, #20]
 8008176:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800818c:	2b00      	cmp	r3, #0
 800818e:	d001      	beq.n	8008194 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e000      	b.n	8008196 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008194:	2300      	movs	r3, #0
  }
}
 8008196:	4618      	mov	r0, r3
 8008198:	3720      	adds	r7, #32
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b08a      	sub	sp, #40	@ 0x28
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	60b9      	str	r1, [r7, #8]
 80081a8:	607a      	str	r2, [r7, #4]
 80081aa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80081ac:	2301      	movs	r3, #1
 80081ae:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081b0:	f7fc fa80 	bl	80046b4 <HAL_GetTick>
 80081b4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80081bc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80081c4:	887b      	ldrh	r3, [r7, #2]
 80081c6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80081c8:	7ffb      	ldrb	r3, [r7, #31]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d00c      	beq.n	80081e8 <HAL_SPI_TransmitReceive+0x4a>
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081d4:	d106      	bne.n	80081e4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d102      	bne.n	80081e4 <HAL_SPI_TransmitReceive+0x46>
 80081de:	7ffb      	ldrb	r3, [r7, #31]
 80081e0:	2b04      	cmp	r3, #4
 80081e2:	d001      	beq.n	80081e8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80081e4:	2302      	movs	r3, #2
 80081e6:	e17f      	b.n	80084e8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d005      	beq.n	80081fa <HAL_SPI_TransmitReceive+0x5c>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d002      	beq.n	80081fa <HAL_SPI_TransmitReceive+0x5c>
 80081f4:	887b      	ldrh	r3, [r7, #2]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	e174      	b.n	80084e8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008204:	2b01      	cmp	r3, #1
 8008206:	d101      	bne.n	800820c <HAL_SPI_TransmitReceive+0x6e>
 8008208:	2302      	movs	r3, #2
 800820a:	e16d      	b.n	80084e8 <HAL_SPI_TransmitReceive+0x34a>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800821a:	b2db      	uxtb	r3, r3
 800821c:	2b04      	cmp	r3, #4
 800821e:	d003      	beq.n	8008228 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2205      	movs	r2, #5
 8008224:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2200      	movs	r2, #0
 800822c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	887a      	ldrh	r2, [r7, #2]
 8008238:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	887a      	ldrh	r2, [r7, #2]
 800823e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	887a      	ldrh	r2, [r7, #2]
 800824a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	887a      	ldrh	r2, [r7, #2]
 8008250:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008268:	2b40      	cmp	r3, #64	@ 0x40
 800826a:	d007      	beq.n	800827c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800827a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008284:	d17e      	bne.n	8008384 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d002      	beq.n	8008294 <HAL_SPI_TransmitReceive+0xf6>
 800828e:	8afb      	ldrh	r3, [r7, #22]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d16c      	bne.n	800836e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008298:	881a      	ldrh	r2, [r3, #0]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a4:	1c9a      	adds	r2, r3, #2
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	3b01      	subs	r3, #1
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082b8:	e059      	b.n	800836e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	f003 0302 	and.w	r3, r3, #2
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d11b      	bne.n	8008300 <HAL_SPI_TransmitReceive+0x162>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d016      	beq.n	8008300 <HAL_SPI_TransmitReceive+0x162>
 80082d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d113      	bne.n	8008300 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082dc:	881a      	ldrh	r2, [r3, #0]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082e8:	1c9a      	adds	r2, r3, #2
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	3b01      	subs	r3, #1
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80082fc:	2300      	movs	r3, #0
 80082fe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	2b01      	cmp	r3, #1
 800830c:	d119      	bne.n	8008342 <HAL_SPI_TransmitReceive+0x1a4>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008312:	b29b      	uxth	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	d014      	beq.n	8008342 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68da      	ldr	r2, [r3, #12]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008322:	b292      	uxth	r2, r2
 8008324:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800832a:	1c9a      	adds	r2, r3, #2
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008334:	b29b      	uxth	r3, r3
 8008336:	3b01      	subs	r3, #1
 8008338:	b29a      	uxth	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800833e:	2301      	movs	r3, #1
 8008340:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008342:	f7fc f9b7 	bl	80046b4 <HAL_GetTick>
 8008346:	4602      	mov	r2, r0
 8008348:	6a3b      	ldr	r3, [r7, #32]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800834e:	429a      	cmp	r2, r3
 8008350:	d80d      	bhi.n	800836e <HAL_SPI_TransmitReceive+0x1d0>
 8008352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008358:	d009      	beq.n	800836e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e0bc      	b.n	80084e8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008372:	b29b      	uxth	r3, r3
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1a0      	bne.n	80082ba <HAL_SPI_TransmitReceive+0x11c>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800837c:	b29b      	uxth	r3, r3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d19b      	bne.n	80082ba <HAL_SPI_TransmitReceive+0x11c>
 8008382:	e082      	b.n	800848a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d002      	beq.n	8008392 <HAL_SPI_TransmitReceive+0x1f4>
 800838c:	8afb      	ldrh	r3, [r7, #22]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d171      	bne.n	8008476 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	330c      	adds	r3, #12
 800839c:	7812      	ldrb	r2, [r2, #0]
 800839e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083a4:	1c5a      	adds	r2, r3, #1
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	3b01      	subs	r3, #1
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083b8:	e05d      	b.n	8008476 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	f003 0302 	and.w	r3, r3, #2
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d11c      	bne.n	8008402 <HAL_SPI_TransmitReceive+0x264>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d017      	beq.n	8008402 <HAL_SPI_TransmitReceive+0x264>
 80083d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d114      	bne.n	8008402 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	330c      	adds	r3, #12
 80083e2:	7812      	ldrb	r2, [r2, #0]
 80083e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ea:	1c5a      	adds	r2, r3, #1
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	3b01      	subs	r3, #1
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80083fe:	2300      	movs	r3, #0
 8008400:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	2b01      	cmp	r3, #1
 800840e:	d119      	bne.n	8008444 <HAL_SPI_TransmitReceive+0x2a6>
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008414:	b29b      	uxth	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d014      	beq.n	8008444 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68da      	ldr	r2, [r3, #12]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008424:	b2d2      	uxtb	r2, r2
 8008426:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800842c:	1c5a      	adds	r2, r3, #1
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008436:	b29b      	uxth	r3, r3
 8008438:	3b01      	subs	r3, #1
 800843a:	b29a      	uxth	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008440:	2301      	movs	r3, #1
 8008442:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008444:	f7fc f936 	bl	80046b4 <HAL_GetTick>
 8008448:	4602      	mov	r2, r0
 800844a:	6a3b      	ldr	r3, [r7, #32]
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008450:	429a      	cmp	r2, r3
 8008452:	d803      	bhi.n	800845c <HAL_SPI_TransmitReceive+0x2be>
 8008454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845a:	d102      	bne.n	8008462 <HAL_SPI_TransmitReceive+0x2c4>
 800845c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845e:	2b00      	cmp	r3, #0
 8008460:	d109      	bne.n	8008476 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e038      	b.n	80084e8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800847a:	b29b      	uxth	r3, r3
 800847c:	2b00      	cmp	r3, #0
 800847e:	d19c      	bne.n	80083ba <HAL_SPI_TransmitReceive+0x21c>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008484:	b29b      	uxth	r3, r3
 8008486:	2b00      	cmp	r3, #0
 8008488:	d197      	bne.n	80083ba <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800848a:	6a3a      	ldr	r2, [r7, #32]
 800848c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f000 f8b6 	bl	8008600 <SPI_EndRxTxTransaction>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d008      	beq.n	80084ac <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2220      	movs	r2, #32
 800849e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e01d      	b.n	80084e8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10a      	bne.n	80084ca <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084b4:	2300      	movs	r3, #0
 80084b6:	613b      	str	r3, [r7, #16]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	613b      	str	r3, [r7, #16]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	613b      	str	r3, [r7, #16]
 80084c8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e000      	b.n	80084e8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80084e6:	2300      	movs	r3, #0
  }
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3728      	adds	r7, #40	@ 0x28
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b088      	sub	sp, #32
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	603b      	str	r3, [r7, #0]
 80084fc:	4613      	mov	r3, r2
 80084fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008500:	f7fc f8d8 	bl	80046b4 <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008508:	1a9b      	subs	r3, r3, r2
 800850a:	683a      	ldr	r2, [r7, #0]
 800850c:	4413      	add	r3, r2
 800850e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008510:	f7fc f8d0 	bl	80046b4 <HAL_GetTick>
 8008514:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008516:	4b39      	ldr	r3, [pc, #228]	@ (80085fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	015b      	lsls	r3, r3, #5
 800851c:	0d1b      	lsrs	r3, r3, #20
 800851e:	69fa      	ldr	r2, [r7, #28]
 8008520:	fb02 f303 	mul.w	r3, r2, r3
 8008524:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008526:	e054      	b.n	80085d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800852e:	d050      	beq.n	80085d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008530:	f7fc f8c0 	bl	80046b4 <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	69fa      	ldr	r2, [r7, #28]
 800853c:	429a      	cmp	r2, r3
 800853e:	d902      	bls.n	8008546 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d13d      	bne.n	80085c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008554:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800855e:	d111      	bne.n	8008584 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008568:	d004      	beq.n	8008574 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008572:	d107      	bne.n	8008584 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008582:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008588:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800858c:	d10f      	bne.n	80085ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80085ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e017      	b.n	80085f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d101      	bne.n	80085cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	689a      	ldr	r2, [r3, #8]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	4013      	ands	r3, r2
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	429a      	cmp	r2, r3
 80085e0:	bf0c      	ite	eq
 80085e2:	2301      	moveq	r3, #1
 80085e4:	2300      	movne	r3, #0
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	461a      	mov	r2, r3
 80085ea:	79fb      	ldrb	r3, [r7, #7]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d19b      	bne.n	8008528 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3720      	adds	r7, #32
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	20000294 	.word	0x20000294

08008600 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b088      	sub	sp, #32
 8008604:	af02      	add	r7, sp, #8
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	2201      	movs	r2, #1
 8008614:	2102      	movs	r1, #2
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f7ff ff6a 	bl	80084f0 <SPI_WaitFlagStateUntilTimeout>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d007      	beq.n	8008632 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008626:	f043 0220 	orr.w	r2, r3, #32
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800862e:	2303      	movs	r3, #3
 8008630:	e032      	b.n	8008698 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008632:	4b1b      	ldr	r3, [pc, #108]	@ (80086a0 <SPI_EndRxTxTransaction+0xa0>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a1b      	ldr	r2, [pc, #108]	@ (80086a4 <SPI_EndRxTxTransaction+0xa4>)
 8008638:	fba2 2303 	umull	r2, r3, r2, r3
 800863c:	0d5b      	lsrs	r3, r3, #21
 800863e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008642:	fb02 f303 	mul.w	r3, r2, r3
 8008646:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008650:	d112      	bne.n	8008678 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	2200      	movs	r2, #0
 800865a:	2180      	movs	r1, #128	@ 0x80
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f7ff ff47 	bl	80084f0 <SPI_WaitFlagStateUntilTimeout>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d016      	beq.n	8008696 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800866c:	f043 0220 	orr.w	r2, r3, #32
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008674:	2303      	movs	r3, #3
 8008676:	e00f      	b.n	8008698 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00a      	beq.n	8008694 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	3b01      	subs	r3, #1
 8008682:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800868e:	2b80      	cmp	r3, #128	@ 0x80
 8008690:	d0f2      	beq.n	8008678 <SPI_EndRxTxTransaction+0x78>
 8008692:	e000      	b.n	8008696 <SPI_EndRxTxTransaction+0x96>
        break;
 8008694:	bf00      	nop
  }

  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3718      	adds	r7, #24
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	20000294 	.word	0x20000294
 80086a4:	165e9f81 	.word	0x165e9f81

080086a8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d101      	bne.n	80086be <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e038      	b.n	8008730 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d106      	bne.n	80086d8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f7fb fe68 	bl	80043a8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	3308      	adds	r3, #8
 80086e0:	4619      	mov	r1, r3
 80086e2:	4610      	mov	r0, r2
 80086e4:	f001 ffe8 	bl	800a6b8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6818      	ldr	r0, [r3, #0]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	461a      	mov	r2, r3
 80086f2:	68b9      	ldr	r1, [r7, #8]
 80086f4:	f002 f866 	bl	800a7c4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6858      	ldr	r0, [r3, #4]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	689a      	ldr	r2, [r3, #8]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008704:	6879      	ldr	r1, [r7, #4]
 8008706:	f002 f8ad 	bl	800a864 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	6892      	ldr	r2, [r2, #8]
 8008712:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	6892      	ldr	r2, [r2, #8]
 800871e:	f041 0101 	orr.w	r1, r1, #1
 8008722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e041      	b.n	80087ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d106      	bne.n	8008764 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7fb fd0a 	bl	8004178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2202      	movs	r2, #2
 8008768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	3304      	adds	r3, #4
 8008774:	4619      	mov	r1, r3
 8008776:	4610      	mov	r0, r2
 8008778:	f000 fb6e 	bl	8008e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
	...

080087d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d001      	beq.n	80087f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e04e      	b.n	800888e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2202      	movs	r2, #2
 80087f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68da      	ldr	r2, [r3, #12]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f042 0201 	orr.w	r2, r2, #1
 8008806:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a23      	ldr	r2, [pc, #140]	@ (800889c <HAL_TIM_Base_Start_IT+0xc4>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d022      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x80>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800881a:	d01d      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x80>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a1f      	ldr	r2, [pc, #124]	@ (80088a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d018      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x80>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a1e      	ldr	r2, [pc, #120]	@ (80088a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d013      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x80>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a1c      	ldr	r2, [pc, #112]	@ (80088a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d00e      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x80>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a1b      	ldr	r2, [pc, #108]	@ (80088ac <HAL_TIM_Base_Start_IT+0xd4>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d009      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x80>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a19      	ldr	r2, [pc, #100]	@ (80088b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d004      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x80>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a18      	ldr	r2, [pc, #96]	@ (80088b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d111      	bne.n	800887c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	f003 0307 	and.w	r3, r3, #7
 8008862:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b06      	cmp	r3, #6
 8008868:	d010      	beq.n	800888c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f042 0201 	orr.w	r2, r2, #1
 8008878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800887a:	e007      	b.n	800888c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f042 0201 	orr.w	r2, r2, #1
 800888a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3714      	adds	r7, #20
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	40010000 	.word	0x40010000
 80088a0:	40000400 	.word	0x40000400
 80088a4:	40000800 	.word	0x40000800
 80088a8:	40000c00 	.word	0x40000c00
 80088ac:	40010400 	.word	0x40010400
 80088b0:	40014000 	.word	0x40014000
 80088b4:	40001800 	.word	0x40001800

080088b8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68da      	ldr	r2, [r3, #12]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f022 0201 	bic.w	r2, r2, #1
 80088ce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6a1a      	ldr	r2, [r3, #32]
 80088d6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80088da:	4013      	ands	r3, r2
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10f      	bne.n	8008900 <HAL_TIM_Base_Stop_IT+0x48>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6a1a      	ldr	r2, [r3, #32]
 80088e6:	f240 4344 	movw	r3, #1092	@ 0x444
 80088ea:	4013      	ands	r3, r2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d107      	bne.n	8008900 <HAL_TIM_Base_Stop_IT+0x48>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f022 0201 	bic.w	r2, r2, #1
 80088fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	370c      	adds	r7, #12
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr

08008916 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b082      	sub	sp, #8
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d101      	bne.n	8008928 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e041      	b.n	80089ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800892e:	b2db      	uxtb	r3, r3
 8008930:	2b00      	cmp	r3, #0
 8008932:	d106      	bne.n	8008942 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f7fb fc3b 	bl	80041b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2202      	movs	r2, #2
 8008946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	3304      	adds	r3, #4
 8008952:	4619      	mov	r1, r3
 8008954:	4610      	mov	r0, r2
 8008956:	f000 fa7f 	bl	8008e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2201      	movs	r2, #1
 8008966:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2201      	movs	r2, #1
 800896e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d109      	bne.n	80089d8 <HAL_TIM_PWM_Start+0x24>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	bf14      	ite	ne
 80089d0:	2301      	movne	r3, #1
 80089d2:	2300      	moveq	r3, #0
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	e022      	b.n	8008a1e <HAL_TIM_PWM_Start+0x6a>
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	2b04      	cmp	r3, #4
 80089dc:	d109      	bne.n	80089f2 <HAL_TIM_PWM_Start+0x3e>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	bf14      	ite	ne
 80089ea:	2301      	movne	r3, #1
 80089ec:	2300      	moveq	r3, #0
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	e015      	b.n	8008a1e <HAL_TIM_PWM_Start+0x6a>
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b08      	cmp	r3, #8
 80089f6:	d109      	bne.n	8008a0c <HAL_TIM_PWM_Start+0x58>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	bf14      	ite	ne
 8008a04:	2301      	movne	r3, #1
 8008a06:	2300      	moveq	r3, #0
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	e008      	b.n	8008a1e <HAL_TIM_PWM_Start+0x6a>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	bf14      	ite	ne
 8008a18:	2301      	movne	r3, #1
 8008a1a:	2300      	moveq	r3, #0
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e07c      	b.n	8008b20 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d104      	bne.n	8008a36 <HAL_TIM_PWM_Start+0x82>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a34:	e013      	b.n	8008a5e <HAL_TIM_PWM_Start+0xaa>
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	2b04      	cmp	r3, #4
 8008a3a:	d104      	bne.n	8008a46 <HAL_TIM_PWM_Start+0x92>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2202      	movs	r2, #2
 8008a40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a44:	e00b      	b.n	8008a5e <HAL_TIM_PWM_Start+0xaa>
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	2b08      	cmp	r3, #8
 8008a4a:	d104      	bne.n	8008a56 <HAL_TIM_PWM_Start+0xa2>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a54:	e003      	b.n	8008a5e <HAL_TIM_PWM_Start+0xaa>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2202      	movs	r2, #2
 8008a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2201      	movs	r2, #1
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 fcec 	bl	8009444 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a2d      	ldr	r2, [pc, #180]	@ (8008b28 <HAL_TIM_PWM_Start+0x174>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d004      	beq.n	8008a80 <HAL_TIM_PWM_Start+0xcc>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a2c      	ldr	r2, [pc, #176]	@ (8008b2c <HAL_TIM_PWM_Start+0x178>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d101      	bne.n	8008a84 <HAL_TIM_PWM_Start+0xd0>
 8008a80:	2301      	movs	r3, #1
 8008a82:	e000      	b.n	8008a86 <HAL_TIM_PWM_Start+0xd2>
 8008a84:	2300      	movs	r3, #0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d007      	beq.n	8008a9a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a98:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a22      	ldr	r2, [pc, #136]	@ (8008b28 <HAL_TIM_PWM_Start+0x174>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d022      	beq.n	8008aea <HAL_TIM_PWM_Start+0x136>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aac:	d01d      	beq.n	8008aea <HAL_TIM_PWM_Start+0x136>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a1f      	ldr	r2, [pc, #124]	@ (8008b30 <HAL_TIM_PWM_Start+0x17c>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d018      	beq.n	8008aea <HAL_TIM_PWM_Start+0x136>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a1d      	ldr	r2, [pc, #116]	@ (8008b34 <HAL_TIM_PWM_Start+0x180>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d013      	beq.n	8008aea <HAL_TIM_PWM_Start+0x136>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8008b38 <HAL_TIM_PWM_Start+0x184>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d00e      	beq.n	8008aea <HAL_TIM_PWM_Start+0x136>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a16      	ldr	r2, [pc, #88]	@ (8008b2c <HAL_TIM_PWM_Start+0x178>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d009      	beq.n	8008aea <HAL_TIM_PWM_Start+0x136>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a18      	ldr	r2, [pc, #96]	@ (8008b3c <HAL_TIM_PWM_Start+0x188>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d004      	beq.n	8008aea <HAL_TIM_PWM_Start+0x136>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a16      	ldr	r2, [pc, #88]	@ (8008b40 <HAL_TIM_PWM_Start+0x18c>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d111      	bne.n	8008b0e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	f003 0307 	and.w	r3, r3, #7
 8008af4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2b06      	cmp	r3, #6
 8008afa:	d010      	beq.n	8008b1e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f042 0201 	orr.w	r2, r2, #1
 8008b0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b0c:	e007      	b.n	8008b1e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f042 0201 	orr.w	r2, r2, #1
 8008b1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	40010000 	.word	0x40010000
 8008b2c:	40010400 	.word	0x40010400
 8008b30:	40000400 	.word	0x40000400
 8008b34:	40000800 	.word	0x40000800
 8008b38:	40000c00 	.word	0x40000c00
 8008b3c:	40014000 	.word	0x40014000
 8008b40:	40001800 	.word	0x40001800

08008b44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d101      	bne.n	8008b62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008b5e:	2302      	movs	r3, #2
 8008b60:	e0ae      	b.n	8008cc0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2201      	movs	r2, #1
 8008b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2b0c      	cmp	r3, #12
 8008b6e:	f200 809f 	bhi.w	8008cb0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008b72:	a201      	add	r2, pc, #4	@ (adr r2, 8008b78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b78:	08008bad 	.word	0x08008bad
 8008b7c:	08008cb1 	.word	0x08008cb1
 8008b80:	08008cb1 	.word	0x08008cb1
 8008b84:	08008cb1 	.word	0x08008cb1
 8008b88:	08008bed 	.word	0x08008bed
 8008b8c:	08008cb1 	.word	0x08008cb1
 8008b90:	08008cb1 	.word	0x08008cb1
 8008b94:	08008cb1 	.word	0x08008cb1
 8008b98:	08008c2f 	.word	0x08008c2f
 8008b9c:	08008cb1 	.word	0x08008cb1
 8008ba0:	08008cb1 	.word	0x08008cb1
 8008ba4:	08008cb1 	.word	0x08008cb1
 8008ba8:	08008c6f 	.word	0x08008c6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68b9      	ldr	r1, [r7, #8]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 f9fc 	bl	8008fb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	699a      	ldr	r2, [r3, #24]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f042 0208 	orr.w	r2, r2, #8
 8008bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	699a      	ldr	r2, [r3, #24]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f022 0204 	bic.w	r2, r2, #4
 8008bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	6999      	ldr	r1, [r3, #24]
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	691a      	ldr	r2, [r3, #16]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	430a      	orrs	r2, r1
 8008be8:	619a      	str	r2, [r3, #24]
      break;
 8008bea:	e064      	b.n	8008cb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68b9      	ldr	r1, [r7, #8]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 fa4c 	bl	8009090 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	699a      	ldr	r2, [r3, #24]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	699a      	ldr	r2, [r3, #24]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	6999      	ldr	r1, [r3, #24]
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	021a      	lsls	r2, r3, #8
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	430a      	orrs	r2, r1
 8008c2a:	619a      	str	r2, [r3, #24]
      break;
 8008c2c:	e043      	b.n	8008cb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68b9      	ldr	r1, [r7, #8]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f000 faa1 	bl	800917c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	69da      	ldr	r2, [r3, #28]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f042 0208 	orr.w	r2, r2, #8
 8008c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	69da      	ldr	r2, [r3, #28]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f022 0204 	bic.w	r2, r2, #4
 8008c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	69d9      	ldr	r1, [r3, #28]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	691a      	ldr	r2, [r3, #16]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	430a      	orrs	r2, r1
 8008c6a:	61da      	str	r2, [r3, #28]
      break;
 8008c6c:	e023      	b.n	8008cb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68b9      	ldr	r1, [r7, #8]
 8008c74:	4618      	mov	r0, r3
 8008c76:	f000 faf5 	bl	8009264 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	69da      	ldr	r2, [r3, #28]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	69da      	ldr	r2, [r3, #28]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	69d9      	ldr	r1, [r3, #28]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	021a      	lsls	r2, r3, #8
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	430a      	orrs	r2, r1
 8008cac:	61da      	str	r2, [r3, #28]
      break;
 8008cae:	e002      	b.n	8008cb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8008cb4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3718      	adds	r7, #24
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d101      	bne.n	8008ce4 <HAL_TIM_ConfigClockSource+0x1c>
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	e0b4      	b.n	8008e4e <HAL_TIM_ConfigClockSource+0x186>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008d02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68ba      	ldr	r2, [r7, #8]
 8008d12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d1c:	d03e      	beq.n	8008d9c <HAL_TIM_ConfigClockSource+0xd4>
 8008d1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d22:	f200 8087 	bhi.w	8008e34 <HAL_TIM_ConfigClockSource+0x16c>
 8008d26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d2a:	f000 8086 	beq.w	8008e3a <HAL_TIM_ConfigClockSource+0x172>
 8008d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d32:	d87f      	bhi.n	8008e34 <HAL_TIM_ConfigClockSource+0x16c>
 8008d34:	2b70      	cmp	r3, #112	@ 0x70
 8008d36:	d01a      	beq.n	8008d6e <HAL_TIM_ConfigClockSource+0xa6>
 8008d38:	2b70      	cmp	r3, #112	@ 0x70
 8008d3a:	d87b      	bhi.n	8008e34 <HAL_TIM_ConfigClockSource+0x16c>
 8008d3c:	2b60      	cmp	r3, #96	@ 0x60
 8008d3e:	d050      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x11a>
 8008d40:	2b60      	cmp	r3, #96	@ 0x60
 8008d42:	d877      	bhi.n	8008e34 <HAL_TIM_ConfigClockSource+0x16c>
 8008d44:	2b50      	cmp	r3, #80	@ 0x50
 8008d46:	d03c      	beq.n	8008dc2 <HAL_TIM_ConfigClockSource+0xfa>
 8008d48:	2b50      	cmp	r3, #80	@ 0x50
 8008d4a:	d873      	bhi.n	8008e34 <HAL_TIM_ConfigClockSource+0x16c>
 8008d4c:	2b40      	cmp	r3, #64	@ 0x40
 8008d4e:	d058      	beq.n	8008e02 <HAL_TIM_ConfigClockSource+0x13a>
 8008d50:	2b40      	cmp	r3, #64	@ 0x40
 8008d52:	d86f      	bhi.n	8008e34 <HAL_TIM_ConfigClockSource+0x16c>
 8008d54:	2b30      	cmp	r3, #48	@ 0x30
 8008d56:	d064      	beq.n	8008e22 <HAL_TIM_ConfigClockSource+0x15a>
 8008d58:	2b30      	cmp	r3, #48	@ 0x30
 8008d5a:	d86b      	bhi.n	8008e34 <HAL_TIM_ConfigClockSource+0x16c>
 8008d5c:	2b20      	cmp	r3, #32
 8008d5e:	d060      	beq.n	8008e22 <HAL_TIM_ConfigClockSource+0x15a>
 8008d60:	2b20      	cmp	r3, #32
 8008d62:	d867      	bhi.n	8008e34 <HAL_TIM_ConfigClockSource+0x16c>
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d05c      	beq.n	8008e22 <HAL_TIM_ConfigClockSource+0x15a>
 8008d68:	2b10      	cmp	r3, #16
 8008d6a:	d05a      	beq.n	8008e22 <HAL_TIM_ConfigClockSource+0x15a>
 8008d6c:	e062      	b.n	8008e34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d7e:	f000 fb41 	bl	8009404 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008d90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	609a      	str	r2, [r3, #8]
      break;
 8008d9a:	e04f      	b.n	8008e3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008dac:	f000 fb2a 	bl	8009404 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689a      	ldr	r2, [r3, #8]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008dbe:	609a      	str	r2, [r3, #8]
      break;
 8008dc0:	e03c      	b.n	8008e3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f000 fa9e 	bl	8009310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2150      	movs	r1, #80	@ 0x50
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 faf7 	bl	80093ce <TIM_ITRx_SetConfig>
      break;
 8008de0:	e02c      	b.n	8008e3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008dee:	461a      	mov	r2, r3
 8008df0:	f000 fabd 	bl	800936e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2160      	movs	r1, #96	@ 0x60
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f000 fae7 	bl	80093ce <TIM_ITRx_SetConfig>
      break;
 8008e00:	e01c      	b.n	8008e3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e0e:	461a      	mov	r2, r3
 8008e10:	f000 fa7e 	bl	8009310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2140      	movs	r1, #64	@ 0x40
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 fad7 	bl	80093ce <TIM_ITRx_SetConfig>
      break;
 8008e20:	e00c      	b.n	8008e3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	4610      	mov	r0, r2
 8008e2e:	f000 face 	bl	80093ce <TIM_ITRx_SetConfig>
      break;
 8008e32:	e003      	b.n	8008e3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	73fb      	strb	r3, [r7, #15]
      break;
 8008e38:	e000      	b.n	8008e3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008e3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
	...

08008e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a46      	ldr	r2, [pc, #280]	@ (8008f84 <TIM_Base_SetConfig+0x12c>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d013      	beq.n	8008e98 <TIM_Base_SetConfig+0x40>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e76:	d00f      	beq.n	8008e98 <TIM_Base_SetConfig+0x40>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a43      	ldr	r2, [pc, #268]	@ (8008f88 <TIM_Base_SetConfig+0x130>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d00b      	beq.n	8008e98 <TIM_Base_SetConfig+0x40>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a42      	ldr	r2, [pc, #264]	@ (8008f8c <TIM_Base_SetConfig+0x134>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d007      	beq.n	8008e98 <TIM_Base_SetConfig+0x40>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a41      	ldr	r2, [pc, #260]	@ (8008f90 <TIM_Base_SetConfig+0x138>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d003      	beq.n	8008e98 <TIM_Base_SetConfig+0x40>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a40      	ldr	r2, [pc, #256]	@ (8008f94 <TIM_Base_SetConfig+0x13c>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d108      	bne.n	8008eaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a35      	ldr	r2, [pc, #212]	@ (8008f84 <TIM_Base_SetConfig+0x12c>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d02b      	beq.n	8008f0a <TIM_Base_SetConfig+0xb2>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008eb8:	d027      	beq.n	8008f0a <TIM_Base_SetConfig+0xb2>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a32      	ldr	r2, [pc, #200]	@ (8008f88 <TIM_Base_SetConfig+0x130>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d023      	beq.n	8008f0a <TIM_Base_SetConfig+0xb2>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a31      	ldr	r2, [pc, #196]	@ (8008f8c <TIM_Base_SetConfig+0x134>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d01f      	beq.n	8008f0a <TIM_Base_SetConfig+0xb2>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a30      	ldr	r2, [pc, #192]	@ (8008f90 <TIM_Base_SetConfig+0x138>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d01b      	beq.n	8008f0a <TIM_Base_SetConfig+0xb2>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a2f      	ldr	r2, [pc, #188]	@ (8008f94 <TIM_Base_SetConfig+0x13c>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d017      	beq.n	8008f0a <TIM_Base_SetConfig+0xb2>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a2e      	ldr	r2, [pc, #184]	@ (8008f98 <TIM_Base_SetConfig+0x140>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d013      	beq.n	8008f0a <TIM_Base_SetConfig+0xb2>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a2d      	ldr	r2, [pc, #180]	@ (8008f9c <TIM_Base_SetConfig+0x144>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d00f      	beq.n	8008f0a <TIM_Base_SetConfig+0xb2>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a2c      	ldr	r2, [pc, #176]	@ (8008fa0 <TIM_Base_SetConfig+0x148>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d00b      	beq.n	8008f0a <TIM_Base_SetConfig+0xb2>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a2b      	ldr	r2, [pc, #172]	@ (8008fa4 <TIM_Base_SetConfig+0x14c>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d007      	beq.n	8008f0a <TIM_Base_SetConfig+0xb2>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a2a      	ldr	r2, [pc, #168]	@ (8008fa8 <TIM_Base_SetConfig+0x150>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d003      	beq.n	8008f0a <TIM_Base_SetConfig+0xb2>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a29      	ldr	r2, [pc, #164]	@ (8008fac <TIM_Base_SetConfig+0x154>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d108      	bne.n	8008f1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	689a      	ldr	r2, [r3, #8]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a10      	ldr	r2, [pc, #64]	@ (8008f84 <TIM_Base_SetConfig+0x12c>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d003      	beq.n	8008f50 <TIM_Base_SetConfig+0xf8>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a12      	ldr	r2, [pc, #72]	@ (8008f94 <TIM_Base_SetConfig+0x13c>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d103      	bne.n	8008f58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	691a      	ldr	r2, [r3, #16]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	f003 0301 	and.w	r3, r3, #1
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d105      	bne.n	8008f76 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	f023 0201 	bic.w	r2, r3, #1
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	611a      	str	r2, [r3, #16]
  }
}
 8008f76:	bf00      	nop
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	40010000 	.word	0x40010000
 8008f88:	40000400 	.word	0x40000400
 8008f8c:	40000800 	.word	0x40000800
 8008f90:	40000c00 	.word	0x40000c00
 8008f94:	40010400 	.word	0x40010400
 8008f98:	40014000 	.word	0x40014000
 8008f9c:	40014400 	.word	0x40014400
 8008fa0:	40014800 	.word	0x40014800
 8008fa4:	40001800 	.word	0x40001800
 8008fa8:	40001c00 	.word	0x40001c00
 8008fac:	40002000 	.word	0x40002000

08008fb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b087      	sub	sp, #28
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a1b      	ldr	r3, [r3, #32]
 8008fbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6a1b      	ldr	r3, [r3, #32]
 8008fc4:	f023 0201 	bic.w	r2, r3, #1
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	699b      	ldr	r3, [r3, #24]
 8008fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f023 0303 	bic.w	r3, r3, #3
 8008fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	f023 0302 	bic.w	r3, r3, #2
 8008ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	4313      	orrs	r3, r2
 8009002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a20      	ldr	r2, [pc, #128]	@ (8009088 <TIM_OC1_SetConfig+0xd8>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d003      	beq.n	8009014 <TIM_OC1_SetConfig+0x64>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a1f      	ldr	r2, [pc, #124]	@ (800908c <TIM_OC1_SetConfig+0xdc>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d10c      	bne.n	800902e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	f023 0308 	bic.w	r3, r3, #8
 800901a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	697a      	ldr	r2, [r7, #20]
 8009022:	4313      	orrs	r3, r2
 8009024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f023 0304 	bic.w	r3, r3, #4
 800902c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4a15      	ldr	r2, [pc, #84]	@ (8009088 <TIM_OC1_SetConfig+0xd8>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d003      	beq.n	800903e <TIM_OC1_SetConfig+0x8e>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a14      	ldr	r2, [pc, #80]	@ (800908c <TIM_OC1_SetConfig+0xdc>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d111      	bne.n	8009062 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800904c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	695b      	ldr	r3, [r3, #20]
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	4313      	orrs	r3, r2
 8009056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	4313      	orrs	r3, r2
 8009060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	685a      	ldr	r2, [r3, #4]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	621a      	str	r2, [r3, #32]
}
 800907c:	bf00      	nop
 800907e:	371c      	adds	r7, #28
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	40010000 	.word	0x40010000
 800908c:	40010400 	.word	0x40010400

08009090 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009090:	b480      	push	{r7}
 8009092:	b087      	sub	sp, #28
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a1b      	ldr	r3, [r3, #32]
 800909e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6a1b      	ldr	r3, [r3, #32]
 80090a4:	f023 0210 	bic.w	r2, r3, #16
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	699b      	ldr	r3, [r3, #24]
 80090b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	021b      	lsls	r3, r3, #8
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	f023 0320 	bic.w	r3, r3, #32
 80090da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	011b      	lsls	r3, r3, #4
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a22      	ldr	r2, [pc, #136]	@ (8009174 <TIM_OC2_SetConfig+0xe4>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d003      	beq.n	80090f8 <TIM_OC2_SetConfig+0x68>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a21      	ldr	r2, [pc, #132]	@ (8009178 <TIM_OC2_SetConfig+0xe8>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d10d      	bne.n	8009114 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	011b      	lsls	r3, r3, #4
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	4313      	orrs	r3, r2
 800910a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009112:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a17      	ldr	r2, [pc, #92]	@ (8009174 <TIM_OC2_SetConfig+0xe4>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d003      	beq.n	8009124 <TIM_OC2_SetConfig+0x94>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a16      	ldr	r2, [pc, #88]	@ (8009178 <TIM_OC2_SetConfig+0xe8>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d113      	bne.n	800914c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800912a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009132:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	695b      	ldr	r3, [r3, #20]
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	693a      	ldr	r2, [r7, #16]
 800913c:	4313      	orrs	r3, r2
 800913e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	699b      	ldr	r3, [r3, #24]
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	693a      	ldr	r2, [r7, #16]
 8009148:	4313      	orrs	r3, r2
 800914a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	693a      	ldr	r2, [r7, #16]
 8009150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	685a      	ldr	r2, [r3, #4]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	621a      	str	r2, [r3, #32]
}
 8009166:	bf00      	nop
 8009168:	371c      	adds	r7, #28
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	40010000 	.word	0x40010000
 8009178:	40010400 	.word	0x40010400

0800917c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800917c:	b480      	push	{r7}
 800917e:	b087      	sub	sp, #28
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a1b      	ldr	r3, [r3, #32]
 800918a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a1b      	ldr	r3, [r3, #32]
 8009190:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	69db      	ldr	r3, [r3, #28]
 80091a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f023 0303 	bic.w	r3, r3, #3
 80091b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80091c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	021b      	lsls	r3, r3, #8
 80091cc:	697a      	ldr	r2, [r7, #20]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a21      	ldr	r2, [pc, #132]	@ (800925c <TIM_OC3_SetConfig+0xe0>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d003      	beq.n	80091e2 <TIM_OC3_SetConfig+0x66>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a20      	ldr	r2, [pc, #128]	@ (8009260 <TIM_OC3_SetConfig+0xe4>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d10d      	bne.n	80091fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80091e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	021b      	lsls	r3, r3, #8
 80091f0:	697a      	ldr	r2, [r7, #20]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80091fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a16      	ldr	r2, [pc, #88]	@ (800925c <TIM_OC3_SetConfig+0xe0>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d003      	beq.n	800920e <TIM_OC3_SetConfig+0x92>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a15      	ldr	r2, [pc, #84]	@ (8009260 <TIM_OC3_SetConfig+0xe4>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d113      	bne.n	8009236 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800921c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	011b      	lsls	r3, r3, #4
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	4313      	orrs	r3, r2
 8009228:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	011b      	lsls	r3, r3, #4
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	4313      	orrs	r3, r2
 8009234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	621a      	str	r2, [r3, #32]
}
 8009250:	bf00      	nop
 8009252:	371c      	adds	r7, #28
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr
 800925c:	40010000 	.word	0x40010000
 8009260:	40010400 	.word	0x40010400

08009264 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009264:	b480      	push	{r7}
 8009266:	b087      	sub	sp, #28
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a1b      	ldr	r3, [r3, #32]
 8009278:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	69db      	ldr	r3, [r3, #28]
 800928a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800929a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	021b      	lsls	r3, r3, #8
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	4313      	orrs	r3, r2
 80092a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80092ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	031b      	lsls	r3, r3, #12
 80092b6:	693a      	ldr	r2, [r7, #16]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a12      	ldr	r2, [pc, #72]	@ (8009308 <TIM_OC4_SetConfig+0xa4>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d003      	beq.n	80092cc <TIM_OC4_SetConfig+0x68>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a11      	ldr	r2, [pc, #68]	@ (800930c <TIM_OC4_SetConfig+0xa8>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d109      	bne.n	80092e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	695b      	ldr	r3, [r3, #20]
 80092d8:	019b      	lsls	r3, r3, #6
 80092da:	697a      	ldr	r2, [r7, #20]
 80092dc:	4313      	orrs	r3, r2
 80092de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	697a      	ldr	r2, [r7, #20]
 80092e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	685a      	ldr	r2, [r3, #4]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	693a      	ldr	r2, [r7, #16]
 80092f8:	621a      	str	r2, [r3, #32]
}
 80092fa:	bf00      	nop
 80092fc:	371c      	adds	r7, #28
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	40010000 	.word	0x40010000
 800930c:	40010400 	.word	0x40010400

08009310 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009310:	b480      	push	{r7}
 8009312:	b087      	sub	sp, #28
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6a1b      	ldr	r3, [r3, #32]
 8009320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	f023 0201 	bic.w	r2, r3, #1
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800933a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	011b      	lsls	r3, r3, #4
 8009340:	693a      	ldr	r2, [r7, #16]
 8009342:	4313      	orrs	r3, r2
 8009344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f023 030a 	bic.w	r3, r3, #10
 800934c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800934e:	697a      	ldr	r2, [r7, #20]
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	4313      	orrs	r3, r2
 8009354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	697a      	ldr	r2, [r7, #20]
 8009360:	621a      	str	r2, [r3, #32]
}
 8009362:	bf00      	nop
 8009364:	371c      	adds	r7, #28
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800936e:	b480      	push	{r7}
 8009370:	b087      	sub	sp, #28
 8009372:	af00      	add	r7, sp, #0
 8009374:	60f8      	str	r0, [r7, #12]
 8009376:	60b9      	str	r1, [r7, #8]
 8009378:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6a1b      	ldr	r3, [r3, #32]
 800937e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6a1b      	ldr	r3, [r3, #32]
 8009384:	f023 0210 	bic.w	r2, r3, #16
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	699b      	ldr	r3, [r3, #24]
 8009390:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009398:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	031b      	lsls	r3, r3, #12
 800939e:	693a      	ldr	r2, [r7, #16]
 80093a0:	4313      	orrs	r3, r2
 80093a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80093aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	011b      	lsls	r3, r3, #4
 80093b0:	697a      	ldr	r2, [r7, #20]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	693a      	ldr	r2, [r7, #16]
 80093ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	697a      	ldr	r2, [r7, #20]
 80093c0:	621a      	str	r2, [r3, #32]
}
 80093c2:	bf00      	nop
 80093c4:	371c      	adds	r7, #28
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr

080093ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093ce:	b480      	push	{r7}
 80093d0:	b085      	sub	sp, #20
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	f043 0307 	orr.w	r3, r3, #7
 80093f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	609a      	str	r2, [r3, #8]
}
 80093f8:	bf00      	nop
 80093fa:	3714      	adds	r7, #20
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009404:	b480      	push	{r7}
 8009406:	b087      	sub	sp, #28
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
 8009410:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800941e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	021a      	lsls	r2, r3, #8
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	431a      	orrs	r2, r3
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	4313      	orrs	r3, r2
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	4313      	orrs	r3, r2
 8009430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	609a      	str	r2, [r3, #8]
}
 8009438:	bf00      	nop
 800943a:	371c      	adds	r7, #28
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009444:	b480      	push	{r7}
 8009446:	b087      	sub	sp, #28
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	f003 031f 	and.w	r3, r3, #31
 8009456:	2201      	movs	r2, #1
 8009458:	fa02 f303 	lsl.w	r3, r2, r3
 800945c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6a1a      	ldr	r2, [r3, #32]
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	43db      	mvns	r3, r3
 8009466:	401a      	ands	r2, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6a1a      	ldr	r2, [r3, #32]
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	f003 031f 	and.w	r3, r3, #31
 8009476:	6879      	ldr	r1, [r7, #4]
 8009478:	fa01 f303 	lsl.w	r3, r1, r3
 800947c:	431a      	orrs	r2, r3
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	621a      	str	r2, [r3, #32]
}
 8009482:	bf00      	nop
 8009484:	371c      	adds	r7, #28
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
	...

08009490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d101      	bne.n	80094a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094a4:	2302      	movs	r3, #2
 80094a6:	e05a      	b.n	800955e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2202      	movs	r2, #2
 80094b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a21      	ldr	r2, [pc, #132]	@ (800956c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d022      	beq.n	8009532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094f4:	d01d      	beq.n	8009532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a1d      	ldr	r2, [pc, #116]	@ (8009570 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d018      	beq.n	8009532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a1b      	ldr	r2, [pc, #108]	@ (8009574 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d013      	beq.n	8009532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a1a      	ldr	r2, [pc, #104]	@ (8009578 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d00e      	beq.n	8009532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a18      	ldr	r2, [pc, #96]	@ (800957c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d009      	beq.n	8009532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a17      	ldr	r2, [pc, #92]	@ (8009580 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d004      	beq.n	8009532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a15      	ldr	r2, [pc, #84]	@ (8009584 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d10c      	bne.n	800954c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009538:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	68ba      	ldr	r2, [r7, #8]
 8009540:	4313      	orrs	r3, r2
 8009542:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	68ba      	ldr	r2, [r7, #8]
 800954a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	40010000 	.word	0x40010000
 8009570:	40000400 	.word	0x40000400
 8009574:	40000800 	.word	0x40000800
 8009578:	40000c00 	.word	0x40000c00
 800957c:	40010400 	.word	0x40010400
 8009580:	40014000 	.word	0x40014000
 8009584:	40001800 	.word	0x40001800

08009588 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d101      	bne.n	800959a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e042      	b.n	8009620 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d106      	bne.n	80095b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f7fa fe5e 	bl	8004270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2224      	movs	r2, #36	@ 0x24
 80095b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68da      	ldr	r2, [r3, #12]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80095ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fdff 	bl	800a1d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	691a      	ldr	r2, [r3, #16]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80095e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	695a      	ldr	r2, [r3, #20]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80095f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68da      	ldr	r2, [r3, #12]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009600:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2220      	movs	r2, #32
 800960c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2220      	movs	r2, #32
 8009614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b08a      	sub	sp, #40	@ 0x28
 800962c:	af02      	add	r7, sp, #8
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	603b      	str	r3, [r7, #0]
 8009634:	4613      	mov	r3, r2
 8009636:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009638:	2300      	movs	r3, #0
 800963a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009642:	b2db      	uxtb	r3, r3
 8009644:	2b20      	cmp	r3, #32
 8009646:	d175      	bne.n	8009734 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d002      	beq.n	8009654 <HAL_UART_Transmit+0x2c>
 800964e:	88fb      	ldrh	r3, [r7, #6]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d101      	bne.n	8009658 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	e06e      	b.n	8009736 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2200      	movs	r2, #0
 800965c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2221      	movs	r2, #33	@ 0x21
 8009662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009666:	f7fb f825 	bl	80046b4 <HAL_GetTick>
 800966a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	88fa      	ldrh	r2, [r7, #6]
 8009670:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	88fa      	ldrh	r2, [r7, #6]
 8009676:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009680:	d108      	bne.n	8009694 <HAL_UART_Transmit+0x6c>
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	691b      	ldr	r3, [r3, #16]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d104      	bne.n	8009694 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800968a:	2300      	movs	r3, #0
 800968c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	61bb      	str	r3, [r7, #24]
 8009692:	e003      	b.n	800969c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009698:	2300      	movs	r3, #0
 800969a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800969c:	e02e      	b.n	80096fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	9300      	str	r3, [sp, #0]
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	2200      	movs	r2, #0
 80096a6:	2180      	movs	r1, #128	@ 0x80
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f000 fb9b 	bl	8009de4 <UART_WaitOnFlagUntilTimeout>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d005      	beq.n	80096c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2220      	movs	r2, #32
 80096b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80096bc:	2303      	movs	r3, #3
 80096be:	e03a      	b.n	8009736 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d10b      	bne.n	80096de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	881b      	ldrh	r3, [r3, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	3302      	adds	r3, #2
 80096da:	61bb      	str	r3, [r7, #24]
 80096dc:	e007      	b.n	80096ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	781a      	ldrb	r2, [r3, #0]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	3301      	adds	r3, #1
 80096ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	3b01      	subs	r3, #1
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009700:	b29b      	uxth	r3, r3
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1cb      	bne.n	800969e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	9300      	str	r3, [sp, #0]
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	2200      	movs	r2, #0
 800970e:	2140      	movs	r1, #64	@ 0x40
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f000 fb67 	bl	8009de4 <UART_WaitOnFlagUntilTimeout>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d005      	beq.n	8009728 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2220      	movs	r2, #32
 8009720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009724:	2303      	movs	r3, #3
 8009726:	e006      	b.n	8009736 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2220      	movs	r2, #32
 800972c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009730:	2300      	movs	r3, #0
 8009732:	e000      	b.n	8009736 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009734:	2302      	movs	r3, #2
  }
}
 8009736:	4618      	mov	r0, r3
 8009738:	3720      	adds	r7, #32
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b08a      	sub	sp, #40	@ 0x28
 8009742:	af02      	add	r7, sp, #8
 8009744:	60f8      	str	r0, [r7, #12]
 8009746:	60b9      	str	r1, [r7, #8]
 8009748:	603b      	str	r3, [r7, #0]
 800974a:	4613      	mov	r3, r2
 800974c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800974e:	2300      	movs	r3, #0
 8009750:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009758:	b2db      	uxtb	r3, r3
 800975a:	2b20      	cmp	r3, #32
 800975c:	f040 8081 	bne.w	8009862 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d002      	beq.n	800976c <HAL_UART_Receive+0x2e>
 8009766:	88fb      	ldrh	r3, [r7, #6]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e079      	b.n	8009864 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2222      	movs	r2, #34	@ 0x22
 800977a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2200      	movs	r2, #0
 8009782:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009784:	f7fa ff96 	bl	80046b4 <HAL_GetTick>
 8009788:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	88fa      	ldrh	r2, [r7, #6]
 800978e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	88fa      	ldrh	r2, [r7, #6]
 8009794:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800979e:	d108      	bne.n	80097b2 <HAL_UART_Receive+0x74>
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d104      	bne.n	80097b2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80097a8:	2300      	movs	r3, #0
 80097aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	61bb      	str	r3, [r7, #24]
 80097b0:	e003      	b.n	80097ba <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097b6:	2300      	movs	r3, #0
 80097b8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80097ba:	e047      	b.n	800984c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	2200      	movs	r2, #0
 80097c4:	2120      	movs	r1, #32
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f000 fb0c 	bl	8009de4 <UART_WaitOnFlagUntilTimeout>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d005      	beq.n	80097de <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2220      	movs	r2, #32
 80097d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80097da:	2303      	movs	r3, #3
 80097dc:	e042      	b.n	8009864 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10c      	bne.n	80097fe <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	3302      	adds	r3, #2
 80097fa:	61bb      	str	r3, [r7, #24]
 80097fc:	e01f      	b.n	800983e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009806:	d007      	beq.n	8009818 <HAL_UART_Receive+0xda>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10a      	bne.n	8009826 <HAL_UART_Receive+0xe8>
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d106      	bne.n	8009826 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	b2da      	uxtb	r2, r3
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	701a      	strb	r2, [r3, #0]
 8009824:	e008      	b.n	8009838 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	b2db      	uxtb	r3, r3
 800982e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009832:	b2da      	uxtb	r2, r3
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	3301      	adds	r3, #1
 800983c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009842:	b29b      	uxth	r3, r3
 8009844:	3b01      	subs	r3, #1
 8009846:	b29a      	uxth	r2, r3
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009850:	b29b      	uxth	r3, r3
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1b2      	bne.n	80097bc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2220      	movs	r2, #32
 800985a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	e000      	b.n	8009864 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009862:	2302      	movs	r3, #2
  }
}
 8009864:	4618      	mov	r0, r3
 8009866:	3720      	adds	r7, #32
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b0ba      	sub	sp, #232	@ 0xe8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	695b      	ldr	r3, [r3, #20]
 800988e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009892:	2300      	movs	r3, #0
 8009894:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009898:	2300      	movs	r3, #0
 800989a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800989e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098a2:	f003 030f 	and.w	r3, r3, #15
 80098a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80098aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10f      	bne.n	80098d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80098b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098b6:	f003 0320 	and.w	r3, r3, #32
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d009      	beq.n	80098d2 <HAL_UART_IRQHandler+0x66>
 80098be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098c2:	f003 0320 	and.w	r3, r3, #32
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fbc2 	bl	800a054 <UART_Receive_IT>
      return;
 80098d0:	e25b      	b.n	8009d8a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80098d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f000 80de 	beq.w	8009a98 <HAL_UART_IRQHandler+0x22c>
 80098dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098e0:	f003 0301 	and.w	r3, r3, #1
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d106      	bne.n	80098f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80098e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f000 80d1 	beq.w	8009a98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80098f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098fa:	f003 0301 	and.w	r3, r3, #1
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00b      	beq.n	800991a <HAL_UART_IRQHandler+0xae>
 8009902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800990a:	2b00      	cmp	r3, #0
 800990c:	d005      	beq.n	800991a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009912:	f043 0201 	orr.w	r2, r3, #1
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800991a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800991e:	f003 0304 	and.w	r3, r3, #4
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00b      	beq.n	800993e <HAL_UART_IRQHandler+0xd2>
 8009926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800992a:	f003 0301 	and.w	r3, r3, #1
 800992e:	2b00      	cmp	r3, #0
 8009930:	d005      	beq.n	800993e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009936:	f043 0202 	orr.w	r2, r3, #2
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800993e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009942:	f003 0302 	and.w	r3, r3, #2
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00b      	beq.n	8009962 <HAL_UART_IRQHandler+0xf6>
 800994a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800994e:	f003 0301 	and.w	r3, r3, #1
 8009952:	2b00      	cmp	r3, #0
 8009954:	d005      	beq.n	8009962 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800995a:	f043 0204 	orr.w	r2, r3, #4
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009966:	f003 0308 	and.w	r3, r3, #8
 800996a:	2b00      	cmp	r3, #0
 800996c:	d011      	beq.n	8009992 <HAL_UART_IRQHandler+0x126>
 800996e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009972:	f003 0320 	and.w	r3, r3, #32
 8009976:	2b00      	cmp	r3, #0
 8009978:	d105      	bne.n	8009986 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800997a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800997e:	f003 0301 	and.w	r3, r3, #1
 8009982:	2b00      	cmp	r3, #0
 8009984:	d005      	beq.n	8009992 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800998a:	f043 0208 	orr.w	r2, r3, #8
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009996:	2b00      	cmp	r3, #0
 8009998:	f000 81f2 	beq.w	8009d80 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800999c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099a0:	f003 0320 	and.w	r3, r3, #32
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d008      	beq.n	80099ba <HAL_UART_IRQHandler+0x14e>
 80099a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099ac:	f003 0320 	and.w	r3, r3, #32
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fb4d 	bl	800a054 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	695b      	ldr	r3, [r3, #20]
 80099c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099c4:	2b40      	cmp	r3, #64	@ 0x40
 80099c6:	bf0c      	ite	eq
 80099c8:	2301      	moveq	r3, #1
 80099ca:	2300      	movne	r3, #0
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099d6:	f003 0308 	and.w	r3, r3, #8
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d103      	bne.n	80099e6 <HAL_UART_IRQHandler+0x17a>
 80099de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d04f      	beq.n	8009a86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 fa55 	bl	8009e96 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	695b      	ldr	r3, [r3, #20]
 80099f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099f6:	2b40      	cmp	r3, #64	@ 0x40
 80099f8:	d141      	bne.n	8009a7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	3314      	adds	r3, #20
 8009a00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009a08:	e853 3f00 	ldrex	r3, [r3]
 8009a0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009a10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	3314      	adds	r3, #20
 8009a22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009a26:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009a2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009a32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009a36:	e841 2300 	strex	r3, r2, [r1]
 8009a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009a3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1d9      	bne.n	80099fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d013      	beq.n	8009a76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a52:	4a7e      	ldr	r2, [pc, #504]	@ (8009c4c <HAL_UART_IRQHandler+0x3e0>)
 8009a54:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fa ffdb 	bl	8004a16 <HAL_DMA_Abort_IT>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d016      	beq.n	8009a94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009a70:	4610      	mov	r0, r2
 8009a72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a74:	e00e      	b.n	8009a94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 f99e 	bl	8009db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a7c:	e00a      	b.n	8009a94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 f99a 	bl	8009db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a84:	e006      	b.n	8009a94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f996 	bl	8009db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009a92:	e175      	b.n	8009d80 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a94:	bf00      	nop
    return;
 8009a96:	e173      	b.n	8009d80 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	f040 814f 	bne.w	8009d40 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009aa6:	f003 0310 	and.w	r3, r3, #16
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f000 8148 	beq.w	8009d40 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ab4:	f003 0310 	and.w	r3, r3, #16
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f000 8141 	beq.w	8009d40 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009abe:	2300      	movs	r3, #0
 8009ac0:	60bb      	str	r3, [r7, #8]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	60bb      	str	r3, [r7, #8]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	60bb      	str	r3, [r7, #8]
 8009ad2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	695b      	ldr	r3, [r3, #20]
 8009ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ade:	2b40      	cmp	r3, #64	@ 0x40
 8009ae0:	f040 80b6 	bne.w	8009c50 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009af0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f000 8145 	beq.w	8009d84 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009afe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b02:	429a      	cmp	r2, r3
 8009b04:	f080 813e 	bcs.w	8009d84 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b0e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b14:	69db      	ldr	r3, [r3, #28]
 8009b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b1a:	f000 8088 	beq.w	8009c2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	330c      	adds	r3, #12
 8009b24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b2c:	e853 3f00 	ldrex	r3, [r3]
 8009b30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009b34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	330c      	adds	r3, #12
 8009b46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009b4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009b4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b52:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009b56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009b5a:	e841 2300 	strex	r3, r2, [r1]
 8009b5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009b62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1d9      	bne.n	8009b1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	3314      	adds	r3, #20
 8009b70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b74:	e853 3f00 	ldrex	r3, [r3]
 8009b78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009b7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b7c:	f023 0301 	bic.w	r3, r3, #1
 8009b80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	3314      	adds	r3, #20
 8009b8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009b8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009b92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009b96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009b9a:	e841 2300 	strex	r3, r2, [r1]
 8009b9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009ba0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1e1      	bne.n	8009b6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	3314      	adds	r3, #20
 8009bac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009bb0:	e853 3f00 	ldrex	r3, [r3]
 8009bb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009bb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	3314      	adds	r3, #20
 8009bc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009bca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009bcc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009bd0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009bd2:	e841 2300 	strex	r3, r2, [r1]
 8009bd6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009bd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1e3      	bne.n	8009ba6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2220      	movs	r2, #32
 8009be2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	330c      	adds	r3, #12
 8009bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bf6:	e853 3f00 	ldrex	r3, [r3]
 8009bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009bfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bfe:	f023 0310 	bic.w	r3, r3, #16
 8009c02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	330c      	adds	r3, #12
 8009c0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009c10:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009c12:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c18:	e841 2300 	strex	r3, r2, [r1]
 8009c1c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009c1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1e3      	bne.n	8009bec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7fa fe84 	bl	8004936 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2202      	movs	r2, #2
 8009c32:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	1ad3      	subs	r3, r2, r3
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	4619      	mov	r1, r3
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 f8c1 	bl	8009dcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009c4a:	e09b      	b.n	8009d84 <HAL_UART_IRQHandler+0x518>
 8009c4c:	08009f5d 	.word	0x08009f5d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f000 808e 	beq.w	8009d88 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009c6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f000 8089 	beq.w	8009d88 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	330c      	adds	r3, #12
 8009c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c80:	e853 3f00 	ldrex	r3, [r3]
 8009c84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	330c      	adds	r3, #12
 8009c96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009c9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8009c9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ca0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ca2:	e841 2300 	strex	r3, r2, [r1]
 8009ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1e3      	bne.n	8009c76 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	3314      	adds	r3, #20
 8009cb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb8:	e853 3f00 	ldrex	r3, [r3]
 8009cbc:	623b      	str	r3, [r7, #32]
   return(result);
 8009cbe:	6a3b      	ldr	r3, [r7, #32]
 8009cc0:	f023 0301 	bic.w	r3, r3, #1
 8009cc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	3314      	adds	r3, #20
 8009cce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009cd2:	633a      	str	r2, [r7, #48]	@ 0x30
 8009cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cda:	e841 2300 	strex	r3, r2, [r1]
 8009cde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1e3      	bne.n	8009cae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2220      	movs	r2, #32
 8009cea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	330c      	adds	r3, #12
 8009cfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	e853 3f00 	ldrex	r3, [r3]
 8009d02:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f023 0310 	bic.w	r3, r3, #16
 8009d0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	330c      	adds	r3, #12
 8009d14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009d18:	61fa      	str	r2, [r7, #28]
 8009d1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1c:	69b9      	ldr	r1, [r7, #24]
 8009d1e:	69fa      	ldr	r2, [r7, #28]
 8009d20:	e841 2300 	strex	r3, r2, [r1]
 8009d24:	617b      	str	r3, [r7, #20]
   return(result);
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1e3      	bne.n	8009cf4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2202      	movs	r2, #2
 8009d30:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 f847 	bl	8009dcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009d3e:	e023      	b.n	8009d88 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d009      	beq.n	8009d60 <HAL_UART_IRQHandler+0x4f4>
 8009d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d003      	beq.n	8009d60 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 f913 	bl	8009f84 <UART_Transmit_IT>
    return;
 8009d5e:	e014      	b.n	8009d8a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00e      	beq.n	8009d8a <HAL_UART_IRQHandler+0x51e>
 8009d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d008      	beq.n	8009d8a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 f953 	bl	800a024 <UART_EndTransmit_IT>
    return;
 8009d7e:	e004      	b.n	8009d8a <HAL_UART_IRQHandler+0x51e>
    return;
 8009d80:	bf00      	nop
 8009d82:	e002      	b.n	8009d8a <HAL_UART_IRQHandler+0x51e>
      return;
 8009d84:	bf00      	nop
 8009d86:	e000      	b.n	8009d8a <HAL_UART_IRQHandler+0x51e>
      return;
 8009d88:	bf00      	nop
  }
}
 8009d8a:	37e8      	adds	r7, #232	@ 0xe8
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009dac:	bf00      	nop
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009dd8:	bf00      	nop
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b086      	sub	sp, #24
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	603b      	str	r3, [r7, #0]
 8009df0:	4613      	mov	r3, r2
 8009df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009df4:	e03b      	b.n	8009e6e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009df6:	6a3b      	ldr	r3, [r7, #32]
 8009df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dfc:	d037      	beq.n	8009e6e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dfe:	f7fa fc59 	bl	80046b4 <HAL_GetTick>
 8009e02:	4602      	mov	r2, r0
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	6a3a      	ldr	r2, [r7, #32]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d302      	bcc.n	8009e14 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e0e:	6a3b      	ldr	r3, [r7, #32]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d101      	bne.n	8009e18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e14:	2303      	movs	r3, #3
 8009e16:	e03a      	b.n	8009e8e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	f003 0304 	and.w	r3, r3, #4
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d023      	beq.n	8009e6e <UART_WaitOnFlagUntilTimeout+0x8a>
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	2b80      	cmp	r3, #128	@ 0x80
 8009e2a:	d020      	beq.n	8009e6e <UART_WaitOnFlagUntilTimeout+0x8a>
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	2b40      	cmp	r3, #64	@ 0x40
 8009e30:	d01d      	beq.n	8009e6e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 0308 	and.w	r3, r3, #8
 8009e3c:	2b08      	cmp	r3, #8
 8009e3e:	d116      	bne.n	8009e6e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009e40:	2300      	movs	r3, #0
 8009e42:	617b      	str	r3, [r7, #20]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	617b      	str	r3, [r7, #20]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	617b      	str	r3, [r7, #20]
 8009e54:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	f000 f81d 	bl	8009e96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2208      	movs	r2, #8
 8009e60:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2200      	movs	r2, #0
 8009e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e00f      	b.n	8009e8e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	4013      	ands	r3, r2
 8009e78:	68ba      	ldr	r2, [r7, #8]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	bf0c      	ite	eq
 8009e7e:	2301      	moveq	r3, #1
 8009e80:	2300      	movne	r3, #0
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	461a      	mov	r2, r3
 8009e86:	79fb      	ldrb	r3, [r7, #7]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d0b4      	beq.n	8009df6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3718      	adds	r7, #24
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e96:	b480      	push	{r7}
 8009e98:	b095      	sub	sp, #84	@ 0x54
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	330c      	adds	r3, #12
 8009ea4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ea8:	e853 3f00 	ldrex	r3, [r3]
 8009eac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	330c      	adds	r3, #12
 8009ebc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009ebe:	643a      	str	r2, [r7, #64]	@ 0x40
 8009ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ec4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ec6:	e841 2300 	strex	r3, r2, [r1]
 8009eca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1e5      	bne.n	8009e9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	3314      	adds	r3, #20
 8009ed8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	e853 3f00 	ldrex	r3, [r3]
 8009ee0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ee2:	69fb      	ldr	r3, [r7, #28]
 8009ee4:	f023 0301 	bic.w	r3, r3, #1
 8009ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	3314      	adds	r3, #20
 8009ef0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ef2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ef8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009efa:	e841 2300 	strex	r3, r2, [r1]
 8009efe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1e5      	bne.n	8009ed2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d119      	bne.n	8009f42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	330c      	adds	r3, #12
 8009f14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	e853 3f00 	ldrex	r3, [r3]
 8009f1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	f023 0310 	bic.w	r3, r3, #16
 8009f24:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	330c      	adds	r3, #12
 8009f2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f2e:	61ba      	str	r2, [r7, #24]
 8009f30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f32:	6979      	ldr	r1, [r7, #20]
 8009f34:	69ba      	ldr	r2, [r7, #24]
 8009f36:	e841 2300 	strex	r3, r2, [r1]
 8009f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1e5      	bne.n	8009f0e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2220      	movs	r2, #32
 8009f46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009f50:	bf00      	nop
 8009f52:	3754      	adds	r7, #84	@ 0x54
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f7ff ff1e 	bl	8009db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f7c:	bf00      	nop
 8009f7e:	3710      	adds	r7, #16
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	2b21      	cmp	r3, #33	@ 0x21
 8009f96:	d13e      	bne.n	800a016 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fa0:	d114      	bne.n	8009fcc <UART_Transmit_IT+0x48>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d110      	bne.n	8009fcc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a1b      	ldr	r3, [r3, #32]
 8009fae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	881b      	ldrh	r3, [r3, #0]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009fbe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a1b      	ldr	r3, [r3, #32]
 8009fc4:	1c9a      	adds	r2, r3, #2
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	621a      	str	r2, [r3, #32]
 8009fca:	e008      	b.n	8009fde <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6a1b      	ldr	r3, [r3, #32]
 8009fd0:	1c59      	adds	r1, r3, #1
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	6211      	str	r1, [r2, #32]
 8009fd6:	781a      	ldrb	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	4619      	mov	r1, r3
 8009fec:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d10f      	bne.n	800a012 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68da      	ldr	r2, [r3, #12]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a000:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68da      	ldr	r2, [r3, #12]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a010:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a012:	2300      	movs	r3, #0
 800a014:	e000      	b.n	800a018 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a016:	2302      	movs	r3, #2
  }
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3714      	adds	r7, #20
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68da      	ldr	r2, [r3, #12]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a03a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2220      	movs	r2, #32
 800a040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f7ff fea3 	bl	8009d90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b08c      	sub	sp, #48	@ 0x30
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a062:	b2db      	uxtb	r3, r3
 800a064:	2b22      	cmp	r3, #34	@ 0x22
 800a066:	f040 80ae 	bne.w	800a1c6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a072:	d117      	bne.n	800a0a4 <UART_Receive_IT+0x50>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d113      	bne.n	800a0a4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a07c:	2300      	movs	r3, #0
 800a07e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a084:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a092:	b29a      	uxth	r2, r3
 800a094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a096:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a09c:	1c9a      	adds	r2, r3, #2
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	629a      	str	r2, [r3, #40]	@ 0x28
 800a0a2:	e026      	b.n	800a0f2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0b6:	d007      	beq.n	800a0c8 <UART_Receive_IT+0x74>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10a      	bne.n	800a0d6 <UART_Receive_IT+0x82>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d106      	bne.n	800a0d6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	b2da      	uxtb	r2, r3
 800a0d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0d2:	701a      	strb	r2, [r3, #0]
 800a0d4:	e008      	b.n	800a0e8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0e2:	b2da      	uxtb	r2, r3
 800a0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ec:	1c5a      	adds	r2, r3, #1
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	4619      	mov	r1, r3
 800a100:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a102:	2b00      	cmp	r3, #0
 800a104:	d15d      	bne.n	800a1c2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	68da      	ldr	r2, [r3, #12]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f022 0220 	bic.w	r2, r2, #32
 800a114:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	68da      	ldr	r2, [r3, #12]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a124:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	695a      	ldr	r2, [r3, #20]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f022 0201 	bic.w	r2, r2, #1
 800a134:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2220      	movs	r2, #32
 800a13a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d135      	bne.n	800a1b8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	330c      	adds	r3, #12
 800a158:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	e853 3f00 	ldrex	r3, [r3]
 800a160:	613b      	str	r3, [r7, #16]
   return(result);
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	f023 0310 	bic.w	r3, r3, #16
 800a168:	627b      	str	r3, [r7, #36]	@ 0x24
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	330c      	adds	r3, #12
 800a170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a172:	623a      	str	r2, [r7, #32]
 800a174:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a176:	69f9      	ldr	r1, [r7, #28]
 800a178:	6a3a      	ldr	r2, [r7, #32]
 800a17a:	e841 2300 	strex	r3, r2, [r1]
 800a17e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1e5      	bne.n	800a152 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f003 0310 	and.w	r3, r3, #16
 800a190:	2b10      	cmp	r3, #16
 800a192:	d10a      	bne.n	800a1aa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a194:	2300      	movs	r3, #0
 800a196:	60fb      	str	r3, [r7, #12]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	60fb      	str	r3, [r7, #12]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	60fb      	str	r3, [r7, #12]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7ff fe0b 	bl	8009dcc <HAL_UARTEx_RxEventCallback>
 800a1b6:	e002      	b.n	800a1be <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7ff fdf3 	bl	8009da4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	e002      	b.n	800a1c8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	e000      	b.n	800a1c8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a1c6:	2302      	movs	r3, #2
  }
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3730      	adds	r7, #48	@ 0x30
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a1d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a1d4:	b0c0      	sub	sp, #256	@ 0x100
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a1e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1ec:	68d9      	ldr	r1, [r3, #12]
 800a1ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	ea40 0301 	orr.w	r3, r0, r1
 800a1f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a1fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1fe:	689a      	ldr	r2, [r3, #8]
 800a200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	431a      	orrs	r2, r3
 800a208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a20c:	695b      	ldr	r3, [r3, #20]
 800a20e:	431a      	orrs	r2, r3
 800a210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a214:	69db      	ldr	r3, [r3, #28]
 800a216:	4313      	orrs	r3, r2
 800a218:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a21c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a228:	f021 010c 	bic.w	r1, r1, #12
 800a22c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a236:	430b      	orrs	r3, r1
 800a238:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a23a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	695b      	ldr	r3, [r3, #20]
 800a242:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a24a:	6999      	ldr	r1, [r3, #24]
 800a24c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	ea40 0301 	orr.w	r3, r0, r1
 800a256:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	4b8f      	ldr	r3, [pc, #572]	@ (800a49c <UART_SetConfig+0x2cc>)
 800a260:	429a      	cmp	r2, r3
 800a262:	d005      	beq.n	800a270 <UART_SetConfig+0xa0>
 800a264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	4b8d      	ldr	r3, [pc, #564]	@ (800a4a0 <UART_SetConfig+0x2d0>)
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d104      	bne.n	800a27a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a270:	f7fd fdb4 	bl	8007ddc <HAL_RCC_GetPCLK2Freq>
 800a274:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a278:	e003      	b.n	800a282 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a27a:	f7fd fd9b 	bl	8007db4 <HAL_RCC_GetPCLK1Freq>
 800a27e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a286:	69db      	ldr	r3, [r3, #28]
 800a288:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a28c:	f040 810c 	bne.w	800a4a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a294:	2200      	movs	r2, #0
 800a296:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a29a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a29e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a2a2:	4622      	mov	r2, r4
 800a2a4:	462b      	mov	r3, r5
 800a2a6:	1891      	adds	r1, r2, r2
 800a2a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a2aa:	415b      	adcs	r3, r3
 800a2ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a2b2:	4621      	mov	r1, r4
 800a2b4:	eb12 0801 	adds.w	r8, r2, r1
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	eb43 0901 	adc.w	r9, r3, r1
 800a2be:	f04f 0200 	mov.w	r2, #0
 800a2c2:	f04f 0300 	mov.w	r3, #0
 800a2c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a2ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a2ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a2d2:	4690      	mov	r8, r2
 800a2d4:	4699      	mov	r9, r3
 800a2d6:	4623      	mov	r3, r4
 800a2d8:	eb18 0303 	adds.w	r3, r8, r3
 800a2dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a2e0:	462b      	mov	r3, r5
 800a2e2:	eb49 0303 	adc.w	r3, r9, r3
 800a2e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a2ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a2f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a2fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a2fe:	460b      	mov	r3, r1
 800a300:	18db      	adds	r3, r3, r3
 800a302:	653b      	str	r3, [r7, #80]	@ 0x50
 800a304:	4613      	mov	r3, r2
 800a306:	eb42 0303 	adc.w	r3, r2, r3
 800a30a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a30c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a310:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a314:	f7f5 ffc4 	bl	80002a0 <__aeabi_uldivmod>
 800a318:	4602      	mov	r2, r0
 800a31a:	460b      	mov	r3, r1
 800a31c:	4b61      	ldr	r3, [pc, #388]	@ (800a4a4 <UART_SetConfig+0x2d4>)
 800a31e:	fba3 2302 	umull	r2, r3, r3, r2
 800a322:	095b      	lsrs	r3, r3, #5
 800a324:	011c      	lsls	r4, r3, #4
 800a326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a32a:	2200      	movs	r2, #0
 800a32c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a330:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a334:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a338:	4642      	mov	r2, r8
 800a33a:	464b      	mov	r3, r9
 800a33c:	1891      	adds	r1, r2, r2
 800a33e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a340:	415b      	adcs	r3, r3
 800a342:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a344:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a348:	4641      	mov	r1, r8
 800a34a:	eb12 0a01 	adds.w	sl, r2, r1
 800a34e:	4649      	mov	r1, r9
 800a350:	eb43 0b01 	adc.w	fp, r3, r1
 800a354:	f04f 0200 	mov.w	r2, #0
 800a358:	f04f 0300 	mov.w	r3, #0
 800a35c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a360:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a364:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a368:	4692      	mov	sl, r2
 800a36a:	469b      	mov	fp, r3
 800a36c:	4643      	mov	r3, r8
 800a36e:	eb1a 0303 	adds.w	r3, sl, r3
 800a372:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a376:	464b      	mov	r3, r9
 800a378:	eb4b 0303 	adc.w	r3, fp, r3
 800a37c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a38c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a390:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a394:	460b      	mov	r3, r1
 800a396:	18db      	adds	r3, r3, r3
 800a398:	643b      	str	r3, [r7, #64]	@ 0x40
 800a39a:	4613      	mov	r3, r2
 800a39c:	eb42 0303 	adc.w	r3, r2, r3
 800a3a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a3a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a3aa:	f7f5 ff79 	bl	80002a0 <__aeabi_uldivmod>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	4611      	mov	r1, r2
 800a3b4:	4b3b      	ldr	r3, [pc, #236]	@ (800a4a4 <UART_SetConfig+0x2d4>)
 800a3b6:	fba3 2301 	umull	r2, r3, r3, r1
 800a3ba:	095b      	lsrs	r3, r3, #5
 800a3bc:	2264      	movs	r2, #100	@ 0x64
 800a3be:	fb02 f303 	mul.w	r3, r2, r3
 800a3c2:	1acb      	subs	r3, r1, r3
 800a3c4:	00db      	lsls	r3, r3, #3
 800a3c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a3ca:	4b36      	ldr	r3, [pc, #216]	@ (800a4a4 <UART_SetConfig+0x2d4>)
 800a3cc:	fba3 2302 	umull	r2, r3, r3, r2
 800a3d0:	095b      	lsrs	r3, r3, #5
 800a3d2:	005b      	lsls	r3, r3, #1
 800a3d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a3d8:	441c      	add	r4, r3
 800a3da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a3e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a3e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a3ec:	4642      	mov	r2, r8
 800a3ee:	464b      	mov	r3, r9
 800a3f0:	1891      	adds	r1, r2, r2
 800a3f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a3f4:	415b      	adcs	r3, r3
 800a3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a3fc:	4641      	mov	r1, r8
 800a3fe:	1851      	adds	r1, r2, r1
 800a400:	6339      	str	r1, [r7, #48]	@ 0x30
 800a402:	4649      	mov	r1, r9
 800a404:	414b      	adcs	r3, r1
 800a406:	637b      	str	r3, [r7, #52]	@ 0x34
 800a408:	f04f 0200 	mov.w	r2, #0
 800a40c:	f04f 0300 	mov.w	r3, #0
 800a410:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a414:	4659      	mov	r1, fp
 800a416:	00cb      	lsls	r3, r1, #3
 800a418:	4651      	mov	r1, sl
 800a41a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a41e:	4651      	mov	r1, sl
 800a420:	00ca      	lsls	r2, r1, #3
 800a422:	4610      	mov	r0, r2
 800a424:	4619      	mov	r1, r3
 800a426:	4603      	mov	r3, r0
 800a428:	4642      	mov	r2, r8
 800a42a:	189b      	adds	r3, r3, r2
 800a42c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a430:	464b      	mov	r3, r9
 800a432:	460a      	mov	r2, r1
 800a434:	eb42 0303 	adc.w	r3, r2, r3
 800a438:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a43c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a448:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a44c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a450:	460b      	mov	r3, r1
 800a452:	18db      	adds	r3, r3, r3
 800a454:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a456:	4613      	mov	r3, r2
 800a458:	eb42 0303 	adc.w	r3, r2, r3
 800a45c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a45e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a462:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a466:	f7f5 ff1b 	bl	80002a0 <__aeabi_uldivmod>
 800a46a:	4602      	mov	r2, r0
 800a46c:	460b      	mov	r3, r1
 800a46e:	4b0d      	ldr	r3, [pc, #52]	@ (800a4a4 <UART_SetConfig+0x2d4>)
 800a470:	fba3 1302 	umull	r1, r3, r3, r2
 800a474:	095b      	lsrs	r3, r3, #5
 800a476:	2164      	movs	r1, #100	@ 0x64
 800a478:	fb01 f303 	mul.w	r3, r1, r3
 800a47c:	1ad3      	subs	r3, r2, r3
 800a47e:	00db      	lsls	r3, r3, #3
 800a480:	3332      	adds	r3, #50	@ 0x32
 800a482:	4a08      	ldr	r2, [pc, #32]	@ (800a4a4 <UART_SetConfig+0x2d4>)
 800a484:	fba2 2303 	umull	r2, r3, r2, r3
 800a488:	095b      	lsrs	r3, r3, #5
 800a48a:	f003 0207 	and.w	r2, r3, #7
 800a48e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4422      	add	r2, r4
 800a496:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a498:	e106      	b.n	800a6a8 <UART_SetConfig+0x4d8>
 800a49a:	bf00      	nop
 800a49c:	40011000 	.word	0x40011000
 800a4a0:	40011400 	.word	0x40011400
 800a4a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a4a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a4b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a4b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a4ba:	4642      	mov	r2, r8
 800a4bc:	464b      	mov	r3, r9
 800a4be:	1891      	adds	r1, r2, r2
 800a4c0:	6239      	str	r1, [r7, #32]
 800a4c2:	415b      	adcs	r3, r3
 800a4c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a4ca:	4641      	mov	r1, r8
 800a4cc:	1854      	adds	r4, r2, r1
 800a4ce:	4649      	mov	r1, r9
 800a4d0:	eb43 0501 	adc.w	r5, r3, r1
 800a4d4:	f04f 0200 	mov.w	r2, #0
 800a4d8:	f04f 0300 	mov.w	r3, #0
 800a4dc:	00eb      	lsls	r3, r5, #3
 800a4de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a4e2:	00e2      	lsls	r2, r4, #3
 800a4e4:	4614      	mov	r4, r2
 800a4e6:	461d      	mov	r5, r3
 800a4e8:	4643      	mov	r3, r8
 800a4ea:	18e3      	adds	r3, r4, r3
 800a4ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a4f0:	464b      	mov	r3, r9
 800a4f2:	eb45 0303 	adc.w	r3, r5, r3
 800a4f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a4fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a506:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a50a:	f04f 0200 	mov.w	r2, #0
 800a50e:	f04f 0300 	mov.w	r3, #0
 800a512:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a516:	4629      	mov	r1, r5
 800a518:	008b      	lsls	r3, r1, #2
 800a51a:	4621      	mov	r1, r4
 800a51c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a520:	4621      	mov	r1, r4
 800a522:	008a      	lsls	r2, r1, #2
 800a524:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a528:	f7f5 feba 	bl	80002a0 <__aeabi_uldivmod>
 800a52c:	4602      	mov	r2, r0
 800a52e:	460b      	mov	r3, r1
 800a530:	4b60      	ldr	r3, [pc, #384]	@ (800a6b4 <UART_SetConfig+0x4e4>)
 800a532:	fba3 2302 	umull	r2, r3, r3, r2
 800a536:	095b      	lsrs	r3, r3, #5
 800a538:	011c      	lsls	r4, r3, #4
 800a53a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a53e:	2200      	movs	r2, #0
 800a540:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a544:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a548:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a54c:	4642      	mov	r2, r8
 800a54e:	464b      	mov	r3, r9
 800a550:	1891      	adds	r1, r2, r2
 800a552:	61b9      	str	r1, [r7, #24]
 800a554:	415b      	adcs	r3, r3
 800a556:	61fb      	str	r3, [r7, #28]
 800a558:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a55c:	4641      	mov	r1, r8
 800a55e:	1851      	adds	r1, r2, r1
 800a560:	6139      	str	r1, [r7, #16]
 800a562:	4649      	mov	r1, r9
 800a564:	414b      	adcs	r3, r1
 800a566:	617b      	str	r3, [r7, #20]
 800a568:	f04f 0200 	mov.w	r2, #0
 800a56c:	f04f 0300 	mov.w	r3, #0
 800a570:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a574:	4659      	mov	r1, fp
 800a576:	00cb      	lsls	r3, r1, #3
 800a578:	4651      	mov	r1, sl
 800a57a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a57e:	4651      	mov	r1, sl
 800a580:	00ca      	lsls	r2, r1, #3
 800a582:	4610      	mov	r0, r2
 800a584:	4619      	mov	r1, r3
 800a586:	4603      	mov	r3, r0
 800a588:	4642      	mov	r2, r8
 800a58a:	189b      	adds	r3, r3, r2
 800a58c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a590:	464b      	mov	r3, r9
 800a592:	460a      	mov	r2, r1
 800a594:	eb42 0303 	adc.w	r3, r2, r3
 800a598:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a59c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a5a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a5a8:	f04f 0200 	mov.w	r2, #0
 800a5ac:	f04f 0300 	mov.w	r3, #0
 800a5b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a5b4:	4649      	mov	r1, r9
 800a5b6:	008b      	lsls	r3, r1, #2
 800a5b8:	4641      	mov	r1, r8
 800a5ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5be:	4641      	mov	r1, r8
 800a5c0:	008a      	lsls	r2, r1, #2
 800a5c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a5c6:	f7f5 fe6b 	bl	80002a0 <__aeabi_uldivmod>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	4611      	mov	r1, r2
 800a5d0:	4b38      	ldr	r3, [pc, #224]	@ (800a6b4 <UART_SetConfig+0x4e4>)
 800a5d2:	fba3 2301 	umull	r2, r3, r3, r1
 800a5d6:	095b      	lsrs	r3, r3, #5
 800a5d8:	2264      	movs	r2, #100	@ 0x64
 800a5da:	fb02 f303 	mul.w	r3, r2, r3
 800a5de:	1acb      	subs	r3, r1, r3
 800a5e0:	011b      	lsls	r3, r3, #4
 800a5e2:	3332      	adds	r3, #50	@ 0x32
 800a5e4:	4a33      	ldr	r2, [pc, #204]	@ (800a6b4 <UART_SetConfig+0x4e4>)
 800a5e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ea:	095b      	lsrs	r3, r3, #5
 800a5ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a5f0:	441c      	add	r4, r3
 800a5f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	673b      	str	r3, [r7, #112]	@ 0x70
 800a5fa:	677a      	str	r2, [r7, #116]	@ 0x74
 800a5fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a600:	4642      	mov	r2, r8
 800a602:	464b      	mov	r3, r9
 800a604:	1891      	adds	r1, r2, r2
 800a606:	60b9      	str	r1, [r7, #8]
 800a608:	415b      	adcs	r3, r3
 800a60a:	60fb      	str	r3, [r7, #12]
 800a60c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a610:	4641      	mov	r1, r8
 800a612:	1851      	adds	r1, r2, r1
 800a614:	6039      	str	r1, [r7, #0]
 800a616:	4649      	mov	r1, r9
 800a618:	414b      	adcs	r3, r1
 800a61a:	607b      	str	r3, [r7, #4]
 800a61c:	f04f 0200 	mov.w	r2, #0
 800a620:	f04f 0300 	mov.w	r3, #0
 800a624:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a628:	4659      	mov	r1, fp
 800a62a:	00cb      	lsls	r3, r1, #3
 800a62c:	4651      	mov	r1, sl
 800a62e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a632:	4651      	mov	r1, sl
 800a634:	00ca      	lsls	r2, r1, #3
 800a636:	4610      	mov	r0, r2
 800a638:	4619      	mov	r1, r3
 800a63a:	4603      	mov	r3, r0
 800a63c:	4642      	mov	r2, r8
 800a63e:	189b      	adds	r3, r3, r2
 800a640:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a642:	464b      	mov	r3, r9
 800a644:	460a      	mov	r2, r1
 800a646:	eb42 0303 	adc.w	r3, r2, r3
 800a64a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a64c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	663b      	str	r3, [r7, #96]	@ 0x60
 800a656:	667a      	str	r2, [r7, #100]	@ 0x64
 800a658:	f04f 0200 	mov.w	r2, #0
 800a65c:	f04f 0300 	mov.w	r3, #0
 800a660:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a664:	4649      	mov	r1, r9
 800a666:	008b      	lsls	r3, r1, #2
 800a668:	4641      	mov	r1, r8
 800a66a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a66e:	4641      	mov	r1, r8
 800a670:	008a      	lsls	r2, r1, #2
 800a672:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a676:	f7f5 fe13 	bl	80002a0 <__aeabi_uldivmod>
 800a67a:	4602      	mov	r2, r0
 800a67c:	460b      	mov	r3, r1
 800a67e:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b4 <UART_SetConfig+0x4e4>)
 800a680:	fba3 1302 	umull	r1, r3, r3, r2
 800a684:	095b      	lsrs	r3, r3, #5
 800a686:	2164      	movs	r1, #100	@ 0x64
 800a688:	fb01 f303 	mul.w	r3, r1, r3
 800a68c:	1ad3      	subs	r3, r2, r3
 800a68e:	011b      	lsls	r3, r3, #4
 800a690:	3332      	adds	r3, #50	@ 0x32
 800a692:	4a08      	ldr	r2, [pc, #32]	@ (800a6b4 <UART_SetConfig+0x4e4>)
 800a694:	fba2 2303 	umull	r2, r3, r2, r3
 800a698:	095b      	lsrs	r3, r3, #5
 800a69a:	f003 020f 	and.w	r2, r3, #15
 800a69e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4422      	add	r2, r4
 800a6a6:	609a      	str	r2, [r3, #8]
}
 800a6a8:	bf00      	nop
 800a6aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6b4:	51eb851f 	.word	0x51eb851f

0800a6b8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b087      	sub	sp, #28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FMC_BCR1_WFDIS */
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6cc:	683a      	ldr	r2, [r7, #0]
 800a6ce:	6812      	ldr	r2, [r2, #0]
 800a6d0:	f023 0101 	bic.w	r1, r3, #1
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	2b08      	cmp	r3, #8
 800a6e0:	d102      	bne.n	800a6e8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a6e2:	2340      	movs	r3, #64	@ 0x40
 800a6e4:	617b      	str	r3, [r7, #20]
 800a6e6:	e001      	b.n	800a6ec <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800a6f8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800a6fe:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800a704:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800a70a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800a710:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800a716:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 800a71c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800a722:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 800a728:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800a72e:	4313      	orrs	r3, r2
 800a730:	613b      	str	r3, [r7, #16]

#if defined(FMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	699b      	ldr	r3, [r3, #24]
 800a736:	693a      	ldr	r2, [r7, #16]
 800a738:	4313      	orrs	r3, r2
 800a73a:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WRAPMOD */
#if defined(FMC_BCR1_CCLKEN)
  btcr_reg |= Init->ContinuousClock;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	4313      	orrs	r3, r2
 800a744:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_CCLKEN */
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a74a:	693a      	ldr	r2, [r7, #16]
 800a74c:	4313      	orrs	r3, r2
 800a74e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 800a750:	4b1b      	ldr	r3, [pc, #108]	@ (800a7c0 <FMC_NORSRAM_Init+0x108>)
 800a752:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

#if defined(FMC_BCR1_WRAPMOD)
  mask |= FMC_BCR1_WRAPMOD;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a75a:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WRAPMOD */
#if defined(FMC_BCR1_CCLKEN)
  mask |= FMC_BCR1_CCLKEN;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a762:	60fb      	str	r3, [r7, #12]
#endif
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
#endif /* FMC_BCR1_WFDIS */
  mask |= FMC_BCR1_CPSIZE;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800a76a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	43db      	mvns	r3, r3
 800a77a:	ea02 0103 	and.w	r1, r2, r3
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	4319      	orrs	r1, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(FMC_BCR1_CCLKEN)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a790:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a794:	d10c      	bne.n	800a7b0 <FMC_NORSRAM_Init+0xf8>
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d008      	beq.n	800a7b0 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7aa:	431a      	orrs	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	601a      	str	r2, [r3, #0]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FMC_BCR1_WFDIS */

  return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	371c      	adds	r7, #28
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	0008fb7f 	.word	0x0008fb7f

0800a7c4 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b087      	sub	sp, #28
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	60b9      	str	r1, [r7, #8]
 800a7ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	1c5a      	adds	r2, r3, #1
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7da:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	011b      	lsls	r3, r3, #4
 800a7e8:	431a      	orrs	r2, r3
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	021b      	lsls	r3, r3, #8
 800a7f0:	431a      	orrs	r2, r3
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	041b      	lsls	r3, r3, #16
 800a7f8:	431a      	orrs	r2, r3
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	3b01      	subs	r3, #1
 800a800:	051b      	lsls	r3, r3, #20
 800a802:	431a      	orrs	r2, r3
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	695b      	ldr	r3, [r3, #20]
 800a808:	3b02      	subs	r3, #2
 800a80a:	061b      	lsls	r3, r3, #24
 800a80c:	431a      	orrs	r2, r3
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	699b      	ldr	r3, [r3, #24]
 800a812:	4313      	orrs	r3, r2
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	3201      	adds	r2, #1
 800a818:	4319      	orrs	r1, r3
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

#if defined(FMC_BCR1_CCLKEN)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a828:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a82c:	d113      	bne.n	800a856 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a836:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	3b01      	subs	r3, #1
 800a83e:	051b      	lsls	r3, r3, #20
 800a840:	697a      	ldr	r2, [r7, #20]
 800a842:	4313      	orrs	r3, r2
 800a844:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	431a      	orrs	r2, r3
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	605a      	str	r2, [r3, #4]
  }

#endif
  return HAL_OK;
 800a856:	2300      	movs	r3, #0
}
 800a858:	4618      	mov	r0, r3
 800a85a:	371c      	adds	r7, #28
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800a864:	b480      	push	{r7}
 800a866:	b085      	sub	sp, #20
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	607a      	str	r2, [r7, #4]
 800a870:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a878:	d11d      	bne.n	800a8b6 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a882:	4b13      	ldr	r3, [pc, #76]	@ (800a8d0 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800a884:	4013      	ands	r3, r2
 800a886:	68ba      	ldr	r2, [r7, #8]
 800a888:	6811      	ldr	r1, [r2, #0]
 800a88a:	68ba      	ldr	r2, [r7, #8]
 800a88c:	6852      	ldr	r2, [r2, #4]
 800a88e:	0112      	lsls	r2, r2, #4
 800a890:	4311      	orrs	r1, r2
 800a892:	68ba      	ldr	r2, [r7, #8]
 800a894:	6892      	ldr	r2, [r2, #8]
 800a896:	0212      	lsls	r2, r2, #8
 800a898:	4311      	orrs	r1, r2
 800a89a:	68ba      	ldr	r2, [r7, #8]
 800a89c:	6992      	ldr	r2, [r2, #24]
 800a89e:	4311      	orrs	r1, r2
 800a8a0:	68ba      	ldr	r2, [r7, #8]
 800a8a2:	68d2      	ldr	r2, [r2, #12]
 800a8a4:	0412      	lsls	r2, r2, #16
 800a8a6:	430a      	orrs	r2, r1
 800a8a8:	ea43 0102 	orr.w	r1, r3, r2
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a8b4:	e005      	b.n	800a8c2 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800a8be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3714      	adds	r7, #20
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr
 800a8d0:	cff00000 	.word	0xcff00000

0800a8d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8d4:	b084      	sub	sp, #16
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b084      	sub	sp, #16
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
 800a8de:	f107 001c 	add.w	r0, r7, #28
 800a8e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a8e6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d123      	bne.n	800a936 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a902:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a916:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d105      	bne.n	800a92a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 f9dc 	bl	800ace8 <USB_CoreReset>
 800a930:	4603      	mov	r3, r0
 800a932:	73fb      	strb	r3, [r7, #15]
 800a934:	e01b      	b.n	800a96e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 f9d0 	bl	800ace8 <USB_CoreReset>
 800a948:	4603      	mov	r3, r0
 800a94a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a94c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a950:	2b00      	cmp	r3, #0
 800a952:	d106      	bne.n	800a962 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a958:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	639a      	str	r2, [r3, #56]	@ 0x38
 800a960:	e005      	b.n	800a96e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a966:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a96e:	7fbb      	ldrb	r3, [r7, #30]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d10b      	bne.n	800a98c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	f043 0206 	orr.w	r2, r3, #6
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	f043 0220 	orr.w	r2, r3, #32
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a98c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3710      	adds	r7, #16
 800a992:	46bd      	mov	sp, r7
 800a994:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a998:	b004      	add	sp, #16
 800a99a:	4770      	bx	lr

0800a99c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	f043 0201 	orr.w	r2, r3, #1
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	370c      	adds	r7, #12
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr

0800a9be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9be:	b480      	push	{r7}
 800a9c0:	b083      	sub	sp, #12
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	f023 0201 	bic.w	r2, r3, #1
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a9fc:	78fb      	ldrb	r3, [r7, #3]
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d115      	bne.n	800aa2e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800aa0e:	200a      	movs	r0, #10
 800aa10:	f7f9 fe5c 	bl	80046cc <HAL_Delay>
      ms += 10U;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	330a      	adds	r3, #10
 800aa18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 f956 	bl	800accc <USB_GetMode>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d01e      	beq.n	800aa64 <USB_SetCurrentMode+0x84>
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2bc7      	cmp	r3, #199	@ 0xc7
 800aa2a:	d9f0      	bls.n	800aa0e <USB_SetCurrentMode+0x2e>
 800aa2c:	e01a      	b.n	800aa64 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800aa2e:	78fb      	ldrb	r3, [r7, #3]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d115      	bne.n	800aa60 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800aa40:	200a      	movs	r0, #10
 800aa42:	f7f9 fe43 	bl	80046cc <HAL_Delay>
      ms += 10U;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	330a      	adds	r3, #10
 800aa4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 f93d 	bl	800accc <USB_GetMode>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d005      	beq.n	800aa64 <USB_SetCurrentMode+0x84>
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2bc7      	cmp	r3, #199	@ 0xc7
 800aa5c:	d9f0      	bls.n	800aa40 <USB_SetCurrentMode+0x60>
 800aa5e:	e001      	b.n	800aa64 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aa60:	2301      	movs	r3, #1
 800aa62:	e005      	b.n	800aa70 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2bc8      	cmp	r3, #200	@ 0xc8
 800aa68:	d101      	bne.n	800aa6e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	e000      	b.n	800aa70 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800aa6e:	2300      	movs	r3, #0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b085      	sub	sp, #20
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aa82:	2300      	movs	r3, #0
 800aa84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	3301      	adds	r3, #1
 800aa8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa92:	d901      	bls.n	800aa98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aa94:	2303      	movs	r3, #3
 800aa96:	e01b      	b.n	800aad0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	691b      	ldr	r3, [r3, #16]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	daf2      	bge.n	800aa86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	019b      	lsls	r3, r3, #6
 800aaa8:	f043 0220 	orr.w	r2, r3, #32
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	3301      	adds	r3, #1
 800aab4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aabc:	d901      	bls.n	800aac2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aabe:	2303      	movs	r3, #3
 800aac0:	e006      	b.n	800aad0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	f003 0320 	and.w	r3, r3, #32
 800aaca:	2b20      	cmp	r3, #32
 800aacc:	d0f0      	beq.n	800aab0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aace:	2300      	movs	r3, #0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3714      	adds	r7, #20
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aae4:	2300      	movs	r3, #0
 800aae6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	3301      	adds	r3, #1
 800aaec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aaf4:	d901      	bls.n	800aafa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	e018      	b.n	800ab2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	daf2      	bge.n	800aae8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ab02:	2300      	movs	r3, #0
 800ab04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2210      	movs	r2, #16
 800ab0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab18:	d901      	bls.n	800ab1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ab1a:	2303      	movs	r3, #3
 800ab1c:	e006      	b.n	800ab2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	f003 0310 	and.w	r3, r3, #16
 800ab26:	2b10      	cmp	r3, #16
 800ab28:	d0f0      	beq.n	800ab0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b089      	sub	sp, #36	@ 0x24
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	4611      	mov	r1, r2
 800ab44:	461a      	mov	r2, r3
 800ab46:	460b      	mov	r3, r1
 800ab48:	71fb      	strb	r3, [r7, #7]
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ab56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d123      	bne.n	800aba6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ab5e:	88bb      	ldrh	r3, [r7, #4]
 800ab60:	3303      	adds	r3, #3
 800ab62:	089b      	lsrs	r3, r3, #2
 800ab64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ab66:	2300      	movs	r3, #0
 800ab68:	61bb      	str	r3, [r7, #24]
 800ab6a:	e018      	b.n	800ab9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ab6c:	79fb      	ldrb	r3, [r7, #7]
 800ab6e:	031a      	lsls	r2, r3, #12
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	4413      	add	r3, r2
 800ab74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab78:	461a      	mov	r2, r3
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	3301      	adds	r3, #1
 800ab84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ab92:	69fb      	ldr	r3, [r7, #28]
 800ab94:	3301      	adds	r3, #1
 800ab96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	61bb      	str	r3, [r7, #24]
 800ab9e:	69ba      	ldr	r2, [r7, #24]
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d3e2      	bcc.n	800ab6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3724      	adds	r7, #36	@ 0x24
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b08b      	sub	sp, #44	@ 0x2c
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	4613      	mov	r3, r2
 800abc0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800abca:	88fb      	ldrh	r3, [r7, #6]
 800abcc:	089b      	lsrs	r3, r3, #2
 800abce:	b29b      	uxth	r3, r3
 800abd0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800abd2:	88fb      	ldrh	r3, [r7, #6]
 800abd4:	f003 0303 	and.w	r3, r3, #3
 800abd8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800abda:	2300      	movs	r3, #0
 800abdc:	623b      	str	r3, [r7, #32]
 800abde:	e014      	b.n	800ac0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800abe0:	69bb      	ldr	r3, [r7, #24]
 800abe2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abea:	601a      	str	r2, [r3, #0]
    pDest++;
 800abec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abee:	3301      	adds	r3, #1
 800abf0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800abf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf4:	3301      	adds	r3, #1
 800abf6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800abf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abfa:	3301      	adds	r3, #1
 800abfc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800abfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac00:	3301      	adds	r3, #1
 800ac02:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ac04:	6a3b      	ldr	r3, [r7, #32]
 800ac06:	3301      	adds	r3, #1
 800ac08:	623b      	str	r3, [r7, #32]
 800ac0a:	6a3a      	ldr	r2, [r7, #32]
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d3e6      	bcc.n	800abe0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ac12:	8bfb      	ldrh	r3, [r7, #30]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d01e      	beq.n	800ac56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac22:	461a      	mov	r2, r3
 800ac24:	f107 0310 	add.w	r3, r7, #16
 800ac28:	6812      	ldr	r2, [r2, #0]
 800ac2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ac2c:	693a      	ldr	r2, [r7, #16]
 800ac2e:	6a3b      	ldr	r3, [r7, #32]
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	00db      	lsls	r3, r3, #3
 800ac34:	fa22 f303 	lsr.w	r3, r2, r3
 800ac38:	b2da      	uxtb	r2, r3
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac3c:	701a      	strb	r2, [r3, #0]
      i++;
 800ac3e:	6a3b      	ldr	r3, [r7, #32]
 800ac40:	3301      	adds	r3, #1
 800ac42:	623b      	str	r3, [r7, #32]
      pDest++;
 800ac44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac46:	3301      	adds	r3, #1
 800ac48:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ac4a:	8bfb      	ldrh	r3, [r7, #30]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ac50:	8bfb      	ldrh	r3, [r7, #30]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d1ea      	bne.n	800ac2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ac56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	372c      	adds	r7, #44	@ 0x2c
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b085      	sub	sp, #20
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	695b      	ldr	r3, [r3, #20]
 800ac70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	699b      	ldr	r3, [r3, #24]
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	4013      	ands	r3, r2
 800ac7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3714      	adds	r7, #20
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr

0800ac8a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800ac8a:	b480      	push	{r7}
 800ac8c:	b085      	sub	sp, #20
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
 800ac92:	460b      	mov	r3, r1
 800ac94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800ac9a:	78fb      	ldrb	r3, [r7, #3]
 800ac9c:	015a      	lsls	r2, r3, #5
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	4413      	add	r3, r2
 800aca2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800acaa:	78fb      	ldrb	r3, [r7, #3]
 800acac:	015a      	lsls	r2, r3, #5
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	4413      	add	r3, r2
 800acb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	68ba      	ldr	r2, [r7, #8]
 800acba:	4013      	ands	r3, r2
 800acbc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800acbe:	68bb      	ldr	r3, [r7, #8]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3714      	adds	r7, #20
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	695b      	ldr	r3, [r3, #20]
 800acd8:	f003 0301 	and.w	r3, r3, #1
}
 800acdc:	4618      	mov	r0, r3
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ace8:	b480      	push	{r7}
 800acea:	b085      	sub	sp, #20
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800acf0:	2300      	movs	r3, #0
 800acf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	3301      	adds	r3, #1
 800acf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad00:	d901      	bls.n	800ad06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ad02:	2303      	movs	r3, #3
 800ad04:	e01b      	b.n	800ad3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	daf2      	bge.n	800acf4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	691b      	ldr	r3, [r3, #16]
 800ad16:	f043 0201 	orr.w	r2, r3, #1
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	3301      	adds	r3, #1
 800ad22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad2a:	d901      	bls.n	800ad30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ad2c:	2303      	movs	r3, #3
 800ad2e:	e006      	b.n	800ad3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	691b      	ldr	r3, [r3, #16]
 800ad34:	f003 0301 	and.w	r3, r3, #1
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d0f0      	beq.n	800ad1e <USB_CoreReset+0x36>

  return HAL_OK;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3714      	adds	r7, #20
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr
	...

0800ad4c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ad4c:	b084      	sub	sp, #16
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b086      	sub	sp, #24
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
 800ad56:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ad5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	2300      	movs	r3, #0
 800ad70:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad76:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad82:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad8e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	68db      	ldr	r3, [r3, #12]
 800ad9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d119      	bne.n	800add6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800ada2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d10a      	bne.n	800adc0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800adb8:	f043 0304 	orr.w	r3, r3, #4
 800adbc:	6013      	str	r3, [r2, #0]
 800adbe:	e014      	b.n	800adea <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800adce:	f023 0304 	bic.w	r3, r3, #4
 800add2:	6013      	str	r3, [r2, #0]
 800add4:	e009      	b.n	800adea <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ade4:	f023 0304 	bic.w	r3, r3, #4
 800ade8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800adea:	2110      	movs	r1, #16
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f7ff fe43 	bl	800aa78 <USB_FlushTxFifo>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d001      	beq.n	800adfc <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f7ff fe6d 	bl	800aadc <USB_FlushRxFifo>
 800ae02:	4603      	mov	r3, r0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d001      	beq.n	800ae0c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	613b      	str	r3, [r7, #16]
 800ae10:	e015      	b.n	800ae3e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	015a      	lsls	r2, r3, #5
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	4413      	add	r3, r2
 800ae1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae1e:	461a      	mov	r2, r3
 800ae20:	f04f 33ff 	mov.w	r3, #4294967295
 800ae24:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	015a      	lsls	r2, r3, #5
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae32:	461a      	mov	r2, r3
 800ae34:	2300      	movs	r3, #0
 800ae36:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	613b      	str	r3, [r7, #16]
 800ae3e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ae42:	461a      	mov	r2, r3
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d3e3      	bcc.n	800ae12 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f04f 32ff 	mov.w	r2, #4294967295
 800ae56:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	4a18      	ldr	r2, [pc, #96]	@ (800aebc <USB_HostInit+0x170>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d10b      	bne.n	800ae78 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae66:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a15      	ldr	r2, [pc, #84]	@ (800aec0 <USB_HostInit+0x174>)
 800ae6c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4a14      	ldr	r2, [pc, #80]	@ (800aec4 <USB_HostInit+0x178>)
 800ae72:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800ae76:	e009      	b.n	800ae8c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2280      	movs	r2, #128	@ 0x80
 800ae7c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4a11      	ldr	r2, [pc, #68]	@ (800aec8 <USB_HostInit+0x17c>)
 800ae82:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	4a11      	ldr	r2, [pc, #68]	@ (800aecc <USB_HostInit+0x180>)
 800ae88:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ae8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d105      	bne.n	800aea0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	699b      	ldr	r3, [r3, #24]
 800ae98:	f043 0210 	orr.w	r2, r3, #16
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	699a      	ldr	r2, [r3, #24]
 800aea4:	4b0a      	ldr	r3, [pc, #40]	@ (800aed0 <USB_HostInit+0x184>)
 800aea6:	4313      	orrs	r3, r2
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800aeac:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3718      	adds	r7, #24
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aeb8:	b004      	add	sp, #16
 800aeba:	4770      	bx	lr
 800aebc:	40040000 	.word	0x40040000
 800aec0:	01000200 	.word	0x01000200
 800aec4:	00e00300 	.word	0x00e00300
 800aec8:	00600080 	.word	0x00600080
 800aecc:	004000e0 	.word	0x004000e0
 800aed0:	a3200008 	.word	0xa3200008

0800aed4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	460b      	mov	r3, r1
 800aede:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	68fa      	ldr	r2, [r7, #12]
 800aeee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aef2:	f023 0303 	bic.w	r3, r3, #3
 800aef6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	78fb      	ldrb	r3, [r7, #3]
 800af02:	f003 0303 	and.w	r3, r3, #3
 800af06:	68f9      	ldr	r1, [r7, #12]
 800af08:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800af0c:	4313      	orrs	r3, r2
 800af0e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800af10:	78fb      	ldrb	r3, [r7, #3]
 800af12:	2b01      	cmp	r3, #1
 800af14:	d107      	bne.n	800af26 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800af1c:	461a      	mov	r2, r3
 800af1e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800af22:	6053      	str	r3, [r2, #4]
 800af24:	e00c      	b.n	800af40 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800af26:	78fb      	ldrb	r3, [r7, #3]
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d107      	bne.n	800af3c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800af32:	461a      	mov	r2, r3
 800af34:	f241 7370 	movw	r3, #6000	@ 0x1770
 800af38:	6053      	str	r3, [r2, #4]
 800af3a:	e001      	b.n	800af40 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800af3c:	2301      	movs	r3, #1
 800af3e:	e000      	b.n	800af42 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	3714      	adds	r7, #20
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr

0800af4e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b084      	sub	sp, #16
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800af5a:	2300      	movs	r3, #0
 800af5c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800af6e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	68fa      	ldr	r2, [r7, #12]
 800af74:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800af78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af7c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800af7e:	2064      	movs	r0, #100	@ 0x64
 800af80:	f7f9 fba4 	bl	80046cc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	68fa      	ldr	r2, [r7, #12]
 800af88:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800af8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af90:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800af92:	200a      	movs	r0, #10
 800af94:	f7f9 fb9a 	bl	80046cc <HAL_Delay>

  return HAL_OK;
 800af98:	2300      	movs	r3, #0
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800afa2:	b480      	push	{r7}
 800afa4:	b085      	sub	sp, #20
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
 800afaa:	460b      	mov	r3, r1
 800afac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800afb2:	2300      	movs	r3, #0
 800afb4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800afc6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d109      	bne.n	800afe6 <USB_DriveVbus+0x44>
 800afd2:	78fb      	ldrb	r3, [r7, #3]
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d106      	bne.n	800afe6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	68fa      	ldr	r2, [r7, #12]
 800afdc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800afe0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800afe4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800afec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aff0:	d109      	bne.n	800b006 <USB_DriveVbus+0x64>
 800aff2:	78fb      	ldrb	r3, [r7, #3]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d106      	bne.n	800b006 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b000:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b004:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3714      	adds	r7, #20
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800b014:	b480      	push	{r7}
 800b016:	b085      	sub	sp, #20
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b020:	2300      	movs	r3, #0
 800b022:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	0c5b      	lsrs	r3, r3, #17
 800b032:	f003 0303 	and.w	r3, r3, #3
}
 800b036:	4618      	mov	r0, r3
 800b038:	3714      	adds	r7, #20
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800b042:	b480      	push	{r7}
 800b044:	b085      	sub	sp, #20
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	b29b      	uxth	r3, r3
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3714      	adds	r7, #20
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b088      	sub	sp, #32
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	4608      	mov	r0, r1
 800b06e:	4611      	mov	r1, r2
 800b070:	461a      	mov	r2, r3
 800b072:	4603      	mov	r3, r0
 800b074:	70fb      	strb	r3, [r7, #3]
 800b076:	460b      	mov	r3, r1
 800b078:	70bb      	strb	r3, [r7, #2]
 800b07a:	4613      	mov	r3, r2
 800b07c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b07e:	2300      	movs	r3, #0
 800b080:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800b086:	78fb      	ldrb	r3, [r7, #3]
 800b088:	015a      	lsls	r2, r3, #5
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	4413      	add	r3, r2
 800b08e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b092:	461a      	mov	r2, r3
 800b094:	f04f 33ff 	mov.w	r3, #4294967295
 800b098:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b09a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b09e:	2b03      	cmp	r3, #3
 800b0a0:	d87c      	bhi.n	800b19c <USB_HC_Init+0x138>
 800b0a2:	a201      	add	r2, pc, #4	@ (adr r2, 800b0a8 <USB_HC_Init+0x44>)
 800b0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a8:	0800b0b9 	.word	0x0800b0b9
 800b0ac:	0800b15f 	.word	0x0800b15f
 800b0b0:	0800b0b9 	.word	0x0800b0b9
 800b0b4:	0800b121 	.word	0x0800b121
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b0b8:	78fb      	ldrb	r3, [r7, #3]
 800b0ba:	015a      	lsls	r2, r3, #5
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	4413      	add	r3, r2
 800b0c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	f240 439d 	movw	r3, #1181	@ 0x49d
 800b0ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b0cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	da10      	bge.n	800b0f6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b0d4:	78fb      	ldrb	r3, [r7, #3]
 800b0d6:	015a      	lsls	r2, r3, #5
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	4413      	add	r3, r2
 800b0dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	78fa      	ldrb	r2, [r7, #3]
 800b0e4:	0151      	lsls	r1, r2, #5
 800b0e6:	693a      	ldr	r2, [r7, #16]
 800b0e8:	440a      	add	r2, r1
 800b0ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b0ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b0f2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800b0f4:	e055      	b.n	800b1a2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	4a6f      	ldr	r2, [pc, #444]	@ (800b2b8 <USB_HC_Init+0x254>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d151      	bne.n	800b1a2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800b0fe:	78fb      	ldrb	r3, [r7, #3]
 800b100:	015a      	lsls	r2, r3, #5
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	4413      	add	r3, r2
 800b106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	78fa      	ldrb	r2, [r7, #3]
 800b10e:	0151      	lsls	r1, r2, #5
 800b110:	693a      	ldr	r2, [r7, #16]
 800b112:	440a      	add	r2, r1
 800b114:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b118:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b11c:	60d3      	str	r3, [r2, #12]
      break;
 800b11e:	e040      	b.n	800b1a2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b120:	78fb      	ldrb	r3, [r7, #3]
 800b122:	015a      	lsls	r2, r3, #5
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	4413      	add	r3, r2
 800b128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b12c:	461a      	mov	r2, r3
 800b12e:	f240 639d 	movw	r3, #1693	@ 0x69d
 800b132:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b134:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	da34      	bge.n	800b1a6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b13c:	78fb      	ldrb	r3, [r7, #3]
 800b13e:	015a      	lsls	r2, r3, #5
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	4413      	add	r3, r2
 800b144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b148:	68db      	ldr	r3, [r3, #12]
 800b14a:	78fa      	ldrb	r2, [r7, #3]
 800b14c:	0151      	lsls	r1, r2, #5
 800b14e:	693a      	ldr	r2, [r7, #16]
 800b150:	440a      	add	r2, r1
 800b152:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b156:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b15a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b15c:	e023      	b.n	800b1a6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b15e:	78fb      	ldrb	r3, [r7, #3]
 800b160:	015a      	lsls	r2, r3, #5
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	4413      	add	r3, r2
 800b166:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b16a:	461a      	mov	r2, r3
 800b16c:	f240 2325 	movw	r3, #549	@ 0x225
 800b170:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b172:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b176:	2b00      	cmp	r3, #0
 800b178:	da17      	bge.n	800b1aa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b17a:	78fb      	ldrb	r3, [r7, #3]
 800b17c:	015a      	lsls	r2, r3, #5
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	4413      	add	r3, r2
 800b182:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	78fa      	ldrb	r2, [r7, #3]
 800b18a:	0151      	lsls	r1, r2, #5
 800b18c:	693a      	ldr	r2, [r7, #16]
 800b18e:	440a      	add	r2, r1
 800b190:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b194:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800b198:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b19a:	e006      	b.n	800b1aa <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	77fb      	strb	r3, [r7, #31]
      break;
 800b1a0:	e004      	b.n	800b1ac <USB_HC_Init+0x148>
      break;
 800b1a2:	bf00      	nop
 800b1a4:	e002      	b.n	800b1ac <USB_HC_Init+0x148>
      break;
 800b1a6:	bf00      	nop
 800b1a8:	e000      	b.n	800b1ac <USB_HC_Init+0x148>
      break;
 800b1aa:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b1ac:	78fb      	ldrb	r3, [r7, #3]
 800b1ae:	015a      	lsls	r2, r3, #5
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800b1be:	78fb      	ldrb	r3, [r7, #3]
 800b1c0:	015a      	lsls	r2, r3, #5
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	78fa      	ldrb	r2, [r7, #3]
 800b1ce:	0151      	lsls	r1, r2, #5
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	440a      	add	r2, r1
 800b1d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b1d8:	f043 0302 	orr.w	r3, r3, #2
 800b1dc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b1e4:	699a      	ldr	r2, [r3, #24]
 800b1e6:	78fb      	ldrb	r3, [r7, #3]
 800b1e8:	f003 030f 	and.w	r3, r3, #15
 800b1ec:	2101      	movs	r1, #1
 800b1ee:	fa01 f303 	lsl.w	r3, r1, r3
 800b1f2:	6939      	ldr	r1, [r7, #16]
 800b1f4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	699b      	ldr	r3, [r3, #24]
 800b200:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b208:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	da03      	bge.n	800b218 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b210:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b214:	61bb      	str	r3, [r7, #24]
 800b216:	e001      	b.n	800b21c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800b218:	2300      	movs	r3, #0
 800b21a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f7ff fef9 	bl	800b014 <USB_GetHostSpeed>
 800b222:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800b224:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b228:	2b02      	cmp	r3, #2
 800b22a:	d106      	bne.n	800b23a <USB_HC_Init+0x1d6>
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2b02      	cmp	r3, #2
 800b230:	d003      	beq.n	800b23a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b232:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b236:	617b      	str	r3, [r7, #20]
 800b238:	e001      	b.n	800b23e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b23a:	2300      	movs	r3, #0
 800b23c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b23e:	787b      	ldrb	r3, [r7, #1]
 800b240:	059b      	lsls	r3, r3, #22
 800b242:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b246:	78bb      	ldrb	r3, [r7, #2]
 800b248:	02db      	lsls	r3, r3, #11
 800b24a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b24e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b250:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b254:	049b      	lsls	r3, r3, #18
 800b256:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b25a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800b25c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800b25e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b262:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	431a      	orrs	r2, r3
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b26c:	78fa      	ldrb	r2, [r7, #3]
 800b26e:	0151      	lsls	r1, r2, #5
 800b270:	693a      	ldr	r2, [r7, #16]
 800b272:	440a      	add	r2, r1
 800b274:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b278:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b27c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800b27e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b282:	2b03      	cmp	r3, #3
 800b284:	d003      	beq.n	800b28e <USB_HC_Init+0x22a>
 800b286:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d10f      	bne.n	800b2ae <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800b28e:	78fb      	ldrb	r3, [r7, #3]
 800b290:	015a      	lsls	r2, r3, #5
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	4413      	add	r3, r2
 800b296:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	78fa      	ldrb	r2, [r7, #3]
 800b29e:	0151      	lsls	r1, r2, #5
 800b2a0:	693a      	ldr	r2, [r7, #16]
 800b2a2:	440a      	add	r2, r1
 800b2a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b2a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b2ac:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b2ae:	7ffb      	ldrb	r3, [r7, #31]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3720      	adds	r7, #32
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	40040000 	.word	0x40040000

0800b2bc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b08c      	sub	sp, #48	@ 0x30
 800b2c0:	af02      	add	r7, sp, #8
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	785b      	ldrb	r3, [r3, #1]
 800b2d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800b2d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b2d8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	4a5d      	ldr	r2, [pc, #372]	@ (800b454 <USB_HC_StartXfer+0x198>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d12f      	bne.n	800b342 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800b2e2:	79fb      	ldrb	r3, [r7, #7]
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d11c      	bne.n	800b322 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	7c9b      	ldrb	r3, [r3, #18]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d003      	beq.n	800b2f8 <USB_HC_StartXfer+0x3c>
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	7c9b      	ldrb	r3, [r3, #18]
 800b2f4:	2b02      	cmp	r3, #2
 800b2f6:	d124      	bne.n	800b342 <USB_HC_StartXfer+0x86>
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	799b      	ldrb	r3, [r3, #6]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d120      	bne.n	800b342 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	015a      	lsls	r2, r3, #5
 800b304:	6a3b      	ldr	r3, [r7, #32]
 800b306:	4413      	add	r3, r2
 800b308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	69fa      	ldr	r2, [r7, #28]
 800b310:	0151      	lsls	r1, r2, #5
 800b312:	6a3a      	ldr	r2, [r7, #32]
 800b314:	440a      	add	r2, r1
 800b316:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b31a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b31e:	60d3      	str	r3, [r2, #12]
 800b320:	e00f      	b.n	800b342 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	791b      	ldrb	r3, [r3, #4]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d10b      	bne.n	800b342 <USB_HC_StartXfer+0x86>
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	795b      	ldrb	r3, [r3, #5]
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d107      	bne.n	800b342 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	785b      	ldrb	r3, [r3, #1]
 800b336:	4619      	mov	r1, r3
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	f000 fb6b 	bl	800ba14 <USB_DoPing>
        return HAL_OK;
 800b33e:	2300      	movs	r3, #0
 800b340:	e232      	b.n	800b7a8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	799b      	ldrb	r3, [r3, #6]
 800b346:	2b01      	cmp	r3, #1
 800b348:	d158      	bne.n	800b3fc <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800b34a:	2301      	movs	r3, #1
 800b34c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	78db      	ldrb	r3, [r3, #3]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d007      	beq.n	800b366 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b356:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b358:	68ba      	ldr	r2, [r7, #8]
 800b35a:	8a92      	ldrh	r2, [r2, #20]
 800b35c:	fb03 f202 	mul.w	r2, r3, r2
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	61da      	str	r2, [r3, #28]
 800b364:	e07c      	b.n	800b460 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	7c9b      	ldrb	r3, [r3, #18]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d130      	bne.n	800b3d0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	6a1b      	ldr	r3, [r3, #32]
 800b372:	2bbc      	cmp	r3, #188	@ 0xbc
 800b374:	d918      	bls.n	800b3a8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	8a9b      	ldrh	r3, [r3, #20]
 800b37a:	461a      	mov	r2, r3
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	69da      	ldr	r2, [r3, #28]
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	68db      	ldr	r3, [r3, #12]
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d003      	beq.n	800b398 <USB_HC_StartXfer+0xdc>
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	2b02      	cmp	r3, #2
 800b396:	d103      	bne.n	800b3a0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	2202      	movs	r2, #2
 800b39c:	60da      	str	r2, [r3, #12]
 800b39e:	e05f      	b.n	800b460 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	60da      	str	r2, [r3, #12]
 800b3a6:	e05b      	b.n	800b460 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	6a1a      	ldr	r2, [r3, #32]
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d007      	beq.n	800b3c8 <USB_HC_StartXfer+0x10c>
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	2b02      	cmp	r3, #2
 800b3be:	d003      	beq.n	800b3c8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	2204      	movs	r2, #4
 800b3c4:	60da      	str	r2, [r3, #12]
 800b3c6:	e04b      	b.n	800b460 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	2203      	movs	r2, #3
 800b3cc:	60da      	str	r2, [r3, #12]
 800b3ce:	e047      	b.n	800b460 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800b3d0:	79fb      	ldrb	r3, [r7, #7]
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d10d      	bne.n	800b3f2 <USB_HC_StartXfer+0x136>
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	6a1b      	ldr	r3, [r3, #32]
 800b3da:	68ba      	ldr	r2, [r7, #8]
 800b3dc:	8a92      	ldrh	r2, [r2, #20]
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d907      	bls.n	800b3f2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b3e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b3e4:	68ba      	ldr	r2, [r7, #8]
 800b3e6:	8a92      	ldrh	r2, [r2, #20]
 800b3e8:	fb03 f202 	mul.w	r2, r3, r2
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	61da      	str	r2, [r3, #28]
 800b3f0:	e036      	b.n	800b460 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	6a1a      	ldr	r2, [r3, #32]
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	61da      	str	r2, [r3, #28]
 800b3fa:	e031      	b.n	800b460 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	6a1b      	ldr	r3, [r3, #32]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d018      	beq.n	800b436 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	6a1b      	ldr	r3, [r3, #32]
 800b408:	68ba      	ldr	r2, [r7, #8]
 800b40a:	8a92      	ldrh	r2, [r2, #20]
 800b40c:	4413      	add	r3, r2
 800b40e:	3b01      	subs	r3, #1
 800b410:	68ba      	ldr	r2, [r7, #8]
 800b412:	8a92      	ldrh	r2, [r2, #20]
 800b414:	fbb3 f3f2 	udiv	r3, r3, r2
 800b418:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800b41a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b41c:	8b7b      	ldrh	r3, [r7, #26]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d90b      	bls.n	800b43a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800b422:	8b7b      	ldrh	r3, [r7, #26]
 800b424:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b426:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b428:	68ba      	ldr	r2, [r7, #8]
 800b42a:	8a92      	ldrh	r2, [r2, #20]
 800b42c:	fb03 f202 	mul.w	r2, r3, r2
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	61da      	str	r2, [r3, #28]
 800b434:	e001      	b.n	800b43a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800b436:	2301      	movs	r3, #1
 800b438:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	78db      	ldrb	r3, [r3, #3]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00a      	beq.n	800b458 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b442:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	8a92      	ldrh	r2, [r2, #20]
 800b448:	fb03 f202 	mul.w	r2, r3, r2
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	61da      	str	r2, [r3, #28]
 800b450:	e006      	b.n	800b460 <USB_HC_StartXfer+0x1a4>
 800b452:	bf00      	nop
 800b454:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	6a1a      	ldr	r2, [r3, #32]
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	69db      	ldr	r3, [r3, #28]
 800b464:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b468:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b46a:	04d9      	lsls	r1, r3, #19
 800b46c:	4ba3      	ldr	r3, [pc, #652]	@ (800b6fc <USB_HC_StartXfer+0x440>)
 800b46e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b470:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	7d9b      	ldrb	r3, [r3, #22]
 800b476:	075b      	lsls	r3, r3, #29
 800b478:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b47c:	69f9      	ldr	r1, [r7, #28]
 800b47e:	0148      	lsls	r0, r1, #5
 800b480:	6a39      	ldr	r1, [r7, #32]
 800b482:	4401      	add	r1, r0
 800b484:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b488:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b48a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b48c:	79fb      	ldrb	r3, [r7, #7]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d009      	beq.n	800b4a6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	6999      	ldr	r1, [r3, #24]
 800b496:	69fb      	ldr	r3, [r7, #28]
 800b498:	015a      	lsls	r2, r3, #5
 800b49a:	6a3b      	ldr	r3, [r7, #32]
 800b49c:	4413      	add	r3, r2
 800b49e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4a2:	460a      	mov	r2, r1
 800b4a4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b4a6:	6a3b      	ldr	r3, [r7, #32]
 800b4a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	f003 0301 	and.w	r3, r3, #1
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	bf0c      	ite	eq
 800b4b6:	2301      	moveq	r3, #1
 800b4b8:	2300      	movne	r3, #0
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b4be:	69fb      	ldr	r3, [r7, #28]
 800b4c0:	015a      	lsls	r2, r3, #5
 800b4c2:	6a3b      	ldr	r3, [r7, #32]
 800b4c4:	4413      	add	r3, r2
 800b4c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	69fa      	ldr	r2, [r7, #28]
 800b4ce:	0151      	lsls	r1, r2, #5
 800b4d0:	6a3a      	ldr	r2, [r7, #32]
 800b4d2:	440a      	add	r2, r1
 800b4d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b4d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b4dc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b4de:	69fb      	ldr	r3, [r7, #28]
 800b4e0:	015a      	lsls	r2, r3, #5
 800b4e2:	6a3b      	ldr	r3, [r7, #32]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4ea:	681a      	ldr	r2, [r3, #0]
 800b4ec:	7e7b      	ldrb	r3, [r7, #25]
 800b4ee:	075b      	lsls	r3, r3, #29
 800b4f0:	69f9      	ldr	r1, [r7, #28]
 800b4f2:	0148      	lsls	r0, r1, #5
 800b4f4:	6a39      	ldr	r1, [r7, #32]
 800b4f6:	4401      	add	r1, r0
 800b4f8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	799b      	ldrb	r3, [r3, #6]
 800b504:	2b01      	cmp	r3, #1
 800b506:	f040 80c3 	bne.w	800b690 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	7c5b      	ldrb	r3, [r3, #17]
 800b50e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b510:	68ba      	ldr	r2, [r7, #8]
 800b512:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b514:	4313      	orrs	r3, r2
 800b516:	69fa      	ldr	r2, [r7, #28]
 800b518:	0151      	lsls	r1, r2, #5
 800b51a:	6a3a      	ldr	r2, [r7, #32]
 800b51c:	440a      	add	r2, r1
 800b51e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b522:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b526:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	015a      	lsls	r2, r3, #5
 800b52c:	6a3b      	ldr	r3, [r7, #32]
 800b52e:	4413      	add	r3, r2
 800b530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	69fa      	ldr	r2, [r7, #28]
 800b538:	0151      	lsls	r1, r2, #5
 800b53a:	6a3a      	ldr	r2, [r7, #32]
 800b53c:	440a      	add	r2, r1
 800b53e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b542:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b546:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	79db      	ldrb	r3, [r3, #7]
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d123      	bne.n	800b598 <USB_HC_StartXfer+0x2dc>
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	78db      	ldrb	r3, [r3, #3]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d11f      	bne.n	800b598 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	015a      	lsls	r2, r3, #5
 800b55c:	6a3b      	ldr	r3, [r7, #32]
 800b55e:	4413      	add	r3, r2
 800b560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	69fa      	ldr	r2, [r7, #28]
 800b568:	0151      	lsls	r1, r2, #5
 800b56a:	6a3a      	ldr	r2, [r7, #32]
 800b56c:	440a      	add	r2, r1
 800b56e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b572:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b576:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	015a      	lsls	r2, r3, #5
 800b57c:	6a3b      	ldr	r3, [r7, #32]
 800b57e:	4413      	add	r3, r2
 800b580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	69fa      	ldr	r2, [r7, #28]
 800b588:	0151      	lsls	r1, r2, #5
 800b58a:	6a3a      	ldr	r2, [r7, #32]
 800b58c:	440a      	add	r2, r1
 800b58e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b596:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	7c9b      	ldrb	r3, [r3, #18]
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d003      	beq.n	800b5a8 <USB_HC_StartXfer+0x2ec>
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	7c9b      	ldrb	r3, [r3, #18]
 800b5a4:	2b03      	cmp	r3, #3
 800b5a6:	d117      	bne.n	800b5d8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d113      	bne.n	800b5d8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	78db      	ldrb	r3, [r3, #3]
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d10f      	bne.n	800b5d8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	015a      	lsls	r2, r3, #5
 800b5bc:	6a3b      	ldr	r3, [r7, #32]
 800b5be:	4413      	add	r3, r2
 800b5c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	69fa      	ldr	r2, [r7, #28]
 800b5c8:	0151      	lsls	r1, r2, #5
 800b5ca:	6a3a      	ldr	r2, [r7, #32]
 800b5cc:	440a      	add	r2, r1
 800b5ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b5d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b5d6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	7c9b      	ldrb	r3, [r3, #18]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d162      	bne.n	800b6a6 <USB_HC_StartXfer+0x3ea>
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	78db      	ldrb	r3, [r3, #3]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d15e      	bne.n	800b6a6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	2b03      	cmp	r3, #3
 800b5f0:	d858      	bhi.n	800b6a4 <USB_HC_StartXfer+0x3e8>
 800b5f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b5f8 <USB_HC_StartXfer+0x33c>)
 800b5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f8:	0800b609 	.word	0x0800b609
 800b5fc:	0800b62b 	.word	0x0800b62b
 800b600:	0800b64d 	.word	0x0800b64d
 800b604:	0800b66f 	.word	0x0800b66f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	015a      	lsls	r2, r3, #5
 800b60c:	6a3b      	ldr	r3, [r7, #32]
 800b60e:	4413      	add	r3, r2
 800b610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	69fa      	ldr	r2, [r7, #28]
 800b618:	0151      	lsls	r1, r2, #5
 800b61a:	6a3a      	ldr	r2, [r7, #32]
 800b61c:	440a      	add	r2, r1
 800b61e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b626:	6053      	str	r3, [r2, #4]
          break;
 800b628:	e03d      	b.n	800b6a6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	015a      	lsls	r2, r3, #5
 800b62e:	6a3b      	ldr	r3, [r7, #32]
 800b630:	4413      	add	r3, r2
 800b632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	69fa      	ldr	r2, [r7, #28]
 800b63a:	0151      	lsls	r1, r2, #5
 800b63c:	6a3a      	ldr	r2, [r7, #32]
 800b63e:	440a      	add	r2, r1
 800b640:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b644:	f043 030e 	orr.w	r3, r3, #14
 800b648:	6053      	str	r3, [r2, #4]
          break;
 800b64a:	e02c      	b.n	800b6a6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	015a      	lsls	r2, r3, #5
 800b650:	6a3b      	ldr	r3, [r7, #32]
 800b652:	4413      	add	r3, r2
 800b654:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	69fa      	ldr	r2, [r7, #28]
 800b65c:	0151      	lsls	r1, r2, #5
 800b65e:	6a3a      	ldr	r2, [r7, #32]
 800b660:	440a      	add	r2, r1
 800b662:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b666:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b66a:	6053      	str	r3, [r2, #4]
          break;
 800b66c:	e01b      	b.n	800b6a6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	015a      	lsls	r2, r3, #5
 800b672:	6a3b      	ldr	r3, [r7, #32]
 800b674:	4413      	add	r3, r2
 800b676:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	69fa      	ldr	r2, [r7, #28]
 800b67e:	0151      	lsls	r1, r2, #5
 800b680:	6a3a      	ldr	r2, [r7, #32]
 800b682:	440a      	add	r2, r1
 800b684:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b688:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b68c:	6053      	str	r3, [r2, #4]
          break;
 800b68e:	e00a      	b.n	800b6a6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b690:	69fb      	ldr	r3, [r7, #28]
 800b692:	015a      	lsls	r2, r3, #5
 800b694:	6a3b      	ldr	r3, [r7, #32]
 800b696:	4413      	add	r3, r2
 800b698:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b69c:	461a      	mov	r2, r3
 800b69e:	2300      	movs	r3, #0
 800b6a0:	6053      	str	r3, [r2, #4]
 800b6a2:	e000      	b.n	800b6a6 <USB_HC_StartXfer+0x3ea>
          break;
 800b6a4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b6a6:	69fb      	ldr	r3, [r7, #28]
 800b6a8:	015a      	lsls	r2, r3, #5
 800b6aa:	6a3b      	ldr	r3, [r7, #32]
 800b6ac:	4413      	add	r3, r2
 800b6ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b6bc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	78db      	ldrb	r3, [r3, #3]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d004      	beq.n	800b6d0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b6cc:	613b      	str	r3, [r7, #16]
 800b6ce:	e003      	b.n	800b6d8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b6d6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b6de:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	015a      	lsls	r2, r3, #5
 800b6e4:	6a3b      	ldr	r3, [r7, #32]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b6f2:	79fb      	ldrb	r3, [r7, #7]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d003      	beq.n	800b700 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	e055      	b.n	800b7a8 <USB_HC_StartXfer+0x4ec>
 800b6fc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	78db      	ldrb	r3, [r3, #3]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d14e      	bne.n	800b7a6 <USB_HC_StartXfer+0x4ea>
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	6a1b      	ldr	r3, [r3, #32]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d04a      	beq.n	800b7a6 <USB_HC_StartXfer+0x4ea>
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	79db      	ldrb	r3, [r3, #7]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d146      	bne.n	800b7a6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	7c9b      	ldrb	r3, [r3, #18]
 800b71c:	2b03      	cmp	r3, #3
 800b71e:	d831      	bhi.n	800b784 <USB_HC_StartXfer+0x4c8>
 800b720:	a201      	add	r2, pc, #4	@ (adr r2, 800b728 <USB_HC_StartXfer+0x46c>)
 800b722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b726:	bf00      	nop
 800b728:	0800b739 	.word	0x0800b739
 800b72c:	0800b75d 	.word	0x0800b75d
 800b730:	0800b739 	.word	0x0800b739
 800b734:	0800b75d 	.word	0x0800b75d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	6a1b      	ldr	r3, [r3, #32]
 800b73c:	3303      	adds	r3, #3
 800b73e:	089b      	lsrs	r3, r3, #2
 800b740:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b742:	8afa      	ldrh	r2, [r7, #22]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b748:	b29b      	uxth	r3, r3
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d91c      	bls.n	800b788 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	699b      	ldr	r3, [r3, #24]
 800b752:	f043 0220 	orr.w	r2, r3, #32
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	619a      	str	r2, [r3, #24]
        }
        break;
 800b75a:	e015      	b.n	800b788 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	6a1b      	ldr	r3, [r3, #32]
 800b760:	3303      	adds	r3, #3
 800b762:	089b      	lsrs	r3, r3, #2
 800b764:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b766:	8afa      	ldrh	r2, [r7, #22]
 800b768:	6a3b      	ldr	r3, [r7, #32]
 800b76a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b76e:	691b      	ldr	r3, [r3, #16]
 800b770:	b29b      	uxth	r3, r3
 800b772:	429a      	cmp	r2, r3
 800b774:	d90a      	bls.n	800b78c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	699b      	ldr	r3, [r3, #24]
 800b77a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	619a      	str	r2, [r3, #24]
        }
        break;
 800b782:	e003      	b.n	800b78c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800b784:	bf00      	nop
 800b786:	e002      	b.n	800b78e <USB_HC_StartXfer+0x4d2>
        break;
 800b788:	bf00      	nop
 800b78a:	e000      	b.n	800b78e <USB_HC_StartXfer+0x4d2>
        break;
 800b78c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	6999      	ldr	r1, [r3, #24]
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	785a      	ldrb	r2, [r3, #1]
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	6a1b      	ldr	r3, [r3, #32]
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	2000      	movs	r0, #0
 800b79e:	9000      	str	r0, [sp, #0]
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f7ff f9c9 	bl	800ab38 <USB_WritePacket>
  }

  return HAL_OK;
 800b7a6:	2300      	movs	r3, #0
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3728      	adds	r7, #40	@ 0x28
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b7c2:	695b      	ldr	r3, [r3, #20]
 800b7c4:	b29b      	uxth	r3, r3
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3714      	adds	r7, #20
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr

0800b7d2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b7d2:	b480      	push	{r7}
 800b7d4:	b089      	sub	sp, #36	@ 0x24
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
 800b7da:	460b      	mov	r3, r1
 800b7dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800b7e2:	78fb      	ldrb	r3, [r7, #3]
 800b7e4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	015a      	lsls	r2, r3, #5
 800b7ee:	69fb      	ldr	r3, [r7, #28]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	0c9b      	lsrs	r3, r3, #18
 800b7fa:	f003 0303 	and.w	r3, r3, #3
 800b7fe:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b800:	69bb      	ldr	r3, [r7, #24]
 800b802:	015a      	lsls	r2, r3, #5
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	4413      	add	r3, r2
 800b808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	0fdb      	lsrs	r3, r3, #31
 800b810:	f003 0301 	and.w	r3, r3, #1
 800b814:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800b816:	69bb      	ldr	r3, [r7, #24]
 800b818:	015a      	lsls	r2, r3, #5
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	4413      	add	r3, r2
 800b81e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	0fdb      	lsrs	r3, r3, #31
 800b826:	f003 0301 	and.w	r3, r3, #1
 800b82a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	689b      	ldr	r3, [r3, #8]
 800b830:	f003 0320 	and.w	r3, r3, #32
 800b834:	2b20      	cmp	r3, #32
 800b836:	d10d      	bne.n	800b854 <USB_HC_Halt+0x82>
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d10a      	bne.n	800b854 <USB_HC_Halt+0x82>
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d005      	beq.n	800b850 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	2b01      	cmp	r3, #1
 800b848:	d002      	beq.n	800b850 <USB_HC_Halt+0x7e>
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	2b03      	cmp	r3, #3
 800b84e:	d101      	bne.n	800b854 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800b850:	2300      	movs	r3, #0
 800b852:	e0d8      	b.n	800ba06 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d002      	beq.n	800b860 <USB_HC_Halt+0x8e>
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	2b02      	cmp	r3, #2
 800b85e:	d173      	bne.n	800b948 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b860:	69bb      	ldr	r3, [r7, #24]
 800b862:	015a      	lsls	r2, r3, #5
 800b864:	69fb      	ldr	r3, [r7, #28]
 800b866:	4413      	add	r3, r2
 800b868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	69ba      	ldr	r2, [r7, #24]
 800b870:	0151      	lsls	r1, r2, #5
 800b872:	69fa      	ldr	r2, [r7, #28]
 800b874:	440a      	add	r2, r1
 800b876:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b87a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b87e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	689b      	ldr	r3, [r3, #8]
 800b884:	f003 0320 	and.w	r3, r3, #32
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d14a      	bne.n	800b922 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b890:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b894:	2b00      	cmp	r3, #0
 800b896:	d133      	bne.n	800b900 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b898:	69bb      	ldr	r3, [r7, #24]
 800b89a:	015a      	lsls	r2, r3, #5
 800b89c:	69fb      	ldr	r3, [r7, #28]
 800b89e:	4413      	add	r3, r2
 800b8a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	69ba      	ldr	r2, [r7, #24]
 800b8a8:	0151      	lsls	r1, r2, #5
 800b8aa:	69fa      	ldr	r2, [r7, #28]
 800b8ac:	440a      	add	r2, r1
 800b8ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b8b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b8b6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b8b8:	69bb      	ldr	r3, [r7, #24]
 800b8ba:	015a      	lsls	r2, r3, #5
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	4413      	add	r3, r2
 800b8c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	69ba      	ldr	r2, [r7, #24]
 800b8c8:	0151      	lsls	r1, r2, #5
 800b8ca:	69fa      	ldr	r2, [r7, #28]
 800b8cc:	440a      	add	r2, r1
 800b8ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b8d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b8d6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b8e4:	d82e      	bhi.n	800b944 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b8e6:	69bb      	ldr	r3, [r7, #24]
 800b8e8:	015a      	lsls	r2, r3, #5
 800b8ea:	69fb      	ldr	r3, [r7, #28]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b8f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b8fc:	d0ec      	beq.n	800b8d8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b8fe:	e081      	b.n	800ba04 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	015a      	lsls	r2, r3, #5
 800b904:	69fb      	ldr	r3, [r7, #28]
 800b906:	4413      	add	r3, r2
 800b908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	69ba      	ldr	r2, [r7, #24]
 800b910:	0151      	lsls	r1, r2, #5
 800b912:	69fa      	ldr	r2, [r7, #28]
 800b914:	440a      	add	r2, r1
 800b916:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b91a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b91e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b920:	e070      	b.n	800ba04 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b922:	69bb      	ldr	r3, [r7, #24]
 800b924:	015a      	lsls	r2, r3, #5
 800b926:	69fb      	ldr	r3, [r7, #28]
 800b928:	4413      	add	r3, r2
 800b92a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	69ba      	ldr	r2, [r7, #24]
 800b932:	0151      	lsls	r1, r2, #5
 800b934:	69fa      	ldr	r2, [r7, #28]
 800b936:	440a      	add	r2, r1
 800b938:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b93c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b940:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b942:	e05f      	b.n	800ba04 <USB_HC_Halt+0x232>
            break;
 800b944:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b946:	e05d      	b.n	800ba04 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	015a      	lsls	r2, r3, #5
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	4413      	add	r3, r2
 800b950:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	69ba      	ldr	r2, [r7, #24]
 800b958:	0151      	lsls	r1, r2, #5
 800b95a:	69fa      	ldr	r2, [r7, #28]
 800b95c:	440a      	add	r2, r1
 800b95e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b962:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b966:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b96e:	691b      	ldr	r3, [r3, #16]
 800b970:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b974:	2b00      	cmp	r3, #0
 800b976:	d133      	bne.n	800b9e0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	015a      	lsls	r2, r3, #5
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	4413      	add	r3, r2
 800b980:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	69ba      	ldr	r2, [r7, #24]
 800b988:	0151      	lsls	r1, r2, #5
 800b98a:	69fa      	ldr	r2, [r7, #28]
 800b98c:	440a      	add	r2, r1
 800b98e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b992:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b996:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	015a      	lsls	r2, r3, #5
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	4413      	add	r3, r2
 800b9a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	69ba      	ldr	r2, [r7, #24]
 800b9a8:	0151      	lsls	r1, r2, #5
 800b9aa:	69fa      	ldr	r2, [r7, #28]
 800b9ac:	440a      	add	r2, r1
 800b9ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b9b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b9b6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	3301      	adds	r3, #1
 800b9bc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b9c4:	d81d      	bhi.n	800ba02 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b9c6:	69bb      	ldr	r3, [r7, #24]
 800b9c8:	015a      	lsls	r2, r3, #5
 800b9ca:	69fb      	ldr	r3, [r7, #28]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b9d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9dc:	d0ec      	beq.n	800b9b8 <USB_HC_Halt+0x1e6>
 800b9de:	e011      	b.n	800ba04 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b9e0:	69bb      	ldr	r3, [r7, #24]
 800b9e2:	015a      	lsls	r2, r3, #5
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	69ba      	ldr	r2, [r7, #24]
 800b9f0:	0151      	lsls	r1, r2, #5
 800b9f2:	69fa      	ldr	r2, [r7, #28]
 800b9f4:	440a      	add	r2, r1
 800b9f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b9fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b9fe:	6013      	str	r3, [r2, #0]
 800ba00:	e000      	b.n	800ba04 <USB_HC_Halt+0x232>
          break;
 800ba02:	bf00      	nop
    }
  }

  return HAL_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3724      	adds	r7, #36	@ 0x24
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr
	...

0800ba14 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b087      	sub	sp, #28
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ba24:	78fb      	ldrb	r3, [r7, #3]
 800ba26:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ba28:	2301      	movs	r3, #1
 800ba2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	04da      	lsls	r2, r3, #19
 800ba30:	4b15      	ldr	r3, [pc, #84]	@ (800ba88 <USB_DoPing+0x74>)
 800ba32:	4013      	ands	r3, r2
 800ba34:	693a      	ldr	r2, [r7, #16]
 800ba36:	0151      	lsls	r1, r2, #5
 800ba38:	697a      	ldr	r2, [r7, #20]
 800ba3a:	440a      	add	r2, r1
 800ba3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ba40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ba44:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	015a      	lsls	r2, r3, #5
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ba5c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ba64:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	015a      	lsls	r2, r3, #5
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba72:	461a      	mov	r2, r3
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ba78:	2300      	movs	r3, #0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	371c      	adds	r7, #28
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	1ff80000 	.word	0x1ff80000

0800ba8c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b088      	sub	sp, #32
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800ba94:	2300      	movs	r3, #0
 800ba96:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f7fe ff8c 	bl	800a9be <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800baa6:	2110      	movs	r1, #16
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f7fe ffe5 	bl	800aa78 <USB_FlushTxFifo>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d001      	beq.n	800bab8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f7ff f80f 	bl	800aadc <USB_FlushRxFifo>
 800babe:	4603      	mov	r3, r0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d001      	beq.n	800bac8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800bac4:	2301      	movs	r3, #1
 800bac6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800bac8:	2300      	movs	r3, #0
 800baca:	61bb      	str	r3, [r7, #24]
 800bacc:	e01f      	b.n	800bb0e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800bace:	69bb      	ldr	r3, [r7, #24]
 800bad0:	015a      	lsls	r2, r3, #5
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	4413      	add	r3, r2
 800bad6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bae4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800baec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800baf4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800baf6:	69bb      	ldr	r3, [r7, #24]
 800baf8:	015a      	lsls	r2, r3, #5
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	4413      	add	r3, r2
 800bafe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb02:	461a      	mov	r2, r3
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	61bb      	str	r3, [r7, #24]
 800bb0e:	69bb      	ldr	r3, [r7, #24]
 800bb10:	2b0f      	cmp	r3, #15
 800bb12:	d9dc      	bls.n	800bace <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800bb14:	2300      	movs	r3, #0
 800bb16:	61bb      	str	r3, [r7, #24]
 800bb18:	e034      	b.n	800bb84 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800bb1a:	69bb      	ldr	r3, [r7, #24]
 800bb1c:	015a      	lsls	r2, r3, #5
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	4413      	add	r3, r2
 800bb22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bb30:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bb38:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bb40:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800bb42:	69bb      	ldr	r3, [r7, #24]
 800bb44:	015a      	lsls	r2, r3, #5
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	4413      	add	r3, r2
 800bb4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb4e:	461a      	mov	r2, r3
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	3301      	adds	r3, #1
 800bb58:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bb60:	d80c      	bhi.n	800bb7c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	015a      	lsls	r2, r3, #5
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	4413      	add	r3, r2
 800bb6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb78:	d0ec      	beq.n	800bb54 <USB_StopHost+0xc8>
 800bb7a:	e000      	b.n	800bb7e <USB_StopHost+0xf2>
        break;
 800bb7c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800bb7e:	69bb      	ldr	r3, [r7, #24]
 800bb80:	3301      	adds	r3, #1
 800bb82:	61bb      	str	r3, [r7, #24]
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	2b0f      	cmp	r3, #15
 800bb88:	d9c7      	bls.n	800bb1a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bb90:	461a      	mov	r2, r3
 800bb92:	f04f 33ff 	mov.w	r3, #4294967295
 800bb96:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb9e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f7fe fefb 	bl	800a99c <USB_EnableGlobalInt>

  return ret;
 800bba6:	7ffb      	ldrb	r3, [r7, #31]
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3720      	adds	r7, #32
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800bbb0:	b590      	push	{r4, r7, lr}
 800bbb2:	b08b      	sub	sp, #44	@ 0x2c
 800bbb4:	af04      	add	r7, sp, #16
 800bbb6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint16_t ep_mps;
  uint8_t max_ep;
  uint8_t num = 0U;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800bbc2:	7919      	ldrb	r1, [r3, #4]
 800bbc4:	23ff      	movs	r3, #255	@ 0xff
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f001 f879 	bl	800ccc0 <USBH_FindInterface>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bbd2:	7dbb      	ldrb	r3, [r7, #22]
 800bbd4:	2bff      	cmp	r3, #255	@ 0xff
 800bbd6:	d002      	beq.n	800bbde <USBH_HID_InterfaceInit+0x2e>
 800bbd8:	7dbb      	ldrb	r3, [r7, #22]
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	d90f      	bls.n	800bbfe <USBH_HID_InterfaceInit+0x4e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 800bbde:	48a9      	ldr	r0, [pc, #676]	@ (800be84 <USBH_HID_InterfaceInit+0x2d4>)
 800bbe0:	f003 fade 	bl	800f1a0 <iprintf>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4619      	mov	r1, r3
 800bbee:	48a6      	ldr	r0, [pc, #664]	@ (800be88 <USBH_HID_InterfaceInit+0x2d8>)
 800bbf0:	f003 fad6 	bl	800f1a0 <iprintf>
 800bbf4:	200a      	movs	r0, #10
 800bbf6:	f003 fae5 	bl	800f1c4 <putchar>
    return USBH_FAIL;
 800bbfa:	2302      	movs	r3, #2
 800bbfc:	e13d      	b.n	800be7a <USBH_HID_InterfaceInit+0x2ca>
  }

  status = USBH_SelectInterface(phost, interface);
 800bbfe:	7dbb      	ldrb	r3, [r7, #22]
 800bc00:	4619      	mov	r1, r3
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 fff4 	bl	800cbf0 <USBH_SelectInterface>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 800bc0c:	7d7b      	ldrb	r3, [r7, #21]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d001      	beq.n	800bc16 <USBH_HID_InterfaceInit+0x66>
  {
    return USBH_FAIL;
 800bc12:	2302      	movs	r3, #2
 800bc14:	e131      	b.n	800be7a <USBH_HID_InterfaceInit+0x2ca>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8d3 4d34 	ldr.w	r4, [r3, #3380]	@ 0xd34
 800bc1c:	2034      	movs	r0, #52	@ 0x34
 800bc1e:	f003 f8bb 	bl	800ed98 <malloc>
 800bc22:	4603      	mov	r3, r0
 800bc24:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800bc2c:	69db      	ldr	r3, [r3, #28]
 800bc2e:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d10a      	bne.n	800bc4c <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
 800bc36:	4893      	ldr	r0, [pc, #588]	@ (800be84 <USBH_HID_InterfaceInit+0x2d4>)
 800bc38:	f003 fab2 	bl	800f1a0 <iprintf>
 800bc3c:	4893      	ldr	r0, [pc, #588]	@ (800be8c <USBH_HID_InterfaceInit+0x2dc>)
 800bc3e:	f003 faaf 	bl	800f1a0 <iprintf>
 800bc42:	200a      	movs	r0, #10
 800bc44:	f003 fabe 	bl	800f1c4 <putchar>
    return USBH_FAIL;
 800bc48:	2302      	movs	r3, #2
 800bc4a:	e116      	b.n	800be7a <USBH_HID_InterfaceInit+0x2ca>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 800bc4c:	2234      	movs	r2, #52	@ 0x34
 800bc4e:	2100      	movs	r1, #0
 800bc50:	6938      	ldr	r0, [r7, #16]
 800bc52:	f003 fc35 	bl	800f4c0 <memset>

  HID_Handle->state = USBH_HID_ERROR;
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	2207      	movs	r2, #7
 800bc5a:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800bc5c:	7dbb      	ldrb	r3, [r7, #22]
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	211a      	movs	r1, #26
 800bc62:	fb01 f303 	mul.w	r3, r1, r3
 800bc66:	4413      	add	r3, r2
 800bc68:	f603 5301 	addw	r3, r3, #3329	@ 0xd01
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d109      	bne.n	800bc86 <USBH_HID_InterfaceInit+0xd6>
  {
    USBH_UsrLog("KeyBoard device found!");
 800bc72:	4887      	ldr	r0, [pc, #540]	@ (800be90 <USBH_HID_InterfaceInit+0x2e0>)
 800bc74:	f003 fa94 	bl	800f1a0 <iprintf>
 800bc78:	200a      	movs	r0, #10
 800bc7a:	f003 faa3 	bl	800f1c4 <putchar>
    HID_Handle->Init = USBH_HID_KeybdInit;
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	4a84      	ldr	r2, [pc, #528]	@ (800be94 <USBH_HID_InterfaceInit+0x2e4>)
 800bc82:	631a      	str	r2, [r3, #48]	@ 0x30
 800bc84:	e01c      	b.n	800bcc0 <USBH_HID_InterfaceInit+0x110>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 800bc86:	7dbb      	ldrb	r3, [r7, #22]
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	211a      	movs	r1, #26
 800bc8c:	fb01 f303 	mul.w	r3, r1, r3
 800bc90:	4413      	add	r3, r2
 800bc92:	f603 5301 	addw	r3, r3, #3329	@ 0xd01
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	d109      	bne.n	800bcb0 <USBH_HID_InterfaceInit+0x100>
  {
    USBH_UsrLog("Mouse device found!");
 800bc9c:	487e      	ldr	r0, [pc, #504]	@ (800be98 <USBH_HID_InterfaceInit+0x2e8>)
 800bc9e:	f003 fa7f 	bl	800f1a0 <iprintf>
 800bca2:	200a      	movs	r0, #10
 800bca4:	f003 fa8e 	bl	800f1c4 <putchar>
    HID_Handle->Init = USBH_HID_MouseInit;
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	4a7c      	ldr	r2, [pc, #496]	@ (800be9c <USBH_HID_InterfaceInit+0x2ec>)
 800bcac:	631a      	str	r2, [r3, #48]	@ 0x30
 800bcae:	e007      	b.n	800bcc0 <USBH_HID_InterfaceInit+0x110>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
 800bcb0:	487b      	ldr	r0, [pc, #492]	@ (800bea0 <USBH_HID_InterfaceInit+0x2f0>)
 800bcb2:	f003 fa75 	bl	800f1a0 <iprintf>
 800bcb6:	200a      	movs	r0, #10
 800bcb8:	f003 fa84 	bl	800f1c4 <putchar>
    return USBH_FAIL;
 800bcbc:	2302      	movs	r3, #2
 800bcbe:	e0dc      	b.n	800be7a <USBH_HID_InterfaceInit+0x2ca>
  }

  HID_Handle->state     = USBH_HID_INIT;
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = USBH_HID_REQ_INIT;
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bccc:	7dbb      	ldrb	r3, [r7, #22]
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	211a      	movs	r1, #26
 800bcd2:	fb01 f303 	mul.w	r3, r1, r3
 800bcd6:	4413      	add	r3, r2
 800bcd8:	f603 5306 	addw	r3, r3, #3334	@ 0xd06
 800bcdc:	781a      	ldrb	r2, [r3, #0]
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bce2:	7dbb      	ldrb	r3, [r7, #22]
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	211a      	movs	r1, #26
 800bce8:	fb01 f303 	mul.w	r3, r1, r3
 800bcec:	4413      	add	r3, r2
 800bcee:	f603 5308 	addw	r3, r3, #3336	@ 0xd08
 800bcf2:	881a      	ldrh	r2, [r3, #0]
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800bcf8:	7dbb      	ldrb	r3, [r7, #22]
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	211a      	movs	r1, #26
 800bcfe:	fb01 f303 	mul.w	r3, r1, r3
 800bd02:	4413      	add	r3, r2
 800bd04:	f603 530a 	addw	r3, r3, #3338	@ 0xd0a
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll < HID_MIN_POLL)
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	8b9b      	ldrh	r3, [r3, #28]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d102      	bne.n	800bd1e <USBH_HID_InterfaceInit+0x16e>
  {
    HID_Handle->poll = HID_MIN_POLL;
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 800bd1e:	7dbb      	ldrb	r3, [r7, #22]
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	211a      	movs	r1, #26
 800bd24:	fb01 f303 	mul.w	r3, r1, r3
 800bd28:	4413      	add	r3, r2
 800bd2a:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	2b02      	cmp	r3, #2
 800bd32:	bf28      	it	cs
 800bd34:	2302      	movcs	r3, #2
 800bd36:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 800bd38:	2300      	movs	r3, #0
 800bd3a:	75fb      	strb	r3, [r7, #23]
 800bd3c:	e097      	b.n	800be6e <USBH_HID_InterfaceInit+0x2be>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 800bd3e:	7dbb      	ldrb	r3, [r7, #22]
 800bd40:	7df9      	ldrb	r1, [r7, #23]
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	3101      	adds	r1, #1
 800bd46:	00c9      	lsls	r1, r1, #3
 800bd48:	201a      	movs	r0, #26
 800bd4a:	fb00 f303 	mul.w	r3, r0, r3
 800bd4e:	440b      	add	r3, r1
 800bd50:	4413      	add	r3, r2
 800bd52:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	b25b      	sxtb	r3, r3
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	da42      	bge.n	800bde4 <USBH_HID_InterfaceInit+0x234>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800bd5e:	7dbb      	ldrb	r3, [r7, #22]
 800bd60:	7df9      	ldrb	r1, [r7, #23]
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	3101      	adds	r1, #1
 800bd66:	00c9      	lsls	r1, r1, #3
 800bd68:	201a      	movs	r0, #26
 800bd6a:	fb00 f303 	mul.w	r3, r0, r3
 800bd6e:	440b      	add	r3, r1
 800bd70:	4413      	add	r3, r2
 800bd72:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800bd76:	781a      	ldrb	r2, [r3, #0]
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	791b      	ldrb	r3, [r3, #4]
 800bd80:	4619      	mov	r1, r3
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f002 fc93 	bl	800e6ae <USBH_AllocPipe>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	705a      	strb	r2, [r3, #1]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800bd90:	7dbb      	ldrb	r3, [r7, #22]
 800bd92:	7df9      	ldrb	r1, [r7, #23]
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	3101      	adds	r1, #1
 800bd98:	00c9      	lsls	r1, r1, #3
 800bd9a:	201a      	movs	r0, #26
 800bd9c:	fb00 f303 	mul.w	r3, r0, r3
 800bda0:	440b      	add	r3, r1
 800bda2:	4413      	add	r3, r2
 800bda4:	f503 6350 	add.w	r3, r3, #3328	@ 0xd00
 800bda8:	881b      	ldrh	r3, [r3, #0]
 800bdaa:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	7859      	ldrb	r1, [r3, #1]
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	7918      	ldrb	r0, [r3, #4]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f893 4cd4 	ldrb.w	r4, [r3, #3284]	@ 0xcd4
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800bdc0:	89ba      	ldrh	r2, [r7, #12]
 800bdc2:	9202      	str	r2, [sp, #8]
 800bdc4:	2203      	movs	r2, #3
 800bdc6:	9201      	str	r2, [sp, #4]
 800bdc8:	9300      	str	r3, [sp, #0]
 800bdca:	4623      	mov	r3, r4
 800bdcc:	4602      	mov	r2, r0
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f002 fc3e 	bl	800e650 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	785b      	ldrb	r3, [r3, #1]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	4619      	mov	r1, r3
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f002 ff51 	bl	800ec84 <USBH_LL_SetToggle>
 800bde2:	e041      	b.n	800be68 <USBH_HID_InterfaceInit+0x2b8>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800bde4:	7dbb      	ldrb	r3, [r7, #22]
 800bde6:	7df9      	ldrb	r1, [r7, #23]
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	3101      	adds	r1, #1
 800bdec:	00c9      	lsls	r1, r1, #3
 800bdee:	201a      	movs	r0, #26
 800bdf0:	fb00 f303 	mul.w	r3, r0, r3
 800bdf4:	440b      	add	r3, r1
 800bdf6:	4413      	add	r3, r2
 800bdf8:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800bdfc:	781a      	ldrb	r2, [r3, #0]
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe = USBH_AllocPipe(phost, HID_Handle->OutEp);
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	78db      	ldrb	r3, [r3, #3]
 800be06:	4619      	mov	r1, r3
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f002 fc50 	bl	800e6ae <USBH_AllocPipe>
 800be0e:	4603      	mov	r3, r0
 800be10:	461a      	mov	r2, r3
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	701a      	strb	r2, [r3, #0]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800be16:	7dbb      	ldrb	r3, [r7, #22]
 800be18:	7df9      	ldrb	r1, [r7, #23]
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	3101      	adds	r1, #1
 800be1e:	00c9      	lsls	r1, r1, #3
 800be20:	201a      	movs	r0, #26
 800be22:	fb00 f303 	mul.w	r3, r0, r3
 800be26:	440b      	add	r3, r1
 800be28:	4413      	add	r3, r2
 800be2a:	f503 6350 	add.w	r3, r3, #3328	@ 0xd00
 800be2e:	881b      	ldrh	r3, [r3, #0]
 800be30:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	7819      	ldrb	r1, [r3, #0]
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	78d8      	ldrb	r0, [r3, #3]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f893 4cd4 	ldrb.w	r4, [r3, #3284]	@ 0xcd4
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800be46:	89ba      	ldrh	r2, [r7, #12]
 800be48:	9202      	str	r2, [sp, #8]
 800be4a:	2203      	movs	r2, #3
 800be4c:	9201      	str	r2, [sp, #4]
 800be4e:	9300      	str	r3, [sp, #0]
 800be50:	4623      	mov	r3, r4
 800be52:	4602      	mov	r2, r0
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f002 fbfb 	bl	800e650 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	2200      	movs	r2, #0
 800be60:	4619      	mov	r1, r3
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f002 ff0e 	bl	800ec84 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 800be68:	7dfb      	ldrb	r3, [r7, #23]
 800be6a:	3301      	adds	r3, #1
 800be6c:	75fb      	strb	r3, [r7, #23]
 800be6e:	7dfa      	ldrb	r2, [r7, #23]
 800be70:	7bfb      	ldrb	r3, [r7, #15]
 800be72:	429a      	cmp	r2, r3
 800be74:	f4ff af63 	bcc.w	800bd3e <USBH_HID_InterfaceInit+0x18e>
    }
  }

  return USBH_OK;
 800be78:	2300      	movs	r3, #0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	371c      	adds	r7, #28
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd90      	pop	{r4, r7, pc}
 800be82:	bf00      	nop
 800be84:	0801040c 	.word	0x0801040c
 800be88:	08010418 	.word	0x08010418
 800be8c:	08010440 	.word	0x08010440
 800be90:	08010468 	.word	0x08010468
 800be94:	0800c5d9 	.word	0x0800c5d9
 800be98:	08010480 	.word	0x08010480
 800be9c:	0800c829 	.word	0x0800c829
 800bea0:	08010494 	.word	0x08010494

0800bea4 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800beb2:	69db      	ldr	r3, [r3, #28]
 800beb4:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	785b      	ldrb	r3, [r3, #1]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d00e      	beq.n	800bedc <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	785b      	ldrb	r3, [r3, #1]
 800bec2:	4619      	mov	r1, r3
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f002 fbe2 	bl	800e68e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	785b      	ldrb	r3, [r3, #1]
 800bece:	4619      	mov	r1, r3
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f002 fc0e 	bl	800e6f2 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2200      	movs	r2, #0
 800beda:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00e      	beq.n	800bf02 <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	4619      	mov	r1, r3
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f002 fbcf 	bl	800e68e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	4619      	mov	r1, r3
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f002 fbfb 	bl	800e6f2 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2200      	movs	r2, #0
 800bf00:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800bf08:	69db      	ldr	r3, [r3, #28]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00b      	beq.n	800bf26 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800bf14:	69db      	ldr	r3, [r3, #28]
 800bf16:	4618      	mov	r0, r3
 800bf18:	f002 ff46 	bl	800eda8 <free>
    phost->pActiveClass->pData = 0U;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800bf22:	2200      	movs	r2, #0
 800bf24:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800bf46:	69db      	ldr	r3, [r3, #28]
 800bf48:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	795b      	ldrb	r3, [r3, #5]
 800bf4e:	2b05      	cmp	r3, #5
 800bf50:	d872      	bhi.n	800c038 <USBH_HID_ClassRequest+0x108>
 800bf52:	a201      	add	r2, pc, #4	@ (adr r2, 800bf58 <USBH_HID_ClassRequest+0x28>)
 800bf54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf58:	0800bf71 	.word	0x0800bf71
 800bf5c:	0800c039 	.word	0x0800c039
 800bf60:	0800bf8b 	.word	0x0800bf8b
 800bf64:	0800bf71 	.word	0x0800bf71
 800bf68:	0800bfc7 	.word	0x0800bfc7
 800bf6c:	0800bff1 	.word	0x0800bff1
  {
    case USBH_HID_REQ_INIT:
    case USBH_HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	331c      	adds	r3, #28
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	4610      	mov	r0, r2
 800bf7e:	f000 fa17 	bl	800c3b0 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = USBH_HID_REQ_GET_REPORT_DESC;
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	2202      	movs	r2, #2
 800bf86:	715a      	strb	r2, [r3, #5]

      break;
 800bf88:	e05d      	b.n	800c046 <USBH_HID_ClassRequest+0x116>
    case USBH_HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bf8e:	4619      	mov	r1, r3
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 f965 	bl	800c260 <USBH_HID_GetHIDReportDescriptor>
 800bf96:	4603      	mov	r3, r0
 800bf98:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800bf9a:	7bbb      	ldrb	r3, [r7, #14]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d103      	bne.n	800bfa8 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = USBH_HID_REQ_SET_IDLE;
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	2204      	movs	r2, #4
 800bfa4:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 800bfa6:	e049      	b.n	800c03c <USBH_HID_ClassRequest+0x10c>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800bfa8:	7bbb      	ldrb	r3, [r7, #14]
 800bfaa:	2b03      	cmp	r3, #3
 800bfac:	d146      	bne.n	800c03c <USBH_HID_ClassRequest+0x10c>
        USBH_ErrLog("Control error: HID: Device Get Report Descriptor request failed");
 800bfae:	4828      	ldr	r0, [pc, #160]	@ (800c050 <USBH_HID_ClassRequest+0x120>)
 800bfb0:	f003 f8f6 	bl	800f1a0 <iprintf>
 800bfb4:	4827      	ldr	r0, [pc, #156]	@ (800c054 <USBH_HID_ClassRequest+0x124>)
 800bfb6:	f003 f8f3 	bl	800f1a0 <iprintf>
 800bfba:	200a      	movs	r0, #10
 800bfbc:	f003 f902 	bl	800f1c4 <putchar>
        status = USBH_FAIL;
 800bfc0:	2302      	movs	r3, #2
 800bfc2:	73fb      	strb	r3, [r7, #15]
      break;
 800bfc4:	e03a      	b.n	800c03c <USBH_HID_ClassRequest+0x10c>

    case USBH_HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	2100      	movs	r1, #0
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 f976 	bl	800c2bc <USBH_HID_SetIdle>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 800bfd4:	7bbb      	ldrb	r3, [r7, #14]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d103      	bne.n	800bfe2 <USBH_HID_ClassRequest+0xb2>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	2205      	movs	r2, #5
 800bfde:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 800bfe0:	e02e      	b.n	800c040 <USBH_HID_ClassRequest+0x110>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 800bfe2:	7bbb      	ldrb	r3, [r7, #14]
 800bfe4:	2b03      	cmp	r3, #3
 800bfe6:	d12b      	bne.n	800c040 <USBH_HID_ClassRequest+0x110>
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	2205      	movs	r2, #5
 800bfec:	715a      	strb	r2, [r3, #5]
      break;
 800bfee:	e027      	b.n	800c040 <USBH_HID_ClassRequest+0x110>

    case USBH_HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 800bff0:	2100      	movs	r1, #0
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 f9b6 	bl	800c364 <USBH_HID_SetProtocol>
 800bff8:	4603      	mov	r3, r0
 800bffa:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800bffc:	7bbb      	ldrb	r3, [r7, #14]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d10b      	bne.n	800c01a <USBH_HID_ClassRequest+0xea>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_IDLE;
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	2201      	movs	r2, #1
 800c006:	715a      	strb	r2, [r3, #5]

        /* all requests performed */
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800c00e:	2102      	movs	r1, #2
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	4798      	blx	r3
        status = USBH_OK;
 800c014:	2300      	movs	r3, #0
 800c016:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 800c018:	e014      	b.n	800c044 <USBH_HID_ClassRequest+0x114>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800c01a:	7bbb      	ldrb	r3, [r7, #14]
 800c01c:	2b03      	cmp	r3, #3
 800c01e:	d111      	bne.n	800c044 <USBH_HID_ClassRequest+0x114>
        USBH_ErrLog("Control error: HID: Device Set protocol request failed");
 800c020:	480b      	ldr	r0, [pc, #44]	@ (800c050 <USBH_HID_ClassRequest+0x120>)
 800c022:	f003 f8bd 	bl	800f1a0 <iprintf>
 800c026:	480c      	ldr	r0, [pc, #48]	@ (800c058 <USBH_HID_ClassRequest+0x128>)
 800c028:	f003 f8ba 	bl	800f1a0 <iprintf>
 800c02c:	200a      	movs	r0, #10
 800c02e:	f003 f8c9 	bl	800f1c4 <putchar>
        status = USBH_FAIL;
 800c032:	2302      	movs	r3, #2
 800c034:	73fb      	strb	r3, [r7, #15]
      break;
 800c036:	e005      	b.n	800c044 <USBH_HID_ClassRequest+0x114>

    case USBH_HID_REQ_IDLE:
    default:
      break;
 800c038:	bf00      	nop
 800c03a:	e004      	b.n	800c046 <USBH_HID_ClassRequest+0x116>
      break;
 800c03c:	bf00      	nop
 800c03e:	e002      	b.n	800c046 <USBH_HID_ClassRequest+0x116>
      break;
 800c040:	bf00      	nop
 800c042:	e000      	b.n	800c046 <USBH_HID_ClassRequest+0x116>
      break;
 800c044:	bf00      	nop
  }

  return status;
 800c046:	7bfb      	ldrb	r3, [r7, #15]
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3710      	adds	r7, #16
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	080104ac 	.word	0x080104ac
 800c054:	080104b4 	.word	0x080104b4
 800c058:	080104f4 	.word	0x080104f4

0800c05c <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b088      	sub	sp, #32
 800c060:	af02      	add	r7, sp, #8
 800c062:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c064:	2300      	movs	r3, #0
 800c066:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800c06e:	69db      	ldr	r3, [r3, #28]
 800c070:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	789b      	ldrb	r3, [r3, #2]
 800c076:	2b06      	cmp	r3, #6
 800c078:	f200 80c1 	bhi.w	800c1fe <USBH_HID_Process+0x1a2>
 800c07c:	a201      	add	r2, pc, #4	@ (adr r2, 800c084 <USBH_HID_Process+0x28>)
 800c07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c082:	bf00      	nop
 800c084:	0800c0a1 	.word	0x0800c0a1
 800c088:	0800c0d9 	.word	0x0800c0d9
 800c08c:	0800c1ff 	.word	0x0800c1ff
 800c090:	0800c1ff 	.word	0x0800c1ff
 800c094:	0800c149 	.word	0x0800c149
 800c098:	0800c133 	.word	0x0800c133
 800c09c:	0800c177 	.word	0x0800c177
  {
    case USBH_HID_INIT:
      status = HID_Handle->Init(phost);
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	4798      	blx	r3
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800c0ac:	7dfb      	ldrb	r3, [r7, #23]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d103      	bne.n	800c0ba <USBH_HID_Process+0x5e>
      {
        HID_Handle->state = USBH_HID_IDLE;
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c0b8:	e0a6      	b.n	800c208 <USBH_HID_Process+0x1ac>
        USBH_ErrLog("HID Class Init failed");
 800c0ba:	4856      	ldr	r0, [pc, #344]	@ (800c214 <USBH_HID_Process+0x1b8>)
 800c0bc:	f003 f870 	bl	800f1a0 <iprintf>
 800c0c0:	4855      	ldr	r0, [pc, #340]	@ (800c218 <USBH_HID_Process+0x1bc>)
 800c0c2:	f003 f86d 	bl	800f1a0 <iprintf>
 800c0c6:	200a      	movs	r0, #10
 800c0c8:	f003 f87c 	bl	800f1c4 <putchar>
        HID_Handle->state = USBH_HID_ERROR;
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	2207      	movs	r2, #7
 800c0d0:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800c0d2:	2302      	movs	r3, #2
 800c0d4:	75fb      	strb	r3, [r7, #23]
      break;
 800c0d6:	e097      	b.n	800c208 <USBH_HID_Process+0x1ac>

    case USBH_HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	695a      	ldr	r2, [r3, #20]
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	8b1b      	ldrh	r3, [r3, #24]
 800c0e0:	b2db      	uxtb	r3, r3
 800c0e2:	9300      	str	r3, [sp, #0]
 800c0e4:	4613      	mov	r3, r2
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	2101      	movs	r1, #1
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f000 f90e 	bl	800c30c <USBH_HID_GetReport>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800c0f4:	7dfb      	ldrb	r3, [r7, #23]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d103      	bne.n	800c102 <USBH_HID_Process+0xa6>
      {
        HID_Handle->state = USBH_HID_SYNC;
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	2205      	movs	r2, #5
 800c0fe:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c100:	e082      	b.n	800c208 <USBH_HID_Process+0x1ac>
      else if (status == USBH_BUSY)
 800c102:	7dfb      	ldrb	r3, [r7, #23]
 800c104:	2b01      	cmp	r3, #1
 800c106:	d105      	bne.n	800c114 <USBH_HID_Process+0xb8>
        HID_Handle->state = USBH_HID_IDLE;
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	2201      	movs	r2, #1
 800c10c:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800c10e:	2300      	movs	r3, #0
 800c110:	75fb      	strb	r3, [r7, #23]
      break;
 800c112:	e079      	b.n	800c208 <USBH_HID_Process+0x1ac>
      else if (status == USBH_NOT_SUPPORTED)
 800c114:	7dfb      	ldrb	r3, [r7, #23]
 800c116:	2b03      	cmp	r3, #3
 800c118:	d105      	bne.n	800c126 <USBH_HID_Process+0xca>
        HID_Handle->state = USBH_HID_SYNC;
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	2205      	movs	r2, #5
 800c11e:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800c120:	2300      	movs	r3, #0
 800c122:	75fb      	strb	r3, [r7, #23]
      break;
 800c124:	e070      	b.n	800c208 <USBH_HID_Process+0x1ac>
        HID_Handle->state = USBH_HID_ERROR;
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	2207      	movs	r2, #7
 800c12a:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800c12c:	2302      	movs	r3, #2
 800c12e:	75fb      	strb	r3, [r7, #23]
      break;
 800c130:	e06a      	b.n	800c208 <USBH_HID_Process+0x1ac>

    case USBH_HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 800c138:	f003 0301 	and.w	r3, r3, #1
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d060      	beq.n	800c202 <USBH_HID_Process+0x1a6>
      {
        HID_Handle->state = USBH_HID_GET_DATA;
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	2204      	movs	r2, #4
 800c144:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c146:	e05c      	b.n	800c202 <USBH_HID_Process+0x1a6>

    case USBH_HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800c150:	b2da      	uxtb	r2, r3
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	785b      	ldrb	r3, [r3, #1]
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f002 fa5b 	bl	800e612 <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = USBH_HID_POLL;
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	2206      	movs	r2, #6
 800c160:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8d3 2d7c 	ldr.w	r2, [r3, #3452]	@ 0xd7c
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	2200      	movs	r2, #0
 800c170:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      break;
 800c174:	e048      	b.n	800c208 <USBH_HID_Process+0x1ac>

    case USBH_HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	785b      	ldrb	r3, [r3, #1]
 800c17a:	4619      	mov	r1, r3
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f002 fd57 	bl	800ec30 <USBH_LL_GetURBState>
 800c182:	4603      	mov	r3, r0
 800c184:	2b01      	cmp	r3, #1
 800c186:	d124      	bne.n	800c1d2 <USBH_HID_Process+0x176>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	785b      	ldrb	r3, [r3, #1]
 800c18c:	4619      	mov	r1, r3
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f002 fcbc 	bl	800eb0c <USBH_LL_GetLastXferSize>
 800c194:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U) && (HID_Handle->fifo.buf != NULL))
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d132      	bne.n	800c206 <USBH_HID_Process+0x1aa>
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d02f      	beq.n	800c206 <USBH_HID_Process+0x1aa>
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	689b      	ldr	r3, [r3, #8]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d02b      	beq.n	800c206 <USBH_HID_Process+0x1aa>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	f103 0008 	add.w	r0, r3, #8
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	6959      	ldr	r1, [r3, #20]
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	8b1b      	ldrh	r3, [r3, #24]
 800c1bc:	461a      	mov	r2, r3
 800c1be:	f000 f9b7 	bl	800c530 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          USBH_HID_EventCallback(phost);
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f7f5 f838 	bl	8001240 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = USBH_HID_GET_DATA;
          }
        }
      }
      break;
 800c1d0:	e019      	b.n	800c206 <USBH_HID_Process+0x1aa>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	785b      	ldrb	r3, [r3, #1]
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f002 fd29 	bl	800ec30 <USBH_LL_GetURBState>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	2b05      	cmp	r3, #5
 800c1e2:	d110      	bne.n	800c206 <USBH_HID_Process+0x1aa>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	7e9b      	ldrb	r3, [r3, #26]
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f001 fcbe 	bl	800db6c <USBH_ClrFeature>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d107      	bne.n	800c206 <USBH_HID_Process+0x1aa>
            HID_Handle->state = USBH_HID_GET_DATA;
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	2204      	movs	r2, #4
 800c1fa:	709a      	strb	r2, [r3, #2]
      break;
 800c1fc:	e003      	b.n	800c206 <USBH_HID_Process+0x1aa>

    default:
      break;
 800c1fe:	bf00      	nop
 800c200:	e002      	b.n	800c208 <USBH_HID_Process+0x1ac>
      break;
 800c202:	bf00      	nop
 800c204:	e000      	b.n	800c208 <USBH_HID_Process+0x1ac>
      break;
 800c206:	bf00      	nop
  }

  return status;
 800c208:	7dfb      	ldrb	r3, [r7, #23]
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3718      	adds	r7, #24
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	080104ac 	.word	0x080104ac
 800c218:	0801052c 	.word	0x0801052c

0800c21c <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b085      	sub	sp, #20
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800c22a:	69db      	ldr	r3, [r3, #28]
 800c22c:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == USBH_HID_POLL)
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	789b      	ldrb	r3, [r3, #2]
 800c232:	2b06      	cmp	r3, #6
 800c234:	d10c      	bne.n	800c250 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f8d3 2d7c 	ldr.w	r2, [r3, #3452]	@ 0xd7c
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	6a1b      	ldr	r3, [r3, #32]
 800c240:	1ad3      	subs	r3, r2, r3
 800c242:	68fa      	ldr	r2, [r7, #12]
 800c244:	8b92      	ldrh	r2, [r2, #28]
 800c246:	4293      	cmp	r3, r2
 800c248:	d302      	bcc.n	800c250 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = USBH_HID_GET_DATA;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2204      	movs	r2, #4
 800c24e:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 800c250:	2300      	movs	r3, #0
}
 800c252:	4618      	mov	r0, r3
 800c254:	3714      	adds	r7, #20
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr
	...

0800c260 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b086      	sub	sp, #24
 800c264:	af02      	add	r7, sp, #8
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	460b      	mov	r3, r1
 800c26a:	807b      	strh	r3, [r7, #2]

  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800c26c:	887b      	ldrh	r3, [r7, #2]
 800c26e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800c272:	4293      	cmp	r3, r2
 800c274:	d90a      	bls.n	800c28c <USBH_HID_GetHIDReportDescriptor+0x2c>
  {
    USBH_ErrLog("Control error: Get HID Report Descriptor failed, data buffer size issue");
 800c276:	480f      	ldr	r0, [pc, #60]	@ (800c2b4 <USBH_HID_GetHIDReportDescriptor+0x54>)
 800c278:	f002 ff92 	bl	800f1a0 <iprintf>
 800c27c:	480e      	ldr	r0, [pc, #56]	@ (800c2b8 <USBH_HID_GetHIDReportDescriptor+0x58>)
 800c27e:	f002 ff8f 	bl	800f1a0 <iprintf>
 800c282:	200a      	movs	r0, #10
 800c284:	f002 ff9e 	bl	800f1c4 <putchar>
    return USBH_NOT_SUPPORTED;
 800c288:	2303      	movs	r3, #3
 800c28a:	e00e      	b.n	800c2aa <USBH_HID_GetHIDReportDescriptor+0x4a>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800c292:	887b      	ldrh	r3, [r7, #2]
 800c294:	9300      	str	r3, [sp, #0]
 800c296:	4613      	mov	r3, r2
 800c298:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
 800c29c:	2101      	movs	r1, #1
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f001 fbc4 	bl	800da2c <USBH_GetDescriptor>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800c2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	080104ac 	.word	0x080104ac
 800c2b8:	08010544 	.word	0x08010544

0800c2bc <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b082      	sub	sp, #8
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	70fb      	strb	r3, [r7, #3]
 800c2c8:	4613      	mov	r3, r2
 800c2ca:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2221      	movs	r2, #33	@ 0x21
 800c2d0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	220a      	movs	r2, #10
 800c2d6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 800c2d8:	78fb      	ldrb	r3, [r7, #3]
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	021b      	lsls	r3, r3, #8
 800c2de:	b29a      	uxth	r2, r3
 800c2e0:	78bb      	ldrb	r3, [r7, #2]
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	b29a      	uxth	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	2100      	movs	r1, #0
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f001 ff6b 	bl	800e1d8 <USBH_CtlReq>
 800c302:	4603      	mov	r3, r0
}
 800c304:	4618      	mov	r0, r3
 800c306:	3708      	adds	r7, #8
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	607b      	str	r3, [r7, #4]
 800c316:	460b      	mov	r3, r1
 800c318:	72fb      	strb	r3, [r7, #11]
 800c31a:	4613      	mov	r3, r2
 800c31c:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	22a1      	movs	r2, #161	@ 0xa1
 800c322:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2201      	movs	r2, #1
 800c328:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800c32a:	7afb      	ldrb	r3, [r7, #11]
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	021b      	lsls	r3, r3, #8
 800c330:	b29a      	uxth	r2, r3
 800c332:	7abb      	ldrb	r3, [r7, #10]
 800c334:	b29b      	uxth	r3, r3
 800c336:	4313      	orrs	r3, r2
 800c338:	b29a      	uxth	r2, r3
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2200      	movs	r2, #0
 800c342:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800c344:	7e3b      	ldrb	r3, [r7, #24]
 800c346:	b29a      	uxth	r2, r3
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800c34c:	7e3b      	ldrb	r3, [r7, #24]
 800c34e:	b29b      	uxth	r3, r3
 800c350:	461a      	mov	r2, r3
 800c352:	6879      	ldr	r1, [r7, #4]
 800c354:	68f8      	ldr	r0, [r7, #12]
 800c356:	f001 ff3f 	bl	800e1d8 <USBH_CtlReq>
 800c35a:	4603      	mov	r3, r0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b082      	sub	sp, #8
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	460b      	mov	r3, r1
 800c36e:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2221      	movs	r2, #33	@ 0x21
 800c374:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	220b      	movs	r2, #11
 800c37a:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 800c37c:	78fb      	ldrb	r3, [r7, #3]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d003      	beq.n	800c38a <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2200      	movs	r2, #0
 800c386:	825a      	strh	r2, [r3, #18]
 800c388:	e002      	b.n	800c390 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2201      	movs	r2, #1
 800c38e:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2200      	movs	r2, #0
 800c39a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800c39c:	2200      	movs	r2, #0
 800c39e:	2100      	movs	r1, #0
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f001 ff19 	bl	800e1d8 <USBH_CtlReq>
 800c3a6:	4603      	mov	r3, r0

}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3708      	adds	r7, #8
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	3302      	adds	r3, #2
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	3303      	adds	r3, #3
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	021b      	lsls	r3, r3, #8
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800c3d4:	897b      	ldrh	r3, [r7, #10]
 800c3d6:	2b09      	cmp	r3, #9
 800c3d8:	d941      	bls.n	800c45e <USBH_HID_ParseHIDDesc+0xae>
  {
    ptr = USB_LEN_CFG_DESC;
 800c3da:	2309      	movs	r3, #9
 800c3dc:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 800c3de:	e03a      	b.n	800c456 <USBH_HID_ParseHIDDesc+0xa6>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c3e0:	f107 0308 	add.w	r3, r7, #8
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	68f8      	ldr	r0, [r7, #12]
 800c3e8:	f001 fedc 	bl	800e1a4 <USBH_GetNextDesc>
 800c3ec:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	785b      	ldrb	r3, [r3, #1]
 800c3f2:	2b21      	cmp	r3, #33	@ 0x21
 800c3f4:	d12f      	bne.n	800c456 <USBH_HID_ParseHIDDesc+0xa6>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	781a      	ldrb	r2, [r3, #0]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	785a      	ldrb	r2, [r3, #1]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	3302      	adds	r3, #2
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	461a      	mov	r2, r3
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	3303      	adds	r3, #3
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	021b      	lsls	r3, r3, #8
 800c416:	b29b      	uxth	r3, r3
 800c418:	4313      	orrs	r3, r2
 800c41a:	b29a      	uxth	r2, r3
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	791a      	ldrb	r2, [r3, #4]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	795a      	ldrb	r2, [r3, #5]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	799a      	ldrb	r2, [r3, #6]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	3307      	adds	r3, #7
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	461a      	mov	r2, r3
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	3308      	adds	r3, #8
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	021b      	lsls	r3, r3, #8
 800c448:	b29b      	uxth	r3, r3
 800c44a:	4313      	orrs	r3, r2
 800c44c:	b29a      	uxth	r2, r3
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	811a      	strh	r2, [r3, #8]
        break;
 800c452:	bf00      	nop
      }
    }
  }
}
 800c454:	e003      	b.n	800c45e <USBH_HID_ParseHIDDesc+0xae>
    while (ptr < CfgDescLen)
 800c456:	893b      	ldrh	r3, [r7, #8]
 800c458:	897a      	ldrh	r2, [r7, #10]
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d8c0      	bhi.n	800c3e0 <USBH_HID_ParseHIDDesc+0x30>
}
 800c45e:	bf00      	nop
 800c460:	3710      	adds	r7, #16
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}

0800c466 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 800c466:	b480      	push	{r7}
 800c468:	b085      	sub	sp, #20
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	60f8      	str	r0, [r7, #12]
 800c46e:	60b9      	str	r1, [r7, #8]
 800c470:	4613      	mov	r3, r2
 800c472:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2200      	movs	r2, #0
 800c478:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2200      	movs	r2, #0
 800c47e:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	2200      	movs	r2, #0
 800c484:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	88fa      	ldrh	r2, [r7, #6]
 800c48a:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	68ba      	ldr	r2, [r7, #8]
 800c490:	601a      	str	r2, [r3, #0]
}
 800c492:	bf00      	nop
 800c494:	3714      	adds	r7, #20
 800c496:	46bd      	mov	sp, r7
 800c498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49c:	4770      	bx	lr

0800c49e <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 800c49e:	b480      	push	{r7}
 800c4a0:	b087      	sub	sp, #28
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	60f8      	str	r0, [r7, #12]
 800c4a6:	60b9      	str	r1, [r7, #8]
 800c4a8:	4613      	mov	r3, r2
 800c4aa:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	7a9b      	ldrb	r3, [r3, #10]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d131      	bne.n	800c51c <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800c4be:	2300      	movs	r3, #0
 800c4c0:	82fb      	strh	r3, [r7, #22]
 800c4c2:	e027      	b.n	800c514 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	88da      	ldrh	r2, [r3, #6]
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	889b      	ldrh	r3, [r3, #4]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d019      	beq.n	800c504 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	68fa      	ldr	r2, [r7, #12]
 800c4d6:	88d2      	ldrh	r2, [r2, #6]
 800c4d8:	441a      	add	r2, r3
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	1c59      	adds	r1, r3, #1
 800c4de:	6139      	str	r1, [r7, #16]
 800c4e0:	7812      	ldrb	r2, [r2, #0]
 800c4e2:	701a      	strb	r2, [r3, #0]
        f->tail++;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	88db      	ldrh	r3, [r3, #6]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	b29a      	uxth	r2, r3
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	88da      	ldrh	r2, [r3, #6]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	891b      	ldrh	r3, [r3, #8]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d108      	bne.n	800c50e <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2200      	movs	r2, #0
 800c500:	80da      	strh	r2, [r3, #6]
 800c502:	e004      	b.n	800c50e <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2200      	movs	r2, #0
 800c508:	729a      	strb	r2, [r3, #10]
        return i;
 800c50a:	8afb      	ldrh	r3, [r7, #22]
 800c50c:	e00a      	b.n	800c524 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 800c50e:	8afb      	ldrh	r3, [r7, #22]
 800c510:	3301      	adds	r3, #1
 800c512:	82fb      	strh	r3, [r7, #22]
 800c514:	8afa      	ldrh	r2, [r7, #22]
 800c516:	88fb      	ldrh	r3, [r7, #6]
 800c518:	429a      	cmp	r2, r3
 800c51a:	d3d3      	bcc.n	800c4c4 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2200      	movs	r2, #0
 800c520:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800c522:	88fb      	ldrh	r3, [r7, #6]
}
 800c524:	4618      	mov	r0, r3
 800c526:	371c      	adds	r7, #28
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr

0800c530 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800c530:	b480      	push	{r7}
 800c532:	b087      	sub	sp, #28
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	4613      	mov	r3, r2
 800c53c:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	7a9b      	ldrb	r3, [r3, #10]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d13c      	bne.n	800c5c4 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2201      	movs	r2, #1
 800c54e:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800c550:	2300      	movs	r3, #0
 800c552:	82fb      	strh	r3, [r7, #22]
 800c554:	e032      	b.n	800c5bc <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	889b      	ldrh	r3, [r3, #4]
 800c55a:	3301      	adds	r3, #1
 800c55c:	68fa      	ldr	r2, [r7, #12]
 800c55e:	88d2      	ldrh	r2, [r2, #6]
 800c560:	4293      	cmp	r3, r2
 800c562:	d00a      	beq.n	800c57a <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	889b      	ldrh	r3, [r3, #4]
 800c568:	3301      	adds	r3, #1
 800c56a:	68fa      	ldr	r2, [r7, #12]
 800c56c:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 800c56e:	4293      	cmp	r3, r2
 800c570:	d108      	bne.n	800c584 <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	88db      	ldrh	r3, [r3, #6]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d104      	bne.n	800c584 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2200      	movs	r2, #0
 800c57e:	729a      	strb	r2, [r3, #10]
        return i;
 800c580:	8afb      	ldrh	r3, [r7, #22]
 800c582:	e023      	b.n	800c5cc <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	1c5a      	adds	r2, r3, #1
 800c588:	613a      	str	r2, [r7, #16]
 800c58a:	68fa      	ldr	r2, [r7, #12]
 800c58c:	6812      	ldr	r2, [r2, #0]
 800c58e:	68f9      	ldr	r1, [r7, #12]
 800c590:	8889      	ldrh	r1, [r1, #4]
 800c592:	440a      	add	r2, r1
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	7013      	strb	r3, [r2, #0]
        f->head++;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	889b      	ldrh	r3, [r3, #4]
 800c59c:	3301      	adds	r3, #1
 800c59e:	b29a      	uxth	r2, r3
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	889a      	ldrh	r2, [r3, #4]
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	891b      	ldrh	r3, [r3, #8]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d102      	bne.n	800c5b6 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 800c5b6:	8afb      	ldrh	r3, [r7, #22]
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	82fb      	strh	r3, [r7, #22]
 800c5bc:	8afa      	ldrh	r2, [r7, #22]
 800c5be:	88fb      	ldrh	r3, [r7, #6]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d3c8      	bcc.n	800c556 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800c5ca:	88fb      	ldrh	r3, [r7, #6]
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	371c      	adds	r7, #28
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr

0800c5d8 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b084      	sub	sp, #16
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800c5e6:	69db      	ldr	r3, [r3, #28]
 800c5e8:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 800c5ea:	4b22      	ldr	r3, [pc, #136]	@ (800c674 <USBH_HID_KeybdInit+0x9c>)
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 800c5f0:	4b20      	ldr	r3, [pc, #128]	@ (800c674 <USBH_HID_KeybdInit+0x9c>)
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 800c5f6:	4b1f      	ldr	r3, [pc, #124]	@ (800c674 <USBH_HID_KeybdInit+0x9c>)
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 800c5fc:	4b1d      	ldr	r3, [pc, #116]	@ (800c674 <USBH_HID_KeybdInit+0x9c>)
 800c5fe:	2200      	movs	r2, #0
 800c600:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 800c602:	4b1c      	ldr	r3, [pc, #112]	@ (800c674 <USBH_HID_KeybdInit+0x9c>)
 800c604:	2200      	movs	r2, #0
 800c606:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 800c608:	4b1a      	ldr	r3, [pc, #104]	@ (800c674 <USBH_HID_KeybdInit+0x9c>)
 800c60a:	2200      	movs	r2, #0
 800c60c:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 800c60e:	4b19      	ldr	r3, [pc, #100]	@ (800c674 <USBH_HID_KeybdInit+0x9c>)
 800c610:	2200      	movs	r2, #0
 800c612:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 800c614:	4b17      	ldr	r3, [pc, #92]	@ (800c674 <USBH_HID_KeybdInit+0x9c>)
 800c616:	2200      	movs	r2, #0
 800c618:	721a      	strb	r2, [r3, #8]

  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800c61a:	2300      	movs	r3, #0
 800c61c:	60fb      	str	r3, [r7, #12]
 800c61e:	e00c      	b.n	800c63a <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 800c620:	4a15      	ldr	r2, [pc, #84]	@ (800c678 <USBH_HID_KeybdInit+0xa0>)
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	4413      	add	r3, r2
 800c626:	2200      	movs	r2, #0
 800c628:	701a      	strb	r2, [r3, #0]
    keybd_rx_report_buf[x] = 0U;
 800c62a:	4a14      	ldr	r2, [pc, #80]	@ (800c67c <USBH_HID_KeybdInit+0xa4>)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	4413      	add	r3, r2
 800c630:	2200      	movs	r2, #0
 800c632:	701a      	strb	r2, [r3, #0]
  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	3301      	adds	r3, #1
 800c638:	60fb      	str	r3, [r7, #12]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2b07      	cmp	r3, #7
 800c63e:	d9ef      	bls.n	800c620 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	8b1b      	ldrh	r3, [r3, #24]
 800c644:	2b08      	cmp	r3, #8
 800c646:	d902      	bls.n	800c64e <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	2208      	movs	r2, #8
 800c64c:	831a      	strh	r2, [r3, #24]
  }

  HID_Handle->pData = keybd_rx_report_buf;
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	4a0a      	ldr	r2, [pc, #40]	@ (800c67c <USBH_HID_KeybdInit+0xa4>)
 800c652:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	f103 0008 	add.w	r0, r3, #8
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c660:	2250      	movs	r2, #80	@ 0x50
 800c662:	4619      	mov	r1, r3
 800c664:	f7ff feff 	bl	800c466 <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800c668:	2300      	movs	r3, #0
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3710      	adds	r7, #16
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	2001193c 	.word	0x2001193c
 800c678:	20011954 	.word	0x20011954
 800c67c:	2001194c 	.word	0x2001194c

0800c680 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 f80d 	bl	800c6a8 <USBH_HID_KeybdDecode>
 800c68e:	4603      	mov	r3, r0
 800c690:	2b00      	cmp	r3, #0
 800c692:	d101      	bne.n	800c698 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 800c694:	4b03      	ldr	r3, [pc, #12]	@ (800c6a4 <USBH_HID_GetKeybdInfo+0x24>)
 800c696:	e000      	b.n	800c69a <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800c698:	2300      	movs	r3, #0
  }
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3708      	adds	r7, #8
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	2001193c 	.word	0x2001193c

0800c6a8 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800c6b6:	69db      	ldr	r3, [r3, #28]
 800c6b8:	60bb      	str	r3, [r7, #8]

  if ((HID_Handle->length == 0U) || (HID_Handle->fifo.buf == NULL))
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	8b1b      	ldrh	r3, [r3, #24]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d003      	beq.n	800c6ca <USBH_HID_KeybdDecode+0x22>
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	689b      	ldr	r3, [r3, #8]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d101      	bne.n	800c6ce <USBH_HID_KeybdDecode+0x26>
  {
    return USBH_FAIL;
 800c6ca:	2302      	movs	r3, #2
 800c6cc:	e066      	b.n	800c79c <USBH_HID_KeybdDecode+0xf4>
  }

  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	f103 0008 	add.w	r0, r3, #8
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	8b1b      	ldrh	r3, [r3, #24]
 800c6d8:	461a      	mov	r2, r3
 800c6da:	4932      	ldr	r1, [pc, #200]	@ (800c7a4 <USBH_HID_KeybdDecode+0xfc>)
 800c6dc:	f7ff fedf 	bl	800c49e <USBH_HID_FifoRead>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	8b1b      	ldrh	r3, [r3, #24]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d156      	bne.n	800c79a <USBH_HID_KeybdDecode+0xf2>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 800c6ec:	2100      	movs	r1, #0
 800c6ee:	482e      	ldr	r0, [pc, #184]	@ (800c7a8 <USBH_HID_KeybdDecode+0x100>)
 800c6f0:	f000 f8e4 	bl	800c8bc <HID_ReadItem>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	b2da      	uxtb	r2, r3
 800c6f8:	4b2c      	ldr	r3, [pc, #176]	@ (800c7ac <USBH_HID_KeybdDecode+0x104>)
 800c6fa:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800c6fc:	2100      	movs	r1, #0
 800c6fe:	482c      	ldr	r0, [pc, #176]	@ (800c7b0 <USBH_HID_KeybdDecode+0x108>)
 800c700:	f000 f8dc 	bl	800c8bc <HID_ReadItem>
 800c704:	4603      	mov	r3, r0
 800c706:	b2da      	uxtb	r2, r3
 800c708:	4b28      	ldr	r3, [pc, #160]	@ (800c7ac <USBH_HID_KeybdDecode+0x104>)
 800c70a:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 800c70c:	2100      	movs	r1, #0
 800c70e:	4829      	ldr	r0, [pc, #164]	@ (800c7b4 <USBH_HID_KeybdDecode+0x10c>)
 800c710:	f000 f8d4 	bl	800c8bc <HID_ReadItem>
 800c714:	4603      	mov	r3, r0
 800c716:	b2da      	uxtb	r2, r3
 800c718:	4b24      	ldr	r3, [pc, #144]	@ (800c7ac <USBH_HID_KeybdDecode+0x104>)
 800c71a:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800c71c:	2100      	movs	r1, #0
 800c71e:	4826      	ldr	r0, [pc, #152]	@ (800c7b8 <USBH_HID_KeybdDecode+0x110>)
 800c720:	f000 f8cc 	bl	800c8bc <HID_ReadItem>
 800c724:	4603      	mov	r3, r0
 800c726:	b2da      	uxtb	r2, r3
 800c728:	4b20      	ldr	r3, [pc, #128]	@ (800c7ac <USBH_HID_KeybdDecode+0x104>)
 800c72a:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800c72c:	2100      	movs	r1, #0
 800c72e:	4823      	ldr	r0, [pc, #140]	@ (800c7bc <USBH_HID_KeybdDecode+0x114>)
 800c730:	f000 f8c4 	bl	800c8bc <HID_ReadItem>
 800c734:	4603      	mov	r3, r0
 800c736:	b2da      	uxtb	r2, r3
 800c738:	4b1c      	ldr	r3, [pc, #112]	@ (800c7ac <USBH_HID_KeybdDecode+0x104>)
 800c73a:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 800c73c:	2100      	movs	r1, #0
 800c73e:	4820      	ldr	r0, [pc, #128]	@ (800c7c0 <USBH_HID_KeybdDecode+0x118>)
 800c740:	f000 f8bc 	bl	800c8bc <HID_ReadItem>
 800c744:	4603      	mov	r3, r0
 800c746:	b2da      	uxtb	r2, r3
 800c748:	4b18      	ldr	r3, [pc, #96]	@ (800c7ac <USBH_HID_KeybdDecode+0x104>)
 800c74a:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 800c74c:	2100      	movs	r1, #0
 800c74e:	481d      	ldr	r0, [pc, #116]	@ (800c7c4 <USBH_HID_KeybdDecode+0x11c>)
 800c750:	f000 f8b4 	bl	800c8bc <HID_ReadItem>
 800c754:	4603      	mov	r3, r0
 800c756:	b2da      	uxtb	r2, r3
 800c758:	4b14      	ldr	r3, [pc, #80]	@ (800c7ac <USBH_HID_KeybdDecode+0x104>)
 800c75a:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 800c75c:	2100      	movs	r1, #0
 800c75e:	481a      	ldr	r0, [pc, #104]	@ (800c7c8 <USBH_HID_KeybdDecode+0x120>)
 800c760:	f000 f8ac 	bl	800c8bc <HID_ReadItem>
 800c764:	4603      	mov	r3, r0
 800c766:	b2da      	uxtb	r2, r3
 800c768:	4b10      	ldr	r3, [pc, #64]	@ (800c7ac <USBH_HID_KeybdDecode+0x104>)
 800c76a:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800c76c:	2300      	movs	r3, #0
 800c76e:	73fb      	strb	r3, [r7, #15]
 800c770:	e00e      	b.n	800c790 <USBH_HID_KeybdDecode+0xe8>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800c772:	7bfb      	ldrb	r3, [r7, #15]
 800c774:	4619      	mov	r1, r3
 800c776:	4815      	ldr	r0, [pc, #84]	@ (800c7cc <USBH_HID_KeybdDecode+0x124>)
 800c778:	f000 f8a0 	bl	800c8bc <HID_ReadItem>
 800c77c:	4602      	mov	r2, r0
 800c77e:	7bfb      	ldrb	r3, [r7, #15]
 800c780:	b2d1      	uxtb	r1, r2
 800c782:	4a0a      	ldr	r2, [pc, #40]	@ (800c7ac <USBH_HID_KeybdDecode+0x104>)
 800c784:	4413      	add	r3, r2
 800c786:	460a      	mov	r2, r1
 800c788:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800c78a:	7bfb      	ldrb	r3, [r7, #15]
 800c78c:	3301      	adds	r3, #1
 800c78e:	73fb      	strb	r3, [r7, #15]
 800c790:	7bfb      	ldrb	r3, [r7, #15]
 800c792:	2b05      	cmp	r3, #5
 800c794:	d9ed      	bls.n	800c772 <USBH_HID_KeybdDecode+0xca>
    }

    return USBH_OK;
 800c796:	2300      	movs	r3, #0
 800c798:	e000      	b.n	800c79c <USBH_HID_KeybdDecode+0xf4>
  }
  return   USBH_FAIL;
 800c79a:	2302      	movs	r3, #2
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3710      	adds	r7, #16
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	20011954 	.word	0x20011954
 800c7a8:	08012a84 	.word	0x08012a84
 800c7ac:	2001193c 	.word	0x2001193c
 800c7b0:	08012aa4 	.word	0x08012aa4
 800c7b4:	08012ac4 	.word	0x08012ac4
 800c7b8:	08012ae4 	.word	0x08012ae4
 800c7bc:	08012b04 	.word	0x08012b04
 800c7c0:	08012b24 	.word	0x08012b24
 800c7c4:	08012b44 	.word	0x08012b44
 800c7c8:	08012b64 	.word	0x08012b64
 800c7cc:	08012b84 	.word	0x08012b84

0800c7d0 <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b085      	sub	sp, #20
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	789b      	ldrb	r3, [r3, #2]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d103      	bne.n	800c7e8 <USBH_HID_GetASCIICode+0x18>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	799b      	ldrb	r3, [r3, #6]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d009      	beq.n	800c7fc <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	7a5b      	ldrb	r3, [r3, #9]
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	4b0b      	ldr	r3, [pc, #44]	@ (800c81c <USBH_HID_GetASCIICode+0x4c>)
 800c7f0:	5c9b      	ldrb	r3, [r3, r2]
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	4b0a      	ldr	r3, [pc, #40]	@ (800c820 <USBH_HID_GetASCIICode+0x50>)
 800c7f6:	5c9b      	ldrb	r3, [r3, r2]
 800c7f8:	73fb      	strb	r3, [r7, #15]
 800c7fa:	e008      	b.n	800c80e <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	7a5b      	ldrb	r3, [r3, #9]
 800c800:	461a      	mov	r2, r3
 800c802:	4b06      	ldr	r3, [pc, #24]	@ (800c81c <USBH_HID_GetASCIICode+0x4c>)
 800c804:	5c9b      	ldrb	r3, [r3, r2]
 800c806:	461a      	mov	r2, r3
 800c808:	4b06      	ldr	r3, [pc, #24]	@ (800c824 <USBH_HID_GetASCIICode+0x54>)
 800c80a:	5c9b      	ldrb	r3, [r3, r2]
 800c80c:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 800c80e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c810:	4618      	mov	r0, r3
 800c812:	3714      	adds	r7, #20
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr
 800c81c:	08012cac 	.word	0x08012cac
 800c820:	08012c28 	.word	0x08012c28
 800c824:	08012ba4 	.word	0x08012ba4

0800c828 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b084      	sub	sp, #16
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800c836:	69db      	ldr	r3, [r3, #28]
 800c838:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 800c83a:	4b1d      	ldr	r3, [pc, #116]	@ (800c8b0 <USBH_HID_MouseInit+0x88>)
 800c83c:	2200      	movs	r2, #0
 800c83e:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 800c840:	4b1b      	ldr	r3, [pc, #108]	@ (800c8b0 <USBH_HID_MouseInit+0x88>)
 800c842:	2200      	movs	r2, #0
 800c844:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 800c846:	4b1a      	ldr	r3, [pc, #104]	@ (800c8b0 <USBH_HID_MouseInit+0x88>)
 800c848:	2200      	movs	r2, #0
 800c84a:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 800c84c:	4b18      	ldr	r3, [pc, #96]	@ (800c8b0 <USBH_HID_MouseInit+0x88>)
 800c84e:	2200      	movs	r2, #0
 800c850:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 800c852:	4b17      	ldr	r3, [pc, #92]	@ (800c8b0 <USBH_HID_MouseInit+0x88>)
 800c854:	2200      	movs	r2, #0
 800c856:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800c858:	2300      	movs	r3, #0
 800c85a:	60fb      	str	r3, [r7, #12]
 800c85c:	e00c      	b.n	800c878 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 800c85e:	4a15      	ldr	r2, [pc, #84]	@ (800c8b4 <USBH_HID_MouseInit+0x8c>)
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	4413      	add	r3, r2
 800c864:	2200      	movs	r2, #0
 800c866:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 800c868:	4a13      	ldr	r2, [pc, #76]	@ (800c8b8 <USBH_HID_MouseInit+0x90>)
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	4413      	add	r3, r2
 800c86e:	2200      	movs	r2, #0
 800c870:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	3301      	adds	r3, #1
 800c876:	60fb      	str	r3, [r7, #12]
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2b07      	cmp	r3, #7
 800c87c:	d9ef      	bls.n	800c85e <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	8b1b      	ldrh	r3, [r3, #24]
 800c882:	2b08      	cmp	r3, #8
 800c884:	d902      	bls.n	800c88c <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	2208      	movs	r2, #8
 800c88a:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = mouse_rx_report_buf;
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	4a0a      	ldr	r2, [pc, #40]	@ (800c8b8 <USBH_HID_MouseInit+0x90>)
 800c890:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	f103 0008 	add.w	r0, r3, #8
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c89e:	2250      	movs	r2, #80	@ 0x50
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	f7ff fde0 	bl	800c466 <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800c8a6:	2300      	movs	r3, #0
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3710      	adds	r7, #16
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	2001195c 	.word	0x2001195c
 800c8b4:	20011964 	.word	0x20011964
 800c8b8:	2001196c 	.word	0x2001196c

0800c8bc <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b089      	sub	sp, #36	@ 0x24
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	7a1b      	ldrb	r3, [r3, #8]
 800c8da:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, we may need to offset ri->data.*/
  if (ri->count > 0U)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	7a5b      	ldrb	r3, [r3, #9]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d01a      	beq.n	800c91a <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	7a5b      	ldrb	r3, [r3, #9]
 800c8e8:	78fa      	ldrb	r2, [r7, #3]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d301      	bcc.n	800c8f2 <HID_ReadItem+0x36>
    {
      return (0U);
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	e078      	b.n	800c9e4 <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800c8f2:	78fb      	ldrb	r3, [r7, #3]
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	6852      	ldr	r2, [r2, #4]
 800c8f8:	fb02 f303 	mul.w	r3, r2, r3
 800c8fc:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800c8fe:	7cfb      	ldrb	r3, [r7, #19]
 800c900:	68fa      	ldr	r2, [r7, #12]
 800c902:	4413      	add	r3, r2
 800c904:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	08db      	lsrs	r3, r3, #3
 800c90a:	697a      	ldr	r2, [r7, #20]
 800c90c:	4413      	add	r3, r2
 800c90e:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	b2db      	uxtb	r3, r3
 800c914:	f003 0307 	and.w	r3, r3, #7
 800c918:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800c91a:	2300      	movs	r3, #0
 800c91c:	61bb      	str	r3, [r7, #24]
 800c91e:	e00a      	b.n	800c936 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	461a      	mov	r2, r3
 800c926:	69bb      	ldr	r3, [r7, #24]
 800c928:	00db      	lsls	r3, r3, #3
 800c92a:	fa02 f303 	lsl.w	r3, r2, r3
 800c92e:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800c930:	69bb      	ldr	r3, [r7, #24]
 800c932:	3301      	adds	r3, #1
 800c934:	61bb      	str	r3, [r7, #24]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	f003 0307 	and.w	r3, r3, #7
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d004      	beq.n	800c94c <HID_ReadItem+0x90>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	08db      	lsrs	r3, r3, #3
 800c948:	3301      	adds	r3, #1
 800c94a:	e002      	b.n	800c952 <HID_ReadItem+0x96>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	08db      	lsrs	r3, r3, #3
 800c952:	69ba      	ldr	r2, [r7, #24]
 800c954:	4293      	cmp	r3, r2
 800c956:	d8e3      	bhi.n	800c920 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 800c958:	7cfb      	ldrb	r3, [r7, #19]
 800c95a:	69fa      	ldr	r2, [r7, #28]
 800c95c:	40da      	lsrs	r2, r3
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	f04f 31ff 	mov.w	r1, #4294967295
 800c966:	fa01 f303 	lsl.w	r3, r1, r3
 800c96a:	43db      	mvns	r3, r3
 800c96c:	4013      	ands	r3, r2
 800c96e:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	68db      	ldr	r3, [r3, #12]
 800c974:	69fa      	ldr	r2, [r7, #28]
 800c976:	429a      	cmp	r2, r3
 800c978:	d304      	bcc.n	800c984 <HID_ReadItem+0xc8>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	691b      	ldr	r3, [r3, #16]
 800c97e:	69fa      	ldr	r2, [r7, #28]
 800c980:	429a      	cmp	r2, r3
 800c982:	d901      	bls.n	800c988 <HID_ReadItem+0xcc>
  {
    return (0U);
 800c984:	2300      	movs	r3, #0
 800c986:	e02d      	b.n	800c9e4 <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	7a9b      	ldrb	r3, [r3, #10]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d01e      	beq.n	800c9ce <HID_ReadItem+0x112>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	3b01      	subs	r3, #1
 800c996:	69fa      	ldr	r2, [r7, #28]
 800c998:	fa22 f303 	lsr.w	r3, r2, r3
 800c99c:	f003 0301 	and.w	r3, r3, #1
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d014      	beq.n	800c9ce <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	fa02 f303 	lsl.w	r3, r2, r3
 800c9ae:	425b      	negs	r3, r3
 800c9b0:	69fa      	ldr	r2, [r7, #28]
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	69db      	ldr	r3, [r3, #28]
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d101      	bne.n	800c9c2 <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	e010      	b.n	800c9e4 <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	69db      	ldr	r3, [r3, #28]
 800c9c6:	68ba      	ldr	r2, [r7, #8]
 800c9c8:	fb02 f303 	mul.w	r3, r2, r3
 800c9cc:	e00a      	b.n	800c9e4 <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	69db      	ldr	r3, [r3, #28]
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	d101      	bne.n	800c9da <HID_ReadItem+0x11e>
    {
      return (val);
 800c9d6:	69fb      	ldr	r3, [r7, #28]
 800c9d8:	e004      	b.n	800c9e4 <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	69db      	ldr	r3, [r3, #28]
 800c9de:	69fa      	ldr	r2, [r7, #28]
 800c9e0:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3724      	adds	r7, #36	@ 0x24
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr

0800c9f0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	4613      	mov	r3, r2
 800c9fc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d10a      	bne.n	800ca1a <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800ca04:	481c      	ldr	r0, [pc, #112]	@ (800ca78 <USBH_Init+0x88>)
 800ca06:	f002 fbcb 	bl	800f1a0 <iprintf>
 800ca0a:	481c      	ldr	r0, [pc, #112]	@ (800ca7c <USBH_Init+0x8c>)
 800ca0c:	f002 fbc8 	bl	800f1a0 <iprintf>
 800ca10:	200a      	movs	r0, #10
 800ca12:	f002 fbd7 	bl	800f1c4 <putchar>
    return USBH_FAIL;
 800ca16:	2302      	movs	r3, #2
 800ca18:	e029      	b.n	800ca6e <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	79fa      	ldrb	r2, [r7, #7]
 800ca1e:	f883 2d84 	strb.w	r2, [r3, #3460]	@ 0xd84

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2200      	movs	r2, #0
 800ca26:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
  phost->ClassNumber = 0U;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	f8c3 2d38 	str.w	r2, [r3, #3384]	@ 0xd38

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ca32:	68f8      	ldr	r0, [r7, #12]
 800ca34:	f000 f824 	bl	800ca80 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb
  phost->device.is_connected = 0U;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2200      	movs	r2, #0
 800ca44:	f883 2cd8 	strb.w	r2, [r3, #3288]	@ 0xcd8
  phost->device.is_disconnected = 0U;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9
  phost->device.is_ReEnumerated = 0U;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2200      	movs	r2, #0
 800ca54:	f883 2cda 	strb.w	r2, [r3, #3290]	@ 0xcda

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d003      	beq.n	800ca66 <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	68ba      	ldr	r2, [r7, #8]
 800ca62:	f8c3 2d8c 	str.w	r2, [r3, #3468]	@ 0xd8c

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800ca66:	68f8      	ldr	r0, [r7, #12]
 800ca68:	f001 ff9c 	bl	800e9a4 <USBH_LL_Init>

  return USBH_OK;
 800ca6c:	2300      	movs	r3, #0
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3710      	adds	r7, #16
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	080105d0 	.word	0x080105d0
 800ca7c:	080105d8 	.word	0x080105d8

0800ca80 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	60fb      	str	r3, [r7, #12]
 800ca90:	e00a      	b.n	800caa8 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ca9a:	009b      	lsls	r3, r3, #2
 800ca9c:	4413      	add	r3, r2
 800ca9e:	2200      	movs	r2, #0
 800caa0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	3301      	adds	r3, #1
 800caa6:	60fb      	str	r3, [r7, #12]
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2b0f      	cmp	r3, #15
 800caac:	d9f1      	bls.n	800ca92 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800caae:	2300      	movs	r3, #0
 800cab0:	60fb      	str	r3, [r7, #12]
 800cab2:	e009      	b.n	800cac8 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800cab4:	687a      	ldr	r2, [r7, #4]
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	4413      	add	r3, r2
 800caba:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cabe:	2200      	movs	r2, #0
 800cac0:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	3301      	adds	r3, #1
 800cac6:	60fb      	str	r3, [r7, #12]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800cace:	4293      	cmp	r3, r2
 800cad0:	d9f0      	bls.n	800cab4 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2200      	movs	r2, #0
 800cad6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2200      	movs	r2, #0
 800cadc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2201      	movs	r2, #1
 800cae2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2200      	movs	r2, #0
 800cae8:	f8c3 2d7c 	str.w	r2, [r3, #3452]	@ 0xd7c

  phost->Control.state = CTRL_SETUP;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2201      	movs	r2, #1
 800caf0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2240      	movs	r2, #64	@ 0x40
 800caf6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2200      	movs	r2, #0
 800cafc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2200      	movs	r2, #0
 800cb02:	f883 2cd4 	strb.w	r2, [r3, #3284]	@ 0xcd4
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2201      	movs	r2, #1
 800cb0a:	f883 2cd5 	strb.w	r2, [r3, #3285]	@ 0xcd5
  phost->device.RstCnt = 0U;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2200      	movs	r2, #0
 800cb12:	f883 2cd7 	strb.w	r2, [r3, #3287]	@ 0xcd7
  phost->device.EnumCnt = 0U;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	331c      	adds	r3, #28
 800cb22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cb26:	2100      	movs	r1, #0
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f002 fcc9 	bl	800f4c0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cb34:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800cb38:	2100      	movs	r1, #0
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f002 fcc0 	bl	800f4c0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f603 43de 	addw	r3, r3, #3294	@ 0xcde
 800cb46:	2212      	movs	r2, #18
 800cb48:	2100      	movs	r1, #0
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f002 fcb8 	bl	800f4c0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 800cb56:	223e      	movs	r2, #62	@ 0x3e
 800cb58:	2100      	movs	r1, #0
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f002 fcb0 	bl	800f4c0 <memset>

  return USBH_OK;
 800cb60:	2300      	movs	r3, #0
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3710      	adds	r7, #16
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
	...

0800cb6c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b084      	sub	sp, #16
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800cb76:	2300      	movs	r3, #0
 800cb78:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d020      	beq.n	800cbc2 <USBH_RegisterClass+0x56>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	@ 0xd38
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d10f      	bne.n	800cbaa <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	@ 0xd38
 800cb90:	1c59      	adds	r1, r3, #1
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	f8c2 1d38 	str.w	r1, [r2, #3384]	@ 0xd38
 800cb98:	687a      	ldr	r2, [r7, #4]
 800cb9a:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 800cb9e:	6839      	ldr	r1, [r7, #0]
 800cba0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800cba4:	2300      	movs	r3, #0
 800cba6:	73fb      	strb	r3, [r7, #15]
 800cba8:	e016      	b.n	800cbd8 <USBH_RegisterClass+0x6c>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800cbaa:	480e      	ldr	r0, [pc, #56]	@ (800cbe4 <USBH_RegisterClass+0x78>)
 800cbac:	f002 faf8 	bl	800f1a0 <iprintf>
 800cbb0:	480d      	ldr	r0, [pc, #52]	@ (800cbe8 <USBH_RegisterClass+0x7c>)
 800cbb2:	f002 faf5 	bl	800f1a0 <iprintf>
 800cbb6:	200a      	movs	r0, #10
 800cbb8:	f002 fb04 	bl	800f1c4 <putchar>
      status = USBH_FAIL;
 800cbbc:	2302      	movs	r3, #2
 800cbbe:	73fb      	strb	r3, [r7, #15]
 800cbc0:	e00a      	b.n	800cbd8 <USBH_RegisterClass+0x6c>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800cbc2:	4808      	ldr	r0, [pc, #32]	@ (800cbe4 <USBH_RegisterClass+0x78>)
 800cbc4:	f002 faec 	bl	800f1a0 <iprintf>
 800cbc8:	4808      	ldr	r0, [pc, #32]	@ (800cbec <USBH_RegisterClass+0x80>)
 800cbca:	f002 fae9 	bl	800f1a0 <iprintf>
 800cbce:	200a      	movs	r0, #10
 800cbd0:	f002 faf8 	bl	800f1c4 <putchar>
    status = USBH_FAIL;
 800cbd4:	2302      	movs	r3, #2
 800cbd6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cbd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3710      	adds	r7, #16
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop
 800cbe4:	080105d0 	.word	0x080105d0
 800cbe8:	080105ec 	.word	0x080105ec
 800cbec:	08010608 	.word	0x08010608

0800cbf0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f893 3cf4 	ldrb.w	r3, [r3, #3316]	@ 0xcf4
 800cc06:	78fa      	ldrb	r2, [r7, #3]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d23c      	bcs.n	800cc86 <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	78fa      	ldrb	r2, [r7, #3]
 800cc10:	f883 2cdc 	strb.w	r2, [r3, #3292]	@ 0xcdc
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800cc14:	78fb      	ldrb	r3, [r7, #3]
 800cc16:	4619      	mov	r1, r3
 800cc18:	4823      	ldr	r0, [pc, #140]	@ (800cca8 <USBH_SelectInterface+0xb8>)
 800cc1a:	f002 fac1 	bl	800f1a0 <iprintf>
 800cc1e:	200a      	movs	r0, #10
 800cc20:	f002 fad0 	bl	800f1c4 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800cc24:	78fb      	ldrb	r3, [r7, #3]
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	211a      	movs	r1, #26
 800cc2a:	fb01 f303 	mul.w	r3, r1, r3
 800cc2e:	4413      	add	r3, r2
 800cc30:	f603 43ff 	addw	r3, r3, #3327	@ 0xcff
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	4619      	mov	r1, r3
 800cc38:	481c      	ldr	r0, [pc, #112]	@ (800ccac <USBH_SelectInterface+0xbc>)
 800cc3a:	f002 fab1 	bl	800f1a0 <iprintf>
 800cc3e:	200a      	movs	r0, #10
 800cc40:	f002 fac0 	bl	800f1c4 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800cc44:	78fb      	ldrb	r3, [r7, #3]
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	211a      	movs	r1, #26
 800cc4a:	fb01 f303 	mul.w	r3, r1, r3
 800cc4e:	4413      	add	r3, r2
 800cc50:	f503 6350 	add.w	r3, r3, #3328	@ 0xd00
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	4619      	mov	r1, r3
 800cc58:	4815      	ldr	r0, [pc, #84]	@ (800ccb0 <USBH_SelectInterface+0xc0>)
 800cc5a:	f002 faa1 	bl	800f1a0 <iprintf>
 800cc5e:	200a      	movs	r0, #10
 800cc60:	f002 fab0 	bl	800f1c4 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800cc64:	78fb      	ldrb	r3, [r7, #3]
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	211a      	movs	r1, #26
 800cc6a:	fb01 f303 	mul.w	r3, r1, r3
 800cc6e:	4413      	add	r3, r2
 800cc70:	f603 5301 	addw	r3, r3, #3329	@ 0xd01
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	4619      	mov	r1, r3
 800cc78:	480e      	ldr	r0, [pc, #56]	@ (800ccb4 <USBH_SelectInterface+0xc4>)
 800cc7a:	f002 fa91 	bl	800f1a0 <iprintf>
 800cc7e:	200a      	movs	r0, #10
 800cc80:	f002 faa0 	bl	800f1c4 <putchar>
 800cc84:	e00a      	b.n	800cc9c <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800cc86:	480c      	ldr	r0, [pc, #48]	@ (800ccb8 <USBH_SelectInterface+0xc8>)
 800cc88:	f002 fa8a 	bl	800f1a0 <iprintf>
 800cc8c:	480b      	ldr	r0, [pc, #44]	@ (800ccbc <USBH_SelectInterface+0xcc>)
 800cc8e:	f002 fa87 	bl	800f1a0 <iprintf>
 800cc92:	200a      	movs	r0, #10
 800cc94:	f002 fa96 	bl	800f1c4 <putchar>
    status = USBH_FAIL;
 800cc98:	2302      	movs	r3, #2
 800cc9a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cc9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3710      	adds	r7, #16
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	08010620 	.word	0x08010620
 800ccac:	08010640 	.word	0x08010640
 800ccb0:	08010650 	.word	0x08010650
 800ccb4:	08010660 	.word	0x08010660
 800ccb8:	080105d0 	.word	0x080105d0
 800ccbc:	08010670 	.word	0x08010670

0800ccc0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b087      	sub	sp, #28
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	4608      	mov	r0, r1
 800ccca:	4611      	mov	r1, r2
 800cccc:	461a      	mov	r2, r3
 800ccce:	4603      	mov	r3, r0
 800ccd0:	70fb      	strb	r3, [r7, #3]
 800ccd2:	460b      	mov	r3, r1
 800ccd4:	70bb      	strb	r3, [r7, #2]
 800ccd6:	4613      	mov	r3, r2
 800ccd8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ccde:	2300      	movs	r3, #0
 800cce0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 800cce8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ccea:	e025      	b.n	800cd38 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ccec:	7dfb      	ldrb	r3, [r7, #23]
 800ccee:	221a      	movs	r2, #26
 800ccf0:	fb02 f303 	mul.w	r3, r2, r3
 800ccf4:	3308      	adds	r3, #8
 800ccf6:	68fa      	ldr	r2, [r7, #12]
 800ccf8:	4413      	add	r3, r2
 800ccfa:	3302      	adds	r3, #2
 800ccfc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	795b      	ldrb	r3, [r3, #5]
 800cd02:	78fa      	ldrb	r2, [r7, #3]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d002      	beq.n	800cd0e <USBH_FindInterface+0x4e>
 800cd08:	78fb      	ldrb	r3, [r7, #3]
 800cd0a:	2bff      	cmp	r3, #255	@ 0xff
 800cd0c:	d111      	bne.n	800cd32 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cd12:	78ba      	ldrb	r2, [r7, #2]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d002      	beq.n	800cd1e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cd18:	78bb      	ldrb	r3, [r7, #2]
 800cd1a:	2bff      	cmp	r3, #255	@ 0xff
 800cd1c:	d109      	bne.n	800cd32 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cd22:	787a      	ldrb	r2, [r7, #1]
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d002      	beq.n	800cd2e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cd28:	787b      	ldrb	r3, [r7, #1]
 800cd2a:	2bff      	cmp	r3, #255	@ 0xff
 800cd2c:	d101      	bne.n	800cd32 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800cd2e:	7dfb      	ldrb	r3, [r7, #23]
 800cd30:	e006      	b.n	800cd40 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800cd32:	7dfb      	ldrb	r3, [r7, #23]
 800cd34:	3301      	adds	r3, #1
 800cd36:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cd38:	7dfb      	ldrb	r3, [r7, #23]
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d9d6      	bls.n	800ccec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800cd3e:	23ff      	movs	r3, #255	@ 0xff
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	371c      	adds	r7, #28
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f001 fe61 	bl	800ea1c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800cd5a:	2101      	movs	r1, #1
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f001 ff7a 	bl	800ec56 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800cd62:	2300      	movs	r3, #0
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	3708      	adds	r7, #8
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b088      	sub	sp, #32
 800cd70:	af04      	add	r7, sp, #16
 800cd72:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cd74:	2302      	movs	r3, #2
 800cd76:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f893 3cd9 	ldrb.w	r3, [r3, #3289]	@ 0xcd9
 800cd82:	b2db      	uxtb	r3, r3
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d102      	bne.n	800cd8e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2203      	movs	r2, #3
 800cd8c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	b2db      	uxtb	r3, r3
 800cd94:	2b0b      	cmp	r3, #11
 800cd96:	f200 8239 	bhi.w	800d20c <USBH_Process+0x4a0>
 800cd9a:	a201      	add	r2, pc, #4	@ (adr r2, 800cda0 <USBH_Process+0x34>)
 800cd9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cda0:	0800cdd1 	.word	0x0800cdd1
 800cda4:	0800ce0f 	.word	0x0800ce0f
 800cda8:	0800ce8f 	.word	0x0800ce8f
 800cdac:	0800d19b 	.word	0x0800d19b
 800cdb0:	0800d20d 	.word	0x0800d20d
 800cdb4:	0800cf2f 	.word	0x0800cf2f
 800cdb8:	0800d11d 	.word	0x0800d11d
 800cdbc:	0800cf7d 	.word	0x0800cf7d
 800cdc0:	0800cf9d 	.word	0x0800cf9d
 800cdc4:	0800cfc7 	.word	0x0800cfc7
 800cdc8:	0800d023 	.word	0x0800d023
 800cdcc:	0800d183 	.word	0x0800d183
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f893 3cd8 	ldrb.w	r3, [r3, #3288]	@ 0xcd8
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	f000 8219 	beq.w	800d210 <USBH_Process+0x4a4>
      {
        USBH_UsrLog("USB Device Connected");
 800cdde:	48a5      	ldr	r0, [pc, #660]	@ (800d074 <USBH_Process+0x308>)
 800cde0:	f002 f9de 	bl	800f1a0 <iprintf>
 800cde4:	200a      	movs	r0, #10
 800cde6:	f002 f9ed 	bl	800f1c4 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2201      	movs	r2, #1
 800cdee:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800cdf0:	20c8      	movs	r0, #200	@ 0xc8
 800cdf2:	f001 ff7a 	bl	800ecea <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f001 fe6d 	bl	800ead6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f883 2cd4 	strb.w	r2, [r3, #3284]	@ 0xcd4
        phost->Timeout = 0U;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2200      	movs	r2, #0
 800ce08:	f8c3 2d80 	str.w	r2, [r3, #3456]	@ 0xd80
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ce0c:	e200      	b.n	800d210 <USBH_Process+0x4a4>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f893 3cdb 	ldrb.w	r3, [r3, #3291]	@ 0xcdb
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	d10d      	bne.n	800ce34 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800ce18:	4897      	ldr	r0, [pc, #604]	@ (800d078 <USBH_Process+0x30c>)
 800ce1a:	f002 f9c1 	bl	800f1a0 <iprintf>
 800ce1e:	200a      	movs	r0, #10
 800ce20:	f002 f9d0 	bl	800f1c4 <putchar>
        phost->device.RstCnt = 0U;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2200      	movs	r2, #0
 800ce28:	f883 2cd7 	strb.w	r2, [r3, #3287]	@ 0xcd7
        phost->gState = HOST_DEV_ATTACHED;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2202      	movs	r2, #2
 800ce30:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ce32:	e1fa      	b.n	800d22a <USBH_Process+0x4be>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8d3 3d80 	ldr.w	r3, [r3, #3456]	@ 0xd80
 800ce3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ce3e:	d91a      	bls.n	800ce76 <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f893 3cd7 	ldrb.w	r3, [r3, #3287]	@ 0xcd7
 800ce46:	3301      	adds	r3, #1
 800ce48:	b2da      	uxtb	r2, r3
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f883 2cd7 	strb.w	r2, [r3, #3287]	@ 0xcd7
          if (phost->device.RstCnt > 3U)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f893 3cd7 	ldrb.w	r3, [r3, #3287]	@ 0xcd7
 800ce56:	2b03      	cmp	r3, #3
 800ce58:	d909      	bls.n	800ce6e <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800ce5a:	4888      	ldr	r0, [pc, #544]	@ (800d07c <USBH_Process+0x310>)
 800ce5c:	f002 f9a0 	bl	800f1a0 <iprintf>
 800ce60:	200a      	movs	r0, #10
 800ce62:	f002 f9af 	bl	800f1c4 <putchar>
            phost->gState = HOST_ABORT_STATE;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	220d      	movs	r2, #13
 800ce6a:	701a      	strb	r2, [r3, #0]
      break;
 800ce6c:	e1dd      	b.n	800d22a <USBH_Process+0x4be>
            phost->gState = HOST_IDLE;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2200      	movs	r2, #0
 800ce72:	701a      	strb	r2, [r3, #0]
      break;
 800ce74:	e1d9      	b.n	800d22a <USBH_Process+0x4be>
          phost->Timeout += 10U;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8d3 3d80 	ldr.w	r3, [r3, #3456]	@ 0xd80
 800ce7c:	f103 020a 	add.w	r2, r3, #10
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8c3 2d80 	str.w	r2, [r3, #3456]	@ 0xd80
          USBH_Delay(10U);
 800ce86:	200a      	movs	r0, #10
 800ce88:	f001 ff2f 	bl	800ecea <USBH_Delay>
      break;
 800ce8c:	e1cd      	b.n	800d22a <USBH_Process+0x4be>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d005      	beq.n	800cea4 <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800ce9e:	2104      	movs	r1, #4
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800cea4:	2064      	movs	r0, #100	@ 0x64
 800cea6:	f001 ff20 	bl	800ecea <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f001 fdec 	bl	800ea88 <USBH_LL_GetSpeed>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f883 2cd5 	strb.w	r2, [r3, #3285]	@ 0xcd5

      phost->gState = HOST_ENUMERATION;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2205      	movs	r2, #5
 800cebe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800cec0:	2100      	movs	r1, #0
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f001 fbf3 	bl	800e6ae <USBH_AllocPipe>
 800cec8:	4603      	mov	r3, r0
 800ceca:	461a      	mov	r2, r3
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ced0:	2180      	movs	r1, #128	@ 0x80
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f001 fbeb 	bl	800e6ae <USBH_AllocPipe>
 800ced8:	4603      	mov	r3, r0
 800ceda:	461a      	mov	r2, r3
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	7919      	ldrb	r1, [r3, #4]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cef0:	687a      	ldr	r2, [r7, #4]
 800cef2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cef4:	9202      	str	r2, [sp, #8]
 800cef6:	2200      	movs	r2, #0
 800cef8:	9201      	str	r2, [sp, #4]
 800cefa:	9300      	str	r3, [sp, #0]
 800cefc:	4603      	mov	r3, r0
 800cefe:	2280      	movs	r2, #128	@ 0x80
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f001 fba5 	bl	800e650 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	7959      	ldrb	r1, [r3, #5]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cf1a:	9202      	str	r2, [sp, #8]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	9201      	str	r2, [sp, #4]
 800cf20:	9300      	str	r3, [sp, #0]
 800cf22:	4603      	mov	r3, r0
 800cf24:	2200      	movs	r2, #0
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f001 fb92 	bl	800e650 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cf2c:	e17d      	b.n	800d22a <USBH_Process+0x4be>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 f98e 	bl	800d250 <USBH_HandleEnum>
 800cf34:	4603      	mov	r3, r0
 800cf36:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800cf38:	7bbb      	ldrb	r3, [r7, #14]
 800cf3a:	b2db      	uxtb	r3, r3
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	f040 8169 	bne.w	800d214 <USBH_Process+0x4a8>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800cf42:	484f      	ldr	r0, [pc, #316]	@ (800d080 <USBH_Process+0x314>)
 800cf44:	f002 f92c 	bl	800f1a0 <iprintf>
 800cf48:	200a      	movs	r0, #10
 800cf4a:	f002 f93b 	bl	800f1c4 <putchar>

        phost->device.current_interface = 0U;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2200      	movs	r2, #0
 800cf52:	f883 2cdc 	strb.w	r2, [r3, #3292]	@ 0xcdc

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f893 3cef 	ldrb.w	r3, [r3, #3311]	@ 0xcef
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d109      	bne.n	800cf74 <USBH_Process+0x208>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800cf60:	4848      	ldr	r0, [pc, #288]	@ (800d084 <USBH_Process+0x318>)
 800cf62:	f002 f91d 	bl	800f1a0 <iprintf>
 800cf66:	200a      	movs	r0, #10
 800cf68:	f002 f92c 	bl	800f1c4 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2208      	movs	r2, #8
 800cf70:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cf72:	e14f      	b.n	800d214 <USBH_Process+0x4a8>
          phost->gState = HOST_INPUT;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2207      	movs	r2, #7
 800cf78:	701a      	strb	r2, [r3, #0]
      break;
 800cf7a:	e14b      	b.n	800d214 <USBH_Process+0x4a8>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	f000 8148 	beq.w	800d218 <USBH_Process+0x4ac>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800cf8e:	2101      	movs	r1, #1
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2208      	movs	r2, #8
 800cf98:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800cf9a:	e13d      	b.n	800d218 <USBH_Process+0x4ac>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f893 3cf5 	ldrb.w	r3, [r3, #3317]	@ 0xcf5
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f000 fd9a 	bl	800dade <USBH_SetCfg>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	f040 8135 	bne.w	800d21c <USBH_Process+0x4b0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2209      	movs	r2, #9
 800cfb6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800cfb8:	4833      	ldr	r0, [pc, #204]	@ (800d088 <USBH_Process+0x31c>)
 800cfba:	f002 f8f1 	bl	800f1a0 <iprintf>
 800cfbe:	200a      	movs	r0, #10
 800cfc0:	f002 f900 	bl	800f1c4 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cfc4:	e12a      	b.n	800d21c <USBH_Process+0x4b0>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f893 3cf7 	ldrb.w	r3, [r3, #3319]	@ 0xcf7
 800cfcc:	f003 0320 	and.w	r3, r3, #32
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d022      	beq.n	800d01a <USBH_Process+0x2ae>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800cfd4:	2101      	movs	r1, #1
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f000 fda4 	bl	800db24 <USBH_SetFeature>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cfe0:	7bbb      	ldrb	r3, [r7, #14]
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d109      	bne.n	800cffc <USBH_Process+0x290>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800cfe8:	4828      	ldr	r0, [pc, #160]	@ (800d08c <USBH_Process+0x320>)
 800cfea:	f002 f8d9 	bl	800f1a0 <iprintf>
 800cfee:	200a      	movs	r0, #10
 800cff0:	f002 f8e8 	bl	800f1c4 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	220a      	movs	r2, #10
 800cff8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cffa:	e111      	b.n	800d220 <USBH_Process+0x4b4>
        else if (status == USBH_NOT_SUPPORTED)
 800cffc:	7bbb      	ldrb	r3, [r7, #14]
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	2b03      	cmp	r3, #3
 800d002:	f040 810d 	bne.w	800d220 <USBH_Process+0x4b4>
          USBH_UsrLog("Remote wakeup not supported by the device");
 800d006:	4822      	ldr	r0, [pc, #136]	@ (800d090 <USBH_Process+0x324>)
 800d008:	f002 f8ca 	bl	800f1a0 <iprintf>
 800d00c:	200a      	movs	r0, #10
 800d00e:	f002 f8d9 	bl	800f1c4 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	220a      	movs	r2, #10
 800d016:	701a      	strb	r2, [r3, #0]
      break;
 800d018:	e102      	b.n	800d220 <USBH_Process+0x4b4>
        phost->gState = HOST_CHECK_CLASS;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	220a      	movs	r2, #10
 800d01e:	701a      	strb	r2, [r3, #0]
      break;
 800d020:	e0fe      	b.n	800d220 <USBH_Process+0x4b4>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	@ 0xd38
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d106      	bne.n	800d03a <USBH_Process+0x2ce>
      {
        USBH_UsrLog("No Class has been registered.");
 800d02c:	4819      	ldr	r0, [pc, #100]	@ (800d094 <USBH_Process+0x328>)
 800d02e:	f002 f8b7 	bl	800f1a0 <iprintf>
 800d032:	200a      	movs	r0, #10
 800d034:	f002 f8c6 	bl	800f1c4 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d038:	e0f7      	b.n	800d22a <USBH_Process+0x4be>
        phost->pActiveClass = NULL;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2200      	movs	r2, #0
 800d03e:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d042:	2300      	movs	r3, #0
 800d044:	73fb      	strb	r3, [r7, #15]
 800d046:	e02a      	b.n	800d09e <USBH_Process+0x332>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d048:	7bfa      	ldrb	r2, [r7, #15]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f502 7253 	add.w	r2, r2, #844	@ 0x34c
 800d050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d054:	791a      	ldrb	r2, [r3, #4]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f893 3cff 	ldrb.w	r3, [r3, #3327]	@ 0xcff
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d11b      	bne.n	800d098 <USBH_Process+0x32c>
            phost->pActiveClass = phost->pClass[idx];
 800d060:	7bfa      	ldrb	r2, [r7, #15]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f502 7253 	add.w	r2, r2, #844	@ 0x34c
 800d068:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
            break;
 800d072:	e017      	b.n	800d0a4 <USBH_Process+0x338>
 800d074:	08010690 	.word	0x08010690
 800d078:	080106a8 	.word	0x080106a8
 800d07c:	080106c4 	.word	0x080106c4
 800d080:	080106f0 	.word	0x080106f0
 800d084:	08010704 	.word	0x08010704
 800d088:	0801072c 	.word	0x0801072c
 800d08c:	08010748 	.word	0x08010748
 800d090:	08010768 	.word	0x08010768
 800d094:	08010794 	.word	0x08010794
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d098:	7bfb      	ldrb	r3, [r7, #15]
 800d09a:	3301      	adds	r3, #1
 800d09c:	73fb      	strb	r3, [r7, #15]
 800d09e:	7bfb      	ldrb	r3, [r7, #15]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d0d1      	beq.n	800d048 <USBH_Process+0x2dc>
        if (phost->pActiveClass != NULL)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d02c      	beq.n	800d108 <USBH_Process+0x39c>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800d0b4:	689b      	ldr	r3, [r3, #8]
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	4798      	blx	r3
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d114      	bne.n	800d0ea <USBH_Process+0x37e>
            phost->gState = HOST_CLASS_REQUEST;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2206      	movs	r2, #6
 800d0c4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	4858      	ldr	r0, [pc, #352]	@ (800d234 <USBH_Process+0x4c8>)
 800d0d2:	f002 f865 	bl	800f1a0 <iprintf>
 800d0d6:	200a      	movs	r0, #10
 800d0d8:	f002 f874 	bl	800f1c4 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800d0e2:	2103      	movs	r1, #3
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	4798      	blx	r3
      break;
 800d0e8:	e09f      	b.n	800d22a <USBH_Process+0x4be>
            phost->gState = HOST_ABORT_STATE;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	220d      	movs	r2, #13
 800d0ee:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	484f      	ldr	r0, [pc, #316]	@ (800d238 <USBH_Process+0x4cc>)
 800d0fc:	f002 f850 	bl	800f1a0 <iprintf>
 800d100:	200a      	movs	r0, #10
 800d102:	f002 f85f 	bl	800f1c4 <putchar>
      break;
 800d106:	e090      	b.n	800d22a <USBH_Process+0x4be>
          phost->gState = HOST_ABORT_STATE;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	220d      	movs	r2, #13
 800d10c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800d10e:	484b      	ldr	r0, [pc, #300]	@ (800d23c <USBH_Process+0x4d0>)
 800d110:	f002 f846 	bl	800f1a0 <iprintf>
 800d114:	200a      	movs	r0, #10
 800d116:	f002 f855 	bl	800f1c4 <putchar>
      break;
 800d11a:	e086      	b.n	800d22a <USBH_Process+0x4be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800d122:	2b00      	cmp	r3, #0
 800d124:	d020      	beq.n	800d168 <USBH_Process+0x3fc>
      {
        status = phost->pActiveClass->Requests(phost);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800d12c:	691b      	ldr	r3, [r3, #16]
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	4798      	blx	r3
 800d132:	4603      	mov	r3, r0
 800d134:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d136:	7bbb      	ldrb	r3, [r7, #14]
 800d138:	b2db      	uxtb	r3, r3
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d103      	bne.n	800d146 <USBH_Process+0x3da>
        {
          phost->gState = HOST_CLASS;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	220b      	movs	r2, #11
 800d142:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d144:	e06e      	b.n	800d224 <USBH_Process+0x4b8>
        else if (status == USBH_FAIL)
 800d146:	7bbb      	ldrb	r3, [r7, #14]
 800d148:	b2db      	uxtb	r3, r3
 800d14a:	2b02      	cmp	r3, #2
 800d14c:	d16a      	bne.n	800d224 <USBH_Process+0x4b8>
          phost->gState = HOST_ABORT_STATE;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	220d      	movs	r2, #13
 800d152:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800d154:	483a      	ldr	r0, [pc, #232]	@ (800d240 <USBH_Process+0x4d4>)
 800d156:	f002 f823 	bl	800f1a0 <iprintf>
 800d15a:	483a      	ldr	r0, [pc, #232]	@ (800d244 <USBH_Process+0x4d8>)
 800d15c:	f002 f820 	bl	800f1a0 <iprintf>
 800d160:	200a      	movs	r0, #10
 800d162:	f002 f82f 	bl	800f1c4 <putchar>
      break;
 800d166:	e05d      	b.n	800d224 <USBH_Process+0x4b8>
        phost->gState = HOST_ABORT_STATE;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	220d      	movs	r2, #13
 800d16c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800d16e:	4834      	ldr	r0, [pc, #208]	@ (800d240 <USBH_Process+0x4d4>)
 800d170:	f002 f816 	bl	800f1a0 <iprintf>
 800d174:	4834      	ldr	r0, [pc, #208]	@ (800d248 <USBH_Process+0x4dc>)
 800d176:	f002 f813 	bl	800f1a0 <iprintf>
 800d17a:	200a      	movs	r0, #10
 800d17c:	f002 f822 	bl	800f1c4 <putchar>
      break;
 800d180:	e050      	b.n	800d224 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d04d      	beq.n	800d228 <USBH_Process+0x4bc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800d192:	695b      	ldr	r3, [r3, #20]
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	4798      	blx	r3
      }
      break;
 800d198:	e046      	b.n	800d228 <USBH_Process+0x4bc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2200      	movs	r2, #0
 800d19e:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9

      (void)DeInitStateMachine(phost);
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f7ff fc6c 	bl	800ca80 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d009      	beq.n	800d1c6 <USBH_Process+0x45a>
      {
        phost->pActiveClass->DeInit(phost);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
      }

      if (phost->pUser != NULL)
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d005      	beq.n	800d1dc <USBH_Process+0x470>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800d1d6:	2105      	movs	r1, #5
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800d1dc:	481b      	ldr	r0, [pc, #108]	@ (800d24c <USBH_Process+0x4e0>)
 800d1de:	f001 ffdf 	bl	800f1a0 <iprintf>
 800d1e2:	200a      	movs	r0, #10
 800d1e4:	f001 ffee 	bl	800f1c4 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f893 3cda 	ldrb.w	r3, [r3, #3290]	@ 0xcda
 800d1ee:	b2db      	uxtb	r3, r3
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	d107      	bne.n	800d204 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f883 2cda 	strb.w	r2, [r3, #3290]	@ 0xcda

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f7ff fda5 	bl	800cd4c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d202:	e012      	b.n	800d22a <USBH_Process+0x4be>
        (void)USBH_LL_Start(phost);
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f001 fc09 	bl	800ea1c <USBH_LL_Start>
      break;
 800d20a:	e00e      	b.n	800d22a <USBH_Process+0x4be>

    case HOST_ABORT_STATE:
    default :
      break;
 800d20c:	bf00      	nop
 800d20e:	e00c      	b.n	800d22a <USBH_Process+0x4be>
      break;
 800d210:	bf00      	nop
 800d212:	e00a      	b.n	800d22a <USBH_Process+0x4be>
      break;
 800d214:	bf00      	nop
 800d216:	e008      	b.n	800d22a <USBH_Process+0x4be>
    break;
 800d218:	bf00      	nop
 800d21a:	e006      	b.n	800d22a <USBH_Process+0x4be>
      break;
 800d21c:	bf00      	nop
 800d21e:	e004      	b.n	800d22a <USBH_Process+0x4be>
      break;
 800d220:	bf00      	nop
 800d222:	e002      	b.n	800d22a <USBH_Process+0x4be>
      break;
 800d224:	bf00      	nop
 800d226:	e000      	b.n	800d22a <USBH_Process+0x4be>
      break;
 800d228:	bf00      	nop
  }
  return USBH_OK;
 800d22a:	2300      	movs	r3, #0
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3710      	adds	r7, #16
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}
 800d234:	080107b4 	.word	0x080107b4
 800d238:	080107c8 	.word	0x080107c8
 800d23c:	080107e8 	.word	0x080107e8
 800d240:	080105d0 	.word	0x080105d0
 800d244:	08010810 	.word	0x08010810
 800d248:	08010838 	.word	0x08010838
 800d24c:	08010850 	.word	0x08010850

0800d250 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b088      	sub	sp, #32
 800d254:	af04      	add	r7, sp, #16
 800d256:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d258:	2301      	movs	r3, #1
 800d25a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d25c:	2301      	movs	r3, #1
 800d25e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	785b      	ldrb	r3, [r3, #1]
 800d264:	2b07      	cmp	r3, #7
 800d266:	f200 827b 	bhi.w	800d760 <USBH_HandleEnum+0x510>
 800d26a:	a201      	add	r2, pc, #4	@ (adr r2, 800d270 <USBH_HandleEnum+0x20>)
 800d26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d270:	0800d291 	.word	0x0800d291
 800d274:	0800d369 	.word	0x0800d369
 800d278:	0800d419 	.word	0x0800d419
 800d27c:	0800d4d5 	.word	0x0800d4d5
 800d280:	0800d55d 	.word	0x0800d55d
 800d284:	0800d60f 	.word	0x0800d60f
 800d288:	0800d683 	.word	0x0800d683
 800d28c:	0800d6f5 	.word	0x0800d6f5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d290:	2108      	movs	r1, #8
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 fb16 	bl	800d8c4 <USBH_Get_DevDesc>
 800d298:	4603      	mov	r3, r0
 800d29a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d29c:	7bbb      	ldrb	r3, [r7, #14]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d12e      	bne.n	800d300 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f893 2ce5 	ldrb.w	r2, [r3, #3301]	@ 0xce5
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	7919      	ldrb	r1, [r3, #4]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d2c6:	9202      	str	r2, [sp, #8]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	9201      	str	r2, [sp, #4]
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	2280      	movs	r2, #128	@ 0x80
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f001 f9bc 	bl	800e650 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	7959      	ldrb	r1, [r3, #5]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d2ec:	9202      	str	r2, [sp, #8]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	9201      	str	r2, [sp, #4]
 800d2f2:	9300      	str	r3, [sp, #0]
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f001 f9a9 	bl	800e650 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d2fe:	e231      	b.n	800d764 <USBH_HandleEnum+0x514>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d300:	7bbb      	ldrb	r3, [r7, #14]
 800d302:	2b03      	cmp	r3, #3
 800d304:	f040 822e 	bne.w	800d764 <USBH_HandleEnum+0x514>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800d308:	48ae      	ldr	r0, [pc, #696]	@ (800d5c4 <USBH_HandleEnum+0x374>)
 800d30a:	f001 ff49 	bl	800f1a0 <iprintf>
 800d30e:	48ae      	ldr	r0, [pc, #696]	@ (800d5c8 <USBH_HandleEnum+0x378>)
 800d310:	f001 ff46 	bl	800f1a0 <iprintf>
 800d314:	200a      	movs	r0, #10
 800d316:	f001 ff55 	bl	800f1c4 <putchar>
        phost->device.EnumCnt++;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800d320:	3301      	adds	r3, #1
 800d322:	b2da      	uxtb	r2, r3
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800d330:	2b03      	cmp	r3, #3
 800d332:	d909      	bls.n	800d348 <USBH_HandleEnum+0xf8>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d334:	48a5      	ldr	r0, [pc, #660]	@ (800d5cc <USBH_HandleEnum+0x37c>)
 800d336:	f001 ff33 	bl	800f1a0 <iprintf>
 800d33a:	200a      	movs	r0, #10
 800d33c:	f001 ff42 	bl	800f1c4 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	220d      	movs	r2, #13
 800d344:	701a      	strb	r2, [r3, #0]
      break;
 800d346:	e20d      	b.n	800d764 <USBH_HandleEnum+0x514>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	795b      	ldrb	r3, [r3, #5]
 800d34c:	4619      	mov	r1, r3
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f001 f9cf 	bl	800e6f2 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	791b      	ldrb	r3, [r3, #4]
 800d358:	4619      	mov	r1, r3
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f001 f9c9 	bl	800e6f2 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2200      	movs	r2, #0
 800d364:	701a      	strb	r2, [r3, #0]
      break;
 800d366:	e1fd      	b.n	800d764 <USBH_HandleEnum+0x514>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d368:	2112      	movs	r1, #18
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 faaa 	bl	800d8c4 <USBH_Get_DevDesc>
 800d370:	4603      	mov	r3, r0
 800d372:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d374:	7bbb      	ldrb	r3, [r7, #14]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d117      	bne.n	800d3aa <USBH_HandleEnum+0x15a>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f8b3 3ce8 	ldrh.w	r3, [r3, #3304]	@ 0xce8
 800d380:	4619      	mov	r1, r3
 800d382:	4893      	ldr	r0, [pc, #588]	@ (800d5d0 <USBH_HandleEnum+0x380>)
 800d384:	f001 ff0c 	bl	800f1a0 <iprintf>
 800d388:	200a      	movs	r0, #10
 800d38a:	f001 ff1b 	bl	800f1c4 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f8b3 3ce6 	ldrh.w	r3, [r3, #3302]	@ 0xce6
 800d394:	4619      	mov	r1, r3
 800d396:	488f      	ldr	r0, [pc, #572]	@ (800d5d4 <USBH_HandleEnum+0x384>)
 800d398:	f001 ff02 	bl	800f1a0 <iprintf>
 800d39c:	200a      	movs	r0, #10
 800d39e:	f001 ff11 	bl	800f1c4 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2202      	movs	r2, #2
 800d3a6:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d3a8:	e1de      	b.n	800d768 <USBH_HandleEnum+0x518>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d3aa:	7bbb      	ldrb	r3, [r7, #14]
 800d3ac:	2b03      	cmp	r3, #3
 800d3ae:	f040 81db 	bne.w	800d768 <USBH_HandleEnum+0x518>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800d3b2:	4884      	ldr	r0, [pc, #528]	@ (800d5c4 <USBH_HandleEnum+0x374>)
 800d3b4:	f001 fef4 	bl	800f1a0 <iprintf>
 800d3b8:	4887      	ldr	r0, [pc, #540]	@ (800d5d8 <USBH_HandleEnum+0x388>)
 800d3ba:	f001 fef1 	bl	800f1a0 <iprintf>
 800d3be:	200a      	movs	r0, #10
 800d3c0:	f001 ff00 	bl	800f1c4 <putchar>
        phost->device.EnumCnt++;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	b2da      	uxtb	r2, r3
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800d3da:	2b03      	cmp	r3, #3
 800d3dc:	d909      	bls.n	800d3f2 <USBH_HandleEnum+0x1a2>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d3de:	487b      	ldr	r0, [pc, #492]	@ (800d5cc <USBH_HandleEnum+0x37c>)
 800d3e0:	f001 fede 	bl	800f1a0 <iprintf>
 800d3e4:	200a      	movs	r0, #10
 800d3e6:	f001 feed 	bl	800f1c4 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	220d      	movs	r2, #13
 800d3ee:	701a      	strb	r2, [r3, #0]
      break;
 800d3f0:	e1ba      	b.n	800d768 <USBH_HandleEnum+0x518>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	795b      	ldrb	r3, [r3, #5]
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f001 f97a 	bl	800e6f2 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	791b      	ldrb	r3, [r3, #4]
 800d402:	4619      	mov	r1, r3
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f001 f974 	bl	800e6f2 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2200      	movs	r2, #0
 800d40e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2200      	movs	r2, #0
 800d414:	701a      	strb	r2, [r3, #0]
      break;
 800d416:	e1a7      	b.n	800d768 <USBH_HandleEnum+0x518>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d418:	2101      	movs	r1, #1
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f000 fb3b 	bl	800da96 <USBH_SetAddress>
 800d420:	4603      	mov	r3, r0
 800d422:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d424:	7bbb      	ldrb	r3, [r7, #14]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d13a      	bne.n	800d4a0 <USBH_HandleEnum+0x250>
      {
        USBH_Delay(2U);
 800d42a:	2002      	movs	r0, #2
 800d42c:	f001 fc5d 	bl	800ecea <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2201      	movs	r2, #1
 800d434:	f883 2cd4 	strb.w	r2, [r3, #3284]	@ 0xcd4

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f893 3cd4 	ldrb.w	r3, [r3, #3284]	@ 0xcd4
 800d43e:	4619      	mov	r1, r3
 800d440:	4866      	ldr	r0, [pc, #408]	@ (800d5dc <USBH_HandleEnum+0x38c>)
 800d442:	f001 fead 	bl	800f1a0 <iprintf>
 800d446:	200a      	movs	r0, #10
 800d448:	f001 febc 	bl	800f1c4 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2203      	movs	r2, #3
 800d450:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	7919      	ldrb	r1, [r3, #4]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d466:	9202      	str	r2, [sp, #8]
 800d468:	2200      	movs	r2, #0
 800d46a:	9201      	str	r2, [sp, #4]
 800d46c:	9300      	str	r3, [sp, #0]
 800d46e:	4603      	mov	r3, r0
 800d470:	2280      	movs	r2, #128	@ 0x80
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f001 f8ec 	bl	800e650 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	7959      	ldrb	r1, [r3, #5]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d488:	687a      	ldr	r2, [r7, #4]
 800d48a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d48c:	9202      	str	r2, [sp, #8]
 800d48e:	2200      	movs	r2, #0
 800d490:	9201      	str	r2, [sp, #4]
 800d492:	9300      	str	r3, [sp, #0]
 800d494:	4603      	mov	r3, r0
 800d496:	2200      	movs	r2, #0
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f001 f8d9 	bl	800e650 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d49e:	e165      	b.n	800d76c <USBH_HandleEnum+0x51c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d4a0:	7bbb      	ldrb	r3, [r7, #14]
 800d4a2:	2b03      	cmp	r3, #3
 800d4a4:	f040 8162 	bne.w	800d76c <USBH_HandleEnum+0x51c>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800d4a8:	4846      	ldr	r0, [pc, #280]	@ (800d5c4 <USBH_HandleEnum+0x374>)
 800d4aa:	f001 fe79 	bl	800f1a0 <iprintf>
 800d4ae:	484c      	ldr	r0, [pc, #304]	@ (800d5e0 <USBH_HandleEnum+0x390>)
 800d4b0:	f001 fe76 	bl	800f1a0 <iprintf>
 800d4b4:	200a      	movs	r0, #10
 800d4b6:	f001 fe85 	bl	800f1c4 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d4ba:	4844      	ldr	r0, [pc, #272]	@ (800d5cc <USBH_HandleEnum+0x37c>)
 800d4bc:	f001 fe70 	bl	800f1a0 <iprintf>
 800d4c0:	200a      	movs	r0, #10
 800d4c2:	f001 fe7f 	bl	800f1c4 <putchar>
        phost->gState = HOST_ABORT_STATE;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	220d      	movs	r2, #13
 800d4ca:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	705a      	strb	r2, [r3, #1]
      break;
 800d4d2:	e14b      	b.n	800d76c <USBH_HandleEnum+0x51c>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d4d4:	2109      	movs	r1, #9
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f000 fa2e 	bl	800d938 <USBH_Get_CfgDesc>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d4e0:	7bbb      	ldrb	r3, [r7, #14]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d103      	bne.n	800d4ee <USBH_HandleEnum+0x29e>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2204      	movs	r2, #4
 800d4ea:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d4ec:	e140      	b.n	800d770 <USBH_HandleEnum+0x520>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d4ee:	7bbb      	ldrb	r3, [r7, #14]
 800d4f0:	2b03      	cmp	r3, #3
 800d4f2:	f040 813d 	bne.w	800d770 <USBH_HandleEnum+0x520>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800d4f6:	4833      	ldr	r0, [pc, #204]	@ (800d5c4 <USBH_HandleEnum+0x374>)
 800d4f8:	f001 fe52 	bl	800f1a0 <iprintf>
 800d4fc:	4839      	ldr	r0, [pc, #228]	@ (800d5e4 <USBH_HandleEnum+0x394>)
 800d4fe:	f001 fe4f 	bl	800f1a0 <iprintf>
 800d502:	200a      	movs	r0, #10
 800d504:	f001 fe5e 	bl	800f1c4 <putchar>
        phost->device.EnumCnt++;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800d50e:	3301      	adds	r3, #1
 800d510:	b2da      	uxtb	r2, r3
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800d51e:	2b03      	cmp	r3, #3
 800d520:	d909      	bls.n	800d536 <USBH_HandleEnum+0x2e6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d522:	482a      	ldr	r0, [pc, #168]	@ (800d5cc <USBH_HandleEnum+0x37c>)
 800d524:	f001 fe3c 	bl	800f1a0 <iprintf>
 800d528:	200a      	movs	r0, #10
 800d52a:	f001 fe4b 	bl	800f1c4 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	220d      	movs	r2, #13
 800d532:	701a      	strb	r2, [r3, #0]
      break;
 800d534:	e11c      	b.n	800d770 <USBH_HandleEnum+0x520>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	795b      	ldrb	r3, [r3, #5]
 800d53a:	4619      	mov	r1, r3
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f001 f8d8 	bl	800e6f2 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	791b      	ldrb	r3, [r3, #4]
 800d546:	4619      	mov	r1, r3
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f001 f8d2 	bl	800e6f2 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2200      	movs	r2, #0
 800d552:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2200      	movs	r2, #0
 800d558:	701a      	strb	r2, [r3, #0]
      break;
 800d55a:	e109      	b.n	800d770 <USBH_HandleEnum+0x520>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8b3 3cf2 	ldrh.w	r3, [r3, #3314]	@ 0xcf2
 800d562:	4619      	mov	r1, r3
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 f9e7 	bl	800d938 <USBH_Get_CfgDesc>
 800d56a:	4603      	mov	r3, r0
 800d56c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d56e:	7bbb      	ldrb	r3, [r7, #14]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d103      	bne.n	800d57c <USBH_HandleEnum+0x32c>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2205      	movs	r2, #5
 800d578:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d57a:	e0fb      	b.n	800d774 <USBH_HandleEnum+0x524>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d57c:	7bbb      	ldrb	r3, [r7, #14]
 800d57e:	2b03      	cmp	r3, #3
 800d580:	f040 80f8 	bne.w	800d774 <USBH_HandleEnum+0x524>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800d584:	480f      	ldr	r0, [pc, #60]	@ (800d5c4 <USBH_HandleEnum+0x374>)
 800d586:	f001 fe0b 	bl	800f1a0 <iprintf>
 800d58a:	4816      	ldr	r0, [pc, #88]	@ (800d5e4 <USBH_HandleEnum+0x394>)
 800d58c:	f001 fe08 	bl	800f1a0 <iprintf>
 800d590:	200a      	movs	r0, #10
 800d592:	f001 fe17 	bl	800f1c4 <putchar>
        phost->device.EnumCnt++;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800d59c:	3301      	adds	r3, #1
 800d59e:	b2da      	uxtb	r2, r3
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800d5ac:	2b03      	cmp	r3, #3
 800d5ae:	d91b      	bls.n	800d5e8 <USBH_HandleEnum+0x398>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d5b0:	4806      	ldr	r0, [pc, #24]	@ (800d5cc <USBH_HandleEnum+0x37c>)
 800d5b2:	f001 fdf5 	bl	800f1a0 <iprintf>
 800d5b6:	200a      	movs	r0, #10
 800d5b8:	f001 fe04 	bl	800f1c4 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	220d      	movs	r2, #13
 800d5c0:	701a      	strb	r2, [r3, #0]
      break;
 800d5c2:	e0d7      	b.n	800d774 <USBH_HandleEnum+0x524>
 800d5c4:	080105d0 	.word	0x080105d0
 800d5c8:	08010868 	.word	0x08010868
 800d5cc:	0801089c 	.word	0x0801089c
 800d5d0:	080108dc 	.word	0x080108dc
 800d5d4:	080108e8 	.word	0x080108e8
 800d5d8:	080108f4 	.word	0x080108f4
 800d5dc:	08010930 	.word	0x08010930
 800d5e0:	08010948 	.word	0x08010948
 800d5e4:	0801097c 	.word	0x0801097c
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	795b      	ldrb	r3, [r3, #5]
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f001 f87f 	bl	800e6f2 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	791b      	ldrb	r3, [r3, #4]
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f001 f879 	bl	800e6f2 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2200      	movs	r2, #0
 800d604:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2200      	movs	r2, #0
 800d60a:	701a      	strb	r2, [r3, #0]
      break;
 800d60c:	e0b2      	b.n	800d774 <USBH_HandleEnum+0x524>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f893 3cec 	ldrb.w	r3, [r3, #3308]	@ 0xcec
 800d614:	2b00      	cmp	r3, #0
 800d616:	d02a      	beq.n	800d66e <USBH_HandleEnum+0x41e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f893 1cec 	ldrb.w	r1, [r3, #3308]	@ 0xcec
                                        phost->device.Data, 0xFFU);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d624:	23ff      	movs	r3, #255	@ 0xff
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f000 f9be 	bl	800d9a8 <USBH_Get_StringDesc>
 800d62c:	4603      	mov	r3, r0
 800d62e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d630:	7bbb      	ldrb	r3, [r7, #14]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d10d      	bne.n	800d652 <USBH_HandleEnum+0x402>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d63c:	4619      	mov	r1, r3
 800d63e:	4853      	ldr	r0, [pc, #332]	@ (800d78c <USBH_HandleEnum+0x53c>)
 800d640:	f001 fdae 	bl	800f1a0 <iprintf>
 800d644:	200a      	movs	r0, #10
 800d646:	f001 fdbd 	bl	800f1c4 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2206      	movs	r2, #6
 800d64e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d650:	e092      	b.n	800d778 <USBH_HandleEnum+0x528>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d652:	7bbb      	ldrb	r3, [r7, #14]
 800d654:	2b03      	cmp	r3, #3
 800d656:	f040 808f 	bne.w	800d778 <USBH_HandleEnum+0x528>
          USBH_UsrLog("Manufacturer : N/A");
 800d65a:	484d      	ldr	r0, [pc, #308]	@ (800d790 <USBH_HandleEnum+0x540>)
 800d65c:	f001 fda0 	bl	800f1a0 <iprintf>
 800d660:	200a      	movs	r0, #10
 800d662:	f001 fdaf 	bl	800f1c4 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2206      	movs	r2, #6
 800d66a:	705a      	strb	r2, [r3, #1]
      break;
 800d66c:	e084      	b.n	800d778 <USBH_HandleEnum+0x528>
        USBH_UsrLog("Manufacturer : N/A");
 800d66e:	4848      	ldr	r0, [pc, #288]	@ (800d790 <USBH_HandleEnum+0x540>)
 800d670:	f001 fd96 	bl	800f1a0 <iprintf>
 800d674:	200a      	movs	r0, #10
 800d676:	f001 fda5 	bl	800f1c4 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2206      	movs	r2, #6
 800d67e:	705a      	strb	r2, [r3, #1]
      break;
 800d680:	e07a      	b.n	800d778 <USBH_HandleEnum+0x528>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f893 3ced 	ldrb.w	r3, [r3, #3309]	@ 0xced
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d029      	beq.n	800d6e0 <USBH_HandleEnum+0x490>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f893 1ced 	ldrb.w	r1, [r3, #3309]	@ 0xced
                                        phost->device.Data, 0xFFU);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d698:	23ff      	movs	r3, #255	@ 0xff
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 f984 	bl	800d9a8 <USBH_Get_StringDesc>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d6a4:	7bbb      	ldrb	r3, [r7, #14]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d10d      	bne.n	800d6c6 <USBH_HandleEnum+0x476>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	4838      	ldr	r0, [pc, #224]	@ (800d794 <USBH_HandleEnum+0x544>)
 800d6b4:	f001 fd74 	bl	800f1a0 <iprintf>
 800d6b8:	200a      	movs	r0, #10
 800d6ba:	f001 fd83 	bl	800f1c4 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2207      	movs	r2, #7
 800d6c2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d6c4:	e05a      	b.n	800d77c <USBH_HandleEnum+0x52c>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d6c6:	7bbb      	ldrb	r3, [r7, #14]
 800d6c8:	2b03      	cmp	r3, #3
 800d6ca:	d157      	bne.n	800d77c <USBH_HandleEnum+0x52c>
          USBH_UsrLog("Product : N/A");
 800d6cc:	4832      	ldr	r0, [pc, #200]	@ (800d798 <USBH_HandleEnum+0x548>)
 800d6ce:	f001 fd67 	bl	800f1a0 <iprintf>
 800d6d2:	200a      	movs	r0, #10
 800d6d4:	f001 fd76 	bl	800f1c4 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2207      	movs	r2, #7
 800d6dc:	705a      	strb	r2, [r3, #1]
      break;
 800d6de:	e04d      	b.n	800d77c <USBH_HandleEnum+0x52c>
        USBH_UsrLog("Product : N/A");
 800d6e0:	482d      	ldr	r0, [pc, #180]	@ (800d798 <USBH_HandleEnum+0x548>)
 800d6e2:	f001 fd5d 	bl	800f1a0 <iprintf>
 800d6e6:	200a      	movs	r0, #10
 800d6e8:	f001 fd6c 	bl	800f1c4 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2207      	movs	r2, #7
 800d6f0:	705a      	strb	r2, [r3, #1]
      break;
 800d6f2:	e043      	b.n	800d77c <USBH_HandleEnum+0x52c>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f893 3cee 	ldrb.w	r3, [r3, #3310]	@ 0xcee
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d027      	beq.n	800d74e <USBH_HandleEnum+0x4fe>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f893 1cee 	ldrb.w	r1, [r3, #3310]	@ 0xcee
                                        phost->device.Data, 0xFFU);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d70a:	23ff      	movs	r3, #255	@ 0xff
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f000 f94b 	bl	800d9a8 <USBH_Get_StringDesc>
 800d712:	4603      	mov	r3, r0
 800d714:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d716:	7bbb      	ldrb	r3, [r7, #14]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d10c      	bne.n	800d736 <USBH_HandleEnum+0x4e6>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d722:	4619      	mov	r1, r3
 800d724:	481d      	ldr	r0, [pc, #116]	@ (800d79c <USBH_HandleEnum+0x54c>)
 800d726:	f001 fd3b 	bl	800f1a0 <iprintf>
 800d72a:	200a      	movs	r0, #10
 800d72c:	f001 fd4a 	bl	800f1c4 <putchar>
          Status = USBH_OK;
 800d730:	2300      	movs	r3, #0
 800d732:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d734:	e024      	b.n	800d780 <USBH_HandleEnum+0x530>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d736:	7bbb      	ldrb	r3, [r7, #14]
 800d738:	2b03      	cmp	r3, #3
 800d73a:	d121      	bne.n	800d780 <USBH_HandleEnum+0x530>
          USBH_UsrLog("Serial Number : N/A");
 800d73c:	4818      	ldr	r0, [pc, #96]	@ (800d7a0 <USBH_HandleEnum+0x550>)
 800d73e:	f001 fd2f 	bl	800f1a0 <iprintf>
 800d742:	200a      	movs	r0, #10
 800d744:	f001 fd3e 	bl	800f1c4 <putchar>
          Status = USBH_OK;
 800d748:	2300      	movs	r3, #0
 800d74a:	73fb      	strb	r3, [r7, #15]
      break;
 800d74c:	e018      	b.n	800d780 <USBH_HandleEnum+0x530>
        USBH_UsrLog("Serial Number : N/A");
 800d74e:	4814      	ldr	r0, [pc, #80]	@ (800d7a0 <USBH_HandleEnum+0x550>)
 800d750:	f001 fd26 	bl	800f1a0 <iprintf>
 800d754:	200a      	movs	r0, #10
 800d756:	f001 fd35 	bl	800f1c4 <putchar>
        Status = USBH_OK;
 800d75a:	2300      	movs	r3, #0
 800d75c:	73fb      	strb	r3, [r7, #15]
      break;
 800d75e:	e00f      	b.n	800d780 <USBH_HandleEnum+0x530>

    default:
      break;
 800d760:	bf00      	nop
 800d762:	e00e      	b.n	800d782 <USBH_HandleEnum+0x532>
      break;
 800d764:	bf00      	nop
 800d766:	e00c      	b.n	800d782 <USBH_HandleEnum+0x532>
      break;
 800d768:	bf00      	nop
 800d76a:	e00a      	b.n	800d782 <USBH_HandleEnum+0x532>
      break;
 800d76c:	bf00      	nop
 800d76e:	e008      	b.n	800d782 <USBH_HandleEnum+0x532>
      break;
 800d770:	bf00      	nop
 800d772:	e006      	b.n	800d782 <USBH_HandleEnum+0x532>
      break;
 800d774:	bf00      	nop
 800d776:	e004      	b.n	800d782 <USBH_HandleEnum+0x532>
      break;
 800d778:	bf00      	nop
 800d77a:	e002      	b.n	800d782 <USBH_HandleEnum+0x532>
      break;
 800d77c:	bf00      	nop
 800d77e:	e000      	b.n	800d782 <USBH_HandleEnum+0x532>
      break;
 800d780:	bf00      	nop
  }
  return Status;
 800d782:	7bfb      	ldrb	r3, [r7, #15]
}
 800d784:	4618      	mov	r0, r3
 800d786:	3710      	adds	r7, #16
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}
 800d78c:	080109c0 	.word	0x080109c0
 800d790:	080109d4 	.word	0x080109d4
 800d794:	080109e8 	.word	0x080109e8
 800d798:	080109f8 	.word	0x080109f8
 800d79c:	08010a08 	.word	0x08010a08
 800d7a0:	08010a1c 	.word	0x08010a1c

0800d7a4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	683a      	ldr	r2, [r7, #0]
 800d7b2:	f8c3 2d7c 	str.w	r2, [r3, #3452]	@ 0xd7c
}
 800d7b6:	bf00      	nop
 800d7b8:	370c      	adds	r7, #12
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr

0800d7c2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d7c2:	b580      	push	{r7, lr}
 800d7c4:	b082      	sub	sp, #8
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 800d7d0:	1c5a      	adds	r2, r3, #1
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f8c3 2d7c 	str.w	r2, [r3, #3452]	@ 0xd7c
  USBH_HandleSof(phost);
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f000 f804 	bl	800d7e6 <USBH_HandleSof>
}
 800d7de:	bf00      	nop
 800d7e0:	3708      	adds	r7, #8
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}

0800d7e6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d7e6:	b580      	push	{r7, lr}
 800d7e8:	b082      	sub	sp, #8
 800d7ea:	af00      	add	r7, sp, #0
 800d7ec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	b2db      	uxtb	r3, r3
 800d7f4:	2b0b      	cmp	r3, #11
 800d7f6:	d10a      	bne.n	800d80e <USBH_HandleSof+0x28>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d005      	beq.n	800d80e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800d808:	699b      	ldr	r3, [r3, #24]
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	4798      	blx	r3
  }
}
 800d80e:	bf00      	nop
 800d810:	3708      	adds	r7, #8
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}

0800d816 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d816:	b480      	push	{r7}
 800d818:	b083      	sub	sp, #12
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2201      	movs	r2, #1
 800d822:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800d826:	bf00      	nop
}
 800d828:	370c      	adds	r7, #12
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr

0800d832 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d832:	b480      	push	{r7}
 800d834:	b083      	sub	sp, #12
 800d836:	af00      	add	r7, sp, #0
 800d838:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2200      	movs	r2, #0
 800d83e:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb

  return;
 800d842:	bf00      	nop
}
 800d844:	370c      	adds	r7, #12
 800d846:	46bd      	mov	sp, r7
 800d848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84c:	4770      	bx	lr

0800d84e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d84e:	b480      	push	{r7}
 800d850:	b083      	sub	sp, #12
 800d852:	af00      	add	r7, sp, #0
 800d854:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2201      	movs	r2, #1
 800d85a:	f883 2cd8 	strb.w	r2, [r3, #3288]	@ 0xcd8
  phost->device.is_disconnected = 0U;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2200      	movs	r2, #0
 800d862:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9
  phost->device.is_ReEnumerated = 0U;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2200      	movs	r2, #0
 800d86a:	f883 2cda 	strb.w	r2, [r3, #3290]	@ 0xcda
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d86e:	2300      	movs	r3, #0
}
 800d870:	4618      	mov	r0, r3
 800d872:	370c      	adds	r7, #12
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr

0800d87c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2201      	movs	r2, #1
 800d888:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9
  phost->device.is_connected = 0U;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2200      	movs	r2, #0
 800d890:	f883 2cd8 	strb.w	r2, [r3, #3288]	@ 0xcd8
  phost->device.PortEnabled = 0U;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2200      	movs	r2, #0
 800d898:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f001 f8d8 	bl	800ea52 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	791b      	ldrb	r3, [r3, #4]
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 ff22 	bl	800e6f2 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	795b      	ldrb	r3, [r3, #5]
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f000 ff1c 	bl	800e6f2 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d8ba:	2300      	movs	r3, #0
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3708      	adds	r7, #8
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b086      	sub	sp, #24
 800d8c8:	af02      	add	r7, sp, #8
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	460b      	mov	r3, r1
 800d8ce:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800d8d0:	887b      	ldrh	r3, [r7, #2]
 800d8d2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d90a      	bls.n	800d8f0 <USBH_Get_DevDesc+0x2c>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
 800d8da:	4815      	ldr	r0, [pc, #84]	@ (800d930 <USBH_Get_DevDesc+0x6c>)
 800d8dc:	f001 fc60 	bl	800f1a0 <iprintf>
 800d8e0:	4814      	ldr	r0, [pc, #80]	@ (800d934 <USBH_Get_DevDesc+0x70>)
 800d8e2:	f001 fc5d 	bl	800f1a0 <iprintf>
 800d8e6:	200a      	movs	r0, #10
 800d8e8:	f001 fc6c 	bl	800f1c4 <putchar>
    return USBH_NOT_SUPPORTED;
 800d8ec:	2303      	movs	r3, #3
 800d8ee:	e01b      	b.n	800d928 <USBH_Get_DevDesc+0x64>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d8f6:	887b      	ldrh	r3, [r7, #2]
 800d8f8:	9300      	str	r3, [sp, #0]
 800d8fa:	4613      	mov	r3, r2
 800d8fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d900:	2100      	movs	r1, #0
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f000 f892 	bl	800da2c <USBH_GetDescriptor>
 800d908:	4603      	mov	r3, r0
 800d90a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800d90c:	7bfb      	ldrb	r3, [r7, #15]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d109      	bne.n	800d926 <USBH_Get_DevDesc+0x62>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d918:	887a      	ldrh	r2, [r7, #2]
 800d91a:	4619      	mov	r1, r3
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f000 f949 	bl	800dbb4 <USBH_ParseDevDesc>
 800d922:	4603      	mov	r3, r0
 800d924:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d926:	7bfb      	ldrb	r3, [r7, #15]
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3710      	adds	r7, #16
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	08010a30 	.word	0x08010a30
 800d934:	08010a38 	.word	0x08010a38

0800d938 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b086      	sub	sp, #24
 800d93c:	af02      	add	r7, sp, #8
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	460b      	mov	r3, r1
 800d942:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	331c      	adds	r3, #28
 800d948:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800d94a:	887b      	ldrh	r3, [r7, #2]
 800d94c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d950:	d90a      	bls.n	800d968 <USBH_Get_CfgDesc+0x30>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
 800d952:	4813      	ldr	r0, [pc, #76]	@ (800d9a0 <USBH_Get_CfgDesc+0x68>)
 800d954:	f001 fc24 	bl	800f1a0 <iprintf>
 800d958:	4812      	ldr	r0, [pc, #72]	@ (800d9a4 <USBH_Get_CfgDesc+0x6c>)
 800d95a:	f001 fc21 	bl	800f1a0 <iprintf>
 800d95e:	200a      	movs	r0, #10
 800d960:	f001 fc30 	bl	800f1c4 <putchar>
    return USBH_NOT_SUPPORTED;
 800d964:	2303      	movs	r3, #3
 800d966:	e016      	b.n	800d996 <USBH_Get_CfgDesc+0x5e>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d968:	887b      	ldrh	r3, [r7, #2]
 800d96a:	9300      	str	r3, [sp, #0]
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d972:	2100      	movs	r1, #0
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f000 f859 	bl	800da2c <USBH_GetDescriptor>
 800d97a:	4603      	mov	r3, r0
 800d97c:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800d97e:	7bfb      	ldrb	r3, [r7, #15]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d107      	bne.n	800d994 <USBH_Get_CfgDesc+0x5c>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800d984:	887b      	ldrh	r3, [r7, #2]
 800d986:	461a      	mov	r2, r3
 800d988:	68b9      	ldr	r1, [r7, #8]
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f000 f9c2 	bl	800dd14 <USBH_ParseCfgDesc>
 800d990:	4603      	mov	r3, r0
 800d992:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d994:	7bfb      	ldrb	r3, [r7, #15]
}
 800d996:	4618      	mov	r0, r3
 800d998:	3710      	adds	r7, #16
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	08010a30 	.word	0x08010a30
 800d9a4:	08010a7c 	.word	0x08010a7c

0800d9a8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b088      	sub	sp, #32
 800d9ac:	af02      	add	r7, sp, #8
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	607a      	str	r2, [r7, #4]
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	72fb      	strb	r3, [r7, #11]
 800d9b8:	4613      	mov	r3, r2
 800d9ba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800d9bc:	893b      	ldrh	r3, [r7, #8]
 800d9be:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d802      	bhi.n	800d9cc <USBH_Get_StringDesc+0x24>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d10a      	bne.n	800d9e2 <USBH_Get_StringDesc+0x3a>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
 800d9cc:	4815      	ldr	r0, [pc, #84]	@ (800da24 <USBH_Get_StringDesc+0x7c>)
 800d9ce:	f001 fbe7 	bl	800f1a0 <iprintf>
 800d9d2:	4815      	ldr	r0, [pc, #84]	@ (800da28 <USBH_Get_StringDesc+0x80>)
 800d9d4:	f001 fbe4 	bl	800f1a0 <iprintf>
 800d9d8:	200a      	movs	r0, #10
 800d9da:	f001 fbf3 	bl	800f1c4 <putchar>
    return USBH_NOT_SUPPORTED;
 800d9de:	2303      	movs	r3, #3
 800d9e0:	e01c      	b.n	800da1c <USBH_Get_StringDesc+0x74>
  }

  status = USBH_GetDescriptor(phost,
 800d9e2:	7afb      	ldrb	r3, [r7, #11]
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800d9ea:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d9f2:	893b      	ldrh	r3, [r7, #8]
 800d9f4:	9300      	str	r3, [sp, #0]
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	2100      	movs	r1, #0
 800d9fa:	68f8      	ldr	r0, [r7, #12]
 800d9fc:	f000 f816 	bl	800da2c <USBH_GetDescriptor>
 800da00:	4603      	mov	r3, r0
 800da02:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800da04:	7dfb      	ldrb	r3, [r7, #23]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d107      	bne.n	800da1a <USBH_Get_StringDesc+0x72>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800da10:	893a      	ldrh	r2, [r7, #8]
 800da12:	6879      	ldr	r1, [r7, #4]
 800da14:	4618      	mov	r0, r3
 800da16:	f000 fb92 	bl	800e13e <USBH_ParseStringDesc>
  }

  return status;
 800da1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3718      	adds	r7, #24
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}
 800da24:	08010a30 	.word	0x08010a30
 800da28:	08010ac8 	.word	0x08010ac8

0800da2c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	607b      	str	r3, [r7, #4]
 800da36:	460b      	mov	r3, r1
 800da38:	72fb      	strb	r3, [r7, #11]
 800da3a:	4613      	mov	r3, r2
 800da3c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	789b      	ldrb	r3, [r3, #2]
 800da42:	2b01      	cmp	r3, #1
 800da44:	d11c      	bne.n	800da80 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800da46:	7afb      	ldrb	r3, [r7, #11]
 800da48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800da4c:	b2da      	uxtb	r2, r3
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	2206      	movs	r2, #6
 800da56:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	893a      	ldrh	r2, [r7, #8]
 800da5c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800da5e:	893b      	ldrh	r3, [r7, #8]
 800da60:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800da64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800da68:	d104      	bne.n	800da74 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f240 4209 	movw	r2, #1033	@ 0x409
 800da70:	829a      	strh	r2, [r3, #20]
 800da72:	e002      	b.n	800da7a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2200      	movs	r2, #0
 800da78:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	8b3a      	ldrh	r2, [r7, #24]
 800da7e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800da80:	8b3b      	ldrh	r3, [r7, #24]
 800da82:	461a      	mov	r2, r3
 800da84:	6879      	ldr	r1, [r7, #4]
 800da86:	68f8      	ldr	r0, [r7, #12]
 800da88:	f000 fba6 	bl	800e1d8 <USBH_CtlReq>
 800da8c:	4603      	mov	r3, r0
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3710      	adds	r7, #16
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}

0800da96 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800da96:	b580      	push	{r7, lr}
 800da98:	b082      	sub	sp, #8
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
 800da9e:	460b      	mov	r3, r1
 800daa0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	789b      	ldrb	r3, [r3, #2]
 800daa6:	2b01      	cmp	r3, #1
 800daa8:	d10f      	bne.n	800daca <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2200      	movs	r2, #0
 800daae:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2205      	movs	r2, #5
 800dab4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800dab6:	78fb      	ldrb	r3, [r7, #3]
 800dab8:	b29a      	uxth	r2, r3
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2200      	movs	r2, #0
 800dac2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2200      	movs	r2, #0
 800dac8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800daca:	2200      	movs	r2, #0
 800dacc:	2100      	movs	r1, #0
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f000 fb82 	bl	800e1d8 <USBH_CtlReq>
 800dad4:	4603      	mov	r3, r0
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3708      	adds	r7, #8
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}

0800dade <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800dade:	b580      	push	{r7, lr}
 800dae0:	b082      	sub	sp, #8
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	6078      	str	r0, [r7, #4]
 800dae6:	460b      	mov	r3, r1
 800dae8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	789b      	ldrb	r3, [r3, #2]
 800daee:	2b01      	cmp	r3, #1
 800daf0:	d10e      	bne.n	800db10 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2200      	movs	r2, #0
 800daf6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2209      	movs	r2, #9
 800dafc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	887a      	ldrh	r2, [r7, #2]
 800db02:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2200      	movs	r2, #0
 800db08:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2200      	movs	r2, #0
 800db0e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800db10:	2200      	movs	r2, #0
 800db12:	2100      	movs	r1, #0
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f000 fb5f 	bl	800e1d8 <USBH_CtlReq>
 800db1a:	4603      	mov	r3, r0
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3708      	adds	r7, #8
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	460b      	mov	r3, r1
 800db2e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	789b      	ldrb	r3, [r3, #2]
 800db34:	2b01      	cmp	r3, #1
 800db36:	d10f      	bne.n	800db58 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2200      	movs	r2, #0
 800db3c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2203      	movs	r2, #3
 800db42:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800db44:	78fb      	ldrb	r3, [r7, #3]
 800db46:	b29a      	uxth	r2, r3
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2200      	movs	r2, #0
 800db50:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2200      	movs	r2, #0
 800db56:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800db58:	2200      	movs	r2, #0
 800db5a:	2100      	movs	r1, #0
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f000 fb3b 	bl	800e1d8 <USBH_CtlReq>
 800db62:	4603      	mov	r3, r0
}
 800db64:	4618      	mov	r0, r3
 800db66:	3708      	adds	r7, #8
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	460b      	mov	r3, r1
 800db76:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	789b      	ldrb	r3, [r3, #2]
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d10f      	bne.n	800dba0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2202      	movs	r2, #2
 800db84:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2201      	movs	r2, #1
 800db8a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2200      	movs	r2, #0
 800db90:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800db92:	78fb      	ldrb	r3, [r7, #3]
 800db94:	b29a      	uxth	r2, r3
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2200      	movs	r2, #0
 800db9e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800dba0:	2200      	movs	r2, #0
 800dba2:	2100      	movs	r1, #0
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f000 fb17 	bl	800e1d8 <USBH_CtlReq>
 800dbaa:	4603      	mov	r3, r0
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3708      	adds	r7, #8
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}

0800dbb4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b087      	sub	sp, #28
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	60b9      	str	r1, [r7, #8]
 800dbbe:	4613      	mov	r3, r2
 800dbc0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f603 43de 	addw	r3, r3, #3294	@ 0xcde
 800dbc8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d101      	bne.n	800dbd8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800dbd4:	2302      	movs	r3, #2
 800dbd6:	e094      	b.n	800dd02 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	781a      	ldrb	r2, [r3, #0]
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	785a      	ldrb	r2, [r3, #1]
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	3302      	adds	r3, #2
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	461a      	mov	r2, r3
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	3303      	adds	r3, #3
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	021b      	lsls	r3, r3, #8
 800dbf8:	b29b      	uxth	r3, r3
 800dbfa:	4313      	orrs	r3, r2
 800dbfc:	b29a      	uxth	r2, r3
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	791a      	ldrb	r2, [r3, #4]
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	795a      	ldrb	r2, [r3, #5]
 800dc0e:	693b      	ldr	r3, [r7, #16]
 800dc10:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	799a      	ldrb	r2, [r3, #6]
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	79da      	ldrb	r2, [r3, #7]
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d004      	beq.n	800dc36 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800dc32:	2b01      	cmp	r3, #1
 800dc34:	d11b      	bne.n	800dc6e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	79db      	ldrb	r3, [r3, #7]
 800dc3a:	2b20      	cmp	r3, #32
 800dc3c:	dc0f      	bgt.n	800dc5e <USBH_ParseDevDesc+0xaa>
 800dc3e:	2b08      	cmp	r3, #8
 800dc40:	db0f      	blt.n	800dc62 <USBH_ParseDevDesc+0xae>
 800dc42:	3b08      	subs	r3, #8
 800dc44:	4a32      	ldr	r2, [pc, #200]	@ (800dd10 <USBH_ParseDevDesc+0x15c>)
 800dc46:	fa22 f303 	lsr.w	r3, r2, r3
 800dc4a:	f003 0301 	and.w	r3, r3, #1
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	bf14      	ite	ne
 800dc52:	2301      	movne	r3, #1
 800dc54:	2300      	moveq	r3, #0
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d106      	bne.n	800dc6a <USBH_ParseDevDesc+0xb6>
 800dc5c:	e001      	b.n	800dc62 <USBH_ParseDevDesc+0xae>
 800dc5e:	2b40      	cmp	r3, #64	@ 0x40
 800dc60:	d003      	beq.n	800dc6a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	2208      	movs	r2, #8
 800dc66:	71da      	strb	r2, [r3, #7]
        break;
 800dc68:	e000      	b.n	800dc6c <USBH_ParseDevDesc+0xb8>
        break;
 800dc6a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800dc6c:	e00e      	b.n	800dc8c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800dc74:	2b02      	cmp	r3, #2
 800dc76:	d107      	bne.n	800dc88 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	79db      	ldrb	r3, [r3, #7]
 800dc7c:	2b08      	cmp	r3, #8
 800dc7e:	d005      	beq.n	800dc8c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	2208      	movs	r2, #8
 800dc84:	71da      	strb	r2, [r3, #7]
 800dc86:	e001      	b.n	800dc8c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800dc88:	2303      	movs	r3, #3
 800dc8a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800dc8c:	88fb      	ldrh	r3, [r7, #6]
 800dc8e:	2b08      	cmp	r3, #8
 800dc90:	d936      	bls.n	800dd00 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	3308      	adds	r3, #8
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	461a      	mov	r2, r3
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	3309      	adds	r3, #9
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	021b      	lsls	r3, r3, #8
 800dca2:	b29b      	uxth	r3, r3
 800dca4:	4313      	orrs	r3, r2
 800dca6:	b29a      	uxth	r2, r3
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	330a      	adds	r3, #10
 800dcb0:	781b      	ldrb	r3, [r3, #0]
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	330b      	adds	r3, #11
 800dcb8:	781b      	ldrb	r3, [r3, #0]
 800dcba:	021b      	lsls	r3, r3, #8
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	b29a      	uxth	r2, r3
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	330c      	adds	r3, #12
 800dcca:	781b      	ldrb	r3, [r3, #0]
 800dccc:	461a      	mov	r2, r3
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	330d      	adds	r3, #13
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	021b      	lsls	r3, r3, #8
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	4313      	orrs	r3, r2
 800dcda:	b29a      	uxth	r2, r3
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	7b9a      	ldrb	r2, [r3, #14]
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	7bda      	ldrb	r2, [r3, #15]
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	7c1a      	ldrb	r2, [r3, #16]
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	7c5a      	ldrb	r2, [r3, #17]
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800dd00:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	371c      	adds	r7, #28
 800dd06:	46bd      	mov	sp, r7
 800dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0c:	4770      	bx	lr
 800dd0e:	bf00      	nop
 800dd10:	01000101 	.word	0x01000101

0800dd14 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b08c      	sub	sp, #48	@ 0x30
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	60f8      	str	r0, [r7, #12]
 800dd1c:	60b9      	str	r1, [r7, #8]
 800dd1e:	4613      	mov	r3, r2
 800dd20:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 800dd28:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800dd30:	2300      	movs	r3, #0
 800dd32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800dd36:	2300      	movs	r3, #0
 800dd38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d101      	bne.n	800dd46 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800dd42:	2302      	movs	r3, #2
 800dd44:	e0da      	b.n	800defc <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800dd4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	2b09      	cmp	r3, #9
 800dd50:	d002      	beq.n	800dd58 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800dd52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd54:	2209      	movs	r2, #9
 800dd56:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	781a      	ldrb	r2, [r3, #0]
 800dd5c:	6a3b      	ldr	r3, [r7, #32]
 800dd5e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	785a      	ldrb	r2, [r3, #1]
 800dd64:	6a3b      	ldr	r3, [r7, #32]
 800dd66:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	3302      	adds	r3, #2
 800dd6c:	781b      	ldrb	r3, [r3, #0]
 800dd6e:	461a      	mov	r2, r3
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	3303      	adds	r3, #3
 800dd74:	781b      	ldrb	r3, [r3, #0]
 800dd76:	021b      	lsls	r3, r3, #8
 800dd78:	b29b      	uxth	r3, r3
 800dd7a:	4313      	orrs	r3, r2
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dd82:	bf28      	it	cs
 800dd84:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800dd88:	b29a      	uxth	r2, r3
 800dd8a:	6a3b      	ldr	r3, [r7, #32]
 800dd8c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	791a      	ldrb	r2, [r3, #4]
 800dd92:	6a3b      	ldr	r3, [r7, #32]
 800dd94:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	795a      	ldrb	r2, [r3, #5]
 800dd9a:	6a3b      	ldr	r3, [r7, #32]
 800dd9c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	799a      	ldrb	r2, [r3, #6]
 800dda2:	6a3b      	ldr	r3, [r7, #32]
 800dda4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	79da      	ldrb	r2, [r3, #7]
 800ddaa:	6a3b      	ldr	r3, [r7, #32]
 800ddac:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	7a1a      	ldrb	r2, [r3, #8]
 800ddb2:	6a3b      	ldr	r3, [r7, #32]
 800ddb4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ddb6:	88fb      	ldrh	r3, [r7, #6]
 800ddb8:	2b09      	cmp	r3, #9
 800ddba:	f240 809d 	bls.w	800def8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800ddbe:	2309      	movs	r3, #9
 800ddc0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ddc6:	e081      	b.n	800decc <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ddc8:	f107 0316 	add.w	r3, r7, #22
 800ddcc:	4619      	mov	r1, r3
 800ddce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ddd0:	f000 f9e8 	bl	800e1a4 <USBH_GetNextDesc>
 800ddd4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ddd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddd8:	785b      	ldrb	r3, [r3, #1]
 800ddda:	2b04      	cmp	r3, #4
 800dddc:	d176      	bne.n	800decc <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ddde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dde0:	781b      	ldrb	r3, [r3, #0]
 800dde2:	2b09      	cmp	r3, #9
 800dde4:	d002      	beq.n	800ddec <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800dde6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dde8:	2209      	movs	r2, #9
 800ddea:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ddec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ddf0:	221a      	movs	r2, #26
 800ddf2:	fb02 f303 	mul.w	r3, r2, r3
 800ddf6:	3308      	adds	r3, #8
 800ddf8:	6a3a      	ldr	r2, [r7, #32]
 800ddfa:	4413      	add	r3, r2
 800ddfc:	3302      	adds	r3, #2
 800ddfe:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800de00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800de02:	69f8      	ldr	r0, [r7, #28]
 800de04:	f000 f87e 	bl	800df04 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800de08:	2300      	movs	r3, #0
 800de0a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800de0e:	2300      	movs	r3, #0
 800de10:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800de12:	e043      	b.n	800de9c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800de14:	f107 0316 	add.w	r3, r7, #22
 800de18:	4619      	mov	r1, r3
 800de1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de1c:	f000 f9c2 	bl	800e1a4 <USBH_GetNextDesc>
 800de20:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800de22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de24:	785b      	ldrb	r3, [r3, #1]
 800de26:	2b05      	cmp	r3, #5
 800de28:	d138      	bne.n	800de9c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800de2a:	69fb      	ldr	r3, [r7, #28]
 800de2c:	795b      	ldrb	r3, [r3, #5]
 800de2e:	2b01      	cmp	r3, #1
 800de30:	d113      	bne.n	800de5a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800de32:	69fb      	ldr	r3, [r7, #28]
 800de34:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800de36:	2b02      	cmp	r3, #2
 800de38:	d003      	beq.n	800de42 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800de3a:	69fb      	ldr	r3, [r7, #28]
 800de3c:	799b      	ldrb	r3, [r3, #6]
 800de3e:	2b03      	cmp	r3, #3
 800de40:	d10b      	bne.n	800de5a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800de42:	69fb      	ldr	r3, [r7, #28]
 800de44:	79db      	ldrb	r3, [r3, #7]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d10b      	bne.n	800de62 <USBH_ParseCfgDesc+0x14e>
 800de4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	2b09      	cmp	r3, #9
 800de50:	d007      	beq.n	800de62 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800de52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de54:	2209      	movs	r2, #9
 800de56:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800de58:	e003      	b.n	800de62 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800de5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de5c:	2207      	movs	r2, #7
 800de5e:	701a      	strb	r2, [r3, #0]
 800de60:	e000      	b.n	800de64 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800de62:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800de64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800de68:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800de6c:	3201      	adds	r2, #1
 800de6e:	00d2      	lsls	r2, r2, #3
 800de70:	211a      	movs	r1, #26
 800de72:	fb01 f303 	mul.w	r3, r1, r3
 800de76:	4413      	add	r3, r2
 800de78:	3308      	adds	r3, #8
 800de7a:	6a3a      	ldr	r2, [r7, #32]
 800de7c:	4413      	add	r3, r2
 800de7e:	3304      	adds	r3, #4
 800de80:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800de82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800de84:	69b9      	ldr	r1, [r7, #24]
 800de86:	68f8      	ldr	r0, [r7, #12]
 800de88:	f000 f870 	bl	800df6c <USBH_ParseEPDesc>
 800de8c:	4603      	mov	r3, r0
 800de8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800de92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800de96:	3301      	adds	r3, #1
 800de98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800de9c:	69fb      	ldr	r3, [r7, #28]
 800de9e:	791b      	ldrb	r3, [r3, #4]
 800dea0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d204      	bcs.n	800deb2 <USBH_ParseCfgDesc+0x19e>
 800dea8:	6a3b      	ldr	r3, [r7, #32]
 800deaa:	885a      	ldrh	r2, [r3, #2]
 800deac:	8afb      	ldrh	r3, [r7, #22]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d8b0      	bhi.n	800de14 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800deb2:	69fb      	ldr	r3, [r7, #28]
 800deb4:	791b      	ldrb	r3, [r3, #4]
 800deb6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800deba:	429a      	cmp	r2, r3
 800debc:	d201      	bcs.n	800dec2 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800debe:	2303      	movs	r3, #3
 800dec0:	e01c      	b.n	800defc <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800dec2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dec6:	3301      	adds	r3, #1
 800dec8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800decc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ded0:	2b01      	cmp	r3, #1
 800ded2:	d805      	bhi.n	800dee0 <USBH_ParseCfgDesc+0x1cc>
 800ded4:	6a3b      	ldr	r3, [r7, #32]
 800ded6:	885a      	ldrh	r2, [r3, #2]
 800ded8:	8afb      	ldrh	r3, [r7, #22]
 800deda:	429a      	cmp	r2, r3
 800dedc:	f63f af74 	bhi.w	800ddc8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800dee0:	6a3b      	ldr	r3, [r7, #32]
 800dee2:	791b      	ldrb	r3, [r3, #4]
 800dee4:	2b02      	cmp	r3, #2
 800dee6:	bf28      	it	cs
 800dee8:	2302      	movcs	r3, #2
 800deea:	b2db      	uxtb	r3, r3
 800deec:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800def0:	429a      	cmp	r2, r3
 800def2:	d201      	bcs.n	800def8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800def4:	2303      	movs	r3, #3
 800def6:	e001      	b.n	800defc <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800def8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800defc:	4618      	mov	r0, r3
 800defe:	3730      	adds	r7, #48	@ 0x30
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800df04:	b480      	push	{r7}
 800df06:	b083      	sub	sp, #12
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	781a      	ldrb	r2, [r3, #0]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	785a      	ldrb	r2, [r3, #1]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	789a      	ldrb	r2, [r3, #2]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	78da      	ldrb	r2, [r3, #3]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	3304      	adds	r3, #4
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	2b02      	cmp	r3, #2
 800df36:	bf28      	it	cs
 800df38:	2302      	movcs	r3, #2
 800df3a:	b2da      	uxtb	r2, r3
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	795a      	ldrb	r2, [r3, #5]
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	799a      	ldrb	r2, [r3, #6]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	79da      	ldrb	r2, [r3, #7]
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	7a1a      	ldrb	r2, [r3, #8]
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	721a      	strb	r2, [r3, #8]
}
 800df60:	bf00      	nop
 800df62:	370c      	adds	r7, #12
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr

0800df6c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b087      	sub	sp, #28
 800df70:	af00      	add	r7, sp, #0
 800df72:	60f8      	str	r0, [r7, #12]
 800df74:	60b9      	str	r1, [r7, #8]
 800df76:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800df78:	2300      	movs	r3, #0
 800df7a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	781a      	ldrb	r2, [r3, #0]
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	785a      	ldrb	r2, [r3, #1]
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	789a      	ldrb	r2, [r3, #2]
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	78da      	ldrb	r2, [r3, #3]
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	3304      	adds	r3, #4
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	3305      	adds	r3, #5
 800dfa8:	781b      	ldrb	r3, [r3, #0]
 800dfaa:	021b      	lsls	r3, r3, #8
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	4313      	orrs	r3, r2
 800dfb0:	b29a      	uxth	r2, r3
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	799a      	ldrb	r2, [r3, #6]
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	889b      	ldrh	r3, [r3, #4]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d00a      	beq.n	800dfdc <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800dfca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dfce:	d805      	bhi.n	800dfdc <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800dfd4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d901      	bls.n	800dfe0 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800dfdc:	2303      	movs	r3, #3
 800dfde:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d136      	bne.n	800e058 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	78db      	ldrb	r3, [r3, #3]
 800dfee:	f003 0303 	and.w	r3, r3, #3
 800dff2:	2b02      	cmp	r3, #2
 800dff4:	d108      	bne.n	800e008 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	889b      	ldrh	r3, [r3, #4]
 800dffa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dffe:	f240 8097 	bls.w	800e130 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800e002:	2303      	movs	r3, #3
 800e004:	75fb      	strb	r3, [r7, #23]
 800e006:	e093      	b.n	800e130 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	78db      	ldrb	r3, [r3, #3]
 800e00c:	f003 0303 	and.w	r3, r3, #3
 800e010:	2b00      	cmp	r3, #0
 800e012:	d107      	bne.n	800e024 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	889b      	ldrh	r3, [r3, #4]
 800e018:	2b40      	cmp	r3, #64	@ 0x40
 800e01a:	f240 8089 	bls.w	800e130 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800e01e:	2303      	movs	r3, #3
 800e020:	75fb      	strb	r3, [r7, #23]
 800e022:	e085      	b.n	800e130 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	78db      	ldrb	r3, [r3, #3]
 800e028:	f003 0303 	and.w	r3, r3, #3
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	d005      	beq.n	800e03c <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	78db      	ldrb	r3, [r3, #3]
 800e034:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e038:	2b03      	cmp	r3, #3
 800e03a:	d10a      	bne.n	800e052 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	799b      	ldrb	r3, [r3, #6]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d003      	beq.n	800e04c <USBH_ParseEPDesc+0xe0>
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	799b      	ldrb	r3, [r3, #6]
 800e048:	2b10      	cmp	r3, #16
 800e04a:	d970      	bls.n	800e12e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e04c:	2303      	movs	r3, #3
 800e04e:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e050:	e06d      	b.n	800e12e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e052:	2303      	movs	r3, #3
 800e054:	75fb      	strb	r3, [r7, #23]
 800e056:	e06b      	b.n	800e130 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d13c      	bne.n	800e0dc <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	78db      	ldrb	r3, [r3, #3]
 800e066:	f003 0303 	and.w	r3, r3, #3
 800e06a:	2b02      	cmp	r3, #2
 800e06c:	d005      	beq.n	800e07a <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	78db      	ldrb	r3, [r3, #3]
 800e072:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800e076:	2b00      	cmp	r3, #0
 800e078:	d106      	bne.n	800e088 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	889b      	ldrh	r3, [r3, #4]
 800e07e:	2b40      	cmp	r3, #64	@ 0x40
 800e080:	d956      	bls.n	800e130 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800e082:	2303      	movs	r3, #3
 800e084:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e086:	e053      	b.n	800e130 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	78db      	ldrb	r3, [r3, #3]
 800e08c:	f003 0303 	and.w	r3, r3, #3
 800e090:	2b01      	cmp	r3, #1
 800e092:	d10e      	bne.n	800e0b2 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	799b      	ldrb	r3, [r3, #6]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d007      	beq.n	800e0ac <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800e0a0:	2b10      	cmp	r3, #16
 800e0a2:	d803      	bhi.n	800e0ac <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800e0a8:	2b40      	cmp	r3, #64	@ 0x40
 800e0aa:	d941      	bls.n	800e130 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800e0ac:	2303      	movs	r3, #3
 800e0ae:	75fb      	strb	r3, [r7, #23]
 800e0b0:	e03e      	b.n	800e130 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	78db      	ldrb	r3, [r3, #3]
 800e0b6:	f003 0303 	and.w	r3, r3, #3
 800e0ba:	2b03      	cmp	r3, #3
 800e0bc:	d10b      	bne.n	800e0d6 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	799b      	ldrb	r3, [r3, #6]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d004      	beq.n	800e0d0 <USBH_ParseEPDesc+0x164>
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	889b      	ldrh	r3, [r3, #4]
 800e0ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e0ce:	d32f      	bcc.n	800e130 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800e0d0:	2303      	movs	r3, #3
 800e0d2:	75fb      	strb	r3, [r7, #23]
 800e0d4:	e02c      	b.n	800e130 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e0d6:	2303      	movs	r3, #3
 800e0d8:	75fb      	strb	r3, [r7, #23]
 800e0da:	e029      	b.n	800e130 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800e0e2:	2b02      	cmp	r3, #2
 800e0e4:	d120      	bne.n	800e128 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	78db      	ldrb	r3, [r3, #3]
 800e0ea:	f003 0303 	and.w	r3, r3, #3
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d106      	bne.n	800e100 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	889b      	ldrh	r3, [r3, #4]
 800e0f6:	2b08      	cmp	r3, #8
 800e0f8:	d01a      	beq.n	800e130 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800e0fa:	2303      	movs	r3, #3
 800e0fc:	75fb      	strb	r3, [r7, #23]
 800e0fe:	e017      	b.n	800e130 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	78db      	ldrb	r3, [r3, #3]
 800e104:	f003 0303 	and.w	r3, r3, #3
 800e108:	2b03      	cmp	r3, #3
 800e10a:	d10a      	bne.n	800e122 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	799b      	ldrb	r3, [r3, #6]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d003      	beq.n	800e11c <USBH_ParseEPDesc+0x1b0>
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	889b      	ldrh	r3, [r3, #4]
 800e118:	2b08      	cmp	r3, #8
 800e11a:	d909      	bls.n	800e130 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800e11c:	2303      	movs	r3, #3
 800e11e:	75fb      	strb	r3, [r7, #23]
 800e120:	e006      	b.n	800e130 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e122:	2303      	movs	r3, #3
 800e124:	75fb      	strb	r3, [r7, #23]
 800e126:	e003      	b.n	800e130 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800e128:	2303      	movs	r3, #3
 800e12a:	75fb      	strb	r3, [r7, #23]
 800e12c:	e000      	b.n	800e130 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e12e:	bf00      	nop
  }

  return status;
 800e130:	7dfb      	ldrb	r3, [r7, #23]
}
 800e132:	4618      	mov	r0, r3
 800e134:	371c      	adds	r7, #28
 800e136:	46bd      	mov	sp, r7
 800e138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13c:	4770      	bx	lr

0800e13e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e13e:	b480      	push	{r7}
 800e140:	b087      	sub	sp, #28
 800e142:	af00      	add	r7, sp, #0
 800e144:	60f8      	str	r0, [r7, #12]
 800e146:	60b9      	str	r1, [r7, #8]
 800e148:	4613      	mov	r3, r2
 800e14a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	3301      	adds	r3, #1
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	2b03      	cmp	r3, #3
 800e154:	d120      	bne.n	800e198 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	1e9a      	subs	r2, r3, #2
 800e15c:	88fb      	ldrh	r3, [r7, #6]
 800e15e:	4293      	cmp	r3, r2
 800e160:	bf28      	it	cs
 800e162:	4613      	movcs	r3, r2
 800e164:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	3302      	adds	r3, #2
 800e16a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e16c:	2300      	movs	r3, #0
 800e16e:	82fb      	strh	r3, [r7, #22]
 800e170:	e00b      	b.n	800e18a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e172:	8afb      	ldrh	r3, [r7, #22]
 800e174:	68fa      	ldr	r2, [r7, #12]
 800e176:	4413      	add	r3, r2
 800e178:	781a      	ldrb	r2, [r3, #0]
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	3301      	adds	r3, #1
 800e182:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e184:	8afb      	ldrh	r3, [r7, #22]
 800e186:	3302      	adds	r3, #2
 800e188:	82fb      	strh	r3, [r7, #22]
 800e18a:	8afa      	ldrh	r2, [r7, #22]
 800e18c:	8abb      	ldrh	r3, [r7, #20]
 800e18e:	429a      	cmp	r2, r3
 800e190:	d3ef      	bcc.n	800e172 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	2200      	movs	r2, #0
 800e196:	701a      	strb	r2, [r3, #0]
  }
}
 800e198:	bf00      	nop
 800e19a:	371c      	adds	r7, #28
 800e19c:	46bd      	mov	sp, r7
 800e19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a2:	4770      	bx	lr

0800e1a4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b085      	sub	sp, #20
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	881b      	ldrh	r3, [r3, #0]
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	7812      	ldrb	r2, [r2, #0]
 800e1b6:	4413      	add	r3, r2
 800e1b8:	b29a      	uxth	r2, r3
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	4413      	add	r3, r2
 800e1c8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e1ca:	68fb      	ldr	r3, [r7, #12]
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3714      	adds	r7, #20
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr

0800e1d8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b086      	sub	sp, #24
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	60f8      	str	r0, [r7, #12]
 800e1e0:	60b9      	str	r1, [r7, #8]
 800e1e2:	4613      	mov	r3, r2
 800e1e4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	789b      	ldrb	r3, [r3, #2]
 800e1ee:	2b01      	cmp	r3, #1
 800e1f0:	d002      	beq.n	800e1f8 <USBH_CtlReq+0x20>
 800e1f2:	2b02      	cmp	r3, #2
 800e1f4:	d00f      	beq.n	800e216 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800e1f6:	e027      	b.n	800e248 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	68ba      	ldr	r2, [r7, #8]
 800e1fc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	88fa      	ldrh	r2, [r7, #6]
 800e202:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2201      	movs	r2, #1
 800e208:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	2202      	movs	r2, #2
 800e20e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e210:	2301      	movs	r3, #1
 800e212:	75fb      	strb	r3, [r7, #23]
      break;
 800e214:	e018      	b.n	800e248 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800e216:	68f8      	ldr	r0, [r7, #12]
 800e218:	f000 f81c 	bl	800e254 <USBH_HandleControl>
 800e21c:	4603      	mov	r3, r0
 800e21e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e220:	7dfb      	ldrb	r3, [r7, #23]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d002      	beq.n	800e22c <USBH_CtlReq+0x54>
 800e226:	7dfb      	ldrb	r3, [r7, #23]
 800e228:	2b03      	cmp	r3, #3
 800e22a:	d106      	bne.n	800e23a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	2201      	movs	r2, #1
 800e230:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2200      	movs	r2, #0
 800e236:	761a      	strb	r2, [r3, #24]
      break;
 800e238:	e005      	b.n	800e246 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800e23a:	7dfb      	ldrb	r3, [r7, #23]
 800e23c:	2b02      	cmp	r3, #2
 800e23e:	d102      	bne.n	800e246 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2201      	movs	r2, #1
 800e244:	709a      	strb	r2, [r3, #2]
      break;
 800e246:	bf00      	nop
  }
  return status;
 800e248:	7dfb      	ldrb	r3, [r7, #23]
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3718      	adds	r7, #24
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
	...

0800e254 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b086      	sub	sp, #24
 800e258:	af02      	add	r7, sp, #8
 800e25a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e25c:	2301      	movs	r3, #1
 800e25e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e260:	2300      	movs	r3, #0
 800e262:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	7e1b      	ldrb	r3, [r3, #24]
 800e268:	3b01      	subs	r3, #1
 800e26a:	2b0a      	cmp	r3, #10
 800e26c:	f200 815f 	bhi.w	800e52e <USBH_HandleControl+0x2da>
 800e270:	a201      	add	r2, pc, #4	@ (adr r2, 800e278 <USBH_HandleControl+0x24>)
 800e272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e276:	bf00      	nop
 800e278:	0800e2a5 	.word	0x0800e2a5
 800e27c:	0800e2bf 	.word	0x0800e2bf
 800e280:	0800e329 	.word	0x0800e329
 800e284:	0800e34f 	.word	0x0800e34f
 800e288:	0800e387 	.word	0x0800e387
 800e28c:	0800e3b1 	.word	0x0800e3b1
 800e290:	0800e403 	.word	0x0800e403
 800e294:	0800e425 	.word	0x0800e425
 800e298:	0800e461 	.word	0x0800e461
 800e29c:	0800e487 	.word	0x0800e487
 800e2a0:	0800e4c5 	.word	0x0800e4c5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f103 0110 	add.w	r1, r3, #16
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	795b      	ldrb	r3, [r3, #5]
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f000 f951 	bl	800e558 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2202      	movs	r2, #2
 800e2ba:	761a      	strb	r2, [r3, #24]
      break;
 800e2bc:	e142      	b.n	800e544 <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	795b      	ldrb	r3, [r3, #5]
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f000 fcb3 	bl	800ec30 <USBH_LL_GetURBState>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e2ce:	7bbb      	ldrb	r3, [r7, #14]
 800e2d0:	2b01      	cmp	r3, #1
 800e2d2:	d11e      	bne.n	800e312 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	7c1b      	ldrb	r3, [r3, #16]
 800e2d8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e2dc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	8adb      	ldrh	r3, [r3, #22]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d00a      	beq.n	800e2fc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e2e6:	7b7b      	ldrb	r3, [r7, #13]
 800e2e8:	2b80      	cmp	r3, #128	@ 0x80
 800e2ea:	d103      	bne.n	800e2f4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2203      	movs	r2, #3
 800e2f0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e2f2:	e11e      	b.n	800e532 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2205      	movs	r2, #5
 800e2f8:	761a      	strb	r2, [r3, #24]
      break;
 800e2fa:	e11a      	b.n	800e532 <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 800e2fc:	7b7b      	ldrb	r3, [r7, #13]
 800e2fe:	2b80      	cmp	r3, #128	@ 0x80
 800e300:	d103      	bne.n	800e30a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2209      	movs	r2, #9
 800e306:	761a      	strb	r2, [r3, #24]
      break;
 800e308:	e113      	b.n	800e532 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2207      	movs	r2, #7
 800e30e:	761a      	strb	r2, [r3, #24]
      break;
 800e310:	e10f      	b.n	800e532 <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e312:	7bbb      	ldrb	r3, [r7, #14]
 800e314:	2b04      	cmp	r3, #4
 800e316:	d003      	beq.n	800e320 <USBH_HandleControl+0xcc>
 800e318:	7bbb      	ldrb	r3, [r7, #14]
 800e31a:	2b02      	cmp	r3, #2
 800e31c:	f040 8109 	bne.w	800e532 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	220b      	movs	r2, #11
 800e324:	761a      	strb	r2, [r3, #24]
      break;
 800e326:	e104      	b.n	800e532 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 800e32e:	b29a      	uxth	r2, r3
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6899      	ldr	r1, [r3, #8]
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	899a      	ldrh	r2, [r3, #12]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	791b      	ldrb	r3, [r3, #4]
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f000 f948 	bl	800e5d6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2204      	movs	r2, #4
 800e34a:	761a      	strb	r2, [r3, #24]
      break;
 800e34c:	e0fa      	b.n	800e544 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	791b      	ldrb	r3, [r3, #4]
 800e352:	4619      	mov	r1, r3
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f000 fc6b 	bl	800ec30 <USBH_LL_GetURBState>
 800e35a:	4603      	mov	r3, r0
 800e35c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e35e:	7bbb      	ldrb	r3, [r7, #14]
 800e360:	2b01      	cmp	r3, #1
 800e362:	d102      	bne.n	800e36a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2209      	movs	r2, #9
 800e368:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e36a:	7bbb      	ldrb	r3, [r7, #14]
 800e36c:	2b05      	cmp	r3, #5
 800e36e:	d102      	bne.n	800e376 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e370:	2303      	movs	r3, #3
 800e372:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e374:	e0df      	b.n	800e536 <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800e376:	7bbb      	ldrb	r3, [r7, #14]
 800e378:	2b04      	cmp	r3, #4
 800e37a:	f040 80dc 	bne.w	800e536 <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	220b      	movs	r2, #11
 800e382:	761a      	strb	r2, [r3, #24]
      break;
 800e384:	e0d7      	b.n	800e536 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6899      	ldr	r1, [r3, #8]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	899a      	ldrh	r2, [r3, #12]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	795b      	ldrb	r3, [r3, #5]
 800e392:	2001      	movs	r0, #1
 800e394:	9000      	str	r0, [sp, #0]
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f000 f8f8 	bl	800e58c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 800e3a2:	b29a      	uxth	r2, r3
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2206      	movs	r2, #6
 800e3ac:	761a      	strb	r2, [r3, #24]
      break;
 800e3ae:	e0c9      	b.n	800e544 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	795b      	ldrb	r3, [r3, #5]
 800e3b4:	4619      	mov	r1, r3
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f000 fc3a 	bl	800ec30 <USBH_LL_GetURBState>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e3c0:	7bbb      	ldrb	r3, [r7, #14]
 800e3c2:	2b01      	cmp	r3, #1
 800e3c4:	d103      	bne.n	800e3ce <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2207      	movs	r2, #7
 800e3ca:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e3cc:	e0b5      	b.n	800e53a <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 800e3ce:	7bbb      	ldrb	r3, [r7, #14]
 800e3d0:	2b05      	cmp	r3, #5
 800e3d2:	d105      	bne.n	800e3e0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	220c      	movs	r2, #12
 800e3d8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e3da:	2303      	movs	r3, #3
 800e3dc:	73fb      	strb	r3, [r7, #15]
      break;
 800e3de:	e0ac      	b.n	800e53a <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e3e0:	7bbb      	ldrb	r3, [r7, #14]
 800e3e2:	2b02      	cmp	r3, #2
 800e3e4:	d103      	bne.n	800e3ee <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2205      	movs	r2, #5
 800e3ea:	761a      	strb	r2, [r3, #24]
      break;
 800e3ec:	e0a5      	b.n	800e53a <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 800e3ee:	7bbb      	ldrb	r3, [r7, #14]
 800e3f0:	2b04      	cmp	r3, #4
 800e3f2:	f040 80a2 	bne.w	800e53a <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	220b      	movs	r2, #11
 800e3fa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e3fc:	2302      	movs	r3, #2
 800e3fe:	73fb      	strb	r3, [r7, #15]
      break;
 800e400:	e09b      	b.n	800e53a <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	791b      	ldrb	r3, [r3, #4]
 800e406:	2200      	movs	r2, #0
 800e408:	2100      	movs	r1, #0
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f000 f8e3 	bl	800e5d6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 800e416:	b29a      	uxth	r2, r3
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2208      	movs	r2, #8
 800e420:	761a      	strb	r2, [r3, #24]

      break;
 800e422:	e08f      	b.n	800e544 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	791b      	ldrb	r3, [r3, #4]
 800e428:	4619      	mov	r1, r3
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f000 fc00 	bl	800ec30 <USBH_LL_GetURBState>
 800e430:	4603      	mov	r3, r0
 800e432:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e434:	7bbb      	ldrb	r3, [r7, #14]
 800e436:	2b01      	cmp	r3, #1
 800e438:	d105      	bne.n	800e446 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	220d      	movs	r2, #13
 800e43e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e440:	2300      	movs	r3, #0
 800e442:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e444:	e07b      	b.n	800e53e <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 800e446:	7bbb      	ldrb	r3, [r7, #14]
 800e448:	2b04      	cmp	r3, #4
 800e44a:	d103      	bne.n	800e454 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	220b      	movs	r2, #11
 800e450:	761a      	strb	r2, [r3, #24]
      break;
 800e452:	e074      	b.n	800e53e <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 800e454:	7bbb      	ldrb	r3, [r7, #14]
 800e456:	2b05      	cmp	r3, #5
 800e458:	d171      	bne.n	800e53e <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 800e45a:	2303      	movs	r3, #3
 800e45c:	73fb      	strb	r3, [r7, #15]
      break;
 800e45e:	e06e      	b.n	800e53e <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	795b      	ldrb	r3, [r3, #5]
 800e464:	2201      	movs	r2, #1
 800e466:	9200      	str	r2, [sp, #0]
 800e468:	2200      	movs	r2, #0
 800e46a:	2100      	movs	r1, #0
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f000 f88d 	bl	800e58c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 800e478:	b29a      	uxth	r2, r3
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	220a      	movs	r2, #10
 800e482:	761a      	strb	r2, [r3, #24]
      break;
 800e484:	e05e      	b.n	800e544 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	795b      	ldrb	r3, [r3, #5]
 800e48a:	4619      	mov	r1, r3
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 fbcf 	bl	800ec30 <USBH_LL_GetURBState>
 800e492:	4603      	mov	r3, r0
 800e494:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e496:	7bbb      	ldrb	r3, [r7, #14]
 800e498:	2b01      	cmp	r3, #1
 800e49a:	d105      	bne.n	800e4a8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e49c:	2300      	movs	r3, #0
 800e49e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	220d      	movs	r2, #13
 800e4a4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e4a6:	e04c      	b.n	800e542 <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e4a8:	7bbb      	ldrb	r3, [r7, #14]
 800e4aa:	2b02      	cmp	r3, #2
 800e4ac:	d103      	bne.n	800e4b6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2209      	movs	r2, #9
 800e4b2:	761a      	strb	r2, [r3, #24]
      break;
 800e4b4:	e045      	b.n	800e542 <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800e4b6:	7bbb      	ldrb	r3, [r7, #14]
 800e4b8:	2b04      	cmp	r3, #4
 800e4ba:	d142      	bne.n	800e542 <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	220b      	movs	r2, #11
 800e4c0:	761a      	strb	r2, [r3, #24]
      break;
 800e4c2:	e03e      	b.n	800e542 <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	7e5b      	ldrb	r3, [r3, #25]
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	b2da      	uxtb	r2, r3
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	765a      	strb	r2, [r3, #25]
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	7e5b      	ldrb	r3, [r3, #25]
 800e4d4:	2b02      	cmp	r3, #2
 800e4d6:	d806      	bhi.n	800e4e6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2201      	movs	r2, #1
 800e4dc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e4e4:	e02e      	b.n	800e544 <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800e4ec:	2106      	movs	r1, #6
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800e4f8:	4815      	ldr	r0, [pc, #84]	@ (800e550 <USBH_HandleControl+0x2fc>)
 800e4fa:	f000 fe51 	bl	800f1a0 <iprintf>
 800e4fe:	4815      	ldr	r0, [pc, #84]	@ (800e554 <USBH_HandleControl+0x300>)
 800e500:	f000 fe4e 	bl	800f1a0 <iprintf>
 800e504:	200a      	movs	r0, #10
 800e506:	f000 fe5d 	bl	800f1c4 <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	795b      	ldrb	r3, [r3, #5]
 800e50e:	4619      	mov	r1, r3
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f000 f8ee 	bl	800e6f2 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	791b      	ldrb	r3, [r3, #4]
 800e51a:	4619      	mov	r1, r3
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f000 f8e8 	bl	800e6f2 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2200      	movs	r2, #0
 800e526:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e528:	2302      	movs	r3, #2
 800e52a:	73fb      	strb	r3, [r7, #15]
      break;
 800e52c:	e00a      	b.n	800e544 <USBH_HandleControl+0x2f0>

    default:
      break;
 800e52e:	bf00      	nop
 800e530:	e008      	b.n	800e544 <USBH_HandleControl+0x2f0>
      break;
 800e532:	bf00      	nop
 800e534:	e006      	b.n	800e544 <USBH_HandleControl+0x2f0>
      break;
 800e536:	bf00      	nop
 800e538:	e004      	b.n	800e544 <USBH_HandleControl+0x2f0>
      break;
 800e53a:	bf00      	nop
 800e53c:	e002      	b.n	800e544 <USBH_HandleControl+0x2f0>
      break;
 800e53e:	bf00      	nop
 800e540:	e000      	b.n	800e544 <USBH_HandleControl+0x2f0>
      break;
 800e542:	bf00      	nop
  }

  return status;
 800e544:	7bfb      	ldrb	r3, [r7, #15]
}
 800e546:	4618      	mov	r0, r3
 800e548:	3710      	adds	r7, #16
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
 800e54e:	bf00      	nop
 800e550:	08010a30 	.word	0x08010a30
 800e554:	08010b0c 	.word	0x08010b0c

0800e558 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b088      	sub	sp, #32
 800e55c:	af04      	add	r7, sp, #16
 800e55e:	60f8      	str	r0, [r7, #12]
 800e560:	60b9      	str	r1, [r7, #8]
 800e562:	4613      	mov	r3, r2
 800e564:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e566:	79f9      	ldrb	r1, [r7, #7]
 800e568:	2300      	movs	r3, #0
 800e56a:	9303      	str	r3, [sp, #12]
 800e56c:	2308      	movs	r3, #8
 800e56e:	9302      	str	r3, [sp, #8]
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	9301      	str	r3, [sp, #4]
 800e574:	2300      	movs	r3, #0
 800e576:	9300      	str	r3, [sp, #0]
 800e578:	2300      	movs	r3, #0
 800e57a:	2200      	movs	r2, #0
 800e57c:	68f8      	ldr	r0, [r7, #12]
 800e57e:	f000 fb26 	bl	800ebce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e582:	2300      	movs	r3, #0
}
 800e584:	4618      	mov	r0, r3
 800e586:	3710      	adds	r7, #16
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b088      	sub	sp, #32
 800e590:	af04      	add	r7, sp, #16
 800e592:	60f8      	str	r0, [r7, #12]
 800e594:	60b9      	str	r1, [r7, #8]
 800e596:	4611      	mov	r1, r2
 800e598:	461a      	mov	r2, r3
 800e59a:	460b      	mov	r3, r1
 800e59c:	80fb      	strh	r3, [r7, #6]
 800e59e:	4613      	mov	r3, r2
 800e5a0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d001      	beq.n	800e5b0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e5b0:	7979      	ldrb	r1, [r7, #5]
 800e5b2:	7e3b      	ldrb	r3, [r7, #24]
 800e5b4:	9303      	str	r3, [sp, #12]
 800e5b6:	88fb      	ldrh	r3, [r7, #6]
 800e5b8:	9302      	str	r3, [sp, #8]
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	9301      	str	r3, [sp, #4]
 800e5be:	2301      	movs	r3, #1
 800e5c0:	9300      	str	r3, [sp, #0]
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	68f8      	ldr	r0, [r7, #12]
 800e5c8:	f000 fb01 	bl	800ebce <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e5cc:	2300      	movs	r3, #0
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3710      	adds	r7, #16
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}

0800e5d6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e5d6:	b580      	push	{r7, lr}
 800e5d8:	b088      	sub	sp, #32
 800e5da:	af04      	add	r7, sp, #16
 800e5dc:	60f8      	str	r0, [r7, #12]
 800e5de:	60b9      	str	r1, [r7, #8]
 800e5e0:	4611      	mov	r1, r2
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	80fb      	strh	r3, [r7, #6]
 800e5e8:	4613      	mov	r3, r2
 800e5ea:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e5ec:	7979      	ldrb	r1, [r7, #5]
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	9303      	str	r3, [sp, #12]
 800e5f2:	88fb      	ldrh	r3, [r7, #6]
 800e5f4:	9302      	str	r3, [sp, #8]
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	9301      	str	r3, [sp, #4]
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	9300      	str	r3, [sp, #0]
 800e5fe:	2300      	movs	r3, #0
 800e600:	2201      	movs	r2, #1
 800e602:	68f8      	ldr	r0, [r7, #12]
 800e604:	f000 fae3 	bl	800ebce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e608:	2300      	movs	r3, #0

}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3710      	adds	r7, #16
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}

0800e612 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800e612:	b580      	push	{r7, lr}
 800e614:	b088      	sub	sp, #32
 800e616:	af04      	add	r7, sp, #16
 800e618:	60f8      	str	r0, [r7, #12]
 800e61a:	60b9      	str	r1, [r7, #8]
 800e61c:	4611      	mov	r1, r2
 800e61e:	461a      	mov	r2, r3
 800e620:	460b      	mov	r3, r1
 800e622:	71fb      	strb	r3, [r7, #7]
 800e624:	4613      	mov	r3, r2
 800e626:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e628:	79fb      	ldrb	r3, [r7, #7]
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	79b9      	ldrb	r1, [r7, #6]
 800e62e:	2200      	movs	r2, #0
 800e630:	9203      	str	r2, [sp, #12]
 800e632:	9302      	str	r3, [sp, #8]
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	9301      	str	r3, [sp, #4]
 800e638:	2301      	movs	r3, #1
 800e63a:	9300      	str	r3, [sp, #0]
 800e63c:	2303      	movs	r3, #3
 800e63e:	2201      	movs	r2, #1
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	f000 fac4 	bl	800ebce <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800e646:	2300      	movs	r3, #0
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3710      	adds	r7, #16
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}

0800e650 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b086      	sub	sp, #24
 800e654:	af04      	add	r7, sp, #16
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	4608      	mov	r0, r1
 800e65a:	4611      	mov	r1, r2
 800e65c:	461a      	mov	r2, r3
 800e65e:	4603      	mov	r3, r0
 800e660:	70fb      	strb	r3, [r7, #3]
 800e662:	460b      	mov	r3, r1
 800e664:	70bb      	strb	r3, [r7, #2]
 800e666:	4613      	mov	r3, r2
 800e668:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e66a:	7878      	ldrb	r0, [r7, #1]
 800e66c:	78ba      	ldrb	r2, [r7, #2]
 800e66e:	78f9      	ldrb	r1, [r7, #3]
 800e670:	8b3b      	ldrh	r3, [r7, #24]
 800e672:	9302      	str	r3, [sp, #8]
 800e674:	7d3b      	ldrb	r3, [r7, #20]
 800e676:	9301      	str	r3, [sp, #4]
 800e678:	7c3b      	ldrb	r3, [r7, #16]
 800e67a:	9300      	str	r3, [sp, #0]
 800e67c:	4603      	mov	r3, r0
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 fa57 	bl	800eb32 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e684:	2300      	movs	r3, #0
}
 800e686:	4618      	mov	r0, r3
 800e688:	3708      	adds	r7, #8
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}

0800e68e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e68e:	b580      	push	{r7, lr}
 800e690:	b082      	sub	sp, #8
 800e692:	af00      	add	r7, sp, #0
 800e694:	6078      	str	r0, [r7, #4]
 800e696:	460b      	mov	r3, r1
 800e698:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e69a:	78fb      	ldrb	r3, [r7, #3]
 800e69c:	4619      	mov	r1, r3
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f000 fa76 	bl	800eb90 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e6a4:	2300      	movs	r3, #0
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3708      	adds	r7, #8
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}

0800e6ae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e6ae:	b580      	push	{r7, lr}
 800e6b0:	b084      	sub	sp, #16
 800e6b2:	af00      	add	r7, sp, #0
 800e6b4:	6078      	str	r0, [r7, #4]
 800e6b6:	460b      	mov	r3, r1
 800e6b8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f000 f839 	bl	800e732 <USBH_GetFreePipe>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e6c4:	89fb      	ldrh	r3, [r7, #14]
 800e6c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d00b      	beq.n	800e6e6 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e6ce:	78fa      	ldrb	r2, [r7, #3]
 800e6d0:	89fb      	ldrh	r3, [r7, #14]
 800e6d2:	f003 030f 	and.w	r3, r3, #15
 800e6d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e6da:	6879      	ldr	r1, [r7, #4]
 800e6dc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e6e0:	009b      	lsls	r3, r3, #2
 800e6e2:	440b      	add	r3, r1
 800e6e4:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e6e6:	89fb      	ldrh	r3, [r7, #14]
 800e6e8:	b2db      	uxtb	r3, r3
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3710      	adds	r7, #16
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}

0800e6f2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e6f2:	b480      	push	{r7}
 800e6f4:	b083      	sub	sp, #12
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	6078      	str	r0, [r7, #4]
 800e6fa:	460b      	mov	r3, r1
 800e6fc:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e6fe:	78fb      	ldrb	r3, [r7, #3]
 800e700:	2b0f      	cmp	r3, #15
 800e702:	d80f      	bhi.n	800e724 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e704:	78fb      	ldrb	r3, [r7, #3]
 800e706:	687a      	ldr	r2, [r7, #4]
 800e708:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e70c:	009b      	lsls	r3, r3, #2
 800e70e:	4413      	add	r3, r2
 800e710:	685a      	ldr	r2, [r3, #4]
 800e712:	78fb      	ldrb	r3, [r7, #3]
 800e714:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e718:	6879      	ldr	r1, [r7, #4]
 800e71a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e71e:	009b      	lsls	r3, r3, #2
 800e720:	440b      	add	r3, r1
 800e722:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e724:	2300      	movs	r3, #0
}
 800e726:	4618      	mov	r0, r3
 800e728:	370c      	adds	r7, #12
 800e72a:	46bd      	mov	sp, r7
 800e72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e730:	4770      	bx	lr

0800e732 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e732:	b480      	push	{r7}
 800e734:	b085      	sub	sp, #20
 800e736:	af00      	add	r7, sp, #0
 800e738:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e73a:	2300      	movs	r3, #0
 800e73c:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e73e:	2300      	movs	r3, #0
 800e740:	73fb      	strb	r3, [r7, #15]
 800e742:	e010      	b.n	800e766 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e744:	7bfb      	ldrb	r3, [r7, #15]
 800e746:	687a      	ldr	r2, [r7, #4]
 800e748:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e74c:	009b      	lsls	r3, r3, #2
 800e74e:	4413      	add	r3, r2
 800e750:	685b      	ldr	r3, [r3, #4]
 800e752:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e756:	2b00      	cmp	r3, #0
 800e758:	d102      	bne.n	800e760 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800e75a:	7bfb      	ldrb	r3, [r7, #15]
 800e75c:	b29b      	uxth	r3, r3
 800e75e:	e007      	b.n	800e770 <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e760:	7bfb      	ldrb	r3, [r7, #15]
 800e762:	3301      	adds	r3, #1
 800e764:	73fb      	strb	r3, [r7, #15]
 800e766:	7bfb      	ldrb	r3, [r7, #15]
 800e768:	2b0f      	cmp	r3, #15
 800e76a:	d9eb      	bls.n	800e744 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e76c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800e770:	4618      	mov	r0, r3
 800e772:	3714      	adds	r7, #20
 800e774:	46bd      	mov	sp, r7
 800e776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77a:	4770      	bx	lr

0800e77c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e780:	2201      	movs	r2, #1
 800e782:	490e      	ldr	r1, [pc, #56]	@ (800e7bc <MX_USB_HOST_Init+0x40>)
 800e784:	480e      	ldr	r0, [pc, #56]	@ (800e7c0 <MX_USB_HOST_Init+0x44>)
 800e786:	f7fe f933 	bl	800c9f0 <USBH_Init>
 800e78a:	4603      	mov	r3, r0
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d001      	beq.n	800e794 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e790:	f7f5 fc7c 	bl	800408c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800e794:	490b      	ldr	r1, [pc, #44]	@ (800e7c4 <MX_USB_HOST_Init+0x48>)
 800e796:	480a      	ldr	r0, [pc, #40]	@ (800e7c0 <MX_USB_HOST_Init+0x44>)
 800e798:	f7fe f9e8 	bl	800cb6c <USBH_RegisterClass>
 800e79c:	4603      	mov	r3, r0
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d001      	beq.n	800e7a6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e7a2:	f7f5 fc73 	bl	800408c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e7a6:	4806      	ldr	r0, [pc, #24]	@ (800e7c0 <MX_USB_HOST_Init+0x44>)
 800e7a8:	f7fe fad0 	bl	800cd4c <USBH_Start>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d001      	beq.n	800e7b6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e7b2:	f7f5 fc6b 	bl	800408c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e7b6:	bf00      	nop
 800e7b8:	bd80      	pop	{r7, pc}
 800e7ba:	bf00      	nop
 800e7bc:	0800e7dd 	.word	0x0800e7dd
 800e7c0:	20011974 	.word	0x20011974
 800e7c4:	200002a0 	.word	0x200002a0

0800e7c8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800e7cc:	4802      	ldr	r0, [pc, #8]	@ (800e7d8 <MX_USB_HOST_Process+0x10>)
 800e7ce:	f7fe facd 	bl	800cd6c <USBH_Process>
}
 800e7d2:	bf00      	nop
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	bf00      	nop
 800e7d8:	20011974 	.word	0x20011974

0800e7dc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b083      	sub	sp, #12
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	460b      	mov	r3, r1
 800e7e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e7e8:	78fb      	ldrb	r3, [r7, #3]
 800e7ea:	3b01      	subs	r3, #1
 800e7ec:	2b04      	cmp	r3, #4
 800e7ee:	d819      	bhi.n	800e824 <USBH_UserProcess+0x48>
 800e7f0:	a201      	add	r2, pc, #4	@ (adr r2, 800e7f8 <USBH_UserProcess+0x1c>)
 800e7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7f6:	bf00      	nop
 800e7f8:	0800e825 	.word	0x0800e825
 800e7fc:	0800e815 	.word	0x0800e815
 800e800:	0800e825 	.word	0x0800e825
 800e804:	0800e81d 	.word	0x0800e81d
 800e808:	0800e80d 	.word	0x0800e80d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e80c:	4b09      	ldr	r3, [pc, #36]	@ (800e834 <USBH_UserProcess+0x58>)
 800e80e:	2203      	movs	r2, #3
 800e810:	701a      	strb	r2, [r3, #0]
  break;
 800e812:	e008      	b.n	800e826 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e814:	4b07      	ldr	r3, [pc, #28]	@ (800e834 <USBH_UserProcess+0x58>)
 800e816:	2202      	movs	r2, #2
 800e818:	701a      	strb	r2, [r3, #0]
  break;
 800e81a:	e004      	b.n	800e826 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e81c:	4b05      	ldr	r3, [pc, #20]	@ (800e834 <USBH_UserProcess+0x58>)
 800e81e:	2201      	movs	r2, #1
 800e820:	701a      	strb	r2, [r3, #0]
  break;
 800e822:	e000      	b.n	800e826 <USBH_UserProcess+0x4a>

  default:
  break;
 800e824:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e826:	bf00      	nop
 800e828:	370c      	adds	r7, #12
 800e82a:	46bd      	mov	sp, r7
 800e82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e830:	4770      	bx	lr
 800e832:	bf00      	nop
 800e834:	20012704 	.word	0x20012704

0800e838 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b08a      	sub	sp, #40	@ 0x28
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e840:	f107 0314 	add.w	r3, r7, #20
 800e844:	2200      	movs	r2, #0
 800e846:	601a      	str	r2, [r3, #0]
 800e848:	605a      	str	r2, [r3, #4]
 800e84a:	609a      	str	r2, [r3, #8]
 800e84c:	60da      	str	r2, [r3, #12]
 800e84e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e858:	d147      	bne.n	800e8ea <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e85a:	2300      	movs	r3, #0
 800e85c:	613b      	str	r3, [r7, #16]
 800e85e:	4b25      	ldr	r3, [pc, #148]	@ (800e8f4 <HAL_HCD_MspInit+0xbc>)
 800e860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e862:	4a24      	ldr	r2, [pc, #144]	@ (800e8f4 <HAL_HCD_MspInit+0xbc>)
 800e864:	f043 0301 	orr.w	r3, r3, #1
 800e868:	6313      	str	r3, [r2, #48]	@ 0x30
 800e86a:	4b22      	ldr	r3, [pc, #136]	@ (800e8f4 <HAL_HCD_MspInit+0xbc>)
 800e86c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e86e:	f003 0301 	and.w	r3, r3, #1
 800e872:	613b      	str	r3, [r7, #16]
 800e874:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e876:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e87a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e87c:	2300      	movs	r3, #0
 800e87e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e880:	2300      	movs	r3, #0
 800e882:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e884:	f107 0314 	add.w	r3, r7, #20
 800e888:	4619      	mov	r1, r3
 800e88a:	481b      	ldr	r0, [pc, #108]	@ (800e8f8 <HAL_HCD_MspInit+0xc0>)
 800e88c:	f7f6 fafa 	bl	8004e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e890:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e896:	2302      	movs	r3, #2
 800e898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e89a:	2300      	movs	r3, #0
 800e89c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e8a2:	230a      	movs	r3, #10
 800e8a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e8a6:	f107 0314 	add.w	r3, r7, #20
 800e8aa:	4619      	mov	r1, r3
 800e8ac:	4812      	ldr	r0, [pc, #72]	@ (800e8f8 <HAL_HCD_MspInit+0xc0>)
 800e8ae:	f7f6 fae9 	bl	8004e84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e8b2:	4b10      	ldr	r3, [pc, #64]	@ (800e8f4 <HAL_HCD_MspInit+0xbc>)
 800e8b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e8b6:	4a0f      	ldr	r2, [pc, #60]	@ (800e8f4 <HAL_HCD_MspInit+0xbc>)
 800e8b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8bc:	6353      	str	r3, [r2, #52]	@ 0x34
 800e8be:	2300      	movs	r3, #0
 800e8c0:	60fb      	str	r3, [r7, #12]
 800e8c2:	4b0c      	ldr	r3, [pc, #48]	@ (800e8f4 <HAL_HCD_MspInit+0xbc>)
 800e8c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e8c6:	4a0b      	ldr	r2, [pc, #44]	@ (800e8f4 <HAL_HCD_MspInit+0xbc>)
 800e8c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e8cc:	6453      	str	r3, [r2, #68]	@ 0x44
 800e8ce:	4b09      	ldr	r3, [pc, #36]	@ (800e8f4 <HAL_HCD_MspInit+0xbc>)
 800e8d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e8d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e8d6:	60fb      	str	r3, [r7, #12]
 800e8d8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e8da:	2200      	movs	r2, #0
 800e8dc:	2100      	movs	r1, #0
 800e8de:	2043      	movs	r0, #67	@ 0x43
 800e8e0:	f7f5 fff3 	bl	80048ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e8e4:	2043      	movs	r0, #67	@ 0x43
 800e8e6:	f7f6 f80c 	bl	8004902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e8ea:	bf00      	nop
 800e8ec:	3728      	adds	r7, #40	@ 0x28
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}
 800e8f2:	bf00      	nop
 800e8f4:	40023800 	.word	0x40023800
 800e8f8:	40020000 	.word	0x40020000

0800e8fc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7fe ff59 	bl	800d7c2 <USBH_LL_IncTimer>
}
 800e910:	bf00      	nop
 800e912:	3708      	adds	r7, #8
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b082      	sub	sp, #8
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e926:	4618      	mov	r0, r3
 800e928:	f7fe ff91 	bl	800d84e <USBH_LL_Connect>
}
 800e92c:	bf00      	nop
 800e92e:	3708      	adds	r7, #8
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e942:	4618      	mov	r0, r3
 800e944:	f7fe ff9a 	bl	800d87c <USBH_LL_Disconnect>
}
 800e948:	bf00      	nop
 800e94a:	3708      	adds	r7, #8
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}

0800e950 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e950:	b480      	push	{r7}
 800e952:	b083      	sub	sp, #12
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	460b      	mov	r3, r1
 800e95a:	70fb      	strb	r3, [r7, #3]
 800e95c:	4613      	mov	r3, r2
 800e95e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e960:	bf00      	nop
 800e962:	370c      	adds	r7, #12
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr

0800e96c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7fe ff4b 	bl	800d816 <USBH_LL_PortEnabled>
}
 800e980:	bf00      	nop
 800e982:	3708      	adds	r7, #8
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}

0800e988 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b082      	sub	sp, #8
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e996:	4618      	mov	r0, r3
 800e998:	f7fe ff4b 	bl	800d832 <USBH_LL_PortDisabled>
}
 800e99c:	bf00      	nop
 800e99e:	3708      	adds	r7, #8
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b082      	sub	sp, #8
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f893 3d84 	ldrb.w	r3, [r3, #3460]	@ 0xd84
 800e9b2:	2b01      	cmp	r3, #1
 800e9b4:	d12a      	bne.n	800ea0c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e9b6:	4a18      	ldr	r2, [pc, #96]	@ (800ea18 <USBH_LL_Init+0x74>)
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	4a15      	ldr	r2, [pc, #84]	@ (800ea18 <USBH_LL_Init+0x74>)
 800e9c2:	f8c3 2d88 	str.w	r2, [r3, #3464]	@ 0xd88

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e9c6:	4b14      	ldr	r3, [pc, #80]	@ (800ea18 <USBH_LL_Init+0x74>)
 800e9c8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e9cc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e9ce:	4b12      	ldr	r3, [pc, #72]	@ (800ea18 <USBH_LL_Init+0x74>)
 800e9d0:	2208      	movs	r2, #8
 800e9d2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e9d4:	4b10      	ldr	r3, [pc, #64]	@ (800ea18 <USBH_LL_Init+0x74>)
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e9da:	4b0f      	ldr	r3, [pc, #60]	@ (800ea18 <USBH_LL_Init+0x74>)
 800e9dc:	2200      	movs	r2, #0
 800e9de:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e9e0:	4b0d      	ldr	r3, [pc, #52]	@ (800ea18 <USBH_LL_Init+0x74>)
 800e9e2:	2202      	movs	r2, #2
 800e9e4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e9e6:	4b0c      	ldr	r3, [pc, #48]	@ (800ea18 <USBH_LL_Init+0x74>)
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e9ec:	480a      	ldr	r0, [pc, #40]	@ (800ea18 <USBH_LL_Init+0x74>)
 800e9ee:	f7f6 fc3f 	bl	8005270 <HAL_HCD_Init>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d001      	beq.n	800e9fc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e9f8:	f7f5 fb48 	bl	800408c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e9fc:	4806      	ldr	r0, [pc, #24]	@ (800ea18 <USBH_LL_Init+0x74>)
 800e9fe:	f7f7 f89f 	bl	8005b40 <HAL_HCD_GetCurrentFrame>
 800ea02:	4603      	mov	r3, r0
 800ea04:	4619      	mov	r1, r3
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f7fe fecc 	bl	800d7a4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ea0c:	2300      	movs	r3, #0
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3708      	adds	r7, #8
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}
 800ea16:	bf00      	nop
 800ea18:	20012708 	.word	0x20012708

0800ea1c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea24:	2300      	movs	r3, #0
 800ea26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ea28:	2300      	movs	r3, #0
 800ea2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 800ea32:	4618      	mov	r0, r3
 800ea34:	f7f7 f80c 	bl	8005a50 <HAL_HCD_Start>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ea3c:	7bfb      	ldrb	r3, [r7, #15]
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f000 f95e 	bl	800ed00 <USBH_Get_USB_Status>
 800ea44:	4603      	mov	r3, r0
 800ea46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3710      	adds	r7, #16
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}

0800ea52 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ea52:	b580      	push	{r7, lr}
 800ea54:	b084      	sub	sp, #16
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7f7 f814 	bl	8005a96 <HAL_HCD_Stop>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ea72:	7bfb      	ldrb	r3, [r7, #15]
 800ea74:	4618      	mov	r0, r3
 800ea76:	f000 f943 	bl	800ed00 <USBH_Get_USB_Status>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3710      	adds	r7, #16
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}

0800ea88 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b084      	sub	sp, #16
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ea90:	2301      	movs	r3, #1
 800ea92:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f7f7 f85e 	bl	8005b5c <HAL_HCD_GetCurrentSpeed>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	2b02      	cmp	r3, #2
 800eaa4:	d00c      	beq.n	800eac0 <USBH_LL_GetSpeed+0x38>
 800eaa6:	2b02      	cmp	r3, #2
 800eaa8:	d80d      	bhi.n	800eac6 <USBH_LL_GetSpeed+0x3e>
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d002      	beq.n	800eab4 <USBH_LL_GetSpeed+0x2c>
 800eaae:	2b01      	cmp	r3, #1
 800eab0:	d003      	beq.n	800eaba <USBH_LL_GetSpeed+0x32>
 800eab2:	e008      	b.n	800eac6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800eab4:	2300      	movs	r3, #0
 800eab6:	73fb      	strb	r3, [r7, #15]
    break;
 800eab8:	e008      	b.n	800eacc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800eaba:	2301      	movs	r3, #1
 800eabc:	73fb      	strb	r3, [r7, #15]
    break;
 800eabe:	e005      	b.n	800eacc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800eac0:	2302      	movs	r3, #2
 800eac2:	73fb      	strb	r3, [r7, #15]
    break;
 800eac4:	e002      	b.n	800eacc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800eac6:	2301      	movs	r3, #1
 800eac8:	73fb      	strb	r3, [r7, #15]
    break;
 800eaca:	bf00      	nop
  }
  return  speed;
 800eacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800eace:	4618      	mov	r0, r3
 800ead0:	3710      	adds	r7, #16
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}

0800ead6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ead6:	b580      	push	{r7, lr}
 800ead8:	b084      	sub	sp, #16
 800eada:	af00      	add	r7, sp, #0
 800eadc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eade:	2300      	movs	r3, #0
 800eae0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eae2:	2300      	movs	r3, #0
 800eae4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7f6 ffef 	bl	8005ad0 <HAL_HCD_ResetPort>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eaf6:	7bfb      	ldrb	r3, [r7, #15]
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f000 f901 	bl	800ed00 <USBH_Get_USB_Status>
 800eafe:	4603      	mov	r3, r0
 800eb00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb02:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3710      	adds	r7, #16
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b082      	sub	sp, #8
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	460b      	mov	r3, r1
 800eb16:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 800eb1e:	78fa      	ldrb	r2, [r7, #3]
 800eb20:	4611      	mov	r1, r2
 800eb22:	4618      	mov	r0, r3
 800eb24:	f7f6 fff7 	bl	8005b16 <HAL_HCD_HC_GetXferCount>
 800eb28:	4603      	mov	r3, r0
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3708      	adds	r7, #8
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}

0800eb32 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800eb32:	b590      	push	{r4, r7, lr}
 800eb34:	b089      	sub	sp, #36	@ 0x24
 800eb36:	af04      	add	r7, sp, #16
 800eb38:	6078      	str	r0, [r7, #4]
 800eb3a:	4608      	mov	r0, r1
 800eb3c:	4611      	mov	r1, r2
 800eb3e:	461a      	mov	r2, r3
 800eb40:	4603      	mov	r3, r0
 800eb42:	70fb      	strb	r3, [r7, #3]
 800eb44:	460b      	mov	r3, r1
 800eb46:	70bb      	strb	r3, [r7, #2]
 800eb48:	4613      	mov	r3, r2
 800eb4a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eb50:	2300      	movs	r3, #0
 800eb52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f8d3 0d88 	ldr.w	r0, [r3, #3464]	@ 0xd88
 800eb5a:	787c      	ldrb	r4, [r7, #1]
 800eb5c:	78ba      	ldrb	r2, [r7, #2]
 800eb5e:	78f9      	ldrb	r1, [r7, #3]
 800eb60:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800eb62:	9302      	str	r3, [sp, #8]
 800eb64:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800eb68:	9301      	str	r3, [sp, #4]
 800eb6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eb6e:	9300      	str	r3, [sp, #0]
 800eb70:	4623      	mov	r3, r4
 800eb72:	f7f6 fbe4 	bl	800533e <HAL_HCD_HC_Init>
 800eb76:	4603      	mov	r3, r0
 800eb78:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800eb7a:	7bfb      	ldrb	r3, [r7, #15]
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f000 f8bf 	bl	800ed00 <USBH_Get_USB_Status>
 800eb82:	4603      	mov	r3, r0
 800eb84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb86:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3714      	adds	r7, #20
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd90      	pop	{r4, r7, pc}

0800eb90 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b084      	sub	sp, #16
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	460b      	mov	r3, r1
 800eb9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eba0:	2300      	movs	r3, #0
 800eba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 800ebaa:	78fa      	ldrb	r2, [r7, #3]
 800ebac:	4611      	mov	r1, r2
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f7f6 fc7d 	bl	80054ae <HAL_HCD_HC_Halt>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ebb8:	7bfb      	ldrb	r3, [r7, #15]
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f000 f8a0 	bl	800ed00 <USBH_Get_USB_Status>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3710      	adds	r7, #16
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}

0800ebce <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ebce:	b590      	push	{r4, r7, lr}
 800ebd0:	b089      	sub	sp, #36	@ 0x24
 800ebd2:	af04      	add	r7, sp, #16
 800ebd4:	6078      	str	r0, [r7, #4]
 800ebd6:	4608      	mov	r0, r1
 800ebd8:	4611      	mov	r1, r2
 800ebda:	461a      	mov	r2, r3
 800ebdc:	4603      	mov	r3, r0
 800ebde:	70fb      	strb	r3, [r7, #3]
 800ebe0:	460b      	mov	r3, r1
 800ebe2:	70bb      	strb	r3, [r7, #2]
 800ebe4:	4613      	mov	r3, r2
 800ebe6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ebec:	2300      	movs	r3, #0
 800ebee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f8d3 0d88 	ldr.w	r0, [r3, #3464]	@ 0xd88
 800ebf6:	787c      	ldrb	r4, [r7, #1]
 800ebf8:	78ba      	ldrb	r2, [r7, #2]
 800ebfa:	78f9      	ldrb	r1, [r7, #3]
 800ebfc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ec00:	9303      	str	r3, [sp, #12]
 800ec02:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ec04:	9302      	str	r3, [sp, #8]
 800ec06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec08:	9301      	str	r3, [sp, #4]
 800ec0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ec0e:	9300      	str	r3, [sp, #0]
 800ec10:	4623      	mov	r3, r4
 800ec12:	f7f6 fc6f 	bl	80054f4 <HAL_HCD_HC_SubmitRequest>
 800ec16:	4603      	mov	r3, r0
 800ec18:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ec1a:	7bfb      	ldrb	r3, [r7, #15]
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f000 f86f 	bl	800ed00 <USBH_Get_USB_Status>
 800ec22:	4603      	mov	r3, r0
 800ec24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec26:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3714      	adds	r7, #20
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd90      	pop	{r4, r7, pc}

0800ec30 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b082      	sub	sp, #8
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	460b      	mov	r3, r1
 800ec3a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 800ec42:	78fa      	ldrb	r2, [r7, #3]
 800ec44:	4611      	mov	r1, r2
 800ec46:	4618      	mov	r0, r3
 800ec48:	f7f6 ff50 	bl	8005aec <HAL_HCD_HC_GetURBState>
 800ec4c:	4603      	mov	r3, r0
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3708      	adds	r7, #8
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}

0800ec56 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ec56:	b580      	push	{r7, lr}
 800ec58:	b082      	sub	sp, #8
 800ec5a:	af00      	add	r7, sp, #0
 800ec5c:	6078      	str	r0, [r7, #4]
 800ec5e:	460b      	mov	r3, r1
 800ec60:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f893 3d84 	ldrb.w	r3, [r3, #3460]	@ 0xd84
 800ec68:	2b01      	cmp	r3, #1
 800ec6a:	d103      	bne.n	800ec74 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ec6c:	78fb      	ldrb	r3, [r7, #3]
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f000 f872 	bl	800ed58 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ec74:	20c8      	movs	r0, #200	@ 0xc8
 800ec76:	f7f5 fd29 	bl	80046cc <HAL_Delay>
  return USBH_OK;
 800ec7a:	2300      	movs	r3, #0
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3708      	adds	r7, #8
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}

0800ec84 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ec84:	b480      	push	{r7}
 800ec86:	b085      	sub	sp, #20
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
 800ec8c:	460b      	mov	r3, r1
 800ec8e:	70fb      	strb	r3, [r7, #3]
 800ec90:	4613      	mov	r3, r2
 800ec92:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 800ec9a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ec9c:	78fa      	ldrb	r2, [r7, #3]
 800ec9e:	68f9      	ldr	r1, [r7, #12]
 800eca0:	4613      	mov	r3, r2
 800eca2:	011b      	lsls	r3, r3, #4
 800eca4:	1a9b      	subs	r3, r3, r2
 800eca6:	009b      	lsls	r3, r3, #2
 800eca8:	440b      	add	r3, r1
 800ecaa:	3317      	adds	r3, #23
 800ecac:	781b      	ldrb	r3, [r3, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d00a      	beq.n	800ecc8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ecb2:	78fa      	ldrb	r2, [r7, #3]
 800ecb4:	68f9      	ldr	r1, [r7, #12]
 800ecb6:	4613      	mov	r3, r2
 800ecb8:	011b      	lsls	r3, r3, #4
 800ecba:	1a9b      	subs	r3, r3, r2
 800ecbc:	009b      	lsls	r3, r3, #2
 800ecbe:	440b      	add	r3, r1
 800ecc0:	333c      	adds	r3, #60	@ 0x3c
 800ecc2:	78ba      	ldrb	r2, [r7, #2]
 800ecc4:	701a      	strb	r2, [r3, #0]
 800ecc6:	e009      	b.n	800ecdc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ecc8:	78fa      	ldrb	r2, [r7, #3]
 800ecca:	68f9      	ldr	r1, [r7, #12]
 800eccc:	4613      	mov	r3, r2
 800ecce:	011b      	lsls	r3, r3, #4
 800ecd0:	1a9b      	subs	r3, r3, r2
 800ecd2:	009b      	lsls	r3, r3, #2
 800ecd4:	440b      	add	r3, r1
 800ecd6:	333d      	adds	r3, #61	@ 0x3d
 800ecd8:	78ba      	ldrb	r2, [r7, #2]
 800ecda:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ecdc:	2300      	movs	r3, #0
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3714      	adds	r7, #20
 800ece2:	46bd      	mov	sp, r7
 800ece4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece8:	4770      	bx	lr

0800ecea <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ecea:	b580      	push	{r7, lr}
 800ecec:	b082      	sub	sp, #8
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f7f5 fcea 	bl	80046cc <HAL_Delay>
}
 800ecf8:	bf00      	nop
 800ecfa:	3708      	adds	r7, #8
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b085      	sub	sp, #20
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	4603      	mov	r3, r0
 800ed08:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ed0e:	79fb      	ldrb	r3, [r7, #7]
 800ed10:	2b03      	cmp	r3, #3
 800ed12:	d817      	bhi.n	800ed44 <USBH_Get_USB_Status+0x44>
 800ed14:	a201      	add	r2, pc, #4	@ (adr r2, 800ed1c <USBH_Get_USB_Status+0x1c>)
 800ed16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed1a:	bf00      	nop
 800ed1c:	0800ed2d 	.word	0x0800ed2d
 800ed20:	0800ed33 	.word	0x0800ed33
 800ed24:	0800ed39 	.word	0x0800ed39
 800ed28:	0800ed3f 	.word	0x0800ed3f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ed30:	e00b      	b.n	800ed4a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ed32:	2302      	movs	r3, #2
 800ed34:	73fb      	strb	r3, [r7, #15]
    break;
 800ed36:	e008      	b.n	800ed4a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ed38:	2301      	movs	r3, #1
 800ed3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ed3c:	e005      	b.n	800ed4a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ed3e:	2302      	movs	r3, #2
 800ed40:	73fb      	strb	r3, [r7, #15]
    break;
 800ed42:	e002      	b.n	800ed4a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ed44:	2302      	movs	r3, #2
 800ed46:	73fb      	strb	r3, [r7, #15]
    break;
 800ed48:	bf00      	nop
  }
  return usb_status;
 800ed4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3714      	adds	r7, #20
 800ed50:	46bd      	mov	sp, r7
 800ed52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed56:	4770      	bx	lr

0800ed58 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	4603      	mov	r3, r0
 800ed60:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ed62:	79fb      	ldrb	r3, [r7, #7]
 800ed64:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ed66:	79fb      	ldrb	r3, [r7, #7]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d102      	bne.n	800ed72 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	73fb      	strb	r3, [r7, #15]
 800ed70:	e001      	b.n	800ed76 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ed72:	2301      	movs	r3, #1
 800ed74:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,(GPIO_PinState)data);
 800ed76:	7bfb      	ldrb	r3, [r7, #15]
 800ed78:	461a      	mov	r2, r3
 800ed7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ed7e:	4803      	ldr	r0, [pc, #12]	@ (800ed8c <MX_DriverVbusFS+0x34>)
 800ed80:	f7f6 fa44 	bl	800520c <HAL_GPIO_WritePin>
}
 800ed84:	bf00      	nop
 800ed86:	3710      	adds	r7, #16
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}
 800ed8c:	40020400 	.word	0x40020400

0800ed90 <atoi>:
 800ed90:	220a      	movs	r2, #10
 800ed92:	2100      	movs	r1, #0
 800ed94:	f000 b938 	b.w	800f008 <strtol>

0800ed98 <malloc>:
 800ed98:	4b02      	ldr	r3, [pc, #8]	@ (800eda4 <malloc+0xc>)
 800ed9a:	4601      	mov	r1, r0
 800ed9c:	6818      	ldr	r0, [r3, #0]
 800ed9e:	f000 b82d 	b.w	800edfc <_malloc_r>
 800eda2:	bf00      	nop
 800eda4:	200002cc 	.word	0x200002cc

0800eda8 <free>:
 800eda8:	4b02      	ldr	r3, [pc, #8]	@ (800edb4 <free+0xc>)
 800edaa:	4601      	mov	r1, r0
 800edac:	6818      	ldr	r0, [r3, #0]
 800edae:	f000 bc1b 	b.w	800f5e8 <_free_r>
 800edb2:	bf00      	nop
 800edb4:	200002cc 	.word	0x200002cc

0800edb8 <sbrk_aligned>:
 800edb8:	b570      	push	{r4, r5, r6, lr}
 800edba:	4e0f      	ldr	r6, [pc, #60]	@ (800edf8 <sbrk_aligned+0x40>)
 800edbc:	460c      	mov	r4, r1
 800edbe:	6831      	ldr	r1, [r6, #0]
 800edc0:	4605      	mov	r5, r0
 800edc2:	b911      	cbnz	r1, 800edca <sbrk_aligned+0x12>
 800edc4:	f000 fbb8 	bl	800f538 <_sbrk_r>
 800edc8:	6030      	str	r0, [r6, #0]
 800edca:	4621      	mov	r1, r4
 800edcc:	4628      	mov	r0, r5
 800edce:	f000 fbb3 	bl	800f538 <_sbrk_r>
 800edd2:	1c43      	adds	r3, r0, #1
 800edd4:	d103      	bne.n	800edde <sbrk_aligned+0x26>
 800edd6:	f04f 34ff 	mov.w	r4, #4294967295
 800edda:	4620      	mov	r0, r4
 800eddc:	bd70      	pop	{r4, r5, r6, pc}
 800edde:	1cc4      	adds	r4, r0, #3
 800ede0:	f024 0403 	bic.w	r4, r4, #3
 800ede4:	42a0      	cmp	r0, r4
 800ede6:	d0f8      	beq.n	800edda <sbrk_aligned+0x22>
 800ede8:	1a21      	subs	r1, r4, r0
 800edea:	4628      	mov	r0, r5
 800edec:	f000 fba4 	bl	800f538 <_sbrk_r>
 800edf0:	3001      	adds	r0, #1
 800edf2:	d1f2      	bne.n	800edda <sbrk_aligned+0x22>
 800edf4:	e7ef      	b.n	800edd6 <sbrk_aligned+0x1e>
 800edf6:	bf00      	nop
 800edf8:	20012ae8 	.word	0x20012ae8

0800edfc <_malloc_r>:
 800edfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee00:	1ccd      	adds	r5, r1, #3
 800ee02:	f025 0503 	bic.w	r5, r5, #3
 800ee06:	3508      	adds	r5, #8
 800ee08:	2d0c      	cmp	r5, #12
 800ee0a:	bf38      	it	cc
 800ee0c:	250c      	movcc	r5, #12
 800ee0e:	2d00      	cmp	r5, #0
 800ee10:	4606      	mov	r6, r0
 800ee12:	db01      	blt.n	800ee18 <_malloc_r+0x1c>
 800ee14:	42a9      	cmp	r1, r5
 800ee16:	d904      	bls.n	800ee22 <_malloc_r+0x26>
 800ee18:	230c      	movs	r3, #12
 800ee1a:	6033      	str	r3, [r6, #0]
 800ee1c:	2000      	movs	r0, #0
 800ee1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eef8 <_malloc_r+0xfc>
 800ee26:	f000 f869 	bl	800eefc <__malloc_lock>
 800ee2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ee2e:	461c      	mov	r4, r3
 800ee30:	bb44      	cbnz	r4, 800ee84 <_malloc_r+0x88>
 800ee32:	4629      	mov	r1, r5
 800ee34:	4630      	mov	r0, r6
 800ee36:	f7ff ffbf 	bl	800edb8 <sbrk_aligned>
 800ee3a:	1c43      	adds	r3, r0, #1
 800ee3c:	4604      	mov	r4, r0
 800ee3e:	d158      	bne.n	800eef2 <_malloc_r+0xf6>
 800ee40:	f8d8 4000 	ldr.w	r4, [r8]
 800ee44:	4627      	mov	r7, r4
 800ee46:	2f00      	cmp	r7, #0
 800ee48:	d143      	bne.n	800eed2 <_malloc_r+0xd6>
 800ee4a:	2c00      	cmp	r4, #0
 800ee4c:	d04b      	beq.n	800eee6 <_malloc_r+0xea>
 800ee4e:	6823      	ldr	r3, [r4, #0]
 800ee50:	4639      	mov	r1, r7
 800ee52:	4630      	mov	r0, r6
 800ee54:	eb04 0903 	add.w	r9, r4, r3
 800ee58:	f000 fb6e 	bl	800f538 <_sbrk_r>
 800ee5c:	4581      	cmp	r9, r0
 800ee5e:	d142      	bne.n	800eee6 <_malloc_r+0xea>
 800ee60:	6821      	ldr	r1, [r4, #0]
 800ee62:	1a6d      	subs	r5, r5, r1
 800ee64:	4629      	mov	r1, r5
 800ee66:	4630      	mov	r0, r6
 800ee68:	f7ff ffa6 	bl	800edb8 <sbrk_aligned>
 800ee6c:	3001      	adds	r0, #1
 800ee6e:	d03a      	beq.n	800eee6 <_malloc_r+0xea>
 800ee70:	6823      	ldr	r3, [r4, #0]
 800ee72:	442b      	add	r3, r5
 800ee74:	6023      	str	r3, [r4, #0]
 800ee76:	f8d8 3000 	ldr.w	r3, [r8]
 800ee7a:	685a      	ldr	r2, [r3, #4]
 800ee7c:	bb62      	cbnz	r2, 800eed8 <_malloc_r+0xdc>
 800ee7e:	f8c8 7000 	str.w	r7, [r8]
 800ee82:	e00f      	b.n	800eea4 <_malloc_r+0xa8>
 800ee84:	6822      	ldr	r2, [r4, #0]
 800ee86:	1b52      	subs	r2, r2, r5
 800ee88:	d420      	bmi.n	800eecc <_malloc_r+0xd0>
 800ee8a:	2a0b      	cmp	r2, #11
 800ee8c:	d917      	bls.n	800eebe <_malloc_r+0xc2>
 800ee8e:	1961      	adds	r1, r4, r5
 800ee90:	42a3      	cmp	r3, r4
 800ee92:	6025      	str	r5, [r4, #0]
 800ee94:	bf18      	it	ne
 800ee96:	6059      	strne	r1, [r3, #4]
 800ee98:	6863      	ldr	r3, [r4, #4]
 800ee9a:	bf08      	it	eq
 800ee9c:	f8c8 1000 	streq.w	r1, [r8]
 800eea0:	5162      	str	r2, [r4, r5]
 800eea2:	604b      	str	r3, [r1, #4]
 800eea4:	4630      	mov	r0, r6
 800eea6:	f000 f82f 	bl	800ef08 <__malloc_unlock>
 800eeaa:	f104 000b 	add.w	r0, r4, #11
 800eeae:	1d23      	adds	r3, r4, #4
 800eeb0:	f020 0007 	bic.w	r0, r0, #7
 800eeb4:	1ac2      	subs	r2, r0, r3
 800eeb6:	bf1c      	itt	ne
 800eeb8:	1a1b      	subne	r3, r3, r0
 800eeba:	50a3      	strne	r3, [r4, r2]
 800eebc:	e7af      	b.n	800ee1e <_malloc_r+0x22>
 800eebe:	6862      	ldr	r2, [r4, #4]
 800eec0:	42a3      	cmp	r3, r4
 800eec2:	bf0c      	ite	eq
 800eec4:	f8c8 2000 	streq.w	r2, [r8]
 800eec8:	605a      	strne	r2, [r3, #4]
 800eeca:	e7eb      	b.n	800eea4 <_malloc_r+0xa8>
 800eecc:	4623      	mov	r3, r4
 800eece:	6864      	ldr	r4, [r4, #4]
 800eed0:	e7ae      	b.n	800ee30 <_malloc_r+0x34>
 800eed2:	463c      	mov	r4, r7
 800eed4:	687f      	ldr	r7, [r7, #4]
 800eed6:	e7b6      	b.n	800ee46 <_malloc_r+0x4a>
 800eed8:	461a      	mov	r2, r3
 800eeda:	685b      	ldr	r3, [r3, #4]
 800eedc:	42a3      	cmp	r3, r4
 800eede:	d1fb      	bne.n	800eed8 <_malloc_r+0xdc>
 800eee0:	2300      	movs	r3, #0
 800eee2:	6053      	str	r3, [r2, #4]
 800eee4:	e7de      	b.n	800eea4 <_malloc_r+0xa8>
 800eee6:	230c      	movs	r3, #12
 800eee8:	6033      	str	r3, [r6, #0]
 800eeea:	4630      	mov	r0, r6
 800eeec:	f000 f80c 	bl	800ef08 <__malloc_unlock>
 800eef0:	e794      	b.n	800ee1c <_malloc_r+0x20>
 800eef2:	6005      	str	r5, [r0, #0]
 800eef4:	e7d6      	b.n	800eea4 <_malloc_r+0xa8>
 800eef6:	bf00      	nop
 800eef8:	20012aec 	.word	0x20012aec

0800eefc <__malloc_lock>:
 800eefc:	4801      	ldr	r0, [pc, #4]	@ (800ef04 <__malloc_lock+0x8>)
 800eefe:	f000 bb68 	b.w	800f5d2 <__retarget_lock_acquire_recursive>
 800ef02:	bf00      	nop
 800ef04:	20012c30 	.word	0x20012c30

0800ef08 <__malloc_unlock>:
 800ef08:	4801      	ldr	r0, [pc, #4]	@ (800ef10 <__malloc_unlock+0x8>)
 800ef0a:	f000 bb63 	b.w	800f5d4 <__retarget_lock_release_recursive>
 800ef0e:	bf00      	nop
 800ef10:	20012c30 	.word	0x20012c30

0800ef14 <_strtol_l.constprop.0>:
 800ef14:	2b24      	cmp	r3, #36	@ 0x24
 800ef16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef1a:	4686      	mov	lr, r0
 800ef1c:	4690      	mov	r8, r2
 800ef1e:	d801      	bhi.n	800ef24 <_strtol_l.constprop.0+0x10>
 800ef20:	2b01      	cmp	r3, #1
 800ef22:	d106      	bne.n	800ef32 <_strtol_l.constprop.0+0x1e>
 800ef24:	f000 fb2a 	bl	800f57c <__errno>
 800ef28:	2316      	movs	r3, #22
 800ef2a:	6003      	str	r3, [r0, #0]
 800ef2c:	2000      	movs	r0, #0
 800ef2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef32:	4834      	ldr	r0, [pc, #208]	@ (800f004 <_strtol_l.constprop.0+0xf0>)
 800ef34:	460d      	mov	r5, r1
 800ef36:	462a      	mov	r2, r5
 800ef38:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef3c:	5d06      	ldrb	r6, [r0, r4]
 800ef3e:	f016 0608 	ands.w	r6, r6, #8
 800ef42:	d1f8      	bne.n	800ef36 <_strtol_l.constprop.0+0x22>
 800ef44:	2c2d      	cmp	r4, #45	@ 0x2d
 800ef46:	d12d      	bne.n	800efa4 <_strtol_l.constprop.0+0x90>
 800ef48:	782c      	ldrb	r4, [r5, #0]
 800ef4a:	2601      	movs	r6, #1
 800ef4c:	1c95      	adds	r5, r2, #2
 800ef4e:	f033 0210 	bics.w	r2, r3, #16
 800ef52:	d109      	bne.n	800ef68 <_strtol_l.constprop.0+0x54>
 800ef54:	2c30      	cmp	r4, #48	@ 0x30
 800ef56:	d12a      	bne.n	800efae <_strtol_l.constprop.0+0x9a>
 800ef58:	782a      	ldrb	r2, [r5, #0]
 800ef5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ef5e:	2a58      	cmp	r2, #88	@ 0x58
 800ef60:	d125      	bne.n	800efae <_strtol_l.constprop.0+0x9a>
 800ef62:	786c      	ldrb	r4, [r5, #1]
 800ef64:	2310      	movs	r3, #16
 800ef66:	3502      	adds	r5, #2
 800ef68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ef6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ef70:	2200      	movs	r2, #0
 800ef72:	fbbc f9f3 	udiv	r9, ip, r3
 800ef76:	4610      	mov	r0, r2
 800ef78:	fb03 ca19 	mls	sl, r3, r9, ip
 800ef7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ef80:	2f09      	cmp	r7, #9
 800ef82:	d81b      	bhi.n	800efbc <_strtol_l.constprop.0+0xa8>
 800ef84:	463c      	mov	r4, r7
 800ef86:	42a3      	cmp	r3, r4
 800ef88:	dd27      	ble.n	800efda <_strtol_l.constprop.0+0xc6>
 800ef8a:	1c57      	adds	r7, r2, #1
 800ef8c:	d007      	beq.n	800ef9e <_strtol_l.constprop.0+0x8a>
 800ef8e:	4581      	cmp	r9, r0
 800ef90:	d320      	bcc.n	800efd4 <_strtol_l.constprop.0+0xc0>
 800ef92:	d101      	bne.n	800ef98 <_strtol_l.constprop.0+0x84>
 800ef94:	45a2      	cmp	sl, r4
 800ef96:	db1d      	blt.n	800efd4 <_strtol_l.constprop.0+0xc0>
 800ef98:	fb00 4003 	mla	r0, r0, r3, r4
 800ef9c:	2201      	movs	r2, #1
 800ef9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800efa2:	e7eb      	b.n	800ef7c <_strtol_l.constprop.0+0x68>
 800efa4:	2c2b      	cmp	r4, #43	@ 0x2b
 800efa6:	bf04      	itt	eq
 800efa8:	782c      	ldrbeq	r4, [r5, #0]
 800efaa:	1c95      	addeq	r5, r2, #2
 800efac:	e7cf      	b.n	800ef4e <_strtol_l.constprop.0+0x3a>
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d1da      	bne.n	800ef68 <_strtol_l.constprop.0+0x54>
 800efb2:	2c30      	cmp	r4, #48	@ 0x30
 800efb4:	bf0c      	ite	eq
 800efb6:	2308      	moveq	r3, #8
 800efb8:	230a      	movne	r3, #10
 800efba:	e7d5      	b.n	800ef68 <_strtol_l.constprop.0+0x54>
 800efbc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800efc0:	2f19      	cmp	r7, #25
 800efc2:	d801      	bhi.n	800efc8 <_strtol_l.constprop.0+0xb4>
 800efc4:	3c37      	subs	r4, #55	@ 0x37
 800efc6:	e7de      	b.n	800ef86 <_strtol_l.constprop.0+0x72>
 800efc8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800efcc:	2f19      	cmp	r7, #25
 800efce:	d804      	bhi.n	800efda <_strtol_l.constprop.0+0xc6>
 800efd0:	3c57      	subs	r4, #87	@ 0x57
 800efd2:	e7d8      	b.n	800ef86 <_strtol_l.constprop.0+0x72>
 800efd4:	f04f 32ff 	mov.w	r2, #4294967295
 800efd8:	e7e1      	b.n	800ef9e <_strtol_l.constprop.0+0x8a>
 800efda:	1c53      	adds	r3, r2, #1
 800efdc:	d108      	bne.n	800eff0 <_strtol_l.constprop.0+0xdc>
 800efde:	2322      	movs	r3, #34	@ 0x22
 800efe0:	f8ce 3000 	str.w	r3, [lr]
 800efe4:	4660      	mov	r0, ip
 800efe6:	f1b8 0f00 	cmp.w	r8, #0
 800efea:	d0a0      	beq.n	800ef2e <_strtol_l.constprop.0+0x1a>
 800efec:	1e69      	subs	r1, r5, #1
 800efee:	e006      	b.n	800effe <_strtol_l.constprop.0+0xea>
 800eff0:	b106      	cbz	r6, 800eff4 <_strtol_l.constprop.0+0xe0>
 800eff2:	4240      	negs	r0, r0
 800eff4:	f1b8 0f00 	cmp.w	r8, #0
 800eff8:	d099      	beq.n	800ef2e <_strtol_l.constprop.0+0x1a>
 800effa:	2a00      	cmp	r2, #0
 800effc:	d1f6      	bne.n	800efec <_strtol_l.constprop.0+0xd8>
 800effe:	f8c8 1000 	str.w	r1, [r8]
 800f002:	e794      	b.n	800ef2e <_strtol_l.constprop.0+0x1a>
 800f004:	08012d95 	.word	0x08012d95

0800f008 <strtol>:
 800f008:	4613      	mov	r3, r2
 800f00a:	460a      	mov	r2, r1
 800f00c:	4601      	mov	r1, r0
 800f00e:	4802      	ldr	r0, [pc, #8]	@ (800f018 <strtol+0x10>)
 800f010:	6800      	ldr	r0, [r0, #0]
 800f012:	f7ff bf7f 	b.w	800ef14 <_strtol_l.constprop.0>
 800f016:	bf00      	nop
 800f018:	200002cc 	.word	0x200002cc

0800f01c <std>:
 800f01c:	2300      	movs	r3, #0
 800f01e:	b510      	push	{r4, lr}
 800f020:	4604      	mov	r4, r0
 800f022:	e9c0 3300 	strd	r3, r3, [r0]
 800f026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f02a:	6083      	str	r3, [r0, #8]
 800f02c:	8181      	strh	r1, [r0, #12]
 800f02e:	6643      	str	r3, [r0, #100]	@ 0x64
 800f030:	81c2      	strh	r2, [r0, #14]
 800f032:	6183      	str	r3, [r0, #24]
 800f034:	4619      	mov	r1, r3
 800f036:	2208      	movs	r2, #8
 800f038:	305c      	adds	r0, #92	@ 0x5c
 800f03a:	f000 fa41 	bl	800f4c0 <memset>
 800f03e:	4b0d      	ldr	r3, [pc, #52]	@ (800f074 <std+0x58>)
 800f040:	6263      	str	r3, [r4, #36]	@ 0x24
 800f042:	4b0d      	ldr	r3, [pc, #52]	@ (800f078 <std+0x5c>)
 800f044:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f046:	4b0d      	ldr	r3, [pc, #52]	@ (800f07c <std+0x60>)
 800f048:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f04a:	4b0d      	ldr	r3, [pc, #52]	@ (800f080 <std+0x64>)
 800f04c:	6323      	str	r3, [r4, #48]	@ 0x30
 800f04e:	4b0d      	ldr	r3, [pc, #52]	@ (800f084 <std+0x68>)
 800f050:	6224      	str	r4, [r4, #32]
 800f052:	429c      	cmp	r4, r3
 800f054:	d006      	beq.n	800f064 <std+0x48>
 800f056:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f05a:	4294      	cmp	r4, r2
 800f05c:	d002      	beq.n	800f064 <std+0x48>
 800f05e:	33d0      	adds	r3, #208	@ 0xd0
 800f060:	429c      	cmp	r4, r3
 800f062:	d105      	bne.n	800f070 <std+0x54>
 800f064:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f06c:	f000 bab0 	b.w	800f5d0 <__retarget_lock_init_recursive>
 800f070:	bd10      	pop	{r4, pc}
 800f072:	bf00      	nop
 800f074:	0800f2d1 	.word	0x0800f2d1
 800f078:	0800f2f3 	.word	0x0800f2f3
 800f07c:	0800f32b 	.word	0x0800f32b
 800f080:	0800f34f 	.word	0x0800f34f
 800f084:	20012af0 	.word	0x20012af0

0800f088 <stdio_exit_handler>:
 800f088:	4a02      	ldr	r2, [pc, #8]	@ (800f094 <stdio_exit_handler+0xc>)
 800f08a:	4903      	ldr	r1, [pc, #12]	@ (800f098 <stdio_exit_handler+0x10>)
 800f08c:	4803      	ldr	r0, [pc, #12]	@ (800f09c <stdio_exit_handler+0x14>)
 800f08e:	f000 b869 	b.w	800f164 <_fwalk_sglue>
 800f092:	bf00      	nop
 800f094:	200002c0 	.word	0x200002c0
 800f098:	0800ffd5 	.word	0x0800ffd5
 800f09c:	200002d0 	.word	0x200002d0

0800f0a0 <cleanup_stdio>:
 800f0a0:	6841      	ldr	r1, [r0, #4]
 800f0a2:	4b0c      	ldr	r3, [pc, #48]	@ (800f0d4 <cleanup_stdio+0x34>)
 800f0a4:	4299      	cmp	r1, r3
 800f0a6:	b510      	push	{r4, lr}
 800f0a8:	4604      	mov	r4, r0
 800f0aa:	d001      	beq.n	800f0b0 <cleanup_stdio+0x10>
 800f0ac:	f000 ff92 	bl	800ffd4 <_fflush_r>
 800f0b0:	68a1      	ldr	r1, [r4, #8]
 800f0b2:	4b09      	ldr	r3, [pc, #36]	@ (800f0d8 <cleanup_stdio+0x38>)
 800f0b4:	4299      	cmp	r1, r3
 800f0b6:	d002      	beq.n	800f0be <cleanup_stdio+0x1e>
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	f000 ff8b 	bl	800ffd4 <_fflush_r>
 800f0be:	68e1      	ldr	r1, [r4, #12]
 800f0c0:	4b06      	ldr	r3, [pc, #24]	@ (800f0dc <cleanup_stdio+0x3c>)
 800f0c2:	4299      	cmp	r1, r3
 800f0c4:	d004      	beq.n	800f0d0 <cleanup_stdio+0x30>
 800f0c6:	4620      	mov	r0, r4
 800f0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0cc:	f000 bf82 	b.w	800ffd4 <_fflush_r>
 800f0d0:	bd10      	pop	{r4, pc}
 800f0d2:	bf00      	nop
 800f0d4:	20012af0 	.word	0x20012af0
 800f0d8:	20012b58 	.word	0x20012b58
 800f0dc:	20012bc0 	.word	0x20012bc0

0800f0e0 <global_stdio_init.part.0>:
 800f0e0:	b510      	push	{r4, lr}
 800f0e2:	4b0b      	ldr	r3, [pc, #44]	@ (800f110 <global_stdio_init.part.0+0x30>)
 800f0e4:	4c0b      	ldr	r4, [pc, #44]	@ (800f114 <global_stdio_init.part.0+0x34>)
 800f0e6:	4a0c      	ldr	r2, [pc, #48]	@ (800f118 <global_stdio_init.part.0+0x38>)
 800f0e8:	601a      	str	r2, [r3, #0]
 800f0ea:	4620      	mov	r0, r4
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	2104      	movs	r1, #4
 800f0f0:	f7ff ff94 	bl	800f01c <std>
 800f0f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f0f8:	2201      	movs	r2, #1
 800f0fa:	2109      	movs	r1, #9
 800f0fc:	f7ff ff8e 	bl	800f01c <std>
 800f100:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f104:	2202      	movs	r2, #2
 800f106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f10a:	2112      	movs	r1, #18
 800f10c:	f7ff bf86 	b.w	800f01c <std>
 800f110:	20012c28 	.word	0x20012c28
 800f114:	20012af0 	.word	0x20012af0
 800f118:	0800f089 	.word	0x0800f089

0800f11c <__sfp_lock_acquire>:
 800f11c:	4801      	ldr	r0, [pc, #4]	@ (800f124 <__sfp_lock_acquire+0x8>)
 800f11e:	f000 ba58 	b.w	800f5d2 <__retarget_lock_acquire_recursive>
 800f122:	bf00      	nop
 800f124:	20012c31 	.word	0x20012c31

0800f128 <__sfp_lock_release>:
 800f128:	4801      	ldr	r0, [pc, #4]	@ (800f130 <__sfp_lock_release+0x8>)
 800f12a:	f000 ba53 	b.w	800f5d4 <__retarget_lock_release_recursive>
 800f12e:	bf00      	nop
 800f130:	20012c31 	.word	0x20012c31

0800f134 <__sinit>:
 800f134:	b510      	push	{r4, lr}
 800f136:	4604      	mov	r4, r0
 800f138:	f7ff fff0 	bl	800f11c <__sfp_lock_acquire>
 800f13c:	6a23      	ldr	r3, [r4, #32]
 800f13e:	b11b      	cbz	r3, 800f148 <__sinit+0x14>
 800f140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f144:	f7ff bff0 	b.w	800f128 <__sfp_lock_release>
 800f148:	4b04      	ldr	r3, [pc, #16]	@ (800f15c <__sinit+0x28>)
 800f14a:	6223      	str	r3, [r4, #32]
 800f14c:	4b04      	ldr	r3, [pc, #16]	@ (800f160 <__sinit+0x2c>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d1f5      	bne.n	800f140 <__sinit+0xc>
 800f154:	f7ff ffc4 	bl	800f0e0 <global_stdio_init.part.0>
 800f158:	e7f2      	b.n	800f140 <__sinit+0xc>
 800f15a:	bf00      	nop
 800f15c:	0800f0a1 	.word	0x0800f0a1
 800f160:	20012c28 	.word	0x20012c28

0800f164 <_fwalk_sglue>:
 800f164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f168:	4607      	mov	r7, r0
 800f16a:	4688      	mov	r8, r1
 800f16c:	4614      	mov	r4, r2
 800f16e:	2600      	movs	r6, #0
 800f170:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f174:	f1b9 0901 	subs.w	r9, r9, #1
 800f178:	d505      	bpl.n	800f186 <_fwalk_sglue+0x22>
 800f17a:	6824      	ldr	r4, [r4, #0]
 800f17c:	2c00      	cmp	r4, #0
 800f17e:	d1f7      	bne.n	800f170 <_fwalk_sglue+0xc>
 800f180:	4630      	mov	r0, r6
 800f182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f186:	89ab      	ldrh	r3, [r5, #12]
 800f188:	2b01      	cmp	r3, #1
 800f18a:	d907      	bls.n	800f19c <_fwalk_sglue+0x38>
 800f18c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f190:	3301      	adds	r3, #1
 800f192:	d003      	beq.n	800f19c <_fwalk_sglue+0x38>
 800f194:	4629      	mov	r1, r5
 800f196:	4638      	mov	r0, r7
 800f198:	47c0      	blx	r8
 800f19a:	4306      	orrs	r6, r0
 800f19c:	3568      	adds	r5, #104	@ 0x68
 800f19e:	e7e9      	b.n	800f174 <_fwalk_sglue+0x10>

0800f1a0 <iprintf>:
 800f1a0:	b40f      	push	{r0, r1, r2, r3}
 800f1a2:	b507      	push	{r0, r1, r2, lr}
 800f1a4:	4906      	ldr	r1, [pc, #24]	@ (800f1c0 <iprintf+0x20>)
 800f1a6:	ab04      	add	r3, sp, #16
 800f1a8:	6808      	ldr	r0, [r1, #0]
 800f1aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1ae:	6881      	ldr	r1, [r0, #8]
 800f1b0:	9301      	str	r3, [sp, #4]
 800f1b2:	f000 fbe5 	bl	800f980 <_vfiprintf_r>
 800f1b6:	b003      	add	sp, #12
 800f1b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1bc:	b004      	add	sp, #16
 800f1be:	4770      	bx	lr
 800f1c0:	200002cc 	.word	0x200002cc

0800f1c4 <putchar>:
 800f1c4:	4b02      	ldr	r3, [pc, #8]	@ (800f1d0 <putchar+0xc>)
 800f1c6:	4601      	mov	r1, r0
 800f1c8:	6818      	ldr	r0, [r3, #0]
 800f1ca:	6882      	ldr	r2, [r0, #8]
 800f1cc:	f000 bf8c 	b.w	80100e8 <_putc_r>
 800f1d0:	200002cc 	.word	0x200002cc

0800f1d4 <_puts_r>:
 800f1d4:	6a03      	ldr	r3, [r0, #32]
 800f1d6:	b570      	push	{r4, r5, r6, lr}
 800f1d8:	6884      	ldr	r4, [r0, #8]
 800f1da:	4605      	mov	r5, r0
 800f1dc:	460e      	mov	r6, r1
 800f1de:	b90b      	cbnz	r3, 800f1e4 <_puts_r+0x10>
 800f1e0:	f7ff ffa8 	bl	800f134 <__sinit>
 800f1e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f1e6:	07db      	lsls	r3, r3, #31
 800f1e8:	d405      	bmi.n	800f1f6 <_puts_r+0x22>
 800f1ea:	89a3      	ldrh	r3, [r4, #12]
 800f1ec:	0598      	lsls	r0, r3, #22
 800f1ee:	d402      	bmi.n	800f1f6 <_puts_r+0x22>
 800f1f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f1f2:	f000 f9ee 	bl	800f5d2 <__retarget_lock_acquire_recursive>
 800f1f6:	89a3      	ldrh	r3, [r4, #12]
 800f1f8:	0719      	lsls	r1, r3, #28
 800f1fa:	d502      	bpl.n	800f202 <_puts_r+0x2e>
 800f1fc:	6923      	ldr	r3, [r4, #16]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d135      	bne.n	800f26e <_puts_r+0x9a>
 800f202:	4621      	mov	r1, r4
 800f204:	4628      	mov	r0, r5
 800f206:	f000 f905 	bl	800f414 <__swsetup_r>
 800f20a:	b380      	cbz	r0, 800f26e <_puts_r+0x9a>
 800f20c:	f04f 35ff 	mov.w	r5, #4294967295
 800f210:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f212:	07da      	lsls	r2, r3, #31
 800f214:	d405      	bmi.n	800f222 <_puts_r+0x4e>
 800f216:	89a3      	ldrh	r3, [r4, #12]
 800f218:	059b      	lsls	r3, r3, #22
 800f21a:	d402      	bmi.n	800f222 <_puts_r+0x4e>
 800f21c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f21e:	f000 f9d9 	bl	800f5d4 <__retarget_lock_release_recursive>
 800f222:	4628      	mov	r0, r5
 800f224:	bd70      	pop	{r4, r5, r6, pc}
 800f226:	2b00      	cmp	r3, #0
 800f228:	da04      	bge.n	800f234 <_puts_r+0x60>
 800f22a:	69a2      	ldr	r2, [r4, #24]
 800f22c:	429a      	cmp	r2, r3
 800f22e:	dc17      	bgt.n	800f260 <_puts_r+0x8c>
 800f230:	290a      	cmp	r1, #10
 800f232:	d015      	beq.n	800f260 <_puts_r+0x8c>
 800f234:	6823      	ldr	r3, [r4, #0]
 800f236:	1c5a      	adds	r2, r3, #1
 800f238:	6022      	str	r2, [r4, #0]
 800f23a:	7019      	strb	r1, [r3, #0]
 800f23c:	68a3      	ldr	r3, [r4, #8]
 800f23e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f242:	3b01      	subs	r3, #1
 800f244:	60a3      	str	r3, [r4, #8]
 800f246:	2900      	cmp	r1, #0
 800f248:	d1ed      	bne.n	800f226 <_puts_r+0x52>
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	da11      	bge.n	800f272 <_puts_r+0x9e>
 800f24e:	4622      	mov	r2, r4
 800f250:	210a      	movs	r1, #10
 800f252:	4628      	mov	r0, r5
 800f254:	f000 f8a0 	bl	800f398 <__swbuf_r>
 800f258:	3001      	adds	r0, #1
 800f25a:	d0d7      	beq.n	800f20c <_puts_r+0x38>
 800f25c:	250a      	movs	r5, #10
 800f25e:	e7d7      	b.n	800f210 <_puts_r+0x3c>
 800f260:	4622      	mov	r2, r4
 800f262:	4628      	mov	r0, r5
 800f264:	f000 f898 	bl	800f398 <__swbuf_r>
 800f268:	3001      	adds	r0, #1
 800f26a:	d1e7      	bne.n	800f23c <_puts_r+0x68>
 800f26c:	e7ce      	b.n	800f20c <_puts_r+0x38>
 800f26e:	3e01      	subs	r6, #1
 800f270:	e7e4      	b.n	800f23c <_puts_r+0x68>
 800f272:	6823      	ldr	r3, [r4, #0]
 800f274:	1c5a      	adds	r2, r3, #1
 800f276:	6022      	str	r2, [r4, #0]
 800f278:	220a      	movs	r2, #10
 800f27a:	701a      	strb	r2, [r3, #0]
 800f27c:	e7ee      	b.n	800f25c <_puts_r+0x88>
	...

0800f280 <puts>:
 800f280:	4b02      	ldr	r3, [pc, #8]	@ (800f28c <puts+0xc>)
 800f282:	4601      	mov	r1, r0
 800f284:	6818      	ldr	r0, [r3, #0]
 800f286:	f7ff bfa5 	b.w	800f1d4 <_puts_r>
 800f28a:	bf00      	nop
 800f28c:	200002cc 	.word	0x200002cc

0800f290 <siprintf>:
 800f290:	b40e      	push	{r1, r2, r3}
 800f292:	b500      	push	{lr}
 800f294:	b09c      	sub	sp, #112	@ 0x70
 800f296:	ab1d      	add	r3, sp, #116	@ 0x74
 800f298:	9002      	str	r0, [sp, #8]
 800f29a:	9006      	str	r0, [sp, #24]
 800f29c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f2a0:	4809      	ldr	r0, [pc, #36]	@ (800f2c8 <siprintf+0x38>)
 800f2a2:	9107      	str	r1, [sp, #28]
 800f2a4:	9104      	str	r1, [sp, #16]
 800f2a6:	4909      	ldr	r1, [pc, #36]	@ (800f2cc <siprintf+0x3c>)
 800f2a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2ac:	9105      	str	r1, [sp, #20]
 800f2ae:	6800      	ldr	r0, [r0, #0]
 800f2b0:	9301      	str	r3, [sp, #4]
 800f2b2:	a902      	add	r1, sp, #8
 800f2b4:	f000 fa3e 	bl	800f734 <_svfiprintf_r>
 800f2b8:	9b02      	ldr	r3, [sp, #8]
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	701a      	strb	r2, [r3, #0]
 800f2be:	b01c      	add	sp, #112	@ 0x70
 800f2c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2c4:	b003      	add	sp, #12
 800f2c6:	4770      	bx	lr
 800f2c8:	200002cc 	.word	0x200002cc
 800f2cc:	ffff0208 	.word	0xffff0208

0800f2d0 <__sread>:
 800f2d0:	b510      	push	{r4, lr}
 800f2d2:	460c      	mov	r4, r1
 800f2d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2d8:	f000 f91c 	bl	800f514 <_read_r>
 800f2dc:	2800      	cmp	r0, #0
 800f2de:	bfab      	itete	ge
 800f2e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f2e2:	89a3      	ldrhlt	r3, [r4, #12]
 800f2e4:	181b      	addge	r3, r3, r0
 800f2e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f2ea:	bfac      	ite	ge
 800f2ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f2ee:	81a3      	strhlt	r3, [r4, #12]
 800f2f0:	bd10      	pop	{r4, pc}

0800f2f2 <__swrite>:
 800f2f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2f6:	461f      	mov	r7, r3
 800f2f8:	898b      	ldrh	r3, [r1, #12]
 800f2fa:	05db      	lsls	r3, r3, #23
 800f2fc:	4605      	mov	r5, r0
 800f2fe:	460c      	mov	r4, r1
 800f300:	4616      	mov	r6, r2
 800f302:	d505      	bpl.n	800f310 <__swrite+0x1e>
 800f304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f308:	2302      	movs	r3, #2
 800f30a:	2200      	movs	r2, #0
 800f30c:	f000 f8f0 	bl	800f4f0 <_lseek_r>
 800f310:	89a3      	ldrh	r3, [r4, #12]
 800f312:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f316:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f31a:	81a3      	strh	r3, [r4, #12]
 800f31c:	4632      	mov	r2, r6
 800f31e:	463b      	mov	r3, r7
 800f320:	4628      	mov	r0, r5
 800f322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f326:	f000 b917 	b.w	800f558 <_write_r>

0800f32a <__sseek>:
 800f32a:	b510      	push	{r4, lr}
 800f32c:	460c      	mov	r4, r1
 800f32e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f332:	f000 f8dd 	bl	800f4f0 <_lseek_r>
 800f336:	1c43      	adds	r3, r0, #1
 800f338:	89a3      	ldrh	r3, [r4, #12]
 800f33a:	bf15      	itete	ne
 800f33c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f33e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f342:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f346:	81a3      	strheq	r3, [r4, #12]
 800f348:	bf18      	it	ne
 800f34a:	81a3      	strhne	r3, [r4, #12]
 800f34c:	bd10      	pop	{r4, pc}

0800f34e <__sclose>:
 800f34e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f352:	f000 b8bd 	b.w	800f4d0 <_close_r>
	...

0800f358 <_vsiprintf_r>:
 800f358:	b500      	push	{lr}
 800f35a:	b09b      	sub	sp, #108	@ 0x6c
 800f35c:	9100      	str	r1, [sp, #0]
 800f35e:	9104      	str	r1, [sp, #16]
 800f360:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f364:	9105      	str	r1, [sp, #20]
 800f366:	9102      	str	r1, [sp, #8]
 800f368:	4905      	ldr	r1, [pc, #20]	@ (800f380 <_vsiprintf_r+0x28>)
 800f36a:	9103      	str	r1, [sp, #12]
 800f36c:	4669      	mov	r1, sp
 800f36e:	f000 f9e1 	bl	800f734 <_svfiprintf_r>
 800f372:	9b00      	ldr	r3, [sp, #0]
 800f374:	2200      	movs	r2, #0
 800f376:	701a      	strb	r2, [r3, #0]
 800f378:	b01b      	add	sp, #108	@ 0x6c
 800f37a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f37e:	bf00      	nop
 800f380:	ffff0208 	.word	0xffff0208

0800f384 <vsiprintf>:
 800f384:	4613      	mov	r3, r2
 800f386:	460a      	mov	r2, r1
 800f388:	4601      	mov	r1, r0
 800f38a:	4802      	ldr	r0, [pc, #8]	@ (800f394 <vsiprintf+0x10>)
 800f38c:	6800      	ldr	r0, [r0, #0]
 800f38e:	f7ff bfe3 	b.w	800f358 <_vsiprintf_r>
 800f392:	bf00      	nop
 800f394:	200002cc 	.word	0x200002cc

0800f398 <__swbuf_r>:
 800f398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f39a:	460e      	mov	r6, r1
 800f39c:	4614      	mov	r4, r2
 800f39e:	4605      	mov	r5, r0
 800f3a0:	b118      	cbz	r0, 800f3aa <__swbuf_r+0x12>
 800f3a2:	6a03      	ldr	r3, [r0, #32]
 800f3a4:	b90b      	cbnz	r3, 800f3aa <__swbuf_r+0x12>
 800f3a6:	f7ff fec5 	bl	800f134 <__sinit>
 800f3aa:	69a3      	ldr	r3, [r4, #24]
 800f3ac:	60a3      	str	r3, [r4, #8]
 800f3ae:	89a3      	ldrh	r3, [r4, #12]
 800f3b0:	071a      	lsls	r2, r3, #28
 800f3b2:	d501      	bpl.n	800f3b8 <__swbuf_r+0x20>
 800f3b4:	6923      	ldr	r3, [r4, #16]
 800f3b6:	b943      	cbnz	r3, 800f3ca <__swbuf_r+0x32>
 800f3b8:	4621      	mov	r1, r4
 800f3ba:	4628      	mov	r0, r5
 800f3bc:	f000 f82a 	bl	800f414 <__swsetup_r>
 800f3c0:	b118      	cbz	r0, 800f3ca <__swbuf_r+0x32>
 800f3c2:	f04f 37ff 	mov.w	r7, #4294967295
 800f3c6:	4638      	mov	r0, r7
 800f3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3ca:	6823      	ldr	r3, [r4, #0]
 800f3cc:	6922      	ldr	r2, [r4, #16]
 800f3ce:	1a98      	subs	r0, r3, r2
 800f3d0:	6963      	ldr	r3, [r4, #20]
 800f3d2:	b2f6      	uxtb	r6, r6
 800f3d4:	4283      	cmp	r3, r0
 800f3d6:	4637      	mov	r7, r6
 800f3d8:	dc05      	bgt.n	800f3e6 <__swbuf_r+0x4e>
 800f3da:	4621      	mov	r1, r4
 800f3dc:	4628      	mov	r0, r5
 800f3de:	f000 fdf9 	bl	800ffd4 <_fflush_r>
 800f3e2:	2800      	cmp	r0, #0
 800f3e4:	d1ed      	bne.n	800f3c2 <__swbuf_r+0x2a>
 800f3e6:	68a3      	ldr	r3, [r4, #8]
 800f3e8:	3b01      	subs	r3, #1
 800f3ea:	60a3      	str	r3, [r4, #8]
 800f3ec:	6823      	ldr	r3, [r4, #0]
 800f3ee:	1c5a      	adds	r2, r3, #1
 800f3f0:	6022      	str	r2, [r4, #0]
 800f3f2:	701e      	strb	r6, [r3, #0]
 800f3f4:	6962      	ldr	r2, [r4, #20]
 800f3f6:	1c43      	adds	r3, r0, #1
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	d004      	beq.n	800f406 <__swbuf_r+0x6e>
 800f3fc:	89a3      	ldrh	r3, [r4, #12]
 800f3fe:	07db      	lsls	r3, r3, #31
 800f400:	d5e1      	bpl.n	800f3c6 <__swbuf_r+0x2e>
 800f402:	2e0a      	cmp	r6, #10
 800f404:	d1df      	bne.n	800f3c6 <__swbuf_r+0x2e>
 800f406:	4621      	mov	r1, r4
 800f408:	4628      	mov	r0, r5
 800f40a:	f000 fde3 	bl	800ffd4 <_fflush_r>
 800f40e:	2800      	cmp	r0, #0
 800f410:	d0d9      	beq.n	800f3c6 <__swbuf_r+0x2e>
 800f412:	e7d6      	b.n	800f3c2 <__swbuf_r+0x2a>

0800f414 <__swsetup_r>:
 800f414:	b538      	push	{r3, r4, r5, lr}
 800f416:	4b29      	ldr	r3, [pc, #164]	@ (800f4bc <__swsetup_r+0xa8>)
 800f418:	4605      	mov	r5, r0
 800f41a:	6818      	ldr	r0, [r3, #0]
 800f41c:	460c      	mov	r4, r1
 800f41e:	b118      	cbz	r0, 800f428 <__swsetup_r+0x14>
 800f420:	6a03      	ldr	r3, [r0, #32]
 800f422:	b90b      	cbnz	r3, 800f428 <__swsetup_r+0x14>
 800f424:	f7ff fe86 	bl	800f134 <__sinit>
 800f428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f42c:	0719      	lsls	r1, r3, #28
 800f42e:	d422      	bmi.n	800f476 <__swsetup_r+0x62>
 800f430:	06da      	lsls	r2, r3, #27
 800f432:	d407      	bmi.n	800f444 <__swsetup_r+0x30>
 800f434:	2209      	movs	r2, #9
 800f436:	602a      	str	r2, [r5, #0]
 800f438:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f43c:	81a3      	strh	r3, [r4, #12]
 800f43e:	f04f 30ff 	mov.w	r0, #4294967295
 800f442:	e033      	b.n	800f4ac <__swsetup_r+0x98>
 800f444:	0758      	lsls	r0, r3, #29
 800f446:	d512      	bpl.n	800f46e <__swsetup_r+0x5a>
 800f448:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f44a:	b141      	cbz	r1, 800f45e <__swsetup_r+0x4a>
 800f44c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f450:	4299      	cmp	r1, r3
 800f452:	d002      	beq.n	800f45a <__swsetup_r+0x46>
 800f454:	4628      	mov	r0, r5
 800f456:	f000 f8c7 	bl	800f5e8 <_free_r>
 800f45a:	2300      	movs	r3, #0
 800f45c:	6363      	str	r3, [r4, #52]	@ 0x34
 800f45e:	89a3      	ldrh	r3, [r4, #12]
 800f460:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f464:	81a3      	strh	r3, [r4, #12]
 800f466:	2300      	movs	r3, #0
 800f468:	6063      	str	r3, [r4, #4]
 800f46a:	6923      	ldr	r3, [r4, #16]
 800f46c:	6023      	str	r3, [r4, #0]
 800f46e:	89a3      	ldrh	r3, [r4, #12]
 800f470:	f043 0308 	orr.w	r3, r3, #8
 800f474:	81a3      	strh	r3, [r4, #12]
 800f476:	6923      	ldr	r3, [r4, #16]
 800f478:	b94b      	cbnz	r3, 800f48e <__swsetup_r+0x7a>
 800f47a:	89a3      	ldrh	r3, [r4, #12]
 800f47c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f480:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f484:	d003      	beq.n	800f48e <__swsetup_r+0x7a>
 800f486:	4621      	mov	r1, r4
 800f488:	4628      	mov	r0, r5
 800f48a:	f000 fdf1 	bl	8010070 <__smakebuf_r>
 800f48e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f492:	f013 0201 	ands.w	r2, r3, #1
 800f496:	d00a      	beq.n	800f4ae <__swsetup_r+0x9a>
 800f498:	2200      	movs	r2, #0
 800f49a:	60a2      	str	r2, [r4, #8]
 800f49c:	6962      	ldr	r2, [r4, #20]
 800f49e:	4252      	negs	r2, r2
 800f4a0:	61a2      	str	r2, [r4, #24]
 800f4a2:	6922      	ldr	r2, [r4, #16]
 800f4a4:	b942      	cbnz	r2, 800f4b8 <__swsetup_r+0xa4>
 800f4a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f4aa:	d1c5      	bne.n	800f438 <__swsetup_r+0x24>
 800f4ac:	bd38      	pop	{r3, r4, r5, pc}
 800f4ae:	0799      	lsls	r1, r3, #30
 800f4b0:	bf58      	it	pl
 800f4b2:	6962      	ldrpl	r2, [r4, #20]
 800f4b4:	60a2      	str	r2, [r4, #8]
 800f4b6:	e7f4      	b.n	800f4a2 <__swsetup_r+0x8e>
 800f4b8:	2000      	movs	r0, #0
 800f4ba:	e7f7      	b.n	800f4ac <__swsetup_r+0x98>
 800f4bc:	200002cc 	.word	0x200002cc

0800f4c0 <memset>:
 800f4c0:	4402      	add	r2, r0
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	4293      	cmp	r3, r2
 800f4c6:	d100      	bne.n	800f4ca <memset+0xa>
 800f4c8:	4770      	bx	lr
 800f4ca:	f803 1b01 	strb.w	r1, [r3], #1
 800f4ce:	e7f9      	b.n	800f4c4 <memset+0x4>

0800f4d0 <_close_r>:
 800f4d0:	b538      	push	{r3, r4, r5, lr}
 800f4d2:	4d06      	ldr	r5, [pc, #24]	@ (800f4ec <_close_r+0x1c>)
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	4604      	mov	r4, r0
 800f4d8:	4608      	mov	r0, r1
 800f4da:	602b      	str	r3, [r5, #0]
 800f4dc:	f7f4 ffdd 	bl	800449a <_close>
 800f4e0:	1c43      	adds	r3, r0, #1
 800f4e2:	d102      	bne.n	800f4ea <_close_r+0x1a>
 800f4e4:	682b      	ldr	r3, [r5, #0]
 800f4e6:	b103      	cbz	r3, 800f4ea <_close_r+0x1a>
 800f4e8:	6023      	str	r3, [r4, #0]
 800f4ea:	bd38      	pop	{r3, r4, r5, pc}
 800f4ec:	20012c2c 	.word	0x20012c2c

0800f4f0 <_lseek_r>:
 800f4f0:	b538      	push	{r3, r4, r5, lr}
 800f4f2:	4d07      	ldr	r5, [pc, #28]	@ (800f510 <_lseek_r+0x20>)
 800f4f4:	4604      	mov	r4, r0
 800f4f6:	4608      	mov	r0, r1
 800f4f8:	4611      	mov	r1, r2
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	602a      	str	r2, [r5, #0]
 800f4fe:	461a      	mov	r2, r3
 800f500:	f7f4 fff2 	bl	80044e8 <_lseek>
 800f504:	1c43      	adds	r3, r0, #1
 800f506:	d102      	bne.n	800f50e <_lseek_r+0x1e>
 800f508:	682b      	ldr	r3, [r5, #0]
 800f50a:	b103      	cbz	r3, 800f50e <_lseek_r+0x1e>
 800f50c:	6023      	str	r3, [r4, #0]
 800f50e:	bd38      	pop	{r3, r4, r5, pc}
 800f510:	20012c2c 	.word	0x20012c2c

0800f514 <_read_r>:
 800f514:	b538      	push	{r3, r4, r5, lr}
 800f516:	4d07      	ldr	r5, [pc, #28]	@ (800f534 <_read_r+0x20>)
 800f518:	4604      	mov	r4, r0
 800f51a:	4608      	mov	r0, r1
 800f51c:	4611      	mov	r1, r2
 800f51e:	2200      	movs	r2, #0
 800f520:	602a      	str	r2, [r5, #0]
 800f522:	461a      	mov	r2, r3
 800f524:	f7f4 ff9c 	bl	8004460 <_read>
 800f528:	1c43      	adds	r3, r0, #1
 800f52a:	d102      	bne.n	800f532 <_read_r+0x1e>
 800f52c:	682b      	ldr	r3, [r5, #0]
 800f52e:	b103      	cbz	r3, 800f532 <_read_r+0x1e>
 800f530:	6023      	str	r3, [r4, #0]
 800f532:	bd38      	pop	{r3, r4, r5, pc}
 800f534:	20012c2c 	.word	0x20012c2c

0800f538 <_sbrk_r>:
 800f538:	b538      	push	{r3, r4, r5, lr}
 800f53a:	4d06      	ldr	r5, [pc, #24]	@ (800f554 <_sbrk_r+0x1c>)
 800f53c:	2300      	movs	r3, #0
 800f53e:	4604      	mov	r4, r0
 800f540:	4608      	mov	r0, r1
 800f542:	602b      	str	r3, [r5, #0]
 800f544:	f7f4 ffde 	bl	8004504 <_sbrk>
 800f548:	1c43      	adds	r3, r0, #1
 800f54a:	d102      	bne.n	800f552 <_sbrk_r+0x1a>
 800f54c:	682b      	ldr	r3, [r5, #0]
 800f54e:	b103      	cbz	r3, 800f552 <_sbrk_r+0x1a>
 800f550:	6023      	str	r3, [r4, #0]
 800f552:	bd38      	pop	{r3, r4, r5, pc}
 800f554:	20012c2c 	.word	0x20012c2c

0800f558 <_write_r>:
 800f558:	b538      	push	{r3, r4, r5, lr}
 800f55a:	4d07      	ldr	r5, [pc, #28]	@ (800f578 <_write_r+0x20>)
 800f55c:	4604      	mov	r4, r0
 800f55e:	4608      	mov	r0, r1
 800f560:	4611      	mov	r1, r2
 800f562:	2200      	movs	r2, #0
 800f564:	602a      	str	r2, [r5, #0]
 800f566:	461a      	mov	r2, r3
 800f568:	f7f1 fe4e 	bl	8001208 <_write>
 800f56c:	1c43      	adds	r3, r0, #1
 800f56e:	d102      	bne.n	800f576 <_write_r+0x1e>
 800f570:	682b      	ldr	r3, [r5, #0]
 800f572:	b103      	cbz	r3, 800f576 <_write_r+0x1e>
 800f574:	6023      	str	r3, [r4, #0]
 800f576:	bd38      	pop	{r3, r4, r5, pc}
 800f578:	20012c2c 	.word	0x20012c2c

0800f57c <__errno>:
 800f57c:	4b01      	ldr	r3, [pc, #4]	@ (800f584 <__errno+0x8>)
 800f57e:	6818      	ldr	r0, [r3, #0]
 800f580:	4770      	bx	lr
 800f582:	bf00      	nop
 800f584:	200002cc 	.word	0x200002cc

0800f588 <__libc_init_array>:
 800f588:	b570      	push	{r4, r5, r6, lr}
 800f58a:	4d0d      	ldr	r5, [pc, #52]	@ (800f5c0 <__libc_init_array+0x38>)
 800f58c:	4c0d      	ldr	r4, [pc, #52]	@ (800f5c4 <__libc_init_array+0x3c>)
 800f58e:	1b64      	subs	r4, r4, r5
 800f590:	10a4      	asrs	r4, r4, #2
 800f592:	2600      	movs	r6, #0
 800f594:	42a6      	cmp	r6, r4
 800f596:	d109      	bne.n	800f5ac <__libc_init_array+0x24>
 800f598:	4d0b      	ldr	r5, [pc, #44]	@ (800f5c8 <__libc_init_array+0x40>)
 800f59a:	4c0c      	ldr	r4, [pc, #48]	@ (800f5cc <__libc_init_array+0x44>)
 800f59c:	f000 fe58 	bl	8010250 <_init>
 800f5a0:	1b64      	subs	r4, r4, r5
 800f5a2:	10a4      	asrs	r4, r4, #2
 800f5a4:	2600      	movs	r6, #0
 800f5a6:	42a6      	cmp	r6, r4
 800f5a8:	d105      	bne.n	800f5b6 <__libc_init_array+0x2e>
 800f5aa:	bd70      	pop	{r4, r5, r6, pc}
 800f5ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5b0:	4798      	blx	r3
 800f5b2:	3601      	adds	r6, #1
 800f5b4:	e7ee      	b.n	800f594 <__libc_init_array+0xc>
 800f5b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5ba:	4798      	blx	r3
 800f5bc:	3601      	adds	r6, #1
 800f5be:	e7f2      	b.n	800f5a6 <__libc_init_array+0x1e>
 800f5c0:	08012ed0 	.word	0x08012ed0
 800f5c4:	08012ed0 	.word	0x08012ed0
 800f5c8:	08012ed0 	.word	0x08012ed0
 800f5cc:	08012ed4 	.word	0x08012ed4

0800f5d0 <__retarget_lock_init_recursive>:
 800f5d0:	4770      	bx	lr

0800f5d2 <__retarget_lock_acquire_recursive>:
 800f5d2:	4770      	bx	lr

0800f5d4 <__retarget_lock_release_recursive>:
 800f5d4:	4770      	bx	lr

0800f5d6 <strcpy>:
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f5dc:	f803 2b01 	strb.w	r2, [r3], #1
 800f5e0:	2a00      	cmp	r2, #0
 800f5e2:	d1f9      	bne.n	800f5d8 <strcpy+0x2>
 800f5e4:	4770      	bx	lr
	...

0800f5e8 <_free_r>:
 800f5e8:	b538      	push	{r3, r4, r5, lr}
 800f5ea:	4605      	mov	r5, r0
 800f5ec:	2900      	cmp	r1, #0
 800f5ee:	d041      	beq.n	800f674 <_free_r+0x8c>
 800f5f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5f4:	1f0c      	subs	r4, r1, #4
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	bfb8      	it	lt
 800f5fa:	18e4      	addlt	r4, r4, r3
 800f5fc:	f7ff fc7e 	bl	800eefc <__malloc_lock>
 800f600:	4a1d      	ldr	r2, [pc, #116]	@ (800f678 <_free_r+0x90>)
 800f602:	6813      	ldr	r3, [r2, #0]
 800f604:	b933      	cbnz	r3, 800f614 <_free_r+0x2c>
 800f606:	6063      	str	r3, [r4, #4]
 800f608:	6014      	str	r4, [r2, #0]
 800f60a:	4628      	mov	r0, r5
 800f60c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f610:	f7ff bc7a 	b.w	800ef08 <__malloc_unlock>
 800f614:	42a3      	cmp	r3, r4
 800f616:	d908      	bls.n	800f62a <_free_r+0x42>
 800f618:	6820      	ldr	r0, [r4, #0]
 800f61a:	1821      	adds	r1, r4, r0
 800f61c:	428b      	cmp	r3, r1
 800f61e:	bf01      	itttt	eq
 800f620:	6819      	ldreq	r1, [r3, #0]
 800f622:	685b      	ldreq	r3, [r3, #4]
 800f624:	1809      	addeq	r1, r1, r0
 800f626:	6021      	streq	r1, [r4, #0]
 800f628:	e7ed      	b.n	800f606 <_free_r+0x1e>
 800f62a:	461a      	mov	r2, r3
 800f62c:	685b      	ldr	r3, [r3, #4]
 800f62e:	b10b      	cbz	r3, 800f634 <_free_r+0x4c>
 800f630:	42a3      	cmp	r3, r4
 800f632:	d9fa      	bls.n	800f62a <_free_r+0x42>
 800f634:	6811      	ldr	r1, [r2, #0]
 800f636:	1850      	adds	r0, r2, r1
 800f638:	42a0      	cmp	r0, r4
 800f63a:	d10b      	bne.n	800f654 <_free_r+0x6c>
 800f63c:	6820      	ldr	r0, [r4, #0]
 800f63e:	4401      	add	r1, r0
 800f640:	1850      	adds	r0, r2, r1
 800f642:	4283      	cmp	r3, r0
 800f644:	6011      	str	r1, [r2, #0]
 800f646:	d1e0      	bne.n	800f60a <_free_r+0x22>
 800f648:	6818      	ldr	r0, [r3, #0]
 800f64a:	685b      	ldr	r3, [r3, #4]
 800f64c:	6053      	str	r3, [r2, #4]
 800f64e:	4408      	add	r0, r1
 800f650:	6010      	str	r0, [r2, #0]
 800f652:	e7da      	b.n	800f60a <_free_r+0x22>
 800f654:	d902      	bls.n	800f65c <_free_r+0x74>
 800f656:	230c      	movs	r3, #12
 800f658:	602b      	str	r3, [r5, #0]
 800f65a:	e7d6      	b.n	800f60a <_free_r+0x22>
 800f65c:	6820      	ldr	r0, [r4, #0]
 800f65e:	1821      	adds	r1, r4, r0
 800f660:	428b      	cmp	r3, r1
 800f662:	bf04      	itt	eq
 800f664:	6819      	ldreq	r1, [r3, #0]
 800f666:	685b      	ldreq	r3, [r3, #4]
 800f668:	6063      	str	r3, [r4, #4]
 800f66a:	bf04      	itt	eq
 800f66c:	1809      	addeq	r1, r1, r0
 800f66e:	6021      	streq	r1, [r4, #0]
 800f670:	6054      	str	r4, [r2, #4]
 800f672:	e7ca      	b.n	800f60a <_free_r+0x22>
 800f674:	bd38      	pop	{r3, r4, r5, pc}
 800f676:	bf00      	nop
 800f678:	20012aec 	.word	0x20012aec

0800f67c <__ssputs_r>:
 800f67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f680:	688e      	ldr	r6, [r1, #8]
 800f682:	461f      	mov	r7, r3
 800f684:	42be      	cmp	r6, r7
 800f686:	680b      	ldr	r3, [r1, #0]
 800f688:	4682      	mov	sl, r0
 800f68a:	460c      	mov	r4, r1
 800f68c:	4690      	mov	r8, r2
 800f68e:	d82d      	bhi.n	800f6ec <__ssputs_r+0x70>
 800f690:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f694:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f698:	d026      	beq.n	800f6e8 <__ssputs_r+0x6c>
 800f69a:	6965      	ldr	r5, [r4, #20]
 800f69c:	6909      	ldr	r1, [r1, #16]
 800f69e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f6a2:	eba3 0901 	sub.w	r9, r3, r1
 800f6a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f6aa:	1c7b      	adds	r3, r7, #1
 800f6ac:	444b      	add	r3, r9
 800f6ae:	106d      	asrs	r5, r5, #1
 800f6b0:	429d      	cmp	r5, r3
 800f6b2:	bf38      	it	cc
 800f6b4:	461d      	movcc	r5, r3
 800f6b6:	0553      	lsls	r3, r2, #21
 800f6b8:	d527      	bpl.n	800f70a <__ssputs_r+0x8e>
 800f6ba:	4629      	mov	r1, r5
 800f6bc:	f7ff fb9e 	bl	800edfc <_malloc_r>
 800f6c0:	4606      	mov	r6, r0
 800f6c2:	b360      	cbz	r0, 800f71e <__ssputs_r+0xa2>
 800f6c4:	6921      	ldr	r1, [r4, #16]
 800f6c6:	464a      	mov	r2, r9
 800f6c8:	f000 fd7e 	bl	80101c8 <memcpy>
 800f6cc:	89a3      	ldrh	r3, [r4, #12]
 800f6ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f6d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f6d6:	81a3      	strh	r3, [r4, #12]
 800f6d8:	6126      	str	r6, [r4, #16]
 800f6da:	6165      	str	r5, [r4, #20]
 800f6dc:	444e      	add	r6, r9
 800f6de:	eba5 0509 	sub.w	r5, r5, r9
 800f6e2:	6026      	str	r6, [r4, #0]
 800f6e4:	60a5      	str	r5, [r4, #8]
 800f6e6:	463e      	mov	r6, r7
 800f6e8:	42be      	cmp	r6, r7
 800f6ea:	d900      	bls.n	800f6ee <__ssputs_r+0x72>
 800f6ec:	463e      	mov	r6, r7
 800f6ee:	6820      	ldr	r0, [r4, #0]
 800f6f0:	4632      	mov	r2, r6
 800f6f2:	4641      	mov	r1, r8
 800f6f4:	f000 fd2c 	bl	8010150 <memmove>
 800f6f8:	68a3      	ldr	r3, [r4, #8]
 800f6fa:	1b9b      	subs	r3, r3, r6
 800f6fc:	60a3      	str	r3, [r4, #8]
 800f6fe:	6823      	ldr	r3, [r4, #0]
 800f700:	4433      	add	r3, r6
 800f702:	6023      	str	r3, [r4, #0]
 800f704:	2000      	movs	r0, #0
 800f706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f70a:	462a      	mov	r2, r5
 800f70c:	f000 fd6a 	bl	80101e4 <_realloc_r>
 800f710:	4606      	mov	r6, r0
 800f712:	2800      	cmp	r0, #0
 800f714:	d1e0      	bne.n	800f6d8 <__ssputs_r+0x5c>
 800f716:	6921      	ldr	r1, [r4, #16]
 800f718:	4650      	mov	r0, sl
 800f71a:	f7ff ff65 	bl	800f5e8 <_free_r>
 800f71e:	230c      	movs	r3, #12
 800f720:	f8ca 3000 	str.w	r3, [sl]
 800f724:	89a3      	ldrh	r3, [r4, #12]
 800f726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f72a:	81a3      	strh	r3, [r4, #12]
 800f72c:	f04f 30ff 	mov.w	r0, #4294967295
 800f730:	e7e9      	b.n	800f706 <__ssputs_r+0x8a>
	...

0800f734 <_svfiprintf_r>:
 800f734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f738:	4698      	mov	r8, r3
 800f73a:	898b      	ldrh	r3, [r1, #12]
 800f73c:	061b      	lsls	r3, r3, #24
 800f73e:	b09d      	sub	sp, #116	@ 0x74
 800f740:	4607      	mov	r7, r0
 800f742:	460d      	mov	r5, r1
 800f744:	4614      	mov	r4, r2
 800f746:	d510      	bpl.n	800f76a <_svfiprintf_r+0x36>
 800f748:	690b      	ldr	r3, [r1, #16]
 800f74a:	b973      	cbnz	r3, 800f76a <_svfiprintf_r+0x36>
 800f74c:	2140      	movs	r1, #64	@ 0x40
 800f74e:	f7ff fb55 	bl	800edfc <_malloc_r>
 800f752:	6028      	str	r0, [r5, #0]
 800f754:	6128      	str	r0, [r5, #16]
 800f756:	b930      	cbnz	r0, 800f766 <_svfiprintf_r+0x32>
 800f758:	230c      	movs	r3, #12
 800f75a:	603b      	str	r3, [r7, #0]
 800f75c:	f04f 30ff 	mov.w	r0, #4294967295
 800f760:	b01d      	add	sp, #116	@ 0x74
 800f762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f766:	2340      	movs	r3, #64	@ 0x40
 800f768:	616b      	str	r3, [r5, #20]
 800f76a:	2300      	movs	r3, #0
 800f76c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f76e:	2320      	movs	r3, #32
 800f770:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f774:	f8cd 800c 	str.w	r8, [sp, #12]
 800f778:	2330      	movs	r3, #48	@ 0x30
 800f77a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f918 <_svfiprintf_r+0x1e4>
 800f77e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f782:	f04f 0901 	mov.w	r9, #1
 800f786:	4623      	mov	r3, r4
 800f788:	469a      	mov	sl, r3
 800f78a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f78e:	b10a      	cbz	r2, 800f794 <_svfiprintf_r+0x60>
 800f790:	2a25      	cmp	r2, #37	@ 0x25
 800f792:	d1f9      	bne.n	800f788 <_svfiprintf_r+0x54>
 800f794:	ebba 0b04 	subs.w	fp, sl, r4
 800f798:	d00b      	beq.n	800f7b2 <_svfiprintf_r+0x7e>
 800f79a:	465b      	mov	r3, fp
 800f79c:	4622      	mov	r2, r4
 800f79e:	4629      	mov	r1, r5
 800f7a0:	4638      	mov	r0, r7
 800f7a2:	f7ff ff6b 	bl	800f67c <__ssputs_r>
 800f7a6:	3001      	adds	r0, #1
 800f7a8:	f000 80a7 	beq.w	800f8fa <_svfiprintf_r+0x1c6>
 800f7ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7ae:	445a      	add	r2, fp
 800f7b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800f7b2:	f89a 3000 	ldrb.w	r3, [sl]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	f000 809f 	beq.w	800f8fa <_svfiprintf_r+0x1c6>
 800f7bc:	2300      	movs	r3, #0
 800f7be:	f04f 32ff 	mov.w	r2, #4294967295
 800f7c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f7c6:	f10a 0a01 	add.w	sl, sl, #1
 800f7ca:	9304      	str	r3, [sp, #16]
 800f7cc:	9307      	str	r3, [sp, #28]
 800f7ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f7d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800f7d4:	4654      	mov	r4, sl
 800f7d6:	2205      	movs	r2, #5
 800f7d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7dc:	484e      	ldr	r0, [pc, #312]	@ (800f918 <_svfiprintf_r+0x1e4>)
 800f7de:	f7f0 fd0f 	bl	8000200 <memchr>
 800f7e2:	9a04      	ldr	r2, [sp, #16]
 800f7e4:	b9d8      	cbnz	r0, 800f81e <_svfiprintf_r+0xea>
 800f7e6:	06d0      	lsls	r0, r2, #27
 800f7e8:	bf44      	itt	mi
 800f7ea:	2320      	movmi	r3, #32
 800f7ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f7f0:	0711      	lsls	r1, r2, #28
 800f7f2:	bf44      	itt	mi
 800f7f4:	232b      	movmi	r3, #43	@ 0x2b
 800f7f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f7fa:	f89a 3000 	ldrb.w	r3, [sl]
 800f7fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800f800:	d015      	beq.n	800f82e <_svfiprintf_r+0xfa>
 800f802:	9a07      	ldr	r2, [sp, #28]
 800f804:	4654      	mov	r4, sl
 800f806:	2000      	movs	r0, #0
 800f808:	f04f 0c0a 	mov.w	ip, #10
 800f80c:	4621      	mov	r1, r4
 800f80e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f812:	3b30      	subs	r3, #48	@ 0x30
 800f814:	2b09      	cmp	r3, #9
 800f816:	d94b      	bls.n	800f8b0 <_svfiprintf_r+0x17c>
 800f818:	b1b0      	cbz	r0, 800f848 <_svfiprintf_r+0x114>
 800f81a:	9207      	str	r2, [sp, #28]
 800f81c:	e014      	b.n	800f848 <_svfiprintf_r+0x114>
 800f81e:	eba0 0308 	sub.w	r3, r0, r8
 800f822:	fa09 f303 	lsl.w	r3, r9, r3
 800f826:	4313      	orrs	r3, r2
 800f828:	9304      	str	r3, [sp, #16]
 800f82a:	46a2      	mov	sl, r4
 800f82c:	e7d2      	b.n	800f7d4 <_svfiprintf_r+0xa0>
 800f82e:	9b03      	ldr	r3, [sp, #12]
 800f830:	1d19      	adds	r1, r3, #4
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	9103      	str	r1, [sp, #12]
 800f836:	2b00      	cmp	r3, #0
 800f838:	bfbb      	ittet	lt
 800f83a:	425b      	neglt	r3, r3
 800f83c:	f042 0202 	orrlt.w	r2, r2, #2
 800f840:	9307      	strge	r3, [sp, #28]
 800f842:	9307      	strlt	r3, [sp, #28]
 800f844:	bfb8      	it	lt
 800f846:	9204      	strlt	r2, [sp, #16]
 800f848:	7823      	ldrb	r3, [r4, #0]
 800f84a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f84c:	d10a      	bne.n	800f864 <_svfiprintf_r+0x130>
 800f84e:	7863      	ldrb	r3, [r4, #1]
 800f850:	2b2a      	cmp	r3, #42	@ 0x2a
 800f852:	d132      	bne.n	800f8ba <_svfiprintf_r+0x186>
 800f854:	9b03      	ldr	r3, [sp, #12]
 800f856:	1d1a      	adds	r2, r3, #4
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	9203      	str	r2, [sp, #12]
 800f85c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f860:	3402      	adds	r4, #2
 800f862:	9305      	str	r3, [sp, #20]
 800f864:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f928 <_svfiprintf_r+0x1f4>
 800f868:	7821      	ldrb	r1, [r4, #0]
 800f86a:	2203      	movs	r2, #3
 800f86c:	4650      	mov	r0, sl
 800f86e:	f7f0 fcc7 	bl	8000200 <memchr>
 800f872:	b138      	cbz	r0, 800f884 <_svfiprintf_r+0x150>
 800f874:	9b04      	ldr	r3, [sp, #16]
 800f876:	eba0 000a 	sub.w	r0, r0, sl
 800f87a:	2240      	movs	r2, #64	@ 0x40
 800f87c:	4082      	lsls	r2, r0
 800f87e:	4313      	orrs	r3, r2
 800f880:	3401      	adds	r4, #1
 800f882:	9304      	str	r3, [sp, #16]
 800f884:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f888:	4824      	ldr	r0, [pc, #144]	@ (800f91c <_svfiprintf_r+0x1e8>)
 800f88a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f88e:	2206      	movs	r2, #6
 800f890:	f7f0 fcb6 	bl	8000200 <memchr>
 800f894:	2800      	cmp	r0, #0
 800f896:	d036      	beq.n	800f906 <_svfiprintf_r+0x1d2>
 800f898:	4b21      	ldr	r3, [pc, #132]	@ (800f920 <_svfiprintf_r+0x1ec>)
 800f89a:	bb1b      	cbnz	r3, 800f8e4 <_svfiprintf_r+0x1b0>
 800f89c:	9b03      	ldr	r3, [sp, #12]
 800f89e:	3307      	adds	r3, #7
 800f8a0:	f023 0307 	bic.w	r3, r3, #7
 800f8a4:	3308      	adds	r3, #8
 800f8a6:	9303      	str	r3, [sp, #12]
 800f8a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8aa:	4433      	add	r3, r6
 800f8ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8ae:	e76a      	b.n	800f786 <_svfiprintf_r+0x52>
 800f8b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8b4:	460c      	mov	r4, r1
 800f8b6:	2001      	movs	r0, #1
 800f8b8:	e7a8      	b.n	800f80c <_svfiprintf_r+0xd8>
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	3401      	adds	r4, #1
 800f8be:	9305      	str	r3, [sp, #20]
 800f8c0:	4619      	mov	r1, r3
 800f8c2:	f04f 0c0a 	mov.w	ip, #10
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8cc:	3a30      	subs	r2, #48	@ 0x30
 800f8ce:	2a09      	cmp	r2, #9
 800f8d0:	d903      	bls.n	800f8da <_svfiprintf_r+0x1a6>
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d0c6      	beq.n	800f864 <_svfiprintf_r+0x130>
 800f8d6:	9105      	str	r1, [sp, #20]
 800f8d8:	e7c4      	b.n	800f864 <_svfiprintf_r+0x130>
 800f8da:	fb0c 2101 	mla	r1, ip, r1, r2
 800f8de:	4604      	mov	r4, r0
 800f8e0:	2301      	movs	r3, #1
 800f8e2:	e7f0      	b.n	800f8c6 <_svfiprintf_r+0x192>
 800f8e4:	ab03      	add	r3, sp, #12
 800f8e6:	9300      	str	r3, [sp, #0]
 800f8e8:	462a      	mov	r2, r5
 800f8ea:	4b0e      	ldr	r3, [pc, #56]	@ (800f924 <_svfiprintf_r+0x1f0>)
 800f8ec:	a904      	add	r1, sp, #16
 800f8ee:	4638      	mov	r0, r7
 800f8f0:	f3af 8000 	nop.w
 800f8f4:	1c42      	adds	r2, r0, #1
 800f8f6:	4606      	mov	r6, r0
 800f8f8:	d1d6      	bne.n	800f8a8 <_svfiprintf_r+0x174>
 800f8fa:	89ab      	ldrh	r3, [r5, #12]
 800f8fc:	065b      	lsls	r3, r3, #25
 800f8fe:	f53f af2d 	bmi.w	800f75c <_svfiprintf_r+0x28>
 800f902:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f904:	e72c      	b.n	800f760 <_svfiprintf_r+0x2c>
 800f906:	ab03      	add	r3, sp, #12
 800f908:	9300      	str	r3, [sp, #0]
 800f90a:	462a      	mov	r2, r5
 800f90c:	4b05      	ldr	r3, [pc, #20]	@ (800f924 <_svfiprintf_r+0x1f0>)
 800f90e:	a904      	add	r1, sp, #16
 800f910:	4638      	mov	r0, r7
 800f912:	f000 f9bb 	bl	800fc8c <_printf_i>
 800f916:	e7ed      	b.n	800f8f4 <_svfiprintf_r+0x1c0>
 800f918:	08012e95 	.word	0x08012e95
 800f91c:	08012e9f 	.word	0x08012e9f
 800f920:	00000000 	.word	0x00000000
 800f924:	0800f67d 	.word	0x0800f67d
 800f928:	08012e9b 	.word	0x08012e9b

0800f92c <__sfputc_r>:
 800f92c:	6893      	ldr	r3, [r2, #8]
 800f92e:	3b01      	subs	r3, #1
 800f930:	2b00      	cmp	r3, #0
 800f932:	b410      	push	{r4}
 800f934:	6093      	str	r3, [r2, #8]
 800f936:	da08      	bge.n	800f94a <__sfputc_r+0x1e>
 800f938:	6994      	ldr	r4, [r2, #24]
 800f93a:	42a3      	cmp	r3, r4
 800f93c:	db01      	blt.n	800f942 <__sfputc_r+0x16>
 800f93e:	290a      	cmp	r1, #10
 800f940:	d103      	bne.n	800f94a <__sfputc_r+0x1e>
 800f942:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f946:	f7ff bd27 	b.w	800f398 <__swbuf_r>
 800f94a:	6813      	ldr	r3, [r2, #0]
 800f94c:	1c58      	adds	r0, r3, #1
 800f94e:	6010      	str	r0, [r2, #0]
 800f950:	7019      	strb	r1, [r3, #0]
 800f952:	4608      	mov	r0, r1
 800f954:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f958:	4770      	bx	lr

0800f95a <__sfputs_r>:
 800f95a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f95c:	4606      	mov	r6, r0
 800f95e:	460f      	mov	r7, r1
 800f960:	4614      	mov	r4, r2
 800f962:	18d5      	adds	r5, r2, r3
 800f964:	42ac      	cmp	r4, r5
 800f966:	d101      	bne.n	800f96c <__sfputs_r+0x12>
 800f968:	2000      	movs	r0, #0
 800f96a:	e007      	b.n	800f97c <__sfputs_r+0x22>
 800f96c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f970:	463a      	mov	r2, r7
 800f972:	4630      	mov	r0, r6
 800f974:	f7ff ffda 	bl	800f92c <__sfputc_r>
 800f978:	1c43      	adds	r3, r0, #1
 800f97a:	d1f3      	bne.n	800f964 <__sfputs_r+0xa>
 800f97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f980 <_vfiprintf_r>:
 800f980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f984:	460d      	mov	r5, r1
 800f986:	b09d      	sub	sp, #116	@ 0x74
 800f988:	4614      	mov	r4, r2
 800f98a:	4698      	mov	r8, r3
 800f98c:	4606      	mov	r6, r0
 800f98e:	b118      	cbz	r0, 800f998 <_vfiprintf_r+0x18>
 800f990:	6a03      	ldr	r3, [r0, #32]
 800f992:	b90b      	cbnz	r3, 800f998 <_vfiprintf_r+0x18>
 800f994:	f7ff fbce 	bl	800f134 <__sinit>
 800f998:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f99a:	07d9      	lsls	r1, r3, #31
 800f99c:	d405      	bmi.n	800f9aa <_vfiprintf_r+0x2a>
 800f99e:	89ab      	ldrh	r3, [r5, #12]
 800f9a0:	059a      	lsls	r2, r3, #22
 800f9a2:	d402      	bmi.n	800f9aa <_vfiprintf_r+0x2a>
 800f9a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f9a6:	f7ff fe14 	bl	800f5d2 <__retarget_lock_acquire_recursive>
 800f9aa:	89ab      	ldrh	r3, [r5, #12]
 800f9ac:	071b      	lsls	r3, r3, #28
 800f9ae:	d501      	bpl.n	800f9b4 <_vfiprintf_r+0x34>
 800f9b0:	692b      	ldr	r3, [r5, #16]
 800f9b2:	b99b      	cbnz	r3, 800f9dc <_vfiprintf_r+0x5c>
 800f9b4:	4629      	mov	r1, r5
 800f9b6:	4630      	mov	r0, r6
 800f9b8:	f7ff fd2c 	bl	800f414 <__swsetup_r>
 800f9bc:	b170      	cbz	r0, 800f9dc <_vfiprintf_r+0x5c>
 800f9be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f9c0:	07dc      	lsls	r4, r3, #31
 800f9c2:	d504      	bpl.n	800f9ce <_vfiprintf_r+0x4e>
 800f9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9c8:	b01d      	add	sp, #116	@ 0x74
 800f9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ce:	89ab      	ldrh	r3, [r5, #12]
 800f9d0:	0598      	lsls	r0, r3, #22
 800f9d2:	d4f7      	bmi.n	800f9c4 <_vfiprintf_r+0x44>
 800f9d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f9d6:	f7ff fdfd 	bl	800f5d4 <__retarget_lock_release_recursive>
 800f9da:	e7f3      	b.n	800f9c4 <_vfiprintf_r+0x44>
 800f9dc:	2300      	movs	r3, #0
 800f9de:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9e0:	2320      	movs	r3, #32
 800f9e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f9e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9ea:	2330      	movs	r3, #48	@ 0x30
 800f9ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fb9c <_vfiprintf_r+0x21c>
 800f9f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f9f4:	f04f 0901 	mov.w	r9, #1
 800f9f8:	4623      	mov	r3, r4
 800f9fa:	469a      	mov	sl, r3
 800f9fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa00:	b10a      	cbz	r2, 800fa06 <_vfiprintf_r+0x86>
 800fa02:	2a25      	cmp	r2, #37	@ 0x25
 800fa04:	d1f9      	bne.n	800f9fa <_vfiprintf_r+0x7a>
 800fa06:	ebba 0b04 	subs.w	fp, sl, r4
 800fa0a:	d00b      	beq.n	800fa24 <_vfiprintf_r+0xa4>
 800fa0c:	465b      	mov	r3, fp
 800fa0e:	4622      	mov	r2, r4
 800fa10:	4629      	mov	r1, r5
 800fa12:	4630      	mov	r0, r6
 800fa14:	f7ff ffa1 	bl	800f95a <__sfputs_r>
 800fa18:	3001      	adds	r0, #1
 800fa1a:	f000 80a7 	beq.w	800fb6c <_vfiprintf_r+0x1ec>
 800fa1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa20:	445a      	add	r2, fp
 800fa22:	9209      	str	r2, [sp, #36]	@ 0x24
 800fa24:	f89a 3000 	ldrb.w	r3, [sl]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	f000 809f 	beq.w	800fb6c <_vfiprintf_r+0x1ec>
 800fa2e:	2300      	movs	r3, #0
 800fa30:	f04f 32ff 	mov.w	r2, #4294967295
 800fa34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa38:	f10a 0a01 	add.w	sl, sl, #1
 800fa3c:	9304      	str	r3, [sp, #16]
 800fa3e:	9307      	str	r3, [sp, #28]
 800fa40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fa44:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa46:	4654      	mov	r4, sl
 800fa48:	2205      	movs	r2, #5
 800fa4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa4e:	4853      	ldr	r0, [pc, #332]	@ (800fb9c <_vfiprintf_r+0x21c>)
 800fa50:	f7f0 fbd6 	bl	8000200 <memchr>
 800fa54:	9a04      	ldr	r2, [sp, #16]
 800fa56:	b9d8      	cbnz	r0, 800fa90 <_vfiprintf_r+0x110>
 800fa58:	06d1      	lsls	r1, r2, #27
 800fa5a:	bf44      	itt	mi
 800fa5c:	2320      	movmi	r3, #32
 800fa5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa62:	0713      	lsls	r3, r2, #28
 800fa64:	bf44      	itt	mi
 800fa66:	232b      	movmi	r3, #43	@ 0x2b
 800fa68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa6c:	f89a 3000 	ldrb.w	r3, [sl]
 800fa70:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa72:	d015      	beq.n	800faa0 <_vfiprintf_r+0x120>
 800fa74:	9a07      	ldr	r2, [sp, #28]
 800fa76:	4654      	mov	r4, sl
 800fa78:	2000      	movs	r0, #0
 800fa7a:	f04f 0c0a 	mov.w	ip, #10
 800fa7e:	4621      	mov	r1, r4
 800fa80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa84:	3b30      	subs	r3, #48	@ 0x30
 800fa86:	2b09      	cmp	r3, #9
 800fa88:	d94b      	bls.n	800fb22 <_vfiprintf_r+0x1a2>
 800fa8a:	b1b0      	cbz	r0, 800faba <_vfiprintf_r+0x13a>
 800fa8c:	9207      	str	r2, [sp, #28]
 800fa8e:	e014      	b.n	800faba <_vfiprintf_r+0x13a>
 800fa90:	eba0 0308 	sub.w	r3, r0, r8
 800fa94:	fa09 f303 	lsl.w	r3, r9, r3
 800fa98:	4313      	orrs	r3, r2
 800fa9a:	9304      	str	r3, [sp, #16]
 800fa9c:	46a2      	mov	sl, r4
 800fa9e:	e7d2      	b.n	800fa46 <_vfiprintf_r+0xc6>
 800faa0:	9b03      	ldr	r3, [sp, #12]
 800faa2:	1d19      	adds	r1, r3, #4
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	9103      	str	r1, [sp, #12]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	bfbb      	ittet	lt
 800faac:	425b      	neglt	r3, r3
 800faae:	f042 0202 	orrlt.w	r2, r2, #2
 800fab2:	9307      	strge	r3, [sp, #28]
 800fab4:	9307      	strlt	r3, [sp, #28]
 800fab6:	bfb8      	it	lt
 800fab8:	9204      	strlt	r2, [sp, #16]
 800faba:	7823      	ldrb	r3, [r4, #0]
 800fabc:	2b2e      	cmp	r3, #46	@ 0x2e
 800fabe:	d10a      	bne.n	800fad6 <_vfiprintf_r+0x156>
 800fac0:	7863      	ldrb	r3, [r4, #1]
 800fac2:	2b2a      	cmp	r3, #42	@ 0x2a
 800fac4:	d132      	bne.n	800fb2c <_vfiprintf_r+0x1ac>
 800fac6:	9b03      	ldr	r3, [sp, #12]
 800fac8:	1d1a      	adds	r2, r3, #4
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	9203      	str	r2, [sp, #12]
 800face:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fad2:	3402      	adds	r4, #2
 800fad4:	9305      	str	r3, [sp, #20]
 800fad6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fbac <_vfiprintf_r+0x22c>
 800fada:	7821      	ldrb	r1, [r4, #0]
 800fadc:	2203      	movs	r2, #3
 800fade:	4650      	mov	r0, sl
 800fae0:	f7f0 fb8e 	bl	8000200 <memchr>
 800fae4:	b138      	cbz	r0, 800faf6 <_vfiprintf_r+0x176>
 800fae6:	9b04      	ldr	r3, [sp, #16]
 800fae8:	eba0 000a 	sub.w	r0, r0, sl
 800faec:	2240      	movs	r2, #64	@ 0x40
 800faee:	4082      	lsls	r2, r0
 800faf0:	4313      	orrs	r3, r2
 800faf2:	3401      	adds	r4, #1
 800faf4:	9304      	str	r3, [sp, #16]
 800faf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fafa:	4829      	ldr	r0, [pc, #164]	@ (800fba0 <_vfiprintf_r+0x220>)
 800fafc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fb00:	2206      	movs	r2, #6
 800fb02:	f7f0 fb7d 	bl	8000200 <memchr>
 800fb06:	2800      	cmp	r0, #0
 800fb08:	d03f      	beq.n	800fb8a <_vfiprintf_r+0x20a>
 800fb0a:	4b26      	ldr	r3, [pc, #152]	@ (800fba4 <_vfiprintf_r+0x224>)
 800fb0c:	bb1b      	cbnz	r3, 800fb56 <_vfiprintf_r+0x1d6>
 800fb0e:	9b03      	ldr	r3, [sp, #12]
 800fb10:	3307      	adds	r3, #7
 800fb12:	f023 0307 	bic.w	r3, r3, #7
 800fb16:	3308      	adds	r3, #8
 800fb18:	9303      	str	r3, [sp, #12]
 800fb1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb1c:	443b      	add	r3, r7
 800fb1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb20:	e76a      	b.n	800f9f8 <_vfiprintf_r+0x78>
 800fb22:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb26:	460c      	mov	r4, r1
 800fb28:	2001      	movs	r0, #1
 800fb2a:	e7a8      	b.n	800fa7e <_vfiprintf_r+0xfe>
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	3401      	adds	r4, #1
 800fb30:	9305      	str	r3, [sp, #20]
 800fb32:	4619      	mov	r1, r3
 800fb34:	f04f 0c0a 	mov.w	ip, #10
 800fb38:	4620      	mov	r0, r4
 800fb3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb3e:	3a30      	subs	r2, #48	@ 0x30
 800fb40:	2a09      	cmp	r2, #9
 800fb42:	d903      	bls.n	800fb4c <_vfiprintf_r+0x1cc>
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d0c6      	beq.n	800fad6 <_vfiprintf_r+0x156>
 800fb48:	9105      	str	r1, [sp, #20]
 800fb4a:	e7c4      	b.n	800fad6 <_vfiprintf_r+0x156>
 800fb4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb50:	4604      	mov	r4, r0
 800fb52:	2301      	movs	r3, #1
 800fb54:	e7f0      	b.n	800fb38 <_vfiprintf_r+0x1b8>
 800fb56:	ab03      	add	r3, sp, #12
 800fb58:	9300      	str	r3, [sp, #0]
 800fb5a:	462a      	mov	r2, r5
 800fb5c:	4b12      	ldr	r3, [pc, #72]	@ (800fba8 <_vfiprintf_r+0x228>)
 800fb5e:	a904      	add	r1, sp, #16
 800fb60:	4630      	mov	r0, r6
 800fb62:	f3af 8000 	nop.w
 800fb66:	4607      	mov	r7, r0
 800fb68:	1c78      	adds	r0, r7, #1
 800fb6a:	d1d6      	bne.n	800fb1a <_vfiprintf_r+0x19a>
 800fb6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fb6e:	07d9      	lsls	r1, r3, #31
 800fb70:	d405      	bmi.n	800fb7e <_vfiprintf_r+0x1fe>
 800fb72:	89ab      	ldrh	r3, [r5, #12]
 800fb74:	059a      	lsls	r2, r3, #22
 800fb76:	d402      	bmi.n	800fb7e <_vfiprintf_r+0x1fe>
 800fb78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fb7a:	f7ff fd2b 	bl	800f5d4 <__retarget_lock_release_recursive>
 800fb7e:	89ab      	ldrh	r3, [r5, #12]
 800fb80:	065b      	lsls	r3, r3, #25
 800fb82:	f53f af1f 	bmi.w	800f9c4 <_vfiprintf_r+0x44>
 800fb86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb88:	e71e      	b.n	800f9c8 <_vfiprintf_r+0x48>
 800fb8a:	ab03      	add	r3, sp, #12
 800fb8c:	9300      	str	r3, [sp, #0]
 800fb8e:	462a      	mov	r2, r5
 800fb90:	4b05      	ldr	r3, [pc, #20]	@ (800fba8 <_vfiprintf_r+0x228>)
 800fb92:	a904      	add	r1, sp, #16
 800fb94:	4630      	mov	r0, r6
 800fb96:	f000 f879 	bl	800fc8c <_printf_i>
 800fb9a:	e7e4      	b.n	800fb66 <_vfiprintf_r+0x1e6>
 800fb9c:	08012e95 	.word	0x08012e95
 800fba0:	08012e9f 	.word	0x08012e9f
 800fba4:	00000000 	.word	0x00000000
 800fba8:	0800f95b 	.word	0x0800f95b
 800fbac:	08012e9b 	.word	0x08012e9b

0800fbb0 <_printf_common>:
 800fbb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbb4:	4616      	mov	r6, r2
 800fbb6:	4698      	mov	r8, r3
 800fbb8:	688a      	ldr	r2, [r1, #8]
 800fbba:	690b      	ldr	r3, [r1, #16]
 800fbbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fbc0:	4293      	cmp	r3, r2
 800fbc2:	bfb8      	it	lt
 800fbc4:	4613      	movlt	r3, r2
 800fbc6:	6033      	str	r3, [r6, #0]
 800fbc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fbcc:	4607      	mov	r7, r0
 800fbce:	460c      	mov	r4, r1
 800fbd0:	b10a      	cbz	r2, 800fbd6 <_printf_common+0x26>
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	6033      	str	r3, [r6, #0]
 800fbd6:	6823      	ldr	r3, [r4, #0]
 800fbd8:	0699      	lsls	r1, r3, #26
 800fbda:	bf42      	ittt	mi
 800fbdc:	6833      	ldrmi	r3, [r6, #0]
 800fbde:	3302      	addmi	r3, #2
 800fbe0:	6033      	strmi	r3, [r6, #0]
 800fbe2:	6825      	ldr	r5, [r4, #0]
 800fbe4:	f015 0506 	ands.w	r5, r5, #6
 800fbe8:	d106      	bne.n	800fbf8 <_printf_common+0x48>
 800fbea:	f104 0a19 	add.w	sl, r4, #25
 800fbee:	68e3      	ldr	r3, [r4, #12]
 800fbf0:	6832      	ldr	r2, [r6, #0]
 800fbf2:	1a9b      	subs	r3, r3, r2
 800fbf4:	42ab      	cmp	r3, r5
 800fbf6:	dc26      	bgt.n	800fc46 <_printf_common+0x96>
 800fbf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fbfc:	6822      	ldr	r2, [r4, #0]
 800fbfe:	3b00      	subs	r3, #0
 800fc00:	bf18      	it	ne
 800fc02:	2301      	movne	r3, #1
 800fc04:	0692      	lsls	r2, r2, #26
 800fc06:	d42b      	bmi.n	800fc60 <_printf_common+0xb0>
 800fc08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fc0c:	4641      	mov	r1, r8
 800fc0e:	4638      	mov	r0, r7
 800fc10:	47c8      	blx	r9
 800fc12:	3001      	adds	r0, #1
 800fc14:	d01e      	beq.n	800fc54 <_printf_common+0xa4>
 800fc16:	6823      	ldr	r3, [r4, #0]
 800fc18:	6922      	ldr	r2, [r4, #16]
 800fc1a:	f003 0306 	and.w	r3, r3, #6
 800fc1e:	2b04      	cmp	r3, #4
 800fc20:	bf02      	ittt	eq
 800fc22:	68e5      	ldreq	r5, [r4, #12]
 800fc24:	6833      	ldreq	r3, [r6, #0]
 800fc26:	1aed      	subeq	r5, r5, r3
 800fc28:	68a3      	ldr	r3, [r4, #8]
 800fc2a:	bf0c      	ite	eq
 800fc2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fc30:	2500      	movne	r5, #0
 800fc32:	4293      	cmp	r3, r2
 800fc34:	bfc4      	itt	gt
 800fc36:	1a9b      	subgt	r3, r3, r2
 800fc38:	18ed      	addgt	r5, r5, r3
 800fc3a:	2600      	movs	r6, #0
 800fc3c:	341a      	adds	r4, #26
 800fc3e:	42b5      	cmp	r5, r6
 800fc40:	d11a      	bne.n	800fc78 <_printf_common+0xc8>
 800fc42:	2000      	movs	r0, #0
 800fc44:	e008      	b.n	800fc58 <_printf_common+0xa8>
 800fc46:	2301      	movs	r3, #1
 800fc48:	4652      	mov	r2, sl
 800fc4a:	4641      	mov	r1, r8
 800fc4c:	4638      	mov	r0, r7
 800fc4e:	47c8      	blx	r9
 800fc50:	3001      	adds	r0, #1
 800fc52:	d103      	bne.n	800fc5c <_printf_common+0xac>
 800fc54:	f04f 30ff 	mov.w	r0, #4294967295
 800fc58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc5c:	3501      	adds	r5, #1
 800fc5e:	e7c6      	b.n	800fbee <_printf_common+0x3e>
 800fc60:	18e1      	adds	r1, r4, r3
 800fc62:	1c5a      	adds	r2, r3, #1
 800fc64:	2030      	movs	r0, #48	@ 0x30
 800fc66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fc6a:	4422      	add	r2, r4
 800fc6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fc70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fc74:	3302      	adds	r3, #2
 800fc76:	e7c7      	b.n	800fc08 <_printf_common+0x58>
 800fc78:	2301      	movs	r3, #1
 800fc7a:	4622      	mov	r2, r4
 800fc7c:	4641      	mov	r1, r8
 800fc7e:	4638      	mov	r0, r7
 800fc80:	47c8      	blx	r9
 800fc82:	3001      	adds	r0, #1
 800fc84:	d0e6      	beq.n	800fc54 <_printf_common+0xa4>
 800fc86:	3601      	adds	r6, #1
 800fc88:	e7d9      	b.n	800fc3e <_printf_common+0x8e>
	...

0800fc8c <_printf_i>:
 800fc8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc90:	7e0f      	ldrb	r7, [r1, #24]
 800fc92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fc94:	2f78      	cmp	r7, #120	@ 0x78
 800fc96:	4691      	mov	r9, r2
 800fc98:	4680      	mov	r8, r0
 800fc9a:	460c      	mov	r4, r1
 800fc9c:	469a      	mov	sl, r3
 800fc9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fca2:	d807      	bhi.n	800fcb4 <_printf_i+0x28>
 800fca4:	2f62      	cmp	r7, #98	@ 0x62
 800fca6:	d80a      	bhi.n	800fcbe <_printf_i+0x32>
 800fca8:	2f00      	cmp	r7, #0
 800fcaa:	f000 80d2 	beq.w	800fe52 <_printf_i+0x1c6>
 800fcae:	2f58      	cmp	r7, #88	@ 0x58
 800fcb0:	f000 80b9 	beq.w	800fe26 <_printf_i+0x19a>
 800fcb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fcb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fcbc:	e03a      	b.n	800fd34 <_printf_i+0xa8>
 800fcbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fcc2:	2b15      	cmp	r3, #21
 800fcc4:	d8f6      	bhi.n	800fcb4 <_printf_i+0x28>
 800fcc6:	a101      	add	r1, pc, #4	@ (adr r1, 800fccc <_printf_i+0x40>)
 800fcc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fccc:	0800fd25 	.word	0x0800fd25
 800fcd0:	0800fd39 	.word	0x0800fd39
 800fcd4:	0800fcb5 	.word	0x0800fcb5
 800fcd8:	0800fcb5 	.word	0x0800fcb5
 800fcdc:	0800fcb5 	.word	0x0800fcb5
 800fce0:	0800fcb5 	.word	0x0800fcb5
 800fce4:	0800fd39 	.word	0x0800fd39
 800fce8:	0800fcb5 	.word	0x0800fcb5
 800fcec:	0800fcb5 	.word	0x0800fcb5
 800fcf0:	0800fcb5 	.word	0x0800fcb5
 800fcf4:	0800fcb5 	.word	0x0800fcb5
 800fcf8:	0800fe39 	.word	0x0800fe39
 800fcfc:	0800fd63 	.word	0x0800fd63
 800fd00:	0800fdf3 	.word	0x0800fdf3
 800fd04:	0800fcb5 	.word	0x0800fcb5
 800fd08:	0800fcb5 	.word	0x0800fcb5
 800fd0c:	0800fe5b 	.word	0x0800fe5b
 800fd10:	0800fcb5 	.word	0x0800fcb5
 800fd14:	0800fd63 	.word	0x0800fd63
 800fd18:	0800fcb5 	.word	0x0800fcb5
 800fd1c:	0800fcb5 	.word	0x0800fcb5
 800fd20:	0800fdfb 	.word	0x0800fdfb
 800fd24:	6833      	ldr	r3, [r6, #0]
 800fd26:	1d1a      	adds	r2, r3, #4
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	6032      	str	r2, [r6, #0]
 800fd2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fd30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fd34:	2301      	movs	r3, #1
 800fd36:	e09d      	b.n	800fe74 <_printf_i+0x1e8>
 800fd38:	6833      	ldr	r3, [r6, #0]
 800fd3a:	6820      	ldr	r0, [r4, #0]
 800fd3c:	1d19      	adds	r1, r3, #4
 800fd3e:	6031      	str	r1, [r6, #0]
 800fd40:	0606      	lsls	r6, r0, #24
 800fd42:	d501      	bpl.n	800fd48 <_printf_i+0xbc>
 800fd44:	681d      	ldr	r5, [r3, #0]
 800fd46:	e003      	b.n	800fd50 <_printf_i+0xc4>
 800fd48:	0645      	lsls	r5, r0, #25
 800fd4a:	d5fb      	bpl.n	800fd44 <_printf_i+0xb8>
 800fd4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fd50:	2d00      	cmp	r5, #0
 800fd52:	da03      	bge.n	800fd5c <_printf_i+0xd0>
 800fd54:	232d      	movs	r3, #45	@ 0x2d
 800fd56:	426d      	negs	r5, r5
 800fd58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd5c:	4859      	ldr	r0, [pc, #356]	@ (800fec4 <_printf_i+0x238>)
 800fd5e:	230a      	movs	r3, #10
 800fd60:	e011      	b.n	800fd86 <_printf_i+0xfa>
 800fd62:	6821      	ldr	r1, [r4, #0]
 800fd64:	6833      	ldr	r3, [r6, #0]
 800fd66:	0608      	lsls	r0, r1, #24
 800fd68:	f853 5b04 	ldr.w	r5, [r3], #4
 800fd6c:	d402      	bmi.n	800fd74 <_printf_i+0xe8>
 800fd6e:	0649      	lsls	r1, r1, #25
 800fd70:	bf48      	it	mi
 800fd72:	b2ad      	uxthmi	r5, r5
 800fd74:	2f6f      	cmp	r7, #111	@ 0x6f
 800fd76:	4853      	ldr	r0, [pc, #332]	@ (800fec4 <_printf_i+0x238>)
 800fd78:	6033      	str	r3, [r6, #0]
 800fd7a:	bf14      	ite	ne
 800fd7c:	230a      	movne	r3, #10
 800fd7e:	2308      	moveq	r3, #8
 800fd80:	2100      	movs	r1, #0
 800fd82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fd86:	6866      	ldr	r6, [r4, #4]
 800fd88:	60a6      	str	r6, [r4, #8]
 800fd8a:	2e00      	cmp	r6, #0
 800fd8c:	bfa2      	ittt	ge
 800fd8e:	6821      	ldrge	r1, [r4, #0]
 800fd90:	f021 0104 	bicge.w	r1, r1, #4
 800fd94:	6021      	strge	r1, [r4, #0]
 800fd96:	b90d      	cbnz	r5, 800fd9c <_printf_i+0x110>
 800fd98:	2e00      	cmp	r6, #0
 800fd9a:	d04b      	beq.n	800fe34 <_printf_i+0x1a8>
 800fd9c:	4616      	mov	r6, r2
 800fd9e:	fbb5 f1f3 	udiv	r1, r5, r3
 800fda2:	fb03 5711 	mls	r7, r3, r1, r5
 800fda6:	5dc7      	ldrb	r7, [r0, r7]
 800fda8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fdac:	462f      	mov	r7, r5
 800fdae:	42bb      	cmp	r3, r7
 800fdb0:	460d      	mov	r5, r1
 800fdb2:	d9f4      	bls.n	800fd9e <_printf_i+0x112>
 800fdb4:	2b08      	cmp	r3, #8
 800fdb6:	d10b      	bne.n	800fdd0 <_printf_i+0x144>
 800fdb8:	6823      	ldr	r3, [r4, #0]
 800fdba:	07df      	lsls	r7, r3, #31
 800fdbc:	d508      	bpl.n	800fdd0 <_printf_i+0x144>
 800fdbe:	6923      	ldr	r3, [r4, #16]
 800fdc0:	6861      	ldr	r1, [r4, #4]
 800fdc2:	4299      	cmp	r1, r3
 800fdc4:	bfde      	ittt	le
 800fdc6:	2330      	movle	r3, #48	@ 0x30
 800fdc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fdcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fdd0:	1b92      	subs	r2, r2, r6
 800fdd2:	6122      	str	r2, [r4, #16]
 800fdd4:	f8cd a000 	str.w	sl, [sp]
 800fdd8:	464b      	mov	r3, r9
 800fdda:	aa03      	add	r2, sp, #12
 800fddc:	4621      	mov	r1, r4
 800fdde:	4640      	mov	r0, r8
 800fde0:	f7ff fee6 	bl	800fbb0 <_printf_common>
 800fde4:	3001      	adds	r0, #1
 800fde6:	d14a      	bne.n	800fe7e <_printf_i+0x1f2>
 800fde8:	f04f 30ff 	mov.w	r0, #4294967295
 800fdec:	b004      	add	sp, #16
 800fdee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdf2:	6823      	ldr	r3, [r4, #0]
 800fdf4:	f043 0320 	orr.w	r3, r3, #32
 800fdf8:	6023      	str	r3, [r4, #0]
 800fdfa:	4833      	ldr	r0, [pc, #204]	@ (800fec8 <_printf_i+0x23c>)
 800fdfc:	2778      	movs	r7, #120	@ 0x78
 800fdfe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fe02:	6823      	ldr	r3, [r4, #0]
 800fe04:	6831      	ldr	r1, [r6, #0]
 800fe06:	061f      	lsls	r7, r3, #24
 800fe08:	f851 5b04 	ldr.w	r5, [r1], #4
 800fe0c:	d402      	bmi.n	800fe14 <_printf_i+0x188>
 800fe0e:	065f      	lsls	r7, r3, #25
 800fe10:	bf48      	it	mi
 800fe12:	b2ad      	uxthmi	r5, r5
 800fe14:	6031      	str	r1, [r6, #0]
 800fe16:	07d9      	lsls	r1, r3, #31
 800fe18:	bf44      	itt	mi
 800fe1a:	f043 0320 	orrmi.w	r3, r3, #32
 800fe1e:	6023      	strmi	r3, [r4, #0]
 800fe20:	b11d      	cbz	r5, 800fe2a <_printf_i+0x19e>
 800fe22:	2310      	movs	r3, #16
 800fe24:	e7ac      	b.n	800fd80 <_printf_i+0xf4>
 800fe26:	4827      	ldr	r0, [pc, #156]	@ (800fec4 <_printf_i+0x238>)
 800fe28:	e7e9      	b.n	800fdfe <_printf_i+0x172>
 800fe2a:	6823      	ldr	r3, [r4, #0]
 800fe2c:	f023 0320 	bic.w	r3, r3, #32
 800fe30:	6023      	str	r3, [r4, #0]
 800fe32:	e7f6      	b.n	800fe22 <_printf_i+0x196>
 800fe34:	4616      	mov	r6, r2
 800fe36:	e7bd      	b.n	800fdb4 <_printf_i+0x128>
 800fe38:	6833      	ldr	r3, [r6, #0]
 800fe3a:	6825      	ldr	r5, [r4, #0]
 800fe3c:	6961      	ldr	r1, [r4, #20]
 800fe3e:	1d18      	adds	r0, r3, #4
 800fe40:	6030      	str	r0, [r6, #0]
 800fe42:	062e      	lsls	r6, r5, #24
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	d501      	bpl.n	800fe4c <_printf_i+0x1c0>
 800fe48:	6019      	str	r1, [r3, #0]
 800fe4a:	e002      	b.n	800fe52 <_printf_i+0x1c6>
 800fe4c:	0668      	lsls	r0, r5, #25
 800fe4e:	d5fb      	bpl.n	800fe48 <_printf_i+0x1bc>
 800fe50:	8019      	strh	r1, [r3, #0]
 800fe52:	2300      	movs	r3, #0
 800fe54:	6123      	str	r3, [r4, #16]
 800fe56:	4616      	mov	r6, r2
 800fe58:	e7bc      	b.n	800fdd4 <_printf_i+0x148>
 800fe5a:	6833      	ldr	r3, [r6, #0]
 800fe5c:	1d1a      	adds	r2, r3, #4
 800fe5e:	6032      	str	r2, [r6, #0]
 800fe60:	681e      	ldr	r6, [r3, #0]
 800fe62:	6862      	ldr	r2, [r4, #4]
 800fe64:	2100      	movs	r1, #0
 800fe66:	4630      	mov	r0, r6
 800fe68:	f7f0 f9ca 	bl	8000200 <memchr>
 800fe6c:	b108      	cbz	r0, 800fe72 <_printf_i+0x1e6>
 800fe6e:	1b80      	subs	r0, r0, r6
 800fe70:	6060      	str	r0, [r4, #4]
 800fe72:	6863      	ldr	r3, [r4, #4]
 800fe74:	6123      	str	r3, [r4, #16]
 800fe76:	2300      	movs	r3, #0
 800fe78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fe7c:	e7aa      	b.n	800fdd4 <_printf_i+0x148>
 800fe7e:	6923      	ldr	r3, [r4, #16]
 800fe80:	4632      	mov	r2, r6
 800fe82:	4649      	mov	r1, r9
 800fe84:	4640      	mov	r0, r8
 800fe86:	47d0      	blx	sl
 800fe88:	3001      	adds	r0, #1
 800fe8a:	d0ad      	beq.n	800fde8 <_printf_i+0x15c>
 800fe8c:	6823      	ldr	r3, [r4, #0]
 800fe8e:	079b      	lsls	r3, r3, #30
 800fe90:	d413      	bmi.n	800feba <_printf_i+0x22e>
 800fe92:	68e0      	ldr	r0, [r4, #12]
 800fe94:	9b03      	ldr	r3, [sp, #12]
 800fe96:	4298      	cmp	r0, r3
 800fe98:	bfb8      	it	lt
 800fe9a:	4618      	movlt	r0, r3
 800fe9c:	e7a6      	b.n	800fdec <_printf_i+0x160>
 800fe9e:	2301      	movs	r3, #1
 800fea0:	4632      	mov	r2, r6
 800fea2:	4649      	mov	r1, r9
 800fea4:	4640      	mov	r0, r8
 800fea6:	47d0      	blx	sl
 800fea8:	3001      	adds	r0, #1
 800feaa:	d09d      	beq.n	800fde8 <_printf_i+0x15c>
 800feac:	3501      	adds	r5, #1
 800feae:	68e3      	ldr	r3, [r4, #12]
 800feb0:	9903      	ldr	r1, [sp, #12]
 800feb2:	1a5b      	subs	r3, r3, r1
 800feb4:	42ab      	cmp	r3, r5
 800feb6:	dcf2      	bgt.n	800fe9e <_printf_i+0x212>
 800feb8:	e7eb      	b.n	800fe92 <_printf_i+0x206>
 800feba:	2500      	movs	r5, #0
 800febc:	f104 0619 	add.w	r6, r4, #25
 800fec0:	e7f5      	b.n	800feae <_printf_i+0x222>
 800fec2:	bf00      	nop
 800fec4:	08012ea6 	.word	0x08012ea6
 800fec8:	08012eb7 	.word	0x08012eb7

0800fecc <__sflush_r>:
 800fecc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fed4:	0716      	lsls	r6, r2, #28
 800fed6:	4605      	mov	r5, r0
 800fed8:	460c      	mov	r4, r1
 800feda:	d454      	bmi.n	800ff86 <__sflush_r+0xba>
 800fedc:	684b      	ldr	r3, [r1, #4]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	dc02      	bgt.n	800fee8 <__sflush_r+0x1c>
 800fee2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	dd48      	ble.n	800ff7a <__sflush_r+0xae>
 800fee8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800feea:	2e00      	cmp	r6, #0
 800feec:	d045      	beq.n	800ff7a <__sflush_r+0xae>
 800feee:	2300      	movs	r3, #0
 800fef0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fef4:	682f      	ldr	r7, [r5, #0]
 800fef6:	6a21      	ldr	r1, [r4, #32]
 800fef8:	602b      	str	r3, [r5, #0]
 800fefa:	d030      	beq.n	800ff5e <__sflush_r+0x92>
 800fefc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fefe:	89a3      	ldrh	r3, [r4, #12]
 800ff00:	0759      	lsls	r1, r3, #29
 800ff02:	d505      	bpl.n	800ff10 <__sflush_r+0x44>
 800ff04:	6863      	ldr	r3, [r4, #4]
 800ff06:	1ad2      	subs	r2, r2, r3
 800ff08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ff0a:	b10b      	cbz	r3, 800ff10 <__sflush_r+0x44>
 800ff0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ff0e:	1ad2      	subs	r2, r2, r3
 800ff10:	2300      	movs	r3, #0
 800ff12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ff14:	6a21      	ldr	r1, [r4, #32]
 800ff16:	4628      	mov	r0, r5
 800ff18:	47b0      	blx	r6
 800ff1a:	1c43      	adds	r3, r0, #1
 800ff1c:	89a3      	ldrh	r3, [r4, #12]
 800ff1e:	d106      	bne.n	800ff2e <__sflush_r+0x62>
 800ff20:	6829      	ldr	r1, [r5, #0]
 800ff22:	291d      	cmp	r1, #29
 800ff24:	d82b      	bhi.n	800ff7e <__sflush_r+0xb2>
 800ff26:	4a2a      	ldr	r2, [pc, #168]	@ (800ffd0 <__sflush_r+0x104>)
 800ff28:	410a      	asrs	r2, r1
 800ff2a:	07d6      	lsls	r6, r2, #31
 800ff2c:	d427      	bmi.n	800ff7e <__sflush_r+0xb2>
 800ff2e:	2200      	movs	r2, #0
 800ff30:	6062      	str	r2, [r4, #4]
 800ff32:	04d9      	lsls	r1, r3, #19
 800ff34:	6922      	ldr	r2, [r4, #16]
 800ff36:	6022      	str	r2, [r4, #0]
 800ff38:	d504      	bpl.n	800ff44 <__sflush_r+0x78>
 800ff3a:	1c42      	adds	r2, r0, #1
 800ff3c:	d101      	bne.n	800ff42 <__sflush_r+0x76>
 800ff3e:	682b      	ldr	r3, [r5, #0]
 800ff40:	b903      	cbnz	r3, 800ff44 <__sflush_r+0x78>
 800ff42:	6560      	str	r0, [r4, #84]	@ 0x54
 800ff44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ff46:	602f      	str	r7, [r5, #0]
 800ff48:	b1b9      	cbz	r1, 800ff7a <__sflush_r+0xae>
 800ff4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ff4e:	4299      	cmp	r1, r3
 800ff50:	d002      	beq.n	800ff58 <__sflush_r+0x8c>
 800ff52:	4628      	mov	r0, r5
 800ff54:	f7ff fb48 	bl	800f5e8 <_free_r>
 800ff58:	2300      	movs	r3, #0
 800ff5a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff5c:	e00d      	b.n	800ff7a <__sflush_r+0xae>
 800ff5e:	2301      	movs	r3, #1
 800ff60:	4628      	mov	r0, r5
 800ff62:	47b0      	blx	r6
 800ff64:	4602      	mov	r2, r0
 800ff66:	1c50      	adds	r0, r2, #1
 800ff68:	d1c9      	bne.n	800fefe <__sflush_r+0x32>
 800ff6a:	682b      	ldr	r3, [r5, #0]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d0c6      	beq.n	800fefe <__sflush_r+0x32>
 800ff70:	2b1d      	cmp	r3, #29
 800ff72:	d001      	beq.n	800ff78 <__sflush_r+0xac>
 800ff74:	2b16      	cmp	r3, #22
 800ff76:	d11e      	bne.n	800ffb6 <__sflush_r+0xea>
 800ff78:	602f      	str	r7, [r5, #0]
 800ff7a:	2000      	movs	r0, #0
 800ff7c:	e022      	b.n	800ffc4 <__sflush_r+0xf8>
 800ff7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff82:	b21b      	sxth	r3, r3
 800ff84:	e01b      	b.n	800ffbe <__sflush_r+0xf2>
 800ff86:	690f      	ldr	r7, [r1, #16]
 800ff88:	2f00      	cmp	r7, #0
 800ff8a:	d0f6      	beq.n	800ff7a <__sflush_r+0xae>
 800ff8c:	0793      	lsls	r3, r2, #30
 800ff8e:	680e      	ldr	r6, [r1, #0]
 800ff90:	bf08      	it	eq
 800ff92:	694b      	ldreq	r3, [r1, #20]
 800ff94:	600f      	str	r7, [r1, #0]
 800ff96:	bf18      	it	ne
 800ff98:	2300      	movne	r3, #0
 800ff9a:	eba6 0807 	sub.w	r8, r6, r7
 800ff9e:	608b      	str	r3, [r1, #8]
 800ffa0:	f1b8 0f00 	cmp.w	r8, #0
 800ffa4:	dde9      	ble.n	800ff7a <__sflush_r+0xae>
 800ffa6:	6a21      	ldr	r1, [r4, #32]
 800ffa8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ffaa:	4643      	mov	r3, r8
 800ffac:	463a      	mov	r2, r7
 800ffae:	4628      	mov	r0, r5
 800ffb0:	47b0      	blx	r6
 800ffb2:	2800      	cmp	r0, #0
 800ffb4:	dc08      	bgt.n	800ffc8 <__sflush_r+0xfc>
 800ffb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ffbe:	81a3      	strh	r3, [r4, #12]
 800ffc0:	f04f 30ff 	mov.w	r0, #4294967295
 800ffc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffc8:	4407      	add	r7, r0
 800ffca:	eba8 0800 	sub.w	r8, r8, r0
 800ffce:	e7e7      	b.n	800ffa0 <__sflush_r+0xd4>
 800ffd0:	dfbffffe 	.word	0xdfbffffe

0800ffd4 <_fflush_r>:
 800ffd4:	b538      	push	{r3, r4, r5, lr}
 800ffd6:	690b      	ldr	r3, [r1, #16]
 800ffd8:	4605      	mov	r5, r0
 800ffda:	460c      	mov	r4, r1
 800ffdc:	b913      	cbnz	r3, 800ffe4 <_fflush_r+0x10>
 800ffde:	2500      	movs	r5, #0
 800ffe0:	4628      	mov	r0, r5
 800ffe2:	bd38      	pop	{r3, r4, r5, pc}
 800ffe4:	b118      	cbz	r0, 800ffee <_fflush_r+0x1a>
 800ffe6:	6a03      	ldr	r3, [r0, #32]
 800ffe8:	b90b      	cbnz	r3, 800ffee <_fflush_r+0x1a>
 800ffea:	f7ff f8a3 	bl	800f134 <__sinit>
 800ffee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d0f3      	beq.n	800ffde <_fflush_r+0xa>
 800fff6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fff8:	07d0      	lsls	r0, r2, #31
 800fffa:	d404      	bmi.n	8010006 <_fflush_r+0x32>
 800fffc:	0599      	lsls	r1, r3, #22
 800fffe:	d402      	bmi.n	8010006 <_fflush_r+0x32>
 8010000:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010002:	f7ff fae6 	bl	800f5d2 <__retarget_lock_acquire_recursive>
 8010006:	4628      	mov	r0, r5
 8010008:	4621      	mov	r1, r4
 801000a:	f7ff ff5f 	bl	800fecc <__sflush_r>
 801000e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010010:	07da      	lsls	r2, r3, #31
 8010012:	4605      	mov	r5, r0
 8010014:	d4e4      	bmi.n	800ffe0 <_fflush_r+0xc>
 8010016:	89a3      	ldrh	r3, [r4, #12]
 8010018:	059b      	lsls	r3, r3, #22
 801001a:	d4e1      	bmi.n	800ffe0 <_fflush_r+0xc>
 801001c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801001e:	f7ff fad9 	bl	800f5d4 <__retarget_lock_release_recursive>
 8010022:	e7dd      	b.n	800ffe0 <_fflush_r+0xc>

08010024 <__swhatbuf_r>:
 8010024:	b570      	push	{r4, r5, r6, lr}
 8010026:	460c      	mov	r4, r1
 8010028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801002c:	2900      	cmp	r1, #0
 801002e:	b096      	sub	sp, #88	@ 0x58
 8010030:	4615      	mov	r5, r2
 8010032:	461e      	mov	r6, r3
 8010034:	da0d      	bge.n	8010052 <__swhatbuf_r+0x2e>
 8010036:	89a3      	ldrh	r3, [r4, #12]
 8010038:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801003c:	f04f 0100 	mov.w	r1, #0
 8010040:	bf14      	ite	ne
 8010042:	2340      	movne	r3, #64	@ 0x40
 8010044:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010048:	2000      	movs	r0, #0
 801004a:	6031      	str	r1, [r6, #0]
 801004c:	602b      	str	r3, [r5, #0]
 801004e:	b016      	add	sp, #88	@ 0x58
 8010050:	bd70      	pop	{r4, r5, r6, pc}
 8010052:	466a      	mov	r2, sp
 8010054:	f000 f896 	bl	8010184 <_fstat_r>
 8010058:	2800      	cmp	r0, #0
 801005a:	dbec      	blt.n	8010036 <__swhatbuf_r+0x12>
 801005c:	9901      	ldr	r1, [sp, #4]
 801005e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010062:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010066:	4259      	negs	r1, r3
 8010068:	4159      	adcs	r1, r3
 801006a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801006e:	e7eb      	b.n	8010048 <__swhatbuf_r+0x24>

08010070 <__smakebuf_r>:
 8010070:	898b      	ldrh	r3, [r1, #12]
 8010072:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010074:	079d      	lsls	r5, r3, #30
 8010076:	4606      	mov	r6, r0
 8010078:	460c      	mov	r4, r1
 801007a:	d507      	bpl.n	801008c <__smakebuf_r+0x1c>
 801007c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010080:	6023      	str	r3, [r4, #0]
 8010082:	6123      	str	r3, [r4, #16]
 8010084:	2301      	movs	r3, #1
 8010086:	6163      	str	r3, [r4, #20]
 8010088:	b003      	add	sp, #12
 801008a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801008c:	ab01      	add	r3, sp, #4
 801008e:	466a      	mov	r2, sp
 8010090:	f7ff ffc8 	bl	8010024 <__swhatbuf_r>
 8010094:	9f00      	ldr	r7, [sp, #0]
 8010096:	4605      	mov	r5, r0
 8010098:	4639      	mov	r1, r7
 801009a:	4630      	mov	r0, r6
 801009c:	f7fe feae 	bl	800edfc <_malloc_r>
 80100a0:	b948      	cbnz	r0, 80100b6 <__smakebuf_r+0x46>
 80100a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100a6:	059a      	lsls	r2, r3, #22
 80100a8:	d4ee      	bmi.n	8010088 <__smakebuf_r+0x18>
 80100aa:	f023 0303 	bic.w	r3, r3, #3
 80100ae:	f043 0302 	orr.w	r3, r3, #2
 80100b2:	81a3      	strh	r3, [r4, #12]
 80100b4:	e7e2      	b.n	801007c <__smakebuf_r+0xc>
 80100b6:	89a3      	ldrh	r3, [r4, #12]
 80100b8:	6020      	str	r0, [r4, #0]
 80100ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80100be:	81a3      	strh	r3, [r4, #12]
 80100c0:	9b01      	ldr	r3, [sp, #4]
 80100c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80100c6:	b15b      	cbz	r3, 80100e0 <__smakebuf_r+0x70>
 80100c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80100cc:	4630      	mov	r0, r6
 80100ce:	f000 f86b 	bl	80101a8 <_isatty_r>
 80100d2:	b128      	cbz	r0, 80100e0 <__smakebuf_r+0x70>
 80100d4:	89a3      	ldrh	r3, [r4, #12]
 80100d6:	f023 0303 	bic.w	r3, r3, #3
 80100da:	f043 0301 	orr.w	r3, r3, #1
 80100de:	81a3      	strh	r3, [r4, #12]
 80100e0:	89a3      	ldrh	r3, [r4, #12]
 80100e2:	431d      	orrs	r5, r3
 80100e4:	81a5      	strh	r5, [r4, #12]
 80100e6:	e7cf      	b.n	8010088 <__smakebuf_r+0x18>

080100e8 <_putc_r>:
 80100e8:	b570      	push	{r4, r5, r6, lr}
 80100ea:	460d      	mov	r5, r1
 80100ec:	4614      	mov	r4, r2
 80100ee:	4606      	mov	r6, r0
 80100f0:	b118      	cbz	r0, 80100fa <_putc_r+0x12>
 80100f2:	6a03      	ldr	r3, [r0, #32]
 80100f4:	b90b      	cbnz	r3, 80100fa <_putc_r+0x12>
 80100f6:	f7ff f81d 	bl	800f134 <__sinit>
 80100fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80100fc:	07d8      	lsls	r0, r3, #31
 80100fe:	d405      	bmi.n	801010c <_putc_r+0x24>
 8010100:	89a3      	ldrh	r3, [r4, #12]
 8010102:	0599      	lsls	r1, r3, #22
 8010104:	d402      	bmi.n	801010c <_putc_r+0x24>
 8010106:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010108:	f7ff fa63 	bl	800f5d2 <__retarget_lock_acquire_recursive>
 801010c:	68a3      	ldr	r3, [r4, #8]
 801010e:	3b01      	subs	r3, #1
 8010110:	2b00      	cmp	r3, #0
 8010112:	60a3      	str	r3, [r4, #8]
 8010114:	da05      	bge.n	8010122 <_putc_r+0x3a>
 8010116:	69a2      	ldr	r2, [r4, #24]
 8010118:	4293      	cmp	r3, r2
 801011a:	db12      	blt.n	8010142 <_putc_r+0x5a>
 801011c:	b2eb      	uxtb	r3, r5
 801011e:	2b0a      	cmp	r3, #10
 8010120:	d00f      	beq.n	8010142 <_putc_r+0x5a>
 8010122:	6823      	ldr	r3, [r4, #0]
 8010124:	1c5a      	adds	r2, r3, #1
 8010126:	6022      	str	r2, [r4, #0]
 8010128:	701d      	strb	r5, [r3, #0]
 801012a:	b2ed      	uxtb	r5, r5
 801012c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801012e:	07da      	lsls	r2, r3, #31
 8010130:	d405      	bmi.n	801013e <_putc_r+0x56>
 8010132:	89a3      	ldrh	r3, [r4, #12]
 8010134:	059b      	lsls	r3, r3, #22
 8010136:	d402      	bmi.n	801013e <_putc_r+0x56>
 8010138:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801013a:	f7ff fa4b 	bl	800f5d4 <__retarget_lock_release_recursive>
 801013e:	4628      	mov	r0, r5
 8010140:	bd70      	pop	{r4, r5, r6, pc}
 8010142:	4629      	mov	r1, r5
 8010144:	4622      	mov	r2, r4
 8010146:	4630      	mov	r0, r6
 8010148:	f7ff f926 	bl	800f398 <__swbuf_r>
 801014c:	4605      	mov	r5, r0
 801014e:	e7ed      	b.n	801012c <_putc_r+0x44>

08010150 <memmove>:
 8010150:	4288      	cmp	r0, r1
 8010152:	b510      	push	{r4, lr}
 8010154:	eb01 0402 	add.w	r4, r1, r2
 8010158:	d902      	bls.n	8010160 <memmove+0x10>
 801015a:	4284      	cmp	r4, r0
 801015c:	4623      	mov	r3, r4
 801015e:	d807      	bhi.n	8010170 <memmove+0x20>
 8010160:	1e43      	subs	r3, r0, #1
 8010162:	42a1      	cmp	r1, r4
 8010164:	d008      	beq.n	8010178 <memmove+0x28>
 8010166:	f811 2b01 	ldrb.w	r2, [r1], #1
 801016a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801016e:	e7f8      	b.n	8010162 <memmove+0x12>
 8010170:	4402      	add	r2, r0
 8010172:	4601      	mov	r1, r0
 8010174:	428a      	cmp	r2, r1
 8010176:	d100      	bne.n	801017a <memmove+0x2a>
 8010178:	bd10      	pop	{r4, pc}
 801017a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801017e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010182:	e7f7      	b.n	8010174 <memmove+0x24>

08010184 <_fstat_r>:
 8010184:	b538      	push	{r3, r4, r5, lr}
 8010186:	4d07      	ldr	r5, [pc, #28]	@ (80101a4 <_fstat_r+0x20>)
 8010188:	2300      	movs	r3, #0
 801018a:	4604      	mov	r4, r0
 801018c:	4608      	mov	r0, r1
 801018e:	4611      	mov	r1, r2
 8010190:	602b      	str	r3, [r5, #0]
 8010192:	f7f4 f98e 	bl	80044b2 <_fstat>
 8010196:	1c43      	adds	r3, r0, #1
 8010198:	d102      	bne.n	80101a0 <_fstat_r+0x1c>
 801019a:	682b      	ldr	r3, [r5, #0]
 801019c:	b103      	cbz	r3, 80101a0 <_fstat_r+0x1c>
 801019e:	6023      	str	r3, [r4, #0]
 80101a0:	bd38      	pop	{r3, r4, r5, pc}
 80101a2:	bf00      	nop
 80101a4:	20012c2c 	.word	0x20012c2c

080101a8 <_isatty_r>:
 80101a8:	b538      	push	{r3, r4, r5, lr}
 80101aa:	4d06      	ldr	r5, [pc, #24]	@ (80101c4 <_isatty_r+0x1c>)
 80101ac:	2300      	movs	r3, #0
 80101ae:	4604      	mov	r4, r0
 80101b0:	4608      	mov	r0, r1
 80101b2:	602b      	str	r3, [r5, #0]
 80101b4:	f7f4 f98d 	bl	80044d2 <_isatty>
 80101b8:	1c43      	adds	r3, r0, #1
 80101ba:	d102      	bne.n	80101c2 <_isatty_r+0x1a>
 80101bc:	682b      	ldr	r3, [r5, #0]
 80101be:	b103      	cbz	r3, 80101c2 <_isatty_r+0x1a>
 80101c0:	6023      	str	r3, [r4, #0]
 80101c2:	bd38      	pop	{r3, r4, r5, pc}
 80101c4:	20012c2c 	.word	0x20012c2c

080101c8 <memcpy>:
 80101c8:	440a      	add	r2, r1
 80101ca:	4291      	cmp	r1, r2
 80101cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80101d0:	d100      	bne.n	80101d4 <memcpy+0xc>
 80101d2:	4770      	bx	lr
 80101d4:	b510      	push	{r4, lr}
 80101d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101de:	4291      	cmp	r1, r2
 80101e0:	d1f9      	bne.n	80101d6 <memcpy+0xe>
 80101e2:	bd10      	pop	{r4, pc}

080101e4 <_realloc_r>:
 80101e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101e8:	4680      	mov	r8, r0
 80101ea:	4615      	mov	r5, r2
 80101ec:	460c      	mov	r4, r1
 80101ee:	b921      	cbnz	r1, 80101fa <_realloc_r+0x16>
 80101f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80101f4:	4611      	mov	r1, r2
 80101f6:	f7fe be01 	b.w	800edfc <_malloc_r>
 80101fa:	b92a      	cbnz	r2, 8010208 <_realloc_r+0x24>
 80101fc:	f7ff f9f4 	bl	800f5e8 <_free_r>
 8010200:	2400      	movs	r4, #0
 8010202:	4620      	mov	r0, r4
 8010204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010208:	f000 f81a 	bl	8010240 <_malloc_usable_size_r>
 801020c:	4285      	cmp	r5, r0
 801020e:	4606      	mov	r6, r0
 8010210:	d802      	bhi.n	8010218 <_realloc_r+0x34>
 8010212:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010216:	d8f4      	bhi.n	8010202 <_realloc_r+0x1e>
 8010218:	4629      	mov	r1, r5
 801021a:	4640      	mov	r0, r8
 801021c:	f7fe fdee 	bl	800edfc <_malloc_r>
 8010220:	4607      	mov	r7, r0
 8010222:	2800      	cmp	r0, #0
 8010224:	d0ec      	beq.n	8010200 <_realloc_r+0x1c>
 8010226:	42b5      	cmp	r5, r6
 8010228:	462a      	mov	r2, r5
 801022a:	4621      	mov	r1, r4
 801022c:	bf28      	it	cs
 801022e:	4632      	movcs	r2, r6
 8010230:	f7ff ffca 	bl	80101c8 <memcpy>
 8010234:	4621      	mov	r1, r4
 8010236:	4640      	mov	r0, r8
 8010238:	f7ff f9d6 	bl	800f5e8 <_free_r>
 801023c:	463c      	mov	r4, r7
 801023e:	e7e0      	b.n	8010202 <_realloc_r+0x1e>

08010240 <_malloc_usable_size_r>:
 8010240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010244:	1f18      	subs	r0, r3, #4
 8010246:	2b00      	cmp	r3, #0
 8010248:	bfbc      	itt	lt
 801024a:	580b      	ldrlt	r3, [r1, r0]
 801024c:	18c0      	addlt	r0, r0, r3
 801024e:	4770      	bx	lr

08010250 <_init>:
 8010250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010252:	bf00      	nop
 8010254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010256:	bc08      	pop	{r3}
 8010258:	469e      	mov	lr, r3
 801025a:	4770      	bx	lr

0801025c <_fini>:
 801025c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801025e:	bf00      	nop
 8010260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010262:	bc08      	pop	{r3}
 8010264:	469e      	mov	lr, r3
 8010266:	4770      	bx	lr
