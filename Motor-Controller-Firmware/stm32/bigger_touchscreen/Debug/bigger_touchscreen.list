
bigger_touchscreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ffb0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c28  08010160  08010160  00011160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012d88  08012d88  000142f0  2**0
                  CONTENTS
  4 .ARM          00000008  08012d88  08012d88  00013d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012d90  08012d90  000142f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012d90  08012d90  00013d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012d94  08012d94  00013d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f0  20000000  08012d98  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000142f0  2**0
                  CONTENTS
 10 .bss          00011f60  200002f0  200002f0  000142f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012250  20012250  000142f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000142f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022375  00000000  00000000  00014320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055f7  00000000  00000000  00036695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c60  00000000  00000000  0003bc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015b7  00000000  00000000  0003d8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002997e  00000000  00000000  0003eea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024ab2  00000000  00000000  00068825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebde1  00000000  00000000  0008d2d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001790b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000080e4  00000000  00000000  001790fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  001811e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002f0 	.word	0x200002f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010148 	.word	0x08010148

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002f4 	.word	0x200002f4
 80001ec:	08010148 	.word	0x08010148

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <XPT2046_TouchSelect>:
}

#endif /* SOFTWARE_SPI */

static void XPT2046_TouchSelect()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2110      	movs	r1, #16
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <XPT2046_TouchSelect+0x14>)
 800059a:	f004 fd01 	bl	8004fa0 <HAL_GPIO_WritePin>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000

080005a8 <XPT2046_TouchUnselect>:

static void XPT2046_TouchUnselect()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2110      	movs	r1, #16
 80005b0:	4802      	ldr	r0, [pc, #8]	@ (80005bc <XPT2046_TouchUnselect+0x14>)
 80005b2:	f004 fcf5 	bl	8004fa0 <HAL_GPIO_WritePin>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000

080005c0 <XPT2046_TouchPressed>:

bool XPT2046_TouchPressed(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(XPT2046_IRQ_GPIO_Port, XPT2046_IRQ_Pin) == GPIO_PIN_RESET;
 80005c4:	2120      	movs	r1, #32
 80005c6:	4805      	ldr	r0, [pc, #20]	@ (80005dc <XPT2046_TouchPressed+0x1c>)
 80005c8:	f004 fcd2 	bl	8004f70 <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	bf0c      	ite	eq
 80005d2:	2301      	moveq	r3, #1
 80005d4:	2300      	movne	r3, #0
 80005d6:	b2db      	uxtb	r3, r3
}
 80005d8:	4618      	mov	r0, r3
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40020400 	.word	0x40020400

080005e0 <XPT2046_TouchGetCoordinates>:

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

#endif /* SOFTWARE_SPI */

    XPT2046_TouchSelect();
 80005ea:	f7ff ffd1 	bl	8000590 <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t avg_y = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	77fb      	strb	r3, [r7, #31]

    for(uint8_t i = 0; i < NUMBER_OF_SAMPLES; i++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	77bb      	strb	r3, [r7, #30]
 80005fe:	e03f      	b.n	8000680 <XPT2046_TouchGetCoordinates+0xa0>
    {
        if(!XPT2046_TouchPressed())
 8000600:	f7ff ffde 	bl	80005c0 <XPT2046_TouchPressed>
 8000604:	4603      	mov	r3, r0
 8000606:	f083 0301 	eor.w	r3, r3, #1
 800060a:	b2db      	uxtb	r3, r3
 800060c:	2b00      	cmp	r3, #0
 800060e:	d13b      	bne.n	8000688 <XPT2046_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 8000610:	7ffb      	ldrb	r3, [r7, #31]
 8000612:	3301      	adds	r3, #1
 8000614:	77fb      	strb	r3, [r7, #31]
	   x_raw[0] = spi_read_byte();
	   x_raw[1] = spi_read_byte();

#else

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	2201      	movs	r2, #1
 800061c:	4944      	ldr	r1, [pc, #272]	@ (8000730 <XPT2046_TouchGetCoordinates+0x150>)
 800061e:	4845      	ldr	r0, [pc, #276]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000620:	f007 fb43 	bl	8007caa <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8000624:	f107 0210 	add.w	r2, r7, #16
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2302      	movs	r3, #2
 8000630:	4941      	ldr	r1, [pc, #260]	@ (8000738 <XPT2046_TouchGetCoordinates+0x158>)
 8000632:	4840      	ldr	r0, [pc, #256]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000634:	f007 fc7d 	bl	8007f32 <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	2201      	movs	r2, #1
 800063e:	493f      	ldr	r1, [pc, #252]	@ (800073c <XPT2046_TouchGetCoordinates+0x15c>)
 8000640:	483c      	ldr	r0, [pc, #240]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000642:	f007 fb32 	bl	8007caa <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 8000646:	f107 020c 	add.w	r2, r7, #12
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2302      	movs	r3, #2
 8000652:	4939      	ldr	r1, [pc, #228]	@ (8000738 <XPT2046_TouchGetCoordinates+0x158>)
 8000654:	4837      	ldr	r0, [pc, #220]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000656:	f007 fc6c 	bl	8007f32 <HAL_SPI_TransmitReceive>

#endif /* SOFTWARE_SPI */

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 800065a:	7b3b      	ldrb	r3, [r7, #12]
 800065c:	021b      	lsls	r3, r3, #8
 800065e:	7b7a      	ldrb	r2, [r7, #13]
 8000660:	4313      	orrs	r3, r2
 8000662:	461a      	mov	r2, r3
 8000664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000666:	4413      	add	r3, r2
 8000668:	627b      	str	r3, [r7, #36]	@ 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 800066a:	7c3b      	ldrb	r3, [r7, #16]
 800066c:	021b      	lsls	r3, r3, #8
 800066e:	7c7a      	ldrb	r2, [r7, #17]
 8000670:	4313      	orrs	r3, r2
 8000672:	461a      	mov	r2, r3
 8000674:	6a3b      	ldr	r3, [r7, #32]
 8000676:	4413      	add	r3, r2
 8000678:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < NUMBER_OF_SAMPLES; i++)
 800067a:	7fbb      	ldrb	r3, [r7, #30]
 800067c:	3301      	adds	r3, #1
 800067e:	77bb      	strb	r3, [r7, #30]
 8000680:	7fbb      	ldrb	r3, [r7, #30]
 8000682:	2b07      	cmp	r3, #7
 8000684:	d9bc      	bls.n	8000600 <XPT2046_TouchGetCoordinates+0x20>
 8000686:	e000      	b.n	800068a <XPT2046_TouchGetCoordinates+0xaa>
            break;
 8000688:	bf00      	nop
    }

    XPT2046_TouchUnselect();
 800068a:	f7ff ff8d 	bl	80005a8 <XPT2046_TouchUnselect>

    if(nsamples < NUMBER_OF_SAMPLES)
 800068e:	7ffb      	ldrb	r3, [r7, #31]
 8000690:	2b07      	cmp	r3, #7
 8000692:	d801      	bhi.n	8000698 <XPT2046_TouchGetCoordinates+0xb8>
        return false;
 8000694:	2300      	movs	r3, #0
 8000696:	e046      	b.n	8000726 <XPT2046_TouchGetCoordinates+0x146>

    uint32_t raw_x = (avg_x / NUMBER_OF_SAMPLES);
 8000698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800069a:	08db      	lsrs	r3, r3, #3
 800069c:	61bb      	str	r3, [r7, #24]
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	f640 5247 	movw	r2, #3399	@ 0xd47
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d802      	bhi.n	80006ae <XPT2046_TouchGetCoordinates+0xce>
 80006a8:	f640 5348 	movw	r3, #3400	@ 0xd48
 80006ac:	61bb      	str	r3, [r7, #24]
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	f247 1248 	movw	r2, #29000	@ 0x7148
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d902      	bls.n	80006be <XPT2046_TouchGetCoordinates+0xde>
 80006b8:	f247 1348 	movw	r3, #29000	@ 0x7148
 80006bc:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / NUMBER_OF_SAMPLES);
 80006be:	6a3b      	ldr	r3, [r7, #32]
 80006c0:	08db      	lsrs	r3, r3, #3
 80006c2:	617b      	str	r3, [r7, #20]
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	f640 42e3 	movw	r2, #3299	@ 0xce3
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d802      	bhi.n	80006d4 <XPT2046_TouchGetCoordinates+0xf4>
 80006ce:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80006d2:	617b      	str	r3, [r7, #20]
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	f247 5230 	movw	r2, #30000	@ 0x7530
 80006da:	4293      	cmp	r3, r2
 80006dc:	d902      	bls.n	80006e4 <XPT2046_TouchGetCoordinates+0x104>
 80006de:	f247 5330 	movw	r3, #30000	@ 0x7530
 80006e2:	617b      	str	r3, [r7, #20]
    // Uncomment this line to calibrate touchscreen:
//    printf("raw_x = %6d, raw_y = %6d\r\n", (int) raw_x, (int) raw_y);
//    printf("\x1b[1F");

#if (ORIENTATION == 0)
	*x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 80006e4:	69ba      	ldr	r2, [r7, #24]
 80006e6:	4613      	mov	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	019b      	lsls	r3, r3, #6
 80006ee:	f5a3 1384 	sub.w	r3, r3, #1081344	@ 0x108000
 80006f2:	f5a3 53d0 	sub.w	r3, r3, #6656	@ 0x1a00
 80006f6:	4a12      	ldr	r2, [pc, #72]	@ (8000740 <XPT2046_TouchGetCoordinates+0x160>)
 80006f8:	fba2 2303 	umull	r2, r3, r2, r3
 80006fc:	0b5b      	lsrs	r3, r3, #13
 80006fe:	b29a      	uxth	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	801a      	strh	r2, [r3, #0]
	*y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 8000704:	697a      	ldr	r2, [r7, #20]
 8000706:	4613      	mov	r3, r2
 8000708:	011b      	lsls	r3, r3, #4
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	011b      	lsls	r3, r3, #4
 800070e:	f5a3 2341 	sub.w	r3, r3, #790528	@ 0xc1000
 8000712:	f5a3 63b8 	sub.w	r3, r3, #1472	@ 0x5c0
 8000716:	4a0b      	ldr	r2, [pc, #44]	@ (8000744 <XPT2046_TouchGetCoordinates+0x164>)
 8000718:	fba2 2303 	umull	r2, r3, r2, r3
 800071c:	0b5b      	lsrs	r3, r3, #13
 800071e:	b29a      	uxth	r2, r3
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	801a      	strh	r2, [r3, #0]
#elif (ORIENTATION == 3)
    *x = XPT2046_SCALE_X - (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#endif

    return true;
 8000724:	2301      	movs	r3, #1
}
 8000726:	4618      	mov	r0, r3
 8000728:	3728      	adds	r7, #40	@ 0x28
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	080109f4 	.word	0x080109f4
 8000734:	20000414 	.word	0x20000414
 8000738:	080109f8 	.word	0x080109f8
 800073c:	080109fc 	.word	0x080109fc
 8000740:	51eb851f 	.word	0x51eb851f
 8000744:	4e8b8659 	.word	0x4e8b8659

08000748 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 800074e:	2300      	movs	r3, #0
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	2301      	movs	r3, #1
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2300      	movs	r3, #0
 8000758:	2200      	movs	r2, #0
 800075a:	2101      	movs	r1, #1
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fceb 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	461a      	mov	r2, r3
 8000766:	4bae      	ldr	r3, [pc, #696]	@ (8000a20 <lcdInit+0x2d8>)
 8000768:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 800076a:	2300      	movs	r3, #0
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	2301      	movs	r3, #1
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	2300      	movs	r3, #0
 8000774:	2201      	movs	r2, #1
 8000776:	2100      	movs	r1, #0
 8000778:	2000      	movs	r0, #0
 800077a:	f000 fcdd 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	4ba8      	ldr	r3, [pc, #672]	@ (8000a24 <lcdInit+0x2dc>)
 8000784:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8000786:	2300      	movs	r3, #0
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	2301      	movs	r3, #1
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2300      	movs	r3, #0
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	2001      	movs	r0, #1
 8000796:	f000 fccf 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	461a      	mov	r2, r3
 800079e:	4ba2      	ldr	r3, [pc, #648]	@ (8000a28 <lcdInit+0x2e0>)
 80007a0:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80007a2:	2300      	movs	r3, #0
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	2301      	movs	r3, #1
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2300      	movs	r3, #0
 80007ac:	2201      	movs	r2, #1
 80007ae:	2101      	movs	r1, #1
 80007b0:	2001      	movs	r0, #1
 80007b2:	f000 fcc1 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b9c      	ldr	r3, [pc, #624]	@ (8000a2c <lcdInit+0x2e4>)
 80007bc:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 80007be:	f000 fc91 	bl	80010e4 <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 80007c2:	2028      	movs	r0, #40	@ 0x28
 80007c4:	f000 fc98 	bl	80010f8 <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 80007c8:	20cf      	movs	r0, #207	@ 0xcf
 80007ca:	f000 fc95 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 fca2 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x83);
 80007d4:	2083      	movs	r0, #131	@ 0x83
 80007d6:	f000 fc9f 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x30);
 80007da:	2030      	movs	r0, #48	@ 0x30
 80007dc:	f000 fc9c 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xED);
 80007e0:	20ed      	movs	r0, #237	@ 0xed
 80007e2:	f000 fc89 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x64);
 80007e6:	2064      	movs	r0, #100	@ 0x64
 80007e8:	f000 fc96 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x03);
 80007ec:	2003      	movs	r0, #3
 80007ee:	f000 fc93 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x12);
 80007f2:	2012      	movs	r0, #18
 80007f4:	f000 fc90 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x81);
 80007f8:	2081      	movs	r0, #129	@ 0x81
 80007fa:	f000 fc8d 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xE8);
 80007fe:	20e8      	movs	r0, #232	@ 0xe8
 8000800:	f000 fc7a 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x85);
 8000804:	2085      	movs	r0, #133	@ 0x85
 8000806:	f000 fc87 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x01);
 800080a:	2001      	movs	r0, #1
 800080c:	f000 fc84 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x79);
 8000810:	2079      	movs	r0, #121	@ 0x79
 8000812:	f000 fc81 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xCB);
 8000816:	20cb      	movs	r0, #203	@ 0xcb
 8000818:	f000 fc6e 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x39);
 800081c:	2039      	movs	r0, #57	@ 0x39
 800081e:	f000 fc7b 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x2C);
 8000822:	202c      	movs	r0, #44	@ 0x2c
 8000824:	f000 fc78 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 8000828:	2000      	movs	r0, #0
 800082a:	f000 fc75 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x34);
 800082e:	2034      	movs	r0, #52	@ 0x34
 8000830:	f000 fc72 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x02);
 8000834:	2002      	movs	r0, #2
 8000836:	f000 fc6f 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xF7);
 800083a:	20f7      	movs	r0, #247	@ 0xf7
 800083c:	f000 fc5c 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x20);
 8000840:	2020      	movs	r0, #32
 8000842:	f000 fc69 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xEA);
 8000846:	20ea      	movs	r0, #234	@ 0xea
 8000848:	f000 fc56 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 800084c:	2000      	movs	r0, #0
 800084e:	f000 fc63 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 8000852:	2000      	movs	r0, #0
 8000854:	f000 fc60 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8000858:	20c0      	movs	r0, #192	@ 0xc0
 800085a:	f000 fc4d 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x26);
 800085e:	2026      	movs	r0, #38	@ 0x26
 8000860:	f000 fc5a 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 8000864:	20c1      	movs	r0, #193	@ 0xc1
 8000866:	f000 fc47 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x11);
 800086a:	2011      	movs	r0, #17
 800086c:	f000 fc54 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 8000870:	20c5      	movs	r0, #197	@ 0xc5
 8000872:	f000 fc41 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x35);
 8000876:	2035      	movs	r0, #53	@ 0x35
 8000878:	f000 fc4e 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3E);
 800087c:	203e      	movs	r0, #62	@ 0x3e
 800087e:	f000 fc4b 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 8000882:	20c7      	movs	r0, #199	@ 0xc7
 8000884:	f000 fc38 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0xBE);
 8000888:	20be      	movs	r0, #190	@ 0xbe
 800088a:	f000 fc45 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 800088e:	2036      	movs	r0, #54	@ 0x36
 8000890:	f000 fc32 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 8000894:	4b62      	ldr	r3, [pc, #392]	@ (8000a20 <lcdInit+0x2d8>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f000 fc3d 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 800089e:	203a      	movs	r0, #58	@ 0x3a
 80008a0:	f000 fc2a 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x55);
 80008a4:	2055      	movs	r0, #85	@ 0x55
 80008a6:	f000 fc37 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 80008aa:	20b1      	movs	r0, #177	@ 0xb1
 80008ac:	f000 fc24 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80008b0:	2000      	movs	r0, #0
 80008b2:	f000 fc31 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x1B);
 80008b6:	201b      	movs	r0, #27
 80008b8:	f000 fc2e 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xF2);
 80008bc:	20f2      	movs	r0, #242	@ 0xf2
 80008be:	f000 fc1b 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x08);
 80008c2:	2008      	movs	r0, #8
 80008c4:	f000 fc28 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 80008c8:	2026      	movs	r0, #38	@ 0x26
 80008ca:	f000 fc15 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x01);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f000 fc22 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 80008d4:	20e0      	movs	r0, #224	@ 0xe0
 80008d6:	f000 fc0f 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x1F);
 80008da:	201f      	movs	r0, #31
 80008dc:	f000 fc1c 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x1A);
 80008e0:	201a      	movs	r0, #26
 80008e2:	f000 fc19 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x18);
 80008e6:	2018      	movs	r0, #24
 80008e8:	f000 fc16 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0A);
 80008ec:	200a      	movs	r0, #10
 80008ee:	f000 fc13 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0F);
 80008f2:	200f      	movs	r0, #15
 80008f4:	f000 fc10 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x06);
 80008f8:	2006      	movs	r0, #6
 80008fa:	f000 fc0d 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x45);
 80008fe:	2045      	movs	r0, #69	@ 0x45
 8000900:	f000 fc0a 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x87);
 8000904:	2087      	movs	r0, #135	@ 0x87
 8000906:	f000 fc07 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x32);
 800090a:	2032      	movs	r0, #50	@ 0x32
 800090c:	f000 fc04 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0A);
 8000910:	200a      	movs	r0, #10
 8000912:	f000 fc01 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x07);
 8000916:	2007      	movs	r0, #7
 8000918:	f000 fbfe 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x02);
 800091c:	2002      	movs	r0, #2
 800091e:	f000 fbfb 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x07);
 8000922:	2007      	movs	r0, #7
 8000924:	f000 fbf8 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x05);
 8000928:	2005      	movs	r0, #5
 800092a:	f000 fbf5 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 800092e:	2000      	movs	r0, #0
 8000930:	f000 fbf2 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8000934:	20e1      	movs	r0, #225	@ 0xe1
 8000936:	f000 fbdf 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 800093a:	2000      	movs	r0, #0
 800093c:	f000 fbec 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x25);
 8000940:	2025      	movs	r0, #37	@ 0x25
 8000942:	f000 fbe9 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x27);
 8000946:	2027      	movs	r0, #39	@ 0x27
 8000948:	f000 fbe6 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x05);
 800094c:	2005      	movs	r0, #5
 800094e:	f000 fbe3 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x10);
 8000952:	2010      	movs	r0, #16
 8000954:	f000 fbe0 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x09);
 8000958:	2009      	movs	r0, #9
 800095a:	f000 fbdd 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3A);
 800095e:	203a      	movs	r0, #58	@ 0x3a
 8000960:	f000 fbda 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x78);
 8000964:	2078      	movs	r0, #120	@ 0x78
 8000966:	f000 fbd7 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x4D);
 800096a:	204d      	movs	r0, #77	@ 0x4d
 800096c:	f000 fbd4 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x05);
 8000970:	2005      	movs	r0, #5
 8000972:	f000 fbd1 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x18);
 8000976:	2018      	movs	r0, #24
 8000978:	f000 fbce 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0D);
 800097c:	200d      	movs	r0, #13
 800097e:	f000 fbcb 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x38);
 8000982:	2038      	movs	r0, #56	@ 0x38
 8000984:	f000 fbc8 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3A);
 8000988:	203a      	movs	r0, #58	@ 0x3a
 800098a:	f000 fbc5 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x1F);
 800098e:	201f      	movs	r0, #31
 8000990:	f000 fbc2 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 8000994:	202a      	movs	r0, #42	@ 0x2a
 8000996:	f000 fbaf 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 800099a:	2000      	movs	r0, #0
 800099c:	f000 fbbc 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f000 fbb9 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f000 fbb6 	bl	8001118 <lcdWriteData>
  lcdWriteData(0xEF);
 80009ac:	20ef      	movs	r0, #239	@ 0xef
 80009ae:	f000 fbb3 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80009b2:	202b      	movs	r0, #43	@ 0x2b
 80009b4:	f000 fba0 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80009b8:	2000      	movs	r0, #0
 80009ba:	f000 fbad 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009be:	2000      	movs	r0, #0
 80009c0:	f000 fbaa 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x01);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f000 fba7 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3F);
 80009ca:	203f      	movs	r0, #63	@ 0x3f
 80009cc:	f000 fba4 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 80009d0:	20b7      	movs	r0, #183	@ 0xb7
 80009d2:	f000 fb91 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x07);
 80009d6:	2007      	movs	r0, #7
 80009d8:	f000 fb9e 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 80009dc:	20b6      	movs	r0, #182	@ 0xb6
 80009de:	f000 fb8b 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x0A);
 80009e2:	200a      	movs	r0, #10
 80009e4:	f000 fb98 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x82);
 80009e8:	2082      	movs	r0, #130	@ 0x82
 80009ea:	f000 fb95 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x27);
 80009ee:	2027      	movs	r0, #39	@ 0x27
 80009f0:	f000 fb92 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009f4:	2000      	movs	r0, #0
 80009f6:	f000 fb8f 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 80009fa:	2011      	movs	r0, #17
 80009fc:	f000 fb7c 	bl	80010f8 <lcdWriteCommand>
  HAL_Delay(100);
 8000a00:	2064      	movs	r0, #100	@ 0x64
 8000a02:	f003 fd2d 	bl	8004460 <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 8000a06:	2029      	movs	r0, #41	@ 0x29
 8000a08:	f000 fb76 	bl	80010f8 <lcdWriteCommand>
  HAL_Delay(100);
 8000a0c:	2064      	movs	r0, #100	@ 0x64
 8000a0e:	f003 fd27 	bl	8004460 <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8000a12:	202c      	movs	r0, #44	@ 0x2c
 8000a14:	f000 fb70 	bl	80010f8 <lcdWriteCommand>
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000310 	.word	0x20000310
 8000a24:	20000311 	.word	0x20000311
 8000a28:	20000312 	.word	0x20000312
 8000a2c:	20000313 	.word	0x20000313

08000a30 <lcdFillRGB>:
		}
	}
}

void lcdFillRGB(uint16_t color)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a44:	885b      	ldrh	r3, [r3, #2]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f000 fafd 	bl	800104c <lcdSetWindow>
  int dimensions = lcdProperties.width * lcdProperties.height;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a5a:	885b      	ldrh	r3, [r3, #2]
 8000a5c:	fb02 f303 	mul.w	r3, r2, r3
 8000a60:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 8000a62:	e003      	b.n	8000a6c <lcdFillRGB+0x3c>
  {
    lcdWriteData(color);
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fb56 	bl	8001118 <lcdWriteData>
  while(dimensions--)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	1e5a      	subs	r2, r3, #1
 8000a70:	60fa      	str	r2, [r7, #12]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1f6      	bne.n	8000a64 <lcdFillRGB+0x34>
  }
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000018 	.word	0x20000018

08000a84 <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80fb      	strh	r3, [r7, #6]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	80bb      	strh	r3, [r7, #4]
 8000a92:	4613      	mov	r3, r2
 8000a94:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8000a96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <lcdDrawPixel+0x44>)
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	88fa      	ldrh	r2, [r7, #6]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d20f      	bcs.n	8000ac0 <lcdDrawPixel+0x3c>
 8000aa0:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <lcdDrawPixel+0x44>)
 8000aa2:	885b      	ldrh	r3, [r3, #2]
 8000aa4:	88ba      	ldrh	r2, [r7, #4]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d20a      	bcs.n	8000ac0 <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 8000aaa:	88bb      	ldrh	r3, [r7, #4]
 8000aac:	88fa      	ldrh	r2, [r7, #6]
 8000aae:	88b9      	ldrh	r1, [r7, #4]
 8000ab0:	88f8      	ldrh	r0, [r7, #6]
 8000ab2:	f000 facb 	bl	800104c <lcdSetWindow>
    lcdWriteData(color);
 8000ab6:	887b      	ldrh	r3, [r7, #2]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 fb2d 	bl	8001118 <lcdWriteData>
 8000abe:	e000      	b.n	8000ac2 <lcdDrawPixel+0x3e>
        return;
 8000ac0:	bf00      	nop
}
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000018 	.word	0x20000018

08000acc <lcdDrawHLine>:

void lcdDrawHLine(uint16_t x0, uint16_t x1, uint16_t y, uint16_t color)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4608      	mov	r0, r1
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4623      	mov	r3, r4
 8000adc:	80fb      	strh	r3, [r7, #6]
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80bb      	strh	r3, [r7, #4]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	807b      	strh	r3, [r7, #2]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	803b      	strh	r3, [r7, #0]
  // Allows for slightly better performance than setting individual pixels

	if (x1 < x0)
 8000aea:	88ba      	ldrh	r2, [r7, #4]
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d205      	bcs.n	8000afe <lcdDrawHLine+0x32>
	{
		// Switch x1 and x0
		swap(x0, x1);
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	817b      	strh	r3, [r7, #10]
 8000af6:	88bb      	ldrh	r3, [r7, #4]
 8000af8:	80fb      	strh	r3, [r7, #6]
 8000afa:	897b      	ldrh	r3, [r7, #10]
 8000afc:	80bb      	strh	r3, [r7, #4]
	}

	// Check limits
	if (x1 >= lcdProperties.width)
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	88ba      	ldrh	r2, [r7, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d303      	bcc.n	8000b10 <lcdDrawHLine+0x44>
	{
		x1 = lcdProperties.width - 1;
 8000b08:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	80bb      	strh	r3, [r7, #4]
	}

	if (x0 >= lcdProperties.width)
 8000b10:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	88fa      	ldrh	r2, [r7, #6]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d303      	bcc.n	8000b22 <lcdDrawHLine+0x56>
	{
		x0 = lcdProperties.width - 1;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	80fb      	strh	r3, [r7, #6]
	}

	lcdSetWindow(x0, y, x1, y);
 8000b22:	887b      	ldrh	r3, [r7, #2]
 8000b24:	88ba      	ldrh	r2, [r7, #4]
 8000b26:	8879      	ldrh	r1, [r7, #2]
 8000b28:	88f8      	ldrh	r0, [r7, #6]
 8000b2a:	f000 fa8f 	bl	800104c <lcdSetWindow>

	for (int line = x0; line <= x1; line++)
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	e006      	b.n	8000b42 <lcdDrawHLine+0x76>
	{
		lcdWriteData(color);
 8000b34:	883b      	ldrh	r3, [r7, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 faee 	bl	8001118 <lcdWriteData>
	for (int line = x0; line <= x1; line++)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	88bb      	ldrh	r3, [r7, #4]
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	ddf4      	ble.n	8000b34 <lcdDrawHLine+0x68>
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd90      	pop	{r4, r7, pc}
 8000b54:	20000018 	.word	0x20000018

08000b58 <lcdDrawVLine>:

void lcdDrawVLine(uint16_t x, uint16_t y0, uint16_t y1, uint16_t color)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4604      	mov	r4, r0
 8000b60:	4608      	mov	r0, r1
 8000b62:	4611      	mov	r1, r2
 8000b64:	461a      	mov	r2, r3
 8000b66:	4623      	mov	r3, r4
 8000b68:	80fb      	strh	r3, [r7, #6]
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80bb      	strh	r3, [r7, #4]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	807b      	strh	r3, [r7, #2]
 8000b72:	4613      	mov	r3, r2
 8000b74:	803b      	strh	r3, [r7, #0]
  if (y1 < y0)
 8000b76:	887a      	ldrh	r2, [r7, #2]
 8000b78:	88bb      	ldrh	r3, [r7, #4]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d205      	bcs.n	8000b8a <lcdDrawVLine+0x32>
  {
	  swap(y0, y1);
 8000b7e:	88bb      	ldrh	r3, [r7, #4]
 8000b80:	817b      	strh	r3, [r7, #10]
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	80bb      	strh	r3, [r7, #4]
 8000b86:	897b      	ldrh	r3, [r7, #10]
 8000b88:	807b      	strh	r3, [r7, #2]
  }

  if (x >= lcdProperties.width)
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	88fa      	ldrh	r2, [r7, #6]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d303      	bcc.n	8000b9c <lcdDrawVLine+0x44>
  {
    x = lcdProperties.width - 1;
 8000b94:	4b17      	ldr	r3, [pc, #92]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	80fb      	strh	r3, [r7, #6]
  }

  if (y0 >= lcdProperties.height)
 8000b9c:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000b9e:	885b      	ldrh	r3, [r3, #2]
 8000ba0:	88ba      	ldrh	r2, [r7, #4]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d303      	bcc.n	8000bae <lcdDrawVLine+0x56>
  {
    y0 = lcdProperties.height - 1;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000ba8:	885b      	ldrh	r3, [r3, #2]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	80bb      	strh	r3, [r7, #4]
  }

  if (y1 >= lcdProperties.height)
 8000bae:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000bb0:	885b      	ldrh	r3, [r3, #2]
 8000bb2:	887a      	ldrh	r2, [r7, #2]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d303      	bcc.n	8000bc0 <lcdDrawVLine+0x68>
  {
    y1 = lcdProperties.height - 1;
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000bba:	885b      	ldrh	r3, [r3, #2]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	807b      	strh	r3, [r7, #2]
  }

  lcdSetWindow(x, y0, x, y1);
 8000bc0:	887b      	ldrh	r3, [r7, #2]
 8000bc2:	88fa      	ldrh	r2, [r7, #6]
 8000bc4:	88b9      	ldrh	r1, [r7, #4]
 8000bc6:	88f8      	ldrh	r0, [r7, #6]
 8000bc8:	f000 fa40 	bl	800104c <lcdSetWindow>

  for(int line = y0; line <= y1; line++)
 8000bcc:	88bb      	ldrh	r3, [r7, #4]
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	e006      	b.n	8000be0 <lcdDrawVLine+0x88>
  {
	  lcdWriteData(color);
 8000bd2:	883b      	ldrh	r3, [r7, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fa9f 	bl	8001118 <lcdWriteData>
  for(int line = y0; line <= y1; line++)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	887b      	ldrh	r3, [r7, #2]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	ddf4      	ble.n	8000bd2 <lcdDrawVLine+0x7a>
  }
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd90      	pop	{r4, r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000018 	.word	0x20000018

08000bf8 <lcdDrawRect>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4608      	mov	r0, r1
 8000c02:	4611      	mov	r1, r2
 8000c04:	461a      	mov	r2, r3
 8000c06:	4623      	mov	r3, r4
 8000c08:	80fb      	strh	r3, [r7, #6]
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	80bb      	strh	r3, [r7, #4]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	807b      	strh	r3, [r7, #2]
 8000c12:	4613      	mov	r3, r2
 8000c14:	803b      	strh	r3, [r7, #0]
	lcdDrawHLine(x, x + w - 1, y, color);
 8000c16:	88f8      	ldrh	r0, [r7, #6]
 8000c18:	88fa      	ldrh	r2, [r7, #6]
 8000c1a:	887b      	ldrh	r3, [r7, #2]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	3b01      	subs	r3, #1
 8000c22:	b299      	uxth	r1, r3
 8000c24:	88ba      	ldrh	r2, [r7, #4]
 8000c26:	8b3b      	ldrh	r3, [r7, #24]
 8000c28:	f7ff ff50 	bl	8000acc <lcdDrawHLine>
	lcdDrawHLine(x, x + w - 1, y + h - 1, color);
 8000c2c:	88f8      	ldrh	r0, [r7, #6]
 8000c2e:	88fa      	ldrh	r2, [r7, #6]
 8000c30:	887b      	ldrh	r3, [r7, #2]
 8000c32:	4413      	add	r3, r2
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	3b01      	subs	r3, #1
 8000c38:	b299      	uxth	r1, r3
 8000c3a:	88ba      	ldrh	r2, [r7, #4]
 8000c3c:	883b      	ldrh	r3, [r7, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	3b01      	subs	r3, #1
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	8b3b      	ldrh	r3, [r7, #24]
 8000c48:	f7ff ff40 	bl	8000acc <lcdDrawHLine>
	lcdDrawVLine(x, y, y + h - 1, color);
 8000c4c:	88f8      	ldrh	r0, [r7, #6]
 8000c4e:	88b9      	ldrh	r1, [r7, #4]
 8000c50:	88ba      	ldrh	r2, [r7, #4]
 8000c52:	883b      	ldrh	r3, [r7, #0]
 8000c54:	4413      	add	r3, r2
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	8b3b      	ldrh	r3, [r7, #24]
 8000c5e:	f7ff ff7b 	bl	8000b58 <lcdDrawVLine>
	lcdDrawVLine(x + w - 1, y, y + h - 1, color);
 8000c62:	88fa      	ldrh	r2, [r7, #6]
 8000c64:	887b      	ldrh	r3, [r7, #2]
 8000c66:	4413      	add	r3, r2
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	b298      	uxth	r0, r3
 8000c6e:	88b9      	ldrh	r1, [r7, #4]
 8000c70:	88ba      	ldrh	r2, [r7, #4]
 8000c72:	883b      	ldrh	r3, [r7, #0]
 8000c74:	4413      	add	r3, r2
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	8b3b      	ldrh	r3, [r7, #24]
 8000c7e:	f7ff ff6b 	bl	8000b58 <lcdDrawVLine>
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd90      	pop	{r4, r7, pc}
	...

08000c8c <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4604      	mov	r4, r0
 8000c94:	4608      	mov	r0, r1
 8000c96:	4611      	mov	r1, r2
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	80fb      	strh	r3, [r7, #6]
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80bb      	strh	r3, [r7, #4]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	70fb      	strb	r3, [r7, #3]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cae:	4a4a      	ldr	r2, [pc, #296]	@ (8000dd8 <lcdDrawChar+0x14c>)
 8000cb0:	8812      	ldrh	r2, [r2, #0]
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	f280 808c 	bge.w	8000dd0 <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 8000cb8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cbc:	4a46      	ldr	r2, [pc, #280]	@ (8000dd8 <lcdDrawChar+0x14c>)
 8000cbe:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	f280 8085 	bge.w	8000dd0 <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cca:	4a44      	ldr	r2, [pc, #272]	@ (8000ddc <lcdDrawChar+0x150>)
 8000ccc:	6892      	ldr	r2, [r2, #8]
 8000cce:	8892      	ldrh	r2, [r2, #4]
 8000cd0:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db7c      	blt.n	8000dd0 <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8000cd6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cda:	4a40      	ldr	r2, [pc, #256]	@ (8000ddc <lcdDrawChar+0x150>)
 8000cdc:	6892      	ldr	r2, [r2, #8]
 8000cde:	88d2      	ldrh	r2, [r2, #6]
 8000ce0:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db74      	blt.n	8000dd0 <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8000ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8000ddc <lcdDrawChar+0x150>)
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	88db      	ldrh	r3, [r3, #6]
 8000cec:	08db      	lsrs	r3, r3, #3
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73bb      	strb	r3, [r7, #14]
 8000cfa:	e061      	b.n	8000dc0 <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	733b      	strb	r3, [r7, #12]
 8000d00:	e055      	b.n	8000dae <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8000d02:	4b36      	ldr	r3, [pc, #216]	@ (8000ddc <lcdDrawChar+0x150>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	78fa      	ldrb	r2, [r7, #3]
 8000d0a:	3a20      	subs	r2, #32
 8000d0c:	4933      	ldr	r1, [pc, #204]	@ (8000ddc <lcdDrawChar+0x150>)
 8000d0e:	6889      	ldr	r1, [r1, #8]
 8000d10:	88c9      	ldrh	r1, [r1, #6]
 8000d12:	fb01 f202 	mul.w	r2, r1, r2
 8000d16:	7ab9      	ldrb	r1, [r7, #10]
 8000d18:	fb02 f101 	mul.w	r1, r2, r1
 8000d1c:	7bba      	ldrb	r2, [r7, #14]
 8000d1e:	7ab8      	ldrb	r0, [r7, #10]
 8000d20:	fb00 f202 	mul.w	r2, r0, r2
 8000d24:	4411      	add	r1, r2
 8000d26:	7b3a      	ldrb	r2, [r7, #12]
 8000d28:	440a      	add	r2, r1
 8000d2a:	4413      	add	r3, r2
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	72fb      	strb	r3, [r7, #11]
 8000d34:	e032      	b.n	8000d9c <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 8000d36:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	da12      	bge.n	8000d64 <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 8000d3e:	7afb      	ldrb	r3, [r7, #11]
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	4413      	add	r3, r2
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	4413      	add	r3, r2
 8000d4e:	b298      	uxth	r0, r3
 8000d50:	7bbb      	ldrb	r3, [r7, #14]
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	88bb      	ldrh	r3, [r7, #4]
 8000d56:	4413      	add	r3, r2
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	883a      	ldrh	r2, [r7, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f7ff fe91 	bl	8000a84 <lcdDrawPixel>
 8000d62:	e015      	b.n	8000d90 <lcdDrawChar+0x104>
				}
				else if (bg != color)
 8000d64:	8c3a      	ldrh	r2, [r7, #32]
 8000d66:	883b      	ldrh	r3, [r7, #0]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d011      	beq.n	8000d90 <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 8000d6c:	7afb      	ldrb	r3, [r7, #11]
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	4413      	add	r3, r2
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	4413      	add	r3, r2
 8000d7c:	b298      	uxth	r0, r3
 8000d7e:	7bbb      	ldrb	r3, [r7, #14]
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	88bb      	ldrh	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	8c3a      	ldrh	r2, [r7, #32]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f7ff fe7a 	bl	8000a84 <lcdDrawPixel>
				}
				line <<= 1;
 8000d90:	7b7b      	ldrb	r3, [r7, #13]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 8000d96:	7afb      	ldrb	r3, [r7, #11]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	72fb      	strb	r3, [r7, #11]
 8000d9c:	7afb      	ldrb	r3, [r7, #11]
 8000d9e:	2b07      	cmp	r3, #7
 8000da0:	d9c9      	bls.n	8000d36 <lcdDrawChar+0xaa>
			}

			xP += 8;
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	3308      	adds	r3, #8
 8000da6:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8000da8:	7b3b      	ldrb	r3, [r7, #12]
 8000daa:	3301      	adds	r3, #1
 8000dac:	733b      	strb	r3, [r7, #12]
 8000dae:	7b3a      	ldrb	r2, [r7, #12]
 8000db0:	7abb      	ldrb	r3, [r7, #10]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d3a5      	bcc.n	8000d02 <lcdDrawChar+0x76>
		}

		xP = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000dba:	7bbb      	ldrb	r3, [r7, #14]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	73bb      	strb	r3, [r7, #14]
 8000dc0:	7bbb      	ldrb	r3, [r7, #14]
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <lcdDrawChar+0x150>)
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	88db      	ldrh	r3, [r3, #6]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d396      	bcc.n	8000cfc <lcdDrawChar+0x70>
 8000dce:	e000      	b.n	8000dd2 <lcdDrawChar+0x146>
		return;
 8000dd0:	bf00      	nop
	}
}
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd90      	pop	{r4, r7, pc}
 8000dd8:	20000018 	.word	0x20000018
 8000ddc:	20000020 	.word	0x20000020

08000de0 <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8000de0:	b40f      	push	{r0, r1, r2, r3}
 8000de2:	b590      	push	{r4, r7, lr}
 8000de4:	b085      	sub	sp, #20
 8000de6:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	69b9      	ldr	r1, [r7, #24]
 8000df2:	483d      	ldr	r0, [pc, #244]	@ (8000ee8 <lcdPrintf+0x108>)
 8000df4:	f00e fa42 	bl	800f27c <vsiprintf>
	va_end(lst);

	p = buf;
 8000df8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee8 <lcdPrintf+0x108>)
 8000dfa:	607b      	str	r3, [r7, #4]
	while (*p)
 8000dfc:	e067      	b.n	8000ece <lcdPrintf+0xee>
	{
		if (*p == '\n')
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b0a      	cmp	r3, #10
 8000e04:	d10c      	bne.n	8000e20 <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 8000e06:	4b39      	ldr	r3, [pc, #228]	@ (8000eec <lcdPrintf+0x10c>)
 8000e08:	885a      	ldrh	r2, [r3, #2]
 8000e0a:	4b39      	ldr	r3, [pc, #228]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	88db      	ldrh	r3, [r3, #6]
 8000e10:	4413      	add	r3, r2
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	4b35      	ldr	r3, [pc, #212]	@ (8000eec <lcdPrintf+0x10c>)
 8000e16:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 8000e18:	4b34      	ldr	r3, [pc, #208]	@ (8000eec <lcdPrintf+0x10c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	801a      	strh	r2, [r3, #0]
 8000e1e:	e04a      	b.n	8000eb6 <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b0d      	cmp	r3, #13
 8000e26:	d046      	beq.n	8000eb6 <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b09      	cmp	r3, #9
 8000e2e:	d10b      	bne.n	8000e48 <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 8000e30:	4b2e      	ldr	r3, [pc, #184]	@ (8000eec <lcdPrintf+0x10c>)
 8000e32:	881a      	ldrh	r2, [r3, #0]
 8000e34:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	889b      	ldrh	r3, [r3, #4]
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	4413      	add	r3, r2
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	4b2a      	ldr	r3, [pc, #168]	@ (8000eec <lcdPrintf+0x10c>)
 8000e44:	801a      	strh	r2, [r3, #0]
 8000e46:	e036      	b.n	8000eb6 <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8000e48:	4b28      	ldr	r3, [pc, #160]	@ (8000eec <lcdPrintf+0x10c>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	b218      	sxth	r0, r3
 8000e4e:	4b27      	ldr	r3, [pc, #156]	@ (8000eec <lcdPrintf+0x10c>)
 8000e50:	885b      	ldrh	r3, [r3, #2]
 8000e52:	b219      	sxth	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	781a      	ldrb	r2, [r3, #0]
 8000e58:	4b25      	ldr	r3, [pc, #148]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	b29c      	uxth	r4, r3
 8000e5e:	4b24      	ldr	r3, [pc, #144]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	4623      	mov	r3, r4
 8000e68:	f7ff ff10 	bl	8000c8c <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <lcdPrintf+0x10c>)
 8000e6e:	881a      	ldrh	r2, [r3, #0]
 8000e70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	889b      	ldrh	r3, [r3, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <lcdPrintf+0x10c>)
 8000e7c:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e80:	7b1b      	ldrb	r3, [r3, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d017      	beq.n	8000eb6 <lcdPrintf+0xd6>
 8000e86:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <lcdPrintf+0x10c>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <lcdPrintf+0x114>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	889b      	ldrh	r3, [r3, #4]
 8000e98:	1acb      	subs	r3, r1, r3
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	dd0b      	ble.n	8000eb6 <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8000e9e:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <lcdPrintf+0x10c>)
 8000ea0:	885a      	ldrh	r2, [r3, #2]
 8000ea2:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <lcdPrintf+0x110>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	88db      	ldrh	r3, [r3, #6]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <lcdPrintf+0x10c>)
 8000eae:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <lcdPrintf+0x10c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <lcdPrintf+0x10c>)
 8000ebe:	885a      	ldrh	r2, [r3, #2]
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <lcdPrintf+0x114>)
 8000ec2:	885b      	ldrh	r3, [r3, #2]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d302      	bcc.n	8000ece <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <lcdPrintf+0x10c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	805a      	strh	r2, [r3, #2]
	while (*p)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d193      	bne.n	8000dfe <lcdPrintf+0x1e>
		}
	}
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ee2:	b004      	add	sp, #16
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000314 	.word	0x20000314
 8000eec:	2000030c 	.word	0x2000030c
 8000ef0:	20000020 	.word	0x20000020
 8000ef4:	20000018 	.word	0x20000018

08000ef8 <lcdSetTextFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8000f00:	4a04      	ldr	r2, [pc, #16]	@ (8000f14 <lcdSetTextFont+0x1c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6093      	str	r3, [r2, #8]
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000020 	.word	0x20000020

08000f18 <lcdSetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	460a      	mov	r2, r1
 8000f22:	80fb      	strh	r3, [r7, #6]
 8000f24:	4613      	mov	r3, r2
 8000f26:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	4a05      	ldr	r2, [pc, #20]	@ (8000f40 <lcdSetTextColor+0x28>)
 8000f2c:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8000f2e:	88bb      	ldrh	r3, [r7, #4]
 8000f30:	4a03      	ldr	r2, [pc, #12]	@ (8000f40 <lcdSetTextColor+0x28>)
 8000f32:	6053      	str	r3, [r2, #4]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	20000020 	.word	0x20000020

08000f44 <lcdSetOrientation>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 8000f4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 8000f54:	2036      	movs	r0, #54	@ 0x36
 8000f56:	f000 f8cf 	bl	80010f8 <lcdWriteCommand>

	switch (lcdProperties.orientation)
 8000f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f5c:	791b      	ldrb	r3, [r3, #4]
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d83e      	bhi.n	8000fe0 <lcdSetOrientation+0x9c>
 8000f62:	a201      	add	r2, pc, #4	@ (adr r2, 8000f68 <lcdSetOrientation+0x24>)
 8000f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f68:	08000f79 	.word	0x08000f79
 8000f6c:	08000fad 	.word	0x08000fad
 8000f70:	08000f93 	.word	0x08000f93
 8000f74:	08000fc7 	.word	0x08000fc7
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 8000f78:	4b23      	ldr	r3, [pc, #140]	@ (8001008 <lcdSetOrientation+0xc4>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f8cb 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8000f82:	4b20      	ldr	r3, [pc, #128]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f84:	22f0      	movs	r2, #240	@ 0xf0
 8000f86:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8000f88:	4b1e      	ldr	r3, [pc, #120]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f8a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000f8e:	805a      	strh	r2, [r3, #2]
			break;
 8000f90:	e027      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 8000f92:	4b1e      	ldr	r3, [pc, #120]	@ (800100c <lcdSetOrientation+0xc8>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f8be 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f9e:	22f0      	movs	r2, #240	@ 0xf0
 8000fa0:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fa4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fa8:	805a      	strh	r2, [r3, #2]
			break;
 8000faa:	e01a      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8000fac:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <lcdSetOrientation+0xcc>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 f8b1 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fb8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fbc:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fc0:	22f0      	movs	r2, #240	@ 0xf0
 8000fc2:	805a      	strh	r2, [r3, #2]
			break;
 8000fc4:	e00d      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 8000fc6:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <lcdSetOrientation+0xd0>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f8a4 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fd2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fd6:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fda:	22f0      	movs	r2, #240	@ 0xf0
 8000fdc:	805a      	strh	r2, [r3, #2]
			break;
 8000fde:	e000      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		default:
			break;
 8000fe0:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8000fe2:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fec:	885b      	ldrh	r3, [r3, #2]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 f829 	bl	800104c <lcdSetWindow>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000018 	.word	0x20000018
 8001008:	20000310 	.word	0x20000310
 800100c:	20000312 	.word	0x20000312
 8001010:	20000311 	.word	0x20000311
 8001014:	20000313 	.word	0x20000313

08001018 <lcdSetCursor>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	460a      	mov	r2, r1
 8001022:	80fb      	strh	r3, [r7, #6]
 8001024:	4613      	mov	r3, r2
 8001026:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8001028:	4a07      	ldr	r2, [pc, #28]	@ (8001048 <lcdSetCursor+0x30>)
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 800102e:	4a06      	ldr	r2, [pc, #24]	@ (8001048 <lcdSetCursor+0x30>)
 8001030:	88bb      	ldrh	r3, [r7, #4]
 8001032:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 8001034:	88bb      	ldrh	r3, [r7, #4]
 8001036:	88fa      	ldrh	r2, [r7, #6]
 8001038:	88b9      	ldrh	r1, [r7, #4]
 800103a:	88f8      	ldrh	r0, [r7, #6]
 800103c:	f000 f806 	bl	800104c <lcdSetWindow>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2000030c 	.word	0x2000030c

0800104c <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4604      	mov	r4, r0
 8001054:	4608      	mov	r0, r1
 8001056:	4611      	mov	r1, r2
 8001058:	461a      	mov	r2, r3
 800105a:	4623      	mov	r3, r4
 800105c:	80fb      	strh	r3, [r7, #6]
 800105e:	4603      	mov	r3, r0
 8001060:	80bb      	strh	r3, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	807b      	strh	r3, [r7, #2]
 8001066:	4613      	mov	r3, r2
 8001068:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 800106a:	202a      	movs	r0, #42	@ 0x2a
 800106c:	f000 f844 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	b29b      	uxth	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f84e 	bl	8001118 <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	b29b      	uxth	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f848 	bl	8001118 <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 8001088:	887b      	ldrh	r3, [r7, #2]
 800108a:	0a1b      	lsrs	r3, r3, #8
 800108c:	b29b      	uxth	r3, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f842 	bl	8001118 <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	b29b      	uxth	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f83c 	bl	8001118 <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80010a0:	202b      	movs	r0, #43	@ 0x2b
 80010a2:	f000 f829 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 80010a6:	88bb      	ldrh	r3, [r7, #4]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f833 	bl	8001118 <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 f82d 	bl	8001118 <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 80010be:	883b      	ldrh	r3, [r7, #0]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 f827 	bl	8001118 <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 80010ca:	883b      	ldrh	r3, [r7, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f821 	bl	8001118 <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 80010d6:	202c      	movs	r0, #44	@ 0x2c
 80010d8:	f000 f80e 	bl	80010f8 <lcdWriteCommand>
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd90      	pop	{r4, r7, pc}

080010e4 <lcdReset>:
  }
  while (i < dataLength);
}

static void lcdReset(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 80010e8:	2001      	movs	r0, #1
 80010ea:	f000 f805 	bl	80010f8 <lcdWriteCommand>
	HAL_Delay(50);
 80010ee:	2032      	movs	r0, #50	@ 0x32
 80010f0:	f003 f9b6 	bl	8004460 <HAL_Delay>
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 8001102:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8001106:	79fa      	ldrb	r2, [r7, #7]
 8001108:	b292      	uxth	r2, r2
 800110a:	801a      	strh	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 8001122:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <lcdWriteData+0x1c>)
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	8013      	strh	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	60020000 	.word	0x60020000

08001138 <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 8001138:	b490      	push	{r4, r7}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	4604      	mov	r4, r0
 8001140:	4608      	mov	r0, r1
 8001142:	4611      	mov	r1, r2
 8001144:	461a      	mov	r2, r3
 8001146:	4623      	mov	r3, r4
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	4603      	mov	r3, r0
 800114c:	71bb      	strb	r3, [r7, #6]
 800114e:	460b      	mov	r3, r1
 8001150:	717b      	strb	r3, [r7, #5]
 8001152:	4613      	mov	r3, r2
 8001154:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 800115a:	7f3b      	ldrb	r3, [r7, #28]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <lcdBuildMemoryAccessControlConfig+0x30>
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8001168:	7e3b      	ldrb	r3, [r7, #24]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <lcdBuildMemoryAccessControlConfig+0x3e>
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 8001176:	793b      	ldrb	r3, [r7, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <lcdBuildMemoryAccessControlConfig+0x4c>
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	f043 0310 	orr.w	r3, r3, #16
 8001182:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 8001184:	797b      	ldrb	r3, [r7, #5]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <lcdBuildMemoryAccessControlConfig+0x5a>
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	f043 0320 	orr.w	r3, r3, #32
 8001190:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <lcdBuildMemoryAccessControlConfig+0x68>
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800119e:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <lcdBuildMemoryAccessControlConfig+0x76>
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011ac:	73fb      	strb	r3, [r7, #15]
  return value;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc90      	pop	{r4, r7}
 80011b8:	4770      	bx	lr

080011ba <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011c2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011c6:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d013      	beq.n	80011fa <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80011d2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011d6:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80011da:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00b      	beq.n	80011fa <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80011e2:	e000      	b.n	80011e6 <ITM_SendChar+0x2c>
    {
      __NOP();
 80011e4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80011e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f9      	beq.n	80011e4 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80011f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80011fa:	687b      	ldr	r3, [r7, #4]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <_write>:
uint8_t handleTouch();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	e009      	b.n	800122e <_write+0x26>
		ITM_SendChar((*ptr++));  // Send the character via ITM
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1c5a      	adds	r2, r3, #1
 800121e:	60ba      	str	r2, [r7, #8]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ffc9 	bl	80011ba <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	3301      	adds	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	429a      	cmp	r2, r3
 8001234:	dbf1      	blt.n	800121a <_write+0x12>
	}
	return len;
 8001236:	687b      	ldr	r3, [r7, #4]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <USBH_HID_EventCallback>:
static uint8_t USB_BUSY = 0;
char qr_code_data[MAX_LINES][MAX_LINE_LENGTH] = { { '\0' } }; //static initializes strings with all null characters
HID_KEYBD_Info_TypeDef *Keyboard_Info;

/***DORJEE YOU HAVE TO CHANGE USBH_HID.H WHEN YOU GENERATE CODE****/
void USBH_HID_EventCallback(USBH_HandleTypeDef *phost) { //2.6s for 54 lines
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	Keyboard_Info = USBH_HID_GetKeybdInfo(phost);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f00b fa0d 	bl	800c668 <USBH_HID_GetKeybdInfo>
 800124e:	4603      	mov	r3, r0
 8001250:	4a47      	ldr	r2, [pc, #284]	@ (8001370 <USBH_HID_EventCallback+0x130>)
 8001252:	6013      	str	r3, [r2, #0]
	char key = USBH_HID_GetASCIICode(Keyboard_Info);
 8001254:	4b46      	ldr	r3, [pc, #280]	@ (8001370 <USBH_HID_EventCallback+0x130>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f00b faad 	bl	800c7b8 <USBH_HID_GetASCIICode>
 800125e:	4603      	mov	r3, r0
 8001260:	72fb      	strb	r3, [r7, #11]
	printf("%c\n", key);
 8001262:	7afb      	ldrb	r3, [r7, #11]
 8001264:	4619      	mov	r1, r3
 8001266:	4843      	ldr	r0, [pc, #268]	@ (8001374 <USBH_HID_EventCallback+0x134>)
 8001268:	f00d ff74 	bl	800f154 <iprintf>
	//disable the touchscreen interrupt functionality when usb transmission starts
	//after tab it calls itself one more time, so disable after i=0
	if (i == 1) {
 800126c:	4b42      	ldr	r3, [pc, #264]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d102      	bne.n	800127a <USBH_HID_EventCallback+0x3a>
		USB_BUSY = 1;
 8001274:	4b41      	ldr	r3, [pc, #260]	@ (800137c <USBH_HID_EventCallback+0x13c>)
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
	}

	//store incoming chars. ignore null characters that come in for some reason
	if ((key != NULL_CHAR) && (key != SOH)) {
 800127a:	7afb      	ldrb	r3, [r7, #11]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d011      	beq.n	80012a4 <USBH_HID_EventCallback+0x64>
 8001280:	7afb      	ldrb	r3, [r7, #11]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d00e      	beq.n	80012a4 <USBH_HID_EventCallback+0x64>
		qr_code_data[i][j] = key;
 8001286:	4b3c      	ldr	r3, [pc, #240]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b3d      	ldr	r3, [pc, #244]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	493d      	ldr	r1, [pc, #244]	@ (8001384 <USBH_HID_EventCallback+0x144>)
 8001290:	0152      	lsls	r2, r2, #5
 8001292:	440a      	add	r2, r1
 8001294:	4413      	add	r3, r2
 8001296:	7afa      	ldrb	r2, [r7, #11]
 8001298:	701a      	strb	r2, [r3, #0]
		j++;
 800129a:	4b39      	ldr	r3, [pc, #228]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	4a37      	ldr	r2, [pc, #220]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 80012a2:	6013      	str	r3, [r2, #0]
	}
	//handle new line
	if (key == NEWLINE_CHAR) {
 80012a4:	7afb      	ldrb	r3, [r7, #11]
 80012a6:	2b0a      	cmp	r3, #10
 80012a8:	d107      	bne.n	80012ba <USBH_HID_EventCallback+0x7a>
		j = 0;
 80012aa:	4b35      	ldr	r3, [pc, #212]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
		i++;
 80012b0:	4b31      	ldr	r3, [pc, #196]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	4a30      	ldr	r2, [pc, #192]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 80012b8:	6013      	str	r3, [r2, #0]
	}
	//tab is the end of the qr code
	if (key == TAB) {
 80012ba:	7afb      	ldrb	r3, [r7, #11]
 80012bc:	2b09      	cmp	r3, #9
 80012be:	d152      	bne.n	8001366 <USBH_HID_EventCallback+0x126>
		for (int a = 0; a < 15; a++) {
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	e002      	b.n	80012cc <USBH_HID_EventCallback+0x8c>
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3301      	adds	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	2b0e      	cmp	r3, #14
 80012d0:	ddf9      	ble.n	80012c6 <USBH_HID_EventCallback+0x86>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d2:	b672      	cpsid	i
}
 80012d4:	bf00      	nop
			//printf("%s", qr_code_data[a]);
		}
		__disable_irq();
		//output_protocol(qr_code_data, i + 1);
		//check if the title is (10 chars + newline char) or less
		if (strlen(qr_code_data[0]) < (MAX_TITLE_SIZE + 1)) {
 80012d6:	482b      	ldr	r0, [pc, #172]	@ (8001384 <USBH_HID_EventCallback+0x144>)
 80012d8:	f7fe ff8a 	bl	80001f0 <strlen>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b0e      	cmp	r3, #14
 80012e0:	d83b      	bhi.n	800135a <USBH_HID_EventCallback+0x11a>
			uint8_t freeSectorNumber = getFreeSector();
 80012e2:	f002 f9b5 	bl	8003650 <getFreeSector>
 80012e6:	4603      	mov	r3, r0
 80012e8:	72bb      	strb	r3, [r7, #10]
			//printf("free sector is %d\n", freeSectorNumber);
			//only store the protocol if all memory isnt full
			if (freeSectorNumber <= 10) { //i only got 10 pages rn
 80012ea:	7abb      	ldrb	r3, [r7, #10]
 80012ec:	2b0a      	cmp	r3, #10
 80012ee:	d82a      	bhi.n	8001346 <USBH_HID_EventCallback+0x106>
				//printf("why\n");
				storeProtocol(qr_code_data, freeSectorNumber);
 80012f0:	7abb      	ldrb	r3, [r7, #10]
 80012f2:	4619      	mov	r1, r3
 80012f4:	4823      	ldr	r0, [pc, #140]	@ (8001384 <USBH_HID_EventCallback+0x144>)
 80012f6:	f001 ffe5 	bl	80032c4 <storeProtocol>
				//go to the page num the new protocol is on
				page_num = freeSectorNumber;
 80012fa:	4a23      	ldr	r2, [pc, #140]	@ (8001388 <USBH_HID_EventCallback+0x148>)
 80012fc:	7abb      	ldrb	r3, [r7, #10]
 80012fe:	7013      	strb	r3, [r2, #0]
				DrawMainPage(page_num);
 8001300:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <USBH_HID_EventCallback+0x148>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fbdd 	bl	8001ac4 <DrawMainPage>
				currentPage = PAGE_MAIN;
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <USBH_HID_EventCallback+0x14c>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < MAX_LINES; a++) {
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	e013      	b.n	800133e <USBH_HID_EventCallback+0xfe>
					for (int b = 0; b < MAX_LINE_LENGTH; b++) {
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	e00a      	b.n	8001332 <USBH_HID_EventCallback+0xf2>
						qr_code_data[a][b] = '\0';
 800131c:	4a19      	ldr	r2, [pc, #100]	@ (8001384 <USBH_HID_EventCallback+0x144>)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	015b      	lsls	r3, r3, #5
 8001322:	441a      	add	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
					for (int b = 0; b < MAX_LINE_LENGTH; b++) {
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3301      	adds	r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b1f      	cmp	r3, #31
 8001336:	ddf1      	ble.n	800131c <USBH_HID_EventCallback+0xdc>
				for (int a = 0; a < MAX_LINES; a++) {
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	3301      	adds	r3, #1
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	2bc7      	cmp	r3, #199	@ 0xc7
 8001342:	dde8      	ble.n	8001316 <USBH_HID_EventCallback+0xd6>
 8001344:	e004      	b.n	8001350 <USBH_HID_EventCallback+0x110>
					}
				}
			} else {
				DrawQueuePage(queueSize);
 8001346:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <USBH_HID_EventCallback+0x150>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f000 feba 	bl	80020c4 <DrawQueuePage>
  __ASM volatile ("cpsie i" : : : "memory");
 8001350:	b662      	cpsie	i
}
 8001352:	bf00      	nop
			}
			__enable_irq();
			USB_BUSY = 0;
 8001354:	4b09      	ldr	r3, [pc, #36]	@ (800137c <USBH_HID_EventCallback+0x13c>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
		}
		i = 0;
 800135a:	4b07      	ldr	r3, [pc, #28]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
		j = 0;
 8001360:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
	}

}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200118dc 	.word	0x200118dc
 8001374:	08010160 	.word	0x08010160
 8001378:	200005d0 	.word	0x200005d0
 800137c:	2000ffd9 	.word	0x2000ffd9
 8001380:	200005d4 	.word	0x200005d4
 8001384:	2000ffdc 	.word	0x2000ffdc
 8001388:	20000267 	.word	0x20000267
 800138c:	20000594 	.word	0x20000594
 8001390:	2000ffd8 	.word	0x2000ffd8

08001394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139a:	f002 ffef 	bl	800437c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139e:	f000 f8ef 	bl	8001580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a2:	f000 fabf 	bl	8001924 <MX_GPIO_Init>
  MX_FMC_Init();
 80013a6:	f000 fa5b 	bl	8001860 <MX_FMC_Init>
  MX_TIM3_Init();
 80013aa:	f000 f9d7 	bl	800175c <MX_TIM3_Init>
  MX_SPI4_Init();
 80013ae:	f000 f951 	bl	8001654 <MX_SPI4_Init>
  MX_USB_HOST_Init();
 80013b2:	f00d f9cb 	bl	800e74c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80013b6:	f000 fa29 	bl	800180c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80013ba:	f000 f981 	bl	80016c0 <MX_TIM2_Init>
//  	erase_sector(6);
//  	erase_sector(7);
//  	erase_sector(8);
//  	erase_sector(9);
//  	erase_sector(10);
	HAL_GPIO_WritePin(LCD_NRST_GPIO_Port, LCD_NRST_Pin, GPIO_PIN_SET);
 80013be:	2201      	movs	r2, #1
 80013c0:	2140      	movs	r1, #64	@ 0x40
 80013c2:	4863      	ldr	r0, [pc, #396]	@ (8001550 <main+0x1bc>)
 80013c4:	f003 fdec 	bl	8004fa0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80013c8:	2032      	movs	r0, #50	@ 0x32
 80013ca:	f003 f849 	bl	8004460 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_NRST_GPIO_Port, LCD_NRST_Pin, GPIO_PIN_SET);
 80013ce:	2201      	movs	r2, #1
 80013d0:	2140      	movs	r1, #64	@ 0x40
 80013d2:	485f      	ldr	r0, [pc, #380]	@ (8001550 <main+0x1bc>)
 80013d4:	f003 fde4 	bl	8004fa0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80013d8:	2032      	movs	r0, #50	@ 0x32
 80013da:	f003 f841 	bl	8004460 <HAL_Delay>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013de:	2100      	movs	r1, #0
 80013e0:	485c      	ldr	r0, [pc, #368]	@ (8001554 <main+0x1c0>)
 80013e2:	f007 f9b1 	bl	8008748 <HAL_TIM_PWM_Start>
	htim3.Instance->CCR1 = 50;
 80013e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001554 <main+0x1c0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2232      	movs	r2, #50	@ 0x32
 80013ec:	635a      	str	r2, [r3, #52]	@ 0x34

	lcdInit();
 80013ee:	f7ff f9ab 	bl	8000748 <lcdInit>
	//lcdTest();
	lcdSetOrientation(LCD_ORIENTATION_LANDSCAPE);
 80013f2:	2001      	movs	r0, #1
 80013f4:	f7ff fda6 	bl	8000f44 <lcdSetOrientation>
	DrawMainPage(1);
 80013f8:	2001      	movs	r0, #1
 80013fa:	f000 fb63 	bl	8001ac4 <DrawMainPage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80013fe:	f00d f9cb 	bl	800e798 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
		if (touchFlag) {
 8001402:	4b55      	ldr	r3, [pc, #340]	@ (8001558 <main+0x1c4>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d007      	beq.n	800141a <main+0x86>
			handleTouch();
 800140a:	f001 fb09 	bl	8002a20 <handleTouch>
			touchFlag = 0;
 800140e:	4b52      	ldr	r3, [pc, #328]	@ (8001558 <main+0x1c4>)
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 8001414:	2064      	movs	r0, #100	@ 0x64
 8001416:	f003 f823 	bl	8004460 <HAL_Delay>
		}
		if (currentPage == PAGE_PROGRESS) {
 800141a:	4b50      	ldr	r3, [pc, #320]	@ (800155c <main+0x1c8>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b05      	cmp	r3, #5
 8001420:	d1ed      	bne.n	80013fe <main+0x6a>
			//when protocol finishes naturally, it will send a done signal

			if (HAL_UART_Receive(&huart2, &rx_byte, 1, 0) == HAL_OK) {
 8001422:	2300      	movs	r3, #0
 8001424:	2201      	movs	r2, #1
 8001426:	494e      	ldr	r1, [pc, #312]	@ (8001560 <main+0x1cc>)
 8001428:	484e      	ldr	r0, [pc, #312]	@ (8001564 <main+0x1d0>)
 800142a:	f008 f97e 	bl	800972a <HAL_UART_Receive>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1e4      	bne.n	80013fe <main+0x6a>
				//protocol starts, get the protocl title
				if (rx_byte == 'T') {
 8001434:	4b4a      	ldr	r3, [pc, #296]	@ (8001560 <main+0x1cc>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b54      	cmp	r3, #84	@ 0x54
 800143a:	d10c      	bne.n	8001456 <main+0xc2>
					HAL_UART_Receive(&huart2, (uint8_t*) currentProtocolTitle, sizeof(currentProtocolTitle), 100);
 800143c:	2364      	movs	r3, #100	@ 0x64
 800143e:	2214      	movs	r2, #20
 8001440:	4949      	ldr	r1, [pc, #292]	@ (8001568 <main+0x1d4>)
 8001442:	4848      	ldr	r0, [pc, #288]	@ (8001564 <main+0x1d0>)
 8001444:	f008 f971 	bl	800972a <HAL_UART_Receive>
					DrawProgressPage("FILL", rx_byte, rx_data);
 8001448:	4b45      	ldr	r3, [pc, #276]	@ (8001560 <main+0x1cc>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4a47      	ldr	r2, [pc, #284]	@ (800156c <main+0x1d8>)
 800144e:	4619      	mov	r1, r3
 8001450:	4847      	ldr	r0, [pc, #284]	@ (8001570 <main+0x1dc>)
 8001452:	f000 ff1d 	bl	8002290 <DrawProgressPage>
				}
				//repeat update
				if (rx_byte == 'R') {
 8001456:	4b42      	ldr	r3, [pc, #264]	@ (8001560 <main+0x1cc>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b52      	cmp	r3, #82	@ 0x52
 800145c:	d139      	bne.n	80014d2 <main+0x13e>
					char repeatUpdate[2];
					HAL_UART_Receive(&huart2, (uint8_t*) repeatUpdate, sizeof(repeatUpdate), 100);
 800145e:	f107 0118 	add.w	r1, r7, #24
 8001462:	2364      	movs	r3, #100	@ 0x64
 8001464:	2202      	movs	r2, #2
 8001466:	483f      	ldr	r0, [pc, #252]	@ (8001564 <main+0x1d0>)
 8001468:	f008 f95f 	bl	800972a <HAL_UART_Receive>
					currentRepeatNum = atoi(repeatUpdate);
 800146c:	f107 0318 	add.w	r3, r7, #24
 8001470:	4618      	mov	r0, r3
 8001472:	f00d fc67 	bl	800ed44 <atoi>
 8001476:	4603      	mov	r3, r0
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b3e      	ldr	r3, [pc, #248]	@ (8001574 <main+0x1e0>)
 800147c:	701a      	strb	r2, [r3, #0]
					printf("%d\n", currentRepeatNum);
 800147e:	4b3d      	ldr	r3, [pc, #244]	@ (8001574 <main+0x1e0>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	4619      	mov	r1, r3
 8001486:	483c      	ldr	r0, [pc, #240]	@ (8001578 <main+0x1e4>)
 8001488:	f00d fe64 	bl	800f154 <iprintf>
					//repeat
					char repeat[20] = "";
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	f107 0308 	add.w	r3, r7, #8
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
					uint32_t repeatInt = ConvertCharsToInt('0', rx_data[12], rx_data[13]);
 800149e:	4b33      	ldr	r3, [pc, #204]	@ (800156c <main+0x1d8>)
 80014a0:	7b1b      	ldrb	r3, [r3, #12]
 80014a2:	4a32      	ldr	r2, [pc, #200]	@ (800156c <main+0x1d8>)
 80014a4:	7b52      	ldrb	r2, [r2, #13]
 80014a6:	4619      	mov	r1, r3
 80014a8:	2030      	movs	r0, #48	@ 0x30
 80014aa:	f001 f9f1 	bl	8002890 <ConvertCharsToInt>
 80014ae:	61f8      	str	r0, [r7, #28]
					//sprintf(repeat, "Repeat: %c%c", rx_data[11], rx_data[12]);
					sprintf(repeat, "Repeat: %d/%d", currentRepeatNum, repeatInt);
 80014b0:	4b30      	ldr	r3, [pc, #192]	@ (8001574 <main+0x1e0>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	461a      	mov	r2, r3
 80014b8:	1d38      	adds	r0, r7, #4
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	492f      	ldr	r1, [pc, #188]	@ (800157c <main+0x1e8>)
 80014be:	f00d fe63 	bl	800f188 <siprintf>
					lcdSetCursor(10, 150);
 80014c2:	2196      	movs	r1, #150	@ 0x96
 80014c4:	200a      	movs	r0, #10
 80014c6:	f7ff fda7 	bl	8001018 <lcdSetCursor>
					lcdPrintf(repeat);
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fc87 	bl	8000de0 <lcdPrintf>
				}
				//protocol starts, update progress screen
				if (rx_byte == 'B') {
 80014d2:	4b23      	ldr	r3, [pc, #140]	@ (8001560 <main+0x1cc>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b42      	cmp	r3, #66	@ 0x42
 80014d8:	d10c      	bne.n	80014f4 <main+0x160>
					HAL_UART_Receive(&huart2, (uint8_t*) rx_data, sizeof(rx_data), 100);
 80014da:	2364      	movs	r3, #100	@ 0x64
 80014dc:	2214      	movs	r2, #20
 80014de:	4923      	ldr	r1, [pc, #140]	@ (800156c <main+0x1d8>)
 80014e0:	4820      	ldr	r0, [pc, #128]	@ (8001564 <main+0x1d0>)
 80014e2:	f008 f922 	bl	800972a <HAL_UART_Receive>
					DrawProgressPage("FILL", rx_byte, rx_data);
 80014e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001560 <main+0x1cc>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	4a20      	ldr	r2, [pc, #128]	@ (800156c <main+0x1d8>)
 80014ec:	4619      	mov	r1, r3
 80014ee:	4820      	ldr	r0, [pc, #128]	@ (8001570 <main+0x1dc>)
 80014f0:	f000 fece 	bl	8002290 <DrawProgressPage>
				}
				if (rx_byte == 'M') {
 80014f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <main+0x1cc>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b4d      	cmp	r3, #77	@ 0x4d
 80014fa:	d10c      	bne.n	8001516 <main+0x182>
					HAL_UART_Receive(&huart2, (uint8_t*) rx_data, sizeof(rx_data), 100);
 80014fc:	2364      	movs	r3, #100	@ 0x64
 80014fe:	2214      	movs	r2, #20
 8001500:	491a      	ldr	r1, [pc, #104]	@ (800156c <main+0x1d8>)
 8001502:	4818      	ldr	r0, [pc, #96]	@ (8001564 <main+0x1d0>)
 8001504:	f008 f911 	bl	800972a <HAL_UART_Receive>
					DrawProgressPage("FILL", rx_byte, rx_data);
 8001508:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <main+0x1cc>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4a17      	ldr	r2, [pc, #92]	@ (800156c <main+0x1d8>)
 800150e:	4619      	mov	r1, r3
 8001510:	4817      	ldr	r0, [pc, #92]	@ (8001570 <main+0x1dc>)
 8001512:	f000 febd 	bl	8002290 <DrawProgressPage>
				}
				if (rx_byte == 'P' ) {
 8001516:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <main+0x1cc>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b50      	cmp	r3, #80	@ 0x50
 800151c:	d10c      	bne.n	8001538 <main+0x1a4>
					HAL_UART_Receive(&huart2, (uint8_t*) rx_data, sizeof(rx_data), 100);
 800151e:	2364      	movs	r3, #100	@ 0x64
 8001520:	2214      	movs	r2, #20
 8001522:	4912      	ldr	r1, [pc, #72]	@ (800156c <main+0x1d8>)
 8001524:	480f      	ldr	r0, [pc, #60]	@ (8001564 <main+0x1d0>)
 8001526:	f008 f900 	bl	800972a <HAL_UART_Receive>
					DrawProgressPage("FILL", rx_byte, rx_data);
 800152a:	4b0d      	ldr	r3, [pc, #52]	@ (8001560 <main+0x1cc>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	4a0f      	ldr	r2, [pc, #60]	@ (800156c <main+0x1d8>)
 8001530:	4619      	mov	r1, r3
 8001532:	480f      	ldr	r0, [pc, #60]	@ (8001570 <main+0x1dc>)
 8001534:	f000 feac 	bl	8002290 <DrawProgressPage>
				}

				//protocol finishes
				if (rx_byte == 'D') {
 8001538:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <main+0x1cc>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b44      	cmp	r3, #68	@ 0x44
 800153e:	f47f af5e 	bne.w	80013fe <main+0x6a>
				    //go to success page
					currentPage = PAGE_FINISH;
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <main+0x1c8>)
 8001544:	2204      	movs	r2, #4
 8001546:	701a      	strb	r2, [r3, #0]
					DrawPageFinish();
 8001548:	f001 fa28 	bl	800299c <DrawPageFinish>
    MX_USB_HOST_Process();
 800154c:	e757      	b.n	80013fe <main+0x6a>
 800154e:	bf00      	nop
 8001550:	40020c00 	.word	0x40020c00
 8001554:	200004b4 	.word	0x200004b4
 8001558:	200005cc 	.word	0x200005cc
 800155c:	20000594 	.word	0x20000594
 8001560:	2000059c 	.word	0x2000059c
 8001564:	200004fc 	.word	0x200004fc
 8001568:	200005b4 	.word	0x200005b4
 800156c:	200005a0 	.word	0x200005a0
 8001570:	08010164 	.word	0x08010164
 8001574:	20000266 	.word	0x20000266
 8001578:	0801016c 	.word	0x0801016c
 800157c:	08010170 	.word	0x08010170

08001580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b094      	sub	sp, #80	@ 0x50
 8001584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001586:	f107 0320 	add.w	r3, r7, #32
 800158a:	2230      	movs	r2, #48	@ 0x30
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f00d fe7e 	bl	800f290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a4:	2300      	movs	r3, #0
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	4b28      	ldr	r3, [pc, #160]	@ (800164c <SystemClock_Config+0xcc>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ac:	4a27      	ldr	r2, [pc, #156]	@ (800164c <SystemClock_Config+0xcc>)
 80015ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b4:	4b25      	ldr	r3, [pc, #148]	@ (800164c <SystemClock_Config+0xcc>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c0:	2300      	movs	r3, #0
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	4b22      	ldr	r3, [pc, #136]	@ (8001650 <SystemClock_Config+0xd0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a21      	ldr	r2, [pc, #132]	@ (8001650 <SystemClock_Config+0xd0>)
 80015ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <SystemClock_Config+0xd0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015dc:	2301      	movs	r3, #1
 80015de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e6:	2302      	movs	r3, #2
 80015e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015f0:	2308      	movs	r3, #8
 80015f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015f4:	23a8      	movs	r3, #168	@ 0xa8
 80015f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015f8:	2302      	movs	r3, #2
 80015fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015fc:	2307      	movs	r3, #7
 80015fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4618      	mov	r0, r3
 8001606:	f005 fe31 	bl	800726c <HAL_RCC_OscConfig>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001610:	f002 fbfe 	bl	8003e10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001614:	230f      	movs	r3, #15
 8001616:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001618:	2302      	movs	r3, #2
 800161a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001620:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001624:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001626:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800162a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	2105      	movs	r1, #5
 8001632:	4618      	mov	r0, r3
 8001634:	f006 f892 	bl	800775c <HAL_RCC_ClockConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800163e:	f002 fbe7 	bl	8003e10 <Error_Handler>
  }
}
 8001642:	bf00      	nop
 8001644:	3750      	adds	r7, #80	@ 0x50
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	40007000 	.word	0x40007000

08001654 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001658:	4b17      	ldr	r3, [pc, #92]	@ (80016b8 <MX_SPI4_Init+0x64>)
 800165a:	4a18      	ldr	r2, [pc, #96]	@ (80016bc <MX_SPI4_Init+0x68>)
 800165c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800165e:	4b16      	ldr	r3, [pc, #88]	@ (80016b8 <MX_SPI4_Init+0x64>)
 8001660:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001664:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001666:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <MX_SPI4_Init+0x64>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800166c:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <MX_SPI4_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001672:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <MX_SPI4_Init+0x64>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001678:	4b0f      	ldr	r3, [pc, #60]	@ (80016b8 <MX_SPI4_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800167e:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <MX_SPI4_Init+0x64>)
 8001680:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001684:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001686:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <MX_SPI4_Init+0x64>)
 8001688:	2230      	movs	r2, #48	@ 0x30
 800168a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800168c:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <MX_SPI4_Init+0x64>)
 800168e:	2200      	movs	r2, #0
 8001690:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001692:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <MX_SPI4_Init+0x64>)
 8001694:	2200      	movs	r2, #0
 8001696:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001698:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <MX_SPI4_Init+0x64>)
 800169a:	2200      	movs	r2, #0
 800169c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 800169e:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <MX_SPI4_Init+0x64>)
 80016a0:	220a      	movs	r2, #10
 80016a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80016a4:	4804      	ldr	r0, [pc, #16]	@ (80016b8 <MX_SPI4_Init+0x64>)
 80016a6:	f006 fa77 	bl	8007b98 <HAL_SPI_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80016b0:	f002 fbae 	bl	8003e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000414 	.word	0x20000414
 80016bc:	40013400 	.word	0x40013400

080016c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c6:	f107 0308 	add.w	r3, r7, #8
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d4:	463b      	mov	r3, r7
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001758 <MX_TIM2_Init+0x98>)
 80016de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 80016e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001758 <MX_TIM2_Init+0x98>)
 80016e6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80016ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001758 <MX_TIM2_Init+0x98>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80016f2:	4b19      	ldr	r3, [pc, #100]	@ (8001758 <MX_TIM2_Init+0x98>)
 80016f4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80016f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fa:	4b17      	ldr	r3, [pc, #92]	@ (8001758 <MX_TIM2_Init+0x98>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001700:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <MX_TIM2_Init+0x98>)
 8001702:	2200      	movs	r2, #0
 8001704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001706:	4814      	ldr	r0, [pc, #80]	@ (8001758 <MX_TIM2_Init+0x98>)
 8001708:	f006 fee0 	bl	80084cc <HAL_TIM_Base_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001712:	f002 fb7d 	bl	8003e10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001716:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800171a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800171c:	f107 0308 	add.w	r3, r7, #8
 8001720:	4619      	mov	r1, r3
 8001722:	480d      	ldr	r0, [pc, #52]	@ (8001758 <MX_TIM2_Init+0x98>)
 8001724:	f007 fa8a 	bl	8008c3c <HAL_TIM_ConfigClockSource>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800172e:	f002 fb6f 	bl	8003e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800173a:	463b      	mov	r3, r7
 800173c:	4619      	mov	r1, r3
 800173e:	4806      	ldr	r0, [pc, #24]	@ (8001758 <MX_TIM2_Init+0x98>)
 8001740:	f007 fe88 	bl	8009454 <HAL_TIMEx_MasterConfigSynchronization>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800174a:	f002 fb61 	bl	8003e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2000046c 	.word	0x2000046c

0800175c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	@ 0x28
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001762:	f107 0320 	add.w	r3, r7, #32
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	611a      	str	r2, [r3, #16]
 800177a:	615a      	str	r2, [r3, #20]
 800177c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800177e:	4b21      	ldr	r3, [pc, #132]	@ (8001804 <MX_TIM3_Init+0xa8>)
 8001780:	4a21      	ldr	r2, [pc, #132]	@ (8001808 <MX_TIM3_Init+0xac>)
 8001782:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168-1;
 8001784:	4b1f      	ldr	r3, [pc, #124]	@ (8001804 <MX_TIM3_Init+0xa8>)
 8001786:	22a7      	movs	r2, #167	@ 0xa7
 8001788:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178a:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <MX_TIM3_Init+0xa8>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001790:	4b1c      	ldr	r3, [pc, #112]	@ (8001804 <MX_TIM3_Init+0xa8>)
 8001792:	2264      	movs	r2, #100	@ 0x64
 8001794:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001796:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <MX_TIM3_Init+0xa8>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179c:	4b19      	ldr	r3, [pc, #100]	@ (8001804 <MX_TIM3_Init+0xa8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017a2:	4818      	ldr	r0, [pc, #96]	@ (8001804 <MX_TIM3_Init+0xa8>)
 80017a4:	f006 ff81 	bl	80086aa <HAL_TIM_PWM_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80017ae:	f002 fb2f 	bl	8003e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017ba:	f107 0320 	add.w	r3, r7, #32
 80017be:	4619      	mov	r1, r3
 80017c0:	4810      	ldr	r0, [pc, #64]	@ (8001804 <MX_TIM3_Init+0xa8>)
 80017c2:	f007 fe47 	bl	8009454 <HAL_TIMEx_MasterConfigSynchronization>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80017cc:	f002 fb20 	bl	8003e10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d0:	2360      	movs	r3, #96	@ 0x60
 80017d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2200      	movs	r2, #0
 80017e4:	4619      	mov	r1, r3
 80017e6:	4807      	ldr	r0, [pc, #28]	@ (8001804 <MX_TIM3_Init+0xa8>)
 80017e8:	f007 f966 	bl	8008ab8 <HAL_TIM_PWM_ConfigChannel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80017f2:	f002 fb0d 	bl	8003e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017f6:	4803      	ldr	r0, [pc, #12]	@ (8001804 <MX_TIM3_Init+0xa8>)
 80017f8:	f002 fbc8 	bl	8003f8c <HAL_TIM_MspPostInit>

}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	@ 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200004b4 	.word	0x200004b4
 8001808:	40000400 	.word	0x40000400

0800180c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001810:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001812:	4a12      	ldr	r2, [pc, #72]	@ (800185c <MX_USART2_UART_Init+0x50>)
 8001814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001818:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800181c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800181e:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001824:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800182a:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001830:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001832:	220c      	movs	r2, #12
 8001834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001836:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001842:	4805      	ldr	r0, [pc, #20]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001844:	f007 fe96 	bl	8009574 <HAL_UART_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800184e:	f002 fadf 	bl	8003e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200004fc 	.word	0x200004fc
 800185c:	40004400 	.word	0x40004400

08001860 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
 8001874:	615a      	str	r2, [r3, #20]
 8001876:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001878:	4b28      	ldr	r3, [pc, #160]	@ (800191c <MX_FMC_Init+0xbc>)
 800187a:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800187e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001880:	4b26      	ldr	r3, [pc, #152]	@ (800191c <MX_FMC_Init+0xbc>)
 8001882:	4a27      	ldr	r2, [pc, #156]	@ (8001920 <MX_FMC_Init+0xc0>)
 8001884:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001886:	4b25      	ldr	r3, [pc, #148]	@ (800191c <MX_FMC_Init+0xbc>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800188c:	4b23      	ldr	r3, [pc, #140]	@ (800191c <MX_FMC_Init+0xbc>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001892:	4b22      	ldr	r3, [pc, #136]	@ (800191c <MX_FMC_Init+0xbc>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001898:	4b20      	ldr	r3, [pc, #128]	@ (800191c <MX_FMC_Init+0xbc>)
 800189a:	2210      	movs	r2, #16
 800189c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800189e:	4b1f      	ldr	r3, [pc, #124]	@ (800191c <MX_FMC_Init+0xbc>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80018a4:	4b1d      	ldr	r3, [pc, #116]	@ (800191c <MX_FMC_Init+0xbc>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
 80018aa:	4b1c      	ldr	r3, [pc, #112]	@ (800191c <MX_FMC_Init+0xbc>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80018b0:	4b1a      	ldr	r3, [pc, #104]	@ (800191c <MX_FMC_Init+0xbc>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80018b6:	4b19      	ldr	r3, [pc, #100]	@ (800191c <MX_FMC_Init+0xbc>)
 80018b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80018be:	4b17      	ldr	r3, [pc, #92]	@ (800191c <MX_FMC_Init+0xbc>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80018c4:	4b15      	ldr	r3, [pc, #84]	@ (800191c <MX_FMC_Init+0xbc>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80018ca:	4b14      	ldr	r3, [pc, #80]	@ (800191c <MX_FMC_Init+0xbc>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80018d0:	4b12      	ldr	r3, [pc, #72]	@ (800191c <MX_FMC_Init+0xbc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80018d6:	4b11      	ldr	r3, [pc, #68]	@ (800191c <MX_FMC_Init+0xbc>)
 80018d8:	2200      	movs	r2, #0
 80018da:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	@ (800191c <MX_FMC_Init+0xbc>)
 80018de:	2200      	movs	r2, #0
 80018e0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 3;
 80018e2:	2303      	movs	r3, #3
 80018e4:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80018e6:	230f      	movs	r3, #15
 80018e8:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 2;
 80018ea:	2302      	movs	r3, #2
 80018ec:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 2;
 80018ee:	2302      	movs	r3, #2
 80018f0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80018f2:	2310      	movs	r3, #16
 80018f4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80018f6:	2311      	movs	r3, #17
 80018f8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2200      	movs	r2, #0
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	@ (800191c <MX_FMC_Init+0xbc>)
 8001906:	f006 fd99 	bl	800843c <HAL_SRAM_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8001910:	f002 fa7e 	bl	8003e10 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001914:	bf00      	nop
 8001916:	3720      	adds	r7, #32
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000544 	.word	0x20000544
 8001920:	a0000104 	.word	0xa0000104

08001924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08c      	sub	sp, #48	@ 0x30
 8001928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192a:	f107 031c 	add.w	r3, r7, #28
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	61bb      	str	r3, [r7, #24]
 800193e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	4a5b      	ldr	r2, [pc, #364]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 8001944:	f043 0310 	orr.w	r3, r3, #16
 8001948:	6313      	str	r3, [r2, #48]	@ 0x30
 800194a:	4b59      	ldr	r3, [pc, #356]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	61bb      	str	r3, [r7, #24]
 8001954:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	4b55      	ldr	r3, [pc, #340]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	4a54      	ldr	r2, [pc, #336]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 8001960:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001964:	6313      	str	r3, [r2, #48]	@ 0x30
 8001966:	4b52      	ldr	r3, [pc, #328]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	4b4e      	ldr	r3, [pc, #312]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	4a4d      	ldr	r2, [pc, #308]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6313      	str	r3, [r2, #48]	@ 0x30
 8001982:	4b4b      	ldr	r3, [pc, #300]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b47      	ldr	r3, [pc, #284]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	4a46      	ldr	r2, [pc, #280]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	6313      	str	r3, [r2, #48]	@ 0x30
 800199e:	4b44      	ldr	r3, [pc, #272]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	4b40      	ldr	r3, [pc, #256]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 80019b4:	f043 0308 	orr.w	r3, r3, #8
 80019b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ba:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	4b39      	ldr	r3, [pc, #228]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	4a38      	ldr	r2, [pc, #224]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d6:	4b36      	ldr	r3, [pc, #216]	@ (8001ab0 <MX_GPIO_Init+0x18c>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019e8:	4832      	ldr	r0, [pc, #200]	@ (8001ab4 <MX_GPIO_Init+0x190>)
 80019ea:	f003 fad9 	bl	8004fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019f4:	4830      	ldr	r0, [pc, #192]	@ (8001ab8 <MX_GPIO_Init+0x194>)
 80019f6:	f003 fad3 	bl	8004fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_NRST_GPIO_Port, LCD_NRST_Pin, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2140      	movs	r1, #64	@ 0x40
 80019fe:	482f      	ldr	r0, [pc, #188]	@ (8001abc <MX_GPIO_Init+0x198>)
 8001a00:	f003 face 	bl	8004fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001a04:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a16:	2305      	movs	r3, #5
 8001a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4827      	ldr	r0, [pc, #156]	@ (8001ac0 <MX_GPIO_Init+0x19c>)
 8001a22:	f003 f8f9 	bl	8004c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	481d      	ldr	r0, [pc, #116]	@ (8001ab4 <MX_GPIO_Init+0x190>)
 8001a40:	f003 f8ea 	bl	8004c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8001a44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a52:	2300      	movs	r3, #0
 8001a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8001a56:	f107 031c 	add.w	r3, r7, #28
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4816      	ldr	r0, [pc, #88]	@ (8001ab8 <MX_GPIO_Init+0x194>)
 8001a5e:	f003 f8db 	bl	8004c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_NRST_Pin */
  GPIO_InitStruct.Pin = LCD_NRST_Pin;
 8001a62:	2340      	movs	r3, #64	@ 0x40
 8001a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a66:	2301      	movs	r3, #1
 8001a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_NRST_GPIO_Port, &GPIO_InitStruct);
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	4619      	mov	r1, r3
 8001a78:	4810      	ldr	r0, [pc, #64]	@ (8001abc <MX_GPIO_Init+0x198>)
 8001a7a:	f003 f8cd 	bl	8004c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001a7e:	2320      	movs	r3, #32
 8001a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a82:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	4619      	mov	r1, r3
 8001a92:	480b      	ldr	r0, [pc, #44]	@ (8001ac0 <MX_GPIO_Init+0x19c>)
 8001a94:	f003 f8c0 	bl	8004c18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	2017      	movs	r0, #23
 8001a9e:	f002 fdde 	bl	800465e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001aa2:	2017      	movs	r0, #23
 8001aa4:	f002 fdf7 	bl	8004696 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aa8:	bf00      	nop
 8001aaa:	3730      	adds	r7, #48	@ 0x30
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	40020800 	.word	0x40020800
 8001abc:	40020c00 	.word	0x40020c00
 8001ac0:	40020400 	.word	0x40020400

08001ac4 <DrawMainPage>:
/**
 * @brief: Draw main page and handle button label and status updates
 * @param: page_num: determines which page should be drawn from 1-10
 * @retval: none
 */
void DrawMainPage(uint8_t page_num) {
 8001ac4:	b5b0      	push	{r4, r5, r7, lr}
 8001ac6:	b0a8      	sub	sp, #160	@ 0xa0
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
	//Draw "Protocol Title" box
	lcdFillRGB(COLOR_WHITE);
 8001ace:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001ad2:	f7fe ffad 	bl	8000a30 <lcdFillRGB>
	char empty[20] = "Empty\n"; //strings from flash memory come with newline at end
 8001ad6:	4a9c      	ldr	r2, [pc, #624]	@ (8001d48 <DrawMainPage+0x284>)
 8001ad8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001adc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ae0:	6018      	str	r0, [r3, #0]
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	8019      	strh	r1, [r3, #0]
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	0c0a      	lsrs	r2, r1, #16
 8001aea:	701a      	strb	r2, [r3, #0]
 8001aec:	f107 0387 	add.w	r3, r7, #135	@ 0x87
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	731a      	strb	r2, [r3, #12]
	char pageTitle[20] = "";
 8001afa:	2300      	movs	r3, #0
 8001afc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001afe:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
	sprintf(pageTitle, "Page %d", page_num);
 8001b0c:	79fa      	ldrb	r2, [r7, #7]
 8001b0e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b12:	498e      	ldr	r1, [pc, #568]	@ (8001d4c <DrawMainPage+0x288>)
 8001b14:	4618      	mov	r0, r3
 8001b16:	f00d fb37 	bl	800f188 <siprintf>
	lcdSetCursor(10, 10);
 8001b1a:	210a      	movs	r1, #10
 8001b1c:	200a      	movs	r0, #10
 8001b1e:	f7ff fa7b 	bl	8001018 <lcdSetCursor>
	lcdSetTextColor(COLOR_BLACK, COLOR_WHITE);
 8001b22:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001b26:	2000      	movs	r0, #0
 8001b28:	f7ff f9f6 	bl	8000f18 <lcdSetTextColor>
	lcdSetTextFont(&Font20);
 8001b2c:	4888      	ldr	r0, [pc, #544]	@ (8001d50 <DrawMainPage+0x28c>)
 8001b2e:	f7ff f9e3 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf(pageTitle);
 8001b32:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff f952 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 8001b3c:	4885      	ldr	r0, [pc, #532]	@ (8001d54 <DrawMainPage+0x290>)
 8001b3e:	f7ff f9db 	bl	8000ef8 <lcdSetTextFont>

	//get button label info from flash memory
	char readBuffer1[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001b42:	2300      	movs	r3, #0
 8001b44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b46:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
 8001b54:	611a      	str	r2, [r3, #16]
 8001b56:	615a      	str	r2, [r3, #20]
 8001b58:	619a      	str	r2, [r3, #24]
	char readBuffer2[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
 8001b6c:	611a      	str	r2, [r3, #16]
 8001b6e:	615a      	str	r2, [r3, #20]
 8001b70:	619a      	str	r2, [r3, #24]
	char readBuffer3[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	f107 0310 	add.w	r3, r7, #16
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	611a      	str	r2, [r3, #16]
 8001b86:	615a      	str	r2, [r3, #20]
 8001b88:	619a      	str	r2, [r3, #24]

	//if the protocol exists, read from it. else, name it empty
	if (read_from_flash(readBuffer1, get_sector_address(page_num))) {
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f002 f83d 	bl	8003c0c <get_sector_address>
 8001b92:	4602      	mov	r2, r0
 8001b94:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f001 fb5d 	bl	800325a <read_from_flash>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00a      	beq.n	8001bbc <DrawMainPage+0xf8>
		strcpy(buttons[0].label, readBuffer1);
 8001ba6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001baa:	4619      	mov	r1, r3
 8001bac:	486a      	ldr	r0, [pc, #424]	@ (8001d58 <DrawMainPage+0x294>)
 8001bae:	f00d fbfa 	bl	800f3a6 <strcpy>
		buttons[0].status = NOT_EMPTY;
 8001bb2:	4b6a      	ldr	r3, [pc, #424]	@ (8001d5c <DrawMainPage+0x298>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8001bba:	e009      	b.n	8001bd0 <DrawMainPage+0x10c>
	} else {
		strcpy(buttons[0].label, empty);
 8001bbc:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4865      	ldr	r0, [pc, #404]	@ (8001d58 <DrawMainPage+0x294>)
 8001bc4:	f00d fbef 	bl	800f3a6 <strcpy>
		buttons[0].status = EMPTY;
 8001bc8:	4b64      	ldr	r3, [pc, #400]	@ (8001d5c <DrawMainPage+0x298>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}
	if (read_from_flash(readBuffer2,
			get_sector_address(page_num) + PROTOCOL_SIZE)) {
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 f81a 	bl	8003c0c <get_sector_address>
 8001bd8:	4603      	mov	r3, r0
	if (read_from_flash(readBuffer2,
 8001bda:	f503 53bb 	add.w	r3, r3, #5984	@ 0x1760
 8001bde:	3310      	adds	r3, #16
 8001be0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001be4:	4619      	mov	r1, r3
 8001be6:	4610      	mov	r0, r2
 8001be8:	f001 fb37 	bl	800325a <read_from_flash>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00a      	beq.n	8001c08 <DrawMainPage+0x144>
		strcpy(buttons[1].label, readBuffer2);
 8001bf2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4859      	ldr	r0, [pc, #356]	@ (8001d60 <DrawMainPage+0x29c>)
 8001bfa:	f00d fbd4 	bl	800f3a6 <strcpy>
		buttons[1].status = NOT_EMPTY;
 8001bfe:	4b57      	ldr	r3, [pc, #348]	@ (8001d5c <DrawMainPage+0x298>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8001c06:	e009      	b.n	8001c1c <DrawMainPage+0x158>
	} else {
		strcpy(buttons[1].label, empty);
 8001c08:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4854      	ldr	r0, [pc, #336]	@ (8001d60 <DrawMainPage+0x29c>)
 8001c10:	f00d fbc9 	bl	800f3a6 <strcpy>
		buttons[1].status = EMPTY;
 8001c14:	4b51      	ldr	r3, [pc, #324]	@ (8001d5c <DrawMainPage+0x298>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
	}
	if (read_from_flash(readBuffer3,
			get_sector_address(page_num) + 2 * PROTOCOL_SIZE)) {
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f001 fff4 	bl	8003c0c <get_sector_address>
 8001c24:	4603      	mov	r3, r0
	if (read_from_flash(readBuffer3,
 8001c26:	f503 533b 	add.w	r3, r3, #11968	@ 0x2ec0
 8001c2a:	3320      	adds	r3, #32
 8001c2c:	f107 020c 	add.w	r2, r7, #12
 8001c30:	4619      	mov	r1, r3
 8001c32:	4610      	mov	r0, r2
 8001c34:	f001 fb11 	bl	800325a <read_from_flash>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00a      	beq.n	8001c54 <DrawMainPage+0x190>
		strcpy(buttons[2].label, readBuffer3);
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	4619      	mov	r1, r3
 8001c44:	4847      	ldr	r0, [pc, #284]	@ (8001d64 <DrawMainPage+0x2a0>)
 8001c46:	f00d fbae 	bl	800f3a6 <strcpy>
		buttons[2].status = NOT_EMPTY;
 8001c4a:	4b44      	ldr	r3, [pc, #272]	@ (8001d5c <DrawMainPage+0x298>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8001c52:	e009      	b.n	8001c68 <DrawMainPage+0x1a4>
	} else {
		strcpy(buttons[2].label, empty);
 8001c54:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4842      	ldr	r0, [pc, #264]	@ (8001d64 <DrawMainPage+0x2a0>)
 8001c5c:	f00d fba3 	bl	800f3a6 <strcpy>
		buttons[2].status = EMPTY;
 8001c60:	4b3e      	ldr	r3, [pc, #248]	@ (8001d5c <DrawMainPage+0x298>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	}

	// Draw buttons
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c6e:	e08d      	b.n	8001d8c <DrawMainPage+0x2c8>
		lcdDrawRect(buttons[i].x, buttons[i].y, buttons[i].w, buttons[i].h,
 8001c70:	4a3a      	ldr	r2, [pc, #232]	@ (8001d5c <DrawMainPage+0x298>)
 8001c72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c76:	212a      	movs	r1, #42	@ 0x2a
 8001c78:	fb01 f303 	mul.w	r3, r1, r3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	b218      	sxth	r0, r3
 8001c82:	4a36      	ldr	r2, [pc, #216]	@ (8001d5c <DrawMainPage+0x298>)
 8001c84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c88:	212a      	movs	r1, #42	@ 0x2a
 8001c8a:	fb01 f303 	mul.w	r3, r1, r3
 8001c8e:	4413      	add	r3, r2
 8001c90:	3302      	adds	r3, #2
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	b219      	sxth	r1, r3
 8001c96:	4a31      	ldr	r2, [pc, #196]	@ (8001d5c <DrawMainPage+0x298>)
 8001c98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c9c:	242a      	movs	r4, #42	@ 0x2a
 8001c9e:	fb04 f303 	mul.w	r3, r4, r3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	b21a      	sxth	r2, r3
 8001caa:	4c2c      	ldr	r4, [pc, #176]	@ (8001d5c <DrawMainPage+0x298>)
 8001cac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cb0:	252a      	movs	r5, #42	@ 0x2a
 8001cb2:	fb05 f303 	mul.w	r3, r5, r3
 8001cb6:	4423      	add	r3, r4
 8001cb8:	3306      	adds	r3, #6
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	2400      	movs	r4, #0
 8001cc0:	9400      	str	r4, [sp, #0]
 8001cc2:	f7fe ff99 	bl	8000bf8 <lcdDrawRect>
		COLOR_BLACK);
		buttons[i].label[strlen(buttons[i].label) - 1] = ' '; //dont display null terminator
 8001cc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cca:	222a      	movs	r2, #42	@ 0x2a
 8001ccc:	fb02 f303 	mul.w	r3, r2, r3
 8001cd0:	3308      	adds	r3, #8
 8001cd2:	4a22      	ldr	r2, [pc, #136]	@ (8001d5c <DrawMainPage+0x298>)
 8001cd4:	4413      	add	r3, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fa8a 	bl	80001f0 <strlen>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	491e      	ldr	r1, [pc, #120]	@ (8001d5c <DrawMainPage+0x298>)
 8001ce2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001ce6:	202a      	movs	r0, #42	@ 0x2a
 8001ce8:	fb00 f202 	mul.w	r2, r0, r2
 8001cec:	440a      	add	r2, r1
 8001cee:	4413      	add	r3, r2
 8001cf0:	3308      	adds	r3, #8
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	701a      	strb	r2, [r3, #0]
		lcdSetCursor(buttons[i].x + 10, buttons[i].y + 10);
 8001cf6:	4a19      	ldr	r2, [pc, #100]	@ (8001d5c <DrawMainPage+0x298>)
 8001cf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cfc:	212a      	movs	r1, #42	@ 0x2a
 8001cfe:	fb01 f303 	mul.w	r3, r1, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	330a      	adds	r3, #10
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	4914      	ldr	r1, [pc, #80]	@ (8001d5c <DrawMainPage+0x298>)
 8001d0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d10:	202a      	movs	r0, #42	@ 0x2a
 8001d12:	fb00 f303 	mul.w	r3, r0, r3
 8001d16:	440b      	add	r3, r1
 8001d18:	3302      	adds	r3, #2
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	330a      	adds	r3, #10
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	4619      	mov	r1, r3
 8001d22:	4610      	mov	r0, r2
 8001d24:	f7ff f978 	bl	8001018 <lcdSetCursor>
		if (buttons[i].status == EMPTY) {
 8001d28:	4a0c      	ldr	r2, [pc, #48]	@ (8001d5c <DrawMainPage+0x298>)
 8001d2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d2e:	212a      	movs	r1, #42	@ 0x2a
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	4413      	add	r3, r2
 8001d36:	3328      	adds	r3, #40	@ 0x28
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d116      	bne.n	8001d6c <DrawMainPage+0x2a8>
			lcdPrintf("EMPTY");
 8001d3e:	480a      	ldr	r0, [pc, #40]	@ (8001d68 <DrawMainPage+0x2a4>)
 8001d40:	f7ff f84e 	bl	8000de0 <lcdPrintf>
 8001d44:	e01d      	b.n	8001d82 <DrawMainPage+0x2be>
 8001d46:	bf00      	nop
 8001d48:	08010190 	.word	0x08010190
 8001d4c:	08010180 	.word	0x08010180
 8001d50:	20000010 	.word	0x20000010
 8001d54:	20000008 	.word	0x20000008
 8001d58:	20000038 	.word	0x20000038
 8001d5c:	20000030 	.word	0x20000030
 8001d60:	20000062 	.word	0x20000062
 8001d64:	2000008c 	.word	0x2000008c
 8001d68:	08010188 	.word	0x08010188
		} else {
			lcdPrintf(buttons[i].label);
 8001d6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d70:	222a      	movs	r2, #42	@ 0x2a
 8001d72:	fb02 f303 	mul.w	r3, r2, r3
 8001d76:	3308      	adds	r3, #8
 8001d78:	4a3a      	ldr	r2, [pc, #232]	@ (8001e64 <DrawMainPage+0x3a0>)
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff f82f 	bl	8000de0 <lcdPrintf>
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8001d82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d86:	3301      	adds	r3, #1
 8001d88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001d8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	f77f af6d 	ble.w	8001c70 <DrawMainPage+0x1ac>
		}
	}

	// Draw "Next" button
	if (page_num != 10) {
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2b0a      	cmp	r3, #10
 8001d9a:	d01e      	beq.n	8001dda <DrawMainPage+0x316>
		//BSP_LCD_SetTextColor(LCD_COLOR_RED);
		lcdDrawRect(nextButton.x, nextButton.y, nextButton.w, nextButton.h,
 8001d9c:	4b32      	ldr	r3, [pc, #200]	@ (8001e68 <DrawMainPage+0x3a4>)
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	b218      	sxth	r0, r3
 8001da2:	4b31      	ldr	r3, [pc, #196]	@ (8001e68 <DrawMainPage+0x3a4>)
 8001da4:	885b      	ldrh	r3, [r3, #2]
 8001da6:	b219      	sxth	r1, r3
 8001da8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e68 <DrawMainPage+0x3a4>)
 8001daa:	889b      	ldrh	r3, [r3, #4]
 8001dac:	b21a      	sxth	r2, r3
 8001dae:	4b2e      	ldr	r3, [pc, #184]	@ (8001e68 <DrawMainPage+0x3a4>)
 8001db0:	88db      	ldrh	r3, [r3, #6]
 8001db2:	b21b      	sxth	r3, r3
 8001db4:	2400      	movs	r4, #0
 8001db6:	9400      	str	r4, [sp, #0]
 8001db8:	f7fe ff1e 	bl	8000bf8 <lcdDrawRect>
		COLOR_BLACK);
		lcdSetCursor(nextButton.x + 5, nextButton.y + 5);
 8001dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001e68 <DrawMainPage+0x3a4>)
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	3305      	adds	r3, #5
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	4b28      	ldr	r3, [pc, #160]	@ (8001e68 <DrawMainPage+0x3a4>)
 8001dc6:	885b      	ldrh	r3, [r3, #2]
 8001dc8:	3305      	adds	r3, #5
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4610      	mov	r0, r2
 8001dd0:	f7ff f922 	bl	8001018 <lcdSetCursor>
		lcdPrintf(nextButton.label);
 8001dd4:	4825      	ldr	r0, [pc, #148]	@ (8001e6c <DrawMainPage+0x3a8>)
 8001dd6:	f7ff f803 	bl	8000de0 <lcdPrintf>
	}

	// Draw "Back" button
	if (page_num != 1) {
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d01e      	beq.n	8001e1e <DrawMainPage+0x35a>
		lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8001de0:	4b23      	ldr	r3, [pc, #140]	@ (8001e70 <DrawMainPage+0x3ac>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	b218      	sxth	r0, r3
 8001de6:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <DrawMainPage+0x3ac>)
 8001de8:	885b      	ldrh	r3, [r3, #2]
 8001dea:	b219      	sxth	r1, r3
 8001dec:	4b20      	ldr	r3, [pc, #128]	@ (8001e70 <DrawMainPage+0x3ac>)
 8001dee:	889b      	ldrh	r3, [r3, #4]
 8001df0:	b21a      	sxth	r2, r3
 8001df2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e70 <DrawMainPage+0x3ac>)
 8001df4:	88db      	ldrh	r3, [r3, #6]
 8001df6:	b21b      	sxth	r3, r3
 8001df8:	2400      	movs	r4, #0
 8001dfa:	9400      	str	r4, [sp, #0]
 8001dfc:	f7fe fefc 	bl	8000bf8 <lcdDrawRect>
		COLOR_BLACK);
		lcdSetCursor(backButton.x + 5, backButton.y + 5);
 8001e00:	4b1b      	ldr	r3, [pc, #108]	@ (8001e70 <DrawMainPage+0x3ac>)
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	3305      	adds	r3, #5
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <DrawMainPage+0x3ac>)
 8001e0a:	885b      	ldrh	r3, [r3, #2]
 8001e0c:	3305      	adds	r3, #5
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	4619      	mov	r1, r3
 8001e12:	4610      	mov	r0, r2
 8001e14:	f7ff f900 	bl	8001018 <lcdSetCursor>
		lcdPrintf(backButton.label);
 8001e18:	4816      	ldr	r0, [pc, #88]	@ (8001e74 <DrawMainPage+0x3b0>)
 8001e1a:	f7fe ffe1 	bl	8000de0 <lcdPrintf>
	}
//
	//draw "Queue" button on page 1
	lcdDrawRect(queueButton.x, queueButton.y, queueButton.w, queueButton.h,
 8001e1e:	4b16      	ldr	r3, [pc, #88]	@ (8001e78 <DrawMainPage+0x3b4>)
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	b218      	sxth	r0, r3
 8001e24:	4b14      	ldr	r3, [pc, #80]	@ (8001e78 <DrawMainPage+0x3b4>)
 8001e26:	885b      	ldrh	r3, [r3, #2]
 8001e28:	b219      	sxth	r1, r3
 8001e2a:	4b13      	ldr	r3, [pc, #76]	@ (8001e78 <DrawMainPage+0x3b4>)
 8001e2c:	889b      	ldrh	r3, [r3, #4]
 8001e2e:	b21a      	sxth	r2, r3
 8001e30:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <DrawMainPage+0x3b4>)
 8001e32:	88db      	ldrh	r3, [r3, #6]
 8001e34:	b21b      	sxth	r3, r3
 8001e36:	2400      	movs	r4, #0
 8001e38:	9400      	str	r4, [sp, #0]
 8001e3a:	f7fe fedd 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(queueButton.x + 5, queueButton.y + 5);
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e78 <DrawMainPage+0x3b4>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	3305      	adds	r3, #5
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <DrawMainPage+0x3b4>)
 8001e48:	885b      	ldrh	r3, [r3, #2]
 8001e4a:	3305      	adds	r3, #5
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4610      	mov	r0, r2
 8001e52:	f7ff f8e1 	bl	8001018 <lcdSetCursor>
	lcdPrintf(queueButton.label);
 8001e56:	4809      	ldr	r0, [pc, #36]	@ (8001e7c <DrawMainPage+0x3b8>)
 8001e58:	f7fe ffc2 	bl	8000de0 <lcdPrintf>
}
 8001e5c:	bf00      	nop
 8001e5e:	3798      	adds	r7, #152	@ 0x98
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bdb0      	pop	{r4, r5, r7, pc}
 8001e64:	20000030 	.word	0x20000030
 8001e68:	200001e4 	.word	0x200001e4
 8001e6c:	200001ec 	.word	0x200001ec
 8001e70:	200001b8 	.word	0x200001b8
 8001e74:	200001c0 	.word	0x200001c0
 8001e78:	200000b0 	.word	0x200000b0
 8001e7c:	200000b8 	.word	0x200000b8

08001e80 <DrawInfoPage>:
/**
 * @brief: Draw select page with run, delete and queue buttons
 * @param: protocolTitle: title of the protocol to be displayed
 * @retval: none
 */
void DrawInfoPage(char protocolTitle[MAX_LINE_LENGTH]) {
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	6078      	str	r0, [r7, #4]
	lcdFillRGB(COLOR_WHITE);
 8001e88:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e8c:	f7fe fdd0 	bl	8000a30 <lcdFillRGB>
	//Display protocol name at top of screen
	lcdSetCursor(90, 10);
 8001e90:	210a      	movs	r1, #10
 8001e92:	205a      	movs	r0, #90	@ 0x5a
 8001e94:	f7ff f8c0 	bl	8001018 <lcdSetCursor>
	lcdSetTextFont(&Font20);
 8001e98:	4844      	ldr	r0, [pc, #272]	@ (8001fac <DrawInfoPage+0x12c>)
 8001e9a:	f7ff f82d 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf(protocolTitle);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe ff9e 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 8001ea4:	4842      	ldr	r0, [pc, #264]	@ (8001fb0 <DrawInfoPage+0x130>)
 8001ea6:	f7ff f827 	bl	8000ef8 <lcdSetTextFont>

	//Draw "QueueSelect" button on select page
	lcdDrawRect(queueSelectButton.x, queueSelectButton.y, queueSelectButton.w,
 8001eaa:	4b42      	ldr	r3, [pc, #264]	@ (8001fb4 <DrawInfoPage+0x134>)
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	b218      	sxth	r0, r3
 8001eb0:	4b40      	ldr	r3, [pc, #256]	@ (8001fb4 <DrawInfoPage+0x134>)
 8001eb2:	885b      	ldrh	r3, [r3, #2]
 8001eb4:	b219      	sxth	r1, r3
 8001eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8001fb4 <DrawInfoPage+0x134>)
 8001eb8:	889b      	ldrh	r3, [r3, #4]
 8001eba:	b21a      	sxth	r2, r3
			queueSelectButton.h, COLOR_BLACK);
 8001ebc:	4b3d      	ldr	r3, [pc, #244]	@ (8001fb4 <DrawInfoPage+0x134>)
 8001ebe:	88db      	ldrh	r3, [r3, #6]
	lcdDrawRect(queueSelectButton.x, queueSelectButton.y, queueSelectButton.w,
 8001ec0:	b21b      	sxth	r3, r3
 8001ec2:	2400      	movs	r4, #0
 8001ec4:	9400      	str	r4, [sp, #0]
 8001ec6:	f7fe fe97 	bl	8000bf8 <lcdDrawRect>
	lcdSetCursor(queueSelectButton.x + 10, queueSelectButton.y + 10);
 8001eca:	4b3a      	ldr	r3, [pc, #232]	@ (8001fb4 <DrawInfoPage+0x134>)
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	330a      	adds	r3, #10
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	4b38      	ldr	r3, [pc, #224]	@ (8001fb4 <DrawInfoPage+0x134>)
 8001ed4:	885b      	ldrh	r3, [r3, #2]
 8001ed6:	330a      	adds	r3, #10
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	4619      	mov	r1, r3
 8001edc:	4610      	mov	r0, r2
 8001ede:	f7ff f89b 	bl	8001018 <lcdSetCursor>
	lcdPrintf(queueSelectButton.label);
 8001ee2:	4835      	ldr	r0, [pc, #212]	@ (8001fb8 <DrawInfoPage+0x138>)
 8001ee4:	f7fe ff7c 	bl	8000de0 <lcdPrintf>

	//Draw "Select" button
	lcdDrawRect(selectButton.x, selectButton.y, selectButton.w, selectButton.h,
 8001ee8:	4b34      	ldr	r3, [pc, #208]	@ (8001fbc <DrawInfoPage+0x13c>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	b218      	sxth	r0, r3
 8001eee:	4b33      	ldr	r3, [pc, #204]	@ (8001fbc <DrawInfoPage+0x13c>)
 8001ef0:	885b      	ldrh	r3, [r3, #2]
 8001ef2:	b219      	sxth	r1, r3
 8001ef4:	4b31      	ldr	r3, [pc, #196]	@ (8001fbc <DrawInfoPage+0x13c>)
 8001ef6:	889b      	ldrh	r3, [r3, #4]
 8001ef8:	b21a      	sxth	r2, r3
 8001efa:	4b30      	ldr	r3, [pc, #192]	@ (8001fbc <DrawInfoPage+0x13c>)
 8001efc:	88db      	ldrh	r3, [r3, #6]
 8001efe:	b21b      	sxth	r3, r3
 8001f00:	2400      	movs	r4, #0
 8001f02:	9400      	str	r4, [sp, #0]
 8001f04:	f7fe fe78 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(selectButton.x + 10, selectButton.y + 10);
 8001f08:	4b2c      	ldr	r3, [pc, #176]	@ (8001fbc <DrawInfoPage+0x13c>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	330a      	adds	r3, #10
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	4b2a      	ldr	r3, [pc, #168]	@ (8001fbc <DrawInfoPage+0x13c>)
 8001f12:	885b      	ldrh	r3, [r3, #2]
 8001f14:	330a      	adds	r3, #10
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	f7ff f87c 	bl	8001018 <lcdSetCursor>
	lcdPrintf(selectButton.label);
 8001f20:	4827      	ldr	r0, [pc, #156]	@ (8001fc0 <DrawInfoPage+0x140>)
 8001f22:	f7fe ff5d 	bl	8000de0 <lcdPrintf>

	//Draw "Delete" button
	lcdDrawRect(deleteButton.x, deleteButton.y, deleteButton.w, deleteButton.h,
 8001f26:	4b27      	ldr	r3, [pc, #156]	@ (8001fc4 <DrawInfoPage+0x144>)
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	b218      	sxth	r0, r3
 8001f2c:	4b25      	ldr	r3, [pc, #148]	@ (8001fc4 <DrawInfoPage+0x144>)
 8001f2e:	885b      	ldrh	r3, [r3, #2]
 8001f30:	b219      	sxth	r1, r3
 8001f32:	4b24      	ldr	r3, [pc, #144]	@ (8001fc4 <DrawInfoPage+0x144>)
 8001f34:	889b      	ldrh	r3, [r3, #4]
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	4b22      	ldr	r3, [pc, #136]	@ (8001fc4 <DrawInfoPage+0x144>)
 8001f3a:	88db      	ldrh	r3, [r3, #6]
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	2400      	movs	r4, #0
 8001f40:	9400      	str	r4, [sp, #0]
 8001f42:	f7fe fe59 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(deleteButton.x + 10, deleteButton.y + 10);
 8001f46:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc4 <DrawInfoPage+0x144>)
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	330a      	adds	r3, #10
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc4 <DrawInfoPage+0x144>)
 8001f50:	885b      	ldrh	r3, [r3, #2]
 8001f52:	330a      	adds	r3, #10
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	4619      	mov	r1, r3
 8001f58:	4610      	mov	r0, r2
 8001f5a:	f7ff f85d 	bl	8001018 <lcdSetCursor>
	lcdPrintf(deleteButton.label);
 8001f5e:	481a      	ldr	r0, [pc, #104]	@ (8001fc8 <DrawInfoPage+0x148>)
 8001f60:	f7fe ff3e 	bl	8000de0 <lcdPrintf>

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8001f64:	4b19      	ldr	r3, [pc, #100]	@ (8001fcc <DrawInfoPage+0x14c>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	b218      	sxth	r0, r3
 8001f6a:	4b18      	ldr	r3, [pc, #96]	@ (8001fcc <DrawInfoPage+0x14c>)
 8001f6c:	885b      	ldrh	r3, [r3, #2]
 8001f6e:	b219      	sxth	r1, r3
 8001f70:	4b16      	ldr	r3, [pc, #88]	@ (8001fcc <DrawInfoPage+0x14c>)
 8001f72:	889b      	ldrh	r3, [r3, #4]
 8001f74:	b21a      	sxth	r2, r3
 8001f76:	4b15      	ldr	r3, [pc, #84]	@ (8001fcc <DrawInfoPage+0x14c>)
 8001f78:	88db      	ldrh	r3, [r3, #6]
 8001f7a:	b21b      	sxth	r3, r3
 8001f7c:	2400      	movs	r4, #0
 8001f7e:	9400      	str	r4, [sp, #0]
 8001f80:	f7fe fe3a 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 8001f84:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <DrawInfoPage+0x14c>)
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	330a      	adds	r3, #10
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fcc <DrawInfoPage+0x14c>)
 8001f8e:	885b      	ldrh	r3, [r3, #2]
 8001f90:	330a      	adds	r3, #10
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	4619      	mov	r1, r3
 8001f96:	4610      	mov	r0, r2
 8001f98:	f7ff f83e 	bl	8001018 <lcdSetCursor>
	lcdPrintf(backButton.label);
 8001f9c:	480c      	ldr	r0, [pc, #48]	@ (8001fd0 <DrawInfoPage+0x150>)
 8001f9e:	f7fe ff1f 	bl	8000de0 <lcdPrintf>
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd90      	pop	{r4, r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000010 	.word	0x20000010
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	20000134 	.word	0x20000134
 8001fb8:	2000013c 	.word	0x2000013c
 8001fbc:	20000160 	.word	0x20000160
 8001fc0:	20000168 	.word	0x20000168
 8001fc4:	2000018c 	.word	0x2000018c
 8001fc8:	20000194 	.word	0x20000194
 8001fcc:	200001b8 	.word	0x200001b8
 8001fd0:	200001c0 	.word	0x200001c0

08001fd4 <DrawConfirmationPage>:
 * @brief: Confirmation page to delete a protocol
 * @param: sector: which sector in flash memory the protocol exists
 * @param: offset: which section of the sector the protocol exists
 * @retval: none
 */
void DrawConfirmationPage(uint32_t sector, uint32_t offset) {
 8001fd4:	b590      	push	{r4, r7, lr}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
	lcdFillRGB(COLOR_WHITE);
 8001fde:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001fe2:	f7fe fd25 	bl	8000a30 <lcdFillRGB>

	//display confirmation text
	lcdSetCursor(10, 10);
 8001fe6:	210a      	movs	r1, #10
 8001fe8:	200a      	movs	r0, #10
 8001fea:	f7ff f815 	bl	8001018 <lcdSetCursor>
	lcdSetTextFont(&Font20);
 8001fee:	482c      	ldr	r0, [pc, #176]	@ (80020a0 <DrawConfirmationPage+0xcc>)
 8001ff0:	f7fe ff82 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf("Delete: ");
 8001ff4:	482b      	ldr	r0, [pc, #172]	@ (80020a4 <DrawConfirmationPage+0xd0>)
 8001ff6:	f7fe fef3 	bl	8000de0 <lcdPrintf>
	lcdPrintf(buttons[offset].label);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	222a      	movs	r2, #42	@ 0x2a
 8001ffe:	fb02 f303 	mul.w	r3, r2, r3
 8002002:	3308      	adds	r3, #8
 8002004:	4a28      	ldr	r2, [pc, #160]	@ (80020a8 <DrawConfirmationPage+0xd4>)
 8002006:	4413      	add	r3, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fee9 	bl	8000de0 <lcdPrintf>
	lcdPrintf("?");
 800200e:	4827      	ldr	r0, [pc, #156]	@ (80020ac <DrawConfirmationPage+0xd8>)
 8002010:	f7fe fee6 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 8002014:	4826      	ldr	r0, [pc, #152]	@ (80020b0 <DrawConfirmationPage+0xdc>)
 8002016:	f7fe ff6f 	bl	8000ef8 <lcdSetTextFont>

	//Draw "Confirm" button
	lcdDrawRect(confirmButton.x, confirmButton.y, confirmButton.w,
 800201a:	4b26      	ldr	r3, [pc, #152]	@ (80020b4 <DrawConfirmationPage+0xe0>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	b218      	sxth	r0, r3
 8002020:	4b24      	ldr	r3, [pc, #144]	@ (80020b4 <DrawConfirmationPage+0xe0>)
 8002022:	885b      	ldrh	r3, [r3, #2]
 8002024:	b219      	sxth	r1, r3
 8002026:	4b23      	ldr	r3, [pc, #140]	@ (80020b4 <DrawConfirmationPage+0xe0>)
 8002028:	889b      	ldrh	r3, [r3, #4]
 800202a:	b21a      	sxth	r2, r3
			confirmButton.h, COLOR_BLACK);
 800202c:	4b21      	ldr	r3, [pc, #132]	@ (80020b4 <DrawConfirmationPage+0xe0>)
 800202e:	88db      	ldrh	r3, [r3, #6]
	lcdDrawRect(confirmButton.x, confirmButton.y, confirmButton.w,
 8002030:	b21b      	sxth	r3, r3
 8002032:	2400      	movs	r4, #0
 8002034:	9400      	str	r4, [sp, #0]
 8002036:	f7fe fddf 	bl	8000bf8 <lcdDrawRect>
	lcdSetCursor(confirmButton.x + 10, confirmButton.y + 10);
 800203a:	4b1e      	ldr	r3, [pc, #120]	@ (80020b4 <DrawConfirmationPage+0xe0>)
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	330a      	adds	r3, #10
 8002040:	b29a      	uxth	r2, r3
 8002042:	4b1c      	ldr	r3, [pc, #112]	@ (80020b4 <DrawConfirmationPage+0xe0>)
 8002044:	885b      	ldrh	r3, [r3, #2]
 8002046:	330a      	adds	r3, #10
 8002048:	b29b      	uxth	r3, r3
 800204a:	4619      	mov	r1, r3
 800204c:	4610      	mov	r0, r2
 800204e:	f7fe ffe3 	bl	8001018 <lcdSetCursor>
	lcdPrintf(confirmButton.label);
 8002052:	4819      	ldr	r0, [pc, #100]	@ (80020b8 <DrawConfirmationPage+0xe4>)
 8002054:	f7fe fec4 	bl	8000de0 <lcdPrintf>

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8002058:	4b18      	ldr	r3, [pc, #96]	@ (80020bc <DrawConfirmationPage+0xe8>)
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	b218      	sxth	r0, r3
 800205e:	4b17      	ldr	r3, [pc, #92]	@ (80020bc <DrawConfirmationPage+0xe8>)
 8002060:	885b      	ldrh	r3, [r3, #2]
 8002062:	b219      	sxth	r1, r3
 8002064:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <DrawConfirmationPage+0xe8>)
 8002066:	889b      	ldrh	r3, [r3, #4]
 8002068:	b21a      	sxth	r2, r3
 800206a:	4b14      	ldr	r3, [pc, #80]	@ (80020bc <DrawConfirmationPage+0xe8>)
 800206c:	88db      	ldrh	r3, [r3, #6]
 800206e:	b21b      	sxth	r3, r3
 8002070:	2400      	movs	r4, #0
 8002072:	9400      	str	r4, [sp, #0]
 8002074:	f7fe fdc0 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 8002078:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <DrawConfirmationPage+0xe8>)
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	330a      	adds	r3, #10
 800207e:	b29a      	uxth	r2, r3
 8002080:	4b0e      	ldr	r3, [pc, #56]	@ (80020bc <DrawConfirmationPage+0xe8>)
 8002082:	885b      	ldrh	r3, [r3, #2]
 8002084:	330a      	adds	r3, #10
 8002086:	b29b      	uxth	r3, r3
 8002088:	4619      	mov	r1, r3
 800208a:	4610      	mov	r0, r2
 800208c:	f7fe ffc4 	bl	8001018 <lcdSetCursor>
	lcdPrintf(backButton.label);
 8002090:	480b      	ldr	r0, [pc, #44]	@ (80020c0 <DrawConfirmationPage+0xec>)
 8002092:	f7fe fea5 	bl	8000de0 <lcdPrintf>
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	bd90      	pop	{r4, r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000010 	.word	0x20000010
 80020a4:	080101a4 	.word	0x080101a4
 80020a8:	20000030 	.word	0x20000030
 80020ac:	080101b0 	.word	0x080101b0
 80020b0:	20000008 	.word	0x20000008
 80020b4:	20000108 	.word	0x20000108
 80020b8:	20000110 	.word	0x20000110
 80020bc:	200001b8 	.word	0x200001b8
 80020c0:	200001c0 	.word	0x200001c0

080020c4 <DrawQueuePage>:
/**
 * @brief: Queue page has up to 10 protocols lined up
 * @param: queueSize: number of protocols in the queue
 * @retval: none
 */
void DrawQueuePage(uint8_t queueSize) {
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b093      	sub	sp, #76	@ 0x4c
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
	lcdFillRGB(COLOR_WHITE);
 80020ce:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80020d2:	f7fe fcad 	bl	8000a30 <lcdFillRGB>
	char pageTitle[20] = "";
 80020d6:	2300      	movs	r3, #0
 80020d8:	623b      	str	r3, [r7, #32]
 80020da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]
	sprintf(pageTitle, "Queue Size: %d", queueSize);
 80020e8:	79fa      	ldrb	r2, [r7, #7]
 80020ea:	f107 0320 	add.w	r3, r7, #32
 80020ee:	495e      	ldr	r1, [pc, #376]	@ (8002268 <DrawQueuePage+0x1a4>)
 80020f0:	4618      	mov	r0, r3
 80020f2:	f00d f849 	bl	800f188 <siprintf>
	//Display Queue at top of the screen
	lcdSetCursor(60, 10);
 80020f6:	210a      	movs	r1, #10
 80020f8:	203c      	movs	r0, #60	@ 0x3c
 80020fa:	f7fe ff8d 	bl	8001018 <lcdSetCursor>
	lcdSetTextFont(&Font20);
 80020fe:	485b      	ldr	r0, [pc, #364]	@ (800226c <DrawQueuePage+0x1a8>)
 8002100:	f7fe fefa 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf(pageTitle);
 8002104:	f107 0320 	add.w	r3, r7, #32
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fe69 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 800210e:	4858      	ldr	r0, [pc, #352]	@ (8002270 <DrawQueuePage+0x1ac>)
 8002110:	f7fe fef2 	bl	8000ef8 <lcdSetTextFont>

	//display protocols in queue here
	char format[20] = "";
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	f107 0310 	add.w	r3, r7, #16
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
	int startSpotX, startSpotY;
	for (uint8_t i = 0; i < queueSize; i++) {
 8002126:	2300      	movs	r3, #0
 8002128:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800212c:	e055      	b.n	80021da <DrawQueuePage+0x116>
		if (i < 5) {
 800212e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002132:	2b04      	cmp	r3, #4
 8002134:	d804      	bhi.n	8002140 <DrawQueuePage+0x7c>
			startSpotX = 10;
 8002136:	230a      	movs	r3, #10
 8002138:	63fb      	str	r3, [r7, #60]	@ 0x3c
			startSpotY = 50;
 800213a:	2332      	movs	r3, #50	@ 0x32
 800213c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800213e:	e004      	b.n	800214a <DrawQueuePage+0x86>
		} else {
			startSpotX = 160;
 8002140:	23a0      	movs	r3, #160	@ 0xa0
 8002142:	63fb      	str	r3, [r7, #60]	@ 0x3c
			startSpotY = 50 - 100;	//convoluted ik
 8002144:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 8002148:	63bb      	str	r3, [r7, #56]	@ 0x38
		}
		sprintf(format, "%d.) ", i + 1);
 800214a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	4947      	ldr	r1, [pc, #284]	@ (8002274 <DrawQueuePage+0x1b0>)
 8002156:	4618      	mov	r0, r3
 8002158:	f00d f816 	bl	800f188 <siprintf>
		lcdSetCursor(startSpotX, startSpotY + i * 20);
 800215c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800215e:	b298      	uxth	r0, r3
 8002160:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002164:	b29b      	uxth	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	0092      	lsls	r2, r2, #2
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	b29a      	uxth	r2, r3
 8002170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002172:	b29b      	uxth	r3, r3
 8002174:	4413      	add	r3, r2
 8002176:	b29b      	uxth	r3, r3
 8002178:	4619      	mov	r1, r3
 800217a:	f7fe ff4d 	bl	8001018 <lcdSetCursor>
		lcdSetTextFont(&Font12);
 800217e:	483e      	ldr	r0, [pc, #248]	@ (8002278 <DrawQueuePage+0x1b4>)
 8002180:	f7fe feba 	bl	8000ef8 <lcdSetTextFont>
		lcdPrintf(format);
 8002184:	f107 030c 	add.w	r3, r7, #12
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe fe29 	bl	8000de0 <lcdPrintf>
		lcdSetTextFont(&Font16);
 800218e:	4838      	ldr	r0, [pc, #224]	@ (8002270 <DrawQueuePage+0x1ac>)
 8002190:	f7fe feb2 	bl	8000ef8 <lcdSetTextFont>
		lcdSetCursor(startSpotX + 24, startSpotY + i * 20);
 8002194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002196:	b29b      	uxth	r3, r3
 8002198:	3318      	adds	r3, #24
 800219a:	b298      	uxth	r0, r3
 800219c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	0092      	lsls	r2, r2, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	4413      	add	r3, r2
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	4619      	mov	r1, r3
 80021b6:	f7fe ff2f 	bl	8001018 <lcdSetCursor>
		lcdPrintf(queueBuffer[i][0]);
 80021ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80021be:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 80021c2:	fb02 f303 	mul.w	r3, r2, r3
 80021c6:	4a2d      	ldr	r2, [pc, #180]	@ (800227c <DrawQueuePage+0x1b8>)
 80021c8:	4413      	add	r3, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fe08 	bl	8000de0 <lcdPrintf>
	for (uint8_t i = 0; i < queueSize; i++) {
 80021d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80021d4:	3301      	adds	r3, #1
 80021d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80021da:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d3a4      	bcc.n	800212e <DrawQueuePage+0x6a>

	}

	//Draw "Run" button
	lcdDrawRect(runButton.x, runButton.y, runButton.w, runButton.h,
 80021e4:	4b26      	ldr	r3, [pc, #152]	@ (8002280 <DrawQueuePage+0x1bc>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	b218      	sxth	r0, r3
 80021ea:	4b25      	ldr	r3, [pc, #148]	@ (8002280 <DrawQueuePage+0x1bc>)
 80021ec:	885b      	ldrh	r3, [r3, #2]
 80021ee:	b219      	sxth	r1, r3
 80021f0:	4b23      	ldr	r3, [pc, #140]	@ (8002280 <DrawQueuePage+0x1bc>)
 80021f2:	889b      	ldrh	r3, [r3, #4]
 80021f4:	b21a      	sxth	r2, r3
 80021f6:	4b22      	ldr	r3, [pc, #136]	@ (8002280 <DrawQueuePage+0x1bc>)
 80021f8:	88db      	ldrh	r3, [r3, #6]
 80021fa:	b21b      	sxth	r3, r3
 80021fc:	2400      	movs	r4, #0
 80021fe:	9400      	str	r4, [sp, #0]
 8002200:	f7fe fcfa 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(runButton.x + 10, runButton.y + 10);
 8002204:	4b1e      	ldr	r3, [pc, #120]	@ (8002280 <DrawQueuePage+0x1bc>)
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	330a      	adds	r3, #10
 800220a:	b29a      	uxth	r2, r3
 800220c:	4b1c      	ldr	r3, [pc, #112]	@ (8002280 <DrawQueuePage+0x1bc>)
 800220e:	885b      	ldrh	r3, [r3, #2]
 8002210:	330a      	adds	r3, #10
 8002212:	b29b      	uxth	r3, r3
 8002214:	4619      	mov	r1, r3
 8002216:	4610      	mov	r0, r2
 8002218:	f7fe fefe 	bl	8001018 <lcdSetCursor>
	lcdPrintf(runButton.label);
 800221c:	4819      	ldr	r0, [pc, #100]	@ (8002284 <DrawQueuePage+0x1c0>)
 800221e:	f7fe fddf 	bl	8000de0 <lcdPrintf>

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8002222:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <DrawQueuePage+0x1c4>)
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	b218      	sxth	r0, r3
 8002228:	4b17      	ldr	r3, [pc, #92]	@ (8002288 <DrawQueuePage+0x1c4>)
 800222a:	885b      	ldrh	r3, [r3, #2]
 800222c:	b219      	sxth	r1, r3
 800222e:	4b16      	ldr	r3, [pc, #88]	@ (8002288 <DrawQueuePage+0x1c4>)
 8002230:	889b      	ldrh	r3, [r3, #4]
 8002232:	b21a      	sxth	r2, r3
 8002234:	4b14      	ldr	r3, [pc, #80]	@ (8002288 <DrawQueuePage+0x1c4>)
 8002236:	88db      	ldrh	r3, [r3, #6]
 8002238:	b21b      	sxth	r3, r3
 800223a:	2400      	movs	r4, #0
 800223c:	9400      	str	r4, [sp, #0]
 800223e:	f7fe fcdb 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 8002242:	4b11      	ldr	r3, [pc, #68]	@ (8002288 <DrawQueuePage+0x1c4>)
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	330a      	adds	r3, #10
 8002248:	b29a      	uxth	r2, r3
 800224a:	4b0f      	ldr	r3, [pc, #60]	@ (8002288 <DrawQueuePage+0x1c4>)
 800224c:	885b      	ldrh	r3, [r3, #2]
 800224e:	330a      	adds	r3, #10
 8002250:	b29b      	uxth	r3, r3
 8002252:	4619      	mov	r1, r3
 8002254:	4610      	mov	r0, r2
 8002256:	f7fe fedf 	bl	8001018 <lcdSetCursor>
	lcdPrintf(backButton.label);
 800225a:	480c      	ldr	r0, [pc, #48]	@ (800228c <DrawQueuePage+0x1c8>)
 800225c:	f7fe fdc0 	bl	8000de0 <lcdPrintf>
}
 8002260:	bf00      	nop
 8002262:	3744      	adds	r7, #68	@ 0x44
 8002264:	46bd      	mov	sp, r7
 8002266:	bd90      	pop	{r4, r7, pc}
 8002268:	080101b4 	.word	0x080101b4
 800226c:	20000010 	.word	0x20000010
 8002270:	20000008 	.word	0x20000008
 8002274:	080101c4 	.word	0x080101c4
 8002278:	20000000 	.word	0x20000000
 800227c:	200005d8 	.word	0x200005d8
 8002280:	200000dc 	.word	0x200000dc
 8002284:	200000e4 	.word	0x200000e4
 8002288:	200001b8 	.word	0x200001b8
 800228c:	200001c0 	.word	0x200001c0

08002290 <DrawProgressPage>:
 * @param: protocolTitle: display protocol being run
 * @param: rx_byte: current motor movement type
 * @param: rx_data: current motor movement info
 * @retval: none
 */
void DrawProgressPage(char protocolTitle[20], uint8_t rx_byte, char *rx_data) {
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b0d3      	sub	sp, #332	@ 0x14c
 8002294:	af02      	add	r7, sp, #8
 8002296:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800229a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800229e:	6018      	str	r0, [r3, #0]
 80022a0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80022a4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80022ae:	f2a3 1335 	subw	r3, r3, #309	@ 0x135
 80022b2:	460a      	mov	r2, r1
 80022b4:	701a      	strb	r2, [r3, #0]
	lcdFillRGB(COLOR_WHITE);
 80022b6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80022ba:	f7fe fbb9 	bl	8000a30 <lcdFillRGB>

	//protocol title
	lcdSetCursor(100, 10);
 80022be:	210a      	movs	r1, #10
 80022c0:	2064      	movs	r0, #100	@ 0x64
 80022c2:	f7fe fea9 	bl	8001018 <lcdSetCursor>
	lcdPrintf(currentProtocolTitle);
 80022c6:	48d0      	ldr	r0, [pc, #832]	@ (8002608 <DrawProgressPage+0x378>)
 80022c8:	f7fe fd8a 	bl	8000de0 <lcdPrintf>

	//bind
	if (rx_byte == 'B') {
 80022cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80022d0:	f2a3 1335 	subw	r3, r3, #309	@ 0x135
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b42      	cmp	r3, #66	@ 0x42
 80022d8:	f040 8137 	bne.w	800254a <DrawProgressPage+0x2ba>
		//protocol type
		char protocolType[20] = "";
 80022dc:	2300      	movs	r3, #0
 80022de:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80022e2:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	60da      	str	r2, [r3, #12]
		sprintf(protocolType, "Bind");
 80022f0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022f4:	49c5      	ldr	r1, [pc, #788]	@ (800260c <DrawProgressPage+0x37c>)
 80022f6:	4618      	mov	r0, r3
 80022f8:	f00c ff46 	bl	800f188 <siprintf>
		lcdSetCursor(10, 30);
 80022fc:	211e      	movs	r1, #30
 80022fe:	200a      	movs	r0, #10
 8002300:	f7fe fe8a 	bl	8001018 <lcdSetCursor>
		lcdSetTextFont(&Font16);
 8002304:	48c2      	ldr	r0, [pc, #776]	@ (8002610 <DrawProgressPage+0x380>)
 8002306:	f7fe fdf7 	bl	8000ef8 <lcdSetTextFont>
		lcdPrintf(protocolType);
 800230a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fd66 	bl	8000de0 <lcdPrintf>
		//lcdSetTextFont(&Font16);
		//speed
		char speed[20] = "";
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800231a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	60da      	str	r2, [r3, #12]
		sprintf(speed, "Speed: %c", rx_data[1]);
 8002328:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800232c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	3301      	adds	r3, #1
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800233c:	49b5      	ldr	r1, [pc, #724]	@ (8002614 <DrawProgressPage+0x384>)
 800233e:	4618      	mov	r0, r3
 8002340:	f00c ff22 	bl	800f188 <siprintf>
		lcdSetCursor(10, 50);
 8002344:	2132      	movs	r1, #50	@ 0x32
 8002346:	200a      	movs	r0, #10
 8002348:	f7fe fe66 	bl	8001018 <lcdSetCursor>
		lcdPrintf(speed);
 800234c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe fd45 	bl	8000de0 <lcdPrintf>
		//duration
		char duration[20] = "";
 8002356:	2300      	movs	r3, #0
 8002358:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800235c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
		uint32_t durationInt = ConvertCharsToInt('0', rx_data[2], rx_data[3]);
 800236a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800236e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3302      	adds	r3, #2
 8002376:	7819      	ldrb	r1, [r3, #0]
 8002378:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800237c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	3303      	adds	r3, #3
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	2030      	movs	r0, #48	@ 0x30
 800238a:	f000 fa81 	bl	8002890 <ConvertCharsToInt>
 800238e:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
		//sprintf(duration, "Duration: %c%c", rx_data[2], rx_data[3]);
		sprintf(duration, "Duration: %d", durationInt);
 8002392:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8002396:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800239a:	499f      	ldr	r1, [pc, #636]	@ (8002618 <DrawProgressPage+0x388>)
 800239c:	4618      	mov	r0, r3
 800239e:	f00c fef3 	bl	800f188 <siprintf>
		lcdSetCursor(10, 70);
 80023a2:	2146      	movs	r1, #70	@ 0x46
 80023a4:	200a      	movs	r0, #10
 80023a6:	f7fe fe37 	bl	8001018 <lcdSetCursor>
		lcdPrintf(duration);
 80023aa:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe fd16 	bl	8000de0 <lcdPrintf>
		//volume
		char volume[20] = "";
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80023ba:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	609a      	str	r2, [r3, #8]
 80023c6:	60da      	str	r2, [r3, #12]
		uint32_t volumeInt = ConvertCharsToInt(rx_data[4], rx_data[5], rx_data[6]);
 80023c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80023cc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	3304      	adds	r3, #4
 80023d4:	7818      	ldrb	r0, [r3, #0]
 80023d6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80023da:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	3305      	adds	r3, #5
 80023e2:	7819      	ldrb	r1, [r3, #0]
 80023e4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80023e8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	3306      	adds	r3, #6
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	f000 fa4c 	bl	8002890 <ConvertCharsToInt>
 80023f8:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138
		//sprintf(volume, "Volume: %c%c%c", rx_data[4], rx_data[5], rx_data[6]);
		sprintf(volume, "Volume: %d", volumeInt);
 80023fc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002400:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8002404:	4985      	ldr	r1, [pc, #532]	@ (800261c <DrawProgressPage+0x38c>)
 8002406:	4618      	mov	r0, r3
 8002408:	f00c febe 	bl	800f188 <siprintf>
		lcdSetCursor(10, 90);
 800240c:	215a      	movs	r1, #90	@ 0x5a
 800240e:	200a      	movs	r0, #10
 8002410:	f7fe fe02 	bl	8001018 <lcdSetCursor>
		lcdPrintf(volume);
 8002414:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe fce1 	bl	8000de0 <lcdPrintf>
		//depth
		char depth[20] = "";
 800241e:	2300      	movs	r3, #0
 8002420:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002424:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
		uint32_t depthInt = ConvertCharsToInt(rx_data[7], rx_data[8], rx_data[9]);
 8002432:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002436:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3307      	adds	r3, #7
 800243e:	7818      	ldrb	r0, [r3, #0]
 8002440:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002444:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3308      	adds	r3, #8
 800244c:	7819      	ldrb	r1, [r3, #0]
 800244e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002452:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	3309      	adds	r3, #9
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	f000 fa17 	bl	8002890 <ConvertCharsToInt>
 8002462:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
		//sprintf(depth, "Depth: %c%c%c", rx_data[7], rx_data[8], rx_data[9]);
		sprintf(depth, "Depth: %d", depthInt);
 8002466:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800246a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800246e:	496c      	ldr	r1, [pc, #432]	@ (8002620 <DrawProgressPage+0x390>)
 8002470:	4618      	mov	r0, r3
 8002472:	f00c fe89 	bl	800f188 <siprintf>
		lcdSetCursor(10, 110);
 8002476:	216e      	movs	r1, #110	@ 0x6e
 8002478:	200a      	movs	r0, #10
 800247a:	f7fe fdcd 	bl	8001018 <lcdSetCursor>
		lcdPrintf(depth);
 800247e:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe fcac 	bl	8000de0 <lcdPrintf>
		//pauseDuration
		char pauseDuration[20] = "";
 8002488:	2300      	movs	r3, #0
 800248a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800248e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]
		uint32_t pauseInt = ConvertCharsToInt('0', rx_data[10], rx_data[11]);
 800249c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80024a0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	330a      	adds	r3, #10
 80024a8:	7819      	ldrb	r1, [r3, #0]
 80024aa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80024ae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	330b      	adds	r3, #11
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	2030      	movs	r0, #48	@ 0x30
 80024bc:	f000 f9e8 	bl	8002890 <ConvertCharsToInt>
 80024c0:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
		sprintf(pauseDuration, "PauseDuration: %d", pauseInt);
 80024c4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80024c8:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80024cc:	4955      	ldr	r1, [pc, #340]	@ (8002624 <DrawProgressPage+0x394>)
 80024ce:	4618      	mov	r0, r3
 80024d0:	f00c fe5a 	bl	800f188 <siprintf>
		lcdSetCursor(10, 130);
 80024d4:	2182      	movs	r1, #130	@ 0x82
 80024d6:	200a      	movs	r0, #10
 80024d8:	f7fe fd9e 	bl	8001018 <lcdSetCursor>
		lcdPrintf(pauseDuration);
 80024dc:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe fc7d 	bl	8000de0 <lcdPrintf>
		//repeat
		char repeat[20] = "";
 80024e6:	2300      	movs	r3, #0
 80024e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80024ec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
		uint32_t repeatInt = ConvertCharsToInt('0', rx_data[12], rx_data[13]);
 80024fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80024fe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	330c      	adds	r3, #12
 8002506:	7819      	ldrb	r1, [r3, #0]
 8002508:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800250c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	330d      	adds	r3, #13
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	2030      	movs	r0, #48	@ 0x30
 800251a:	f000 f9b9 	bl	8002890 <ConvertCharsToInt>
 800251e:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
		//sprintf(repeat, "Repeat: %c%c", rx_data[11], rx_data[12]);
		sprintf(repeat, "Repeat: %d/%d", currentRepeatNum, repeatInt);
 8002522:	4b41      	ldr	r3, [pc, #260]	@ (8002628 <DrawProgressPage+0x398>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 800252e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002532:	493e      	ldr	r1, [pc, #248]	@ (800262c <DrawProgressPage+0x39c>)
 8002534:	f00c fe28 	bl	800f188 <siprintf>
		lcdSetCursor(10, 150);
 8002538:	2196      	movs	r1, #150	@ 0x96
 800253a:	200a      	movs	r0, #10
 800253c:	f7fe fd6c 	bl	8001018 <lcdSetCursor>
		lcdPrintf(repeat);
 8002540:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe fc4b 	bl	8000de0 <lcdPrintf>
	}

	//pause
	if (rx_byte == 'P') {
 800254a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800254e:	f2a3 1335 	subw	r3, r3, #309	@ 0x135
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b50      	cmp	r3, #80	@ 0x50
 8002556:	d13e      	bne.n	80025d6 <DrawProgressPage+0x346>
		char protocolType[20] = "";
 8002558:	2300      	movs	r3, #0
 800255a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800255e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	60da      	str	r2, [r3, #12]
		sprintf(protocolType, "Pause");
 800256c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002570:	492f      	ldr	r1, [pc, #188]	@ (8002630 <DrawProgressPage+0x3a0>)
 8002572:	4618      	mov	r0, r3
 8002574:	f00c fe08 	bl	800f188 <siprintf>
		lcdSetCursor(60, 30);
 8002578:	211e      	movs	r1, #30
 800257a:	203c      	movs	r0, #60	@ 0x3c
 800257c:	f7fe fd4c 	bl	8001018 <lcdSetCursor>
		lcdSetTextFont(&Font20);
 8002580:	482c      	ldr	r0, [pc, #176]	@ (8002634 <DrawProgressPage+0x3a4>)
 8002582:	f7fe fcb9 	bl	8000ef8 <lcdSetTextFont>
		lcdPrintf(protocolType);
 8002586:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe fc28 	bl	8000de0 <lcdPrintf>
		lcdSetTextFont(&Font16);
 8002590:	481f      	ldr	r0, [pc, #124]	@ (8002610 <DrawProgressPage+0x380>)
 8002592:	f7fe fcb1 	bl	8000ef8 <lcdSetTextFont>
		//duration
		char duration[20] = "";
 8002596:	2300      	movs	r3, #0
 8002598:	67bb      	str	r3, [r7, #120]	@ 0x78
 800259a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	609a      	str	r2, [r3, #8]
 80025a6:	60da      	str	r2, [r3, #12]
		sprintf(duration, "Duration: %c", rx_data[1]);
 80025a8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80025ac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	3301      	adds	r3, #1
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80025bc:	491e      	ldr	r1, [pc, #120]	@ (8002638 <DrawProgressPage+0x3a8>)
 80025be:	4618      	mov	r0, r3
 80025c0:	f00c fde2 	bl	800f188 <siprintf>
		lcdSetCursor(60, 50);
 80025c4:	2132      	movs	r1, #50	@ 0x32
 80025c6:	203c      	movs	r0, #60	@ 0x3c
 80025c8:	f7fe fd26 	bl	8001018 <lcdSetCursor>
		lcdPrintf(duration);
 80025cc:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fe fc05 	bl	8000de0 <lcdPrintf>
	}

	//move
	if (rx_byte == 'M') {
 80025d6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80025da:	f2a3 1335 	subw	r3, r3, #309	@ 0x135
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b4d      	cmp	r3, #77	@ 0x4d
 80025e2:	f040 80d5 	bne.w	8002790 <DrawProgressPage+0x500>
		char protocolType[20] = "";
 80025e6:	2300      	movs	r3, #0
 80025e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80025ea:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	60da      	str	r2, [r3, #12]
		sprintf(protocolType, "Magnetize");
 80025f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80025fc:	490f      	ldr	r1, [pc, #60]	@ (800263c <DrawProgressPage+0x3ac>)
 80025fe:	4618      	mov	r0, r3
 8002600:	f00c fdc2 	bl	800f188 <siprintf>
 8002604:	e01c      	b.n	8002640 <DrawProgressPage+0x3b0>
 8002606:	bf00      	nop
 8002608:	200005b4 	.word	0x200005b4
 800260c:	080101cc 	.word	0x080101cc
 8002610:	20000008 	.word	0x20000008
 8002614:	080101d4 	.word	0x080101d4
 8002618:	080101e0 	.word	0x080101e0
 800261c:	080101f0 	.word	0x080101f0
 8002620:	080101fc 	.word	0x080101fc
 8002624:	08010208 	.word	0x08010208
 8002628:	20000266 	.word	0x20000266
 800262c:	08010170 	.word	0x08010170
 8002630:	0801021c 	.word	0x0801021c
 8002634:	20000010 	.word	0x20000010
 8002638:	08010224 	.word	0x08010224
 800263c:	08010234 	.word	0x08010234
		lcdSetCursor(60, 30);
 8002640:	211e      	movs	r1, #30
 8002642:	203c      	movs	r0, #60	@ 0x3c
 8002644:	f7fe fce8 	bl	8001018 <lcdSetCursor>
		lcdSetTextFont(&Font20);
 8002648:	4864      	ldr	r0, [pc, #400]	@ (80027dc <DrawProgressPage+0x54c>)
 800264a:	f7fe fc55 	bl	8000ef8 <lcdSetTextFont>
		lcdPrintf(protocolType);
 800264e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fbc4 	bl	8000de0 <lcdPrintf>
		lcdSetTextFont(&Font16);
 8002658:	4861      	ldr	r0, [pc, #388]	@ (80027e0 <DrawProgressPage+0x550>)
 800265a:	f7fe fc4d 	bl	8000ef8 <lcdSetTextFont>
		//init surface time
		char initTime[20] = "";
 800265e:	2300      	movs	r3, #0
 8002660:	653b      	str	r3, [r7, #80]	@ 0x50
 8002662:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	60da      	str	r2, [r3, #12]
		sprintf(initTime, "Init Time: %c%c%c", rx_data[1], rx_data[2], rx_data[3]);
 8002670:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002674:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	3301      	adds	r3, #1
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002684:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	3302      	adds	r3, #2
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	4619      	mov	r1, r3
 8002690:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002694:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	3303      	adds	r3, #3
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	460b      	mov	r3, r1
 80026a6:	494f      	ldr	r1, [pc, #316]	@ (80027e4 <DrawProgressPage+0x554>)
 80026a8:	f00c fd6e 	bl	800f188 <siprintf>
		lcdSetCursor(60, 50);
 80026ac:	2132      	movs	r1, #50	@ 0x32
 80026ae:	203c      	movs	r0, #60	@ 0x3c
 80026b0:	f7fe fcb2 	bl	8001018 <lcdSetCursor>
		lcdPrintf(initTime);
 80026b4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fe fb91 	bl	8000de0 <lcdPrintf>
		//speed
		char speed[20] = "";
 80026be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	3304      	adds	r3, #4
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
		sprintf(speed, "Speed: %c", rx_data[4]);
 80026d6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026da:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	3304      	adds	r3, #4
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80026ea:	493f      	ldr	r1, [pc, #252]	@ (80027e8 <DrawProgressPage+0x558>)
 80026ec:	4618      	mov	r0, r3
 80026ee:	f00c fd4b 	bl	800f188 <siprintf>
		lcdSetCursor(60, 70);
 80026f2:	2146      	movs	r1, #70	@ 0x46
 80026f4:	203c      	movs	r0, #60	@ 0x3c
 80026f6:	f7fe fc8f 	bl	8001018 <lcdSetCursor>
		lcdPrintf(speed);
 80026fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe fb6e 	bl	8000de0 <lcdPrintf>
		//Stop at Sequences
		char stopNumber[20] = "";
 8002704:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002708:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	3304      	adds	r3, #4
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	605a      	str	r2, [r3, #4]
 8002718:	609a      	str	r2, [r3, #8]
 800271a:	60da      	str	r2, [r3, #12]
		sprintf(stopNumber, "Stop Number: %c", rx_data[5]);
 800271c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002720:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3305      	adds	r3, #5
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002730:	492e      	ldr	r1, [pc, #184]	@ (80027ec <DrawProgressPage+0x55c>)
 8002732:	4618      	mov	r0, r3
 8002734:	f00c fd28 	bl	800f188 <siprintf>
		lcdSetCursor(60, 90);
 8002738:	215a      	movs	r1, #90	@ 0x5a
 800273a:	203c      	movs	r0, #60	@ 0x3c
 800273c:	f7fe fc6c 	bl	8001018 <lcdSetCursor>
		lcdPrintf(stopNumber);
 8002740:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe fb4b 	bl	8000de0 <lcdPrintf>
		//Sequence Pause Time
		char sequencePause[20] = "";
 800274a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800274e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	3304      	adds	r3, #4
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
		sprintf(sequencePause, "Sequence Pause: %c", rx_data[6]);
 8002762:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002766:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	3306      	adds	r3, #6
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	f107 0314 	add.w	r3, r7, #20
 8002776:	491e      	ldr	r1, [pc, #120]	@ (80027f0 <DrawProgressPage+0x560>)
 8002778:	4618      	mov	r0, r3
 800277a:	f00c fd05 	bl	800f188 <siprintf>
		lcdSetCursor(60, 110);
 800277e:	216e      	movs	r1, #110	@ 0x6e
 8002780:	203c      	movs	r0, #60	@ 0x3c
 8002782:	f7fe fc49 	bl	8001018 <lcdSetCursor>
		lcdPrintf(sequencePause);
 8002786:	f107 0314 	add.w	r3, r7, #20
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe fb28 	bl	8000de0 <lcdPrintf>
	//time remaining in protocol
//	char protocolTimeRemaining[25] = "";
//	sprintf(protocolTimeRemaining, "Remaining Time: %d", protocolTimer);
//	lcdSetCursor(60, 130);
//	lcdPrintf(protocolTimeRemaining);
	DrawCountdownTime();
 8002790:	f000 f834 	bl	80027fc <DrawCountdownTime>

	// Draw "Stop" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8002794:	4b17      	ldr	r3, [pc, #92]	@ (80027f4 <DrawProgressPage+0x564>)
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	b218      	sxth	r0, r3
 800279a:	4b16      	ldr	r3, [pc, #88]	@ (80027f4 <DrawProgressPage+0x564>)
 800279c:	885b      	ldrh	r3, [r3, #2]
 800279e:	b219      	sxth	r1, r3
 80027a0:	4b14      	ldr	r3, [pc, #80]	@ (80027f4 <DrawProgressPage+0x564>)
 80027a2:	889b      	ldrh	r3, [r3, #4]
 80027a4:	b21a      	sxth	r2, r3
 80027a6:	4b13      	ldr	r3, [pc, #76]	@ (80027f4 <DrawProgressPage+0x564>)
 80027a8:	88db      	ldrh	r3, [r3, #6]
 80027aa:	b21b      	sxth	r3, r3
 80027ac:	2400      	movs	r4, #0
 80027ae:	9400      	str	r4, [sp, #0]
 80027b0:	f7fe fa22 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 80027b4:	4b0f      	ldr	r3, [pc, #60]	@ (80027f4 <DrawProgressPage+0x564>)
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	330a      	adds	r3, #10
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	4b0d      	ldr	r3, [pc, #52]	@ (80027f4 <DrawProgressPage+0x564>)
 80027be:	885b      	ldrh	r3, [r3, #2]
 80027c0:	330a      	adds	r3, #10
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	4619      	mov	r1, r3
 80027c6:	4610      	mov	r0, r2
 80027c8:	f7fe fc26 	bl	8001018 <lcdSetCursor>
	lcdPrintf("Stop");
 80027cc:	480a      	ldr	r0, [pc, #40]	@ (80027f8 <DrawProgressPage+0x568>)
 80027ce:	f7fe fb07 	bl	8000de0 <lcdPrintf>
}
 80027d2:	bf00      	nop
 80027d4:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd90      	pop	{r4, r7, pc}
 80027dc:	20000010 	.word	0x20000010
 80027e0:	20000008 	.word	0x20000008
 80027e4:	08010240 	.word	0x08010240
 80027e8:	080101d4 	.word	0x080101d4
 80027ec:	08010254 	.word	0x08010254
 80027f0:	08010264 	.word	0x08010264
 80027f4:	200001b8 	.word	0x200001b8
 80027f8:	08010278 	.word	0x08010278

080027fc <DrawCountdownTime>:

//dont want to update the whole progress page, just the countdown timer
void DrawCountdownTime (void) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
	//time remaining in protocol
	uint8_t minutes = protocolTimer / 60;
 8002802:	4b20      	ldr	r3, [pc, #128]	@ (8002884 <DrawCountdownTime+0x88>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a20      	ldr	r2, [pc, #128]	@ (8002888 <DrawCountdownTime+0x8c>)
 8002808:	fb82 1203 	smull	r1, r2, r2, r3
 800280c:	441a      	add	r2, r3
 800280e:	1152      	asrs	r2, r2, #5
 8002810:	17db      	asrs	r3, r3, #31
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	77fb      	strb	r3, [r7, #31]
	uint8_t seconds = protocolTimer % 60;
 8002816:	4b1b      	ldr	r3, [pc, #108]	@ (8002884 <DrawCountdownTime+0x88>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	4b1b      	ldr	r3, [pc, #108]	@ (8002888 <DrawCountdownTime+0x8c>)
 800281c:	fb83 1302 	smull	r1, r3, r3, r2
 8002820:	4413      	add	r3, r2
 8002822:	1159      	asrs	r1, r3, #5
 8002824:	17d3      	asrs	r3, r2, #31
 8002826:	1ac9      	subs	r1, r1, r3
 8002828:	460b      	mov	r3, r1
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	1a5b      	subs	r3, r3, r1
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	1ad1      	subs	r1, r2, r3
 8002832:	460b      	mov	r3, r1
 8002834:	77bb      	strb	r3, [r7, #30]
	char protocolTimeRemaining[25] = "";
 8002836:	2300      	movs	r3, #0
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	f107 0308 	add.w	r3, r7, #8
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	609a      	str	r2, [r3, #8]
 8002846:	60da      	str	r2, [r3, #12]
 8002848:	611a      	str	r2, [r3, #16]
 800284a:	751a      	strb	r2, [r3, #20]
	sprintf(protocolTimeRemaining, "Remaining Time: %d:%d", minutes, seconds);
 800284c:	7ffa      	ldrb	r2, [r7, #31]
 800284e:	7fbb      	ldrb	r3, [r7, #30]
 8002850:	1d38      	adds	r0, r7, #4
 8002852:	490e      	ldr	r1, [pc, #56]	@ (800288c <DrawCountdownTime+0x90>)
 8002854:	f00c fc98 	bl	800f188 <siprintf>
	protocolTimeRemaining[strlen(protocolTimeRemaining)] = NULL_CHAR;
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	4618      	mov	r0, r3
 800285c:	f7fd fcc8 	bl	80001f0 <strlen>
 8002860:	4603      	mov	r3, r0
 8002862:	3320      	adds	r3, #32
 8002864:	443b      	add	r3, r7
 8002866:	2200      	movs	r2, #0
 8002868:	f803 2c1c 	strb.w	r2, [r3, #-28]
	lcdSetCursor(10, 170);
 800286c:	21aa      	movs	r1, #170	@ 0xaa
 800286e:	200a      	movs	r0, #10
 8002870:	f7fe fbd2 	bl	8001018 <lcdSetCursor>
	lcdPrintf(protocolTimeRemaining);
 8002874:	1d3b      	adds	r3, r7, #4
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe fab2 	bl	8000de0 <lcdPrintf>
}
 800287c:	bf00      	nop
 800287e:	3720      	adds	r7, #32
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	20000598 	.word	0x20000598
 8002888:	88888889 	.word	0x88888889
 800288c:	08010280 	.word	0x08010280

08002890 <ConvertCharsToInt>:
 * @param: x: 100's place of the digit
 * @param: y: 10's place of the digit
 * @param: z: 1's place of the digit
 * @retval: converted integer
 */
uint32_t ConvertCharsToInt(char x, char y, char z) {
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	71fb      	strb	r3, [r7, #7]
 800289a:	460b      	mov	r3, r1
 800289c:	71bb      	strb	r3, [r7, #6]
 800289e:	4613      	mov	r3, r2
 80028a0:	717b      	strb	r3, [r7, #5]
	uint32_t returnVal = ((x - '0') * 100) + ((y - '0') * 10) + (z - '0');
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	3b30      	subs	r3, #48	@ 0x30
 80028a6:	2264      	movs	r2, #100	@ 0x64
 80028a8:	fb02 f103 	mul.w	r1, r2, r3
 80028ac:	79bb      	ldrb	r3, [r7, #6]
 80028ae:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	18ca      	adds	r2, r1, r3
 80028bc:	797b      	ldrb	r3, [r7, #5]
 80028be:	3b30      	subs	r3, #48	@ 0x30
 80028c0:	4413      	add	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
	return returnVal;
 80028c4:	68fb      	ldr	r3, [r7, #12]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
	...

080028d4 <DrawStopPage>:

void DrawStopPage(void) {
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af02      	add	r7, sp, #8
	lcdFillRGB(COLOR_WHITE);
 80028da:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80028de:	f7fe f8a7 	bl	8000a30 <lcdFillRGB>

	//display confirmation text
	lcdSetCursor(100, 10);
 80028e2:	210a      	movs	r1, #10
 80028e4:	2064      	movs	r0, #100	@ 0x64
 80028e6:	f7fe fb97 	bl	8001018 <lcdSetCursor>
	lcdSetTextFont(&Font20);
 80028ea:	4825      	ldr	r0, [pc, #148]	@ (8002980 <DrawStopPage+0xac>)
 80028ec:	f7fe fb04 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf("Stop?");
 80028f0:	4824      	ldr	r0, [pc, #144]	@ (8002984 <DrawStopPage+0xb0>)
 80028f2:	f7fe fa75 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 80028f6:	4824      	ldr	r0, [pc, #144]	@ (8002988 <DrawStopPage+0xb4>)
 80028f8:	f7fe fafe 	bl	8000ef8 <lcdSetTextFont>

	//Draw "Yes" button
	lcdDrawRect(yesButton.x, yesButton.y, yesButton.w, yesButton.h,
 80028fc:	4b23      	ldr	r3, [pc, #140]	@ (800298c <DrawStopPage+0xb8>)
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	b218      	sxth	r0, r3
 8002902:	4b22      	ldr	r3, [pc, #136]	@ (800298c <DrawStopPage+0xb8>)
 8002904:	885b      	ldrh	r3, [r3, #2]
 8002906:	b219      	sxth	r1, r3
 8002908:	4b20      	ldr	r3, [pc, #128]	@ (800298c <DrawStopPage+0xb8>)
 800290a:	889b      	ldrh	r3, [r3, #4]
 800290c:	b21a      	sxth	r2, r3
 800290e:	4b1f      	ldr	r3, [pc, #124]	@ (800298c <DrawStopPage+0xb8>)
 8002910:	88db      	ldrh	r3, [r3, #6]
 8002912:	b21b      	sxth	r3, r3
 8002914:	2400      	movs	r4, #0
 8002916:	9400      	str	r4, [sp, #0]
 8002918:	f7fe f96e 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(yesButton.x + 10, yesButton.y + 10);
 800291c:	4b1b      	ldr	r3, [pc, #108]	@ (800298c <DrawStopPage+0xb8>)
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	330a      	adds	r3, #10
 8002922:	b29a      	uxth	r2, r3
 8002924:	4b19      	ldr	r3, [pc, #100]	@ (800298c <DrawStopPage+0xb8>)
 8002926:	885b      	ldrh	r3, [r3, #2]
 8002928:	330a      	adds	r3, #10
 800292a:	b29b      	uxth	r3, r3
 800292c:	4619      	mov	r1, r3
 800292e:	4610      	mov	r0, r2
 8002930:	f7fe fb72 	bl	8001018 <lcdSetCursor>
	lcdPrintf(yesButton.label);
 8002934:	4816      	ldr	r0, [pc, #88]	@ (8002990 <DrawStopPage+0xbc>)
 8002936:	f7fe fa53 	bl	8000de0 <lcdPrintf>

	//Draw "No" button
	lcdDrawRect(noButton.x, noButton.y, noButton.w, noButton.h, COLOR_BLACK);
 800293a:	4b16      	ldr	r3, [pc, #88]	@ (8002994 <DrawStopPage+0xc0>)
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	b218      	sxth	r0, r3
 8002940:	4b14      	ldr	r3, [pc, #80]	@ (8002994 <DrawStopPage+0xc0>)
 8002942:	885b      	ldrh	r3, [r3, #2]
 8002944:	b219      	sxth	r1, r3
 8002946:	4b13      	ldr	r3, [pc, #76]	@ (8002994 <DrawStopPage+0xc0>)
 8002948:	889b      	ldrh	r3, [r3, #4]
 800294a:	b21a      	sxth	r2, r3
 800294c:	4b11      	ldr	r3, [pc, #68]	@ (8002994 <DrawStopPage+0xc0>)
 800294e:	88db      	ldrh	r3, [r3, #6]
 8002950:	b21b      	sxth	r3, r3
 8002952:	2400      	movs	r4, #0
 8002954:	9400      	str	r4, [sp, #0]
 8002956:	f7fe f94f 	bl	8000bf8 <lcdDrawRect>
	lcdSetCursor(noButton.x + 10, noButton.y + 10);
 800295a:	4b0e      	ldr	r3, [pc, #56]	@ (8002994 <DrawStopPage+0xc0>)
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	330a      	adds	r3, #10
 8002960:	b29a      	uxth	r2, r3
 8002962:	4b0c      	ldr	r3, [pc, #48]	@ (8002994 <DrawStopPage+0xc0>)
 8002964:	885b      	ldrh	r3, [r3, #2]
 8002966:	330a      	adds	r3, #10
 8002968:	b29b      	uxth	r3, r3
 800296a:	4619      	mov	r1, r3
 800296c:	4610      	mov	r0, r2
 800296e:	f7fe fb53 	bl	8001018 <lcdSetCursor>
	lcdPrintf(noButton.label);
 8002972:	4809      	ldr	r0, [pc, #36]	@ (8002998 <DrawStopPage+0xc4>)
 8002974:	f7fe fa34 	bl	8000de0 <lcdPrintf>
}
 8002978:	bf00      	nop
 800297a:	3704      	adds	r7, #4
 800297c:	46bd      	mov	sp, r7
 800297e:	bd90      	pop	{r4, r7, pc}
 8002980:	20000010 	.word	0x20000010
 8002984:	08010298 	.word	0x08010298
 8002988:	20000008 	.word	0x20000008
 800298c:	20000210 	.word	0x20000210
 8002990:	20000218 	.word	0x20000218
 8002994:	2000023c 	.word	0x2000023c
 8002998:	20000244 	.word	0x20000244

0800299c <DrawPageFinish>:

void DrawPageFinish(void) {
 800299c:	b590      	push	{r4, r7, lr}
 800299e:	b083      	sub	sp, #12
 80029a0:	af02      	add	r7, sp, #8
	lcdFillRGB(COLOR_WHITE);
 80029a2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80029a6:	f7fe f843 	bl	8000a30 <lcdFillRGB>

	//Draw "Success!" box
	lcdSetCursor(selectButton.x + 10, selectButton.y + 10);
 80029aa:	4b19      	ldr	r3, [pc, #100]	@ (8002a10 <DrawPageFinish+0x74>)
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	330a      	adds	r3, #10
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	4b17      	ldr	r3, [pc, #92]	@ (8002a10 <DrawPageFinish+0x74>)
 80029b4:	885b      	ldrh	r3, [r3, #2]
 80029b6:	330a      	adds	r3, #10
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	4619      	mov	r1, r3
 80029bc:	4610      	mov	r0, r2
 80029be:	f7fe fb2b 	bl	8001018 <lcdSetCursor>
	lcdPrintf("Success!");
 80029c2:	4814      	ldr	r0, [pc, #80]	@ (8002a14 <DrawPageFinish+0x78>)
 80029c4:	f7fe fa0c 	bl	8000de0 <lcdPrintf>

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 80029c8:	4b13      	ldr	r3, [pc, #76]	@ (8002a18 <DrawPageFinish+0x7c>)
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	b218      	sxth	r0, r3
 80029ce:	4b12      	ldr	r3, [pc, #72]	@ (8002a18 <DrawPageFinish+0x7c>)
 80029d0:	885b      	ldrh	r3, [r3, #2]
 80029d2:	b219      	sxth	r1, r3
 80029d4:	4b10      	ldr	r3, [pc, #64]	@ (8002a18 <DrawPageFinish+0x7c>)
 80029d6:	889b      	ldrh	r3, [r3, #4]
 80029d8:	b21a      	sxth	r2, r3
 80029da:	4b0f      	ldr	r3, [pc, #60]	@ (8002a18 <DrawPageFinish+0x7c>)
 80029dc:	88db      	ldrh	r3, [r3, #6]
 80029de:	b21b      	sxth	r3, r3
 80029e0:	2400      	movs	r4, #0
 80029e2:	9400      	str	r4, [sp, #0]
 80029e4:	f7fe f908 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 80029e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a18 <DrawPageFinish+0x7c>)
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	330a      	adds	r3, #10
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	4b09      	ldr	r3, [pc, #36]	@ (8002a18 <DrawPageFinish+0x7c>)
 80029f2:	885b      	ldrh	r3, [r3, #2]
 80029f4:	330a      	adds	r3, #10
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	4619      	mov	r1, r3
 80029fa:	4610      	mov	r0, r2
 80029fc:	f7fe fb0c 	bl	8001018 <lcdSetCursor>
	lcdPrintf("Done");
 8002a00:	4806      	ldr	r0, [pc, #24]	@ (8002a1c <DrawPageFinish+0x80>)
 8002a02:	f7fe f9ed 	bl	8000de0 <lcdPrintf>
}
 8002a06:	bf00      	nop
 8002a08:	3704      	adds	r7, #4
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd90      	pop	{r4, r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000160 	.word	0x20000160
 8002a14:	080102a0 	.word	0x080102a0
 8002a18:	200001b8 	.word	0x200001b8
 8002a1c:	080102ac 	.word	0x080102ac

08002a20 <handleTouch>:

uint8_t handleTouch() {
 8002a20:	b590      	push	{r4, r7, lr}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
	static uint8_t protocol_num;
	static uint8_t protocol_offset = 0;
	uint16_t x = 0, y = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	80fb      	strh	r3, [r7, #6]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	80bb      	strh	r3, [r7, #4]
	if (!XPT2046_TouchGetCoordinates(&x, &y)) {
 8002a2e:	1d3a      	adds	r2, r7, #4
 8002a30:	1dbb      	adds	r3, r7, #6
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fd fdd3 	bl	80005e0 <XPT2046_TouchGetCoordinates>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f083 0301 	eor.w	r3, r3, #1
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <handleTouch+0x2a>
		//printf("failed\n");
		return 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e3ac      	b.n	80031a4 <handleTouch+0x784>
	}
	//map the x coordinate to be left is 0. also slight offset
	x = (TS_RIGHT - x) - 0;
 8002a4a:	88fb      	ldrh	r3, [r7, #6]
 8002a4c:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	80fb      	strh	r3, [r7, #6]
//	printf("touched\n");
//	printf("%d, %d\n", x, y);

	switch (currentPage) {
 8002a54:	4b8e      	ldr	r3, [pc, #568]	@ (8002c90 <handleTouch+0x270>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b06      	cmp	r3, #6
 8002a5a:	f200 839f 	bhi.w	800319c <handleTouch+0x77c>
 8002a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a64 <handleTouch+0x44>)
 8002a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a64:	08002a81 	.word	0x08002a81
 8002a68:	08002cb5 	.word	0x08002cb5
 8002a6c:	08002e67 	.word	0x08002e67
 8002a70:	08002f59 	.word	0x08002f59
 8002a74:	08003139 	.word	0x08003139
 8002a78:	0800301b 	.word	0x0800301b
 8002a7c:	08003091 	.word	0x08003091
	case PAGE_MAIN:
		//next button
		if ((x >= nextButton.x) && (x <= nextButton.x + nextButton.w)
 8002a80:	4b84      	ldr	r3, [pc, #528]	@ (8002c94 <handleTouch+0x274>)
 8002a82:	881a      	ldrh	r2, [r3, #0]
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d828      	bhi.n	8002adc <handleTouch+0xbc>
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b81      	ldr	r3, [pc, #516]	@ (8002c94 <handleTouch+0x274>)
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	4619      	mov	r1, r3
 8002a94:	4b7f      	ldr	r3, [pc, #508]	@ (8002c94 <handleTouch+0x274>)
 8002a96:	889b      	ldrh	r3, [r3, #4]
 8002a98:	440b      	add	r3, r1
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	dc1e      	bgt.n	8002adc <handleTouch+0xbc>
				&& (y >= nextButton.y)
 8002a9e:	4b7d      	ldr	r3, [pc, #500]	@ (8002c94 <handleTouch+0x274>)
 8002aa0:	885a      	ldrh	r2, [r3, #2]
 8002aa2:	88bb      	ldrh	r3, [r7, #4]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d819      	bhi.n	8002adc <handleTouch+0xbc>
				&& (y <= nextButton.y + nextButton.h + NEXT_BUTTON_OFFSET)
 8002aa8:	88bb      	ldrh	r3, [r7, #4]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4b79      	ldr	r3, [pc, #484]	@ (8002c94 <handleTouch+0x274>)
 8002aae:	885b      	ldrh	r3, [r3, #2]
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4b78      	ldr	r3, [pc, #480]	@ (8002c94 <handleTouch+0x274>)
 8002ab4:	88db      	ldrh	r3, [r3, #6]
 8002ab6:	440b      	add	r3, r1
 8002ab8:	333c      	adds	r3, #60	@ 0x3c
 8002aba:	429a      	cmp	r2, r3
 8002abc:	dc0e      	bgt.n	8002adc <handleTouch+0xbc>
				&& (page_num != 10)) {
 8002abe:	4b76      	ldr	r3, [pc, #472]	@ (8002c98 <handleTouch+0x278>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b0a      	cmp	r3, #10
 8002ac4:	d00a      	beq.n	8002adc <handleTouch+0xbc>
			//printf("touched\n");
			page_num++;
 8002ac6:	4b74      	ldr	r3, [pc, #464]	@ (8002c98 <handleTouch+0x278>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	3301      	adds	r3, #1
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	4b72      	ldr	r3, [pc, #456]	@ (8002c98 <handleTouch+0x278>)
 8002ad0:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8002ad2:	4b71      	ldr	r3, [pc, #452]	@ (8002c98 <handleTouch+0x278>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fff4 	bl	8001ac4 <DrawMainPage>
		}
		//back button
		if ((x >= backButton.x) && (x <= backButton.x + backButton.w)
 8002adc:	4b6f      	ldr	r3, [pc, #444]	@ (8002c9c <handleTouch+0x27c>)
 8002ade:	881a      	ldrh	r2, [r3, #0]
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d828      	bhi.n	8002b38 <handleTouch+0x118>
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4b6c      	ldr	r3, [pc, #432]	@ (8002c9c <handleTouch+0x27c>)
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	4619      	mov	r1, r3
 8002af0:	4b6a      	ldr	r3, [pc, #424]	@ (8002c9c <handleTouch+0x27c>)
 8002af2:	889b      	ldrh	r3, [r3, #4]
 8002af4:	440b      	add	r3, r1
 8002af6:	429a      	cmp	r2, r3
 8002af8:	dc1e      	bgt.n	8002b38 <handleTouch+0x118>
				&& (y >= backButton.y)
 8002afa:	4b68      	ldr	r3, [pc, #416]	@ (8002c9c <handleTouch+0x27c>)
 8002afc:	885a      	ldrh	r2, [r3, #2]
 8002afe:	88bb      	ldrh	r3, [r7, #4]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d819      	bhi.n	8002b38 <handleTouch+0x118>
				&& (y <= backButton.y + backButton.h + BACK_BUTTON_OFFSET)
 8002b04:	88bb      	ldrh	r3, [r7, #4]
 8002b06:	461a      	mov	r2, r3
 8002b08:	4b64      	ldr	r3, [pc, #400]	@ (8002c9c <handleTouch+0x27c>)
 8002b0a:	885b      	ldrh	r3, [r3, #2]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4b63      	ldr	r3, [pc, #396]	@ (8002c9c <handleTouch+0x27c>)
 8002b10:	88db      	ldrh	r3, [r3, #6]
 8002b12:	440b      	add	r3, r1
 8002b14:	333c      	adds	r3, #60	@ 0x3c
 8002b16:	429a      	cmp	r2, r3
 8002b18:	dc0e      	bgt.n	8002b38 <handleTouch+0x118>
				&& (page_num != 1)) {
 8002b1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002c98 <handleTouch+0x278>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d00a      	beq.n	8002b38 <handleTouch+0x118>
			//printf("touched\n");
			page_num--;
 8002b22:	4b5d      	ldr	r3, [pc, #372]	@ (8002c98 <handleTouch+0x278>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	4b5b      	ldr	r3, [pc, #364]	@ (8002c98 <handleTouch+0x278>)
 8002b2c:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8002b2e:	4b5a      	ldr	r3, [pc, #360]	@ (8002c98 <handleTouch+0x278>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe ffc6 	bl	8001ac4 <DrawMainPage>
		}
		//queue button
		if (x >= queueButton.x && x <= (queueButton.x + queueButton.w)
 8002b38:	4b59      	ldr	r3, [pc, #356]	@ (8002ca0 <handleTouch+0x280>)
 8002b3a:	881a      	ldrh	r2, [r3, #0]
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d821      	bhi.n	8002b86 <handleTouch+0x166>
 8002b42:	88fb      	ldrh	r3, [r7, #6]
 8002b44:	461a      	mov	r2, r3
 8002b46:	4b56      	ldr	r3, [pc, #344]	@ (8002ca0 <handleTouch+0x280>)
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4b54      	ldr	r3, [pc, #336]	@ (8002ca0 <handleTouch+0x280>)
 8002b4e:	889b      	ldrh	r3, [r3, #4]
 8002b50:	440b      	add	r3, r1
 8002b52:	429a      	cmp	r2, r3
 8002b54:	dc17      	bgt.n	8002b86 <handleTouch+0x166>
				&& y >= queueButton.y
 8002b56:	4b52      	ldr	r3, [pc, #328]	@ (8002ca0 <handleTouch+0x280>)
 8002b58:	885a      	ldrh	r2, [r3, #2]
 8002b5a:	88bb      	ldrh	r3, [r7, #4]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d812      	bhi.n	8002b86 <handleTouch+0x166>
				&& y <= (queueButton.y + queueButton.h + QUEUE_BUTTON_OFFSET)) {
 8002b60:	88bb      	ldrh	r3, [r7, #4]
 8002b62:	461a      	mov	r2, r3
 8002b64:	4b4e      	ldr	r3, [pc, #312]	@ (8002ca0 <handleTouch+0x280>)
 8002b66:	885b      	ldrh	r3, [r3, #2]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4b4d      	ldr	r3, [pc, #308]	@ (8002ca0 <handleTouch+0x280>)
 8002b6c:	88db      	ldrh	r3, [r3, #6]
 8002b6e:	440b      	add	r3, r1
 8002b70:	3328      	adds	r3, #40	@ 0x28
 8002b72:	429a      	cmp	r2, r3
 8002b74:	dc07      	bgt.n	8002b86 <handleTouch+0x166>
			DrawQueuePage(queueSize);
 8002b76:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca4 <handleTouch+0x284>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff faa2 	bl	80020c4 <DrawQueuePage>
			currentPage = PAGE_QUEUE;
 8002b80:	4b43      	ldr	r3, [pc, #268]	@ (8002c90 <handleTouch+0x270>)
 8002b82:	2202      	movs	r2, #2
 8002b84:	701a      	strb	r2, [r3, #0]
		}
		//three protocol buttons
		for (int i = 0; i < NUM_BUTTONS; i++) {
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	e07c      	b.n	8002c86 <handleTouch+0x266>
			if ((x >= buttons[i].x) && (x <= buttons[i].x + buttons[i].w)
 8002b8c:	4a46      	ldr	r2, [pc, #280]	@ (8002ca8 <handleTouch+0x288>)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	212a      	movs	r1, #42	@ 0x2a
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	881a      	ldrh	r2, [r3, #0]
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d86f      	bhi.n	8002c80 <handleTouch+0x260>
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	4a40      	ldr	r2, [pc, #256]	@ (8002ca8 <handleTouch+0x288>)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	212a      	movs	r1, #42	@ 0x2a
 8002baa:	fb01 f303 	mul.w	r3, r1, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	461c      	mov	r4, r3
 8002bb4:	4a3c      	ldr	r2, [pc, #240]	@ (8002ca8 <handleTouch+0x288>)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	212a      	movs	r1, #42	@ 0x2a
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	4423      	add	r3, r4
 8002bc6:	4298      	cmp	r0, r3
 8002bc8:	dc5a      	bgt.n	8002c80 <handleTouch+0x260>
					&& (y >= buttons[i].y - PROTOCOL_BUTTON_OFFSET)
 8002bca:	88bb      	ldrh	r3, [r7, #4]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	4a36      	ldr	r2, [pc, #216]	@ (8002ca8 <handleTouch+0x288>)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	212a      	movs	r1, #42	@ 0x2a
 8002bd4:	fb01 f303 	mul.w	r3, r1, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	3302      	adds	r3, #2
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	3b14      	subs	r3, #20
 8002be0:	4298      	cmp	r0, r3
 8002be2:	db4d      	blt.n	8002c80 <handleTouch+0x260>
					&& (y
							<= buttons[i].y + buttons[i].h
 8002be4:	88bb      	ldrh	r3, [r7, #4]
 8002be6:	4618      	mov	r0, r3
 8002be8:	4a2f      	ldr	r2, [pc, #188]	@ (8002ca8 <handleTouch+0x288>)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	212a      	movs	r1, #42	@ 0x2a
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3302      	adds	r3, #2
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	461c      	mov	r4, r3
 8002bfa:	4a2b      	ldr	r2, [pc, #172]	@ (8002ca8 <handleTouch+0x288>)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	212a      	movs	r1, #42	@ 0x2a
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	3306      	adds	r3, #6
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	4423      	add	r3, r4
									+ PROTOCOL_BUTTON_OFFSET)) {
 8002c0c:	3314      	adds	r3, #20
					&& (y
 8002c0e:	4298      	cmp	r0, r3
 8002c10:	dc36      	bgt.n	8002c80 <handleTouch+0x260>
				//check which button has been pressed
				if (i == 0) {
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d106      	bne.n	8002c26 <handleTouch+0x206>
					protocol_num = 1;
 8002c18:	4b24      	ldr	r3, [pc, #144]	@ (8002cac <handleTouch+0x28c>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	701a      	strb	r2, [r3, #0]
					protocol_offset = 0;
 8002c1e:	4b24      	ldr	r3, [pc, #144]	@ (8002cb0 <handleTouch+0x290>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
 8002c24:	e012      	b.n	8002c4c <handleTouch+0x22c>
				} else if (i == 1) {
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d106      	bne.n	8002c3a <handleTouch+0x21a>
					protocol_num = 1;
 8002c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cac <handleTouch+0x28c>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
					protocol_offset = 1;
 8002c32:	4b1f      	ldr	r3, [pc, #124]	@ (8002cb0 <handleTouch+0x290>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]
 8002c38:	e008      	b.n	8002c4c <handleTouch+0x22c>
				} else if (i == 2) {
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d105      	bne.n	8002c4c <handleTouch+0x22c>
					protocol_num = 1;
 8002c40:	4b1a      	ldr	r3, [pc, #104]	@ (8002cac <handleTouch+0x28c>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	701a      	strb	r2, [r3, #0]
					protocol_offset = 2;
 8002c46:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb0 <handleTouch+0x290>)
 8002c48:	2202      	movs	r2, #2
 8002c4a:	701a      	strb	r2, [r3, #0]
				}
				//dont draw next page if the button says "Empty"
				if (buttons[i].status == NOT_EMPTY) {
 8002c4c:	4a16      	ldr	r2, [pc, #88]	@ (8002ca8 <handleTouch+0x288>)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	212a      	movs	r1, #42	@ 0x2a
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	3328      	adds	r3, #40	@ 0x28
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d10c      	bne.n	8002c7a <handleTouch+0x25a>
					currentPage = PAGE_SELECT;
 8002c60:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <handleTouch+0x270>)
 8002c62:	2201      	movs	r2, #1
 8002c64:	701a      	strb	r2, [r3, #0]
					DrawInfoPage(buttons[i].label);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	222a      	movs	r2, #42	@ 0x2a
 8002c6a:	fb02 f303 	mul.w	r3, r2, r3
 8002c6e:	3308      	adds	r3, #8
 8002c70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ca8 <handleTouch+0x288>)
 8002c72:	4413      	add	r3, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff f903 	bl	8001e80 <DrawInfoPage>
				}
				HAL_Delay(100); //delay between switch to select page
 8002c7a:	2064      	movs	r0, #100	@ 0x64
 8002c7c:	f001 fbf0 	bl	8004460 <HAL_Delay>
		for (int i = 0; i < NUM_BUTTONS; i++) {
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	3301      	adds	r3, #1
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	f77f af7f 	ble.w	8002b8c <handleTouch+0x16c>
			}
		}
		break;
 8002c8e:	e285      	b.n	800319c <handleTouch+0x77c>
 8002c90:	20000594 	.word	0x20000594
 8002c94:	200001e4 	.word	0x200001e4
 8002c98:	20000267 	.word	0x20000267
 8002c9c:	200001b8 	.word	0x200001b8
 8002ca0:	200000b0 	.word	0x200000b0
 8002ca4:	2000ffd8 	.word	0x2000ffd8
 8002ca8:	20000030 	.word	0x20000030
 8002cac:	200118e0 	.word	0x200118e0
 8002cb0:	200118e1 	.word	0x200118e1

	case PAGE_SELECT:
		//back button
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 8002cb4:	4b99      	ldr	r3, [pc, #612]	@ (8002f1c <handleTouch+0x4fc>)
 8002cb6:	881a      	ldrh	r2, [r3, #0]
 8002cb8:	88fb      	ldrh	r3, [r7, #6]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d820      	bhi.n	8002d00 <handleTouch+0x2e0>
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4b96      	ldr	r3, [pc, #600]	@ (8002f1c <handleTouch+0x4fc>)
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4b94      	ldr	r3, [pc, #592]	@ (8002f1c <handleTouch+0x4fc>)
 8002cca:	889b      	ldrh	r3, [r3, #4]
 8002ccc:	440b      	add	r3, r1
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	dc16      	bgt.n	8002d00 <handleTouch+0x2e0>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 8002cd2:	4b92      	ldr	r3, [pc, #584]	@ (8002f1c <handleTouch+0x4fc>)
 8002cd4:	885a      	ldrh	r2, [r3, #2]
 8002cd6:	88bb      	ldrh	r3, [r7, #4]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d811      	bhi.n	8002d00 <handleTouch+0x2e0>
 8002cdc:	88bb      	ldrh	r3, [r7, #4]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4b8e      	ldr	r3, [pc, #568]	@ (8002f1c <handleTouch+0x4fc>)
 8002ce2:	885b      	ldrh	r3, [r3, #2]
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4b8d      	ldr	r3, [pc, #564]	@ (8002f1c <handleTouch+0x4fc>)
 8002ce8:	88db      	ldrh	r3, [r3, #6]
 8002cea:	440b      	add	r3, r1
 8002cec:	429a      	cmp	r2, r3
 8002cee:	dc07      	bgt.n	8002d00 <handleTouch+0x2e0>
			currentPage = PAGE_MAIN;
 8002cf0:	4b8b      	ldr	r3, [pc, #556]	@ (8002f20 <handleTouch+0x500>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8002cf6:	4b8b      	ldr	r3, [pc, #556]	@ (8002f24 <handleTouch+0x504>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe fee2 	bl	8001ac4 <DrawMainPage>
		}
		//queueSelect button
		if (x >= queueSelectButton.x
 8002d00:	4b89      	ldr	r3, [pc, #548]	@ (8002f28 <handleTouch+0x508>)
 8002d02:	881a      	ldrh	r2, [r3, #0]
 8002d04:	88fb      	ldrh	r3, [r7, #6]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d833      	bhi.n	8002d72 <handleTouch+0x352>
				&& x <= (queueSelectButton.x + queueSelectButton.w)
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4b86      	ldr	r3, [pc, #536]	@ (8002f28 <handleTouch+0x508>)
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	4619      	mov	r1, r3
 8002d14:	4b84      	ldr	r3, [pc, #528]	@ (8002f28 <handleTouch+0x508>)
 8002d16:	889b      	ldrh	r3, [r3, #4]
 8002d18:	440b      	add	r3, r1
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	dc29      	bgt.n	8002d72 <handleTouch+0x352>
				&& y >= queueSelectButton.y
 8002d1e:	4b82      	ldr	r3, [pc, #520]	@ (8002f28 <handleTouch+0x508>)
 8002d20:	885a      	ldrh	r2, [r3, #2]
 8002d22:	88bb      	ldrh	r3, [r7, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d824      	bhi.n	8002d72 <handleTouch+0x352>
				&& y <= (queueSelectButton.y + queueSelectButton.h)) {
 8002d28:	88bb      	ldrh	r3, [r7, #4]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4b7e      	ldr	r3, [pc, #504]	@ (8002f28 <handleTouch+0x508>)
 8002d2e:	885b      	ldrh	r3, [r3, #2]
 8002d30:	4619      	mov	r1, r3
 8002d32:	4b7d      	ldr	r3, [pc, #500]	@ (8002f28 <handleTouch+0x508>)
 8002d34:	88db      	ldrh	r3, [r3, #6]
 8002d36:	440b      	add	r3, r1
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	dc1a      	bgt.n	8002d72 <handleTouch+0x352>
			//store the protocol in queueBuffer
			if (queueSize < MAX_QUEUE_SIZE) {
 8002d3c:	4b7b      	ldr	r3, [pc, #492]	@ (8002f2c <handleTouch+0x50c>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b09      	cmp	r3, #9
 8002d42:	d816      	bhi.n	8002d72 <handleTouch+0x352>

				queueProtocol(page_num, protocol_offset);
 8002d44:	4b77      	ldr	r3, [pc, #476]	@ (8002f24 <handleTouch+0x504>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4b79      	ldr	r3, [pc, #484]	@ (8002f30 <handleTouch+0x510>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4610      	mov	r0, r2
 8002d52:	f000 fd03 	bl	800375c <queueProtocol>
				queueSize++;
 8002d56:	4b75      	ldr	r3, [pc, #468]	@ (8002f2c <handleTouch+0x50c>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4b73      	ldr	r3, [pc, #460]	@ (8002f2c <handleTouch+0x50c>)
 8002d60:	701a      	strb	r2, [r3, #0]
				currentPage = PAGE_QUEUE;
 8002d62:	4b6f      	ldr	r3, [pc, #444]	@ (8002f20 <handleTouch+0x500>)
 8002d64:	2202      	movs	r2, #2
 8002d66:	701a      	strb	r2, [r3, #0]
				DrawQueuePage(queueSize);
 8002d68:	4b70      	ldr	r3, [pc, #448]	@ (8002f2c <handleTouch+0x50c>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff f9a9 	bl	80020c4 <DrawQueuePage>
			} else {
				//handle queue buffer being full
			}
		}
		//select button
		if (x >= selectButton.x && x <= (selectButton.x + selectButton.w)
 8002d72:	4b70      	ldr	r3, [pc, #448]	@ (8002f34 <handleTouch+0x514>)
 8002d74:	881a      	ldrh	r2, [r3, #0]
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d845      	bhi.n	8002e08 <handleTouch+0x3e8>
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	4b6c      	ldr	r3, [pc, #432]	@ (8002f34 <handleTouch+0x514>)
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	4619      	mov	r1, r3
 8002d86:	4b6b      	ldr	r3, [pc, #428]	@ (8002f34 <handleTouch+0x514>)
 8002d88:	889b      	ldrh	r3, [r3, #4]
 8002d8a:	440b      	add	r3, r1
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	dc3b      	bgt.n	8002e08 <handleTouch+0x3e8>
				&& y >= selectButton.y
 8002d90:	4b68      	ldr	r3, [pc, #416]	@ (8002f34 <handleTouch+0x514>)
 8002d92:	885a      	ldrh	r2, [r3, #2]
 8002d94:	88bb      	ldrh	r3, [r7, #4]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d836      	bhi.n	8002e08 <handleTouch+0x3e8>
				&& y <= (selectButton.y + selectButton.h)) {
 8002d9a:	88bb      	ldrh	r3, [r7, #4]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4b65      	ldr	r3, [pc, #404]	@ (8002f34 <handleTouch+0x514>)
 8002da0:	885b      	ldrh	r3, [r3, #2]
 8002da2:	4619      	mov	r1, r3
 8002da4:	4b63      	ldr	r3, [pc, #396]	@ (8002f34 <handleTouch+0x514>)
 8002da6:	88db      	ldrh	r3, [r3, #6]
 8002da8:	440b      	add	r3, r1
 8002daa:	429a      	cmp	r2, r3
 8002dac:	dc2c      	bgt.n	8002e08 <handleTouch+0x3e8>
			//transmit protocol and move to finish page
			transmitProtocol(page_num, protocol_offset);
 8002dae:	4b5d      	ldr	r3, [pc, #372]	@ (8002f24 <handleTouch+0x504>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f30 <handleTouch+0x510>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	4619      	mov	r1, r3
 8002dba:	4610      	mov	r0, r2
 8002dbc:	f000 fc7a 	bl	80036b4 <transmitProtocol>
			currentPage = PAGE_PROGRESS;
 8002dc0:	4b57      	ldr	r3, [pc, #348]	@ (8002f20 <handleTouch+0x500>)
 8002dc2:	2205      	movs	r2, #5
 8002dc4:	701a      	strb	r2, [r3, #0]
			protocolTimer = 5999; //change this to the actual value dorjee
 8002dc6:	4b5c      	ldr	r3, [pc, #368]	@ (8002f38 <handleTouch+0x518>)
 8002dc8:	f241 726f 	movw	r2, #5999	@ 0x176f
 8002dcc:	601a      	str	r2, [r3, #0]
			uint32_t flash_address = get_sector_address(page_num) + protocol_offset * PROTOCOL_SIZE;
 8002dce:	4b55      	ldr	r3, [pc, #340]	@ (8002f24 <handleTouch+0x504>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 ff1a 	bl	8003c0c <get_sector_address>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4a55      	ldr	r2, [pc, #340]	@ (8002f30 <handleTouch+0x510>)
 8002ddc:	7812      	ldrb	r2, [r2, #0]
 8002dde:	4611      	mov	r1, r2
 8002de0:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002de4:	fb01 f202 	mul.w	r2, r1, r2
 8002de8:	4413      	add	r3, r2
 8002dea:	60bb      	str	r3, [r7, #8]
			read_from_flash(currentProtocolTitle, flash_address);
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	4853      	ldr	r0, [pc, #332]	@ (8002f3c <handleTouch+0x51c>)
 8002df0:	f000 fa33 	bl	800325a <read_from_flash>
			DrawProgressPage("FILL", rx_byte, rx_data);
 8002df4:	4b52      	ldr	r3, [pc, #328]	@ (8002f40 <handleTouch+0x520>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	4a52      	ldr	r2, [pc, #328]	@ (8002f44 <handleTouch+0x524>)
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4852      	ldr	r0, [pc, #328]	@ (8002f48 <handleTouch+0x528>)
 8002dfe:	f7ff fa47 	bl	8002290 <DrawProgressPage>

			//start timer 2 interrupt for protocol timer count down
			HAL_TIM_Base_Start_IT(&htim2); //triggers every second
 8002e02:	4852      	ldr	r0, [pc, #328]	@ (8002f4c <handleTouch+0x52c>)
 8002e04:	f005 fbb2 	bl	800856c <HAL_TIM_Base_Start_IT>
		}
		//delete button
		if (x >= deleteButton.x && x <= (deleteButton.x + deleteButton.w)
 8002e08:	4b51      	ldr	r3, [pc, #324]	@ (8002f50 <handleTouch+0x530>)
 8002e0a:	881a      	ldrh	r2, [r3, #0]
 8002e0c:	88fb      	ldrh	r3, [r7, #6]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	f200 81b9 	bhi.w	8003186 <handleTouch+0x766>
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	461a      	mov	r2, r3
 8002e18:	4b4d      	ldr	r3, [pc, #308]	@ (8002f50 <handleTouch+0x530>)
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4b4c      	ldr	r3, [pc, #304]	@ (8002f50 <handleTouch+0x530>)
 8002e20:	889b      	ldrh	r3, [r3, #4]
 8002e22:	440b      	add	r3, r1
 8002e24:	429a      	cmp	r2, r3
 8002e26:	f300 81ae 	bgt.w	8003186 <handleTouch+0x766>
				&& y >= deleteButton.y
 8002e2a:	4b49      	ldr	r3, [pc, #292]	@ (8002f50 <handleTouch+0x530>)
 8002e2c:	885a      	ldrh	r2, [r3, #2]
 8002e2e:	88bb      	ldrh	r3, [r7, #4]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	f200 81a8 	bhi.w	8003186 <handleTouch+0x766>
				&& y <= (deleteButton.y + deleteButton.h)) {
 8002e36:	88bb      	ldrh	r3, [r7, #4]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4b45      	ldr	r3, [pc, #276]	@ (8002f50 <handleTouch+0x530>)
 8002e3c:	885b      	ldrh	r3, [r3, #2]
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4b43      	ldr	r3, [pc, #268]	@ (8002f50 <handleTouch+0x530>)
 8002e42:	88db      	ldrh	r3, [r3, #6]
 8002e44:	440b      	add	r3, r1
 8002e46:	429a      	cmp	r2, r3
 8002e48:	f300 819d 	bgt.w	8003186 <handleTouch+0x766>
			//move to delete confirmation page
			currentPage = PAGE_CONFIRMATION;
 8002e4c:	4b34      	ldr	r3, [pc, #208]	@ (8002f20 <handleTouch+0x500>)
 8002e4e:	2203      	movs	r2, #3
 8002e50:	701a      	strb	r2, [r3, #0]
			DrawConfirmationPage(page_num, protocol_offset);
 8002e52:	4b34      	ldr	r3, [pc, #208]	@ (8002f24 <handleTouch+0x504>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	4b35      	ldr	r3, [pc, #212]	@ (8002f30 <handleTouch+0x510>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4610      	mov	r0, r2
 8002e60:	f7ff f8b8 	bl	8001fd4 <DrawConfirmationPage>
		}
		break;
 8002e64:	e18f      	b.n	8003186 <handleTouch+0x766>

	case PAGE_QUEUE:
		//back button
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 8002e66:	4b2d      	ldr	r3, [pc, #180]	@ (8002f1c <handleTouch+0x4fc>)
 8002e68:	881a      	ldrh	r2, [r3, #0]
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d820      	bhi.n	8002eb2 <handleTouch+0x492>
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	461a      	mov	r2, r3
 8002e74:	4b29      	ldr	r3, [pc, #164]	@ (8002f1c <handleTouch+0x4fc>)
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4b28      	ldr	r3, [pc, #160]	@ (8002f1c <handleTouch+0x4fc>)
 8002e7c:	889b      	ldrh	r3, [r3, #4]
 8002e7e:	440b      	add	r3, r1
 8002e80:	429a      	cmp	r2, r3
 8002e82:	dc16      	bgt.n	8002eb2 <handleTouch+0x492>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 8002e84:	4b25      	ldr	r3, [pc, #148]	@ (8002f1c <handleTouch+0x4fc>)
 8002e86:	885a      	ldrh	r2, [r3, #2]
 8002e88:	88bb      	ldrh	r3, [r7, #4]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d811      	bhi.n	8002eb2 <handleTouch+0x492>
 8002e8e:	88bb      	ldrh	r3, [r7, #4]
 8002e90:	461a      	mov	r2, r3
 8002e92:	4b22      	ldr	r3, [pc, #136]	@ (8002f1c <handleTouch+0x4fc>)
 8002e94:	885b      	ldrh	r3, [r3, #2]
 8002e96:	4619      	mov	r1, r3
 8002e98:	4b20      	ldr	r3, [pc, #128]	@ (8002f1c <handleTouch+0x4fc>)
 8002e9a:	88db      	ldrh	r3, [r3, #6]
 8002e9c:	440b      	add	r3, r1
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	dc07      	bgt.n	8002eb2 <handleTouch+0x492>
			currentPage = PAGE_MAIN;
 8002ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8002f20 <handleTouch+0x500>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8002ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8002f24 <handleTouch+0x504>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe fe09 	bl	8001ac4 <DrawMainPage>
		}
		//run button
		if (x >= runButton.x && x <= (runButton.x + runButton.w)
 8002eb2:	4b28      	ldr	r3, [pc, #160]	@ (8002f54 <handleTouch+0x534>)
 8002eb4:	881a      	ldrh	r2, [r3, #0]
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	f200 8166 	bhi.w	800318a <handleTouch+0x76a>
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4b24      	ldr	r3, [pc, #144]	@ (8002f54 <handleTouch+0x534>)
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4b22      	ldr	r3, [pc, #136]	@ (8002f54 <handleTouch+0x534>)
 8002eca:	889b      	ldrh	r3, [r3, #4]
 8002ecc:	440b      	add	r3, r1
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	f300 815b 	bgt.w	800318a <handleTouch+0x76a>
				&& y >= runButton.y && y <= (runButton.y + runButton.h)) {
 8002ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f54 <handleTouch+0x534>)
 8002ed6:	885a      	ldrh	r2, [r3, #2]
 8002ed8:	88bb      	ldrh	r3, [r7, #4]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	f200 8155 	bhi.w	800318a <handleTouch+0x76a>
 8002ee0:	88bb      	ldrh	r3, [r7, #4]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f54 <handleTouch+0x534>)
 8002ee6:	885b      	ldrh	r3, [r3, #2]
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4b1a      	ldr	r3, [pc, #104]	@ (8002f54 <handleTouch+0x534>)
 8002eec:	88db      	ldrh	r3, [r3, #6]
 8002eee:	440b      	add	r3, r1
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	f300 814a 	bgt.w	800318a <handleTouch+0x76a>
			//handle queue functionality here dorjee
			transmitQueuedProtocols(queueSize);
 8002ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f2c <handleTouch+0x50c>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fcae 	bl	800385c <transmitQueuedProtocols>
			queueSize = 0;
 8002f00:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <handleTouch+0x50c>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]
			currentPage = PAGE_PROGRESS;
 8002f06:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <handleTouch+0x500>)
 8002f08:	2205      	movs	r2, #5
 8002f0a:	701a      	strb	r2, [r3, #0]
			DrawProgressPage("FILL", rx_byte, rx_data);
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f40 <handleTouch+0x520>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	4a0c      	ldr	r2, [pc, #48]	@ (8002f44 <handleTouch+0x524>)
 8002f12:	4619      	mov	r1, r3
 8002f14:	480c      	ldr	r0, [pc, #48]	@ (8002f48 <handleTouch+0x528>)
 8002f16:	f7ff f9bb 	bl	8002290 <DrawProgressPage>
		}
		break;
 8002f1a:	e136      	b.n	800318a <handleTouch+0x76a>
 8002f1c:	200001b8 	.word	0x200001b8
 8002f20:	20000594 	.word	0x20000594
 8002f24:	20000267 	.word	0x20000267
 8002f28:	20000134 	.word	0x20000134
 8002f2c:	2000ffd8 	.word	0x2000ffd8
 8002f30:	200118e1 	.word	0x200118e1
 8002f34:	20000160 	.word	0x20000160
 8002f38:	20000598 	.word	0x20000598
 8002f3c:	200005b4 	.word	0x200005b4
 8002f40:	2000059c 	.word	0x2000059c
 8002f44:	200005a0 	.word	0x200005a0
 8002f48:	08010164 	.word	0x08010164
 8002f4c:	2000046c 	.word	0x2000046c
 8002f50:	2000018c 	.word	0x2000018c
 8002f54:	200000dc 	.word	0x200000dc

	case PAGE_CONFIRMATION:
		//back button
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 8002f58:	4b94      	ldr	r3, [pc, #592]	@ (80031ac <handleTouch+0x78c>)
 8002f5a:	881a      	ldrh	r2, [r3, #0]
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d827      	bhi.n	8002fb2 <handleTouch+0x592>
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	461a      	mov	r2, r3
 8002f66:	4b91      	ldr	r3, [pc, #580]	@ (80031ac <handleTouch+0x78c>)
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4b8f      	ldr	r3, [pc, #572]	@ (80031ac <handleTouch+0x78c>)
 8002f6e:	889b      	ldrh	r3, [r3, #4]
 8002f70:	440b      	add	r3, r1
 8002f72:	429a      	cmp	r2, r3
 8002f74:	dc1d      	bgt.n	8002fb2 <handleTouch+0x592>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 8002f76:	4b8d      	ldr	r3, [pc, #564]	@ (80031ac <handleTouch+0x78c>)
 8002f78:	885a      	ldrh	r2, [r3, #2]
 8002f7a:	88bb      	ldrh	r3, [r7, #4]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d818      	bhi.n	8002fb2 <handleTouch+0x592>
 8002f80:	88bb      	ldrh	r3, [r7, #4]
 8002f82:	461a      	mov	r2, r3
 8002f84:	4b89      	ldr	r3, [pc, #548]	@ (80031ac <handleTouch+0x78c>)
 8002f86:	885b      	ldrh	r3, [r3, #2]
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4b88      	ldr	r3, [pc, #544]	@ (80031ac <handleTouch+0x78c>)
 8002f8c:	88db      	ldrh	r3, [r3, #6]
 8002f8e:	440b      	add	r3, r1
 8002f90:	429a      	cmp	r2, r3
 8002f92:	dc0e      	bgt.n	8002fb2 <handleTouch+0x592>
			currentPage = PAGE_SELECT;
 8002f94:	4b86      	ldr	r3, [pc, #536]	@ (80031b0 <handleTouch+0x790>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	701a      	strb	r2, [r3, #0]
			DrawInfoPage(buttons[protocol_offset].label);
 8002f9a:	4b86      	ldr	r3, [pc, #536]	@ (80031b4 <handleTouch+0x794>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	232a      	movs	r3, #42	@ 0x2a
 8002fa2:	fb02 f303 	mul.w	r3, r2, r3
 8002fa6:	3308      	adds	r3, #8
 8002fa8:	4a83      	ldr	r2, [pc, #524]	@ (80031b8 <handleTouch+0x798>)
 8002faa:	4413      	add	r3, r2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fe ff67 	bl	8001e80 <DrawInfoPage>
		}
		//confirm button
		if (x >= confirmButton.x && x <= (confirmButton.x + confirmButton.w)
 8002fb2:	4b82      	ldr	r3, [pc, #520]	@ (80031bc <handleTouch+0x79c>)
 8002fb4:	881a      	ldrh	r2, [r3, #0]
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	f200 80e8 	bhi.w	800318e <handleTouch+0x76e>
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b7e      	ldr	r3, [pc, #504]	@ (80031bc <handleTouch+0x79c>)
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4b7c      	ldr	r3, [pc, #496]	@ (80031bc <handleTouch+0x79c>)
 8002fca:	889b      	ldrh	r3, [r3, #4]
 8002fcc:	440b      	add	r3, r1
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	f300 80dd 	bgt.w	800318e <handleTouch+0x76e>
				&& y >= confirmButton.y
 8002fd4:	4b79      	ldr	r3, [pc, #484]	@ (80031bc <handleTouch+0x79c>)
 8002fd6:	885a      	ldrh	r2, [r3, #2]
 8002fd8:	88bb      	ldrh	r3, [r7, #4]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	f200 80d7 	bhi.w	800318e <handleTouch+0x76e>
				&& y <= (confirmButton.y + confirmButton.h)) {
 8002fe0:	88bb      	ldrh	r3, [r7, #4]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	4b75      	ldr	r3, [pc, #468]	@ (80031bc <handleTouch+0x79c>)
 8002fe6:	885b      	ldrh	r3, [r3, #2]
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4b74      	ldr	r3, [pc, #464]	@ (80031bc <handleTouch+0x79c>)
 8002fec:	88db      	ldrh	r3, [r3, #6]
 8002fee:	440b      	add	r3, r1
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	f300 80cc 	bgt.w	800318e <handleTouch+0x76e>
			//delete protocol and go back to main page
			deleteProtocol(page_num, protocol_offset);
 8002ff6:	4b72      	ldr	r3, [pc, #456]	@ (80031c0 <handleTouch+0x7a0>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4b6d      	ldr	r3, [pc, #436]	@ (80031b4 <handleTouch+0x794>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	4619      	mov	r1, r3
 8003002:	4610      	mov	r0, r2
 8003004:	f000 fc7a 	bl	80038fc <deleteProtocol>
			currentPage = PAGE_MAIN;
 8003008:	4b69      	ldr	r3, [pc, #420]	@ (80031b0 <handleTouch+0x790>)
 800300a:	2200      	movs	r2, #0
 800300c:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 800300e:	4b6c      	ldr	r3, [pc, #432]	@ (80031c0 <handleTouch+0x7a0>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe fd56 	bl	8001ac4 <DrawMainPage>
		}
		break;
 8003018:	e0b9      	b.n	800318e <handleTouch+0x76e>

	case PAGE_PROGRESS:
		//stop button
		if ((x >= backButton.x) && (x <= backButton.x + backButton.w)
 800301a:	4b64      	ldr	r3, [pc, #400]	@ (80031ac <handleTouch+0x78c>)
 800301c:	881a      	ldrh	r2, [r3, #0]
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	429a      	cmp	r2, r3
 8003022:	d81e      	bhi.n	8003062 <handleTouch+0x642>
 8003024:	88fb      	ldrh	r3, [r7, #6]
 8003026:	461a      	mov	r2, r3
 8003028:	4b60      	ldr	r3, [pc, #384]	@ (80031ac <handleTouch+0x78c>)
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	4619      	mov	r1, r3
 800302e:	4b5f      	ldr	r3, [pc, #380]	@ (80031ac <handleTouch+0x78c>)
 8003030:	889b      	ldrh	r3, [r3, #4]
 8003032:	440b      	add	r3, r1
 8003034:	429a      	cmp	r2, r3
 8003036:	dc14      	bgt.n	8003062 <handleTouch+0x642>
				&& (y >= backButton.y)
 8003038:	4b5c      	ldr	r3, [pc, #368]	@ (80031ac <handleTouch+0x78c>)
 800303a:	885a      	ldrh	r2, [r3, #2]
 800303c:	88bb      	ldrh	r3, [r7, #4]
 800303e:	429a      	cmp	r2, r3
 8003040:	d80f      	bhi.n	8003062 <handleTouch+0x642>
				&& (y <= backButton.y + backButton.h + BACK_BUTTON_OFFSET)) {
 8003042:	88bb      	ldrh	r3, [r7, #4]
 8003044:	461a      	mov	r2, r3
 8003046:	4b59      	ldr	r3, [pc, #356]	@ (80031ac <handleTouch+0x78c>)
 8003048:	885b      	ldrh	r3, [r3, #2]
 800304a:	4619      	mov	r1, r3
 800304c:	4b57      	ldr	r3, [pc, #348]	@ (80031ac <handleTouch+0x78c>)
 800304e:	88db      	ldrh	r3, [r3, #6]
 8003050:	440b      	add	r3, r1
 8003052:	333c      	adds	r3, #60	@ 0x3c
 8003054:	429a      	cmp	r2, r3
 8003056:	dc04      	bgt.n	8003062 <handleTouch+0x642>
			//printf("touched\n");
			currentPage = PAGE_STOP;
 8003058:	4b55      	ldr	r3, [pc, #340]	@ (80031b0 <handleTouch+0x790>)
 800305a:	2206      	movs	r2, #6
 800305c:	701a      	strb	r2, [r3, #0]
			DrawStopPage();
 800305e:	f7ff fc39 	bl	80028d4 <DrawStopPage>
		}
		//when protocol finishes naturally, it will send a done signal
		uint8_t done_signal;
		if (HAL_UART_Receive(&huart2, &done_signal, 1, 0) == HAL_OK) {
 8003062:	1cf9      	adds	r1, r7, #3
 8003064:	2300      	movs	r3, #0
 8003066:	2201      	movs	r2, #1
 8003068:	4856      	ldr	r0, [pc, #344]	@ (80031c4 <handleTouch+0x7a4>)
 800306a:	f006 fb5e 	bl	800972a <HAL_UART_Receive>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	f040 808e 	bne.w	8003192 <handleTouch+0x772>
			if (done_signal == 'D') {
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	2b44      	cmp	r3, #68	@ 0x44
 800307a:	f040 808a 	bne.w	8003192 <handleTouch+0x772>
			    //go to success page
				currentPage = PAGE_FINISH;
 800307e:	4b4c      	ldr	r3, [pc, #304]	@ (80031b0 <handleTouch+0x790>)
 8003080:	2204      	movs	r2, #4
 8003082:	701a      	strb	r2, [r3, #0]
				DrawPageFinish();
 8003084:	f7ff fc8a 	bl	800299c <DrawPageFinish>

				//stop the interrupt
				HAL_TIM_Base_Stop_IT(&htim2);
 8003088:	484f      	ldr	r0, [pc, #316]	@ (80031c8 <handleTouch+0x7a8>)
 800308a:	f005 fadf 	bl	800864c <HAL_TIM_Base_Stop_IT>
			}
		}
		break;
 800308e:	e080      	b.n	8003192 <handleTouch+0x772>

	case PAGE_STOP:
		//no button
		if (x >= noButton.x && x <= (noButton.x + noButton.w) && y >= noButton.y
 8003090:	4b4e      	ldr	r3, [pc, #312]	@ (80031cc <handleTouch+0x7ac>)
 8003092:	881a      	ldrh	r2, [r3, #0]
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	429a      	cmp	r2, r3
 8003098:	d822      	bhi.n	80030e0 <handleTouch+0x6c0>
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	461a      	mov	r2, r3
 800309e:	4b4b      	ldr	r3, [pc, #300]	@ (80031cc <handleTouch+0x7ac>)
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	4619      	mov	r1, r3
 80030a4:	4b49      	ldr	r3, [pc, #292]	@ (80031cc <handleTouch+0x7ac>)
 80030a6:	889b      	ldrh	r3, [r3, #4]
 80030a8:	440b      	add	r3, r1
 80030aa:	429a      	cmp	r2, r3
 80030ac:	dc18      	bgt.n	80030e0 <handleTouch+0x6c0>
 80030ae:	4b47      	ldr	r3, [pc, #284]	@ (80031cc <handleTouch+0x7ac>)
 80030b0:	885a      	ldrh	r2, [r3, #2]
 80030b2:	88bb      	ldrh	r3, [r7, #4]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d813      	bhi.n	80030e0 <handleTouch+0x6c0>
				&& y <= (noButton.y + noButton.h)) {
 80030b8:	88bb      	ldrh	r3, [r7, #4]
 80030ba:	461a      	mov	r2, r3
 80030bc:	4b43      	ldr	r3, [pc, #268]	@ (80031cc <handleTouch+0x7ac>)
 80030be:	885b      	ldrh	r3, [r3, #2]
 80030c0:	4619      	mov	r1, r3
 80030c2:	4b42      	ldr	r3, [pc, #264]	@ (80031cc <handleTouch+0x7ac>)
 80030c4:	88db      	ldrh	r3, [r3, #6]
 80030c6:	440b      	add	r3, r1
 80030c8:	429a      	cmp	r2, r3
 80030ca:	dc09      	bgt.n	80030e0 <handleTouch+0x6c0>
			currentPage = PAGE_PROGRESS;
 80030cc:	4b38      	ldr	r3, [pc, #224]	@ (80031b0 <handleTouch+0x790>)
 80030ce:	2205      	movs	r2, #5
 80030d0:	701a      	strb	r2, [r3, #0]
			DrawProgressPage("FILL", rx_byte, rx_data);
 80030d2:	4b3f      	ldr	r3, [pc, #252]	@ (80031d0 <handleTouch+0x7b0>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	4a3f      	ldr	r2, [pc, #252]	@ (80031d4 <handleTouch+0x7b4>)
 80030d8:	4619      	mov	r1, r3
 80030da:	483f      	ldr	r0, [pc, #252]	@ (80031d8 <handleTouch+0x7b8>)
 80030dc:	f7ff f8d8 	bl	8002290 <DrawProgressPage>
		}
		//yes button
		if (x >= yesButton.x && x <= (yesButton.x + yesButton.w)
 80030e0:	4b3e      	ldr	r3, [pc, #248]	@ (80031dc <handleTouch+0x7bc>)
 80030e2:	881a      	ldrh	r2, [r3, #0]
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d855      	bhi.n	8003196 <handleTouch+0x776>
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	461a      	mov	r2, r3
 80030ee:	4b3b      	ldr	r3, [pc, #236]	@ (80031dc <handleTouch+0x7bc>)
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	4619      	mov	r1, r3
 80030f4:	4b39      	ldr	r3, [pc, #228]	@ (80031dc <handleTouch+0x7bc>)
 80030f6:	889b      	ldrh	r3, [r3, #4]
 80030f8:	440b      	add	r3, r1
 80030fa:	429a      	cmp	r2, r3
 80030fc:	dc4b      	bgt.n	8003196 <handleTouch+0x776>
				&& y >= yesButton.y && y <= (yesButton.y + yesButton.h)) {
 80030fe:	4b37      	ldr	r3, [pc, #220]	@ (80031dc <handleTouch+0x7bc>)
 8003100:	885a      	ldrh	r2, [r3, #2]
 8003102:	88bb      	ldrh	r3, [r7, #4]
 8003104:	429a      	cmp	r2, r3
 8003106:	d846      	bhi.n	8003196 <handleTouch+0x776>
 8003108:	88bb      	ldrh	r3, [r7, #4]
 800310a:	461a      	mov	r2, r3
 800310c:	4b33      	ldr	r3, [pc, #204]	@ (80031dc <handleTouch+0x7bc>)
 800310e:	885b      	ldrh	r3, [r3, #2]
 8003110:	4619      	mov	r1, r3
 8003112:	4b32      	ldr	r3, [pc, #200]	@ (80031dc <handleTouch+0x7bc>)
 8003114:	88db      	ldrh	r3, [r3, #6]
 8003116:	440b      	add	r3, r1
 8003118:	429a      	cmp	r2, r3
 800311a:	dc3c      	bgt.n	8003196 <handleTouch+0x776>
			//Send stop signal to ESP32 and go back to main page
			SendStopMotorsMessage();
 800311c:	f000 fd62 	bl	8003be4 <SendStopMotorsMessage>
			currentPage = PAGE_MAIN;
 8003120:	4b23      	ldr	r3, [pc, #140]	@ (80031b0 <handleTouch+0x790>)
 8003122:	2200      	movs	r2, #0
 8003124:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8003126:	4b26      	ldr	r3, [pc, #152]	@ (80031c0 <handleTouch+0x7a0>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7fe fcca 	bl	8001ac4 <DrawMainPage>

			//stop the interrupt
			HAL_TIM_Base_Stop_IT(&htim2);
 8003130:	4825      	ldr	r0, [pc, #148]	@ (80031c8 <handleTouch+0x7a8>)
 8003132:	f005 fa8b 	bl	800864c <HAL_TIM_Base_Stop_IT>
		}
		break;
 8003136:	e02e      	b.n	8003196 <handleTouch+0x776>

	case PAGE_FINISH:
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 8003138:	4b1c      	ldr	r3, [pc, #112]	@ (80031ac <handleTouch+0x78c>)
 800313a:	881a      	ldrh	r2, [r3, #0]
 800313c:	88fb      	ldrh	r3, [r7, #6]
 800313e:	429a      	cmp	r2, r3
 8003140:	d82b      	bhi.n	800319a <handleTouch+0x77a>
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	461a      	mov	r2, r3
 8003146:	4b19      	ldr	r3, [pc, #100]	@ (80031ac <handleTouch+0x78c>)
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	4619      	mov	r1, r3
 800314c:	4b17      	ldr	r3, [pc, #92]	@ (80031ac <handleTouch+0x78c>)
 800314e:	889b      	ldrh	r3, [r3, #4]
 8003150:	440b      	add	r3, r1
 8003152:	429a      	cmp	r2, r3
 8003154:	dc21      	bgt.n	800319a <handleTouch+0x77a>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 8003156:	4b15      	ldr	r3, [pc, #84]	@ (80031ac <handleTouch+0x78c>)
 8003158:	885a      	ldrh	r2, [r3, #2]
 800315a:	88bb      	ldrh	r3, [r7, #4]
 800315c:	429a      	cmp	r2, r3
 800315e:	d81c      	bhi.n	800319a <handleTouch+0x77a>
 8003160:	88bb      	ldrh	r3, [r7, #4]
 8003162:	461a      	mov	r2, r3
 8003164:	4b11      	ldr	r3, [pc, #68]	@ (80031ac <handleTouch+0x78c>)
 8003166:	885b      	ldrh	r3, [r3, #2]
 8003168:	4619      	mov	r1, r3
 800316a:	4b10      	ldr	r3, [pc, #64]	@ (80031ac <handleTouch+0x78c>)
 800316c:	88db      	ldrh	r3, [r3, #6]
 800316e:	440b      	add	r3, r1
 8003170:	429a      	cmp	r2, r3
 8003172:	dc12      	bgt.n	800319a <handleTouch+0x77a>
			currentPage = PAGE_MAIN;
 8003174:	4b0e      	ldr	r3, [pc, #56]	@ (80031b0 <handleTouch+0x790>)
 8003176:	2200      	movs	r2, #0
 8003178:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 800317a:	4b11      	ldr	r3, [pc, #68]	@ (80031c0 <handleTouch+0x7a0>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe fca0 	bl	8001ac4 <DrawMainPage>
		}
		break;
 8003184:	e009      	b.n	800319a <handleTouch+0x77a>
		break;
 8003186:	bf00      	nop
 8003188:	e008      	b.n	800319c <handleTouch+0x77c>
		break;
 800318a:	bf00      	nop
 800318c:	e006      	b.n	800319c <handleTouch+0x77c>
		break;
 800318e:	bf00      	nop
 8003190:	e004      	b.n	800319c <handleTouch+0x77c>
		break;
 8003192:	bf00      	nop
 8003194:	e002      	b.n	800319c <handleTouch+0x77c>
		break;
 8003196:	bf00      	nop
 8003198:	e000      	b.n	800319c <handleTouch+0x77c>
		break;
 800319a:	bf00      	nop
	}

	HAL_Delay(SCREEN_DELAY); //debouncing delay
 800319c:	2032      	movs	r0, #50	@ 0x32
 800319e:	f001 f95f 	bl	8004460 <HAL_Delay>
	return 1;
 80031a2:	2301      	movs	r3, #1
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd90      	pop	{r4, r7, pc}
 80031ac:	200001b8 	.word	0x200001b8
 80031b0:	20000594 	.word	0x20000594
 80031b4:	200118e1 	.word	0x200118e1
 80031b8:	20000030 	.word	0x20000030
 80031bc:	20000108 	.word	0x20000108
 80031c0:	20000267 	.word	0x20000267
 80031c4:	200004fc 	.word	0x200004fc
 80031c8:	2000046c 	.word	0x2000046c
 80031cc:	2000023c 	.word	0x2000023c
 80031d0:	2000059c 	.word	0x2000059c
 80031d4:	200005a0 	.word	0x200005a0
 80031d8:	08010164 	.word	0x08010164
 80031dc:	20000210 	.word	0x20000210

080031e0 <erase_sector>:
/**
 * @brief: Erase the memory from an entire sector
 * @param Sector: The sector number
 * @retval: none
 */
void erase_sector(uint32_t Sector) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();  // Unlock flash to enable erasing
 80031e8:	f001 fb56 	bl	8004898 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(sector_mapping(Sector), VOLTAGE_RANGE_3);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fd75 	bl	8003cdc <sector_mapping>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2102      	movs	r1, #2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f001 fcc0 	bl	8004b7c <FLASH_Erase_Sector>
	HAL_FLASH_Lock();  // Lock flash after erasing
 80031fc:	f001 fb6e 	bl	80048dc <HAL_FLASH_Lock>
}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <write_to_flash>:
 * @param flash_address: address of string in flash memory that will be stored
 * @retval: none
 * Note: PLEASE UNLOCK AND LOCK FLASH BEFORE AND AFTER USING THIS FUNCTION,
 * IT DOES NOT DO IT ITSELF
 */
void write_to_flash(const char *data, uint32_t flash_address) {
 8003208:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 800320c:	b085      	sub	sp, #20
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	6039      	str	r1, [r7, #0]
	//HAL_FLASH_Unlock();  // Unlock flash for writing

	for (uint8_t i = 0; i < strlen(data); i++) {
 8003214:	2300      	movs	r3, #0
 8003216:	73fb      	strb	r3, [r7, #15]
 8003218:	e012      	b.n	8003240 <write_to_flash+0x38>
		//printf("%c", data[i]);
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flash_address + i, data[i]); // Write to flash
 800321a:	7bfa      	ldrb	r2, [r7, #15]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	18d1      	adds	r1, r2, r3
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	4413      	add	r3, r2
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2200      	movs	r2, #0
 800322c:	4698      	mov	r8, r3
 800322e:	4691      	mov	r9, r2
 8003230:	4642      	mov	r2, r8
 8003232:	464b      	mov	r3, r9
 8003234:	2000      	movs	r0, #0
 8003236:	f001 fadb 	bl	80047f0 <HAL_FLASH_Program>
	for (uint8_t i = 0; i < strlen(data); i++) {
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	3301      	adds	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
 8003240:	7bfc      	ldrb	r4, [r7, #15]
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fc ffd4 	bl	80001f0 <strlen>
 8003248:	4603      	mov	r3, r0
 800324a:	429c      	cmp	r4, r3
 800324c:	d3e5      	bcc.n	800321a <write_to_flash+0x12>
	}

	//HAL_FLASH_Lock();  // Lock flash after writing
}
 800324e:	bf00      	nop
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

0800325a <read_from_flash>:
 * @param flash_address: address of string in flash memory that will be read
 * @retval: failure if its reading trash from flash memory.
 * it literally does not read from flash btw if it detects 0xFF at the start
 * that means your output buffer will not be updated
 */
uint8_t read_from_flash(char *output, uint32_t flash_address) {
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	6039      	str	r1, [r7, #0]
	// Read byte by byte from flash memory, get a whole string in output variable
	for (uint8_t i = 0; i < MAX_LINE_LENGTH; i++) {
 8003264:	2300      	movs	r3, #0
 8003266:	73fb      	strb	r3, [r7, #15]
 8003268:	e014      	b.n	8003294 <read_from_flash+0x3a>
		char key = *(char*) (flash_address + i);
 800326a:	7bfa      	ldrb	r2, [r7, #15]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	4413      	add	r3, r2
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	73bb      	strb	r3, [r7, #14]
		//check if reading trash (0xFF) from flash memory
		if (key == 0xFF) {
 8003274:	7bbb      	ldrb	r3, [r7, #14]
 8003276:	2bff      	cmp	r3, #255	@ 0xff
 8003278:	d104      	bne.n	8003284 <read_from_flash+0x2a>
			if (i == 0) {
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d106      	bne.n	800328e <read_from_flash+0x34>
				return 0;
 8003280:	2300      	movs	r3, #0
 8003282:	e01b      	b.n	80032bc <read_from_flash+0x62>
			}
		} else {
			output[i] = key;
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	4413      	add	r3, r2
 800328a:	7bba      	ldrb	r2, [r7, #14]
 800328c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX_LINE_LENGTH; i++) {
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	3301      	adds	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	2b1f      	cmp	r3, #31
 8003298:	d9e7      	bls.n	800326a <read_from_flash+0x10>
		}
	}
	output[strlen(output)] = '\0'; //add null to the end of string for printing
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fc ffa8 	bl	80001f0 <strlen>
 80032a0:	4602      	mov	r2, r0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4413      	add	r3, r2
 80032a6:	2200      	movs	r2, #0
 80032a8:	701a      	strb	r2, [r3, #0]
	//printf("output is %s and strlen: %d\n", output, strlen(output));

	//error handling. G-codes are less than 32 chars, anything more is trash
	if (strlen(output) < MAX_LINE_LENGTH) {
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7fc ffa0 	bl	80001f0 <strlen>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b1f      	cmp	r3, #31
 80032b4:	d801      	bhi.n	80032ba <read_from_flash+0x60>
		return 1;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <read_from_flash+0x62>
	} else {
		return 0;
 80032ba:	2300      	movs	r3, #0
	}

}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <storeProtocol>:
 * @param gcode_file: array of G-code commands
 * @param sector: which sector to store protocol in
 * @retval: failure if sector is "full"
 */
uint8_t storeProtocol(char new_protocol[MAX_LINES][MAX_LINE_LENGTH],
		uint32_t sector) {
 80032c4:	b580      	push	{r7, lr}
 80032c6:	f5ad 4d96 	sub.w	sp, sp, #19200	@ 0x4b00
 80032ca:	b088      	sub	sp, #32
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 80032d2:	f6a3 331c 	subw	r3, r3, #2844	@ 0xb1c
 80032d6:	6018      	str	r0, [r3, #0]
 80032d8:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 80032dc:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 80032e0:	6019      	str	r1, [r3, #0]

	//initialize variables
	int i = 0;  //protocol index
 80032e2:	2300      	movs	r3, #0
 80032e4:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80032e8:	f102 021c 	add.w	r2, r2, #28
 80032ec:	6013      	str	r3, [r2, #0]
	int j = 0;  //line index
 80032ee:	2300      	movs	r3, #0
 80032f0:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80032f4:	f102 0218 	add.w	r2, r2, #24
 80032f8:	6013      	str	r3, [r2, #0]
	char protocolStorage[MAX_PROTOCOLS_IN_SECTOR][MAX_LINES][MAX_LINE_LENGTH] =
 80032fa:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 80032fe:	f6a3 3318 	subw	r3, r3, #2840	@ 0xb18
 8003302:	4618      	mov	r0, r3
 8003304:	f44f 4396 	mov.w	r3, #19200	@ 0x4b00
 8003308:	461a      	mov	r2, r3
 800330a:	2100      	movs	r1, #0
 800330c:	f00b ffc0 	bl	800f290 <memset>
			{ { { '\0' } } };
	uint32_t flash_address = get_sector_address(sector);
 8003310:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8003314:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	f000 fc77 	bl	8003c0c <get_sector_address>
 800331e:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003322:	f103 0314 	add.w	r3, r3, #20
 8003326:	6018      	str	r0, [r3, #0]

	//check if all sectors are full before storing a protocol
	uint8_t num_protocols = get_num_protocols_in_sector(sector);
 8003328:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 800332c:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	f000 f966 	bl	8003602 <get_num_protocols_in_sector>
 8003336:	4603      	mov	r3, r0
 8003338:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800333c:	f102 0213 	add.w	r2, r2, #19
 8003340:	7013      	strb	r3, [r2, #0]
	if (num_protocols == MAX_PROTOCOLS_IN_SECTOR) {
 8003342:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003346:	f103 0313 	add.w	r3, r3, #19
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b03      	cmp	r3, #3
 800334e:	d101      	bne.n	8003354 <storeProtocol+0x90>
		return 0;
 8003350:	2300      	movs	r3, #0
 8003352:	e150      	b.n	80035f6 <storeProtocol+0x332>
	}

	//read existing protocols in sector and put into the temp protocol storage
	for (i = 0; i < num_protocols; i++) {
 8003354:	2300      	movs	r3, #0
 8003356:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800335a:	f102 021c 	add.w	r2, r2, #28
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	e05a      	b.n	8003418 <storeProtocol+0x154>
		for (j = 0; j < MAX_LINES; j++) {
 8003362:	2300      	movs	r3, #0
 8003364:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003368:	f102 0218 	add.w	r2, r2, #24
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	e041      	b.n	80033f4 <storeProtocol+0x130>
			//get the address for the current line in the current protocol
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8003370:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003374:	f103 031c 	add.w	r3, r3, #28
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f241 7270 	movw	r2, #6000	@ 0x1770
 800337e:	fb02 f303 	mul.w	r3, r2, r3
					+ j * MAX_LINE_LENGTH;
 8003382:	461a      	mov	r2, r3
 8003384:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003388:	f103 0318 	add.w	r3, r3, #24
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	015b      	lsls	r3, r3, #5
 8003390:	4413      	add	r3, r2
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8003392:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003396:	f102 0214 	add.w	r2, r2, #20
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	4413      	add	r3, r2
 800339e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80033a2:	f102 0208 	add.w	r2, r2, #8
 80033a6:	6013      	str	r3, [r2, #0]
			//read lines from memory into buffer until you reach garbage
			read_from_flash(protocolStorage[i][j], temp_address); //only updates protocolStorage if its a valid line from memory
 80033a8:	f107 0320 	add.w	r3, r7, #32
 80033ac:	3b18      	subs	r3, #24
 80033ae:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80033b2:	f102 021c 	add.w	r2, r2, #28
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	21c8      	movs	r1, #200	@ 0xc8
 80033ba:	fb02 f101 	mul.w	r1, r2, r1
 80033be:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80033c2:	f102 0218 	add.w	r2, r2, #24
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	440a      	add	r2, r1
 80033ca:	0152      	lsls	r2, r2, #5
 80033cc:	4413      	add	r3, r2
 80033ce:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80033d2:	f102 0208 	add.w	r2, r2, #8
 80033d6:	6811      	ldr	r1, [r2, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff ff3e 	bl	800325a <read_from_flash>
		for (j = 0; j < MAX_LINES; j++) {
 80033de:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80033e2:	f103 0318 	add.w	r3, r3, #24
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3301      	adds	r3, #1
 80033ea:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80033ee:	f102 0218 	add.w	r2, r2, #24
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80033f8:	f103 0318 	add.w	r3, r3, #24
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2bc7      	cmp	r3, #199	@ 0xc7
 8003400:	ddb6      	ble.n	8003370 <storeProtocol+0xac>
	for (i = 0; i < num_protocols; i++) {
 8003402:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003406:	f103 031c 	add.w	r3, r3, #28
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3301      	adds	r3, #1
 800340e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003412:	f102 021c 	add.w	r2, r2, #28
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 800341c:	f103 0313 	add.w	r3, r3, #19
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003426:	f102 021c 	add.w	r2, r2, #28
 800342a:	6812      	ldr	r2, [r2, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	db98      	blt.n	8003362 <storeProtocol+0x9e>
	}
	//output: we now have the existing protocols in the buffer.
	//they only have their first number of lines in. the rest of lines are null

	//put the new protocol into the temp protocol storage
	for (j = 0; j < MAX_LINES; j++) {
 8003430:	2300      	movs	r3, #0
 8003432:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003436:	f102 0218 	add.w	r2, r2, #24
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	e03b      	b.n	80034b6 <storeProtocol+0x1f2>
		//copy each line into the buffer from new protocol, should be null terminated from qr scanner
		if (new_protocol[j][0] != '\0') {
 800343e:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003442:	f103 0318 	add.w	r3, r3, #24
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	015b      	lsls	r3, r3, #5
 800344a:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 800344e:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	4413      	add	r3, r2
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d021      	beq.n	80034a0 <storeProtocol+0x1dc>
			strcpy(protocolStorage[i][j], new_protocol[j]);
 800345c:	f107 0320 	add.w	r3, r7, #32
 8003460:	3b18      	subs	r3, #24
 8003462:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003466:	f102 021c 	add.w	r2, r2, #28
 800346a:	6812      	ldr	r2, [r2, #0]
 800346c:	21c8      	movs	r1, #200	@ 0xc8
 800346e:	fb02 f101 	mul.w	r1, r2, r1
 8003472:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003476:	f102 0218 	add.w	r2, r2, #24
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	440a      	add	r2, r1
 800347e:	0152      	lsls	r2, r2, #5
 8003480:	1898      	adds	r0, r3, r2
 8003482:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003486:	f103 0318 	add.w	r3, r3, #24
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	015b      	lsls	r3, r3, #5
 800348e:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 8003492:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 8003496:	6812      	ldr	r2, [r2, #0]
 8003498:	4413      	add	r3, r2
 800349a:	4619      	mov	r1, r3
 800349c:	f00b ff83 	bl	800f3a6 <strcpy>
	for (j = 0; j < MAX_LINES; j++) {
 80034a0:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80034a4:	f103 0318 	add.w	r3, r3, #24
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3301      	adds	r3, #1
 80034ac:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80034b0:	f102 0218 	add.w	r2, r2, #24
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80034ba:	f103 0318 	add.w	r3, r3, #24
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80034c2:	ddbc      	ble.n	800343e <storeProtocol+0x17a>
	}
	//we now have the new protocol in the buffer.
	//it only has the first number of lines in. the rest of lines are null

	//write existing protocols and new protocol to flash memory, string-by-string
	erase_sector(sector); //erase sector before writing
 80034c4:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 80034c8:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	f7ff fe87 	bl	80031e0 <erase_sector>
	HAL_FLASH_Unlock(); // Unlock flash for writing. note: the erase_sector() unlocks and locks itself
 80034d2:	f001 f9e1 	bl	8004898 <HAL_FLASH_Unlock>
	for (i = 0; i < (num_protocols + 1); i++) {
 80034d6:	2300      	movs	r3, #0
 80034d8:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80034dc:	f102 021c 	add.w	r2, r2, #28
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	e078      	b.n	80035d6 <storeProtocol+0x312>
		for (j = 0; j < MAX_LINES; j++) {
 80034e4:	2300      	movs	r3, #0
 80034e6:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80034ea:	f102 0218 	add.w	r2, r2, #24
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	e05f      	b.n	80035b2 <storeProtocol+0x2ee>
			//if first character of a line is null from qr scanner or trash from flash, ignore it
			if ((new_protocol[j][0] != '\0') && (new_protocol[j][0] != 0xFF)) {
 80034f2:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80034f6:	f103 0318 	add.w	r3, r3, #24
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	015b      	lsls	r3, r3, #5
 80034fe:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 8003502:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	4413      	add	r3, r2
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d045      	beq.n	800359c <storeProtocol+0x2d8>
 8003510:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003514:	f103 0318 	add.w	r3, r3, #24
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	015b      	lsls	r3, r3, #5
 800351c:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 8003520:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 8003524:	6812      	ldr	r2, [r2, #0]
 8003526:	4413      	add	r3, r2
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2bff      	cmp	r3, #255	@ 0xff
 800352c:	d036      	beq.n	800359c <storeProtocol+0x2d8>
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 800352e:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003532:	f103 031c 	add.w	r3, r3, #28
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f241 7270 	movw	r2, #6000	@ 0x1770
 800353c:	fb02 f303 	mul.w	r3, r2, r3
						+ j * MAX_LINE_LENGTH;
 8003540:	461a      	mov	r2, r3
 8003542:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003546:	f103 0318 	add.w	r3, r3, #24
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	015b      	lsls	r3, r3, #5
 800354e:	4413      	add	r3, r2
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8003550:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003554:	f102 0214 	add.w	r2, r2, #20
 8003558:	6812      	ldr	r2, [r2, #0]
 800355a:	4413      	add	r3, r2
 800355c:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003560:	f102 020c 	add.w	r2, r2, #12
 8003564:	6013      	str	r3, [r2, #0]
				//printf("len: %d and data: %s", strlen(protocolStorage[i][j]), protocolStorage[i][j]);
				write_to_flash(protocolStorage[i][j], temp_address);
 8003566:	f107 0320 	add.w	r3, r7, #32
 800356a:	3b18      	subs	r3, #24
 800356c:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003570:	f102 021c 	add.w	r2, r2, #28
 8003574:	6812      	ldr	r2, [r2, #0]
 8003576:	21c8      	movs	r1, #200	@ 0xc8
 8003578:	fb02 f101 	mul.w	r1, r2, r1
 800357c:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003580:	f102 0218 	add.w	r2, r2, #24
 8003584:	6812      	ldr	r2, [r2, #0]
 8003586:	440a      	add	r2, r1
 8003588:	0152      	lsls	r2, r2, #5
 800358a:	4413      	add	r3, r2
 800358c:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003590:	f102 020c 	add.w	r2, r2, #12
 8003594:	6811      	ldr	r1, [r2, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fe36 	bl	8003208 <write_to_flash>
		for (j = 0; j < MAX_LINES; j++) {
 800359c:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80035a0:	f103 0318 	add.w	r3, r3, #24
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3301      	adds	r3, #1
 80035a8:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80035ac:	f102 0218 	add.w	r2, r2, #24
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80035b6:	f103 0318 	add.w	r3, r3, #24
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2bc7      	cmp	r3, #199	@ 0xc7
 80035be:	dd98      	ble.n	80034f2 <storeProtocol+0x22e>
	for (i = 0; i < (num_protocols + 1); i++) {
 80035c0:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80035c4:	f103 031c 	add.w	r3, r3, #28
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3301      	adds	r3, #1
 80035cc:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80035d0:	f102 021c 	add.w	r2, r2, #28
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80035da:	f103 0313 	add.w	r3, r3, #19
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80035e4:	f102 021c 	add.w	r2, r2, #28
 80035e8:	6812      	ldr	r2, [r2, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	f77f af7a 	ble.w	80034e4 <storeProtocol+0x220>
			}
		}
	}
	HAL_FLASH_Lock();  // Unlock flash for writing
 80035f0:	f001 f974 	bl	80048dc <HAL_FLASH_Lock>

	//output:flash memory now has the lines of protocol storage in there
	//the remaining space is still 0xFF in flash
	return 1;
 80035f4:	2301      	movs	r3, #1
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	f507 4796 	add.w	r7, r7, #19200	@ 0x4b00
 80035fc:	3720      	adds	r7, #32
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <get_num_protocols_in_sector>:

//return number of protocols in the sector
uint8_t get_num_protocols_in_sector(uint32_t sector) {
 8003602:	b580      	push	{r7, lr}
 8003604:	b086      	sub	sp, #24
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
	uint32_t flash_address = get_sector_address(sector);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fafe 	bl	8003c0c <get_sector_address>
 8003610:	6138      	str	r0, [r7, #16]

	uint8_t i = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8003616:	2300      	movs	r3, #0
 8003618:	75fb      	strb	r3, [r7, #23]
 800361a:	e011      	b.n	8003640 <get_num_protocols_in_sector+0x3e>
		uint8_t first_char = *(uint8_t*) (flash_address + i * PROTOCOL_SIZE);
 800361c:	7dfb      	ldrb	r3, [r7, #23]
 800361e:	f241 7270 	movw	r2, #6000	@ 0x1770
 8003622:	fb02 f303 	mul.w	r3, r2, r3
 8003626:	461a      	mov	r2, r3
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4413      	add	r3, r2
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	73fb      	strb	r3, [r7, #15]
		//memory in flash is default 0xFF
		if (first_char == 0xFF) {
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2bff      	cmp	r3, #255	@ 0xff
 8003634:	d101      	bne.n	800363a <get_num_protocols_in_sector+0x38>
			return i;
 8003636:	7dfb      	ldrb	r3, [r7, #23]
 8003638:	e006      	b.n	8003648 <get_num_protocols_in_sector+0x46>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 800363a:	7dfb      	ldrb	r3, [r7, #23]
 800363c:	3301      	adds	r3, #1
 800363e:	75fb      	strb	r3, [r7, #23]
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d9ea      	bls.n	800361c <get_num_protocols_in_sector+0x1a>
		}
	}
	return i;
 8003646:	7dfb      	ldrb	r3, [r7, #23]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <getFreeSector>:

//check each sector sequentially for any space.
//return the first sector number you find that has space
uint8_t getFreeSector(void) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
	uint8_t i = 1;
 8003656:	2301      	movs	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
	//check every sector starting at 1
	for (i = 1; i < (NUMBER_OF_SECTORS + 1); i++) {
 800365a:	2301      	movs	r3, #1
 800365c:	73fb      	strb	r3, [r7, #15]
 800365e:	e01f      	b.n	80036a0 <getFreeSector+0x50>
		//check each potential protocol slot in the current sector
		for (uint8_t j = 0; j < MAX_PROTOCOLS_IN_SECTOR; j++) {
 8003660:	2300      	movs	r3, #0
 8003662:	73bb      	strb	r3, [r7, #14]
 8003664:	e016      	b.n	8003694 <getFreeSector+0x44>
			//check first char of the given protocol in the current sector
			uint32_t flash_address = get_sector_address(i) + j * PROTOCOL_SIZE;
 8003666:	7bfb      	ldrb	r3, [r7, #15]
 8003668:	4618      	mov	r0, r3
 800366a:	f000 facf 	bl	8003c0c <get_sector_address>
 800366e:	4602      	mov	r2, r0
 8003670:	7bbb      	ldrb	r3, [r7, #14]
 8003672:	f241 7170 	movw	r1, #6000	@ 0x1770
 8003676:	fb01 f303 	mul.w	r3, r1, r3
 800367a:	4413      	add	r3, r2
 800367c:	60bb      	str	r3, [r7, #8]
			char first_char = *(char*) (flash_address);
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	71fb      	strb	r3, [r7, #7]
			//if memory address is empty, this sector is free
			if (first_char == 0xFF) {
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	2bff      	cmp	r3, #255	@ 0xff
 8003688:	d101      	bne.n	800368e <getFreeSector+0x3e>
				return i;
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	e00e      	b.n	80036ac <getFreeSector+0x5c>
		for (uint8_t j = 0; j < MAX_PROTOCOLS_IN_SECTOR; j++) {
 800368e:	7bbb      	ldrb	r3, [r7, #14]
 8003690:	3301      	adds	r3, #1
 8003692:	73bb      	strb	r3, [r7, #14]
 8003694:	7bbb      	ldrb	r3, [r7, #14]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d9e5      	bls.n	8003666 <getFreeSector+0x16>
	for (i = 1; i < (NUMBER_OF_SECTORS + 1); i++) {
 800369a:	7bfb      	ldrb	r3, [r7, #15]
 800369c:	3301      	adds	r3, #1
 800369e:	73fb      	strb	r3, [r7, #15]
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	2b0e      	cmp	r3, #14
 80036a4:	d9dc      	bls.n	8003660 <getFreeSector+0x10>
			}
		}
	}
	//if somehow all sectors are full, return 15 or higher (16 in this case)
	return i + 1;
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	3301      	adds	r3, #1
 80036aa:	b2db      	uxtb	r3, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <transmitProtocol>:

/**
 * @brief: Transmit protocol from flash memory to ESP32 via UART string-by-string
 * @param sector: which sector the protocol is stored in
 */
void transmitProtocol(uint32_t sector, uint32_t offset) {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08c      	sub	sp, #48	@ 0x30
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
	char output[MAX_LINE_LENGTH] = { '\0' };
 80036be:	2300      	movs	r3, #0
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	f107 030c 	add.w	r3, r7, #12
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	605a      	str	r2, [r3, #4]
 80036cc:	609a      	str	r2, [r3, #8]
 80036ce:	60da      	str	r2, [r3, #12]
 80036d0:	611a      	str	r2, [r3, #16]
 80036d2:	615a      	str	r2, [r3, #20]
 80036d4:	619a      	str	r2, [r3, #24]
	uint32_t flash_address = get_sector_address(sector) + offset * PROTOCOL_SIZE;
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fa98 	bl	8003c0c <get_sector_address>
 80036dc:	4602      	mov	r2, r0
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	f241 7170 	movw	r1, #6000	@ 0x1770
 80036e4:	fb01 f303 	mul.w	r3, r1, r3
 80036e8:	4413      	add	r3, r2
 80036ea:	62bb      	str	r3, [r7, #40]	@ 0x28

	//printf("\nNew Protocol\n"); //just for debugging

	//we need to process up to 1028 G-code commands
	//but if we run into an invalid string, gcode file is over
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 80036ec:	2300      	movs	r3, #0
 80036ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80036f2:	e028      	b.n	8003746 <transmitProtocol+0x92>
		//an alternative to resetting the temp buffer is to only read up to newline
		memset(output, 0, MAX_LINE_LENGTH); // Sets all elements of buffer to 0
 80036f4:	f107 0308 	add.w	r3, r7, #8
 80036f8:	2220      	movs	r2, #32
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f00b fdc7 	bl	800f290 <memset>
		if (read_from_flash(output, flash_address + i * MAX_LINE_LENGTH)) {
 8003702:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003706:	015b      	lsls	r3, r3, #5
 8003708:	461a      	mov	r2, r3
 800370a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370c:	441a      	add	r2, r3
 800370e:	f107 0308 	add.w	r3, r7, #8
 8003712:	4611      	mov	r1, r2
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff fda0 	bl	800325a <read_from_flash>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00d      	beq.n	800373c <transmitProtocol+0x88>
			//printf("%s", output);
			HAL_UART_Transmit(&huart2, (uint8_t*) output, strlen(output),
 8003720:	f107 0308 	add.w	r3, r7, #8
 8003724:	4618      	mov	r0, r3
 8003726:	f7fc fd63 	bl	80001f0 <strlen>
 800372a:	4603      	mov	r3, r0
 800372c:	b29a      	uxth	r2, r3
 800372e:	f107 0108 	add.w	r1, r7, #8
 8003732:	f04f 33ff 	mov.w	r3, #4294967295
 8003736:	4808      	ldr	r0, [pc, #32]	@ (8003758 <transmitProtocol+0xa4>)
 8003738:	f005 ff6c 	bl	8009614 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 800373c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003740:	3301      	adds	r3, #1
 8003742:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003746:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800374a:	2bc7      	cmp	r3, #199	@ 0xc7
 800374c:	d9d2      	bls.n	80036f4 <transmitProtocol+0x40>
			HAL_MAX_DELAY);
		}
	}
}
 800374e:	bf00      	nop
 8003750:	bf00      	nop
 8003752:	3730      	adds	r7, #48	@ 0x30
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	200004fc 	.word	0x200004fc

0800375c <queueProtocol>:

/**
 * @brief: Queue protocol from flash memory to RAM buffer
 * @param sector: which sector the protocol is stored in
 */
void queueProtocol(uint32_t sector, uint32_t offset) {
 800375c:	b5b0      	push	{r4, r5, r7, lr}
 800375e:	b08c      	sub	sp, #48	@ 0x30
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
	char output[MAX_LINE_LENGTH] = { '\0' };
 8003766:	2300      	movs	r3, #0
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	f107 030c 	add.w	r3, r7, #12
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	605a      	str	r2, [r3, #4]
 8003774:	609a      	str	r2, [r3, #8]
 8003776:	60da      	str	r2, [r3, #12]
 8003778:	611a      	str	r2, [r3, #16]
 800377a:	615a      	str	r2, [r3, #20]
 800377c:	619a      	str	r2, [r3, #24]
	uint32_t flash_address = get_sector_address(sector) + offset * PROTOCOL_SIZE;
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fa44 	bl	8003c0c <get_sector_address>
 8003784:	4602      	mov	r2, r0
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	f241 7170 	movw	r1, #6000	@ 0x1770
 800378c:	fb01 f303 	mul.w	r3, r1, r3
 8003790:	4413      	add	r3, r2
 8003792:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t last_line = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 800379a:	2300      	movs	r3, #0
 800379c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80037a0:	e030      	b.n	8003804 <queueProtocol+0xa8>
		memset(output, 0, MAX_LINE_LENGTH); // Sets all elements of buffer to 0
 80037a2:	f107 0308 	add.w	r3, r7, #8
 80037a6:	2220      	movs	r2, #32
 80037a8:	2100      	movs	r1, #0
 80037aa:	4618      	mov	r0, r3
 80037ac:	f00b fd70 	bl	800f290 <memset>
		if (read_from_flash(output, flash_address + i * MAX_LINE_LENGTH)) {
 80037b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80037b4:	015b      	lsls	r3, r3, #5
 80037b6:	461a      	mov	r2, r3
 80037b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ba:	441a      	add	r2, r3
 80037bc:	f107 0308 	add.w	r3, r7, #8
 80037c0:	4611      	mov	r1, r2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff fd49 	bl	800325a <read_from_flash>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d015      	beq.n	80037fa <queueProtocol+0x9e>
			strcpy(queueBuffer[queueSize][i], output);
 80037ce:	4b21      	ldr	r3, [pc, #132]	@ (8003854 <queueProtocol+0xf8>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	4619      	mov	r1, r3
 80037d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80037d8:	22c8      	movs	r2, #200	@ 0xc8
 80037da:	fb01 f202 	mul.w	r2, r1, r2
 80037de:	4413      	add	r3, r2
 80037e0:	015b      	lsls	r3, r3, #5
 80037e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003858 <queueProtocol+0xfc>)
 80037e4:	4413      	add	r3, r2
 80037e6:	f107 0208 	add.w	r2, r7, #8
 80037ea:	4611      	mov	r1, r2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f00b fdda 	bl	800f3a6 <strcpy>
			last_line = i;
 80037f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80037f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 80037fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80037fe:	3301      	adds	r3, #1
 8003800:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8003804:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003808:	2bc7      	cmp	r3, #199	@ 0xc7
 800380a:	d9ca      	bls.n	80037a2 <queueProtocol+0x46>
		}
	}
	//dont store the tab operator of protocol for queueing
	queueBuffer[queueSize][last_line][strlen(queueBuffer[queueSize][last_line])
 800380c:	4b11      	ldr	r3, [pc, #68]	@ (8003854 <queueProtocol+0xf8>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	461d      	mov	r5, r3
 8003812:	f897 402f 	ldrb.w	r4, [r7, #47]	@ 0x2f
 8003816:	4b0f      	ldr	r3, [pc, #60]	@ (8003854 <queueProtocol+0xf8>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	4619      	mov	r1, r3
 800381c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003820:	22c8      	movs	r2, #200	@ 0xc8
 8003822:	fb01 f202 	mul.w	r2, r1, r2
 8003826:	4413      	add	r3, r2
 8003828:	015b      	lsls	r3, r3, #5
 800382a:	4a0b      	ldr	r2, [pc, #44]	@ (8003858 <queueProtocol+0xfc>)
 800382c:	4413      	add	r3, r2
 800382e:	4618      	mov	r0, r3
 8003830:	f7fc fcde 	bl	80001f0 <strlen>
 8003834:	4603      	mov	r3, r0
			- 1] = NULL_CHAR; //strlen gives the size of string. tab operator is size-1
 8003836:	3b01      	subs	r3, #1
 8003838:	4907      	ldr	r1, [pc, #28]	@ (8003858 <queueProtocol+0xfc>)
 800383a:	22c8      	movs	r2, #200	@ 0xc8
 800383c:	fb05 f202 	mul.w	r2, r5, r2
 8003840:	4422      	add	r2, r4
 8003842:	0152      	lsls	r2, r2, #5
 8003844:	440a      	add	r2, r1
 8003846:	4413      	add	r3, r2
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
}
 800384c:	bf00      	nop
 800384e:	3730      	adds	r7, #48	@ 0x30
 8003850:	46bd      	mov	sp, r7
 8003852:	bdb0      	pop	{r4, r5, r7, pc}
 8003854:	2000ffd8 	.word	0x2000ffd8
 8003858:	200005d8 	.word	0x200005d8

0800385c <transmitQueuedProtocols>:

/**
 * @brief: Transmit queued protocols from RAM buffer to ESP32 via UART string-by-string
 * @param queueSize:
 */
void transmitQueuedProtocols(uint8_t queueSize) {
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	71fb      	strb	r3, [r7, #7]
	//i need to send a filler title
	//printf("FillerTitle\n");
	HAL_UART_Transmit(&huart2, (uint8_t*) "Filler\r\n", strlen("Filler\r\n"),
 8003866:	f04f 33ff 	mov.w	r3, #4294967295
 800386a:	2208      	movs	r2, #8
 800386c:	491f      	ldr	r1, [pc, #124]	@ (80038ec <transmitQueuedProtocols+0x90>)
 800386e:	4820      	ldr	r0, [pc, #128]	@ (80038f0 <transmitQueuedProtocols+0x94>)
 8003870:	f005 fed0 	bl	8009614 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

	//transmit the queued protocols
	for (uint8_t i = 0; i < queueSize; i++) {
 8003874:	2300      	movs	r3, #0
 8003876:	73fb      	strb	r3, [r7, #15]
 8003878:	e028      	b.n	80038cc <transmitQueuedProtocols+0x70>
		for (uint8_t j = 1; j < MAX_LINES; j++) {
 800387a:	2301      	movs	r3, #1
 800387c:	73bb      	strb	r3, [r7, #14]
 800387e:	e01f      	b.n	80038c0 <transmitQueuedProtocols+0x64>
			//printf(queueBuffer[i][j]);
			HAL_UART_Transmit(&huart2, (uint8_t*) queueBuffer[i][j],
 8003880:	7bfa      	ldrb	r2, [r7, #15]
 8003882:	7bbb      	ldrb	r3, [r7, #14]
 8003884:	21c8      	movs	r1, #200	@ 0xc8
 8003886:	fb01 f202 	mul.w	r2, r1, r2
 800388a:	4413      	add	r3, r2
 800388c:	015b      	lsls	r3, r3, #5
 800388e:	4a19      	ldr	r2, [pc, #100]	@ (80038f4 <transmitQueuedProtocols+0x98>)
 8003890:	189c      	adds	r4, r3, r2
					strlen(queueBuffer[i][j]), HAL_MAX_DELAY);
 8003892:	7bfa      	ldrb	r2, [r7, #15]
 8003894:	7bbb      	ldrb	r3, [r7, #14]
 8003896:	21c8      	movs	r1, #200	@ 0xc8
 8003898:	fb01 f202 	mul.w	r2, r1, r2
 800389c:	4413      	add	r3, r2
 800389e:	015b      	lsls	r3, r3, #5
 80038a0:	4a14      	ldr	r2, [pc, #80]	@ (80038f4 <transmitQueuedProtocols+0x98>)
 80038a2:	4413      	add	r3, r2
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fc fca3 	bl	80001f0 <strlen>
 80038aa:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) queueBuffer[i][j],
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	f04f 33ff 	mov.w	r3, #4294967295
 80038b2:	4621      	mov	r1, r4
 80038b4:	480e      	ldr	r0, [pc, #56]	@ (80038f0 <transmitQueuedProtocols+0x94>)
 80038b6:	f005 fead 	bl	8009614 <HAL_UART_Transmit>
		for (uint8_t j = 1; j < MAX_LINES; j++) {
 80038ba:	7bbb      	ldrb	r3, [r7, #14]
 80038bc:	3301      	adds	r3, #1
 80038be:	73bb      	strb	r3, [r7, #14]
 80038c0:	7bbb      	ldrb	r3, [r7, #14]
 80038c2:	2bc7      	cmp	r3, #199	@ 0xc7
 80038c4:	d9dc      	bls.n	8003880 <transmitQueuedProtocols+0x24>
	for (uint8_t i = 0; i < queueSize; i++) {
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	3301      	adds	r3, #1
 80038ca:	73fb      	strb	r3, [r7, #15]
 80038cc:	7bfa      	ldrb	r2, [r7, #15]
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d3d2      	bcc.n	800387a <transmitQueuedProtocols+0x1e>
//	//debugging print
//	for (int a = 0; a < queueSize; a++) {
//		printf("%s\n", queueBuffer[a]);
//	}
	//finish with a tab operator
	HAL_UART_Transmit(&huart2, (uint8_t*) "\t", 1, HAL_MAX_DELAY);
 80038d4:	f04f 33ff 	mov.w	r3, #4294967295
 80038d8:	2201      	movs	r2, #1
 80038da:	4907      	ldr	r1, [pc, #28]	@ (80038f8 <transmitQueuedProtocols+0x9c>)
 80038dc:	4804      	ldr	r0, [pc, #16]	@ (80038f0 <transmitQueuedProtocols+0x94>)
 80038de:	f005 fe99 	bl	8009614 <HAL_UART_Transmit>
}
 80038e2:	bf00      	nop
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd90      	pop	{r4, r7, pc}
 80038ea:	bf00      	nop
 80038ec:	080102b4 	.word	0x080102b4
 80038f0:	200004fc 	.word	0x200004fc
 80038f4:	200005d8 	.word	0x200005d8
 80038f8:	080102c0 	.word	0x080102c0

080038fc <deleteProtocol>:
 * @brief: Delete protocol from flash memory to ESP32 via UART string-by-string
 * @param sector: which sector the protocol is stored in
 * @param offset: the exact slot in the sector the protocol is stored in
 * @retval: none
 */
void deleteProtocol(uint32_t sector, uint32_t offset) {
 80038fc:	b580      	push	{r7, lr}
 80038fe:	f5ad 4d96 	sub.w	sp, sp, #19200	@ 0x4b00
 8003902:	b09c      	sub	sp, #112	@ 0x70
 8003904:	af00      	add	r7, sp, #0
 8003906:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 800390a:	f6a3 336c 	subw	r3, r3, #2924	@ 0xb6c
 800390e:	6018      	str	r0, [r3, #0]
 8003910:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003914:	f5a3 6337 	sub.w	r3, r3, #2928	@ 0xb70
 8003918:	6019      	str	r1, [r3, #0]
	//initialize variables
	uint8_t new_offset = offset + 1; //have it range from 1-3
 800391a:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 800391e:	f5a3 6337 	sub.w	r3, r3, #2928	@ 0xb70
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	3301      	adds	r3, #1
 8003928:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800392c:	f102 025f 	add.w	r2, r2, #95	@ 0x5f
 8003930:	7013      	strb	r3, [r2, #0]
	int i = 0;
 8003932:	2300      	movs	r3, #0
 8003934:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003938:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 800393c:	6013      	str	r3, [r2, #0]
	int j = 0; //indices for moving through flash memory
 800393e:	2300      	movs	r3, #0
 8003940:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003944:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003948:	6013      	str	r3, [r2, #0]
	char protocolStorage[MAX_PROTOCOLS_IN_SECTOR][MAX_LINES][MAX_LINE_LENGTH] =
 800394a:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 800394e:	f6a3 3324 	subw	r3, r3, #2852	@ 0xb24
 8003952:	4618      	mov	r0, r3
 8003954:	f44f 4396 	mov.w	r3, #19200	@ 0x4b00
 8003958:	461a      	mov	r2, r3
 800395a:	2100      	movs	r1, #0
 800395c:	f00b fc98 	bl	800f290 <memset>
			{ { { '\0' } } };
	uint32_t flash_address = get_sector_address(sector);
 8003960:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003964:	f6a3 336c 	subw	r3, r3, #2924	@ 0xb6c
 8003968:	6818      	ldr	r0, [r3, #0]
 800396a:	f000 f94f 	bl	8003c0c <get_sector_address>
 800396e:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003972:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8003976:	6018      	str	r0, [r3, #0]
	char trashLine[MAX_LINE_LENGTH];
	memset(trashLine, 0xFF, sizeof(trashLine));
 8003978:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800397c:	3b44      	subs	r3, #68	@ 0x44
 800397e:	2220      	movs	r2, #32
 8003980:	21ff      	movs	r1, #255	@ 0xff
 8003982:	4618      	mov	r0, r3
 8003984:	f00b fc84 	bl	800f290 <memset>
	char nullLine[MAX_LINE_LENGTH];
	memset(nullLine, 0x00, sizeof(nullLine));
 8003988:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800398c:	3b64      	subs	r3, #100	@ 0x64
 800398e:	2220      	movs	r2, #32
 8003990:	2100      	movs	r1, #0
 8003992:	4618      	mov	r0, r3
 8003994:	f00b fc7c 	bl	800f290 <memset>
	uint8_t num_protocols = get_num_protocols_in_sector(sector);
 8003998:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 800399c:	f6a3 336c 	subw	r3, r3, #2924	@ 0xb6c
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	f7ff fe2e 	bl	8003602 <get_num_protocols_in_sector>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80039ac:	f102 0257 	add.w	r2, r2, #87	@ 0x57
 80039b0:	7013      	strb	r3, [r2, #0]

	int a = 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80039b8:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 80039bc:	6013      	str	r3, [r2, #0]
	int b = 0; //separate indices for protocolstorage
 80039be:	2300      	movs	r3, #0
 80039c0:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80039c4:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 80039c8:	6013      	str	r3, [r2, #0]

	//copy all protocols in sector to local buffer
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 80039ca:	2300      	movs	r3, #0
 80039cc:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80039d0:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	e082      	b.n	8003ade <deleteProtocol+0x1e2>
		if (i != offset) {
 80039d8:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 80039dc:	f5a3 6337 	sub.w	r3, r3, #2928	@ 0xb70
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80039e6:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d06b      	beq.n	8003ac8 <deleteProtocol+0x1cc>
			//copy all lines of the protocol into the buffer
			for (j = 0; j < MAX_LINES; j++) {
 80039f0:	2300      	movs	r3, #0
 80039f2:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80039f6:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	e04c      	b.n	8003a98 <deleteProtocol+0x19c>
				//get the address for the current line in the current protocol
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80039fe:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003a02:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f241 7270 	movw	r2, #6000	@ 0x1770
 8003a0c:	fb02 f303 	mul.w	r3, r2, r3
						+ j * MAX_LINE_LENGTH;
 8003a10:	461a      	mov	r2, r3
 8003a12:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003a16:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	015b      	lsls	r3, r3, #5
 8003a1e:	4413      	add	r3, r2
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8003a20:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003a24:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8003a28:	6812      	ldr	r2, [r2, #0]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003a30:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 8003a34:	6013      	str	r3, [r2, #0]
				//read lines from memory into buffer until you reach garbage
				read_from_flash(protocolStorage[a][b], temp_address); //only updates protocolStorage if its a valid line from memory
 8003a36:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003a3a:	3b24      	subs	r3, #36	@ 0x24
 8003a3c:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003a40:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8003a44:	6812      	ldr	r2, [r2, #0]
 8003a46:	21c8      	movs	r1, #200	@ 0xc8
 8003a48:	fb02 f101 	mul.w	r1, r2, r1
 8003a4c:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003a50:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003a54:	6812      	ldr	r2, [r2, #0]
 8003a56:	440a      	add	r2, r1
 8003a58:	0152      	lsls	r2, r2, #5
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003a60:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 8003a64:	6811      	ldr	r1, [r2, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff fbf7 	bl	800325a <read_from_flash>
				b++;
 8003a6c:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003a70:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3301      	adds	r3, #1
 8003a78:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003a7c:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003a80:	6013      	str	r3, [r2, #0]
			for (j = 0; j < MAX_LINES; j++) {
 8003a82:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003a86:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003a92:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003a9c:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2bc7      	cmp	r3, #199	@ 0xc7
 8003aa4:	ddab      	ble.n	80039fe <deleteProtocol+0x102>
			}
			a++;
 8003aa6:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003aaa:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003ab6:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8003aba:	6013      	str	r3, [r2, #0]
			b = 0;
 8003abc:	2300      	movs	r3, #0
 8003abe:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003ac2:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003ac6:	6013      	str	r3, [r2, #0]
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8003ac8:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003acc:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003ad8:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003ae2:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	f77f af75 	ble.w	80039d8 <deleteProtocol+0xdc>
		}
	}

	//write existing protocols except the one to be deleted back to flash
	erase_sector(sector); //erase sector before writing
 8003aee:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003af2:	f6a3 336c 	subw	r3, r3, #2924	@ 0xb6c
 8003af6:	6818      	ldr	r0, [r3, #0]
 8003af8:	f7ff fb72 	bl	80031e0 <erase_sector>
	HAL_FLASH_Unlock(); // Unlock flash for writing. note: the erase_sector() unlocks and locks itself
 8003afc:	f000 fecc 	bl	8004898 <HAL_FLASH_Unlock>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8003b00:	2300      	movs	r3, #0
 8003b02:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003b06:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	e05a      	b.n	8003bc4 <deleteProtocol+0x2c8>
		for (j = 0; j < MAX_LINES; j++) {
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003b14:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e041      	b.n	8003ba0 <deleteProtocol+0x2a4>
			//if first character of a line is null from qr scanner or trash from flash, ignore it
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8003b1c:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003b20:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f241 7270 	movw	r2, #6000	@ 0x1770
 8003b2a:	fb02 f303 	mul.w	r3, r2, r3
					+ j * MAX_LINE_LENGTH;
 8003b2e:	461a      	mov	r2, r3
 8003b30:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003b34:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	015b      	lsls	r3, r3, #5
 8003b3c:	4413      	add	r3, r2
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8003b3e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003b42:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003b4e:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 8003b52:	6013      	str	r3, [r2, #0]
			write_to_flash(protocolStorage[i][j], temp_address);
 8003b54:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003b58:	3b24      	subs	r3, #36	@ 0x24
 8003b5a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003b5e:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	21c8      	movs	r1, #200	@ 0xc8
 8003b66:	fb02 f101 	mul.w	r1, r2, r1
 8003b6a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003b6e:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	440a      	add	r2, r1
 8003b76:	0152      	lsls	r2, r2, #5
 8003b78:	4413      	add	r3, r2
 8003b7a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003b7e:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 8003b82:	6811      	ldr	r1, [r2, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff fb3f 	bl	8003208 <write_to_flash>
		for (j = 0; j < MAX_LINES; j++) {
 8003b8a:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003b8e:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3301      	adds	r3, #1
 8003b96:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003b9a:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003ba4:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2bc7      	cmp	r3, #199	@ 0xc7
 8003bac:	ddb6      	ble.n	8003b1c <deleteProtocol+0x220>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8003bae:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003bb2:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003bbe:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003bc8:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	dd9d      	ble.n	8003b0e <deleteProtocol+0x212>

		}
	}
	HAL_FLASH_Lock();  // Unlock flash for writing
 8003bd2:	f000 fe83 	bl	80048dc <HAL_FLASH_Lock>
}
 8003bd6:	bf00      	nop
 8003bd8:	f507 4796 	add.w	r7, r7, #19200	@ 0x4b00
 8003bdc:	3770      	adds	r7, #112	@ 0x70
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <SendStopMotorsMessage>:
//		}
//	}
//	HAL_FLASH_Lock();  // Unlock flash for writing
//}

void SendStopMotorsMessage(void) {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
	//printf("S\n");
	HAL_UART_Transmit(&huart2, (uint8_t*) "S", 1, HAL_MAX_DELAY);
 8003be8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bec:	2201      	movs	r2, #1
 8003bee:	4904      	ldr	r1, [pc, #16]	@ (8003c00 <SendStopMotorsMessage+0x1c>)
 8003bf0:	4804      	ldr	r0, [pc, #16]	@ (8003c04 <SendStopMotorsMessage+0x20>)
 8003bf2:	f005 fd0f 	bl	8009614 <HAL_UART_Transmit>
	rx_byte = 0; //otherwise when you run a new protocol is has old info
 8003bf6:	4b04      	ldr	r3, [pc, #16]	@ (8003c08 <SendStopMotorsMessage+0x24>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]
}
 8003bfc:	bf00      	nop
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	080102c4 	.word	0x080102c4
 8003c04:	200004fc 	.word	0x200004fc
 8003c08:	2000059c 	.word	0x2000059c

08003c0c <get_sector_address>:
void write_number_to_flash(uint32_t flash_address, uint32_t number) {
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flash_address, number);
}

//I name sectors from 1-14. the actual sectors are from 5-23. this functions maps them
uint32_t get_sector_address(uint32_t sector) {
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
	switch (sector) {
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	2b0d      	cmp	r3, #13
 8003c1a:	d83b      	bhi.n	8003c94 <get_sector_address+0x88>
 8003c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c24 <get_sector_address+0x18>)
 8003c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c22:	bf00      	nop
 8003c24:	08003c5d 	.word	0x08003c5d
 8003c28:	08003c61 	.word	0x08003c61
 8003c2c:	08003c65 	.word	0x08003c65
 8003c30:	08003c69 	.word	0x08003c69
 8003c34:	08003c6d 	.word	0x08003c6d
 8003c38:	08003c71 	.word	0x08003c71
 8003c3c:	08003c75 	.word	0x08003c75
 8003c40:	08003c79 	.word	0x08003c79
 8003c44:	08003c7d 	.word	0x08003c7d
 8003c48:	08003c81 	.word	0x08003c81
 8003c4c:	08003c85 	.word	0x08003c85
 8003c50:	08003c89 	.word	0x08003c89
 8003c54:	08003c8d 	.word	0x08003c8d
 8003c58:	08003c91 	.word	0x08003c91
	case 1:
		return SECTOR_5;
 8003c5c:	4b11      	ldr	r3, [pc, #68]	@ (8003ca4 <get_sector_address+0x98>)
 8003c5e:	e01a      	b.n	8003c96 <get_sector_address+0x8a>
	case 2:
		return SECTOR_6;
 8003c60:	4b11      	ldr	r3, [pc, #68]	@ (8003ca8 <get_sector_address+0x9c>)
 8003c62:	e018      	b.n	8003c96 <get_sector_address+0x8a>
	case 3:
		return SECTOR_7;
 8003c64:	4b11      	ldr	r3, [pc, #68]	@ (8003cac <get_sector_address+0xa0>)
 8003c66:	e016      	b.n	8003c96 <get_sector_address+0x8a>
	case 4:
		return SECTOR_8;
 8003c68:	4b11      	ldr	r3, [pc, #68]	@ (8003cb0 <get_sector_address+0xa4>)
 8003c6a:	e014      	b.n	8003c96 <get_sector_address+0x8a>
	case 5:
		return SECTOR_9;
 8003c6c:	4b11      	ldr	r3, [pc, #68]	@ (8003cb4 <get_sector_address+0xa8>)
 8003c6e:	e012      	b.n	8003c96 <get_sector_address+0x8a>
	case 6:
		return SECTOR_10;
 8003c70:	4b11      	ldr	r3, [pc, #68]	@ (8003cb8 <get_sector_address+0xac>)
 8003c72:	e010      	b.n	8003c96 <get_sector_address+0x8a>
	case 7:
		return SECTOR_11;
 8003c74:	4b11      	ldr	r3, [pc, #68]	@ (8003cbc <get_sector_address+0xb0>)
 8003c76:	e00e      	b.n	8003c96 <get_sector_address+0x8a>
	case 8:
		return SECTOR_17;
 8003c78:	4b11      	ldr	r3, [pc, #68]	@ (8003cc0 <get_sector_address+0xb4>)
 8003c7a:	e00c      	b.n	8003c96 <get_sector_address+0x8a>
	case 9:
		return SECTOR_18;
 8003c7c:	4b11      	ldr	r3, [pc, #68]	@ (8003cc4 <get_sector_address+0xb8>)
 8003c7e:	e00a      	b.n	8003c96 <get_sector_address+0x8a>
	case 10:
		return SECTOR_19;
 8003c80:	4b11      	ldr	r3, [pc, #68]	@ (8003cc8 <get_sector_address+0xbc>)
 8003c82:	e008      	b.n	8003c96 <get_sector_address+0x8a>
	case 11:
		return SECTOR_20;
 8003c84:	4b11      	ldr	r3, [pc, #68]	@ (8003ccc <get_sector_address+0xc0>)
 8003c86:	e006      	b.n	8003c96 <get_sector_address+0x8a>
	case 12:
		return SECTOR_21;
 8003c88:	4b11      	ldr	r3, [pc, #68]	@ (8003cd0 <get_sector_address+0xc4>)
 8003c8a:	e004      	b.n	8003c96 <get_sector_address+0x8a>
	case 13:
		return SECTOR_22;
 8003c8c:	4b11      	ldr	r3, [pc, #68]	@ (8003cd4 <get_sector_address+0xc8>)
 8003c8e:	e002      	b.n	8003c96 <get_sector_address+0x8a>
	case 14:
		return SECTOR_23;
 8003c90:	4b11      	ldr	r3, [pc, #68]	@ (8003cd8 <get_sector_address+0xcc>)
 8003c92:	e000      	b.n	8003c96 <get_sector_address+0x8a>
	default:
		break;
 8003c94:	bf00      	nop
	}
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	08020000 	.word	0x08020000
 8003ca8:	08040000 	.word	0x08040000
 8003cac:	08060000 	.word	0x08060000
 8003cb0:	08080000 	.word	0x08080000
 8003cb4:	080a0000 	.word	0x080a0000
 8003cb8:	080c0000 	.word	0x080c0000
 8003cbc:	080e0000 	.word	0x080e0000
 8003cc0:	08120000 	.word	0x08120000
 8003cc4:	08140000 	.word	0x08140000
 8003cc8:	08160000 	.word	0x08160000
 8003ccc:	08180000 	.word	0x08180000
 8003cd0:	081a0000 	.word	0x081a0000
 8003cd4:	081c0000 	.word	0x081c0000
 8003cd8:	081e0000 	.word	0x081e0000

08003cdc <sector_mapping>:

uint32_t sector_mapping(uint32_t sector) {
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
	switch (sector) {
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	2b0d      	cmp	r3, #13
 8003cea:	d83b      	bhi.n	8003d64 <sector_mapping+0x88>
 8003cec:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf4 <sector_mapping+0x18>)
 8003cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf2:	bf00      	nop
 8003cf4:	08003d2d 	.word	0x08003d2d
 8003cf8:	08003d31 	.word	0x08003d31
 8003cfc:	08003d35 	.word	0x08003d35
 8003d00:	08003d39 	.word	0x08003d39
 8003d04:	08003d3d 	.word	0x08003d3d
 8003d08:	08003d41 	.word	0x08003d41
 8003d0c:	08003d45 	.word	0x08003d45
 8003d10:	08003d49 	.word	0x08003d49
 8003d14:	08003d4d 	.word	0x08003d4d
 8003d18:	08003d51 	.word	0x08003d51
 8003d1c:	08003d55 	.word	0x08003d55
 8003d20:	08003d59 	.word	0x08003d59
 8003d24:	08003d5d 	.word	0x08003d5d
 8003d28:	08003d61 	.word	0x08003d61
	case 1:
		return 5;
 8003d2c:	2305      	movs	r3, #5
 8003d2e:	e019      	b.n	8003d64 <sector_mapping+0x88>
	case 2:
		return 6;
 8003d30:	2306      	movs	r3, #6
 8003d32:	e017      	b.n	8003d64 <sector_mapping+0x88>
	case 3:
		return 7;
 8003d34:	2307      	movs	r3, #7
 8003d36:	e015      	b.n	8003d64 <sector_mapping+0x88>
	case 4:
		return 8;
 8003d38:	2308      	movs	r3, #8
 8003d3a:	e013      	b.n	8003d64 <sector_mapping+0x88>
	case 5:
		return 9;
 8003d3c:	2309      	movs	r3, #9
 8003d3e:	e011      	b.n	8003d64 <sector_mapping+0x88>
	case 6:
		return 10;
 8003d40:	230a      	movs	r3, #10
 8003d42:	e00f      	b.n	8003d64 <sector_mapping+0x88>
	case 7:
		return 11;
 8003d44:	230b      	movs	r3, #11
 8003d46:	e00d      	b.n	8003d64 <sector_mapping+0x88>
	case 8:
		return 17;
 8003d48:	2311      	movs	r3, #17
 8003d4a:	e00b      	b.n	8003d64 <sector_mapping+0x88>
	case 9:
		return 18;
 8003d4c:	2312      	movs	r3, #18
 8003d4e:	e009      	b.n	8003d64 <sector_mapping+0x88>
	case 10:
		return 19;
 8003d50:	2313      	movs	r3, #19
 8003d52:	e007      	b.n	8003d64 <sector_mapping+0x88>
	case 11:
		return 20;
 8003d54:	2314      	movs	r3, #20
 8003d56:	e005      	b.n	8003d64 <sector_mapping+0x88>
	case 12:
		return 21;
 8003d58:	2315      	movs	r3, #21
 8003d5a:	e003      	b.n	8003d64 <sector_mapping+0x88>
	case 13:
		return 22;
 8003d5c:	2316      	movs	r3, #22
 8003d5e:	e001      	b.n	8003d64 <sector_mapping+0x88>
	case 14:
		return 23;
 8003d60:	2317      	movs	r3, #23
 8003d62:	e7ff      	b.n	8003d64 <sector_mapping+0x88>
	}
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_GPIO_EXTI_Callback>:

/*** Touchscreen Interrupt Handler ****/
//t_irq_pin is default high. it gets driven low while the screen is touched.
//the interrupt is triggered on falling edge.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == T_IRQ_Pin) {
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	d11d      	bne.n	8003dbc <HAL_GPIO_EXTI_Callback+0x4c>

		uint32_t current_time = HAL_GetTick(); // ms since startup
 8003d80:	f000 fb62 	bl	8004448 <HAL_GetTick>
 8003d84:	60f8      	str	r0, [r7, #12]

		//perform some debouncing for interrupt pin
		if ((current_time - last_interrupt_time) > DEBOUNCE_DELAY_MS) {
 8003d86:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc4 <HAL_GPIO_EXTI_Callback+0x54>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b1e      	cmp	r3, #30
 8003d90:	d914      	bls.n	8003dbc <HAL_GPIO_EXTI_Callback+0x4c>
			last_interrupt_time = current_time;
 8003d92:	4a0c      	ldr	r2, [pc, #48]	@ (8003dc4 <HAL_GPIO_EXTI_Callback+0x54>)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6013      	str	r3, [r2, #0]

			//handle the actual interrupt below
			uint8_t currentTouchedState = HAL_GPIO_ReadPin(T_IRQ_GPIO_Port,
 8003d98:	2120      	movs	r1, #32
 8003d9a:	480b      	ldr	r0, [pc, #44]	@ (8003dc8 <HAL_GPIO_EXTI_Callback+0x58>)
 8003d9c:	f001 f8e8 	bl	8004f70 <HAL_GPIO_ReadPin>
 8003da0:	4603      	mov	r3, r0
 8003da2:	72fb      	strb	r3, [r7, #11]
//			}
//			if (currentTouchedState == 0) {
//				printf("low");
//			}
			//printf("%d\n", currentTouchedState)
			if (XPT2046_TouchPressed() && !touchFlag) {
 8003da4:	f7fc fc0c 	bl	80005c0 <XPT2046_TouchPressed>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d006      	beq.n	8003dbc <HAL_GPIO_EXTI_Callback+0x4c>
 8003dae:	4b07      	ldr	r3, [pc, #28]	@ (8003dcc <HAL_GPIO_EXTI_Callback+0x5c>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d102      	bne.n	8003dbc <HAL_GPIO_EXTI_Callback+0x4c>
				touchFlag = 1;
 8003db6:	4b05      	ldr	r3, [pc, #20]	@ (8003dcc <HAL_GPIO_EXTI_Callback+0x5c>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8003dbc:	bf00      	nop
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	200005c8 	.word	0x200005c8
 8003dc8:	40020400 	.word	0x40020400
 8003dcc:	200005cc 	.word	0x200005cc

08003dd0 <HAL_TIM_PeriodElapsedCallback>:

// This is called every time the timer overflows (i.e., when the interrupt triggers)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003de0:	d10e      	bne.n	8003e00 <HAL_TIM_PeriodElapsedCallback+0x30>
    {
        // Your code here — for example:
    	if (protocolTimer > 0) {
 8003de2:	4b09      	ldr	r3, [pc, #36]	@ (8003e08 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	dd04      	ble.n	8003df4 <HAL_TIM_PeriodElapsedCallback+0x24>
    		protocolTimer--;
 8003dea:	4b07      	ldr	r3, [pc, #28]	@ (8003e08 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	4a05      	ldr	r2, [pc, #20]	@ (8003e08 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003df2:	6013      	str	r3, [r2, #0]
    	}
    	if (currentPage == PAGE_PROGRESS) {
 8003df4:	4b05      	ldr	r3, [pc, #20]	@ (8003e0c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b05      	cmp	r3, #5
 8003dfa:	d101      	bne.n	8003e00 <HAL_TIM_PeriodElapsedCallback+0x30>
    		DrawCountdownTime();
 8003dfc:	f7fe fcfe 	bl	80027fc <DrawCountdownTime>
        	//DrawProgressPage("Fill", rx_byte, rx_data);
    	}

    }
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	20000598 	.word	0x20000598
 8003e0c:	20000594 	.word	0x20000594

08003e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003e14:	b672      	cpsid	i
}
 8003e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003e18:	bf00      	nop
 8003e1a:	e7fd      	b.n	8003e18 <Error_Handler+0x8>

08003e1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	607b      	str	r3, [r7, #4]
 8003e26:	4b10      	ldr	r3, [pc, #64]	@ (8003e68 <HAL_MspInit+0x4c>)
 8003e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2a:	4a0f      	ldr	r2, [pc, #60]	@ (8003e68 <HAL_MspInit+0x4c>)
 8003e2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e32:	4b0d      	ldr	r3, [pc, #52]	@ (8003e68 <HAL_MspInit+0x4c>)
 8003e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e3a:	607b      	str	r3, [r7, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	603b      	str	r3, [r7, #0]
 8003e42:	4b09      	ldr	r3, [pc, #36]	@ (8003e68 <HAL_MspInit+0x4c>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e46:	4a08      	ldr	r2, [pc, #32]	@ (8003e68 <HAL_MspInit+0x4c>)
 8003e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e4e:	4b06      	ldr	r3, [pc, #24]	@ (8003e68 <HAL_MspInit+0x4c>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e56:	603b      	str	r3, [r7, #0]
 8003e58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40023800 	.word	0x40023800

08003e6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08a      	sub	sp, #40	@ 0x28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e74:	f107 0314 	add.w	r3, r7, #20
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	605a      	str	r2, [r3, #4]
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	60da      	str	r2, [r3, #12]
 8003e82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a19      	ldr	r2, [pc, #100]	@ (8003ef0 <HAL_SPI_MspInit+0x84>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d12b      	bne.n	8003ee6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	613b      	str	r3, [r7, #16]
 8003e92:	4b18      	ldr	r3, [pc, #96]	@ (8003ef4 <HAL_SPI_MspInit+0x88>)
 8003e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e96:	4a17      	ldr	r2, [pc, #92]	@ (8003ef4 <HAL_SPI_MspInit+0x88>)
 8003e98:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e9e:	4b15      	ldr	r3, [pc, #84]	@ (8003ef4 <HAL_SPI_MspInit+0x88>)
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	4b11      	ldr	r3, [pc, #68]	@ (8003ef4 <HAL_SPI_MspInit+0x88>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb2:	4a10      	ldr	r2, [pc, #64]	@ (8003ef4 <HAL_SPI_MspInit+0x88>)
 8003eb4:	f043 0310 	orr.w	r3, r3, #16
 8003eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eba:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef4 <HAL_SPI_MspInit+0x88>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = T_SCK_Pin|T_CS_Pin|T_MISO_Pin|T_MOSI_Pin;
 8003ec6:	2374      	movs	r3, #116	@ 0x74
 8003ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eca:	2302      	movs	r3, #2
 8003ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003ed6:	2305      	movs	r3, #5
 8003ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003eda:	f107 0314 	add.w	r3, r7, #20
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4805      	ldr	r0, [pc, #20]	@ (8003ef8 <HAL_SPI_MspInit+0x8c>)
 8003ee2:	f000 fe99 	bl	8004c18 <HAL_GPIO_Init>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 8003ee6:	bf00      	nop
 8003ee8:	3728      	adds	r7, #40	@ 0x28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40013400 	.word	0x40013400
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	40021000 	.word	0x40021000

08003efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f0c:	d115      	bne.n	8003f3a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	4b0c      	ldr	r3, [pc, #48]	@ (8003f44 <HAL_TIM_Base_MspInit+0x48>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f16:	4a0b      	ldr	r2, [pc, #44]	@ (8003f44 <HAL_TIM_Base_MspInit+0x48>)
 8003f18:	f043 0301 	orr.w	r3, r3, #1
 8003f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f1e:	4b09      	ldr	r3, [pc, #36]	@ (8003f44 <HAL_TIM_Base_MspInit+0x48>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	201c      	movs	r0, #28
 8003f30:	f000 fb95 	bl	800465e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003f34:	201c      	movs	r0, #28
 8003f36:	f000 fbae 	bl	8004696 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003f3a:	bf00      	nop
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40023800 	.word	0x40023800

08003f48 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a0b      	ldr	r2, [pc, #44]	@ (8003f84 <HAL_TIM_PWM_MspInit+0x3c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d10d      	bne.n	8003f76 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f88 <HAL_TIM_PWM_MspInit+0x40>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f62:	4a09      	ldr	r2, [pc, #36]	@ (8003f88 <HAL_TIM_PWM_MspInit+0x40>)
 8003f64:	f043 0302 	orr.w	r3, r3, #2
 8003f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f6a:	4b07      	ldr	r3, [pc, #28]	@ (8003f88 <HAL_TIM_PWM_MspInit+0x40>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003f76:	bf00      	nop
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40000400 	.word	0x40000400
 8003f88:	40023800 	.word	0x40023800

08003f8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f94:	f107 030c 	add.w	r3, r7, #12
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	605a      	str	r2, [r3, #4]
 8003f9e:	609a      	str	r2, [r3, #8]
 8003fa0:	60da      	str	r2, [r3, #12]
 8003fa2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a12      	ldr	r2, [pc, #72]	@ (8003ff4 <HAL_TIM_MspPostInit+0x68>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d11d      	bne.n	8003fea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	4b11      	ldr	r3, [pc, #68]	@ (8003ff8 <HAL_TIM_MspPostInit+0x6c>)
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb6:	4a10      	ldr	r2, [pc, #64]	@ (8003ff8 <HAL_TIM_MspPostInit+0x6c>)
 8003fb8:	f043 0302 	orr.w	r3, r3, #2
 8003fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff8 <HAL_TIM_MspPostInit+0x6c>)
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BL_PWM_Pin;
 8003fca:	2310      	movs	r3, #16
 8003fcc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_PWM_GPIO_Port, &GPIO_InitStruct);
 8003fde:	f107 030c 	add.w	r3, r7, #12
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4805      	ldr	r0, [pc, #20]	@ (8003ffc <HAL_TIM_MspPostInit+0x70>)
 8003fe6:	f000 fe17 	bl	8004c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003fea:	bf00      	nop
 8003fec:	3720      	adds	r7, #32
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40000400 	.word	0x40000400
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	40020400 	.word	0x40020400

08004000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08a      	sub	sp, #40	@ 0x28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004008:	f107 0314 	add.w	r3, r7, #20
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	609a      	str	r2, [r3, #8]
 8004014:	60da      	str	r2, [r3, #12]
 8004016:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a1d      	ldr	r2, [pc, #116]	@ (8004094 <HAL_UART_MspInit+0x94>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d133      	bne.n	800408a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	4b1c      	ldr	r3, [pc, #112]	@ (8004098 <HAL_UART_MspInit+0x98>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402a:	4a1b      	ldr	r2, [pc, #108]	@ (8004098 <HAL_UART_MspInit+0x98>)
 800402c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004030:	6413      	str	r3, [r2, #64]	@ 0x40
 8004032:	4b19      	ldr	r3, [pc, #100]	@ (8004098 <HAL_UART_MspInit+0x98>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800403e:	2300      	movs	r3, #0
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	4b15      	ldr	r3, [pc, #84]	@ (8004098 <HAL_UART_MspInit+0x98>)
 8004044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004046:	4a14      	ldr	r2, [pc, #80]	@ (8004098 <HAL_UART_MspInit+0x98>)
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	6313      	str	r3, [r2, #48]	@ 0x30
 800404e:	4b12      	ldr	r3, [pc, #72]	@ (8004098 <HAL_UART_MspInit+0x98>)
 8004050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800405a:	230c      	movs	r3, #12
 800405c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800405e:	2302      	movs	r3, #2
 8004060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004062:	2300      	movs	r3, #0
 8004064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004066:	2303      	movs	r3, #3
 8004068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800406a:	2307      	movs	r3, #7
 800406c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800406e:	f107 0314 	add.w	r3, r7, #20
 8004072:	4619      	mov	r1, r3
 8004074:	4809      	ldr	r0, [pc, #36]	@ (800409c <HAL_UART_MspInit+0x9c>)
 8004076:	f000 fdcf 	bl	8004c18 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800407a:	2200      	movs	r2, #0
 800407c:	2100      	movs	r1, #0
 800407e:	2026      	movs	r0, #38	@ 0x26
 8004080:	f000 faed 	bl	800465e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004084:	2026      	movs	r0, #38	@ 0x26
 8004086:	f000 fb06 	bl	8004696 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800408a:	bf00      	nop
 800408c:	3728      	adds	r7, #40	@ 0x28
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40004400 	.word	0x40004400
 8004098:	40023800 	.word	0x40023800
 800409c:	40020000 	.word	0x40020000

080040a0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80040a6:	1d3b      	adds	r3, r7, #4
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	605a      	str	r2, [r3, #4]
 80040ae:	609a      	str	r2, [r3, #8]
 80040b0:	60da      	str	r2, [r3, #12]
 80040b2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80040b4:	4b1c      	ldr	r3, [pc, #112]	@ (8004128 <HAL_FMC_MspInit+0x88>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d131      	bne.n	8004120 <HAL_FMC_MspInit+0x80>
    return;
  }
  FMC_Initialized = 1;
 80040bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004128 <HAL_FMC_MspInit+0x88>)
 80040be:	2201      	movs	r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80040c2:	2300      	movs	r3, #0
 80040c4:	603b      	str	r3, [r7, #0]
 80040c6:	4b19      	ldr	r3, [pc, #100]	@ (800412c <HAL_FMC_MspInit+0x8c>)
 80040c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ca:	4a18      	ldr	r2, [pc, #96]	@ (800412c <HAL_FMC_MspInit+0x8c>)
 80040cc:	f043 0301 	orr.w	r3, r3, #1
 80040d0:	6393      	str	r3, [r2, #56]	@ 0x38
 80040d2:	4b16      	ldr	r3, [pc, #88]	@ (800412c <HAL_FMC_MspInit+0x8c>)
 80040d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80040de:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80040e2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e4:	2302      	movs	r3, #2
 80040e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ec:	2303      	movs	r3, #3
 80040ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040f0:	230c      	movs	r3, #12
 80040f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80040f4:	1d3b      	adds	r3, r7, #4
 80040f6:	4619      	mov	r1, r3
 80040f8:	480d      	ldr	r0, [pc, #52]	@ (8004130 <HAL_FMC_MspInit+0x90>)
 80040fa:	f000 fd8d 	bl	8004c18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80040fe:	f64c 73b3 	movw	r3, #53171	@ 0xcfb3
 8004102:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004104:	2302      	movs	r3, #2
 8004106:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004108:	2300      	movs	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800410c:	2303      	movs	r3, #3
 800410e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004110:	230c      	movs	r3, #12
 8004112:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004114:	1d3b      	adds	r3, r7, #4
 8004116:	4619      	mov	r1, r3
 8004118:	4806      	ldr	r0, [pc, #24]	@ (8004134 <HAL_FMC_MspInit+0x94>)
 800411a:	f000 fd7d 	bl	8004c18 <HAL_GPIO_Init>
 800411e:	e000      	b.n	8004122 <HAL_FMC_MspInit+0x82>
    return;
 8004120:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	200118e4 	.word	0x200118e4
 800412c:	40023800 	.word	0x40023800
 8004130:	40021000 	.word	0x40021000
 8004134:	40020c00 	.word	0x40020c00

08004138 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004140:	f7ff ffae 	bl	80040a0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004144:	bf00      	nop
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004150:	bf00      	nop
 8004152:	e7fd      	b.n	8004150 <NMI_Handler+0x4>

08004154 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004158:	bf00      	nop
 800415a:	e7fd      	b.n	8004158 <HardFault_Handler+0x4>

0800415c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004160:	bf00      	nop
 8004162:	e7fd      	b.n	8004160 <MemManage_Handler+0x4>

08004164 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004168:	bf00      	nop
 800416a:	e7fd      	b.n	8004168 <BusFault_Handler+0x4>

0800416c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004170:	bf00      	nop
 8004172:	e7fd      	b.n	8004170 <UsageFault_Handler+0x4>

08004174 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004178:	bf00      	nop
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004182:	b480      	push	{r7}
 8004184:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004186:	bf00      	nop
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004194:	bf00      	nop
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041a2:	f000 f93d 	bl	8004420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041a6:	bf00      	nop
 80041a8:	bd80      	pop	{r7, pc}

080041aa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_IRQ_Pin);
 80041ae:	2020      	movs	r0, #32
 80041b0:	f000 ff10 	bl	8004fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80041b4:	bf00      	nop
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80041bc:	4802      	ldr	r0, [pc, #8]	@ (80041c8 <TIM2_IRQHandler+0x10>)
 80041be:	f004 fb8b 	bl	80088d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80041c2:	bf00      	nop
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	2000046c 	.word	0x2000046c

080041cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80041d0:	4802      	ldr	r0, [pc, #8]	@ (80041dc <USART2_IRQHandler+0x10>)
 80041d2:	f005 fb41 	bl	8009858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80041d6:	bf00      	nop
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	200004fc 	.word	0x200004fc

080041e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80041e4:	4802      	ldr	r0, [pc, #8]	@ (80041f0 <OTG_FS_IRQHandler+0x10>)
 80041e6:	f001 f9ed 	bl	80055c4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80041ea:	bf00      	nop
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20011d24 	.word	0x20011d24

080041f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	e00a      	b.n	800421c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004206:	f3af 8000 	nop.w
 800420a:	4601      	mov	r1, r0
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	60ba      	str	r2, [r7, #8]
 8004212:	b2ca      	uxtb	r2, r1
 8004214:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	3301      	adds	r3, #1
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	429a      	cmp	r2, r3
 8004222:	dbf0      	blt.n	8004206 <_read+0x12>
  }

  return len;
 8004224:	687b      	ldr	r3, [r7, #4]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <_close>:
  }
  return len;
}

int _close(int file)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004236:	f04f 33ff 	mov.w	r3, #4294967295
}
 800423a:	4618      	mov	r0, r3
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004256:	605a      	str	r2, [r3, #4]
  return 0;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <_isatty>:

int _isatty(int file)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800426e:	2301      	movs	r3, #1
}
 8004270:	4618      	mov	r0, r3
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
	...

08004298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042a0:	4a14      	ldr	r2, [pc, #80]	@ (80042f4 <_sbrk+0x5c>)
 80042a2:	4b15      	ldr	r3, [pc, #84]	@ (80042f8 <_sbrk+0x60>)
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042ac:	4b13      	ldr	r3, [pc, #76]	@ (80042fc <_sbrk+0x64>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d102      	bne.n	80042ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042b4:	4b11      	ldr	r3, [pc, #68]	@ (80042fc <_sbrk+0x64>)
 80042b6:	4a12      	ldr	r2, [pc, #72]	@ (8004300 <_sbrk+0x68>)
 80042b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042ba:	4b10      	ldr	r3, [pc, #64]	@ (80042fc <_sbrk+0x64>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4413      	add	r3, r2
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d207      	bcs.n	80042d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042c8:	f00b f840 	bl	800f34c <__errno>
 80042cc:	4603      	mov	r3, r0
 80042ce:	220c      	movs	r2, #12
 80042d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042d2:	f04f 33ff 	mov.w	r3, #4294967295
 80042d6:	e009      	b.n	80042ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042d8:	4b08      	ldr	r3, [pc, #32]	@ (80042fc <_sbrk+0x64>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042de:	4b07      	ldr	r3, [pc, #28]	@ (80042fc <_sbrk+0x64>)
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4413      	add	r3, r2
 80042e6:	4a05      	ldr	r2, [pc, #20]	@ (80042fc <_sbrk+0x64>)
 80042e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042ea:	68fb      	ldr	r3, [r7, #12]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3718      	adds	r7, #24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	20030000 	.word	0x20030000
 80042f8:	00000400 	.word	0x00000400
 80042fc:	200118e8 	.word	0x200118e8
 8004300:	20012250 	.word	0x20012250

08004304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004308:	4b06      	ldr	r3, [pc, #24]	@ (8004324 <SystemInit+0x20>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800430e:	4a05      	ldr	r2, [pc, #20]	@ (8004324 <SystemInit+0x20>)
 8004310:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004314:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004318:	bf00      	nop
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	e000ed00 	.word	0xe000ed00

08004328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004328:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004360 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800432c:	f7ff ffea 	bl	8004304 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004330:	480c      	ldr	r0, [pc, #48]	@ (8004364 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004332:	490d      	ldr	r1, [pc, #52]	@ (8004368 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004334:	4a0d      	ldr	r2, [pc, #52]	@ (800436c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004338:	e002      	b.n	8004340 <LoopCopyDataInit>

0800433a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800433a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800433c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800433e:	3304      	adds	r3, #4

08004340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004344:	d3f9      	bcc.n	800433a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004346:	4a0a      	ldr	r2, [pc, #40]	@ (8004370 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004348:	4c0a      	ldr	r4, [pc, #40]	@ (8004374 <LoopFillZerobss+0x22>)
  movs r3, #0
 800434a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800434c:	e001      	b.n	8004352 <LoopFillZerobss>

0800434e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800434e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004350:	3204      	adds	r2, #4

08004352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004354:	d3fb      	bcc.n	800434e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004356:	f00a ffff 	bl	800f358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800435a:	f7fd f81b 	bl	8001394 <main>
  bx  lr    
 800435e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004360:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004368:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 800436c:	08012d98 	.word	0x08012d98
  ldr r2, =_sbss
 8004370:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 8004374:	20012250 	.word	0x20012250

08004378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004378:	e7fe      	b.n	8004378 <ADC_IRQHandler>
	...

0800437c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004380:	4b0e      	ldr	r3, [pc, #56]	@ (80043bc <HAL_Init+0x40>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a0d      	ldr	r2, [pc, #52]	@ (80043bc <HAL_Init+0x40>)
 8004386:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800438a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800438c:	4b0b      	ldr	r3, [pc, #44]	@ (80043bc <HAL_Init+0x40>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a0a      	ldr	r2, [pc, #40]	@ (80043bc <HAL_Init+0x40>)
 8004392:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004396:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004398:	4b08      	ldr	r3, [pc, #32]	@ (80043bc <HAL_Init+0x40>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a07      	ldr	r2, [pc, #28]	@ (80043bc <HAL_Init+0x40>)
 800439e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043a4:	2003      	movs	r0, #3
 80043a6:	f000 f94f 	bl	8004648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043aa:	200f      	movs	r0, #15
 80043ac:	f000 f808 	bl	80043c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043b0:	f7ff fd34 	bl	8003e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40023c00 	.word	0x40023c00

080043c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043c8:	4b12      	ldr	r3, [pc, #72]	@ (8004414 <HAL_InitTick+0x54>)
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	4b12      	ldr	r3, [pc, #72]	@ (8004418 <HAL_InitTick+0x58>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	4619      	mov	r1, r3
 80043d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80043da:	fbb2 f3f3 	udiv	r3, r2, r3
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 f967 	bl	80046b2 <HAL_SYSTICK_Config>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e00e      	b.n	800440c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b0f      	cmp	r3, #15
 80043f2:	d80a      	bhi.n	800440a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043f4:	2200      	movs	r2, #0
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	f04f 30ff 	mov.w	r0, #4294967295
 80043fc:	f000 f92f 	bl	800465e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004400:	4a06      	ldr	r2, [pc, #24]	@ (800441c <HAL_InitTick+0x5c>)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	e000      	b.n	800440c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
}
 800440c:	4618      	mov	r0, r3
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	20000268 	.word	0x20000268
 8004418:	20000270 	.word	0x20000270
 800441c:	2000026c 	.word	0x2000026c

08004420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004424:	4b06      	ldr	r3, [pc, #24]	@ (8004440 <HAL_IncTick+0x20>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	4b06      	ldr	r3, [pc, #24]	@ (8004444 <HAL_IncTick+0x24>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4413      	add	r3, r2
 8004430:	4a04      	ldr	r2, [pc, #16]	@ (8004444 <HAL_IncTick+0x24>)
 8004432:	6013      	str	r3, [r2, #0]
}
 8004434:	bf00      	nop
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	20000270 	.word	0x20000270
 8004444:	200118ec 	.word	0x200118ec

08004448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  return uwTick;
 800444c:	4b03      	ldr	r3, [pc, #12]	@ (800445c <HAL_GetTick+0x14>)
 800444e:	681b      	ldr	r3, [r3, #0]
}
 8004450:	4618      	mov	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	200118ec 	.word	0x200118ec

08004460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004468:	f7ff ffee 	bl	8004448 <HAL_GetTick>
 800446c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d005      	beq.n	8004486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800447a:	4b0a      	ldr	r3, [pc, #40]	@ (80044a4 <HAL_Delay+0x44>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4413      	add	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004486:	bf00      	nop
 8004488:	f7ff ffde 	bl	8004448 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	429a      	cmp	r2, r3
 8004496:	d8f7      	bhi.n	8004488 <HAL_Delay+0x28>
  {
  }
}
 8004498:	bf00      	nop
 800449a:	bf00      	nop
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20000270 	.word	0x20000270

080044a8 <__NVIC_SetPriorityGrouping>:
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044b8:	4b0c      	ldr	r3, [pc, #48]	@ (80044ec <__NVIC_SetPriorityGrouping+0x44>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044c4:	4013      	ands	r3, r2
 80044c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044da:	4a04      	ldr	r2, [pc, #16]	@ (80044ec <__NVIC_SetPriorityGrouping+0x44>)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	60d3      	str	r3, [r2, #12]
}
 80044e0:	bf00      	nop
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	e000ed00 	.word	0xe000ed00

080044f0 <__NVIC_GetPriorityGrouping>:
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044f4:	4b04      	ldr	r3, [pc, #16]	@ (8004508 <__NVIC_GetPriorityGrouping+0x18>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	0a1b      	lsrs	r3, r3, #8
 80044fa:	f003 0307 	and.w	r3, r3, #7
}
 80044fe:	4618      	mov	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	e000ed00 	.word	0xe000ed00

0800450c <__NVIC_EnableIRQ>:
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451a:	2b00      	cmp	r3, #0
 800451c:	db0b      	blt.n	8004536 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	f003 021f 	and.w	r2, r3, #31
 8004524:	4907      	ldr	r1, [pc, #28]	@ (8004544 <__NVIC_EnableIRQ+0x38>)
 8004526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	2001      	movs	r0, #1
 800452e:	fa00 f202 	lsl.w	r2, r0, r2
 8004532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	e000e100 	.word	0xe000e100

08004548 <__NVIC_SetPriority>:
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	4603      	mov	r3, r0
 8004550:	6039      	str	r1, [r7, #0]
 8004552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004558:	2b00      	cmp	r3, #0
 800455a:	db0a      	blt.n	8004572 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	b2da      	uxtb	r2, r3
 8004560:	490c      	ldr	r1, [pc, #48]	@ (8004594 <__NVIC_SetPriority+0x4c>)
 8004562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004566:	0112      	lsls	r2, r2, #4
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	440b      	add	r3, r1
 800456c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004570:	e00a      	b.n	8004588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	b2da      	uxtb	r2, r3
 8004576:	4908      	ldr	r1, [pc, #32]	@ (8004598 <__NVIC_SetPriority+0x50>)
 8004578:	79fb      	ldrb	r3, [r7, #7]
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	3b04      	subs	r3, #4
 8004580:	0112      	lsls	r2, r2, #4
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	440b      	add	r3, r1
 8004586:	761a      	strb	r2, [r3, #24]
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	e000e100 	.word	0xe000e100
 8004598:	e000ed00 	.word	0xe000ed00

0800459c <NVIC_EncodePriority>:
{
 800459c:	b480      	push	{r7}
 800459e:	b089      	sub	sp, #36	@ 0x24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f1c3 0307 	rsb	r3, r3, #7
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	bf28      	it	cs
 80045ba:	2304      	movcs	r3, #4
 80045bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	3304      	adds	r3, #4
 80045c2:	2b06      	cmp	r3, #6
 80045c4:	d902      	bls.n	80045cc <NVIC_EncodePriority+0x30>
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	3b03      	subs	r3, #3
 80045ca:	e000      	b.n	80045ce <NVIC_EncodePriority+0x32>
 80045cc:	2300      	movs	r3, #0
 80045ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d0:	f04f 32ff 	mov.w	r2, #4294967295
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	43da      	mvns	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	401a      	ands	r2, r3
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045e4:	f04f 31ff 	mov.w	r1, #4294967295
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	fa01 f303 	lsl.w	r3, r1, r3
 80045ee:	43d9      	mvns	r1, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f4:	4313      	orrs	r3, r2
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3724      	adds	r7, #36	@ 0x24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
	...

08004604 <SysTick_Config>:
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3b01      	subs	r3, #1
 8004610:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004614:	d301      	bcc.n	800461a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004616:	2301      	movs	r3, #1
 8004618:	e00f      	b.n	800463a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800461a:	4a0a      	ldr	r2, [pc, #40]	@ (8004644 <SysTick_Config+0x40>)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3b01      	subs	r3, #1
 8004620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004622:	210f      	movs	r1, #15
 8004624:	f04f 30ff 	mov.w	r0, #4294967295
 8004628:	f7ff ff8e 	bl	8004548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800462c:	4b05      	ldr	r3, [pc, #20]	@ (8004644 <SysTick_Config+0x40>)
 800462e:	2200      	movs	r2, #0
 8004630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004632:	4b04      	ldr	r3, [pc, #16]	@ (8004644 <SysTick_Config+0x40>)
 8004634:	2207      	movs	r2, #7
 8004636:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	e000e010 	.word	0xe000e010

08004648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7ff ff29 	bl	80044a8 <__NVIC_SetPriorityGrouping>
}
 8004656:	bf00      	nop
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800465e:	b580      	push	{r7, lr}
 8004660:	b086      	sub	sp, #24
 8004662:	af00      	add	r7, sp, #0
 8004664:	4603      	mov	r3, r0
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
 800466a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004670:	f7ff ff3e 	bl	80044f0 <__NVIC_GetPriorityGrouping>
 8004674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	6978      	ldr	r0, [r7, #20]
 800467c:	f7ff ff8e 	bl	800459c <NVIC_EncodePriority>
 8004680:	4602      	mov	r2, r0
 8004682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004686:	4611      	mov	r1, r2
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff ff5d 	bl	8004548 <__NVIC_SetPriority>
}
 800468e:	bf00      	nop
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	4603      	mov	r3, r0
 800469e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ff31 	bl	800450c <__NVIC_EnableIRQ>
}
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b082      	sub	sp, #8
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff ffa2 	bl	8004604 <SysTick_Config>
 80046c0:	4603      	mov	r3, r0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b084      	sub	sp, #16
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046d8:	f7ff feb6 	bl	8004448 <HAL_GetTick>
 80046dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d008      	beq.n	80046fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2280      	movs	r2, #128	@ 0x80
 80046ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e052      	b.n	80047a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0216 	bic.w	r2, r2, #22
 800470a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695a      	ldr	r2, [r3, #20]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800471a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004720:	2b00      	cmp	r3, #0
 8004722:	d103      	bne.n	800472c <HAL_DMA_Abort+0x62>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004728:	2b00      	cmp	r3, #0
 800472a:	d007      	beq.n	800473c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0208 	bic.w	r2, r2, #8
 800473a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800474c:	e013      	b.n	8004776 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800474e:	f7ff fe7b 	bl	8004448 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b05      	cmp	r3, #5
 800475a:	d90c      	bls.n	8004776 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2203      	movs	r2, #3
 8004766:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e015      	b.n	80047a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e4      	bne.n	800474e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004788:	223f      	movs	r2, #63	@ 0x3f
 800478a:	409a      	lsls	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d004      	beq.n	80047c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2280      	movs	r2, #128	@ 0x80
 80047c2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e00c      	b.n	80047e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2205      	movs	r2, #5
 80047cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0201 	bic.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
	...

080047f0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004802:	4b23      	ldr	r3, [pc, #140]	@ (8004890 <HAL_FLASH_Program+0xa0>)
 8004804:	7e1b      	ldrb	r3, [r3, #24]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d101      	bne.n	800480e <HAL_FLASH_Program+0x1e>
 800480a:	2302      	movs	r3, #2
 800480c:	e03b      	b.n	8004886 <HAL_FLASH_Program+0x96>
 800480e:	4b20      	ldr	r3, [pc, #128]	@ (8004890 <HAL_FLASH_Program+0xa0>)
 8004810:	2201      	movs	r2, #1
 8004812:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004814:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004818:	f000 f870 	bl	80048fc <FLASH_WaitForLastOperation>
 800481c:	4603      	mov	r3, r0
 800481e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004820:	7dfb      	ldrb	r3, [r7, #23]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d12b      	bne.n	800487e <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d105      	bne.n	8004838 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800482c:	783b      	ldrb	r3, [r7, #0]
 800482e:	4619      	mov	r1, r3
 8004830:	68b8      	ldr	r0, [r7, #8]
 8004832:	f000 f91b 	bl	8004a6c <FLASH_Program_Byte>
 8004836:	e016      	b.n	8004866 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d105      	bne.n	800484a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800483e:	883b      	ldrh	r3, [r7, #0]
 8004840:	4619      	mov	r1, r3
 8004842:	68b8      	ldr	r0, [r7, #8]
 8004844:	f000 f8ee 	bl	8004a24 <FLASH_Program_HalfWord>
 8004848:	e00d      	b.n	8004866 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b02      	cmp	r3, #2
 800484e:	d105      	bne.n	800485c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	4619      	mov	r1, r3
 8004854:	68b8      	ldr	r0, [r7, #8]
 8004856:	f000 f8c3 	bl	80049e0 <FLASH_Program_Word>
 800485a:	e004      	b.n	8004866 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800485c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004860:	68b8      	ldr	r0, [r7, #8]
 8004862:	f000 f88b 	bl	800497c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004866:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800486a:	f000 f847 	bl	80048fc <FLASH_WaitForLastOperation>
 800486e:	4603      	mov	r3, r0
 8004870:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8004872:	4b08      	ldr	r3, [pc, #32]	@ (8004894 <HAL_FLASH_Program+0xa4>)
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	4a07      	ldr	r2, [pc, #28]	@ (8004894 <HAL_FLASH_Program+0xa4>)
 8004878:	f023 0301 	bic.w	r3, r3, #1
 800487c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800487e:	4b04      	ldr	r3, [pc, #16]	@ (8004890 <HAL_FLASH_Program+0xa0>)
 8004880:	2200      	movs	r2, #0
 8004882:	761a      	strb	r2, [r3, #24]

  return status;
 8004884:	7dfb      	ldrb	r3, [r7, #23]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	200118f0 	.word	0x200118f0
 8004894:	40023c00 	.word	0x40023c00

08004898 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80048a2:	4b0b      	ldr	r3, [pc, #44]	@ (80048d0 <HAL_FLASH_Unlock+0x38>)
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	da0b      	bge.n	80048c2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80048aa:	4b09      	ldr	r3, [pc, #36]	@ (80048d0 <HAL_FLASH_Unlock+0x38>)
 80048ac:	4a09      	ldr	r2, [pc, #36]	@ (80048d4 <HAL_FLASH_Unlock+0x3c>)
 80048ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80048b0:	4b07      	ldr	r3, [pc, #28]	@ (80048d0 <HAL_FLASH_Unlock+0x38>)
 80048b2:	4a09      	ldr	r2, [pc, #36]	@ (80048d8 <HAL_FLASH_Unlock+0x40>)
 80048b4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80048b6:	4b06      	ldr	r3, [pc, #24]	@ (80048d0 <HAL_FLASH_Unlock+0x38>)
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	da01      	bge.n	80048c2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80048c2:	79fb      	ldrb	r3, [r7, #7]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	40023c00 	.word	0x40023c00
 80048d4:	45670123 	.word	0x45670123
 80048d8:	cdef89ab 	.word	0xcdef89ab

080048dc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80048e0:	4b05      	ldr	r3, [pc, #20]	@ (80048f8 <HAL_FLASH_Lock+0x1c>)
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	4a04      	ldr	r2, [pc, #16]	@ (80048f8 <HAL_FLASH_Lock+0x1c>)
 80048e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048ea:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	40023c00 	.word	0x40023c00

080048fc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004908:	4b1a      	ldr	r3, [pc, #104]	@ (8004974 <FLASH_WaitForLastOperation+0x78>)
 800490a:	2200      	movs	r2, #0
 800490c:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800490e:	f7ff fd9b 	bl	8004448 <HAL_GetTick>
 8004912:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8004914:	e010      	b.n	8004938 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491c:	d00c      	beq.n	8004938 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d007      	beq.n	8004934 <FLASH_WaitForLastOperation+0x38>
 8004924:	f7ff fd90 	bl	8004448 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	429a      	cmp	r2, r3
 8004932:	d201      	bcs.n	8004938 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e019      	b.n	800496c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8004938:	4b0f      	ldr	r3, [pc, #60]	@ (8004978 <FLASH_WaitForLastOperation+0x7c>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e8      	bne.n	8004916 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004944:	4b0c      	ldr	r3, [pc, #48]	@ (8004978 <FLASH_WaitForLastOperation+0x7c>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004950:	4b09      	ldr	r3, [pc, #36]	@ (8004978 <FLASH_WaitForLastOperation+0x7c>)
 8004952:	2201      	movs	r2, #1
 8004954:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004956:	4b08      	ldr	r3, [pc, #32]	@ (8004978 <FLASH_WaitForLastOperation+0x7c>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004962:	f000 f8a5 	bl	8004ab0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e000      	b.n	800496c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800496a:	2300      	movs	r3, #0

}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	200118f0 	.word	0x200118f0
 8004978:	40023c00 	.word	0x40023c00

0800497c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004988:	4b14      	ldr	r3, [pc, #80]	@ (80049dc <FLASH_Program_DoubleWord+0x60>)
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	4a13      	ldr	r2, [pc, #76]	@ (80049dc <FLASH_Program_DoubleWord+0x60>)
 800498e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004992:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004994:	4b11      	ldr	r3, [pc, #68]	@ (80049dc <FLASH_Program_DoubleWord+0x60>)
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	4a10      	ldr	r2, [pc, #64]	@ (80049dc <FLASH_Program_DoubleWord+0x60>)
 800499a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800499e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80049a0:	4b0e      	ldr	r3, [pc, #56]	@ (80049dc <FLASH_Program_DoubleWord+0x60>)
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	4a0d      	ldr	r2, [pc, #52]	@ (80049dc <FLASH_Program_DoubleWord+0x60>)
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80049b2:	f3bf 8f6f 	isb	sy
}
 80049b6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80049b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	f04f 0300 	mov.w	r3, #0
 80049c4:	000a      	movs	r2, r1
 80049c6:	2300      	movs	r3, #0
 80049c8:	68f9      	ldr	r1, [r7, #12]
 80049ca:	3104      	adds	r1, #4
 80049cc:	4613      	mov	r3, r2
 80049ce:	600b      	str	r3, [r1, #0]
}
 80049d0:	bf00      	nop
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	40023c00 	.word	0x40023c00

080049e0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80049ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004a20 <FLASH_Program_Word+0x40>)
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004a20 <FLASH_Program_Word+0x40>)
 80049f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80049f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004a20 <FLASH_Program_Word+0x40>)
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	4a09      	ldr	r2, [pc, #36]	@ (8004a20 <FLASH_Program_Word+0x40>)
 80049fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004a02:	4b07      	ldr	r3, [pc, #28]	@ (8004a20 <FLASH_Program_Word+0x40>)
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	4a06      	ldr	r2, [pc, #24]	@ (8004a20 <FLASH_Program_Word+0x40>)
 8004a08:	f043 0301 	orr.w	r3, r3, #1
 8004a0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	601a      	str	r2, [r3, #0]
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	40023c00 	.word	0x40023c00

08004a24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004a30:	4b0d      	ldr	r3, [pc, #52]	@ (8004a68 <FLASH_Program_HalfWord+0x44>)
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	4a0c      	ldr	r2, [pc, #48]	@ (8004a68 <FLASH_Program_HalfWord+0x44>)
 8004a36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a68 <FLASH_Program_HalfWord+0x44>)
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	4a09      	ldr	r2, [pc, #36]	@ (8004a68 <FLASH_Program_HalfWord+0x44>)
 8004a42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004a48:	4b07      	ldr	r3, [pc, #28]	@ (8004a68 <FLASH_Program_HalfWord+0x44>)
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	4a06      	ldr	r2, [pc, #24]	@ (8004a68 <FLASH_Program_HalfWord+0x44>)
 8004a4e:	f043 0301 	orr.w	r3, r3, #1
 8004a52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	887a      	ldrh	r2, [r7, #2]
 8004a58:	801a      	strh	r2, [r3, #0]
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40023c00 	.word	0x40023c00

08004a6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004a78:	4b0c      	ldr	r3, [pc, #48]	@ (8004aac <FLASH_Program_Byte+0x40>)
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	4a0b      	ldr	r2, [pc, #44]	@ (8004aac <FLASH_Program_Byte+0x40>)
 8004a7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004a84:	4b09      	ldr	r3, [pc, #36]	@ (8004aac <FLASH_Program_Byte+0x40>)
 8004a86:	4a09      	ldr	r2, [pc, #36]	@ (8004aac <FLASH_Program_Byte+0x40>)
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004a8c:	4b07      	ldr	r3, [pc, #28]	@ (8004aac <FLASH_Program_Byte+0x40>)
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	4a06      	ldr	r2, [pc, #24]	@ (8004aac <FLASH_Program_Byte+0x40>)
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	78fa      	ldrb	r2, [r7, #3]
 8004a9c:	701a      	strb	r2, [r3, #0]
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40023c00 	.word	0x40023c00

08004ab0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004ab4:	4b2f      	ldr	r3, [pc, #188]	@ (8004b74 <FLASH_SetErrorCode+0xc4>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f003 0310 	and.w	r3, r3, #16
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d008      	beq.n	8004ad2 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8004b78 <FLASH_SetErrorCode+0xc8>)
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	f043 0310 	orr.w	r3, r3, #16
 8004ac8:	4a2b      	ldr	r2, [pc, #172]	@ (8004b78 <FLASH_SetErrorCode+0xc8>)
 8004aca:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004acc:	4b29      	ldr	r3, [pc, #164]	@ (8004b74 <FLASH_SetErrorCode+0xc4>)
 8004ace:	2210      	movs	r2, #16
 8004ad0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004ad2:	4b28      	ldr	r3, [pc, #160]	@ (8004b74 <FLASH_SetErrorCode+0xc4>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f003 0320 	and.w	r3, r3, #32
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d008      	beq.n	8004af0 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004ade:	4b26      	ldr	r3, [pc, #152]	@ (8004b78 <FLASH_SetErrorCode+0xc8>)
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	f043 0308 	orr.w	r3, r3, #8
 8004ae6:	4a24      	ldr	r2, [pc, #144]	@ (8004b78 <FLASH_SetErrorCode+0xc8>)
 8004ae8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004aea:	4b22      	ldr	r3, [pc, #136]	@ (8004b74 <FLASH_SetErrorCode+0xc4>)
 8004aec:	2220      	movs	r2, #32
 8004aee:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004af0:	4b20      	ldr	r3, [pc, #128]	@ (8004b74 <FLASH_SetErrorCode+0xc4>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d008      	beq.n	8004b0e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004afc:	4b1e      	ldr	r3, [pc, #120]	@ (8004b78 <FLASH_SetErrorCode+0xc8>)
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	f043 0304 	orr.w	r3, r3, #4
 8004b04:	4a1c      	ldr	r2, [pc, #112]	@ (8004b78 <FLASH_SetErrorCode+0xc8>)
 8004b06:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004b08:	4b1a      	ldr	r3, [pc, #104]	@ (8004b74 <FLASH_SetErrorCode+0xc4>)
 8004b0a:	2240      	movs	r2, #64	@ 0x40
 8004b0c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004b0e:	4b19      	ldr	r3, [pc, #100]	@ (8004b74 <FLASH_SetErrorCode+0xc4>)
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d008      	beq.n	8004b2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004b1a:	4b17      	ldr	r3, [pc, #92]	@ (8004b78 <FLASH_SetErrorCode+0xc8>)
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	f043 0302 	orr.w	r3, r3, #2
 8004b22:	4a15      	ldr	r2, [pc, #84]	@ (8004b78 <FLASH_SetErrorCode+0xc8>)
 8004b24:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004b26:	4b13      	ldr	r3, [pc, #76]	@ (8004b74 <FLASH_SetErrorCode+0xc4>)
 8004b28:	2280      	movs	r2, #128	@ 0x80
 8004b2a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004b2c:	4b11      	ldr	r3, [pc, #68]	@ (8004b74 <FLASH_SetErrorCode+0xc4>)
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d009      	beq.n	8004b4c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004b38:	4b0f      	ldr	r3, [pc, #60]	@ (8004b78 <FLASH_SetErrorCode+0xc8>)
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	f043 0301 	orr.w	r3, r3, #1
 8004b40:	4a0d      	ldr	r2, [pc, #52]	@ (8004b78 <FLASH_SetErrorCode+0xc8>)
 8004b42:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004b44:	4b0b      	ldr	r3, [pc, #44]	@ (8004b74 <FLASH_SetErrorCode+0xc4>)
 8004b46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b4a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004b4c:	4b09      	ldr	r3, [pc, #36]	@ (8004b74 <FLASH_SetErrorCode+0xc4>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d008      	beq.n	8004b6a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004b58:	4b07      	ldr	r3, [pc, #28]	@ (8004b78 <FLASH_SetErrorCode+0xc8>)
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	f043 0320 	orr.w	r3, r3, #32
 8004b60:	4a05      	ldr	r2, [pc, #20]	@ (8004b78 <FLASH_SetErrorCode+0xc8>)
 8004b62:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004b64:	4b03      	ldr	r3, [pc, #12]	@ (8004b74 <FLASH_SetErrorCode+0xc4>)
 8004b66:	2202      	movs	r2, #2
 8004b68:	60da      	str	r2, [r3, #12]
  }
}
 8004b6a:	bf00      	nop
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	40023c00 	.word	0x40023c00
 8004b78:	200118f0 	.word	0x200118f0

08004b7c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d102      	bne.n	8004b98 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004b92:	2300      	movs	r3, #0
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	e010      	b.n	8004bba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004b98:	78fb      	ldrb	r3, [r7, #3]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d103      	bne.n	8004ba6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004b9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	e009      	b.n	8004bba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004ba6:	78fb      	ldrb	r3, [r7, #3]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d103      	bne.n	8004bb4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004bac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	e002      	b.n	8004bba <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004bb4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004bb8:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b0b      	cmp	r3, #11
 8004bbe:	d902      	bls.n	8004bc6 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004bc6:	4b13      	ldr	r3, [pc, #76]	@ (8004c14 <FLASH_Erase_Sector+0x98>)
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	4a12      	ldr	r2, [pc, #72]	@ (8004c14 <FLASH_Erase_Sector+0x98>)
 8004bcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bd0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004bd2:	4b10      	ldr	r3, [pc, #64]	@ (8004c14 <FLASH_Erase_Sector+0x98>)
 8004bd4:	691a      	ldr	r2, [r3, #16]
 8004bd6:	490f      	ldr	r1, [pc, #60]	@ (8004c14 <FLASH_Erase_Sector+0x98>)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004bde:	4b0d      	ldr	r3, [pc, #52]	@ (8004c14 <FLASH_Erase_Sector+0x98>)
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	4a0c      	ldr	r2, [pc, #48]	@ (8004c14 <FLASH_Erase_Sector+0x98>)
 8004be4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004be8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004bea:	4b0a      	ldr	r3, [pc, #40]	@ (8004c14 <FLASH_Erase_Sector+0x98>)
 8004bec:	691a      	ldr	r2, [r3, #16]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	4a07      	ldr	r2, [pc, #28]	@ (8004c14 <FLASH_Erase_Sector+0x98>)
 8004bf6:	f043 0302 	orr.w	r3, r3, #2
 8004bfa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004bfc:	4b05      	ldr	r3, [pc, #20]	@ (8004c14 <FLASH_Erase_Sector+0x98>)
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	4a04      	ldr	r2, [pc, #16]	@ (8004c14 <FLASH_Erase_Sector+0x98>)
 8004c02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c06:	6113      	str	r3, [r2, #16]
}
 8004c08:	bf00      	nop
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	40023c00 	.word	0x40023c00

08004c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b089      	sub	sp, #36	@ 0x24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61fb      	str	r3, [r7, #28]
 8004c32:	e177      	b.n	8004f24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c34:	2201      	movs	r2, #1
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	4013      	ands	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	f040 8166 	bne.w	8004f1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d005      	beq.n	8004c6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d130      	bne.n	8004ccc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	2203      	movs	r2, #3
 8004c76:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7a:	43db      	mvns	r3, r3
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca8:	43db      	mvns	r3, r3
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	4013      	ands	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	091b      	lsrs	r3, r3, #4
 8004cb6:	f003 0201 	and.w	r2, r3, #1
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d017      	beq.n	8004d08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	2203      	movs	r2, #3
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	4013      	ands	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f003 0303 	and.w	r3, r3, #3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d123      	bne.n	8004d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	08da      	lsrs	r2, r3, #3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3208      	adds	r2, #8
 8004d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	220f      	movs	r2, #15
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	43db      	mvns	r3, r3
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4013      	ands	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	fa02 f303 	lsl.w	r3, r2, r3
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	08da      	lsrs	r2, r3, #3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3208      	adds	r2, #8
 8004d56:	69b9      	ldr	r1, [r7, #24]
 8004d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	2203      	movs	r2, #3
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	4013      	ands	r3, r2
 8004d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f003 0203 	and.w	r2, r3, #3
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 80c0 	beq.w	8004f1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	4b66      	ldr	r3, [pc, #408]	@ (8004f3c <HAL_GPIO_Init+0x324>)
 8004da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da6:	4a65      	ldr	r2, [pc, #404]	@ (8004f3c <HAL_GPIO_Init+0x324>)
 8004da8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004dac:	6453      	str	r3, [r2, #68]	@ 0x44
 8004dae:	4b63      	ldr	r3, [pc, #396]	@ (8004f3c <HAL_GPIO_Init+0x324>)
 8004db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dba:	4a61      	ldr	r2, [pc, #388]	@ (8004f40 <HAL_GPIO_Init+0x328>)
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	089b      	lsrs	r3, r3, #2
 8004dc0:	3302      	adds	r3, #2
 8004dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	220f      	movs	r2, #15
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a58      	ldr	r2, [pc, #352]	@ (8004f44 <HAL_GPIO_Init+0x32c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d037      	beq.n	8004e56 <HAL_GPIO_Init+0x23e>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a57      	ldr	r2, [pc, #348]	@ (8004f48 <HAL_GPIO_Init+0x330>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d031      	beq.n	8004e52 <HAL_GPIO_Init+0x23a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a56      	ldr	r2, [pc, #344]	@ (8004f4c <HAL_GPIO_Init+0x334>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d02b      	beq.n	8004e4e <HAL_GPIO_Init+0x236>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a55      	ldr	r2, [pc, #340]	@ (8004f50 <HAL_GPIO_Init+0x338>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d025      	beq.n	8004e4a <HAL_GPIO_Init+0x232>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a54      	ldr	r2, [pc, #336]	@ (8004f54 <HAL_GPIO_Init+0x33c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d01f      	beq.n	8004e46 <HAL_GPIO_Init+0x22e>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a53      	ldr	r2, [pc, #332]	@ (8004f58 <HAL_GPIO_Init+0x340>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d019      	beq.n	8004e42 <HAL_GPIO_Init+0x22a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a52      	ldr	r2, [pc, #328]	@ (8004f5c <HAL_GPIO_Init+0x344>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d013      	beq.n	8004e3e <HAL_GPIO_Init+0x226>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a51      	ldr	r2, [pc, #324]	@ (8004f60 <HAL_GPIO_Init+0x348>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00d      	beq.n	8004e3a <HAL_GPIO_Init+0x222>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a50      	ldr	r2, [pc, #320]	@ (8004f64 <HAL_GPIO_Init+0x34c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d007      	beq.n	8004e36 <HAL_GPIO_Init+0x21e>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a4f      	ldr	r2, [pc, #316]	@ (8004f68 <HAL_GPIO_Init+0x350>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d101      	bne.n	8004e32 <HAL_GPIO_Init+0x21a>
 8004e2e:	2309      	movs	r3, #9
 8004e30:	e012      	b.n	8004e58 <HAL_GPIO_Init+0x240>
 8004e32:	230a      	movs	r3, #10
 8004e34:	e010      	b.n	8004e58 <HAL_GPIO_Init+0x240>
 8004e36:	2308      	movs	r3, #8
 8004e38:	e00e      	b.n	8004e58 <HAL_GPIO_Init+0x240>
 8004e3a:	2307      	movs	r3, #7
 8004e3c:	e00c      	b.n	8004e58 <HAL_GPIO_Init+0x240>
 8004e3e:	2306      	movs	r3, #6
 8004e40:	e00a      	b.n	8004e58 <HAL_GPIO_Init+0x240>
 8004e42:	2305      	movs	r3, #5
 8004e44:	e008      	b.n	8004e58 <HAL_GPIO_Init+0x240>
 8004e46:	2304      	movs	r3, #4
 8004e48:	e006      	b.n	8004e58 <HAL_GPIO_Init+0x240>
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e004      	b.n	8004e58 <HAL_GPIO_Init+0x240>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e002      	b.n	8004e58 <HAL_GPIO_Init+0x240>
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <HAL_GPIO_Init+0x240>
 8004e56:	2300      	movs	r3, #0
 8004e58:	69fa      	ldr	r2, [r7, #28]
 8004e5a:	f002 0203 	and.w	r2, r2, #3
 8004e5e:	0092      	lsls	r2, r2, #2
 8004e60:	4093      	lsls	r3, r2
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e68:	4935      	ldr	r1, [pc, #212]	@ (8004f40 <HAL_GPIO_Init+0x328>)
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	089b      	lsrs	r3, r3, #2
 8004e6e:	3302      	adds	r3, #2
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e76:	4b3d      	ldr	r3, [pc, #244]	@ (8004f6c <HAL_GPIO_Init+0x354>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	43db      	mvns	r3, r3
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	4013      	ands	r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e9a:	4a34      	ldr	r2, [pc, #208]	@ (8004f6c <HAL_GPIO_Init+0x354>)
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ea0:	4b32      	ldr	r3, [pc, #200]	@ (8004f6c <HAL_GPIO_Init+0x354>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	4013      	ands	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ec4:	4a29      	ldr	r2, [pc, #164]	@ (8004f6c <HAL_GPIO_Init+0x354>)
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004eca:	4b28      	ldr	r3, [pc, #160]	@ (8004f6c <HAL_GPIO_Init+0x354>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	43db      	mvns	r3, r3
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004eee:	4a1f      	ldr	r2, [pc, #124]	@ (8004f6c <HAL_GPIO_Init+0x354>)
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f6c <HAL_GPIO_Init+0x354>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	43db      	mvns	r3, r3
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	4013      	ands	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f18:	4a14      	ldr	r2, [pc, #80]	@ (8004f6c <HAL_GPIO_Init+0x354>)
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	3301      	adds	r3, #1
 8004f22:	61fb      	str	r3, [r7, #28]
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	2b0f      	cmp	r3, #15
 8004f28:	f67f ae84 	bls.w	8004c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f2c:	bf00      	nop
 8004f2e:	bf00      	nop
 8004f30:	3724      	adds	r7, #36	@ 0x24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	40013800 	.word	0x40013800
 8004f44:	40020000 	.word	0x40020000
 8004f48:	40020400 	.word	0x40020400
 8004f4c:	40020800 	.word	0x40020800
 8004f50:	40020c00 	.word	0x40020c00
 8004f54:	40021000 	.word	0x40021000
 8004f58:	40021400 	.word	0x40021400
 8004f5c:	40021800 	.word	0x40021800
 8004f60:	40021c00 	.word	0x40021c00
 8004f64:	40022000 	.word	0x40022000
 8004f68:	40022400 	.word	0x40022400
 8004f6c:	40013c00 	.word	0x40013c00

08004f70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691a      	ldr	r2, [r3, #16]
 8004f80:	887b      	ldrh	r3, [r7, #2]
 8004f82:	4013      	ands	r3, r2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	73fb      	strb	r3, [r7, #15]
 8004f8c:	e001      	b.n	8004f92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	807b      	strh	r3, [r7, #2]
 8004fac:	4613      	mov	r3, r2
 8004fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fb0:	787b      	ldrb	r3, [r7, #1]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fb6:	887a      	ldrh	r2, [r7, #2]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fbc:	e003      	b.n	8004fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fbe:	887b      	ldrh	r3, [r7, #2]
 8004fc0:	041a      	lsls	r2, r3, #16
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	619a      	str	r2, [r3, #24]
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
	...

08004fd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	4603      	mov	r3, r0
 8004fdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004fde:	4b08      	ldr	r3, [pc, #32]	@ (8005000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fe0:	695a      	ldr	r2, [r3, #20]
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d006      	beq.n	8004ff8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fea:	4a05      	ldr	r2, [pc, #20]	@ (8005000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fec:	88fb      	ldrh	r3, [r7, #6]
 8004fee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ff0:	88fb      	ldrh	r3, [r7, #6]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fe febc 	bl	8003d70 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40013c00 	.word	0x40013c00

08005004 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af02      	add	r7, sp, #8
 800500a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e059      	b.n	80050ca <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d106      	bne.n	8005036 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f009 fbe9 	bl	800e808 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2203      	movs	r2, #3
 800503a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005044:	d102      	bne.n	800504c <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4618      	mov	r0, r3
 8005052:	f005 fcaa 	bl	800a9aa <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	7c1a      	ldrb	r2, [r3, #16]
 800505e:	f88d 2000 	strb.w	r2, [sp]
 8005062:	3304      	adds	r3, #4
 8005064:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005066:	f005 fc2b 	bl	800a8c0 <USB_CoreInit>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e026      	b.n	80050ca <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2101      	movs	r1, #1
 8005082:	4618      	mov	r0, r3
 8005084:	f005 fca2 	bl	800a9cc <USB_SetCurrentMode>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d005      	beq.n	800509a <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2202      	movs	r2, #2
 8005092:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e017      	b.n	80050ca <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	7c1a      	ldrb	r2, [r3, #16]
 80050a2:	f88d 2000 	strb.w	r2, [sp]
 80050a6:	3304      	adds	r3, #4
 80050a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050aa:	f005 fe45 	bl	800ad38 <USB_HostInit>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d005      	beq.n	80050c0 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e004      	b.n	80050ca <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80050d2:	b590      	push	{r4, r7, lr}
 80050d4:	b08b      	sub	sp, #44	@ 0x2c
 80050d6:	af04      	add	r7, sp, #16
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	4608      	mov	r0, r1
 80050dc:	4611      	mov	r1, r2
 80050de:	461a      	mov	r2, r3
 80050e0:	4603      	mov	r3, r0
 80050e2:	70fb      	strb	r3, [r7, #3]
 80050e4:	460b      	mov	r3, r1
 80050e6:	70bb      	strb	r3, [r7, #2]
 80050e8:	4613      	mov	r3, r2
 80050ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80050ec:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80050ee:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_HCD_HC_Init+0x2c>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e09d      	b.n	800523a <HAL_HCD_HC_Init+0x168>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8005106:	78fa      	ldrb	r2, [r7, #3]
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	4613      	mov	r3, r2
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	1a9b      	subs	r3, r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	440b      	add	r3, r1
 8005114:	3319      	adds	r3, #25
 8005116:	2200      	movs	r2, #0
 8005118:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800511a:	78fa      	ldrb	r2, [r7, #3]
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	1a9b      	subs	r3, r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	440b      	add	r3, r1
 8005128:	3314      	adds	r3, #20
 800512a:	787a      	ldrb	r2, [r7, #1]
 800512c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800512e:	78fa      	ldrb	r2, [r7, #3]
 8005130:	6879      	ldr	r1, [r7, #4]
 8005132:	4613      	mov	r3, r2
 8005134:	011b      	lsls	r3, r3, #4
 8005136:	1a9b      	subs	r3, r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	440b      	add	r3, r1
 800513c:	3315      	adds	r3, #21
 800513e:	78fa      	ldrb	r2, [r7, #3]
 8005140:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005142:	78fa      	ldrb	r2, [r7, #3]
 8005144:	6879      	ldr	r1, [r7, #4]
 8005146:	4613      	mov	r3, r2
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	1a9b      	subs	r3, r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	440b      	add	r3, r1
 8005150:	3326      	adds	r3, #38	@ 0x26
 8005152:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8005156:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005158:	78fa      	ldrb	r2, [r7, #3]
 800515a:	78bb      	ldrb	r3, [r7, #2]
 800515c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005160:	b2d8      	uxtb	r0, r3
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	4613      	mov	r3, r2
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	1a9b      	subs	r3, r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	3316      	adds	r3, #22
 8005170:	4602      	mov	r2, r0
 8005172:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	4619      	mov	r1, r3
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 fbc7 	bl	800590c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800517e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005182:	2b00      	cmp	r3, #0
 8005184:	da0a      	bge.n	800519c <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005186:	78fa      	ldrb	r2, [r7, #3]
 8005188:	6879      	ldr	r1, [r7, #4]
 800518a:	4613      	mov	r3, r2
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	1a9b      	subs	r3, r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	440b      	add	r3, r1
 8005194:	3317      	adds	r3, #23
 8005196:	2201      	movs	r2, #1
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	e009      	b.n	80051b0 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800519c:	78fa      	ldrb	r2, [r7, #3]
 800519e:	6879      	ldr	r1, [r7, #4]
 80051a0:	4613      	mov	r3, r2
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	1a9b      	subs	r3, r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	440b      	add	r3, r1
 80051aa:	3317      	adds	r3, #23
 80051ac:	2200      	movs	r2, #0
 80051ae:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f005 ff23 	bl	800b000 <USB_GetHostSpeed>
 80051ba:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80051bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d10b      	bne.n	80051dc <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80051c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d107      	bne.n	80051dc <HAL_HCD_HC_Init+0x10a>
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d104      	bne.n	80051dc <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2bbc      	cmp	r3, #188	@ 0xbc
 80051d6:	d901      	bls.n	80051dc <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80051d8:	23bc      	movs	r3, #188	@ 0xbc
 80051da:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80051dc:	78fa      	ldrb	r2, [r7, #3]
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	1a9b      	subs	r3, r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	3318      	adds	r3, #24
 80051ec:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80051f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80051f2:	78fa      	ldrb	r2, [r7, #3]
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	b298      	uxth	r0, r3
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	4613      	mov	r3, r2
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	1a9b      	subs	r3, r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	440b      	add	r3, r1
 8005204:	3328      	adds	r3, #40	@ 0x28
 8005206:	4602      	mov	r2, r0
 8005208:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6818      	ldr	r0, [r3, #0]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	b29b      	uxth	r3, r3
 8005212:	787c      	ldrb	r4, [r7, #1]
 8005214:	78ba      	ldrb	r2, [r7, #2]
 8005216:	78f9      	ldrb	r1, [r7, #3]
 8005218:	9302      	str	r3, [sp, #8]
 800521a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800521e:	9301      	str	r3, [sp, #4]
 8005220:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	4623      	mov	r3, r4
 8005228:	f005 ff12 	bl	800b050 <USB_HC_Init>
 800522c:	4603      	mov	r3, r0
 800522e:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8005238:	7bfb      	ldrb	r3, [r7, #15]
}
 800523a:	4618      	mov	r0, r3
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	bd90      	pop	{r4, r7, pc}

08005242 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	460b      	mov	r3, r1
 800524c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800524e:	2300      	movs	r3, #0
 8005250:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_HCD_HC_Halt+0x1e>
 800525c:	2302      	movs	r3, #2
 800525e:	e00f      	b.n	8005280 <HAL_HCD_HC_Halt+0x3e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	78fa      	ldrb	r2, [r7, #3]
 800526e:	4611      	mov	r1, r2
 8005270:	4618      	mov	r0, r3
 8005272:	f006 faa4 	bl	800b7be <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800527e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	4608      	mov	r0, r1
 8005292:	4611      	mov	r1, r2
 8005294:	461a      	mov	r2, r3
 8005296:	4603      	mov	r3, r0
 8005298:	70fb      	strb	r3, [r7, #3]
 800529a:	460b      	mov	r3, r1
 800529c:	70bb      	strb	r3, [r7, #2]
 800529e:	4613      	mov	r3, r2
 80052a0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80052a2:	78fa      	ldrb	r2, [r7, #3]
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	4613      	mov	r3, r2
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	1a9b      	subs	r3, r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	440b      	add	r3, r1
 80052b0:	3317      	adds	r3, #23
 80052b2:	78ba      	ldrb	r2, [r7, #2]
 80052b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80052b6:	78fa      	ldrb	r2, [r7, #3]
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	4613      	mov	r3, r2
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	1a9b      	subs	r3, r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	440b      	add	r3, r1
 80052c4:	3326      	adds	r3, #38	@ 0x26
 80052c6:	787a      	ldrb	r2, [r7, #1]
 80052c8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80052ca:	7c3b      	ldrb	r3, [r7, #16]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d114      	bne.n	80052fa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80052d0:	78fa      	ldrb	r2, [r7, #3]
 80052d2:	6879      	ldr	r1, [r7, #4]
 80052d4:	4613      	mov	r3, r2
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	1a9b      	subs	r3, r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	332a      	adds	r3, #42	@ 0x2a
 80052e0:	2203      	movs	r2, #3
 80052e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80052e4:	78fa      	ldrb	r2, [r7, #3]
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	4613      	mov	r3, r2
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	1a9b      	subs	r3, r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	3319      	adds	r3, #25
 80052f4:	7f3a      	ldrb	r2, [r7, #28]
 80052f6:	701a      	strb	r2, [r3, #0]
 80052f8:	e009      	b.n	800530e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80052fa:	78fa      	ldrb	r2, [r7, #3]
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	4613      	mov	r3, r2
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	1a9b      	subs	r3, r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	440b      	add	r3, r1
 8005308:	332a      	adds	r3, #42	@ 0x2a
 800530a:	2202      	movs	r2, #2
 800530c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800530e:	787b      	ldrb	r3, [r7, #1]
 8005310:	2b03      	cmp	r3, #3
 8005312:	f200 8102 	bhi.w	800551a <HAL_HCD_HC_SubmitRequest+0x292>
 8005316:	a201      	add	r2, pc, #4	@ (adr r2, 800531c <HAL_HCD_HC_SubmitRequest+0x94>)
 8005318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531c:	0800532d 	.word	0x0800532d
 8005320:	08005505 	.word	0x08005505
 8005324:	080053f1 	.word	0x080053f1
 8005328:	0800547b 	.word	0x0800547b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800532c:	7c3b      	ldrb	r3, [r7, #16]
 800532e:	2b01      	cmp	r3, #1
 8005330:	f040 80f5 	bne.w	800551e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8005334:	78bb      	ldrb	r3, [r7, #2]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d12d      	bne.n	8005396 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800533a:	8b3b      	ldrh	r3, [r7, #24]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d109      	bne.n	8005354 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8005340:	78fa      	ldrb	r2, [r7, #3]
 8005342:	6879      	ldr	r1, [r7, #4]
 8005344:	4613      	mov	r3, r2
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	1a9b      	subs	r3, r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	440b      	add	r3, r1
 800534e:	333d      	adds	r3, #61	@ 0x3d
 8005350:	2201      	movs	r2, #1
 8005352:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8005354:	78fa      	ldrb	r2, [r7, #3]
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	4613      	mov	r3, r2
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	1a9b      	subs	r3, r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	440b      	add	r3, r1
 8005362:	333d      	adds	r3, #61	@ 0x3d
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10a      	bne.n	8005380 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800536a:	78fa      	ldrb	r2, [r7, #3]
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	4613      	mov	r3, r2
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	1a9b      	subs	r3, r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	440b      	add	r3, r1
 8005378:	332a      	adds	r3, #42	@ 0x2a
 800537a:	2200      	movs	r2, #0
 800537c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800537e:	e0ce      	b.n	800551e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005380:	78fa      	ldrb	r2, [r7, #3]
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	4613      	mov	r3, r2
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	1a9b      	subs	r3, r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	332a      	adds	r3, #42	@ 0x2a
 8005390:	2202      	movs	r2, #2
 8005392:	701a      	strb	r2, [r3, #0]
      break;
 8005394:	e0c3      	b.n	800551e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8005396:	78fa      	ldrb	r2, [r7, #3]
 8005398:	6879      	ldr	r1, [r7, #4]
 800539a:	4613      	mov	r3, r2
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	1a9b      	subs	r3, r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	440b      	add	r3, r1
 80053a4:	331a      	adds	r3, #26
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	f040 80b8 	bne.w	800551e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80053ae:	78fa      	ldrb	r2, [r7, #3]
 80053b0:	6879      	ldr	r1, [r7, #4]
 80053b2:	4613      	mov	r3, r2
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	1a9b      	subs	r3, r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	440b      	add	r3, r1
 80053bc:	333c      	adds	r3, #60	@ 0x3c
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10a      	bne.n	80053da <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80053c4:	78fa      	ldrb	r2, [r7, #3]
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	4613      	mov	r3, r2
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	332a      	adds	r3, #42	@ 0x2a
 80053d4:	2200      	movs	r2, #0
 80053d6:	701a      	strb	r2, [r3, #0]
      break;
 80053d8:	e0a1      	b.n	800551e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80053da:	78fa      	ldrb	r2, [r7, #3]
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	4613      	mov	r3, r2
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	1a9b      	subs	r3, r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	440b      	add	r3, r1
 80053e8:	332a      	adds	r3, #42	@ 0x2a
 80053ea:	2202      	movs	r2, #2
 80053ec:	701a      	strb	r2, [r3, #0]
      break;
 80053ee:	e096      	b.n	800551e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80053f0:	78bb      	ldrb	r3, [r7, #2]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d120      	bne.n	8005438 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80053f6:	78fa      	ldrb	r2, [r7, #3]
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	4613      	mov	r3, r2
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	1a9b      	subs	r3, r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	440b      	add	r3, r1
 8005404:	333d      	adds	r3, #61	@ 0x3d
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10a      	bne.n	8005422 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800540c:	78fa      	ldrb	r2, [r7, #3]
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	4613      	mov	r3, r2
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	1a9b      	subs	r3, r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	440b      	add	r3, r1
 800541a:	332a      	adds	r3, #42	@ 0x2a
 800541c:	2200      	movs	r2, #0
 800541e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005420:	e07e      	b.n	8005520 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005422:	78fa      	ldrb	r2, [r7, #3]
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	440b      	add	r3, r1
 8005430:	332a      	adds	r3, #42	@ 0x2a
 8005432:	2202      	movs	r2, #2
 8005434:	701a      	strb	r2, [r3, #0]
      break;
 8005436:	e073      	b.n	8005520 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005438:	78fa      	ldrb	r2, [r7, #3]
 800543a:	6879      	ldr	r1, [r7, #4]
 800543c:	4613      	mov	r3, r2
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	1a9b      	subs	r3, r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	440b      	add	r3, r1
 8005446:	333c      	adds	r3, #60	@ 0x3c
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10a      	bne.n	8005464 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800544e:	78fa      	ldrb	r2, [r7, #3]
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	4613      	mov	r3, r2
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	1a9b      	subs	r3, r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	440b      	add	r3, r1
 800545c:	332a      	adds	r3, #42	@ 0x2a
 800545e:	2200      	movs	r2, #0
 8005460:	701a      	strb	r2, [r3, #0]
      break;
 8005462:	e05d      	b.n	8005520 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005464:	78fa      	ldrb	r2, [r7, #3]
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	4613      	mov	r3, r2
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	1a9b      	subs	r3, r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	440b      	add	r3, r1
 8005472:	332a      	adds	r3, #42	@ 0x2a
 8005474:	2202      	movs	r2, #2
 8005476:	701a      	strb	r2, [r3, #0]
      break;
 8005478:	e052      	b.n	8005520 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800547a:	78bb      	ldrb	r3, [r7, #2]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d120      	bne.n	80054c2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005480:	78fa      	ldrb	r2, [r7, #3]
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	1a9b      	subs	r3, r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	333d      	adds	r3, #61	@ 0x3d
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10a      	bne.n	80054ac <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005496:	78fa      	ldrb	r2, [r7, #3]
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	4613      	mov	r3, r2
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	440b      	add	r3, r1
 80054a4:	332a      	adds	r3, #42	@ 0x2a
 80054a6:	2200      	movs	r2, #0
 80054a8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80054aa:	e039      	b.n	8005520 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80054ac:	78fa      	ldrb	r2, [r7, #3]
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	4613      	mov	r3, r2
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	1a9b      	subs	r3, r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	332a      	adds	r3, #42	@ 0x2a
 80054bc:	2202      	movs	r2, #2
 80054be:	701a      	strb	r2, [r3, #0]
      break;
 80054c0:	e02e      	b.n	8005520 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80054c2:	78fa      	ldrb	r2, [r7, #3]
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	4613      	mov	r3, r2
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	440b      	add	r3, r1
 80054d0:	333c      	adds	r3, #60	@ 0x3c
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10a      	bne.n	80054ee <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80054d8:	78fa      	ldrb	r2, [r7, #3]
 80054da:	6879      	ldr	r1, [r7, #4]
 80054dc:	4613      	mov	r3, r2
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	1a9b      	subs	r3, r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	440b      	add	r3, r1
 80054e6:	332a      	adds	r3, #42	@ 0x2a
 80054e8:	2200      	movs	r2, #0
 80054ea:	701a      	strb	r2, [r3, #0]
      break;
 80054ec:	e018      	b.n	8005520 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80054ee:	78fa      	ldrb	r2, [r7, #3]
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	4613      	mov	r3, r2
 80054f4:	011b      	lsls	r3, r3, #4
 80054f6:	1a9b      	subs	r3, r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	440b      	add	r3, r1
 80054fc:	332a      	adds	r3, #42	@ 0x2a
 80054fe:	2202      	movs	r2, #2
 8005500:	701a      	strb	r2, [r3, #0]
      break;
 8005502:	e00d      	b.n	8005520 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005504:	78fa      	ldrb	r2, [r7, #3]
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	4613      	mov	r3, r2
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	1a9b      	subs	r3, r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	440b      	add	r3, r1
 8005512:	332a      	adds	r3, #42	@ 0x2a
 8005514:	2200      	movs	r2, #0
 8005516:	701a      	strb	r2, [r3, #0]
      break;
 8005518:	e002      	b.n	8005520 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800551a:	bf00      	nop
 800551c:	e000      	b.n	8005520 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800551e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005520:	78fa      	ldrb	r2, [r7, #3]
 8005522:	6879      	ldr	r1, [r7, #4]
 8005524:	4613      	mov	r3, r2
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	1a9b      	subs	r3, r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	332c      	adds	r3, #44	@ 0x2c
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005534:	78fa      	ldrb	r2, [r7, #3]
 8005536:	8b39      	ldrh	r1, [r7, #24]
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	4613      	mov	r3, r2
 800553c:	011b      	lsls	r3, r3, #4
 800553e:	1a9b      	subs	r3, r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4403      	add	r3, r0
 8005544:	3334      	adds	r3, #52	@ 0x34
 8005546:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005548:	78fa      	ldrb	r2, [r7, #3]
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	4613      	mov	r3, r2
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	1a9b      	subs	r3, r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	440b      	add	r3, r1
 8005556:	334c      	adds	r3, #76	@ 0x4c
 8005558:	2200      	movs	r2, #0
 800555a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800555c:	78fa      	ldrb	r2, [r7, #3]
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	4613      	mov	r3, r2
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	1a9b      	subs	r3, r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	440b      	add	r3, r1
 800556a:	3338      	adds	r3, #56	@ 0x38
 800556c:	2200      	movs	r2, #0
 800556e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005570:	78fa      	ldrb	r2, [r7, #3]
 8005572:	6879      	ldr	r1, [r7, #4]
 8005574:	4613      	mov	r3, r2
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	1a9b      	subs	r3, r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	440b      	add	r3, r1
 800557e:	3315      	adds	r3, #21
 8005580:	78fa      	ldrb	r2, [r7, #3]
 8005582:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005584:	78fa      	ldrb	r2, [r7, #3]
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	4613      	mov	r3, r2
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	440b      	add	r3, r1
 8005592:	334d      	adds	r3, #77	@ 0x4d
 8005594:	2200      	movs	r2, #0
 8005596:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	78fa      	ldrb	r2, [r7, #3]
 800559e:	4613      	mov	r3, r2
 80055a0:	011b      	lsls	r3, r3, #4
 80055a2:	1a9b      	subs	r3, r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	3310      	adds	r3, #16
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	4413      	add	r3, r2
 80055ac:	1d19      	adds	r1, r3, #4
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	799b      	ldrb	r3, [r3, #6]
 80055b2:	461a      	mov	r2, r3
 80055b4:	f005 fe78 	bl	800b2a8 <USB_HC_StartXfer>
 80055b8:	4603      	mov	r3, r0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop

080055c4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4618      	mov	r0, r3
 80055dc:	f005 fb6c 	bl	800acb8 <USB_GetMode>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	f040 80fb 	bne.w	80057de <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f005 fb2f 	bl	800ac50 <USB_ReadInterrupts>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 80f1 	beq.w	80057dc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4618      	mov	r0, r3
 8005600:	f005 fb26 	bl	800ac50 <USB_ReadInterrupts>
 8005604:	4603      	mov	r3, r0
 8005606:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800560a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800560e:	d104      	bne.n	800561a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005618:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4618      	mov	r0, r3
 8005620:	f005 fb16 	bl	800ac50 <USB_ReadInterrupts>
 8005624:	4603      	mov	r3, r0
 8005626:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800562a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800562e:	d104      	bne.n	800563a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005638:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f005 fb06 	bl	800ac50 <USB_ReadInterrupts>
 8005644:	4603      	mov	r3, r0
 8005646:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800564a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800564e:	d104      	bne.n	800565a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005658:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4618      	mov	r0, r3
 8005660:	f005 faf6 	bl	800ac50 <USB_ReadInterrupts>
 8005664:	4603      	mov	r3, r0
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b02      	cmp	r3, #2
 800566c:	d103      	bne.n	8005676 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2202      	movs	r2, #2
 8005674:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4618      	mov	r0, r3
 800567c:	f005 fae8 	bl	800ac50 <USB_ReadInterrupts>
 8005680:	4603      	mov	r3, r0
 8005682:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005686:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800568a:	d120      	bne.n	80056ce <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005694:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d113      	bne.n	80056ce <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80056a6:	2110      	movs	r1, #16
 80056a8:	6938      	ldr	r0, [r7, #16]
 80056aa:	f005 f9db 	bl	800aa64 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80056ae:	6938      	ldr	r0, [r7, #16]
 80056b0:	f005 fa0a 	bl	800aac8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	7a5b      	ldrb	r3, [r3, #9]
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d105      	bne.n	80056c8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2101      	movs	r1, #1
 80056c2:	4618      	mov	r0, r3
 80056c4:	f005 fbfc 	bl	800aec0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f009 f90d 	bl	800e8e8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f005 fabc 	bl	800ac50 <USB_ReadInterrupts>
 80056d8:	4603      	mov	r3, r0
 80056da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056e2:	d102      	bne.n	80056ea <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f001 fd4d 	bl	8007184 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f005 faae 	bl	800ac50 <USB_ReadInterrupts>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f003 0308 	and.w	r3, r3, #8
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d106      	bne.n	800570c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f009 f8d6 	bl	800e8b0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2208      	movs	r2, #8
 800570a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4618      	mov	r0, r3
 8005712:	f005 fa9d 	bl	800ac50 <USB_ReadInterrupts>
 8005716:	4603      	mov	r3, r0
 8005718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800571c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005720:	d139      	bne.n	8005796 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4618      	mov	r0, r3
 8005728:	f006 f838 	bl	800b79c <USB_HC_ReadInterrupt>
 800572c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800572e:	2300      	movs	r3, #0
 8005730:	617b      	str	r3, [r7, #20]
 8005732:	e025      	b.n	8005780 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	fa22 f303 	lsr.w	r3, r2, r3
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	d018      	beq.n	800577a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800575a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800575e:	d106      	bne.n	800576e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	b2db      	uxtb	r3, r3
 8005764:	4619      	mov	r1, r3
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f905 	bl	8005976 <HCD_HC_IN_IRQHandler>
 800576c:	e005      	b.n	800577a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	b2db      	uxtb	r3, r3
 8005772:	4619      	mov	r1, r3
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 ff67 	bl	8006648 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	3301      	adds	r3, #1
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	795b      	ldrb	r3, [r3, #5]
 8005784:	461a      	mov	r2, r3
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	4293      	cmp	r3, r2
 800578a:	d3d3      	bcc.n	8005734 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005794:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4618      	mov	r0, r3
 800579c:	f005 fa58 	bl	800ac50 <USB_ReadInterrupts>
 80057a0:	4603      	mov	r3, r0
 80057a2:	f003 0310 	and.w	r3, r3, #16
 80057a6:	2b10      	cmp	r3, #16
 80057a8:	d101      	bne.n	80057ae <HAL_HCD_IRQHandler+0x1ea>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <HAL_HCD_IRQHandler+0x1ec>
 80057ae:	2300      	movs	r3, #0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d014      	beq.n	80057de <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	699a      	ldr	r2, [r3, #24]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0210 	bic.w	r2, r2, #16
 80057c2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f001 fbfe 	bl	8006fc6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	699a      	ldr	r2, [r3, #24]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f042 0210 	orr.w	r2, r2, #16
 80057d8:	619a      	str	r2, [r3, #24]
 80057da:	e000      	b.n	80057de <HAL_HCD_IRQHandler+0x21a>
      return;
 80057dc:	bf00      	nop
    }
  }
}
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d101      	bne.n	80057fa <HAL_HCD_Start+0x16>
 80057f6:	2302      	movs	r3, #2
 80057f8:	e013      	b.n	8005822 <HAL_HCD_Start+0x3e>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2101      	movs	r1, #1
 8005808:	4618      	mov	r0, r3
 800580a:	f005 fbc0 	bl	800af8e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4618      	mov	r0, r3
 8005814:	f005 f8b8 	bl	800a988 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005838:	2b01      	cmp	r3, #1
 800583a:	d101      	bne.n	8005840 <HAL_HCD_Stop+0x16>
 800583c:	2302      	movs	r3, #2
 800583e:	e00d      	b.n	800585c <HAL_HCD_Stop+0x32>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4618      	mov	r0, r3
 800584e:	f006 f913 	bl	800ba78 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4618      	mov	r0, r3
 8005872:	f005 fb62 	bl	800af3a <USB_ResetPort>
 8005876:	4603      	mov	r3, r0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	460b      	mov	r3, r1
 800588a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800588c:	78fa      	ldrb	r2, [r7, #3]
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	4613      	mov	r3, r2
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	1a9b      	subs	r3, r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	440b      	add	r3, r1
 800589a:	334c      	adds	r3, #76	@ 0x4c
 800589c:	781b      	ldrb	r3, [r3, #0]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	460b      	mov	r3, r1
 80058b4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80058b6:	78fa      	ldrb	r2, [r7, #3]
 80058b8:	6879      	ldr	r1, [r7, #4]
 80058ba:	4613      	mov	r3, r2
 80058bc:	011b      	lsls	r3, r3, #4
 80058be:	1a9b      	subs	r3, r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	440b      	add	r3, r1
 80058c4:	3338      	adds	r3, #56	@ 0x38
 80058c6:	681b      	ldr	r3, [r3, #0]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f005 fba4 	bl	800b02e <USB_GetCurrentFrame>
 80058e6:	4603      	mov	r3, r0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f005 fb7f 	bl	800b000 <USB_GetHostSpeed>
 8005902:	4603      	mov	r3, r0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8005918:	78fa      	ldrb	r2, [r7, #3]
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	4613      	mov	r3, r2
 800591e:	011b      	lsls	r3, r3, #4
 8005920:	1a9b      	subs	r3, r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	440b      	add	r3, r1
 8005926:	331a      	adds	r3, #26
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800592c:	78fa      	ldrb	r2, [r7, #3]
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	4613      	mov	r3, r2
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	1a9b      	subs	r3, r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	440b      	add	r3, r1
 800593a:	331b      	adds	r3, #27
 800593c:	2200      	movs	r2, #0
 800593e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8005940:	78fa      	ldrb	r2, [r7, #3]
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	4613      	mov	r3, r2
 8005946:	011b      	lsls	r3, r3, #4
 8005948:	1a9b      	subs	r3, r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	440b      	add	r3, r1
 800594e:	3325      	adds	r3, #37	@ 0x25
 8005950:	2200      	movs	r2, #0
 8005952:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8005954:	78fa      	ldrb	r2, [r7, #3]
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	4613      	mov	r3, r2
 800595a:	011b      	lsls	r3, r3, #4
 800595c:	1a9b      	subs	r3, r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	440b      	add	r3, r1
 8005962:	3324      	adds	r3, #36	@ 0x24
 8005964:	2200      	movs	r2, #0
 8005966:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b086      	sub	sp, #24
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	460b      	mov	r3, r1
 8005980:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	78fa      	ldrb	r2, [r7, #3]
 8005992:	4611      	mov	r1, r2
 8005994:	4618      	mov	r0, r3
 8005996:	f005 f96e 	bl	800ac76 <USB_ReadChInterrupts>
 800599a:	4603      	mov	r3, r0
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d11a      	bne.n	80059da <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80059a4:	78fb      	ldrb	r3, [r7, #3]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059b0:	461a      	mov	r2, r3
 80059b2:	2304      	movs	r3, #4
 80059b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80059b6:	78fa      	ldrb	r2, [r7, #3]
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	4613      	mov	r3, r2
 80059bc:	011b      	lsls	r3, r3, #4
 80059be:	1a9b      	subs	r3, r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	440b      	add	r3, r1
 80059c4:	334d      	adds	r3, #77	@ 0x4d
 80059c6:	2207      	movs	r2, #7
 80059c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	78fa      	ldrb	r2, [r7, #3]
 80059d0:	4611      	mov	r1, r2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f005 fef3 	bl	800b7be <USB_HC_Halt>
 80059d8:	e09e      	b.n	8005b18 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	78fa      	ldrb	r2, [r7, #3]
 80059e0:	4611      	mov	r1, r2
 80059e2:	4618      	mov	r0, r3
 80059e4:	f005 f947 	bl	800ac76 <USB_ReadChInterrupts>
 80059e8:	4603      	mov	r3, r0
 80059ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059f2:	d11b      	bne.n	8005a2c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80059f4:	78fb      	ldrb	r3, [r7, #3]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a00:	461a      	mov	r2, r3
 8005a02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005a06:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8005a08:	78fa      	ldrb	r2, [r7, #3]
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	1a9b      	subs	r3, r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	334d      	adds	r3, #77	@ 0x4d
 8005a18:	2208      	movs	r2, #8
 8005a1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	78fa      	ldrb	r2, [r7, #3]
 8005a22:	4611      	mov	r1, r2
 8005a24:	4618      	mov	r0, r3
 8005a26:	f005 feca 	bl	800b7be <USB_HC_Halt>
 8005a2a:	e075      	b.n	8005b18 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	78fa      	ldrb	r2, [r7, #3]
 8005a32:	4611      	mov	r1, r2
 8005a34:	4618      	mov	r0, r3
 8005a36:	f005 f91e 	bl	800ac76 <USB_ReadChInterrupts>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d11a      	bne.n	8005a7a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a50:	461a      	mov	r2, r3
 8005a52:	2308      	movs	r3, #8
 8005a54:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005a56:	78fa      	ldrb	r2, [r7, #3]
 8005a58:	6879      	ldr	r1, [r7, #4]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	1a9b      	subs	r3, r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	440b      	add	r3, r1
 8005a64:	334d      	adds	r3, #77	@ 0x4d
 8005a66:	2206      	movs	r2, #6
 8005a68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	78fa      	ldrb	r2, [r7, #3]
 8005a70:	4611      	mov	r1, r2
 8005a72:	4618      	mov	r0, r3
 8005a74:	f005 fea3 	bl	800b7be <USB_HC_Halt>
 8005a78:	e04e      	b.n	8005b18 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	78fa      	ldrb	r2, [r7, #3]
 8005a80:	4611      	mov	r1, r2
 8005a82:	4618      	mov	r0, r3
 8005a84:	f005 f8f7 	bl	800ac76 <USB_ReadChInterrupts>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a92:	d11b      	bne.n	8005acc <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005aa6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005aa8:	78fa      	ldrb	r2, [r7, #3]
 8005aaa:	6879      	ldr	r1, [r7, #4]
 8005aac:	4613      	mov	r3, r2
 8005aae:	011b      	lsls	r3, r3, #4
 8005ab0:	1a9b      	subs	r3, r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	440b      	add	r3, r1
 8005ab6:	334d      	adds	r3, #77	@ 0x4d
 8005ab8:	2209      	movs	r2, #9
 8005aba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	78fa      	ldrb	r2, [r7, #3]
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f005 fe7a 	bl	800b7be <USB_HC_Halt>
 8005aca:	e025      	b.n	8005b18 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	78fa      	ldrb	r2, [r7, #3]
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f005 f8ce 	bl	800ac76 <USB_ReadChInterrupts>
 8005ada:	4603      	mov	r3, r0
 8005adc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ae0:	2b80      	cmp	r3, #128	@ 0x80
 8005ae2:	d119      	bne.n	8005b18 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005ae4:	78fb      	ldrb	r3, [r7, #3]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005af0:	461a      	mov	r2, r3
 8005af2:	2380      	movs	r3, #128	@ 0x80
 8005af4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005af6:	78fa      	ldrb	r2, [r7, #3]
 8005af8:	6879      	ldr	r1, [r7, #4]
 8005afa:	4613      	mov	r3, r2
 8005afc:	011b      	lsls	r3, r3, #4
 8005afe:	1a9b      	subs	r3, r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	440b      	add	r3, r1
 8005b04:	334d      	adds	r3, #77	@ 0x4d
 8005b06:	2207      	movs	r2, #7
 8005b08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	78fa      	ldrb	r2, [r7, #3]
 8005b10:	4611      	mov	r1, r2
 8005b12:	4618      	mov	r0, r3
 8005b14:	f005 fe53 	bl	800b7be <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	78fa      	ldrb	r2, [r7, #3]
 8005b1e:	4611      	mov	r1, r2
 8005b20:	4618      	mov	r0, r3
 8005b22:	f005 f8a8 	bl	800ac76 <USB_ReadChInterrupts>
 8005b26:	4603      	mov	r3, r0
 8005b28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b30:	d112      	bne.n	8005b58 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	78fa      	ldrb	r2, [r7, #3]
 8005b38:	4611      	mov	r1, r2
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f005 fe3f 	bl	800b7be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b52:	6093      	str	r3, [r2, #8]
 8005b54:	f000 bd75 	b.w	8006642 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	78fa      	ldrb	r2, [r7, #3]
 8005b5e:	4611      	mov	r1, r2
 8005b60:	4618      	mov	r0, r3
 8005b62:	f005 f888 	bl	800ac76 <USB_ReadChInterrupts>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	f040 8128 	bne.w	8005dc2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005b72:	78fb      	ldrb	r3, [r7, #3]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b7e:	461a      	mov	r2, r3
 8005b80:	2320      	movs	r3, #32
 8005b82:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005b84:	78fa      	ldrb	r2, [r7, #3]
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	011b      	lsls	r3, r3, #4
 8005b8c:	1a9b      	subs	r3, r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	440b      	add	r3, r1
 8005b92:	331b      	adds	r3, #27
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d119      	bne.n	8005bce <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005b9a:	78fa      	ldrb	r2, [r7, #3]
 8005b9c:	6879      	ldr	r1, [r7, #4]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	011b      	lsls	r3, r3, #4
 8005ba2:	1a9b      	subs	r3, r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	440b      	add	r3, r1
 8005ba8:	331b      	adds	r3, #27
 8005baa:	2200      	movs	r2, #0
 8005bac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005bae:	78fb      	ldrb	r3, [r7, #3]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	78fa      	ldrb	r2, [r7, #3]
 8005bbe:	0151      	lsls	r1, r2, #5
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	440a      	add	r2, r1
 8005bc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bcc:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	799b      	ldrb	r3, [r3, #6]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d01b      	beq.n	8005c0e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005bd6:	78fa      	ldrb	r2, [r7, #3]
 8005bd8:	6879      	ldr	r1, [r7, #4]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	1a9b      	subs	r3, r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	440b      	add	r3, r1
 8005be4:	3330      	adds	r3, #48	@ 0x30
 8005be6:	6819      	ldr	r1, [r3, #0]
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bfa:	78fa      	ldrb	r2, [r7, #3]
 8005bfc:	1ac9      	subs	r1, r1, r3
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	4613      	mov	r3, r2
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	1a9b      	subs	r3, r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4403      	add	r3, r0
 8005c0a:	3338      	adds	r3, #56	@ 0x38
 8005c0c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8005c0e:	78fa      	ldrb	r2, [r7, #3]
 8005c10:	6879      	ldr	r1, [r7, #4]
 8005c12:	4613      	mov	r3, r2
 8005c14:	011b      	lsls	r3, r3, #4
 8005c16:	1a9b      	subs	r3, r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	440b      	add	r3, r1
 8005c1c:	334d      	adds	r3, #77	@ 0x4d
 8005c1e:	2201      	movs	r2, #1
 8005c20:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8005c22:	78fa      	ldrb	r2, [r7, #3]
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	4613      	mov	r3, r2
 8005c28:	011b      	lsls	r3, r3, #4
 8005c2a:	1a9b      	subs	r3, r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	440b      	add	r3, r1
 8005c30:	3344      	adds	r3, #68	@ 0x44
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005c36:	78fb      	ldrb	r3, [r7, #3]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c42:	461a      	mov	r2, r3
 8005c44:	2301      	movs	r3, #1
 8005c46:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005c48:	78fa      	ldrb	r2, [r7, #3]
 8005c4a:	6879      	ldr	r1, [r7, #4]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	011b      	lsls	r3, r3, #4
 8005c50:	1a9b      	subs	r3, r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	440b      	add	r3, r1
 8005c56:	3326      	adds	r3, #38	@ 0x26
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005c5e:	78fa      	ldrb	r2, [r7, #3]
 8005c60:	6879      	ldr	r1, [r7, #4]
 8005c62:	4613      	mov	r3, r2
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	1a9b      	subs	r3, r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	440b      	add	r3, r1
 8005c6c:	3326      	adds	r3, #38	@ 0x26
 8005c6e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d110      	bne.n	8005c96 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	78fa      	ldrb	r2, [r7, #3]
 8005c7a:	4611      	mov	r1, r2
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f005 fd9e 	bl	800b7be <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c8e:	461a      	mov	r2, r3
 8005c90:	2310      	movs	r3, #16
 8005c92:	6093      	str	r3, [r2, #8]
 8005c94:	e03d      	b.n	8005d12 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005c96:	78fa      	ldrb	r2, [r7, #3]
 8005c98:	6879      	ldr	r1, [r7, #4]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	1a9b      	subs	r3, r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	3326      	adds	r3, #38	@ 0x26
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	2b03      	cmp	r3, #3
 8005caa:	d00a      	beq.n	8005cc2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005cac:	78fa      	ldrb	r2, [r7, #3]
 8005cae:	6879      	ldr	r1, [r7, #4]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	1a9b      	subs	r3, r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	440b      	add	r3, r1
 8005cba:	3326      	adds	r3, #38	@ 0x26
 8005cbc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d127      	bne.n	8005d12 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005cc2:	78fb      	ldrb	r3, [r7, #3]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	78fa      	ldrb	r2, [r7, #3]
 8005cd2:	0151      	lsls	r1, r2, #5
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	440a      	add	r2, r1
 8005cd8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cdc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ce0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005ce2:	78fa      	ldrb	r2, [r7, #3]
 8005ce4:	6879      	ldr	r1, [r7, #4]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	011b      	lsls	r3, r3, #4
 8005cea:	1a9b      	subs	r3, r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	440b      	add	r3, r1
 8005cf0:	334c      	adds	r3, #76	@ 0x4c
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005cf6:	78fa      	ldrb	r2, [r7, #3]
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	1a9b      	subs	r3, r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	440b      	add	r3, r1
 8005d04:	334c      	adds	r3, #76	@ 0x4c
 8005d06:	781a      	ldrb	r2, [r3, #0]
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f008 fdf9 	bl	800e904 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	799b      	ldrb	r3, [r3, #6]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d13b      	bne.n	8005d92 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8005d1a:	78fa      	ldrb	r2, [r7, #3]
 8005d1c:	6879      	ldr	r1, [r7, #4]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	1a9b      	subs	r3, r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	440b      	add	r3, r1
 8005d28:	3338      	adds	r3, #56	@ 0x38
 8005d2a:	6819      	ldr	r1, [r3, #0]
 8005d2c:	78fa      	ldrb	r2, [r7, #3]
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	4613      	mov	r3, r2
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	1a9b      	subs	r3, r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4403      	add	r3, r0
 8005d3a:	3328      	adds	r3, #40	@ 0x28
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	440b      	add	r3, r1
 8005d40:	1e59      	subs	r1, r3, #1
 8005d42:	78fa      	ldrb	r2, [r7, #3]
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	4613      	mov	r3, r2
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	1a9b      	subs	r3, r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4403      	add	r3, r0
 8005d50:	3328      	adds	r3, #40	@ 0x28
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 8470 	beq.w	8006642 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8005d62:	78fa      	ldrb	r2, [r7, #3]
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	4613      	mov	r3, r2
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	1a9b      	subs	r3, r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	440b      	add	r3, r1
 8005d70:	333c      	adds	r3, #60	@ 0x3c
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	78fa      	ldrb	r2, [r7, #3]
 8005d76:	f083 0301 	eor.w	r3, r3, #1
 8005d7a:	b2d8      	uxtb	r0, r3
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	011b      	lsls	r3, r3, #4
 8005d82:	1a9b      	subs	r3, r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	440b      	add	r3, r1
 8005d88:	333c      	adds	r3, #60	@ 0x3c
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	f000 bc58 	b.w	8006642 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8005d92:	78fa      	ldrb	r2, [r7, #3]
 8005d94:	6879      	ldr	r1, [r7, #4]
 8005d96:	4613      	mov	r3, r2
 8005d98:	011b      	lsls	r3, r3, #4
 8005d9a:	1a9b      	subs	r3, r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	440b      	add	r3, r1
 8005da0:	333c      	adds	r3, #60	@ 0x3c
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	78fa      	ldrb	r2, [r7, #3]
 8005da6:	f083 0301 	eor.w	r3, r3, #1
 8005daa:	b2d8      	uxtb	r0, r3
 8005dac:	6879      	ldr	r1, [r7, #4]
 8005dae:	4613      	mov	r3, r2
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	1a9b      	subs	r3, r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	440b      	add	r3, r1
 8005db8:	333c      	adds	r3, #60	@ 0x3c
 8005dba:	4602      	mov	r2, r0
 8005dbc:	701a      	strb	r2, [r3, #0]
 8005dbe:	f000 bc40 	b.w	8006642 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	78fa      	ldrb	r2, [r7, #3]
 8005dc8:	4611      	mov	r1, r2
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f004 ff53 	bl	800ac76 <USB_ReadChInterrupts>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	f003 0320 	and.w	r3, r3, #32
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	d131      	bne.n	8005e3e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005dda:	78fb      	ldrb	r3, [r7, #3]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005de6:	461a      	mov	r2, r3
 8005de8:	2320      	movs	r3, #32
 8005dea:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005dec:	78fa      	ldrb	r2, [r7, #3]
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	4613      	mov	r3, r2
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	1a9b      	subs	r3, r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	440b      	add	r3, r1
 8005dfa:	331a      	adds	r3, #26
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	f040 841f 	bne.w	8006642 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8005e04:	78fa      	ldrb	r2, [r7, #3]
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	1a9b      	subs	r3, r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	331b      	adds	r3, #27
 8005e14:	2201      	movs	r2, #1
 8005e16:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005e18:	78fa      	ldrb	r2, [r7, #3]
 8005e1a:	6879      	ldr	r1, [r7, #4]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	011b      	lsls	r3, r3, #4
 8005e20:	1a9b      	subs	r3, r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	440b      	add	r3, r1
 8005e26:	334d      	adds	r3, #77	@ 0x4d
 8005e28:	2203      	movs	r2, #3
 8005e2a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	78fa      	ldrb	r2, [r7, #3]
 8005e32:	4611      	mov	r1, r2
 8005e34:	4618      	mov	r0, r3
 8005e36:	f005 fcc2 	bl	800b7be <USB_HC_Halt>
 8005e3a:	f000 bc02 	b.w	8006642 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	78fa      	ldrb	r2, [r7, #3]
 8005e44:	4611      	mov	r1, r2
 8005e46:	4618      	mov	r0, r3
 8005e48:	f004 ff15 	bl	800ac76 <USB_ReadChInterrupts>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	f040 8305 	bne.w	8006462 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e64:	461a      	mov	r2, r3
 8005e66:	2302      	movs	r3, #2
 8005e68:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005e6a:	78fa      	ldrb	r2, [r7, #3]
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	011b      	lsls	r3, r3, #4
 8005e72:	1a9b      	subs	r3, r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	440b      	add	r3, r1
 8005e78:	334d      	adds	r3, #77	@ 0x4d
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d114      	bne.n	8005eaa <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005e80:	78fa      	ldrb	r2, [r7, #3]
 8005e82:	6879      	ldr	r1, [r7, #4]
 8005e84:	4613      	mov	r3, r2
 8005e86:	011b      	lsls	r3, r3, #4
 8005e88:	1a9b      	subs	r3, r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	440b      	add	r3, r1
 8005e8e:	334d      	adds	r3, #77	@ 0x4d
 8005e90:	2202      	movs	r2, #2
 8005e92:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005e94:	78fa      	ldrb	r2, [r7, #3]
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	1a9b      	subs	r3, r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	440b      	add	r3, r1
 8005ea2:	334c      	adds	r3, #76	@ 0x4c
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	701a      	strb	r2, [r3, #0]
 8005ea8:	e2cc      	b.n	8006444 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005eaa:	78fa      	ldrb	r2, [r7, #3]
 8005eac:	6879      	ldr	r1, [r7, #4]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	011b      	lsls	r3, r3, #4
 8005eb2:	1a9b      	subs	r3, r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	440b      	add	r3, r1
 8005eb8:	334d      	adds	r3, #77	@ 0x4d
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b06      	cmp	r3, #6
 8005ebe:	d114      	bne.n	8005eea <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005ec0:	78fa      	ldrb	r2, [r7, #3]
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	334d      	adds	r3, #77	@ 0x4d
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8005ed4:	78fa      	ldrb	r2, [r7, #3]
 8005ed6:	6879      	ldr	r1, [r7, #4]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	011b      	lsls	r3, r3, #4
 8005edc:	1a9b      	subs	r3, r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	440b      	add	r3, r1
 8005ee2:	334c      	adds	r3, #76	@ 0x4c
 8005ee4:	2205      	movs	r2, #5
 8005ee6:	701a      	strb	r2, [r3, #0]
 8005ee8:	e2ac      	b.n	8006444 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005eea:	78fa      	ldrb	r2, [r7, #3]
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	011b      	lsls	r3, r3, #4
 8005ef2:	1a9b      	subs	r3, r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	440b      	add	r3, r1
 8005ef8:	334d      	adds	r3, #77	@ 0x4d
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b07      	cmp	r3, #7
 8005efe:	d00b      	beq.n	8005f18 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005f00:	78fa      	ldrb	r2, [r7, #3]
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	4613      	mov	r3, r2
 8005f06:	011b      	lsls	r3, r3, #4
 8005f08:	1a9b      	subs	r3, r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	440b      	add	r3, r1
 8005f0e:	334d      	adds	r3, #77	@ 0x4d
 8005f10:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005f12:	2b09      	cmp	r3, #9
 8005f14:	f040 80a6 	bne.w	8006064 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f18:	78fa      	ldrb	r2, [r7, #3]
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	1a9b      	subs	r3, r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	440b      	add	r3, r1
 8005f26:	334d      	adds	r3, #77	@ 0x4d
 8005f28:	2202      	movs	r2, #2
 8005f2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005f2c:	78fa      	ldrb	r2, [r7, #3]
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	4613      	mov	r3, r2
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	1a9b      	subs	r3, r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	440b      	add	r3, r1
 8005f3a:	3344      	adds	r3, #68	@ 0x44
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	1c59      	adds	r1, r3, #1
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	4613      	mov	r3, r2
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	1a9b      	subs	r3, r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4403      	add	r3, r0
 8005f4c:	3344      	adds	r3, #68	@ 0x44
 8005f4e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005f50:	78fa      	ldrb	r2, [r7, #3]
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	4613      	mov	r3, r2
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	1a9b      	subs	r3, r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	440b      	add	r3, r1
 8005f5e:	3344      	adds	r3, #68	@ 0x44
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d943      	bls.n	8005fee <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005f66:	78fa      	ldrb	r2, [r7, #3]
 8005f68:	6879      	ldr	r1, [r7, #4]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	011b      	lsls	r3, r3, #4
 8005f6e:	1a9b      	subs	r3, r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	440b      	add	r3, r1
 8005f74:	3344      	adds	r3, #68	@ 0x44
 8005f76:	2200      	movs	r2, #0
 8005f78:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8005f7a:	78fa      	ldrb	r2, [r7, #3]
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	011b      	lsls	r3, r3, #4
 8005f82:	1a9b      	subs	r3, r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	440b      	add	r3, r1
 8005f88:	331a      	adds	r3, #26
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d123      	bne.n	8005fd8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005f90:	78fa      	ldrb	r2, [r7, #3]
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	4613      	mov	r3, r2
 8005f96:	011b      	lsls	r3, r3, #4
 8005f98:	1a9b      	subs	r3, r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	331b      	adds	r3, #27
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8005fa4:	78fa      	ldrb	r2, [r7, #3]
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	011b      	lsls	r3, r3, #4
 8005fac:	1a9b      	subs	r3, r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	440b      	add	r3, r1
 8005fb2:	331c      	adds	r3, #28
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	78fa      	ldrb	r2, [r7, #3]
 8005fc8:	0151      	lsls	r1, r2, #5
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	440a      	add	r2, r1
 8005fce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fd6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005fd8:	78fa      	ldrb	r2, [r7, #3]
 8005fda:	6879      	ldr	r1, [r7, #4]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	011b      	lsls	r3, r3, #4
 8005fe0:	1a9b      	subs	r3, r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	440b      	add	r3, r1
 8005fe6:	334c      	adds	r3, #76	@ 0x4c
 8005fe8:	2204      	movs	r2, #4
 8005fea:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005fec:	e229      	b.n	8006442 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005fee:	78fa      	ldrb	r2, [r7, #3]
 8005ff0:	6879      	ldr	r1, [r7, #4]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	011b      	lsls	r3, r3, #4
 8005ff6:	1a9b      	subs	r3, r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	440b      	add	r3, r1
 8005ffc:	334c      	adds	r3, #76	@ 0x4c
 8005ffe:	2202      	movs	r2, #2
 8006000:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006002:	78fa      	ldrb	r2, [r7, #3]
 8006004:	6879      	ldr	r1, [r7, #4]
 8006006:	4613      	mov	r3, r2
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	1a9b      	subs	r3, r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	440b      	add	r3, r1
 8006010:	3326      	adds	r3, #38	@ 0x26
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00b      	beq.n	8006030 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006018:	78fa      	ldrb	r2, [r7, #3]
 800601a:	6879      	ldr	r1, [r7, #4]
 800601c:	4613      	mov	r3, r2
 800601e:	011b      	lsls	r3, r3, #4
 8006020:	1a9b      	subs	r3, r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	440b      	add	r3, r1
 8006026:	3326      	adds	r3, #38	@ 0x26
 8006028:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800602a:	2b02      	cmp	r3, #2
 800602c:	f040 8209 	bne.w	8006442 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	4413      	add	r3, r2
 8006038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006046:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800604e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	4413      	add	r3, r2
 8006058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800605c:	461a      	mov	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006062:	e1ee      	b.n	8006442 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006064:	78fa      	ldrb	r2, [r7, #3]
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	4613      	mov	r3, r2
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	1a9b      	subs	r3, r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	440b      	add	r3, r1
 8006072:	334d      	adds	r3, #77	@ 0x4d
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b05      	cmp	r3, #5
 8006078:	f040 80c8 	bne.w	800620c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800607c:	78fa      	ldrb	r2, [r7, #3]
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	4613      	mov	r3, r2
 8006082:	011b      	lsls	r3, r3, #4
 8006084:	1a9b      	subs	r3, r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	440b      	add	r3, r1
 800608a:	334d      	adds	r3, #77	@ 0x4d
 800608c:	2202      	movs	r2, #2
 800608e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006090:	78fa      	ldrb	r2, [r7, #3]
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	4613      	mov	r3, r2
 8006096:	011b      	lsls	r3, r3, #4
 8006098:	1a9b      	subs	r3, r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	440b      	add	r3, r1
 800609e:	331b      	adds	r3, #27
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	f040 81ce 	bne.w	8006444 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80060a8:	78fa      	ldrb	r2, [r7, #3]
 80060aa:	6879      	ldr	r1, [r7, #4]
 80060ac:	4613      	mov	r3, r2
 80060ae:	011b      	lsls	r3, r3, #4
 80060b0:	1a9b      	subs	r3, r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	440b      	add	r3, r1
 80060b6:	3326      	adds	r3, #38	@ 0x26
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	d16b      	bne.n	8006196 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80060be:	78fa      	ldrb	r2, [r7, #3]
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	4613      	mov	r3, r2
 80060c4:	011b      	lsls	r3, r3, #4
 80060c6:	1a9b      	subs	r3, r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	440b      	add	r3, r1
 80060cc:	3348      	adds	r3, #72	@ 0x48
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	1c59      	adds	r1, r3, #1
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	4613      	mov	r3, r2
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	1a9b      	subs	r3, r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4403      	add	r3, r0
 80060de:	3348      	adds	r3, #72	@ 0x48
 80060e0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80060e2:	78fa      	ldrb	r2, [r7, #3]
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	4613      	mov	r3, r2
 80060e8:	011b      	lsls	r3, r3, #4
 80060ea:	1a9b      	subs	r3, r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	440b      	add	r3, r1
 80060f0:	3348      	adds	r3, #72	@ 0x48
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d943      	bls.n	8006180 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80060f8:	78fa      	ldrb	r2, [r7, #3]
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	4613      	mov	r3, r2
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	1a9b      	subs	r3, r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	440b      	add	r3, r1
 8006106:	3348      	adds	r3, #72	@ 0x48
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800610c:	78fa      	ldrb	r2, [r7, #3]
 800610e:	6879      	ldr	r1, [r7, #4]
 8006110:	4613      	mov	r3, r2
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	1a9b      	subs	r3, r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	440b      	add	r3, r1
 800611a:	331b      	adds	r3, #27
 800611c:	2200      	movs	r2, #0
 800611e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8006120:	78fa      	ldrb	r2, [r7, #3]
 8006122:	6879      	ldr	r1, [r7, #4]
 8006124:	4613      	mov	r3, r2
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	1a9b      	subs	r3, r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	440b      	add	r3, r1
 800612e:	3344      	adds	r3, #68	@ 0x44
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b02      	cmp	r3, #2
 8006134:	d809      	bhi.n	800614a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8006136:	78fa      	ldrb	r2, [r7, #3]
 8006138:	6879      	ldr	r1, [r7, #4]
 800613a:	4613      	mov	r3, r2
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	1a9b      	subs	r3, r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	440b      	add	r3, r1
 8006144:	331c      	adds	r3, #28
 8006146:	2201      	movs	r2, #1
 8006148:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800614a:	78fb      	ldrb	r3, [r7, #3]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	4413      	add	r3, r2
 8006152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	78fa      	ldrb	r2, [r7, #3]
 800615a:	0151      	lsls	r1, r2, #5
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	440a      	add	r2, r1
 8006160:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006164:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006168:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800616a:	78fa      	ldrb	r2, [r7, #3]
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	4613      	mov	r3, r2
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	1a9b      	subs	r3, r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	440b      	add	r3, r1
 8006178:	334c      	adds	r3, #76	@ 0x4c
 800617a:	2204      	movs	r2, #4
 800617c:	701a      	strb	r2, [r3, #0]
 800617e:	e014      	b.n	80061aa <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006180:	78fa      	ldrb	r2, [r7, #3]
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	4613      	mov	r3, r2
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	1a9b      	subs	r3, r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	440b      	add	r3, r1
 800618e:	334c      	adds	r3, #76	@ 0x4c
 8006190:	2202      	movs	r2, #2
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	e009      	b.n	80061aa <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006196:	78fa      	ldrb	r2, [r7, #3]
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	4613      	mov	r3, r2
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	1a9b      	subs	r3, r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	440b      	add	r3, r1
 80061a4:	334c      	adds	r3, #76	@ 0x4c
 80061a6:	2202      	movs	r2, #2
 80061a8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80061aa:	78fa      	ldrb	r2, [r7, #3]
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	4613      	mov	r3, r2
 80061b0:	011b      	lsls	r3, r3, #4
 80061b2:	1a9b      	subs	r3, r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	440b      	add	r3, r1
 80061b8:	3326      	adds	r3, #38	@ 0x26
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00b      	beq.n	80061d8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80061c0:	78fa      	ldrb	r2, [r7, #3]
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	4613      	mov	r3, r2
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	1a9b      	subs	r3, r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	440b      	add	r3, r1
 80061ce:	3326      	adds	r3, #38	@ 0x26
 80061d0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	f040 8136 	bne.w	8006444 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80061d8:	78fb      	ldrb	r3, [r7, #3]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80061ee:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061f6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80061f8:	78fb      	ldrb	r3, [r7, #3]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006204:	461a      	mov	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	e11b      	b.n	8006444 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800620c:	78fa      	ldrb	r2, [r7, #3]
 800620e:	6879      	ldr	r1, [r7, #4]
 8006210:	4613      	mov	r3, r2
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	1a9b      	subs	r3, r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	440b      	add	r3, r1
 800621a:	334d      	adds	r3, #77	@ 0x4d
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b03      	cmp	r3, #3
 8006220:	f040 8081 	bne.w	8006326 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006224:	78fa      	ldrb	r2, [r7, #3]
 8006226:	6879      	ldr	r1, [r7, #4]
 8006228:	4613      	mov	r3, r2
 800622a:	011b      	lsls	r3, r3, #4
 800622c:	1a9b      	subs	r3, r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	440b      	add	r3, r1
 8006232:	334d      	adds	r3, #77	@ 0x4d
 8006234:	2202      	movs	r2, #2
 8006236:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006238:	78fa      	ldrb	r2, [r7, #3]
 800623a:	6879      	ldr	r1, [r7, #4]
 800623c:	4613      	mov	r3, r2
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	1a9b      	subs	r3, r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	440b      	add	r3, r1
 8006246:	331b      	adds	r3, #27
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	2b01      	cmp	r3, #1
 800624c:	f040 80fa 	bne.w	8006444 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006250:	78fa      	ldrb	r2, [r7, #3]
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	4613      	mov	r3, r2
 8006256:	011b      	lsls	r3, r3, #4
 8006258:	1a9b      	subs	r3, r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	440b      	add	r3, r1
 800625e:	334c      	adds	r3, #76	@ 0x4c
 8006260:	2202      	movs	r2, #2
 8006262:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006264:	78fb      	ldrb	r3, [r7, #3]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	4413      	add	r3, r2
 800626c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	78fa      	ldrb	r2, [r7, #3]
 8006274:	0151      	lsls	r1, r2, #5
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	440a      	add	r2, r1
 800627a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800627e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006282:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	4413      	add	r3, r2
 800628c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	78fa      	ldrb	r2, [r7, #3]
 8006294:	0151      	lsls	r1, r2, #5
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	440a      	add	r2, r1
 800629a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800629e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062a2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	78fa      	ldrb	r2, [r7, #3]
 80062b4:	0151      	lsls	r1, r2, #5
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	440a      	add	r2, r1
 80062ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062be:	f023 0320 	bic.w	r3, r3, #32
 80062c2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80062c4:	78fa      	ldrb	r2, [r7, #3]
 80062c6:	6879      	ldr	r1, [r7, #4]
 80062c8:	4613      	mov	r3, r2
 80062ca:	011b      	lsls	r3, r3, #4
 80062cc:	1a9b      	subs	r3, r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	440b      	add	r3, r1
 80062d2:	3326      	adds	r3, #38	@ 0x26
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00b      	beq.n	80062f2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80062da:	78fa      	ldrb	r2, [r7, #3]
 80062dc:	6879      	ldr	r1, [r7, #4]
 80062de:	4613      	mov	r3, r2
 80062e0:	011b      	lsls	r3, r3, #4
 80062e2:	1a9b      	subs	r3, r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	440b      	add	r3, r1
 80062e8:	3326      	adds	r3, #38	@ 0x26
 80062ea:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	f040 80a9 	bne.w	8006444 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80062f2:	78fb      	ldrb	r3, [r7, #3]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006308:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006310:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006312:	78fb      	ldrb	r3, [r7, #3]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	4413      	add	r3, r2
 800631a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800631e:	461a      	mov	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	e08e      	b.n	8006444 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006326:	78fa      	ldrb	r2, [r7, #3]
 8006328:	6879      	ldr	r1, [r7, #4]
 800632a:	4613      	mov	r3, r2
 800632c:	011b      	lsls	r3, r3, #4
 800632e:	1a9b      	subs	r3, r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	440b      	add	r3, r1
 8006334:	334d      	adds	r3, #77	@ 0x4d
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b04      	cmp	r3, #4
 800633a:	d143      	bne.n	80063c4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800633c:	78fa      	ldrb	r2, [r7, #3]
 800633e:	6879      	ldr	r1, [r7, #4]
 8006340:	4613      	mov	r3, r2
 8006342:	011b      	lsls	r3, r3, #4
 8006344:	1a9b      	subs	r3, r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	440b      	add	r3, r1
 800634a:	334d      	adds	r3, #77	@ 0x4d
 800634c:	2202      	movs	r2, #2
 800634e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006350:	78fa      	ldrb	r2, [r7, #3]
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	4613      	mov	r3, r2
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	1a9b      	subs	r3, r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	440b      	add	r3, r1
 800635e:	334c      	adds	r3, #76	@ 0x4c
 8006360:	2202      	movs	r2, #2
 8006362:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006364:	78fa      	ldrb	r2, [r7, #3]
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	4613      	mov	r3, r2
 800636a:	011b      	lsls	r3, r3, #4
 800636c:	1a9b      	subs	r3, r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	440b      	add	r3, r1
 8006372:	3326      	adds	r3, #38	@ 0x26
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800637a:	78fa      	ldrb	r2, [r7, #3]
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	4613      	mov	r3, r2
 8006380:	011b      	lsls	r3, r3, #4
 8006382:	1a9b      	subs	r3, r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	440b      	add	r3, r1
 8006388:	3326      	adds	r3, #38	@ 0x26
 800638a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800638c:	2b02      	cmp	r3, #2
 800638e:	d159      	bne.n	8006444 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	4413      	add	r3, r2
 8006398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80063a6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063ae:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80063b0:	78fb      	ldrb	r3, [r7, #3]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063bc:	461a      	mov	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	e03f      	b.n	8006444 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80063c4:	78fa      	ldrb	r2, [r7, #3]
 80063c6:	6879      	ldr	r1, [r7, #4]
 80063c8:	4613      	mov	r3, r2
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	1a9b      	subs	r3, r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	440b      	add	r3, r1
 80063d2:	334d      	adds	r3, #77	@ 0x4d
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	2b08      	cmp	r3, #8
 80063d8:	d126      	bne.n	8006428 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80063da:	78fa      	ldrb	r2, [r7, #3]
 80063dc:	6879      	ldr	r1, [r7, #4]
 80063de:	4613      	mov	r3, r2
 80063e0:	011b      	lsls	r3, r3, #4
 80063e2:	1a9b      	subs	r3, r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	440b      	add	r3, r1
 80063e8:	334d      	adds	r3, #77	@ 0x4d
 80063ea:	2202      	movs	r2, #2
 80063ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80063ee:	78fa      	ldrb	r2, [r7, #3]
 80063f0:	6879      	ldr	r1, [r7, #4]
 80063f2:	4613      	mov	r3, r2
 80063f4:	011b      	lsls	r3, r3, #4
 80063f6:	1a9b      	subs	r3, r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	440b      	add	r3, r1
 80063fc:	3344      	adds	r3, #68	@ 0x44
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	1c59      	adds	r1, r3, #1
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	4613      	mov	r3, r2
 8006406:	011b      	lsls	r3, r3, #4
 8006408:	1a9b      	subs	r3, r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4403      	add	r3, r0
 800640e:	3344      	adds	r3, #68	@ 0x44
 8006410:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8006412:	78fa      	ldrb	r2, [r7, #3]
 8006414:	6879      	ldr	r1, [r7, #4]
 8006416:	4613      	mov	r3, r2
 8006418:	011b      	lsls	r3, r3, #4
 800641a:	1a9b      	subs	r3, r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	440b      	add	r3, r1
 8006420:	334c      	adds	r3, #76	@ 0x4c
 8006422:	2204      	movs	r2, #4
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	e00d      	b.n	8006444 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8006428:	78fa      	ldrb	r2, [r7, #3]
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	4613      	mov	r3, r2
 800642e:	011b      	lsls	r3, r3, #4
 8006430:	1a9b      	subs	r3, r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	440b      	add	r3, r1
 8006436:	334d      	adds	r3, #77	@ 0x4d
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	2b02      	cmp	r3, #2
 800643c:	f000 8100 	beq.w	8006640 <HCD_HC_IN_IRQHandler+0xcca>
 8006440:	e000      	b.n	8006444 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006442:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006444:	78fa      	ldrb	r2, [r7, #3]
 8006446:	6879      	ldr	r1, [r7, #4]
 8006448:	4613      	mov	r3, r2
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	1a9b      	subs	r3, r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	440b      	add	r3, r1
 8006452:	334c      	adds	r3, #76	@ 0x4c
 8006454:	781a      	ldrb	r2, [r3, #0]
 8006456:	78fb      	ldrb	r3, [r7, #3]
 8006458:	4619      	mov	r1, r3
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f008 fa52 	bl	800e904 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006460:	e0ef      	b.n	8006642 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	78fa      	ldrb	r2, [r7, #3]
 8006468:	4611      	mov	r1, r2
 800646a:	4618      	mov	r0, r3
 800646c:	f004 fc03 	bl	800ac76 <USB_ReadChInterrupts>
 8006470:	4603      	mov	r3, r0
 8006472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006476:	2b40      	cmp	r3, #64	@ 0x40
 8006478:	d12f      	bne.n	80064da <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800647a:	78fb      	ldrb	r3, [r7, #3]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	4413      	add	r3, r2
 8006482:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006486:	461a      	mov	r2, r3
 8006488:	2340      	movs	r3, #64	@ 0x40
 800648a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800648c:	78fa      	ldrb	r2, [r7, #3]
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	4613      	mov	r3, r2
 8006492:	011b      	lsls	r3, r3, #4
 8006494:	1a9b      	subs	r3, r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	440b      	add	r3, r1
 800649a:	334d      	adds	r3, #77	@ 0x4d
 800649c:	2205      	movs	r2, #5
 800649e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80064a0:	78fa      	ldrb	r2, [r7, #3]
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	4613      	mov	r3, r2
 80064a6:	011b      	lsls	r3, r3, #4
 80064a8:	1a9b      	subs	r3, r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	440b      	add	r3, r1
 80064ae:	331a      	adds	r3, #26
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d109      	bne.n	80064ca <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80064b6:	78fa      	ldrb	r2, [r7, #3]
 80064b8:	6879      	ldr	r1, [r7, #4]
 80064ba:	4613      	mov	r3, r2
 80064bc:	011b      	lsls	r3, r3, #4
 80064be:	1a9b      	subs	r3, r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	440b      	add	r3, r1
 80064c4:	3344      	adds	r3, #68	@ 0x44
 80064c6:	2200      	movs	r2, #0
 80064c8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	78fa      	ldrb	r2, [r7, #3]
 80064d0:	4611      	mov	r1, r2
 80064d2:	4618      	mov	r0, r3
 80064d4:	f005 f973 	bl	800b7be <USB_HC_Halt>
 80064d8:	e0b3      	b.n	8006642 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	78fa      	ldrb	r2, [r7, #3]
 80064e0:	4611      	mov	r1, r2
 80064e2:	4618      	mov	r0, r3
 80064e4:	f004 fbc7 	bl	800ac76 <USB_ReadChInterrupts>
 80064e8:	4603      	mov	r3, r0
 80064ea:	f003 0310 	and.w	r3, r3, #16
 80064ee:	2b10      	cmp	r3, #16
 80064f0:	f040 80a7 	bne.w	8006642 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80064f4:	78fa      	ldrb	r2, [r7, #3]
 80064f6:	6879      	ldr	r1, [r7, #4]
 80064f8:	4613      	mov	r3, r2
 80064fa:	011b      	lsls	r3, r3, #4
 80064fc:	1a9b      	subs	r3, r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	440b      	add	r3, r1
 8006502:	3326      	adds	r3, #38	@ 0x26
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2b03      	cmp	r3, #3
 8006508:	d11b      	bne.n	8006542 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800650a:	78fa      	ldrb	r2, [r7, #3]
 800650c:	6879      	ldr	r1, [r7, #4]
 800650e:	4613      	mov	r3, r2
 8006510:	011b      	lsls	r3, r3, #4
 8006512:	1a9b      	subs	r3, r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	440b      	add	r3, r1
 8006518:	3344      	adds	r3, #68	@ 0x44
 800651a:	2200      	movs	r2, #0
 800651c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800651e:	78fa      	ldrb	r2, [r7, #3]
 8006520:	6879      	ldr	r1, [r7, #4]
 8006522:	4613      	mov	r3, r2
 8006524:	011b      	lsls	r3, r3, #4
 8006526:	1a9b      	subs	r3, r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	440b      	add	r3, r1
 800652c:	334d      	adds	r3, #77	@ 0x4d
 800652e:	2204      	movs	r2, #4
 8006530:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	78fa      	ldrb	r2, [r7, #3]
 8006538:	4611      	mov	r1, r2
 800653a:	4618      	mov	r0, r3
 800653c:	f005 f93f 	bl	800b7be <USB_HC_Halt>
 8006540:	e03f      	b.n	80065c2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006542:	78fa      	ldrb	r2, [r7, #3]
 8006544:	6879      	ldr	r1, [r7, #4]
 8006546:	4613      	mov	r3, r2
 8006548:	011b      	lsls	r3, r3, #4
 800654a:	1a9b      	subs	r3, r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	440b      	add	r3, r1
 8006550:	3326      	adds	r3, #38	@ 0x26
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00a      	beq.n	800656e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006558:	78fa      	ldrb	r2, [r7, #3]
 800655a:	6879      	ldr	r1, [r7, #4]
 800655c:	4613      	mov	r3, r2
 800655e:	011b      	lsls	r3, r3, #4
 8006560:	1a9b      	subs	r3, r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	440b      	add	r3, r1
 8006566:	3326      	adds	r3, #38	@ 0x26
 8006568:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800656a:	2b02      	cmp	r3, #2
 800656c:	d129      	bne.n	80065c2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800656e:	78fa      	ldrb	r2, [r7, #3]
 8006570:	6879      	ldr	r1, [r7, #4]
 8006572:	4613      	mov	r3, r2
 8006574:	011b      	lsls	r3, r3, #4
 8006576:	1a9b      	subs	r3, r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	440b      	add	r3, r1
 800657c:	3344      	adds	r3, #68	@ 0x44
 800657e:	2200      	movs	r2, #0
 8006580:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	799b      	ldrb	r3, [r3, #6]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00a      	beq.n	80065a0 <HCD_HC_IN_IRQHandler+0xc2a>
 800658a:	78fa      	ldrb	r2, [r7, #3]
 800658c:	6879      	ldr	r1, [r7, #4]
 800658e:	4613      	mov	r3, r2
 8006590:	011b      	lsls	r3, r3, #4
 8006592:	1a9b      	subs	r3, r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	440b      	add	r3, r1
 8006598:	331b      	adds	r3, #27
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d110      	bne.n	80065c2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80065a0:	78fa      	ldrb	r2, [r7, #3]
 80065a2:	6879      	ldr	r1, [r7, #4]
 80065a4:	4613      	mov	r3, r2
 80065a6:	011b      	lsls	r3, r3, #4
 80065a8:	1a9b      	subs	r3, r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	440b      	add	r3, r1
 80065ae:	334d      	adds	r3, #77	@ 0x4d
 80065b0:	2204      	movs	r2, #4
 80065b2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	78fa      	ldrb	r2, [r7, #3]
 80065ba:	4611      	mov	r1, r2
 80065bc:	4618      	mov	r0, r3
 80065be:	f005 f8fe 	bl	800b7be <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80065c2:	78fa      	ldrb	r2, [r7, #3]
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	4613      	mov	r3, r2
 80065c8:	011b      	lsls	r3, r3, #4
 80065ca:	1a9b      	subs	r3, r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	440b      	add	r3, r1
 80065d0:	331b      	adds	r3, #27
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d129      	bne.n	800662c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80065d8:	78fa      	ldrb	r2, [r7, #3]
 80065da:	6879      	ldr	r1, [r7, #4]
 80065dc:	4613      	mov	r3, r2
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	1a9b      	subs	r3, r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	440b      	add	r3, r1
 80065e6:	331b      	adds	r3, #27
 80065e8:	2200      	movs	r2, #0
 80065ea:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80065ec:	78fb      	ldrb	r3, [r7, #3]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	78fa      	ldrb	r2, [r7, #3]
 80065fc:	0151      	lsls	r1, r2, #5
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	440a      	add	r2, r1
 8006602:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006606:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800660a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800660c:	78fb      	ldrb	r3, [r7, #3]
 800660e:	015a      	lsls	r2, r3, #5
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	4413      	add	r3, r2
 8006614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	78fa      	ldrb	r2, [r7, #3]
 800661c:	0151      	lsls	r1, r2, #5
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	440a      	add	r2, r1
 8006622:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006626:	f043 0320 	orr.w	r3, r3, #32
 800662a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800662c:	78fb      	ldrb	r3, [r7, #3]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	4413      	add	r3, r2
 8006634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006638:	461a      	mov	r2, r3
 800663a:	2310      	movs	r3, #16
 800663c:	6093      	str	r3, [r2, #8]
 800663e:	e000      	b.n	8006642 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8006640:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8006642:	3718      	adds	r7, #24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	78fa      	ldrb	r2, [r7, #3]
 8006664:	4611      	mov	r1, r2
 8006666:	4618      	mov	r0, r3
 8006668:	f004 fb05 	bl	800ac76 <USB_ReadChInterrupts>
 800666c:	4603      	mov	r3, r0
 800666e:	f003 0304 	and.w	r3, r3, #4
 8006672:	2b04      	cmp	r3, #4
 8006674:	d11b      	bne.n	80066ae <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006676:	78fb      	ldrb	r3, [r7, #3]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	4413      	add	r3, r2
 800667e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006682:	461a      	mov	r2, r3
 8006684:	2304      	movs	r3, #4
 8006686:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006688:	78fa      	ldrb	r2, [r7, #3]
 800668a:	6879      	ldr	r1, [r7, #4]
 800668c:	4613      	mov	r3, r2
 800668e:	011b      	lsls	r3, r3, #4
 8006690:	1a9b      	subs	r3, r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	440b      	add	r3, r1
 8006696:	334d      	adds	r3, #77	@ 0x4d
 8006698:	2207      	movs	r2, #7
 800669a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	78fa      	ldrb	r2, [r7, #3]
 80066a2:	4611      	mov	r1, r2
 80066a4:	4618      	mov	r0, r3
 80066a6:	f005 f88a 	bl	800b7be <USB_HC_Halt>
 80066aa:	f000 bc89 	b.w	8006fc0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	78fa      	ldrb	r2, [r7, #3]
 80066b4:	4611      	mov	r1, r2
 80066b6:	4618      	mov	r0, r3
 80066b8:	f004 fadd 	bl	800ac76 <USB_ReadChInterrupts>
 80066bc:	4603      	mov	r3, r0
 80066be:	f003 0320 	and.w	r3, r3, #32
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	f040 8082 	bne.w	80067cc <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066d4:	461a      	mov	r2, r3
 80066d6:	2320      	movs	r3, #32
 80066d8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80066da:	78fa      	ldrb	r2, [r7, #3]
 80066dc:	6879      	ldr	r1, [r7, #4]
 80066de:	4613      	mov	r3, r2
 80066e0:	011b      	lsls	r3, r3, #4
 80066e2:	1a9b      	subs	r3, r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	440b      	add	r3, r1
 80066e8:	3319      	adds	r3, #25
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d124      	bne.n	800673a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80066f0:	78fa      	ldrb	r2, [r7, #3]
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	4613      	mov	r3, r2
 80066f6:	011b      	lsls	r3, r3, #4
 80066f8:	1a9b      	subs	r3, r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	440b      	add	r3, r1
 80066fe:	3319      	adds	r3, #25
 8006700:	2200      	movs	r2, #0
 8006702:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006704:	78fa      	ldrb	r2, [r7, #3]
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	4613      	mov	r3, r2
 800670a:	011b      	lsls	r3, r3, #4
 800670c:	1a9b      	subs	r3, r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	440b      	add	r3, r1
 8006712:	334c      	adds	r3, #76	@ 0x4c
 8006714:	2202      	movs	r2, #2
 8006716:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8006718:	78fa      	ldrb	r2, [r7, #3]
 800671a:	6879      	ldr	r1, [r7, #4]
 800671c:	4613      	mov	r3, r2
 800671e:	011b      	lsls	r3, r3, #4
 8006720:	1a9b      	subs	r3, r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	440b      	add	r3, r1
 8006726:	334d      	adds	r3, #77	@ 0x4d
 8006728:	2203      	movs	r2, #3
 800672a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	78fa      	ldrb	r2, [r7, #3]
 8006732:	4611      	mov	r1, r2
 8006734:	4618      	mov	r0, r3
 8006736:	f005 f842 	bl	800b7be <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800673a:	78fa      	ldrb	r2, [r7, #3]
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	4613      	mov	r3, r2
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	1a9b      	subs	r3, r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	440b      	add	r3, r1
 8006748:	331a      	adds	r3, #26
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b01      	cmp	r3, #1
 800674e:	f040 8437 	bne.w	8006fc0 <HCD_HC_OUT_IRQHandler+0x978>
 8006752:	78fa      	ldrb	r2, [r7, #3]
 8006754:	6879      	ldr	r1, [r7, #4]
 8006756:	4613      	mov	r3, r2
 8006758:	011b      	lsls	r3, r3, #4
 800675a:	1a9b      	subs	r3, r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	440b      	add	r3, r1
 8006760:	331b      	adds	r3, #27
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	f040 842b 	bne.w	8006fc0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800676a:	78fa      	ldrb	r2, [r7, #3]
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	4613      	mov	r3, r2
 8006770:	011b      	lsls	r3, r3, #4
 8006772:	1a9b      	subs	r3, r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	440b      	add	r3, r1
 8006778:	3326      	adds	r3, #38	@ 0x26
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d009      	beq.n	8006794 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8006780:	78fa      	ldrb	r2, [r7, #3]
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	4613      	mov	r3, r2
 8006786:	011b      	lsls	r3, r3, #4
 8006788:	1a9b      	subs	r3, r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	440b      	add	r3, r1
 800678e:	331b      	adds	r3, #27
 8006790:	2201      	movs	r2, #1
 8006792:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8006794:	78fa      	ldrb	r2, [r7, #3]
 8006796:	6879      	ldr	r1, [r7, #4]
 8006798:	4613      	mov	r3, r2
 800679a:	011b      	lsls	r3, r3, #4
 800679c:	1a9b      	subs	r3, r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	440b      	add	r3, r1
 80067a2:	334d      	adds	r3, #77	@ 0x4d
 80067a4:	2203      	movs	r2, #3
 80067a6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	78fa      	ldrb	r2, [r7, #3]
 80067ae:	4611      	mov	r1, r2
 80067b0:	4618      	mov	r0, r3
 80067b2:	f005 f804 	bl	800b7be <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80067b6:	78fa      	ldrb	r2, [r7, #3]
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	4613      	mov	r3, r2
 80067bc:	011b      	lsls	r3, r3, #4
 80067be:	1a9b      	subs	r3, r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	440b      	add	r3, r1
 80067c4:	3344      	adds	r3, #68	@ 0x44
 80067c6:	2200      	movs	r2, #0
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	e3f9      	b.n	8006fc0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	78fa      	ldrb	r2, [r7, #3]
 80067d2:	4611      	mov	r1, r2
 80067d4:	4618      	mov	r0, r3
 80067d6:	f004 fa4e 	bl	800ac76 <USB_ReadChInterrupts>
 80067da:	4603      	mov	r3, r0
 80067dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067e4:	d111      	bne.n	800680a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80067e6:	78fb      	ldrb	r3, [r7, #3]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067f2:	461a      	mov	r2, r3
 80067f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80067f8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	78fa      	ldrb	r2, [r7, #3]
 8006800:	4611      	mov	r1, r2
 8006802:	4618      	mov	r0, r3
 8006804:	f004 ffdb 	bl	800b7be <USB_HC_Halt>
 8006808:	e3da      	b.n	8006fc0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	78fa      	ldrb	r2, [r7, #3]
 8006810:	4611      	mov	r1, r2
 8006812:	4618      	mov	r0, r3
 8006814:	f004 fa2f 	bl	800ac76 <USB_ReadChInterrupts>
 8006818:	4603      	mov	r3, r0
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b01      	cmp	r3, #1
 8006820:	d168      	bne.n	80068f4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006822:	78fa      	ldrb	r2, [r7, #3]
 8006824:	6879      	ldr	r1, [r7, #4]
 8006826:	4613      	mov	r3, r2
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	1a9b      	subs	r3, r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	440b      	add	r3, r1
 8006830:	3344      	adds	r3, #68	@ 0x44
 8006832:	2200      	movs	r2, #0
 8006834:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	78fa      	ldrb	r2, [r7, #3]
 800683c:	4611      	mov	r1, r2
 800683e:	4618      	mov	r0, r3
 8006840:	f004 fa19 	bl	800ac76 <USB_ReadChInterrupts>
 8006844:	4603      	mov	r3, r0
 8006846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800684a:	2b40      	cmp	r3, #64	@ 0x40
 800684c:	d112      	bne.n	8006874 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800684e:	78fa      	ldrb	r2, [r7, #3]
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	4613      	mov	r3, r2
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	1a9b      	subs	r3, r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	440b      	add	r3, r1
 800685c:	3319      	adds	r3, #25
 800685e:	2201      	movs	r2, #1
 8006860:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006862:	78fb      	ldrb	r3, [r7, #3]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	4413      	add	r3, r2
 800686a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800686e:	461a      	mov	r2, r3
 8006870:	2340      	movs	r3, #64	@ 0x40
 8006872:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8006874:	78fa      	ldrb	r2, [r7, #3]
 8006876:	6879      	ldr	r1, [r7, #4]
 8006878:	4613      	mov	r3, r2
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	440b      	add	r3, r1
 8006882:	331b      	adds	r3, #27
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d019      	beq.n	80068be <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800688a:	78fa      	ldrb	r2, [r7, #3]
 800688c:	6879      	ldr	r1, [r7, #4]
 800688e:	4613      	mov	r3, r2
 8006890:	011b      	lsls	r3, r3, #4
 8006892:	1a9b      	subs	r3, r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	440b      	add	r3, r1
 8006898:	331b      	adds	r3, #27
 800689a:	2200      	movs	r2, #0
 800689c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800689e:	78fb      	ldrb	r3, [r7, #3]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	78fa      	ldrb	r2, [r7, #3]
 80068ae:	0151      	lsls	r1, r2, #5
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	440a      	add	r2, r1
 80068b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068bc:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80068be:	78fb      	ldrb	r3, [r7, #3]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068ca:	461a      	mov	r2, r3
 80068cc:	2301      	movs	r3, #1
 80068ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80068d0:	78fa      	ldrb	r2, [r7, #3]
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	4613      	mov	r3, r2
 80068d6:	011b      	lsls	r3, r3, #4
 80068d8:	1a9b      	subs	r3, r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	440b      	add	r3, r1
 80068de:	334d      	adds	r3, #77	@ 0x4d
 80068e0:	2201      	movs	r2, #1
 80068e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	78fa      	ldrb	r2, [r7, #3]
 80068ea:	4611      	mov	r1, r2
 80068ec:	4618      	mov	r0, r3
 80068ee:	f004 ff66 	bl	800b7be <USB_HC_Halt>
 80068f2:	e365      	b.n	8006fc0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	78fa      	ldrb	r2, [r7, #3]
 80068fa:	4611      	mov	r1, r2
 80068fc:	4618      	mov	r0, r3
 80068fe:	f004 f9ba 	bl	800ac76 <USB_ReadChInterrupts>
 8006902:	4603      	mov	r3, r0
 8006904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006908:	2b40      	cmp	r3, #64	@ 0x40
 800690a:	d139      	bne.n	8006980 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800690c:	78fa      	ldrb	r2, [r7, #3]
 800690e:	6879      	ldr	r1, [r7, #4]
 8006910:	4613      	mov	r3, r2
 8006912:	011b      	lsls	r3, r3, #4
 8006914:	1a9b      	subs	r3, r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	440b      	add	r3, r1
 800691a:	334d      	adds	r3, #77	@ 0x4d
 800691c:	2205      	movs	r2, #5
 800691e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8006920:	78fa      	ldrb	r2, [r7, #3]
 8006922:	6879      	ldr	r1, [r7, #4]
 8006924:	4613      	mov	r3, r2
 8006926:	011b      	lsls	r3, r3, #4
 8006928:	1a9b      	subs	r3, r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	440b      	add	r3, r1
 800692e:	331a      	adds	r3, #26
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d109      	bne.n	800694a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8006936:	78fa      	ldrb	r2, [r7, #3]
 8006938:	6879      	ldr	r1, [r7, #4]
 800693a:	4613      	mov	r3, r2
 800693c:	011b      	lsls	r3, r3, #4
 800693e:	1a9b      	subs	r3, r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	440b      	add	r3, r1
 8006944:	3319      	adds	r3, #25
 8006946:	2201      	movs	r2, #1
 8006948:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800694a:	78fa      	ldrb	r2, [r7, #3]
 800694c:	6879      	ldr	r1, [r7, #4]
 800694e:	4613      	mov	r3, r2
 8006950:	011b      	lsls	r3, r3, #4
 8006952:	1a9b      	subs	r3, r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	440b      	add	r3, r1
 8006958:	3344      	adds	r3, #68	@ 0x44
 800695a:	2200      	movs	r2, #0
 800695c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	78fa      	ldrb	r2, [r7, #3]
 8006964:	4611      	mov	r1, r2
 8006966:	4618      	mov	r0, r3
 8006968:	f004 ff29 	bl	800b7be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800696c:	78fb      	ldrb	r3, [r7, #3]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	4413      	add	r3, r2
 8006974:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006978:	461a      	mov	r2, r3
 800697a:	2340      	movs	r3, #64	@ 0x40
 800697c:	6093      	str	r3, [r2, #8]
 800697e:	e31f      	b.n	8006fc0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	78fa      	ldrb	r2, [r7, #3]
 8006986:	4611      	mov	r1, r2
 8006988:	4618      	mov	r0, r3
 800698a:	f004 f974 	bl	800ac76 <USB_ReadChInterrupts>
 800698e:	4603      	mov	r3, r0
 8006990:	f003 0308 	and.w	r3, r3, #8
 8006994:	2b08      	cmp	r3, #8
 8006996:	d11a      	bne.n	80069ce <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069a4:	461a      	mov	r2, r3
 80069a6:	2308      	movs	r3, #8
 80069a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80069aa:	78fa      	ldrb	r2, [r7, #3]
 80069ac:	6879      	ldr	r1, [r7, #4]
 80069ae:	4613      	mov	r3, r2
 80069b0:	011b      	lsls	r3, r3, #4
 80069b2:	1a9b      	subs	r3, r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	440b      	add	r3, r1
 80069b8:	334d      	adds	r3, #77	@ 0x4d
 80069ba:	2206      	movs	r2, #6
 80069bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	78fa      	ldrb	r2, [r7, #3]
 80069c4:	4611      	mov	r1, r2
 80069c6:	4618      	mov	r0, r3
 80069c8:	f004 fef9 	bl	800b7be <USB_HC_Halt>
 80069cc:	e2f8      	b.n	8006fc0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	78fa      	ldrb	r2, [r7, #3]
 80069d4:	4611      	mov	r1, r2
 80069d6:	4618      	mov	r0, r3
 80069d8:	f004 f94d 	bl	800ac76 <USB_ReadChInterrupts>
 80069dc:	4603      	mov	r3, r0
 80069de:	f003 0310 	and.w	r3, r3, #16
 80069e2:	2b10      	cmp	r3, #16
 80069e4:	d144      	bne.n	8006a70 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80069e6:	78fa      	ldrb	r2, [r7, #3]
 80069e8:	6879      	ldr	r1, [r7, #4]
 80069ea:	4613      	mov	r3, r2
 80069ec:	011b      	lsls	r3, r3, #4
 80069ee:	1a9b      	subs	r3, r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	440b      	add	r3, r1
 80069f4:	3344      	adds	r3, #68	@ 0x44
 80069f6:	2200      	movs	r2, #0
 80069f8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80069fa:	78fa      	ldrb	r2, [r7, #3]
 80069fc:	6879      	ldr	r1, [r7, #4]
 80069fe:	4613      	mov	r3, r2
 8006a00:	011b      	lsls	r3, r3, #4
 8006a02:	1a9b      	subs	r3, r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	440b      	add	r3, r1
 8006a08:	334d      	adds	r3, #77	@ 0x4d
 8006a0a:	2204      	movs	r2, #4
 8006a0c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8006a0e:	78fa      	ldrb	r2, [r7, #3]
 8006a10:	6879      	ldr	r1, [r7, #4]
 8006a12:	4613      	mov	r3, r2
 8006a14:	011b      	lsls	r3, r3, #4
 8006a16:	1a9b      	subs	r3, r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	440b      	add	r3, r1
 8006a1c:	3319      	adds	r3, #25
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d114      	bne.n	8006a4e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8006a24:	78fa      	ldrb	r2, [r7, #3]
 8006a26:	6879      	ldr	r1, [r7, #4]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	011b      	lsls	r3, r3, #4
 8006a2c:	1a9b      	subs	r3, r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	440b      	add	r3, r1
 8006a32:	3318      	adds	r3, #24
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d109      	bne.n	8006a4e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8006a3a:	78fa      	ldrb	r2, [r7, #3]
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	011b      	lsls	r3, r3, #4
 8006a42:	1a9b      	subs	r3, r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	440b      	add	r3, r1
 8006a48:	3319      	adds	r3, #25
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	78fa      	ldrb	r2, [r7, #3]
 8006a54:	4611      	mov	r1, r2
 8006a56:	4618      	mov	r0, r3
 8006a58:	f004 feb1 	bl	800b7be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006a5c:	78fb      	ldrb	r3, [r7, #3]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a68:	461a      	mov	r2, r3
 8006a6a:	2310      	movs	r3, #16
 8006a6c:	6093      	str	r3, [r2, #8]
 8006a6e:	e2a7      	b.n	8006fc0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	78fa      	ldrb	r2, [r7, #3]
 8006a76:	4611      	mov	r1, r2
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f004 f8fc 	bl	800ac76 <USB_ReadChInterrupts>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a84:	2b80      	cmp	r3, #128	@ 0x80
 8006a86:	f040 8083 	bne.w	8006b90 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	799b      	ldrb	r3, [r3, #6]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d111      	bne.n	8006ab6 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8006a92:	78fa      	ldrb	r2, [r7, #3]
 8006a94:	6879      	ldr	r1, [r7, #4]
 8006a96:	4613      	mov	r3, r2
 8006a98:	011b      	lsls	r3, r3, #4
 8006a9a:	1a9b      	subs	r3, r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	440b      	add	r3, r1
 8006aa0:	334d      	adds	r3, #77	@ 0x4d
 8006aa2:	2207      	movs	r2, #7
 8006aa4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	78fa      	ldrb	r2, [r7, #3]
 8006aac:	4611      	mov	r1, r2
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f004 fe85 	bl	800b7be <USB_HC_Halt>
 8006ab4:	e062      	b.n	8006b7c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8006ab6:	78fa      	ldrb	r2, [r7, #3]
 8006ab8:	6879      	ldr	r1, [r7, #4]
 8006aba:	4613      	mov	r3, r2
 8006abc:	011b      	lsls	r3, r3, #4
 8006abe:	1a9b      	subs	r3, r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	440b      	add	r3, r1
 8006ac4:	3344      	adds	r3, #68	@ 0x44
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	1c59      	adds	r1, r3, #1
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	4613      	mov	r3, r2
 8006ace:	011b      	lsls	r3, r3, #4
 8006ad0:	1a9b      	subs	r3, r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4403      	add	r3, r0
 8006ad6:	3344      	adds	r3, #68	@ 0x44
 8006ad8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006ada:	78fa      	ldrb	r2, [r7, #3]
 8006adc:	6879      	ldr	r1, [r7, #4]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	011b      	lsls	r3, r3, #4
 8006ae2:	1a9b      	subs	r3, r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	440b      	add	r3, r1
 8006ae8:	3344      	adds	r3, #68	@ 0x44
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d922      	bls.n	8006b36 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006af0:	78fa      	ldrb	r2, [r7, #3]
 8006af2:	6879      	ldr	r1, [r7, #4]
 8006af4:	4613      	mov	r3, r2
 8006af6:	011b      	lsls	r3, r3, #4
 8006af8:	1a9b      	subs	r3, r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	440b      	add	r3, r1
 8006afe:	3344      	adds	r3, #68	@ 0x44
 8006b00:	2200      	movs	r2, #0
 8006b02:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006b04:	78fa      	ldrb	r2, [r7, #3]
 8006b06:	6879      	ldr	r1, [r7, #4]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	011b      	lsls	r3, r3, #4
 8006b0c:	1a9b      	subs	r3, r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	440b      	add	r3, r1
 8006b12:	334c      	adds	r3, #76	@ 0x4c
 8006b14:	2204      	movs	r2, #4
 8006b16:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006b18:	78fa      	ldrb	r2, [r7, #3]
 8006b1a:	6879      	ldr	r1, [r7, #4]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	011b      	lsls	r3, r3, #4
 8006b20:	1a9b      	subs	r3, r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	440b      	add	r3, r1
 8006b26:	334c      	adds	r3, #76	@ 0x4c
 8006b28:	781a      	ldrb	r2, [r3, #0]
 8006b2a:	78fb      	ldrb	r3, [r7, #3]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f007 fee8 	bl	800e904 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006b34:	e022      	b.n	8006b7c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006b36:	78fa      	ldrb	r2, [r7, #3]
 8006b38:	6879      	ldr	r1, [r7, #4]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	011b      	lsls	r3, r3, #4
 8006b3e:	1a9b      	subs	r3, r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	440b      	add	r3, r1
 8006b44:	334c      	adds	r3, #76	@ 0x4c
 8006b46:	2202      	movs	r2, #2
 8006b48:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006b4a:	78fb      	ldrb	r3, [r7, #3]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006b60:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b68:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006b6a:	78fb      	ldrb	r3, [r7, #3]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b76:	461a      	mov	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006b7c:	78fb      	ldrb	r3, [r7, #3]
 8006b7e:	015a      	lsls	r2, r3, #5
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b88:	461a      	mov	r2, r3
 8006b8a:	2380      	movs	r3, #128	@ 0x80
 8006b8c:	6093      	str	r3, [r2, #8]
 8006b8e:	e217      	b.n	8006fc0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	78fa      	ldrb	r2, [r7, #3]
 8006b96:	4611      	mov	r1, r2
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f004 f86c 	bl	800ac76 <USB_ReadChInterrupts>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ba4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ba8:	d11b      	bne.n	8006be2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006baa:	78fa      	ldrb	r2, [r7, #3]
 8006bac:	6879      	ldr	r1, [r7, #4]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	011b      	lsls	r3, r3, #4
 8006bb2:	1a9b      	subs	r3, r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	440b      	add	r3, r1
 8006bb8:	334d      	adds	r3, #77	@ 0x4d
 8006bba:	2209      	movs	r2, #9
 8006bbc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	78fa      	ldrb	r2, [r7, #3]
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f004 fdf9 	bl	800b7be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006bcc:	78fb      	ldrb	r3, [r7, #3]
 8006bce:	015a      	lsls	r2, r3, #5
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bd8:	461a      	mov	r2, r3
 8006bda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006bde:	6093      	str	r3, [r2, #8]
 8006be0:	e1ee      	b.n	8006fc0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	78fa      	ldrb	r2, [r7, #3]
 8006be8:	4611      	mov	r1, r2
 8006bea:	4618      	mov	r0, r3
 8006bec:	f004 f843 	bl	800ac76 <USB_ReadChInterrupts>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	f040 81df 	bne.w	8006fba <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006bfc:	78fb      	ldrb	r3, [r7, #3]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c08:	461a      	mov	r2, r3
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006c0e:	78fa      	ldrb	r2, [r7, #3]
 8006c10:	6879      	ldr	r1, [r7, #4]
 8006c12:	4613      	mov	r3, r2
 8006c14:	011b      	lsls	r3, r3, #4
 8006c16:	1a9b      	subs	r3, r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	440b      	add	r3, r1
 8006c1c:	334d      	adds	r3, #77	@ 0x4d
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	f040 8093 	bne.w	8006d4c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006c26:	78fa      	ldrb	r2, [r7, #3]
 8006c28:	6879      	ldr	r1, [r7, #4]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	011b      	lsls	r3, r3, #4
 8006c2e:	1a9b      	subs	r3, r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	440b      	add	r3, r1
 8006c34:	334d      	adds	r3, #77	@ 0x4d
 8006c36:	2202      	movs	r2, #2
 8006c38:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006c3a:	78fa      	ldrb	r2, [r7, #3]
 8006c3c:	6879      	ldr	r1, [r7, #4]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	011b      	lsls	r3, r3, #4
 8006c42:	1a9b      	subs	r3, r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	440b      	add	r3, r1
 8006c48:	334c      	adds	r3, #76	@ 0x4c
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006c4e:	78fa      	ldrb	r2, [r7, #3]
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	4613      	mov	r3, r2
 8006c54:	011b      	lsls	r3, r3, #4
 8006c56:	1a9b      	subs	r3, r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	440b      	add	r3, r1
 8006c5c:	3326      	adds	r3, #38	@ 0x26
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d00b      	beq.n	8006c7c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8006c64:	78fa      	ldrb	r2, [r7, #3]
 8006c66:	6879      	ldr	r1, [r7, #4]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	011b      	lsls	r3, r3, #4
 8006c6c:	1a9b      	subs	r3, r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	440b      	add	r3, r1
 8006c72:	3326      	adds	r3, #38	@ 0x26
 8006c74:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006c76:	2b03      	cmp	r3, #3
 8006c78:	f040 8190 	bne.w	8006f9c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	799b      	ldrb	r3, [r3, #6]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d115      	bne.n	8006cb0 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8006c84:	78fa      	ldrb	r2, [r7, #3]
 8006c86:	6879      	ldr	r1, [r7, #4]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	011b      	lsls	r3, r3, #4
 8006c8c:	1a9b      	subs	r3, r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	440b      	add	r3, r1
 8006c92:	333d      	adds	r3, #61	@ 0x3d
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	78fa      	ldrb	r2, [r7, #3]
 8006c98:	f083 0301 	eor.w	r3, r3, #1
 8006c9c:	b2d8      	uxtb	r0, r3
 8006c9e:	6879      	ldr	r1, [r7, #4]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	011b      	lsls	r3, r3, #4
 8006ca4:	1a9b      	subs	r3, r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	440b      	add	r3, r1
 8006caa:	333d      	adds	r3, #61	@ 0x3d
 8006cac:	4602      	mov	r2, r0
 8006cae:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	799b      	ldrb	r3, [r3, #6]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	f040 8171 	bne.w	8006f9c <HCD_HC_OUT_IRQHandler+0x954>
 8006cba:	78fa      	ldrb	r2, [r7, #3]
 8006cbc:	6879      	ldr	r1, [r7, #4]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	011b      	lsls	r3, r3, #4
 8006cc2:	1a9b      	subs	r3, r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	440b      	add	r3, r1
 8006cc8:	3334      	adds	r3, #52	@ 0x34
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 8165 	beq.w	8006f9c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8006cd2:	78fa      	ldrb	r2, [r7, #3]
 8006cd4:	6879      	ldr	r1, [r7, #4]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	011b      	lsls	r3, r3, #4
 8006cda:	1a9b      	subs	r3, r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	440b      	add	r3, r1
 8006ce0:	3334      	adds	r3, #52	@ 0x34
 8006ce2:	6819      	ldr	r1, [r3, #0]
 8006ce4:	78fa      	ldrb	r2, [r7, #3]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	011b      	lsls	r3, r3, #4
 8006cec:	1a9b      	subs	r3, r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4403      	add	r3, r0
 8006cf2:	3328      	adds	r3, #40	@ 0x28
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	440b      	add	r3, r1
 8006cf8:	1e59      	subs	r1, r3, #1
 8006cfa:	78fa      	ldrb	r2, [r7, #3]
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	011b      	lsls	r3, r3, #4
 8006d02:	1a9b      	subs	r3, r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4403      	add	r3, r0
 8006d08:	3328      	adds	r3, #40	@ 0x28
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d10:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 813f 	beq.w	8006f9c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006d1e:	78fa      	ldrb	r2, [r7, #3]
 8006d20:	6879      	ldr	r1, [r7, #4]
 8006d22:	4613      	mov	r3, r2
 8006d24:	011b      	lsls	r3, r3, #4
 8006d26:	1a9b      	subs	r3, r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	440b      	add	r3, r1
 8006d2c:	333d      	adds	r3, #61	@ 0x3d
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	78fa      	ldrb	r2, [r7, #3]
 8006d32:	f083 0301 	eor.w	r3, r3, #1
 8006d36:	b2d8      	uxtb	r0, r3
 8006d38:	6879      	ldr	r1, [r7, #4]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	011b      	lsls	r3, r3, #4
 8006d3e:	1a9b      	subs	r3, r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	440b      	add	r3, r1
 8006d44:	333d      	adds	r3, #61	@ 0x3d
 8006d46:	4602      	mov	r2, r0
 8006d48:	701a      	strb	r2, [r3, #0]
 8006d4a:	e127      	b.n	8006f9c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006d4c:	78fa      	ldrb	r2, [r7, #3]
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	4613      	mov	r3, r2
 8006d52:	011b      	lsls	r3, r3, #4
 8006d54:	1a9b      	subs	r3, r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	440b      	add	r3, r1
 8006d5a:	334d      	adds	r3, #77	@ 0x4d
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d120      	bne.n	8006da4 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006d62:	78fa      	ldrb	r2, [r7, #3]
 8006d64:	6879      	ldr	r1, [r7, #4]
 8006d66:	4613      	mov	r3, r2
 8006d68:	011b      	lsls	r3, r3, #4
 8006d6a:	1a9b      	subs	r3, r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	440b      	add	r3, r1
 8006d70:	334d      	adds	r3, #77	@ 0x4d
 8006d72:	2202      	movs	r2, #2
 8006d74:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006d76:	78fa      	ldrb	r2, [r7, #3]
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	011b      	lsls	r3, r3, #4
 8006d7e:	1a9b      	subs	r3, r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	440b      	add	r3, r1
 8006d84:	331b      	adds	r3, #27
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	f040 8107 	bne.w	8006f9c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006d8e:	78fa      	ldrb	r2, [r7, #3]
 8006d90:	6879      	ldr	r1, [r7, #4]
 8006d92:	4613      	mov	r3, r2
 8006d94:	011b      	lsls	r3, r3, #4
 8006d96:	1a9b      	subs	r3, r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	440b      	add	r3, r1
 8006d9c:	334c      	adds	r3, #76	@ 0x4c
 8006d9e:	2202      	movs	r2, #2
 8006da0:	701a      	strb	r2, [r3, #0]
 8006da2:	e0fb      	b.n	8006f9c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006da4:	78fa      	ldrb	r2, [r7, #3]
 8006da6:	6879      	ldr	r1, [r7, #4]
 8006da8:	4613      	mov	r3, r2
 8006daa:	011b      	lsls	r3, r3, #4
 8006dac:	1a9b      	subs	r3, r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	440b      	add	r3, r1
 8006db2:	334d      	adds	r3, #77	@ 0x4d
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	d13a      	bne.n	8006e30 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006dba:	78fa      	ldrb	r2, [r7, #3]
 8006dbc:	6879      	ldr	r1, [r7, #4]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	011b      	lsls	r3, r3, #4
 8006dc2:	1a9b      	subs	r3, r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	440b      	add	r3, r1
 8006dc8:	334d      	adds	r3, #77	@ 0x4d
 8006dca:	2202      	movs	r2, #2
 8006dcc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006dce:	78fa      	ldrb	r2, [r7, #3]
 8006dd0:	6879      	ldr	r1, [r7, #4]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	011b      	lsls	r3, r3, #4
 8006dd6:	1a9b      	subs	r3, r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	440b      	add	r3, r1
 8006ddc:	334c      	adds	r3, #76	@ 0x4c
 8006dde:	2202      	movs	r2, #2
 8006de0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006de2:	78fa      	ldrb	r2, [r7, #3]
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	4613      	mov	r3, r2
 8006de8:	011b      	lsls	r3, r3, #4
 8006dea:	1a9b      	subs	r3, r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	440b      	add	r3, r1
 8006df0:	331b      	adds	r3, #27
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	f040 80d1 	bne.w	8006f9c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8006dfa:	78fa      	ldrb	r2, [r7, #3]
 8006dfc:	6879      	ldr	r1, [r7, #4]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	011b      	lsls	r3, r3, #4
 8006e02:	1a9b      	subs	r3, r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	440b      	add	r3, r1
 8006e08:	331b      	adds	r3, #27
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006e0e:	78fb      	ldrb	r3, [r7, #3]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	78fa      	ldrb	r2, [r7, #3]
 8006e1e:	0151      	lsls	r1, r2, #5
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	440a      	add	r2, r1
 8006e24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e2c:	6053      	str	r3, [r2, #4]
 8006e2e:	e0b5      	b.n	8006f9c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006e30:	78fa      	ldrb	r2, [r7, #3]
 8006e32:	6879      	ldr	r1, [r7, #4]
 8006e34:	4613      	mov	r3, r2
 8006e36:	011b      	lsls	r3, r3, #4
 8006e38:	1a9b      	subs	r3, r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	440b      	add	r3, r1
 8006e3e:	334d      	adds	r3, #77	@ 0x4d
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	2b05      	cmp	r3, #5
 8006e44:	d114      	bne.n	8006e70 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006e46:	78fa      	ldrb	r2, [r7, #3]
 8006e48:	6879      	ldr	r1, [r7, #4]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	011b      	lsls	r3, r3, #4
 8006e4e:	1a9b      	subs	r3, r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	440b      	add	r3, r1
 8006e54:	334d      	adds	r3, #77	@ 0x4d
 8006e56:	2202      	movs	r2, #2
 8006e58:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8006e5a:	78fa      	ldrb	r2, [r7, #3]
 8006e5c:	6879      	ldr	r1, [r7, #4]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	011b      	lsls	r3, r3, #4
 8006e62:	1a9b      	subs	r3, r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	440b      	add	r3, r1
 8006e68:	334c      	adds	r3, #76	@ 0x4c
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	701a      	strb	r2, [r3, #0]
 8006e6e:	e095      	b.n	8006f9c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006e70:	78fa      	ldrb	r2, [r7, #3]
 8006e72:	6879      	ldr	r1, [r7, #4]
 8006e74:	4613      	mov	r3, r2
 8006e76:	011b      	lsls	r3, r3, #4
 8006e78:	1a9b      	subs	r3, r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	440b      	add	r3, r1
 8006e7e:	334d      	adds	r3, #77	@ 0x4d
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	2b06      	cmp	r3, #6
 8006e84:	d114      	bne.n	8006eb0 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006e86:	78fa      	ldrb	r2, [r7, #3]
 8006e88:	6879      	ldr	r1, [r7, #4]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	011b      	lsls	r3, r3, #4
 8006e8e:	1a9b      	subs	r3, r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	440b      	add	r3, r1
 8006e94:	334d      	adds	r3, #77	@ 0x4d
 8006e96:	2202      	movs	r2, #2
 8006e98:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8006e9a:	78fa      	ldrb	r2, [r7, #3]
 8006e9c:	6879      	ldr	r1, [r7, #4]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	011b      	lsls	r3, r3, #4
 8006ea2:	1a9b      	subs	r3, r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	440b      	add	r3, r1
 8006ea8:	334c      	adds	r3, #76	@ 0x4c
 8006eaa:	2205      	movs	r2, #5
 8006eac:	701a      	strb	r2, [r3, #0]
 8006eae:	e075      	b.n	8006f9c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006eb0:	78fa      	ldrb	r2, [r7, #3]
 8006eb2:	6879      	ldr	r1, [r7, #4]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	011b      	lsls	r3, r3, #4
 8006eb8:	1a9b      	subs	r3, r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	440b      	add	r3, r1
 8006ebe:	334d      	adds	r3, #77	@ 0x4d
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	2b07      	cmp	r3, #7
 8006ec4:	d00a      	beq.n	8006edc <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006ec6:	78fa      	ldrb	r2, [r7, #3]
 8006ec8:	6879      	ldr	r1, [r7, #4]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	011b      	lsls	r3, r3, #4
 8006ece:	1a9b      	subs	r3, r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	440b      	add	r3, r1
 8006ed4:	334d      	adds	r3, #77	@ 0x4d
 8006ed6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006ed8:	2b09      	cmp	r3, #9
 8006eda:	d170      	bne.n	8006fbe <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006edc:	78fa      	ldrb	r2, [r7, #3]
 8006ede:	6879      	ldr	r1, [r7, #4]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	011b      	lsls	r3, r3, #4
 8006ee4:	1a9b      	subs	r3, r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	440b      	add	r3, r1
 8006eea:	334d      	adds	r3, #77	@ 0x4d
 8006eec:	2202      	movs	r2, #2
 8006eee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006ef0:	78fa      	ldrb	r2, [r7, #3]
 8006ef2:	6879      	ldr	r1, [r7, #4]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	011b      	lsls	r3, r3, #4
 8006ef8:	1a9b      	subs	r3, r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	440b      	add	r3, r1
 8006efe:	3344      	adds	r3, #68	@ 0x44
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	1c59      	adds	r1, r3, #1
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	4613      	mov	r3, r2
 8006f08:	011b      	lsls	r3, r3, #4
 8006f0a:	1a9b      	subs	r3, r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4403      	add	r3, r0
 8006f10:	3344      	adds	r3, #68	@ 0x44
 8006f12:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006f14:	78fa      	ldrb	r2, [r7, #3]
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	011b      	lsls	r3, r3, #4
 8006f1c:	1a9b      	subs	r3, r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	440b      	add	r3, r1
 8006f22:	3344      	adds	r3, #68	@ 0x44
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d914      	bls.n	8006f54 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006f2a:	78fa      	ldrb	r2, [r7, #3]
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	011b      	lsls	r3, r3, #4
 8006f32:	1a9b      	subs	r3, r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	440b      	add	r3, r1
 8006f38:	3344      	adds	r3, #68	@ 0x44
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006f3e:	78fa      	ldrb	r2, [r7, #3]
 8006f40:	6879      	ldr	r1, [r7, #4]
 8006f42:	4613      	mov	r3, r2
 8006f44:	011b      	lsls	r3, r3, #4
 8006f46:	1a9b      	subs	r3, r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	440b      	add	r3, r1
 8006f4c:	334c      	adds	r3, #76	@ 0x4c
 8006f4e:	2204      	movs	r2, #4
 8006f50:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006f52:	e022      	b.n	8006f9a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006f54:	78fa      	ldrb	r2, [r7, #3]
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	011b      	lsls	r3, r3, #4
 8006f5c:	1a9b      	subs	r3, r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	440b      	add	r3, r1
 8006f62:	334c      	adds	r3, #76	@ 0x4c
 8006f64:	2202      	movs	r2, #2
 8006f66:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006f68:	78fb      	ldrb	r3, [r7, #3]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f7e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f86:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006f88:	78fb      	ldrb	r3, [r7, #3]
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f94:	461a      	mov	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006f9a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006f9c:	78fa      	ldrb	r2, [r7, #3]
 8006f9e:	6879      	ldr	r1, [r7, #4]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	011b      	lsls	r3, r3, #4
 8006fa4:	1a9b      	subs	r3, r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	440b      	add	r3, r1
 8006faa:	334c      	adds	r3, #76	@ 0x4c
 8006fac:	781a      	ldrb	r2, [r3, #0]
 8006fae:	78fb      	ldrb	r3, [r7, #3]
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f007 fca6 	bl	800e904 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006fb8:	e002      	b.n	8006fc0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8006fba:	bf00      	nop
 8006fbc:	e000      	b.n	8006fc0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8006fbe:	bf00      	nop
  }
}
 8006fc0:	3718      	adds	r7, #24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b08a      	sub	sp, #40	@ 0x28
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	f003 030f 	and.w	r3, r3, #15
 8006fe6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	0c5b      	lsrs	r3, r3, #17
 8006fec:	f003 030f 	and.w	r3, r3, #15
 8006ff0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	091b      	lsrs	r3, r3, #4
 8006ff6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ffa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d004      	beq.n	800700c <HCD_RXQLVL_IRQHandler+0x46>
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2b05      	cmp	r3, #5
 8007006:	f000 80b6 	beq.w	8007176 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800700a:	e0b7      	b.n	800717c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 80b3 	beq.w	800717a <HCD_RXQLVL_IRQHandler+0x1b4>
 8007014:	6879      	ldr	r1, [r7, #4]
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	4613      	mov	r3, r2
 800701a:	011b      	lsls	r3, r3, #4
 800701c:	1a9b      	subs	r3, r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	440b      	add	r3, r1
 8007022:	332c      	adds	r3, #44	@ 0x2c
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 80a7 	beq.w	800717a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800702c:	6879      	ldr	r1, [r7, #4]
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	4613      	mov	r3, r2
 8007032:	011b      	lsls	r3, r3, #4
 8007034:	1a9b      	subs	r3, r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	440b      	add	r3, r1
 800703a:	3338      	adds	r3, #56	@ 0x38
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	18d1      	adds	r1, r2, r3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	69ba      	ldr	r2, [r7, #24]
 8007046:	4613      	mov	r3, r2
 8007048:	011b      	lsls	r3, r3, #4
 800704a:	1a9b      	subs	r3, r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4403      	add	r3, r0
 8007050:	3334      	adds	r3, #52	@ 0x34
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4299      	cmp	r1, r3
 8007056:	f200 8083 	bhi.w	8007160 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6818      	ldr	r0, [r3, #0]
 800705e:	6879      	ldr	r1, [r7, #4]
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	4613      	mov	r3, r2
 8007064:	011b      	lsls	r3, r3, #4
 8007066:	1a9b      	subs	r3, r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	440b      	add	r3, r1
 800706c:	332c      	adds	r3, #44	@ 0x2c
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	b292      	uxth	r2, r2
 8007074:	4619      	mov	r1, r3
 8007076:	f003 fd93 	bl	800aba0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800707a:	6879      	ldr	r1, [r7, #4]
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	4613      	mov	r3, r2
 8007080:	011b      	lsls	r3, r3, #4
 8007082:	1a9b      	subs	r3, r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	440b      	add	r3, r1
 8007088:	332c      	adds	r3, #44	@ 0x2c
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	18d1      	adds	r1, r2, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	69ba      	ldr	r2, [r7, #24]
 8007094:	4613      	mov	r3, r2
 8007096:	011b      	lsls	r3, r3, #4
 8007098:	1a9b      	subs	r3, r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4403      	add	r3, r0
 800709e:	332c      	adds	r3, #44	@ 0x2c
 80070a0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	4613      	mov	r3, r2
 80070a8:	011b      	lsls	r3, r3, #4
 80070aa:	1a9b      	subs	r3, r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	440b      	add	r3, r1
 80070b0:	3338      	adds	r3, #56	@ 0x38
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	18d1      	adds	r1, r2, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	4613      	mov	r3, r2
 80070be:	011b      	lsls	r3, r3, #4
 80070c0:	1a9b      	subs	r3, r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4403      	add	r3, r0
 80070c6:	3338      	adds	r3, #56	@ 0x38
 80070c8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	015a      	lsls	r2, r3, #5
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	0cdb      	lsrs	r3, r3, #19
 80070da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070de:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80070e0:	6879      	ldr	r1, [r7, #4]
 80070e2:	69ba      	ldr	r2, [r7, #24]
 80070e4:	4613      	mov	r3, r2
 80070e6:	011b      	lsls	r3, r3, #4
 80070e8:	1a9b      	subs	r3, r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	440b      	add	r3, r1
 80070ee:	3328      	adds	r3, #40	@ 0x28
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	461a      	mov	r2, r3
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d13f      	bne.n	800717a <HCD_RXQLVL_IRQHandler+0x1b4>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d03c      	beq.n	800717a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	4413      	add	r3, r2
 8007108:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007116:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800711e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	6a3b      	ldr	r3, [r7, #32]
 8007126:	4413      	add	r3, r2
 8007128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800712c:	461a      	mov	r2, r3
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8007132:	6879      	ldr	r1, [r7, #4]
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	4613      	mov	r3, r2
 8007138:	011b      	lsls	r3, r3, #4
 800713a:	1a9b      	subs	r3, r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	440b      	add	r3, r1
 8007140:	333c      	adds	r3, #60	@ 0x3c
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	f083 0301 	eor.w	r3, r3, #1
 8007148:	b2d8      	uxtb	r0, r3
 800714a:	6879      	ldr	r1, [r7, #4]
 800714c:	69ba      	ldr	r2, [r7, #24]
 800714e:	4613      	mov	r3, r2
 8007150:	011b      	lsls	r3, r3, #4
 8007152:	1a9b      	subs	r3, r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	440b      	add	r3, r1
 8007158:	333c      	adds	r3, #60	@ 0x3c
 800715a:	4602      	mov	r2, r0
 800715c:	701a      	strb	r2, [r3, #0]
      break;
 800715e:	e00c      	b.n	800717a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8007160:	6879      	ldr	r1, [r7, #4]
 8007162:	69ba      	ldr	r2, [r7, #24]
 8007164:	4613      	mov	r3, r2
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	1a9b      	subs	r3, r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	440b      	add	r3, r1
 800716e:	334c      	adds	r3, #76	@ 0x4c
 8007170:	2204      	movs	r2, #4
 8007172:	701a      	strb	r2, [r3, #0]
      break;
 8007174:	e001      	b.n	800717a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8007176:	bf00      	nop
 8007178:	e000      	b.n	800717c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800717a:	bf00      	nop
  }
}
 800717c:	bf00      	nop
 800717e:	3728      	adds	r7, #40	@ 0x28
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80071b0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f003 0302 	and.w	r3, r3, #2
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d10b      	bne.n	80071d4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d102      	bne.n	80071cc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f007 fb80 	bl	800e8cc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	f043 0302 	orr.w	r3, r3, #2
 80071d2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f003 0308 	and.w	r3, r3, #8
 80071da:	2b08      	cmp	r3, #8
 80071dc:	d132      	bne.n	8007244 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	f043 0308 	orr.w	r3, r3, #8
 80071e4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f003 0304 	and.w	r3, r3, #4
 80071ec:	2b04      	cmp	r3, #4
 80071ee:	d126      	bne.n	800723e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	7a5b      	ldrb	r3, [r3, #9]
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d113      	bne.n	8007220 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80071fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007202:	d106      	bne.n	8007212 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2102      	movs	r1, #2
 800720a:	4618      	mov	r0, r3
 800720c:	f003 fe58 	bl	800aec0 <USB_InitFSLSPClkSel>
 8007210:	e011      	b.n	8007236 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2101      	movs	r1, #1
 8007218:	4618      	mov	r0, r3
 800721a:	f003 fe51 	bl	800aec0 <USB_InitFSLSPClkSel>
 800721e:	e00a      	b.n	8007236 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	79db      	ldrb	r3, [r3, #7]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d106      	bne.n	8007236 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800722e:	461a      	mov	r2, r3
 8007230:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8007234:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f007 fb72 	bl	800e920 <HAL_HCD_PortEnabled_Callback>
 800723c:	e002      	b.n	8007244 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f007 fb7c 	bl	800e93c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f003 0320 	and.w	r3, r3, #32
 800724a:	2b20      	cmp	r3, #32
 800724c:	d103      	bne.n	8007256 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f043 0320 	orr.w	r3, r3, #32
 8007254:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800725c:	461a      	mov	r2, r3
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	6013      	str	r3, [r2, #0]
}
 8007262:	bf00      	nop
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
	...

0800726c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e267      	b.n	800774e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d075      	beq.n	8007376 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800728a:	4b88      	ldr	r3, [pc, #544]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f003 030c 	and.w	r3, r3, #12
 8007292:	2b04      	cmp	r3, #4
 8007294:	d00c      	beq.n	80072b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007296:	4b85      	ldr	r3, [pc, #532]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800729e:	2b08      	cmp	r3, #8
 80072a0:	d112      	bne.n	80072c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072a2:	4b82      	ldr	r3, [pc, #520]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072ae:	d10b      	bne.n	80072c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072b0:	4b7e      	ldr	r3, [pc, #504]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d05b      	beq.n	8007374 <HAL_RCC_OscConfig+0x108>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d157      	bne.n	8007374 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e242      	b.n	800774e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072d0:	d106      	bne.n	80072e0 <HAL_RCC_OscConfig+0x74>
 80072d2:	4b76      	ldr	r3, [pc, #472]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a75      	ldr	r2, [pc, #468]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 80072d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	e01d      	b.n	800731c <HAL_RCC_OscConfig+0xb0>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072e8:	d10c      	bne.n	8007304 <HAL_RCC_OscConfig+0x98>
 80072ea:	4b70      	ldr	r3, [pc, #448]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a6f      	ldr	r2, [pc, #444]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 80072f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80072f4:	6013      	str	r3, [r2, #0]
 80072f6:	4b6d      	ldr	r3, [pc, #436]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a6c      	ldr	r2, [pc, #432]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 80072fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007300:	6013      	str	r3, [r2, #0]
 8007302:	e00b      	b.n	800731c <HAL_RCC_OscConfig+0xb0>
 8007304:	4b69      	ldr	r3, [pc, #420]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a68      	ldr	r2, [pc, #416]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 800730a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800730e:	6013      	str	r3, [r2, #0]
 8007310:	4b66      	ldr	r3, [pc, #408]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a65      	ldr	r2, [pc, #404]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 8007316:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800731a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d013      	beq.n	800734c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007324:	f7fd f890 	bl	8004448 <HAL_GetTick>
 8007328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800732a:	e008      	b.n	800733e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800732c:	f7fd f88c 	bl	8004448 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	2b64      	cmp	r3, #100	@ 0x64
 8007338:	d901      	bls.n	800733e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e207      	b.n	800774e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800733e:	4b5b      	ldr	r3, [pc, #364]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d0f0      	beq.n	800732c <HAL_RCC_OscConfig+0xc0>
 800734a:	e014      	b.n	8007376 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800734c:	f7fd f87c 	bl	8004448 <HAL_GetTick>
 8007350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007352:	e008      	b.n	8007366 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007354:	f7fd f878 	bl	8004448 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	2b64      	cmp	r3, #100	@ 0x64
 8007360:	d901      	bls.n	8007366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e1f3      	b.n	800774e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007366:	4b51      	ldr	r3, [pc, #324]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1f0      	bne.n	8007354 <HAL_RCC_OscConfig+0xe8>
 8007372:	e000      	b.n	8007376 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0302 	and.w	r3, r3, #2
 800737e:	2b00      	cmp	r3, #0
 8007380:	d063      	beq.n	800744a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007382:	4b4a      	ldr	r3, [pc, #296]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f003 030c 	and.w	r3, r3, #12
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00b      	beq.n	80073a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800738e:	4b47      	ldr	r3, [pc, #284]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007396:	2b08      	cmp	r3, #8
 8007398:	d11c      	bne.n	80073d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800739a:	4b44      	ldr	r3, [pc, #272]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d116      	bne.n	80073d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073a6:	4b41      	ldr	r3, [pc, #260]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0302 	and.w	r3, r3, #2
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d005      	beq.n	80073be <HAL_RCC_OscConfig+0x152>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d001      	beq.n	80073be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e1c7      	b.n	800774e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073be:	4b3b      	ldr	r3, [pc, #236]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	4937      	ldr	r1, [pc, #220]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073d2:	e03a      	b.n	800744a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d020      	beq.n	800741e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073dc:	4b34      	ldr	r3, [pc, #208]	@ (80074b0 <HAL_RCC_OscConfig+0x244>)
 80073de:	2201      	movs	r2, #1
 80073e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e2:	f7fd f831 	bl	8004448 <HAL_GetTick>
 80073e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073e8:	e008      	b.n	80073fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073ea:	f7fd f82d 	bl	8004448 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d901      	bls.n	80073fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e1a8      	b.n	800774e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073fc:	4b2b      	ldr	r3, [pc, #172]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	2b00      	cmp	r3, #0
 8007406:	d0f0      	beq.n	80073ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007408:	4b28      	ldr	r3, [pc, #160]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	00db      	lsls	r3, r3, #3
 8007416:	4925      	ldr	r1, [pc, #148]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 8007418:	4313      	orrs	r3, r2
 800741a:	600b      	str	r3, [r1, #0]
 800741c:	e015      	b.n	800744a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800741e:	4b24      	ldr	r3, [pc, #144]	@ (80074b0 <HAL_RCC_OscConfig+0x244>)
 8007420:	2200      	movs	r2, #0
 8007422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007424:	f7fd f810 	bl	8004448 <HAL_GetTick>
 8007428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800742a:	e008      	b.n	800743e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800742c:	f7fd f80c 	bl	8004448 <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	2b02      	cmp	r3, #2
 8007438:	d901      	bls.n	800743e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e187      	b.n	800774e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800743e:	4b1b      	ldr	r3, [pc, #108]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1f0      	bne.n	800742c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0308 	and.w	r3, r3, #8
 8007452:	2b00      	cmp	r3, #0
 8007454:	d036      	beq.n	80074c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d016      	beq.n	800748c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800745e:	4b15      	ldr	r3, [pc, #84]	@ (80074b4 <HAL_RCC_OscConfig+0x248>)
 8007460:	2201      	movs	r2, #1
 8007462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007464:	f7fc fff0 	bl	8004448 <HAL_GetTick>
 8007468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800746a:	e008      	b.n	800747e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800746c:	f7fc ffec 	bl	8004448 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	2b02      	cmp	r3, #2
 8007478:	d901      	bls.n	800747e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e167      	b.n	800774e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800747e:	4b0b      	ldr	r3, [pc, #44]	@ (80074ac <HAL_RCC_OscConfig+0x240>)
 8007480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b00      	cmp	r3, #0
 8007488:	d0f0      	beq.n	800746c <HAL_RCC_OscConfig+0x200>
 800748a:	e01b      	b.n	80074c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800748c:	4b09      	ldr	r3, [pc, #36]	@ (80074b4 <HAL_RCC_OscConfig+0x248>)
 800748e:	2200      	movs	r2, #0
 8007490:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007492:	f7fc ffd9 	bl	8004448 <HAL_GetTick>
 8007496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007498:	e00e      	b.n	80074b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800749a:	f7fc ffd5 	bl	8004448 <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d907      	bls.n	80074b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e150      	b.n	800774e <HAL_RCC_OscConfig+0x4e2>
 80074ac:	40023800 	.word	0x40023800
 80074b0:	42470000 	.word	0x42470000
 80074b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074b8:	4b88      	ldr	r3, [pc, #544]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 80074ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074bc:	f003 0302 	and.w	r3, r3, #2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1ea      	bne.n	800749a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0304 	and.w	r3, r3, #4
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 8097 	beq.w	8007600 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074d2:	2300      	movs	r3, #0
 80074d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074d6:	4b81      	ldr	r3, [pc, #516]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 80074d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10f      	bne.n	8007502 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074e2:	2300      	movs	r3, #0
 80074e4:	60bb      	str	r3, [r7, #8]
 80074e6:	4b7d      	ldr	r3, [pc, #500]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 80074e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ea:	4a7c      	ldr	r2, [pc, #496]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 80074ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80074f2:	4b7a      	ldr	r3, [pc, #488]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 80074f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074fa:	60bb      	str	r3, [r7, #8]
 80074fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074fe:	2301      	movs	r3, #1
 8007500:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007502:	4b77      	ldr	r3, [pc, #476]	@ (80076e0 <HAL_RCC_OscConfig+0x474>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800750a:	2b00      	cmp	r3, #0
 800750c:	d118      	bne.n	8007540 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800750e:	4b74      	ldr	r3, [pc, #464]	@ (80076e0 <HAL_RCC_OscConfig+0x474>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a73      	ldr	r2, [pc, #460]	@ (80076e0 <HAL_RCC_OscConfig+0x474>)
 8007514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800751a:	f7fc ff95 	bl	8004448 <HAL_GetTick>
 800751e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007520:	e008      	b.n	8007534 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007522:	f7fc ff91 	bl	8004448 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	2b02      	cmp	r3, #2
 800752e:	d901      	bls.n	8007534 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e10c      	b.n	800774e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007534:	4b6a      	ldr	r3, [pc, #424]	@ (80076e0 <HAL_RCC_OscConfig+0x474>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800753c:	2b00      	cmp	r3, #0
 800753e:	d0f0      	beq.n	8007522 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d106      	bne.n	8007556 <HAL_RCC_OscConfig+0x2ea>
 8007548:	4b64      	ldr	r3, [pc, #400]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 800754a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800754c:	4a63      	ldr	r2, [pc, #396]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 800754e:	f043 0301 	orr.w	r3, r3, #1
 8007552:	6713      	str	r3, [r2, #112]	@ 0x70
 8007554:	e01c      	b.n	8007590 <HAL_RCC_OscConfig+0x324>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	2b05      	cmp	r3, #5
 800755c:	d10c      	bne.n	8007578 <HAL_RCC_OscConfig+0x30c>
 800755e:	4b5f      	ldr	r3, [pc, #380]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 8007560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007562:	4a5e      	ldr	r2, [pc, #376]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 8007564:	f043 0304 	orr.w	r3, r3, #4
 8007568:	6713      	str	r3, [r2, #112]	@ 0x70
 800756a:	4b5c      	ldr	r3, [pc, #368]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 800756c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800756e:	4a5b      	ldr	r2, [pc, #364]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 8007570:	f043 0301 	orr.w	r3, r3, #1
 8007574:	6713      	str	r3, [r2, #112]	@ 0x70
 8007576:	e00b      	b.n	8007590 <HAL_RCC_OscConfig+0x324>
 8007578:	4b58      	ldr	r3, [pc, #352]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 800757a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800757c:	4a57      	ldr	r2, [pc, #348]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 800757e:	f023 0301 	bic.w	r3, r3, #1
 8007582:	6713      	str	r3, [r2, #112]	@ 0x70
 8007584:	4b55      	ldr	r3, [pc, #340]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 8007586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007588:	4a54      	ldr	r2, [pc, #336]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 800758a:	f023 0304 	bic.w	r3, r3, #4
 800758e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d015      	beq.n	80075c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007598:	f7fc ff56 	bl	8004448 <HAL_GetTick>
 800759c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800759e:	e00a      	b.n	80075b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075a0:	f7fc ff52 	bl	8004448 <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d901      	bls.n	80075b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e0cb      	b.n	800774e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075b6:	4b49      	ldr	r3, [pc, #292]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 80075b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d0ee      	beq.n	80075a0 <HAL_RCC_OscConfig+0x334>
 80075c2:	e014      	b.n	80075ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075c4:	f7fc ff40 	bl	8004448 <HAL_GetTick>
 80075c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075ca:	e00a      	b.n	80075e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075cc:	f7fc ff3c 	bl	8004448 <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075da:	4293      	cmp	r3, r2
 80075dc:	d901      	bls.n	80075e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e0b5      	b.n	800774e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075e2:	4b3e      	ldr	r3, [pc, #248]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 80075e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075e6:	f003 0302 	and.w	r3, r3, #2
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1ee      	bne.n	80075cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80075ee:	7dfb      	ldrb	r3, [r7, #23]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d105      	bne.n	8007600 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075f4:	4b39      	ldr	r3, [pc, #228]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 80075f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f8:	4a38      	ldr	r2, [pc, #224]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 80075fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 80a1 	beq.w	800774c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800760a:	4b34      	ldr	r3, [pc, #208]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f003 030c 	and.w	r3, r3, #12
 8007612:	2b08      	cmp	r3, #8
 8007614:	d05c      	beq.n	80076d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	2b02      	cmp	r3, #2
 800761c:	d141      	bne.n	80076a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800761e:	4b31      	ldr	r3, [pc, #196]	@ (80076e4 <HAL_RCC_OscConfig+0x478>)
 8007620:	2200      	movs	r2, #0
 8007622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007624:	f7fc ff10 	bl	8004448 <HAL_GetTick>
 8007628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800762a:	e008      	b.n	800763e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800762c:	f7fc ff0c 	bl	8004448 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	2b02      	cmp	r3, #2
 8007638:	d901      	bls.n	800763e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e087      	b.n	800774e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800763e:	4b27      	ldr	r3, [pc, #156]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1f0      	bne.n	800762c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	69da      	ldr	r2, [r3, #28]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	431a      	orrs	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007658:	019b      	lsls	r3, r3, #6
 800765a:	431a      	orrs	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007660:	085b      	lsrs	r3, r3, #1
 8007662:	3b01      	subs	r3, #1
 8007664:	041b      	lsls	r3, r3, #16
 8007666:	431a      	orrs	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800766c:	061b      	lsls	r3, r3, #24
 800766e:	491b      	ldr	r1, [pc, #108]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 8007670:	4313      	orrs	r3, r2
 8007672:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007674:	4b1b      	ldr	r3, [pc, #108]	@ (80076e4 <HAL_RCC_OscConfig+0x478>)
 8007676:	2201      	movs	r2, #1
 8007678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800767a:	f7fc fee5 	bl	8004448 <HAL_GetTick>
 800767e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007680:	e008      	b.n	8007694 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007682:	f7fc fee1 	bl	8004448 <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	2b02      	cmp	r3, #2
 800768e:	d901      	bls.n	8007694 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e05c      	b.n	800774e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007694:	4b11      	ldr	r3, [pc, #68]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d0f0      	beq.n	8007682 <HAL_RCC_OscConfig+0x416>
 80076a0:	e054      	b.n	800774c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076a2:	4b10      	ldr	r3, [pc, #64]	@ (80076e4 <HAL_RCC_OscConfig+0x478>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076a8:	f7fc fece 	bl	8004448 <HAL_GetTick>
 80076ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076ae:	e008      	b.n	80076c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076b0:	f7fc feca 	bl	8004448 <HAL_GetTick>
 80076b4:	4602      	mov	r2, r0
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d901      	bls.n	80076c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e045      	b.n	800774e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076c2:	4b06      	ldr	r3, [pc, #24]	@ (80076dc <HAL_RCC_OscConfig+0x470>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1f0      	bne.n	80076b0 <HAL_RCC_OscConfig+0x444>
 80076ce:	e03d      	b.n	800774c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d107      	bne.n	80076e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e038      	b.n	800774e <HAL_RCC_OscConfig+0x4e2>
 80076dc:	40023800 	.word	0x40023800
 80076e0:	40007000 	.word	0x40007000
 80076e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80076e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007758 <HAL_RCC_OscConfig+0x4ec>)
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d028      	beq.n	8007748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007700:	429a      	cmp	r2, r3
 8007702:	d121      	bne.n	8007748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800770e:	429a      	cmp	r2, r3
 8007710:	d11a      	bne.n	8007748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007718:	4013      	ands	r3, r2
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800771e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007720:	4293      	cmp	r3, r2
 8007722:	d111      	bne.n	8007748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800772e:	085b      	lsrs	r3, r3, #1
 8007730:	3b01      	subs	r3, #1
 8007732:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007734:	429a      	cmp	r2, r3
 8007736:	d107      	bne.n	8007748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007742:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007744:	429a      	cmp	r2, r3
 8007746:	d001      	beq.n	800774c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	e000      	b.n	800774e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	40023800 	.word	0x40023800

0800775c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e0cc      	b.n	800790a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007770:	4b68      	ldr	r3, [pc, #416]	@ (8007914 <HAL_RCC_ClockConfig+0x1b8>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 030f 	and.w	r3, r3, #15
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	d90c      	bls.n	8007798 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800777e:	4b65      	ldr	r3, [pc, #404]	@ (8007914 <HAL_RCC_ClockConfig+0x1b8>)
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	b2d2      	uxtb	r2, r2
 8007784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007786:	4b63      	ldr	r3, [pc, #396]	@ (8007914 <HAL_RCC_ClockConfig+0x1b8>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 030f 	and.w	r3, r3, #15
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	429a      	cmp	r2, r3
 8007792:	d001      	beq.n	8007798 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e0b8      	b.n	800790a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0302 	and.w	r3, r3, #2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d020      	beq.n	80077e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0304 	and.w	r3, r3, #4
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d005      	beq.n	80077bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077b0:	4b59      	ldr	r3, [pc, #356]	@ (8007918 <HAL_RCC_ClockConfig+0x1bc>)
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	4a58      	ldr	r2, [pc, #352]	@ (8007918 <HAL_RCC_ClockConfig+0x1bc>)
 80077b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80077ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0308 	and.w	r3, r3, #8
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d005      	beq.n	80077d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80077c8:	4b53      	ldr	r3, [pc, #332]	@ (8007918 <HAL_RCC_ClockConfig+0x1bc>)
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	4a52      	ldr	r2, [pc, #328]	@ (8007918 <HAL_RCC_ClockConfig+0x1bc>)
 80077ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80077d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077d4:	4b50      	ldr	r3, [pc, #320]	@ (8007918 <HAL_RCC_ClockConfig+0x1bc>)
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	494d      	ldr	r1, [pc, #308]	@ (8007918 <HAL_RCC_ClockConfig+0x1bc>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d044      	beq.n	800787c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d107      	bne.n	800780a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077fa:	4b47      	ldr	r3, [pc, #284]	@ (8007918 <HAL_RCC_ClockConfig+0x1bc>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d119      	bne.n	800783a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e07f      	b.n	800790a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	2b02      	cmp	r3, #2
 8007810:	d003      	beq.n	800781a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007816:	2b03      	cmp	r3, #3
 8007818:	d107      	bne.n	800782a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800781a:	4b3f      	ldr	r3, [pc, #252]	@ (8007918 <HAL_RCC_ClockConfig+0x1bc>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d109      	bne.n	800783a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e06f      	b.n	800790a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800782a:	4b3b      	ldr	r3, [pc, #236]	@ (8007918 <HAL_RCC_ClockConfig+0x1bc>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 0302 	and.w	r3, r3, #2
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e067      	b.n	800790a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800783a:	4b37      	ldr	r3, [pc, #220]	@ (8007918 <HAL_RCC_ClockConfig+0x1bc>)
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f023 0203 	bic.w	r2, r3, #3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	4934      	ldr	r1, [pc, #208]	@ (8007918 <HAL_RCC_ClockConfig+0x1bc>)
 8007848:	4313      	orrs	r3, r2
 800784a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800784c:	f7fc fdfc 	bl	8004448 <HAL_GetTick>
 8007850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007852:	e00a      	b.n	800786a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007854:	f7fc fdf8 	bl	8004448 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007862:	4293      	cmp	r3, r2
 8007864:	d901      	bls.n	800786a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e04f      	b.n	800790a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800786a:	4b2b      	ldr	r3, [pc, #172]	@ (8007918 <HAL_RCC_ClockConfig+0x1bc>)
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f003 020c 	and.w	r2, r3, #12
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	429a      	cmp	r2, r3
 800787a:	d1eb      	bne.n	8007854 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800787c:	4b25      	ldr	r3, [pc, #148]	@ (8007914 <HAL_RCC_ClockConfig+0x1b8>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 030f 	and.w	r3, r3, #15
 8007884:	683a      	ldr	r2, [r7, #0]
 8007886:	429a      	cmp	r2, r3
 8007888:	d20c      	bcs.n	80078a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800788a:	4b22      	ldr	r3, [pc, #136]	@ (8007914 <HAL_RCC_ClockConfig+0x1b8>)
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	b2d2      	uxtb	r2, r2
 8007890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007892:	4b20      	ldr	r3, [pc, #128]	@ (8007914 <HAL_RCC_ClockConfig+0x1b8>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 030f 	and.w	r3, r3, #15
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	429a      	cmp	r2, r3
 800789e:	d001      	beq.n	80078a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e032      	b.n	800790a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0304 	and.w	r3, r3, #4
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d008      	beq.n	80078c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078b0:	4b19      	ldr	r3, [pc, #100]	@ (8007918 <HAL_RCC_ClockConfig+0x1bc>)
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	4916      	ldr	r1, [pc, #88]	@ (8007918 <HAL_RCC_ClockConfig+0x1bc>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0308 	and.w	r3, r3, #8
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d009      	beq.n	80078e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078ce:	4b12      	ldr	r3, [pc, #72]	@ (8007918 <HAL_RCC_ClockConfig+0x1bc>)
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	00db      	lsls	r3, r3, #3
 80078dc:	490e      	ldr	r1, [pc, #56]	@ (8007918 <HAL_RCC_ClockConfig+0x1bc>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80078e2:	f000 f821 	bl	8007928 <HAL_RCC_GetSysClockFreq>
 80078e6:	4602      	mov	r2, r0
 80078e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007918 <HAL_RCC_ClockConfig+0x1bc>)
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	091b      	lsrs	r3, r3, #4
 80078ee:	f003 030f 	and.w	r3, r3, #15
 80078f2:	490a      	ldr	r1, [pc, #40]	@ (800791c <HAL_RCC_ClockConfig+0x1c0>)
 80078f4:	5ccb      	ldrb	r3, [r1, r3]
 80078f6:	fa22 f303 	lsr.w	r3, r2, r3
 80078fa:	4a09      	ldr	r2, [pc, #36]	@ (8007920 <HAL_RCC_ClockConfig+0x1c4>)
 80078fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80078fe:	4b09      	ldr	r3, [pc, #36]	@ (8007924 <HAL_RCC_ClockConfig+0x1c8>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4618      	mov	r0, r3
 8007904:	f7fc fd5c 	bl	80043c0 <HAL_InitTick>

  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	40023c00 	.word	0x40023c00
 8007918:	40023800 	.word	0x40023800
 800791c:	0801292c 	.word	0x0801292c
 8007920:	20000268 	.word	0x20000268
 8007924:	2000026c 	.word	0x2000026c

08007928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800792c:	b094      	sub	sp, #80	@ 0x50
 800792e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007930:	2300      	movs	r3, #0
 8007932:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007934:	2300      	movs	r3, #0
 8007936:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007938:	2300      	movs	r3, #0
 800793a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800793c:	2300      	movs	r3, #0
 800793e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007940:	4b79      	ldr	r3, [pc, #484]	@ (8007b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f003 030c 	and.w	r3, r3, #12
 8007948:	2b08      	cmp	r3, #8
 800794a:	d00d      	beq.n	8007968 <HAL_RCC_GetSysClockFreq+0x40>
 800794c:	2b08      	cmp	r3, #8
 800794e:	f200 80e1 	bhi.w	8007b14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007952:	2b00      	cmp	r3, #0
 8007954:	d002      	beq.n	800795c <HAL_RCC_GetSysClockFreq+0x34>
 8007956:	2b04      	cmp	r3, #4
 8007958:	d003      	beq.n	8007962 <HAL_RCC_GetSysClockFreq+0x3a>
 800795a:	e0db      	b.n	8007b14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800795c:	4b73      	ldr	r3, [pc, #460]	@ (8007b2c <HAL_RCC_GetSysClockFreq+0x204>)
 800795e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007960:	e0db      	b.n	8007b1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007962:	4b72      	ldr	r3, [pc, #456]	@ (8007b2c <HAL_RCC_GetSysClockFreq+0x204>)
 8007964:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007966:	e0d8      	b.n	8007b1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007968:	4b6f      	ldr	r3, [pc, #444]	@ (8007b28 <HAL_RCC_GetSysClockFreq+0x200>)
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007970:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007972:	4b6d      	ldr	r3, [pc, #436]	@ (8007b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d063      	beq.n	8007a46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800797e:	4b6a      	ldr	r3, [pc, #424]	@ (8007b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	099b      	lsrs	r3, r3, #6
 8007984:	2200      	movs	r2, #0
 8007986:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007988:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800798a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007990:	633b      	str	r3, [r7, #48]	@ 0x30
 8007992:	2300      	movs	r3, #0
 8007994:	637b      	str	r3, [r7, #52]	@ 0x34
 8007996:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800799a:	4622      	mov	r2, r4
 800799c:	462b      	mov	r3, r5
 800799e:	f04f 0000 	mov.w	r0, #0
 80079a2:	f04f 0100 	mov.w	r1, #0
 80079a6:	0159      	lsls	r1, r3, #5
 80079a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079ac:	0150      	lsls	r0, r2, #5
 80079ae:	4602      	mov	r2, r0
 80079b0:	460b      	mov	r3, r1
 80079b2:	4621      	mov	r1, r4
 80079b4:	1a51      	subs	r1, r2, r1
 80079b6:	6139      	str	r1, [r7, #16]
 80079b8:	4629      	mov	r1, r5
 80079ba:	eb63 0301 	sbc.w	r3, r3, r1
 80079be:	617b      	str	r3, [r7, #20]
 80079c0:	f04f 0200 	mov.w	r2, #0
 80079c4:	f04f 0300 	mov.w	r3, #0
 80079c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079cc:	4659      	mov	r1, fp
 80079ce:	018b      	lsls	r3, r1, #6
 80079d0:	4651      	mov	r1, sl
 80079d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80079d6:	4651      	mov	r1, sl
 80079d8:	018a      	lsls	r2, r1, #6
 80079da:	4651      	mov	r1, sl
 80079dc:	ebb2 0801 	subs.w	r8, r2, r1
 80079e0:	4659      	mov	r1, fp
 80079e2:	eb63 0901 	sbc.w	r9, r3, r1
 80079e6:	f04f 0200 	mov.w	r2, #0
 80079ea:	f04f 0300 	mov.w	r3, #0
 80079ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079fa:	4690      	mov	r8, r2
 80079fc:	4699      	mov	r9, r3
 80079fe:	4623      	mov	r3, r4
 8007a00:	eb18 0303 	adds.w	r3, r8, r3
 8007a04:	60bb      	str	r3, [r7, #8]
 8007a06:	462b      	mov	r3, r5
 8007a08:	eb49 0303 	adc.w	r3, r9, r3
 8007a0c:	60fb      	str	r3, [r7, #12]
 8007a0e:	f04f 0200 	mov.w	r2, #0
 8007a12:	f04f 0300 	mov.w	r3, #0
 8007a16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007a1a:	4629      	mov	r1, r5
 8007a1c:	028b      	lsls	r3, r1, #10
 8007a1e:	4621      	mov	r1, r4
 8007a20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a24:	4621      	mov	r1, r4
 8007a26:	028a      	lsls	r2, r1, #10
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a2e:	2200      	movs	r2, #0
 8007a30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007a38:	f7f8 fc32 	bl	80002a0 <__aeabi_uldivmod>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	4613      	mov	r3, r2
 8007a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a44:	e058      	b.n	8007af8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a46:	4b38      	ldr	r3, [pc, #224]	@ (8007b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	099b      	lsrs	r3, r3, #6
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	4618      	mov	r0, r3
 8007a50:	4611      	mov	r1, r2
 8007a52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007a56:	623b      	str	r3, [r7, #32]
 8007a58:	2300      	movs	r3, #0
 8007a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007a60:	4642      	mov	r2, r8
 8007a62:	464b      	mov	r3, r9
 8007a64:	f04f 0000 	mov.w	r0, #0
 8007a68:	f04f 0100 	mov.w	r1, #0
 8007a6c:	0159      	lsls	r1, r3, #5
 8007a6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a72:	0150      	lsls	r0, r2, #5
 8007a74:	4602      	mov	r2, r0
 8007a76:	460b      	mov	r3, r1
 8007a78:	4641      	mov	r1, r8
 8007a7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8007a7e:	4649      	mov	r1, r9
 8007a80:	eb63 0b01 	sbc.w	fp, r3, r1
 8007a84:	f04f 0200 	mov.w	r2, #0
 8007a88:	f04f 0300 	mov.w	r3, #0
 8007a8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007a90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007a94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007a98:	ebb2 040a 	subs.w	r4, r2, sl
 8007a9c:	eb63 050b 	sbc.w	r5, r3, fp
 8007aa0:	f04f 0200 	mov.w	r2, #0
 8007aa4:	f04f 0300 	mov.w	r3, #0
 8007aa8:	00eb      	lsls	r3, r5, #3
 8007aaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007aae:	00e2      	lsls	r2, r4, #3
 8007ab0:	4614      	mov	r4, r2
 8007ab2:	461d      	mov	r5, r3
 8007ab4:	4643      	mov	r3, r8
 8007ab6:	18e3      	adds	r3, r4, r3
 8007ab8:	603b      	str	r3, [r7, #0]
 8007aba:	464b      	mov	r3, r9
 8007abc:	eb45 0303 	adc.w	r3, r5, r3
 8007ac0:	607b      	str	r3, [r7, #4]
 8007ac2:	f04f 0200 	mov.w	r2, #0
 8007ac6:	f04f 0300 	mov.w	r3, #0
 8007aca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ace:	4629      	mov	r1, r5
 8007ad0:	028b      	lsls	r3, r1, #10
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ad8:	4621      	mov	r1, r4
 8007ada:	028a      	lsls	r2, r1, #10
 8007adc:	4610      	mov	r0, r2
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	61bb      	str	r3, [r7, #24]
 8007ae6:	61fa      	str	r2, [r7, #28]
 8007ae8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007aec:	f7f8 fbd8 	bl	80002a0 <__aeabi_uldivmod>
 8007af0:	4602      	mov	r2, r0
 8007af2:	460b      	mov	r3, r1
 8007af4:	4613      	mov	r3, r2
 8007af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007af8:	4b0b      	ldr	r3, [pc, #44]	@ (8007b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	0c1b      	lsrs	r3, r3, #16
 8007afe:	f003 0303 	and.w	r3, r3, #3
 8007b02:	3301      	adds	r3, #1
 8007b04:	005b      	lsls	r3, r3, #1
 8007b06:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007b08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b12:	e002      	b.n	8007b1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b14:	4b05      	ldr	r3, [pc, #20]	@ (8007b2c <HAL_RCC_GetSysClockFreq+0x204>)
 8007b16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3750      	adds	r7, #80	@ 0x50
 8007b20:	46bd      	mov	sp, r7
 8007b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b26:	bf00      	nop
 8007b28:	40023800 	.word	0x40023800
 8007b2c:	00f42400 	.word	0x00f42400

08007b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b30:	b480      	push	{r7}
 8007b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b34:	4b03      	ldr	r3, [pc, #12]	@ (8007b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b36:	681b      	ldr	r3, [r3, #0]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	20000268 	.word	0x20000268

08007b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b4c:	f7ff fff0 	bl	8007b30 <HAL_RCC_GetHCLKFreq>
 8007b50:	4602      	mov	r2, r0
 8007b52:	4b05      	ldr	r3, [pc, #20]	@ (8007b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	0a9b      	lsrs	r3, r3, #10
 8007b58:	f003 0307 	and.w	r3, r3, #7
 8007b5c:	4903      	ldr	r1, [pc, #12]	@ (8007b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b5e:	5ccb      	ldrb	r3, [r1, r3]
 8007b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	40023800 	.word	0x40023800
 8007b6c:	0801293c 	.word	0x0801293c

08007b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007b74:	f7ff ffdc 	bl	8007b30 <HAL_RCC_GetHCLKFreq>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	4b05      	ldr	r3, [pc, #20]	@ (8007b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	0b5b      	lsrs	r3, r3, #13
 8007b80:	f003 0307 	and.w	r3, r3, #7
 8007b84:	4903      	ldr	r1, [pc, #12]	@ (8007b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b86:	5ccb      	ldrb	r3, [r1, r3]
 8007b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	40023800 	.word	0x40023800
 8007b94:	0801293c 	.word	0x0801293c

08007b98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d101      	bne.n	8007baa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e07b      	b.n	8007ca2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d108      	bne.n	8007bc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bba:	d009      	beq.n	8007bd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	61da      	str	r2, [r3, #28]
 8007bc2:	e005      	b.n	8007bd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d106      	bne.n	8007bf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7fc f93e 	bl	8003e6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007c18:	431a      	orrs	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c22:	431a      	orrs	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	f003 0302 	and.w	r3, r3, #2
 8007c2c:	431a      	orrs	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	431a      	orrs	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c40:	431a      	orrs	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c4a:	431a      	orrs	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c54:	ea42 0103 	orr.w	r1, r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c5c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	430a      	orrs	r2, r1
 8007c66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	0c1b      	lsrs	r3, r3, #16
 8007c6e:	f003 0104 	and.w	r1, r3, #4
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c76:	f003 0210 	and.w	r2, r3, #16
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	69da      	ldr	r2, [r3, #28]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b088      	sub	sp, #32
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	60f8      	str	r0, [r7, #12]
 8007cb2:	60b9      	str	r1, [r7, #8]
 8007cb4:	603b      	str	r3, [r7, #0]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cba:	f7fc fbc5 	bl	8004448 <HAL_GetTick>
 8007cbe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007cc0:	88fb      	ldrh	r3, [r7, #6]
 8007cc2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d001      	beq.n	8007cd4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	e12a      	b.n	8007f2a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d002      	beq.n	8007ce0 <HAL_SPI_Transmit+0x36>
 8007cda:	88fb      	ldrh	r3, [r7, #6]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d101      	bne.n	8007ce4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e122      	b.n	8007f2a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d101      	bne.n	8007cf2 <HAL_SPI_Transmit+0x48>
 8007cee:	2302      	movs	r3, #2
 8007cf0:	e11b      	b.n	8007f2a <HAL_SPI_Transmit+0x280>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2203      	movs	r2, #3
 8007cfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	88fa      	ldrh	r2, [r7, #6]
 8007d12:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	88fa      	ldrh	r2, [r7, #6]
 8007d18:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d40:	d10f      	bne.n	8007d62 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d6c:	2b40      	cmp	r3, #64	@ 0x40
 8007d6e:	d007      	beq.n	8007d80 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d88:	d152      	bne.n	8007e30 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d002      	beq.n	8007d98 <HAL_SPI_Transmit+0xee>
 8007d92:	8b7b      	ldrh	r3, [r7, #26]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d145      	bne.n	8007e24 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d9c:	881a      	ldrh	r2, [r3, #0]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007da8:	1c9a      	adds	r2, r3, #2
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	3b01      	subs	r3, #1
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007dbc:	e032      	b.n	8007e24 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f003 0302 	and.w	r3, r3, #2
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d112      	bne.n	8007df2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dd0:	881a      	ldrh	r2, [r3, #0]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ddc:	1c9a      	adds	r2, r3, #2
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	3b01      	subs	r3, #1
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007df0:	e018      	b.n	8007e24 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007df2:	f7fc fb29 	bl	8004448 <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d803      	bhi.n	8007e0a <HAL_SPI_Transmit+0x160>
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e08:	d102      	bne.n	8007e10 <HAL_SPI_Transmit+0x166>
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d109      	bne.n	8007e24 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e082      	b.n	8007f2a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1c7      	bne.n	8007dbe <HAL_SPI_Transmit+0x114>
 8007e2e:	e053      	b.n	8007ed8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d002      	beq.n	8007e3e <HAL_SPI_Transmit+0x194>
 8007e38:	8b7b      	ldrh	r3, [r7, #26]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d147      	bne.n	8007ece <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	330c      	adds	r3, #12
 8007e48:	7812      	ldrb	r2, [r2, #0]
 8007e4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e50:	1c5a      	adds	r2, r3, #1
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007e64:	e033      	b.n	8007ece <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f003 0302 	and.w	r3, r3, #2
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d113      	bne.n	8007e9c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	330c      	adds	r3, #12
 8007e7e:	7812      	ldrb	r2, [r2, #0]
 8007e80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e86:	1c5a      	adds	r2, r3, #1
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	3b01      	subs	r3, #1
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007e9a:	e018      	b.n	8007ece <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e9c:	f7fc fad4 	bl	8004448 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d803      	bhi.n	8007eb4 <HAL_SPI_Transmit+0x20a>
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb2:	d102      	bne.n	8007eba <HAL_SPI_Transmit+0x210>
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d109      	bne.n	8007ece <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e02d      	b.n	8007f2a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1c6      	bne.n	8007e66 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ed8:	69fa      	ldr	r2, [r7, #28]
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 fa59 	bl	8008394 <SPI_EndRxTxTransaction>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2220      	movs	r2, #32
 8007eec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10a      	bne.n	8007f0c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	617b      	str	r3, [r7, #20]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	617b      	str	r3, [r7, #20]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	617b      	str	r3, [r7, #20]
 8007f0a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d001      	beq.n	8007f28 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e000      	b.n	8007f2a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007f28:	2300      	movs	r3, #0
  }
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3720      	adds	r7, #32
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b08a      	sub	sp, #40	@ 0x28
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	60f8      	str	r0, [r7, #12]
 8007f3a:	60b9      	str	r1, [r7, #8]
 8007f3c:	607a      	str	r2, [r7, #4]
 8007f3e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007f40:	2301      	movs	r3, #1
 8007f42:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f44:	f7fc fa80 	bl	8004448 <HAL_GetTick>
 8007f48:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f50:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007f58:	887b      	ldrh	r3, [r7, #2]
 8007f5a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007f5c:	7ffb      	ldrb	r3, [r7, #31]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d00c      	beq.n	8007f7c <HAL_SPI_TransmitReceive+0x4a>
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f68:	d106      	bne.n	8007f78 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d102      	bne.n	8007f78 <HAL_SPI_TransmitReceive+0x46>
 8007f72:	7ffb      	ldrb	r3, [r7, #31]
 8007f74:	2b04      	cmp	r3, #4
 8007f76:	d001      	beq.n	8007f7c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007f78:	2302      	movs	r3, #2
 8007f7a:	e17f      	b.n	800827c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d005      	beq.n	8007f8e <HAL_SPI_TransmitReceive+0x5c>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d002      	beq.n	8007f8e <HAL_SPI_TransmitReceive+0x5c>
 8007f88:	887b      	ldrh	r3, [r7, #2]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e174      	b.n	800827c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d101      	bne.n	8007fa0 <HAL_SPI_TransmitReceive+0x6e>
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	e16d      	b.n	800827c <HAL_SPI_TransmitReceive+0x34a>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b04      	cmp	r3, #4
 8007fb2:	d003      	beq.n	8007fbc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2205      	movs	r2, #5
 8007fb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	887a      	ldrh	r2, [r7, #2]
 8007fcc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	887a      	ldrh	r2, [r7, #2]
 8007fd2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	887a      	ldrh	r2, [r7, #2]
 8007fde:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	887a      	ldrh	r2, [r7, #2]
 8007fe4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ffc:	2b40      	cmp	r3, #64	@ 0x40
 8007ffe:	d007      	beq.n	8008010 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800800e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008018:	d17e      	bne.n	8008118 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <HAL_SPI_TransmitReceive+0xf6>
 8008022:	8afb      	ldrh	r3, [r7, #22]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d16c      	bne.n	8008102 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800802c:	881a      	ldrh	r2, [r3, #0]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008038:	1c9a      	adds	r2, r3, #2
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008042:	b29b      	uxth	r3, r3
 8008044:	3b01      	subs	r3, #1
 8008046:	b29a      	uxth	r2, r3
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800804c:	e059      	b.n	8008102 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f003 0302 	and.w	r3, r3, #2
 8008058:	2b02      	cmp	r3, #2
 800805a:	d11b      	bne.n	8008094 <HAL_SPI_TransmitReceive+0x162>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008060:	b29b      	uxth	r3, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	d016      	beq.n	8008094 <HAL_SPI_TransmitReceive+0x162>
 8008066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008068:	2b01      	cmp	r3, #1
 800806a:	d113      	bne.n	8008094 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008070:	881a      	ldrh	r2, [r3, #0]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800807c:	1c9a      	adds	r2, r3, #2
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008086:	b29b      	uxth	r3, r3
 8008088:	3b01      	subs	r3, #1
 800808a:	b29a      	uxth	r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008090:	2300      	movs	r3, #0
 8008092:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d119      	bne.n	80080d6 <HAL_SPI_TransmitReceive+0x1a4>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d014      	beq.n	80080d6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68da      	ldr	r2, [r3, #12]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b6:	b292      	uxth	r2, r2
 80080b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080be:	1c9a      	adds	r2, r3, #2
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	3b01      	subs	r3, #1
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80080d2:	2301      	movs	r3, #1
 80080d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80080d6:	f7fc f9b7 	bl	8004448 <HAL_GetTick>
 80080da:	4602      	mov	r2, r0
 80080dc:	6a3b      	ldr	r3, [r7, #32]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d80d      	bhi.n	8008102 <HAL_SPI_TransmitReceive+0x1d0>
 80080e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ec:	d009      	beq.n	8008102 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e0bc      	b.n	800827c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008106:	b29b      	uxth	r3, r3
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1a0      	bne.n	800804e <HAL_SPI_TransmitReceive+0x11c>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008110:	b29b      	uxth	r3, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d19b      	bne.n	800804e <HAL_SPI_TransmitReceive+0x11c>
 8008116:	e082      	b.n	800821e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d002      	beq.n	8008126 <HAL_SPI_TransmitReceive+0x1f4>
 8008120:	8afb      	ldrh	r3, [r7, #22]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d171      	bne.n	800820a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	330c      	adds	r3, #12
 8008130:	7812      	ldrb	r2, [r2, #0]
 8008132:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008142:	b29b      	uxth	r3, r3
 8008144:	3b01      	subs	r3, #1
 8008146:	b29a      	uxth	r2, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800814c:	e05d      	b.n	800820a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f003 0302 	and.w	r3, r3, #2
 8008158:	2b02      	cmp	r3, #2
 800815a:	d11c      	bne.n	8008196 <HAL_SPI_TransmitReceive+0x264>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008160:	b29b      	uxth	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d017      	beq.n	8008196 <HAL_SPI_TransmitReceive+0x264>
 8008166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008168:	2b01      	cmp	r3, #1
 800816a:	d114      	bne.n	8008196 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	330c      	adds	r3, #12
 8008176:	7812      	ldrb	r2, [r2, #0]
 8008178:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008188:	b29b      	uxth	r3, r3
 800818a:	3b01      	subs	r3, #1
 800818c:	b29a      	uxth	r2, r3
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008192:	2300      	movs	r3, #0
 8008194:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d119      	bne.n	80081d8 <HAL_SPI_TransmitReceive+0x2a6>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d014      	beq.n	80081d8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68da      	ldr	r2, [r3, #12]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b8:	b2d2      	uxtb	r2, r2
 80081ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c0:	1c5a      	adds	r2, r3, #1
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	3b01      	subs	r3, #1
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80081d4:	2301      	movs	r3, #1
 80081d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80081d8:	f7fc f936 	bl	8004448 <HAL_GetTick>
 80081dc:	4602      	mov	r2, r0
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d803      	bhi.n	80081f0 <HAL_SPI_TransmitReceive+0x2be>
 80081e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ee:	d102      	bne.n	80081f6 <HAL_SPI_TransmitReceive+0x2c4>
 80081f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d109      	bne.n	800820a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	e038      	b.n	800827c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800820e:	b29b      	uxth	r3, r3
 8008210:	2b00      	cmp	r3, #0
 8008212:	d19c      	bne.n	800814e <HAL_SPI_TransmitReceive+0x21c>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008218:	b29b      	uxth	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d197      	bne.n	800814e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800821e:	6a3a      	ldr	r2, [r7, #32]
 8008220:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f000 f8b6 	bl	8008394 <SPI_EndRxTxTransaction>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d008      	beq.n	8008240 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2220      	movs	r2, #32
 8008232:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e01d      	b.n	800827c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10a      	bne.n	800825e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008248:	2300      	movs	r3, #0
 800824a:	613b      	str	r3, [r7, #16]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	613b      	str	r3, [r7, #16]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	613b      	str	r3, [r7, #16]
 800825c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e000      	b.n	800827c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800827a:	2300      	movs	r3, #0
  }
}
 800827c:	4618      	mov	r0, r3
 800827e:	3728      	adds	r7, #40	@ 0x28
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b088      	sub	sp, #32
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	603b      	str	r3, [r7, #0]
 8008290:	4613      	mov	r3, r2
 8008292:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008294:	f7fc f8d8 	bl	8004448 <HAL_GetTick>
 8008298:	4602      	mov	r2, r0
 800829a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800829c:	1a9b      	subs	r3, r3, r2
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	4413      	add	r3, r2
 80082a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80082a4:	f7fc f8d0 	bl	8004448 <HAL_GetTick>
 80082a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80082aa:	4b39      	ldr	r3, [pc, #228]	@ (8008390 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	015b      	lsls	r3, r3, #5
 80082b0:	0d1b      	lsrs	r3, r3, #20
 80082b2:	69fa      	ldr	r2, [r7, #28]
 80082b4:	fb02 f303 	mul.w	r3, r2, r3
 80082b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082ba:	e054      	b.n	8008366 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c2:	d050      	beq.n	8008366 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80082c4:	f7fc f8c0 	bl	8004448 <HAL_GetTick>
 80082c8:	4602      	mov	r2, r0
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	69fa      	ldr	r2, [r7, #28]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d902      	bls.n	80082da <SPI_WaitFlagStateUntilTimeout+0x56>
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d13d      	bne.n	8008356 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	685a      	ldr	r2, [r3, #4]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80082e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80082f2:	d111      	bne.n	8008318 <SPI_WaitFlagStateUntilTimeout+0x94>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082fc:	d004      	beq.n	8008308 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008306:	d107      	bne.n	8008318 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008316:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800831c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008320:	d10f      	bne.n	8008342 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008330:	601a      	str	r2, [r3, #0]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008340:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2200      	movs	r2, #0
 800834e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008352:	2303      	movs	r3, #3
 8008354:	e017      	b.n	8008386 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d101      	bne.n	8008360 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800835c:	2300      	movs	r3, #0
 800835e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	3b01      	subs	r3, #1
 8008364:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	689a      	ldr	r2, [r3, #8]
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	4013      	ands	r3, r2
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	429a      	cmp	r2, r3
 8008374:	bf0c      	ite	eq
 8008376:	2301      	moveq	r3, #1
 8008378:	2300      	movne	r3, #0
 800837a:	b2db      	uxtb	r3, r3
 800837c:	461a      	mov	r2, r3
 800837e:	79fb      	ldrb	r3, [r7, #7]
 8008380:	429a      	cmp	r2, r3
 8008382:	d19b      	bne.n	80082bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3720      	adds	r7, #32
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	20000268 	.word	0x20000268

08008394 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b088      	sub	sp, #32
 8008398:	af02      	add	r7, sp, #8
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	2201      	movs	r2, #1
 80083a8:	2102      	movs	r1, #2
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f7ff ff6a 	bl	8008284 <SPI_WaitFlagStateUntilTimeout>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d007      	beq.n	80083c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083ba:	f043 0220 	orr.w	r2, r3, #32
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e032      	b.n	800842c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80083c6:	4b1b      	ldr	r3, [pc, #108]	@ (8008434 <SPI_EndRxTxTransaction+0xa0>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a1b      	ldr	r2, [pc, #108]	@ (8008438 <SPI_EndRxTxTransaction+0xa4>)
 80083cc:	fba2 2303 	umull	r2, r3, r2, r3
 80083d0:	0d5b      	lsrs	r3, r3, #21
 80083d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80083d6:	fb02 f303 	mul.w	r3, r2, r3
 80083da:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80083e4:	d112      	bne.n	800840c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	2200      	movs	r2, #0
 80083ee:	2180      	movs	r1, #128	@ 0x80
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f7ff ff47 	bl	8008284 <SPI_WaitFlagStateUntilTimeout>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d016      	beq.n	800842a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008400:	f043 0220 	orr.w	r2, r3, #32
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	e00f      	b.n	800842c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00a      	beq.n	8008428 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	3b01      	subs	r3, #1
 8008416:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008422:	2b80      	cmp	r3, #128	@ 0x80
 8008424:	d0f2      	beq.n	800840c <SPI_EndRxTxTransaction+0x78>
 8008426:	e000      	b.n	800842a <SPI_EndRxTxTransaction+0x96>
        break;
 8008428:	bf00      	nop
  }

  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3718      	adds	r7, #24
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	20000268 	.word	0x20000268
 8008438:	165e9f81 	.word	0x165e9f81

0800843c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d101      	bne.n	8008452 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e038      	b.n	80084c4 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d106      	bne.n	800846c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f7fb fe66 	bl	8004138 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	3308      	adds	r3, #8
 8008474:	4619      	mov	r1, r3
 8008476:	4610      	mov	r0, r2
 8008478:	f002 f914 	bl	800a6a4 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6818      	ldr	r0, [r3, #0]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	461a      	mov	r2, r3
 8008486:	68b9      	ldr	r1, [r7, #8]
 8008488:	f002 f992 	bl	800a7b0 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6858      	ldr	r0, [r3, #4]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	689a      	ldr	r2, [r3, #8]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008498:	6879      	ldr	r1, [r7, #4]
 800849a:	f002 f9d9 	bl	800a850 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	6892      	ldr	r2, [r2, #8]
 80084a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	6892      	ldr	r2, [r2, #8]
 80084b2:	f041 0101 	orr.w	r1, r1, #1
 80084b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d101      	bne.n	80084de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e041      	b.n	8008562 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d106      	bne.n	80084f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f7fb fd02 	bl	8003efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2202      	movs	r2, #2
 80084fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	3304      	adds	r3, #4
 8008508:	4619      	mov	r1, r3
 800850a:	4610      	mov	r0, r2
 800850c:	f000 fc86 	bl	8008e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
	...

0800856c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b01      	cmp	r3, #1
 800857e:	d001      	beq.n	8008584 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	e04e      	b.n	8008622 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2202      	movs	r2, #2
 8008588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68da      	ldr	r2, [r3, #12]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f042 0201 	orr.w	r2, r2, #1
 800859a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a23      	ldr	r2, [pc, #140]	@ (8008630 <HAL_TIM_Base_Start_IT+0xc4>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d022      	beq.n	80085ec <HAL_TIM_Base_Start_IT+0x80>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085ae:	d01d      	beq.n	80085ec <HAL_TIM_Base_Start_IT+0x80>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a1f      	ldr	r2, [pc, #124]	@ (8008634 <HAL_TIM_Base_Start_IT+0xc8>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d018      	beq.n	80085ec <HAL_TIM_Base_Start_IT+0x80>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a1e      	ldr	r2, [pc, #120]	@ (8008638 <HAL_TIM_Base_Start_IT+0xcc>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d013      	beq.n	80085ec <HAL_TIM_Base_Start_IT+0x80>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a1c      	ldr	r2, [pc, #112]	@ (800863c <HAL_TIM_Base_Start_IT+0xd0>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d00e      	beq.n	80085ec <HAL_TIM_Base_Start_IT+0x80>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a1b      	ldr	r2, [pc, #108]	@ (8008640 <HAL_TIM_Base_Start_IT+0xd4>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d009      	beq.n	80085ec <HAL_TIM_Base_Start_IT+0x80>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a19      	ldr	r2, [pc, #100]	@ (8008644 <HAL_TIM_Base_Start_IT+0xd8>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d004      	beq.n	80085ec <HAL_TIM_Base_Start_IT+0x80>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a18      	ldr	r2, [pc, #96]	@ (8008648 <HAL_TIM_Base_Start_IT+0xdc>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d111      	bne.n	8008610 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f003 0307 	and.w	r3, r3, #7
 80085f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2b06      	cmp	r3, #6
 80085fc:	d010      	beq.n	8008620 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f042 0201 	orr.w	r2, r2, #1
 800860c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800860e:	e007      	b.n	8008620 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f042 0201 	orr.w	r2, r2, #1
 800861e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	40010000 	.word	0x40010000
 8008634:	40000400 	.word	0x40000400
 8008638:	40000800 	.word	0x40000800
 800863c:	40000c00 	.word	0x40000c00
 8008640:	40010400 	.word	0x40010400
 8008644:	40014000 	.word	0x40014000
 8008648:	40001800 	.word	0x40001800

0800864c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68da      	ldr	r2, [r3, #12]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f022 0201 	bic.w	r2, r2, #1
 8008662:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	6a1a      	ldr	r2, [r3, #32]
 800866a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800866e:	4013      	ands	r3, r2
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10f      	bne.n	8008694 <HAL_TIM_Base_Stop_IT+0x48>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	6a1a      	ldr	r2, [r3, #32]
 800867a:	f240 4344 	movw	r3, #1092	@ 0x444
 800867e:	4013      	ands	r3, r2
 8008680:	2b00      	cmp	r3, #0
 8008682:	d107      	bne.n	8008694 <HAL_TIM_Base_Stop_IT+0x48>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f022 0201 	bic.w	r2, r2, #1
 8008692:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	370c      	adds	r7, #12
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b082      	sub	sp, #8
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e041      	b.n	8008740 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d106      	bne.n	80086d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7fb fc39 	bl	8003f48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2202      	movs	r2, #2
 80086da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	3304      	adds	r3, #4
 80086e6:	4619      	mov	r1, r3
 80086e8:	4610      	mov	r0, r2
 80086ea:	f000 fb97 	bl	8008e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d109      	bne.n	800876c <HAL_TIM_PWM_Start+0x24>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800875e:	b2db      	uxtb	r3, r3
 8008760:	2b01      	cmp	r3, #1
 8008762:	bf14      	ite	ne
 8008764:	2301      	movne	r3, #1
 8008766:	2300      	moveq	r3, #0
 8008768:	b2db      	uxtb	r3, r3
 800876a:	e022      	b.n	80087b2 <HAL_TIM_PWM_Start+0x6a>
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	2b04      	cmp	r3, #4
 8008770:	d109      	bne.n	8008786 <HAL_TIM_PWM_Start+0x3e>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008778:	b2db      	uxtb	r3, r3
 800877a:	2b01      	cmp	r3, #1
 800877c:	bf14      	ite	ne
 800877e:	2301      	movne	r3, #1
 8008780:	2300      	moveq	r3, #0
 8008782:	b2db      	uxtb	r3, r3
 8008784:	e015      	b.n	80087b2 <HAL_TIM_PWM_Start+0x6a>
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	2b08      	cmp	r3, #8
 800878a:	d109      	bne.n	80087a0 <HAL_TIM_PWM_Start+0x58>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008792:	b2db      	uxtb	r3, r3
 8008794:	2b01      	cmp	r3, #1
 8008796:	bf14      	ite	ne
 8008798:	2301      	movne	r3, #1
 800879a:	2300      	moveq	r3, #0
 800879c:	b2db      	uxtb	r3, r3
 800879e:	e008      	b.n	80087b2 <HAL_TIM_PWM_Start+0x6a>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	bf14      	ite	ne
 80087ac:	2301      	movne	r3, #1
 80087ae:	2300      	moveq	r3, #0
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d001      	beq.n	80087ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e07c      	b.n	80088b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d104      	bne.n	80087ca <HAL_TIM_PWM_Start+0x82>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2202      	movs	r2, #2
 80087c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087c8:	e013      	b.n	80087f2 <HAL_TIM_PWM_Start+0xaa>
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2b04      	cmp	r3, #4
 80087ce:	d104      	bne.n	80087da <HAL_TIM_PWM_Start+0x92>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2202      	movs	r2, #2
 80087d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087d8:	e00b      	b.n	80087f2 <HAL_TIM_PWM_Start+0xaa>
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	2b08      	cmp	r3, #8
 80087de:	d104      	bne.n	80087ea <HAL_TIM_PWM_Start+0xa2>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2202      	movs	r2, #2
 80087e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087e8:	e003      	b.n	80087f2 <HAL_TIM_PWM_Start+0xaa>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2202      	movs	r2, #2
 80087ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2201      	movs	r2, #1
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 fe04 	bl	8009408 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a2d      	ldr	r2, [pc, #180]	@ (80088bc <HAL_TIM_PWM_Start+0x174>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d004      	beq.n	8008814 <HAL_TIM_PWM_Start+0xcc>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a2c      	ldr	r2, [pc, #176]	@ (80088c0 <HAL_TIM_PWM_Start+0x178>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d101      	bne.n	8008818 <HAL_TIM_PWM_Start+0xd0>
 8008814:	2301      	movs	r3, #1
 8008816:	e000      	b.n	800881a <HAL_TIM_PWM_Start+0xd2>
 8008818:	2300      	movs	r3, #0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d007      	beq.n	800882e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800882c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a22      	ldr	r2, [pc, #136]	@ (80088bc <HAL_TIM_PWM_Start+0x174>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d022      	beq.n	800887e <HAL_TIM_PWM_Start+0x136>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008840:	d01d      	beq.n	800887e <HAL_TIM_PWM_Start+0x136>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a1f      	ldr	r2, [pc, #124]	@ (80088c4 <HAL_TIM_PWM_Start+0x17c>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d018      	beq.n	800887e <HAL_TIM_PWM_Start+0x136>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a1d      	ldr	r2, [pc, #116]	@ (80088c8 <HAL_TIM_PWM_Start+0x180>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d013      	beq.n	800887e <HAL_TIM_PWM_Start+0x136>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a1c      	ldr	r2, [pc, #112]	@ (80088cc <HAL_TIM_PWM_Start+0x184>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d00e      	beq.n	800887e <HAL_TIM_PWM_Start+0x136>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a16      	ldr	r2, [pc, #88]	@ (80088c0 <HAL_TIM_PWM_Start+0x178>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d009      	beq.n	800887e <HAL_TIM_PWM_Start+0x136>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a18      	ldr	r2, [pc, #96]	@ (80088d0 <HAL_TIM_PWM_Start+0x188>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d004      	beq.n	800887e <HAL_TIM_PWM_Start+0x136>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a16      	ldr	r2, [pc, #88]	@ (80088d4 <HAL_TIM_PWM_Start+0x18c>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d111      	bne.n	80088a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	f003 0307 	and.w	r3, r3, #7
 8008888:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2b06      	cmp	r3, #6
 800888e:	d010      	beq.n	80088b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f042 0201 	orr.w	r2, r2, #1
 800889e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088a0:	e007      	b.n	80088b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f042 0201 	orr.w	r2, r2, #1
 80088b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	40010000 	.word	0x40010000
 80088c0:	40010400 	.word	0x40010400
 80088c4:	40000400 	.word	0x40000400
 80088c8:	40000800 	.word	0x40000800
 80088cc:	40000c00 	.word	0x40000c00
 80088d0:	40014000 	.word	0x40014000
 80088d4:	40001800 	.word	0x40001800

080088d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f003 0302 	and.w	r3, r3, #2
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d020      	beq.n	800893c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f003 0302 	and.w	r3, r3, #2
 8008900:	2b00      	cmp	r3, #0
 8008902:	d01b      	beq.n	800893c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f06f 0202 	mvn.w	r2, #2
 800890c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	f003 0303 	and.w	r3, r3, #3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d003      	beq.n	800892a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fa5b 	bl	8008dde <HAL_TIM_IC_CaptureCallback>
 8008928:	e005      	b.n	8008936 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fa4d 	bl	8008dca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fa5e 	bl	8008df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	f003 0304 	and.w	r3, r3, #4
 8008942:	2b00      	cmp	r3, #0
 8008944:	d020      	beq.n	8008988 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f003 0304 	and.w	r3, r3, #4
 800894c:	2b00      	cmp	r3, #0
 800894e:	d01b      	beq.n	8008988 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f06f 0204 	mvn.w	r2, #4
 8008958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2202      	movs	r2, #2
 800895e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800896a:	2b00      	cmp	r3, #0
 800896c:	d003      	beq.n	8008976 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fa35 	bl	8008dde <HAL_TIM_IC_CaptureCallback>
 8008974:	e005      	b.n	8008982 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fa27 	bl	8008dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fa38 	bl	8008df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	f003 0308 	and.w	r3, r3, #8
 800898e:	2b00      	cmp	r3, #0
 8008990:	d020      	beq.n	80089d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f003 0308 	and.w	r3, r3, #8
 8008998:	2b00      	cmp	r3, #0
 800899a:	d01b      	beq.n	80089d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f06f 0208 	mvn.w	r2, #8
 80089a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2204      	movs	r2, #4
 80089aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	f003 0303 	and.w	r3, r3, #3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d003      	beq.n	80089c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fa0f 	bl	8008dde <HAL_TIM_IC_CaptureCallback>
 80089c0:	e005      	b.n	80089ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fa01 	bl	8008dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fa12 	bl	8008df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	f003 0310 	and.w	r3, r3, #16
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d020      	beq.n	8008a20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f003 0310 	and.w	r3, r3, #16
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d01b      	beq.n	8008a20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f06f 0210 	mvn.w	r2, #16
 80089f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2208      	movs	r2, #8
 80089f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	69db      	ldr	r3, [r3, #28]
 80089fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f9e9 	bl	8008dde <HAL_TIM_IC_CaptureCallback>
 8008a0c:	e005      	b.n	8008a1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f9db 	bl	8008dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f9ec 	bl	8008df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	f003 0301 	and.w	r3, r3, #1
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00c      	beq.n	8008a44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f003 0301 	and.w	r3, r3, #1
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d007      	beq.n	8008a44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f06f 0201 	mvn.w	r2, #1
 8008a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f7fb f9c6 	bl	8003dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00c      	beq.n	8008a68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d007      	beq.n	8008a68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fd7c 	bl	8009560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00c      	beq.n	8008a8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d007      	beq.n	8008a8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f9bd 	bl	8008e06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	f003 0320 	and.w	r3, r3, #32
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00c      	beq.n	8008ab0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f003 0320 	and.w	r3, r3, #32
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d007      	beq.n	8008ab0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f06f 0220 	mvn.w	r2, #32
 8008aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fd4e 	bl	800954c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ab0:	bf00      	nop
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d101      	bne.n	8008ad6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	e0ae      	b.n	8008c34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2b0c      	cmp	r3, #12
 8008ae2:	f200 809f 	bhi.w	8008c24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8008aec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aec:	08008b21 	.word	0x08008b21
 8008af0:	08008c25 	.word	0x08008c25
 8008af4:	08008c25 	.word	0x08008c25
 8008af8:	08008c25 	.word	0x08008c25
 8008afc:	08008b61 	.word	0x08008b61
 8008b00:	08008c25 	.word	0x08008c25
 8008b04:	08008c25 	.word	0x08008c25
 8008b08:	08008c25 	.word	0x08008c25
 8008b0c:	08008ba3 	.word	0x08008ba3
 8008b10:	08008c25 	.word	0x08008c25
 8008b14:	08008c25 	.word	0x08008c25
 8008b18:	08008c25 	.word	0x08008c25
 8008b1c:	08008be3 	.word	0x08008be3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68b9      	ldr	r1, [r7, #8]
 8008b26:	4618      	mov	r0, r3
 8008b28:	f000 fa24 	bl	8008f74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	699a      	ldr	r2, [r3, #24]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f042 0208 	orr.w	r2, r2, #8
 8008b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	699a      	ldr	r2, [r3, #24]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f022 0204 	bic.w	r2, r2, #4
 8008b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6999      	ldr	r1, [r3, #24]
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	691a      	ldr	r2, [r3, #16]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	619a      	str	r2, [r3, #24]
      break;
 8008b5e:	e064      	b.n	8008c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68b9      	ldr	r1, [r7, #8]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 fa74 	bl	8009054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	699a      	ldr	r2, [r3, #24]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	699a      	ldr	r2, [r3, #24]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6999      	ldr	r1, [r3, #24]
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	021a      	lsls	r2, r3, #8
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	430a      	orrs	r2, r1
 8008b9e:	619a      	str	r2, [r3, #24]
      break;
 8008ba0:	e043      	b.n	8008c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68b9      	ldr	r1, [r7, #8]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 fac9 	bl	8009140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	69da      	ldr	r2, [r3, #28]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f042 0208 	orr.w	r2, r2, #8
 8008bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	69da      	ldr	r2, [r3, #28]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f022 0204 	bic.w	r2, r2, #4
 8008bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	69d9      	ldr	r1, [r3, #28]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	691a      	ldr	r2, [r3, #16]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	430a      	orrs	r2, r1
 8008bde:	61da      	str	r2, [r3, #28]
      break;
 8008be0:	e023      	b.n	8008c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68b9      	ldr	r1, [r7, #8]
 8008be8:	4618      	mov	r0, r3
 8008bea:	f000 fb1d 	bl	8009228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	69da      	ldr	r2, [r3, #28]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	69da      	ldr	r2, [r3, #28]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	69d9      	ldr	r1, [r3, #28]
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	021a      	lsls	r2, r3, #8
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	430a      	orrs	r2, r1
 8008c20:	61da      	str	r2, [r3, #28]
      break;
 8008c22:	e002      	b.n	8008c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	75fb      	strb	r3, [r7, #23]
      break;
 8008c28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3718      	adds	r7, #24
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c46:	2300      	movs	r3, #0
 8008c48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d101      	bne.n	8008c58 <HAL_TIM_ConfigClockSource+0x1c>
 8008c54:	2302      	movs	r3, #2
 8008c56:	e0b4      	b.n	8008dc2 <HAL_TIM_ConfigClockSource+0x186>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2202      	movs	r2, #2
 8008c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68ba      	ldr	r2, [r7, #8]
 8008c86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c90:	d03e      	beq.n	8008d10 <HAL_TIM_ConfigClockSource+0xd4>
 8008c92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c96:	f200 8087 	bhi.w	8008da8 <HAL_TIM_ConfigClockSource+0x16c>
 8008c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c9e:	f000 8086 	beq.w	8008dae <HAL_TIM_ConfigClockSource+0x172>
 8008ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ca6:	d87f      	bhi.n	8008da8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ca8:	2b70      	cmp	r3, #112	@ 0x70
 8008caa:	d01a      	beq.n	8008ce2 <HAL_TIM_ConfigClockSource+0xa6>
 8008cac:	2b70      	cmp	r3, #112	@ 0x70
 8008cae:	d87b      	bhi.n	8008da8 <HAL_TIM_ConfigClockSource+0x16c>
 8008cb0:	2b60      	cmp	r3, #96	@ 0x60
 8008cb2:	d050      	beq.n	8008d56 <HAL_TIM_ConfigClockSource+0x11a>
 8008cb4:	2b60      	cmp	r3, #96	@ 0x60
 8008cb6:	d877      	bhi.n	8008da8 <HAL_TIM_ConfigClockSource+0x16c>
 8008cb8:	2b50      	cmp	r3, #80	@ 0x50
 8008cba:	d03c      	beq.n	8008d36 <HAL_TIM_ConfigClockSource+0xfa>
 8008cbc:	2b50      	cmp	r3, #80	@ 0x50
 8008cbe:	d873      	bhi.n	8008da8 <HAL_TIM_ConfigClockSource+0x16c>
 8008cc0:	2b40      	cmp	r3, #64	@ 0x40
 8008cc2:	d058      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x13a>
 8008cc4:	2b40      	cmp	r3, #64	@ 0x40
 8008cc6:	d86f      	bhi.n	8008da8 <HAL_TIM_ConfigClockSource+0x16c>
 8008cc8:	2b30      	cmp	r3, #48	@ 0x30
 8008cca:	d064      	beq.n	8008d96 <HAL_TIM_ConfigClockSource+0x15a>
 8008ccc:	2b30      	cmp	r3, #48	@ 0x30
 8008cce:	d86b      	bhi.n	8008da8 <HAL_TIM_ConfigClockSource+0x16c>
 8008cd0:	2b20      	cmp	r3, #32
 8008cd2:	d060      	beq.n	8008d96 <HAL_TIM_ConfigClockSource+0x15a>
 8008cd4:	2b20      	cmp	r3, #32
 8008cd6:	d867      	bhi.n	8008da8 <HAL_TIM_ConfigClockSource+0x16c>
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d05c      	beq.n	8008d96 <HAL_TIM_ConfigClockSource+0x15a>
 8008cdc:	2b10      	cmp	r3, #16
 8008cde:	d05a      	beq.n	8008d96 <HAL_TIM_ConfigClockSource+0x15a>
 8008ce0:	e062      	b.n	8008da8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008cf2:	f000 fb69 	bl	80093c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008d04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	609a      	str	r2, [r3, #8]
      break;
 8008d0e:	e04f      	b.n	8008db0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d20:	f000 fb52 	bl	80093c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	689a      	ldr	r2, [r3, #8]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d32:	609a      	str	r2, [r3, #8]
      break;
 8008d34:	e03c      	b.n	8008db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d42:	461a      	mov	r2, r3
 8008d44:	f000 fac6 	bl	80092d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2150      	movs	r1, #80	@ 0x50
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 fb1f 	bl	8009392 <TIM_ITRx_SetConfig>
      break;
 8008d54:	e02c      	b.n	8008db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d62:	461a      	mov	r2, r3
 8008d64:	f000 fae5 	bl	8009332 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2160      	movs	r1, #96	@ 0x60
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 fb0f 	bl	8009392 <TIM_ITRx_SetConfig>
      break;
 8008d74:	e01c      	b.n	8008db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d82:	461a      	mov	r2, r3
 8008d84:	f000 faa6 	bl	80092d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2140      	movs	r1, #64	@ 0x40
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 faff 	bl	8009392 <TIM_ITRx_SetConfig>
      break;
 8008d94:	e00c      	b.n	8008db0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4619      	mov	r1, r3
 8008da0:	4610      	mov	r0, r2
 8008da2:	f000 faf6 	bl	8009392 <TIM_ITRx_SetConfig>
      break;
 8008da6:	e003      	b.n	8008db0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	73fb      	strb	r3, [r7, #15]
      break;
 8008dac:	e000      	b.n	8008db0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008dae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b083      	sub	sp, #12
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008dd2:	bf00      	nop
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008dde:	b480      	push	{r7}
 8008de0:	b083      	sub	sp, #12
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008de6:	bf00      	nop
 8008de8:	370c      	adds	r7, #12
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008df2:	b480      	push	{r7}
 8008df4:	b083      	sub	sp, #12
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008dfa:	bf00      	nop
 8008dfc:	370c      	adds	r7, #12
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr

08008e06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e06:	b480      	push	{r7}
 8008e08:	b083      	sub	sp, #12
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e0e:	bf00      	nop
 8008e10:	370c      	adds	r7, #12
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
	...

08008e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a46      	ldr	r2, [pc, #280]	@ (8008f48 <TIM_Base_SetConfig+0x12c>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d013      	beq.n	8008e5c <TIM_Base_SetConfig+0x40>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e3a:	d00f      	beq.n	8008e5c <TIM_Base_SetConfig+0x40>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a43      	ldr	r2, [pc, #268]	@ (8008f4c <TIM_Base_SetConfig+0x130>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d00b      	beq.n	8008e5c <TIM_Base_SetConfig+0x40>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a42      	ldr	r2, [pc, #264]	@ (8008f50 <TIM_Base_SetConfig+0x134>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d007      	beq.n	8008e5c <TIM_Base_SetConfig+0x40>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a41      	ldr	r2, [pc, #260]	@ (8008f54 <TIM_Base_SetConfig+0x138>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d003      	beq.n	8008e5c <TIM_Base_SetConfig+0x40>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a40      	ldr	r2, [pc, #256]	@ (8008f58 <TIM_Base_SetConfig+0x13c>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d108      	bne.n	8008e6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a35      	ldr	r2, [pc, #212]	@ (8008f48 <TIM_Base_SetConfig+0x12c>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d02b      	beq.n	8008ece <TIM_Base_SetConfig+0xb2>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e7c:	d027      	beq.n	8008ece <TIM_Base_SetConfig+0xb2>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a32      	ldr	r2, [pc, #200]	@ (8008f4c <TIM_Base_SetConfig+0x130>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d023      	beq.n	8008ece <TIM_Base_SetConfig+0xb2>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a31      	ldr	r2, [pc, #196]	@ (8008f50 <TIM_Base_SetConfig+0x134>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d01f      	beq.n	8008ece <TIM_Base_SetConfig+0xb2>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a30      	ldr	r2, [pc, #192]	@ (8008f54 <TIM_Base_SetConfig+0x138>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d01b      	beq.n	8008ece <TIM_Base_SetConfig+0xb2>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a2f      	ldr	r2, [pc, #188]	@ (8008f58 <TIM_Base_SetConfig+0x13c>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d017      	beq.n	8008ece <TIM_Base_SetConfig+0xb2>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8008f5c <TIM_Base_SetConfig+0x140>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d013      	beq.n	8008ece <TIM_Base_SetConfig+0xb2>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a2d      	ldr	r2, [pc, #180]	@ (8008f60 <TIM_Base_SetConfig+0x144>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d00f      	beq.n	8008ece <TIM_Base_SetConfig+0xb2>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4a2c      	ldr	r2, [pc, #176]	@ (8008f64 <TIM_Base_SetConfig+0x148>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d00b      	beq.n	8008ece <TIM_Base_SetConfig+0xb2>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a2b      	ldr	r2, [pc, #172]	@ (8008f68 <TIM_Base_SetConfig+0x14c>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d007      	beq.n	8008ece <TIM_Base_SetConfig+0xb2>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a2a      	ldr	r2, [pc, #168]	@ (8008f6c <TIM_Base_SetConfig+0x150>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d003      	beq.n	8008ece <TIM_Base_SetConfig+0xb2>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a29      	ldr	r2, [pc, #164]	@ (8008f70 <TIM_Base_SetConfig+0x154>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d108      	bne.n	8008ee0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	689a      	ldr	r2, [r3, #8]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a10      	ldr	r2, [pc, #64]	@ (8008f48 <TIM_Base_SetConfig+0x12c>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d003      	beq.n	8008f14 <TIM_Base_SetConfig+0xf8>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a12      	ldr	r2, [pc, #72]	@ (8008f58 <TIM_Base_SetConfig+0x13c>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d103      	bne.n	8008f1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	691a      	ldr	r2, [r3, #16]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	f003 0301 	and.w	r3, r3, #1
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d105      	bne.n	8008f3a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	f023 0201 	bic.w	r2, r3, #1
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	611a      	str	r2, [r3, #16]
  }
}
 8008f3a:	bf00      	nop
 8008f3c:	3714      	adds	r7, #20
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	40010000 	.word	0x40010000
 8008f4c:	40000400 	.word	0x40000400
 8008f50:	40000800 	.word	0x40000800
 8008f54:	40000c00 	.word	0x40000c00
 8008f58:	40010400 	.word	0x40010400
 8008f5c:	40014000 	.word	0x40014000
 8008f60:	40014400 	.word	0x40014400
 8008f64:	40014800 	.word	0x40014800
 8008f68:	40001800 	.word	0x40001800
 8008f6c:	40001c00 	.word	0x40001c00
 8008f70:	40002000 	.word	0x40002000

08008f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b087      	sub	sp, #28
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a1b      	ldr	r3, [r3, #32]
 8008f88:	f023 0201 	bic.w	r2, r3, #1
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f023 0303 	bic.w	r3, r3, #3
 8008faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	f023 0302 	bic.w	r3, r3, #2
 8008fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a20      	ldr	r2, [pc, #128]	@ (800904c <TIM_OC1_SetConfig+0xd8>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d003      	beq.n	8008fd8 <TIM_OC1_SetConfig+0x64>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8009050 <TIM_OC1_SetConfig+0xdc>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d10c      	bne.n	8008ff2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	f023 0308 	bic.w	r3, r3, #8
 8008fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	f023 0304 	bic.w	r3, r3, #4
 8008ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a15      	ldr	r2, [pc, #84]	@ (800904c <TIM_OC1_SetConfig+0xd8>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d003      	beq.n	8009002 <TIM_OC1_SetConfig+0x8e>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a14      	ldr	r2, [pc, #80]	@ (8009050 <TIM_OC1_SetConfig+0xdc>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d111      	bne.n	8009026 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	693a      	ldr	r2, [r7, #16]
 8009018:	4313      	orrs	r3, r2
 800901a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	699b      	ldr	r3, [r3, #24]
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	4313      	orrs	r3, r2
 8009024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	685a      	ldr	r2, [r3, #4]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	697a      	ldr	r2, [r7, #20]
 800903e:	621a      	str	r2, [r3, #32]
}
 8009040:	bf00      	nop
 8009042:	371c      	adds	r7, #28
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	40010000 	.word	0x40010000
 8009050:	40010400 	.word	0x40010400

08009054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009054:	b480      	push	{r7}
 8009056:	b087      	sub	sp, #28
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a1b      	ldr	r3, [r3, #32]
 8009068:	f023 0210 	bic.w	r2, r3, #16
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800908a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	021b      	lsls	r3, r3, #8
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	4313      	orrs	r3, r2
 8009096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	f023 0320 	bic.w	r3, r3, #32
 800909e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	011b      	lsls	r3, r3, #4
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a22      	ldr	r2, [pc, #136]	@ (8009138 <TIM_OC2_SetConfig+0xe4>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d003      	beq.n	80090bc <TIM_OC2_SetConfig+0x68>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a21      	ldr	r2, [pc, #132]	@ (800913c <TIM_OC2_SetConfig+0xe8>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d10d      	bne.n	80090d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	011b      	lsls	r3, r3, #4
 80090ca:	697a      	ldr	r2, [r7, #20]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a17      	ldr	r2, [pc, #92]	@ (8009138 <TIM_OC2_SetConfig+0xe4>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d003      	beq.n	80090e8 <TIM_OC2_SetConfig+0x94>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a16      	ldr	r2, [pc, #88]	@ (800913c <TIM_OC2_SetConfig+0xe8>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d113      	bne.n	8009110 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80090ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80090f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	695b      	ldr	r3, [r3, #20]
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	4313      	orrs	r3, r2
 8009102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	699b      	ldr	r3, [r3, #24]
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	693a      	ldr	r2, [r7, #16]
 800910c:	4313      	orrs	r3, r2
 800910e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	693a      	ldr	r2, [r7, #16]
 8009114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	685a      	ldr	r2, [r3, #4]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	621a      	str	r2, [r3, #32]
}
 800912a:	bf00      	nop
 800912c:	371c      	adds	r7, #28
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	40010000 	.word	0x40010000
 800913c:	40010400 	.word	0x40010400

08009140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009140:	b480      	push	{r7}
 8009142:	b087      	sub	sp, #28
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a1b      	ldr	r3, [r3, #32]
 800914e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a1b      	ldr	r3, [r3, #32]
 8009154:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	69db      	ldr	r3, [r3, #28]
 8009166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800916e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f023 0303 	bic.w	r3, r3, #3
 8009176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68fa      	ldr	r2, [r7, #12]
 800917e:	4313      	orrs	r3, r2
 8009180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	021b      	lsls	r3, r3, #8
 8009190:	697a      	ldr	r2, [r7, #20]
 8009192:	4313      	orrs	r3, r2
 8009194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a21      	ldr	r2, [pc, #132]	@ (8009220 <TIM_OC3_SetConfig+0xe0>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d003      	beq.n	80091a6 <TIM_OC3_SetConfig+0x66>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a20      	ldr	r2, [pc, #128]	@ (8009224 <TIM_OC3_SetConfig+0xe4>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d10d      	bne.n	80091c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80091ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	021b      	lsls	r3, r3, #8
 80091b4:	697a      	ldr	r2, [r7, #20]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80091c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a16      	ldr	r2, [pc, #88]	@ (8009220 <TIM_OC3_SetConfig+0xe0>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d003      	beq.n	80091d2 <TIM_OC3_SetConfig+0x92>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a15      	ldr	r2, [pc, #84]	@ (8009224 <TIM_OC3_SetConfig+0xe4>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d113      	bne.n	80091fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80091d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80091e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	695b      	ldr	r3, [r3, #20]
 80091e6:	011b      	lsls	r3, r3, #4
 80091e8:	693a      	ldr	r2, [r7, #16]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	699b      	ldr	r3, [r3, #24]
 80091f2:	011b      	lsls	r3, r3, #4
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	693a      	ldr	r2, [r7, #16]
 80091fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	685a      	ldr	r2, [r3, #4]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	621a      	str	r2, [r3, #32]
}
 8009214:	bf00      	nop
 8009216:	371c      	adds	r7, #28
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr
 8009220:	40010000 	.word	0x40010000
 8009224:	40010400 	.word	0x40010400

08009228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009228:	b480      	push	{r7}
 800922a:	b087      	sub	sp, #28
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6a1b      	ldr	r3, [r3, #32]
 800923c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	69db      	ldr	r3, [r3, #28]
 800924e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800925e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	021b      	lsls	r3, r3, #8
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	4313      	orrs	r3, r2
 800926a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	031b      	lsls	r3, r3, #12
 800927a:	693a      	ldr	r2, [r7, #16]
 800927c:	4313      	orrs	r3, r2
 800927e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a12      	ldr	r2, [pc, #72]	@ (80092cc <TIM_OC4_SetConfig+0xa4>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d003      	beq.n	8009290 <TIM_OC4_SetConfig+0x68>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a11      	ldr	r2, [pc, #68]	@ (80092d0 <TIM_OC4_SetConfig+0xa8>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d109      	bne.n	80092a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	695b      	ldr	r3, [r3, #20]
 800929c:	019b      	lsls	r3, r3, #6
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	685a      	ldr	r2, [r3, #4]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	693a      	ldr	r2, [r7, #16]
 80092bc:	621a      	str	r2, [r3, #32]
}
 80092be:	bf00      	nop
 80092c0:	371c      	adds	r7, #28
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	40010000 	.word	0x40010000
 80092d0:	40010400 	.word	0x40010400

080092d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b087      	sub	sp, #28
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6a1b      	ldr	r3, [r3, #32]
 80092e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6a1b      	ldr	r3, [r3, #32]
 80092ea:	f023 0201 	bic.w	r2, r3, #1
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80092fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	011b      	lsls	r3, r3, #4
 8009304:	693a      	ldr	r2, [r7, #16]
 8009306:	4313      	orrs	r3, r2
 8009308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	f023 030a 	bic.w	r3, r3, #10
 8009310:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	4313      	orrs	r3, r2
 8009318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	693a      	ldr	r2, [r7, #16]
 800931e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	621a      	str	r2, [r3, #32]
}
 8009326:	bf00      	nop
 8009328:	371c      	adds	r7, #28
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr

08009332 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009332:	b480      	push	{r7}
 8009334:	b087      	sub	sp, #28
 8009336:	af00      	add	r7, sp, #0
 8009338:	60f8      	str	r0, [r7, #12]
 800933a:	60b9      	str	r1, [r7, #8]
 800933c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6a1b      	ldr	r3, [r3, #32]
 8009342:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6a1b      	ldr	r3, [r3, #32]
 8009348:	f023 0210 	bic.w	r2, r3, #16
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800935c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	031b      	lsls	r3, r3, #12
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	4313      	orrs	r3, r2
 8009366:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800936e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	011b      	lsls	r3, r3, #4
 8009374:	697a      	ldr	r2, [r7, #20]
 8009376:	4313      	orrs	r3, r2
 8009378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	697a      	ldr	r2, [r7, #20]
 8009384:	621a      	str	r2, [r3, #32]
}
 8009386:	bf00      	nop
 8009388:	371c      	adds	r7, #28
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009392:	b480      	push	{r7}
 8009394:	b085      	sub	sp, #20
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
 800939a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	f043 0307 	orr.w	r3, r3, #7
 80093b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	609a      	str	r2, [r3, #8]
}
 80093bc:	bf00      	nop
 80093be:	3714      	adds	r7, #20
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b087      	sub	sp, #28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
 80093d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80093e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	021a      	lsls	r2, r3, #8
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	431a      	orrs	r2, r3
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	697a      	ldr	r2, [r7, #20]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	697a      	ldr	r2, [r7, #20]
 80093fa:	609a      	str	r2, [r3, #8]
}
 80093fc:	bf00      	nop
 80093fe:	371c      	adds	r7, #28
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009408:	b480      	push	{r7}
 800940a:	b087      	sub	sp, #28
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	f003 031f 	and.w	r3, r3, #31
 800941a:	2201      	movs	r2, #1
 800941c:	fa02 f303 	lsl.w	r3, r2, r3
 8009420:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6a1a      	ldr	r2, [r3, #32]
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	43db      	mvns	r3, r3
 800942a:	401a      	ands	r2, r3
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6a1a      	ldr	r2, [r3, #32]
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	f003 031f 	and.w	r3, r3, #31
 800943a:	6879      	ldr	r1, [r7, #4]
 800943c:	fa01 f303 	lsl.w	r3, r1, r3
 8009440:	431a      	orrs	r2, r3
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	621a      	str	r2, [r3, #32]
}
 8009446:	bf00      	nop
 8009448:	371c      	adds	r7, #28
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
	...

08009454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009464:	2b01      	cmp	r3, #1
 8009466:	d101      	bne.n	800946c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009468:	2302      	movs	r3, #2
 800946a:	e05a      	b.n	8009522 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2202      	movs	r2, #2
 8009478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	4313      	orrs	r3, r2
 800949c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a21      	ldr	r2, [pc, #132]	@ (8009530 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d022      	beq.n	80094f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094b8:	d01d      	beq.n	80094f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a1d      	ldr	r2, [pc, #116]	@ (8009534 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d018      	beq.n	80094f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a1b      	ldr	r2, [pc, #108]	@ (8009538 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d013      	beq.n	80094f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a1a      	ldr	r2, [pc, #104]	@ (800953c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d00e      	beq.n	80094f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a18      	ldr	r2, [pc, #96]	@ (8009540 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d009      	beq.n	80094f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a17      	ldr	r2, [pc, #92]	@ (8009544 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d004      	beq.n	80094f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a15      	ldr	r2, [pc, #84]	@ (8009548 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d10c      	bne.n	8009510 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	4313      	orrs	r3, r2
 8009506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3714      	adds	r7, #20
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	40010000 	.word	0x40010000
 8009534:	40000400 	.word	0x40000400
 8009538:	40000800 	.word	0x40000800
 800953c:	40000c00 	.word	0x40000c00
 8009540:	40010400 	.word	0x40010400
 8009544:	40014000 	.word	0x40014000
 8009548:	40001800 	.word	0x40001800

0800954c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009554:	bf00      	nop
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d101      	bne.n	8009586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	e042      	b.n	800960c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800958c:	b2db      	uxtb	r3, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	d106      	bne.n	80095a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f7fa fd30 	bl	8004000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2224      	movs	r2, #36	@ 0x24
 80095a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68da      	ldr	r2, [r3, #12]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80095b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 fdff 	bl	800a1bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	691a      	ldr	r2, [r3, #16]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80095cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	695a      	ldr	r2, [r3, #20]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80095dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68da      	ldr	r2, [r3, #12]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80095ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2220      	movs	r2, #32
 80095f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2220      	movs	r2, #32
 8009600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b08a      	sub	sp, #40	@ 0x28
 8009618:	af02      	add	r7, sp, #8
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	60b9      	str	r1, [r7, #8]
 800961e:	603b      	str	r3, [r7, #0]
 8009620:	4613      	mov	r3, r2
 8009622:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009624:	2300      	movs	r3, #0
 8009626:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800962e:	b2db      	uxtb	r3, r3
 8009630:	2b20      	cmp	r3, #32
 8009632:	d175      	bne.n	8009720 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d002      	beq.n	8009640 <HAL_UART_Transmit+0x2c>
 800963a:	88fb      	ldrh	r3, [r7, #6]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d101      	bne.n	8009644 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	e06e      	b.n	8009722 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2221      	movs	r2, #33	@ 0x21
 800964e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009652:	f7fa fef9 	bl	8004448 <HAL_GetTick>
 8009656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	88fa      	ldrh	r2, [r7, #6]
 800965c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	88fa      	ldrh	r2, [r7, #6]
 8009662:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800966c:	d108      	bne.n	8009680 <HAL_UART_Transmit+0x6c>
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d104      	bne.n	8009680 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009676:	2300      	movs	r3, #0
 8009678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	61bb      	str	r3, [r7, #24]
 800967e:	e003      	b.n	8009688 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009684:	2300      	movs	r3, #0
 8009686:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009688:	e02e      	b.n	80096e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	9300      	str	r3, [sp, #0]
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	2200      	movs	r2, #0
 8009692:	2180      	movs	r1, #128	@ 0x80
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f000 fb9b 	bl	8009dd0 <UART_WaitOnFlagUntilTimeout>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d005      	beq.n	80096ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2220      	movs	r2, #32
 80096a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80096a8:	2303      	movs	r3, #3
 80096aa:	e03a      	b.n	8009722 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d10b      	bne.n	80096ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	881b      	ldrh	r3, [r3, #0]
 80096b6:	461a      	mov	r2, r3
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	3302      	adds	r3, #2
 80096c6:	61bb      	str	r3, [r7, #24]
 80096c8:	e007      	b.n	80096da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	781a      	ldrb	r2, [r3, #0]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	3301      	adds	r3, #1
 80096d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80096de:	b29b      	uxth	r3, r3
 80096e0:	3b01      	subs	r3, #1
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1cb      	bne.n	800968a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	2200      	movs	r2, #0
 80096fa:	2140      	movs	r1, #64	@ 0x40
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f000 fb67 	bl	8009dd0 <UART_WaitOnFlagUntilTimeout>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d005      	beq.n	8009714 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2220      	movs	r2, #32
 800970c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009710:	2303      	movs	r3, #3
 8009712:	e006      	b.n	8009722 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2220      	movs	r2, #32
 8009718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800971c:	2300      	movs	r3, #0
 800971e:	e000      	b.n	8009722 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009720:	2302      	movs	r3, #2
  }
}
 8009722:	4618      	mov	r0, r3
 8009724:	3720      	adds	r7, #32
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b08a      	sub	sp, #40	@ 0x28
 800972e:	af02      	add	r7, sp, #8
 8009730:	60f8      	str	r0, [r7, #12]
 8009732:	60b9      	str	r1, [r7, #8]
 8009734:	603b      	str	r3, [r7, #0]
 8009736:	4613      	mov	r3, r2
 8009738:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800973a:	2300      	movs	r3, #0
 800973c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009744:	b2db      	uxtb	r3, r3
 8009746:	2b20      	cmp	r3, #32
 8009748:	f040 8081 	bne.w	800984e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d002      	beq.n	8009758 <HAL_UART_Receive+0x2e>
 8009752:	88fb      	ldrh	r3, [r7, #6]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d101      	bne.n	800975c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	e079      	b.n	8009850 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2200      	movs	r2, #0
 8009760:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2222      	movs	r2, #34	@ 0x22
 8009766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2200      	movs	r2, #0
 800976e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009770:	f7fa fe6a 	bl	8004448 <HAL_GetTick>
 8009774:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	88fa      	ldrh	r2, [r7, #6]
 800977a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	88fa      	ldrh	r2, [r7, #6]
 8009780:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800978a:	d108      	bne.n	800979e <HAL_UART_Receive+0x74>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d104      	bne.n	800979e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8009794:	2300      	movs	r3, #0
 8009796:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	61bb      	str	r3, [r7, #24]
 800979c:	e003      	b.n	80097a6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097a2:	2300      	movs	r3, #0
 80097a4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80097a6:	e047      	b.n	8009838 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	2200      	movs	r2, #0
 80097b0:	2120      	movs	r1, #32
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f000 fb0c 	bl	8009dd0 <UART_WaitOnFlagUntilTimeout>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d005      	beq.n	80097ca <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2220      	movs	r2, #32
 80097c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80097c6:	2303      	movs	r3, #3
 80097c8:	e042      	b.n	8009850 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80097ca:	69fb      	ldr	r3, [r7, #28]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d10c      	bne.n	80097ea <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097dc:	b29a      	uxth	r2, r3
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	3302      	adds	r3, #2
 80097e6:	61bb      	str	r3, [r7, #24]
 80097e8:	e01f      	b.n	800982a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097f2:	d007      	beq.n	8009804 <HAL_UART_Receive+0xda>
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d10a      	bne.n	8009812 <HAL_UART_Receive+0xe8>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d106      	bne.n	8009812 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	b2da      	uxtb	r2, r3
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	701a      	strb	r2, [r3, #0]
 8009810:	e008      	b.n	8009824 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	b2db      	uxtb	r3, r3
 800981a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800981e:	b2da      	uxtb	r2, r3
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	3301      	adds	r3, #1
 8009828:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800982e:	b29b      	uxth	r3, r3
 8009830:	3b01      	subs	r3, #1
 8009832:	b29a      	uxth	r2, r3
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800983c:	b29b      	uxth	r3, r3
 800983e:	2b00      	cmp	r3, #0
 8009840:	d1b2      	bne.n	80097a8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2220      	movs	r2, #32
 8009846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800984a:	2300      	movs	r3, #0
 800984c:	e000      	b.n	8009850 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800984e:	2302      	movs	r3, #2
  }
}
 8009850:	4618      	mov	r0, r3
 8009852:	3720      	adds	r7, #32
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b0ba      	sub	sp, #232	@ 0xe8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	695b      	ldr	r3, [r3, #20]
 800987a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800987e:	2300      	movs	r3, #0
 8009880:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009884:	2300      	movs	r3, #0
 8009886:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800988a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800988e:	f003 030f 	and.w	r3, r3, #15
 8009892:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800989a:	2b00      	cmp	r3, #0
 800989c:	d10f      	bne.n	80098be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800989e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098a2:	f003 0320 	and.w	r3, r3, #32
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d009      	beq.n	80098be <HAL_UART_IRQHandler+0x66>
 80098aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098ae:	f003 0320 	and.w	r3, r3, #32
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d003      	beq.n	80098be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fbc2 	bl	800a040 <UART_Receive_IT>
      return;
 80098bc:	e25b      	b.n	8009d76 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80098be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f000 80de 	beq.w	8009a84 <HAL_UART_IRQHandler+0x22c>
 80098c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098cc:	f003 0301 	and.w	r3, r3, #1
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d106      	bne.n	80098e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80098d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f000 80d1 	beq.w	8009a84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80098e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098e6:	f003 0301 	and.w	r3, r3, #1
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d00b      	beq.n	8009906 <HAL_UART_IRQHandler+0xae>
 80098ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d005      	beq.n	8009906 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098fe:	f043 0201 	orr.w	r2, r3, #1
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800990a:	f003 0304 	and.w	r3, r3, #4
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00b      	beq.n	800992a <HAL_UART_IRQHandler+0xd2>
 8009912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009916:	f003 0301 	and.w	r3, r3, #1
 800991a:	2b00      	cmp	r3, #0
 800991c:	d005      	beq.n	800992a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009922:	f043 0202 	orr.w	r2, r3, #2
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800992a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800992e:	f003 0302 	and.w	r3, r3, #2
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00b      	beq.n	800994e <HAL_UART_IRQHandler+0xf6>
 8009936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	2b00      	cmp	r3, #0
 8009940:	d005      	beq.n	800994e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009946:	f043 0204 	orr.w	r2, r3, #4
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800994e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009952:	f003 0308 	and.w	r3, r3, #8
 8009956:	2b00      	cmp	r3, #0
 8009958:	d011      	beq.n	800997e <HAL_UART_IRQHandler+0x126>
 800995a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800995e:	f003 0320 	and.w	r3, r3, #32
 8009962:	2b00      	cmp	r3, #0
 8009964:	d105      	bne.n	8009972 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800996a:	f003 0301 	and.w	r3, r3, #1
 800996e:	2b00      	cmp	r3, #0
 8009970:	d005      	beq.n	800997e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009976:	f043 0208 	orr.w	r2, r3, #8
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009982:	2b00      	cmp	r3, #0
 8009984:	f000 81f2 	beq.w	8009d6c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800998c:	f003 0320 	and.w	r3, r3, #32
 8009990:	2b00      	cmp	r3, #0
 8009992:	d008      	beq.n	80099a6 <HAL_UART_IRQHandler+0x14e>
 8009994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009998:	f003 0320 	and.w	r3, r3, #32
 800999c:	2b00      	cmp	r3, #0
 800999e:	d002      	beq.n	80099a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fb4d 	bl	800a040 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	695b      	ldr	r3, [r3, #20]
 80099ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099b0:	2b40      	cmp	r3, #64	@ 0x40
 80099b2:	bf0c      	ite	eq
 80099b4:	2301      	moveq	r3, #1
 80099b6:	2300      	movne	r3, #0
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099c2:	f003 0308 	and.w	r3, r3, #8
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d103      	bne.n	80099d2 <HAL_UART_IRQHandler+0x17a>
 80099ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d04f      	beq.n	8009a72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 fa55 	bl	8009e82 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	695b      	ldr	r3, [r3, #20]
 80099de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099e2:	2b40      	cmp	r3, #64	@ 0x40
 80099e4:	d141      	bne.n	8009a6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3314      	adds	r3, #20
 80099ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80099f4:	e853 3f00 	ldrex	r3, [r3]
 80099f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80099fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	3314      	adds	r3, #20
 8009a0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009a12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009a16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009a1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009a22:	e841 2300 	strex	r3, r2, [r1]
 8009a26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009a2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1d9      	bne.n	80099e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d013      	beq.n	8009a62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a3e:	4a7e      	ldr	r2, [pc, #504]	@ (8009c38 <HAL_UART_IRQHandler+0x3e0>)
 8009a40:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7fa feaf 	bl	80047aa <HAL_DMA_Abort_IT>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d016      	beq.n	8009a80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009a5c:	4610      	mov	r0, r2
 8009a5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a60:	e00e      	b.n	8009a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 f99e 	bl	8009da4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a68:	e00a      	b.n	8009a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f99a 	bl	8009da4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a70:	e006      	b.n	8009a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f996 	bl	8009da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009a7e:	e175      	b.n	8009d6c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a80:	bf00      	nop
    return;
 8009a82:	e173      	b.n	8009d6c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	f040 814f 	bne.w	8009d2c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a92:	f003 0310 	and.w	r3, r3, #16
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f000 8148 	beq.w	8009d2c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009aa0:	f003 0310 	and.w	r3, r3, #16
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	f000 8141 	beq.w	8009d2c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009aaa:	2300      	movs	r3, #0
 8009aac:	60bb      	str	r3, [r7, #8]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	60bb      	str	r3, [r7, #8]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	60bb      	str	r3, [r7, #8]
 8009abe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	695b      	ldr	r3, [r3, #20]
 8009ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009aca:	2b40      	cmp	r3, #64	@ 0x40
 8009acc:	f040 80b6 	bne.w	8009c3c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009adc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f000 8145 	beq.w	8009d70 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009aea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009aee:	429a      	cmp	r2, r3
 8009af0:	f080 813e 	bcs.w	8009d70 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009afa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b00:	69db      	ldr	r3, [r3, #28]
 8009b02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b06:	f000 8088 	beq.w	8009c1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	330c      	adds	r3, #12
 8009b10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b18:	e853 3f00 	ldrex	r3, [r3]
 8009b1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009b20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	330c      	adds	r3, #12
 8009b32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009b36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009b3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009b42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009b46:	e841 2300 	strex	r3, r2, [r1]
 8009b4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1d9      	bne.n	8009b0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	3314      	adds	r3, #20
 8009b5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b60:	e853 3f00 	ldrex	r3, [r3]
 8009b64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009b66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b68:	f023 0301 	bic.w	r3, r3, #1
 8009b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	3314      	adds	r3, #20
 8009b76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009b7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009b7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009b82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009b86:	e841 2300 	strex	r3, r2, [r1]
 8009b8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009b8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1e1      	bne.n	8009b56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	3314      	adds	r3, #20
 8009b98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b9c:	e853 3f00 	ldrex	r3, [r3]
 8009ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009ba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	3314      	adds	r3, #20
 8009bb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009bb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009bbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009bbe:	e841 2300 	strex	r3, r2, [r1]
 8009bc2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009bc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1e3      	bne.n	8009b92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2220      	movs	r2, #32
 8009bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	330c      	adds	r3, #12
 8009bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009be2:	e853 3f00 	ldrex	r3, [r3]
 8009be6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009be8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bea:	f023 0310 	bic.w	r3, r3, #16
 8009bee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	330c      	adds	r3, #12
 8009bf8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009bfc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009bfe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c04:	e841 2300 	strex	r3, r2, [r1]
 8009c08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d1e3      	bne.n	8009bd8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7fa fd58 	bl	80046ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	4619      	mov	r1, r3
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 f8c1 	bl	8009db8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009c36:	e09b      	b.n	8009d70 <HAL_UART_IRQHandler+0x518>
 8009c38:	08009f49 	.word	0x08009f49
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	1ad3      	subs	r3, r2, r3
 8009c48:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f000 808e 	beq.w	8009d74 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009c58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f000 8089 	beq.w	8009d74 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	330c      	adds	r3, #12
 8009c68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c6c:	e853 3f00 	ldrex	r3, [r3]
 8009c70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	330c      	adds	r3, #12
 8009c82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009c86:	647a      	str	r2, [r7, #68]	@ 0x44
 8009c88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c8e:	e841 2300 	strex	r3, r2, [r1]
 8009c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1e3      	bne.n	8009c62 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	3314      	adds	r3, #20
 8009ca0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca4:	e853 3f00 	ldrex	r3, [r3]
 8009ca8:	623b      	str	r3, [r7, #32]
   return(result);
 8009caa:	6a3b      	ldr	r3, [r7, #32]
 8009cac:	f023 0301 	bic.w	r3, r3, #1
 8009cb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	3314      	adds	r3, #20
 8009cba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009cbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8009cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009cc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cc6:	e841 2300 	strex	r3, r2, [r1]
 8009cca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d1e3      	bne.n	8009c9a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2220      	movs	r2, #32
 8009cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	330c      	adds	r3, #12
 8009ce6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	e853 3f00 	ldrex	r3, [r3]
 8009cee:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f023 0310 	bic.w	r3, r3, #16
 8009cf6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	330c      	adds	r3, #12
 8009d00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009d04:	61fa      	str	r2, [r7, #28]
 8009d06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d08:	69b9      	ldr	r1, [r7, #24]
 8009d0a:	69fa      	ldr	r2, [r7, #28]
 8009d0c:	e841 2300 	strex	r3, r2, [r1]
 8009d10:	617b      	str	r3, [r7, #20]
   return(result);
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1e3      	bne.n	8009ce0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2202      	movs	r2, #2
 8009d1c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009d22:	4619      	mov	r1, r3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 f847 	bl	8009db8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009d2a:	e023      	b.n	8009d74 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d009      	beq.n	8009d4c <HAL_UART_IRQHandler+0x4f4>
 8009d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d003      	beq.n	8009d4c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 f913 	bl	8009f70 <UART_Transmit_IT>
    return;
 8009d4a:	e014      	b.n	8009d76 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00e      	beq.n	8009d76 <HAL_UART_IRQHandler+0x51e>
 8009d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d008      	beq.n	8009d76 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 f953 	bl	800a010 <UART_EndTransmit_IT>
    return;
 8009d6a:	e004      	b.n	8009d76 <HAL_UART_IRQHandler+0x51e>
    return;
 8009d6c:	bf00      	nop
 8009d6e:	e002      	b.n	8009d76 <HAL_UART_IRQHandler+0x51e>
      return;
 8009d70:	bf00      	nop
 8009d72:	e000      	b.n	8009d76 <HAL_UART_IRQHandler+0x51e>
      return;
 8009d74:	bf00      	nop
  }
}
 8009d76:	37e8      	adds	r7, #232	@ 0xe8
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009d84:	bf00      	nop
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009dac:	bf00      	nop
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009dc4:	bf00      	nop
 8009dc6:	370c      	adds	r7, #12
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	603b      	str	r3, [r7, #0]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009de0:	e03b      	b.n	8009e5a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009de2:	6a3b      	ldr	r3, [r7, #32]
 8009de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de8:	d037      	beq.n	8009e5a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dea:	f7fa fb2d 	bl	8004448 <HAL_GetTick>
 8009dee:	4602      	mov	r2, r0
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	1ad3      	subs	r3, r2, r3
 8009df4:	6a3a      	ldr	r2, [r7, #32]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d302      	bcc.n	8009e00 <UART_WaitOnFlagUntilTimeout+0x30>
 8009dfa:	6a3b      	ldr	r3, [r7, #32]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d101      	bne.n	8009e04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e00:	2303      	movs	r3, #3
 8009e02:	e03a      	b.n	8009e7a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	f003 0304 	and.w	r3, r3, #4
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d023      	beq.n	8009e5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	2b80      	cmp	r3, #128	@ 0x80
 8009e16:	d020      	beq.n	8009e5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	2b40      	cmp	r3, #64	@ 0x40
 8009e1c:	d01d      	beq.n	8009e5a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f003 0308 	and.w	r3, r3, #8
 8009e28:	2b08      	cmp	r3, #8
 8009e2a:	d116      	bne.n	8009e5a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	617b      	str	r3, [r7, #20]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	617b      	str	r3, [r7, #20]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	617b      	str	r3, [r7, #20]
 8009e40:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e42:	68f8      	ldr	r0, [r7, #12]
 8009e44:	f000 f81d 	bl	8009e82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2208      	movs	r2, #8
 8009e4c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2200      	movs	r2, #0
 8009e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	e00f      	b.n	8009e7a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	4013      	ands	r3, r2
 8009e64:	68ba      	ldr	r2, [r7, #8]
 8009e66:	429a      	cmp	r2, r3
 8009e68:	bf0c      	ite	eq
 8009e6a:	2301      	moveq	r3, #1
 8009e6c:	2300      	movne	r3, #0
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	461a      	mov	r2, r3
 8009e72:	79fb      	ldrb	r3, [r7, #7]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d0b4      	beq.n	8009de2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e78:	2300      	movs	r3, #0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3718      	adds	r7, #24
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}

08009e82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e82:	b480      	push	{r7}
 8009e84:	b095      	sub	sp, #84	@ 0x54
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	330c      	adds	r3, #12
 8009e90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e94:	e853 3f00 	ldrex	r3, [r3]
 8009e98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	330c      	adds	r3, #12
 8009ea8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009eaa:	643a      	str	r2, [r7, #64]	@ 0x40
 8009eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009eb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009eb2:	e841 2300 	strex	r3, r2, [r1]
 8009eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1e5      	bne.n	8009e8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3314      	adds	r3, #20
 8009ec4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec6:	6a3b      	ldr	r3, [r7, #32]
 8009ec8:	e853 3f00 	ldrex	r3, [r3]
 8009ecc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	f023 0301 	bic.w	r3, r3, #1
 8009ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	3314      	adds	r3, #20
 8009edc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ede:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ee4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ee6:	e841 2300 	strex	r3, r2, [r1]
 8009eea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1e5      	bne.n	8009ebe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d119      	bne.n	8009f2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	330c      	adds	r3, #12
 8009f00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	e853 3f00 	ldrex	r3, [r3]
 8009f08:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	f023 0310 	bic.w	r3, r3, #16
 8009f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	330c      	adds	r3, #12
 8009f18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f1a:	61ba      	str	r2, [r7, #24]
 8009f1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1e:	6979      	ldr	r1, [r7, #20]
 8009f20:	69ba      	ldr	r2, [r7, #24]
 8009f22:	e841 2300 	strex	r3, r2, [r1]
 8009f26:	613b      	str	r3, [r7, #16]
   return(result);
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1e5      	bne.n	8009efa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2220      	movs	r2, #32
 8009f32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009f3c:	bf00      	nop
 8009f3e:	3754      	adds	r7, #84	@ 0x54
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f62:	68f8      	ldr	r0, [r7, #12]
 8009f64:	f7ff ff1e 	bl	8009da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f68:	bf00      	nop
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b085      	sub	sp, #20
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	2b21      	cmp	r3, #33	@ 0x21
 8009f82:	d13e      	bne.n	800a002 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f8c:	d114      	bne.n	8009fb8 <UART_Transmit_IT+0x48>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d110      	bne.n	8009fb8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	881b      	ldrh	r3, [r3, #0]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009faa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6a1b      	ldr	r3, [r3, #32]
 8009fb0:	1c9a      	adds	r2, r3, #2
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	621a      	str	r2, [r3, #32]
 8009fb6:	e008      	b.n	8009fca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6a1b      	ldr	r3, [r3, #32]
 8009fbc:	1c59      	adds	r1, r3, #1
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	6211      	str	r1, [r2, #32]
 8009fc2:	781a      	ldrb	r2, [r3, #0]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10f      	bne.n	8009ffe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68da      	ldr	r2, [r3, #12]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009fec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68da      	ldr	r2, [r3, #12]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ffc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009ffe:	2300      	movs	r3, #0
 800a000:	e000      	b.n	800a004 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a002:	2302      	movs	r3, #2
  }
}
 800a004:	4618      	mov	r0, r3
 800a006:	3714      	adds	r7, #20
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68da      	ldr	r2, [r3, #12]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a026:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2220      	movs	r2, #32
 800a02c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f7ff fea3 	bl	8009d7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b08c      	sub	sp, #48	@ 0x30
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	2b22      	cmp	r3, #34	@ 0x22
 800a052:	f040 80ae 	bne.w	800a1b2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a05e:	d117      	bne.n	800a090 <UART_Receive_IT+0x50>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	691b      	ldr	r3, [r3, #16]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d113      	bne.n	800a090 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a068:	2300      	movs	r3, #0
 800a06a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a070:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	b29b      	uxth	r3, r3
 800a07a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a07e:	b29a      	uxth	r2, r3
 800a080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a082:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a088:	1c9a      	adds	r2, r3, #2
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	629a      	str	r2, [r3, #40]	@ 0x28
 800a08e:	e026      	b.n	800a0de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a094:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a096:	2300      	movs	r3, #0
 800a098:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0a2:	d007      	beq.n	800a0b4 <UART_Receive_IT+0x74>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10a      	bne.n	800a0c2 <UART_Receive_IT+0x82>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d106      	bne.n	800a0c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	b2da      	uxtb	r2, r3
 800a0bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0be:	701a      	strb	r2, [r3, #0]
 800a0c0:	e008      	b.n	800a0d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0ce:	b2da      	uxtb	r2, r3
 800a0d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0d8:	1c5a      	adds	r2, r3, #1
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d15d      	bne.n	800a1ae <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68da      	ldr	r2, [r3, #12]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f022 0220 	bic.w	r2, r2, #32
 800a100:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68da      	ldr	r2, [r3, #12]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a110:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	695a      	ldr	r2, [r3, #20]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f022 0201 	bic.w	r2, r2, #1
 800a120:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2220      	movs	r2, #32
 800a126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a134:	2b01      	cmp	r3, #1
 800a136:	d135      	bne.n	800a1a4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	330c      	adds	r3, #12
 800a144:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	e853 3f00 	ldrex	r3, [r3]
 800a14c:	613b      	str	r3, [r7, #16]
   return(result);
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	f023 0310 	bic.w	r3, r3, #16
 800a154:	627b      	str	r3, [r7, #36]	@ 0x24
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	330c      	adds	r3, #12
 800a15c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a15e:	623a      	str	r2, [r7, #32]
 800a160:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a162:	69f9      	ldr	r1, [r7, #28]
 800a164:	6a3a      	ldr	r2, [r7, #32]
 800a166:	e841 2300 	strex	r3, r2, [r1]
 800a16a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d1e5      	bne.n	800a13e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f003 0310 	and.w	r3, r3, #16
 800a17c:	2b10      	cmp	r3, #16
 800a17e:	d10a      	bne.n	800a196 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a180:	2300      	movs	r3, #0
 800a182:	60fb      	str	r3, [r7, #12]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	60fb      	str	r3, [r7, #12]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	60fb      	str	r3, [r7, #12]
 800a194:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a19a:	4619      	mov	r1, r3
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7ff fe0b 	bl	8009db8 <HAL_UARTEx_RxEventCallback>
 800a1a2:	e002      	b.n	800a1aa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f7ff fdf3 	bl	8009d90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	e002      	b.n	800a1b4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	e000      	b.n	800a1b4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a1b2:	2302      	movs	r3, #2
  }
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3730      	adds	r7, #48	@ 0x30
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a1bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a1c0:	b0c0      	sub	sp, #256	@ 0x100
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	691b      	ldr	r3, [r3, #16]
 800a1d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a1d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1d8:	68d9      	ldr	r1, [r3, #12]
 800a1da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	ea40 0301 	orr.w	r3, r0, r1
 800a1e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a1e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1ea:	689a      	ldr	r2, [r3, #8]
 800a1ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	431a      	orrs	r2, r3
 800a1f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	431a      	orrs	r2, r3
 800a1fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a200:	69db      	ldr	r3, [r3, #28]
 800a202:	4313      	orrs	r3, r2
 800a204:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a214:	f021 010c 	bic.w	r1, r1, #12
 800a218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a222:	430b      	orrs	r3, r1
 800a224:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	695b      	ldr	r3, [r3, #20]
 800a22e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a236:	6999      	ldr	r1, [r3, #24]
 800a238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	ea40 0301 	orr.w	r3, r0, r1
 800a242:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	4b8f      	ldr	r3, [pc, #572]	@ (800a488 <UART_SetConfig+0x2cc>)
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d005      	beq.n	800a25c <UART_SetConfig+0xa0>
 800a250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	4b8d      	ldr	r3, [pc, #564]	@ (800a48c <UART_SetConfig+0x2d0>)
 800a258:	429a      	cmp	r2, r3
 800a25a:	d104      	bne.n	800a266 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a25c:	f7fd fc88 	bl	8007b70 <HAL_RCC_GetPCLK2Freq>
 800a260:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a264:	e003      	b.n	800a26e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a266:	f7fd fc6f 	bl	8007b48 <HAL_RCC_GetPCLK1Freq>
 800a26a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a26e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a272:	69db      	ldr	r3, [r3, #28]
 800a274:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a278:	f040 810c 	bne.w	800a494 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a27c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a280:	2200      	movs	r2, #0
 800a282:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a286:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a28a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a28e:	4622      	mov	r2, r4
 800a290:	462b      	mov	r3, r5
 800a292:	1891      	adds	r1, r2, r2
 800a294:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a296:	415b      	adcs	r3, r3
 800a298:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a29a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a29e:	4621      	mov	r1, r4
 800a2a0:	eb12 0801 	adds.w	r8, r2, r1
 800a2a4:	4629      	mov	r1, r5
 800a2a6:	eb43 0901 	adc.w	r9, r3, r1
 800a2aa:	f04f 0200 	mov.w	r2, #0
 800a2ae:	f04f 0300 	mov.w	r3, #0
 800a2b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a2b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a2ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a2be:	4690      	mov	r8, r2
 800a2c0:	4699      	mov	r9, r3
 800a2c2:	4623      	mov	r3, r4
 800a2c4:	eb18 0303 	adds.w	r3, r8, r3
 800a2c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a2cc:	462b      	mov	r3, r5
 800a2ce:	eb49 0303 	adc.w	r3, r9, r3
 800a2d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a2d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a2e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a2e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	18db      	adds	r3, r3, r3
 800a2ee:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	eb42 0303 	adc.w	r3, r2, r3
 800a2f6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a2f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a2fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a300:	f7f5 ffce 	bl	80002a0 <__aeabi_uldivmod>
 800a304:	4602      	mov	r2, r0
 800a306:	460b      	mov	r3, r1
 800a308:	4b61      	ldr	r3, [pc, #388]	@ (800a490 <UART_SetConfig+0x2d4>)
 800a30a:	fba3 2302 	umull	r2, r3, r3, r2
 800a30e:	095b      	lsrs	r3, r3, #5
 800a310:	011c      	lsls	r4, r3, #4
 800a312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a316:	2200      	movs	r2, #0
 800a318:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a31c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a320:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a324:	4642      	mov	r2, r8
 800a326:	464b      	mov	r3, r9
 800a328:	1891      	adds	r1, r2, r2
 800a32a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a32c:	415b      	adcs	r3, r3
 800a32e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a330:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a334:	4641      	mov	r1, r8
 800a336:	eb12 0a01 	adds.w	sl, r2, r1
 800a33a:	4649      	mov	r1, r9
 800a33c:	eb43 0b01 	adc.w	fp, r3, r1
 800a340:	f04f 0200 	mov.w	r2, #0
 800a344:	f04f 0300 	mov.w	r3, #0
 800a348:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a34c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a350:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a354:	4692      	mov	sl, r2
 800a356:	469b      	mov	fp, r3
 800a358:	4643      	mov	r3, r8
 800a35a:	eb1a 0303 	adds.w	r3, sl, r3
 800a35e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a362:	464b      	mov	r3, r9
 800a364:	eb4b 0303 	adc.w	r3, fp, r3
 800a368:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a36c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a378:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a37c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a380:	460b      	mov	r3, r1
 800a382:	18db      	adds	r3, r3, r3
 800a384:	643b      	str	r3, [r7, #64]	@ 0x40
 800a386:	4613      	mov	r3, r2
 800a388:	eb42 0303 	adc.w	r3, r2, r3
 800a38c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a38e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a392:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a396:	f7f5 ff83 	bl	80002a0 <__aeabi_uldivmod>
 800a39a:	4602      	mov	r2, r0
 800a39c:	460b      	mov	r3, r1
 800a39e:	4611      	mov	r1, r2
 800a3a0:	4b3b      	ldr	r3, [pc, #236]	@ (800a490 <UART_SetConfig+0x2d4>)
 800a3a2:	fba3 2301 	umull	r2, r3, r3, r1
 800a3a6:	095b      	lsrs	r3, r3, #5
 800a3a8:	2264      	movs	r2, #100	@ 0x64
 800a3aa:	fb02 f303 	mul.w	r3, r2, r3
 800a3ae:	1acb      	subs	r3, r1, r3
 800a3b0:	00db      	lsls	r3, r3, #3
 800a3b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a3b6:	4b36      	ldr	r3, [pc, #216]	@ (800a490 <UART_SetConfig+0x2d4>)
 800a3b8:	fba3 2302 	umull	r2, r3, r3, r2
 800a3bc:	095b      	lsrs	r3, r3, #5
 800a3be:	005b      	lsls	r3, r3, #1
 800a3c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a3c4:	441c      	add	r4, r3
 800a3c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a3d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a3d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a3d8:	4642      	mov	r2, r8
 800a3da:	464b      	mov	r3, r9
 800a3dc:	1891      	adds	r1, r2, r2
 800a3de:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a3e0:	415b      	adcs	r3, r3
 800a3e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a3e8:	4641      	mov	r1, r8
 800a3ea:	1851      	adds	r1, r2, r1
 800a3ec:	6339      	str	r1, [r7, #48]	@ 0x30
 800a3ee:	4649      	mov	r1, r9
 800a3f0:	414b      	adcs	r3, r1
 800a3f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3f4:	f04f 0200 	mov.w	r2, #0
 800a3f8:	f04f 0300 	mov.w	r3, #0
 800a3fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a400:	4659      	mov	r1, fp
 800a402:	00cb      	lsls	r3, r1, #3
 800a404:	4651      	mov	r1, sl
 800a406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a40a:	4651      	mov	r1, sl
 800a40c:	00ca      	lsls	r2, r1, #3
 800a40e:	4610      	mov	r0, r2
 800a410:	4619      	mov	r1, r3
 800a412:	4603      	mov	r3, r0
 800a414:	4642      	mov	r2, r8
 800a416:	189b      	adds	r3, r3, r2
 800a418:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a41c:	464b      	mov	r3, r9
 800a41e:	460a      	mov	r2, r1
 800a420:	eb42 0303 	adc.w	r3, r2, r3
 800a424:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a434:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a438:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a43c:	460b      	mov	r3, r1
 800a43e:	18db      	adds	r3, r3, r3
 800a440:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a442:	4613      	mov	r3, r2
 800a444:	eb42 0303 	adc.w	r3, r2, r3
 800a448:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a44a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a44e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a452:	f7f5 ff25 	bl	80002a0 <__aeabi_uldivmod>
 800a456:	4602      	mov	r2, r0
 800a458:	460b      	mov	r3, r1
 800a45a:	4b0d      	ldr	r3, [pc, #52]	@ (800a490 <UART_SetConfig+0x2d4>)
 800a45c:	fba3 1302 	umull	r1, r3, r3, r2
 800a460:	095b      	lsrs	r3, r3, #5
 800a462:	2164      	movs	r1, #100	@ 0x64
 800a464:	fb01 f303 	mul.w	r3, r1, r3
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	00db      	lsls	r3, r3, #3
 800a46c:	3332      	adds	r3, #50	@ 0x32
 800a46e:	4a08      	ldr	r2, [pc, #32]	@ (800a490 <UART_SetConfig+0x2d4>)
 800a470:	fba2 2303 	umull	r2, r3, r2, r3
 800a474:	095b      	lsrs	r3, r3, #5
 800a476:	f003 0207 	and.w	r2, r3, #7
 800a47a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4422      	add	r2, r4
 800a482:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a484:	e106      	b.n	800a694 <UART_SetConfig+0x4d8>
 800a486:	bf00      	nop
 800a488:	40011000 	.word	0x40011000
 800a48c:	40011400 	.word	0x40011400
 800a490:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a498:	2200      	movs	r2, #0
 800a49a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a49e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a4a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a4a6:	4642      	mov	r2, r8
 800a4a8:	464b      	mov	r3, r9
 800a4aa:	1891      	adds	r1, r2, r2
 800a4ac:	6239      	str	r1, [r7, #32]
 800a4ae:	415b      	adcs	r3, r3
 800a4b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a4b6:	4641      	mov	r1, r8
 800a4b8:	1854      	adds	r4, r2, r1
 800a4ba:	4649      	mov	r1, r9
 800a4bc:	eb43 0501 	adc.w	r5, r3, r1
 800a4c0:	f04f 0200 	mov.w	r2, #0
 800a4c4:	f04f 0300 	mov.w	r3, #0
 800a4c8:	00eb      	lsls	r3, r5, #3
 800a4ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a4ce:	00e2      	lsls	r2, r4, #3
 800a4d0:	4614      	mov	r4, r2
 800a4d2:	461d      	mov	r5, r3
 800a4d4:	4643      	mov	r3, r8
 800a4d6:	18e3      	adds	r3, r4, r3
 800a4d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a4dc:	464b      	mov	r3, r9
 800a4de:	eb45 0303 	adc.w	r3, r5, r3
 800a4e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a4e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a4f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a4f6:	f04f 0200 	mov.w	r2, #0
 800a4fa:	f04f 0300 	mov.w	r3, #0
 800a4fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a502:	4629      	mov	r1, r5
 800a504:	008b      	lsls	r3, r1, #2
 800a506:	4621      	mov	r1, r4
 800a508:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a50c:	4621      	mov	r1, r4
 800a50e:	008a      	lsls	r2, r1, #2
 800a510:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a514:	f7f5 fec4 	bl	80002a0 <__aeabi_uldivmod>
 800a518:	4602      	mov	r2, r0
 800a51a:	460b      	mov	r3, r1
 800a51c:	4b60      	ldr	r3, [pc, #384]	@ (800a6a0 <UART_SetConfig+0x4e4>)
 800a51e:	fba3 2302 	umull	r2, r3, r3, r2
 800a522:	095b      	lsrs	r3, r3, #5
 800a524:	011c      	lsls	r4, r3, #4
 800a526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a52a:	2200      	movs	r2, #0
 800a52c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a530:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a534:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a538:	4642      	mov	r2, r8
 800a53a:	464b      	mov	r3, r9
 800a53c:	1891      	adds	r1, r2, r2
 800a53e:	61b9      	str	r1, [r7, #24]
 800a540:	415b      	adcs	r3, r3
 800a542:	61fb      	str	r3, [r7, #28]
 800a544:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a548:	4641      	mov	r1, r8
 800a54a:	1851      	adds	r1, r2, r1
 800a54c:	6139      	str	r1, [r7, #16]
 800a54e:	4649      	mov	r1, r9
 800a550:	414b      	adcs	r3, r1
 800a552:	617b      	str	r3, [r7, #20]
 800a554:	f04f 0200 	mov.w	r2, #0
 800a558:	f04f 0300 	mov.w	r3, #0
 800a55c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a560:	4659      	mov	r1, fp
 800a562:	00cb      	lsls	r3, r1, #3
 800a564:	4651      	mov	r1, sl
 800a566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a56a:	4651      	mov	r1, sl
 800a56c:	00ca      	lsls	r2, r1, #3
 800a56e:	4610      	mov	r0, r2
 800a570:	4619      	mov	r1, r3
 800a572:	4603      	mov	r3, r0
 800a574:	4642      	mov	r2, r8
 800a576:	189b      	adds	r3, r3, r2
 800a578:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a57c:	464b      	mov	r3, r9
 800a57e:	460a      	mov	r2, r1
 800a580:	eb42 0303 	adc.w	r3, r2, r3
 800a584:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a592:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a594:	f04f 0200 	mov.w	r2, #0
 800a598:	f04f 0300 	mov.w	r3, #0
 800a59c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a5a0:	4649      	mov	r1, r9
 800a5a2:	008b      	lsls	r3, r1, #2
 800a5a4:	4641      	mov	r1, r8
 800a5a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5aa:	4641      	mov	r1, r8
 800a5ac:	008a      	lsls	r2, r1, #2
 800a5ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a5b2:	f7f5 fe75 	bl	80002a0 <__aeabi_uldivmod>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	4b38      	ldr	r3, [pc, #224]	@ (800a6a0 <UART_SetConfig+0x4e4>)
 800a5be:	fba3 2301 	umull	r2, r3, r3, r1
 800a5c2:	095b      	lsrs	r3, r3, #5
 800a5c4:	2264      	movs	r2, #100	@ 0x64
 800a5c6:	fb02 f303 	mul.w	r3, r2, r3
 800a5ca:	1acb      	subs	r3, r1, r3
 800a5cc:	011b      	lsls	r3, r3, #4
 800a5ce:	3332      	adds	r3, #50	@ 0x32
 800a5d0:	4a33      	ldr	r2, [pc, #204]	@ (800a6a0 <UART_SetConfig+0x4e4>)
 800a5d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5d6:	095b      	lsrs	r3, r3, #5
 800a5d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a5dc:	441c      	add	r4, r3
 800a5de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	673b      	str	r3, [r7, #112]	@ 0x70
 800a5e6:	677a      	str	r2, [r7, #116]	@ 0x74
 800a5e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a5ec:	4642      	mov	r2, r8
 800a5ee:	464b      	mov	r3, r9
 800a5f0:	1891      	adds	r1, r2, r2
 800a5f2:	60b9      	str	r1, [r7, #8]
 800a5f4:	415b      	adcs	r3, r3
 800a5f6:	60fb      	str	r3, [r7, #12]
 800a5f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a5fc:	4641      	mov	r1, r8
 800a5fe:	1851      	adds	r1, r2, r1
 800a600:	6039      	str	r1, [r7, #0]
 800a602:	4649      	mov	r1, r9
 800a604:	414b      	adcs	r3, r1
 800a606:	607b      	str	r3, [r7, #4]
 800a608:	f04f 0200 	mov.w	r2, #0
 800a60c:	f04f 0300 	mov.w	r3, #0
 800a610:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a614:	4659      	mov	r1, fp
 800a616:	00cb      	lsls	r3, r1, #3
 800a618:	4651      	mov	r1, sl
 800a61a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a61e:	4651      	mov	r1, sl
 800a620:	00ca      	lsls	r2, r1, #3
 800a622:	4610      	mov	r0, r2
 800a624:	4619      	mov	r1, r3
 800a626:	4603      	mov	r3, r0
 800a628:	4642      	mov	r2, r8
 800a62a:	189b      	adds	r3, r3, r2
 800a62c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a62e:	464b      	mov	r3, r9
 800a630:	460a      	mov	r2, r1
 800a632:	eb42 0303 	adc.w	r3, r2, r3
 800a636:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	663b      	str	r3, [r7, #96]	@ 0x60
 800a642:	667a      	str	r2, [r7, #100]	@ 0x64
 800a644:	f04f 0200 	mov.w	r2, #0
 800a648:	f04f 0300 	mov.w	r3, #0
 800a64c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a650:	4649      	mov	r1, r9
 800a652:	008b      	lsls	r3, r1, #2
 800a654:	4641      	mov	r1, r8
 800a656:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a65a:	4641      	mov	r1, r8
 800a65c:	008a      	lsls	r2, r1, #2
 800a65e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a662:	f7f5 fe1d 	bl	80002a0 <__aeabi_uldivmod>
 800a666:	4602      	mov	r2, r0
 800a668:	460b      	mov	r3, r1
 800a66a:	4b0d      	ldr	r3, [pc, #52]	@ (800a6a0 <UART_SetConfig+0x4e4>)
 800a66c:	fba3 1302 	umull	r1, r3, r3, r2
 800a670:	095b      	lsrs	r3, r3, #5
 800a672:	2164      	movs	r1, #100	@ 0x64
 800a674:	fb01 f303 	mul.w	r3, r1, r3
 800a678:	1ad3      	subs	r3, r2, r3
 800a67a:	011b      	lsls	r3, r3, #4
 800a67c:	3332      	adds	r3, #50	@ 0x32
 800a67e:	4a08      	ldr	r2, [pc, #32]	@ (800a6a0 <UART_SetConfig+0x4e4>)
 800a680:	fba2 2303 	umull	r2, r3, r2, r3
 800a684:	095b      	lsrs	r3, r3, #5
 800a686:	f003 020f 	and.w	r2, r3, #15
 800a68a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4422      	add	r2, r4
 800a692:	609a      	str	r2, [r3, #8]
}
 800a694:	bf00      	nop
 800a696:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a69a:	46bd      	mov	sp, r7
 800a69c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6a0:	51eb851f 	.word	0x51eb851f

0800a6a4 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b087      	sub	sp, #28
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FMC_BCR1_WFDIS */
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6b8:	683a      	ldr	r2, [r7, #0]
 800a6ba:	6812      	ldr	r2, [r2, #0]
 800a6bc:	f023 0101 	bic.w	r1, r3, #1
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	2b08      	cmp	r3, #8
 800a6cc:	d102      	bne.n	800a6d4 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a6ce:	2340      	movs	r3, #64	@ 0x40
 800a6d0:	617b      	str	r3, [r7, #20]
 800a6d2:	e001      	b.n	800a6d8 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800a6e4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800a6ea:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800a6f0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800a6f6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800a6fc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800a702:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 800a708:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800a70e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 800a714:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800a71a:	4313      	orrs	r3, r2
 800a71c:	613b      	str	r3, [r7, #16]

#if defined(FMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	699b      	ldr	r3, [r3, #24]
 800a722:	693a      	ldr	r2, [r7, #16]
 800a724:	4313      	orrs	r3, r2
 800a726:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WRAPMOD */
#if defined(FMC_BCR1_CCLKEN)
  btcr_reg |= Init->ContinuousClock;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a72c:	693a      	ldr	r2, [r7, #16]
 800a72e:	4313      	orrs	r3, r2
 800a730:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_CCLKEN */
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a736:	693a      	ldr	r2, [r7, #16]
 800a738:	4313      	orrs	r3, r2
 800a73a:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 800a73c:	4b1b      	ldr	r3, [pc, #108]	@ (800a7ac <FMC_NORSRAM_Init+0x108>)
 800a73e:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

#if defined(FMC_BCR1_WRAPMOD)
  mask |= FMC_BCR1_WRAPMOD;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a746:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WRAPMOD */
#if defined(FMC_BCR1_CCLKEN)
  mask |= FMC_BCR1_CCLKEN;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a74e:	60fb      	str	r3, [r7, #12]
#endif
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
#endif /* FMC_BCR1_WFDIS */
  mask |= FMC_BCR1_CPSIZE;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800a756:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	43db      	mvns	r3, r3
 800a766:	ea02 0103 	and.w	r1, r2, r3
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	4319      	orrs	r1, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(FMC_BCR1_CCLKEN)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a77c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a780:	d10c      	bne.n	800a79c <FMC_NORSRAM_Init+0xf8>
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d008      	beq.n	800a79c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a796:	431a      	orrs	r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	601a      	str	r2, [r3, #0]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FMC_BCR1_WFDIS */

  return HAL_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	371c      	adds	r7, #28
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr
 800a7aa:	bf00      	nop
 800a7ac:	0008fb7f 	.word	0x0008fb7f

0800a7b0 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b087      	sub	sp, #28
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	1c5a      	adds	r2, r3, #1
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c6:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	011b      	lsls	r3, r3, #4
 800a7d4:	431a      	orrs	r2, r3
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	689b      	ldr	r3, [r3, #8]
 800a7da:	021b      	lsls	r3, r3, #8
 800a7dc:	431a      	orrs	r2, r3
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	041b      	lsls	r3, r3, #16
 800a7e4:	431a      	orrs	r2, r3
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	3b01      	subs	r3, #1
 800a7ec:	051b      	lsls	r3, r3, #20
 800a7ee:	431a      	orrs	r2, r3
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	695b      	ldr	r3, [r3, #20]
 800a7f4:	3b02      	subs	r3, #2
 800a7f6:	061b      	lsls	r3, r3, #24
 800a7f8:	431a      	orrs	r2, r3
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	699b      	ldr	r3, [r3, #24]
 800a7fe:	4313      	orrs	r3, r2
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	3201      	adds	r2, #1
 800a804:	4319      	orrs	r1, r3
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

#if defined(FMC_BCR1_CCLKEN)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a814:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a818:	d113      	bne.n	800a842 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a822:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	691b      	ldr	r3, [r3, #16]
 800a828:	3b01      	subs	r3, #1
 800a82a:	051b      	lsls	r3, r3, #20
 800a82c:	697a      	ldr	r2, [r7, #20]
 800a82e:	4313      	orrs	r3, r2
 800a830:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	431a      	orrs	r2, r3
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	605a      	str	r2, [r3, #4]
  }

#endif
  return HAL_OK;
 800a842:	2300      	movs	r3, #0
}
 800a844:	4618      	mov	r0, r3
 800a846:	371c      	adds	r7, #28
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	607a      	str	r2, [r7, #4]
 800a85c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a864:	d11d      	bne.n	800a8a2 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a86e:	4b13      	ldr	r3, [pc, #76]	@ (800a8bc <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800a870:	4013      	ands	r3, r2
 800a872:	68ba      	ldr	r2, [r7, #8]
 800a874:	6811      	ldr	r1, [r2, #0]
 800a876:	68ba      	ldr	r2, [r7, #8]
 800a878:	6852      	ldr	r2, [r2, #4]
 800a87a:	0112      	lsls	r2, r2, #4
 800a87c:	4311      	orrs	r1, r2
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	6892      	ldr	r2, [r2, #8]
 800a882:	0212      	lsls	r2, r2, #8
 800a884:	4311      	orrs	r1, r2
 800a886:	68ba      	ldr	r2, [r7, #8]
 800a888:	6992      	ldr	r2, [r2, #24]
 800a88a:	4311      	orrs	r1, r2
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	68d2      	ldr	r2, [r2, #12]
 800a890:	0412      	lsls	r2, r2, #16
 800a892:	430a      	orrs	r2, r1
 800a894:	ea43 0102 	orr.w	r1, r3, r2
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a8a0:	e005      	b.n	800a8ae <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800a8aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3714      	adds	r7, #20
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr
 800a8bc:	cff00000 	.word	0xcff00000

0800a8c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8c0:	b084      	sub	sp, #16
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b084      	sub	sp, #16
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
 800a8ca:	f107 001c 	add.w	r0, r7, #28
 800a8ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a8d2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d123      	bne.n	800a922 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a8ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a902:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a906:	2b01      	cmp	r3, #1
 800a908:	d105      	bne.n	800a916 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 f9dc 	bl	800acd4 <USB_CoreReset>
 800a91c:	4603      	mov	r3, r0
 800a91e:	73fb      	strb	r3, [r7, #15]
 800a920:	e01b      	b.n	800a95a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 f9d0 	bl	800acd4 <USB_CoreReset>
 800a934:	4603      	mov	r3, r0
 800a936:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a938:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d106      	bne.n	800a94e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a944:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	639a      	str	r2, [r3, #56]	@ 0x38
 800a94c:	e005      	b.n	800a95a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a952:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a95a:	7fbb      	ldrb	r3, [r7, #30]
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d10b      	bne.n	800a978 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	f043 0206 	orr.w	r2, r3, #6
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	f043 0220 	orr.w	r2, r3, #32
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a978:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a984:	b004      	add	sp, #16
 800a986:	4770      	bx	lr

0800a988 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a988:	b480      	push	{r7}
 800a98a:	b083      	sub	sp, #12
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	f043 0201 	orr.w	r2, r3, #1
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	370c      	adds	r7, #12
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr

0800a9aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9aa:	b480      	push	{r7}
 800a9ac:	b083      	sub	sp, #12
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	689b      	ldr	r3, [r3, #8]
 800a9b6:	f023 0201 	bic.w	r2, r3, #1
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a9e8:	78fb      	ldrb	r3, [r7, #3]
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d115      	bne.n	800aa1a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a9fa:	200a      	movs	r0, #10
 800a9fc:	f7f9 fd30 	bl	8004460 <HAL_Delay>
      ms += 10U;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	330a      	adds	r3, #10
 800aa04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 f956 	bl	800acb8 <USB_GetMode>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d01e      	beq.n	800aa50 <USB_SetCurrentMode+0x84>
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2bc7      	cmp	r3, #199	@ 0xc7
 800aa16:	d9f0      	bls.n	800a9fa <USB_SetCurrentMode+0x2e>
 800aa18:	e01a      	b.n	800aa50 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800aa1a:	78fb      	ldrb	r3, [r7, #3]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d115      	bne.n	800aa4c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800aa2c:	200a      	movs	r0, #10
 800aa2e:	f7f9 fd17 	bl	8004460 <HAL_Delay>
      ms += 10U;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	330a      	adds	r3, #10
 800aa36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 f93d 	bl	800acb8 <USB_GetMode>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d005      	beq.n	800aa50 <USB_SetCurrentMode+0x84>
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2bc7      	cmp	r3, #199	@ 0xc7
 800aa48:	d9f0      	bls.n	800aa2c <USB_SetCurrentMode+0x60>
 800aa4a:	e001      	b.n	800aa50 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e005      	b.n	800aa5c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2bc8      	cmp	r3, #200	@ 0xc8
 800aa54:	d101      	bne.n	800aa5a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e000      	b.n	800aa5c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b085      	sub	sp, #20
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	3301      	adds	r3, #1
 800aa76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa7e:	d901      	bls.n	800aa84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aa80:	2303      	movs	r3, #3
 800aa82:	e01b      	b.n	800aabc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	daf2      	bge.n	800aa72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	019b      	lsls	r3, r3, #6
 800aa94:	f043 0220 	orr.w	r2, r3, #32
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aaa8:	d901      	bls.n	800aaae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aaaa:	2303      	movs	r3, #3
 800aaac:	e006      	b.n	800aabc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	f003 0320 	and.w	r3, r3, #32
 800aab6:	2b20      	cmp	r3, #32
 800aab8:	d0f0      	beq.n	800aa9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3714      	adds	r7, #20
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aad0:	2300      	movs	r3, #0
 800aad2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	3301      	adds	r3, #1
 800aad8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aae0:	d901      	bls.n	800aae6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800aae2:	2303      	movs	r3, #3
 800aae4:	e018      	b.n	800ab18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	daf2      	bge.n	800aad4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2210      	movs	r2, #16
 800aaf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	3301      	adds	r3, #1
 800aafc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab04:	d901      	bls.n	800ab0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ab06:	2303      	movs	r3, #3
 800ab08:	e006      	b.n	800ab18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	691b      	ldr	r3, [r3, #16]
 800ab0e:	f003 0310 	and.w	r3, r3, #16
 800ab12:	2b10      	cmp	r3, #16
 800ab14:	d0f0      	beq.n	800aaf8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ab16:	2300      	movs	r3, #0
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3714      	adds	r7, #20
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b089      	sub	sp, #36	@ 0x24
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	4611      	mov	r1, r2
 800ab30:	461a      	mov	r2, r3
 800ab32:	460b      	mov	r3, r1
 800ab34:	71fb      	strb	r3, [r7, #7]
 800ab36:	4613      	mov	r3, r2
 800ab38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ab42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d123      	bne.n	800ab92 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ab4a:	88bb      	ldrh	r3, [r7, #4]
 800ab4c:	3303      	adds	r3, #3
 800ab4e:	089b      	lsrs	r3, r3, #2
 800ab50:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ab52:	2300      	movs	r3, #0
 800ab54:	61bb      	str	r3, [r7, #24]
 800ab56:	e018      	b.n	800ab8a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ab58:	79fb      	ldrb	r3, [r7, #7]
 800ab5a:	031a      	lsls	r2, r3, #12
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	4413      	add	r3, r2
 800ab60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab64:	461a      	mov	r2, r3
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	3301      	adds	r3, #1
 800ab70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	3301      	adds	r3, #1
 800ab76:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	3301      	adds	r3, #1
 800ab82:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	3301      	adds	r3, #1
 800ab88:	61bb      	str	r3, [r7, #24]
 800ab8a:	69ba      	ldr	r2, [r7, #24]
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d3e2      	bcc.n	800ab58 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ab92:	2300      	movs	r3, #0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3724      	adds	r7, #36	@ 0x24
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b08b      	sub	sp, #44	@ 0x2c
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	4613      	mov	r3, r2
 800abac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800abb6:	88fb      	ldrh	r3, [r7, #6]
 800abb8:	089b      	lsrs	r3, r3, #2
 800abba:	b29b      	uxth	r3, r3
 800abbc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800abbe:	88fb      	ldrh	r3, [r7, #6]
 800abc0:	f003 0303 	and.w	r3, r3, #3
 800abc4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800abc6:	2300      	movs	r3, #0
 800abc8:	623b      	str	r3, [r7, #32]
 800abca:	e014      	b.n	800abf6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800abcc:	69bb      	ldr	r3, [r7, #24]
 800abce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd6:	601a      	str	r2, [r3, #0]
    pDest++;
 800abd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abda:	3301      	adds	r3, #1
 800abdc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800abde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe0:	3301      	adds	r3, #1
 800abe2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800abe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe6:	3301      	adds	r3, #1
 800abe8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800abea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abec:	3301      	adds	r3, #1
 800abee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800abf0:	6a3b      	ldr	r3, [r7, #32]
 800abf2:	3301      	adds	r3, #1
 800abf4:	623b      	str	r3, [r7, #32]
 800abf6:	6a3a      	ldr	r2, [r7, #32]
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d3e6      	bcc.n	800abcc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800abfe:	8bfb      	ldrh	r3, [r7, #30]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d01e      	beq.n	800ac42 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ac04:	2300      	movs	r3, #0
 800ac06:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ac08:	69bb      	ldr	r3, [r7, #24]
 800ac0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac0e:	461a      	mov	r2, r3
 800ac10:	f107 0310 	add.w	r3, r7, #16
 800ac14:	6812      	ldr	r2, [r2, #0]
 800ac16:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ac18:	693a      	ldr	r2, [r7, #16]
 800ac1a:	6a3b      	ldr	r3, [r7, #32]
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	00db      	lsls	r3, r3, #3
 800ac20:	fa22 f303 	lsr.w	r3, r2, r3
 800ac24:	b2da      	uxtb	r2, r3
 800ac26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac28:	701a      	strb	r2, [r3, #0]
      i++;
 800ac2a:	6a3b      	ldr	r3, [r7, #32]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	623b      	str	r3, [r7, #32]
      pDest++;
 800ac30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac32:	3301      	adds	r3, #1
 800ac34:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ac36:	8bfb      	ldrh	r3, [r7, #30]
 800ac38:	3b01      	subs	r3, #1
 800ac3a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ac3c:	8bfb      	ldrh	r3, [r7, #30]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d1ea      	bne.n	800ac18 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ac42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	372c      	adds	r7, #44	@ 0x2c
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b085      	sub	sp, #20
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	695b      	ldr	r3, [r3, #20]
 800ac5c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	699b      	ldr	r3, [r3, #24]
 800ac62:	68fa      	ldr	r2, [r7, #12]
 800ac64:	4013      	ands	r3, r2
 800ac66:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ac68:	68fb      	ldr	r3, [r7, #12]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3714      	adds	r7, #20
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr

0800ac76 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800ac76:	b480      	push	{r7}
 800ac78:	b085      	sub	sp, #20
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
 800ac7e:	460b      	mov	r3, r1
 800ac80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800ac86:	78fb      	ldrb	r3, [r7, #3]
 800ac88:	015a      	lsls	r2, r3, #5
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800ac96:	78fb      	ldrb	r3, [r7, #3]
 800ac98:	015a      	lsls	r2, r3, #5
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	68ba      	ldr	r2, [r7, #8]
 800aca6:	4013      	ands	r3, r2
 800aca8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800acaa:	68bb      	ldr	r3, [r7, #8]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3714      	adds	r7, #20
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	695b      	ldr	r3, [r3, #20]
 800acc4:	f003 0301 	and.w	r3, r3, #1
}
 800acc8:	4618      	mov	r0, r3
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b085      	sub	sp, #20
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800acdc:	2300      	movs	r3, #0
 800acde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	3301      	adds	r3, #1
 800ace4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800acec:	d901      	bls.n	800acf2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800acee:	2303      	movs	r3, #3
 800acf0:	e01b      	b.n	800ad2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	691b      	ldr	r3, [r3, #16]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	daf2      	bge.n	800ace0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800acfa:	2300      	movs	r3, #0
 800acfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	691b      	ldr	r3, [r3, #16]
 800ad02:	f043 0201 	orr.w	r2, r3, #1
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad16:	d901      	bls.n	800ad1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ad18:	2303      	movs	r3, #3
 800ad1a:	e006      	b.n	800ad2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	691b      	ldr	r3, [r3, #16]
 800ad20:	f003 0301 	and.w	r3, r3, #1
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d0f0      	beq.n	800ad0a <USB_CoreReset+0x36>

  return HAL_OK;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3714      	adds	r7, #20
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr
	...

0800ad38 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ad38:	b084      	sub	sp, #16
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b086      	sub	sp, #24
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
 800ad42:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ad46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ad58:	461a      	mov	r2, r3
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad62:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad6e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad7a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	68db      	ldr	r3, [r3, #12]
 800ad86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d119      	bne.n	800adc2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800ad8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d10a      	bne.n	800adac <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ada4:	f043 0304 	orr.w	r3, r3, #4
 800ada8:	6013      	str	r3, [r2, #0]
 800adaa:	e014      	b.n	800add6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	68fa      	ldr	r2, [r7, #12]
 800adb6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800adba:	f023 0304 	bic.w	r3, r3, #4
 800adbe:	6013      	str	r3, [r2, #0]
 800adc0:	e009      	b.n	800add6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68fa      	ldr	r2, [r7, #12]
 800adcc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800add0:	f023 0304 	bic.w	r3, r3, #4
 800add4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800add6:	2110      	movs	r1, #16
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f7ff fe43 	bl	800aa64 <USB_FlushTxFifo>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d001      	beq.n	800ade8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f7ff fe6d 	bl	800aac8 <USB_FlushRxFifo>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d001      	beq.n	800adf8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800adf4:	2301      	movs	r3, #1
 800adf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800adf8:	2300      	movs	r3, #0
 800adfa:	613b      	str	r3, [r7, #16]
 800adfc:	e015      	b.n	800ae2a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	015a      	lsls	r2, r3, #5
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	4413      	add	r3, r2
 800ae06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae10:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	015a      	lsls	r2, r3, #5
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	4413      	add	r3, r2
 800ae1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae1e:	461a      	mov	r2, r3
 800ae20:	2300      	movs	r3, #0
 800ae22:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	3301      	adds	r3, #1
 800ae28:	613b      	str	r3, [r7, #16]
 800ae2a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ae2e:	461a      	mov	r2, r3
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d3e3      	bcc.n	800adfe <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae42:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a18      	ldr	r2, [pc, #96]	@ (800aea8 <USB_HostInit+0x170>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d10b      	bne.n	800ae64 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae52:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a15      	ldr	r2, [pc, #84]	@ (800aeac <USB_HostInit+0x174>)
 800ae58:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4a14      	ldr	r2, [pc, #80]	@ (800aeb0 <USB_HostInit+0x178>)
 800ae5e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800ae62:	e009      	b.n	800ae78 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2280      	movs	r2, #128	@ 0x80
 800ae68:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4a11      	ldr	r2, [pc, #68]	@ (800aeb4 <USB_HostInit+0x17c>)
 800ae6e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a11      	ldr	r2, [pc, #68]	@ (800aeb8 <USB_HostInit+0x180>)
 800ae74:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ae78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d105      	bne.n	800ae8c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	699b      	ldr	r3, [r3, #24]
 800ae84:	f043 0210 	orr.w	r2, r3, #16
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	699a      	ldr	r2, [r3, #24]
 800ae90:	4b0a      	ldr	r3, [pc, #40]	@ (800aebc <USB_HostInit+0x184>)
 800ae92:	4313      	orrs	r3, r2
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800ae98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3718      	adds	r7, #24
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aea4:	b004      	add	sp, #16
 800aea6:	4770      	bx	lr
 800aea8:	40040000 	.word	0x40040000
 800aeac:	01000200 	.word	0x01000200
 800aeb0:	00e00300 	.word	0x00e00300
 800aeb4:	00600080 	.word	0x00600080
 800aeb8:	004000e0 	.word	0x004000e0
 800aebc:	a3200008 	.word	0xa3200008

0800aec0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b085      	sub	sp, #20
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	460b      	mov	r3, r1
 800aeca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aede:	f023 0303 	bic.w	r3, r3, #3
 800aee2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	78fb      	ldrb	r3, [r7, #3]
 800aeee:	f003 0303 	and.w	r3, r3, #3
 800aef2:	68f9      	ldr	r1, [r7, #12]
 800aef4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800aef8:	4313      	orrs	r3, r2
 800aefa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800aefc:	78fb      	ldrb	r3, [r7, #3]
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d107      	bne.n	800af12 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800af08:	461a      	mov	r2, r3
 800af0a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800af0e:	6053      	str	r3, [r2, #4]
 800af10:	e00c      	b.n	800af2c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800af12:	78fb      	ldrb	r3, [r7, #3]
 800af14:	2b02      	cmp	r3, #2
 800af16:	d107      	bne.n	800af28 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800af1e:	461a      	mov	r2, r3
 800af20:	f241 7370 	movw	r3, #6000	@ 0x1770
 800af24:	6053      	str	r3, [r2, #4]
 800af26:	e001      	b.n	800af2c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800af28:	2301      	movs	r3, #1
 800af2a:	e000      	b.n	800af2e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3714      	adds	r7, #20
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr

0800af3a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b084      	sub	sp, #16
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800af46:	2300      	movs	r3, #0
 800af48:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800af5a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800af64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af68:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800af6a:	2064      	movs	r0, #100	@ 0x64
 800af6c:	f7f9 fa78 	bl	8004460 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	68fa      	ldr	r2, [r7, #12]
 800af74:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800af78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af7c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800af7e:	200a      	movs	r0, #10
 800af80:	f7f9 fa6e 	bl	8004460 <HAL_Delay>

  return HAL_OK;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	3710      	adds	r7, #16
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800af8e:	b480      	push	{r7}
 800af90:	b085      	sub	sp, #20
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
 800af96:	460b      	mov	r3, r1
 800af98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800af9e:	2300      	movs	r3, #0
 800afa0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800afb2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d109      	bne.n	800afd2 <USB_DriveVbus+0x44>
 800afbe:	78fb      	ldrb	r3, [r7, #3]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d106      	bne.n	800afd2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	68fa      	ldr	r2, [r7, #12]
 800afc8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800afcc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800afd0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800afd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800afdc:	d109      	bne.n	800aff2 <USB_DriveVbus+0x64>
 800afde:	78fb      	ldrb	r3, [r7, #3]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d106      	bne.n	800aff2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800afec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aff0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800aff2:	2300      	movs	r3, #0
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3714      	adds	r7, #20
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr

0800b000 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800b000:	b480      	push	{r7}
 800b002:	b085      	sub	sp, #20
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b00c:	2300      	movs	r3, #0
 800b00e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	0c5b      	lsrs	r3, r3, #17
 800b01e:	f003 0303 	and.w	r3, r3, #3
}
 800b022:	4618      	mov	r0, r3
 800b024:	3714      	adds	r7, #20
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr

0800b02e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800b02e:	b480      	push	{r7}
 800b030:	b085      	sub	sp, #20
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	b29b      	uxth	r3, r3
}
 800b044:	4618      	mov	r0, r3
 800b046:	3714      	adds	r7, #20
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b088      	sub	sp, #32
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	4608      	mov	r0, r1
 800b05a:	4611      	mov	r1, r2
 800b05c:	461a      	mov	r2, r3
 800b05e:	4603      	mov	r3, r0
 800b060:	70fb      	strb	r3, [r7, #3]
 800b062:	460b      	mov	r3, r1
 800b064:	70bb      	strb	r3, [r7, #2]
 800b066:	4613      	mov	r3, r2
 800b068:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b06a:	2300      	movs	r3, #0
 800b06c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800b072:	78fb      	ldrb	r3, [r7, #3]
 800b074:	015a      	lsls	r2, r3, #5
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	4413      	add	r3, r2
 800b07a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b07e:	461a      	mov	r2, r3
 800b080:	f04f 33ff 	mov.w	r3, #4294967295
 800b084:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b086:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b08a:	2b03      	cmp	r3, #3
 800b08c:	d87c      	bhi.n	800b188 <USB_HC_Init+0x138>
 800b08e:	a201      	add	r2, pc, #4	@ (adr r2, 800b094 <USB_HC_Init+0x44>)
 800b090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b094:	0800b0a5 	.word	0x0800b0a5
 800b098:	0800b14b 	.word	0x0800b14b
 800b09c:	0800b0a5 	.word	0x0800b0a5
 800b0a0:	0800b10d 	.word	0x0800b10d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b0a4:	78fb      	ldrb	r3, [r7, #3]
 800b0a6:	015a      	lsls	r2, r3, #5
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	f240 439d 	movw	r3, #1181	@ 0x49d
 800b0b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b0b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	da10      	bge.n	800b0e2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b0c0:	78fb      	ldrb	r3, [r7, #3]
 800b0c2:	015a      	lsls	r2, r3, #5
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	78fa      	ldrb	r2, [r7, #3]
 800b0d0:	0151      	lsls	r1, r2, #5
 800b0d2:	693a      	ldr	r2, [r7, #16]
 800b0d4:	440a      	add	r2, r1
 800b0d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b0da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b0de:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800b0e0:	e055      	b.n	800b18e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4a6f      	ldr	r2, [pc, #444]	@ (800b2a4 <USB_HC_Init+0x254>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d151      	bne.n	800b18e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800b0ea:	78fb      	ldrb	r3, [r7, #3]
 800b0ec:	015a      	lsls	r2, r3, #5
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	78fa      	ldrb	r2, [r7, #3]
 800b0fa:	0151      	lsls	r1, r2, #5
 800b0fc:	693a      	ldr	r2, [r7, #16]
 800b0fe:	440a      	add	r2, r1
 800b100:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b104:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b108:	60d3      	str	r3, [r2, #12]
      break;
 800b10a:	e040      	b.n	800b18e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b10c:	78fb      	ldrb	r3, [r7, #3]
 800b10e:	015a      	lsls	r2, r3, #5
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	4413      	add	r3, r2
 800b114:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b118:	461a      	mov	r2, r3
 800b11a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800b11e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b120:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b124:	2b00      	cmp	r3, #0
 800b126:	da34      	bge.n	800b192 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b128:	78fb      	ldrb	r3, [r7, #3]
 800b12a:	015a      	lsls	r2, r3, #5
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	4413      	add	r3, r2
 800b130:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	78fa      	ldrb	r2, [r7, #3]
 800b138:	0151      	lsls	r1, r2, #5
 800b13a:	693a      	ldr	r2, [r7, #16]
 800b13c:	440a      	add	r2, r1
 800b13e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b146:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b148:	e023      	b.n	800b192 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b14a:	78fb      	ldrb	r3, [r7, #3]
 800b14c:	015a      	lsls	r2, r3, #5
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	4413      	add	r3, r2
 800b152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b156:	461a      	mov	r2, r3
 800b158:	f240 2325 	movw	r3, #549	@ 0x225
 800b15c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b15e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b162:	2b00      	cmp	r3, #0
 800b164:	da17      	bge.n	800b196 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b166:	78fb      	ldrb	r3, [r7, #3]
 800b168:	015a      	lsls	r2, r3, #5
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	4413      	add	r3, r2
 800b16e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	78fa      	ldrb	r2, [r7, #3]
 800b176:	0151      	lsls	r1, r2, #5
 800b178:	693a      	ldr	r2, [r7, #16]
 800b17a:	440a      	add	r2, r1
 800b17c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b180:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800b184:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b186:	e006      	b.n	800b196 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800b188:	2301      	movs	r3, #1
 800b18a:	77fb      	strb	r3, [r7, #31]
      break;
 800b18c:	e004      	b.n	800b198 <USB_HC_Init+0x148>
      break;
 800b18e:	bf00      	nop
 800b190:	e002      	b.n	800b198 <USB_HC_Init+0x148>
      break;
 800b192:	bf00      	nop
 800b194:	e000      	b.n	800b198 <USB_HC_Init+0x148>
      break;
 800b196:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b198:	78fb      	ldrb	r3, [r7, #3]
 800b19a:	015a      	lsls	r2, r3, #5
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	4413      	add	r3, r2
 800b1a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800b1aa:	78fb      	ldrb	r3, [r7, #3]
 800b1ac:	015a      	lsls	r2, r3, #5
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	78fa      	ldrb	r2, [r7, #3]
 800b1ba:	0151      	lsls	r1, r2, #5
 800b1bc:	693a      	ldr	r2, [r7, #16]
 800b1be:	440a      	add	r2, r1
 800b1c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b1c4:	f043 0302 	orr.w	r3, r3, #2
 800b1c8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b1d0:	699a      	ldr	r2, [r3, #24]
 800b1d2:	78fb      	ldrb	r3, [r7, #3]
 800b1d4:	f003 030f 	and.w	r3, r3, #15
 800b1d8:	2101      	movs	r1, #1
 800b1da:	fa01 f303 	lsl.w	r3, r1, r3
 800b1de:	6939      	ldr	r1, [r7, #16]
 800b1e0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	699b      	ldr	r3, [r3, #24]
 800b1ec:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b1f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	da03      	bge.n	800b204 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b1fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b200:	61bb      	str	r3, [r7, #24]
 800b202:	e001      	b.n	800b208 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800b204:	2300      	movs	r3, #0
 800b206:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f7ff fef9 	bl	800b000 <USB_GetHostSpeed>
 800b20e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800b210:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b214:	2b02      	cmp	r3, #2
 800b216:	d106      	bne.n	800b226 <USB_HC_Init+0x1d6>
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2b02      	cmp	r3, #2
 800b21c:	d003      	beq.n	800b226 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b21e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b222:	617b      	str	r3, [r7, #20]
 800b224:	e001      	b.n	800b22a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b226:	2300      	movs	r3, #0
 800b228:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b22a:	787b      	ldrb	r3, [r7, #1]
 800b22c:	059b      	lsls	r3, r3, #22
 800b22e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b232:	78bb      	ldrb	r3, [r7, #2]
 800b234:	02db      	lsls	r3, r3, #11
 800b236:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b23a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b23c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b240:	049b      	lsls	r3, r3, #18
 800b242:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b246:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800b248:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800b24a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b24e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	431a      	orrs	r2, r3
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b258:	78fa      	ldrb	r2, [r7, #3]
 800b25a:	0151      	lsls	r1, r2, #5
 800b25c:	693a      	ldr	r2, [r7, #16]
 800b25e:	440a      	add	r2, r1
 800b260:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b264:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b268:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800b26a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b26e:	2b03      	cmp	r3, #3
 800b270:	d003      	beq.n	800b27a <USB_HC_Init+0x22a>
 800b272:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b276:	2b01      	cmp	r3, #1
 800b278:	d10f      	bne.n	800b29a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800b27a:	78fb      	ldrb	r3, [r7, #3]
 800b27c:	015a      	lsls	r2, r3, #5
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	4413      	add	r3, r2
 800b282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	78fa      	ldrb	r2, [r7, #3]
 800b28a:	0151      	lsls	r1, r2, #5
 800b28c:	693a      	ldr	r2, [r7, #16]
 800b28e:	440a      	add	r2, r1
 800b290:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b294:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b298:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b29a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3720      	adds	r7, #32
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	40040000 	.word	0x40040000

0800b2a8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b08c      	sub	sp, #48	@ 0x30
 800b2ac:	af02      	add	r7, sp, #8
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	4613      	mov	r3, r2
 800b2b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	785b      	ldrb	r3, [r3, #1]
 800b2be:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800b2c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b2c4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	4a5d      	ldr	r2, [pc, #372]	@ (800b440 <USB_HC_StartXfer+0x198>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d12f      	bne.n	800b32e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800b2ce:	79fb      	ldrb	r3, [r7, #7]
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d11c      	bne.n	800b30e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	7c9b      	ldrb	r3, [r3, #18]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d003      	beq.n	800b2e4 <USB_HC_StartXfer+0x3c>
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	7c9b      	ldrb	r3, [r3, #18]
 800b2e0:	2b02      	cmp	r3, #2
 800b2e2:	d124      	bne.n	800b32e <USB_HC_StartXfer+0x86>
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	799b      	ldrb	r3, [r3, #6]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d120      	bne.n	800b32e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	015a      	lsls	r2, r3, #5
 800b2f0:	6a3b      	ldr	r3, [r7, #32]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b2f8:	68db      	ldr	r3, [r3, #12]
 800b2fa:	69fa      	ldr	r2, [r7, #28]
 800b2fc:	0151      	lsls	r1, r2, #5
 800b2fe:	6a3a      	ldr	r2, [r7, #32]
 800b300:	440a      	add	r2, r1
 800b302:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b30a:	60d3      	str	r3, [r2, #12]
 800b30c:	e00f      	b.n	800b32e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	791b      	ldrb	r3, [r3, #4]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d10b      	bne.n	800b32e <USB_HC_StartXfer+0x86>
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	795b      	ldrb	r3, [r3, #5]
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d107      	bne.n	800b32e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	785b      	ldrb	r3, [r3, #1]
 800b322:	4619      	mov	r1, r3
 800b324:	68f8      	ldr	r0, [r7, #12]
 800b326:	f000 fb6b 	bl	800ba00 <USB_DoPing>
        return HAL_OK;
 800b32a:	2300      	movs	r3, #0
 800b32c:	e232      	b.n	800b794 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	799b      	ldrb	r3, [r3, #6]
 800b332:	2b01      	cmp	r3, #1
 800b334:	d158      	bne.n	800b3e8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800b336:	2301      	movs	r3, #1
 800b338:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	78db      	ldrb	r3, [r3, #3]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d007      	beq.n	800b352 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b342:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b344:	68ba      	ldr	r2, [r7, #8]
 800b346:	8a92      	ldrh	r2, [r2, #20]
 800b348:	fb03 f202 	mul.w	r2, r3, r2
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	61da      	str	r2, [r3, #28]
 800b350:	e07c      	b.n	800b44c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	7c9b      	ldrb	r3, [r3, #18]
 800b356:	2b01      	cmp	r3, #1
 800b358:	d130      	bne.n	800b3bc <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	6a1b      	ldr	r3, [r3, #32]
 800b35e:	2bbc      	cmp	r3, #188	@ 0xbc
 800b360:	d918      	bls.n	800b394 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	8a9b      	ldrh	r3, [r3, #20]
 800b366:	461a      	mov	r2, r3
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	69da      	ldr	r2, [r3, #28]
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d003      	beq.n	800b384 <USB_HC_StartXfer+0xdc>
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	2b02      	cmp	r3, #2
 800b382:	d103      	bne.n	800b38c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	2202      	movs	r2, #2
 800b388:	60da      	str	r2, [r3, #12]
 800b38a:	e05f      	b.n	800b44c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	2201      	movs	r2, #1
 800b390:	60da      	str	r2, [r3, #12]
 800b392:	e05b      	b.n	800b44c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	6a1a      	ldr	r2, [r3, #32]
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d007      	beq.n	800b3b4 <USB_HC_StartXfer+0x10c>
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	2b02      	cmp	r3, #2
 800b3aa:	d003      	beq.n	800b3b4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	2204      	movs	r2, #4
 800b3b0:	60da      	str	r2, [r3, #12]
 800b3b2:	e04b      	b.n	800b44c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	2203      	movs	r2, #3
 800b3b8:	60da      	str	r2, [r3, #12]
 800b3ba:	e047      	b.n	800b44c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800b3bc:	79fb      	ldrb	r3, [r7, #7]
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d10d      	bne.n	800b3de <USB_HC_StartXfer+0x136>
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	6a1b      	ldr	r3, [r3, #32]
 800b3c6:	68ba      	ldr	r2, [r7, #8]
 800b3c8:	8a92      	ldrh	r2, [r2, #20]
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d907      	bls.n	800b3de <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b3ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b3d0:	68ba      	ldr	r2, [r7, #8]
 800b3d2:	8a92      	ldrh	r2, [r2, #20]
 800b3d4:	fb03 f202 	mul.w	r2, r3, r2
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	61da      	str	r2, [r3, #28]
 800b3dc:	e036      	b.n	800b44c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	6a1a      	ldr	r2, [r3, #32]
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	61da      	str	r2, [r3, #28]
 800b3e6:	e031      	b.n	800b44c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	6a1b      	ldr	r3, [r3, #32]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d018      	beq.n	800b422 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	6a1b      	ldr	r3, [r3, #32]
 800b3f4:	68ba      	ldr	r2, [r7, #8]
 800b3f6:	8a92      	ldrh	r2, [r2, #20]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	3b01      	subs	r3, #1
 800b3fc:	68ba      	ldr	r2, [r7, #8]
 800b3fe:	8a92      	ldrh	r2, [r2, #20]
 800b400:	fbb3 f3f2 	udiv	r3, r3, r2
 800b404:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800b406:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b408:	8b7b      	ldrh	r3, [r7, #26]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d90b      	bls.n	800b426 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800b40e:	8b7b      	ldrh	r3, [r7, #26]
 800b410:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b412:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b414:	68ba      	ldr	r2, [r7, #8]
 800b416:	8a92      	ldrh	r2, [r2, #20]
 800b418:	fb03 f202 	mul.w	r2, r3, r2
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	61da      	str	r2, [r3, #28]
 800b420:	e001      	b.n	800b426 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800b422:	2301      	movs	r3, #1
 800b424:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	78db      	ldrb	r3, [r3, #3]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d00a      	beq.n	800b444 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b42e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b430:	68ba      	ldr	r2, [r7, #8]
 800b432:	8a92      	ldrh	r2, [r2, #20]
 800b434:	fb03 f202 	mul.w	r2, r3, r2
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	61da      	str	r2, [r3, #28]
 800b43c:	e006      	b.n	800b44c <USB_HC_StartXfer+0x1a4>
 800b43e:	bf00      	nop
 800b440:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	6a1a      	ldr	r2, [r3, #32]
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	69db      	ldr	r3, [r3, #28]
 800b450:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b454:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b456:	04d9      	lsls	r1, r3, #19
 800b458:	4ba3      	ldr	r3, [pc, #652]	@ (800b6e8 <USB_HC_StartXfer+0x440>)
 800b45a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b45c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	7d9b      	ldrb	r3, [r3, #22]
 800b462:	075b      	lsls	r3, r3, #29
 800b464:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b468:	69f9      	ldr	r1, [r7, #28]
 800b46a:	0148      	lsls	r0, r1, #5
 800b46c:	6a39      	ldr	r1, [r7, #32]
 800b46e:	4401      	add	r1, r0
 800b470:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b474:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b476:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b478:	79fb      	ldrb	r3, [r7, #7]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d009      	beq.n	800b492 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	6999      	ldr	r1, [r3, #24]
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	015a      	lsls	r2, r3, #5
 800b486:	6a3b      	ldr	r3, [r7, #32]
 800b488:	4413      	add	r3, r2
 800b48a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b48e:	460a      	mov	r2, r1
 800b490:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b492:	6a3b      	ldr	r3, [r7, #32]
 800b494:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	f003 0301 	and.w	r3, r3, #1
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	bf0c      	ite	eq
 800b4a2:	2301      	moveq	r3, #1
 800b4a4:	2300      	movne	r3, #0
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	015a      	lsls	r2, r3, #5
 800b4ae:	6a3b      	ldr	r3, [r7, #32]
 800b4b0:	4413      	add	r3, r2
 800b4b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	69fa      	ldr	r2, [r7, #28]
 800b4ba:	0151      	lsls	r1, r2, #5
 800b4bc:	6a3a      	ldr	r2, [r7, #32]
 800b4be:	440a      	add	r2, r1
 800b4c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b4c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b4c8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b4ca:	69fb      	ldr	r3, [r7, #28]
 800b4cc:	015a      	lsls	r2, r3, #5
 800b4ce:	6a3b      	ldr	r3, [r7, #32]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	7e7b      	ldrb	r3, [r7, #25]
 800b4da:	075b      	lsls	r3, r3, #29
 800b4dc:	69f9      	ldr	r1, [r7, #28]
 800b4de:	0148      	lsls	r0, r1, #5
 800b4e0:	6a39      	ldr	r1, [r7, #32]
 800b4e2:	4401      	add	r1, r0
 800b4e4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	799b      	ldrb	r3, [r3, #6]
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	f040 80c3 	bne.w	800b67c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	7c5b      	ldrb	r3, [r3, #17]
 800b4fa:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b500:	4313      	orrs	r3, r2
 800b502:	69fa      	ldr	r2, [r7, #28]
 800b504:	0151      	lsls	r1, r2, #5
 800b506:	6a3a      	ldr	r2, [r7, #32]
 800b508:	440a      	add	r2, r1
 800b50a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b50e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b512:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	015a      	lsls	r2, r3, #5
 800b518:	6a3b      	ldr	r3, [r7, #32]
 800b51a:	4413      	add	r3, r2
 800b51c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	69fa      	ldr	r2, [r7, #28]
 800b524:	0151      	lsls	r1, r2, #5
 800b526:	6a3a      	ldr	r2, [r7, #32]
 800b528:	440a      	add	r2, r1
 800b52a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b52e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b532:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	79db      	ldrb	r3, [r3, #7]
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d123      	bne.n	800b584 <USB_HC_StartXfer+0x2dc>
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	78db      	ldrb	r3, [r3, #3]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d11f      	bne.n	800b584 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b544:	69fb      	ldr	r3, [r7, #28]
 800b546:	015a      	lsls	r2, r3, #5
 800b548:	6a3b      	ldr	r3, [r7, #32]
 800b54a:	4413      	add	r3, r2
 800b54c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	69fa      	ldr	r2, [r7, #28]
 800b554:	0151      	lsls	r1, r2, #5
 800b556:	6a3a      	ldr	r2, [r7, #32]
 800b558:	440a      	add	r2, r1
 800b55a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b55e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b562:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	015a      	lsls	r2, r3, #5
 800b568:	6a3b      	ldr	r3, [r7, #32]
 800b56a:	4413      	add	r3, r2
 800b56c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b570:	68db      	ldr	r3, [r3, #12]
 800b572:	69fa      	ldr	r2, [r7, #28]
 800b574:	0151      	lsls	r1, r2, #5
 800b576:	6a3a      	ldr	r2, [r7, #32]
 800b578:	440a      	add	r2, r1
 800b57a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b57e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b582:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	7c9b      	ldrb	r3, [r3, #18]
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d003      	beq.n	800b594 <USB_HC_StartXfer+0x2ec>
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	7c9b      	ldrb	r3, [r3, #18]
 800b590:	2b03      	cmp	r3, #3
 800b592:	d117      	bne.n	800b5c4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d113      	bne.n	800b5c4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	78db      	ldrb	r3, [r3, #3]
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d10f      	bne.n	800b5c4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	015a      	lsls	r2, r3, #5
 800b5a8:	6a3b      	ldr	r3, [r7, #32]
 800b5aa:	4413      	add	r3, r2
 800b5ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	69fa      	ldr	r2, [r7, #28]
 800b5b4:	0151      	lsls	r1, r2, #5
 800b5b6:	6a3a      	ldr	r2, [r7, #32]
 800b5b8:	440a      	add	r2, r1
 800b5ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b5be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b5c2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	7c9b      	ldrb	r3, [r3, #18]
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d162      	bne.n	800b692 <USB_HC_StartXfer+0x3ea>
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	78db      	ldrb	r3, [r3, #3]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d15e      	bne.n	800b692 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	3b01      	subs	r3, #1
 800b5da:	2b03      	cmp	r3, #3
 800b5dc:	d858      	bhi.n	800b690 <USB_HC_StartXfer+0x3e8>
 800b5de:	a201      	add	r2, pc, #4	@ (adr r2, 800b5e4 <USB_HC_StartXfer+0x33c>)
 800b5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e4:	0800b5f5 	.word	0x0800b5f5
 800b5e8:	0800b617 	.word	0x0800b617
 800b5ec:	0800b639 	.word	0x0800b639
 800b5f0:	0800b65b 	.word	0x0800b65b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	015a      	lsls	r2, r3, #5
 800b5f8:	6a3b      	ldr	r3, [r7, #32]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	69fa      	ldr	r2, [r7, #28]
 800b604:	0151      	lsls	r1, r2, #5
 800b606:	6a3a      	ldr	r2, [r7, #32]
 800b608:	440a      	add	r2, r1
 800b60a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b60e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b612:	6053      	str	r3, [r2, #4]
          break;
 800b614:	e03d      	b.n	800b692 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	015a      	lsls	r2, r3, #5
 800b61a:	6a3b      	ldr	r3, [r7, #32]
 800b61c:	4413      	add	r3, r2
 800b61e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	69fa      	ldr	r2, [r7, #28]
 800b626:	0151      	lsls	r1, r2, #5
 800b628:	6a3a      	ldr	r2, [r7, #32]
 800b62a:	440a      	add	r2, r1
 800b62c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b630:	f043 030e 	orr.w	r3, r3, #14
 800b634:	6053      	str	r3, [r2, #4]
          break;
 800b636:	e02c      	b.n	800b692 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	015a      	lsls	r2, r3, #5
 800b63c:	6a3b      	ldr	r3, [r7, #32]
 800b63e:	4413      	add	r3, r2
 800b640:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	69fa      	ldr	r2, [r7, #28]
 800b648:	0151      	lsls	r1, r2, #5
 800b64a:	6a3a      	ldr	r2, [r7, #32]
 800b64c:	440a      	add	r2, r1
 800b64e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b652:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b656:	6053      	str	r3, [r2, #4]
          break;
 800b658:	e01b      	b.n	800b692 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800b65a:	69fb      	ldr	r3, [r7, #28]
 800b65c:	015a      	lsls	r2, r3, #5
 800b65e:	6a3b      	ldr	r3, [r7, #32]
 800b660:	4413      	add	r3, r2
 800b662:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	69fa      	ldr	r2, [r7, #28]
 800b66a:	0151      	lsls	r1, r2, #5
 800b66c:	6a3a      	ldr	r2, [r7, #32]
 800b66e:	440a      	add	r2, r1
 800b670:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b674:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b678:	6053      	str	r3, [r2, #4]
          break;
 800b67a:	e00a      	b.n	800b692 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	015a      	lsls	r2, r3, #5
 800b680:	6a3b      	ldr	r3, [r7, #32]
 800b682:	4413      	add	r3, r2
 800b684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b688:	461a      	mov	r2, r3
 800b68a:	2300      	movs	r3, #0
 800b68c:	6053      	str	r3, [r2, #4]
 800b68e:	e000      	b.n	800b692 <USB_HC_StartXfer+0x3ea>
          break;
 800b690:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b692:	69fb      	ldr	r3, [r7, #28]
 800b694:	015a      	lsls	r2, r3, #5
 800b696:	6a3b      	ldr	r3, [r7, #32]
 800b698:	4413      	add	r3, r2
 800b69a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b6a8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	78db      	ldrb	r3, [r3, #3]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d004      	beq.n	800b6bc <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b6b8:	613b      	str	r3, [r7, #16]
 800b6ba:	e003      	b.n	800b6c4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b6c2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b6ca:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	015a      	lsls	r2, r3, #5
 800b6d0:	6a3b      	ldr	r3, [r7, #32]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6d8:	461a      	mov	r2, r3
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b6de:	79fb      	ldrb	r3, [r7, #7]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d003      	beq.n	800b6ec <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	e055      	b.n	800b794 <USB_HC_StartXfer+0x4ec>
 800b6e8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	78db      	ldrb	r3, [r3, #3]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d14e      	bne.n	800b792 <USB_HC_StartXfer+0x4ea>
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	6a1b      	ldr	r3, [r3, #32]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d04a      	beq.n	800b792 <USB_HC_StartXfer+0x4ea>
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	79db      	ldrb	r3, [r3, #7]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d146      	bne.n	800b792 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	7c9b      	ldrb	r3, [r3, #18]
 800b708:	2b03      	cmp	r3, #3
 800b70a:	d831      	bhi.n	800b770 <USB_HC_StartXfer+0x4c8>
 800b70c:	a201      	add	r2, pc, #4	@ (adr r2, 800b714 <USB_HC_StartXfer+0x46c>)
 800b70e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b712:	bf00      	nop
 800b714:	0800b725 	.word	0x0800b725
 800b718:	0800b749 	.word	0x0800b749
 800b71c:	0800b725 	.word	0x0800b725
 800b720:	0800b749 	.word	0x0800b749
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	6a1b      	ldr	r3, [r3, #32]
 800b728:	3303      	adds	r3, #3
 800b72a:	089b      	lsrs	r3, r3, #2
 800b72c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b72e:	8afa      	ldrh	r2, [r7, #22]
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b734:	b29b      	uxth	r3, r3
 800b736:	429a      	cmp	r2, r3
 800b738:	d91c      	bls.n	800b774 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	699b      	ldr	r3, [r3, #24]
 800b73e:	f043 0220 	orr.w	r2, r3, #32
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	619a      	str	r2, [r3, #24]
        }
        break;
 800b746:	e015      	b.n	800b774 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	6a1b      	ldr	r3, [r3, #32]
 800b74c:	3303      	adds	r3, #3
 800b74e:	089b      	lsrs	r3, r3, #2
 800b750:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b752:	8afa      	ldrh	r2, [r7, #22]
 800b754:	6a3b      	ldr	r3, [r7, #32]
 800b756:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b75a:	691b      	ldr	r3, [r3, #16]
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	429a      	cmp	r2, r3
 800b760:	d90a      	bls.n	800b778 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	699b      	ldr	r3, [r3, #24]
 800b766:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	619a      	str	r2, [r3, #24]
        }
        break;
 800b76e:	e003      	b.n	800b778 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800b770:	bf00      	nop
 800b772:	e002      	b.n	800b77a <USB_HC_StartXfer+0x4d2>
        break;
 800b774:	bf00      	nop
 800b776:	e000      	b.n	800b77a <USB_HC_StartXfer+0x4d2>
        break;
 800b778:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	6999      	ldr	r1, [r3, #24]
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	785a      	ldrb	r2, [r3, #1]
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	6a1b      	ldr	r3, [r3, #32]
 800b786:	b29b      	uxth	r3, r3
 800b788:	2000      	movs	r0, #0
 800b78a:	9000      	str	r0, [sp, #0]
 800b78c:	68f8      	ldr	r0, [r7, #12]
 800b78e:	f7ff f9c9 	bl	800ab24 <USB_WritePacket>
  }

  return HAL_OK;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3728      	adds	r7, #40	@ 0x28
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b7ae:	695b      	ldr	r3, [r3, #20]
 800b7b0:	b29b      	uxth	r3, r3
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3714      	adds	r7, #20
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr

0800b7be <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b7be:	b480      	push	{r7}
 800b7c0:	b089      	sub	sp, #36	@ 0x24
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800b7ce:	78fb      	ldrb	r3, [r7, #3]
 800b7d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	015a      	lsls	r2, r3, #5
 800b7da:	69fb      	ldr	r3, [r7, #28]
 800b7dc:	4413      	add	r3, r2
 800b7de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	0c9b      	lsrs	r3, r3, #18
 800b7e6:	f003 0303 	and.w	r3, r3, #3
 800b7ea:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b7ec:	69bb      	ldr	r3, [r7, #24]
 800b7ee:	015a      	lsls	r2, r3, #5
 800b7f0:	69fb      	ldr	r3, [r7, #28]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	0fdb      	lsrs	r3, r3, #31
 800b7fc:	f003 0301 	and.w	r3, r3, #1
 800b800:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800b802:	69bb      	ldr	r3, [r7, #24]
 800b804:	015a      	lsls	r2, r3, #5
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	4413      	add	r3, r2
 800b80a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	0fdb      	lsrs	r3, r3, #31
 800b812:	f003 0301 	and.w	r3, r3, #1
 800b816:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	f003 0320 	and.w	r3, r3, #32
 800b820:	2b20      	cmp	r3, #32
 800b822:	d10d      	bne.n	800b840 <USB_HC_Halt+0x82>
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d10a      	bne.n	800b840 <USB_HC_Halt+0x82>
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d005      	beq.n	800b83c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	2b01      	cmp	r3, #1
 800b834:	d002      	beq.n	800b83c <USB_HC_Halt+0x7e>
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	2b03      	cmp	r3, #3
 800b83a:	d101      	bne.n	800b840 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800b83c:	2300      	movs	r3, #0
 800b83e:	e0d8      	b.n	800b9f2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d002      	beq.n	800b84c <USB_HC_Halt+0x8e>
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	2b02      	cmp	r3, #2
 800b84a:	d173      	bne.n	800b934 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	015a      	lsls	r2, r3, #5
 800b850:	69fb      	ldr	r3, [r7, #28]
 800b852:	4413      	add	r3, r2
 800b854:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	69ba      	ldr	r2, [r7, #24]
 800b85c:	0151      	lsls	r1, r2, #5
 800b85e:	69fa      	ldr	r2, [r7, #28]
 800b860:	440a      	add	r2, r1
 800b862:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b866:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b86a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	f003 0320 	and.w	r3, r3, #32
 800b874:	2b00      	cmp	r3, #0
 800b876:	d14a      	bne.n	800b90e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b87c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b880:	2b00      	cmp	r3, #0
 800b882:	d133      	bne.n	800b8ec <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b884:	69bb      	ldr	r3, [r7, #24]
 800b886:	015a      	lsls	r2, r3, #5
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	4413      	add	r3, r2
 800b88c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	69ba      	ldr	r2, [r7, #24]
 800b894:	0151      	lsls	r1, r2, #5
 800b896:	69fa      	ldr	r2, [r7, #28]
 800b898:	440a      	add	r2, r1
 800b89a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b89e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b8a2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b8a4:	69bb      	ldr	r3, [r7, #24]
 800b8a6:	015a      	lsls	r2, r3, #5
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	69ba      	ldr	r2, [r7, #24]
 800b8b4:	0151      	lsls	r1, r2, #5
 800b8b6:	69fa      	ldr	r2, [r7, #28]
 800b8b8:	440a      	add	r2, r1
 800b8ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b8be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b8c2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b8d0:	d82e      	bhi.n	800b930 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	015a      	lsls	r2, r3, #5
 800b8d6:	69fb      	ldr	r3, [r7, #28]
 800b8d8:	4413      	add	r3, r2
 800b8da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b8e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b8e8:	d0ec      	beq.n	800b8c4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b8ea:	e081      	b.n	800b9f0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b8ec:	69bb      	ldr	r3, [r7, #24]
 800b8ee:	015a      	lsls	r2, r3, #5
 800b8f0:	69fb      	ldr	r3, [r7, #28]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	69ba      	ldr	r2, [r7, #24]
 800b8fc:	0151      	lsls	r1, r2, #5
 800b8fe:	69fa      	ldr	r2, [r7, #28]
 800b900:	440a      	add	r2, r1
 800b902:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b90a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b90c:	e070      	b.n	800b9f0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b90e:	69bb      	ldr	r3, [r7, #24]
 800b910:	015a      	lsls	r2, r3, #5
 800b912:	69fb      	ldr	r3, [r7, #28]
 800b914:	4413      	add	r3, r2
 800b916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	69ba      	ldr	r2, [r7, #24]
 800b91e:	0151      	lsls	r1, r2, #5
 800b920:	69fa      	ldr	r2, [r7, #28]
 800b922:	440a      	add	r2, r1
 800b924:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b928:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b92c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b92e:	e05f      	b.n	800b9f0 <USB_HC_Halt+0x232>
            break;
 800b930:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b932:	e05d      	b.n	800b9f0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b934:	69bb      	ldr	r3, [r7, #24]
 800b936:	015a      	lsls	r2, r3, #5
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	4413      	add	r3, r2
 800b93c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	69ba      	ldr	r2, [r7, #24]
 800b944:	0151      	lsls	r1, r2, #5
 800b946:	69fa      	ldr	r2, [r7, #28]
 800b948:	440a      	add	r2, r1
 800b94a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b94e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b952:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b95a:	691b      	ldr	r3, [r3, #16]
 800b95c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b960:	2b00      	cmp	r3, #0
 800b962:	d133      	bne.n	800b9cc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b964:	69bb      	ldr	r3, [r7, #24]
 800b966:	015a      	lsls	r2, r3, #5
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	4413      	add	r3, r2
 800b96c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	69ba      	ldr	r2, [r7, #24]
 800b974:	0151      	lsls	r1, r2, #5
 800b976:	69fa      	ldr	r2, [r7, #28]
 800b978:	440a      	add	r2, r1
 800b97a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b97e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b982:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b984:	69bb      	ldr	r3, [r7, #24]
 800b986:	015a      	lsls	r2, r3, #5
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	4413      	add	r3, r2
 800b98c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	69ba      	ldr	r2, [r7, #24]
 800b994:	0151      	lsls	r1, r2, #5
 800b996:	69fa      	ldr	r2, [r7, #28]
 800b998:	440a      	add	r2, r1
 800b99a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b99e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b9a2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b9b0:	d81d      	bhi.n	800b9ee <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b9b2:	69bb      	ldr	r3, [r7, #24]
 800b9b4:	015a      	lsls	r2, r3, #5
 800b9b6:	69fb      	ldr	r3, [r7, #28]
 800b9b8:	4413      	add	r3, r2
 800b9ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b9c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9c8:	d0ec      	beq.n	800b9a4 <USB_HC_Halt+0x1e6>
 800b9ca:	e011      	b.n	800b9f0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b9cc:	69bb      	ldr	r3, [r7, #24]
 800b9ce:	015a      	lsls	r2, r3, #5
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	69ba      	ldr	r2, [r7, #24]
 800b9dc:	0151      	lsls	r1, r2, #5
 800b9de:	69fa      	ldr	r2, [r7, #28]
 800b9e0:	440a      	add	r2, r1
 800b9e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b9e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b9ea:	6013      	str	r3, [r2, #0]
 800b9ec:	e000      	b.n	800b9f0 <USB_HC_Halt+0x232>
          break;
 800b9ee:	bf00      	nop
    }
  }

  return HAL_OK;
 800b9f0:	2300      	movs	r3, #0
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3724      	adds	r7, #36	@ 0x24
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr
	...

0800ba00 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b087      	sub	sp, #28
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	460b      	mov	r3, r1
 800ba0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ba10:	78fb      	ldrb	r3, [r7, #3]
 800ba12:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ba14:	2301      	movs	r3, #1
 800ba16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	04da      	lsls	r2, r3, #19
 800ba1c:	4b15      	ldr	r3, [pc, #84]	@ (800ba74 <USB_DoPing+0x74>)
 800ba1e:	4013      	ands	r3, r2
 800ba20:	693a      	ldr	r2, [r7, #16]
 800ba22:	0151      	lsls	r1, r2, #5
 800ba24:	697a      	ldr	r2, [r7, #20]
 800ba26:	440a      	add	r2, r1
 800ba28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ba2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ba30:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	015a      	lsls	r2, r3, #5
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	4413      	add	r3, r2
 800ba3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ba48:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ba50:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	015a      	lsls	r2, r3, #5
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	4413      	add	r3, r2
 800ba5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba5e:	461a      	mov	r2, r3
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	371c      	adds	r7, #28
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	1ff80000 	.word	0x1ff80000

0800ba78 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b088      	sub	sp, #32
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800ba80:	2300      	movs	r3, #0
 800ba82:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f7fe ff8c 	bl	800a9aa <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ba92:	2110      	movs	r1, #16
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f7fe ffe5 	bl	800aa64 <USB_FlushTxFifo>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d001      	beq.n	800baa4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800baa0:	2301      	movs	r3, #1
 800baa2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f7ff f80f 	bl	800aac8 <USB_FlushRxFifo>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d001      	beq.n	800bab4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800bab4:	2300      	movs	r3, #0
 800bab6:	61bb      	str	r3, [r7, #24]
 800bab8:	e01f      	b.n	800bafa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	015a      	lsls	r2, r3, #5
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	4413      	add	r3, r2
 800bac2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bad0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bad8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bae0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800bae2:	69bb      	ldr	r3, [r7, #24]
 800bae4:	015a      	lsls	r2, r3, #5
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	4413      	add	r3, r2
 800baea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800baee:	461a      	mov	r2, r3
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	3301      	adds	r3, #1
 800baf8:	61bb      	str	r3, [r7, #24]
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	2b0f      	cmp	r3, #15
 800bafe:	d9dc      	bls.n	800baba <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800bb00:	2300      	movs	r3, #0
 800bb02:	61bb      	str	r3, [r7, #24]
 800bb04:	e034      	b.n	800bb70 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	015a      	lsls	r2, r3, #5
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bb1c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bb24:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bb2c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	015a      	lsls	r2, r3, #5
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	4413      	add	r3, r2
 800bb36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	3301      	adds	r3, #1
 800bb44:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bb4c:	d80c      	bhi.n	800bb68 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bb4e:	69bb      	ldr	r3, [r7, #24]
 800bb50:	015a      	lsls	r2, r3, #5
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	4413      	add	r3, r2
 800bb56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb64:	d0ec      	beq.n	800bb40 <USB_StopHost+0xc8>
 800bb66:	e000      	b.n	800bb6a <USB_StopHost+0xf2>
        break;
 800bb68:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800bb6a:	69bb      	ldr	r3, [r7, #24]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	61bb      	str	r3, [r7, #24]
 800bb70:	69bb      	ldr	r3, [r7, #24]
 800bb72:	2b0f      	cmp	r3, #15
 800bb74:	d9c7      	bls.n	800bb06 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb82:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f04f 32ff 	mov.w	r2, #4294967295
 800bb8a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f7fe fefb 	bl	800a988 <USB_EnableGlobalInt>

  return ret;
 800bb92:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3720      	adds	r7, #32
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800bb9c:	b590      	push	{r4, r7, lr}
 800bb9e:	b08b      	sub	sp, #44	@ 0x2c
 800bba0:	af04      	add	r7, sp, #16
 800bba2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint16_t ep_mps;
  uint8_t max_ep;
  uint8_t num = 0U;
 800bba4:	2300      	movs	r3, #0
 800bba6:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bbae:	7919      	ldrb	r1, [r3, #4]
 800bbb0:	23ff      	movs	r3, #255	@ 0xff
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f001 f873 	bl	800cca0 <USBH_FindInterface>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bbbe:	7dbb      	ldrb	r3, [r7, #22]
 800bbc0:	2bff      	cmp	r3, #255	@ 0xff
 800bbc2:	d002      	beq.n	800bbca <USBH_HID_InterfaceInit+0x2e>
 800bbc4:	7dbb      	ldrb	r3, [r7, #22]
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d90f      	bls.n	800bbea <USBH_HID_InterfaceInit+0x4e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 800bbca:	48a9      	ldr	r0, [pc, #676]	@ (800be70 <USBH_HID_InterfaceInit+0x2d4>)
 800bbcc:	f003 fac2 	bl	800f154 <iprintf>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4619      	mov	r1, r3
 800bbda:	48a6      	ldr	r0, [pc, #664]	@ (800be74 <USBH_HID_InterfaceInit+0x2d8>)
 800bbdc:	f003 faba 	bl	800f154 <iprintf>
 800bbe0:	200a      	movs	r0, #10
 800bbe2:	f003 fac9 	bl	800f178 <putchar>
    return USBH_FAIL;
 800bbe6:	2302      	movs	r3, #2
 800bbe8:	e13d      	b.n	800be66 <USBH_HID_InterfaceInit+0x2ca>
  }

  status = USBH_SelectInterface(phost, interface);
 800bbea:	7dbb      	ldrb	r3, [r7, #22]
 800bbec:	4619      	mov	r1, r3
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 ffee 	bl	800cbd0 <USBH_SelectInterface>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 800bbf8:	7d7b      	ldrb	r3, [r7, #21]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d001      	beq.n	800bc02 <USBH_HID_InterfaceInit+0x66>
  {
    return USBH_FAIL;
 800bbfe:	2302      	movs	r3, #2
 800bc00:	e131      	b.n	800be66 <USBH_HID_InterfaceInit+0x2ca>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800bc08:	2034      	movs	r0, #52	@ 0x34
 800bc0a:	f003 f89f 	bl	800ed4c <malloc>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bc18:	69db      	ldr	r3, [r3, #28]
 800bc1a:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10a      	bne.n	800bc38 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
 800bc22:	4893      	ldr	r0, [pc, #588]	@ (800be70 <USBH_HID_InterfaceInit+0x2d4>)
 800bc24:	f003 fa96 	bl	800f154 <iprintf>
 800bc28:	4893      	ldr	r0, [pc, #588]	@ (800be78 <USBH_HID_InterfaceInit+0x2dc>)
 800bc2a:	f003 fa93 	bl	800f154 <iprintf>
 800bc2e:	200a      	movs	r0, #10
 800bc30:	f003 faa2 	bl	800f178 <putchar>
    return USBH_FAIL;
 800bc34:	2302      	movs	r3, #2
 800bc36:	e116      	b.n	800be66 <USBH_HID_InterfaceInit+0x2ca>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 800bc38:	2234      	movs	r2, #52	@ 0x34
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	6938      	ldr	r0, [r7, #16]
 800bc3e:	f003 fb27 	bl	800f290 <memset>

  HID_Handle->state = USBH_HID_ERROR;
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	2207      	movs	r2, #7
 800bc46:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800bc48:	7dbb      	ldrb	r3, [r7, #22]
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	211a      	movs	r1, #26
 800bc4e:	fb01 f303 	mul.w	r3, r1, r3
 800bc52:	4413      	add	r3, r2
 800bc54:	f203 3349 	addw	r3, r3, #841	@ 0x349
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d109      	bne.n	800bc72 <USBH_HID_InterfaceInit+0xd6>
  {
    USBH_UsrLog("KeyBoard device found!");
 800bc5e:	4887      	ldr	r0, [pc, #540]	@ (800be7c <USBH_HID_InterfaceInit+0x2e0>)
 800bc60:	f003 fa78 	bl	800f154 <iprintf>
 800bc64:	200a      	movs	r0, #10
 800bc66:	f003 fa87 	bl	800f178 <putchar>
    HID_Handle->Init = USBH_HID_KeybdInit;
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	4a84      	ldr	r2, [pc, #528]	@ (800be80 <USBH_HID_InterfaceInit+0x2e4>)
 800bc6e:	631a      	str	r2, [r3, #48]	@ 0x30
 800bc70:	e01c      	b.n	800bcac <USBH_HID_InterfaceInit+0x110>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 800bc72:	7dbb      	ldrb	r3, [r7, #22]
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	211a      	movs	r1, #26
 800bc78:	fb01 f303 	mul.w	r3, r1, r3
 800bc7c:	4413      	add	r3, r2
 800bc7e:	f203 3349 	addw	r3, r3, #841	@ 0x349
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	d109      	bne.n	800bc9c <USBH_HID_InterfaceInit+0x100>
  {
    USBH_UsrLog("Mouse device found!");
 800bc88:	487e      	ldr	r0, [pc, #504]	@ (800be84 <USBH_HID_InterfaceInit+0x2e8>)
 800bc8a:	f003 fa63 	bl	800f154 <iprintf>
 800bc8e:	200a      	movs	r0, #10
 800bc90:	f003 fa72 	bl	800f178 <putchar>
    HID_Handle->Init = USBH_HID_MouseInit;
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	4a7c      	ldr	r2, [pc, #496]	@ (800be88 <USBH_HID_InterfaceInit+0x2ec>)
 800bc98:	631a      	str	r2, [r3, #48]	@ 0x30
 800bc9a:	e007      	b.n	800bcac <USBH_HID_InterfaceInit+0x110>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
 800bc9c:	487b      	ldr	r0, [pc, #492]	@ (800be8c <USBH_HID_InterfaceInit+0x2f0>)
 800bc9e:	f003 fa59 	bl	800f154 <iprintf>
 800bca2:	200a      	movs	r0, #10
 800bca4:	f003 fa68 	bl	800f178 <putchar>
    return USBH_FAIL;
 800bca8:	2302      	movs	r3, #2
 800bcaa:	e0dc      	b.n	800be66 <USBH_HID_InterfaceInit+0x2ca>
  }

  HID_Handle->state     = USBH_HID_INIT;
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = USBH_HID_REQ_INIT;
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bcb8:	7dbb      	ldrb	r3, [r7, #22]
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	211a      	movs	r1, #26
 800bcbe:	fb01 f303 	mul.w	r3, r1, r3
 800bcc2:	4413      	add	r3, r2
 800bcc4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800bcc8:	781a      	ldrb	r2, [r3, #0]
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bcce:	7dbb      	ldrb	r3, [r7, #22]
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	211a      	movs	r1, #26
 800bcd4:	fb01 f303 	mul.w	r3, r1, r3
 800bcd8:	4413      	add	r3, r2
 800bcda:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800bcde:	881a      	ldrh	r2, [r3, #0]
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800bce4:	7dbb      	ldrb	r3, [r7, #22]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	211a      	movs	r1, #26
 800bcea:	fb01 f303 	mul.w	r3, r1, r3
 800bcee:	4413      	add	r3, r2
 800bcf0:	f203 3352 	addw	r3, r3, #850	@ 0x352
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll < HID_MIN_POLL)
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	8b9b      	ldrh	r3, [r3, #28]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d102      	bne.n	800bd0a <USBH_HID_InterfaceInit+0x16e>
  {
    HID_Handle->poll = HID_MIN_POLL;
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	2201      	movs	r2, #1
 800bd08:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 800bd0a:	7dbb      	ldrb	r3, [r7, #22]
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	211a      	movs	r1, #26
 800bd10:	fb01 f303 	mul.w	r3, r1, r3
 800bd14:	4413      	add	r3, r2
 800bd16:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	2b02      	cmp	r3, #2
 800bd1e:	bf28      	it	cs
 800bd20:	2302      	movcs	r3, #2
 800bd22:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 800bd24:	2300      	movs	r3, #0
 800bd26:	75fb      	strb	r3, [r7, #23]
 800bd28:	e097      	b.n	800be5a <USBH_HID_InterfaceInit+0x2be>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 800bd2a:	7dbb      	ldrb	r3, [r7, #22]
 800bd2c:	7df9      	ldrb	r1, [r7, #23]
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	3101      	adds	r1, #1
 800bd32:	00c9      	lsls	r1, r1, #3
 800bd34:	201a      	movs	r0, #26
 800bd36:	fb00 f303 	mul.w	r3, r0, r3
 800bd3a:	440b      	add	r3, r1
 800bd3c:	4413      	add	r3, r2
 800bd3e:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	b25b      	sxtb	r3, r3
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	da42      	bge.n	800bdd0 <USBH_HID_InterfaceInit+0x234>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800bd4a:	7dbb      	ldrb	r3, [r7, #22]
 800bd4c:	7df9      	ldrb	r1, [r7, #23]
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	3101      	adds	r1, #1
 800bd52:	00c9      	lsls	r1, r1, #3
 800bd54:	201a      	movs	r0, #26
 800bd56:	fb00 f303 	mul.w	r3, r0, r3
 800bd5a:	440b      	add	r3, r1
 800bd5c:	4413      	add	r3, r2
 800bd5e:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800bd62:	781a      	ldrb	r2, [r3, #0]
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	791b      	ldrb	r3, [r3, #4]
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f002 fc89 	bl	800e686 <USBH_AllocPipe>
 800bd74:	4603      	mov	r3, r0
 800bd76:	461a      	mov	r2, r3
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	705a      	strb	r2, [r3, #1]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800bd7c:	7dbb      	ldrb	r3, [r7, #22]
 800bd7e:	7df9      	ldrb	r1, [r7, #23]
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	3101      	adds	r1, #1
 800bd84:	00c9      	lsls	r1, r1, #3
 800bd86:	201a      	movs	r0, #26
 800bd88:	fb00 f303 	mul.w	r3, r0, r3
 800bd8c:	440b      	add	r3, r1
 800bd8e:	4413      	add	r3, r2
 800bd90:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800bd94:	881b      	ldrh	r3, [r3, #0]
 800bd96:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	7859      	ldrb	r1, [r3, #1]
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	7918      	ldrb	r0, [r3, #4]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bdac:	89ba      	ldrh	r2, [r7, #12]
 800bdae:	9202      	str	r2, [sp, #8]
 800bdb0:	2203      	movs	r2, #3
 800bdb2:	9201      	str	r2, [sp, #4]
 800bdb4:	9300      	str	r3, [sp, #0]
 800bdb6:	4623      	mov	r3, r4
 800bdb8:	4602      	mov	r2, r0
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f002 fc34 	bl	800e628 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	785b      	ldrb	r3, [r3, #1]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f002 ff35 	bl	800ec38 <USBH_LL_SetToggle>
 800bdce:	e041      	b.n	800be54 <USBH_HID_InterfaceInit+0x2b8>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800bdd0:	7dbb      	ldrb	r3, [r7, #22]
 800bdd2:	7df9      	ldrb	r1, [r7, #23]
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	3101      	adds	r1, #1
 800bdd8:	00c9      	lsls	r1, r1, #3
 800bdda:	201a      	movs	r0, #26
 800bddc:	fb00 f303 	mul.w	r3, r0, r3
 800bde0:	440b      	add	r3, r1
 800bde2:	4413      	add	r3, r2
 800bde4:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800bde8:	781a      	ldrb	r2, [r3, #0]
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe = USBH_AllocPipe(phost, HID_Handle->OutEp);
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	78db      	ldrb	r3, [r3, #3]
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f002 fc46 	bl	800e686 <USBH_AllocPipe>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	701a      	strb	r2, [r3, #0]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800be02:	7dbb      	ldrb	r3, [r7, #22]
 800be04:	7df9      	ldrb	r1, [r7, #23]
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	3101      	adds	r1, #1
 800be0a:	00c9      	lsls	r1, r1, #3
 800be0c:	201a      	movs	r0, #26
 800be0e:	fb00 f303 	mul.w	r3, r0, r3
 800be12:	440b      	add	r3, r1
 800be14:	4413      	add	r3, r2
 800be16:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800be1a:	881b      	ldrh	r3, [r3, #0]
 800be1c:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	7819      	ldrb	r1, [r3, #0]
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	78d8      	ldrb	r0, [r3, #3]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800be32:	89ba      	ldrh	r2, [r7, #12]
 800be34:	9202      	str	r2, [sp, #8]
 800be36:	2203      	movs	r2, #3
 800be38:	9201      	str	r2, [sp, #4]
 800be3a:	9300      	str	r3, [sp, #0]
 800be3c:	4623      	mov	r3, r4
 800be3e:	4602      	mov	r2, r0
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f002 fbf1 	bl	800e628 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	2200      	movs	r2, #0
 800be4c:	4619      	mov	r1, r3
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f002 fef2 	bl	800ec38 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 800be54:	7dfb      	ldrb	r3, [r7, #23]
 800be56:	3301      	adds	r3, #1
 800be58:	75fb      	strb	r3, [r7, #23]
 800be5a:	7dfa      	ldrb	r2, [r7, #23]
 800be5c:	7bfb      	ldrb	r3, [r7, #15]
 800be5e:	429a      	cmp	r2, r3
 800be60:	f4ff af63 	bcc.w	800bd2a <USBH_HID_InterfaceInit+0x18e>
    }
  }

  return USBH_OK;
 800be64:	2300      	movs	r3, #0
}
 800be66:	4618      	mov	r0, r3
 800be68:	371c      	adds	r7, #28
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd90      	pop	{r4, r7, pc}
 800be6e:	bf00      	nop
 800be70:	080102cc 	.word	0x080102cc
 800be74:	080102d8 	.word	0x080102d8
 800be78:	08010300 	.word	0x08010300
 800be7c:	08010328 	.word	0x08010328
 800be80:	0800c5c1 	.word	0x0800c5c1
 800be84:	08010340 	.word	0x08010340
 800be88:	0800c811 	.word	0x0800c811
 800be8c:	08010354 	.word	0x08010354

0800be90 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b084      	sub	sp, #16
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800be9e:	69db      	ldr	r3, [r3, #28]
 800bea0:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	785b      	ldrb	r3, [r3, #1]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d00e      	beq.n	800bec8 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	785b      	ldrb	r3, [r3, #1]
 800beae:	4619      	mov	r1, r3
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f002 fbd8 	bl	800e666 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	785b      	ldrb	r3, [r3, #1]
 800beba:	4619      	mov	r1, r3
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f002 fc03 	bl	800e6c8 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2200      	movs	r2, #0
 800bec6:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d00e      	beq.n	800beee <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	4619      	mov	r1, r3
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f002 fbc5 	bl	800e666 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	4619      	mov	r1, r3
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f002 fbf0 	bl	800e6c8 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2200      	movs	r2, #0
 800beec:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bef4:	69db      	ldr	r3, [r3, #28]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d00b      	beq.n	800bf12 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf00:	69db      	ldr	r3, [r3, #28]
 800bf02:	4618      	mov	r0, r3
 800bf04:	f002 ff2a 	bl	800ed5c <free>
    phost->pActiveClass->pData = 0U;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf0e:	2200      	movs	r2, #0
 800bf10:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800bf12:	2300      	movs	r3, #0
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3710      	adds	r7, #16
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 800bf24:	2301      	movs	r3, #1
 800bf26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf32:	69db      	ldr	r3, [r3, #28]
 800bf34:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	795b      	ldrb	r3, [r3, #5]
 800bf3a:	2b05      	cmp	r3, #5
 800bf3c:	d872      	bhi.n	800c024 <USBH_HID_ClassRequest+0x108>
 800bf3e:	a201      	add	r2, pc, #4	@ (adr r2, 800bf44 <USBH_HID_ClassRequest+0x28>)
 800bf40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf44:	0800bf5d 	.word	0x0800bf5d
 800bf48:	0800c025 	.word	0x0800c025
 800bf4c:	0800bf77 	.word	0x0800bf77
 800bf50:	0800bf5d 	.word	0x0800bf5d
 800bf54:	0800bfb3 	.word	0x0800bfb3
 800bf58:	0800bfdd 	.word	0x0800bfdd
  {
    case USBH_HID_REQ_INIT:
    case USBH_HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	331c      	adds	r3, #28
 800bf66:	4619      	mov	r1, r3
 800bf68:	4610      	mov	r0, r2
 800bf6a:	f000 fa15 	bl	800c398 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = USBH_HID_REQ_GET_REPORT_DESC;
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	2202      	movs	r2, #2
 800bf72:	715a      	strb	r2, [r3, #5]

      break;
 800bf74:	e05d      	b.n	800c032 <USBH_HID_ClassRequest+0x116>
    case USBH_HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 f965 	bl	800c24c <USBH_HID_GetHIDReportDescriptor>
 800bf82:	4603      	mov	r3, r0
 800bf84:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800bf86:	7bbb      	ldrb	r3, [r7, #14]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d103      	bne.n	800bf94 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = USBH_HID_REQ_SET_IDLE;
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	2204      	movs	r2, #4
 800bf90:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 800bf92:	e049      	b.n	800c028 <USBH_HID_ClassRequest+0x10c>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800bf94:	7bbb      	ldrb	r3, [r7, #14]
 800bf96:	2b03      	cmp	r3, #3
 800bf98:	d146      	bne.n	800c028 <USBH_HID_ClassRequest+0x10c>
        USBH_ErrLog("Control error: HID: Device Get Report Descriptor request failed");
 800bf9a:	4828      	ldr	r0, [pc, #160]	@ (800c03c <USBH_HID_ClassRequest+0x120>)
 800bf9c:	f003 f8da 	bl	800f154 <iprintf>
 800bfa0:	4827      	ldr	r0, [pc, #156]	@ (800c040 <USBH_HID_ClassRequest+0x124>)
 800bfa2:	f003 f8d7 	bl	800f154 <iprintf>
 800bfa6:	200a      	movs	r0, #10
 800bfa8:	f003 f8e6 	bl	800f178 <putchar>
        status = USBH_FAIL;
 800bfac:	2302      	movs	r3, #2
 800bfae:	73fb      	strb	r3, [r7, #15]
      break;
 800bfb0:	e03a      	b.n	800c028 <USBH_HID_ClassRequest+0x10c>

    case USBH_HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	2100      	movs	r1, #0
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 f974 	bl	800c2a4 <USBH_HID_SetIdle>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 800bfc0:	7bbb      	ldrb	r3, [r7, #14]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d103      	bne.n	800bfce <USBH_HID_ClassRequest+0xb2>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	2205      	movs	r2, #5
 800bfca:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 800bfcc:	e02e      	b.n	800c02c <USBH_HID_ClassRequest+0x110>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 800bfce:	7bbb      	ldrb	r3, [r7, #14]
 800bfd0:	2b03      	cmp	r3, #3
 800bfd2:	d12b      	bne.n	800c02c <USBH_HID_ClassRequest+0x110>
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	2205      	movs	r2, #5
 800bfd8:	715a      	strb	r2, [r3, #5]
      break;
 800bfda:	e027      	b.n	800c02c <USBH_HID_ClassRequest+0x110>

    case USBH_HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 800bfdc:	2100      	movs	r1, #0
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 f9b4 	bl	800c34c <USBH_HID_SetProtocol>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800bfe8:	7bbb      	ldrb	r3, [r7, #14]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d10b      	bne.n	800c006 <USBH_HID_ClassRequest+0xea>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_IDLE;
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	2201      	movs	r2, #1
 800bff2:	715a      	strb	r2, [r3, #5]

        /* all requests performed */
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bffa:	2102      	movs	r1, #2
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	4798      	blx	r3
        status = USBH_OK;
 800c000:	2300      	movs	r3, #0
 800c002:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 800c004:	e014      	b.n	800c030 <USBH_HID_ClassRequest+0x114>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800c006:	7bbb      	ldrb	r3, [r7, #14]
 800c008:	2b03      	cmp	r3, #3
 800c00a:	d111      	bne.n	800c030 <USBH_HID_ClassRequest+0x114>
        USBH_ErrLog("Control error: HID: Device Set protocol request failed");
 800c00c:	480b      	ldr	r0, [pc, #44]	@ (800c03c <USBH_HID_ClassRequest+0x120>)
 800c00e:	f003 f8a1 	bl	800f154 <iprintf>
 800c012:	480c      	ldr	r0, [pc, #48]	@ (800c044 <USBH_HID_ClassRequest+0x128>)
 800c014:	f003 f89e 	bl	800f154 <iprintf>
 800c018:	200a      	movs	r0, #10
 800c01a:	f003 f8ad 	bl	800f178 <putchar>
        status = USBH_FAIL;
 800c01e:	2302      	movs	r3, #2
 800c020:	73fb      	strb	r3, [r7, #15]
      break;
 800c022:	e005      	b.n	800c030 <USBH_HID_ClassRequest+0x114>

    case USBH_HID_REQ_IDLE:
    default:
      break;
 800c024:	bf00      	nop
 800c026:	e004      	b.n	800c032 <USBH_HID_ClassRequest+0x116>
      break;
 800c028:	bf00      	nop
 800c02a:	e002      	b.n	800c032 <USBH_HID_ClassRequest+0x116>
      break;
 800c02c:	bf00      	nop
 800c02e:	e000      	b.n	800c032 <USBH_HID_ClassRequest+0x116>
      break;
 800c030:	bf00      	nop
  }

  return status;
 800c032:	7bfb      	ldrb	r3, [r7, #15]
}
 800c034:	4618      	mov	r0, r3
 800c036:	3710      	adds	r7, #16
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	0801036c 	.word	0x0801036c
 800c040:	08010374 	.word	0x08010374
 800c044:	080103b4 	.word	0x080103b4

0800c048 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b088      	sub	sp, #32
 800c04c:	af02      	add	r7, sp, #8
 800c04e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c050:	2300      	movs	r3, #0
 800c052:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c05a:	69db      	ldr	r3, [r3, #28]
 800c05c:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	789b      	ldrb	r3, [r3, #2]
 800c062:	2b06      	cmp	r3, #6
 800c064:	f200 80c1 	bhi.w	800c1ea <USBH_HID_Process+0x1a2>
 800c068:	a201      	add	r2, pc, #4	@ (adr r2, 800c070 <USBH_HID_Process+0x28>)
 800c06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c06e:	bf00      	nop
 800c070:	0800c08d 	.word	0x0800c08d
 800c074:	0800c0c5 	.word	0x0800c0c5
 800c078:	0800c1eb 	.word	0x0800c1eb
 800c07c:	0800c1eb 	.word	0x0800c1eb
 800c080:	0800c135 	.word	0x0800c135
 800c084:	0800c11f 	.word	0x0800c11f
 800c088:	0800c163 	.word	0x0800c163
  {
    case USBH_HID_INIT:
      status = HID_Handle->Init(phost);
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	4798      	blx	r3
 800c094:	4603      	mov	r3, r0
 800c096:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800c098:	7dfb      	ldrb	r3, [r7, #23]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d103      	bne.n	800c0a6 <USBH_HID_Process+0x5e>
      {
        HID_Handle->state = USBH_HID_IDLE;
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c0a4:	e0a6      	b.n	800c1f4 <USBH_HID_Process+0x1ac>
        USBH_ErrLog("HID Class Init failed");
 800c0a6:	4856      	ldr	r0, [pc, #344]	@ (800c200 <USBH_HID_Process+0x1b8>)
 800c0a8:	f003 f854 	bl	800f154 <iprintf>
 800c0ac:	4855      	ldr	r0, [pc, #340]	@ (800c204 <USBH_HID_Process+0x1bc>)
 800c0ae:	f003 f851 	bl	800f154 <iprintf>
 800c0b2:	200a      	movs	r0, #10
 800c0b4:	f003 f860 	bl	800f178 <putchar>
        HID_Handle->state = USBH_HID_ERROR;
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	2207      	movs	r2, #7
 800c0bc:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800c0be:	2302      	movs	r3, #2
 800c0c0:	75fb      	strb	r3, [r7, #23]
      break;
 800c0c2:	e097      	b.n	800c1f4 <USBH_HID_Process+0x1ac>

    case USBH_HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	695a      	ldr	r2, [r3, #20]
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	8b1b      	ldrh	r3, [r3, #24]
 800c0cc:	b2db      	uxtb	r3, r3
 800c0ce:	9300      	str	r3, [sp, #0]
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	2101      	movs	r1, #1
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 f90c 	bl	800c2f4 <USBH_HID_GetReport>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800c0e0:	7dfb      	ldrb	r3, [r7, #23]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d103      	bne.n	800c0ee <USBH_HID_Process+0xa6>
      {
        HID_Handle->state = USBH_HID_SYNC;
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	2205      	movs	r2, #5
 800c0ea:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c0ec:	e082      	b.n	800c1f4 <USBH_HID_Process+0x1ac>
      else if (status == USBH_BUSY)
 800c0ee:	7dfb      	ldrb	r3, [r7, #23]
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d105      	bne.n	800c100 <USBH_HID_Process+0xb8>
        HID_Handle->state = USBH_HID_IDLE;
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	75fb      	strb	r3, [r7, #23]
      break;
 800c0fe:	e079      	b.n	800c1f4 <USBH_HID_Process+0x1ac>
      else if (status == USBH_NOT_SUPPORTED)
 800c100:	7dfb      	ldrb	r3, [r7, #23]
 800c102:	2b03      	cmp	r3, #3
 800c104:	d105      	bne.n	800c112 <USBH_HID_Process+0xca>
        HID_Handle->state = USBH_HID_SYNC;
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	2205      	movs	r2, #5
 800c10a:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800c10c:	2300      	movs	r3, #0
 800c10e:	75fb      	strb	r3, [r7, #23]
      break;
 800c110:	e070      	b.n	800c1f4 <USBH_HID_Process+0x1ac>
        HID_Handle->state = USBH_HID_ERROR;
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	2207      	movs	r2, #7
 800c116:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800c118:	2302      	movs	r3, #2
 800c11a:	75fb      	strb	r3, [r7, #23]
      break;
 800c11c:	e06a      	b.n	800c1f4 <USBH_HID_Process+0x1ac>

    case USBH_HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c124:	f003 0301 	and.w	r3, r3, #1
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d060      	beq.n	800c1ee <USBH_HID_Process+0x1a6>
      {
        HID_Handle->state = USBH_HID_GET_DATA;
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	2204      	movs	r2, #4
 800c130:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c132:	e05c      	b.n	800c1ee <USBH_HID_Process+0x1a6>

    case USBH_HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800c13c:	b2da      	uxtb	r2, r3
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	785b      	ldrb	r3, [r3, #1]
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f002 fa51 	bl	800e5ea <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = USBH_HID_POLL;
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	2206      	movs	r2, #6
 800c14c:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	2200      	movs	r2, #0
 800c15c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      break;
 800c160:	e048      	b.n	800c1f4 <USBH_HID_Process+0x1ac>

    case USBH_HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	785b      	ldrb	r3, [r3, #1]
 800c166:	4619      	mov	r1, r3
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f002 fd3b 	bl	800ebe4 <USBH_LL_GetURBState>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b01      	cmp	r3, #1
 800c172:	d124      	bne.n	800c1be <USBH_HID_Process+0x176>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	785b      	ldrb	r3, [r3, #1]
 800c178:	4619      	mov	r1, r3
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f002 fca0 	bl	800eac0 <USBH_LL_GetLastXferSize>
 800c180:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U) && (HID_Handle->fifo.buf != NULL))
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d132      	bne.n	800c1f2 <USBH_HID_Process+0x1aa>
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d02f      	beq.n	800c1f2 <USBH_HID_Process+0x1aa>
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	689b      	ldr	r3, [r3, #8]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d02b      	beq.n	800c1f2 <USBH_HID_Process+0x1aa>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	f103 0008 	add.w	r0, r3, #8
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	6959      	ldr	r1, [r3, #20]
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	8b1b      	ldrh	r3, [r3, #24]
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	f000 f9b5 	bl	800c518 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          USBH_HID_EventCallback(phost);
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f7f5 f842 	bl	8001240 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = USBH_HID_GET_DATA;
          }
        }
      }
      break;
 800c1bc:	e019      	b.n	800c1f2 <USBH_HID_Process+0x1aa>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	785b      	ldrb	r3, [r3, #1]
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f002 fd0d 	bl	800ebe4 <USBH_LL_GetURBState>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b05      	cmp	r3, #5
 800c1ce:	d110      	bne.n	800c1f2 <USBH_HID_Process+0x1aa>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	7e9b      	ldrb	r3, [r3, #26]
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f001 fcb6 	bl	800db48 <USBH_ClrFeature>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d107      	bne.n	800c1f2 <USBH_HID_Process+0x1aa>
            HID_Handle->state = USBH_HID_GET_DATA;
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	2204      	movs	r2, #4
 800c1e6:	709a      	strb	r2, [r3, #2]
      break;
 800c1e8:	e003      	b.n	800c1f2 <USBH_HID_Process+0x1aa>

    default:
      break;
 800c1ea:	bf00      	nop
 800c1ec:	e002      	b.n	800c1f4 <USBH_HID_Process+0x1ac>
      break;
 800c1ee:	bf00      	nop
 800c1f0:	e000      	b.n	800c1f4 <USBH_HID_Process+0x1ac>
      break;
 800c1f2:	bf00      	nop
  }

  return status;
 800c1f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3718      	adds	r7, #24
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	0801036c 	.word	0x0801036c
 800c204:	080103ec 	.word	0x080103ec

0800c208 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c208:	b480      	push	{r7}
 800c20a:	b085      	sub	sp, #20
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c216:	69db      	ldr	r3, [r3, #28]
 800c218:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == USBH_HID_POLL)
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	789b      	ldrb	r3, [r3, #2]
 800c21e:	2b06      	cmp	r3, #6
 800c220:	d10c      	bne.n	800c23c <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	6a1b      	ldr	r3, [r3, #32]
 800c22c:	1ad3      	subs	r3, r2, r3
 800c22e:	68fa      	ldr	r2, [r7, #12]
 800c230:	8b92      	ldrh	r2, [r2, #28]
 800c232:	4293      	cmp	r3, r2
 800c234:	d302      	bcc.n	800c23c <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = USBH_HID_GET_DATA;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2204      	movs	r2, #4
 800c23a:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 800c23c:	2300      	movs	r3, #0
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3714      	adds	r7, #20
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr
	...

0800c24c <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b086      	sub	sp, #24
 800c250:	af02      	add	r7, sp, #8
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	460b      	mov	r3, r1
 800c256:	807b      	strh	r3, [r7, #2]

  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800c258:	887b      	ldrh	r3, [r7, #2]
 800c25a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c25e:	d90a      	bls.n	800c276 <USBH_HID_GetHIDReportDescriptor+0x2a>
  {
    USBH_ErrLog("Control error: Get HID Report Descriptor failed, data buffer size issue");
 800c260:	480e      	ldr	r0, [pc, #56]	@ (800c29c <USBH_HID_GetHIDReportDescriptor+0x50>)
 800c262:	f002 ff77 	bl	800f154 <iprintf>
 800c266:	480e      	ldr	r0, [pc, #56]	@ (800c2a0 <USBH_HID_GetHIDReportDescriptor+0x54>)
 800c268:	f002 ff74 	bl	800f154 <iprintf>
 800c26c:	200a      	movs	r0, #10
 800c26e:	f002 ff83 	bl	800f178 <putchar>
    return USBH_NOT_SUPPORTED;
 800c272:	2303      	movs	r3, #3
 800c274:	e00e      	b.n	800c294 <USBH_HID_GetHIDReportDescriptor+0x48>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800c27c:	887b      	ldrh	r3, [r7, #2]
 800c27e:	9300      	str	r3, [sp, #0]
 800c280:	4613      	mov	r3, r2
 800c282:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
 800c286:	2101      	movs	r1, #1
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f001 fbbd 	bl	800da08 <USBH_GetDescriptor>
 800c28e:	4603      	mov	r3, r0
 800c290:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800c292:	7bfb      	ldrb	r3, [r7, #15]
}
 800c294:	4618      	mov	r0, r3
 800c296:	3710      	adds	r7, #16
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}
 800c29c:	0801036c 	.word	0x0801036c
 800c2a0:	08010404 	.word	0x08010404

0800c2a4 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	70fb      	strb	r3, [r7, #3]
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2221      	movs	r2, #33	@ 0x21
 800c2b8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	220a      	movs	r2, #10
 800c2be:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 800c2c0:	78fb      	ldrb	r3, [r7, #3]
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	021b      	lsls	r3, r3, #8
 800c2c6:	b29a      	uxth	r2, r3
 800c2c8:	78bb      	ldrb	r3, [r7, #2]
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	b29a      	uxth	r2, r3
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	2100      	movs	r1, #0
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f001 ff64 	bl	800e1b2 <USBH_CtlReq>
 800c2ea:	4603      	mov	r3, r0
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3708      	adds	r7, #8
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b084      	sub	sp, #16
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	607b      	str	r3, [r7, #4]
 800c2fe:	460b      	mov	r3, r1
 800c300:	72fb      	strb	r3, [r7, #11]
 800c302:	4613      	mov	r3, r2
 800c304:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	22a1      	movs	r2, #161	@ 0xa1
 800c30a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2201      	movs	r2, #1
 800c310:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800c312:	7afb      	ldrb	r3, [r7, #11]
 800c314:	b29b      	uxth	r3, r3
 800c316:	021b      	lsls	r3, r3, #8
 800c318:	b29a      	uxth	r2, r3
 800c31a:	7abb      	ldrb	r3, [r7, #10]
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	4313      	orrs	r3, r2
 800c320:	b29a      	uxth	r2, r3
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2200      	movs	r2, #0
 800c32a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800c32c:	7e3b      	ldrb	r3, [r7, #24]
 800c32e:	b29a      	uxth	r2, r3
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800c334:	7e3b      	ldrb	r3, [r7, #24]
 800c336:	b29b      	uxth	r3, r3
 800c338:	461a      	mov	r2, r3
 800c33a:	6879      	ldr	r1, [r7, #4]
 800c33c:	68f8      	ldr	r0, [r7, #12]
 800c33e:	f001 ff38 	bl	800e1b2 <USBH_CtlReq>
 800c342:	4603      	mov	r3, r0
}
 800c344:	4618      	mov	r0, r3
 800c346:	3710      	adds	r7, #16
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	460b      	mov	r3, r1
 800c356:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2221      	movs	r2, #33	@ 0x21
 800c35c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	220b      	movs	r2, #11
 800c362:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 800c364:	78fb      	ldrb	r3, [r7, #3]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d003      	beq.n	800c372 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2200      	movs	r2, #0
 800c36e:	825a      	strh	r2, [r3, #18]
 800c370:	e002      	b.n	800c378 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2201      	movs	r2, #1
 800c376:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2200      	movs	r2, #0
 800c382:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800c384:	2200      	movs	r2, #0
 800c386:	2100      	movs	r1, #0
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f001 ff12 	bl	800e1b2 <USBH_CtlReq>
 800c38e:	4603      	mov	r3, r0

}
 800c390:	4618      	mov	r0, r3
 800c392:	3708      	adds	r7, #8
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	3302      	adds	r3, #2
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	3303      	adds	r3, #3
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	021b      	lsls	r3, r3, #8
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800c3bc:	897b      	ldrh	r3, [r7, #10]
 800c3be:	2b09      	cmp	r3, #9
 800c3c0:	d941      	bls.n	800c446 <USBH_HID_ParseHIDDesc+0xae>
  {
    ptr = USB_LEN_CFG_DESC;
 800c3c2:	2309      	movs	r3, #9
 800c3c4:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 800c3c6:	e03a      	b.n	800c43e <USBH_HID_ParseHIDDesc+0xa6>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c3c8:	f107 0308 	add.w	r3, r7, #8
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f001 fed5 	bl	800e17e <USBH_GetNextDesc>
 800c3d4:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	785b      	ldrb	r3, [r3, #1]
 800c3da:	2b21      	cmp	r3, #33	@ 0x21
 800c3dc:	d12f      	bne.n	800c43e <USBH_HID_ParseHIDDesc+0xa6>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	781a      	ldrb	r2, [r3, #0]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	785a      	ldrb	r2, [r3, #1]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	3302      	adds	r3, #2
 800c3f2:	781b      	ldrb	r3, [r3, #0]
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	3303      	adds	r3, #3
 800c3fa:	781b      	ldrb	r3, [r3, #0]
 800c3fc:	021b      	lsls	r3, r3, #8
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	4313      	orrs	r3, r2
 800c402:	b29a      	uxth	r2, r3
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	791a      	ldrb	r2, [r3, #4]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	795a      	ldrb	r2, [r3, #5]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	799a      	ldrb	r2, [r3, #6]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	3307      	adds	r3, #7
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	461a      	mov	r2, r3
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	3308      	adds	r3, #8
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	021b      	lsls	r3, r3, #8
 800c430:	b29b      	uxth	r3, r3
 800c432:	4313      	orrs	r3, r2
 800c434:	b29a      	uxth	r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	811a      	strh	r2, [r3, #8]
        break;
 800c43a:	bf00      	nop
      }
    }
  }
}
 800c43c:	e003      	b.n	800c446 <USBH_HID_ParseHIDDesc+0xae>
    while (ptr < CfgDescLen)
 800c43e:	893b      	ldrh	r3, [r7, #8]
 800c440:	897a      	ldrh	r2, [r7, #10]
 800c442:	429a      	cmp	r2, r3
 800c444:	d8c0      	bhi.n	800c3c8 <USBH_HID_ParseHIDDesc+0x30>
}
 800c446:	bf00      	nop
 800c448:	3710      	adds	r7, #16
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}

0800c44e <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 800c44e:	b480      	push	{r7}
 800c450:	b085      	sub	sp, #20
 800c452:	af00      	add	r7, sp, #0
 800c454:	60f8      	str	r0, [r7, #12]
 800c456:	60b9      	str	r1, [r7, #8]
 800c458:	4613      	mov	r3, r2
 800c45a:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2200      	movs	r2, #0
 800c460:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	2200      	movs	r2, #0
 800c466:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2200      	movs	r2, #0
 800c46c:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	88fa      	ldrh	r2, [r7, #6]
 800c472:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	68ba      	ldr	r2, [r7, #8]
 800c478:	601a      	str	r2, [r3, #0]
}
 800c47a:	bf00      	nop
 800c47c:	3714      	adds	r7, #20
 800c47e:	46bd      	mov	sp, r7
 800c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c484:	4770      	bx	lr

0800c486 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 800c486:	b480      	push	{r7}
 800c488:	b087      	sub	sp, #28
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	60f8      	str	r0, [r7, #12]
 800c48e:	60b9      	str	r1, [r7, #8]
 800c490:	4613      	mov	r3, r2
 800c492:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	7a9b      	ldrb	r3, [r3, #10]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d131      	bne.n	800c504 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	82fb      	strh	r3, [r7, #22]
 800c4aa:	e027      	b.n	800c4fc <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	88da      	ldrh	r2, [r3, #6]
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	889b      	ldrh	r3, [r3, #4]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d019      	beq.n	800c4ec <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	68fa      	ldr	r2, [r7, #12]
 800c4be:	88d2      	ldrh	r2, [r2, #6]
 800c4c0:	441a      	add	r2, r3
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	1c59      	adds	r1, r3, #1
 800c4c6:	6139      	str	r1, [r7, #16]
 800c4c8:	7812      	ldrb	r2, [r2, #0]
 800c4ca:	701a      	strb	r2, [r3, #0]
        f->tail++;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	88db      	ldrh	r3, [r3, #6]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	88da      	ldrh	r2, [r3, #6]
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	891b      	ldrh	r3, [r3, #8]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d108      	bne.n	800c4f6 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	80da      	strh	r2, [r3, #6]
 800c4ea:	e004      	b.n	800c4f6 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	729a      	strb	r2, [r3, #10]
        return i;
 800c4f2:	8afb      	ldrh	r3, [r7, #22]
 800c4f4:	e00a      	b.n	800c50c <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 800c4f6:	8afb      	ldrh	r3, [r7, #22]
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	82fb      	strh	r3, [r7, #22]
 800c4fc:	8afa      	ldrh	r2, [r7, #22]
 800c4fe:	88fb      	ldrh	r3, [r7, #6]
 800c500:	429a      	cmp	r2, r3
 800c502:	d3d3      	bcc.n	800c4ac <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2200      	movs	r2, #0
 800c508:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800c50a:	88fb      	ldrh	r3, [r7, #6]
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	371c      	adds	r7, #28
 800c510:	46bd      	mov	sp, r7
 800c512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c516:	4770      	bx	lr

0800c518 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800c518:	b480      	push	{r7}
 800c51a:	b087      	sub	sp, #28
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	4613      	mov	r3, r2
 800c524:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	7a9b      	ldrb	r3, [r3, #10]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d13c      	bne.n	800c5ac <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2201      	movs	r2, #1
 800c536:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800c538:	2300      	movs	r3, #0
 800c53a:	82fb      	strh	r3, [r7, #22]
 800c53c:	e032      	b.n	800c5a4 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	889b      	ldrh	r3, [r3, #4]
 800c542:	3301      	adds	r3, #1
 800c544:	68fa      	ldr	r2, [r7, #12]
 800c546:	88d2      	ldrh	r2, [r2, #6]
 800c548:	4293      	cmp	r3, r2
 800c54a:	d00a      	beq.n	800c562 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	889b      	ldrh	r3, [r3, #4]
 800c550:	3301      	adds	r3, #1
 800c552:	68fa      	ldr	r2, [r7, #12]
 800c554:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 800c556:	4293      	cmp	r3, r2
 800c558:	d108      	bne.n	800c56c <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	88db      	ldrh	r3, [r3, #6]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d104      	bne.n	800c56c <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2200      	movs	r2, #0
 800c566:	729a      	strb	r2, [r3, #10]
        return i;
 800c568:	8afb      	ldrh	r3, [r7, #22]
 800c56a:	e023      	b.n	800c5b4 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	1c5a      	adds	r2, r3, #1
 800c570:	613a      	str	r2, [r7, #16]
 800c572:	68fa      	ldr	r2, [r7, #12]
 800c574:	6812      	ldr	r2, [r2, #0]
 800c576:	68f9      	ldr	r1, [r7, #12]
 800c578:	8889      	ldrh	r1, [r1, #4]
 800c57a:	440a      	add	r2, r1
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	7013      	strb	r3, [r2, #0]
        f->head++;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	889b      	ldrh	r3, [r3, #4]
 800c584:	3301      	adds	r3, #1
 800c586:	b29a      	uxth	r2, r3
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	889a      	ldrh	r2, [r3, #4]
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	891b      	ldrh	r3, [r3, #8]
 800c594:	429a      	cmp	r2, r3
 800c596:	d102      	bne.n	800c59e <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2200      	movs	r2, #0
 800c59c:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 800c59e:	8afb      	ldrh	r3, [r7, #22]
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	82fb      	strh	r3, [r7, #22]
 800c5a4:	8afa      	ldrh	r2, [r7, #22]
 800c5a6:	88fb      	ldrh	r3, [r7, #6]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d3c8      	bcc.n	800c53e <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800c5b2:	88fb      	ldrh	r3, [r7, #6]
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	371c      	adds	r7, #28
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr

0800c5c0 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c5ce:	69db      	ldr	r3, [r3, #28]
 800c5d0:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 800c5d2:	4b22      	ldr	r3, [pc, #136]	@ (800c65c <USBH_HID_KeybdInit+0x9c>)
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 800c5d8:	4b20      	ldr	r3, [pc, #128]	@ (800c65c <USBH_HID_KeybdInit+0x9c>)
 800c5da:	2200      	movs	r2, #0
 800c5dc:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 800c5de:	4b1f      	ldr	r3, [pc, #124]	@ (800c65c <USBH_HID_KeybdInit+0x9c>)
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 800c5e4:	4b1d      	ldr	r3, [pc, #116]	@ (800c65c <USBH_HID_KeybdInit+0x9c>)
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 800c5ea:	4b1c      	ldr	r3, [pc, #112]	@ (800c65c <USBH_HID_KeybdInit+0x9c>)
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 800c5f0:	4b1a      	ldr	r3, [pc, #104]	@ (800c65c <USBH_HID_KeybdInit+0x9c>)
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 800c5f6:	4b19      	ldr	r3, [pc, #100]	@ (800c65c <USBH_HID_KeybdInit+0x9c>)
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 800c5fc:	4b17      	ldr	r3, [pc, #92]	@ (800c65c <USBH_HID_KeybdInit+0x9c>)
 800c5fe:	2200      	movs	r2, #0
 800c600:	721a      	strb	r2, [r3, #8]

  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800c602:	2300      	movs	r3, #0
 800c604:	60fb      	str	r3, [r7, #12]
 800c606:	e00c      	b.n	800c622 <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 800c608:	4a15      	ldr	r2, [pc, #84]	@ (800c660 <USBH_HID_KeybdInit+0xa0>)
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	4413      	add	r3, r2
 800c60e:	2200      	movs	r2, #0
 800c610:	701a      	strb	r2, [r3, #0]
    keybd_rx_report_buf[x] = 0U;
 800c612:	4a14      	ldr	r2, [pc, #80]	@ (800c664 <USBH_HID_KeybdInit+0xa4>)
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	4413      	add	r3, r2
 800c618:	2200      	movs	r2, #0
 800c61a:	701a      	strb	r2, [r3, #0]
  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	3301      	adds	r3, #1
 800c620:	60fb      	str	r3, [r7, #12]
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2b07      	cmp	r3, #7
 800c626:	d9ef      	bls.n	800c608 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	8b1b      	ldrh	r3, [r3, #24]
 800c62c:	2b08      	cmp	r3, #8
 800c62e:	d902      	bls.n	800c636 <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	2208      	movs	r2, #8
 800c634:	831a      	strh	r2, [r3, #24]
  }

  HID_Handle->pData = keybd_rx_report_buf;
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	4a0a      	ldr	r2, [pc, #40]	@ (800c664 <USBH_HID_KeybdInit+0xa4>)
 800c63a:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	f103 0008 	add.w	r0, r3, #8
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c648:	2250      	movs	r2, #80	@ 0x50
 800c64a:	4619      	mov	r1, r3
 800c64c:	f7ff feff 	bl	800c44e <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800c650:	2300      	movs	r3, #0
}
 800c652:	4618      	mov	r0, r3
 800c654:	3710      	adds	r7, #16
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	20011910 	.word	0x20011910
 800c660:	20011928 	.word	0x20011928
 800c664:	20011920 	.word	0x20011920

0800c668 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f000 f80d 	bl	800c690 <USBH_HID_KeybdDecode>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d101      	bne.n	800c680 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 800c67c:	4b03      	ldr	r3, [pc, #12]	@ (800c68c <USBH_HID_GetKeybdInfo+0x24>)
 800c67e:	e000      	b.n	800c682 <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800c680:	2300      	movs	r3, #0
  }
}
 800c682:	4618      	mov	r0, r3
 800c684:	3708      	adds	r7, #8
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	20011910 	.word	0x20011910

0800c690 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c69e:	69db      	ldr	r3, [r3, #28]
 800c6a0:	60bb      	str	r3, [r7, #8]

  if ((HID_Handle->length == 0U) || (HID_Handle->fifo.buf == NULL))
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	8b1b      	ldrh	r3, [r3, #24]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d003      	beq.n	800c6b2 <USBH_HID_KeybdDecode+0x22>
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	689b      	ldr	r3, [r3, #8]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d101      	bne.n	800c6b6 <USBH_HID_KeybdDecode+0x26>
  {
    return USBH_FAIL;
 800c6b2:	2302      	movs	r3, #2
 800c6b4:	e066      	b.n	800c784 <USBH_HID_KeybdDecode+0xf4>
  }

  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	f103 0008 	add.w	r0, r3, #8
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	8b1b      	ldrh	r3, [r3, #24]
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	4932      	ldr	r1, [pc, #200]	@ (800c78c <USBH_HID_KeybdDecode+0xfc>)
 800c6c4:	f7ff fedf 	bl	800c486 <USBH_HID_FifoRead>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	8b1b      	ldrh	r3, [r3, #24]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d156      	bne.n	800c782 <USBH_HID_KeybdDecode+0xf2>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	482e      	ldr	r0, [pc, #184]	@ (800c790 <USBH_HID_KeybdDecode+0x100>)
 800c6d8:	f000 f8e4 	bl	800c8a4 <HID_ReadItem>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	b2da      	uxtb	r2, r3
 800c6e0:	4b2c      	ldr	r3, [pc, #176]	@ (800c794 <USBH_HID_KeybdDecode+0x104>)
 800c6e2:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	482c      	ldr	r0, [pc, #176]	@ (800c798 <USBH_HID_KeybdDecode+0x108>)
 800c6e8:	f000 f8dc 	bl	800c8a4 <HID_ReadItem>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	b2da      	uxtb	r2, r3
 800c6f0:	4b28      	ldr	r3, [pc, #160]	@ (800c794 <USBH_HID_KeybdDecode+0x104>)
 800c6f2:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	4829      	ldr	r0, [pc, #164]	@ (800c79c <USBH_HID_KeybdDecode+0x10c>)
 800c6f8:	f000 f8d4 	bl	800c8a4 <HID_ReadItem>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	b2da      	uxtb	r2, r3
 800c700:	4b24      	ldr	r3, [pc, #144]	@ (800c794 <USBH_HID_KeybdDecode+0x104>)
 800c702:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800c704:	2100      	movs	r1, #0
 800c706:	4826      	ldr	r0, [pc, #152]	@ (800c7a0 <USBH_HID_KeybdDecode+0x110>)
 800c708:	f000 f8cc 	bl	800c8a4 <HID_ReadItem>
 800c70c:	4603      	mov	r3, r0
 800c70e:	b2da      	uxtb	r2, r3
 800c710:	4b20      	ldr	r3, [pc, #128]	@ (800c794 <USBH_HID_KeybdDecode+0x104>)
 800c712:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800c714:	2100      	movs	r1, #0
 800c716:	4823      	ldr	r0, [pc, #140]	@ (800c7a4 <USBH_HID_KeybdDecode+0x114>)
 800c718:	f000 f8c4 	bl	800c8a4 <HID_ReadItem>
 800c71c:	4603      	mov	r3, r0
 800c71e:	b2da      	uxtb	r2, r3
 800c720:	4b1c      	ldr	r3, [pc, #112]	@ (800c794 <USBH_HID_KeybdDecode+0x104>)
 800c722:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 800c724:	2100      	movs	r1, #0
 800c726:	4820      	ldr	r0, [pc, #128]	@ (800c7a8 <USBH_HID_KeybdDecode+0x118>)
 800c728:	f000 f8bc 	bl	800c8a4 <HID_ReadItem>
 800c72c:	4603      	mov	r3, r0
 800c72e:	b2da      	uxtb	r2, r3
 800c730:	4b18      	ldr	r3, [pc, #96]	@ (800c794 <USBH_HID_KeybdDecode+0x104>)
 800c732:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 800c734:	2100      	movs	r1, #0
 800c736:	481d      	ldr	r0, [pc, #116]	@ (800c7ac <USBH_HID_KeybdDecode+0x11c>)
 800c738:	f000 f8b4 	bl	800c8a4 <HID_ReadItem>
 800c73c:	4603      	mov	r3, r0
 800c73e:	b2da      	uxtb	r2, r3
 800c740:	4b14      	ldr	r3, [pc, #80]	@ (800c794 <USBH_HID_KeybdDecode+0x104>)
 800c742:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 800c744:	2100      	movs	r1, #0
 800c746:	481a      	ldr	r0, [pc, #104]	@ (800c7b0 <USBH_HID_KeybdDecode+0x120>)
 800c748:	f000 f8ac 	bl	800c8a4 <HID_ReadItem>
 800c74c:	4603      	mov	r3, r0
 800c74e:	b2da      	uxtb	r2, r3
 800c750:	4b10      	ldr	r3, [pc, #64]	@ (800c794 <USBH_HID_KeybdDecode+0x104>)
 800c752:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800c754:	2300      	movs	r3, #0
 800c756:	73fb      	strb	r3, [r7, #15]
 800c758:	e00e      	b.n	800c778 <USBH_HID_KeybdDecode+0xe8>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800c75a:	7bfb      	ldrb	r3, [r7, #15]
 800c75c:	4619      	mov	r1, r3
 800c75e:	4815      	ldr	r0, [pc, #84]	@ (800c7b4 <USBH_HID_KeybdDecode+0x124>)
 800c760:	f000 f8a0 	bl	800c8a4 <HID_ReadItem>
 800c764:	4602      	mov	r2, r0
 800c766:	7bfb      	ldrb	r3, [r7, #15]
 800c768:	b2d1      	uxtb	r1, r2
 800c76a:	4a0a      	ldr	r2, [pc, #40]	@ (800c794 <USBH_HID_KeybdDecode+0x104>)
 800c76c:	4413      	add	r3, r2
 800c76e:	460a      	mov	r2, r1
 800c770:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800c772:	7bfb      	ldrb	r3, [r7, #15]
 800c774:	3301      	adds	r3, #1
 800c776:	73fb      	strb	r3, [r7, #15]
 800c778:	7bfb      	ldrb	r3, [r7, #15]
 800c77a:	2b05      	cmp	r3, #5
 800c77c:	d9ed      	bls.n	800c75a <USBH_HID_KeybdDecode+0xca>
    }

    return USBH_OK;
 800c77e:	2300      	movs	r3, #0
 800c780:	e000      	b.n	800c784 <USBH_HID_KeybdDecode+0xf4>
  }
  return   USBH_FAIL;
 800c782:	2302      	movs	r3, #2
}
 800c784:	4618      	mov	r0, r3
 800c786:	3710      	adds	r7, #16
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	20011928 	.word	0x20011928
 800c790:	08012944 	.word	0x08012944
 800c794:	20011910 	.word	0x20011910
 800c798:	08012964 	.word	0x08012964
 800c79c:	08012984 	.word	0x08012984
 800c7a0:	080129a4 	.word	0x080129a4
 800c7a4:	080129c4 	.word	0x080129c4
 800c7a8:	080129e4 	.word	0x080129e4
 800c7ac:	08012a04 	.word	0x08012a04
 800c7b0:	08012a24 	.word	0x08012a24
 800c7b4:	08012a44 	.word	0x08012a44

0800c7b8 <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b085      	sub	sp, #20
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	789b      	ldrb	r3, [r3, #2]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d103      	bne.n	800c7d0 <USBH_HID_GetASCIICode+0x18>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	799b      	ldrb	r3, [r3, #6]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d009      	beq.n	800c7e4 <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	7a5b      	ldrb	r3, [r3, #9]
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	4b0b      	ldr	r3, [pc, #44]	@ (800c804 <USBH_HID_GetASCIICode+0x4c>)
 800c7d8:	5c9b      	ldrb	r3, [r3, r2]
 800c7da:	461a      	mov	r2, r3
 800c7dc:	4b0a      	ldr	r3, [pc, #40]	@ (800c808 <USBH_HID_GetASCIICode+0x50>)
 800c7de:	5c9b      	ldrb	r3, [r3, r2]
 800c7e0:	73fb      	strb	r3, [r7, #15]
 800c7e2:	e008      	b.n	800c7f6 <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	7a5b      	ldrb	r3, [r3, #9]
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	4b06      	ldr	r3, [pc, #24]	@ (800c804 <USBH_HID_GetASCIICode+0x4c>)
 800c7ec:	5c9b      	ldrb	r3, [r3, r2]
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	4b06      	ldr	r3, [pc, #24]	@ (800c80c <USBH_HID_GetASCIICode+0x54>)
 800c7f2:	5c9b      	ldrb	r3, [r3, r2]
 800c7f4:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 800c7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3714      	adds	r7, #20
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr
 800c804:	08012b6c 	.word	0x08012b6c
 800c808:	08012ae8 	.word	0x08012ae8
 800c80c:	08012a64 	.word	0x08012a64

0800c810 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b084      	sub	sp, #16
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c81e:	69db      	ldr	r3, [r3, #28]
 800c820:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 800c822:	4b1d      	ldr	r3, [pc, #116]	@ (800c898 <USBH_HID_MouseInit+0x88>)
 800c824:	2200      	movs	r2, #0
 800c826:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 800c828:	4b1b      	ldr	r3, [pc, #108]	@ (800c898 <USBH_HID_MouseInit+0x88>)
 800c82a:	2200      	movs	r2, #0
 800c82c:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 800c82e:	4b1a      	ldr	r3, [pc, #104]	@ (800c898 <USBH_HID_MouseInit+0x88>)
 800c830:	2200      	movs	r2, #0
 800c832:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 800c834:	4b18      	ldr	r3, [pc, #96]	@ (800c898 <USBH_HID_MouseInit+0x88>)
 800c836:	2200      	movs	r2, #0
 800c838:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 800c83a:	4b17      	ldr	r3, [pc, #92]	@ (800c898 <USBH_HID_MouseInit+0x88>)
 800c83c:	2200      	movs	r2, #0
 800c83e:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800c840:	2300      	movs	r3, #0
 800c842:	60fb      	str	r3, [r7, #12]
 800c844:	e00c      	b.n	800c860 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 800c846:	4a15      	ldr	r2, [pc, #84]	@ (800c89c <USBH_HID_MouseInit+0x8c>)
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	4413      	add	r3, r2
 800c84c:	2200      	movs	r2, #0
 800c84e:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 800c850:	4a13      	ldr	r2, [pc, #76]	@ (800c8a0 <USBH_HID_MouseInit+0x90>)
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	4413      	add	r3, r2
 800c856:	2200      	movs	r2, #0
 800c858:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	3301      	adds	r3, #1
 800c85e:	60fb      	str	r3, [r7, #12]
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2b07      	cmp	r3, #7
 800c864:	d9ef      	bls.n	800c846 <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	8b1b      	ldrh	r3, [r3, #24]
 800c86a:	2b08      	cmp	r3, #8
 800c86c:	d902      	bls.n	800c874 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	2208      	movs	r2, #8
 800c872:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = mouse_rx_report_buf;
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	4a0a      	ldr	r2, [pc, #40]	@ (800c8a0 <USBH_HID_MouseInit+0x90>)
 800c878:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	f103 0008 	add.w	r0, r3, #8
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c886:	2250      	movs	r2, #80	@ 0x50
 800c888:	4619      	mov	r1, r3
 800c88a:	f7ff fde0 	bl	800c44e <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800c88e:	2300      	movs	r3, #0
}
 800c890:	4618      	mov	r0, r3
 800c892:	3710      	adds	r7, #16
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}
 800c898:	20011930 	.word	0x20011930
 800c89c:	20011938 	.word	0x20011938
 800c8a0:	20011940 	.word	0x20011940

0800c8a4 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b089      	sub	sp, #36	@ 0x24
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	7a1b      	ldrb	r3, [r3, #8]
 800c8c2:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, we may need to offset ri->data.*/
  if (ri->count > 0U)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	7a5b      	ldrb	r3, [r3, #9]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d01a      	beq.n	800c902 <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	7a5b      	ldrb	r3, [r3, #9]
 800c8d0:	78fa      	ldrb	r2, [r7, #3]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d301      	bcc.n	800c8da <HID_ReadItem+0x36>
    {
      return (0U);
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	e078      	b.n	800c9cc <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800c8da:	78fb      	ldrb	r3, [r7, #3]
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	6852      	ldr	r2, [r2, #4]
 800c8e0:	fb02 f303 	mul.w	r3, r2, r3
 800c8e4:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800c8e6:	7cfb      	ldrb	r3, [r7, #19]
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	4413      	add	r3, r2
 800c8ec:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	08db      	lsrs	r3, r3, #3
 800c8f2:	697a      	ldr	r2, [r7, #20]
 800c8f4:	4413      	add	r3, r2
 800c8f6:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	f003 0307 	and.w	r3, r3, #7
 800c900:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800c902:	2300      	movs	r3, #0
 800c904:	61bb      	str	r3, [r7, #24]
 800c906:	e00a      	b.n	800c91e <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	461a      	mov	r2, r3
 800c90e:	69bb      	ldr	r3, [r7, #24]
 800c910:	00db      	lsls	r3, r3, #3
 800c912:	fa02 f303 	lsl.w	r3, r2, r3
 800c916:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800c918:	69bb      	ldr	r3, [r7, #24]
 800c91a:	3301      	adds	r3, #1
 800c91c:	61bb      	str	r3, [r7, #24]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	685b      	ldr	r3, [r3, #4]
 800c922:	f003 0307 	and.w	r3, r3, #7
 800c926:	2b00      	cmp	r3, #0
 800c928:	d004      	beq.n	800c934 <HID_ReadItem+0x90>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	08db      	lsrs	r3, r3, #3
 800c930:	3301      	adds	r3, #1
 800c932:	e002      	b.n	800c93a <HID_ReadItem+0x96>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	08db      	lsrs	r3, r3, #3
 800c93a:	69ba      	ldr	r2, [r7, #24]
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d8e3      	bhi.n	800c908 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 800c940:	7cfb      	ldrb	r3, [r7, #19]
 800c942:	69fa      	ldr	r2, [r7, #28]
 800c944:	40da      	lsrs	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	f04f 31ff 	mov.w	r1, #4294967295
 800c94e:	fa01 f303 	lsl.w	r3, r1, r3
 800c952:	43db      	mvns	r3, r3
 800c954:	4013      	ands	r3, r2
 800c956:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	69fa      	ldr	r2, [r7, #28]
 800c95e:	429a      	cmp	r2, r3
 800c960:	d304      	bcc.n	800c96c <HID_ReadItem+0xc8>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	691b      	ldr	r3, [r3, #16]
 800c966:	69fa      	ldr	r2, [r7, #28]
 800c968:	429a      	cmp	r2, r3
 800c96a:	d901      	bls.n	800c970 <HID_ReadItem+0xcc>
  {
    return (0U);
 800c96c:	2300      	movs	r3, #0
 800c96e:	e02d      	b.n	800c9cc <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	7a9b      	ldrb	r3, [r3, #10]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d01e      	beq.n	800c9b6 <HID_ReadItem+0x112>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	3b01      	subs	r3, #1
 800c97e:	69fa      	ldr	r2, [r7, #28]
 800c980:	fa22 f303 	lsr.w	r3, r2, r3
 800c984:	f003 0301 	and.w	r3, r3, #1
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d014      	beq.n	800c9b6 <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	2201      	movs	r2, #1
 800c992:	fa02 f303 	lsl.w	r3, r2, r3
 800c996:	425b      	negs	r3, r3
 800c998:	69fa      	ldr	r2, [r7, #28]
 800c99a:	4313      	orrs	r3, r2
 800c99c:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	69db      	ldr	r3, [r3, #28]
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d101      	bne.n	800c9aa <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	e010      	b.n	800c9cc <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	69db      	ldr	r3, [r3, #28]
 800c9ae:	68ba      	ldr	r2, [r7, #8]
 800c9b0:	fb02 f303 	mul.w	r3, r2, r3
 800c9b4:	e00a      	b.n	800c9cc <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	69db      	ldr	r3, [r3, #28]
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d101      	bne.n	800c9c2 <HID_ReadItem+0x11e>
    {
      return (val);
 800c9be:	69fb      	ldr	r3, [r7, #28]
 800c9c0:	e004      	b.n	800c9cc <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	69db      	ldr	r3, [r3, #28]
 800c9c6:	69fa      	ldr	r2, [r7, #28]
 800c9c8:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3724      	adds	r7, #36	@ 0x24
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b084      	sub	sp, #16
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	4613      	mov	r3, r2
 800c9e4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d10a      	bne.n	800ca02 <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800c9ec:	481c      	ldr	r0, [pc, #112]	@ (800ca60 <USBH_Init+0x88>)
 800c9ee:	f002 fbb1 	bl	800f154 <iprintf>
 800c9f2:	481c      	ldr	r0, [pc, #112]	@ (800ca64 <USBH_Init+0x8c>)
 800c9f4:	f002 fbae 	bl	800f154 <iprintf>
 800c9f8:	200a      	movs	r0, #10
 800c9fa:	f002 fbbd 	bl	800f178 <putchar>
    return USBH_FAIL;
 800c9fe:	2302      	movs	r3, #2
 800ca00:	e029      	b.n	800ca56 <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	79fa      	ldrb	r2, [r7, #7]
 800ca06:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2200      	movs	r2, #0
 800ca16:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f000 f824 	bl	800ca68 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2200      	movs	r2, #0
 800ca24:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2200      	movs	r2, #0
 800ca34:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d003      	beq.n	800ca4e <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	68ba      	ldr	r2, [r7, #8]
 800ca4a:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800ca4e:	68f8      	ldr	r0, [r7, #12]
 800ca50:	f001 ff82 	bl	800e958 <USBH_LL_Init>

  return USBH_OK;
 800ca54:	2300      	movs	r3, #0
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3710      	adds	r7, #16
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	08010490 	.word	0x08010490
 800ca64:	08010498 	.word	0x08010498

0800ca68 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ca70:	2300      	movs	r3, #0
 800ca72:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ca74:	2300      	movs	r3, #0
 800ca76:	60fb      	str	r3, [r7, #12]
 800ca78:	e009      	b.n	800ca8e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ca7a:	687a      	ldr	r2, [r7, #4]
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	33e0      	adds	r3, #224	@ 0xe0
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	4413      	add	r3, r2
 800ca84:	2200      	movs	r2, #0
 800ca86:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	60fb      	str	r3, [r7, #12]
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2b0f      	cmp	r3, #15
 800ca92:	d9f2      	bls.n	800ca7a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ca94:	2300      	movs	r3, #0
 800ca96:	60fb      	str	r3, [r7, #12]
 800ca98:	e009      	b.n	800caae <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	4413      	add	r3, r2
 800caa0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800caa4:	2200      	movs	r2, #0
 800caa6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	3301      	adds	r3, #1
 800caac:	60fb      	str	r3, [r7, #12]
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cab4:	d3f1      	bcc.n	800ca9a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2200      	movs	r2, #0
 800caba:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2200      	movs	r2, #0
 800cac0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2201      	movs	r2, #1
 800cac6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2201      	movs	r2, #1
 800cad4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2240      	movs	r2, #64	@ 0x40
 800cada:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2200      	movs	r2, #0
 800cae0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2200      	movs	r2, #0
 800cae6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2201      	movs	r2, #1
 800caee:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2200      	movs	r2, #0
 800caf6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2200      	movs	r2, #0
 800cafe:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	331c      	adds	r3, #28
 800cb06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f002 fbbf 	bl	800f290 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cb18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb1c:	2100      	movs	r1, #0
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f002 fbb6 	bl	800f290 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800cb2a:	2212      	movs	r2, #18
 800cb2c:	2100      	movs	r1, #0
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f002 fbae 	bl	800f290 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800cb3a:	223e      	movs	r2, #62	@ 0x3e
 800cb3c:	2100      	movs	r1, #0
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f002 fba6 	bl	800f290 <memset>

  return USBH_OK;
 800cb44:	2300      	movs	r3, #0
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3710      	adds	r7, #16
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}
	...

0800cb50 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d01f      	beq.n	800cba4 <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d10e      	bne.n	800cb8c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800cb74:	1c59      	adds	r1, r3, #1
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	33de      	adds	r3, #222	@ 0xde
 800cb80:	6839      	ldr	r1, [r7, #0]
 800cb82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800cb86:	2300      	movs	r3, #0
 800cb88:	73fb      	strb	r3, [r7, #15]
 800cb8a:	e016      	b.n	800cbba <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800cb8c:	480d      	ldr	r0, [pc, #52]	@ (800cbc4 <USBH_RegisterClass+0x74>)
 800cb8e:	f002 fae1 	bl	800f154 <iprintf>
 800cb92:	480d      	ldr	r0, [pc, #52]	@ (800cbc8 <USBH_RegisterClass+0x78>)
 800cb94:	f002 fade 	bl	800f154 <iprintf>
 800cb98:	200a      	movs	r0, #10
 800cb9a:	f002 faed 	bl	800f178 <putchar>
      status = USBH_FAIL;
 800cb9e:	2302      	movs	r3, #2
 800cba0:	73fb      	strb	r3, [r7, #15]
 800cba2:	e00a      	b.n	800cbba <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800cba4:	4807      	ldr	r0, [pc, #28]	@ (800cbc4 <USBH_RegisterClass+0x74>)
 800cba6:	f002 fad5 	bl	800f154 <iprintf>
 800cbaa:	4808      	ldr	r0, [pc, #32]	@ (800cbcc <USBH_RegisterClass+0x7c>)
 800cbac:	f002 fad2 	bl	800f154 <iprintf>
 800cbb0:	200a      	movs	r0, #10
 800cbb2:	f002 fae1 	bl	800f178 <putchar>
    status = USBH_FAIL;
 800cbb6:	2302      	movs	r3, #2
 800cbb8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cbba:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3710      	adds	r7, #16
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	08010490 	.word	0x08010490
 800cbc8:	080104ac 	.word	0x080104ac
 800cbcc:	080104c8 	.word	0x080104c8

0800cbd0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b084      	sub	sp, #16
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	460b      	mov	r3, r1
 800cbda:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800cbe6:	78fa      	ldrb	r2, [r7, #3]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d23c      	bcs.n	800cc66 <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	78fa      	ldrb	r2, [r7, #3]
 800cbf0:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800cbf4:	78fb      	ldrb	r3, [r7, #3]
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	4823      	ldr	r0, [pc, #140]	@ (800cc88 <USBH_SelectInterface+0xb8>)
 800cbfa:	f002 faab 	bl	800f154 <iprintf>
 800cbfe:	200a      	movs	r0, #10
 800cc00:	f002 faba 	bl	800f178 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800cc04:	78fb      	ldrb	r3, [r7, #3]
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	211a      	movs	r1, #26
 800cc0a:	fb01 f303 	mul.w	r3, r1, r3
 800cc0e:	4413      	add	r3, r2
 800cc10:	f203 3347 	addw	r3, r3, #839	@ 0x347
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	4619      	mov	r1, r3
 800cc18:	481c      	ldr	r0, [pc, #112]	@ (800cc8c <USBH_SelectInterface+0xbc>)
 800cc1a:	f002 fa9b 	bl	800f154 <iprintf>
 800cc1e:	200a      	movs	r0, #10
 800cc20:	f002 faaa 	bl	800f178 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800cc24:	78fb      	ldrb	r3, [r7, #3]
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	211a      	movs	r1, #26
 800cc2a:	fb01 f303 	mul.w	r3, r1, r3
 800cc2e:	4413      	add	r3, r2
 800cc30:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	4619      	mov	r1, r3
 800cc38:	4815      	ldr	r0, [pc, #84]	@ (800cc90 <USBH_SelectInterface+0xc0>)
 800cc3a:	f002 fa8b 	bl	800f154 <iprintf>
 800cc3e:	200a      	movs	r0, #10
 800cc40:	f002 fa9a 	bl	800f178 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800cc44:	78fb      	ldrb	r3, [r7, #3]
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	211a      	movs	r1, #26
 800cc4a:	fb01 f303 	mul.w	r3, r1, r3
 800cc4e:	4413      	add	r3, r2
 800cc50:	f203 3349 	addw	r3, r3, #841	@ 0x349
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	4619      	mov	r1, r3
 800cc58:	480e      	ldr	r0, [pc, #56]	@ (800cc94 <USBH_SelectInterface+0xc4>)
 800cc5a:	f002 fa7b 	bl	800f154 <iprintf>
 800cc5e:	200a      	movs	r0, #10
 800cc60:	f002 fa8a 	bl	800f178 <putchar>
 800cc64:	e00a      	b.n	800cc7c <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800cc66:	480c      	ldr	r0, [pc, #48]	@ (800cc98 <USBH_SelectInterface+0xc8>)
 800cc68:	f002 fa74 	bl	800f154 <iprintf>
 800cc6c:	480b      	ldr	r0, [pc, #44]	@ (800cc9c <USBH_SelectInterface+0xcc>)
 800cc6e:	f002 fa71 	bl	800f154 <iprintf>
 800cc72:	200a      	movs	r0, #10
 800cc74:	f002 fa80 	bl	800f178 <putchar>
    status = USBH_FAIL;
 800cc78:	2302      	movs	r3, #2
 800cc7a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cc7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3710      	adds	r7, #16
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	080104e0 	.word	0x080104e0
 800cc8c:	08010500 	.word	0x08010500
 800cc90:	08010510 	.word	0x08010510
 800cc94:	08010520 	.word	0x08010520
 800cc98:	08010490 	.word	0x08010490
 800cc9c:	08010530 	.word	0x08010530

0800cca0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b087      	sub	sp, #28
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	4608      	mov	r0, r1
 800ccaa:	4611      	mov	r1, r2
 800ccac:	461a      	mov	r2, r3
 800ccae:	4603      	mov	r3, r0
 800ccb0:	70fb      	strb	r3, [r7, #3]
 800ccb2:	460b      	mov	r3, r1
 800ccb4:	70bb      	strb	r3, [r7, #2]
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800ccc8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ccca:	e025      	b.n	800cd18 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800cccc:	7dfb      	ldrb	r3, [r7, #23]
 800ccce:	221a      	movs	r2, #26
 800ccd0:	fb02 f303 	mul.w	r3, r2, r3
 800ccd4:	3308      	adds	r3, #8
 800ccd6:	68fa      	ldr	r2, [r7, #12]
 800ccd8:	4413      	add	r3, r2
 800ccda:	3302      	adds	r3, #2
 800ccdc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	795b      	ldrb	r3, [r3, #5]
 800cce2:	78fa      	ldrb	r2, [r7, #3]
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d002      	beq.n	800ccee <USBH_FindInterface+0x4e>
 800cce8:	78fb      	ldrb	r3, [r7, #3]
 800ccea:	2bff      	cmp	r3, #255	@ 0xff
 800ccec:	d111      	bne.n	800cd12 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ccf2:	78ba      	ldrb	r2, [r7, #2]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d002      	beq.n	800ccfe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ccf8:	78bb      	ldrb	r3, [r7, #2]
 800ccfa:	2bff      	cmp	r3, #255	@ 0xff
 800ccfc:	d109      	bne.n	800cd12 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cd02:	787a      	ldrb	r2, [r7, #1]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d002      	beq.n	800cd0e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cd08:	787b      	ldrb	r3, [r7, #1]
 800cd0a:	2bff      	cmp	r3, #255	@ 0xff
 800cd0c:	d101      	bne.n	800cd12 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800cd0e:	7dfb      	ldrb	r3, [r7, #23]
 800cd10:	e006      	b.n	800cd20 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800cd12:	7dfb      	ldrb	r3, [r7, #23]
 800cd14:	3301      	adds	r3, #1
 800cd16:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cd18:	7dfb      	ldrb	r3, [r7, #23]
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d9d6      	bls.n	800cccc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800cd1e:	23ff      	movs	r3, #255	@ 0xff
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	371c      	adds	r7, #28
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr

0800cd2c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f001 fe4b 	bl	800e9d0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800cd3a:	2101      	movs	r1, #1
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f001 ff64 	bl	800ec0a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800cd42:	2300      	movs	r3, #0
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3708      	adds	r7, #8
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b088      	sub	sp, #32
 800cd50:	af04      	add	r7, sp, #16
 800cd52:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cd54:	2302      	movs	r3, #2
 800cd56:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d102      	bne.n	800cd6e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2203      	movs	r2, #3
 800cd6c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	2b0b      	cmp	r3, #11
 800cd76:	f200 8237 	bhi.w	800d1e8 <USBH_Process+0x49c>
 800cd7a:	a201      	add	r2, pc, #4	@ (adr r2, 800cd80 <USBH_Process+0x34>)
 800cd7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd80:	0800cdb1 	.word	0x0800cdb1
 800cd84:	0800cdef 	.word	0x0800cdef
 800cd88:	0800ce6f 	.word	0x0800ce6f
 800cd8c:	0800d177 	.word	0x0800d177
 800cd90:	0800d1e9 	.word	0x0800d1e9
 800cd94:	0800cf0f 	.word	0x0800cf0f
 800cd98:	0800d0f9 	.word	0x0800d0f9
 800cd9c:	0800cf5d 	.word	0x0800cf5d
 800cda0:	0800cf7d 	.word	0x0800cf7d
 800cda4:	0800cfa7 	.word	0x0800cfa7
 800cda8:	0800d003 	.word	0x0800d003
 800cdac:	0800d15f 	.word	0x0800d15f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800cdb6:	b2db      	uxtb	r3, r3
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	f000 8217 	beq.w	800d1ec <USBH_Process+0x4a0>
      {
        USBH_UsrLog("USB Device Connected");
 800cdbe:	48a4      	ldr	r0, [pc, #656]	@ (800d050 <USBH_Process+0x304>)
 800cdc0:	f002 f9c8 	bl	800f154 <iprintf>
 800cdc4:	200a      	movs	r0, #10
 800cdc6:	f002 f9d7 	bl	800f178 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2201      	movs	r2, #1
 800cdce:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800cdd0:	20c8      	movs	r0, #200	@ 0xc8
 800cdd2:	f001 ff64 	bl	800ec9e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f001 fe57 	bl	800ea8a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2200      	movs	r2, #0
 800cde0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2200      	movs	r2, #0
 800cde8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cdec:	e1fe      	b.n	800d1ec <USBH_Process+0x4a0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d10d      	bne.n	800ce14 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800cdf8:	4896      	ldr	r0, [pc, #600]	@ (800d054 <USBH_Process+0x308>)
 800cdfa:	f002 f9ab 	bl	800f154 <iprintf>
 800cdfe:	200a      	movs	r0, #10
 800ce00:	f002 f9ba 	bl	800f178 <putchar>
        phost->device.RstCnt = 0U;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2200      	movs	r2, #0
 800ce08:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2202      	movs	r2, #2
 800ce10:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ce12:	e1f8      	b.n	800d206 <USBH_Process+0x4ba>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800ce1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ce1e:	d91a      	bls.n	800ce56 <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800ce26:	3301      	adds	r3, #1
 800ce28:	b2da      	uxtb	r2, r3
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800ce36:	2b03      	cmp	r3, #3
 800ce38:	d909      	bls.n	800ce4e <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800ce3a:	4887      	ldr	r0, [pc, #540]	@ (800d058 <USBH_Process+0x30c>)
 800ce3c:	f002 f98a 	bl	800f154 <iprintf>
 800ce40:	200a      	movs	r0, #10
 800ce42:	f002 f999 	bl	800f178 <putchar>
            phost->gState = HOST_ABORT_STATE;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	220d      	movs	r2, #13
 800ce4a:	701a      	strb	r2, [r3, #0]
      break;
 800ce4c:	e1db      	b.n	800d206 <USBH_Process+0x4ba>
            phost->gState = HOST_IDLE;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2200      	movs	r2, #0
 800ce52:	701a      	strb	r2, [r3, #0]
      break;
 800ce54:	e1d7      	b.n	800d206 <USBH_Process+0x4ba>
          phost->Timeout += 10U;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800ce5c:	f103 020a 	add.w	r2, r3, #10
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800ce66:	200a      	movs	r0, #10
 800ce68:	f001 ff19 	bl	800ec9e <USBH_Delay>
      break;
 800ce6c:	e1cb      	b.n	800d206 <USBH_Process+0x4ba>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d005      	beq.n	800ce84 <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ce7e:	2104      	movs	r1, #4
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ce84:	2064      	movs	r0, #100	@ 0x64
 800ce86:	f001 ff0a 	bl	800ec9e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f001 fdd6 	bl	800ea3c <USBH_LL_GetSpeed>
 800ce90:	4603      	mov	r3, r0
 800ce92:	461a      	mov	r2, r3
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2205      	movs	r2, #5
 800ce9e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800cea0:	2100      	movs	r1, #0
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f001 fbef 	bl	800e686 <USBH_AllocPipe>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	461a      	mov	r2, r3
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ceb0:	2180      	movs	r1, #128	@ 0x80
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f001 fbe7 	bl	800e686 <USBH_AllocPipe>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	461a      	mov	r2, r3
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	7919      	ldrb	r1, [r3, #4]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ced4:	9202      	str	r2, [sp, #8]
 800ced6:	2200      	movs	r2, #0
 800ced8:	9201      	str	r2, [sp, #4]
 800ceda:	9300      	str	r3, [sp, #0]
 800cedc:	4603      	mov	r3, r0
 800cede:	2280      	movs	r2, #128	@ 0x80
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f001 fba1 	bl	800e628 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	7959      	ldrb	r1, [r3, #5]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cefa:	9202      	str	r2, [sp, #8]
 800cefc:	2200      	movs	r2, #0
 800cefe:	9201      	str	r2, [sp, #4]
 800cf00:	9300      	str	r3, [sp, #0]
 800cf02:	4603      	mov	r3, r0
 800cf04:	2200      	movs	r2, #0
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f001 fb8e 	bl	800e628 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cf0c:	e17b      	b.n	800d206 <USBH_Process+0x4ba>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f000 f98c 	bl	800d22c <USBH_HandleEnum>
 800cf14:	4603      	mov	r3, r0
 800cf16:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800cf18:	7bbb      	ldrb	r3, [r7, #14]
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	f040 8167 	bne.w	800d1f0 <USBH_Process+0x4a4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800cf22:	484e      	ldr	r0, [pc, #312]	@ (800d05c <USBH_Process+0x310>)
 800cf24:	f002 f916 	bl	800f154 <iprintf>
 800cf28:	200a      	movs	r0, #10
 800cf2a:	f002 f925 	bl	800f178 <putchar>

        phost->device.current_interface = 0U;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2200      	movs	r2, #0
 800cf32:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d109      	bne.n	800cf54 <USBH_Process+0x208>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800cf40:	4847      	ldr	r0, [pc, #284]	@ (800d060 <USBH_Process+0x314>)
 800cf42:	f002 f907 	bl	800f154 <iprintf>
 800cf46:	200a      	movs	r0, #10
 800cf48:	f002 f916 	bl	800f178 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2208      	movs	r2, #8
 800cf50:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cf52:	e14d      	b.n	800d1f0 <USBH_Process+0x4a4>
          phost->gState = HOST_INPUT;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2207      	movs	r2, #7
 800cf58:	701a      	strb	r2, [r3, #0]
      break;
 800cf5a:	e149      	b.n	800d1f0 <USBH_Process+0x4a4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	f000 8146 	beq.w	800d1f4 <USBH_Process+0x4a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cf6e:	2101      	movs	r1, #1
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2208      	movs	r2, #8
 800cf78:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800cf7a:	e13b      	b.n	800d1f4 <USBH_Process+0x4a8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800cf82:	4619      	mov	r1, r3
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 fd98 	bl	800daba <USBH_SetCfg>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	f040 8133 	bne.w	800d1f8 <USBH_Process+0x4ac>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2209      	movs	r2, #9
 800cf96:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800cf98:	4832      	ldr	r0, [pc, #200]	@ (800d064 <USBH_Process+0x318>)
 800cf9a:	f002 f8db 	bl	800f154 <iprintf>
 800cf9e:	200a      	movs	r0, #10
 800cfa0:	f002 f8ea 	bl	800f178 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cfa4:	e128      	b.n	800d1f8 <USBH_Process+0x4ac>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800cfac:	f003 0320 	and.w	r3, r3, #32
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d022      	beq.n	800cffa <USBH_Process+0x2ae>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800cfb4:	2101      	movs	r1, #1
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 fda2 	bl	800db00 <USBH_SetFeature>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cfc0:	7bbb      	ldrb	r3, [r7, #14]
 800cfc2:	b2db      	uxtb	r3, r3
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d109      	bne.n	800cfdc <USBH_Process+0x290>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800cfc8:	4827      	ldr	r0, [pc, #156]	@ (800d068 <USBH_Process+0x31c>)
 800cfca:	f002 f8c3 	bl	800f154 <iprintf>
 800cfce:	200a      	movs	r0, #10
 800cfd0:	f002 f8d2 	bl	800f178 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	220a      	movs	r2, #10
 800cfd8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cfda:	e10f      	b.n	800d1fc <USBH_Process+0x4b0>
        else if (status == USBH_NOT_SUPPORTED)
 800cfdc:	7bbb      	ldrb	r3, [r7, #14]
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	2b03      	cmp	r3, #3
 800cfe2:	f040 810b 	bne.w	800d1fc <USBH_Process+0x4b0>
          USBH_UsrLog("Remote wakeup not supported by the device");
 800cfe6:	4821      	ldr	r0, [pc, #132]	@ (800d06c <USBH_Process+0x320>)
 800cfe8:	f002 f8b4 	bl	800f154 <iprintf>
 800cfec:	200a      	movs	r0, #10
 800cfee:	f002 f8c3 	bl	800f178 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	220a      	movs	r2, #10
 800cff6:	701a      	strb	r2, [r3, #0]
      break;
 800cff8:	e100      	b.n	800d1fc <USBH_Process+0x4b0>
        phost->gState = HOST_CHECK_CLASS;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	220a      	movs	r2, #10
 800cffe:	701a      	strb	r2, [r3, #0]
      break;
 800d000:	e0fc      	b.n	800d1fc <USBH_Process+0x4b0>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d106      	bne.n	800d01a <USBH_Process+0x2ce>
      {
        USBH_UsrLog("No Class has been registered.");
 800d00c:	4818      	ldr	r0, [pc, #96]	@ (800d070 <USBH_Process+0x324>)
 800d00e:	f002 f8a1 	bl	800f154 <iprintf>
 800d012:	200a      	movs	r0, #10
 800d014:	f002 f8b0 	bl	800f178 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d018:	e0f5      	b.n	800d206 <USBH_Process+0x4ba>
        phost->pActiveClass = NULL;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2200      	movs	r2, #0
 800d01e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d022:	2300      	movs	r3, #0
 800d024:	73fb      	strb	r3, [r7, #15]
 800d026:	e028      	b.n	800d07a <USBH_Process+0x32e>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d028:	7bfa      	ldrb	r2, [r7, #15]
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	32de      	adds	r2, #222	@ 0xde
 800d02e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d032:	791a      	ldrb	r2, [r3, #4]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d11a      	bne.n	800d074 <USBH_Process+0x328>
            phost->pActiveClass = phost->pClass[idx];
 800d03e:	7bfa      	ldrb	r2, [r7, #15]
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	32de      	adds	r2, #222	@ 0xde
 800d044:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800d04e:	e017      	b.n	800d080 <USBH_Process+0x334>
 800d050:	08010550 	.word	0x08010550
 800d054:	08010568 	.word	0x08010568
 800d058:	08010584 	.word	0x08010584
 800d05c:	080105b0 	.word	0x080105b0
 800d060:	080105c4 	.word	0x080105c4
 800d064:	080105ec 	.word	0x080105ec
 800d068:	08010608 	.word	0x08010608
 800d06c:	08010628 	.word	0x08010628
 800d070:	08010654 	.word	0x08010654
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d074:	7bfb      	ldrb	r3, [r7, #15]
 800d076:	3301      	adds	r3, #1
 800d078:	73fb      	strb	r3, [r7, #15]
 800d07a:	7bfb      	ldrb	r3, [r7, #15]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d0d3      	beq.n	800d028 <USBH_Process+0x2dc>
        if (phost->pActiveClass != NULL)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d086:	2b00      	cmp	r3, #0
 800d088:	d02c      	beq.n	800d0e4 <USBH_Process+0x398>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d090:	689b      	ldr	r3, [r3, #8]
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	4798      	blx	r3
 800d096:	4603      	mov	r3, r0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d114      	bne.n	800d0c6 <USBH_Process+0x37a>
            phost->gState = HOST_CLASS_REQUEST;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2206      	movs	r2, #6
 800d0a0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	4858      	ldr	r0, [pc, #352]	@ (800d210 <USBH_Process+0x4c4>)
 800d0ae:	f002 f851 	bl	800f154 <iprintf>
 800d0b2:	200a      	movs	r0, #10
 800d0b4:	f002 f860 	bl	800f178 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d0be:	2103      	movs	r1, #3
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	4798      	blx	r3
      break;
 800d0c4:	e09f      	b.n	800d206 <USBH_Process+0x4ba>
            phost->gState = HOST_ABORT_STATE;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	220d      	movs	r2, #13
 800d0ca:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	484f      	ldr	r0, [pc, #316]	@ (800d214 <USBH_Process+0x4c8>)
 800d0d8:	f002 f83c 	bl	800f154 <iprintf>
 800d0dc:	200a      	movs	r0, #10
 800d0de:	f002 f84b 	bl	800f178 <putchar>
      break;
 800d0e2:	e090      	b.n	800d206 <USBH_Process+0x4ba>
          phost->gState = HOST_ABORT_STATE;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	220d      	movs	r2, #13
 800d0e8:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800d0ea:	484b      	ldr	r0, [pc, #300]	@ (800d218 <USBH_Process+0x4cc>)
 800d0ec:	f002 f832 	bl	800f154 <iprintf>
 800d0f0:	200a      	movs	r0, #10
 800d0f2:	f002 f841 	bl	800f178 <putchar>
      break;
 800d0f6:	e086      	b.n	800d206 <USBH_Process+0x4ba>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d020      	beq.n	800d144 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d108:	691b      	ldr	r3, [r3, #16]
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	4798      	blx	r3
 800d10e:	4603      	mov	r3, r0
 800d110:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d112:	7bbb      	ldrb	r3, [r7, #14]
 800d114:	b2db      	uxtb	r3, r3
 800d116:	2b00      	cmp	r3, #0
 800d118:	d103      	bne.n	800d122 <USBH_Process+0x3d6>
        {
          phost->gState = HOST_CLASS;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	220b      	movs	r2, #11
 800d11e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d120:	e06e      	b.n	800d200 <USBH_Process+0x4b4>
        else if (status == USBH_FAIL)
 800d122:	7bbb      	ldrb	r3, [r7, #14]
 800d124:	b2db      	uxtb	r3, r3
 800d126:	2b02      	cmp	r3, #2
 800d128:	d16a      	bne.n	800d200 <USBH_Process+0x4b4>
          phost->gState = HOST_ABORT_STATE;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	220d      	movs	r2, #13
 800d12e:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800d130:	483a      	ldr	r0, [pc, #232]	@ (800d21c <USBH_Process+0x4d0>)
 800d132:	f002 f80f 	bl	800f154 <iprintf>
 800d136:	483a      	ldr	r0, [pc, #232]	@ (800d220 <USBH_Process+0x4d4>)
 800d138:	f002 f80c 	bl	800f154 <iprintf>
 800d13c:	200a      	movs	r0, #10
 800d13e:	f002 f81b 	bl	800f178 <putchar>
      break;
 800d142:	e05d      	b.n	800d200 <USBH_Process+0x4b4>
        phost->gState = HOST_ABORT_STATE;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	220d      	movs	r2, #13
 800d148:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800d14a:	4834      	ldr	r0, [pc, #208]	@ (800d21c <USBH_Process+0x4d0>)
 800d14c:	f002 f802 	bl	800f154 <iprintf>
 800d150:	4834      	ldr	r0, [pc, #208]	@ (800d224 <USBH_Process+0x4d8>)
 800d152:	f001 ffff 	bl	800f154 <iprintf>
 800d156:	200a      	movs	r0, #10
 800d158:	f002 f80e 	bl	800f178 <putchar>
      break;
 800d15c:	e050      	b.n	800d200 <USBH_Process+0x4b4>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d164:	2b00      	cmp	r3, #0
 800d166:	d04d      	beq.n	800d204 <USBH_Process+0x4b8>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d16e:	695b      	ldr	r3, [r3, #20]
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	4798      	blx	r3
      }
      break;
 800d174:	e046      	b.n	800d204 <USBH_Process+0x4b8>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f7ff fc72 	bl	800ca68 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d009      	beq.n	800d1a2 <USBH_Process+0x456>
      {
        phost->pActiveClass->DeInit(phost);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2200      	movs	r2, #0
 800d19e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d005      	beq.n	800d1b8 <USBH_Process+0x46c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d1b2:	2105      	movs	r1, #5
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800d1b8:	481b      	ldr	r0, [pc, #108]	@ (800d228 <USBH_Process+0x4dc>)
 800d1ba:	f001 ffcb 	bl	800f154 <iprintf>
 800d1be:	200a      	movs	r0, #10
 800d1c0:	f001 ffda 	bl	800f178 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d107      	bne.n	800d1e0 <USBH_Process+0x494>
      {
        phost->device.is_ReEnumerated = 0U;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f7ff fda7 	bl	800cd2c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d1de:	e012      	b.n	800d206 <USBH_Process+0x4ba>
        (void)USBH_LL_Start(phost);
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f001 fbf5 	bl	800e9d0 <USBH_LL_Start>
      break;
 800d1e6:	e00e      	b.n	800d206 <USBH_Process+0x4ba>

    case HOST_ABORT_STATE:
    default :
      break;
 800d1e8:	bf00      	nop
 800d1ea:	e00c      	b.n	800d206 <USBH_Process+0x4ba>
      break;
 800d1ec:	bf00      	nop
 800d1ee:	e00a      	b.n	800d206 <USBH_Process+0x4ba>
      break;
 800d1f0:	bf00      	nop
 800d1f2:	e008      	b.n	800d206 <USBH_Process+0x4ba>
    break;
 800d1f4:	bf00      	nop
 800d1f6:	e006      	b.n	800d206 <USBH_Process+0x4ba>
      break;
 800d1f8:	bf00      	nop
 800d1fa:	e004      	b.n	800d206 <USBH_Process+0x4ba>
      break;
 800d1fc:	bf00      	nop
 800d1fe:	e002      	b.n	800d206 <USBH_Process+0x4ba>
      break;
 800d200:	bf00      	nop
 800d202:	e000      	b.n	800d206 <USBH_Process+0x4ba>
      break;
 800d204:	bf00      	nop
  }
  return USBH_OK;
 800d206:	2300      	movs	r3, #0
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3710      	adds	r7, #16
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}
 800d210:	08010674 	.word	0x08010674
 800d214:	08010688 	.word	0x08010688
 800d218:	080106a8 	.word	0x080106a8
 800d21c:	08010490 	.word	0x08010490
 800d220:	080106d0 	.word	0x080106d0
 800d224:	080106f8 	.word	0x080106f8
 800d228:	08010710 	.word	0x08010710

0800d22c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b088      	sub	sp, #32
 800d230:	af04      	add	r7, sp, #16
 800d232:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d234:	2301      	movs	r3, #1
 800d236:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d238:	2301      	movs	r3, #1
 800d23a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	785b      	ldrb	r3, [r3, #1]
 800d240:	2b07      	cmp	r3, #7
 800d242:	f200 827b 	bhi.w	800d73c <USBH_HandleEnum+0x510>
 800d246:	a201      	add	r2, pc, #4	@ (adr r2, 800d24c <USBH_HandleEnum+0x20>)
 800d248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d24c:	0800d26d 	.word	0x0800d26d
 800d250:	0800d345 	.word	0x0800d345
 800d254:	0800d3f5 	.word	0x0800d3f5
 800d258:	0800d4b1 	.word	0x0800d4b1
 800d25c:	0800d539 	.word	0x0800d539
 800d260:	0800d5eb 	.word	0x0800d5eb
 800d264:	0800d65f 	.word	0x0800d65f
 800d268:	0800d6d1 	.word	0x0800d6d1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d26c:	2108      	movs	r1, #8
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f000 fb16 	bl	800d8a0 <USBH_Get_DevDesc>
 800d274:	4603      	mov	r3, r0
 800d276:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d278:	7bbb      	ldrb	r3, [r7, #14]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d12e      	bne.n	800d2dc <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2201      	movs	r2, #1
 800d28c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	7919      	ldrb	r1, [r3, #4]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d29e:	687a      	ldr	r2, [r7, #4]
 800d2a0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d2a2:	9202      	str	r2, [sp, #8]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	9201      	str	r2, [sp, #4]
 800d2a8:	9300      	str	r3, [sp, #0]
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	2280      	movs	r2, #128	@ 0x80
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f001 f9ba 	bl	800e628 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	7959      	ldrb	r1, [r3, #5]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d2c8:	9202      	str	r2, [sp, #8]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	9201      	str	r2, [sp, #4]
 800d2ce:	9300      	str	r3, [sp, #0]
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f001 f9a7 	bl	800e628 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d2da:	e231      	b.n	800d740 <USBH_HandleEnum+0x514>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d2dc:	7bbb      	ldrb	r3, [r7, #14]
 800d2de:	2b03      	cmp	r3, #3
 800d2e0:	f040 822e 	bne.w	800d740 <USBH_HandleEnum+0x514>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800d2e4:	48ae      	ldr	r0, [pc, #696]	@ (800d5a0 <USBH_HandleEnum+0x374>)
 800d2e6:	f001 ff35 	bl	800f154 <iprintf>
 800d2ea:	48ae      	ldr	r0, [pc, #696]	@ (800d5a4 <USBH_HandleEnum+0x378>)
 800d2ec:	f001 ff32 	bl	800f154 <iprintf>
 800d2f0:	200a      	movs	r0, #10
 800d2f2:	f001 ff41 	bl	800f178 <putchar>
        phost->device.EnumCnt++;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	b2da      	uxtb	r2, r3
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d30c:	2b03      	cmp	r3, #3
 800d30e:	d909      	bls.n	800d324 <USBH_HandleEnum+0xf8>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d310:	48a5      	ldr	r0, [pc, #660]	@ (800d5a8 <USBH_HandleEnum+0x37c>)
 800d312:	f001 ff1f 	bl	800f154 <iprintf>
 800d316:	200a      	movs	r0, #10
 800d318:	f001 ff2e 	bl	800f178 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	220d      	movs	r2, #13
 800d320:	701a      	strb	r2, [r3, #0]
      break;
 800d322:	e20d      	b.n	800d740 <USBH_HandleEnum+0x514>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	795b      	ldrb	r3, [r3, #5]
 800d328:	4619      	mov	r1, r3
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f001 f9cc 	bl	800e6c8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	791b      	ldrb	r3, [r3, #4]
 800d334:	4619      	mov	r1, r3
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f001 f9c6 	bl	800e6c8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	701a      	strb	r2, [r3, #0]
      break;
 800d342:	e1fd      	b.n	800d740 <USBH_HandleEnum+0x514>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d344:	2112      	movs	r1, #18
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f000 faaa 	bl	800d8a0 <USBH_Get_DevDesc>
 800d34c:	4603      	mov	r3, r0
 800d34e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d350:	7bbb      	ldrb	r3, [r7, #14]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d117      	bne.n	800d386 <USBH_HandleEnum+0x15a>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8b3 3330 	ldrh.w	r3, [r3, #816]	@ 0x330
 800d35c:	4619      	mov	r1, r3
 800d35e:	4893      	ldr	r0, [pc, #588]	@ (800d5ac <USBH_HandleEnum+0x380>)
 800d360:	f001 fef8 	bl	800f154 <iprintf>
 800d364:	200a      	movs	r0, #10
 800d366:	f001 ff07 	bl	800f178 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f8b3 332e 	ldrh.w	r3, [r3, #814]	@ 0x32e
 800d370:	4619      	mov	r1, r3
 800d372:	488f      	ldr	r0, [pc, #572]	@ (800d5b0 <USBH_HandleEnum+0x384>)
 800d374:	f001 feee 	bl	800f154 <iprintf>
 800d378:	200a      	movs	r0, #10
 800d37a:	f001 fefd 	bl	800f178 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2202      	movs	r2, #2
 800d382:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d384:	e1de      	b.n	800d744 <USBH_HandleEnum+0x518>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d386:	7bbb      	ldrb	r3, [r7, #14]
 800d388:	2b03      	cmp	r3, #3
 800d38a:	f040 81db 	bne.w	800d744 <USBH_HandleEnum+0x518>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800d38e:	4884      	ldr	r0, [pc, #528]	@ (800d5a0 <USBH_HandleEnum+0x374>)
 800d390:	f001 fee0 	bl	800f154 <iprintf>
 800d394:	4887      	ldr	r0, [pc, #540]	@ (800d5b4 <USBH_HandleEnum+0x388>)
 800d396:	f001 fedd 	bl	800f154 <iprintf>
 800d39a:	200a      	movs	r0, #10
 800d39c:	f001 feec 	bl	800f178 <putchar>
        phost->device.EnumCnt++;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	b2da      	uxtb	r2, r3
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d3b6:	2b03      	cmp	r3, #3
 800d3b8:	d909      	bls.n	800d3ce <USBH_HandleEnum+0x1a2>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d3ba:	487b      	ldr	r0, [pc, #492]	@ (800d5a8 <USBH_HandleEnum+0x37c>)
 800d3bc:	f001 feca 	bl	800f154 <iprintf>
 800d3c0:	200a      	movs	r0, #10
 800d3c2:	f001 fed9 	bl	800f178 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	220d      	movs	r2, #13
 800d3ca:	701a      	strb	r2, [r3, #0]
      break;
 800d3cc:	e1ba      	b.n	800d744 <USBH_HandleEnum+0x518>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	795b      	ldrb	r3, [r3, #5]
 800d3d2:	4619      	mov	r1, r3
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f001 f977 	bl	800e6c8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	791b      	ldrb	r3, [r3, #4]
 800d3de:	4619      	mov	r1, r3
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f001 f971 	bl	800e6c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	701a      	strb	r2, [r3, #0]
      break;
 800d3f2:	e1a7      	b.n	800d744 <USBH_HandleEnum+0x518>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d3f4:	2101      	movs	r1, #1
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 fb3b 	bl	800da72 <USBH_SetAddress>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d400:	7bbb      	ldrb	r3, [r7, #14]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d13a      	bne.n	800d47c <USBH_HandleEnum+0x250>
      {
        USBH_Delay(2U);
 800d406:	2002      	movs	r0, #2
 800d408:	f001 fc49 	bl	800ec9e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2201      	movs	r2, #1
 800d410:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f893 331c 	ldrb.w	r3, [r3, #796]	@ 0x31c
 800d41a:	4619      	mov	r1, r3
 800d41c:	4866      	ldr	r0, [pc, #408]	@ (800d5b8 <USBH_HandleEnum+0x38c>)
 800d41e:	f001 fe99 	bl	800f154 <iprintf>
 800d422:	200a      	movs	r0, #10
 800d424:	f001 fea8 	bl	800f178 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2203      	movs	r2, #3
 800d42c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	7919      	ldrb	r1, [r3, #4]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d442:	9202      	str	r2, [sp, #8]
 800d444:	2200      	movs	r2, #0
 800d446:	9201      	str	r2, [sp, #4]
 800d448:	9300      	str	r3, [sp, #0]
 800d44a:	4603      	mov	r3, r0
 800d44c:	2280      	movs	r2, #128	@ 0x80
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f001 f8ea 	bl	800e628 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	7959      	ldrb	r1, [r3, #5]
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d464:	687a      	ldr	r2, [r7, #4]
 800d466:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d468:	9202      	str	r2, [sp, #8]
 800d46a:	2200      	movs	r2, #0
 800d46c:	9201      	str	r2, [sp, #4]
 800d46e:	9300      	str	r3, [sp, #0]
 800d470:	4603      	mov	r3, r0
 800d472:	2200      	movs	r2, #0
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f001 f8d7 	bl	800e628 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d47a:	e165      	b.n	800d748 <USBH_HandleEnum+0x51c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d47c:	7bbb      	ldrb	r3, [r7, #14]
 800d47e:	2b03      	cmp	r3, #3
 800d480:	f040 8162 	bne.w	800d748 <USBH_HandleEnum+0x51c>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800d484:	4846      	ldr	r0, [pc, #280]	@ (800d5a0 <USBH_HandleEnum+0x374>)
 800d486:	f001 fe65 	bl	800f154 <iprintf>
 800d48a:	484c      	ldr	r0, [pc, #304]	@ (800d5bc <USBH_HandleEnum+0x390>)
 800d48c:	f001 fe62 	bl	800f154 <iprintf>
 800d490:	200a      	movs	r0, #10
 800d492:	f001 fe71 	bl	800f178 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d496:	4844      	ldr	r0, [pc, #272]	@ (800d5a8 <USBH_HandleEnum+0x37c>)
 800d498:	f001 fe5c 	bl	800f154 <iprintf>
 800d49c:	200a      	movs	r0, #10
 800d49e:	f001 fe6b 	bl	800f178 <putchar>
        phost->gState = HOST_ABORT_STATE;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	220d      	movs	r2, #13
 800d4a6:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	705a      	strb	r2, [r3, #1]
      break;
 800d4ae:	e14b      	b.n	800d748 <USBH_HandleEnum+0x51c>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d4b0:	2109      	movs	r1, #9
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f000 fa2e 	bl	800d914 <USBH_Get_CfgDesc>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d4bc:	7bbb      	ldrb	r3, [r7, #14]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d103      	bne.n	800d4ca <USBH_HandleEnum+0x29e>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2204      	movs	r2, #4
 800d4c6:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d4c8:	e140      	b.n	800d74c <USBH_HandleEnum+0x520>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d4ca:	7bbb      	ldrb	r3, [r7, #14]
 800d4cc:	2b03      	cmp	r3, #3
 800d4ce:	f040 813d 	bne.w	800d74c <USBH_HandleEnum+0x520>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800d4d2:	4833      	ldr	r0, [pc, #204]	@ (800d5a0 <USBH_HandleEnum+0x374>)
 800d4d4:	f001 fe3e 	bl	800f154 <iprintf>
 800d4d8:	4839      	ldr	r0, [pc, #228]	@ (800d5c0 <USBH_HandleEnum+0x394>)
 800d4da:	f001 fe3b 	bl	800f154 <iprintf>
 800d4de:	200a      	movs	r0, #10
 800d4e0:	f001 fe4a 	bl	800f178 <putchar>
        phost->device.EnumCnt++;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	b2da      	uxtb	r2, r3
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d4fa:	2b03      	cmp	r3, #3
 800d4fc:	d909      	bls.n	800d512 <USBH_HandleEnum+0x2e6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d4fe:	482a      	ldr	r0, [pc, #168]	@ (800d5a8 <USBH_HandleEnum+0x37c>)
 800d500:	f001 fe28 	bl	800f154 <iprintf>
 800d504:	200a      	movs	r0, #10
 800d506:	f001 fe37 	bl	800f178 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	220d      	movs	r2, #13
 800d50e:	701a      	strb	r2, [r3, #0]
      break;
 800d510:	e11c      	b.n	800d74c <USBH_HandleEnum+0x520>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	795b      	ldrb	r3, [r3, #5]
 800d516:	4619      	mov	r1, r3
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f001 f8d5 	bl	800e6c8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	791b      	ldrb	r3, [r3, #4]
 800d522:	4619      	mov	r1, r3
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f001 f8cf 	bl	800e6c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2200      	movs	r2, #0
 800d52e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2200      	movs	r2, #0
 800d534:	701a      	strb	r2, [r3, #0]
      break;
 800d536:	e109      	b.n	800d74c <USBH_HandleEnum+0x520>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800d53e:	4619      	mov	r1, r3
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f000 f9e7 	bl	800d914 <USBH_Get_CfgDesc>
 800d546:	4603      	mov	r3, r0
 800d548:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d54a:	7bbb      	ldrb	r3, [r7, #14]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d103      	bne.n	800d558 <USBH_HandleEnum+0x32c>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2205      	movs	r2, #5
 800d554:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d556:	e0fb      	b.n	800d750 <USBH_HandleEnum+0x524>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d558:	7bbb      	ldrb	r3, [r7, #14]
 800d55a:	2b03      	cmp	r3, #3
 800d55c:	f040 80f8 	bne.w	800d750 <USBH_HandleEnum+0x524>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800d560:	480f      	ldr	r0, [pc, #60]	@ (800d5a0 <USBH_HandleEnum+0x374>)
 800d562:	f001 fdf7 	bl	800f154 <iprintf>
 800d566:	4816      	ldr	r0, [pc, #88]	@ (800d5c0 <USBH_HandleEnum+0x394>)
 800d568:	f001 fdf4 	bl	800f154 <iprintf>
 800d56c:	200a      	movs	r0, #10
 800d56e:	f001 fe03 	bl	800f178 <putchar>
        phost->device.EnumCnt++;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d578:	3301      	adds	r3, #1
 800d57a:	b2da      	uxtb	r2, r3
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d588:	2b03      	cmp	r3, #3
 800d58a:	d91b      	bls.n	800d5c4 <USBH_HandleEnum+0x398>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d58c:	4806      	ldr	r0, [pc, #24]	@ (800d5a8 <USBH_HandleEnum+0x37c>)
 800d58e:	f001 fde1 	bl	800f154 <iprintf>
 800d592:	200a      	movs	r0, #10
 800d594:	f001 fdf0 	bl	800f178 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	220d      	movs	r2, #13
 800d59c:	701a      	strb	r2, [r3, #0]
      break;
 800d59e:	e0d7      	b.n	800d750 <USBH_HandleEnum+0x524>
 800d5a0:	08010490 	.word	0x08010490
 800d5a4:	08010728 	.word	0x08010728
 800d5a8:	0801075c 	.word	0x0801075c
 800d5ac:	0801079c 	.word	0x0801079c
 800d5b0:	080107a8 	.word	0x080107a8
 800d5b4:	080107b4 	.word	0x080107b4
 800d5b8:	080107f0 	.word	0x080107f0
 800d5bc:	08010808 	.word	0x08010808
 800d5c0:	0801083c 	.word	0x0801083c
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	795b      	ldrb	r3, [r3, #5]
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f001 f87c 	bl	800e6c8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	791b      	ldrb	r3, [r3, #4]
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f001 f876 	bl	800e6c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	701a      	strb	r2, [r3, #0]
      break;
 800d5e8:	e0b2      	b.n	800d750 <USBH_HandleEnum+0x524>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d02a      	beq.n	800d64a <USBH_HandleEnum+0x41e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d600:	23ff      	movs	r3, #255	@ 0xff
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 f9be 	bl	800d984 <USBH_Get_StringDesc>
 800d608:	4603      	mov	r3, r0
 800d60a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d60c:	7bbb      	ldrb	r3, [r7, #14]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d10d      	bne.n	800d62e <USBH_HandleEnum+0x402>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d618:	4619      	mov	r1, r3
 800d61a:	4853      	ldr	r0, [pc, #332]	@ (800d768 <USBH_HandleEnum+0x53c>)
 800d61c:	f001 fd9a 	bl	800f154 <iprintf>
 800d620:	200a      	movs	r0, #10
 800d622:	f001 fda9 	bl	800f178 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2206      	movs	r2, #6
 800d62a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d62c:	e092      	b.n	800d754 <USBH_HandleEnum+0x528>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d62e:	7bbb      	ldrb	r3, [r7, #14]
 800d630:	2b03      	cmp	r3, #3
 800d632:	f040 808f 	bne.w	800d754 <USBH_HandleEnum+0x528>
          USBH_UsrLog("Manufacturer : N/A");
 800d636:	484d      	ldr	r0, [pc, #308]	@ (800d76c <USBH_HandleEnum+0x540>)
 800d638:	f001 fd8c 	bl	800f154 <iprintf>
 800d63c:	200a      	movs	r0, #10
 800d63e:	f001 fd9b 	bl	800f178 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2206      	movs	r2, #6
 800d646:	705a      	strb	r2, [r3, #1]
      break;
 800d648:	e084      	b.n	800d754 <USBH_HandleEnum+0x528>
        USBH_UsrLog("Manufacturer : N/A");
 800d64a:	4848      	ldr	r0, [pc, #288]	@ (800d76c <USBH_HandleEnum+0x540>)
 800d64c:	f001 fd82 	bl	800f154 <iprintf>
 800d650:	200a      	movs	r0, #10
 800d652:	f001 fd91 	bl	800f178 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2206      	movs	r2, #6
 800d65a:	705a      	strb	r2, [r3, #1]
      break;
 800d65c:	e07a      	b.n	800d754 <USBH_HandleEnum+0x528>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800d664:	2b00      	cmp	r3, #0
 800d666:	d029      	beq.n	800d6bc <USBH_HandleEnum+0x490>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d674:	23ff      	movs	r3, #255	@ 0xff
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f000 f984 	bl	800d984 <USBH_Get_StringDesc>
 800d67c:	4603      	mov	r3, r0
 800d67e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d680:	7bbb      	ldrb	r3, [r7, #14]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d10d      	bne.n	800d6a2 <USBH_HandleEnum+0x476>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d68c:	4619      	mov	r1, r3
 800d68e:	4838      	ldr	r0, [pc, #224]	@ (800d770 <USBH_HandleEnum+0x544>)
 800d690:	f001 fd60 	bl	800f154 <iprintf>
 800d694:	200a      	movs	r0, #10
 800d696:	f001 fd6f 	bl	800f178 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2207      	movs	r2, #7
 800d69e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d6a0:	e05a      	b.n	800d758 <USBH_HandleEnum+0x52c>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d6a2:	7bbb      	ldrb	r3, [r7, #14]
 800d6a4:	2b03      	cmp	r3, #3
 800d6a6:	d157      	bne.n	800d758 <USBH_HandleEnum+0x52c>
          USBH_UsrLog("Product : N/A");
 800d6a8:	4832      	ldr	r0, [pc, #200]	@ (800d774 <USBH_HandleEnum+0x548>)
 800d6aa:	f001 fd53 	bl	800f154 <iprintf>
 800d6ae:	200a      	movs	r0, #10
 800d6b0:	f001 fd62 	bl	800f178 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2207      	movs	r2, #7
 800d6b8:	705a      	strb	r2, [r3, #1]
      break;
 800d6ba:	e04d      	b.n	800d758 <USBH_HandleEnum+0x52c>
        USBH_UsrLog("Product : N/A");
 800d6bc:	482d      	ldr	r0, [pc, #180]	@ (800d774 <USBH_HandleEnum+0x548>)
 800d6be:	f001 fd49 	bl	800f154 <iprintf>
 800d6c2:	200a      	movs	r0, #10
 800d6c4:	f001 fd58 	bl	800f178 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2207      	movs	r2, #7
 800d6cc:	705a      	strb	r2, [r3, #1]
      break;
 800d6ce:	e043      	b.n	800d758 <USBH_HandleEnum+0x52c>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d027      	beq.n	800d72a <USBH_HandleEnum+0x4fe>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d6e6:	23ff      	movs	r3, #255	@ 0xff
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f000 f94b 	bl	800d984 <USBH_Get_StringDesc>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d6f2:	7bbb      	ldrb	r3, [r7, #14]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d10c      	bne.n	800d712 <USBH_HandleEnum+0x4e6>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d6fe:	4619      	mov	r1, r3
 800d700:	481d      	ldr	r0, [pc, #116]	@ (800d778 <USBH_HandleEnum+0x54c>)
 800d702:	f001 fd27 	bl	800f154 <iprintf>
 800d706:	200a      	movs	r0, #10
 800d708:	f001 fd36 	bl	800f178 <putchar>
          Status = USBH_OK;
 800d70c:	2300      	movs	r3, #0
 800d70e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d710:	e024      	b.n	800d75c <USBH_HandleEnum+0x530>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d712:	7bbb      	ldrb	r3, [r7, #14]
 800d714:	2b03      	cmp	r3, #3
 800d716:	d121      	bne.n	800d75c <USBH_HandleEnum+0x530>
          USBH_UsrLog("Serial Number : N/A");
 800d718:	4818      	ldr	r0, [pc, #96]	@ (800d77c <USBH_HandleEnum+0x550>)
 800d71a:	f001 fd1b 	bl	800f154 <iprintf>
 800d71e:	200a      	movs	r0, #10
 800d720:	f001 fd2a 	bl	800f178 <putchar>
          Status = USBH_OK;
 800d724:	2300      	movs	r3, #0
 800d726:	73fb      	strb	r3, [r7, #15]
      break;
 800d728:	e018      	b.n	800d75c <USBH_HandleEnum+0x530>
        USBH_UsrLog("Serial Number : N/A");
 800d72a:	4814      	ldr	r0, [pc, #80]	@ (800d77c <USBH_HandleEnum+0x550>)
 800d72c:	f001 fd12 	bl	800f154 <iprintf>
 800d730:	200a      	movs	r0, #10
 800d732:	f001 fd21 	bl	800f178 <putchar>
        Status = USBH_OK;
 800d736:	2300      	movs	r3, #0
 800d738:	73fb      	strb	r3, [r7, #15]
      break;
 800d73a:	e00f      	b.n	800d75c <USBH_HandleEnum+0x530>

    default:
      break;
 800d73c:	bf00      	nop
 800d73e:	e00e      	b.n	800d75e <USBH_HandleEnum+0x532>
      break;
 800d740:	bf00      	nop
 800d742:	e00c      	b.n	800d75e <USBH_HandleEnum+0x532>
      break;
 800d744:	bf00      	nop
 800d746:	e00a      	b.n	800d75e <USBH_HandleEnum+0x532>
      break;
 800d748:	bf00      	nop
 800d74a:	e008      	b.n	800d75e <USBH_HandleEnum+0x532>
      break;
 800d74c:	bf00      	nop
 800d74e:	e006      	b.n	800d75e <USBH_HandleEnum+0x532>
      break;
 800d750:	bf00      	nop
 800d752:	e004      	b.n	800d75e <USBH_HandleEnum+0x532>
      break;
 800d754:	bf00      	nop
 800d756:	e002      	b.n	800d75e <USBH_HandleEnum+0x532>
      break;
 800d758:	bf00      	nop
 800d75a:	e000      	b.n	800d75e <USBH_HandleEnum+0x532>
      break;
 800d75c:	bf00      	nop
  }
  return Status;
 800d75e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d760:	4618      	mov	r0, r3
 800d762:	3710      	adds	r7, #16
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	08010880 	.word	0x08010880
 800d76c:	08010894 	.word	0x08010894
 800d770:	080108a8 	.word	0x080108a8
 800d774:	080108b8 	.word	0x080108b8
 800d778:	080108c8 	.word	0x080108c8
 800d77c:	080108dc 	.word	0x080108dc

0800d780 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d780:	b480      	push	{r7}
 800d782:	b083      	sub	sp, #12
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	683a      	ldr	r2, [r7, #0]
 800d78e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800d792:	bf00      	nop
 800d794:	370c      	adds	r7, #12
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr

0800d79e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d79e:	b580      	push	{r7, lr}
 800d7a0:	b082      	sub	sp, #8
 800d7a2:	af00      	add	r7, sp, #0
 800d7a4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d7ac:	1c5a      	adds	r2, r3, #1
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f000 f804 	bl	800d7c2 <USBH_HandleSof>
}
 800d7ba:	bf00      	nop
 800d7bc:	3708      	adds	r7, #8
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}

0800d7c2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d7c2:	b580      	push	{r7, lr}
 800d7c4:	b082      	sub	sp, #8
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	2b0b      	cmp	r3, #11
 800d7d2:	d10a      	bne.n	800d7ea <USBH_HandleSof+0x28>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d005      	beq.n	800d7ea <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d7e4:	699b      	ldr	r3, [r3, #24]
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	4798      	blx	r3
  }
}
 800d7ea:	bf00      	nop
 800d7ec:	3708      	adds	r7, #8
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d7f2:	b480      	push	{r7}
 800d7f4:	b083      	sub	sp, #12
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800d802:	bf00      	nop
}
 800d804:	370c      	adds	r7, #12
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr

0800d80e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d80e:	b480      	push	{r7}
 800d810:	b083      	sub	sp, #12
 800d812:	af00      	add	r7, sp, #0
 800d814:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2200      	movs	r2, #0
 800d81a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800d81e:	bf00      	nop
}
 800d820:	370c      	adds	r7, #12
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr

0800d82a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d82a:	b480      	push	{r7}
 800d82c:	b083      	sub	sp, #12
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2201      	movs	r2, #1
 800d836:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2200      	movs	r2, #0
 800d83e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2200      	movs	r2, #0
 800d846:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d84a:	2300      	movs	r3, #0
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	370c      	adds	r7, #12
 800d850:	46bd      	mov	sp, r7
 800d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d856:	4770      	bx	lr

0800d858 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2201      	movs	r2, #1
 800d864:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2200      	movs	r2, #0
 800d86c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2200      	movs	r2, #0
 800d874:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f001 f8c4 	bl	800ea06 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	791b      	ldrb	r3, [r3, #4]
 800d882:	4619      	mov	r1, r3
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 ff1f 	bl	800e6c8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	795b      	ldrb	r3, [r3, #5]
 800d88e:	4619      	mov	r1, r3
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f000 ff19 	bl	800e6c8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d896:	2300      	movs	r3, #0
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3708      	adds	r7, #8
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b086      	sub	sp, #24
 800d8a4:	af02      	add	r7, sp, #8
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800d8ac:	887b      	ldrh	r3, [r7, #2]
 800d8ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d8b2:	d90a      	bls.n	800d8ca <USBH_Get_DevDesc+0x2a>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
 800d8b4:	4815      	ldr	r0, [pc, #84]	@ (800d90c <USBH_Get_DevDesc+0x6c>)
 800d8b6:	f001 fc4d 	bl	800f154 <iprintf>
 800d8ba:	4815      	ldr	r0, [pc, #84]	@ (800d910 <USBH_Get_DevDesc+0x70>)
 800d8bc:	f001 fc4a 	bl	800f154 <iprintf>
 800d8c0:	200a      	movs	r0, #10
 800d8c2:	f001 fc59 	bl	800f178 <putchar>
    return USBH_NOT_SUPPORTED;
 800d8c6:	2303      	movs	r3, #3
 800d8c8:	e01b      	b.n	800d902 <USBH_Get_DevDesc+0x62>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d8d0:	887b      	ldrh	r3, [r7, #2]
 800d8d2:	9300      	str	r3, [sp, #0]
 800d8d4:	4613      	mov	r3, r2
 800d8d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d8da:	2100      	movs	r1, #0
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f000 f893 	bl	800da08 <USBH_GetDescriptor>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800d8e6:	7bfb      	ldrb	r3, [r7, #15]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d109      	bne.n	800d900 <USBH_Get_DevDesc+0x60>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d8f2:	887a      	ldrh	r2, [r7, #2]
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 f94a 	bl	800db90 <USBH_ParseDevDesc>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d900:	7bfb      	ldrb	r3, [r7, #15]
}
 800d902:	4618      	mov	r0, r3
 800d904:	3710      	adds	r7, #16
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	080108f0 	.word	0x080108f0
 800d910:	080108f8 	.word	0x080108f8

0800d914 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b086      	sub	sp, #24
 800d918:	af02      	add	r7, sp, #8
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	460b      	mov	r3, r1
 800d91e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	331c      	adds	r3, #28
 800d924:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800d926:	887b      	ldrh	r3, [r7, #2]
 800d928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d92c:	d90a      	bls.n	800d944 <USBH_Get_CfgDesc+0x30>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
 800d92e:	4813      	ldr	r0, [pc, #76]	@ (800d97c <USBH_Get_CfgDesc+0x68>)
 800d930:	f001 fc10 	bl	800f154 <iprintf>
 800d934:	4812      	ldr	r0, [pc, #72]	@ (800d980 <USBH_Get_CfgDesc+0x6c>)
 800d936:	f001 fc0d 	bl	800f154 <iprintf>
 800d93a:	200a      	movs	r0, #10
 800d93c:	f001 fc1c 	bl	800f178 <putchar>
    return USBH_NOT_SUPPORTED;
 800d940:	2303      	movs	r3, #3
 800d942:	e016      	b.n	800d972 <USBH_Get_CfgDesc+0x5e>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d944:	887b      	ldrh	r3, [r7, #2]
 800d946:	9300      	str	r3, [sp, #0]
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d94e:	2100      	movs	r1, #0
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f000 f859 	bl	800da08 <USBH_GetDescriptor>
 800d956:	4603      	mov	r3, r0
 800d958:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800d95a:	7bfb      	ldrb	r3, [r7, #15]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d107      	bne.n	800d970 <USBH_Get_CfgDesc+0x5c>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800d960:	887b      	ldrh	r3, [r7, #2]
 800d962:	461a      	mov	r2, r3
 800d964:	68b9      	ldr	r1, [r7, #8]
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f000 f9c2 	bl	800dcf0 <USBH_ParseCfgDesc>
 800d96c:	4603      	mov	r3, r0
 800d96e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d970:	7bfb      	ldrb	r3, [r7, #15]
}
 800d972:	4618      	mov	r0, r3
 800d974:	3710      	adds	r7, #16
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	080108f0 	.word	0x080108f0
 800d980:	0801093c 	.word	0x0801093c

0800d984 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b088      	sub	sp, #32
 800d988:	af02      	add	r7, sp, #8
 800d98a:	60f8      	str	r0, [r7, #12]
 800d98c:	607a      	str	r2, [r7, #4]
 800d98e:	461a      	mov	r2, r3
 800d990:	460b      	mov	r3, r1
 800d992:	72fb      	strb	r3, [r7, #11]
 800d994:	4613      	mov	r3, r2
 800d996:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800d998:	893b      	ldrh	r3, [r7, #8]
 800d99a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d99e:	d802      	bhi.n	800d9a6 <USBH_Get_StringDesc+0x22>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d10a      	bne.n	800d9bc <USBH_Get_StringDesc+0x38>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
 800d9a6:	4816      	ldr	r0, [pc, #88]	@ (800da00 <USBH_Get_StringDesc+0x7c>)
 800d9a8:	f001 fbd4 	bl	800f154 <iprintf>
 800d9ac:	4815      	ldr	r0, [pc, #84]	@ (800da04 <USBH_Get_StringDesc+0x80>)
 800d9ae:	f001 fbd1 	bl	800f154 <iprintf>
 800d9b2:	200a      	movs	r0, #10
 800d9b4:	f001 fbe0 	bl	800f178 <putchar>
    return USBH_NOT_SUPPORTED;
 800d9b8:	2303      	movs	r3, #3
 800d9ba:	e01c      	b.n	800d9f6 <USBH_Get_StringDesc+0x72>
  }

  status = USBH_GetDescriptor(phost,
 800d9bc:	7afb      	ldrb	r3, [r7, #11]
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800d9c4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d9cc:	893b      	ldrh	r3, [r7, #8]
 800d9ce:	9300      	str	r3, [sp, #0]
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	2100      	movs	r1, #0
 800d9d4:	68f8      	ldr	r0, [r7, #12]
 800d9d6:	f000 f817 	bl	800da08 <USBH_GetDescriptor>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800d9de:	7dfb      	ldrb	r3, [r7, #23]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d107      	bne.n	800d9f4 <USBH_Get_StringDesc+0x70>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d9ea:	893a      	ldrh	r2, [r7, #8]
 800d9ec:	6879      	ldr	r1, [r7, #4]
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f000 fb92 	bl	800e118 <USBH_ParseStringDesc>
  }

  return status;
 800d9f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3718      	adds	r7, #24
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	080108f0 	.word	0x080108f0
 800da04:	08010988 	.word	0x08010988

0800da08 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	60f8      	str	r0, [r7, #12]
 800da10:	607b      	str	r3, [r7, #4]
 800da12:	460b      	mov	r3, r1
 800da14:	72fb      	strb	r3, [r7, #11]
 800da16:	4613      	mov	r3, r2
 800da18:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	789b      	ldrb	r3, [r3, #2]
 800da1e:	2b01      	cmp	r3, #1
 800da20:	d11c      	bne.n	800da5c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800da22:	7afb      	ldrb	r3, [r7, #11]
 800da24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800da28:	b2da      	uxtb	r2, r3
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	2206      	movs	r2, #6
 800da32:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	893a      	ldrh	r2, [r7, #8]
 800da38:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800da3a:	893b      	ldrh	r3, [r7, #8]
 800da3c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800da40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800da44:	d104      	bne.n	800da50 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f240 4209 	movw	r2, #1033	@ 0x409
 800da4c:	829a      	strh	r2, [r3, #20]
 800da4e:	e002      	b.n	800da56 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	2200      	movs	r2, #0
 800da54:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	8b3a      	ldrh	r2, [r7, #24]
 800da5a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800da5c:	8b3b      	ldrh	r3, [r7, #24]
 800da5e:	461a      	mov	r2, r3
 800da60:	6879      	ldr	r1, [r7, #4]
 800da62:	68f8      	ldr	r0, [r7, #12]
 800da64:	f000 fba5 	bl	800e1b2 <USBH_CtlReq>
 800da68:	4603      	mov	r3, r0
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	3710      	adds	r7, #16
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}

0800da72 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800da72:	b580      	push	{r7, lr}
 800da74:	b082      	sub	sp, #8
 800da76:	af00      	add	r7, sp, #0
 800da78:	6078      	str	r0, [r7, #4]
 800da7a:	460b      	mov	r3, r1
 800da7c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	789b      	ldrb	r3, [r3, #2]
 800da82:	2b01      	cmp	r3, #1
 800da84:	d10f      	bne.n	800daa6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2200      	movs	r2, #0
 800da8a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2205      	movs	r2, #5
 800da90:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800da92:	78fb      	ldrb	r3, [r7, #3]
 800da94:	b29a      	uxth	r2, r3
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2200      	movs	r2, #0
 800da9e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2200      	movs	r2, #0
 800daa4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800daa6:	2200      	movs	r2, #0
 800daa8:	2100      	movs	r1, #0
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f000 fb81 	bl	800e1b2 <USBH_CtlReq>
 800dab0:	4603      	mov	r3, r0
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3708      	adds	r7, #8
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}

0800daba <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800daba:	b580      	push	{r7, lr}
 800dabc:	b082      	sub	sp, #8
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	6078      	str	r0, [r7, #4]
 800dac2:	460b      	mov	r3, r1
 800dac4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	789b      	ldrb	r3, [r3, #2]
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d10e      	bne.n	800daec <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2200      	movs	r2, #0
 800dad2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2209      	movs	r2, #9
 800dad8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	887a      	ldrh	r2, [r7, #2]
 800dade:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2200      	movs	r2, #0
 800dae4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2200      	movs	r2, #0
 800daea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800daec:	2200      	movs	r2, #0
 800daee:	2100      	movs	r1, #0
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 fb5e 	bl	800e1b2 <USBH_CtlReq>
 800daf6:	4603      	mov	r3, r0
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3708      	adds	r7, #8
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}

0800db00 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b082      	sub	sp, #8
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	460b      	mov	r3, r1
 800db0a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	789b      	ldrb	r3, [r3, #2]
 800db10:	2b01      	cmp	r3, #1
 800db12:	d10f      	bne.n	800db34 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2200      	movs	r2, #0
 800db18:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2203      	movs	r2, #3
 800db1e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800db20:	78fb      	ldrb	r3, [r7, #3]
 800db22:	b29a      	uxth	r2, r3
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2200      	movs	r2, #0
 800db2c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2200      	movs	r2, #0
 800db32:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800db34:	2200      	movs	r2, #0
 800db36:	2100      	movs	r1, #0
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 fb3a 	bl	800e1b2 <USBH_CtlReq>
 800db3e:	4603      	mov	r3, r0
}
 800db40:	4618      	mov	r0, r3
 800db42:	3708      	adds	r7, #8
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}

0800db48 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b082      	sub	sp, #8
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	460b      	mov	r3, r1
 800db52:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	789b      	ldrb	r3, [r3, #2]
 800db58:	2b01      	cmp	r3, #1
 800db5a:	d10f      	bne.n	800db7c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2202      	movs	r2, #2
 800db60:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2201      	movs	r2, #1
 800db66:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2200      	movs	r2, #0
 800db6c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800db6e:	78fb      	ldrb	r3, [r7, #3]
 800db70:	b29a      	uxth	r2, r3
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2200      	movs	r2, #0
 800db7a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800db7c:	2200      	movs	r2, #0
 800db7e:	2100      	movs	r1, #0
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f000 fb16 	bl	800e1b2 <USBH_CtlReq>
 800db86:	4603      	mov	r3, r0
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3708      	adds	r7, #8
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800db90:	b480      	push	{r7}
 800db92:	b087      	sub	sp, #28
 800db94:	af00      	add	r7, sp, #0
 800db96:	60f8      	str	r0, [r7, #12]
 800db98:	60b9      	str	r1, [r7, #8]
 800db9a:	4613      	mov	r3, r2
 800db9c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800dba4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800dba6:	2300      	movs	r3, #0
 800dba8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d101      	bne.n	800dbb4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800dbb0:	2302      	movs	r3, #2
 800dbb2:	e094      	b.n	800dcde <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	781a      	ldrb	r2, [r3, #0]
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	785a      	ldrb	r2, [r3, #1]
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	3302      	adds	r3, #2
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	461a      	mov	r2, r3
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	3303      	adds	r3, #3
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	021b      	lsls	r3, r3, #8
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	4313      	orrs	r3, r2
 800dbd8:	b29a      	uxth	r2, r3
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	791a      	ldrb	r2, [r3, #4]
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	795a      	ldrb	r2, [r3, #5]
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	799a      	ldrb	r2, [r3, #6]
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	79da      	ldrb	r2, [r3, #7]
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d004      	beq.n	800dc12 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d11b      	bne.n	800dc4a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	79db      	ldrb	r3, [r3, #7]
 800dc16:	2b20      	cmp	r3, #32
 800dc18:	dc0f      	bgt.n	800dc3a <USBH_ParseDevDesc+0xaa>
 800dc1a:	2b08      	cmp	r3, #8
 800dc1c:	db0f      	blt.n	800dc3e <USBH_ParseDevDesc+0xae>
 800dc1e:	3b08      	subs	r3, #8
 800dc20:	4a32      	ldr	r2, [pc, #200]	@ (800dcec <USBH_ParseDevDesc+0x15c>)
 800dc22:	fa22 f303 	lsr.w	r3, r2, r3
 800dc26:	f003 0301 	and.w	r3, r3, #1
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	bf14      	ite	ne
 800dc2e:	2301      	movne	r3, #1
 800dc30:	2300      	moveq	r3, #0
 800dc32:	b2db      	uxtb	r3, r3
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d106      	bne.n	800dc46 <USBH_ParseDevDesc+0xb6>
 800dc38:	e001      	b.n	800dc3e <USBH_ParseDevDesc+0xae>
 800dc3a:	2b40      	cmp	r3, #64	@ 0x40
 800dc3c:	d003      	beq.n	800dc46 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	2208      	movs	r2, #8
 800dc42:	71da      	strb	r2, [r3, #7]
        break;
 800dc44:	e000      	b.n	800dc48 <USBH_ParseDevDesc+0xb8>
        break;
 800dc46:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800dc48:	e00e      	b.n	800dc68 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dc50:	2b02      	cmp	r3, #2
 800dc52:	d107      	bne.n	800dc64 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	79db      	ldrb	r3, [r3, #7]
 800dc58:	2b08      	cmp	r3, #8
 800dc5a:	d005      	beq.n	800dc68 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	2208      	movs	r2, #8
 800dc60:	71da      	strb	r2, [r3, #7]
 800dc62:	e001      	b.n	800dc68 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800dc64:	2303      	movs	r3, #3
 800dc66:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800dc68:	88fb      	ldrh	r3, [r7, #6]
 800dc6a:	2b08      	cmp	r3, #8
 800dc6c:	d936      	bls.n	800dcdc <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	3308      	adds	r3, #8
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	461a      	mov	r2, r3
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	3309      	adds	r3, #9
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	021b      	lsls	r3, r3, #8
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	4313      	orrs	r3, r2
 800dc82:	b29a      	uxth	r2, r3
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	330a      	adds	r3, #10
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	461a      	mov	r2, r3
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	330b      	adds	r3, #11
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	021b      	lsls	r3, r3, #8
 800dc98:	b29b      	uxth	r3, r3
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	b29a      	uxth	r2, r3
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	330c      	adds	r3, #12
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	461a      	mov	r2, r3
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	330d      	adds	r3, #13
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	021b      	lsls	r3, r3, #8
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	4313      	orrs	r3, r2
 800dcb6:	b29a      	uxth	r2, r3
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	7b9a      	ldrb	r2, [r3, #14]
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	7bda      	ldrb	r2, [r3, #15]
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	7c1a      	ldrb	r2, [r3, #16]
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	7c5a      	ldrb	r2, [r3, #17]
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800dcdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	371c      	adds	r7, #28
 800dce2:	46bd      	mov	sp, r7
 800dce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce8:	4770      	bx	lr
 800dcea:	bf00      	nop
 800dcec:	01000101 	.word	0x01000101

0800dcf0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b08c      	sub	sp, #48	@ 0x30
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	60b9      	str	r1, [r7, #8]
 800dcfa:	4613      	mov	r3, r2
 800dcfc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800dd04:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800dd06:	2300      	movs	r3, #0
 800dd08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800dd12:	2300      	movs	r3, #0
 800dd14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d101      	bne.n	800dd22 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800dd1e:	2302      	movs	r3, #2
 800dd20:	e0da      	b.n	800ded8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800dd26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	2b09      	cmp	r3, #9
 800dd2c:	d002      	beq.n	800dd34 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800dd2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd30:	2209      	movs	r2, #9
 800dd32:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	781a      	ldrb	r2, [r3, #0]
 800dd38:	6a3b      	ldr	r3, [r7, #32]
 800dd3a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	785a      	ldrb	r2, [r3, #1]
 800dd40:	6a3b      	ldr	r3, [r7, #32]
 800dd42:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	3302      	adds	r3, #2
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	3303      	adds	r3, #3
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	021b      	lsls	r3, r3, #8
 800dd54:	b29b      	uxth	r3, r3
 800dd56:	4313      	orrs	r3, r2
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dd5e:	bf28      	it	cs
 800dd60:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800dd64:	b29a      	uxth	r2, r3
 800dd66:	6a3b      	ldr	r3, [r7, #32]
 800dd68:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	791a      	ldrb	r2, [r3, #4]
 800dd6e:	6a3b      	ldr	r3, [r7, #32]
 800dd70:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	795a      	ldrb	r2, [r3, #5]
 800dd76:	6a3b      	ldr	r3, [r7, #32]
 800dd78:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	799a      	ldrb	r2, [r3, #6]
 800dd7e:	6a3b      	ldr	r3, [r7, #32]
 800dd80:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	79da      	ldrb	r2, [r3, #7]
 800dd86:	6a3b      	ldr	r3, [r7, #32]
 800dd88:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	7a1a      	ldrb	r2, [r3, #8]
 800dd8e:	6a3b      	ldr	r3, [r7, #32]
 800dd90:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800dd92:	88fb      	ldrh	r3, [r7, #6]
 800dd94:	2b09      	cmp	r3, #9
 800dd96:	f240 809d 	bls.w	800ded4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800dd9a:	2309      	movs	r3, #9
 800dd9c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800dda2:	e081      	b.n	800dea8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800dda4:	f107 0316 	add.w	r3, r7, #22
 800dda8:	4619      	mov	r1, r3
 800ddaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ddac:	f000 f9e7 	bl	800e17e <USBH_GetNextDesc>
 800ddb0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ddb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddb4:	785b      	ldrb	r3, [r3, #1]
 800ddb6:	2b04      	cmp	r3, #4
 800ddb8:	d176      	bne.n	800dea8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ddba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddbc:	781b      	ldrb	r3, [r3, #0]
 800ddbe:	2b09      	cmp	r3, #9
 800ddc0:	d002      	beq.n	800ddc8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ddc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddc4:	2209      	movs	r2, #9
 800ddc6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ddc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ddcc:	221a      	movs	r2, #26
 800ddce:	fb02 f303 	mul.w	r3, r2, r3
 800ddd2:	3308      	adds	r3, #8
 800ddd4:	6a3a      	ldr	r2, [r7, #32]
 800ddd6:	4413      	add	r3, r2
 800ddd8:	3302      	adds	r3, #2
 800ddda:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800dddc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ddde:	69f8      	ldr	r0, [r7, #28]
 800dde0:	f000 f87e 	bl	800dee0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800dde4:	2300      	movs	r3, #0
 800dde6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800ddea:	2300      	movs	r3, #0
 800ddec:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ddee:	e043      	b.n	800de78 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ddf0:	f107 0316 	add.w	r3, r7, #22
 800ddf4:	4619      	mov	r1, r3
 800ddf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ddf8:	f000 f9c1 	bl	800e17e <USBH_GetNextDesc>
 800ddfc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ddfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de00:	785b      	ldrb	r3, [r3, #1]
 800de02:	2b05      	cmp	r3, #5
 800de04:	d138      	bne.n	800de78 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	795b      	ldrb	r3, [r3, #5]
 800de0a:	2b01      	cmp	r3, #1
 800de0c:	d113      	bne.n	800de36 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800de0e:	69fb      	ldr	r3, [r7, #28]
 800de10:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800de12:	2b02      	cmp	r3, #2
 800de14:	d003      	beq.n	800de1e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800de16:	69fb      	ldr	r3, [r7, #28]
 800de18:	799b      	ldrb	r3, [r3, #6]
 800de1a:	2b03      	cmp	r3, #3
 800de1c:	d10b      	bne.n	800de36 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800de1e:	69fb      	ldr	r3, [r7, #28]
 800de20:	79db      	ldrb	r3, [r3, #7]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d10b      	bne.n	800de3e <USBH_ParseCfgDesc+0x14e>
 800de26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	2b09      	cmp	r3, #9
 800de2c:	d007      	beq.n	800de3e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800de2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de30:	2209      	movs	r2, #9
 800de32:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800de34:	e003      	b.n	800de3e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800de36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de38:	2207      	movs	r2, #7
 800de3a:	701a      	strb	r2, [r3, #0]
 800de3c:	e000      	b.n	800de40 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800de3e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800de40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800de44:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800de48:	3201      	adds	r2, #1
 800de4a:	00d2      	lsls	r2, r2, #3
 800de4c:	211a      	movs	r1, #26
 800de4e:	fb01 f303 	mul.w	r3, r1, r3
 800de52:	4413      	add	r3, r2
 800de54:	3308      	adds	r3, #8
 800de56:	6a3a      	ldr	r2, [r7, #32]
 800de58:	4413      	add	r3, r2
 800de5a:	3304      	adds	r3, #4
 800de5c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800de5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800de60:	69b9      	ldr	r1, [r7, #24]
 800de62:	68f8      	ldr	r0, [r7, #12]
 800de64:	f000 f870 	bl	800df48 <USBH_ParseEPDesc>
 800de68:	4603      	mov	r3, r0
 800de6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800de6e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800de72:	3301      	adds	r3, #1
 800de74:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800de78:	69fb      	ldr	r3, [r7, #28]
 800de7a:	791b      	ldrb	r3, [r3, #4]
 800de7c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800de80:	429a      	cmp	r2, r3
 800de82:	d204      	bcs.n	800de8e <USBH_ParseCfgDesc+0x19e>
 800de84:	6a3b      	ldr	r3, [r7, #32]
 800de86:	885a      	ldrh	r2, [r3, #2]
 800de88:	8afb      	ldrh	r3, [r7, #22]
 800de8a:	429a      	cmp	r2, r3
 800de8c:	d8b0      	bhi.n	800ddf0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800de8e:	69fb      	ldr	r3, [r7, #28]
 800de90:	791b      	ldrb	r3, [r3, #4]
 800de92:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800de96:	429a      	cmp	r2, r3
 800de98:	d201      	bcs.n	800de9e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800de9a:	2303      	movs	r3, #3
 800de9c:	e01c      	b.n	800ded8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800de9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dea2:	3301      	adds	r3, #1
 800dea4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800dea8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800deac:	2b01      	cmp	r3, #1
 800deae:	d805      	bhi.n	800debc <USBH_ParseCfgDesc+0x1cc>
 800deb0:	6a3b      	ldr	r3, [r7, #32]
 800deb2:	885a      	ldrh	r2, [r3, #2]
 800deb4:	8afb      	ldrh	r3, [r7, #22]
 800deb6:	429a      	cmp	r2, r3
 800deb8:	f63f af74 	bhi.w	800dda4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800debc:	6a3b      	ldr	r3, [r7, #32]
 800debe:	791b      	ldrb	r3, [r3, #4]
 800dec0:	2b02      	cmp	r3, #2
 800dec2:	bf28      	it	cs
 800dec4:	2302      	movcs	r3, #2
 800dec6:	b2db      	uxtb	r3, r3
 800dec8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800decc:	429a      	cmp	r2, r3
 800dece:	d201      	bcs.n	800ded4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800ded0:	2303      	movs	r3, #3
 800ded2:	e001      	b.n	800ded8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800ded4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3730      	adds	r7, #48	@ 0x30
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800dee0:	b480      	push	{r7}
 800dee2:	b083      	sub	sp, #12
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	781a      	ldrb	r2, [r3, #0]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	785a      	ldrb	r2, [r3, #1]
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	789a      	ldrb	r2, [r3, #2]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	78da      	ldrb	r2, [r3, #3]
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	3304      	adds	r3, #4
 800df0e:	781b      	ldrb	r3, [r3, #0]
 800df10:	2b02      	cmp	r3, #2
 800df12:	bf28      	it	cs
 800df14:	2302      	movcs	r3, #2
 800df16:	b2da      	uxtb	r2, r3
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	795a      	ldrb	r2, [r3, #5]
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	799a      	ldrb	r2, [r3, #6]
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	79da      	ldrb	r2, [r3, #7]
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	7a1a      	ldrb	r2, [r3, #8]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	721a      	strb	r2, [r3, #8]
}
 800df3c:	bf00      	nop
 800df3e:	370c      	adds	r7, #12
 800df40:	46bd      	mov	sp, r7
 800df42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df46:	4770      	bx	lr

0800df48 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800df48:	b480      	push	{r7}
 800df4a:	b087      	sub	sp, #28
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	60f8      	str	r0, [r7, #12]
 800df50:	60b9      	str	r1, [r7, #8]
 800df52:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800df54:	2300      	movs	r3, #0
 800df56:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	781a      	ldrb	r2, [r3, #0]
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	785a      	ldrb	r2, [r3, #1]
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	789a      	ldrb	r2, [r3, #2]
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	78da      	ldrb	r2, [r3, #3]
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	3304      	adds	r3, #4
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	461a      	mov	r2, r3
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	3305      	adds	r3, #5
 800df84:	781b      	ldrb	r3, [r3, #0]
 800df86:	021b      	lsls	r3, r3, #8
 800df88:	b29b      	uxth	r3, r3
 800df8a:	4313      	orrs	r3, r2
 800df8c:	b29a      	uxth	r2, r3
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	799a      	ldrb	r2, [r3, #6]
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	889b      	ldrh	r3, [r3, #4]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d009      	beq.n	800dfb6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800dfa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dfaa:	d804      	bhi.n	800dfb6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800dfb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dfb4:	d901      	bls.n	800dfba <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800dfb6:	2303      	movs	r3, #3
 800dfb8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d136      	bne.n	800e032 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	78db      	ldrb	r3, [r3, #3]
 800dfc8:	f003 0303 	and.w	r3, r3, #3
 800dfcc:	2b02      	cmp	r3, #2
 800dfce:	d108      	bne.n	800dfe2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	889b      	ldrh	r3, [r3, #4]
 800dfd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dfd8:	f240 8097 	bls.w	800e10a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dfdc:	2303      	movs	r3, #3
 800dfde:	75fb      	strb	r3, [r7, #23]
 800dfe0:	e093      	b.n	800e10a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	78db      	ldrb	r3, [r3, #3]
 800dfe6:	f003 0303 	and.w	r3, r3, #3
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d107      	bne.n	800dffe <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	889b      	ldrh	r3, [r3, #4]
 800dff2:	2b40      	cmp	r3, #64	@ 0x40
 800dff4:	f240 8089 	bls.w	800e10a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dff8:	2303      	movs	r3, #3
 800dffa:	75fb      	strb	r3, [r7, #23]
 800dffc:	e085      	b.n	800e10a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	78db      	ldrb	r3, [r3, #3]
 800e002:	f003 0303 	and.w	r3, r3, #3
 800e006:	2b01      	cmp	r3, #1
 800e008:	d005      	beq.n	800e016 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	78db      	ldrb	r3, [r3, #3]
 800e00e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e012:	2b03      	cmp	r3, #3
 800e014:	d10a      	bne.n	800e02c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	799b      	ldrb	r3, [r3, #6]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d003      	beq.n	800e026 <USBH_ParseEPDesc+0xde>
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	799b      	ldrb	r3, [r3, #6]
 800e022:	2b10      	cmp	r3, #16
 800e024:	d970      	bls.n	800e108 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800e026:	2303      	movs	r3, #3
 800e028:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e02a:	e06d      	b.n	800e108 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e02c:	2303      	movs	r3, #3
 800e02e:	75fb      	strb	r3, [r7, #23]
 800e030:	e06b      	b.n	800e10a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d13c      	bne.n	800e0b6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	78db      	ldrb	r3, [r3, #3]
 800e040:	f003 0303 	and.w	r3, r3, #3
 800e044:	2b02      	cmp	r3, #2
 800e046:	d005      	beq.n	800e054 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	78db      	ldrb	r3, [r3, #3]
 800e04c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800e050:	2b00      	cmp	r3, #0
 800e052:	d106      	bne.n	800e062 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	889b      	ldrh	r3, [r3, #4]
 800e058:	2b40      	cmp	r3, #64	@ 0x40
 800e05a:	d956      	bls.n	800e10a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e05c:	2303      	movs	r3, #3
 800e05e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e060:	e053      	b.n	800e10a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	78db      	ldrb	r3, [r3, #3]
 800e066:	f003 0303 	and.w	r3, r3, #3
 800e06a:	2b01      	cmp	r3, #1
 800e06c:	d10e      	bne.n	800e08c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	799b      	ldrb	r3, [r3, #6]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d007      	beq.n	800e086 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800e07a:	2b10      	cmp	r3, #16
 800e07c:	d803      	bhi.n	800e086 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800e082:	2b40      	cmp	r3, #64	@ 0x40
 800e084:	d941      	bls.n	800e10a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e086:	2303      	movs	r3, #3
 800e088:	75fb      	strb	r3, [r7, #23]
 800e08a:	e03e      	b.n	800e10a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	78db      	ldrb	r3, [r3, #3]
 800e090:	f003 0303 	and.w	r3, r3, #3
 800e094:	2b03      	cmp	r3, #3
 800e096:	d10b      	bne.n	800e0b0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	799b      	ldrb	r3, [r3, #6]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d004      	beq.n	800e0aa <USBH_ParseEPDesc+0x162>
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	889b      	ldrh	r3, [r3, #4]
 800e0a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e0a8:	d32f      	bcc.n	800e10a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e0aa:	2303      	movs	r3, #3
 800e0ac:	75fb      	strb	r3, [r7, #23]
 800e0ae:	e02c      	b.n	800e10a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e0b0:	2303      	movs	r3, #3
 800e0b2:	75fb      	strb	r3, [r7, #23]
 800e0b4:	e029      	b.n	800e10a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e0bc:	2b02      	cmp	r3, #2
 800e0be:	d120      	bne.n	800e102 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	78db      	ldrb	r3, [r3, #3]
 800e0c4:	f003 0303 	and.w	r3, r3, #3
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d106      	bne.n	800e0da <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	889b      	ldrh	r3, [r3, #4]
 800e0d0:	2b08      	cmp	r3, #8
 800e0d2:	d01a      	beq.n	800e10a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e0d4:	2303      	movs	r3, #3
 800e0d6:	75fb      	strb	r3, [r7, #23]
 800e0d8:	e017      	b.n	800e10a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	78db      	ldrb	r3, [r3, #3]
 800e0de:	f003 0303 	and.w	r3, r3, #3
 800e0e2:	2b03      	cmp	r3, #3
 800e0e4:	d10a      	bne.n	800e0fc <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	799b      	ldrb	r3, [r3, #6]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d003      	beq.n	800e0f6 <USBH_ParseEPDesc+0x1ae>
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	889b      	ldrh	r3, [r3, #4]
 800e0f2:	2b08      	cmp	r3, #8
 800e0f4:	d909      	bls.n	800e10a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e0f6:	2303      	movs	r3, #3
 800e0f8:	75fb      	strb	r3, [r7, #23]
 800e0fa:	e006      	b.n	800e10a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e0fc:	2303      	movs	r3, #3
 800e0fe:	75fb      	strb	r3, [r7, #23]
 800e100:	e003      	b.n	800e10a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800e102:	2303      	movs	r3, #3
 800e104:	75fb      	strb	r3, [r7, #23]
 800e106:	e000      	b.n	800e10a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e108:	bf00      	nop
  }

  return status;
 800e10a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	371c      	adds	r7, #28
 800e110:	46bd      	mov	sp, r7
 800e112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e116:	4770      	bx	lr

0800e118 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e118:	b480      	push	{r7}
 800e11a:	b087      	sub	sp, #28
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	60f8      	str	r0, [r7, #12]
 800e120:	60b9      	str	r1, [r7, #8]
 800e122:	4613      	mov	r3, r2
 800e124:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	3301      	adds	r3, #1
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	2b03      	cmp	r3, #3
 800e12e:	d120      	bne.n	800e172 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	1e9a      	subs	r2, r3, #2
 800e136:	88fb      	ldrh	r3, [r7, #6]
 800e138:	4293      	cmp	r3, r2
 800e13a:	bf28      	it	cs
 800e13c:	4613      	movcs	r3, r2
 800e13e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	3302      	adds	r3, #2
 800e144:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e146:	2300      	movs	r3, #0
 800e148:	82fb      	strh	r3, [r7, #22]
 800e14a:	e00b      	b.n	800e164 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e14c:	8afb      	ldrh	r3, [r7, #22]
 800e14e:	68fa      	ldr	r2, [r7, #12]
 800e150:	4413      	add	r3, r2
 800e152:	781a      	ldrb	r2, [r3, #0]
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	3301      	adds	r3, #1
 800e15c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e15e:	8afb      	ldrh	r3, [r7, #22]
 800e160:	3302      	adds	r3, #2
 800e162:	82fb      	strh	r3, [r7, #22]
 800e164:	8afa      	ldrh	r2, [r7, #22]
 800e166:	8abb      	ldrh	r3, [r7, #20]
 800e168:	429a      	cmp	r2, r3
 800e16a:	d3ef      	bcc.n	800e14c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	2200      	movs	r2, #0
 800e170:	701a      	strb	r2, [r3, #0]
  }
}
 800e172:	bf00      	nop
 800e174:	371c      	adds	r7, #28
 800e176:	46bd      	mov	sp, r7
 800e178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17c:	4770      	bx	lr

0800e17e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e17e:	b480      	push	{r7}
 800e180:	b085      	sub	sp, #20
 800e182:	af00      	add	r7, sp, #0
 800e184:	6078      	str	r0, [r7, #4]
 800e186:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	881b      	ldrh	r3, [r3, #0]
 800e18c:	687a      	ldr	r2, [r7, #4]
 800e18e:	7812      	ldrb	r2, [r2, #0]
 800e190:	4413      	add	r3, r2
 800e192:	b29a      	uxth	r2, r3
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	781b      	ldrb	r3, [r3, #0]
 800e19c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	4413      	add	r3, r2
 800e1a2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e1a4:	68fb      	ldr	r3, [r7, #12]
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3714      	adds	r7, #20
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b0:	4770      	bx	lr

0800e1b2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e1b2:	b580      	push	{r7, lr}
 800e1b4:	b086      	sub	sp, #24
 800e1b6:	af00      	add	r7, sp, #0
 800e1b8:	60f8      	str	r0, [r7, #12]
 800e1ba:	60b9      	str	r1, [r7, #8]
 800e1bc:	4613      	mov	r3, r2
 800e1be:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	789b      	ldrb	r3, [r3, #2]
 800e1c8:	2b01      	cmp	r3, #1
 800e1ca:	d002      	beq.n	800e1d2 <USBH_CtlReq+0x20>
 800e1cc:	2b02      	cmp	r3, #2
 800e1ce:	d00f      	beq.n	800e1f0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800e1d0:	e027      	b.n	800e222 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	68ba      	ldr	r2, [r7, #8]
 800e1d6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	88fa      	ldrh	r2, [r7, #6]
 800e1dc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2202      	movs	r2, #2
 800e1e8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	75fb      	strb	r3, [r7, #23]
      break;
 800e1ee:	e018      	b.n	800e222 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	f000 f81b 	bl	800e22c <USBH_HandleControl>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e1fa:	7dfb      	ldrb	r3, [r7, #23]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d002      	beq.n	800e206 <USBH_CtlReq+0x54>
 800e200:	7dfb      	ldrb	r3, [r7, #23]
 800e202:	2b03      	cmp	r3, #3
 800e204:	d106      	bne.n	800e214 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2201      	movs	r2, #1
 800e20a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2200      	movs	r2, #0
 800e210:	761a      	strb	r2, [r3, #24]
      break;
 800e212:	e005      	b.n	800e220 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800e214:	7dfb      	ldrb	r3, [r7, #23]
 800e216:	2b02      	cmp	r3, #2
 800e218:	d102      	bne.n	800e220 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	2201      	movs	r2, #1
 800e21e:	709a      	strb	r2, [r3, #2]
      break;
 800e220:	bf00      	nop
  }
  return status;
 800e222:	7dfb      	ldrb	r3, [r7, #23]
}
 800e224:	4618      	mov	r0, r3
 800e226:	3718      	adds	r7, #24
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}

0800e22c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b086      	sub	sp, #24
 800e230:	af02      	add	r7, sp, #8
 800e232:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e234:	2301      	movs	r3, #1
 800e236:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e238:	2300      	movs	r3, #0
 800e23a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	7e1b      	ldrb	r3, [r3, #24]
 800e240:	3b01      	subs	r3, #1
 800e242:	2b0a      	cmp	r3, #10
 800e244:	f200 815f 	bhi.w	800e506 <USBH_HandleControl+0x2da>
 800e248:	a201      	add	r2, pc, #4	@ (adr r2, 800e250 <USBH_HandleControl+0x24>)
 800e24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e24e:	bf00      	nop
 800e250:	0800e27d 	.word	0x0800e27d
 800e254:	0800e297 	.word	0x0800e297
 800e258:	0800e301 	.word	0x0800e301
 800e25c:	0800e327 	.word	0x0800e327
 800e260:	0800e35f 	.word	0x0800e35f
 800e264:	0800e389 	.word	0x0800e389
 800e268:	0800e3db 	.word	0x0800e3db
 800e26c:	0800e3fd 	.word	0x0800e3fd
 800e270:	0800e439 	.word	0x0800e439
 800e274:	0800e45f 	.word	0x0800e45f
 800e278:	0800e49d 	.word	0x0800e49d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f103 0110 	add.w	r1, r3, #16
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	795b      	ldrb	r3, [r3, #5]
 800e286:	461a      	mov	r2, r3
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f000 f951 	bl	800e530 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2202      	movs	r2, #2
 800e292:	761a      	strb	r2, [r3, #24]
      break;
 800e294:	e142      	b.n	800e51c <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	795b      	ldrb	r3, [r3, #5]
 800e29a:	4619      	mov	r1, r3
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f000 fca1 	bl	800ebe4 <USBH_LL_GetURBState>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e2a6:	7bbb      	ldrb	r3, [r7, #14]
 800e2a8:	2b01      	cmp	r3, #1
 800e2aa:	d11e      	bne.n	800e2ea <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	7c1b      	ldrb	r3, [r3, #16]
 800e2b0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e2b4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	8adb      	ldrh	r3, [r3, #22]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d00a      	beq.n	800e2d4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e2be:	7b7b      	ldrb	r3, [r7, #13]
 800e2c0:	2b80      	cmp	r3, #128	@ 0x80
 800e2c2:	d103      	bne.n	800e2cc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2203      	movs	r2, #3
 800e2c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e2ca:	e11e      	b.n	800e50a <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2205      	movs	r2, #5
 800e2d0:	761a      	strb	r2, [r3, #24]
      break;
 800e2d2:	e11a      	b.n	800e50a <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 800e2d4:	7b7b      	ldrb	r3, [r7, #13]
 800e2d6:	2b80      	cmp	r3, #128	@ 0x80
 800e2d8:	d103      	bne.n	800e2e2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2209      	movs	r2, #9
 800e2de:	761a      	strb	r2, [r3, #24]
      break;
 800e2e0:	e113      	b.n	800e50a <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2207      	movs	r2, #7
 800e2e6:	761a      	strb	r2, [r3, #24]
      break;
 800e2e8:	e10f      	b.n	800e50a <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e2ea:	7bbb      	ldrb	r3, [r7, #14]
 800e2ec:	2b04      	cmp	r3, #4
 800e2ee:	d003      	beq.n	800e2f8 <USBH_HandleControl+0xcc>
 800e2f0:	7bbb      	ldrb	r3, [r7, #14]
 800e2f2:	2b02      	cmp	r3, #2
 800e2f4:	f040 8109 	bne.w	800e50a <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	220b      	movs	r2, #11
 800e2fc:	761a      	strb	r2, [r3, #24]
      break;
 800e2fe:	e104      	b.n	800e50a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e306:	b29a      	uxth	r2, r3
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6899      	ldr	r1, [r3, #8]
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	899a      	ldrh	r2, [r3, #12]
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	791b      	ldrb	r3, [r3, #4]
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 f948 	bl	800e5ae <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2204      	movs	r2, #4
 800e322:	761a      	strb	r2, [r3, #24]
      break;
 800e324:	e0fa      	b.n	800e51c <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	791b      	ldrb	r3, [r3, #4]
 800e32a:	4619      	mov	r1, r3
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f000 fc59 	bl	800ebe4 <USBH_LL_GetURBState>
 800e332:	4603      	mov	r3, r0
 800e334:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e336:	7bbb      	ldrb	r3, [r7, #14]
 800e338:	2b01      	cmp	r3, #1
 800e33a:	d102      	bne.n	800e342 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2209      	movs	r2, #9
 800e340:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e342:	7bbb      	ldrb	r3, [r7, #14]
 800e344:	2b05      	cmp	r3, #5
 800e346:	d102      	bne.n	800e34e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e348:	2303      	movs	r3, #3
 800e34a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e34c:	e0df      	b.n	800e50e <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800e34e:	7bbb      	ldrb	r3, [r7, #14]
 800e350:	2b04      	cmp	r3, #4
 800e352:	f040 80dc 	bne.w	800e50e <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	220b      	movs	r2, #11
 800e35a:	761a      	strb	r2, [r3, #24]
      break;
 800e35c:	e0d7      	b.n	800e50e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6899      	ldr	r1, [r3, #8]
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	899a      	ldrh	r2, [r3, #12]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	795b      	ldrb	r3, [r3, #5]
 800e36a:	2001      	movs	r0, #1
 800e36c:	9000      	str	r0, [sp, #0]
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 f8f8 	bl	800e564 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e37a:	b29a      	uxth	r2, r3
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2206      	movs	r2, #6
 800e384:	761a      	strb	r2, [r3, #24]
      break;
 800e386:	e0c9      	b.n	800e51c <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	795b      	ldrb	r3, [r3, #5]
 800e38c:	4619      	mov	r1, r3
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f000 fc28 	bl	800ebe4 <USBH_LL_GetURBState>
 800e394:	4603      	mov	r3, r0
 800e396:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e398:	7bbb      	ldrb	r3, [r7, #14]
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	d103      	bne.n	800e3a6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2207      	movs	r2, #7
 800e3a2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e3a4:	e0b5      	b.n	800e512 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 800e3a6:	7bbb      	ldrb	r3, [r7, #14]
 800e3a8:	2b05      	cmp	r3, #5
 800e3aa:	d105      	bne.n	800e3b8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	220c      	movs	r2, #12
 800e3b0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e3b2:	2303      	movs	r3, #3
 800e3b4:	73fb      	strb	r3, [r7, #15]
      break;
 800e3b6:	e0ac      	b.n	800e512 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e3b8:	7bbb      	ldrb	r3, [r7, #14]
 800e3ba:	2b02      	cmp	r3, #2
 800e3bc:	d103      	bne.n	800e3c6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2205      	movs	r2, #5
 800e3c2:	761a      	strb	r2, [r3, #24]
      break;
 800e3c4:	e0a5      	b.n	800e512 <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 800e3c6:	7bbb      	ldrb	r3, [r7, #14]
 800e3c8:	2b04      	cmp	r3, #4
 800e3ca:	f040 80a2 	bne.w	800e512 <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	220b      	movs	r2, #11
 800e3d2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e3d4:	2302      	movs	r3, #2
 800e3d6:	73fb      	strb	r3, [r7, #15]
      break;
 800e3d8:	e09b      	b.n	800e512 <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	791b      	ldrb	r3, [r3, #4]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	2100      	movs	r1, #0
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f000 f8e3 	bl	800e5ae <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e3ee:	b29a      	uxth	r2, r3
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2208      	movs	r2, #8
 800e3f8:	761a      	strb	r2, [r3, #24]

      break;
 800e3fa:	e08f      	b.n	800e51c <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	791b      	ldrb	r3, [r3, #4]
 800e400:	4619      	mov	r1, r3
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f000 fbee 	bl	800ebe4 <USBH_LL_GetURBState>
 800e408:	4603      	mov	r3, r0
 800e40a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e40c:	7bbb      	ldrb	r3, [r7, #14]
 800e40e:	2b01      	cmp	r3, #1
 800e410:	d105      	bne.n	800e41e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	220d      	movs	r2, #13
 800e416:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e418:	2300      	movs	r3, #0
 800e41a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e41c:	e07b      	b.n	800e516 <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 800e41e:	7bbb      	ldrb	r3, [r7, #14]
 800e420:	2b04      	cmp	r3, #4
 800e422:	d103      	bne.n	800e42c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	220b      	movs	r2, #11
 800e428:	761a      	strb	r2, [r3, #24]
      break;
 800e42a:	e074      	b.n	800e516 <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 800e42c:	7bbb      	ldrb	r3, [r7, #14]
 800e42e:	2b05      	cmp	r3, #5
 800e430:	d171      	bne.n	800e516 <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 800e432:	2303      	movs	r3, #3
 800e434:	73fb      	strb	r3, [r7, #15]
      break;
 800e436:	e06e      	b.n	800e516 <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	795b      	ldrb	r3, [r3, #5]
 800e43c:	2201      	movs	r2, #1
 800e43e:	9200      	str	r2, [sp, #0]
 800e440:	2200      	movs	r2, #0
 800e442:	2100      	movs	r1, #0
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f000 f88d 	bl	800e564 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e450:	b29a      	uxth	r2, r3
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	220a      	movs	r2, #10
 800e45a:	761a      	strb	r2, [r3, #24]
      break;
 800e45c:	e05e      	b.n	800e51c <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	795b      	ldrb	r3, [r3, #5]
 800e462:	4619      	mov	r1, r3
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f000 fbbd 	bl	800ebe4 <USBH_LL_GetURBState>
 800e46a:	4603      	mov	r3, r0
 800e46c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e46e:	7bbb      	ldrb	r3, [r7, #14]
 800e470:	2b01      	cmp	r3, #1
 800e472:	d105      	bne.n	800e480 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e474:	2300      	movs	r3, #0
 800e476:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	220d      	movs	r2, #13
 800e47c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e47e:	e04c      	b.n	800e51a <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e480:	7bbb      	ldrb	r3, [r7, #14]
 800e482:	2b02      	cmp	r3, #2
 800e484:	d103      	bne.n	800e48e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2209      	movs	r2, #9
 800e48a:	761a      	strb	r2, [r3, #24]
      break;
 800e48c:	e045      	b.n	800e51a <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800e48e:	7bbb      	ldrb	r3, [r7, #14]
 800e490:	2b04      	cmp	r3, #4
 800e492:	d142      	bne.n	800e51a <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	220b      	movs	r2, #11
 800e498:	761a      	strb	r2, [r3, #24]
      break;
 800e49a:	e03e      	b.n	800e51a <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	7e5b      	ldrb	r3, [r3, #25]
 800e4a0:	3301      	adds	r3, #1
 800e4a2:	b2da      	uxtb	r2, r3
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	765a      	strb	r2, [r3, #25]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	7e5b      	ldrb	r3, [r3, #25]
 800e4ac:	2b02      	cmp	r3, #2
 800e4ae:	d806      	bhi.n	800e4be <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2201      	movs	r2, #1
 800e4b4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e4bc:	e02e      	b.n	800e51c <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e4c4:	2106      	movs	r1, #6
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800e4d0:	4815      	ldr	r0, [pc, #84]	@ (800e528 <USBH_HandleControl+0x2fc>)
 800e4d2:	f000 fe3f 	bl	800f154 <iprintf>
 800e4d6:	4815      	ldr	r0, [pc, #84]	@ (800e52c <USBH_HandleControl+0x300>)
 800e4d8:	f000 fe3c 	bl	800f154 <iprintf>
 800e4dc:	200a      	movs	r0, #10
 800e4de:	f000 fe4b 	bl	800f178 <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	795b      	ldrb	r3, [r3, #5]
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f000 f8ed 	bl	800e6c8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	791b      	ldrb	r3, [r3, #4]
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f000 f8e7 	bl	800e6c8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e500:	2302      	movs	r3, #2
 800e502:	73fb      	strb	r3, [r7, #15]
      break;
 800e504:	e00a      	b.n	800e51c <USBH_HandleControl+0x2f0>

    default:
      break;
 800e506:	bf00      	nop
 800e508:	e008      	b.n	800e51c <USBH_HandleControl+0x2f0>
      break;
 800e50a:	bf00      	nop
 800e50c:	e006      	b.n	800e51c <USBH_HandleControl+0x2f0>
      break;
 800e50e:	bf00      	nop
 800e510:	e004      	b.n	800e51c <USBH_HandleControl+0x2f0>
      break;
 800e512:	bf00      	nop
 800e514:	e002      	b.n	800e51c <USBH_HandleControl+0x2f0>
      break;
 800e516:	bf00      	nop
 800e518:	e000      	b.n	800e51c <USBH_HandleControl+0x2f0>
      break;
 800e51a:	bf00      	nop
  }

  return status;
 800e51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e51e:	4618      	mov	r0, r3
 800e520:	3710      	adds	r7, #16
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
 800e526:	bf00      	nop
 800e528:	080108f0 	.word	0x080108f0
 800e52c:	080109cc 	.word	0x080109cc

0800e530 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b088      	sub	sp, #32
 800e534:	af04      	add	r7, sp, #16
 800e536:	60f8      	str	r0, [r7, #12]
 800e538:	60b9      	str	r1, [r7, #8]
 800e53a:	4613      	mov	r3, r2
 800e53c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e53e:	79f9      	ldrb	r1, [r7, #7]
 800e540:	2300      	movs	r3, #0
 800e542:	9303      	str	r3, [sp, #12]
 800e544:	2308      	movs	r3, #8
 800e546:	9302      	str	r3, [sp, #8]
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	9301      	str	r3, [sp, #4]
 800e54c:	2300      	movs	r3, #0
 800e54e:	9300      	str	r3, [sp, #0]
 800e550:	2300      	movs	r3, #0
 800e552:	2200      	movs	r2, #0
 800e554:	68f8      	ldr	r0, [r7, #12]
 800e556:	f000 fb14 	bl	800eb82 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e55a:	2300      	movs	r3, #0
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	3710      	adds	r7, #16
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}

0800e564 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b088      	sub	sp, #32
 800e568:	af04      	add	r7, sp, #16
 800e56a:	60f8      	str	r0, [r7, #12]
 800e56c:	60b9      	str	r1, [r7, #8]
 800e56e:	4611      	mov	r1, r2
 800e570:	461a      	mov	r2, r3
 800e572:	460b      	mov	r3, r1
 800e574:	80fb      	strh	r3, [r7, #6]
 800e576:	4613      	mov	r3, r2
 800e578:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e580:	2b00      	cmp	r3, #0
 800e582:	d001      	beq.n	800e588 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e584:	2300      	movs	r3, #0
 800e586:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e588:	7979      	ldrb	r1, [r7, #5]
 800e58a:	7e3b      	ldrb	r3, [r7, #24]
 800e58c:	9303      	str	r3, [sp, #12]
 800e58e:	88fb      	ldrh	r3, [r7, #6]
 800e590:	9302      	str	r3, [sp, #8]
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	9301      	str	r3, [sp, #4]
 800e596:	2301      	movs	r3, #1
 800e598:	9300      	str	r3, [sp, #0]
 800e59a:	2300      	movs	r3, #0
 800e59c:	2200      	movs	r2, #0
 800e59e:	68f8      	ldr	r0, [r7, #12]
 800e5a0:	f000 faef 	bl	800eb82 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e5a4:	2300      	movs	r3, #0
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3710      	adds	r7, #16
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}

0800e5ae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e5ae:	b580      	push	{r7, lr}
 800e5b0:	b088      	sub	sp, #32
 800e5b2:	af04      	add	r7, sp, #16
 800e5b4:	60f8      	str	r0, [r7, #12]
 800e5b6:	60b9      	str	r1, [r7, #8]
 800e5b8:	4611      	mov	r1, r2
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	460b      	mov	r3, r1
 800e5be:	80fb      	strh	r3, [r7, #6]
 800e5c0:	4613      	mov	r3, r2
 800e5c2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e5c4:	7979      	ldrb	r1, [r7, #5]
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	9303      	str	r3, [sp, #12]
 800e5ca:	88fb      	ldrh	r3, [r7, #6]
 800e5cc:	9302      	str	r3, [sp, #8]
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	9301      	str	r3, [sp, #4]
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	9300      	str	r3, [sp, #0]
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	2201      	movs	r2, #1
 800e5da:	68f8      	ldr	r0, [r7, #12]
 800e5dc:	f000 fad1 	bl	800eb82 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e5e0:	2300      	movs	r3, #0

}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3710      	adds	r7, #16
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}

0800e5ea <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800e5ea:	b580      	push	{r7, lr}
 800e5ec:	b088      	sub	sp, #32
 800e5ee:	af04      	add	r7, sp, #16
 800e5f0:	60f8      	str	r0, [r7, #12]
 800e5f2:	60b9      	str	r1, [r7, #8]
 800e5f4:	4611      	mov	r1, r2
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	460b      	mov	r3, r1
 800e5fa:	71fb      	strb	r3, [r7, #7]
 800e5fc:	4613      	mov	r3, r2
 800e5fe:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e600:	79fb      	ldrb	r3, [r7, #7]
 800e602:	b29b      	uxth	r3, r3
 800e604:	79b9      	ldrb	r1, [r7, #6]
 800e606:	2200      	movs	r2, #0
 800e608:	9203      	str	r2, [sp, #12]
 800e60a:	9302      	str	r3, [sp, #8]
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	9301      	str	r3, [sp, #4]
 800e610:	2301      	movs	r3, #1
 800e612:	9300      	str	r3, [sp, #0]
 800e614:	2303      	movs	r3, #3
 800e616:	2201      	movs	r2, #1
 800e618:	68f8      	ldr	r0, [r7, #12]
 800e61a:	f000 fab2 	bl	800eb82 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800e61e:	2300      	movs	r3, #0
}
 800e620:	4618      	mov	r0, r3
 800e622:	3710      	adds	r7, #16
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}

0800e628 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b086      	sub	sp, #24
 800e62c:	af04      	add	r7, sp, #16
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	4608      	mov	r0, r1
 800e632:	4611      	mov	r1, r2
 800e634:	461a      	mov	r2, r3
 800e636:	4603      	mov	r3, r0
 800e638:	70fb      	strb	r3, [r7, #3]
 800e63a:	460b      	mov	r3, r1
 800e63c:	70bb      	strb	r3, [r7, #2]
 800e63e:	4613      	mov	r3, r2
 800e640:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e642:	7878      	ldrb	r0, [r7, #1]
 800e644:	78ba      	ldrb	r2, [r7, #2]
 800e646:	78f9      	ldrb	r1, [r7, #3]
 800e648:	8b3b      	ldrh	r3, [r7, #24]
 800e64a:	9302      	str	r3, [sp, #8]
 800e64c:	7d3b      	ldrb	r3, [r7, #20]
 800e64e:	9301      	str	r3, [sp, #4]
 800e650:	7c3b      	ldrb	r3, [r7, #16]
 800e652:	9300      	str	r3, [sp, #0]
 800e654:	4603      	mov	r3, r0
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f000 fa45 	bl	800eae6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e65c:	2300      	movs	r3, #0
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3708      	adds	r7, #8
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}

0800e666 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e666:	b580      	push	{r7, lr}
 800e668:	b082      	sub	sp, #8
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	6078      	str	r0, [r7, #4]
 800e66e:	460b      	mov	r3, r1
 800e670:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e672:	78fb      	ldrb	r3, [r7, #3]
 800e674:	4619      	mov	r1, r3
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f000 fa64 	bl	800eb44 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e67c:	2300      	movs	r3, #0
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3708      	adds	r7, #8
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}

0800e686 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e686:	b580      	push	{r7, lr}
 800e688:	b084      	sub	sp, #16
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6078      	str	r0, [r7, #4]
 800e68e:	460b      	mov	r3, r1
 800e690:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f000 f836 	bl	800e704 <USBH_GetFreePipe>
 800e698:	4603      	mov	r3, r0
 800e69a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e69c:	89fb      	ldrh	r3, [r7, #14]
 800e69e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d00a      	beq.n	800e6bc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e6a6:	78fa      	ldrb	r2, [r7, #3]
 800e6a8:	89fb      	ldrh	r3, [r7, #14]
 800e6aa:	f003 030f 	and.w	r3, r3, #15
 800e6ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e6b2:	6879      	ldr	r1, [r7, #4]
 800e6b4:	33e0      	adds	r3, #224	@ 0xe0
 800e6b6:	009b      	lsls	r3, r3, #2
 800e6b8:	440b      	add	r3, r1
 800e6ba:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e6bc:	89fb      	ldrh	r3, [r7, #14]
 800e6be:	b2db      	uxtb	r3, r3
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3710      	adds	r7, #16
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b083      	sub	sp, #12
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e6d4:	78fb      	ldrb	r3, [r7, #3]
 800e6d6:	2b0f      	cmp	r3, #15
 800e6d8:	d80d      	bhi.n	800e6f6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e6da:	78fb      	ldrb	r3, [r7, #3]
 800e6dc:	687a      	ldr	r2, [r7, #4]
 800e6de:	33e0      	adds	r3, #224	@ 0xe0
 800e6e0:	009b      	lsls	r3, r3, #2
 800e6e2:	4413      	add	r3, r2
 800e6e4:	685a      	ldr	r2, [r3, #4]
 800e6e6:	78fb      	ldrb	r3, [r7, #3]
 800e6e8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e6ec:	6879      	ldr	r1, [r7, #4]
 800e6ee:	33e0      	adds	r3, #224	@ 0xe0
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	440b      	add	r3, r1
 800e6f4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e6f6:	2300      	movs	r3, #0
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	370c      	adds	r7, #12
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e702:	4770      	bx	lr

0800e704 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e704:	b480      	push	{r7}
 800e706:	b085      	sub	sp, #20
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e70c:	2300      	movs	r3, #0
 800e70e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e710:	2300      	movs	r3, #0
 800e712:	73fb      	strb	r3, [r7, #15]
 800e714:	e00f      	b.n	800e736 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e716:	7bfb      	ldrb	r3, [r7, #15]
 800e718:	687a      	ldr	r2, [r7, #4]
 800e71a:	33e0      	adds	r3, #224	@ 0xe0
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	4413      	add	r3, r2
 800e720:	685b      	ldr	r3, [r3, #4]
 800e722:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e726:	2b00      	cmp	r3, #0
 800e728:	d102      	bne.n	800e730 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e72a:	7bfb      	ldrb	r3, [r7, #15]
 800e72c:	b29b      	uxth	r3, r3
 800e72e:	e007      	b.n	800e740 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e730:	7bfb      	ldrb	r3, [r7, #15]
 800e732:	3301      	adds	r3, #1
 800e734:	73fb      	strb	r3, [r7, #15]
 800e736:	7bfb      	ldrb	r3, [r7, #15]
 800e738:	2b0f      	cmp	r3, #15
 800e73a:	d9ec      	bls.n	800e716 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e73c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800e740:	4618      	mov	r0, r3
 800e742:	3714      	adds	r7, #20
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr

0800e74c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e750:	2201      	movs	r2, #1
 800e752:	490e      	ldr	r1, [pc, #56]	@ (800e78c <MX_USB_HOST_Init+0x40>)
 800e754:	480e      	ldr	r0, [pc, #56]	@ (800e790 <MX_USB_HOST_Init+0x44>)
 800e756:	f7fe f93f 	bl	800c9d8 <USBH_Init>
 800e75a:	4603      	mov	r3, r0
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d001      	beq.n	800e764 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e760:	f7f5 fb56 	bl	8003e10 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800e764:	490b      	ldr	r1, [pc, #44]	@ (800e794 <MX_USB_HOST_Init+0x48>)
 800e766:	480a      	ldr	r0, [pc, #40]	@ (800e790 <MX_USB_HOST_Init+0x44>)
 800e768:	f7fe f9f2 	bl	800cb50 <USBH_RegisterClass>
 800e76c:	4603      	mov	r3, r0
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d001      	beq.n	800e776 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e772:	f7f5 fb4d 	bl	8003e10 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e776:	4806      	ldr	r0, [pc, #24]	@ (800e790 <MX_USB_HOST_Init+0x44>)
 800e778:	f7fe fad8 	bl	800cd2c <USBH_Start>
 800e77c:	4603      	mov	r3, r0
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d001      	beq.n	800e786 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e782:	f7f5 fb45 	bl	8003e10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e786:	bf00      	nop
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	bf00      	nop
 800e78c:	0800e7ad 	.word	0x0800e7ad
 800e790:	20011948 	.word	0x20011948
 800e794:	20000274 	.word	0x20000274

0800e798 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800e79c:	4802      	ldr	r0, [pc, #8]	@ (800e7a8 <MX_USB_HOST_Process+0x10>)
 800e79e:	f7fe fad5 	bl	800cd4c <USBH_Process>
}
 800e7a2:	bf00      	nop
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	20011948 	.word	0x20011948

0800e7ac <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b083      	sub	sp, #12
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
 800e7b4:	460b      	mov	r3, r1
 800e7b6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e7b8:	78fb      	ldrb	r3, [r7, #3]
 800e7ba:	3b01      	subs	r3, #1
 800e7bc:	2b04      	cmp	r3, #4
 800e7be:	d819      	bhi.n	800e7f4 <USBH_UserProcess+0x48>
 800e7c0:	a201      	add	r2, pc, #4	@ (adr r2, 800e7c8 <USBH_UserProcess+0x1c>)
 800e7c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7c6:	bf00      	nop
 800e7c8:	0800e7f5 	.word	0x0800e7f5
 800e7cc:	0800e7e5 	.word	0x0800e7e5
 800e7d0:	0800e7f5 	.word	0x0800e7f5
 800e7d4:	0800e7ed 	.word	0x0800e7ed
 800e7d8:	0800e7dd 	.word	0x0800e7dd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e7dc:	4b09      	ldr	r3, [pc, #36]	@ (800e804 <USBH_UserProcess+0x58>)
 800e7de:	2203      	movs	r2, #3
 800e7e0:	701a      	strb	r2, [r3, #0]
  break;
 800e7e2:	e008      	b.n	800e7f6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e7e4:	4b07      	ldr	r3, [pc, #28]	@ (800e804 <USBH_UserProcess+0x58>)
 800e7e6:	2202      	movs	r2, #2
 800e7e8:	701a      	strb	r2, [r3, #0]
  break;
 800e7ea:	e004      	b.n	800e7f6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e7ec:	4b05      	ldr	r3, [pc, #20]	@ (800e804 <USBH_UserProcess+0x58>)
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	701a      	strb	r2, [r3, #0]
  break;
 800e7f2:	e000      	b.n	800e7f6 <USBH_UserProcess+0x4a>

  default:
  break;
 800e7f4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e7f6:	bf00      	nop
 800e7f8:	370c      	adds	r7, #12
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e800:	4770      	bx	lr
 800e802:	bf00      	nop
 800e804:	20011d20 	.word	0x20011d20

0800e808 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b08a      	sub	sp, #40	@ 0x28
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e810:	f107 0314 	add.w	r3, r7, #20
 800e814:	2200      	movs	r2, #0
 800e816:	601a      	str	r2, [r3, #0]
 800e818:	605a      	str	r2, [r3, #4]
 800e81a:	609a      	str	r2, [r3, #8]
 800e81c:	60da      	str	r2, [r3, #12]
 800e81e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e828:	d13a      	bne.n	800e8a0 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e82a:	2300      	movs	r3, #0
 800e82c:	613b      	str	r3, [r7, #16]
 800e82e:	4b1e      	ldr	r3, [pc, #120]	@ (800e8a8 <HAL_HCD_MspInit+0xa0>)
 800e830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e832:	4a1d      	ldr	r2, [pc, #116]	@ (800e8a8 <HAL_HCD_MspInit+0xa0>)
 800e834:	f043 0301 	orr.w	r3, r3, #1
 800e838:	6313      	str	r3, [r2, #48]	@ 0x30
 800e83a:	4b1b      	ldr	r3, [pc, #108]	@ (800e8a8 <HAL_HCD_MspInit+0xa0>)
 800e83c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e83e:	f003 0301 	and.w	r3, r3, #1
 800e842:	613b      	str	r3, [r7, #16]
 800e844:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e846:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e84a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e84c:	2302      	movs	r3, #2
 800e84e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e850:	2300      	movs	r3, #0
 800e852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e854:	2303      	movs	r3, #3
 800e856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e858:	230a      	movs	r3, #10
 800e85a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e85c:	f107 0314 	add.w	r3, r7, #20
 800e860:	4619      	mov	r1, r3
 800e862:	4812      	ldr	r0, [pc, #72]	@ (800e8ac <HAL_HCD_MspInit+0xa4>)
 800e864:	f7f6 f9d8 	bl	8004c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e868:	4b0f      	ldr	r3, [pc, #60]	@ (800e8a8 <HAL_HCD_MspInit+0xa0>)
 800e86a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e86c:	4a0e      	ldr	r2, [pc, #56]	@ (800e8a8 <HAL_HCD_MspInit+0xa0>)
 800e86e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e872:	6353      	str	r3, [r2, #52]	@ 0x34
 800e874:	2300      	movs	r3, #0
 800e876:	60fb      	str	r3, [r7, #12]
 800e878:	4b0b      	ldr	r3, [pc, #44]	@ (800e8a8 <HAL_HCD_MspInit+0xa0>)
 800e87a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e87c:	4a0a      	ldr	r2, [pc, #40]	@ (800e8a8 <HAL_HCD_MspInit+0xa0>)
 800e87e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e882:	6453      	str	r3, [r2, #68]	@ 0x44
 800e884:	4b08      	ldr	r3, [pc, #32]	@ (800e8a8 <HAL_HCD_MspInit+0xa0>)
 800e886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e888:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e88c:	60fb      	str	r3, [r7, #12]
 800e88e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e890:	2200      	movs	r2, #0
 800e892:	2100      	movs	r1, #0
 800e894:	2043      	movs	r0, #67	@ 0x43
 800e896:	f7f5 fee2 	bl	800465e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e89a:	2043      	movs	r0, #67	@ 0x43
 800e89c:	f7f5 fefb 	bl	8004696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e8a0:	bf00      	nop
 800e8a2:	3728      	adds	r7, #40	@ 0x28
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	40023800 	.word	0x40023800
 800e8ac:	40020000 	.word	0x40020000

0800e8b0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b082      	sub	sp, #8
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7fe ff6d 	bl	800d79e <USBH_LL_IncTimer>
}
 800e8c4:	bf00      	nop
 800e8c6:	3708      	adds	r7, #8
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b082      	sub	sp, #8
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f7fe ffa5 	bl	800d82a <USBH_LL_Connect>
}
 800e8e0:	bf00      	nop
 800e8e2:	3708      	adds	r7, #8
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}

0800e8e8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f7fe ffae 	bl	800d858 <USBH_LL_Disconnect>
}
 800e8fc:	bf00      	nop
 800e8fe:	3708      	adds	r7, #8
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}

0800e904 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e904:	b480      	push	{r7}
 800e906:	b083      	sub	sp, #12
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
 800e90c:	460b      	mov	r3, r1
 800e90e:	70fb      	strb	r3, [r7, #3]
 800e910:	4613      	mov	r3, r2
 800e912:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e914:	bf00      	nop
 800e916:	370c      	adds	r7, #12
 800e918:	46bd      	mov	sp, r7
 800e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91e:	4770      	bx	lr

0800e920 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b082      	sub	sp, #8
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e92e:	4618      	mov	r0, r3
 800e930:	f7fe ff5f 	bl	800d7f2 <USBH_LL_PortEnabled>
}
 800e934:	bf00      	nop
 800e936:	3708      	adds	r7, #8
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}

0800e93c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b082      	sub	sp, #8
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e94a:	4618      	mov	r0, r3
 800e94c:	f7fe ff5f 	bl	800d80e <USBH_LL_PortDisabled>
}
 800e950:	bf00      	nop
 800e952:	3708      	adds	r7, #8
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}

0800e958 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800e966:	2b01      	cmp	r3, #1
 800e968:	d12a      	bne.n	800e9c0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e96a:	4a18      	ldr	r2, [pc, #96]	@ (800e9cc <USBH_LL_Init+0x74>)
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	4a15      	ldr	r2, [pc, #84]	@ (800e9cc <USBH_LL_Init+0x74>)
 800e976:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e97a:	4b14      	ldr	r3, [pc, #80]	@ (800e9cc <USBH_LL_Init+0x74>)
 800e97c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e980:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e982:	4b12      	ldr	r3, [pc, #72]	@ (800e9cc <USBH_LL_Init+0x74>)
 800e984:	2208      	movs	r2, #8
 800e986:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e988:	4b10      	ldr	r3, [pc, #64]	@ (800e9cc <USBH_LL_Init+0x74>)
 800e98a:	2201      	movs	r2, #1
 800e98c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e98e:	4b0f      	ldr	r3, [pc, #60]	@ (800e9cc <USBH_LL_Init+0x74>)
 800e990:	2200      	movs	r2, #0
 800e992:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e994:	4b0d      	ldr	r3, [pc, #52]	@ (800e9cc <USBH_LL_Init+0x74>)
 800e996:	2202      	movs	r2, #2
 800e998:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e99a:	4b0c      	ldr	r3, [pc, #48]	@ (800e9cc <USBH_LL_Init+0x74>)
 800e99c:	2200      	movs	r2, #0
 800e99e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e9a0:	480a      	ldr	r0, [pc, #40]	@ (800e9cc <USBH_LL_Init+0x74>)
 800e9a2:	f7f6 fb2f 	bl	8005004 <HAL_HCD_Init>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d001      	beq.n	800e9b0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e9ac:	f7f5 fa30 	bl	8003e10 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e9b0:	4806      	ldr	r0, [pc, #24]	@ (800e9cc <USBH_LL_Init+0x74>)
 800e9b2:	f7f6 ff8f 	bl	80058d4 <HAL_HCD_GetCurrentFrame>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f7fe fee0 	bl	800d780 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e9c0:	2300      	movs	r3, #0
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3708      	adds	r7, #8
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	20011d24 	.word	0x20011d24

0800e9d0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b084      	sub	sp, #16
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9d8:	2300      	movs	r3, #0
 800e9da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7f6 fefc 	bl	80057e4 <HAL_HCD_Start>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e9f0:	7bfb      	ldrb	r3, [r7, #15]
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f000 f95e 	bl	800ecb4 <USBH_Get_USB_Status>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3710      	adds	r7, #16
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}

0800ea06 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ea06:	b580      	push	{r7, lr}
 800ea08:	b084      	sub	sp, #16
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ea12:	2300      	movs	r3, #0
 800ea14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f7f6 ff04 	bl	800582a <HAL_HCD_Stop>
 800ea22:	4603      	mov	r3, r0
 800ea24:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ea26:	7bfb      	ldrb	r3, [r7, #15]
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f000 f943 	bl	800ecb4 <USBH_Get_USB_Status>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea32:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3710      	adds	r7, #16
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b084      	sub	sp, #16
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ea44:	2301      	movs	r3, #1
 800ea46:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f7f6 ff4e 	bl	80058f0 <HAL_HCD_GetCurrentSpeed>
 800ea54:	4603      	mov	r3, r0
 800ea56:	2b02      	cmp	r3, #2
 800ea58:	d00c      	beq.n	800ea74 <USBH_LL_GetSpeed+0x38>
 800ea5a:	2b02      	cmp	r3, #2
 800ea5c:	d80d      	bhi.n	800ea7a <USBH_LL_GetSpeed+0x3e>
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d002      	beq.n	800ea68 <USBH_LL_GetSpeed+0x2c>
 800ea62:	2b01      	cmp	r3, #1
 800ea64:	d003      	beq.n	800ea6e <USBH_LL_GetSpeed+0x32>
 800ea66:	e008      	b.n	800ea7a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ea6c:	e008      	b.n	800ea80 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ea6e:	2301      	movs	r3, #1
 800ea70:	73fb      	strb	r3, [r7, #15]
    break;
 800ea72:	e005      	b.n	800ea80 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ea74:	2302      	movs	r3, #2
 800ea76:	73fb      	strb	r3, [r7, #15]
    break;
 800ea78:	e002      	b.n	800ea80 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	73fb      	strb	r3, [r7, #15]
    break;
 800ea7e:	bf00      	nop
  }
  return  speed;
 800ea80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3710      	adds	r7, #16
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}

0800ea8a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ea8a:	b580      	push	{r7, lr}
 800ea8c:	b084      	sub	sp, #16
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea92:	2300      	movs	r3, #0
 800ea94:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ea96:	2300      	movs	r3, #0
 800ea98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f7f6 fedf 	bl	8005864 <HAL_HCD_ResetPort>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eaaa:	7bfb      	ldrb	r3, [r7, #15]
 800eaac:	4618      	mov	r0, r3
 800eaae:	f000 f901 	bl	800ecb4 <USBH_Get_USB_Status>
 800eab2:	4603      	mov	r3, r0
 800eab4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eab6:	7bbb      	ldrb	r3, [r7, #14]
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3710      	adds	r7, #16
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
 800eac8:	460b      	mov	r3, r1
 800eaca:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ead2:	78fa      	ldrb	r2, [r7, #3]
 800ead4:	4611      	mov	r1, r2
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7f6 fee7 	bl	80058aa <HAL_HCD_HC_GetXferCount>
 800eadc:	4603      	mov	r3, r0
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3708      	adds	r7, #8
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}

0800eae6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800eae6:	b590      	push	{r4, r7, lr}
 800eae8:	b089      	sub	sp, #36	@ 0x24
 800eaea:	af04      	add	r7, sp, #16
 800eaec:	6078      	str	r0, [r7, #4]
 800eaee:	4608      	mov	r0, r1
 800eaf0:	4611      	mov	r1, r2
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	70fb      	strb	r3, [r7, #3]
 800eaf8:	460b      	mov	r3, r1
 800eafa:	70bb      	strb	r3, [r7, #2]
 800eafc:	4613      	mov	r3, r2
 800eafe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb00:	2300      	movs	r3, #0
 800eb02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eb04:	2300      	movs	r3, #0
 800eb06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800eb0e:	787c      	ldrb	r4, [r7, #1]
 800eb10:	78ba      	ldrb	r2, [r7, #2]
 800eb12:	78f9      	ldrb	r1, [r7, #3]
 800eb14:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800eb16:	9302      	str	r3, [sp, #8]
 800eb18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800eb1c:	9301      	str	r3, [sp, #4]
 800eb1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eb22:	9300      	str	r3, [sp, #0]
 800eb24:	4623      	mov	r3, r4
 800eb26:	f7f6 fad4 	bl	80050d2 <HAL_HCD_HC_Init>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800eb2e:	7bfb      	ldrb	r3, [r7, #15]
 800eb30:	4618      	mov	r0, r3
 800eb32:	f000 f8bf 	bl	800ecb4 <USBH_Get_USB_Status>
 800eb36:	4603      	mov	r3, r0
 800eb38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3714      	adds	r7, #20
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd90      	pop	{r4, r7, pc}

0800eb44 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b084      	sub	sp, #16
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
 800eb4c:	460b      	mov	r3, r1
 800eb4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb50:	2300      	movs	r3, #0
 800eb52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eb54:	2300      	movs	r3, #0
 800eb56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800eb5e:	78fa      	ldrb	r2, [r7, #3]
 800eb60:	4611      	mov	r1, r2
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7f6 fb6d 	bl	8005242 <HAL_HCD_HC_Halt>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eb6c:	7bfb      	ldrb	r3, [r7, #15]
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f000 f8a0 	bl	800ecb4 <USBH_Get_USB_Status>
 800eb74:	4603      	mov	r3, r0
 800eb76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb78:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3710      	adds	r7, #16
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}

0800eb82 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800eb82:	b590      	push	{r4, r7, lr}
 800eb84:	b089      	sub	sp, #36	@ 0x24
 800eb86:	af04      	add	r7, sp, #16
 800eb88:	6078      	str	r0, [r7, #4]
 800eb8a:	4608      	mov	r0, r1
 800eb8c:	4611      	mov	r1, r2
 800eb8e:	461a      	mov	r2, r3
 800eb90:	4603      	mov	r3, r0
 800eb92:	70fb      	strb	r3, [r7, #3]
 800eb94:	460b      	mov	r3, r1
 800eb96:	70bb      	strb	r3, [r7, #2]
 800eb98:	4613      	mov	r3, r2
 800eb9a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eba0:	2300      	movs	r3, #0
 800eba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ebaa:	787c      	ldrb	r4, [r7, #1]
 800ebac:	78ba      	ldrb	r2, [r7, #2]
 800ebae:	78f9      	ldrb	r1, [r7, #3]
 800ebb0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ebb4:	9303      	str	r3, [sp, #12]
 800ebb6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ebb8:	9302      	str	r3, [sp, #8]
 800ebba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebbc:	9301      	str	r3, [sp, #4]
 800ebbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ebc2:	9300      	str	r3, [sp, #0]
 800ebc4:	4623      	mov	r3, r4
 800ebc6:	f7f6 fb5f 	bl	8005288 <HAL_HCD_HC_SubmitRequest>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ebce:	7bfb      	ldrb	r3, [r7, #15]
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f000 f86f 	bl	800ecb4 <USBH_Get_USB_Status>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebda:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3714      	adds	r7, #20
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd90      	pop	{r4, r7, pc}

0800ebe4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
 800ebec:	460b      	mov	r3, r1
 800ebee:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ebf6:	78fa      	ldrb	r2, [r7, #3]
 800ebf8:	4611      	mov	r1, r2
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7f6 fe40 	bl	8005880 <HAL_HCD_HC_GetURBState>
 800ec00:	4603      	mov	r3, r0
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3708      	adds	r7, #8
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}

0800ec0a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ec0a:	b580      	push	{r7, lr}
 800ec0c:	b082      	sub	sp, #8
 800ec0e:	af00      	add	r7, sp, #0
 800ec10:	6078      	str	r0, [r7, #4]
 800ec12:	460b      	mov	r3, r1
 800ec14:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ec1c:	2b01      	cmp	r3, #1
 800ec1e:	d103      	bne.n	800ec28 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ec20:	78fb      	ldrb	r3, [r7, #3]
 800ec22:	4618      	mov	r0, r3
 800ec24:	f000 f872 	bl	800ed0c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ec28:	20c8      	movs	r0, #200	@ 0xc8
 800ec2a:	f7f5 fc19 	bl	8004460 <HAL_Delay>
  return USBH_OK;
 800ec2e:	2300      	movs	r3, #0
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3708      	adds	r7, #8
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b085      	sub	sp, #20
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
 800ec40:	460b      	mov	r3, r1
 800ec42:	70fb      	strb	r3, [r7, #3]
 800ec44:	4613      	mov	r3, r2
 800ec46:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ec4e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ec50:	78fa      	ldrb	r2, [r7, #3]
 800ec52:	68f9      	ldr	r1, [r7, #12]
 800ec54:	4613      	mov	r3, r2
 800ec56:	011b      	lsls	r3, r3, #4
 800ec58:	1a9b      	subs	r3, r3, r2
 800ec5a:	009b      	lsls	r3, r3, #2
 800ec5c:	440b      	add	r3, r1
 800ec5e:	3317      	adds	r3, #23
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d00a      	beq.n	800ec7c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ec66:	78fa      	ldrb	r2, [r7, #3]
 800ec68:	68f9      	ldr	r1, [r7, #12]
 800ec6a:	4613      	mov	r3, r2
 800ec6c:	011b      	lsls	r3, r3, #4
 800ec6e:	1a9b      	subs	r3, r3, r2
 800ec70:	009b      	lsls	r3, r3, #2
 800ec72:	440b      	add	r3, r1
 800ec74:	333c      	adds	r3, #60	@ 0x3c
 800ec76:	78ba      	ldrb	r2, [r7, #2]
 800ec78:	701a      	strb	r2, [r3, #0]
 800ec7a:	e009      	b.n	800ec90 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ec7c:	78fa      	ldrb	r2, [r7, #3]
 800ec7e:	68f9      	ldr	r1, [r7, #12]
 800ec80:	4613      	mov	r3, r2
 800ec82:	011b      	lsls	r3, r3, #4
 800ec84:	1a9b      	subs	r3, r3, r2
 800ec86:	009b      	lsls	r3, r3, #2
 800ec88:	440b      	add	r3, r1
 800ec8a:	333d      	adds	r3, #61	@ 0x3d
 800ec8c:	78ba      	ldrb	r2, [r7, #2]
 800ec8e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ec90:	2300      	movs	r3, #0
}
 800ec92:	4618      	mov	r0, r3
 800ec94:	3714      	adds	r7, #20
 800ec96:	46bd      	mov	sp, r7
 800ec98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9c:	4770      	bx	lr

0800ec9e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ec9e:	b580      	push	{r7, lr}
 800eca0:	b082      	sub	sp, #8
 800eca2:	af00      	add	r7, sp, #0
 800eca4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f7f5 fbda 	bl	8004460 <HAL_Delay>
}
 800ecac:	bf00      	nop
 800ecae:	3708      	adds	r7, #8
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b085      	sub	sp, #20
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	4603      	mov	r3, r0
 800ecbc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ecc2:	79fb      	ldrb	r3, [r7, #7]
 800ecc4:	2b03      	cmp	r3, #3
 800ecc6:	d817      	bhi.n	800ecf8 <USBH_Get_USB_Status+0x44>
 800ecc8:	a201      	add	r2, pc, #4	@ (adr r2, 800ecd0 <USBH_Get_USB_Status+0x1c>)
 800ecca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecce:	bf00      	nop
 800ecd0:	0800ece1 	.word	0x0800ece1
 800ecd4:	0800ece7 	.word	0x0800ece7
 800ecd8:	0800eced 	.word	0x0800eced
 800ecdc:	0800ecf3 	.word	0x0800ecf3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ece0:	2300      	movs	r3, #0
 800ece2:	73fb      	strb	r3, [r7, #15]
    break;
 800ece4:	e00b      	b.n	800ecfe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ece6:	2302      	movs	r3, #2
 800ece8:	73fb      	strb	r3, [r7, #15]
    break;
 800ecea:	e008      	b.n	800ecfe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ecec:	2301      	movs	r3, #1
 800ecee:	73fb      	strb	r3, [r7, #15]
    break;
 800ecf0:	e005      	b.n	800ecfe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ecf2:	2302      	movs	r3, #2
 800ecf4:	73fb      	strb	r3, [r7, #15]
    break;
 800ecf6:	e002      	b.n	800ecfe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ecf8:	2302      	movs	r3, #2
 800ecfa:	73fb      	strb	r3, [r7, #15]
    break;
 800ecfc:	bf00      	nop
  }
  return usb_status;
 800ecfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3714      	adds	r7, #20
 800ed04:	46bd      	mov	sp, r7
 800ed06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0a:	4770      	bx	lr

0800ed0c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b084      	sub	sp, #16
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	4603      	mov	r3, r0
 800ed14:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ed16:	79fb      	ldrb	r3, [r7, #7]
 800ed18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ed1a:	79fb      	ldrb	r3, [r7, #7]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d102      	bne.n	800ed26 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ed20:	2300      	movs	r3, #0
 800ed22:	73fb      	strb	r3, [r7, #15]
 800ed24:	e001      	b.n	800ed2a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ed26:	2301      	movs	r3, #1
 800ed28:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,(GPIO_PinState)data);
 800ed2a:	7bfb      	ldrb	r3, [r7, #15]
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ed32:	4803      	ldr	r0, [pc, #12]	@ (800ed40 <MX_DriverVbusFS+0x34>)
 800ed34:	f7f6 f934 	bl	8004fa0 <HAL_GPIO_WritePin>
}
 800ed38:	bf00      	nop
 800ed3a:	3710      	adds	r7, #16
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}
 800ed40:	40020000 	.word	0x40020000

0800ed44 <atoi>:
 800ed44:	220a      	movs	r2, #10
 800ed46:	2100      	movs	r1, #0
 800ed48:	f000 b938 	b.w	800efbc <strtol>

0800ed4c <malloc>:
 800ed4c:	4b02      	ldr	r3, [pc, #8]	@ (800ed58 <malloc+0xc>)
 800ed4e:	4601      	mov	r1, r0
 800ed50:	6818      	ldr	r0, [r3, #0]
 800ed52:	f000 b82d 	b.w	800edb0 <_malloc_r>
 800ed56:	bf00      	nop
 800ed58:	200002a0 	.word	0x200002a0

0800ed5c <free>:
 800ed5c:	4b02      	ldr	r3, [pc, #8]	@ (800ed68 <free+0xc>)
 800ed5e:	4601      	mov	r1, r0
 800ed60:	6818      	ldr	r0, [r3, #0]
 800ed62:	f000 bb29 	b.w	800f3b8 <_free_r>
 800ed66:	bf00      	nop
 800ed68:	200002a0 	.word	0x200002a0

0800ed6c <sbrk_aligned>:
 800ed6c:	b570      	push	{r4, r5, r6, lr}
 800ed6e:	4e0f      	ldr	r6, [pc, #60]	@ (800edac <sbrk_aligned+0x40>)
 800ed70:	460c      	mov	r4, r1
 800ed72:	6831      	ldr	r1, [r6, #0]
 800ed74:	4605      	mov	r5, r0
 800ed76:	b911      	cbnz	r1, 800ed7e <sbrk_aligned+0x12>
 800ed78:	f000 fac6 	bl	800f308 <_sbrk_r>
 800ed7c:	6030      	str	r0, [r6, #0]
 800ed7e:	4621      	mov	r1, r4
 800ed80:	4628      	mov	r0, r5
 800ed82:	f000 fac1 	bl	800f308 <_sbrk_r>
 800ed86:	1c43      	adds	r3, r0, #1
 800ed88:	d103      	bne.n	800ed92 <sbrk_aligned+0x26>
 800ed8a:	f04f 34ff 	mov.w	r4, #4294967295
 800ed8e:	4620      	mov	r0, r4
 800ed90:	bd70      	pop	{r4, r5, r6, pc}
 800ed92:	1cc4      	adds	r4, r0, #3
 800ed94:	f024 0403 	bic.w	r4, r4, #3
 800ed98:	42a0      	cmp	r0, r4
 800ed9a:	d0f8      	beq.n	800ed8e <sbrk_aligned+0x22>
 800ed9c:	1a21      	subs	r1, r4, r0
 800ed9e:	4628      	mov	r0, r5
 800eda0:	f000 fab2 	bl	800f308 <_sbrk_r>
 800eda4:	3001      	adds	r0, #1
 800eda6:	d1f2      	bne.n	800ed8e <sbrk_aligned+0x22>
 800eda8:	e7ef      	b.n	800ed8a <sbrk_aligned+0x1e>
 800edaa:	bf00      	nop
 800edac:	20012104 	.word	0x20012104

0800edb0 <_malloc_r>:
 800edb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edb4:	1ccd      	adds	r5, r1, #3
 800edb6:	f025 0503 	bic.w	r5, r5, #3
 800edba:	3508      	adds	r5, #8
 800edbc:	2d0c      	cmp	r5, #12
 800edbe:	bf38      	it	cc
 800edc0:	250c      	movcc	r5, #12
 800edc2:	2d00      	cmp	r5, #0
 800edc4:	4606      	mov	r6, r0
 800edc6:	db01      	blt.n	800edcc <_malloc_r+0x1c>
 800edc8:	42a9      	cmp	r1, r5
 800edca:	d904      	bls.n	800edd6 <_malloc_r+0x26>
 800edcc:	230c      	movs	r3, #12
 800edce:	6033      	str	r3, [r6, #0]
 800edd0:	2000      	movs	r0, #0
 800edd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eeac <_malloc_r+0xfc>
 800edda:	f000 f869 	bl	800eeb0 <__malloc_lock>
 800edde:	f8d8 3000 	ldr.w	r3, [r8]
 800ede2:	461c      	mov	r4, r3
 800ede4:	bb44      	cbnz	r4, 800ee38 <_malloc_r+0x88>
 800ede6:	4629      	mov	r1, r5
 800ede8:	4630      	mov	r0, r6
 800edea:	f7ff ffbf 	bl	800ed6c <sbrk_aligned>
 800edee:	1c43      	adds	r3, r0, #1
 800edf0:	4604      	mov	r4, r0
 800edf2:	d158      	bne.n	800eea6 <_malloc_r+0xf6>
 800edf4:	f8d8 4000 	ldr.w	r4, [r8]
 800edf8:	4627      	mov	r7, r4
 800edfa:	2f00      	cmp	r7, #0
 800edfc:	d143      	bne.n	800ee86 <_malloc_r+0xd6>
 800edfe:	2c00      	cmp	r4, #0
 800ee00:	d04b      	beq.n	800ee9a <_malloc_r+0xea>
 800ee02:	6823      	ldr	r3, [r4, #0]
 800ee04:	4639      	mov	r1, r7
 800ee06:	4630      	mov	r0, r6
 800ee08:	eb04 0903 	add.w	r9, r4, r3
 800ee0c:	f000 fa7c 	bl	800f308 <_sbrk_r>
 800ee10:	4581      	cmp	r9, r0
 800ee12:	d142      	bne.n	800ee9a <_malloc_r+0xea>
 800ee14:	6821      	ldr	r1, [r4, #0]
 800ee16:	1a6d      	subs	r5, r5, r1
 800ee18:	4629      	mov	r1, r5
 800ee1a:	4630      	mov	r0, r6
 800ee1c:	f7ff ffa6 	bl	800ed6c <sbrk_aligned>
 800ee20:	3001      	adds	r0, #1
 800ee22:	d03a      	beq.n	800ee9a <_malloc_r+0xea>
 800ee24:	6823      	ldr	r3, [r4, #0]
 800ee26:	442b      	add	r3, r5
 800ee28:	6023      	str	r3, [r4, #0]
 800ee2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ee2e:	685a      	ldr	r2, [r3, #4]
 800ee30:	bb62      	cbnz	r2, 800ee8c <_malloc_r+0xdc>
 800ee32:	f8c8 7000 	str.w	r7, [r8]
 800ee36:	e00f      	b.n	800ee58 <_malloc_r+0xa8>
 800ee38:	6822      	ldr	r2, [r4, #0]
 800ee3a:	1b52      	subs	r2, r2, r5
 800ee3c:	d420      	bmi.n	800ee80 <_malloc_r+0xd0>
 800ee3e:	2a0b      	cmp	r2, #11
 800ee40:	d917      	bls.n	800ee72 <_malloc_r+0xc2>
 800ee42:	1961      	adds	r1, r4, r5
 800ee44:	42a3      	cmp	r3, r4
 800ee46:	6025      	str	r5, [r4, #0]
 800ee48:	bf18      	it	ne
 800ee4a:	6059      	strne	r1, [r3, #4]
 800ee4c:	6863      	ldr	r3, [r4, #4]
 800ee4e:	bf08      	it	eq
 800ee50:	f8c8 1000 	streq.w	r1, [r8]
 800ee54:	5162      	str	r2, [r4, r5]
 800ee56:	604b      	str	r3, [r1, #4]
 800ee58:	4630      	mov	r0, r6
 800ee5a:	f000 f82f 	bl	800eebc <__malloc_unlock>
 800ee5e:	f104 000b 	add.w	r0, r4, #11
 800ee62:	1d23      	adds	r3, r4, #4
 800ee64:	f020 0007 	bic.w	r0, r0, #7
 800ee68:	1ac2      	subs	r2, r0, r3
 800ee6a:	bf1c      	itt	ne
 800ee6c:	1a1b      	subne	r3, r3, r0
 800ee6e:	50a3      	strne	r3, [r4, r2]
 800ee70:	e7af      	b.n	800edd2 <_malloc_r+0x22>
 800ee72:	6862      	ldr	r2, [r4, #4]
 800ee74:	42a3      	cmp	r3, r4
 800ee76:	bf0c      	ite	eq
 800ee78:	f8c8 2000 	streq.w	r2, [r8]
 800ee7c:	605a      	strne	r2, [r3, #4]
 800ee7e:	e7eb      	b.n	800ee58 <_malloc_r+0xa8>
 800ee80:	4623      	mov	r3, r4
 800ee82:	6864      	ldr	r4, [r4, #4]
 800ee84:	e7ae      	b.n	800ede4 <_malloc_r+0x34>
 800ee86:	463c      	mov	r4, r7
 800ee88:	687f      	ldr	r7, [r7, #4]
 800ee8a:	e7b6      	b.n	800edfa <_malloc_r+0x4a>
 800ee8c:	461a      	mov	r2, r3
 800ee8e:	685b      	ldr	r3, [r3, #4]
 800ee90:	42a3      	cmp	r3, r4
 800ee92:	d1fb      	bne.n	800ee8c <_malloc_r+0xdc>
 800ee94:	2300      	movs	r3, #0
 800ee96:	6053      	str	r3, [r2, #4]
 800ee98:	e7de      	b.n	800ee58 <_malloc_r+0xa8>
 800ee9a:	230c      	movs	r3, #12
 800ee9c:	6033      	str	r3, [r6, #0]
 800ee9e:	4630      	mov	r0, r6
 800eea0:	f000 f80c 	bl	800eebc <__malloc_unlock>
 800eea4:	e794      	b.n	800edd0 <_malloc_r+0x20>
 800eea6:	6005      	str	r5, [r0, #0]
 800eea8:	e7d6      	b.n	800ee58 <_malloc_r+0xa8>
 800eeaa:	bf00      	nop
 800eeac:	20012108 	.word	0x20012108

0800eeb0 <__malloc_lock>:
 800eeb0:	4801      	ldr	r0, [pc, #4]	@ (800eeb8 <__malloc_lock+0x8>)
 800eeb2:	f000 ba76 	b.w	800f3a2 <__retarget_lock_acquire_recursive>
 800eeb6:	bf00      	nop
 800eeb8:	2001224c 	.word	0x2001224c

0800eebc <__malloc_unlock>:
 800eebc:	4801      	ldr	r0, [pc, #4]	@ (800eec4 <__malloc_unlock+0x8>)
 800eebe:	f000 ba71 	b.w	800f3a4 <__retarget_lock_release_recursive>
 800eec2:	bf00      	nop
 800eec4:	2001224c 	.word	0x2001224c

0800eec8 <_strtol_l.constprop.0>:
 800eec8:	2b24      	cmp	r3, #36	@ 0x24
 800eeca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eece:	4686      	mov	lr, r0
 800eed0:	4690      	mov	r8, r2
 800eed2:	d801      	bhi.n	800eed8 <_strtol_l.constprop.0+0x10>
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d106      	bne.n	800eee6 <_strtol_l.constprop.0+0x1e>
 800eed8:	f000 fa38 	bl	800f34c <__errno>
 800eedc:	2316      	movs	r3, #22
 800eede:	6003      	str	r3, [r0, #0]
 800eee0:	2000      	movs	r0, #0
 800eee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eee6:	4834      	ldr	r0, [pc, #208]	@ (800efb8 <_strtol_l.constprop.0+0xf0>)
 800eee8:	460d      	mov	r5, r1
 800eeea:	462a      	mov	r2, r5
 800eeec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eef0:	5d06      	ldrb	r6, [r0, r4]
 800eef2:	f016 0608 	ands.w	r6, r6, #8
 800eef6:	d1f8      	bne.n	800eeea <_strtol_l.constprop.0+0x22>
 800eef8:	2c2d      	cmp	r4, #45	@ 0x2d
 800eefa:	d12d      	bne.n	800ef58 <_strtol_l.constprop.0+0x90>
 800eefc:	782c      	ldrb	r4, [r5, #0]
 800eefe:	2601      	movs	r6, #1
 800ef00:	1c95      	adds	r5, r2, #2
 800ef02:	f033 0210 	bics.w	r2, r3, #16
 800ef06:	d109      	bne.n	800ef1c <_strtol_l.constprop.0+0x54>
 800ef08:	2c30      	cmp	r4, #48	@ 0x30
 800ef0a:	d12a      	bne.n	800ef62 <_strtol_l.constprop.0+0x9a>
 800ef0c:	782a      	ldrb	r2, [r5, #0]
 800ef0e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ef12:	2a58      	cmp	r2, #88	@ 0x58
 800ef14:	d125      	bne.n	800ef62 <_strtol_l.constprop.0+0x9a>
 800ef16:	786c      	ldrb	r4, [r5, #1]
 800ef18:	2310      	movs	r3, #16
 800ef1a:	3502      	adds	r5, #2
 800ef1c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ef20:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ef24:	2200      	movs	r2, #0
 800ef26:	fbbc f9f3 	udiv	r9, ip, r3
 800ef2a:	4610      	mov	r0, r2
 800ef2c:	fb03 ca19 	mls	sl, r3, r9, ip
 800ef30:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ef34:	2f09      	cmp	r7, #9
 800ef36:	d81b      	bhi.n	800ef70 <_strtol_l.constprop.0+0xa8>
 800ef38:	463c      	mov	r4, r7
 800ef3a:	42a3      	cmp	r3, r4
 800ef3c:	dd27      	ble.n	800ef8e <_strtol_l.constprop.0+0xc6>
 800ef3e:	1c57      	adds	r7, r2, #1
 800ef40:	d007      	beq.n	800ef52 <_strtol_l.constprop.0+0x8a>
 800ef42:	4581      	cmp	r9, r0
 800ef44:	d320      	bcc.n	800ef88 <_strtol_l.constprop.0+0xc0>
 800ef46:	d101      	bne.n	800ef4c <_strtol_l.constprop.0+0x84>
 800ef48:	45a2      	cmp	sl, r4
 800ef4a:	db1d      	blt.n	800ef88 <_strtol_l.constprop.0+0xc0>
 800ef4c:	fb00 4003 	mla	r0, r0, r3, r4
 800ef50:	2201      	movs	r2, #1
 800ef52:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef56:	e7eb      	b.n	800ef30 <_strtol_l.constprop.0+0x68>
 800ef58:	2c2b      	cmp	r4, #43	@ 0x2b
 800ef5a:	bf04      	itt	eq
 800ef5c:	782c      	ldrbeq	r4, [r5, #0]
 800ef5e:	1c95      	addeq	r5, r2, #2
 800ef60:	e7cf      	b.n	800ef02 <_strtol_l.constprop.0+0x3a>
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d1da      	bne.n	800ef1c <_strtol_l.constprop.0+0x54>
 800ef66:	2c30      	cmp	r4, #48	@ 0x30
 800ef68:	bf0c      	ite	eq
 800ef6a:	2308      	moveq	r3, #8
 800ef6c:	230a      	movne	r3, #10
 800ef6e:	e7d5      	b.n	800ef1c <_strtol_l.constprop.0+0x54>
 800ef70:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ef74:	2f19      	cmp	r7, #25
 800ef76:	d801      	bhi.n	800ef7c <_strtol_l.constprop.0+0xb4>
 800ef78:	3c37      	subs	r4, #55	@ 0x37
 800ef7a:	e7de      	b.n	800ef3a <_strtol_l.constprop.0+0x72>
 800ef7c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ef80:	2f19      	cmp	r7, #25
 800ef82:	d804      	bhi.n	800ef8e <_strtol_l.constprop.0+0xc6>
 800ef84:	3c57      	subs	r4, #87	@ 0x57
 800ef86:	e7d8      	b.n	800ef3a <_strtol_l.constprop.0+0x72>
 800ef88:	f04f 32ff 	mov.w	r2, #4294967295
 800ef8c:	e7e1      	b.n	800ef52 <_strtol_l.constprop.0+0x8a>
 800ef8e:	1c53      	adds	r3, r2, #1
 800ef90:	d108      	bne.n	800efa4 <_strtol_l.constprop.0+0xdc>
 800ef92:	2322      	movs	r3, #34	@ 0x22
 800ef94:	f8ce 3000 	str.w	r3, [lr]
 800ef98:	4660      	mov	r0, ip
 800ef9a:	f1b8 0f00 	cmp.w	r8, #0
 800ef9e:	d0a0      	beq.n	800eee2 <_strtol_l.constprop.0+0x1a>
 800efa0:	1e69      	subs	r1, r5, #1
 800efa2:	e006      	b.n	800efb2 <_strtol_l.constprop.0+0xea>
 800efa4:	b106      	cbz	r6, 800efa8 <_strtol_l.constprop.0+0xe0>
 800efa6:	4240      	negs	r0, r0
 800efa8:	f1b8 0f00 	cmp.w	r8, #0
 800efac:	d099      	beq.n	800eee2 <_strtol_l.constprop.0+0x1a>
 800efae:	2a00      	cmp	r2, #0
 800efb0:	d1f6      	bne.n	800efa0 <_strtol_l.constprop.0+0xd8>
 800efb2:	f8c8 1000 	str.w	r1, [r8]
 800efb6:	e794      	b.n	800eee2 <_strtol_l.constprop.0+0x1a>
 800efb8:	08012c55 	.word	0x08012c55

0800efbc <strtol>:
 800efbc:	4613      	mov	r3, r2
 800efbe:	460a      	mov	r2, r1
 800efc0:	4601      	mov	r1, r0
 800efc2:	4802      	ldr	r0, [pc, #8]	@ (800efcc <strtol+0x10>)
 800efc4:	6800      	ldr	r0, [r0, #0]
 800efc6:	f7ff bf7f 	b.w	800eec8 <_strtol_l.constprop.0>
 800efca:	bf00      	nop
 800efcc:	200002a0 	.word	0x200002a0

0800efd0 <std>:
 800efd0:	2300      	movs	r3, #0
 800efd2:	b510      	push	{r4, lr}
 800efd4:	4604      	mov	r4, r0
 800efd6:	e9c0 3300 	strd	r3, r3, [r0]
 800efda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800efde:	6083      	str	r3, [r0, #8]
 800efe0:	8181      	strh	r1, [r0, #12]
 800efe2:	6643      	str	r3, [r0, #100]	@ 0x64
 800efe4:	81c2      	strh	r2, [r0, #14]
 800efe6:	6183      	str	r3, [r0, #24]
 800efe8:	4619      	mov	r1, r3
 800efea:	2208      	movs	r2, #8
 800efec:	305c      	adds	r0, #92	@ 0x5c
 800efee:	f000 f94f 	bl	800f290 <memset>
 800eff2:	4b0d      	ldr	r3, [pc, #52]	@ (800f028 <std+0x58>)
 800eff4:	6263      	str	r3, [r4, #36]	@ 0x24
 800eff6:	4b0d      	ldr	r3, [pc, #52]	@ (800f02c <std+0x5c>)
 800eff8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800effa:	4b0d      	ldr	r3, [pc, #52]	@ (800f030 <std+0x60>)
 800effc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800effe:	4b0d      	ldr	r3, [pc, #52]	@ (800f034 <std+0x64>)
 800f000:	6323      	str	r3, [r4, #48]	@ 0x30
 800f002:	4b0d      	ldr	r3, [pc, #52]	@ (800f038 <std+0x68>)
 800f004:	6224      	str	r4, [r4, #32]
 800f006:	429c      	cmp	r4, r3
 800f008:	d006      	beq.n	800f018 <std+0x48>
 800f00a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f00e:	4294      	cmp	r4, r2
 800f010:	d002      	beq.n	800f018 <std+0x48>
 800f012:	33d0      	adds	r3, #208	@ 0xd0
 800f014:	429c      	cmp	r4, r3
 800f016:	d105      	bne.n	800f024 <std+0x54>
 800f018:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f01c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f020:	f000 b9be 	b.w	800f3a0 <__retarget_lock_init_recursive>
 800f024:	bd10      	pop	{r4, pc}
 800f026:	bf00      	nop
 800f028:	0800f1c9 	.word	0x0800f1c9
 800f02c:	0800f1eb 	.word	0x0800f1eb
 800f030:	0800f223 	.word	0x0800f223
 800f034:	0800f247 	.word	0x0800f247
 800f038:	2001210c 	.word	0x2001210c

0800f03c <stdio_exit_handler>:
 800f03c:	4a02      	ldr	r2, [pc, #8]	@ (800f048 <stdio_exit_handler+0xc>)
 800f03e:	4903      	ldr	r1, [pc, #12]	@ (800f04c <stdio_exit_handler+0x10>)
 800f040:	4803      	ldr	r0, [pc, #12]	@ (800f050 <stdio_exit_handler+0x14>)
 800f042:	f000 b869 	b.w	800f118 <_fwalk_sglue>
 800f046:	bf00      	nop
 800f048:	20000294 	.word	0x20000294
 800f04c:	0800fda5 	.word	0x0800fda5
 800f050:	200002a4 	.word	0x200002a4

0800f054 <cleanup_stdio>:
 800f054:	6841      	ldr	r1, [r0, #4]
 800f056:	4b0c      	ldr	r3, [pc, #48]	@ (800f088 <cleanup_stdio+0x34>)
 800f058:	4299      	cmp	r1, r3
 800f05a:	b510      	push	{r4, lr}
 800f05c:	4604      	mov	r4, r0
 800f05e:	d001      	beq.n	800f064 <cleanup_stdio+0x10>
 800f060:	f000 fea0 	bl	800fda4 <_fflush_r>
 800f064:	68a1      	ldr	r1, [r4, #8]
 800f066:	4b09      	ldr	r3, [pc, #36]	@ (800f08c <cleanup_stdio+0x38>)
 800f068:	4299      	cmp	r1, r3
 800f06a:	d002      	beq.n	800f072 <cleanup_stdio+0x1e>
 800f06c:	4620      	mov	r0, r4
 800f06e:	f000 fe99 	bl	800fda4 <_fflush_r>
 800f072:	68e1      	ldr	r1, [r4, #12]
 800f074:	4b06      	ldr	r3, [pc, #24]	@ (800f090 <cleanup_stdio+0x3c>)
 800f076:	4299      	cmp	r1, r3
 800f078:	d004      	beq.n	800f084 <cleanup_stdio+0x30>
 800f07a:	4620      	mov	r0, r4
 800f07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f080:	f000 be90 	b.w	800fda4 <_fflush_r>
 800f084:	bd10      	pop	{r4, pc}
 800f086:	bf00      	nop
 800f088:	2001210c 	.word	0x2001210c
 800f08c:	20012174 	.word	0x20012174
 800f090:	200121dc 	.word	0x200121dc

0800f094 <global_stdio_init.part.0>:
 800f094:	b510      	push	{r4, lr}
 800f096:	4b0b      	ldr	r3, [pc, #44]	@ (800f0c4 <global_stdio_init.part.0+0x30>)
 800f098:	4c0b      	ldr	r4, [pc, #44]	@ (800f0c8 <global_stdio_init.part.0+0x34>)
 800f09a:	4a0c      	ldr	r2, [pc, #48]	@ (800f0cc <global_stdio_init.part.0+0x38>)
 800f09c:	601a      	str	r2, [r3, #0]
 800f09e:	4620      	mov	r0, r4
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	2104      	movs	r1, #4
 800f0a4:	f7ff ff94 	bl	800efd0 <std>
 800f0a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f0ac:	2201      	movs	r2, #1
 800f0ae:	2109      	movs	r1, #9
 800f0b0:	f7ff ff8e 	bl	800efd0 <std>
 800f0b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f0b8:	2202      	movs	r2, #2
 800f0ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0be:	2112      	movs	r1, #18
 800f0c0:	f7ff bf86 	b.w	800efd0 <std>
 800f0c4:	20012244 	.word	0x20012244
 800f0c8:	2001210c 	.word	0x2001210c
 800f0cc:	0800f03d 	.word	0x0800f03d

0800f0d0 <__sfp_lock_acquire>:
 800f0d0:	4801      	ldr	r0, [pc, #4]	@ (800f0d8 <__sfp_lock_acquire+0x8>)
 800f0d2:	f000 b966 	b.w	800f3a2 <__retarget_lock_acquire_recursive>
 800f0d6:	bf00      	nop
 800f0d8:	2001224d 	.word	0x2001224d

0800f0dc <__sfp_lock_release>:
 800f0dc:	4801      	ldr	r0, [pc, #4]	@ (800f0e4 <__sfp_lock_release+0x8>)
 800f0de:	f000 b961 	b.w	800f3a4 <__retarget_lock_release_recursive>
 800f0e2:	bf00      	nop
 800f0e4:	2001224d 	.word	0x2001224d

0800f0e8 <__sinit>:
 800f0e8:	b510      	push	{r4, lr}
 800f0ea:	4604      	mov	r4, r0
 800f0ec:	f7ff fff0 	bl	800f0d0 <__sfp_lock_acquire>
 800f0f0:	6a23      	ldr	r3, [r4, #32]
 800f0f2:	b11b      	cbz	r3, 800f0fc <__sinit+0x14>
 800f0f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0f8:	f7ff bff0 	b.w	800f0dc <__sfp_lock_release>
 800f0fc:	4b04      	ldr	r3, [pc, #16]	@ (800f110 <__sinit+0x28>)
 800f0fe:	6223      	str	r3, [r4, #32]
 800f100:	4b04      	ldr	r3, [pc, #16]	@ (800f114 <__sinit+0x2c>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d1f5      	bne.n	800f0f4 <__sinit+0xc>
 800f108:	f7ff ffc4 	bl	800f094 <global_stdio_init.part.0>
 800f10c:	e7f2      	b.n	800f0f4 <__sinit+0xc>
 800f10e:	bf00      	nop
 800f110:	0800f055 	.word	0x0800f055
 800f114:	20012244 	.word	0x20012244

0800f118 <_fwalk_sglue>:
 800f118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f11c:	4607      	mov	r7, r0
 800f11e:	4688      	mov	r8, r1
 800f120:	4614      	mov	r4, r2
 800f122:	2600      	movs	r6, #0
 800f124:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f128:	f1b9 0901 	subs.w	r9, r9, #1
 800f12c:	d505      	bpl.n	800f13a <_fwalk_sglue+0x22>
 800f12e:	6824      	ldr	r4, [r4, #0]
 800f130:	2c00      	cmp	r4, #0
 800f132:	d1f7      	bne.n	800f124 <_fwalk_sglue+0xc>
 800f134:	4630      	mov	r0, r6
 800f136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f13a:	89ab      	ldrh	r3, [r5, #12]
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	d907      	bls.n	800f150 <_fwalk_sglue+0x38>
 800f140:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f144:	3301      	adds	r3, #1
 800f146:	d003      	beq.n	800f150 <_fwalk_sglue+0x38>
 800f148:	4629      	mov	r1, r5
 800f14a:	4638      	mov	r0, r7
 800f14c:	47c0      	blx	r8
 800f14e:	4306      	orrs	r6, r0
 800f150:	3568      	adds	r5, #104	@ 0x68
 800f152:	e7e9      	b.n	800f128 <_fwalk_sglue+0x10>

0800f154 <iprintf>:
 800f154:	b40f      	push	{r0, r1, r2, r3}
 800f156:	b507      	push	{r0, r1, r2, lr}
 800f158:	4906      	ldr	r1, [pc, #24]	@ (800f174 <iprintf+0x20>)
 800f15a:	ab04      	add	r3, sp, #16
 800f15c:	6808      	ldr	r0, [r1, #0]
 800f15e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f162:	6881      	ldr	r1, [r0, #8]
 800f164:	9301      	str	r3, [sp, #4]
 800f166:	f000 faf3 	bl	800f750 <_vfiprintf_r>
 800f16a:	b003      	add	sp, #12
 800f16c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f170:	b004      	add	sp, #16
 800f172:	4770      	bx	lr
 800f174:	200002a0 	.word	0x200002a0

0800f178 <putchar>:
 800f178:	4b02      	ldr	r3, [pc, #8]	@ (800f184 <putchar+0xc>)
 800f17a:	4601      	mov	r1, r0
 800f17c:	6818      	ldr	r0, [r3, #0]
 800f17e:	6882      	ldr	r2, [r0, #8]
 800f180:	f000 be38 	b.w	800fdf4 <_putc_r>
 800f184:	200002a0 	.word	0x200002a0

0800f188 <siprintf>:
 800f188:	b40e      	push	{r1, r2, r3}
 800f18a:	b500      	push	{lr}
 800f18c:	b09c      	sub	sp, #112	@ 0x70
 800f18e:	ab1d      	add	r3, sp, #116	@ 0x74
 800f190:	9002      	str	r0, [sp, #8]
 800f192:	9006      	str	r0, [sp, #24]
 800f194:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f198:	4809      	ldr	r0, [pc, #36]	@ (800f1c0 <siprintf+0x38>)
 800f19a:	9107      	str	r1, [sp, #28]
 800f19c:	9104      	str	r1, [sp, #16]
 800f19e:	4909      	ldr	r1, [pc, #36]	@ (800f1c4 <siprintf+0x3c>)
 800f1a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1a4:	9105      	str	r1, [sp, #20]
 800f1a6:	6800      	ldr	r0, [r0, #0]
 800f1a8:	9301      	str	r3, [sp, #4]
 800f1aa:	a902      	add	r1, sp, #8
 800f1ac:	f000 f9aa 	bl	800f504 <_svfiprintf_r>
 800f1b0:	9b02      	ldr	r3, [sp, #8]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	701a      	strb	r2, [r3, #0]
 800f1b6:	b01c      	add	sp, #112	@ 0x70
 800f1b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1bc:	b003      	add	sp, #12
 800f1be:	4770      	bx	lr
 800f1c0:	200002a0 	.word	0x200002a0
 800f1c4:	ffff0208 	.word	0xffff0208

0800f1c8 <__sread>:
 800f1c8:	b510      	push	{r4, lr}
 800f1ca:	460c      	mov	r4, r1
 800f1cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1d0:	f000 f888 	bl	800f2e4 <_read_r>
 800f1d4:	2800      	cmp	r0, #0
 800f1d6:	bfab      	itete	ge
 800f1d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f1da:	89a3      	ldrhlt	r3, [r4, #12]
 800f1dc:	181b      	addge	r3, r3, r0
 800f1de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f1e2:	bfac      	ite	ge
 800f1e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f1e6:	81a3      	strhlt	r3, [r4, #12]
 800f1e8:	bd10      	pop	{r4, pc}

0800f1ea <__swrite>:
 800f1ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1ee:	461f      	mov	r7, r3
 800f1f0:	898b      	ldrh	r3, [r1, #12]
 800f1f2:	05db      	lsls	r3, r3, #23
 800f1f4:	4605      	mov	r5, r0
 800f1f6:	460c      	mov	r4, r1
 800f1f8:	4616      	mov	r6, r2
 800f1fa:	d505      	bpl.n	800f208 <__swrite+0x1e>
 800f1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f200:	2302      	movs	r3, #2
 800f202:	2200      	movs	r2, #0
 800f204:	f000 f85c 	bl	800f2c0 <_lseek_r>
 800f208:	89a3      	ldrh	r3, [r4, #12]
 800f20a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f20e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f212:	81a3      	strh	r3, [r4, #12]
 800f214:	4632      	mov	r2, r6
 800f216:	463b      	mov	r3, r7
 800f218:	4628      	mov	r0, r5
 800f21a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f21e:	f000 b883 	b.w	800f328 <_write_r>

0800f222 <__sseek>:
 800f222:	b510      	push	{r4, lr}
 800f224:	460c      	mov	r4, r1
 800f226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f22a:	f000 f849 	bl	800f2c0 <_lseek_r>
 800f22e:	1c43      	adds	r3, r0, #1
 800f230:	89a3      	ldrh	r3, [r4, #12]
 800f232:	bf15      	itete	ne
 800f234:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f236:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f23a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f23e:	81a3      	strheq	r3, [r4, #12]
 800f240:	bf18      	it	ne
 800f242:	81a3      	strhne	r3, [r4, #12]
 800f244:	bd10      	pop	{r4, pc}

0800f246 <__sclose>:
 800f246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f24a:	f000 b829 	b.w	800f2a0 <_close_r>
	...

0800f250 <_vsiprintf_r>:
 800f250:	b500      	push	{lr}
 800f252:	b09b      	sub	sp, #108	@ 0x6c
 800f254:	9100      	str	r1, [sp, #0]
 800f256:	9104      	str	r1, [sp, #16]
 800f258:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f25c:	9105      	str	r1, [sp, #20]
 800f25e:	9102      	str	r1, [sp, #8]
 800f260:	4905      	ldr	r1, [pc, #20]	@ (800f278 <_vsiprintf_r+0x28>)
 800f262:	9103      	str	r1, [sp, #12]
 800f264:	4669      	mov	r1, sp
 800f266:	f000 f94d 	bl	800f504 <_svfiprintf_r>
 800f26a:	9b00      	ldr	r3, [sp, #0]
 800f26c:	2200      	movs	r2, #0
 800f26e:	701a      	strb	r2, [r3, #0]
 800f270:	b01b      	add	sp, #108	@ 0x6c
 800f272:	f85d fb04 	ldr.w	pc, [sp], #4
 800f276:	bf00      	nop
 800f278:	ffff0208 	.word	0xffff0208

0800f27c <vsiprintf>:
 800f27c:	4613      	mov	r3, r2
 800f27e:	460a      	mov	r2, r1
 800f280:	4601      	mov	r1, r0
 800f282:	4802      	ldr	r0, [pc, #8]	@ (800f28c <vsiprintf+0x10>)
 800f284:	6800      	ldr	r0, [r0, #0]
 800f286:	f7ff bfe3 	b.w	800f250 <_vsiprintf_r>
 800f28a:	bf00      	nop
 800f28c:	200002a0 	.word	0x200002a0

0800f290 <memset>:
 800f290:	4402      	add	r2, r0
 800f292:	4603      	mov	r3, r0
 800f294:	4293      	cmp	r3, r2
 800f296:	d100      	bne.n	800f29a <memset+0xa>
 800f298:	4770      	bx	lr
 800f29a:	f803 1b01 	strb.w	r1, [r3], #1
 800f29e:	e7f9      	b.n	800f294 <memset+0x4>

0800f2a0 <_close_r>:
 800f2a0:	b538      	push	{r3, r4, r5, lr}
 800f2a2:	4d06      	ldr	r5, [pc, #24]	@ (800f2bc <_close_r+0x1c>)
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	4604      	mov	r4, r0
 800f2a8:	4608      	mov	r0, r1
 800f2aa:	602b      	str	r3, [r5, #0]
 800f2ac:	f7f4 ffbf 	bl	800422e <_close>
 800f2b0:	1c43      	adds	r3, r0, #1
 800f2b2:	d102      	bne.n	800f2ba <_close_r+0x1a>
 800f2b4:	682b      	ldr	r3, [r5, #0]
 800f2b6:	b103      	cbz	r3, 800f2ba <_close_r+0x1a>
 800f2b8:	6023      	str	r3, [r4, #0]
 800f2ba:	bd38      	pop	{r3, r4, r5, pc}
 800f2bc:	20012248 	.word	0x20012248

0800f2c0 <_lseek_r>:
 800f2c0:	b538      	push	{r3, r4, r5, lr}
 800f2c2:	4d07      	ldr	r5, [pc, #28]	@ (800f2e0 <_lseek_r+0x20>)
 800f2c4:	4604      	mov	r4, r0
 800f2c6:	4608      	mov	r0, r1
 800f2c8:	4611      	mov	r1, r2
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	602a      	str	r2, [r5, #0]
 800f2ce:	461a      	mov	r2, r3
 800f2d0:	f7f4 ffd4 	bl	800427c <_lseek>
 800f2d4:	1c43      	adds	r3, r0, #1
 800f2d6:	d102      	bne.n	800f2de <_lseek_r+0x1e>
 800f2d8:	682b      	ldr	r3, [r5, #0]
 800f2da:	b103      	cbz	r3, 800f2de <_lseek_r+0x1e>
 800f2dc:	6023      	str	r3, [r4, #0]
 800f2de:	bd38      	pop	{r3, r4, r5, pc}
 800f2e0:	20012248 	.word	0x20012248

0800f2e4 <_read_r>:
 800f2e4:	b538      	push	{r3, r4, r5, lr}
 800f2e6:	4d07      	ldr	r5, [pc, #28]	@ (800f304 <_read_r+0x20>)
 800f2e8:	4604      	mov	r4, r0
 800f2ea:	4608      	mov	r0, r1
 800f2ec:	4611      	mov	r1, r2
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	602a      	str	r2, [r5, #0]
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	f7f4 ff7e 	bl	80041f4 <_read>
 800f2f8:	1c43      	adds	r3, r0, #1
 800f2fa:	d102      	bne.n	800f302 <_read_r+0x1e>
 800f2fc:	682b      	ldr	r3, [r5, #0]
 800f2fe:	b103      	cbz	r3, 800f302 <_read_r+0x1e>
 800f300:	6023      	str	r3, [r4, #0]
 800f302:	bd38      	pop	{r3, r4, r5, pc}
 800f304:	20012248 	.word	0x20012248

0800f308 <_sbrk_r>:
 800f308:	b538      	push	{r3, r4, r5, lr}
 800f30a:	4d06      	ldr	r5, [pc, #24]	@ (800f324 <_sbrk_r+0x1c>)
 800f30c:	2300      	movs	r3, #0
 800f30e:	4604      	mov	r4, r0
 800f310:	4608      	mov	r0, r1
 800f312:	602b      	str	r3, [r5, #0]
 800f314:	f7f4 ffc0 	bl	8004298 <_sbrk>
 800f318:	1c43      	adds	r3, r0, #1
 800f31a:	d102      	bne.n	800f322 <_sbrk_r+0x1a>
 800f31c:	682b      	ldr	r3, [r5, #0]
 800f31e:	b103      	cbz	r3, 800f322 <_sbrk_r+0x1a>
 800f320:	6023      	str	r3, [r4, #0]
 800f322:	bd38      	pop	{r3, r4, r5, pc}
 800f324:	20012248 	.word	0x20012248

0800f328 <_write_r>:
 800f328:	b538      	push	{r3, r4, r5, lr}
 800f32a:	4d07      	ldr	r5, [pc, #28]	@ (800f348 <_write_r+0x20>)
 800f32c:	4604      	mov	r4, r0
 800f32e:	4608      	mov	r0, r1
 800f330:	4611      	mov	r1, r2
 800f332:	2200      	movs	r2, #0
 800f334:	602a      	str	r2, [r5, #0]
 800f336:	461a      	mov	r2, r3
 800f338:	f7f1 ff66 	bl	8001208 <_write>
 800f33c:	1c43      	adds	r3, r0, #1
 800f33e:	d102      	bne.n	800f346 <_write_r+0x1e>
 800f340:	682b      	ldr	r3, [r5, #0]
 800f342:	b103      	cbz	r3, 800f346 <_write_r+0x1e>
 800f344:	6023      	str	r3, [r4, #0]
 800f346:	bd38      	pop	{r3, r4, r5, pc}
 800f348:	20012248 	.word	0x20012248

0800f34c <__errno>:
 800f34c:	4b01      	ldr	r3, [pc, #4]	@ (800f354 <__errno+0x8>)
 800f34e:	6818      	ldr	r0, [r3, #0]
 800f350:	4770      	bx	lr
 800f352:	bf00      	nop
 800f354:	200002a0 	.word	0x200002a0

0800f358 <__libc_init_array>:
 800f358:	b570      	push	{r4, r5, r6, lr}
 800f35a:	4d0d      	ldr	r5, [pc, #52]	@ (800f390 <__libc_init_array+0x38>)
 800f35c:	4c0d      	ldr	r4, [pc, #52]	@ (800f394 <__libc_init_array+0x3c>)
 800f35e:	1b64      	subs	r4, r4, r5
 800f360:	10a4      	asrs	r4, r4, #2
 800f362:	2600      	movs	r6, #0
 800f364:	42a6      	cmp	r6, r4
 800f366:	d109      	bne.n	800f37c <__libc_init_array+0x24>
 800f368:	4d0b      	ldr	r5, [pc, #44]	@ (800f398 <__libc_init_array+0x40>)
 800f36a:	4c0c      	ldr	r4, [pc, #48]	@ (800f39c <__libc_init_array+0x44>)
 800f36c:	f000 feec 	bl	8010148 <_init>
 800f370:	1b64      	subs	r4, r4, r5
 800f372:	10a4      	asrs	r4, r4, #2
 800f374:	2600      	movs	r6, #0
 800f376:	42a6      	cmp	r6, r4
 800f378:	d105      	bne.n	800f386 <__libc_init_array+0x2e>
 800f37a:	bd70      	pop	{r4, r5, r6, pc}
 800f37c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f380:	4798      	blx	r3
 800f382:	3601      	adds	r6, #1
 800f384:	e7ee      	b.n	800f364 <__libc_init_array+0xc>
 800f386:	f855 3b04 	ldr.w	r3, [r5], #4
 800f38a:	4798      	blx	r3
 800f38c:	3601      	adds	r6, #1
 800f38e:	e7f2      	b.n	800f376 <__libc_init_array+0x1e>
 800f390:	08012d90 	.word	0x08012d90
 800f394:	08012d90 	.word	0x08012d90
 800f398:	08012d90 	.word	0x08012d90
 800f39c:	08012d94 	.word	0x08012d94

0800f3a0 <__retarget_lock_init_recursive>:
 800f3a0:	4770      	bx	lr

0800f3a2 <__retarget_lock_acquire_recursive>:
 800f3a2:	4770      	bx	lr

0800f3a4 <__retarget_lock_release_recursive>:
 800f3a4:	4770      	bx	lr

0800f3a6 <strcpy>:
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3ac:	f803 2b01 	strb.w	r2, [r3], #1
 800f3b0:	2a00      	cmp	r2, #0
 800f3b2:	d1f9      	bne.n	800f3a8 <strcpy+0x2>
 800f3b4:	4770      	bx	lr
	...

0800f3b8 <_free_r>:
 800f3b8:	b538      	push	{r3, r4, r5, lr}
 800f3ba:	4605      	mov	r5, r0
 800f3bc:	2900      	cmp	r1, #0
 800f3be:	d041      	beq.n	800f444 <_free_r+0x8c>
 800f3c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3c4:	1f0c      	subs	r4, r1, #4
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	bfb8      	it	lt
 800f3ca:	18e4      	addlt	r4, r4, r3
 800f3cc:	f7ff fd70 	bl	800eeb0 <__malloc_lock>
 800f3d0:	4a1d      	ldr	r2, [pc, #116]	@ (800f448 <_free_r+0x90>)
 800f3d2:	6813      	ldr	r3, [r2, #0]
 800f3d4:	b933      	cbnz	r3, 800f3e4 <_free_r+0x2c>
 800f3d6:	6063      	str	r3, [r4, #4]
 800f3d8:	6014      	str	r4, [r2, #0]
 800f3da:	4628      	mov	r0, r5
 800f3dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3e0:	f7ff bd6c 	b.w	800eebc <__malloc_unlock>
 800f3e4:	42a3      	cmp	r3, r4
 800f3e6:	d908      	bls.n	800f3fa <_free_r+0x42>
 800f3e8:	6820      	ldr	r0, [r4, #0]
 800f3ea:	1821      	adds	r1, r4, r0
 800f3ec:	428b      	cmp	r3, r1
 800f3ee:	bf01      	itttt	eq
 800f3f0:	6819      	ldreq	r1, [r3, #0]
 800f3f2:	685b      	ldreq	r3, [r3, #4]
 800f3f4:	1809      	addeq	r1, r1, r0
 800f3f6:	6021      	streq	r1, [r4, #0]
 800f3f8:	e7ed      	b.n	800f3d6 <_free_r+0x1e>
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	685b      	ldr	r3, [r3, #4]
 800f3fe:	b10b      	cbz	r3, 800f404 <_free_r+0x4c>
 800f400:	42a3      	cmp	r3, r4
 800f402:	d9fa      	bls.n	800f3fa <_free_r+0x42>
 800f404:	6811      	ldr	r1, [r2, #0]
 800f406:	1850      	adds	r0, r2, r1
 800f408:	42a0      	cmp	r0, r4
 800f40a:	d10b      	bne.n	800f424 <_free_r+0x6c>
 800f40c:	6820      	ldr	r0, [r4, #0]
 800f40e:	4401      	add	r1, r0
 800f410:	1850      	adds	r0, r2, r1
 800f412:	4283      	cmp	r3, r0
 800f414:	6011      	str	r1, [r2, #0]
 800f416:	d1e0      	bne.n	800f3da <_free_r+0x22>
 800f418:	6818      	ldr	r0, [r3, #0]
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	6053      	str	r3, [r2, #4]
 800f41e:	4408      	add	r0, r1
 800f420:	6010      	str	r0, [r2, #0]
 800f422:	e7da      	b.n	800f3da <_free_r+0x22>
 800f424:	d902      	bls.n	800f42c <_free_r+0x74>
 800f426:	230c      	movs	r3, #12
 800f428:	602b      	str	r3, [r5, #0]
 800f42a:	e7d6      	b.n	800f3da <_free_r+0x22>
 800f42c:	6820      	ldr	r0, [r4, #0]
 800f42e:	1821      	adds	r1, r4, r0
 800f430:	428b      	cmp	r3, r1
 800f432:	bf04      	itt	eq
 800f434:	6819      	ldreq	r1, [r3, #0]
 800f436:	685b      	ldreq	r3, [r3, #4]
 800f438:	6063      	str	r3, [r4, #4]
 800f43a:	bf04      	itt	eq
 800f43c:	1809      	addeq	r1, r1, r0
 800f43e:	6021      	streq	r1, [r4, #0]
 800f440:	6054      	str	r4, [r2, #4]
 800f442:	e7ca      	b.n	800f3da <_free_r+0x22>
 800f444:	bd38      	pop	{r3, r4, r5, pc}
 800f446:	bf00      	nop
 800f448:	20012108 	.word	0x20012108

0800f44c <__ssputs_r>:
 800f44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f450:	688e      	ldr	r6, [r1, #8]
 800f452:	461f      	mov	r7, r3
 800f454:	42be      	cmp	r6, r7
 800f456:	680b      	ldr	r3, [r1, #0]
 800f458:	4682      	mov	sl, r0
 800f45a:	460c      	mov	r4, r1
 800f45c:	4690      	mov	r8, r2
 800f45e:	d82d      	bhi.n	800f4bc <__ssputs_r+0x70>
 800f460:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f464:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f468:	d026      	beq.n	800f4b8 <__ssputs_r+0x6c>
 800f46a:	6965      	ldr	r5, [r4, #20]
 800f46c:	6909      	ldr	r1, [r1, #16]
 800f46e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f472:	eba3 0901 	sub.w	r9, r3, r1
 800f476:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f47a:	1c7b      	adds	r3, r7, #1
 800f47c:	444b      	add	r3, r9
 800f47e:	106d      	asrs	r5, r5, #1
 800f480:	429d      	cmp	r5, r3
 800f482:	bf38      	it	cc
 800f484:	461d      	movcc	r5, r3
 800f486:	0553      	lsls	r3, r2, #21
 800f488:	d527      	bpl.n	800f4da <__ssputs_r+0x8e>
 800f48a:	4629      	mov	r1, r5
 800f48c:	f7ff fc90 	bl	800edb0 <_malloc_r>
 800f490:	4606      	mov	r6, r0
 800f492:	b360      	cbz	r0, 800f4ee <__ssputs_r+0xa2>
 800f494:	6921      	ldr	r1, [r4, #16]
 800f496:	464a      	mov	r2, r9
 800f498:	f000 fd8e 	bl	800ffb8 <memcpy>
 800f49c:	89a3      	ldrh	r3, [r4, #12]
 800f49e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f4a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4a6:	81a3      	strh	r3, [r4, #12]
 800f4a8:	6126      	str	r6, [r4, #16]
 800f4aa:	6165      	str	r5, [r4, #20]
 800f4ac:	444e      	add	r6, r9
 800f4ae:	eba5 0509 	sub.w	r5, r5, r9
 800f4b2:	6026      	str	r6, [r4, #0]
 800f4b4:	60a5      	str	r5, [r4, #8]
 800f4b6:	463e      	mov	r6, r7
 800f4b8:	42be      	cmp	r6, r7
 800f4ba:	d900      	bls.n	800f4be <__ssputs_r+0x72>
 800f4bc:	463e      	mov	r6, r7
 800f4be:	6820      	ldr	r0, [r4, #0]
 800f4c0:	4632      	mov	r2, r6
 800f4c2:	4641      	mov	r1, r8
 800f4c4:	f000 fd5e 	bl	800ff84 <memmove>
 800f4c8:	68a3      	ldr	r3, [r4, #8]
 800f4ca:	1b9b      	subs	r3, r3, r6
 800f4cc:	60a3      	str	r3, [r4, #8]
 800f4ce:	6823      	ldr	r3, [r4, #0]
 800f4d0:	4433      	add	r3, r6
 800f4d2:	6023      	str	r3, [r4, #0]
 800f4d4:	2000      	movs	r0, #0
 800f4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4da:	462a      	mov	r2, r5
 800f4dc:	f000 fd7a 	bl	800ffd4 <_realloc_r>
 800f4e0:	4606      	mov	r6, r0
 800f4e2:	2800      	cmp	r0, #0
 800f4e4:	d1e0      	bne.n	800f4a8 <__ssputs_r+0x5c>
 800f4e6:	6921      	ldr	r1, [r4, #16]
 800f4e8:	4650      	mov	r0, sl
 800f4ea:	f7ff ff65 	bl	800f3b8 <_free_r>
 800f4ee:	230c      	movs	r3, #12
 800f4f0:	f8ca 3000 	str.w	r3, [sl]
 800f4f4:	89a3      	ldrh	r3, [r4, #12]
 800f4f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4fa:	81a3      	strh	r3, [r4, #12]
 800f4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f500:	e7e9      	b.n	800f4d6 <__ssputs_r+0x8a>
	...

0800f504 <_svfiprintf_r>:
 800f504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f508:	4698      	mov	r8, r3
 800f50a:	898b      	ldrh	r3, [r1, #12]
 800f50c:	061b      	lsls	r3, r3, #24
 800f50e:	b09d      	sub	sp, #116	@ 0x74
 800f510:	4607      	mov	r7, r0
 800f512:	460d      	mov	r5, r1
 800f514:	4614      	mov	r4, r2
 800f516:	d510      	bpl.n	800f53a <_svfiprintf_r+0x36>
 800f518:	690b      	ldr	r3, [r1, #16]
 800f51a:	b973      	cbnz	r3, 800f53a <_svfiprintf_r+0x36>
 800f51c:	2140      	movs	r1, #64	@ 0x40
 800f51e:	f7ff fc47 	bl	800edb0 <_malloc_r>
 800f522:	6028      	str	r0, [r5, #0]
 800f524:	6128      	str	r0, [r5, #16]
 800f526:	b930      	cbnz	r0, 800f536 <_svfiprintf_r+0x32>
 800f528:	230c      	movs	r3, #12
 800f52a:	603b      	str	r3, [r7, #0]
 800f52c:	f04f 30ff 	mov.w	r0, #4294967295
 800f530:	b01d      	add	sp, #116	@ 0x74
 800f532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f536:	2340      	movs	r3, #64	@ 0x40
 800f538:	616b      	str	r3, [r5, #20]
 800f53a:	2300      	movs	r3, #0
 800f53c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f53e:	2320      	movs	r3, #32
 800f540:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f544:	f8cd 800c 	str.w	r8, [sp, #12]
 800f548:	2330      	movs	r3, #48	@ 0x30
 800f54a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f6e8 <_svfiprintf_r+0x1e4>
 800f54e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f552:	f04f 0901 	mov.w	r9, #1
 800f556:	4623      	mov	r3, r4
 800f558:	469a      	mov	sl, r3
 800f55a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f55e:	b10a      	cbz	r2, 800f564 <_svfiprintf_r+0x60>
 800f560:	2a25      	cmp	r2, #37	@ 0x25
 800f562:	d1f9      	bne.n	800f558 <_svfiprintf_r+0x54>
 800f564:	ebba 0b04 	subs.w	fp, sl, r4
 800f568:	d00b      	beq.n	800f582 <_svfiprintf_r+0x7e>
 800f56a:	465b      	mov	r3, fp
 800f56c:	4622      	mov	r2, r4
 800f56e:	4629      	mov	r1, r5
 800f570:	4638      	mov	r0, r7
 800f572:	f7ff ff6b 	bl	800f44c <__ssputs_r>
 800f576:	3001      	adds	r0, #1
 800f578:	f000 80a7 	beq.w	800f6ca <_svfiprintf_r+0x1c6>
 800f57c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f57e:	445a      	add	r2, fp
 800f580:	9209      	str	r2, [sp, #36]	@ 0x24
 800f582:	f89a 3000 	ldrb.w	r3, [sl]
 800f586:	2b00      	cmp	r3, #0
 800f588:	f000 809f 	beq.w	800f6ca <_svfiprintf_r+0x1c6>
 800f58c:	2300      	movs	r3, #0
 800f58e:	f04f 32ff 	mov.w	r2, #4294967295
 800f592:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f596:	f10a 0a01 	add.w	sl, sl, #1
 800f59a:	9304      	str	r3, [sp, #16]
 800f59c:	9307      	str	r3, [sp, #28]
 800f59e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f5a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800f5a4:	4654      	mov	r4, sl
 800f5a6:	2205      	movs	r2, #5
 800f5a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5ac:	484e      	ldr	r0, [pc, #312]	@ (800f6e8 <_svfiprintf_r+0x1e4>)
 800f5ae:	f7f0 fe27 	bl	8000200 <memchr>
 800f5b2:	9a04      	ldr	r2, [sp, #16]
 800f5b4:	b9d8      	cbnz	r0, 800f5ee <_svfiprintf_r+0xea>
 800f5b6:	06d0      	lsls	r0, r2, #27
 800f5b8:	bf44      	itt	mi
 800f5ba:	2320      	movmi	r3, #32
 800f5bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f5c0:	0711      	lsls	r1, r2, #28
 800f5c2:	bf44      	itt	mi
 800f5c4:	232b      	movmi	r3, #43	@ 0x2b
 800f5c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f5ca:	f89a 3000 	ldrb.w	r3, [sl]
 800f5ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800f5d0:	d015      	beq.n	800f5fe <_svfiprintf_r+0xfa>
 800f5d2:	9a07      	ldr	r2, [sp, #28]
 800f5d4:	4654      	mov	r4, sl
 800f5d6:	2000      	movs	r0, #0
 800f5d8:	f04f 0c0a 	mov.w	ip, #10
 800f5dc:	4621      	mov	r1, r4
 800f5de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5e2:	3b30      	subs	r3, #48	@ 0x30
 800f5e4:	2b09      	cmp	r3, #9
 800f5e6:	d94b      	bls.n	800f680 <_svfiprintf_r+0x17c>
 800f5e8:	b1b0      	cbz	r0, 800f618 <_svfiprintf_r+0x114>
 800f5ea:	9207      	str	r2, [sp, #28]
 800f5ec:	e014      	b.n	800f618 <_svfiprintf_r+0x114>
 800f5ee:	eba0 0308 	sub.w	r3, r0, r8
 800f5f2:	fa09 f303 	lsl.w	r3, r9, r3
 800f5f6:	4313      	orrs	r3, r2
 800f5f8:	9304      	str	r3, [sp, #16]
 800f5fa:	46a2      	mov	sl, r4
 800f5fc:	e7d2      	b.n	800f5a4 <_svfiprintf_r+0xa0>
 800f5fe:	9b03      	ldr	r3, [sp, #12]
 800f600:	1d19      	adds	r1, r3, #4
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	9103      	str	r1, [sp, #12]
 800f606:	2b00      	cmp	r3, #0
 800f608:	bfbb      	ittet	lt
 800f60a:	425b      	neglt	r3, r3
 800f60c:	f042 0202 	orrlt.w	r2, r2, #2
 800f610:	9307      	strge	r3, [sp, #28]
 800f612:	9307      	strlt	r3, [sp, #28]
 800f614:	bfb8      	it	lt
 800f616:	9204      	strlt	r2, [sp, #16]
 800f618:	7823      	ldrb	r3, [r4, #0]
 800f61a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f61c:	d10a      	bne.n	800f634 <_svfiprintf_r+0x130>
 800f61e:	7863      	ldrb	r3, [r4, #1]
 800f620:	2b2a      	cmp	r3, #42	@ 0x2a
 800f622:	d132      	bne.n	800f68a <_svfiprintf_r+0x186>
 800f624:	9b03      	ldr	r3, [sp, #12]
 800f626:	1d1a      	adds	r2, r3, #4
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	9203      	str	r2, [sp, #12]
 800f62c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f630:	3402      	adds	r4, #2
 800f632:	9305      	str	r3, [sp, #20]
 800f634:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f6f8 <_svfiprintf_r+0x1f4>
 800f638:	7821      	ldrb	r1, [r4, #0]
 800f63a:	2203      	movs	r2, #3
 800f63c:	4650      	mov	r0, sl
 800f63e:	f7f0 fddf 	bl	8000200 <memchr>
 800f642:	b138      	cbz	r0, 800f654 <_svfiprintf_r+0x150>
 800f644:	9b04      	ldr	r3, [sp, #16]
 800f646:	eba0 000a 	sub.w	r0, r0, sl
 800f64a:	2240      	movs	r2, #64	@ 0x40
 800f64c:	4082      	lsls	r2, r0
 800f64e:	4313      	orrs	r3, r2
 800f650:	3401      	adds	r4, #1
 800f652:	9304      	str	r3, [sp, #16]
 800f654:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f658:	4824      	ldr	r0, [pc, #144]	@ (800f6ec <_svfiprintf_r+0x1e8>)
 800f65a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f65e:	2206      	movs	r2, #6
 800f660:	f7f0 fdce 	bl	8000200 <memchr>
 800f664:	2800      	cmp	r0, #0
 800f666:	d036      	beq.n	800f6d6 <_svfiprintf_r+0x1d2>
 800f668:	4b21      	ldr	r3, [pc, #132]	@ (800f6f0 <_svfiprintf_r+0x1ec>)
 800f66a:	bb1b      	cbnz	r3, 800f6b4 <_svfiprintf_r+0x1b0>
 800f66c:	9b03      	ldr	r3, [sp, #12]
 800f66e:	3307      	adds	r3, #7
 800f670:	f023 0307 	bic.w	r3, r3, #7
 800f674:	3308      	adds	r3, #8
 800f676:	9303      	str	r3, [sp, #12]
 800f678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f67a:	4433      	add	r3, r6
 800f67c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f67e:	e76a      	b.n	800f556 <_svfiprintf_r+0x52>
 800f680:	fb0c 3202 	mla	r2, ip, r2, r3
 800f684:	460c      	mov	r4, r1
 800f686:	2001      	movs	r0, #1
 800f688:	e7a8      	b.n	800f5dc <_svfiprintf_r+0xd8>
 800f68a:	2300      	movs	r3, #0
 800f68c:	3401      	adds	r4, #1
 800f68e:	9305      	str	r3, [sp, #20]
 800f690:	4619      	mov	r1, r3
 800f692:	f04f 0c0a 	mov.w	ip, #10
 800f696:	4620      	mov	r0, r4
 800f698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f69c:	3a30      	subs	r2, #48	@ 0x30
 800f69e:	2a09      	cmp	r2, #9
 800f6a0:	d903      	bls.n	800f6aa <_svfiprintf_r+0x1a6>
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d0c6      	beq.n	800f634 <_svfiprintf_r+0x130>
 800f6a6:	9105      	str	r1, [sp, #20]
 800f6a8:	e7c4      	b.n	800f634 <_svfiprintf_r+0x130>
 800f6aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800f6ae:	4604      	mov	r4, r0
 800f6b0:	2301      	movs	r3, #1
 800f6b2:	e7f0      	b.n	800f696 <_svfiprintf_r+0x192>
 800f6b4:	ab03      	add	r3, sp, #12
 800f6b6:	9300      	str	r3, [sp, #0]
 800f6b8:	462a      	mov	r2, r5
 800f6ba:	4b0e      	ldr	r3, [pc, #56]	@ (800f6f4 <_svfiprintf_r+0x1f0>)
 800f6bc:	a904      	add	r1, sp, #16
 800f6be:	4638      	mov	r0, r7
 800f6c0:	f3af 8000 	nop.w
 800f6c4:	1c42      	adds	r2, r0, #1
 800f6c6:	4606      	mov	r6, r0
 800f6c8:	d1d6      	bne.n	800f678 <_svfiprintf_r+0x174>
 800f6ca:	89ab      	ldrh	r3, [r5, #12]
 800f6cc:	065b      	lsls	r3, r3, #25
 800f6ce:	f53f af2d 	bmi.w	800f52c <_svfiprintf_r+0x28>
 800f6d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f6d4:	e72c      	b.n	800f530 <_svfiprintf_r+0x2c>
 800f6d6:	ab03      	add	r3, sp, #12
 800f6d8:	9300      	str	r3, [sp, #0]
 800f6da:	462a      	mov	r2, r5
 800f6dc:	4b05      	ldr	r3, [pc, #20]	@ (800f6f4 <_svfiprintf_r+0x1f0>)
 800f6de:	a904      	add	r1, sp, #16
 800f6e0:	4638      	mov	r0, r7
 800f6e2:	f000 f9bb 	bl	800fa5c <_printf_i>
 800f6e6:	e7ed      	b.n	800f6c4 <_svfiprintf_r+0x1c0>
 800f6e8:	08012d55 	.word	0x08012d55
 800f6ec:	08012d5f 	.word	0x08012d5f
 800f6f0:	00000000 	.word	0x00000000
 800f6f4:	0800f44d 	.word	0x0800f44d
 800f6f8:	08012d5b 	.word	0x08012d5b

0800f6fc <__sfputc_r>:
 800f6fc:	6893      	ldr	r3, [r2, #8]
 800f6fe:	3b01      	subs	r3, #1
 800f700:	2b00      	cmp	r3, #0
 800f702:	b410      	push	{r4}
 800f704:	6093      	str	r3, [r2, #8]
 800f706:	da08      	bge.n	800f71a <__sfputc_r+0x1e>
 800f708:	6994      	ldr	r4, [r2, #24]
 800f70a:	42a3      	cmp	r3, r4
 800f70c:	db01      	blt.n	800f712 <__sfputc_r+0x16>
 800f70e:	290a      	cmp	r1, #10
 800f710:	d103      	bne.n	800f71a <__sfputc_r+0x1e>
 800f712:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f716:	f000 bba1 	b.w	800fe5c <__swbuf_r>
 800f71a:	6813      	ldr	r3, [r2, #0]
 800f71c:	1c58      	adds	r0, r3, #1
 800f71e:	6010      	str	r0, [r2, #0]
 800f720:	7019      	strb	r1, [r3, #0]
 800f722:	4608      	mov	r0, r1
 800f724:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f728:	4770      	bx	lr

0800f72a <__sfputs_r>:
 800f72a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f72c:	4606      	mov	r6, r0
 800f72e:	460f      	mov	r7, r1
 800f730:	4614      	mov	r4, r2
 800f732:	18d5      	adds	r5, r2, r3
 800f734:	42ac      	cmp	r4, r5
 800f736:	d101      	bne.n	800f73c <__sfputs_r+0x12>
 800f738:	2000      	movs	r0, #0
 800f73a:	e007      	b.n	800f74c <__sfputs_r+0x22>
 800f73c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f740:	463a      	mov	r2, r7
 800f742:	4630      	mov	r0, r6
 800f744:	f7ff ffda 	bl	800f6fc <__sfputc_r>
 800f748:	1c43      	adds	r3, r0, #1
 800f74a:	d1f3      	bne.n	800f734 <__sfputs_r+0xa>
 800f74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f750 <_vfiprintf_r>:
 800f750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f754:	460d      	mov	r5, r1
 800f756:	b09d      	sub	sp, #116	@ 0x74
 800f758:	4614      	mov	r4, r2
 800f75a:	4698      	mov	r8, r3
 800f75c:	4606      	mov	r6, r0
 800f75e:	b118      	cbz	r0, 800f768 <_vfiprintf_r+0x18>
 800f760:	6a03      	ldr	r3, [r0, #32]
 800f762:	b90b      	cbnz	r3, 800f768 <_vfiprintf_r+0x18>
 800f764:	f7ff fcc0 	bl	800f0e8 <__sinit>
 800f768:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f76a:	07d9      	lsls	r1, r3, #31
 800f76c:	d405      	bmi.n	800f77a <_vfiprintf_r+0x2a>
 800f76e:	89ab      	ldrh	r3, [r5, #12]
 800f770:	059a      	lsls	r2, r3, #22
 800f772:	d402      	bmi.n	800f77a <_vfiprintf_r+0x2a>
 800f774:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f776:	f7ff fe14 	bl	800f3a2 <__retarget_lock_acquire_recursive>
 800f77a:	89ab      	ldrh	r3, [r5, #12]
 800f77c:	071b      	lsls	r3, r3, #28
 800f77e:	d501      	bpl.n	800f784 <_vfiprintf_r+0x34>
 800f780:	692b      	ldr	r3, [r5, #16]
 800f782:	b99b      	cbnz	r3, 800f7ac <_vfiprintf_r+0x5c>
 800f784:	4629      	mov	r1, r5
 800f786:	4630      	mov	r0, r6
 800f788:	f000 fba6 	bl	800fed8 <__swsetup_r>
 800f78c:	b170      	cbz	r0, 800f7ac <_vfiprintf_r+0x5c>
 800f78e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f790:	07dc      	lsls	r4, r3, #31
 800f792:	d504      	bpl.n	800f79e <_vfiprintf_r+0x4e>
 800f794:	f04f 30ff 	mov.w	r0, #4294967295
 800f798:	b01d      	add	sp, #116	@ 0x74
 800f79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f79e:	89ab      	ldrh	r3, [r5, #12]
 800f7a0:	0598      	lsls	r0, r3, #22
 800f7a2:	d4f7      	bmi.n	800f794 <_vfiprintf_r+0x44>
 800f7a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f7a6:	f7ff fdfd 	bl	800f3a4 <__retarget_lock_release_recursive>
 800f7aa:	e7f3      	b.n	800f794 <_vfiprintf_r+0x44>
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7b0:	2320      	movs	r3, #32
 800f7b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f7b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7ba:	2330      	movs	r3, #48	@ 0x30
 800f7bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f96c <_vfiprintf_r+0x21c>
 800f7c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f7c4:	f04f 0901 	mov.w	r9, #1
 800f7c8:	4623      	mov	r3, r4
 800f7ca:	469a      	mov	sl, r3
 800f7cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7d0:	b10a      	cbz	r2, 800f7d6 <_vfiprintf_r+0x86>
 800f7d2:	2a25      	cmp	r2, #37	@ 0x25
 800f7d4:	d1f9      	bne.n	800f7ca <_vfiprintf_r+0x7a>
 800f7d6:	ebba 0b04 	subs.w	fp, sl, r4
 800f7da:	d00b      	beq.n	800f7f4 <_vfiprintf_r+0xa4>
 800f7dc:	465b      	mov	r3, fp
 800f7de:	4622      	mov	r2, r4
 800f7e0:	4629      	mov	r1, r5
 800f7e2:	4630      	mov	r0, r6
 800f7e4:	f7ff ffa1 	bl	800f72a <__sfputs_r>
 800f7e8:	3001      	adds	r0, #1
 800f7ea:	f000 80a7 	beq.w	800f93c <_vfiprintf_r+0x1ec>
 800f7ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7f0:	445a      	add	r2, fp
 800f7f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800f7f4:	f89a 3000 	ldrb.w	r3, [sl]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	f000 809f 	beq.w	800f93c <_vfiprintf_r+0x1ec>
 800f7fe:	2300      	movs	r3, #0
 800f800:	f04f 32ff 	mov.w	r2, #4294967295
 800f804:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f808:	f10a 0a01 	add.w	sl, sl, #1
 800f80c:	9304      	str	r3, [sp, #16]
 800f80e:	9307      	str	r3, [sp, #28]
 800f810:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f814:	931a      	str	r3, [sp, #104]	@ 0x68
 800f816:	4654      	mov	r4, sl
 800f818:	2205      	movs	r2, #5
 800f81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f81e:	4853      	ldr	r0, [pc, #332]	@ (800f96c <_vfiprintf_r+0x21c>)
 800f820:	f7f0 fcee 	bl	8000200 <memchr>
 800f824:	9a04      	ldr	r2, [sp, #16]
 800f826:	b9d8      	cbnz	r0, 800f860 <_vfiprintf_r+0x110>
 800f828:	06d1      	lsls	r1, r2, #27
 800f82a:	bf44      	itt	mi
 800f82c:	2320      	movmi	r3, #32
 800f82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f832:	0713      	lsls	r3, r2, #28
 800f834:	bf44      	itt	mi
 800f836:	232b      	movmi	r3, #43	@ 0x2b
 800f838:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f83c:	f89a 3000 	ldrb.w	r3, [sl]
 800f840:	2b2a      	cmp	r3, #42	@ 0x2a
 800f842:	d015      	beq.n	800f870 <_vfiprintf_r+0x120>
 800f844:	9a07      	ldr	r2, [sp, #28]
 800f846:	4654      	mov	r4, sl
 800f848:	2000      	movs	r0, #0
 800f84a:	f04f 0c0a 	mov.w	ip, #10
 800f84e:	4621      	mov	r1, r4
 800f850:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f854:	3b30      	subs	r3, #48	@ 0x30
 800f856:	2b09      	cmp	r3, #9
 800f858:	d94b      	bls.n	800f8f2 <_vfiprintf_r+0x1a2>
 800f85a:	b1b0      	cbz	r0, 800f88a <_vfiprintf_r+0x13a>
 800f85c:	9207      	str	r2, [sp, #28]
 800f85e:	e014      	b.n	800f88a <_vfiprintf_r+0x13a>
 800f860:	eba0 0308 	sub.w	r3, r0, r8
 800f864:	fa09 f303 	lsl.w	r3, r9, r3
 800f868:	4313      	orrs	r3, r2
 800f86a:	9304      	str	r3, [sp, #16]
 800f86c:	46a2      	mov	sl, r4
 800f86e:	e7d2      	b.n	800f816 <_vfiprintf_r+0xc6>
 800f870:	9b03      	ldr	r3, [sp, #12]
 800f872:	1d19      	adds	r1, r3, #4
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	9103      	str	r1, [sp, #12]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	bfbb      	ittet	lt
 800f87c:	425b      	neglt	r3, r3
 800f87e:	f042 0202 	orrlt.w	r2, r2, #2
 800f882:	9307      	strge	r3, [sp, #28]
 800f884:	9307      	strlt	r3, [sp, #28]
 800f886:	bfb8      	it	lt
 800f888:	9204      	strlt	r2, [sp, #16]
 800f88a:	7823      	ldrb	r3, [r4, #0]
 800f88c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f88e:	d10a      	bne.n	800f8a6 <_vfiprintf_r+0x156>
 800f890:	7863      	ldrb	r3, [r4, #1]
 800f892:	2b2a      	cmp	r3, #42	@ 0x2a
 800f894:	d132      	bne.n	800f8fc <_vfiprintf_r+0x1ac>
 800f896:	9b03      	ldr	r3, [sp, #12]
 800f898:	1d1a      	adds	r2, r3, #4
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	9203      	str	r2, [sp, #12]
 800f89e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f8a2:	3402      	adds	r4, #2
 800f8a4:	9305      	str	r3, [sp, #20]
 800f8a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f97c <_vfiprintf_r+0x22c>
 800f8aa:	7821      	ldrb	r1, [r4, #0]
 800f8ac:	2203      	movs	r2, #3
 800f8ae:	4650      	mov	r0, sl
 800f8b0:	f7f0 fca6 	bl	8000200 <memchr>
 800f8b4:	b138      	cbz	r0, 800f8c6 <_vfiprintf_r+0x176>
 800f8b6:	9b04      	ldr	r3, [sp, #16]
 800f8b8:	eba0 000a 	sub.w	r0, r0, sl
 800f8bc:	2240      	movs	r2, #64	@ 0x40
 800f8be:	4082      	lsls	r2, r0
 800f8c0:	4313      	orrs	r3, r2
 800f8c2:	3401      	adds	r4, #1
 800f8c4:	9304      	str	r3, [sp, #16]
 800f8c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8ca:	4829      	ldr	r0, [pc, #164]	@ (800f970 <_vfiprintf_r+0x220>)
 800f8cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f8d0:	2206      	movs	r2, #6
 800f8d2:	f7f0 fc95 	bl	8000200 <memchr>
 800f8d6:	2800      	cmp	r0, #0
 800f8d8:	d03f      	beq.n	800f95a <_vfiprintf_r+0x20a>
 800f8da:	4b26      	ldr	r3, [pc, #152]	@ (800f974 <_vfiprintf_r+0x224>)
 800f8dc:	bb1b      	cbnz	r3, 800f926 <_vfiprintf_r+0x1d6>
 800f8de:	9b03      	ldr	r3, [sp, #12]
 800f8e0:	3307      	adds	r3, #7
 800f8e2:	f023 0307 	bic.w	r3, r3, #7
 800f8e6:	3308      	adds	r3, #8
 800f8e8:	9303      	str	r3, [sp, #12]
 800f8ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8ec:	443b      	add	r3, r7
 800f8ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8f0:	e76a      	b.n	800f7c8 <_vfiprintf_r+0x78>
 800f8f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8f6:	460c      	mov	r4, r1
 800f8f8:	2001      	movs	r0, #1
 800f8fa:	e7a8      	b.n	800f84e <_vfiprintf_r+0xfe>
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	3401      	adds	r4, #1
 800f900:	9305      	str	r3, [sp, #20]
 800f902:	4619      	mov	r1, r3
 800f904:	f04f 0c0a 	mov.w	ip, #10
 800f908:	4620      	mov	r0, r4
 800f90a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f90e:	3a30      	subs	r2, #48	@ 0x30
 800f910:	2a09      	cmp	r2, #9
 800f912:	d903      	bls.n	800f91c <_vfiprintf_r+0x1cc>
 800f914:	2b00      	cmp	r3, #0
 800f916:	d0c6      	beq.n	800f8a6 <_vfiprintf_r+0x156>
 800f918:	9105      	str	r1, [sp, #20]
 800f91a:	e7c4      	b.n	800f8a6 <_vfiprintf_r+0x156>
 800f91c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f920:	4604      	mov	r4, r0
 800f922:	2301      	movs	r3, #1
 800f924:	e7f0      	b.n	800f908 <_vfiprintf_r+0x1b8>
 800f926:	ab03      	add	r3, sp, #12
 800f928:	9300      	str	r3, [sp, #0]
 800f92a:	462a      	mov	r2, r5
 800f92c:	4b12      	ldr	r3, [pc, #72]	@ (800f978 <_vfiprintf_r+0x228>)
 800f92e:	a904      	add	r1, sp, #16
 800f930:	4630      	mov	r0, r6
 800f932:	f3af 8000 	nop.w
 800f936:	4607      	mov	r7, r0
 800f938:	1c78      	adds	r0, r7, #1
 800f93a:	d1d6      	bne.n	800f8ea <_vfiprintf_r+0x19a>
 800f93c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f93e:	07d9      	lsls	r1, r3, #31
 800f940:	d405      	bmi.n	800f94e <_vfiprintf_r+0x1fe>
 800f942:	89ab      	ldrh	r3, [r5, #12]
 800f944:	059a      	lsls	r2, r3, #22
 800f946:	d402      	bmi.n	800f94e <_vfiprintf_r+0x1fe>
 800f948:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f94a:	f7ff fd2b 	bl	800f3a4 <__retarget_lock_release_recursive>
 800f94e:	89ab      	ldrh	r3, [r5, #12]
 800f950:	065b      	lsls	r3, r3, #25
 800f952:	f53f af1f 	bmi.w	800f794 <_vfiprintf_r+0x44>
 800f956:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f958:	e71e      	b.n	800f798 <_vfiprintf_r+0x48>
 800f95a:	ab03      	add	r3, sp, #12
 800f95c:	9300      	str	r3, [sp, #0]
 800f95e:	462a      	mov	r2, r5
 800f960:	4b05      	ldr	r3, [pc, #20]	@ (800f978 <_vfiprintf_r+0x228>)
 800f962:	a904      	add	r1, sp, #16
 800f964:	4630      	mov	r0, r6
 800f966:	f000 f879 	bl	800fa5c <_printf_i>
 800f96a:	e7e4      	b.n	800f936 <_vfiprintf_r+0x1e6>
 800f96c:	08012d55 	.word	0x08012d55
 800f970:	08012d5f 	.word	0x08012d5f
 800f974:	00000000 	.word	0x00000000
 800f978:	0800f72b 	.word	0x0800f72b
 800f97c:	08012d5b 	.word	0x08012d5b

0800f980 <_printf_common>:
 800f980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f984:	4616      	mov	r6, r2
 800f986:	4698      	mov	r8, r3
 800f988:	688a      	ldr	r2, [r1, #8]
 800f98a:	690b      	ldr	r3, [r1, #16]
 800f98c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f990:	4293      	cmp	r3, r2
 800f992:	bfb8      	it	lt
 800f994:	4613      	movlt	r3, r2
 800f996:	6033      	str	r3, [r6, #0]
 800f998:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f99c:	4607      	mov	r7, r0
 800f99e:	460c      	mov	r4, r1
 800f9a0:	b10a      	cbz	r2, 800f9a6 <_printf_common+0x26>
 800f9a2:	3301      	adds	r3, #1
 800f9a4:	6033      	str	r3, [r6, #0]
 800f9a6:	6823      	ldr	r3, [r4, #0]
 800f9a8:	0699      	lsls	r1, r3, #26
 800f9aa:	bf42      	ittt	mi
 800f9ac:	6833      	ldrmi	r3, [r6, #0]
 800f9ae:	3302      	addmi	r3, #2
 800f9b0:	6033      	strmi	r3, [r6, #0]
 800f9b2:	6825      	ldr	r5, [r4, #0]
 800f9b4:	f015 0506 	ands.w	r5, r5, #6
 800f9b8:	d106      	bne.n	800f9c8 <_printf_common+0x48>
 800f9ba:	f104 0a19 	add.w	sl, r4, #25
 800f9be:	68e3      	ldr	r3, [r4, #12]
 800f9c0:	6832      	ldr	r2, [r6, #0]
 800f9c2:	1a9b      	subs	r3, r3, r2
 800f9c4:	42ab      	cmp	r3, r5
 800f9c6:	dc26      	bgt.n	800fa16 <_printf_common+0x96>
 800f9c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f9cc:	6822      	ldr	r2, [r4, #0]
 800f9ce:	3b00      	subs	r3, #0
 800f9d0:	bf18      	it	ne
 800f9d2:	2301      	movne	r3, #1
 800f9d4:	0692      	lsls	r2, r2, #26
 800f9d6:	d42b      	bmi.n	800fa30 <_printf_common+0xb0>
 800f9d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f9dc:	4641      	mov	r1, r8
 800f9de:	4638      	mov	r0, r7
 800f9e0:	47c8      	blx	r9
 800f9e2:	3001      	adds	r0, #1
 800f9e4:	d01e      	beq.n	800fa24 <_printf_common+0xa4>
 800f9e6:	6823      	ldr	r3, [r4, #0]
 800f9e8:	6922      	ldr	r2, [r4, #16]
 800f9ea:	f003 0306 	and.w	r3, r3, #6
 800f9ee:	2b04      	cmp	r3, #4
 800f9f0:	bf02      	ittt	eq
 800f9f2:	68e5      	ldreq	r5, [r4, #12]
 800f9f4:	6833      	ldreq	r3, [r6, #0]
 800f9f6:	1aed      	subeq	r5, r5, r3
 800f9f8:	68a3      	ldr	r3, [r4, #8]
 800f9fa:	bf0c      	ite	eq
 800f9fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa00:	2500      	movne	r5, #0
 800fa02:	4293      	cmp	r3, r2
 800fa04:	bfc4      	itt	gt
 800fa06:	1a9b      	subgt	r3, r3, r2
 800fa08:	18ed      	addgt	r5, r5, r3
 800fa0a:	2600      	movs	r6, #0
 800fa0c:	341a      	adds	r4, #26
 800fa0e:	42b5      	cmp	r5, r6
 800fa10:	d11a      	bne.n	800fa48 <_printf_common+0xc8>
 800fa12:	2000      	movs	r0, #0
 800fa14:	e008      	b.n	800fa28 <_printf_common+0xa8>
 800fa16:	2301      	movs	r3, #1
 800fa18:	4652      	mov	r2, sl
 800fa1a:	4641      	mov	r1, r8
 800fa1c:	4638      	mov	r0, r7
 800fa1e:	47c8      	blx	r9
 800fa20:	3001      	adds	r0, #1
 800fa22:	d103      	bne.n	800fa2c <_printf_common+0xac>
 800fa24:	f04f 30ff 	mov.w	r0, #4294967295
 800fa28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa2c:	3501      	adds	r5, #1
 800fa2e:	e7c6      	b.n	800f9be <_printf_common+0x3e>
 800fa30:	18e1      	adds	r1, r4, r3
 800fa32:	1c5a      	adds	r2, r3, #1
 800fa34:	2030      	movs	r0, #48	@ 0x30
 800fa36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fa3a:	4422      	add	r2, r4
 800fa3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fa40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fa44:	3302      	adds	r3, #2
 800fa46:	e7c7      	b.n	800f9d8 <_printf_common+0x58>
 800fa48:	2301      	movs	r3, #1
 800fa4a:	4622      	mov	r2, r4
 800fa4c:	4641      	mov	r1, r8
 800fa4e:	4638      	mov	r0, r7
 800fa50:	47c8      	blx	r9
 800fa52:	3001      	adds	r0, #1
 800fa54:	d0e6      	beq.n	800fa24 <_printf_common+0xa4>
 800fa56:	3601      	adds	r6, #1
 800fa58:	e7d9      	b.n	800fa0e <_printf_common+0x8e>
	...

0800fa5c <_printf_i>:
 800fa5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa60:	7e0f      	ldrb	r7, [r1, #24]
 800fa62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fa64:	2f78      	cmp	r7, #120	@ 0x78
 800fa66:	4691      	mov	r9, r2
 800fa68:	4680      	mov	r8, r0
 800fa6a:	460c      	mov	r4, r1
 800fa6c:	469a      	mov	sl, r3
 800fa6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fa72:	d807      	bhi.n	800fa84 <_printf_i+0x28>
 800fa74:	2f62      	cmp	r7, #98	@ 0x62
 800fa76:	d80a      	bhi.n	800fa8e <_printf_i+0x32>
 800fa78:	2f00      	cmp	r7, #0
 800fa7a:	f000 80d2 	beq.w	800fc22 <_printf_i+0x1c6>
 800fa7e:	2f58      	cmp	r7, #88	@ 0x58
 800fa80:	f000 80b9 	beq.w	800fbf6 <_printf_i+0x19a>
 800fa84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fa88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fa8c:	e03a      	b.n	800fb04 <_printf_i+0xa8>
 800fa8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fa92:	2b15      	cmp	r3, #21
 800fa94:	d8f6      	bhi.n	800fa84 <_printf_i+0x28>
 800fa96:	a101      	add	r1, pc, #4	@ (adr r1, 800fa9c <_printf_i+0x40>)
 800fa98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fa9c:	0800faf5 	.word	0x0800faf5
 800faa0:	0800fb09 	.word	0x0800fb09
 800faa4:	0800fa85 	.word	0x0800fa85
 800faa8:	0800fa85 	.word	0x0800fa85
 800faac:	0800fa85 	.word	0x0800fa85
 800fab0:	0800fa85 	.word	0x0800fa85
 800fab4:	0800fb09 	.word	0x0800fb09
 800fab8:	0800fa85 	.word	0x0800fa85
 800fabc:	0800fa85 	.word	0x0800fa85
 800fac0:	0800fa85 	.word	0x0800fa85
 800fac4:	0800fa85 	.word	0x0800fa85
 800fac8:	0800fc09 	.word	0x0800fc09
 800facc:	0800fb33 	.word	0x0800fb33
 800fad0:	0800fbc3 	.word	0x0800fbc3
 800fad4:	0800fa85 	.word	0x0800fa85
 800fad8:	0800fa85 	.word	0x0800fa85
 800fadc:	0800fc2b 	.word	0x0800fc2b
 800fae0:	0800fa85 	.word	0x0800fa85
 800fae4:	0800fb33 	.word	0x0800fb33
 800fae8:	0800fa85 	.word	0x0800fa85
 800faec:	0800fa85 	.word	0x0800fa85
 800faf0:	0800fbcb 	.word	0x0800fbcb
 800faf4:	6833      	ldr	r3, [r6, #0]
 800faf6:	1d1a      	adds	r2, r3, #4
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	6032      	str	r2, [r6, #0]
 800fafc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fb00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fb04:	2301      	movs	r3, #1
 800fb06:	e09d      	b.n	800fc44 <_printf_i+0x1e8>
 800fb08:	6833      	ldr	r3, [r6, #0]
 800fb0a:	6820      	ldr	r0, [r4, #0]
 800fb0c:	1d19      	adds	r1, r3, #4
 800fb0e:	6031      	str	r1, [r6, #0]
 800fb10:	0606      	lsls	r6, r0, #24
 800fb12:	d501      	bpl.n	800fb18 <_printf_i+0xbc>
 800fb14:	681d      	ldr	r5, [r3, #0]
 800fb16:	e003      	b.n	800fb20 <_printf_i+0xc4>
 800fb18:	0645      	lsls	r5, r0, #25
 800fb1a:	d5fb      	bpl.n	800fb14 <_printf_i+0xb8>
 800fb1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fb20:	2d00      	cmp	r5, #0
 800fb22:	da03      	bge.n	800fb2c <_printf_i+0xd0>
 800fb24:	232d      	movs	r3, #45	@ 0x2d
 800fb26:	426d      	negs	r5, r5
 800fb28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb2c:	4859      	ldr	r0, [pc, #356]	@ (800fc94 <_printf_i+0x238>)
 800fb2e:	230a      	movs	r3, #10
 800fb30:	e011      	b.n	800fb56 <_printf_i+0xfa>
 800fb32:	6821      	ldr	r1, [r4, #0]
 800fb34:	6833      	ldr	r3, [r6, #0]
 800fb36:	0608      	lsls	r0, r1, #24
 800fb38:	f853 5b04 	ldr.w	r5, [r3], #4
 800fb3c:	d402      	bmi.n	800fb44 <_printf_i+0xe8>
 800fb3e:	0649      	lsls	r1, r1, #25
 800fb40:	bf48      	it	mi
 800fb42:	b2ad      	uxthmi	r5, r5
 800fb44:	2f6f      	cmp	r7, #111	@ 0x6f
 800fb46:	4853      	ldr	r0, [pc, #332]	@ (800fc94 <_printf_i+0x238>)
 800fb48:	6033      	str	r3, [r6, #0]
 800fb4a:	bf14      	ite	ne
 800fb4c:	230a      	movne	r3, #10
 800fb4e:	2308      	moveq	r3, #8
 800fb50:	2100      	movs	r1, #0
 800fb52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fb56:	6866      	ldr	r6, [r4, #4]
 800fb58:	60a6      	str	r6, [r4, #8]
 800fb5a:	2e00      	cmp	r6, #0
 800fb5c:	bfa2      	ittt	ge
 800fb5e:	6821      	ldrge	r1, [r4, #0]
 800fb60:	f021 0104 	bicge.w	r1, r1, #4
 800fb64:	6021      	strge	r1, [r4, #0]
 800fb66:	b90d      	cbnz	r5, 800fb6c <_printf_i+0x110>
 800fb68:	2e00      	cmp	r6, #0
 800fb6a:	d04b      	beq.n	800fc04 <_printf_i+0x1a8>
 800fb6c:	4616      	mov	r6, r2
 800fb6e:	fbb5 f1f3 	udiv	r1, r5, r3
 800fb72:	fb03 5711 	mls	r7, r3, r1, r5
 800fb76:	5dc7      	ldrb	r7, [r0, r7]
 800fb78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fb7c:	462f      	mov	r7, r5
 800fb7e:	42bb      	cmp	r3, r7
 800fb80:	460d      	mov	r5, r1
 800fb82:	d9f4      	bls.n	800fb6e <_printf_i+0x112>
 800fb84:	2b08      	cmp	r3, #8
 800fb86:	d10b      	bne.n	800fba0 <_printf_i+0x144>
 800fb88:	6823      	ldr	r3, [r4, #0]
 800fb8a:	07df      	lsls	r7, r3, #31
 800fb8c:	d508      	bpl.n	800fba0 <_printf_i+0x144>
 800fb8e:	6923      	ldr	r3, [r4, #16]
 800fb90:	6861      	ldr	r1, [r4, #4]
 800fb92:	4299      	cmp	r1, r3
 800fb94:	bfde      	ittt	le
 800fb96:	2330      	movle	r3, #48	@ 0x30
 800fb98:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fb9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fba0:	1b92      	subs	r2, r2, r6
 800fba2:	6122      	str	r2, [r4, #16]
 800fba4:	f8cd a000 	str.w	sl, [sp]
 800fba8:	464b      	mov	r3, r9
 800fbaa:	aa03      	add	r2, sp, #12
 800fbac:	4621      	mov	r1, r4
 800fbae:	4640      	mov	r0, r8
 800fbb0:	f7ff fee6 	bl	800f980 <_printf_common>
 800fbb4:	3001      	adds	r0, #1
 800fbb6:	d14a      	bne.n	800fc4e <_printf_i+0x1f2>
 800fbb8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbbc:	b004      	add	sp, #16
 800fbbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbc2:	6823      	ldr	r3, [r4, #0]
 800fbc4:	f043 0320 	orr.w	r3, r3, #32
 800fbc8:	6023      	str	r3, [r4, #0]
 800fbca:	4833      	ldr	r0, [pc, #204]	@ (800fc98 <_printf_i+0x23c>)
 800fbcc:	2778      	movs	r7, #120	@ 0x78
 800fbce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fbd2:	6823      	ldr	r3, [r4, #0]
 800fbd4:	6831      	ldr	r1, [r6, #0]
 800fbd6:	061f      	lsls	r7, r3, #24
 800fbd8:	f851 5b04 	ldr.w	r5, [r1], #4
 800fbdc:	d402      	bmi.n	800fbe4 <_printf_i+0x188>
 800fbde:	065f      	lsls	r7, r3, #25
 800fbe0:	bf48      	it	mi
 800fbe2:	b2ad      	uxthmi	r5, r5
 800fbe4:	6031      	str	r1, [r6, #0]
 800fbe6:	07d9      	lsls	r1, r3, #31
 800fbe8:	bf44      	itt	mi
 800fbea:	f043 0320 	orrmi.w	r3, r3, #32
 800fbee:	6023      	strmi	r3, [r4, #0]
 800fbf0:	b11d      	cbz	r5, 800fbfa <_printf_i+0x19e>
 800fbf2:	2310      	movs	r3, #16
 800fbf4:	e7ac      	b.n	800fb50 <_printf_i+0xf4>
 800fbf6:	4827      	ldr	r0, [pc, #156]	@ (800fc94 <_printf_i+0x238>)
 800fbf8:	e7e9      	b.n	800fbce <_printf_i+0x172>
 800fbfa:	6823      	ldr	r3, [r4, #0]
 800fbfc:	f023 0320 	bic.w	r3, r3, #32
 800fc00:	6023      	str	r3, [r4, #0]
 800fc02:	e7f6      	b.n	800fbf2 <_printf_i+0x196>
 800fc04:	4616      	mov	r6, r2
 800fc06:	e7bd      	b.n	800fb84 <_printf_i+0x128>
 800fc08:	6833      	ldr	r3, [r6, #0]
 800fc0a:	6825      	ldr	r5, [r4, #0]
 800fc0c:	6961      	ldr	r1, [r4, #20]
 800fc0e:	1d18      	adds	r0, r3, #4
 800fc10:	6030      	str	r0, [r6, #0]
 800fc12:	062e      	lsls	r6, r5, #24
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	d501      	bpl.n	800fc1c <_printf_i+0x1c0>
 800fc18:	6019      	str	r1, [r3, #0]
 800fc1a:	e002      	b.n	800fc22 <_printf_i+0x1c6>
 800fc1c:	0668      	lsls	r0, r5, #25
 800fc1e:	d5fb      	bpl.n	800fc18 <_printf_i+0x1bc>
 800fc20:	8019      	strh	r1, [r3, #0]
 800fc22:	2300      	movs	r3, #0
 800fc24:	6123      	str	r3, [r4, #16]
 800fc26:	4616      	mov	r6, r2
 800fc28:	e7bc      	b.n	800fba4 <_printf_i+0x148>
 800fc2a:	6833      	ldr	r3, [r6, #0]
 800fc2c:	1d1a      	adds	r2, r3, #4
 800fc2e:	6032      	str	r2, [r6, #0]
 800fc30:	681e      	ldr	r6, [r3, #0]
 800fc32:	6862      	ldr	r2, [r4, #4]
 800fc34:	2100      	movs	r1, #0
 800fc36:	4630      	mov	r0, r6
 800fc38:	f7f0 fae2 	bl	8000200 <memchr>
 800fc3c:	b108      	cbz	r0, 800fc42 <_printf_i+0x1e6>
 800fc3e:	1b80      	subs	r0, r0, r6
 800fc40:	6060      	str	r0, [r4, #4]
 800fc42:	6863      	ldr	r3, [r4, #4]
 800fc44:	6123      	str	r3, [r4, #16]
 800fc46:	2300      	movs	r3, #0
 800fc48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc4c:	e7aa      	b.n	800fba4 <_printf_i+0x148>
 800fc4e:	6923      	ldr	r3, [r4, #16]
 800fc50:	4632      	mov	r2, r6
 800fc52:	4649      	mov	r1, r9
 800fc54:	4640      	mov	r0, r8
 800fc56:	47d0      	blx	sl
 800fc58:	3001      	adds	r0, #1
 800fc5a:	d0ad      	beq.n	800fbb8 <_printf_i+0x15c>
 800fc5c:	6823      	ldr	r3, [r4, #0]
 800fc5e:	079b      	lsls	r3, r3, #30
 800fc60:	d413      	bmi.n	800fc8a <_printf_i+0x22e>
 800fc62:	68e0      	ldr	r0, [r4, #12]
 800fc64:	9b03      	ldr	r3, [sp, #12]
 800fc66:	4298      	cmp	r0, r3
 800fc68:	bfb8      	it	lt
 800fc6a:	4618      	movlt	r0, r3
 800fc6c:	e7a6      	b.n	800fbbc <_printf_i+0x160>
 800fc6e:	2301      	movs	r3, #1
 800fc70:	4632      	mov	r2, r6
 800fc72:	4649      	mov	r1, r9
 800fc74:	4640      	mov	r0, r8
 800fc76:	47d0      	blx	sl
 800fc78:	3001      	adds	r0, #1
 800fc7a:	d09d      	beq.n	800fbb8 <_printf_i+0x15c>
 800fc7c:	3501      	adds	r5, #1
 800fc7e:	68e3      	ldr	r3, [r4, #12]
 800fc80:	9903      	ldr	r1, [sp, #12]
 800fc82:	1a5b      	subs	r3, r3, r1
 800fc84:	42ab      	cmp	r3, r5
 800fc86:	dcf2      	bgt.n	800fc6e <_printf_i+0x212>
 800fc88:	e7eb      	b.n	800fc62 <_printf_i+0x206>
 800fc8a:	2500      	movs	r5, #0
 800fc8c:	f104 0619 	add.w	r6, r4, #25
 800fc90:	e7f5      	b.n	800fc7e <_printf_i+0x222>
 800fc92:	bf00      	nop
 800fc94:	08012d66 	.word	0x08012d66
 800fc98:	08012d77 	.word	0x08012d77

0800fc9c <__sflush_r>:
 800fc9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fca4:	0716      	lsls	r6, r2, #28
 800fca6:	4605      	mov	r5, r0
 800fca8:	460c      	mov	r4, r1
 800fcaa:	d454      	bmi.n	800fd56 <__sflush_r+0xba>
 800fcac:	684b      	ldr	r3, [r1, #4]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	dc02      	bgt.n	800fcb8 <__sflush_r+0x1c>
 800fcb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	dd48      	ble.n	800fd4a <__sflush_r+0xae>
 800fcb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fcba:	2e00      	cmp	r6, #0
 800fcbc:	d045      	beq.n	800fd4a <__sflush_r+0xae>
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fcc4:	682f      	ldr	r7, [r5, #0]
 800fcc6:	6a21      	ldr	r1, [r4, #32]
 800fcc8:	602b      	str	r3, [r5, #0]
 800fcca:	d030      	beq.n	800fd2e <__sflush_r+0x92>
 800fccc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fcce:	89a3      	ldrh	r3, [r4, #12]
 800fcd0:	0759      	lsls	r1, r3, #29
 800fcd2:	d505      	bpl.n	800fce0 <__sflush_r+0x44>
 800fcd4:	6863      	ldr	r3, [r4, #4]
 800fcd6:	1ad2      	subs	r2, r2, r3
 800fcd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fcda:	b10b      	cbz	r3, 800fce0 <__sflush_r+0x44>
 800fcdc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fcde:	1ad2      	subs	r2, r2, r3
 800fce0:	2300      	movs	r3, #0
 800fce2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fce4:	6a21      	ldr	r1, [r4, #32]
 800fce6:	4628      	mov	r0, r5
 800fce8:	47b0      	blx	r6
 800fcea:	1c43      	adds	r3, r0, #1
 800fcec:	89a3      	ldrh	r3, [r4, #12]
 800fcee:	d106      	bne.n	800fcfe <__sflush_r+0x62>
 800fcf0:	6829      	ldr	r1, [r5, #0]
 800fcf2:	291d      	cmp	r1, #29
 800fcf4:	d82b      	bhi.n	800fd4e <__sflush_r+0xb2>
 800fcf6:	4a2a      	ldr	r2, [pc, #168]	@ (800fda0 <__sflush_r+0x104>)
 800fcf8:	410a      	asrs	r2, r1
 800fcfa:	07d6      	lsls	r6, r2, #31
 800fcfc:	d427      	bmi.n	800fd4e <__sflush_r+0xb2>
 800fcfe:	2200      	movs	r2, #0
 800fd00:	6062      	str	r2, [r4, #4]
 800fd02:	04d9      	lsls	r1, r3, #19
 800fd04:	6922      	ldr	r2, [r4, #16]
 800fd06:	6022      	str	r2, [r4, #0]
 800fd08:	d504      	bpl.n	800fd14 <__sflush_r+0x78>
 800fd0a:	1c42      	adds	r2, r0, #1
 800fd0c:	d101      	bne.n	800fd12 <__sflush_r+0x76>
 800fd0e:	682b      	ldr	r3, [r5, #0]
 800fd10:	b903      	cbnz	r3, 800fd14 <__sflush_r+0x78>
 800fd12:	6560      	str	r0, [r4, #84]	@ 0x54
 800fd14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fd16:	602f      	str	r7, [r5, #0]
 800fd18:	b1b9      	cbz	r1, 800fd4a <__sflush_r+0xae>
 800fd1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fd1e:	4299      	cmp	r1, r3
 800fd20:	d002      	beq.n	800fd28 <__sflush_r+0x8c>
 800fd22:	4628      	mov	r0, r5
 800fd24:	f7ff fb48 	bl	800f3b8 <_free_r>
 800fd28:	2300      	movs	r3, #0
 800fd2a:	6363      	str	r3, [r4, #52]	@ 0x34
 800fd2c:	e00d      	b.n	800fd4a <__sflush_r+0xae>
 800fd2e:	2301      	movs	r3, #1
 800fd30:	4628      	mov	r0, r5
 800fd32:	47b0      	blx	r6
 800fd34:	4602      	mov	r2, r0
 800fd36:	1c50      	adds	r0, r2, #1
 800fd38:	d1c9      	bne.n	800fcce <__sflush_r+0x32>
 800fd3a:	682b      	ldr	r3, [r5, #0]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d0c6      	beq.n	800fcce <__sflush_r+0x32>
 800fd40:	2b1d      	cmp	r3, #29
 800fd42:	d001      	beq.n	800fd48 <__sflush_r+0xac>
 800fd44:	2b16      	cmp	r3, #22
 800fd46:	d11e      	bne.n	800fd86 <__sflush_r+0xea>
 800fd48:	602f      	str	r7, [r5, #0]
 800fd4a:	2000      	movs	r0, #0
 800fd4c:	e022      	b.n	800fd94 <__sflush_r+0xf8>
 800fd4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd52:	b21b      	sxth	r3, r3
 800fd54:	e01b      	b.n	800fd8e <__sflush_r+0xf2>
 800fd56:	690f      	ldr	r7, [r1, #16]
 800fd58:	2f00      	cmp	r7, #0
 800fd5a:	d0f6      	beq.n	800fd4a <__sflush_r+0xae>
 800fd5c:	0793      	lsls	r3, r2, #30
 800fd5e:	680e      	ldr	r6, [r1, #0]
 800fd60:	bf08      	it	eq
 800fd62:	694b      	ldreq	r3, [r1, #20]
 800fd64:	600f      	str	r7, [r1, #0]
 800fd66:	bf18      	it	ne
 800fd68:	2300      	movne	r3, #0
 800fd6a:	eba6 0807 	sub.w	r8, r6, r7
 800fd6e:	608b      	str	r3, [r1, #8]
 800fd70:	f1b8 0f00 	cmp.w	r8, #0
 800fd74:	dde9      	ble.n	800fd4a <__sflush_r+0xae>
 800fd76:	6a21      	ldr	r1, [r4, #32]
 800fd78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fd7a:	4643      	mov	r3, r8
 800fd7c:	463a      	mov	r2, r7
 800fd7e:	4628      	mov	r0, r5
 800fd80:	47b0      	blx	r6
 800fd82:	2800      	cmp	r0, #0
 800fd84:	dc08      	bgt.n	800fd98 <__sflush_r+0xfc>
 800fd86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd8e:	81a3      	strh	r3, [r4, #12]
 800fd90:	f04f 30ff 	mov.w	r0, #4294967295
 800fd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd98:	4407      	add	r7, r0
 800fd9a:	eba8 0800 	sub.w	r8, r8, r0
 800fd9e:	e7e7      	b.n	800fd70 <__sflush_r+0xd4>
 800fda0:	dfbffffe 	.word	0xdfbffffe

0800fda4 <_fflush_r>:
 800fda4:	b538      	push	{r3, r4, r5, lr}
 800fda6:	690b      	ldr	r3, [r1, #16]
 800fda8:	4605      	mov	r5, r0
 800fdaa:	460c      	mov	r4, r1
 800fdac:	b913      	cbnz	r3, 800fdb4 <_fflush_r+0x10>
 800fdae:	2500      	movs	r5, #0
 800fdb0:	4628      	mov	r0, r5
 800fdb2:	bd38      	pop	{r3, r4, r5, pc}
 800fdb4:	b118      	cbz	r0, 800fdbe <_fflush_r+0x1a>
 800fdb6:	6a03      	ldr	r3, [r0, #32]
 800fdb8:	b90b      	cbnz	r3, 800fdbe <_fflush_r+0x1a>
 800fdba:	f7ff f995 	bl	800f0e8 <__sinit>
 800fdbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d0f3      	beq.n	800fdae <_fflush_r+0xa>
 800fdc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fdc8:	07d0      	lsls	r0, r2, #31
 800fdca:	d404      	bmi.n	800fdd6 <_fflush_r+0x32>
 800fdcc:	0599      	lsls	r1, r3, #22
 800fdce:	d402      	bmi.n	800fdd6 <_fflush_r+0x32>
 800fdd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fdd2:	f7ff fae6 	bl	800f3a2 <__retarget_lock_acquire_recursive>
 800fdd6:	4628      	mov	r0, r5
 800fdd8:	4621      	mov	r1, r4
 800fdda:	f7ff ff5f 	bl	800fc9c <__sflush_r>
 800fdde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fde0:	07da      	lsls	r2, r3, #31
 800fde2:	4605      	mov	r5, r0
 800fde4:	d4e4      	bmi.n	800fdb0 <_fflush_r+0xc>
 800fde6:	89a3      	ldrh	r3, [r4, #12]
 800fde8:	059b      	lsls	r3, r3, #22
 800fdea:	d4e1      	bmi.n	800fdb0 <_fflush_r+0xc>
 800fdec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fdee:	f7ff fad9 	bl	800f3a4 <__retarget_lock_release_recursive>
 800fdf2:	e7dd      	b.n	800fdb0 <_fflush_r+0xc>

0800fdf4 <_putc_r>:
 800fdf4:	b570      	push	{r4, r5, r6, lr}
 800fdf6:	460d      	mov	r5, r1
 800fdf8:	4614      	mov	r4, r2
 800fdfa:	4606      	mov	r6, r0
 800fdfc:	b118      	cbz	r0, 800fe06 <_putc_r+0x12>
 800fdfe:	6a03      	ldr	r3, [r0, #32]
 800fe00:	b90b      	cbnz	r3, 800fe06 <_putc_r+0x12>
 800fe02:	f7ff f971 	bl	800f0e8 <__sinit>
 800fe06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fe08:	07d8      	lsls	r0, r3, #31
 800fe0a:	d405      	bmi.n	800fe18 <_putc_r+0x24>
 800fe0c:	89a3      	ldrh	r3, [r4, #12]
 800fe0e:	0599      	lsls	r1, r3, #22
 800fe10:	d402      	bmi.n	800fe18 <_putc_r+0x24>
 800fe12:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fe14:	f7ff fac5 	bl	800f3a2 <__retarget_lock_acquire_recursive>
 800fe18:	68a3      	ldr	r3, [r4, #8]
 800fe1a:	3b01      	subs	r3, #1
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	60a3      	str	r3, [r4, #8]
 800fe20:	da05      	bge.n	800fe2e <_putc_r+0x3a>
 800fe22:	69a2      	ldr	r2, [r4, #24]
 800fe24:	4293      	cmp	r3, r2
 800fe26:	db12      	blt.n	800fe4e <_putc_r+0x5a>
 800fe28:	b2eb      	uxtb	r3, r5
 800fe2a:	2b0a      	cmp	r3, #10
 800fe2c:	d00f      	beq.n	800fe4e <_putc_r+0x5a>
 800fe2e:	6823      	ldr	r3, [r4, #0]
 800fe30:	1c5a      	adds	r2, r3, #1
 800fe32:	6022      	str	r2, [r4, #0]
 800fe34:	701d      	strb	r5, [r3, #0]
 800fe36:	b2ed      	uxtb	r5, r5
 800fe38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fe3a:	07da      	lsls	r2, r3, #31
 800fe3c:	d405      	bmi.n	800fe4a <_putc_r+0x56>
 800fe3e:	89a3      	ldrh	r3, [r4, #12]
 800fe40:	059b      	lsls	r3, r3, #22
 800fe42:	d402      	bmi.n	800fe4a <_putc_r+0x56>
 800fe44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fe46:	f7ff faad 	bl	800f3a4 <__retarget_lock_release_recursive>
 800fe4a:	4628      	mov	r0, r5
 800fe4c:	bd70      	pop	{r4, r5, r6, pc}
 800fe4e:	4629      	mov	r1, r5
 800fe50:	4622      	mov	r2, r4
 800fe52:	4630      	mov	r0, r6
 800fe54:	f000 f802 	bl	800fe5c <__swbuf_r>
 800fe58:	4605      	mov	r5, r0
 800fe5a:	e7ed      	b.n	800fe38 <_putc_r+0x44>

0800fe5c <__swbuf_r>:
 800fe5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe5e:	460e      	mov	r6, r1
 800fe60:	4614      	mov	r4, r2
 800fe62:	4605      	mov	r5, r0
 800fe64:	b118      	cbz	r0, 800fe6e <__swbuf_r+0x12>
 800fe66:	6a03      	ldr	r3, [r0, #32]
 800fe68:	b90b      	cbnz	r3, 800fe6e <__swbuf_r+0x12>
 800fe6a:	f7ff f93d 	bl	800f0e8 <__sinit>
 800fe6e:	69a3      	ldr	r3, [r4, #24]
 800fe70:	60a3      	str	r3, [r4, #8]
 800fe72:	89a3      	ldrh	r3, [r4, #12]
 800fe74:	071a      	lsls	r2, r3, #28
 800fe76:	d501      	bpl.n	800fe7c <__swbuf_r+0x20>
 800fe78:	6923      	ldr	r3, [r4, #16]
 800fe7a:	b943      	cbnz	r3, 800fe8e <__swbuf_r+0x32>
 800fe7c:	4621      	mov	r1, r4
 800fe7e:	4628      	mov	r0, r5
 800fe80:	f000 f82a 	bl	800fed8 <__swsetup_r>
 800fe84:	b118      	cbz	r0, 800fe8e <__swbuf_r+0x32>
 800fe86:	f04f 37ff 	mov.w	r7, #4294967295
 800fe8a:	4638      	mov	r0, r7
 800fe8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe8e:	6823      	ldr	r3, [r4, #0]
 800fe90:	6922      	ldr	r2, [r4, #16]
 800fe92:	1a98      	subs	r0, r3, r2
 800fe94:	6963      	ldr	r3, [r4, #20]
 800fe96:	b2f6      	uxtb	r6, r6
 800fe98:	4283      	cmp	r3, r0
 800fe9a:	4637      	mov	r7, r6
 800fe9c:	dc05      	bgt.n	800feaa <__swbuf_r+0x4e>
 800fe9e:	4621      	mov	r1, r4
 800fea0:	4628      	mov	r0, r5
 800fea2:	f7ff ff7f 	bl	800fda4 <_fflush_r>
 800fea6:	2800      	cmp	r0, #0
 800fea8:	d1ed      	bne.n	800fe86 <__swbuf_r+0x2a>
 800feaa:	68a3      	ldr	r3, [r4, #8]
 800feac:	3b01      	subs	r3, #1
 800feae:	60a3      	str	r3, [r4, #8]
 800feb0:	6823      	ldr	r3, [r4, #0]
 800feb2:	1c5a      	adds	r2, r3, #1
 800feb4:	6022      	str	r2, [r4, #0]
 800feb6:	701e      	strb	r6, [r3, #0]
 800feb8:	6962      	ldr	r2, [r4, #20]
 800feba:	1c43      	adds	r3, r0, #1
 800febc:	429a      	cmp	r2, r3
 800febe:	d004      	beq.n	800feca <__swbuf_r+0x6e>
 800fec0:	89a3      	ldrh	r3, [r4, #12]
 800fec2:	07db      	lsls	r3, r3, #31
 800fec4:	d5e1      	bpl.n	800fe8a <__swbuf_r+0x2e>
 800fec6:	2e0a      	cmp	r6, #10
 800fec8:	d1df      	bne.n	800fe8a <__swbuf_r+0x2e>
 800feca:	4621      	mov	r1, r4
 800fecc:	4628      	mov	r0, r5
 800fece:	f7ff ff69 	bl	800fda4 <_fflush_r>
 800fed2:	2800      	cmp	r0, #0
 800fed4:	d0d9      	beq.n	800fe8a <__swbuf_r+0x2e>
 800fed6:	e7d6      	b.n	800fe86 <__swbuf_r+0x2a>

0800fed8 <__swsetup_r>:
 800fed8:	b538      	push	{r3, r4, r5, lr}
 800feda:	4b29      	ldr	r3, [pc, #164]	@ (800ff80 <__swsetup_r+0xa8>)
 800fedc:	4605      	mov	r5, r0
 800fede:	6818      	ldr	r0, [r3, #0]
 800fee0:	460c      	mov	r4, r1
 800fee2:	b118      	cbz	r0, 800feec <__swsetup_r+0x14>
 800fee4:	6a03      	ldr	r3, [r0, #32]
 800fee6:	b90b      	cbnz	r3, 800feec <__swsetup_r+0x14>
 800fee8:	f7ff f8fe 	bl	800f0e8 <__sinit>
 800feec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fef0:	0719      	lsls	r1, r3, #28
 800fef2:	d422      	bmi.n	800ff3a <__swsetup_r+0x62>
 800fef4:	06da      	lsls	r2, r3, #27
 800fef6:	d407      	bmi.n	800ff08 <__swsetup_r+0x30>
 800fef8:	2209      	movs	r2, #9
 800fefa:	602a      	str	r2, [r5, #0]
 800fefc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff00:	81a3      	strh	r3, [r4, #12]
 800ff02:	f04f 30ff 	mov.w	r0, #4294967295
 800ff06:	e033      	b.n	800ff70 <__swsetup_r+0x98>
 800ff08:	0758      	lsls	r0, r3, #29
 800ff0a:	d512      	bpl.n	800ff32 <__swsetup_r+0x5a>
 800ff0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ff0e:	b141      	cbz	r1, 800ff22 <__swsetup_r+0x4a>
 800ff10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ff14:	4299      	cmp	r1, r3
 800ff16:	d002      	beq.n	800ff1e <__swsetup_r+0x46>
 800ff18:	4628      	mov	r0, r5
 800ff1a:	f7ff fa4d 	bl	800f3b8 <_free_r>
 800ff1e:	2300      	movs	r3, #0
 800ff20:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff22:	89a3      	ldrh	r3, [r4, #12]
 800ff24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ff28:	81a3      	strh	r3, [r4, #12]
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	6063      	str	r3, [r4, #4]
 800ff2e:	6923      	ldr	r3, [r4, #16]
 800ff30:	6023      	str	r3, [r4, #0]
 800ff32:	89a3      	ldrh	r3, [r4, #12]
 800ff34:	f043 0308 	orr.w	r3, r3, #8
 800ff38:	81a3      	strh	r3, [r4, #12]
 800ff3a:	6923      	ldr	r3, [r4, #16]
 800ff3c:	b94b      	cbnz	r3, 800ff52 <__swsetup_r+0x7a>
 800ff3e:	89a3      	ldrh	r3, [r4, #12]
 800ff40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ff44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ff48:	d003      	beq.n	800ff52 <__swsetup_r+0x7a>
 800ff4a:	4621      	mov	r1, r4
 800ff4c:	4628      	mov	r0, r5
 800ff4e:	f000 f895 	bl	801007c <__smakebuf_r>
 800ff52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff56:	f013 0201 	ands.w	r2, r3, #1
 800ff5a:	d00a      	beq.n	800ff72 <__swsetup_r+0x9a>
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	60a2      	str	r2, [r4, #8]
 800ff60:	6962      	ldr	r2, [r4, #20]
 800ff62:	4252      	negs	r2, r2
 800ff64:	61a2      	str	r2, [r4, #24]
 800ff66:	6922      	ldr	r2, [r4, #16]
 800ff68:	b942      	cbnz	r2, 800ff7c <__swsetup_r+0xa4>
 800ff6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ff6e:	d1c5      	bne.n	800fefc <__swsetup_r+0x24>
 800ff70:	bd38      	pop	{r3, r4, r5, pc}
 800ff72:	0799      	lsls	r1, r3, #30
 800ff74:	bf58      	it	pl
 800ff76:	6962      	ldrpl	r2, [r4, #20]
 800ff78:	60a2      	str	r2, [r4, #8]
 800ff7a:	e7f4      	b.n	800ff66 <__swsetup_r+0x8e>
 800ff7c:	2000      	movs	r0, #0
 800ff7e:	e7f7      	b.n	800ff70 <__swsetup_r+0x98>
 800ff80:	200002a0 	.word	0x200002a0

0800ff84 <memmove>:
 800ff84:	4288      	cmp	r0, r1
 800ff86:	b510      	push	{r4, lr}
 800ff88:	eb01 0402 	add.w	r4, r1, r2
 800ff8c:	d902      	bls.n	800ff94 <memmove+0x10>
 800ff8e:	4284      	cmp	r4, r0
 800ff90:	4623      	mov	r3, r4
 800ff92:	d807      	bhi.n	800ffa4 <memmove+0x20>
 800ff94:	1e43      	subs	r3, r0, #1
 800ff96:	42a1      	cmp	r1, r4
 800ff98:	d008      	beq.n	800ffac <memmove+0x28>
 800ff9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ffa2:	e7f8      	b.n	800ff96 <memmove+0x12>
 800ffa4:	4402      	add	r2, r0
 800ffa6:	4601      	mov	r1, r0
 800ffa8:	428a      	cmp	r2, r1
 800ffaa:	d100      	bne.n	800ffae <memmove+0x2a>
 800ffac:	bd10      	pop	{r4, pc}
 800ffae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ffb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ffb6:	e7f7      	b.n	800ffa8 <memmove+0x24>

0800ffb8 <memcpy>:
 800ffb8:	440a      	add	r2, r1
 800ffba:	4291      	cmp	r1, r2
 800ffbc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ffc0:	d100      	bne.n	800ffc4 <memcpy+0xc>
 800ffc2:	4770      	bx	lr
 800ffc4:	b510      	push	{r4, lr}
 800ffc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ffce:	4291      	cmp	r1, r2
 800ffd0:	d1f9      	bne.n	800ffc6 <memcpy+0xe>
 800ffd2:	bd10      	pop	{r4, pc}

0800ffd4 <_realloc_r>:
 800ffd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffd8:	4680      	mov	r8, r0
 800ffda:	4615      	mov	r5, r2
 800ffdc:	460c      	mov	r4, r1
 800ffde:	b921      	cbnz	r1, 800ffea <_realloc_r+0x16>
 800ffe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffe4:	4611      	mov	r1, r2
 800ffe6:	f7fe bee3 	b.w	800edb0 <_malloc_r>
 800ffea:	b92a      	cbnz	r2, 800fff8 <_realloc_r+0x24>
 800ffec:	f7ff f9e4 	bl	800f3b8 <_free_r>
 800fff0:	2400      	movs	r4, #0
 800fff2:	4620      	mov	r0, r4
 800fff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fff8:	f000 f89e 	bl	8010138 <_malloc_usable_size_r>
 800fffc:	4285      	cmp	r5, r0
 800fffe:	4606      	mov	r6, r0
 8010000:	d802      	bhi.n	8010008 <_realloc_r+0x34>
 8010002:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010006:	d8f4      	bhi.n	800fff2 <_realloc_r+0x1e>
 8010008:	4629      	mov	r1, r5
 801000a:	4640      	mov	r0, r8
 801000c:	f7fe fed0 	bl	800edb0 <_malloc_r>
 8010010:	4607      	mov	r7, r0
 8010012:	2800      	cmp	r0, #0
 8010014:	d0ec      	beq.n	800fff0 <_realloc_r+0x1c>
 8010016:	42b5      	cmp	r5, r6
 8010018:	462a      	mov	r2, r5
 801001a:	4621      	mov	r1, r4
 801001c:	bf28      	it	cs
 801001e:	4632      	movcs	r2, r6
 8010020:	f7ff ffca 	bl	800ffb8 <memcpy>
 8010024:	4621      	mov	r1, r4
 8010026:	4640      	mov	r0, r8
 8010028:	f7ff f9c6 	bl	800f3b8 <_free_r>
 801002c:	463c      	mov	r4, r7
 801002e:	e7e0      	b.n	800fff2 <_realloc_r+0x1e>

08010030 <__swhatbuf_r>:
 8010030:	b570      	push	{r4, r5, r6, lr}
 8010032:	460c      	mov	r4, r1
 8010034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010038:	2900      	cmp	r1, #0
 801003a:	b096      	sub	sp, #88	@ 0x58
 801003c:	4615      	mov	r5, r2
 801003e:	461e      	mov	r6, r3
 8010040:	da0d      	bge.n	801005e <__swhatbuf_r+0x2e>
 8010042:	89a3      	ldrh	r3, [r4, #12]
 8010044:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010048:	f04f 0100 	mov.w	r1, #0
 801004c:	bf14      	ite	ne
 801004e:	2340      	movne	r3, #64	@ 0x40
 8010050:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010054:	2000      	movs	r0, #0
 8010056:	6031      	str	r1, [r6, #0]
 8010058:	602b      	str	r3, [r5, #0]
 801005a:	b016      	add	sp, #88	@ 0x58
 801005c:	bd70      	pop	{r4, r5, r6, pc}
 801005e:	466a      	mov	r2, sp
 8010060:	f000 f848 	bl	80100f4 <_fstat_r>
 8010064:	2800      	cmp	r0, #0
 8010066:	dbec      	blt.n	8010042 <__swhatbuf_r+0x12>
 8010068:	9901      	ldr	r1, [sp, #4]
 801006a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801006e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010072:	4259      	negs	r1, r3
 8010074:	4159      	adcs	r1, r3
 8010076:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801007a:	e7eb      	b.n	8010054 <__swhatbuf_r+0x24>

0801007c <__smakebuf_r>:
 801007c:	898b      	ldrh	r3, [r1, #12]
 801007e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010080:	079d      	lsls	r5, r3, #30
 8010082:	4606      	mov	r6, r0
 8010084:	460c      	mov	r4, r1
 8010086:	d507      	bpl.n	8010098 <__smakebuf_r+0x1c>
 8010088:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801008c:	6023      	str	r3, [r4, #0]
 801008e:	6123      	str	r3, [r4, #16]
 8010090:	2301      	movs	r3, #1
 8010092:	6163      	str	r3, [r4, #20]
 8010094:	b003      	add	sp, #12
 8010096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010098:	ab01      	add	r3, sp, #4
 801009a:	466a      	mov	r2, sp
 801009c:	f7ff ffc8 	bl	8010030 <__swhatbuf_r>
 80100a0:	9f00      	ldr	r7, [sp, #0]
 80100a2:	4605      	mov	r5, r0
 80100a4:	4639      	mov	r1, r7
 80100a6:	4630      	mov	r0, r6
 80100a8:	f7fe fe82 	bl	800edb0 <_malloc_r>
 80100ac:	b948      	cbnz	r0, 80100c2 <__smakebuf_r+0x46>
 80100ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100b2:	059a      	lsls	r2, r3, #22
 80100b4:	d4ee      	bmi.n	8010094 <__smakebuf_r+0x18>
 80100b6:	f023 0303 	bic.w	r3, r3, #3
 80100ba:	f043 0302 	orr.w	r3, r3, #2
 80100be:	81a3      	strh	r3, [r4, #12]
 80100c0:	e7e2      	b.n	8010088 <__smakebuf_r+0xc>
 80100c2:	89a3      	ldrh	r3, [r4, #12]
 80100c4:	6020      	str	r0, [r4, #0]
 80100c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80100ca:	81a3      	strh	r3, [r4, #12]
 80100cc:	9b01      	ldr	r3, [sp, #4]
 80100ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80100d2:	b15b      	cbz	r3, 80100ec <__smakebuf_r+0x70>
 80100d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80100d8:	4630      	mov	r0, r6
 80100da:	f000 f81d 	bl	8010118 <_isatty_r>
 80100de:	b128      	cbz	r0, 80100ec <__smakebuf_r+0x70>
 80100e0:	89a3      	ldrh	r3, [r4, #12]
 80100e2:	f023 0303 	bic.w	r3, r3, #3
 80100e6:	f043 0301 	orr.w	r3, r3, #1
 80100ea:	81a3      	strh	r3, [r4, #12]
 80100ec:	89a3      	ldrh	r3, [r4, #12]
 80100ee:	431d      	orrs	r5, r3
 80100f0:	81a5      	strh	r5, [r4, #12]
 80100f2:	e7cf      	b.n	8010094 <__smakebuf_r+0x18>

080100f4 <_fstat_r>:
 80100f4:	b538      	push	{r3, r4, r5, lr}
 80100f6:	4d07      	ldr	r5, [pc, #28]	@ (8010114 <_fstat_r+0x20>)
 80100f8:	2300      	movs	r3, #0
 80100fa:	4604      	mov	r4, r0
 80100fc:	4608      	mov	r0, r1
 80100fe:	4611      	mov	r1, r2
 8010100:	602b      	str	r3, [r5, #0]
 8010102:	f7f4 f8a0 	bl	8004246 <_fstat>
 8010106:	1c43      	adds	r3, r0, #1
 8010108:	d102      	bne.n	8010110 <_fstat_r+0x1c>
 801010a:	682b      	ldr	r3, [r5, #0]
 801010c:	b103      	cbz	r3, 8010110 <_fstat_r+0x1c>
 801010e:	6023      	str	r3, [r4, #0]
 8010110:	bd38      	pop	{r3, r4, r5, pc}
 8010112:	bf00      	nop
 8010114:	20012248 	.word	0x20012248

08010118 <_isatty_r>:
 8010118:	b538      	push	{r3, r4, r5, lr}
 801011a:	4d06      	ldr	r5, [pc, #24]	@ (8010134 <_isatty_r+0x1c>)
 801011c:	2300      	movs	r3, #0
 801011e:	4604      	mov	r4, r0
 8010120:	4608      	mov	r0, r1
 8010122:	602b      	str	r3, [r5, #0]
 8010124:	f7f4 f89f 	bl	8004266 <_isatty>
 8010128:	1c43      	adds	r3, r0, #1
 801012a:	d102      	bne.n	8010132 <_isatty_r+0x1a>
 801012c:	682b      	ldr	r3, [r5, #0]
 801012e:	b103      	cbz	r3, 8010132 <_isatty_r+0x1a>
 8010130:	6023      	str	r3, [r4, #0]
 8010132:	bd38      	pop	{r3, r4, r5, pc}
 8010134:	20012248 	.word	0x20012248

08010138 <_malloc_usable_size_r>:
 8010138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801013c:	1f18      	subs	r0, r3, #4
 801013e:	2b00      	cmp	r3, #0
 8010140:	bfbc      	itt	lt
 8010142:	580b      	ldrlt	r3, [r1, r0]
 8010144:	18c0      	addlt	r0, r0, r3
 8010146:	4770      	bx	lr

08010148 <_init>:
 8010148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801014a:	bf00      	nop
 801014c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801014e:	bc08      	pop	{r3}
 8010150:	469e      	mov	lr, r3
 8010152:	4770      	bx	lr

08010154 <_fini>:
 8010154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010156:	bf00      	nop
 8010158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801015a:	bc08      	pop	{r3}
 801015c:	469e      	mov	lr, r3
 801015e:	4770      	bx	lr
