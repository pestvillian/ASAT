
usb_AND_touchscreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012498  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000040dc  08012648  08012648  00013648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016724  08016724  00018270  2**0
                  CONTENTS
  4 .ARM          00000008  08016724  08016724  00017724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801672c  0801672c  00018270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801672c  0801672c  0001772c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016730  08016730  00017730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000270  20000000  08016734  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00018270  2**0
                  CONTENTS
 10 .bss          000095ac  20000270  20000270  00018270  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000981c  2000981c  00018270  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00018270  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d647  00000000  00000000  000182a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006a34  00000000  00000000  000458e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025b0  00000000  00000000  0004c320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d26  00000000  00000000  0004e8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d8c3  00000000  00000000  000505f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00030677  00000000  00000000  0007deb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4bcc  00000000  00000000  000ae530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a30fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a8bc  00000000  00000000  001a3140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  001ad9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000270 	.word	0x20000270
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012630 	.word	0x08012630

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000274 	.word	0x20000274
 80001ec:	08012630 	.word	0x08012630

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <USBH_HID_EventCallback>:
static uint8_t USB_BUSY = 0;
char qr_code_data[MAX_LINES][MAX_LINE_LENGTH] = {{'\0'}};  //static initializes strings with all null characters
HID_KEYBD_Info_TypeDef *Keyboard_Info;

/***DORJEE YOU HAVE TO CHANGE USBH_HID.H WHEN YOU GENERATE CODE****/
void USBH_HID_EventCallback(USBH_HandleTypeDef *phost) { //2.6s for 54 lines
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	Keyboard_Info = USBH_HID_GetKeybdInfo(phost);
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f00e fb01 	bl	800eba0 <USBH_HID_GetKeybdInfo>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a41      	ldr	r2, [pc, #260]	@ (80006a8 <USBH_HID_EventCallback+0x118>)
 80005a2:	6013      	str	r3, [r2, #0]
	char key = USBH_HID_GetASCIICode(Keyboard_Info);
 80005a4:	4b40      	ldr	r3, [pc, #256]	@ (80006a8 <USBH_HID_EventCallback+0x118>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f00e fba1 	bl	800ecf0 <USBH_HID_GetASCIICode>
 80005ae:	4603      	mov	r3, r0
 80005b0:	73fb      	strb	r3, [r7, #15]
	//disable the touchscreen interrupt functionality when usb transmission starts
	//after tab it calls itself one more time, so disable after i=0
	if (i == 1) {
 80005b2:	4b3e      	ldr	r3, [pc, #248]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d102      	bne.n	80005c0 <USBH_HID_EventCallback+0x30>
		USB_BUSY = 1;
 80005ba:	4b3d      	ldr	r3, [pc, #244]	@ (80006b0 <USBH_HID_EventCallback+0x120>)
 80005bc:	2201      	movs	r2, #1
 80005be:	701a      	strb	r2, [r3, #0]
	}

	//store incoming chars. ignore null characters that come in for some reason
	if ((key != NULL_CHAR) && (key != SOH)) {
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d015      	beq.n	80005f2 <USBH_HID_EventCallback+0x62>
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d012      	beq.n	80005f2 <USBH_HID_EventCallback+0x62>
		qr_code_data[i][j] = key;
 80005cc:	4b37      	ldr	r3, [pc, #220]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b38      	ldr	r3, [pc, #224]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 80005d2:	6819      	ldr	r1, [r3, #0]
 80005d4:	4838      	ldr	r0, [pc, #224]	@ (80006b8 <USBH_HID_EventCallback+0x128>)
 80005d6:	4613      	mov	r3, r2
 80005d8:	00db      	lsls	r3, r3, #3
 80005da:	1a9b      	subs	r3, r3, r2
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	4413      	add	r3, r2
 80005e0:	4403      	add	r3, r0
 80005e2:	440b      	add	r3, r1
 80005e4:	7bfa      	ldrb	r2, [r7, #15]
 80005e6:	701a      	strb	r2, [r3, #0]
		j++;
 80005e8:	4b32      	ldr	r3, [pc, #200]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a31      	ldr	r2, [pc, #196]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 80005f0:	6013      	str	r3, [r2, #0]
	}
	//handle new line
	if (key == NEWLINE_CHAR) {
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b0a      	cmp	r3, #10
 80005f6:	d107      	bne.n	8000608 <USBH_HID_EventCallback+0x78>
		j = 0;
 80005f8:	4b2e      	ldr	r3, [pc, #184]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
		i++;
 80005fe:	4b2b      	ldr	r3, [pc, #172]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	4a29      	ldr	r2, [pc, #164]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 8000606:	6013      	str	r3, [r2, #0]
	}
	//tab is the end of the qr code
	if (key == TAB) {
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	2b09      	cmp	r3, #9
 800060c:	d147      	bne.n	800069e <USBH_HID_EventCallback+0x10e>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060e:	b672      	cpsid	i
}
 8000610:	bf00      	nop
		__disable_irq();
		//output_protocol(qr_code_data, i + 1);
		//check if the title is (10 chars + newline char) or less
		if (strlen(qr_code_data[0]) < (MAX_TITLE_SIZE + 1)) {
 8000612:	4829      	ldr	r0, [pc, #164]	@ (80006b8 <USBH_HID_EventCallback+0x128>)
 8000614:	f7ff fdec 	bl	80001f0 <strlen>
 8000618:	4603      	mov	r3, r0
 800061a:	2b0a      	cmp	r3, #10
 800061c:	d839      	bhi.n	8000692 <USBH_HID_EventCallback+0x102>
			uint8_t freeSectorNumber = getFreeSector();
 800061e:	f000 feb4 	bl	800138a <getFreeSector>
 8000622:	4603      	mov	r3, r0
 8000624:	73bb      	strb	r3, [r7, #14]
			//printf("free sector is %d\n", freeSectorNumber);
			//only store the protocol if all memory isnt full
			if (freeSectorNumber <= 10) { //i only got 10 pages rn
 8000626:	7bbb      	ldrb	r3, [r7, #14]
 8000628:	2b0a      	cmp	r3, #10
 800062a:	d82d      	bhi.n	8000688 <USBH_HID_EventCallback+0xf8>
				//printf("why\n");
				storeProtocol(qr_code_data, freeSectorNumber);
 800062c:	7bbb      	ldrb	r3, [r7, #14]
 800062e:	4619      	mov	r1, r3
 8000630:	4821      	ldr	r0, [pc, #132]	@ (80006b8 <USBH_HID_EventCallback+0x128>)
 8000632:	f000 fcbd 	bl	8000fb0 <storeProtocol>
				//go to the page num the new protocol is on
				pageNum = freeSectorNumber;
 8000636:	4a21      	ldr	r2, [pc, #132]	@ (80006bc <USBH_HID_EventCallback+0x12c>)
 8000638:	7bbb      	ldrb	r3, [r7, #14]
 800063a:	7013      	strb	r3, [r2, #0]
				DrawMainPage(pageNum);
 800063c:	4b1f      	ldr	r3, [pc, #124]	@ (80006bc <USBH_HID_EventCallback+0x12c>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f001 f819 	bl	8001678 <DrawMainPage>
				currentPage = PAGE_MAIN;
 8000646:	4b1e      	ldr	r3, [pc, #120]	@ (80006c0 <USBH_HID_EventCallback+0x130>)
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
				for (int a=0; a<MAX_LINES; a++) {
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
 8000650:	e017      	b.n	8000682 <USBH_HID_EventCallback+0xf2>
					for(int b=0; b<MAX_LINE_LENGTH; b++) {
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
 8000656:	e00e      	b.n	8000676 <USBH_HID_EventCallback+0xe6>
						qr_code_data[a][b] = '\0';
 8000658:	4917      	ldr	r1, [pc, #92]	@ (80006b8 <USBH_HID_EventCallback+0x128>)
 800065a:	697a      	ldr	r2, [r7, #20]
 800065c:	4613      	mov	r3, r2
 800065e:	00db      	lsls	r3, r3, #3
 8000660:	1a9b      	subs	r3, r3, r2
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	4413      	add	r3, r2
 8000666:	18ca      	adds	r2, r1, r3
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	4413      	add	r3, r2
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
					for(int b=0; b<MAX_LINE_LENGTH; b++) {
 8000670:	693b      	ldr	r3, [r7, #16]
 8000672:	3301      	adds	r3, #1
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	2b1c      	cmp	r3, #28
 800067a:	dded      	ble.n	8000658 <USBH_HID_EventCallback+0xc8>
				for (int a=0; a<MAX_LINES; a++) {
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	3301      	adds	r3, #1
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	2b63      	cmp	r3, #99	@ 0x63
 8000686:	dde4      	ble.n	8000652 <USBH_HID_EventCallback+0xc2>
  __ASM volatile ("cpsie i" : : : "memory");
 8000688:	b662      	cpsie	i
}
 800068a:	bf00      	nop
					}
				}

			}
			__enable_irq();
			USB_BUSY = 0;
 800068c:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <USBH_HID_EventCallback+0x120>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
		}
		i = 0;
 8000692:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
		j = 0;
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
	}

}
 800069e:	bf00      	nop
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200081ec 	.word	0x200081ec
 80006ac:	20000544 	.word	0x20000544
 80006b0:	20007695 	.word	0x20007695
 80006b4:	20000548 	.word	0x20000548
 80006b8:	20007698 	.word	0x20007698
 80006bc:	20000162 	.word	0x20000162
 80006c0:	20000541 	.word	0x20000541

080006c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006c8:	f004 fb8e 	bl	8004de8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006cc:	f000 f844 	bl	8000758 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006d0:	f000 fad6 	bl	8000c80 <MX_GPIO_Init>
	MX_CRC_Init();
 80006d4:	f000 f8aa 	bl	800082c <MX_CRC_Init>
	MX_DMA2D_Init();
 80006d8:	f000 f8bc 	bl	8000854 <MX_DMA2D_Init>
	MX_FMC_Init();
 80006dc:	f000 fa80 	bl	8000be0 <MX_FMC_Init>
	MX_I2C3_Init();
 80006e0:	f000 f8ea 	bl	80008b8 <MX_I2C3_Init>
	MX_LTDC_Init();
 80006e4:	f000 f928 	bl	8000938 <MX_LTDC_Init>
	MX_SPI5_Init();
 80006e8:	f000 f9a6 	bl	8000a38 <MX_SPI5_Init>
	MX_TIM1_Init();
 80006ec:	f000 f9da 	bl	8000aa4 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 80006f0:	f000 fa4c 	bl	8000b8c <MX_USART1_UART_Init>
	MX_USB_HOST_Init();
 80006f4:	f010 fad4 	bl	8010ca0 <MX_USB_HOST_Init>
	MX_TIM10_Init();
 80006f8:	f000 fa24 	bl	8000b44 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */
	printf("USB and Touchscreen Test\n");
 80006fc:	4812      	ldr	r0, [pc, #72]	@ (8000748 <main+0x84>)
 80006fe:	f010 ffcf 	bl	80116a0 <puts>
//	erase_sector(6);
//	erase_sector(7);
//	erase_sector(8);
//	erase_sector(9);
//	erase_sector(10);
	printf("Sectors may have been erased\n");
 8000702:	4812      	ldr	r0, [pc, #72]	@ (800074c <main+0x88>)
 8000704:	f010 ffcc 	bl	80116a0 <puts>

	/******* TOUCHSCREEN INIT**********/
	BSP_LCD_Init();
 8000708:	f003 fc14 	bl	8003f34 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER);
 800070c:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8000710:	2000      	movs	r0, #0
 8000712:	f003 fc91 	bl	8004038 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000716:	f04f 30ff 	mov.w	r0, #4294967295
 800071a:	f003 fd3d 	bl	8004198 <BSP_LCD_Clear>
	Touch_Init();
 800071e:	f000 ff83 	bl	8001628 <Touch_Init>

	/******** START PROGRAM ************/
	DrawMainPage(1);
 8000722:	2001      	movs	r0, #1
 8000724:	f000 ffa8 	bl	8001678 <DrawMainPage>
	HAL_TIM_Base_Start_IT(&htim10);   //start Interrupt Timer
 8000728:	4809      	ldr	r0, [pc, #36]	@ (8000750 <main+0x8c>)
 800072a:	f00b fa17 	bl	800bb5c <HAL_TIM_Base_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 800072e:	f010 fadd 	bl	8010cec <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */

		if (checkTouchFlag) {
 8000732:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <main+0x90>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d0f9      	beq.n	800072e <main+0x6a>
			HandleTouch();
 800073a:	f001 fb1d 	bl	8001d78 <HandleTouch>
			checkTouchFlag = 0;
 800073e:	4b05      	ldr	r3, [pc, #20]	@ (8000754 <main+0x90>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
		MX_USB_HOST_Process();
 8000744:	e7f3      	b.n	800072e <main+0x6a>
 8000746:	bf00      	nop
 8000748:	08012648 	.word	0x08012648
 800074c:	08012664 	.word	0x08012664
 8000750:	20000470 	.word	0x20000470
 8000754:	20000540 	.word	0x20000540

08000758 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b094      	sub	sp, #80	@ 0x50
 800075c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	2230      	movs	r2, #48	@ 0x30
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f011 f89a 	bl	80118a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	4b28      	ldr	r3, [pc, #160]	@ (8000824 <SystemClock_Config+0xcc>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	4a27      	ldr	r2, [pc, #156]	@ (8000824 <SystemClock_Config+0xcc>)
 8000786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800078a:	6413      	str	r3, [r2, #64]	@ 0x40
 800078c:	4b25      	ldr	r3, [pc, #148]	@ (8000824 <SystemClock_Config+0xcc>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	4b22      	ldr	r3, [pc, #136]	@ (8000828 <SystemClock_Config+0xd0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a21      	ldr	r2, [pc, #132]	@ (8000828 <SystemClock_Config+0xd0>)
 80007a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000828 <SystemClock_Config+0xd0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b4:	2301      	movs	r3, #1
 80007b6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007be:	2302      	movs	r3, #2
 80007c0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80007c8:	2308      	movs	r3, #8
 80007ca:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80007cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007d0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80007d6:	2307      	movs	r3, #7
 80007d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	4618      	mov	r0, r3
 80007e0:	f009 fc4a 	bl	800a078 <HAL_RCC_OscConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x96>
		Error_Handler();
 80007ea:	f001 fe9d 	bl	8002528 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007ee:	230f      	movs	r3, #15
 80007f0:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f2:	2302      	movs	r3, #2
 80007f4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007fe:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000800:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000804:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	2105      	movs	r1, #5
 800080c:	4618      	mov	r0, r3
 800080e:	f009 feab 	bl	800a568 <HAL_RCC_ClockConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0xc4>
		Error_Handler();
 8000818:	f001 fe86 	bl	8002528 <Error_Handler>
	}
}
 800081c:	bf00      	nop
 800081e:	3750      	adds	r7, #80	@ 0x50
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40023800 	.word	0x40023800
 8000828:	40007000 	.word	0x40007000

0800082c <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_CRC_Init+0x20>)
 8000832:	4a07      	ldr	r2, [pc, #28]	@ (8000850 <MX_CRC_Init+0x24>)
 8000834:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <MX_CRC_Init+0x20>)
 8000838:	f004 fc1e 	bl	8005078 <HAL_CRC_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_CRC_Init+0x1a>
		Error_Handler();
 8000842:	f001 fe71 	bl	8002528 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000028c 	.word	0x2000028c
 8000850:	40023000 	.word	0x40023000

08000854 <MX_DMA2D_Init>:
/**
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void) {
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8000858:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <MX_DMA2D_Init+0x5c>)
 800085a:	4a16      	ldr	r2, [pc, #88]	@ (80008b4 <MX_DMA2D_Init+0x60>)
 800085c:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 800085e:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MX_DMA2D_Init+0x5c>)
 8000860:	2200      	movs	r2, #0
 8000862:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_DMA2D_Init+0x5c>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_DMA2D_Init+0x5c>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_DMA2D_Init+0x5c>)
 8000872:	2200      	movs	r2, #0
 8000874:	629a      	str	r2, [r3, #40]	@ 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_DMA2D_Init+0x5c>)
 8000878:	2200      	movs	r2, #0
 800087a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_DMA2D_Init+0x5c>)
 800087e:	2200      	movs	r2, #0
 8000880:	631a      	str	r2, [r3, #48]	@ 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <MX_DMA2D_Init+0x5c>)
 8000884:	2200      	movs	r2, #0
 8000886:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 8000888:	4809      	ldr	r0, [pc, #36]	@ (80008b0 <MX_DMA2D_Init+0x5c>)
 800088a:	f004 fdcf 	bl	800542c <HAL_DMA2D_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_DMA2D_Init+0x44>
		Error_Handler();
 8000894:	f001 fe48 	bl	8002528 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 8000898:	2101      	movs	r1, #1
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_DMA2D_Init+0x5c>)
 800089c:	f005 f834 	bl	8005908 <HAL_DMA2D_ConfigLayer>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_DMA2D_Init+0x56>
		Error_Handler();
 80008a6:	f001 fe3f 	bl	8002528 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000294 	.word	0x20000294
 80008b4:	4002b000 	.word	0x4002b000

080008b8 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <MX_I2C3_Init+0x74>)
 80008be:	4a1c      	ldr	r2, [pc, #112]	@ (8000930 <MX_I2C3_Init+0x78>)
 80008c0:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	@ (800092c <MX_I2C3_Init+0x74>)
 80008c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000934 <MX_I2C3_Init+0x7c>)
 80008c6:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008c8:	4b18      	ldr	r3, [pc, #96]	@ (800092c <MX_I2C3_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 80008ce:	4b17      	ldr	r3, [pc, #92]	@ (800092c <MX_I2C3_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d4:	4b15      	ldr	r3, [pc, #84]	@ (800092c <MX_I2C3_Init+0x74>)
 80008d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008da:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008dc:	4b13      	ldr	r3, [pc, #76]	@ (800092c <MX_I2C3_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 80008e2:	4b12      	ldr	r3, [pc, #72]	@ (800092c <MX_I2C3_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e8:	4b10      	ldr	r3, [pc, #64]	@ (800092c <MX_I2C3_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <MX_I2C3_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 80008f4:	480d      	ldr	r0, [pc, #52]	@ (800092c <MX_I2C3_Init+0x74>)
 80008f6:	f007 ff4f 	bl	8008798 <HAL_I2C_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_I2C3_Init+0x4c>
		Error_Handler();
 8000900:	f001 fe12 	bl	8002528 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 8000904:	2100      	movs	r1, #0
 8000906:	4809      	ldr	r0, [pc, #36]	@ (800092c <MX_I2C3_Init+0x74>)
 8000908:	f008 ffa8 	bl	800985c <HAL_I2CEx_ConfigAnalogFilter>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_I2C3_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 8000912:	f001 fe09 	bl	8002528 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 8000916:	2100      	movs	r1, #0
 8000918:	4804      	ldr	r0, [pc, #16]	@ (800092c <MX_I2C3_Init+0x74>)
 800091a:	f008 ffdb 	bl	80098d4 <HAL_I2CEx_ConfigDigitalFilter>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_I2C3_Init+0x70>
		Error_Handler();
 8000924:	f001 fe00 	bl	8002528 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200002d4 	.word	0x200002d4
 8000930:	40005c00 	.word	0x40005c00
 8000934:	000186a0 	.word	0x000186a0

08000938 <MX_LTDC_Init>:
/**
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b08e      	sub	sp, #56	@ 0x38
 800093c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2234      	movs	r2, #52	@ 0x34
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f010 ffab 	bl	80118a0 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 800094a:	4b39      	ldr	r3, [pc, #228]	@ (8000a30 <MX_LTDC_Init+0xf8>)
 800094c:	4a39      	ldr	r2, [pc, #228]	@ (8000a34 <MX_LTDC_Init+0xfc>)
 800094e:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000950:	4b37      	ldr	r3, [pc, #220]	@ (8000a30 <MX_LTDC_Init+0xf8>)
 8000952:	2200      	movs	r2, #0
 8000954:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000956:	4b36      	ldr	r3, [pc, #216]	@ (8000a30 <MX_LTDC_Init+0xf8>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800095c:	4b34      	ldr	r3, [pc, #208]	@ (8000a30 <MX_LTDC_Init+0xf8>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000962:	4b33      	ldr	r3, [pc, #204]	@ (8000a30 <MX_LTDC_Init+0xf8>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 9;
 8000968:	4b31      	ldr	r3, [pc, #196]	@ (8000a30 <MX_LTDC_Init+0xf8>)
 800096a:	2209      	movs	r2, #9
 800096c:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 1;
 800096e:	4b30      	ldr	r3, [pc, #192]	@ (8000a30 <MX_LTDC_Init+0xf8>)
 8000970:	2201      	movs	r2, #1
 8000972:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 29;
 8000974:	4b2e      	ldr	r3, [pc, #184]	@ (8000a30 <MX_LTDC_Init+0xf8>)
 8000976:	221d      	movs	r2, #29
 8000978:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 3;
 800097a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a30 <MX_LTDC_Init+0xf8>)
 800097c:	2203      	movs	r2, #3
 800097e:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 269;
 8000980:	4b2b      	ldr	r3, [pc, #172]	@ (8000a30 <MX_LTDC_Init+0xf8>)
 8000982:	f240 120d 	movw	r2, #269	@ 0x10d
 8000986:	625a      	str	r2, [r3, #36]	@ 0x24
	hltdc.Init.AccumulatedActiveH = 323;
 8000988:	4b29      	ldr	r3, [pc, #164]	@ (8000a30 <MX_LTDC_Init+0xf8>)
 800098a:	f240 1243 	movw	r2, #323	@ 0x143
 800098e:	629a      	str	r2, [r3, #40]	@ 0x28
	hltdc.Init.TotalWidth = 279;
 8000990:	4b27      	ldr	r3, [pc, #156]	@ (8000a30 <MX_LTDC_Init+0xf8>)
 8000992:	f240 1217 	movw	r2, #279	@ 0x117
 8000996:	62da      	str	r2, [r3, #44]	@ 0x2c
	hltdc.Init.TotalHeigh = 327;
 8000998:	4b25      	ldr	r3, [pc, #148]	@ (8000a30 <MX_LTDC_Init+0xf8>)
 800099a:	f240 1247 	movw	r2, #327	@ 0x147
 800099e:	631a      	str	r2, [r3, #48]	@ 0x30
	hltdc.Init.Backcolor.Blue = 0;
 80009a0:	4b23      	ldr	r3, [pc, #140]	@ (8000a30 <MX_LTDC_Init+0xf8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80009a8:	4b21      	ldr	r3, [pc, #132]	@ (8000a30 <MX_LTDC_Init+0xf8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	hltdc.Init.Backcolor.Red = 0;
 80009b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a30 <MX_LTDC_Init+0xf8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 80009b8:	481d      	ldr	r0, [pc, #116]	@ (8000a30 <MX_LTDC_Init+0xf8>)
 80009ba:	f008 ffcb 	bl	8009954 <HAL_LTDC_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_LTDC_Init+0x90>
		Error_Handler();
 80009c4:	f001 fdb0 	bl	8002528 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 240;
 80009cc:	23f0      	movs	r3, #240	@ 0xf0
 80009ce:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 320;
 80009d4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80009d8:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80009da:	2302      	movs	r3, #2
 80009dc:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 80009de:	23ff      	movs	r3, #255	@ 0xff
 80009e0:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80009e6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009ea:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80009ec:	2307      	movs	r3, #7
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.FBStartAdress = 0xD0000000;
 80009f0:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 80009f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.ImageWidth = 240;
 80009f6:	23f0      	movs	r3, #240	@ 0xf0
 80009f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	pLayerCfg.ImageHeight = 320;
 80009fa:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80009fe:	633b      	str	r3, [r7, #48]	@ 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	pLayerCfg.Backcolor.Green = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	pLayerCfg.Backcolor.Red = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2200      	movs	r2, #0
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <MX_LTDC_Init+0xf8>)
 8000a1a:	f009 f92d 	bl	8009c78 <HAL_LTDC_ConfigLayer>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_LTDC_Init+0xf0>
		Error_Handler();
 8000a24:	f001 fd80 	bl	8002528 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	3738      	adds	r7, #56	@ 0x38
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000328 	.word	0x20000328
 8000a34:	40016800 	.word	0x40016800

08000a38 <MX_SPI5_Init>:
/**
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <MX_SPI5_Init+0x64>)
 8000a3e:	4a18      	ldr	r2, [pc, #96]	@ (8000aa0 <MX_SPI5_Init+0x68>)
 8000a40:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 8000a42:	4b16      	ldr	r3, [pc, #88]	@ (8000a9c <MX_SPI5_Init+0x64>)
 8000a44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a48:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <MX_SPI5_Init+0x64>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a50:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <MX_SPI5_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a56:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <MX_SPI5_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <MX_SPI5_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <MX_SPI5_Init+0x64>)
 8000a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a68:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <MX_SPI5_Init+0x64>)
 8000a6c:	2218      	movs	r2, #24
 8000a6e:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	@ (8000a9c <MX_SPI5_Init+0x64>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a76:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <MX_SPI5_Init+0x64>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	@ (8000a9c <MX_SPI5_Init+0x64>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 10;
 8000a82:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <MX_SPI5_Init+0x64>)
 8000a84:	220a      	movs	r2, #10
 8000a86:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 8000a88:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <MX_SPI5_Init+0x64>)
 8000a8a:	f00a fa10 	bl	800aeae <HAL_SPI_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_SPI5_Init+0x60>
		Error_Handler();
 8000a94:	f001 fd48 	bl	8002528 <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200003d0 	.word	0x200003d0
 8000aa0:	40015000 	.word	0x40015000

08000aa4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ab8:	463b      	mov	r3, r7
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000ac0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b3c <MX_TIM1_Init+0x98>)
 8000ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8000b40 <MX_TIM1_Init+0x9c>)
 8000ac4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 167;
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b3c <MX_TIM1_Init+0x98>)
 8000ac8:	22a7      	movs	r2, #167	@ 0xa7
 8000aca:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b3c <MX_TIM1_Init+0x98>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b3c <MX_TIM1_Init+0x98>)
 8000ad4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ad8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ada:	4b18      	ldr	r3, [pc, #96]	@ (8000b3c <MX_TIM1_Init+0x98>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	@ (8000b3c <MX_TIM1_Init+0x98>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <MX_TIM1_Init+0x98>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000aec:	4813      	ldr	r0, [pc, #76]	@ (8000b3c <MX_TIM1_Init+0x98>)
 8000aee:	f00a ffe5 	bl	800babc <HAL_TIM_Base_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM1_Init+0x58>
		Error_Handler();
 8000af8:	f001 fd16 	bl	8002528 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b00:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000b02:	f107 0308 	add.w	r3, r7, #8
 8000b06:	4619      	mov	r1, r3
 8000b08:	480c      	ldr	r0, [pc, #48]	@ (8000b3c <MX_TIM1_Init+0x98>)
 8000b0a:	f00b f987 	bl	800be1c <HAL_TIM_ConfigClockSource>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0x74>
		Error_Handler();
 8000b14:	f001 fd08 	bl	8002528 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000b20:	463b      	mov	r3, r7
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	@ (8000b3c <MX_TIM1_Init+0x98>)
 8000b26:	f00b fbaf 	bl	800c288 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000b30:	f001 fcfa 	bl	8002528 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000428 	.word	0x20000428
 8000b40:	40010000 	.word	0x40010000

08000b44 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8000b48:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <MX_TIM10_Init+0x40>)
 8000b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b88 <MX_TIM10_Init+0x44>)
 8000b4c:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 1680 - 1;
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b84 <MX_TIM10_Init+0x40>)
 8000b50:	f240 628f 	movw	r2, #1679	@ 0x68f
 8000b54:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	@ (8000b84 <MX_TIM10_Init+0x40>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 10000;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <MX_TIM10_Init+0x40>)
 8000b5e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000b62:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b64:	4b07      	ldr	r3, [pc, #28]	@ (8000b84 <MX_TIM10_Init+0x40>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b6a:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <MX_TIM10_Init+0x40>)
 8000b6c:	2280      	movs	r2, #128	@ 0x80
 8000b6e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8000b70:	4804      	ldr	r0, [pc, #16]	@ (8000b84 <MX_TIM10_Init+0x40>)
 8000b72:	f00a ffa3 	bl	800babc <HAL_TIM_Base_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM10_Init+0x3c>
		Error_Handler();
 8000b7c:	f001 fcd4 	bl	8002528 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000470 	.word	0x20000470
 8000b88:	40014400 	.word	0x40014400

08000b8c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000b90:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	@ (8000bdc <MX_USART1_UART_Init+0x50>)
 8000b94:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000b96:	4b10      	ldr	r3, [pc, #64]	@ (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000b98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b9c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	@ (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000bc2:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bc4:	f00b fbf0 	bl	800c3a8 <HAL_UART_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000bce:	f001 fcab 	bl	8002528 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200004b8 	.word	0x200004b8
 8000bdc:	40011000 	.word	0x40011000

08000be0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = { 0 };
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
 8000bf4:	615a      	str	r2, [r3, #20]
 8000bf6:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c78 <MX_FMC_Init+0x98>)
 8000bfa:	4a20      	ldr	r2, [pc, #128]	@ (8000c7c <MX_FMC_Init+0x9c>)
 8000bfc:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000c78 <MX_FMC_Init+0x98>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c04:	4b1c      	ldr	r3, [pc, #112]	@ (8000c78 <MX_FMC_Init+0x98>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c78 <MX_FMC_Init+0x98>)
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c10:	4b19      	ldr	r3, [pc, #100]	@ (8000c78 <MX_FMC_Init+0x98>)
 8000c12:	2210      	movs	r2, #16
 8000c14:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c16:	4b18      	ldr	r3, [pc, #96]	@ (8000c78 <MX_FMC_Init+0x98>)
 8000c18:	2240      	movs	r2, #64	@ 0x40
 8000c1a:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000c1c:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <MX_FMC_Init+0x98>)
 8000c1e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000c22:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c24:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <MX_FMC_Init+0x98>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <MX_FMC_Init+0x98>)
 8000c2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c30:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000c32:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <MX_FMC_Init+0x98>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	625a      	str	r2, [r3, #36]	@ 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <MX_FMC_Init+0x98>)
 8000c3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c3e:	629a      	str	r2, [r3, #40]	@ 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 8000c40:	2302      	movs	r3, #2
 8000c42:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8000c44:	2307      	movs	r3, #7
 8000c46:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 8000c48:	2304      	movs	r3, #4
 8000c4a:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 8000c4c:	2307      	movs	r3, #7
 8000c4e:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 8000c50:	2303      	movs	r3, #3
 8000c52:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 8000c54:	2302      	movs	r3, #2
 8000c56:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <MX_FMC_Init+0x98>)
 8000c62:	f00a f893 	bl	800ad8c <HAL_SDRAM_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_FMC_Init+0x90>
		Error_Handler();
 8000c6c:	f001 fc5c 	bl	8002528 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000500 	.word	0x20000500
 8000c7c:	a0000140 	.word	0xa0000140

08000c80 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08e      	sub	sp, #56	@ 0x38
 8000c84:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
 8000c9a:	4b7b      	ldr	r3, [pc, #492]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a7a      	ldr	r2, [pc, #488]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000ca0:	f043 0304 	orr.w	r3, r3, #4
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b78      	ldr	r3, [pc, #480]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0304 	and.w	r3, r3, #4
 8000cae:	623b      	str	r3, [r7, #32]
 8000cb0:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
 8000cb6:	4b74      	ldr	r3, [pc, #464]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a73      	ldr	r2, [pc, #460]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000cbc:	f043 0320 	orr.w	r3, r3, #32
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b71      	ldr	r3, [pc, #452]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0320 	and.w	r3, r3, #32
 8000cca:	61fb      	str	r3, [r7, #28]
 8000ccc:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
 8000cd2:	4b6d      	ldr	r3, [pc, #436]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	4a6c      	ldr	r2, [pc, #432]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cde:	4b6a      	ldr	r3, [pc, #424]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	4b66      	ldr	r3, [pc, #408]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	4a65      	ldr	r2, [pc, #404]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfa:	4b63      	ldr	r3, [pc, #396]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b5f      	ldr	r3, [pc, #380]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a5e      	ldr	r2, [pc, #376]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b5c      	ldr	r3, [pc, #368]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b58      	ldr	r3, [pc, #352]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a57      	ldr	r2, [pc, #348]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000d2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b55      	ldr	r3, [pc, #340]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	4b51      	ldr	r3, [pc, #324]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	4a50      	ldr	r2, [pc, #320]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000d48:	f043 0310 	orr.w	r3, r3, #16
 8000d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4e:	4b4e      	ldr	r3, [pc, #312]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	f003 0310 	and.w	r3, r3, #16
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a49      	ldr	r2, [pc, #292]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b47      	ldr	r3, [pc, #284]	@ (8000e88 <MX_GPIO_Init+0x208>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin,
 8000d76:	2200      	movs	r2, #0
 8000d78:	2116      	movs	r1, #22
 8000d7a:	4844      	ldr	r0, [pc, #272]	@ (8000e8c <MX_GPIO_Init+0x20c>)
 8000d7c:	f005 fbbe 	bl	80064fc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2180      	movs	r1, #128	@ 0x80
 8000d84:	4842      	ldr	r0, [pc, #264]	@ (8000e90 <MX_GPIO_Init+0x210>)
 8000d86:	f005 fbb9 	bl	80064fc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, RDX_Pin | WRX_DCX_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000d90:	4840      	ldr	r0, [pc, #256]	@ (8000e94 <MX_GPIO_Init+0x214>)
 8000d92:	f005 fbb3 	bl	80064fc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LD3_Pin | LD4_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000d9c:	483e      	ldr	r0, [pc, #248]	@ (8000e98 <MX_GPIO_Init+0x218>)
 8000d9e:	f005 fbad 	bl	80064fc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin;
 8000da2:	2316      	movs	r3, #22
 8000da4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db6:	4619      	mov	r1, r3
 8000db8:	4834      	ldr	r0, [pc, #208]	@ (8000e8c <MX_GPIO_Init+0x20c>)
 8000dba:	f005 f8e7 	bl	8005f8c <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
	GPIO_InitStruct.Pin = B1_Pin | MEMS_INT1_Pin | MEMS_INT2_Pin | TP_INT1_Pin;
 8000dbe:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dc4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	482e      	ldr	r0, [pc, #184]	@ (8000e90 <MX_GPIO_Init+0x210>)
 8000dd6:	f005 f8d9 	bl	8005f8c <HAL_GPIO_Init>

	/*Configure GPIO pin : ACP_RST_Pin */
	GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000dda:	2380      	movs	r3, #128	@ 0x80
 8000ddc:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dee:	4619      	mov	r1, r3
 8000df0:	4827      	ldr	r0, [pc, #156]	@ (8000e90 <MX_GPIO_Init+0x210>)
 8000df2:	f005 f8cb 	bl	8005f8c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OC_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000df6:	2320      	movs	r3, #32
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dfa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4820      	ldr	r0, [pc, #128]	@ (8000e8c <MX_GPIO_Init+0x20c>)
 8000e0c:	f005 f8be 	bl	8005f8c <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e10:	2304      	movs	r3, #4
 8000e12:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e20:	4619      	mov	r1, r3
 8000e22:	481e      	ldr	r0, [pc, #120]	@ (8000e9c <MX_GPIO_Init+0x21c>)
 8000e24:	f005 f8b2 	bl	8005f8c <HAL_GPIO_Init>

	/*Configure GPIO pin : TE_Pin */
	GPIO_InitStruct.Pin = TE_Pin;
 8000e28:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4815      	ldr	r0, [pc, #84]	@ (8000e94 <MX_GPIO_Init+0x214>)
 8000e3e:	f005 f8a5 	bl	8005f8c <HAL_GPIO_Init>

	/*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
	GPIO_InitStruct.Pin = RDX_Pin | WRX_DCX_Pin;
 8000e42:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480e      	ldr	r0, [pc, #56]	@ (8000e94 <MX_GPIO_Init+0x214>)
 8000e5c:	f005 f896 	bl	8005f8c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD4_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LD4_Pin;
 8000e60:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e76:	4619      	mov	r1, r3
 8000e78:	4807      	ldr	r0, [pc, #28]	@ (8000e98 <MX_GPIO_Init+0x218>)
 8000e7a:	f005 f887 	bl	8005f8c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000e7e:	bf00      	nop
 8000e80:	3738      	adds	r7, #56	@ 0x38
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020800 	.word	0x40020800
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40020c00 	.word	0x40020c00
 8000e98:	40021800 	.word	0x40021800
 8000e9c:	40020400 	.word	0x40020400

08000ea0 <_write>:
void output_protocol(char line[MAX_LINES][MAX_LINE_LENGTH], int lines) {
	for (int i = 0; i < lines; i++) {
		printf("%s\n", line[i]);
	}
}
int _write(int file, char *ptr, int len) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb4:	68b9      	ldr	r1, [r7, #8]
 8000eb6:	4804      	ldr	r0, [pc, #16]	@ (8000ec8 <_write+0x28>)
 8000eb8:	f00b fac6 	bl	800c448 <HAL_UART_Transmit>
	return len;
 8000ebc:	687b      	ldr	r3, [r7, #4]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200004b8 	.word	0x200004b8

08000ecc <erase_sector>:
/**
 * @brief: Erase the memory from an entire sector
 * @param Sector: The sector number
 * @retval: none
 */
void erase_sector(uint32_t Sector) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();  // Unlock flash to enable erasing
 8000ed4:	f004 fe9a 	bl	8005c0c <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(sector_mapping(Sector), VOLTAGE_RANGE_3);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f001 faab 	bl	8002434 <sector_mapping>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f005 f804 	bl	8005ef0 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();  // Lock flash after erasing
 8000ee8:	f004 feb2 	bl	8005c50 <HAL_FLASH_Lock>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <write_to_flash>:
 * @param flash_address: address of string in flash memory that will be stored
 * @retval: none
 * Note: PLEASE UNLOCK AND LOCK FLASH BEFORE AND AFTER USING THIS FUNCTION,
 * IT DOES NOT DO IT ITSELF
 */
void write_to_flash(const char *data, uint32_t flash_address) {
 8000ef4:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8000ef8:	b085      	sub	sp, #20
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	6039      	str	r1, [r7, #0]
	//HAL_FLASH_Unlock();  // Unlock flash for writing

	for (uint8_t i = 0; i < strlen(data); i++) {
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	e012      	b.n	8000f2c <write_to_flash+0x38>
		//printf("%c", data[i]);
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flash_address + i, data[i]); // Write to flash
 8000f06:	7bfa      	ldrb	r2, [r7, #15]
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	18d1      	adds	r1, r2, r3
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2200      	movs	r2, #0
 8000f18:	4698      	mov	r8, r3
 8000f1a:	4691      	mov	r9, r2
 8000f1c:	4642      	mov	r2, r8
 8000f1e:	464b      	mov	r3, r9
 8000f20:	2000      	movs	r0, #0
 8000f22:	f004 fe1f 	bl	8005b64 <HAL_FLASH_Program>
	for (uint8_t i = 0; i < strlen(data); i++) {
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	7bfc      	ldrb	r4, [r7, #15]
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff f95e 	bl	80001f0 <strlen>
 8000f34:	4603      	mov	r3, r0
 8000f36:	429c      	cmp	r4, r3
 8000f38:	d3e5      	bcc.n	8000f06 <write_to_flash+0x12>
	}

	//HAL_FLASH_Lock();  // Lock flash after writing
}
 8000f3a:	bf00      	nop
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

08000f46 <read_from_flash>:
 * @param flash_address: address of string in flash memory that will be read
 * @retval: failure if its reading trash from flash memory.
 * it literally does not read from flash btw if it detects 0xFF at the start
 * that means your output buffer will not be updated
 */
uint8_t read_from_flash(char *output, uint32_t flash_address) {
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b084      	sub	sp, #16
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	6039      	str	r1, [r7, #0]
	// Read byte by byte from flash memory, get a whole string in output variable
	for (uint8_t i = 0; i < MAX_LINE_LENGTH; i++) {
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	e014      	b.n	8000f80 <read_from_flash+0x3a>
		char key = *(char*) (flash_address + i);
 8000f56:	7bfa      	ldrb	r2, [r7, #15]
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	73bb      	strb	r3, [r7, #14]
		//check if reading trash (0xFF) from flash memory
		if (key == 0xFF) {
 8000f60:	7bbb      	ldrb	r3, [r7, #14]
 8000f62:	2bff      	cmp	r3, #255	@ 0xff
 8000f64:	d104      	bne.n	8000f70 <read_from_flash+0x2a>
			if (i == 0) {
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d106      	bne.n	8000f7a <read_from_flash+0x34>
				return 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e01b      	b.n	8000fa8 <read_from_flash+0x62>
			}
		} else {
			output[i] = key;
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	7bba      	ldrb	r2, [r7, #14]
 8000f78:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX_LINE_LENGTH; i++) {
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	2b1c      	cmp	r3, #28
 8000f84:	d9e7      	bls.n	8000f56 <read_from_flash+0x10>
		}
	}
	output[strlen(output)] = '\0'; //add null to the end of string for printing
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff f932 	bl	80001f0 <strlen>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
	//printf("output is %s and strlen: %d\n", output, strlen(output));

	//error handling. G-codes are less than 32 chars, anything more is trash
	if (strlen(output) < MAX_LINE_LENGTH) {
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff f92a 	bl	80001f0 <strlen>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b1c      	cmp	r3, #28
 8000fa0:	d801      	bhi.n	8000fa6 <read_from_flash+0x60>
		return 1;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e000      	b.n	8000fa8 <read_from_flash+0x62>
	} else {
		return 0;
 8000fa6:	2300      	movs	r3, #0
	}

}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <storeProtocol>:
 * @param gcode_file: array of G-code commands
 * @param sector: which sector to store protocol in
 * @retval: failure if sector is "full"
 */
uint8_t storeProtocol(char new_protocol[MAX_LINES][MAX_LINE_LENGTH],
		uint32_t sector) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	f5ad 5d08 	sub.w	sp, sp, #8704	@ 0x2200
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000fbe:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8000fc2:	6018      	str	r0, [r3, #0]
 8000fc4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000fc8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8000fcc:	6019      	str	r1, [r3, #0]

	//initialize variables
	int i = 0;  //protocol index
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8000fd4:	f102 021c 	add.w	r2, r2, #28
 8000fd8:	6013      	str	r3, [r2, #0]
	int j = 0;  //line index
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8000fe0:	f102 0218 	add.w	r2, r2, #24
 8000fe4:	6013      	str	r3, [r2, #0]
	char protocolStorage[MAX_PROTOCOLS_IN_SECTOR][MAX_LINES][MAX_LINE_LENGTH] = {{{'\0'}}};
 8000fe6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000fea:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f242 13fc 	movw	r3, #8700	@ 0x21fc
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	f010 fc52 	bl	80118a0 <memset>
	uint32_t flash_address = get_sector_address(sector);
 8000ffc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001000:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001004:	6818      	ldr	r0, [r3, #0]
 8001006:	f001 f9ad 	bl	8002364 <get_sector_address>
 800100a:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 800100e:	f103 0314 	add.w	r3, r3, #20
 8001012:	6018      	str	r0, [r3, #0]

	//check if all sectors are full before storing a protocol
	uint8_t num_protocols = get_num_protocols_in_sector(sector);
 8001014:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001018:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800101c:	6818      	ldr	r0, [r3, #0]
 800101e:	f000 f98d 	bl	800133c <get_num_protocols_in_sector>
 8001022:	4603      	mov	r3, r0
 8001024:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8001028:	f102 0213 	add.w	r2, r2, #19
 800102c:	7013      	strb	r3, [r2, #0]
	if (num_protocols == MAX_PROTOCOLS_IN_SECTOR) {
 800102e:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8001032:	f103 0313 	add.w	r3, r3, #19
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b03      	cmp	r3, #3
 800103a:	d101      	bne.n	8001040 <storeProtocol+0x90>
		return 0;
 800103c:	2300      	movs	r3, #0
 800103e:	e177      	b.n	8001330 <storeProtocol+0x380>
	}

	//read existing protocols in sector and put into the temp protocol storage
	for (i = 0; i < num_protocols; i++) {
 8001040:	2300      	movs	r3, #0
 8001042:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8001046:	f102 021c 	add.w	r2, r2, #28
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	e063      	b.n	8001116 <storeProtocol+0x166>
		for (j = 0; j < MAX_LINES; j++) {
 800104e:	2300      	movs	r3, #0
 8001050:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8001054:	f102 0218 	add.w	r2, r2, #24
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	e04a      	b.n	80010f2 <storeProtocol+0x142>
			//get the address for the current line in the current protocol
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE + j * MAX_LINE_LENGTH;
 800105c:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8001060:	f103 031c 	add.w	r3, r3, #28
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800106a:	fb02 f303 	mul.w	r3, r2, r3
 800106e:	4619      	mov	r1, r3
 8001070:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8001074:	f103 0318 	add.w	r3, r3, #24
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4613      	mov	r3, r2
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	1a9b      	subs	r3, r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	440b      	add	r3, r1
 8001086:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 800108a:	f102 0214 	add.w	r2, r2, #20
 800108e:	6812      	ldr	r2, [r2, #0]
 8001090:	4413      	add	r3, r2
 8001092:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8001096:	f102 0208 	add.w	r2, r2, #8
 800109a:	6013      	str	r3, [r2, #0]
			//read lines from memory into buffer until you reach garbage
			read_from_flash(protocolStorage[i][j], temp_address); //only updates protocolStorage if its a valid line from memory
 800109c:	f107 0220 	add.w	r2, r7, #32
 80010a0:	3a14      	subs	r2, #20
 80010a2:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 80010a6:	f103 0318 	add.w	r3, r3, #24
 80010aa:	6819      	ldr	r1, [r3, #0]
 80010ac:	460b      	mov	r3, r1
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	1a5b      	subs	r3, r3, r1
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	440b      	add	r3, r1
 80010b6:	f507 5108 	add.w	r1, r7, #8704	@ 0x2200
 80010ba:	f101 011c 	add.w	r1, r1, #28
 80010be:	6809      	ldr	r1, [r1, #0]
 80010c0:	f640 3054 	movw	r0, #2900	@ 0xb54
 80010c4:	fb00 f101 	mul.w	r1, r0, r1
 80010c8:	440b      	add	r3, r1
 80010ca:	4413      	add	r3, r2
 80010cc:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 80010d0:	f102 0208 	add.w	r2, r2, #8
 80010d4:	6811      	ldr	r1, [r2, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ff35 	bl	8000f46 <read_from_flash>
		for (j = 0; j < MAX_LINES; j++) {
 80010dc:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 80010e0:	f103 0318 	add.w	r3, r3, #24
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	3301      	adds	r3, #1
 80010e8:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 80010ec:	f102 0218 	add.w	r2, r2, #24
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 80010f6:	f103 0318 	add.w	r3, r3, #24
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b63      	cmp	r3, #99	@ 0x63
 80010fe:	ddad      	ble.n	800105c <storeProtocol+0xac>
	for (i = 0; i < num_protocols; i++) {
 8001100:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8001104:	f103 031c 	add.w	r3, r3, #28
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	3301      	adds	r3, #1
 800110c:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8001110:	f102 021c 	add.w	r2, r2, #28
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 800111a:	f103 0313 	add.w	r3, r3, #19
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8001124:	f102 021c 	add.w	r2, r2, #28
 8001128:	6812      	ldr	r2, [r2, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	db8f      	blt.n	800104e <storeProtocol+0x9e>
	}
	//output: we now have the existing protocols in the buffer.
	//they only have their first number of lines in. the rest of lines are null

	//put the new protocol into the temp protocol storage
	for (j = 0; j < MAX_LINES; j++) {
 800112e:	2300      	movs	r3, #0
 8001130:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8001134:	f102 0218 	add.w	r2, r2, #24
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e048      	b.n	80011ce <storeProtocol+0x21e>
		//copy each line into the buffer from new protocol, should be null terminated from qr scanner
		if (new_protocol[j][0] != '\0') {
 800113c:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8001140:	f103 0318 	add.w	r3, r3, #24
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4613      	mov	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	1a9b      	subs	r3, r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8001154:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 8001158:	6812      	ldr	r2, [r2, #0]
 800115a:	4413      	add	r3, r2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d02a      	beq.n	80011b8 <storeProtocol+0x208>
			strcpy(protocolStorage[i][j], new_protocol[j]);
 8001162:	f107 0220 	add.w	r2, r7, #32
 8001166:	3a14      	subs	r2, #20
 8001168:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 800116c:	f103 0318 	add.w	r3, r3, #24
 8001170:	6819      	ldr	r1, [r3, #0]
 8001172:	460b      	mov	r3, r1
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	1a5b      	subs	r3, r3, r1
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	f507 5108 	add.w	r1, r7, #8704	@ 0x2200
 8001180:	f101 011c 	add.w	r1, r1, #28
 8001184:	6809      	ldr	r1, [r1, #0]
 8001186:	f640 3054 	movw	r0, #2900	@ 0xb54
 800118a:	fb00 f101 	mul.w	r1, r0, r1
 800118e:	440b      	add	r3, r1
 8001190:	18d0      	adds	r0, r2, r3
 8001192:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8001196:	f103 0318 	add.w	r3, r3, #24
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4613      	mov	r3, r2
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	1a9b      	subs	r3, r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80011aa:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 80011ae:	6812      	ldr	r2, [r2, #0]
 80011b0:	4413      	add	r3, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f010 fbff 	bl	80119b6 <strcpy>
	for (j = 0; j < MAX_LINES; j++) {
 80011b8:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 80011bc:	f103 0318 	add.w	r3, r3, #24
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 80011c8:	f102 0218 	add.w	r2, r2, #24
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 80011d2:	f103 0318 	add.w	r3, r3, #24
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b63      	cmp	r3, #99	@ 0x63
 80011da:	ddaf      	ble.n	800113c <storeProtocol+0x18c>




	//write existing protocols and new protocol to flash memory, string-by-string
	erase_sector(sector); //erase sector before writing
 80011dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80011e0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	f7ff fe71 	bl	8000ecc <erase_sector>
	HAL_FLASH_Unlock();  // Unlock flash for writing. note: the erase_sector() unlocks and locks itself
 80011ea:	f004 fd0f 	bl	8005c0c <HAL_FLASH_Unlock>
	for (i = 0; i < (num_protocols + 1); i++) {
 80011ee:	2300      	movs	r3, #0
 80011f0:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 80011f4:	f102 021c 	add.w	r2, r2, #28
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e089      	b.n	8001310 <storeProtocol+0x360>
		for (j = 0; j < MAX_LINES; j++) {
 80011fc:	2300      	movs	r3, #0
 80011fe:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8001202:	f102 0218 	add.w	r2, r2, #24
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	e070      	b.n	80012ec <storeProtocol+0x33c>
			//if first character of a line is null from qr scanner or trash from flash, ignore it
			if ((new_protocol[j][0] != '\0') && (new_protocol[j][0] != 0xFF)) {
 800120a:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 800120e:	f103 0318 	add.w	r3, r3, #24
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4613      	mov	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	1a9b      	subs	r3, r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8001222:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	4413      	add	r3, r2
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d052      	beq.n	80012d6 <storeProtocol+0x326>
 8001230:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8001234:	f103 0318 	add.w	r3, r3, #24
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	4613      	mov	r3, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	1a9b      	subs	r3, r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8001248:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	4413      	add	r3, r2
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2bff      	cmp	r3, #255	@ 0xff
 8001254:	d03f      	beq.n	80012d6 <storeProtocol+0x326>
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE + j * MAX_LINE_LENGTH;
 8001256:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 800125a:	f103 031c 	add.w	r3, r3, #28
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001264:	fb02 f303 	mul.w	r3, r2, r3
 8001268:	4619      	mov	r1, r3
 800126a:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 800126e:	f103 0318 	add.w	r3, r3, #24
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4613      	mov	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	1a9b      	subs	r3, r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	440b      	add	r3, r1
 8001280:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8001284:	f102 0214 	add.w	r2, r2, #20
 8001288:	6812      	ldr	r2, [r2, #0]
 800128a:	4413      	add	r3, r2
 800128c:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8001290:	f102 020c 	add.w	r2, r2, #12
 8001294:	6013      	str	r3, [r2, #0]
				//printf("len: %d and data: %s", strlen(protocolStorage[i][j]), protocolStorage[i][j]);
				write_to_flash(protocolStorage[i][j], temp_address);
 8001296:	f107 0220 	add.w	r2, r7, #32
 800129a:	3a14      	subs	r2, #20
 800129c:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 80012a0:	f103 0318 	add.w	r3, r3, #24
 80012a4:	6819      	ldr	r1, [r3, #0]
 80012a6:	460b      	mov	r3, r1
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	1a5b      	subs	r3, r3, r1
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	440b      	add	r3, r1
 80012b0:	f507 5108 	add.w	r1, r7, #8704	@ 0x2200
 80012b4:	f101 011c 	add.w	r1, r1, #28
 80012b8:	6809      	ldr	r1, [r1, #0]
 80012ba:	f640 3054 	movw	r0, #2900	@ 0xb54
 80012be:	fb00 f101 	mul.w	r1, r0, r1
 80012c2:	440b      	add	r3, r1
 80012c4:	4413      	add	r3, r2
 80012c6:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 80012ca:	f102 020c 	add.w	r2, r2, #12
 80012ce:	6811      	ldr	r1, [r2, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fe0f 	bl	8000ef4 <write_to_flash>
		for (j = 0; j < MAX_LINES; j++) {
 80012d6:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 80012da:	f103 0318 	add.w	r3, r3, #24
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	3301      	adds	r3, #1
 80012e2:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 80012e6:	f102 0218 	add.w	r2, r2, #24
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 80012f0:	f103 0318 	add.w	r3, r3, #24
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b63      	cmp	r3, #99	@ 0x63
 80012f8:	dd87      	ble.n	800120a <storeProtocol+0x25a>
	for (i = 0; i < (num_protocols + 1); i++) {
 80012fa:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 80012fe:	f103 031c 	add.w	r3, r3, #28
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3301      	adds	r3, #1
 8001306:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 800130a:	f102 021c 	add.w	r2, r2, #28
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8001314:	f103 0313 	add.w	r3, r3, #19
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 800131e:	f102 021c 	add.w	r2, r2, #28
 8001322:	6812      	ldr	r2, [r2, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	f77f af69 	ble.w	80011fc <storeProtocol+0x24c>
			}
		}
	}
	HAL_FLASH_Lock();  // Unlock flash for writing
 800132a:	f004 fc91 	bl	8005c50 <HAL_FLASH_Lock>

	//output:flash memory now has the lines of protocol storage in there
	//the remaining space is still 0xFF in flash
	return 1;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	f507 5708 	add.w	r7, r7, #8704	@ 0x2200
 8001336:	3720      	adds	r7, #32
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <get_num_protocols_in_sector>:

//return number of protocols in the sector
uint8_t get_num_protocols_in_sector(uint32_t sector) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	uint32_t flash_address = get_sector_address(sector);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f001 f80d 	bl	8002364 <get_sector_address>
 800134a:	6138      	str	r0, [r7, #16]

	uint8_t i = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8001350:	2300      	movs	r3, #0
 8001352:	75fb      	strb	r3, [r7, #23]
 8001354:	e011      	b.n	800137a <get_num_protocols_in_sector+0x3e>
		uint8_t first_char = *(uint8_t*) (flash_address + i * PROTOCOL_SIZE);
 8001356:	7dfb      	ldrb	r3, [r7, #23]
 8001358:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800135c:	fb02 f303 	mul.w	r3, r2, r3
 8001360:	461a      	mov	r2, r3
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4413      	add	r3, r2
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	73fb      	strb	r3, [r7, #15]
		//memory in flash is default 0xFF
		if (first_char == 0xFF) {
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	2bff      	cmp	r3, #255	@ 0xff
 800136e:	d101      	bne.n	8001374 <get_num_protocols_in_sector+0x38>
			return i;
 8001370:	7dfb      	ldrb	r3, [r7, #23]
 8001372:	e006      	b.n	8001382 <get_num_protocols_in_sector+0x46>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8001374:	7dfb      	ldrb	r3, [r7, #23]
 8001376:	3301      	adds	r3, #1
 8001378:	75fb      	strb	r3, [r7, #23]
 800137a:	7dfb      	ldrb	r3, [r7, #23]
 800137c:	2b02      	cmp	r3, #2
 800137e:	d9ea      	bls.n	8001356 <get_num_protocols_in_sector+0x1a>
		}
	}
	return i;
 8001380:	7dfb      	ldrb	r3, [r7, #23]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <getFreeSector>:
//	}
//}

//check each sector sequentially for any space.
//return the first sector number you find that has space
uint8_t getFreeSector(void) {
 800138a:	b580      	push	{r7, lr}
 800138c:	b084      	sub	sp, #16
 800138e:	af00      	add	r7, sp, #0
	uint8_t i = 1;
 8001390:	2301      	movs	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
	//check every sector starting at 1
	for (i = 1; i < (NUMBER_OF_SECTORS+1); i++) {
 8001394:	2301      	movs	r3, #1
 8001396:	73fb      	strb	r3, [r7, #15]
 8001398:	e01f      	b.n	80013da <getFreeSector+0x50>
		//check each potential protocol slot in the current sector
		for (uint8_t j = 0; j < MAX_PROTOCOLS_IN_SECTOR; j++) {
 800139a:	2300      	movs	r3, #0
 800139c:	73bb      	strb	r3, [r7, #14]
 800139e:	e016      	b.n	80013ce <getFreeSector+0x44>
			//check first char of the given protocol in the current sector
			uint32_t flash_address = get_sector_address(i) + j * PROTOCOL_SIZE;
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 ffde 	bl	8002364 <get_sector_address>
 80013a8:	4602      	mov	r2, r0
 80013aa:	7bbb      	ldrb	r3, [r7, #14]
 80013ac:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80013b0:	fb01 f303 	mul.w	r3, r1, r3
 80013b4:	4413      	add	r3, r2
 80013b6:	60bb      	str	r3, [r7, #8]
			char first_char = *(char*) (flash_address);
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	71fb      	strb	r3, [r7, #7]
			//if memory address is empty, this sector is free
			if (first_char == 0xFF) {
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2bff      	cmp	r3, #255	@ 0xff
 80013c2:	d101      	bne.n	80013c8 <getFreeSector+0x3e>
				return i;
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	e00e      	b.n	80013e6 <getFreeSector+0x5c>
		for (uint8_t j = 0; j < MAX_PROTOCOLS_IN_SECTOR; j++) {
 80013c8:	7bbb      	ldrb	r3, [r7, #14]
 80013ca:	3301      	adds	r3, #1
 80013cc:	73bb      	strb	r3, [r7, #14]
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d9e5      	bls.n	80013a0 <getFreeSector+0x16>
	for (i = 1; i < (NUMBER_OF_SECTORS+1); i++) {
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	3301      	adds	r3, #1
 80013d8:	73fb      	strb	r3, [r7, #15]
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	2b0e      	cmp	r3, #14
 80013de:	d9dc      	bls.n	800139a <getFreeSector+0x10>
			}
		}
	}
	//if somehow all sectors are full, return 15 or higher (16 in this case)
	return i + 1;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	3301      	adds	r3, #1
 80013e4:	b2db      	uxtb	r3, r3
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <transmitProtocol>:

/**
 * @brief: Transmit protocol from flash memory to ESP32 via UART string-by-string
 * @param sector: which sector the protocol is stored in
 */
void transmitProtocol(uint32_t sector, uint32_t offset) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08c      	sub	sp, #48	@ 0x30
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
	char output[MAX_LINE_LENGTH] = {'\0'};
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]
 800140e:	615a      	str	r2, [r3, #20]
 8001410:	761a      	strb	r2, [r3, #24]
	uint32_t flash_address = get_sector_address(sector) + offset*PROTOCOL_SIZE;
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 ffa6 	bl	8002364 <get_sector_address>
 8001418:	4602      	mov	r2, r0
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001420:	fb01 f303 	mul.w	r3, r1, r3
 8001424:	4413      	add	r3, r2
 8001426:	62bb      	str	r3, [r7, #40]	@ 0x28

	//printf("\nNew Protocol\n"); //just for debugging

	//we need to process up to 1028 G-code commands
	//but if we run into an invalid string, gcode file is over
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 8001428:	2300      	movs	r3, #0
 800142a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800142e:	e02c      	b.n	800148a <transmitProtocol+0x9a>
		//an alternative to resetting the temp buffer is to only read up to newline
		memset(output, 0, MAX_LINE_LENGTH); // Sets all elements of buffer to 0
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	221d      	movs	r2, #29
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f010 fa31 	bl	80118a0 <memset>
		if (read_from_flash(output, flash_address + i * MAX_LINE_LENGTH)) {
 800143e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001442:	4613      	mov	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	1a9b      	subs	r3, r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	461a      	mov	r2, r3
 800144e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001450:	441a      	add	r2, r3
 8001452:	f107 0308 	add.w	r3, r7, #8
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fd74 	bl	8000f46 <read_from_flash>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00d      	beq.n	8001480 <transmitProtocol+0x90>
			//printf("%s", output);
			HAL_UART_Transmit(&huart1, (uint8_t*) output, strlen(output), HAL_MAX_DELAY);
 8001464:	f107 0308 	add.w	r3, r7, #8
 8001468:	4618      	mov	r0, r3
 800146a:	f7fe fec1 	bl	80001f0 <strlen>
 800146e:	4603      	mov	r3, r0
 8001470:	b29a      	uxth	r2, r3
 8001472:	f107 0108 	add.w	r1, r7, #8
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	4808      	ldr	r0, [pc, #32]	@ (800149c <transmitProtocol+0xac>)
 800147c:	f00a ffe4 	bl	800c448 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 8001480:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001484:	3301      	adds	r3, #1
 8001486:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800148a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800148e:	2b63      	cmp	r3, #99	@ 0x63
 8001490:	d9ce      	bls.n	8001430 <transmitProtocol+0x40>
		}
	}
}
 8001492:	bf00      	nop
 8001494:	bf00      	nop
 8001496:	3730      	adds	r7, #48	@ 0x30
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200004b8 	.word	0x200004b8

080014a0 <queueProtocol>:

/**
 * @brief: Queue protocol from flash memory to RAM buffer
 * @param sector: which sector the protocol is stored in
 */
void queueProtocol(uint32_t sector, uint32_t offset) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	@ 0x30
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
	char output[MAX_LINE_LENGTH] = {'\0'};
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]
 80014be:	615a      	str	r2, [r3, #20]
 80014c0:	761a      	strb	r2, [r3, #24]
	uint32_t flash_address = get_sector_address(sector) + offset*PROTOCOL_SIZE;
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 ff4e 	bl	8002364 <get_sector_address>
 80014c8:	4602      	mov	r2, r0
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80014d0:	fb01 f303 	mul.w	r3, r1, r3
 80014d4:	4413      	add	r3, r2
 80014d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	for (uint8_t i = 0; i < MAX_LINES; i++) {
 80014d8:	2300      	movs	r3, #0
 80014da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80014de:	e035      	b.n	800154c <queueProtocol+0xac>
		memset(output, 0, MAX_LINE_LENGTH); // Sets all elements of buffer to 0
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	221d      	movs	r2, #29
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f010 f9d9 	bl	80118a0 <memset>
		if (read_from_flash(output, flash_address + i * MAX_LINE_LENGTH)) {
 80014ee:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80014f2:	4613      	mov	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	1a9b      	subs	r3, r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	461a      	mov	r2, r3
 80014fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001500:	441a      	add	r2, r3
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fd1c 	bl	8000f46 <read_from_flash>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d016      	beq.n	8001542 <queueProtocol+0xa2>
			strcpy(queueBuffer[queueSize][i], output);
 8001514:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <queueProtocol+0xc0>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800151e:	4613      	mov	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	1a9b      	subs	r3, r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	f640 3254 	movw	r2, #2900	@ 0xb54
 800152c:	fb01 f202 	mul.w	r2, r1, r2
 8001530:	4413      	add	r3, r2
 8001532:	4a0c      	ldr	r2, [pc, #48]	@ (8001564 <queueProtocol+0xc4>)
 8001534:	4413      	add	r3, r2
 8001536:	f107 0208 	add.w	r2, r7, #8
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f010 fa3a 	bl	80119b6 <strcpy>
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 8001542:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001546:	3301      	adds	r3, #1
 8001548:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800154c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001550:	2b63      	cmp	r3, #99	@ 0x63
 8001552:	d9c5      	bls.n	80014e0 <queueProtocol+0x40>
		}
	}
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3730      	adds	r7, #48	@ 0x30
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20007694 	.word	0x20007694
 8001564:	2000054c 	.word	0x2000054c

08001568 <transmitQueuedProtocols>:

/**
 * @brief: Transmit queued protocols from RAM buffer to ESP32 via UART string-by-string
 * @param queueSize:
 */
void transmitQueuedProtocols(uint8_t queueSize) {
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b08b      	sub	sp, #44	@ 0x2c
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
	char output[MAX_LINE_LENGTH] = {'\0'};
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]
 8001586:	615a      	str	r2, [r3, #20]
 8001588:	761a      	strb	r2, [r3, #24]

	for(uint8_t i=0; i<queueSize; i++) {
 800158a:	2300      	movs	r3, #0
 800158c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001590:	e03c      	b.n	800160c <transmitQueuedProtocols+0xa4>
		for(uint8_t j=0; j<MAX_LINES; j++) {
 8001592:	2300      	movs	r3, #0
 8001594:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001598:	e02f      	b.n	80015fa <transmitQueuedProtocols+0x92>
			HAL_UART_Transmit(&huart1, (uint8_t*) queueBuffer[i][j], strlen(queueBuffer[i][j]), HAL_MAX_DELAY);
 800159a:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800159e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80015a2:	4613      	mov	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	1a9b      	subs	r3, r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	f640 3254 	movw	r2, #2900	@ 0xb54
 80015b0:	fb01 f202 	mul.w	r2, r1, r2
 80015b4:	4413      	add	r3, r2
 80015b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001620 <transmitQueuedProtocols+0xb8>)
 80015b8:	189c      	adds	r4, r3, r2
 80015ba:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80015be:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80015c2:	4613      	mov	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	1a9b      	subs	r3, r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	f640 3254 	movw	r2, #2900	@ 0xb54
 80015d0:	fb01 f202 	mul.w	r2, r1, r2
 80015d4:	4413      	add	r3, r2
 80015d6:	4a12      	ldr	r2, [pc, #72]	@ (8001620 <transmitQueuedProtocols+0xb8>)
 80015d8:	4413      	add	r3, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe fe08 	bl	80001f0 <strlen>
 80015e0:	4603      	mov	r3, r0
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295
 80015e8:	4621      	mov	r1, r4
 80015ea:	480e      	ldr	r0, [pc, #56]	@ (8001624 <transmitQueuedProtocols+0xbc>)
 80015ec:	f00a ff2c 	bl	800c448 <HAL_UART_Transmit>
		for(uint8_t j=0; j<MAX_LINES; j++) {
 80015f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015f4:	3301      	adds	r3, #1
 80015f6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80015fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015fe:	2b63      	cmp	r3, #99	@ 0x63
 8001600:	d9cb      	bls.n	800159a <transmitQueuedProtocols+0x32>
	for(uint8_t i=0; i<queueSize; i++) {
 8001602:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001606:	3301      	adds	r3, #1
 8001608:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800160c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	429a      	cmp	r2, r3
 8001614:	d3bd      	bcc.n	8001592 <transmitQueuedProtocols+0x2a>
		}
	}
}
 8001616:	bf00      	nop
 8001618:	bf00      	nop
 800161a:	372c      	adds	r7, #44	@ 0x2c
 800161c:	46bd      	mov	sp, r7
 800161e:	bd90      	pop	{r4, r7, pc}
 8001620:	2000054c 	.word	0x2000054c
 8001624:	200004b8 	.word	0x200004b8

08001628 <Touch_Init>:
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flash_address, number);
}

/******************** Touchscreen *********************/

void Touch_Init(void) {
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	if (BSP_TS_Init(240, 320) != TS_OK) {
 800162c:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8001630:	20f0      	movs	r0, #240	@ 0xf0
 8001632:	f003 faed 	bl	8004c10 <BSP_TS_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d009      	beq.n	8001650 <Touch_Init+0x28>
		BSP_LCD_DisplayStringAt(0, 10, (uint8_t*) "Failure", CENTER_MODE);
 800163c:	2301      	movs	r3, #1
 800163e:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <Touch_Init+0x40>)
 8001640:	210a      	movs	r1, #10
 8001642:	2000      	movs	r0, #0
 8001644:	f002 fe14 	bl	8004270 <BSP_LCD_DisplayStringAt>
		printf("Touchscreen Initialization failure\n");
 8001648:	4808      	ldr	r0, [pc, #32]	@ (800166c <Touch_Init+0x44>)
 800164a:	f010 f829 	bl	80116a0 <puts>
	} else {
		BSP_LCD_DisplayStringAt(0, 300, (uint8_t*) "Success", CENTER_MODE);
		printf("Touchscreen Initialization success\n");
	}
}
 800164e:	e009      	b.n	8001664 <Touch_Init+0x3c>
		BSP_LCD_DisplayStringAt(0, 300, (uint8_t*) "Success", CENTER_MODE);
 8001650:	2301      	movs	r3, #1
 8001652:	4a07      	ldr	r2, [pc, #28]	@ (8001670 <Touch_Init+0x48>)
 8001654:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001658:	2000      	movs	r0, #0
 800165a:	f002 fe09 	bl	8004270 <BSP_LCD_DisplayStringAt>
		printf("Touchscreen Initialization success\n");
 800165e:	4805      	ldr	r0, [pc, #20]	@ (8001674 <Touch_Init+0x4c>)
 8001660:	f010 f81e 	bl	80116a0 <puts>
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	08012684 	.word	0x08012684
 800166c:	0801268c 	.word	0x0801268c
 8001670:	080126b0 	.word	0x080126b0
 8001674:	080126b8 	.word	0x080126b8

08001678 <DrawMainPage>:
/**
 * @brief: Draw main page and handle button label and status updates
 * @param: page_num: determines which page should be drawn from 1-10
 * @retval: none
 */
void DrawMainPage(uint8_t page_num) {
 8001678:	b5b0      	push	{r4, r5, r7, lr}
 800167a:	b0a6      	sub	sp, #152	@ 0x98
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
	//Draw "Protocol Title" box
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001682:	f04f 30ff 	mov.w	r0, #4294967295
 8001686:	f002 fd87 	bl	8004198 <BSP_LCD_Clear>
	char empty[20] = "Empty\n"; //strings from flash memory come with newline at end
 800168a:	4a66      	ldr	r2, [pc, #408]	@ (8001824 <DrawMainPage+0x1ac>)
 800168c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001690:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001694:	6018      	str	r0, [r3, #0]
 8001696:	3304      	adds	r3, #4
 8001698:	8019      	strh	r1, [r3, #0]
 800169a:	3302      	adds	r3, #2
 800169c:	0c0a      	lsrs	r2, r1, #16
 800169e:	701a      	strb	r2, [r3, #0]
 80016a0:	f107 0387 	add.w	r3, r7, #135	@ 0x87
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	731a      	strb	r2, [r3, #12]
	char pageTitle[20] = "";
 80016ae:	2300      	movs	r3, #0
 80016b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80016b2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
	sprintf(pageTitle, "Page %d", page_num);
 80016c0:	79fa      	ldrb	r2, [r7, #7]
 80016c2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016c6:	4958      	ldr	r1, [pc, #352]	@ (8001828 <DrawMainPage+0x1b0>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f00f fff1 	bl	80116b0 <siprintf>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80016ce:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80016d2:	f002 fd15 	bl	8004100 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font20);
 80016d6:	4855      	ldr	r0, [pc, #340]	@ (800182c <DrawMainPage+0x1b4>)
 80016d8:	f002 fd44 	bl	8004164 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80016dc:	4854      	ldr	r0, [pc, #336]	@ (8001830 <DrawMainPage+0x1b8>)
 80016de:	f002 fd27 	bl	8004130 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(10, 10, (uint8_t*) pageTitle, CENTER_MODE);
 80016e2:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80016e6:	2301      	movs	r3, #1
 80016e8:	210a      	movs	r1, #10
 80016ea:	200a      	movs	r0, #10
 80016ec:	f002 fdc0 	bl	8004270 <BSP_LCD_DisplayStringAt>

	//get button label info from flash memory
	char readBuffer1[MAX_LINE_LENGTH] = ""; //initialize with nulls
 80016f0:	2300      	movs	r3, #0
 80016f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80016f4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
 8001704:	615a      	str	r2, [r3, #20]
 8001706:	761a      	strb	r2, [r3, #24]
	char readBuffer2[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001708:	2300      	movs	r3, #0
 800170a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800170c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
 800171c:	615a      	str	r2, [r3, #20]
 800171e:	761a      	strb	r2, [r3, #24]
	char readBuffer3[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
 8001734:	615a      	str	r2, [r3, #20]
 8001736:	761a      	strb	r2, [r3, #24]
	//if the protocol exists, read from it. else, name it empty
	if (read_from_flash(readBuffer1, get_sector_address(page_num))) {
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	4618      	mov	r0, r3
 800173c:	f000 fe12 	bl	8002364 <get_sector_address>
 8001740:	4602      	mov	r2, r0
 8001742:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fbfc 	bl	8000f46 <read_from_flash>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00a      	beq.n	800176a <DrawMainPage+0xf2>
		strcpy(buttons[0].label, readBuffer1);
 8001754:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001758:	4619      	mov	r1, r3
 800175a:	4836      	ldr	r0, [pc, #216]	@ (8001834 <DrawMainPage+0x1bc>)
 800175c:	f010 f92b 	bl	80119b6 <strcpy>
		buttons[0].status = NOT_EMPTY;
 8001760:	4b35      	ldr	r3, [pc, #212]	@ (8001838 <DrawMainPage+0x1c0>)
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8001768:	e009      	b.n	800177e <DrawMainPage+0x106>
	} else {
		strcpy(buttons[0].label, empty);
 800176a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800176e:	4619      	mov	r1, r3
 8001770:	4830      	ldr	r0, [pc, #192]	@ (8001834 <DrawMainPage+0x1bc>)
 8001772:	f010 f920 	bl	80119b6 <strcpy>
		buttons[0].status = EMPTY;
 8001776:	4b30      	ldr	r3, [pc, #192]	@ (8001838 <DrawMainPage+0x1c0>)
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	}
	if (read_from_flash(readBuffer2, get_sector_address(page_num) + PROTOCOL_SIZE)) {
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	4618      	mov	r0, r3
 8001782:	f000 fdef 	bl	8002364 <get_sector_address>
 8001786:	4603      	mov	r3, r0
 8001788:	f603 32b8 	addw	r2, r3, #3000	@ 0xbb8
 800178c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fbd7 	bl	8000f46 <read_from_flash>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00a      	beq.n	80017b4 <DrawMainPage+0x13c>
		strcpy(buttons[1].label, readBuffer2);
 800179e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017a2:	4619      	mov	r1, r3
 80017a4:	4825      	ldr	r0, [pc, #148]	@ (800183c <DrawMainPage+0x1c4>)
 80017a6:	f010 f906 	bl	80119b6 <strcpy>
		buttons[1].status = NOT_EMPTY;
 80017aa:	4b23      	ldr	r3, [pc, #140]	@ (8001838 <DrawMainPage+0x1c0>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 80017b2:	e009      	b.n	80017c8 <DrawMainPage+0x150>
	} else {
		strcpy(buttons[1].label, empty);
 80017b4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80017b8:	4619      	mov	r1, r3
 80017ba:	4820      	ldr	r0, [pc, #128]	@ (800183c <DrawMainPage+0x1c4>)
 80017bc:	f010 f8fb 	bl	80119b6 <strcpy>
		buttons[1].status = EMPTY;
 80017c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001838 <DrawMainPage+0x1c0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}
	if (read_from_flash(readBuffer3, get_sector_address(page_num) + 2 * PROTOCOL_SIZE)) {
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 fdca 	bl	8002364 <get_sector_address>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f503 53bb 	add.w	r3, r3, #5984	@ 0x1760
 80017d6:	3310      	adds	r3, #16
 80017d8:	f107 020c 	add.w	r2, r7, #12
 80017dc:	4619      	mov	r1, r3
 80017de:	4610      	mov	r0, r2
 80017e0:	f7ff fbb1 	bl	8000f46 <read_from_flash>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00a      	beq.n	8001800 <DrawMainPage+0x188>
		strcpy(buttons[2].label, readBuffer3);
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	4619      	mov	r1, r3
 80017f0:	4813      	ldr	r0, [pc, #76]	@ (8001840 <DrawMainPage+0x1c8>)
 80017f2:	f010 f8e0 	bl	80119b6 <strcpy>
		buttons[2].status = NOT_EMPTY;
 80017f6:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <DrawMainPage+0x1c0>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80017fe:	e009      	b.n	8001814 <DrawMainPage+0x19c>
	} else {
		strcpy(buttons[2].label, empty);
 8001800:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001804:	4619      	mov	r1, r3
 8001806:	480e      	ldr	r0, [pc, #56]	@ (8001840 <DrawMainPage+0x1c8>)
 8001808:	f010 f8d5 	bl	80119b6 <strcpy>
		buttons[2].status = EMPTY;
 800180c:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <DrawMainPage+0x1c0>)
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	}

	// Draw buttons
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001814:	480b      	ldr	r0, [pc, #44]	@ (8001844 <DrawMainPage+0x1cc>)
 8001816:	f002 fc73 	bl	8004100 <BSP_LCD_SetTextColor>
	for (int i = 0; i < NUM_BUTTONS; i++) {
 800181a:	2300      	movs	r3, #0
 800181c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001820:	e07e      	b.n	8001920 <DrawMainPage+0x2a8>
 8001822:	bf00      	nop
 8001824:	080126e4 	.word	0x080126e4
 8001828:	080126dc 	.word	0x080126dc
 800182c:	200001d8 	.word	0x200001d8
 8001830:	ffff0000 	.word	0xffff0000
 8001834:	20000008 	.word	0x20000008
 8001838:	20000000 	.word	0x20000000
 800183c:	2000002e 	.word	0x2000002e
 8001840:	20000054 	.word	0x20000054
 8001844:	ff0000ff 	.word	0xff0000ff
		BSP_LCD_FillRect(buttons[i].x, buttons[i].y, buttons[i].w,
 8001848:	4a6f      	ldr	r2, [pc, #444]	@ (8001a08 <DrawMainPage+0x390>)
 800184a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800184e:	2126      	movs	r1, #38	@ 0x26
 8001850:	fb01 f303 	mul.w	r3, r1, r3
 8001854:	4413      	add	r3, r2
 8001856:	8818      	ldrh	r0, [r3, #0]
 8001858:	4a6b      	ldr	r2, [pc, #428]	@ (8001a08 <DrawMainPage+0x390>)
 800185a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800185e:	2126      	movs	r1, #38	@ 0x26
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	4413      	add	r3, r2
 8001866:	3302      	adds	r3, #2
 8001868:	8819      	ldrh	r1, [r3, #0]
 800186a:	4a67      	ldr	r2, [pc, #412]	@ (8001a08 <DrawMainPage+0x390>)
 800186c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001870:	2426      	movs	r4, #38	@ 0x26
 8001872:	fb04 f303 	mul.w	r3, r4, r3
 8001876:	4413      	add	r3, r2
 8001878:	3304      	adds	r3, #4
 800187a:	881a      	ldrh	r2, [r3, #0]
 800187c:	4c62      	ldr	r4, [pc, #392]	@ (8001a08 <DrawMainPage+0x390>)
 800187e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001882:	2526      	movs	r5, #38	@ 0x26
 8001884:	fb05 f303 	mul.w	r3, r5, r3
 8001888:	4423      	add	r3, r4
 800188a:	3306      	adds	r3, #6
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	f002 fdad 	bl	80043ec <BSP_LCD_FillRect>
				buttons[i].h);
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001892:	f04f 30ff 	mov.w	r0, #4294967295
 8001896:	f002 fc33 	bl	8004100 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800189a:	485c      	ldr	r0, [pc, #368]	@ (8001a0c <DrawMainPage+0x394>)
 800189c:	f002 fc48 	bl	8004130 <BSP_LCD_SetBackColor>
		if (buttons[i].label[10] == NEWLINE_CHAR) {
		}
		buttons[i].label[strlen(buttons[i].label) - 1] = ' '; //dont display null terminator
 80018a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80018a4:	2226      	movs	r2, #38	@ 0x26
 80018a6:	fb02 f303 	mul.w	r3, r2, r3
 80018aa:	3308      	adds	r3, #8
 80018ac:	4a56      	ldr	r2, [pc, #344]	@ (8001a08 <DrawMainPage+0x390>)
 80018ae:	4413      	add	r3, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fc9d 	bl	80001f0 <strlen>
 80018b6:	4603      	mov	r3, r0
 80018b8:	3b01      	subs	r3, #1
 80018ba:	4953      	ldr	r1, [pc, #332]	@ (8001a08 <DrawMainPage+0x390>)
 80018bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80018c0:	2026      	movs	r0, #38	@ 0x26
 80018c2:	fb00 f202 	mul.w	r2, r0, r2
 80018c6:	440a      	add	r2, r1
 80018c8:	4413      	add	r3, r2
 80018ca:	3308      	adds	r3, #8
 80018cc:	2220      	movs	r2, #32
 80018ce:	701a      	strb	r2, [r3, #0]
		BSP_LCD_DisplayStringAt(buttons[i].x + 10, buttons[i].y + 10,
 80018d0:	4a4d      	ldr	r2, [pc, #308]	@ (8001a08 <DrawMainPage+0x390>)
 80018d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80018d6:	2126      	movs	r1, #38	@ 0x26
 80018d8:	fb01 f303 	mul.w	r3, r1, r3
 80018dc:	4413      	add	r3, r2
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	330a      	adds	r3, #10
 80018e2:	b298      	uxth	r0, r3
 80018e4:	4a48      	ldr	r2, [pc, #288]	@ (8001a08 <DrawMainPage+0x390>)
 80018e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80018ea:	2126      	movs	r1, #38	@ 0x26
 80018ec:	fb01 f303 	mul.w	r3, r1, r3
 80018f0:	4413      	add	r3, r2
 80018f2:	3302      	adds	r3, #2
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	330a      	adds	r3, #10
 80018f8:	b299      	uxth	r1, r3
				(uint8_t*) buttons[i].label, LEFT_MODE);
 80018fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80018fe:	2226      	movs	r2, #38	@ 0x26
 8001900:	fb02 f303 	mul.w	r3, r2, r3
 8001904:	3308      	adds	r3, #8
 8001906:	4a40      	ldr	r2, [pc, #256]	@ (8001a08 <DrawMainPage+0x390>)
 8001908:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(buttons[i].x + 10, buttons[i].y + 10,
 800190a:	2303      	movs	r3, #3
 800190c:	f002 fcb0 	bl	8004270 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001910:	483e      	ldr	r0, [pc, #248]	@ (8001a0c <DrawMainPage+0x394>)
 8001912:	f002 fbf5 	bl	8004100 <BSP_LCD_SetTextColor>
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8001916:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800191a:	3301      	adds	r3, #1
 800191c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001920:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001924:	2b02      	cmp	r3, #2
 8001926:	dd8f      	ble.n	8001848 <DrawMainPage+0x1d0>
	}

	// Draw "Next" button
	if (page_num != 10) {
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	2b0a      	cmp	r3, #10
 800192c:	d01f      	beq.n	800196e <DrawMainPage+0x2f6>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800192e:	4838      	ldr	r0, [pc, #224]	@ (8001a10 <DrawMainPage+0x398>)
 8001930:	f002 fbe6 	bl	8004100 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(nextButton.x, nextButton.y, nextButton.w,
 8001934:	4b37      	ldr	r3, [pc, #220]	@ (8001a14 <DrawMainPage+0x39c>)
 8001936:	8818      	ldrh	r0, [r3, #0]
 8001938:	4b36      	ldr	r3, [pc, #216]	@ (8001a14 <DrawMainPage+0x39c>)
 800193a:	8859      	ldrh	r1, [r3, #2]
 800193c:	4b35      	ldr	r3, [pc, #212]	@ (8001a14 <DrawMainPage+0x39c>)
 800193e:	889a      	ldrh	r2, [r3, #4]
 8001940:	4b34      	ldr	r3, [pc, #208]	@ (8001a14 <DrawMainPage+0x39c>)
 8001942:	88db      	ldrh	r3, [r3, #6]
 8001944:	f002 fd52 	bl	80043ec <BSP_LCD_FillRect>
				nextButton.h);
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001948:	f04f 30ff 	mov.w	r0, #4294967295
 800194c:	f002 fbd8 	bl	8004100 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001950:	482f      	ldr	r0, [pc, #188]	@ (8001a10 <DrawMainPage+0x398>)
 8001952:	f002 fbed 	bl	8004130 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(nextButton.x + 10, nextButton.y + 10,
 8001956:	4b2f      	ldr	r3, [pc, #188]	@ (8001a14 <DrawMainPage+0x39c>)
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	330a      	adds	r3, #10
 800195c:	b298      	uxth	r0, r3
 800195e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a14 <DrawMainPage+0x39c>)
 8001960:	885b      	ldrh	r3, [r3, #2]
 8001962:	330a      	adds	r3, #10
 8001964:	b299      	uxth	r1, r3
 8001966:	2303      	movs	r3, #3
 8001968:	4a2b      	ldr	r2, [pc, #172]	@ (8001a18 <DrawMainPage+0x3a0>)
 800196a:	f002 fc81 	bl	8004270 <BSP_LCD_DisplayStringAt>
				(uint8_t*) nextButton.label, LEFT_MODE);
	}

	// Draw "Back" button
	if (page_num != 1) {
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d01f      	beq.n	80019b4 <DrawMainPage+0x33c>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001974:	4826      	ldr	r0, [pc, #152]	@ (8001a10 <DrawMainPage+0x398>)
 8001976:	f002 fbc3 	bl	8004100 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(backButton.x, backButton.y, backButton.w,
 800197a:	4b28      	ldr	r3, [pc, #160]	@ (8001a1c <DrawMainPage+0x3a4>)
 800197c:	8818      	ldrh	r0, [r3, #0]
 800197e:	4b27      	ldr	r3, [pc, #156]	@ (8001a1c <DrawMainPage+0x3a4>)
 8001980:	8859      	ldrh	r1, [r3, #2]
 8001982:	4b26      	ldr	r3, [pc, #152]	@ (8001a1c <DrawMainPage+0x3a4>)
 8001984:	889a      	ldrh	r2, [r3, #4]
 8001986:	4b25      	ldr	r3, [pc, #148]	@ (8001a1c <DrawMainPage+0x3a4>)
 8001988:	88db      	ldrh	r3, [r3, #6]
 800198a:	f002 fd2f 	bl	80043ec <BSP_LCD_FillRect>
				backButton.h);
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800198e:	f04f 30ff 	mov.w	r0, #4294967295
 8001992:	f002 fbb5 	bl	8004100 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001996:	481e      	ldr	r0, [pc, #120]	@ (8001a10 <DrawMainPage+0x398>)
 8001998:	f002 fbca 	bl	8004130 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(backButton.x + 10, backButton.y + 10,
 800199c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a1c <DrawMainPage+0x3a4>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	330a      	adds	r3, #10
 80019a2:	b298      	uxth	r0, r3
 80019a4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a1c <DrawMainPage+0x3a4>)
 80019a6:	885b      	ldrh	r3, [r3, #2]
 80019a8:	330a      	adds	r3, #10
 80019aa:	b299      	uxth	r1, r3
 80019ac:	2303      	movs	r3, #3
 80019ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001a20 <DrawMainPage+0x3a8>)
 80019b0:	f002 fc5e 	bl	8004270 <BSP_LCD_DisplayStringAt>
				(uint8_t*) backButton.label, LEFT_MODE);
	}

	//draw "Queue" button
	if (page_num == 1) {
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d121      	bne.n	80019fe <DrawMainPage+0x386>
		BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 80019ba:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 80019be:	f002 fb9f 	bl	8004100 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(queueButton.x, queueButton.y, queueButton.w,
 80019c2:	4b18      	ldr	r3, [pc, #96]	@ (8001a24 <DrawMainPage+0x3ac>)
 80019c4:	8818      	ldrh	r0, [r3, #0]
 80019c6:	4b17      	ldr	r3, [pc, #92]	@ (8001a24 <DrawMainPage+0x3ac>)
 80019c8:	8859      	ldrh	r1, [r3, #2]
 80019ca:	4b16      	ldr	r3, [pc, #88]	@ (8001a24 <DrawMainPage+0x3ac>)
 80019cc:	889a      	ldrh	r2, [r3, #4]
 80019ce:	4b15      	ldr	r3, [pc, #84]	@ (8001a24 <DrawMainPage+0x3ac>)
 80019d0:	88db      	ldrh	r3, [r3, #6]
 80019d2:	f002 fd0b 	bl	80043ec <BSP_LCD_FillRect>
				queueButton.h);
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80019d6:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80019da:	f002 fb91 	bl	8004100 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_YELLOW);
 80019de:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 80019e2:	f002 fba5 	bl	8004130 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(queueButton.x + 10, queueButton.y + 10,
 80019e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a24 <DrawMainPage+0x3ac>)
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	330a      	adds	r3, #10
 80019ec:	b298      	uxth	r0, r3
 80019ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001a24 <DrawMainPage+0x3ac>)
 80019f0:	885b      	ldrh	r3, [r3, #2]
 80019f2:	330a      	adds	r3, #10
 80019f4:	b299      	uxth	r1, r3
 80019f6:	2303      	movs	r3, #3
 80019f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001a28 <DrawMainPage+0x3b0>)
 80019fa:	f002 fc39 	bl	8004270 <BSP_LCD_DisplayStringAt>
				(uint8_t*) queueButton.label, LEFT_MODE);
	}
}
 80019fe:	bf00      	nop
 8001a00:	3798      	adds	r7, #152	@ 0x98
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bdb0      	pop	{r4, r5, r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	ff0000ff 	.word	0xff0000ff
 8001a10:	ffff0000 	.word	0xffff0000
 8001a14:	200000ec 	.word	0x200000ec
 8001a18:	200000f4 	.word	0x200000f4
 8001a1c:	200000c4 	.word	0x200000c4
 8001a20:	200000cc 	.word	0x200000cc
 8001a24:	20000074 	.word	0x20000074
 8001a28:	2000007c 	.word	0x2000007c

08001a2c <DrawInfoPage>:

void DrawInfoPage(char protocolTitle[MAX_LINE_LENGTH]) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f002 fbae 	bl	8004198 <BSP_LCD_Clear>
	//Display protocol name at top of screen
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001a3c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001a40:	f002 fb5e 	bl	8004100 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001a44:	4836      	ldr	r0, [pc, #216]	@ (8001b20 <DrawInfoPage+0xf4>)
 8001a46:	f002 fb73 	bl	8004130 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(10, 10, (uint8_t*) protocolTitle, CENTER_MODE);
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	210a      	movs	r1, #10
 8001a50:	200a      	movs	r0, #10
 8001a52:	f002 fc0d 	bl	8004270 <BSP_LCD_DisplayStringAt>

	//Draw "QueueSelect" button on select page
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001a56:	4833      	ldr	r0, [pc, #204]	@ (8001b24 <DrawInfoPage+0xf8>)
 8001a58:	f002 fb52 	bl	8004100 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(queueSelectButton.x, queueSelectButton.y, queueSelectButton.w,
 8001a5c:	4b32      	ldr	r3, [pc, #200]	@ (8001b28 <DrawInfoPage+0xfc>)
 8001a5e:	8818      	ldrh	r0, [r3, #0]
 8001a60:	4b31      	ldr	r3, [pc, #196]	@ (8001b28 <DrawInfoPage+0xfc>)
 8001a62:	8859      	ldrh	r1, [r3, #2]
 8001a64:	4b30      	ldr	r3, [pc, #192]	@ (8001b28 <DrawInfoPage+0xfc>)
 8001a66:	889a      	ldrh	r2, [r3, #4]
 8001a68:	4b2f      	ldr	r3, [pc, #188]	@ (8001b28 <DrawInfoPage+0xfc>)
 8001a6a:	88db      	ldrh	r3, [r3, #6]
 8001a6c:	f002 fcbe 	bl	80043ec <BSP_LCD_FillRect>
			queueSelectButton.h);
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001a70:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001a74:	f002 fb44 	bl	8004100 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001a78:	482a      	ldr	r0, [pc, #168]	@ (8001b24 <DrawInfoPage+0xf8>)
 8001a7a:	f002 fb59 	bl	8004130 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(queueSelectButton.x + 10, queueSelectButton.y + 10,
 8001a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b28 <DrawInfoPage+0xfc>)
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	330a      	adds	r3, #10
 8001a84:	b298      	uxth	r0, r3
 8001a86:	4b28      	ldr	r3, [pc, #160]	@ (8001b28 <DrawInfoPage+0xfc>)
 8001a88:	885b      	ldrh	r3, [r3, #2]
 8001a8a:	330a      	adds	r3, #10
 8001a8c:	b299      	uxth	r1, r3
 8001a8e:	2303      	movs	r3, #3
 8001a90:	4a26      	ldr	r2, [pc, #152]	@ (8001b2c <DrawInfoPage+0x100>)
 8001a92:	f002 fbed 	bl	8004270 <BSP_LCD_DisplayStringAt>
			(uint8_t*) queueSelectButton.label, LEFT_MODE);

	//Draw "Select" button
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001a96:	4823      	ldr	r0, [pc, #140]	@ (8001b24 <DrawInfoPage+0xf8>)
 8001a98:	f002 fb32 	bl	8004100 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(selectButton.x, selectButton.y, selectButton.w,
 8001a9c:	4b24      	ldr	r3, [pc, #144]	@ (8001b30 <DrawInfoPage+0x104>)
 8001a9e:	8818      	ldrh	r0, [r3, #0]
 8001aa0:	4b23      	ldr	r3, [pc, #140]	@ (8001b30 <DrawInfoPage+0x104>)
 8001aa2:	8859      	ldrh	r1, [r3, #2]
 8001aa4:	4b22      	ldr	r3, [pc, #136]	@ (8001b30 <DrawInfoPage+0x104>)
 8001aa6:	889a      	ldrh	r2, [r3, #4]
 8001aa8:	4b21      	ldr	r3, [pc, #132]	@ (8001b30 <DrawInfoPage+0x104>)
 8001aaa:	88db      	ldrh	r3, [r3, #6]
 8001aac:	f002 fc9e 	bl	80043ec <BSP_LCD_FillRect>
			selectButton.h);
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001ab0:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001ab4:	f002 fb24 	bl	8004100 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001ab8:	481a      	ldr	r0, [pc, #104]	@ (8001b24 <DrawInfoPage+0xf8>)
 8001aba:	f002 fb39 	bl	8004130 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(selectButton.x + 10, selectButton.y + 10,
 8001abe:	4b1c      	ldr	r3, [pc, #112]	@ (8001b30 <DrawInfoPage+0x104>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	330a      	adds	r3, #10
 8001ac4:	b298      	uxth	r0, r3
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b30 <DrawInfoPage+0x104>)
 8001ac8:	885b      	ldrh	r3, [r3, #2]
 8001aca:	330a      	adds	r3, #10
 8001acc:	b299      	uxth	r1, r3
 8001ace:	2303      	movs	r3, #3
 8001ad0:	4a18      	ldr	r2, [pc, #96]	@ (8001b34 <DrawInfoPage+0x108>)
 8001ad2:	f002 fbcd 	bl	8004270 <BSP_LCD_DisplayStringAt>
			(uint8_t*) selectButton.label, LEFT_MODE);

	// Draw "Back" button
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001ad6:	4812      	ldr	r0, [pc, #72]	@ (8001b20 <DrawInfoPage+0xf4>)
 8001ad8:	f002 fb12 	bl	8004100 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(backButton.x, backButton.y, backButton.w, backButton.h);
 8001adc:	4b16      	ldr	r3, [pc, #88]	@ (8001b38 <DrawInfoPage+0x10c>)
 8001ade:	8818      	ldrh	r0, [r3, #0]
 8001ae0:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <DrawInfoPage+0x10c>)
 8001ae2:	8859      	ldrh	r1, [r3, #2]
 8001ae4:	4b14      	ldr	r3, [pc, #80]	@ (8001b38 <DrawInfoPage+0x10c>)
 8001ae6:	889a      	ldrh	r2, [r3, #4]
 8001ae8:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <DrawInfoPage+0x10c>)
 8001aea:	88db      	ldrh	r3, [r3, #6]
 8001aec:	f002 fc7e 	bl	80043ec <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f002 fb04 	bl	8004100 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001af8:	4809      	ldr	r0, [pc, #36]	@ (8001b20 <DrawInfoPage+0xf4>)
 8001afa:	f002 fb19 	bl	8004130 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(backButton.x + 10, backButton.y + 10,
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <DrawInfoPage+0x10c>)
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	330a      	adds	r3, #10
 8001b04:	b298      	uxth	r0, r3
 8001b06:	4b0c      	ldr	r3, [pc, #48]	@ (8001b38 <DrawInfoPage+0x10c>)
 8001b08:	885b      	ldrh	r3, [r3, #2]
 8001b0a:	330a      	adds	r3, #10
 8001b0c:	b299      	uxth	r1, r3
 8001b0e:	2303      	movs	r3, #3
 8001b10:	4a0a      	ldr	r2, [pc, #40]	@ (8001b3c <DrawInfoPage+0x110>)
 8001b12:	f002 fbad 	bl	8004270 <BSP_LCD_DisplayStringAt>
			(uint8_t*) backButton.label, LEFT_MODE);
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	ffff0000 	.word	0xffff0000
 8001b24:	ff0000ff 	.word	0xff0000ff
 8001b28:	2000009c 	.word	0x2000009c
 8001b2c:	200000a4 	.word	0x200000a4
 8001b30:	20000114 	.word	0x20000114
 8001b34:	2000011c 	.word	0x2000011c
 8001b38:	200000c4 	.word	0x200000c4
 8001b3c:	200000cc 	.word	0x200000cc

08001b40 <DrawQueuePage>:

void DrawQueuePage(uint8_t queueSize) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08e      	sub	sp, #56	@ 0x38
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4e:	f002 fb23 	bl	8004198 <BSP_LCD_Clear>
	char pageTitle[20] = "";
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
 8001b56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
	sprintf(pageTitle, "Queue Size: %d", queueSize);
 8001b64:	79fa      	ldrb	r2, [r7, #7]
 8001b66:	f107 0320 	add.w	r3, r7, #32
 8001b6a:	4956      	ldr	r1, [pc, #344]	@ (8001cc4 <DrawQueuePage+0x184>)
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f00f fd9f 	bl	80116b0 <siprintf>
	//Display Queue at top of the screen
	BSP_LCD_SetFont(&Font20);
 8001b72:	4855      	ldr	r0, [pc, #340]	@ (8001cc8 <DrawQueuePage+0x188>)
 8001b74:	f002 faf6 	bl	8004164 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001b78:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001b7c:	f002 fac0 	bl	8004100 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001b80:	4852      	ldr	r0, [pc, #328]	@ (8001ccc <DrawQueuePage+0x18c>)
 8001b82:	f002 fad5 	bl	8004130 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(10, 10, (uint8_t*) pageTitle, CENTER_MODE);
 8001b86:	f107 0220 	add.w	r2, r7, #32
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	210a      	movs	r1, #10
 8001b8e:	200a      	movs	r0, #10
 8001b90:	f002 fb6e 	bl	8004270 <BSP_LCD_DisplayStringAt>

	//display protocols in queue here
	BSP_LCD_SetFont(&Font16);
 8001b94:	484e      	ldr	r0, [pc, #312]	@ (8001cd0 <DrawQueuePage+0x190>)
 8001b96:	f002 fae5 	bl	8004164 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001b9a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001b9e:	f002 faaf 	bl	8004100 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba6:	f002 fac3 	bl	8004130 <BSP_LCD_SetBackColor>
	char format[20] = "";
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	f107 0310 	add.w	r3, r7, #16
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
	for(uint8_t i=0; i<queueSize; i++) {
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001bc2:	e033      	b.n	8001c2c <DrawQueuePage+0xec>
		sprintf(format, "%d.) ", i+1);
 8001bc4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	f107 030c 	add.w	r3, r7, #12
 8001bce:	4941      	ldr	r1, [pc, #260]	@ (8001cd4 <DrawQueuePage+0x194>)
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f00f fd6d 	bl	80116b0 <siprintf>
		BSP_LCD_DisplayStringAt(10, 50 + i*20, (uint8_t*) format, LEFT_MODE);
 8001bd6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	0092      	lsls	r2, r2, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	3332      	adds	r3, #50	@ 0x32
 8001be8:	b299      	uxth	r1, r3
 8001bea:	f107 020c 	add.w	r2, r7, #12
 8001bee:	2303      	movs	r3, #3
 8001bf0:	200a      	movs	r0, #10
 8001bf2:	f002 fb3d 	bl	8004270 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(60, 50 + i*20, (uint8_t*) queueBuffer[i][0], LEFT_MODE);
 8001bf6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	0092      	lsls	r2, r2, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	3332      	adds	r3, #50	@ 0x32
 8001c08:	b299      	uxth	r1, r3
 8001c0a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001c0e:	f640 3254 	movw	r2, #2900	@ 0xb54
 8001c12:	fb02 f303 	mul.w	r3, r2, r3
 8001c16:	4a30      	ldr	r2, [pc, #192]	@ (8001cd8 <DrawQueuePage+0x198>)
 8001c18:	441a      	add	r2, r3
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	203c      	movs	r0, #60	@ 0x3c
 8001c1e:	f002 fb27 	bl	8004270 <BSP_LCD_DisplayStringAt>
	for(uint8_t i=0; i<queueSize; i++) {
 8001c22:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001c26:	3301      	adds	r3, #1
 8001c28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001c2c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d3c6      	bcc.n	8001bc4 <DrawQueuePage+0x84>
	}
	BSP_LCD_SetFont(&Font20);
 8001c36:	4824      	ldr	r0, [pc, #144]	@ (8001cc8 <DrawQueuePage+0x188>)
 8001c38:	f002 fa94 	bl	8004164 <BSP_LCD_SetFont>

	//Draw "Run" button
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001c3c:	4823      	ldr	r0, [pc, #140]	@ (8001ccc <DrawQueuePage+0x18c>)
 8001c3e:	f002 fa5f 	bl	8004100 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(runButton.x, runButton.y, runButton.w,
 8001c42:	4b26      	ldr	r3, [pc, #152]	@ (8001cdc <DrawQueuePage+0x19c>)
 8001c44:	8818      	ldrh	r0, [r3, #0]
 8001c46:	4b25      	ldr	r3, [pc, #148]	@ (8001cdc <DrawQueuePage+0x19c>)
 8001c48:	8859      	ldrh	r1, [r3, #2]
 8001c4a:	4b24      	ldr	r3, [pc, #144]	@ (8001cdc <DrawQueuePage+0x19c>)
 8001c4c:	889a      	ldrh	r2, [r3, #4]
 8001c4e:	4b23      	ldr	r3, [pc, #140]	@ (8001cdc <DrawQueuePage+0x19c>)
 8001c50:	88db      	ldrh	r3, [r3, #6]
 8001c52:	f002 fbcb 	bl	80043ec <BSP_LCD_FillRect>
			runButton.h);
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001c56:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5a:	f002 fa51 	bl	8004100 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001c5e:	481b      	ldr	r0, [pc, #108]	@ (8001ccc <DrawQueuePage+0x18c>)
 8001c60:	f002 fa66 	bl	8004130 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(runButton.x + 10, runButton.y + 10,
 8001c64:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <DrawQueuePage+0x19c>)
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	330a      	adds	r3, #10
 8001c6a:	b298      	uxth	r0, r3
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cdc <DrawQueuePage+0x19c>)
 8001c6e:	885b      	ldrh	r3, [r3, #2]
 8001c70:	330a      	adds	r3, #10
 8001c72:	b299      	uxth	r1, r3
 8001c74:	2303      	movs	r3, #3
 8001c76:	4a1a      	ldr	r2, [pc, #104]	@ (8001ce0 <DrawQueuePage+0x1a0>)
 8001c78:	f002 fafa 	bl	8004270 <BSP_LCD_DisplayStringAt>
			(uint8_t*) runButton.label, LEFT_MODE);

	// Draw "Back" button
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001c7c:	4813      	ldr	r0, [pc, #76]	@ (8001ccc <DrawQueuePage+0x18c>)
 8001c7e:	f002 fa3f 	bl	8004100 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(backButton.x, backButton.y, backButton.w, backButton.h);
 8001c82:	4b18      	ldr	r3, [pc, #96]	@ (8001ce4 <DrawQueuePage+0x1a4>)
 8001c84:	8818      	ldrh	r0, [r3, #0]
 8001c86:	4b17      	ldr	r3, [pc, #92]	@ (8001ce4 <DrawQueuePage+0x1a4>)
 8001c88:	8859      	ldrh	r1, [r3, #2]
 8001c8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ce4 <DrawQueuePage+0x1a4>)
 8001c8c:	889a      	ldrh	r2, [r3, #4]
 8001c8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <DrawQueuePage+0x1a4>)
 8001c90:	88db      	ldrh	r3, [r3, #6]
 8001c92:	f002 fbab 	bl	80043ec <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001c96:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9a:	f002 fa31 	bl	8004100 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001c9e:	480b      	ldr	r0, [pc, #44]	@ (8001ccc <DrawQueuePage+0x18c>)
 8001ca0:	f002 fa46 	bl	8004130 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(backButton.x + 10, backButton.y + 10,
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce4 <DrawQueuePage+0x1a4>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	330a      	adds	r3, #10
 8001caa:	b298      	uxth	r0, r3
 8001cac:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce4 <DrawQueuePage+0x1a4>)
 8001cae:	885b      	ldrh	r3, [r3, #2]
 8001cb0:	330a      	adds	r3, #10
 8001cb2:	b299      	uxth	r1, r3
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce8 <DrawQueuePage+0x1a8>)
 8001cb8:	f002 fada 	bl	8004270 <BSP_LCD_DisplayStringAt>
			(uint8_t*) backButton.label, LEFT_MODE);
}
 8001cbc:	bf00      	nop
 8001cbe:	3738      	adds	r7, #56	@ 0x38
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	080126f8 	.word	0x080126f8
 8001cc8:	200001d8 	.word	0x200001d8
 8001ccc:	ffff0000 	.word	0xffff0000
 8001cd0:	200001e0 	.word	0x200001e0
 8001cd4:	08012708 	.word	0x08012708
 8001cd8:	2000054c 	.word	0x2000054c
 8001cdc:	2000013c 	.word	0x2000013c
 8001ce0:	20000144 	.word	0x20000144
 8001ce4:	200000c4 	.word	0x200000c4
 8001ce8:	200000cc 	.word	0x200000cc

08001cec <DrawPageFinish>:

void DrawPageFinish() {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f002 fa50 	bl	8004198 <BSP_LCD_Clear>

	//Draw "Success!" box
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001cf8:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001cfc:	f002 fa00 	bl	8004100 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001d00:	4818      	ldr	r0, [pc, #96]	@ (8001d64 <DrawPageFinish+0x78>)
 8001d02:	f002 fa15 	bl	8004130 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(selectButton.x + 10, selectButton.y + 10,
 8001d06:	4b18      	ldr	r3, [pc, #96]	@ (8001d68 <DrawPageFinish+0x7c>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	330a      	adds	r3, #10
 8001d0c:	b298      	uxth	r0, r3
 8001d0e:	4b16      	ldr	r3, [pc, #88]	@ (8001d68 <DrawPageFinish+0x7c>)
 8001d10:	885b      	ldrh	r3, [r3, #2]
 8001d12:	330a      	adds	r3, #10
 8001d14:	b299      	uxth	r1, r3
 8001d16:	2303      	movs	r3, #3
 8001d18:	4a14      	ldr	r2, [pc, #80]	@ (8001d6c <DrawPageFinish+0x80>)
 8001d1a:	f002 faa9 	bl	8004270 <BSP_LCD_DisplayStringAt>
			(uint8_t*) "Success!", LEFT_MODE);

	// Draw "Back" button
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001d1e:	4811      	ldr	r0, [pc, #68]	@ (8001d64 <DrawPageFinish+0x78>)
 8001d20:	f002 f9ee 	bl	8004100 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(backButton.x, backButton.y, backButton.w, backButton.h);
 8001d24:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <DrawPageFinish+0x84>)
 8001d26:	8818      	ldrh	r0, [r3, #0]
 8001d28:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <DrawPageFinish+0x84>)
 8001d2a:	8859      	ldrh	r1, [r3, #2]
 8001d2c:	4b10      	ldr	r3, [pc, #64]	@ (8001d70 <DrawPageFinish+0x84>)
 8001d2e:	889a      	ldrh	r2, [r3, #4]
 8001d30:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <DrawPageFinish+0x84>)
 8001d32:	88db      	ldrh	r3, [r3, #6]
 8001d34:	f002 fb5a 	bl	80043ec <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	f002 f9e0 	bl	8004100 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001d40:	4808      	ldr	r0, [pc, #32]	@ (8001d64 <DrawPageFinish+0x78>)
 8001d42:	f002 f9f5 	bl	8004130 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(backButton.x + 10, backButton.y + 10,
 8001d46:	4b0a      	ldr	r3, [pc, #40]	@ (8001d70 <DrawPageFinish+0x84>)
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	330a      	adds	r3, #10
 8001d4c:	b298      	uxth	r0, r3
 8001d4e:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <DrawPageFinish+0x84>)
 8001d50:	885b      	ldrh	r3, [r3, #2]
 8001d52:	330a      	adds	r3, #10
 8001d54:	b299      	uxth	r1, r3
 8001d56:	2303      	movs	r3, #3
 8001d58:	4a06      	ldr	r2, [pc, #24]	@ (8001d74 <DrawPageFinish+0x88>)
 8001d5a:	f002 fa89 	bl	8004270 <BSP_LCD_DisplayStringAt>
			(uint8_t*) "Done", LEFT_MODE);
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	ffff0000 	.word	0xffff0000
 8001d68:	20000114 	.word	0x20000114
 8001d6c:	08012710 	.word	0x08012710
 8001d70:	200000c4 	.word	0x200000c4
 8001d74:	0801271c 	.word	0x0801271c

08001d78 <HandleTouch>:

//fix this function and give it a description
uint8_t HandleTouch(void) {
 8001d78:	b590      	push	{r4, r7, lr}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	af00      	add	r7, sp, #0
	//store the coordinates of the user touch in "TS_State"
	BSP_TS_GetState(&TS_State);
 8001d7e:	489d      	ldr	r0, [pc, #628]	@ (8001ff4 <HandleTouch+0x27c>)
 8001d80:	f002 ff80 	bl	8004c84 <BSP_TS_GetState>
	//do nothing if no touch detect
	if (!TS_State.TouchDetected) {
 8001d84:	4b9b      	ldr	r3, [pc, #620]	@ (8001ff4 <HandleTouch+0x27c>)
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HandleTouch+0x18>
		return 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e2d8      	b.n	8002342 <HandleTouch+0x5ca>
	}

	//init variables if a touch is detected
	char Empty_str[20] = "Empty\n"; //strings from flash memory come with newline at end
 8001d90:	4a99      	ldr	r2, [pc, #612]	@ (8001ff8 <HandleTouch+0x280>)
 8001d92:	463b      	mov	r3, r7
 8001d94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d98:	6018      	str	r0, [r3, #0]
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	8019      	strh	r1, [r3, #0]
 8001d9e:	3302      	adds	r3, #2
 8001da0:	0c0a      	lsrs	r2, r1, #16
 8001da2:	701a      	strb	r2, [r3, #0]
 8001da4:	1dfb      	adds	r3, r7, #7
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	731a      	strb	r2, [r3, #12]
	static uint8_t protocol_num;
	static uint8_t protocol_offset = 0;
	//the y value has issues of being flipped and also needing to click below button
	TS_State.Y = (BSP_LCD_GetYSize() - TS_State.Y) - Y_OFFSET;
 8001db0:	f002 f936 	bl	8004020 <BSP_LCD_GetYSize>
 8001db4:	4603      	mov	r3, r0
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	4b8e      	ldr	r3, [pc, #568]	@ (8001ff4 <HandleTouch+0x27c>)
 8001dba:	889b      	ldrh	r3, [r3, #4]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	3b14      	subs	r3, #20
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	4b8b      	ldr	r3, [pc, #556]	@ (8001ff4 <HandleTouch+0x27c>)
 8001dc6:	809a      	strh	r2, [r3, #4]

	//start state machine for touch handling
	switch (currentPage) {
 8001dc8:	4b8c      	ldr	r3, [pc, #560]	@ (8001ffc <HandleTouch+0x284>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	f200 82b8 	bhi.w	8002342 <HandleTouch+0x5ca>
 8001dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8001dd8 <HandleTouch+0x60>)
 8001dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd8:	08001de9 	.word	0x08001de9
 8001ddc:	0800209d 	.word	0x0800209d
 8001de0:	080021ef 	.word	0x080021ef
 8001de4:	080022e7 	.word	0x080022e7
	case PAGE_MAIN:
		//back button
		if (TS_State.X >= backButton.x
 8001de8:	4b82      	ldr	r3, [pc, #520]	@ (8001ff4 <HandleTouch+0x27c>)
 8001dea:	885a      	ldrh	r2, [r3, #2]
 8001dec:	4b84      	ldr	r3, [pc, #528]	@ (8002000 <HandleTouch+0x288>)
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d33c      	bcc.n	8001e6e <HandleTouch+0xf6>
				&& TS_State.X <= (backButton.x + backButton.w)
 8001df4:	4b7f      	ldr	r3, [pc, #508]	@ (8001ff4 <HandleTouch+0x27c>)
 8001df6:	885b      	ldrh	r3, [r3, #2]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b81      	ldr	r3, [pc, #516]	@ (8002000 <HandleTouch+0x288>)
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4b7f      	ldr	r3, [pc, #508]	@ (8002000 <HandleTouch+0x288>)
 8001e02:	889b      	ldrh	r3, [r3, #4]
 8001e04:	440b      	add	r3, r1
 8001e06:	429a      	cmp	r2, r3
 8001e08:	dc31      	bgt.n	8001e6e <HandleTouch+0xf6>
				&& TS_State.Y >= backButton.y
 8001e0a:	4b7a      	ldr	r3, [pc, #488]	@ (8001ff4 <HandleTouch+0x27c>)
 8001e0c:	889a      	ldrh	r2, [r3, #4]
 8001e0e:	4b7c      	ldr	r3, [pc, #496]	@ (8002000 <HandleTouch+0x288>)
 8001e10:	885b      	ldrh	r3, [r3, #2]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d32b      	bcc.n	8001e6e <HandleTouch+0xf6>
				&& TS_State.Y <= (backButton.y + backButton.h)
 8001e16:	4b77      	ldr	r3, [pc, #476]	@ (8001ff4 <HandleTouch+0x27c>)
 8001e18:	889b      	ldrh	r3, [r3, #4]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4b78      	ldr	r3, [pc, #480]	@ (8002000 <HandleTouch+0x288>)
 8001e1e:	885b      	ldrh	r3, [r3, #2]
 8001e20:	4619      	mov	r1, r3
 8001e22:	4b77      	ldr	r3, [pc, #476]	@ (8002000 <HandleTouch+0x288>)
 8001e24:	88db      	ldrh	r3, [r3, #6]
 8001e26:	440b      	add	r3, r1
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dc20      	bgt.n	8001e6e <HandleTouch+0xf6>
				&& (pageNum != 1)) {
 8001e2c:	4b75      	ldr	r3, [pc, #468]	@ (8002004 <HandleTouch+0x28c>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d01c      	beq.n	8001e6e <HandleTouch+0xf6>
			pageNum--;
 8001e34:	4b73      	ldr	r3, [pc, #460]	@ (8002004 <HandleTouch+0x28c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	4b71      	ldr	r3, [pc, #452]	@ (8002004 <HandleTouch+0x28c>)
 8001e3e:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 8001e40:	4b70      	ldr	r3, [pc, #448]	@ (8002004 <HandleTouch+0x28c>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fc17 	bl	8001678 <DrawMainPage>
			if (pageNum == 1) {
 8001e4a:	4b6e      	ldr	r3, [pc, #440]	@ (8002004 <HandleTouch+0x28c>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d10a      	bne.n	8001e68 <HandleTouch+0xf0>
				//next page wont register touch until you let go
					while (TS_State.TouchDetected) {
 8001e52:	e005      	b.n	8001e60 <HandleTouch+0xe8>
						BSP_TS_GetState(&TS_State);
 8001e54:	4867      	ldr	r0, [pc, #412]	@ (8001ff4 <HandleTouch+0x27c>)
 8001e56:	f002 ff15 	bl	8004c84 <BSP_TS_GetState>
						if (!TS_State.TouchDetected) {
						}
						HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 8001e5a:	2014      	movs	r0, #20
 8001e5c:	f003 f806 	bl	8004e6c <HAL_Delay>
					while (TS_State.TouchDetected) {
 8001e60:	4b64      	ldr	r3, [pc, #400]	@ (8001ff4 <HandleTouch+0x27c>)
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f5      	bne.n	8001e54 <HandleTouch+0xdc>
					}
			}
			HAL_Delay(SCREEN_DELAY);
 8001e68:	2032      	movs	r0, #50	@ 0x32
 8001e6a:	f002 ffff 	bl	8004e6c <HAL_Delay>
		}
		//next button
		if (TS_State.X >= nextButton.x
 8001e6e:	4b61      	ldr	r3, [pc, #388]	@ (8001ff4 <HandleTouch+0x27c>)
 8001e70:	885a      	ldrh	r2, [r3, #2]
 8001e72:	4b65      	ldr	r3, [pc, #404]	@ (8002008 <HandleTouch+0x290>)
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d32d      	bcc.n	8001ed6 <HandleTouch+0x15e>
				&& TS_State.X <= (nextButton.x + nextButton.w)
 8001e7a:	4b5e      	ldr	r3, [pc, #376]	@ (8001ff4 <HandleTouch+0x27c>)
 8001e7c:	885b      	ldrh	r3, [r3, #2]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b61      	ldr	r3, [pc, #388]	@ (8002008 <HandleTouch+0x290>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	4619      	mov	r1, r3
 8001e86:	4b60      	ldr	r3, [pc, #384]	@ (8002008 <HandleTouch+0x290>)
 8001e88:	889b      	ldrh	r3, [r3, #4]
 8001e8a:	440b      	add	r3, r1
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	dc22      	bgt.n	8001ed6 <HandleTouch+0x15e>
				&& TS_State.Y >= nextButton.y
 8001e90:	4b58      	ldr	r3, [pc, #352]	@ (8001ff4 <HandleTouch+0x27c>)
 8001e92:	889a      	ldrh	r2, [r3, #4]
 8001e94:	4b5c      	ldr	r3, [pc, #368]	@ (8002008 <HandleTouch+0x290>)
 8001e96:	885b      	ldrh	r3, [r3, #2]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d31c      	bcc.n	8001ed6 <HandleTouch+0x15e>
				&& TS_State.Y <= (nextButton.y + nextButton.h)
 8001e9c:	4b55      	ldr	r3, [pc, #340]	@ (8001ff4 <HandleTouch+0x27c>)
 8001e9e:	889b      	ldrh	r3, [r3, #4]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b59      	ldr	r3, [pc, #356]	@ (8002008 <HandleTouch+0x290>)
 8001ea4:	885b      	ldrh	r3, [r3, #2]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4b57      	ldr	r3, [pc, #348]	@ (8002008 <HandleTouch+0x290>)
 8001eaa:	88db      	ldrh	r3, [r3, #6]
 8001eac:	440b      	add	r3, r1
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	dc11      	bgt.n	8001ed6 <HandleTouch+0x15e>
				&& (pageNum != 10)) {
 8001eb2:	4b54      	ldr	r3, [pc, #336]	@ (8002004 <HandleTouch+0x28c>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b0a      	cmp	r3, #10
 8001eb8:	d00d      	beq.n	8001ed6 <HandleTouch+0x15e>
			pageNum++;
 8001eba:	4b52      	ldr	r3, [pc, #328]	@ (8002004 <HandleTouch+0x28c>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4b50      	ldr	r3, [pc, #320]	@ (8002004 <HandleTouch+0x28c>)
 8001ec4:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 8001ec6:	4b4f      	ldr	r3, [pc, #316]	@ (8002004 <HandleTouch+0x28c>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fbd4 	bl	8001678 <DrawMainPage>
			HAL_Delay(SCREEN_DELAY);
 8001ed0:	2032      	movs	r0, #50	@ 0x32
 8001ed2:	f002 ffcb 	bl	8004e6c <HAL_Delay>
		}
		//queue button
		if (TS_State.X >= queueButton.x
 8001ed6:	4b47      	ldr	r3, [pc, #284]	@ (8001ff4 <HandleTouch+0x27c>)
 8001ed8:	885a      	ldrh	r2, [r3, #2]
 8001eda:	4b4c      	ldr	r3, [pc, #304]	@ (800200c <HandleTouch+0x294>)
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d335      	bcc.n	8001f4e <HandleTouch+0x1d6>
				&& TS_State.X <= (queueButton.x + queueButton.w)
 8001ee2:	4b44      	ldr	r3, [pc, #272]	@ (8001ff4 <HandleTouch+0x27c>)
 8001ee4:	885b      	ldrh	r3, [r3, #2]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4b48      	ldr	r3, [pc, #288]	@ (800200c <HandleTouch+0x294>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	4619      	mov	r1, r3
 8001eee:	4b47      	ldr	r3, [pc, #284]	@ (800200c <HandleTouch+0x294>)
 8001ef0:	889b      	ldrh	r3, [r3, #4]
 8001ef2:	440b      	add	r3, r1
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	dc2a      	bgt.n	8001f4e <HandleTouch+0x1d6>
				&& TS_State.Y >= queueButton.y
 8001ef8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ff4 <HandleTouch+0x27c>)
 8001efa:	889a      	ldrh	r2, [r3, #4]
 8001efc:	4b43      	ldr	r3, [pc, #268]	@ (800200c <HandleTouch+0x294>)
 8001efe:	885b      	ldrh	r3, [r3, #2]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d324      	bcc.n	8001f4e <HandleTouch+0x1d6>
				&& TS_State.Y <= (queueButton.y + queueButton.h)
 8001f04:	4b3b      	ldr	r3, [pc, #236]	@ (8001ff4 <HandleTouch+0x27c>)
 8001f06:	889b      	ldrh	r3, [r3, #4]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b40      	ldr	r3, [pc, #256]	@ (800200c <HandleTouch+0x294>)
 8001f0c:	885b      	ldrh	r3, [r3, #2]
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4b3e      	ldr	r3, [pc, #248]	@ (800200c <HandleTouch+0x294>)
 8001f12:	88db      	ldrh	r3, [r3, #6]
 8001f14:	440b      	add	r3, r1
 8001f16:	429a      	cmp	r2, r3
 8001f18:	dc19      	bgt.n	8001f4e <HandleTouch+0x1d6>
				&& (pageNum == 1)) {
 8001f1a:	4b3a      	ldr	r3, [pc, #232]	@ (8002004 <HandleTouch+0x28c>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d115      	bne.n	8001f4e <HandleTouch+0x1d6>
			DrawQueuePage(queueSize);
 8001f22:	4b3b      	ldr	r3, [pc, #236]	@ (8002010 <HandleTouch+0x298>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fe0a 	bl	8001b40 <DrawQueuePage>
			currentPage = PAGE_QUEUE;
 8001f2c:	4b33      	ldr	r3, [pc, #204]	@ (8001ffc <HandleTouch+0x284>)
 8001f2e:	2202      	movs	r2, #2
 8001f30:	701a      	strb	r2, [r3, #0]
			//next page wont register touch until you let go
				while (TS_State.TouchDetected) {
 8001f32:	e005      	b.n	8001f40 <HandleTouch+0x1c8>
					BSP_TS_GetState(&TS_State);
 8001f34:	482f      	ldr	r0, [pc, #188]	@ (8001ff4 <HandleTouch+0x27c>)
 8001f36:	f002 fea5 	bl	8004c84 <BSP_TS_GetState>
					if (!TS_State.TouchDetected) {
					}
					HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 8001f3a:	2014      	movs	r0, #20
 8001f3c:	f002 ff96 	bl	8004e6c <HAL_Delay>
				while (TS_State.TouchDetected) {
 8001f40:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff4 <HandleTouch+0x27c>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f5      	bne.n	8001f34 <HandleTouch+0x1bc>
				}
			HAL_Delay(SCREEN_DELAY);
 8001f48:	2032      	movs	r0, #50	@ 0x32
 8001f4a:	f002 ff8f 	bl	8004e6c <HAL_Delay>
		}
		//3 protocol buttons
		for (int i = 0; i < NUM_BUTTONS; i++) {
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	e09e      	b.n	8002092 <HandleTouch+0x31a>
			if (TS_State.X >= buttons[i].x
 8001f54:	4b27      	ldr	r3, [pc, #156]	@ (8001ff4 <HandleTouch+0x27c>)
 8001f56:	885a      	ldrh	r2, [r3, #2]
 8001f58:	492e      	ldr	r1, [pc, #184]	@ (8002014 <HandleTouch+0x29c>)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2026      	movs	r0, #38	@ 0x26
 8001f5e:	fb00 f303 	mul.w	r3, r0, r3
 8001f62:	440b      	add	r3, r1
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	f0c0 8090 	bcc.w	800208c <HandleTouch+0x314>
					&& TS_State.X <= (buttons[i].x + buttons[i].w)
 8001f6c:	4b21      	ldr	r3, [pc, #132]	@ (8001ff4 <HandleTouch+0x27c>)
 8001f6e:	885b      	ldrh	r3, [r3, #2]
 8001f70:	4618      	mov	r0, r3
 8001f72:	4a28      	ldr	r2, [pc, #160]	@ (8002014 <HandleTouch+0x29c>)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2126      	movs	r1, #38	@ 0x26
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	461c      	mov	r4, r3
 8001f82:	4a24      	ldr	r2, [pc, #144]	@ (8002014 <HandleTouch+0x29c>)
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2126      	movs	r1, #38	@ 0x26
 8001f88:	fb01 f303 	mul.w	r3, r1, r3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3304      	adds	r3, #4
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	4423      	add	r3, r4
 8001f94:	4298      	cmp	r0, r3
 8001f96:	dc79      	bgt.n	800208c <HandleTouch+0x314>
					&& TS_State.Y >= buttons[i].y
 8001f98:	4b16      	ldr	r3, [pc, #88]	@ (8001ff4 <HandleTouch+0x27c>)
 8001f9a:	889a      	ldrh	r2, [r3, #4]
 8001f9c:	491d      	ldr	r1, [pc, #116]	@ (8002014 <HandleTouch+0x29c>)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	2026      	movs	r0, #38	@ 0x26
 8001fa2:	fb00 f303 	mul.w	r3, r0, r3
 8001fa6:	440b      	add	r3, r1
 8001fa8:	3302      	adds	r3, #2
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d36d      	bcc.n	800208c <HandleTouch+0x314>
					&& TS_State.Y <= (buttons[i].y + buttons[i].h)) {
 8001fb0:	4b10      	ldr	r3, [pc, #64]	@ (8001ff4 <HandleTouch+0x27c>)
 8001fb2:	889b      	ldrh	r3, [r3, #4]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	4a17      	ldr	r2, [pc, #92]	@ (8002014 <HandleTouch+0x29c>)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	2126      	movs	r1, #38	@ 0x26
 8001fbc:	fb01 f303 	mul.w	r3, r1, r3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	461c      	mov	r4, r3
 8001fc8:	4a12      	ldr	r2, [pc, #72]	@ (8002014 <HandleTouch+0x29c>)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2126      	movs	r1, #38	@ 0x26
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3306      	adds	r3, #6
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	4423      	add	r3, r4
 8001fda:	4298      	cmp	r0, r3
 8001fdc:	dc56      	bgt.n	800208c <HandleTouch+0x314>
				//check which button has been pressed
				if (i == 0) {
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d11d      	bne.n	8002020 <HandleTouch+0x2a8>
					protocol_num = 1;
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8002018 <HandleTouch+0x2a0>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	701a      	strb	r2, [r3, #0]
					protocol_offset = 0;
 8001fea:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <HandleTouch+0x2a4>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
 8001ff0:	e029      	b.n	8002046 <HandleTouch+0x2ce>
 8001ff2:	bf00      	nop
 8001ff4:	20000534 	.word	0x20000534
 8001ff8:	080126e4 	.word	0x080126e4
 8001ffc:	20000541 	.word	0x20000541
 8002000:	200000c4 	.word	0x200000c4
 8002004:	20000162 	.word	0x20000162
 8002008:	200000ec 	.word	0x200000ec
 800200c:	20000074 	.word	0x20000074
 8002010:	20007694 	.word	0x20007694
 8002014:	20000000 	.word	0x20000000
 8002018:	200081f0 	.word	0x200081f0
 800201c:	200081f1 	.word	0x200081f1
				} else if (i == 1) {
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d106      	bne.n	8002034 <HandleTouch+0x2bc>
					protocol_num = 1;
 8002026:	4b87      	ldr	r3, [pc, #540]	@ (8002244 <HandleTouch+0x4cc>)
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
					protocol_offset = 1;
 800202c:	4b86      	ldr	r3, [pc, #536]	@ (8002248 <HandleTouch+0x4d0>)
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]
 8002032:	e008      	b.n	8002046 <HandleTouch+0x2ce>
				} else if (i == 2) {
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d105      	bne.n	8002046 <HandleTouch+0x2ce>
					protocol_num = 1;
 800203a:	4b82      	ldr	r3, [pc, #520]	@ (8002244 <HandleTouch+0x4cc>)
 800203c:	2201      	movs	r2, #1
 800203e:	701a      	strb	r2, [r3, #0]
					protocol_offset = 2;
 8002040:	4b81      	ldr	r3, [pc, #516]	@ (8002248 <HandleTouch+0x4d0>)
 8002042:	2202      	movs	r2, #2
 8002044:	701a      	strb	r2, [r3, #0]
				}
				//dont draw next page if the button says "Empty"
				if (buttons[i].status == NOT_EMPTY) {
 8002046:	4a81      	ldr	r2, [pc, #516]	@ (800224c <HandleTouch+0x4d4>)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2126      	movs	r1, #38	@ 0x26
 800204c:	fb01 f303 	mul.w	r3, r1, r3
 8002050:	4413      	add	r3, r2
 8002052:	3325      	adds	r3, #37	@ 0x25
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d113      	bne.n	8002082 <HandleTouch+0x30a>
					currentPage = PAGE_SELECT;
 800205a:	4b7d      	ldr	r3, [pc, #500]	@ (8002250 <HandleTouch+0x4d8>)
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
					DrawInfoPage(buttons[i].label);
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2226      	movs	r2, #38	@ 0x26
 8002064:	fb02 f303 	mul.w	r3, r2, r3
 8002068:	3308      	adds	r3, #8
 800206a:	4a78      	ldr	r2, [pc, #480]	@ (800224c <HandleTouch+0x4d4>)
 800206c:	4413      	add	r3, r2
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff fcdc 	bl	8001a2c <DrawInfoPage>
				}
				//next page wont register touch until you let go
				while (TS_State.TouchDetected) {
 8002074:	e005      	b.n	8002082 <HandleTouch+0x30a>
					BSP_TS_GetState(&TS_State);
 8002076:	4877      	ldr	r0, [pc, #476]	@ (8002254 <HandleTouch+0x4dc>)
 8002078:	f002 fe04 	bl	8004c84 <BSP_TS_GetState>
					if (!TS_State.TouchDetected) {
					}
					HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 800207c:	2014      	movs	r0, #20
 800207e:	f002 fef5 	bl	8004e6c <HAL_Delay>
				while (TS_State.TouchDetected) {
 8002082:	4b74      	ldr	r3, [pc, #464]	@ (8002254 <HandleTouch+0x4dc>)
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f5      	bne.n	8002076 <HandleTouch+0x2fe>
				}
				return;
 800208a:	e15a      	b.n	8002342 <HandleTouch+0x5ca>
		for (int i = 0; i < NUM_BUTTONS; i++) {
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	3301      	adds	r3, #1
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b02      	cmp	r3, #2
 8002096:	f77f af5d 	ble.w	8001f54 <HandleTouch+0x1dc>
			}
		}
		break;
 800209a:	e152      	b.n	8002342 <HandleTouch+0x5ca>
	case PAGE_SELECT:
		//back button
		if (TS_State.X >= backButton.x
 800209c:	4b6d      	ldr	r3, [pc, #436]	@ (8002254 <HandleTouch+0x4dc>)
 800209e:	885a      	ldrh	r2, [r3, #2]
 80020a0:	4b6d      	ldr	r3, [pc, #436]	@ (8002258 <HandleTouch+0x4e0>)
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d323      	bcc.n	80020f0 <HandleTouch+0x378>
				&& TS_State.X <= (backButton.x + backButton.w)
 80020a8:	4b6a      	ldr	r3, [pc, #424]	@ (8002254 <HandleTouch+0x4dc>)
 80020aa:	885b      	ldrh	r3, [r3, #2]
 80020ac:	461a      	mov	r2, r3
 80020ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002258 <HandleTouch+0x4e0>)
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	4619      	mov	r1, r3
 80020b4:	4b68      	ldr	r3, [pc, #416]	@ (8002258 <HandleTouch+0x4e0>)
 80020b6:	889b      	ldrh	r3, [r3, #4]
 80020b8:	440b      	add	r3, r1
 80020ba:	429a      	cmp	r2, r3
 80020bc:	dc18      	bgt.n	80020f0 <HandleTouch+0x378>
				&& TS_State.Y >= backButton.y
 80020be:	4b65      	ldr	r3, [pc, #404]	@ (8002254 <HandleTouch+0x4dc>)
 80020c0:	889a      	ldrh	r2, [r3, #4]
 80020c2:	4b65      	ldr	r3, [pc, #404]	@ (8002258 <HandleTouch+0x4e0>)
 80020c4:	885b      	ldrh	r3, [r3, #2]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d312      	bcc.n	80020f0 <HandleTouch+0x378>
				&& TS_State.Y <= (backButton.y + backButton.h)) {
 80020ca:	4b62      	ldr	r3, [pc, #392]	@ (8002254 <HandleTouch+0x4dc>)
 80020cc:	889b      	ldrh	r3, [r3, #4]
 80020ce:	461a      	mov	r2, r3
 80020d0:	4b61      	ldr	r3, [pc, #388]	@ (8002258 <HandleTouch+0x4e0>)
 80020d2:	885b      	ldrh	r3, [r3, #2]
 80020d4:	4619      	mov	r1, r3
 80020d6:	4b60      	ldr	r3, [pc, #384]	@ (8002258 <HandleTouch+0x4e0>)
 80020d8:	88db      	ldrh	r3, [r3, #6]
 80020da:	440b      	add	r3, r1
 80020dc:	429a      	cmp	r2, r3
 80020de:	dc07      	bgt.n	80020f0 <HandleTouch+0x378>
			currentPage = PAGE_MAIN;
 80020e0:	4b5b      	ldr	r3, [pc, #364]	@ (8002250 <HandleTouch+0x4d8>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 80020e6:	4b5d      	ldr	r3, [pc, #372]	@ (800225c <HandleTouch+0x4e4>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fac4 	bl	8001678 <DrawMainPage>
		}
		//queueSelect button
		if (TS_State.X >= queueSelectButton.x
 80020f0:	4b58      	ldr	r3, [pc, #352]	@ (8002254 <HandleTouch+0x4dc>)
 80020f2:	885a      	ldrh	r2, [r3, #2]
 80020f4:	4b5a      	ldr	r3, [pc, #360]	@ (8002260 <HandleTouch+0x4e8>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d339      	bcc.n	8002170 <HandleTouch+0x3f8>
				&& TS_State.X <= (queueSelectButton.x + queueSelectButton.w)
 80020fc:	4b55      	ldr	r3, [pc, #340]	@ (8002254 <HandleTouch+0x4dc>)
 80020fe:	885b      	ldrh	r3, [r3, #2]
 8002100:	461a      	mov	r2, r3
 8002102:	4b57      	ldr	r3, [pc, #348]	@ (8002260 <HandleTouch+0x4e8>)
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	4619      	mov	r1, r3
 8002108:	4b55      	ldr	r3, [pc, #340]	@ (8002260 <HandleTouch+0x4e8>)
 800210a:	889b      	ldrh	r3, [r3, #4]
 800210c:	440b      	add	r3, r1
 800210e:	429a      	cmp	r2, r3
 8002110:	dc2e      	bgt.n	8002170 <HandleTouch+0x3f8>
				&& TS_State.Y >= queueSelectButton.y
 8002112:	4b50      	ldr	r3, [pc, #320]	@ (8002254 <HandleTouch+0x4dc>)
 8002114:	889a      	ldrh	r2, [r3, #4]
 8002116:	4b52      	ldr	r3, [pc, #328]	@ (8002260 <HandleTouch+0x4e8>)
 8002118:	885b      	ldrh	r3, [r3, #2]
 800211a:	429a      	cmp	r2, r3
 800211c:	d328      	bcc.n	8002170 <HandleTouch+0x3f8>
				&& TS_State.Y <= (queueSelectButton.y + queueSelectButton.h)) {
 800211e:	4b4d      	ldr	r3, [pc, #308]	@ (8002254 <HandleTouch+0x4dc>)
 8002120:	889b      	ldrh	r3, [r3, #4]
 8002122:	461a      	mov	r2, r3
 8002124:	4b4e      	ldr	r3, [pc, #312]	@ (8002260 <HandleTouch+0x4e8>)
 8002126:	885b      	ldrh	r3, [r3, #2]
 8002128:	4619      	mov	r1, r3
 800212a:	4b4d      	ldr	r3, [pc, #308]	@ (8002260 <HandleTouch+0x4e8>)
 800212c:	88db      	ldrh	r3, [r3, #6]
 800212e:	440b      	add	r3, r1
 8002130:	429a      	cmp	r2, r3
 8002132:	dc1d      	bgt.n	8002170 <HandleTouch+0x3f8>
			HAL_Delay(20);
 8002134:	2014      	movs	r0, #20
 8002136:	f002 fe99 	bl	8004e6c <HAL_Delay>
			//store the protocol in queueBuffer
			if (queueSize < MAX_QUEUE_SIZE) {
 800213a:	4b4a      	ldr	r3, [pc, #296]	@ (8002264 <HandleTouch+0x4ec>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b09      	cmp	r3, #9
 8002140:	d816      	bhi.n	8002170 <HandleTouch+0x3f8>
				queueProtocol(pageNum, protocol_offset);
 8002142:	4b46      	ldr	r3, [pc, #280]	@ (800225c <HandleTouch+0x4e4>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	4b3f      	ldr	r3, [pc, #252]	@ (8002248 <HandleTouch+0x4d0>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	4619      	mov	r1, r3
 800214e:	4610      	mov	r0, r2
 8002150:	f7ff f9a6 	bl	80014a0 <queueProtocol>
				queueSize++;
 8002154:	4b43      	ldr	r3, [pc, #268]	@ (8002264 <HandleTouch+0x4ec>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	3301      	adds	r3, #1
 800215a:	b2da      	uxtb	r2, r3
 800215c:	4b41      	ldr	r3, [pc, #260]	@ (8002264 <HandleTouch+0x4ec>)
 800215e:	701a      	strb	r2, [r3, #0]
				currentPage = PAGE_QUEUE;
 8002160:	4b3b      	ldr	r3, [pc, #236]	@ (8002250 <HandleTouch+0x4d8>)
 8002162:	2202      	movs	r2, #2
 8002164:	701a      	strb	r2, [r3, #0]
				DrawQueuePage(queueSize);
 8002166:	4b3f      	ldr	r3, [pc, #252]	@ (8002264 <HandleTouch+0x4ec>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fce8 	bl	8001b40 <DrawQueuePage>
			} else {
				//handle queue buffer being full
			}
		}
		//select button
		if (TS_State.X >= selectButton.x
 8002170:	4b38      	ldr	r3, [pc, #224]	@ (8002254 <HandleTouch+0x4dc>)
 8002172:	885a      	ldrh	r2, [r3, #2]
 8002174:	4b3c      	ldr	r3, [pc, #240]	@ (8002268 <HandleTouch+0x4f0>)
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d333      	bcc.n	80021e4 <HandleTouch+0x46c>
				&& TS_State.X <= (selectButton.x + selectButton.w)
 800217c:	4b35      	ldr	r3, [pc, #212]	@ (8002254 <HandleTouch+0x4dc>)
 800217e:	885b      	ldrh	r3, [r3, #2]
 8002180:	461a      	mov	r2, r3
 8002182:	4b39      	ldr	r3, [pc, #228]	@ (8002268 <HandleTouch+0x4f0>)
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	4619      	mov	r1, r3
 8002188:	4b37      	ldr	r3, [pc, #220]	@ (8002268 <HandleTouch+0x4f0>)
 800218a:	889b      	ldrh	r3, [r3, #4]
 800218c:	440b      	add	r3, r1
 800218e:	429a      	cmp	r2, r3
 8002190:	dc28      	bgt.n	80021e4 <HandleTouch+0x46c>
				&& TS_State.Y >= selectButton.y
 8002192:	4b30      	ldr	r3, [pc, #192]	@ (8002254 <HandleTouch+0x4dc>)
 8002194:	889a      	ldrh	r2, [r3, #4]
 8002196:	4b34      	ldr	r3, [pc, #208]	@ (8002268 <HandleTouch+0x4f0>)
 8002198:	885b      	ldrh	r3, [r3, #2]
 800219a:	429a      	cmp	r2, r3
 800219c:	d322      	bcc.n	80021e4 <HandleTouch+0x46c>
				&& TS_State.Y <= (selectButton.y + selectButton.h)) {
 800219e:	4b2d      	ldr	r3, [pc, #180]	@ (8002254 <HandleTouch+0x4dc>)
 80021a0:	889b      	ldrh	r3, [r3, #4]
 80021a2:	461a      	mov	r2, r3
 80021a4:	4b30      	ldr	r3, [pc, #192]	@ (8002268 <HandleTouch+0x4f0>)
 80021a6:	885b      	ldrh	r3, [r3, #2]
 80021a8:	4619      	mov	r1, r3
 80021aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002268 <HandleTouch+0x4f0>)
 80021ac:	88db      	ldrh	r3, [r3, #6]
 80021ae:	440b      	add	r3, r1
 80021b0:	429a      	cmp	r2, r3
 80021b2:	dc17      	bgt.n	80021e4 <HandleTouch+0x46c>
			HAL_Delay(20);
 80021b4:	2014      	movs	r0, #20
 80021b6:	f002 fe59 	bl	8004e6c <HAL_Delay>
			transmitProtocol(pageNum, protocol_offset);
 80021ba:	4b28      	ldr	r3, [pc, #160]	@ (800225c <HandleTouch+0x4e4>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	4b21      	ldr	r3, [pc, #132]	@ (8002248 <HandleTouch+0x4d0>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	4619      	mov	r1, r3
 80021c6:	4610      	mov	r0, r2
 80021c8:	f7ff f912 	bl	80013f0 <transmitProtocol>
			currentPage = PAGE_FINISH;
 80021cc:	4b20      	ldr	r3, [pc, #128]	@ (8002250 <HandleTouch+0x4d8>)
 80021ce:	2203      	movs	r2, #3
 80021d0:	701a      	strb	r2, [r3, #0]
			DrawPageFinish();
 80021d2:	f7ff fd8b 	bl	8001cec <DrawPageFinish>
		}
		//next page wont register touch until you let go
			while (TS_State.TouchDetected) {
 80021d6:	e005      	b.n	80021e4 <HandleTouch+0x46c>
				BSP_TS_GetState(&TS_State);
 80021d8:	481e      	ldr	r0, [pc, #120]	@ (8002254 <HandleTouch+0x4dc>)
 80021da:	f002 fd53 	bl	8004c84 <BSP_TS_GetState>
				if (!TS_State.TouchDetected) {
				}
				HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 80021de:	2014      	movs	r0, #20
 80021e0:	f002 fe44 	bl	8004e6c <HAL_Delay>
			while (TS_State.TouchDetected) {
 80021e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002254 <HandleTouch+0x4dc>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f5      	bne.n	80021d8 <HandleTouch+0x460>
			}
		break;
 80021ec:	e0a9      	b.n	8002342 <HandleTouch+0x5ca>
	case PAGE_QUEUE:
			//back button
			if (TS_State.X >= backButton.x
 80021ee:	4b19      	ldr	r3, [pc, #100]	@ (8002254 <HandleTouch+0x4dc>)
 80021f0:	885a      	ldrh	r2, [r3, #2]
 80021f2:	4b19      	ldr	r3, [pc, #100]	@ (8002258 <HandleTouch+0x4e0>)
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d342      	bcc.n	8002280 <HandleTouch+0x508>
					&& TS_State.X <= (backButton.x + backButton.w)
 80021fa:	4b16      	ldr	r3, [pc, #88]	@ (8002254 <HandleTouch+0x4dc>)
 80021fc:	885b      	ldrh	r3, [r3, #2]
 80021fe:	461a      	mov	r2, r3
 8002200:	4b15      	ldr	r3, [pc, #84]	@ (8002258 <HandleTouch+0x4e0>)
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	4619      	mov	r1, r3
 8002206:	4b14      	ldr	r3, [pc, #80]	@ (8002258 <HandleTouch+0x4e0>)
 8002208:	889b      	ldrh	r3, [r3, #4]
 800220a:	440b      	add	r3, r1
 800220c:	429a      	cmp	r2, r3
 800220e:	dc37      	bgt.n	8002280 <HandleTouch+0x508>
					&& TS_State.Y >= backButton.y
 8002210:	4b10      	ldr	r3, [pc, #64]	@ (8002254 <HandleTouch+0x4dc>)
 8002212:	889a      	ldrh	r2, [r3, #4]
 8002214:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <HandleTouch+0x4e0>)
 8002216:	885b      	ldrh	r3, [r3, #2]
 8002218:	429a      	cmp	r2, r3
 800221a:	d331      	bcc.n	8002280 <HandleTouch+0x508>
					&& TS_State.Y <= (backButton.y + backButton.h)) {
 800221c:	4b0d      	ldr	r3, [pc, #52]	@ (8002254 <HandleTouch+0x4dc>)
 800221e:	889b      	ldrh	r3, [r3, #4]
 8002220:	461a      	mov	r2, r3
 8002222:	4b0d      	ldr	r3, [pc, #52]	@ (8002258 <HandleTouch+0x4e0>)
 8002224:	885b      	ldrh	r3, [r3, #2]
 8002226:	4619      	mov	r1, r3
 8002228:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <HandleTouch+0x4e0>)
 800222a:	88db      	ldrh	r3, [r3, #6]
 800222c:	440b      	add	r3, r1
 800222e:	429a      	cmp	r2, r3
 8002230:	dc26      	bgt.n	8002280 <HandleTouch+0x508>
				currentPage = PAGE_MAIN;
 8002232:	4b07      	ldr	r3, [pc, #28]	@ (8002250 <HandleTouch+0x4d8>)
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
				DrawMainPage(pageNum);
 8002238:	4b08      	ldr	r3, [pc, #32]	@ (800225c <HandleTouch+0x4e4>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fa1b 	bl	8001678 <DrawMainPage>
				//next page wont register touch until you let go
					while (TS_State.TouchDetected) {
 8002242:	e019      	b.n	8002278 <HandleTouch+0x500>
 8002244:	200081f0 	.word	0x200081f0
 8002248:	200081f1 	.word	0x200081f1
 800224c:	20000000 	.word	0x20000000
 8002250:	20000541 	.word	0x20000541
 8002254:	20000534 	.word	0x20000534
 8002258:	200000c4 	.word	0x200000c4
 800225c:	20000162 	.word	0x20000162
 8002260:	2000009c 	.word	0x2000009c
 8002264:	20007694 	.word	0x20007694
 8002268:	20000114 	.word	0x20000114
						BSP_TS_GetState(&TS_State);
 800226c:	4837      	ldr	r0, [pc, #220]	@ (800234c <HandleTouch+0x5d4>)
 800226e:	f002 fd09 	bl	8004c84 <BSP_TS_GetState>
						if (!TS_State.TouchDetected) {
						}
						HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 8002272:	2014      	movs	r0, #20
 8002274:	f002 fdfa 	bl	8004e6c <HAL_Delay>
					while (TS_State.TouchDetected) {
 8002278:	4b34      	ldr	r3, [pc, #208]	@ (800234c <HandleTouch+0x5d4>)
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f5      	bne.n	800226c <HandleTouch+0x4f4>
					}
			}
			//run button
			if (TS_State.X >= runButton.x
 8002280:	4b32      	ldr	r3, [pc, #200]	@ (800234c <HandleTouch+0x5d4>)
 8002282:	885a      	ldrh	r2, [r3, #2]
 8002284:	4b32      	ldr	r3, [pc, #200]	@ (8002350 <HandleTouch+0x5d8>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d357      	bcc.n	800233c <HandleTouch+0x5c4>
					&& TS_State.X <= (runButton.x + runButton.w)
 800228c:	4b2f      	ldr	r3, [pc, #188]	@ (800234c <HandleTouch+0x5d4>)
 800228e:	885b      	ldrh	r3, [r3, #2]
 8002290:	461a      	mov	r2, r3
 8002292:	4b2f      	ldr	r3, [pc, #188]	@ (8002350 <HandleTouch+0x5d8>)
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	4619      	mov	r1, r3
 8002298:	4b2d      	ldr	r3, [pc, #180]	@ (8002350 <HandleTouch+0x5d8>)
 800229a:	889b      	ldrh	r3, [r3, #4]
 800229c:	440b      	add	r3, r1
 800229e:	429a      	cmp	r2, r3
 80022a0:	dc4c      	bgt.n	800233c <HandleTouch+0x5c4>
					&& TS_State.Y >= runButton.y
 80022a2:	4b2a      	ldr	r3, [pc, #168]	@ (800234c <HandleTouch+0x5d4>)
 80022a4:	889a      	ldrh	r2, [r3, #4]
 80022a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002350 <HandleTouch+0x5d8>)
 80022a8:	885b      	ldrh	r3, [r3, #2]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d346      	bcc.n	800233c <HandleTouch+0x5c4>
					&& TS_State.Y <= (runButton.y + runButton.h)) {
 80022ae:	4b27      	ldr	r3, [pc, #156]	@ (800234c <HandleTouch+0x5d4>)
 80022b0:	889b      	ldrh	r3, [r3, #4]
 80022b2:	461a      	mov	r2, r3
 80022b4:	4b26      	ldr	r3, [pc, #152]	@ (8002350 <HandleTouch+0x5d8>)
 80022b6:	885b      	ldrh	r3, [r3, #2]
 80022b8:	4619      	mov	r1, r3
 80022ba:	4b25      	ldr	r3, [pc, #148]	@ (8002350 <HandleTouch+0x5d8>)
 80022bc:	88db      	ldrh	r3, [r3, #6]
 80022be:	440b      	add	r3, r1
 80022c0:	429a      	cmp	r2, r3
 80022c2:	dc3b      	bgt.n	800233c <HandleTouch+0x5c4>
				HAL_Delay(20);
 80022c4:	2014      	movs	r0, #20
 80022c6:	f002 fdd1 	bl	8004e6c <HAL_Delay>
				//handle queue functionality here dorjee
				transmitQueuedProtocols(queueSize);
 80022ca:	4b22      	ldr	r3, [pc, #136]	@ (8002354 <HandleTouch+0x5dc>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff f94a 	bl	8001568 <transmitQueuedProtocols>
				queueSize = 0;
 80022d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002354 <HandleTouch+0x5dc>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
				currentPage = PAGE_FINISH;
 80022da:	4b1f      	ldr	r3, [pc, #124]	@ (8002358 <HandleTouch+0x5e0>)
 80022dc:	2203      	movs	r2, #3
 80022de:	701a      	strb	r2, [r3, #0]
				DrawPageFinish();
 80022e0:	f7ff fd04 	bl	8001cec <DrawPageFinish>
			}
			break;
 80022e4:	e02a      	b.n	800233c <HandleTouch+0x5c4>
	case PAGE_FINISH:
		if (TS_State.X >= backButton.x
 80022e6:	4b19      	ldr	r3, [pc, #100]	@ (800234c <HandleTouch+0x5d4>)
 80022e8:	885a      	ldrh	r2, [r3, #2]
 80022ea:	4b1c      	ldr	r3, [pc, #112]	@ (800235c <HandleTouch+0x5e4>)
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d326      	bcc.n	8002340 <HandleTouch+0x5c8>
				&& TS_State.X <= (backButton.x + backButton.w)
 80022f2:	4b16      	ldr	r3, [pc, #88]	@ (800234c <HandleTouch+0x5d4>)
 80022f4:	885b      	ldrh	r3, [r3, #2]
 80022f6:	461a      	mov	r2, r3
 80022f8:	4b18      	ldr	r3, [pc, #96]	@ (800235c <HandleTouch+0x5e4>)
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	4619      	mov	r1, r3
 80022fe:	4b17      	ldr	r3, [pc, #92]	@ (800235c <HandleTouch+0x5e4>)
 8002300:	889b      	ldrh	r3, [r3, #4]
 8002302:	440b      	add	r3, r1
 8002304:	429a      	cmp	r2, r3
 8002306:	dc1b      	bgt.n	8002340 <HandleTouch+0x5c8>
				&& TS_State.Y >= backButton.y
 8002308:	4b10      	ldr	r3, [pc, #64]	@ (800234c <HandleTouch+0x5d4>)
 800230a:	889a      	ldrh	r2, [r3, #4]
 800230c:	4b13      	ldr	r3, [pc, #76]	@ (800235c <HandleTouch+0x5e4>)
 800230e:	885b      	ldrh	r3, [r3, #2]
 8002310:	429a      	cmp	r2, r3
 8002312:	d315      	bcc.n	8002340 <HandleTouch+0x5c8>
				&& TS_State.Y <= (backButton.y + backButton.h)) {
 8002314:	4b0d      	ldr	r3, [pc, #52]	@ (800234c <HandleTouch+0x5d4>)
 8002316:	889b      	ldrh	r3, [r3, #4]
 8002318:	461a      	mov	r2, r3
 800231a:	4b10      	ldr	r3, [pc, #64]	@ (800235c <HandleTouch+0x5e4>)
 800231c:	885b      	ldrh	r3, [r3, #2]
 800231e:	4619      	mov	r1, r3
 8002320:	4b0e      	ldr	r3, [pc, #56]	@ (800235c <HandleTouch+0x5e4>)
 8002322:	88db      	ldrh	r3, [r3, #6]
 8002324:	440b      	add	r3, r1
 8002326:	429a      	cmp	r2, r3
 8002328:	dc0a      	bgt.n	8002340 <HandleTouch+0x5c8>
			currentPage = PAGE_MAIN;
 800232a:	4b0b      	ldr	r3, [pc, #44]	@ (8002358 <HandleTouch+0x5e0>)
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 8002330:	4b0b      	ldr	r3, [pc, #44]	@ (8002360 <HandleTouch+0x5e8>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff f99f 	bl	8001678 <DrawMainPage>
		}
		break;
 800233a:	e001      	b.n	8002340 <HandleTouch+0x5c8>
			break;
 800233c:	bf00      	nop
 800233e:	e000      	b.n	8002342 <HandleTouch+0x5ca>
		break;
 8002340:	bf00      	nop
	}
}
 8002342:	4618      	mov	r0, r3
 8002344:	371c      	adds	r7, #28
 8002346:	46bd      	mov	sp, r7
 8002348:	bd90      	pop	{r4, r7, pc}
 800234a:	bf00      	nop
 800234c:	20000534 	.word	0x20000534
 8002350:	2000013c 	.word	0x2000013c
 8002354:	20007694 	.word	0x20007694
 8002358:	20000541 	.word	0x20000541
 800235c:	200000c4 	.word	0x200000c4
 8002360:	20000162 	.word	0x20000162

08002364 <get_sector_address>:

//I name sectors from 1-14. the actual sectors are from 5-23. this functions maps them
uint32_t get_sector_address(uint32_t sector) {
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	switch (sector) {
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	2b0d      	cmp	r3, #13
 8002372:	d83b      	bhi.n	80023ec <get_sector_address+0x88>
 8002374:	a201      	add	r2, pc, #4	@ (adr r2, 800237c <get_sector_address+0x18>)
 8002376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237a:	bf00      	nop
 800237c:	080023b5 	.word	0x080023b5
 8002380:	080023b9 	.word	0x080023b9
 8002384:	080023bd 	.word	0x080023bd
 8002388:	080023c1 	.word	0x080023c1
 800238c:	080023c5 	.word	0x080023c5
 8002390:	080023c9 	.word	0x080023c9
 8002394:	080023cd 	.word	0x080023cd
 8002398:	080023d1 	.word	0x080023d1
 800239c:	080023d5 	.word	0x080023d5
 80023a0:	080023d9 	.word	0x080023d9
 80023a4:	080023dd 	.word	0x080023dd
 80023a8:	080023e1 	.word	0x080023e1
 80023ac:	080023e5 	.word	0x080023e5
 80023b0:	080023e9 	.word	0x080023e9
	case 1:
		return SECTOR_5;
 80023b4:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <get_sector_address+0x98>)
 80023b6:	e01a      	b.n	80023ee <get_sector_address+0x8a>
	case 2:
		return SECTOR_6;
 80023b8:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <get_sector_address+0x9c>)
 80023ba:	e018      	b.n	80023ee <get_sector_address+0x8a>
	case 3:
		return SECTOR_7;
 80023bc:	4b11      	ldr	r3, [pc, #68]	@ (8002404 <get_sector_address+0xa0>)
 80023be:	e016      	b.n	80023ee <get_sector_address+0x8a>
	case 4:
		return SECTOR_8;
 80023c0:	4b11      	ldr	r3, [pc, #68]	@ (8002408 <get_sector_address+0xa4>)
 80023c2:	e014      	b.n	80023ee <get_sector_address+0x8a>
	case 5:
		return SECTOR_9;
 80023c4:	4b11      	ldr	r3, [pc, #68]	@ (800240c <get_sector_address+0xa8>)
 80023c6:	e012      	b.n	80023ee <get_sector_address+0x8a>
	case 6:
		return SECTOR_10;
 80023c8:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <get_sector_address+0xac>)
 80023ca:	e010      	b.n	80023ee <get_sector_address+0x8a>
	case 7:
		return SECTOR_11;
 80023cc:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <get_sector_address+0xb0>)
 80023ce:	e00e      	b.n	80023ee <get_sector_address+0x8a>
	case 8:
		return SECTOR_17;
 80023d0:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <get_sector_address+0xb4>)
 80023d2:	e00c      	b.n	80023ee <get_sector_address+0x8a>
	case 9:
		return SECTOR_18;
 80023d4:	4b11      	ldr	r3, [pc, #68]	@ (800241c <get_sector_address+0xb8>)
 80023d6:	e00a      	b.n	80023ee <get_sector_address+0x8a>
	case 10:
		return SECTOR_19;
 80023d8:	4b11      	ldr	r3, [pc, #68]	@ (8002420 <get_sector_address+0xbc>)
 80023da:	e008      	b.n	80023ee <get_sector_address+0x8a>
	case 11:
		return SECTOR_20;
 80023dc:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <get_sector_address+0xc0>)
 80023de:	e006      	b.n	80023ee <get_sector_address+0x8a>
	case 12:
		return SECTOR_21;
 80023e0:	4b11      	ldr	r3, [pc, #68]	@ (8002428 <get_sector_address+0xc4>)
 80023e2:	e004      	b.n	80023ee <get_sector_address+0x8a>
	case 13:
		return SECTOR_22;
 80023e4:	4b11      	ldr	r3, [pc, #68]	@ (800242c <get_sector_address+0xc8>)
 80023e6:	e002      	b.n	80023ee <get_sector_address+0x8a>
	case 14:
		return SECTOR_23;
 80023e8:	4b11      	ldr	r3, [pc, #68]	@ (8002430 <get_sector_address+0xcc>)
 80023ea:	e000      	b.n	80023ee <get_sector_address+0x8a>
	default:
		break;
 80023ec:	bf00      	nop
	}
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	08020000 	.word	0x08020000
 8002400:	08040000 	.word	0x08040000
 8002404:	08060000 	.word	0x08060000
 8002408:	08080000 	.word	0x08080000
 800240c:	080a0000 	.word	0x080a0000
 8002410:	080c0000 	.word	0x080c0000
 8002414:	080e0000 	.word	0x080e0000
 8002418:	08120000 	.word	0x08120000
 800241c:	08140000 	.word	0x08140000
 8002420:	08160000 	.word	0x08160000
 8002424:	08180000 	.word	0x08180000
 8002428:	081a0000 	.word	0x081a0000
 800242c:	081c0000 	.word	0x081c0000
 8002430:	081e0000 	.word	0x081e0000

08002434 <sector_mapping>:

uint32_t sector_mapping(uint32_t sector) {
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	switch (sector) {
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	2b0d      	cmp	r3, #13
 8002442:	d83b      	bhi.n	80024bc <sector_mapping+0x88>
 8002444:	a201      	add	r2, pc, #4	@ (adr r2, 800244c <sector_mapping+0x18>)
 8002446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244a:	bf00      	nop
 800244c:	08002485 	.word	0x08002485
 8002450:	08002489 	.word	0x08002489
 8002454:	0800248d 	.word	0x0800248d
 8002458:	08002491 	.word	0x08002491
 800245c:	08002495 	.word	0x08002495
 8002460:	08002499 	.word	0x08002499
 8002464:	0800249d 	.word	0x0800249d
 8002468:	080024a1 	.word	0x080024a1
 800246c:	080024a5 	.word	0x080024a5
 8002470:	080024a9 	.word	0x080024a9
 8002474:	080024ad 	.word	0x080024ad
 8002478:	080024b1 	.word	0x080024b1
 800247c:	080024b5 	.word	0x080024b5
 8002480:	080024b9 	.word	0x080024b9
		case 1:
			return 5;
 8002484:	2305      	movs	r3, #5
 8002486:	e019      	b.n	80024bc <sector_mapping+0x88>
		case 2:
			return 6;
 8002488:	2306      	movs	r3, #6
 800248a:	e017      	b.n	80024bc <sector_mapping+0x88>
		case 3:
			return 7;
 800248c:	2307      	movs	r3, #7
 800248e:	e015      	b.n	80024bc <sector_mapping+0x88>
		case 4:
			return 8;
 8002490:	2308      	movs	r3, #8
 8002492:	e013      	b.n	80024bc <sector_mapping+0x88>
		case 5:
			return 9;
 8002494:	2309      	movs	r3, #9
 8002496:	e011      	b.n	80024bc <sector_mapping+0x88>
		case 6:
			return 10;
 8002498:	230a      	movs	r3, #10
 800249a:	e00f      	b.n	80024bc <sector_mapping+0x88>
		case 7:
			return 11;
 800249c:	230b      	movs	r3, #11
 800249e:	e00d      	b.n	80024bc <sector_mapping+0x88>
		case 8:
			return 17;
 80024a0:	2311      	movs	r3, #17
 80024a2:	e00b      	b.n	80024bc <sector_mapping+0x88>
		case 9:
			return 18;
 80024a4:	2312      	movs	r3, #18
 80024a6:	e009      	b.n	80024bc <sector_mapping+0x88>
		case 10:
			return 19;
 80024a8:	2313      	movs	r3, #19
 80024aa:	e007      	b.n	80024bc <sector_mapping+0x88>
		case 11:
			return 20;
 80024ac:	2314      	movs	r3, #20
 80024ae:	e005      	b.n	80024bc <sector_mapping+0x88>
		case 12:
			return 21;
 80024b0:	2315      	movs	r3, #21
 80024b2:	e003      	b.n	80024bc <sector_mapping+0x88>
		case 13:
			return 22;
 80024b4:	2316      	movs	r3, #22
 80024b6:	e001      	b.n	80024bc <sector_mapping+0x88>
		case 14:
			return 23;
 80024b8:	2317      	movs	r3, #23
 80024ba:	e7ff      	b.n	80024bc <sector_mapping+0x88>
		}
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a0f      	ldr	r2, [pc, #60]	@ (8002514 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d101      	bne.n	80024de <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80024da:	f002 fca7 	bl	8004e2c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	//10 hz interrupt
	if (htim == &htim10) {
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002518 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d10b      	bne.n	80024fe <HAL_TIM_PeriodElapsedCallback+0x36>
		if (!USB_BUSY) {
 80024e6:	4b0d      	ldr	r3, [pc, #52]	@ (800251c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d102      	bne.n	80024f4 <HAL_TIM_PeriodElapsedCallback+0x2c>
			checkTouchFlag = 1;
 80024ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002520 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	701a      	strb	r2, [r3, #0]
		}
		count++;
 80024f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002524 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	3301      	adds	r3, #1
 80024fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002524 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80024fc:	6013      	str	r3, [r2, #0]
	}

	//use this for a slower frequency application
	if (count == 5) {
 80024fe:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b05      	cmp	r3, #5
 8002504:	d102      	bne.n	800250c <HAL_TIM_PeriodElapsedCallback+0x44>
		//checkTouchFlag = 1;
		count = 0;
 8002506:	4b07      	ldr	r3, [pc, #28]	@ (8002524 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
	}
	/* USER CODE END Callback 1 */
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40001000 	.word	0x40001000
 8002518:	20000470 	.word	0x20000470
 800251c:	20007695 	.word	0x20007695
 8002520:	20000540 	.word	0x20000540
 8002524:	2000053c 	.word	0x2000053c

08002528 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800252c:	b672      	cpsid	i
}
 800252e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <Error_Handler+0x8>

08002534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	607b      	str	r3, [r7, #4]
 800253e:	4b10      	ldr	r3, [pc, #64]	@ (8002580 <HAL_MspInit+0x4c>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002542:	4a0f      	ldr	r2, [pc, #60]	@ (8002580 <HAL_MspInit+0x4c>)
 8002544:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002548:	6453      	str	r3, [r2, #68]	@ 0x44
 800254a:	4b0d      	ldr	r3, [pc, #52]	@ (8002580 <HAL_MspInit+0x4c>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002552:	607b      	str	r3, [r7, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	603b      	str	r3, [r7, #0]
 800255a:	4b09      	ldr	r3, [pc, #36]	@ (8002580 <HAL_MspInit+0x4c>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	4a08      	ldr	r2, [pc, #32]	@ (8002580 <HAL_MspInit+0x4c>)
 8002560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002564:	6413      	str	r3, [r2, #64]	@ 0x40
 8002566:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <HAL_MspInit+0x4c>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800

08002584 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a0b      	ldr	r2, [pc, #44]	@ (80025c0 <HAL_CRC_MspInit+0x3c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d10d      	bne.n	80025b2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b0a      	ldr	r3, [pc, #40]	@ (80025c4 <HAL_CRC_MspInit+0x40>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	4a09      	ldr	r2, [pc, #36]	@ (80025c4 <HAL_CRC_MspInit+0x40>)
 80025a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025a6:	4b07      	ldr	r3, [pc, #28]	@ (80025c4 <HAL_CRC_MspInit+0x40>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80025b2:	bf00      	nop
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40023000 	.word	0x40023000
 80025c4:	40023800 	.word	0x40023800

080025c8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a0e      	ldr	r2, [pc, #56]	@ (8002610 <HAL_DMA2D_MspInit+0x48>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d115      	bne.n	8002606 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	4b0d      	ldr	r3, [pc, #52]	@ (8002614 <HAL_DMA2D_MspInit+0x4c>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002614 <HAL_DMA2D_MspInit+0x4c>)
 80025e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002614 <HAL_DMA2D_MspInit+0x4c>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2105      	movs	r1, #5
 80025fa:	205a      	movs	r0, #90	@ 0x5a
 80025fc:	f002 fd12 	bl	8005024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002600:	205a      	movs	r0, #90	@ 0x5a
 8002602:	f002 fd2b 	bl	800505c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	4002b000 	.word	0x4002b000
 8002614:	40023800 	.word	0x40023800

08002618 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	@ 0x28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a29      	ldr	r2, [pc, #164]	@ (80026dc <HAL_I2C_MspInit+0xc4>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d14b      	bne.n	80026d2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	4b28      	ldr	r3, [pc, #160]	@ (80026e0 <HAL_I2C_MspInit+0xc8>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002642:	4a27      	ldr	r2, [pc, #156]	@ (80026e0 <HAL_I2C_MspInit+0xc8>)
 8002644:	f043 0304 	orr.w	r3, r3, #4
 8002648:	6313      	str	r3, [r2, #48]	@ 0x30
 800264a:	4b25      	ldr	r3, [pc, #148]	@ (80026e0 <HAL_I2C_MspInit+0xc8>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	4b21      	ldr	r3, [pc, #132]	@ (80026e0 <HAL_I2C_MspInit+0xc8>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	4a20      	ldr	r2, [pc, #128]	@ (80026e0 <HAL_I2C_MspInit+0xc8>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6313      	str	r3, [r2, #48]	@ 0x30
 8002666:	4b1e      	ldr	r3, [pc, #120]	@ (80026e0 <HAL_I2C_MspInit+0xc8>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002672:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002678:	2312      	movs	r3, #18
 800267a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800267c:	2301      	movs	r3, #1
 800267e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002680:	2300      	movs	r3, #0
 8002682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002684:	2304      	movs	r3, #4
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002688:	f107 0314 	add.w	r3, r7, #20
 800268c:	4619      	mov	r1, r3
 800268e:	4815      	ldr	r0, [pc, #84]	@ (80026e4 <HAL_I2C_MspInit+0xcc>)
 8002690:	f003 fc7c 	bl	8005f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002694:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800269a:	2312      	movs	r3, #18
 800269c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800269e:	2301      	movs	r3, #1
 80026a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a2:	2300      	movs	r3, #0
 80026a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026a6:	2304      	movs	r3, #4
 80026a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80026aa:	f107 0314 	add.w	r3, r7, #20
 80026ae:	4619      	mov	r1, r3
 80026b0:	480d      	ldr	r0, [pc, #52]	@ (80026e8 <HAL_I2C_MspInit+0xd0>)
 80026b2:	f003 fc6b 	bl	8005f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	4b09      	ldr	r3, [pc, #36]	@ (80026e0 <HAL_I2C_MspInit+0xc8>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	4a08      	ldr	r2, [pc, #32]	@ (80026e0 <HAL_I2C_MspInit+0xc8>)
 80026c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026c6:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <HAL_I2C_MspInit+0xc8>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80026d2:	bf00      	nop
 80026d4:	3728      	adds	r7, #40	@ 0x28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40005c00 	.word	0x40005c00
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40020800 	.word	0x40020800
 80026e8:	40020000 	.word	0x40020000

080026ec <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002728 <HAL_I2C_MspDeInit+0x3c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d10f      	bne.n	800271e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80026fe:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <HAL_I2C_MspDeInit+0x40>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002702:	4a0a      	ldr	r2, [pc, #40]	@ (800272c <HAL_I2C_MspDeInit+0x40>)
 8002704:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002708:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 800270a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800270e:	4808      	ldr	r0, [pc, #32]	@ (8002730 <HAL_I2C_MspDeInit+0x44>)
 8002710:	f003 fde8 	bl	80062e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8002714:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002718:	4806      	ldr	r0, [pc, #24]	@ (8002734 <HAL_I2C_MspDeInit+0x48>)
 800271a:	f003 fde3 	bl	80062e4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40005c00 	.word	0x40005c00
 800272c:	40023800 	.word	0x40023800
 8002730:	40020800 	.word	0x40020800
 8002734:	40020000 	.word	0x40020000

08002738 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b09a      	sub	sp, #104	@ 0x68
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002754:	2230      	movs	r2, #48	@ 0x30
 8002756:	2100      	movs	r1, #0
 8002758:	4618      	mov	r0, r3
 800275a:	f00f f8a1 	bl	80118a0 <memset>
  if(hltdc->Instance==LTDC)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a85      	ldr	r2, [pc, #532]	@ (8002978 <HAL_LTDC_MspInit+0x240>)
 8002764:	4293      	cmp	r3, r2
 8002766:	f040 8103 	bne.w	8002970 <HAL_LTDC_MspInit+0x238>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800276a:	2308      	movs	r3, #8
 800276c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800276e:	23c0      	movs	r3, #192	@ 0xc0
 8002770:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002772:	2304      	movs	r3, #4
 8002774:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002776:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800277a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800277c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002780:	4618      	mov	r0, r3
 8002782:	f008 f943 	bl	800aa0c <HAL_RCCEx_PeriphCLKConfig>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 800278c:	f7ff fecc 	bl	8002528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002790:	2300      	movs	r3, #0
 8002792:	623b      	str	r3, [r7, #32]
 8002794:	4b79      	ldr	r3, [pc, #484]	@ (800297c <HAL_LTDC_MspInit+0x244>)
 8002796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002798:	4a78      	ldr	r2, [pc, #480]	@ (800297c <HAL_LTDC_MspInit+0x244>)
 800279a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800279e:	6453      	str	r3, [r2, #68]	@ 0x44
 80027a0:	4b76      	ldr	r3, [pc, #472]	@ (800297c <HAL_LTDC_MspInit+0x244>)
 80027a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027a8:	623b      	str	r3, [r7, #32]
 80027aa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80027ac:	2300      	movs	r3, #0
 80027ae:	61fb      	str	r3, [r7, #28]
 80027b0:	4b72      	ldr	r3, [pc, #456]	@ (800297c <HAL_LTDC_MspInit+0x244>)
 80027b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b4:	4a71      	ldr	r2, [pc, #452]	@ (800297c <HAL_LTDC_MspInit+0x244>)
 80027b6:	f043 0320 	orr.w	r3, r3, #32
 80027ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80027bc:	4b6f      	ldr	r3, [pc, #444]	@ (800297c <HAL_LTDC_MspInit+0x244>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	61fb      	str	r3, [r7, #28]
 80027c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c8:	2300      	movs	r3, #0
 80027ca:	61bb      	str	r3, [r7, #24]
 80027cc:	4b6b      	ldr	r3, [pc, #428]	@ (800297c <HAL_LTDC_MspInit+0x244>)
 80027ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d0:	4a6a      	ldr	r2, [pc, #424]	@ (800297c <HAL_LTDC_MspInit+0x244>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d8:	4b68      	ldr	r3, [pc, #416]	@ (800297c <HAL_LTDC_MspInit+0x244>)
 80027da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	4b64      	ldr	r3, [pc, #400]	@ (800297c <HAL_LTDC_MspInit+0x244>)
 80027ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ec:	4a63      	ldr	r2, [pc, #396]	@ (800297c <HAL_LTDC_MspInit+0x244>)
 80027ee:	f043 0302 	orr.w	r3, r3, #2
 80027f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f4:	4b61      	ldr	r3, [pc, #388]	@ (800297c <HAL_LTDC_MspInit+0x244>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002800:	2300      	movs	r3, #0
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	4b5d      	ldr	r3, [pc, #372]	@ (800297c <HAL_LTDC_MspInit+0x244>)
 8002806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002808:	4a5c      	ldr	r2, [pc, #368]	@ (800297c <HAL_LTDC_MspInit+0x244>)
 800280a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800280e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002810:	4b5a      	ldr	r3, [pc, #360]	@ (800297c <HAL_LTDC_MspInit+0x244>)
 8002812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	4b56      	ldr	r3, [pc, #344]	@ (800297c <HAL_LTDC_MspInit+0x244>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002824:	4a55      	ldr	r2, [pc, #340]	@ (800297c <HAL_LTDC_MspInit+0x244>)
 8002826:	f043 0304 	orr.w	r3, r3, #4
 800282a:	6313      	str	r3, [r2, #48]	@ 0x30
 800282c:	4b53      	ldr	r3, [pc, #332]	@ (800297c <HAL_LTDC_MspInit+0x244>)
 800282e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002838:	2300      	movs	r3, #0
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	4b4f      	ldr	r3, [pc, #316]	@ (800297c <HAL_LTDC_MspInit+0x244>)
 800283e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002840:	4a4e      	ldr	r2, [pc, #312]	@ (800297c <HAL_LTDC_MspInit+0x244>)
 8002842:	f043 0308 	orr.w	r3, r3, #8
 8002846:	6313      	str	r3, [r2, #48]	@ 0x30
 8002848:	4b4c      	ldr	r3, [pc, #304]	@ (800297c <HAL_LTDC_MspInit+0x244>)
 800284a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002854:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002858:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285a:	2302      	movs	r3, #2
 800285c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002862:	2300      	movs	r3, #0
 8002864:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002866:	230e      	movs	r3, #14
 8002868:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800286a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800286e:	4619      	mov	r1, r3
 8002870:	4843      	ldr	r0, [pc, #268]	@ (8002980 <HAL_LTDC_MspInit+0x248>)
 8002872:	f003 fb8b 	bl	8005f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002876:	f641 0358 	movw	r3, #6232	@ 0x1858
 800287a:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002884:	2300      	movs	r3, #0
 8002886:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002888:	230e      	movs	r3, #14
 800288a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002890:	4619      	mov	r1, r3
 8002892:	483c      	ldr	r0, [pc, #240]	@ (8002984 <HAL_LTDC_MspInit+0x24c>)
 8002894:	f003 fb7a 	bl	8005f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002898:	2303      	movs	r3, #3
 800289a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a4:	2300      	movs	r3, #0
 80028a6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80028a8:	2309      	movs	r3, #9
 80028aa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028b0:	4619      	mov	r1, r3
 80028b2:	4835      	ldr	r0, [pc, #212]	@ (8002988 <HAL_LTDC_MspInit+0x250>)
 80028b4:	f003 fb6a 	bl	8005f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80028b8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80028bc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	2302      	movs	r3, #2
 80028c0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c6:	2300      	movs	r3, #0
 80028c8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028ca:	230e      	movs	r3, #14
 80028cc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028d2:	4619      	mov	r1, r3
 80028d4:	482c      	ldr	r0, [pc, #176]	@ (8002988 <HAL_LTDC_MspInit+0x250>)
 80028d6:	f003 fb59 	bl	8005f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80028da:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80028de:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e0:	2302      	movs	r3, #2
 80028e2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e8:	2300      	movs	r3, #0
 80028ea:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028ec:	230e      	movs	r3, #14
 80028ee:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028f4:	4619      	mov	r1, r3
 80028f6:	4825      	ldr	r0, [pc, #148]	@ (800298c <HAL_LTDC_MspInit+0x254>)
 80028f8:	f003 fb48 	bl	8005f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80028fc:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002900:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290a:	2300      	movs	r3, #0
 800290c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800290e:	230e      	movs	r3, #14
 8002910:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002912:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002916:	4619      	mov	r1, r3
 8002918:	481d      	ldr	r0, [pc, #116]	@ (8002990 <HAL_LTDC_MspInit+0x258>)
 800291a:	f003 fb37 	bl	8005f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800291e:	2348      	movs	r3, #72	@ 0x48
 8002920:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002922:	2302      	movs	r3, #2
 8002924:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292a:	2300      	movs	r3, #0
 800292c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800292e:	230e      	movs	r3, #14
 8002930:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002932:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002936:	4619      	mov	r1, r3
 8002938:	4816      	ldr	r0, [pc, #88]	@ (8002994 <HAL_LTDC_MspInit+0x25c>)
 800293a:	f003 fb27 	bl	8005f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800293e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002942:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	2302      	movs	r3, #2
 8002946:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294c:	2300      	movs	r3, #0
 800294e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002950:	2309      	movs	r3, #9
 8002952:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002954:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002958:	4619      	mov	r1, r3
 800295a:	480c      	ldr	r0, [pc, #48]	@ (800298c <HAL_LTDC_MspInit+0x254>)
 800295c:	f003 fb16 	bl	8005f8c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002960:	2200      	movs	r2, #0
 8002962:	2105      	movs	r1, #5
 8002964:	2058      	movs	r0, #88	@ 0x58
 8002966:	f002 fb5d 	bl	8005024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800296a:	2058      	movs	r0, #88	@ 0x58
 800296c:	f002 fb76 	bl	800505c <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002970:	bf00      	nop
 8002972:	3768      	adds	r7, #104	@ 0x68
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40016800 	.word	0x40016800
 800297c:	40023800 	.word	0x40023800
 8002980:	40021400 	.word	0x40021400
 8002984:	40020000 	.word	0x40020000
 8002988:	40020400 	.word	0x40020400
 800298c:	40021800 	.word	0x40021800
 8002990:	40020800 	.word	0x40020800
 8002994:	40020c00 	.word	0x40020c00

08002998 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	@ 0x28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a19      	ldr	r2, [pc, #100]	@ (8002a1c <HAL_SPI_MspInit+0x84>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d12c      	bne.n	8002a14 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	4b18      	ldr	r3, [pc, #96]	@ (8002a20 <HAL_SPI_MspInit+0x88>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c2:	4a17      	ldr	r2, [pc, #92]	@ (8002a20 <HAL_SPI_MspInit+0x88>)
 80029c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ca:	4b15      	ldr	r3, [pc, #84]	@ (8002a20 <HAL_SPI_MspInit+0x88>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029d2:	613b      	str	r3, [r7, #16]
 80029d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	4b11      	ldr	r3, [pc, #68]	@ (8002a20 <HAL_SPI_MspInit+0x88>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	4a10      	ldr	r2, [pc, #64]	@ (8002a20 <HAL_SPI_MspInit+0x88>)
 80029e0:	f043 0320 	orr.w	r3, r3, #32
 80029e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002a20 <HAL_SPI_MspInit+0x88>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	f003 0320 	and.w	r3, r3, #32
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80029f2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80029f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a00:	2300      	movs	r3, #0
 8002a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002a04:	2305      	movs	r3, #5
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a08:	f107 0314 	add.w	r3, r7, #20
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4805      	ldr	r0, [pc, #20]	@ (8002a24 <HAL_SPI_MspInit+0x8c>)
 8002a10:	f003 fabc 	bl	8005f8c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002a14:	bf00      	nop
 8002a16:	3728      	adds	r7, #40	@ 0x28
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40015000 	.word	0x40015000
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40021400 	.word	0x40021400

08002a28 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a08      	ldr	r2, [pc, #32]	@ (8002a58 <HAL_SPI_MspDeInit+0x30>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d10a      	bne.n	8002a50 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002a3a:	4b08      	ldr	r3, [pc, #32]	@ (8002a5c <HAL_SPI_MspDeInit+0x34>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3e:	4a07      	ldr	r2, [pc, #28]	@ (8002a5c <HAL_SPI_MspDeInit+0x34>)
 8002a40:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002a44:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002a46:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002a4a:	4805      	ldr	r0, [pc, #20]	@ (8002a60 <HAL_SPI_MspDeInit+0x38>)
 8002a4c:	f003 fc4a 	bl	80062e4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40015000 	.word	0x40015000
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40021400 	.word	0x40021400

08002a64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1c      	ldr	r2, [pc, #112]	@ (8002ae4 <HAL_TIM_Base_MspInit+0x80>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d116      	bne.n	8002aa4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae8 <HAL_TIM_Base_MspInit+0x84>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ae8 <HAL_TIM_Base_MspInit+0x84>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a86:	4b18      	ldr	r3, [pc, #96]	@ (8002ae8 <HAL_TIM_Base_MspInit+0x84>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002a92:	2200      	movs	r2, #0
 8002a94:	2100      	movs	r1, #0
 8002a96:	2019      	movs	r0, #25
 8002a98:	f002 fac4 	bl	8005024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002a9c:	2019      	movs	r0, #25
 8002a9e:	f002 fadd 	bl	800505c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002aa2:	e01a      	b.n	8002ada <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a10      	ldr	r2, [pc, #64]	@ (8002aec <HAL_TIM_Base_MspInit+0x88>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d115      	bne.n	8002ada <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae8 <HAL_TIM_Base_MspInit+0x84>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8002ae8 <HAL_TIM_Base_MspInit+0x84>)
 8002ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002abe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae8 <HAL_TIM_Base_MspInit+0x84>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	2100      	movs	r1, #0
 8002ace:	2019      	movs	r0, #25
 8002ad0:	f002 faa8 	bl	8005024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002ad4:	2019      	movs	r0, #25
 8002ad6:	f002 fac1 	bl	800505c <HAL_NVIC_EnableIRQ>
}
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40010000 	.word	0x40010000
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40014400 	.word	0x40014400

08002af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08a      	sub	sp, #40	@ 0x28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af8:	f107 0314 	add.w	r3, r7, #20
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a19      	ldr	r2, [pc, #100]	@ (8002b74 <HAL_UART_MspInit+0x84>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d12c      	bne.n	8002b6c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	4b18      	ldr	r3, [pc, #96]	@ (8002b78 <HAL_UART_MspInit+0x88>)
 8002b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1a:	4a17      	ldr	r2, [pc, #92]	@ (8002b78 <HAL_UART_MspInit+0x88>)
 8002b1c:	f043 0310 	orr.w	r3, r3, #16
 8002b20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b22:	4b15      	ldr	r3, [pc, #84]	@ (8002b78 <HAL_UART_MspInit+0x88>)
 8002b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b26:	f003 0310 	and.w	r3, r3, #16
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	4b11      	ldr	r3, [pc, #68]	@ (8002b78 <HAL_UART_MspInit+0x88>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b36:	4a10      	ldr	r2, [pc, #64]	@ (8002b78 <HAL_UART_MspInit+0x88>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b78 <HAL_UART_MspInit+0x88>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002b4a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b50:	2302      	movs	r3, #2
 8002b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b5c:	2307      	movs	r3, #7
 8002b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b60:	f107 0314 	add.w	r3, r7, #20
 8002b64:	4619      	mov	r1, r3
 8002b66:	4805      	ldr	r0, [pc, #20]	@ (8002b7c <HAL_UART_MspInit+0x8c>)
 8002b68:	f003 fa10 	bl	8005f8c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002b6c:	bf00      	nop
 8002b6e:	3728      	adds	r7, #40	@ 0x28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40011000 	.word	0x40011000
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40020000 	.word	0x40020000

08002b80 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002b86:	1d3b      	adds	r3, r7, #4
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002b94:	4b3b      	ldr	r3, [pc, #236]	@ (8002c84 <HAL_FMC_MspInit+0x104>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d16f      	bne.n	8002c7c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002b9c:	4b39      	ldr	r3, [pc, #228]	@ (8002c84 <HAL_FMC_MspInit+0x104>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	4b38      	ldr	r3, [pc, #224]	@ (8002c88 <HAL_FMC_MspInit+0x108>)
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002baa:	4a37      	ldr	r2, [pc, #220]	@ (8002c88 <HAL_FMC_MspInit+0x108>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6393      	str	r3, [r2, #56]	@ 0x38
 8002bb2:	4b35      	ldr	r3, [pc, #212]	@ (8002c88 <HAL_FMC_MspInit+0x108>)
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	603b      	str	r3, [r7, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002bbe:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002bc2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bd0:	230c      	movs	r3, #12
 8002bd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bd4:	1d3b      	adds	r3, r7, #4
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	482c      	ldr	r0, [pc, #176]	@ (8002c8c <HAL_FMC_MspInit+0x10c>)
 8002bda:	f003 f9d7 	bl	8005f8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002bde:	2301      	movs	r3, #1
 8002be0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be2:	2302      	movs	r3, #2
 8002be4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bea:	2303      	movs	r3, #3
 8002bec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bee:	230c      	movs	r3, #12
 8002bf0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002bf2:	1d3b      	adds	r3, r7, #4
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4826      	ldr	r0, [pc, #152]	@ (8002c90 <HAL_FMC_MspInit+0x110>)
 8002bf8:	f003 f9c8 	bl	8005f8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002bfc:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002c00:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c0e:	230c      	movs	r3, #12
 8002c10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c12:	1d3b      	adds	r3, r7, #4
 8002c14:	4619      	mov	r1, r3
 8002c16:	481f      	ldr	r0, [pc, #124]	@ (8002c94 <HAL_FMC_MspInit+0x114>)
 8002c18:	f003 f9b8 	bl	8005f8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002c1c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002c20:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c22:	2302      	movs	r3, #2
 8002c24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c2e:	230c      	movs	r3, #12
 8002c30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	4619      	mov	r1, r3
 8002c36:	4818      	ldr	r0, [pc, #96]	@ (8002c98 <HAL_FMC_MspInit+0x118>)
 8002c38:	f003 f9a8 	bl	8005f8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002c3c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002c40:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c42:	2302      	movs	r3, #2
 8002c44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c4e:	230c      	movs	r3, #12
 8002c50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c52:	1d3b      	adds	r3, r7, #4
 8002c54:	4619      	mov	r1, r3
 8002c56:	4811      	ldr	r0, [pc, #68]	@ (8002c9c <HAL_FMC_MspInit+0x11c>)
 8002c58:	f003 f998 	bl	8005f8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002c5c:	2360      	movs	r3, #96	@ 0x60
 8002c5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c60:	2302      	movs	r3, #2
 8002c62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c6c:	230c      	movs	r3, #12
 8002c6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c70:	1d3b      	adds	r3, r7, #4
 8002c72:	4619      	mov	r1, r3
 8002c74:	480a      	ldr	r0, [pc, #40]	@ (8002ca0 <HAL_FMC_MspInit+0x120>)
 8002c76:	f003 f989 	bl	8005f8c <HAL_GPIO_Init>
 8002c7a:	e000      	b.n	8002c7e <HAL_FMC_MspInit+0xfe>
    return;
 8002c7c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	200081f4 	.word	0x200081f4
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40021400 	.word	0x40021400
 8002c90:	40020800 	.word	0x40020800
 8002c94:	40021800 	.word	0x40021800
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40020c00 	.word	0x40020c00
 8002ca0:	40020400 	.word	0x40020400

08002ca4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002cac:	f7ff ff68 	bl	8002b80 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002cb0:	bf00      	nop
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08e      	sub	sp, #56	@ 0x38
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	4b33      	ldr	r3, [pc, #204]	@ (8002d9c <HAL_InitTick+0xe4>)
 8002cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd0:	4a32      	ldr	r2, [pc, #200]	@ (8002d9c <HAL_InitTick+0xe4>)
 8002cd2:	f043 0310 	orr.w	r3, r3, #16
 8002cd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cd8:	4b30      	ldr	r3, [pc, #192]	@ (8002d9c <HAL_InitTick+0xe4>)
 8002cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ce4:	f107 0210 	add.w	r2, r7, #16
 8002ce8:	f107 0314 	add.w	r3, r7, #20
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f007 fe5a 	bl	800a9a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d103      	bne.n	8002d06 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002cfe:	f007 fe2b 	bl	800a958 <HAL_RCC_GetPCLK1Freq>
 8002d02:	6378      	str	r0, [r7, #52]	@ 0x34
 8002d04:	e004      	b.n	8002d10 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002d06:	f007 fe27 	bl	800a958 <HAL_RCC_GetPCLK1Freq>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d12:	4a23      	ldr	r2, [pc, #140]	@ (8002da0 <HAL_InitTick+0xe8>)
 8002d14:	fba2 2303 	umull	r2, r3, r2, r3
 8002d18:	0c9b      	lsrs	r3, r3, #18
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002d1e:	4b21      	ldr	r3, [pc, #132]	@ (8002da4 <HAL_InitTick+0xec>)
 8002d20:	4a21      	ldr	r2, [pc, #132]	@ (8002da8 <HAL_InitTick+0xf0>)
 8002d22:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002d24:	4b1f      	ldr	r3, [pc, #124]	@ (8002da4 <HAL_InitTick+0xec>)
 8002d26:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d2a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002da4 <HAL_InitTick+0xec>)
 8002d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d30:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002d32:	4b1c      	ldr	r3, [pc, #112]	@ (8002da4 <HAL_InitTick+0xec>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d38:	4b1a      	ldr	r3, [pc, #104]	@ (8002da4 <HAL_InitTick+0xec>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d3e:	4b19      	ldr	r3, [pc, #100]	@ (8002da4 <HAL_InitTick+0xec>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002d44:	4817      	ldr	r0, [pc, #92]	@ (8002da4 <HAL_InitTick+0xec>)
 8002d46:	f008 feb9 	bl	800babc <HAL_TIM_Base_Init>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002d50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d11b      	bne.n	8002d90 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002d58:	4812      	ldr	r0, [pc, #72]	@ (8002da4 <HAL_InitTick+0xec>)
 8002d5a:	f008 feff 	bl	800bb5c <HAL_TIM_Base_Start_IT>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002d64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d111      	bne.n	8002d90 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d6c:	2036      	movs	r0, #54	@ 0x36
 8002d6e:	f002 f975 	bl	800505c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b0f      	cmp	r3, #15
 8002d76:	d808      	bhi.n	8002d8a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	2036      	movs	r0, #54	@ 0x36
 8002d7e:	f002 f951 	bl	8005024 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d82:	4a0a      	ldr	r2, [pc, #40]	@ (8002dac <HAL_InitTick+0xf4>)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	e002      	b.n	8002d90 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002d90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3738      	adds	r7, #56	@ 0x38
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	431bde83 	.word	0x431bde83
 8002da4:	200081f8 	.word	0x200081f8
 8002da8:	40001000 	.word	0x40001000
 8002dac:	200001ec 	.word	0x200001ec

08002db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002db4:	bf00      	nop
 8002db6:	e7fd      	b.n	8002db4 <NMI_Handler+0x4>

08002db8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dbc:	bf00      	nop
 8002dbe:	e7fd      	b.n	8002dbc <HardFault_Handler+0x4>

08002dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dc4:	bf00      	nop
 8002dc6:	e7fd      	b.n	8002dc4 <MemManage_Handler+0x4>

08002dc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dcc:	bf00      	nop
 8002dce:	e7fd      	b.n	8002dcc <BusFault_Handler+0x4>

08002dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dd4:	bf00      	nop
 8002dd6:	e7fd      	b.n	8002dd4 <UsageFault_Handler+0x4>

08002dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ddc:	bf00      	nop
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e02:	b480      	push	{r7}
 8002e04:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e14:	4803      	ldr	r0, [pc, #12]	@ (8002e24 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002e16:	f008 ff11 	bl	800bc3c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002e1a:	4803      	ldr	r0, [pc, #12]	@ (8002e28 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002e1c:	f008 ff0e 	bl	800bc3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20000428 	.word	0x20000428
 8002e28:	20000470 	.word	0x20000470

08002e2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e30:	4802      	ldr	r0, [pc, #8]	@ (8002e3c <TIM6_DAC_IRQHandler+0x10>)
 8002e32:	f008 ff03 	bl	800bc3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	200081f8 	.word	0x200081f8

08002e40 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002e44:	4802      	ldr	r0, [pc, #8]	@ (8002e50 <OTG_HS_IRQHandler+0x10>)
 8002e46:	f003 fe53 	bl	8006af0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	200092f0 	.word	0x200092f0

08002e54 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002e58:	4802      	ldr	r0, [pc, #8]	@ (8002e64 <LTDC_IRQHandler+0x10>)
 8002e5a:	f006 fe4b 	bl	8009af4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000328 	.word	0x20000328

08002e68 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002e6c:	4802      	ldr	r0, [pc, #8]	@ (8002e78 <DMA2D_IRQHandler+0x10>)
 8002e6e:	f002 fc3a 	bl	80056e6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000294 	.word	0x20000294

08002e7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	e00a      	b.n	8002ea4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e8e:	f3af 8000 	nop.w
 8002e92:	4601      	mov	r1, r0
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	60ba      	str	r2, [r7, #8]
 8002e9a:	b2ca      	uxtb	r2, r1
 8002e9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	dbf0      	blt.n	8002e8e <_read+0x12>
  }

  return len;
 8002eac:	687b      	ldr	r3, [r7, #4]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ebe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ede:	605a      	str	r2, [r3, #4]
  return 0;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <_isatty>:

int _isatty(int file)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ef6:	2301      	movs	r3, #1
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f28:	4a14      	ldr	r2, [pc, #80]	@ (8002f7c <_sbrk+0x5c>)
 8002f2a:	4b15      	ldr	r3, [pc, #84]	@ (8002f80 <_sbrk+0x60>)
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f34:	4b13      	ldr	r3, [pc, #76]	@ (8002f84 <_sbrk+0x64>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d102      	bne.n	8002f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f3c:	4b11      	ldr	r3, [pc, #68]	@ (8002f84 <_sbrk+0x64>)
 8002f3e:	4a12      	ldr	r2, [pc, #72]	@ (8002f88 <_sbrk+0x68>)
 8002f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f42:	4b10      	ldr	r3, [pc, #64]	@ (8002f84 <_sbrk+0x64>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d207      	bcs.n	8002f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f50:	f00e fd04 	bl	801195c <__errno>
 8002f54:	4603      	mov	r3, r0
 8002f56:	220c      	movs	r2, #12
 8002f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5e:	e009      	b.n	8002f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f60:	4b08      	ldr	r3, [pc, #32]	@ (8002f84 <_sbrk+0x64>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f66:	4b07      	ldr	r3, [pc, #28]	@ (8002f84 <_sbrk+0x64>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	4a05      	ldr	r2, [pc, #20]	@ (8002f84 <_sbrk+0x64>)
 8002f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f72:	68fb      	ldr	r3, [r7, #12]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20030000 	.word	0x20030000
 8002f80:	00000400 	.word	0x00000400
 8002f84:	20008240 	.word	0x20008240
 8002f88:	20009820 	.word	0x20009820

08002f8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f90:	4b06      	ldr	r3, [pc, #24]	@ (8002fac <SystemInit+0x20>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f96:	4a05      	ldr	r2, [pc, #20]	@ (8002fac <SystemInit+0x20>)
 8002f98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002fb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002fe8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fb4:	f7ff ffea 	bl	8002f8c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fb8:	480c      	ldr	r0, [pc, #48]	@ (8002fec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fba:	490d      	ldr	r1, [pc, #52]	@ (8002ff0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002ff4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fc0:	e002      	b.n	8002fc8 <LoopCopyDataInit>

08002fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fc6:	3304      	adds	r3, #4

08002fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fcc:	d3f9      	bcc.n	8002fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fce:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fd0:	4c0a      	ldr	r4, [pc, #40]	@ (8002ffc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fd4:	e001      	b.n	8002fda <LoopFillZerobss>

08002fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fd8:	3204      	adds	r2, #4

08002fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fdc:	d3fb      	bcc.n	8002fd6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002fde:	f00e fcc3 	bl	8011968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fe2:	f7fd fb6f 	bl	80006c4 <main>
  bx  lr    
 8002fe6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002fe8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ff0:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8002ff4:	08016734 	.word	0x08016734
  ldr r2, =_sbss
 8002ff8:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8002ffc:	2000981c 	.word	0x2000981c

08003000 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003000:	e7fe      	b.n	8003000 <ADC_IRQHandler>

08003002 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003006:	f000 fe49 	bl	8003c9c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800300a:	20ca      	movs	r0, #202	@ 0xca
 800300c:	f000 f95d 	bl	80032ca <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8003010:	20c3      	movs	r0, #195	@ 0xc3
 8003012:	f000 f967 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8003016:	2008      	movs	r0, #8
 8003018:	f000 f964 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 800301c:	2050      	movs	r0, #80	@ 0x50
 800301e:	f000 f961 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8003022:	20cf      	movs	r0, #207	@ 0xcf
 8003024:	f000 f951 	bl	80032ca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003028:	2000      	movs	r0, #0
 800302a:	f000 f95b 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800302e:	20c1      	movs	r0, #193	@ 0xc1
 8003030:	f000 f958 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8003034:	2030      	movs	r0, #48	@ 0x30
 8003036:	f000 f955 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800303a:	20ed      	movs	r0, #237	@ 0xed
 800303c:	f000 f945 	bl	80032ca <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8003040:	2064      	movs	r0, #100	@ 0x64
 8003042:	f000 f94f 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8003046:	2003      	movs	r0, #3
 8003048:	f000 f94c 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 800304c:	2012      	movs	r0, #18
 800304e:	f000 f949 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8003052:	2081      	movs	r0, #129	@ 0x81
 8003054:	f000 f946 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8003058:	20e8      	movs	r0, #232	@ 0xe8
 800305a:	f000 f936 	bl	80032ca <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800305e:	2085      	movs	r0, #133	@ 0x85
 8003060:	f000 f940 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003064:	2000      	movs	r0, #0
 8003066:	f000 f93d 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800306a:	2078      	movs	r0, #120	@ 0x78
 800306c:	f000 f93a 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8003070:	20cb      	movs	r0, #203	@ 0xcb
 8003072:	f000 f92a 	bl	80032ca <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8003076:	2039      	movs	r0, #57	@ 0x39
 8003078:	f000 f934 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 800307c:	202c      	movs	r0, #44	@ 0x2c
 800307e:	f000 f931 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003082:	2000      	movs	r0, #0
 8003084:	f000 f92e 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8003088:	2034      	movs	r0, #52	@ 0x34
 800308a:	f000 f92b 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800308e:	2002      	movs	r0, #2
 8003090:	f000 f928 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8003094:	20f7      	movs	r0, #247	@ 0xf7
 8003096:	f000 f918 	bl	80032ca <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800309a:	2020      	movs	r0, #32
 800309c:	f000 f922 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80030a0:	20ea      	movs	r0, #234	@ 0xea
 80030a2:	f000 f912 	bl	80032ca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80030a6:	2000      	movs	r0, #0
 80030a8:	f000 f91c 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80030ac:	2000      	movs	r0, #0
 80030ae:	f000 f919 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80030b2:	20b1      	movs	r0, #177	@ 0xb1
 80030b4:	f000 f909 	bl	80032ca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80030b8:	2000      	movs	r0, #0
 80030ba:	f000 f913 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80030be:	201b      	movs	r0, #27
 80030c0:	f000 f910 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80030c4:	20b6      	movs	r0, #182	@ 0xb6
 80030c6:	f000 f900 	bl	80032ca <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80030ca:	200a      	movs	r0, #10
 80030cc:	f000 f90a 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80030d0:	20a2      	movs	r0, #162	@ 0xa2
 80030d2:	f000 f907 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80030d6:	20c0      	movs	r0, #192	@ 0xc0
 80030d8:	f000 f8f7 	bl	80032ca <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80030dc:	2010      	movs	r0, #16
 80030de:	f000 f901 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80030e2:	20c1      	movs	r0, #193	@ 0xc1
 80030e4:	f000 f8f1 	bl	80032ca <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80030e8:	2010      	movs	r0, #16
 80030ea:	f000 f8fb 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80030ee:	20c5      	movs	r0, #197	@ 0xc5
 80030f0:	f000 f8eb 	bl	80032ca <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80030f4:	2045      	movs	r0, #69	@ 0x45
 80030f6:	f000 f8f5 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80030fa:	2015      	movs	r0, #21
 80030fc:	f000 f8f2 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8003100:	20c7      	movs	r0, #199	@ 0xc7
 8003102:	f000 f8e2 	bl	80032ca <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8003106:	2090      	movs	r0, #144	@ 0x90
 8003108:	f000 f8ec 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800310c:	2036      	movs	r0, #54	@ 0x36
 800310e:	f000 f8dc 	bl	80032ca <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8003112:	20c8      	movs	r0, #200	@ 0xc8
 8003114:	f000 f8e6 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8003118:	20f2      	movs	r0, #242	@ 0xf2
 800311a:	f000 f8d6 	bl	80032ca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800311e:	2000      	movs	r0, #0
 8003120:	f000 f8e0 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8003124:	20b0      	movs	r0, #176	@ 0xb0
 8003126:	f000 f8d0 	bl	80032ca <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800312a:	20c2      	movs	r0, #194	@ 0xc2
 800312c:	f000 f8da 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8003130:	20b6      	movs	r0, #182	@ 0xb6
 8003132:	f000 f8ca 	bl	80032ca <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8003136:	200a      	movs	r0, #10
 8003138:	f000 f8d4 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 800313c:	20a7      	movs	r0, #167	@ 0xa7
 800313e:	f000 f8d1 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8003142:	2027      	movs	r0, #39	@ 0x27
 8003144:	f000 f8ce 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8003148:	2004      	movs	r0, #4
 800314a:	f000 f8cb 	bl	80032e4 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800314e:	202a      	movs	r0, #42	@ 0x2a
 8003150:	f000 f8bb 	bl	80032ca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003154:	2000      	movs	r0, #0
 8003156:	f000 f8c5 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800315a:	2000      	movs	r0, #0
 800315c:	f000 f8c2 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003160:	2000      	movs	r0, #0
 8003162:	f000 f8bf 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8003166:	20ef      	movs	r0, #239	@ 0xef
 8003168:	f000 f8bc 	bl	80032e4 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 800316c:	202b      	movs	r0, #43	@ 0x2b
 800316e:	f000 f8ac 	bl	80032ca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003172:	2000      	movs	r0, #0
 8003174:	f000 f8b6 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003178:	2000      	movs	r0, #0
 800317a:	f000 f8b3 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800317e:	2001      	movs	r0, #1
 8003180:	f000 f8b0 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8003184:	203f      	movs	r0, #63	@ 0x3f
 8003186:	f000 f8ad 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800318a:	20f6      	movs	r0, #246	@ 0xf6
 800318c:	f000 f89d 	bl	80032ca <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8003190:	2001      	movs	r0, #1
 8003192:	f000 f8a7 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003196:	2000      	movs	r0, #0
 8003198:	f000 f8a4 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800319c:	2006      	movs	r0, #6
 800319e:	f000 f8a1 	bl	80032e4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80031a2:	202c      	movs	r0, #44	@ 0x2c
 80031a4:	f000 f891 	bl	80032ca <ili9341_WriteReg>
  LCD_Delay(200);
 80031a8:	20c8      	movs	r0, #200	@ 0xc8
 80031aa:	f000 fe65 	bl	8003e78 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80031ae:	2026      	movs	r0, #38	@ 0x26
 80031b0:	f000 f88b 	bl	80032ca <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80031b4:	2001      	movs	r0, #1
 80031b6:	f000 f895 	bl	80032e4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80031ba:	20e0      	movs	r0, #224	@ 0xe0
 80031bc:	f000 f885 	bl	80032ca <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80031c0:	200f      	movs	r0, #15
 80031c2:	f000 f88f 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80031c6:	2029      	movs	r0, #41	@ 0x29
 80031c8:	f000 f88c 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80031cc:	2024      	movs	r0, #36	@ 0x24
 80031ce:	f000 f889 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80031d2:	200c      	movs	r0, #12
 80031d4:	f000 f886 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80031d8:	200e      	movs	r0, #14
 80031da:	f000 f883 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80031de:	2009      	movs	r0, #9
 80031e0:	f000 f880 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80031e4:	204e      	movs	r0, #78	@ 0x4e
 80031e6:	f000 f87d 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80031ea:	2078      	movs	r0, #120	@ 0x78
 80031ec:	f000 f87a 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80031f0:	203c      	movs	r0, #60	@ 0x3c
 80031f2:	f000 f877 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80031f6:	2009      	movs	r0, #9
 80031f8:	f000 f874 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80031fc:	2013      	movs	r0, #19
 80031fe:	f000 f871 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8003202:	2005      	movs	r0, #5
 8003204:	f000 f86e 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8003208:	2017      	movs	r0, #23
 800320a:	f000 f86b 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800320e:	2011      	movs	r0, #17
 8003210:	f000 f868 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003214:	2000      	movs	r0, #0
 8003216:	f000 f865 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800321a:	20e1      	movs	r0, #225	@ 0xe1
 800321c:	f000 f855 	bl	80032ca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003220:	2000      	movs	r0, #0
 8003222:	f000 f85f 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8003226:	2016      	movs	r0, #22
 8003228:	f000 f85c 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800322c:	201b      	movs	r0, #27
 800322e:	f000 f859 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8003232:	2004      	movs	r0, #4
 8003234:	f000 f856 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003238:	2011      	movs	r0, #17
 800323a:	f000 f853 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800323e:	2007      	movs	r0, #7
 8003240:	f000 f850 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8003244:	2031      	movs	r0, #49	@ 0x31
 8003246:	f000 f84d 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800324a:	2033      	movs	r0, #51	@ 0x33
 800324c:	f000 f84a 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8003250:	2042      	movs	r0, #66	@ 0x42
 8003252:	f000 f847 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8003256:	2005      	movs	r0, #5
 8003258:	f000 f844 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800325c:	200c      	movs	r0, #12
 800325e:	f000 f841 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8003262:	200a      	movs	r0, #10
 8003264:	f000 f83e 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8003268:	2028      	movs	r0, #40	@ 0x28
 800326a:	f000 f83b 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800326e:	202f      	movs	r0, #47	@ 0x2f
 8003270:	f000 f838 	bl	80032e4 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8003274:	200f      	movs	r0, #15
 8003276:	f000 f835 	bl	80032e4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800327a:	2011      	movs	r0, #17
 800327c:	f000 f825 	bl	80032ca <ili9341_WriteReg>
  LCD_Delay(200);
 8003280:	20c8      	movs	r0, #200	@ 0xc8
 8003282:	f000 fdf9 	bl	8003e78 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8003286:	2029      	movs	r0, #41	@ 0x29
 8003288:	f000 f81f 	bl	80032ca <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800328c:	202c      	movs	r0, #44	@ 0x2c
 800328e:	f000 f81c 	bl	80032ca <ili9341_WriteReg>
}
 8003292:	bf00      	nop
 8003294:	bd80      	pop	{r7, pc}

08003296 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800329a:	f000 fcff 	bl	8003c9c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800329e:	2103      	movs	r1, #3
 80032a0:	20d3      	movs	r0, #211	@ 0xd3
 80032a2:	f000 f82c 	bl	80032fe <ili9341_ReadData>
 80032a6:	4603      	mov	r3, r0
 80032a8:	b29b      	uxth	r3, r3
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	bd80      	pop	{r7, pc}

080032ae <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80032b2:	2029      	movs	r0, #41	@ 0x29
 80032b4:	f000 f809 	bl	80032ca <ili9341_WriteReg>
}
 80032b8:	bf00      	nop
 80032ba:	bd80      	pop	{r7, pc}

080032bc <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80032c0:	2028      	movs	r0, #40	@ 0x28
 80032c2:	f000 f802 	bl	80032ca <ili9341_WriteReg>
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}

080032ca <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	4603      	mov	r3, r0
 80032d2:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fd7a 	bl	8003dd0 <LCD_IO_WriteReg>
}
 80032dc:	bf00      	nop
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 fd4b 	bl	8003d8c <LCD_IO_WriteData>
}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	4603      	mov	r3, r0
 8003306:	460a      	mov	r2, r1
 8003308:	80fb      	strh	r3, [r7, #6]
 800330a:	4613      	mov	r3, r2
 800330c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800330e:	797a      	ldrb	r2, [r7, #5]
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	4611      	mov	r1, r2
 8003314:	4618      	mov	r0, r3
 8003316:	f000 fd7d 	bl	8003e14 <LCD_IO_ReadData>
 800331a:	4603      	mov	r3, r0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8003328:	23f0      	movs	r3, #240	@ 0xf0
}
 800332a:	4618      	mov	r0, r3
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8003338:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 800333c:	4618      	mov	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8003352:	88fb      	ldrh	r3, [r7, #6]
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fa59 	bl	800380c <stmpe811_GetInstance>
 800335a:	4603      	mov	r3, r0
 800335c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	2bff      	cmp	r3, #255	@ 0xff
 8003362:	d112      	bne.n	800338a <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8003364:	2000      	movs	r0, #0
 8003366:	f000 fa51 	bl	800380c <stmpe811_GetInstance>
 800336a:	4603      	mov	r3, r0
 800336c:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 800336e:	7bbb      	ldrb	r3, [r7, #14]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d80a      	bhi.n	800338a <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8003374:	7bbb      	ldrb	r3, [r7, #14]
 8003376:	88fa      	ldrh	r2, [r7, #6]
 8003378:	b2d1      	uxtb	r1, r2
 800337a:	4a06      	ldr	r2, [pc, #24]	@ (8003394 <stmpe811_Init+0x4c>)
 800337c:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 800337e:	f000 fd86 	bl	8003e8e <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	4618      	mov	r0, r3
 8003386:	f000 f807 	bl	8003398 <stmpe811_Reset>
    }
  }
}
 800338a:	bf00      	nop
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20008244 	.word	0x20008244

08003398 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2202      	movs	r2, #2
 80033a8:	2103      	movs	r1, #3
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fd7b 	bl	8003ea6 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 80033b0:	200a      	movs	r0, #10
 80033b2:	f000 fdb4 	bl	8003f1e <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80033b6:	88fb      	ldrh	r3, [r7, #6]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2200      	movs	r2, #0
 80033bc:	2103      	movs	r1, #3
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fd71 	bl	8003ea6 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 80033c4:	2002      	movs	r0, #2
 80033c6:	f000 fdaa 	bl	8003f1e <IOE_Delay>
}
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80033d2:	b590      	push	{r4, r7, lr}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	4603      	mov	r3, r0
 80033da:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 80033dc:	f000 fd57 	bl	8003e8e <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2100      	movs	r1, #0
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fd70 	bl	8003ecc <IOE_Read>
 80033ec:	4603      	mov	r3, r0
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80033f2:	88fb      	ldrh	r3, [r7, #6]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2101      	movs	r1, #1
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 fd67 	bl	8003ecc <IOE_Read>
 80033fe:	4603      	mov	r3, r0
 8003400:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003402:	4323      	orrs	r3, r4
 8003404:	b21b      	sxth	r3, r3
 8003406:	b29b      	uxth	r3, r3
}
 8003408:	4618      	mov	r0, r3
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	bd90      	pop	{r4, r7, pc}

08003410 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2109      	movs	r1, #9
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fd51 	bl	8003ecc <IOE_Read>
 800342a:	4603      	mov	r3, r0
 800342c:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	7bfa      	ldrb	r2, [r7, #15]
 800343c:	2109      	movs	r1, #9
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fd31 	bl	8003ea6 <IOE_Write>
}
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8003456:	2300      	movs	r3, #0
 8003458:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2109      	movs	r1, #9
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fd33 	bl	8003ecc <IOE_Read>
 8003466:	4603      	mov	r3, r0
 8003468:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	f023 0301 	bic.w	r3, r3, #1
 8003470:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8003472:	88fb      	ldrh	r3, [r7, #6]
 8003474:	b2db      	uxtb	r3, r3
 8003476:	7bfa      	ldrb	r2, [r7, #15]
 8003478:	2109      	movs	r1, #9
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fd13 	bl	8003ea6 <IOE_Write>
    
}
 8003480:	bf00      	nop
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	460a      	mov	r2, r1
 8003492:	80fb      	strh	r3, [r7, #6]
 8003494:	4613      	mov	r3, r2
 8003496:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800349c:	88fb      	ldrh	r3, [r7, #6]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	210a      	movs	r1, #10
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fd12 	bl	8003ecc <IOE_Read>
 80034a8:	4603      	mov	r3, r0
 80034aa:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 80034ac:	7bfa      	ldrb	r2, [r7, #15]
 80034ae:	797b      	ldrb	r3, [r7, #5]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	7bfa      	ldrb	r2, [r7, #15]
 80034ba:	210a      	movs	r1, #10
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fcf2 	bl	8003ea6 <IOE_Write>
}
 80034c2:	bf00      	nop
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4603      	mov	r3, r0
 80034d2:	460a      	mov	r2, r1
 80034d4:	80fb      	strh	r3, [r7, #6]
 80034d6:	4613      	mov	r3, r2
 80034d8:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80034da:	2300      	movs	r3, #0
 80034dc:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	210a      	movs	r1, #10
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fcf1 	bl	8003ecc <IOE_Read>
 80034ea:	4603      	mov	r3, r0
 80034ec:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 80034ee:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80034f2:	43db      	mvns	r3, r3
 80034f4:	b25a      	sxtb	r2, r3
 80034f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034fa:	4013      	ands	r3, r2
 80034fc:	b25b      	sxtb	r3, r3
 80034fe:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	210a      	movs	r1, #10
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fccc 	bl	8003ea6 <IOE_Write>
}
 800350e:	bf00      	nop
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	4603      	mov	r3, r0
 800351e:	460a      	mov	r2, r1
 8003520:	80fb      	strh	r3, [r7, #6]
 8003522:	4613      	mov	r3, r2
 8003524:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	210b      	movs	r1, #11
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fccd 	bl	8003ecc <IOE_Read>
 8003532:	4603      	mov	r3, r0
 8003534:	461a      	mov	r2, r3
 8003536:	797b      	ldrb	r3, [r7, #5]
 8003538:	4013      	ands	r3, r2
 800353a:	b2db      	uxtb	r3, r3
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	460a      	mov	r2, r1
 800354e:	80fb      	strh	r3, [r7, #6]
 8003550:	4613      	mov	r3, r2
 8003552:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8003554:	88fb      	ldrh	r3, [r7, #6]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	797a      	ldrb	r2, [r7, #5]
 800355a:	210b      	movs	r1, #11
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fca2 	bl	8003ea6 <IOE_Write>
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	4603      	mov	r3, r0
 8003572:	6039      	str	r1, [r7, #0]
 8003574:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2117      	movs	r1, #23
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fca3 	bl	8003ecc <IOE_Read>
 8003586:	4603      	mov	r3, r0
 8003588:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	b25b      	sxtb	r3, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	b25a      	sxtb	r2, r3
 8003592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003596:	4013      	ands	r3, r2
 8003598:	b25b      	sxtb	r3, r3
 800359a:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	7bfa      	ldrb	r2, [r7, #15]
 80035a2:	2117      	movs	r1, #23
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fc7e 	bl	8003ea6 <IOE_Write>
}
 80035aa:	bf00      	nop
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b084      	sub	sp, #16
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	4603      	mov	r3, r0
 80035ba:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2104      	movs	r1, #4
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 fc82 	bl	8003ecc <IOE_Read>
 80035c8:	4603      	mov	r3, r0
 80035ca:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	f023 0304 	bic.w	r3, r3, #4
 80035d2:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80035d4:	88fb      	ldrh	r3, [r7, #6]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	2104      	movs	r1, #4
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fc62 	bl	8003ea6 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	21f0      	movs	r1, #240	@ 0xf0
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff ffbf 	bl	800356a <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	f023 0303 	bic.w	r3, r3, #3
 80035f2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80035f4:	88fb      	ldrh	r3, [r7, #6]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	7bfa      	ldrb	r2, [r7, #15]
 80035fa:	2104      	movs	r1, #4
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 fc52 	bl	8003ea6 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8003602:	88fb      	ldrh	r3, [r7, #6]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2249      	movs	r2, #73	@ 0x49
 8003608:	2120      	movs	r1, #32
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fc4b 	bl	8003ea6 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8003610:	2002      	movs	r0, #2
 8003612:	f000 fc84 	bl	8003f1e <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2201      	movs	r2, #1
 800361c:	2121      	movs	r1, #33	@ 0x21
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fc41 	bl	8003ea6 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8003624:	88fb      	ldrh	r3, [r7, #6]
 8003626:	b2db      	uxtb	r3, r3
 8003628:	229a      	movs	r2, #154	@ 0x9a
 800362a:	2141      	movs	r1, #65	@ 0x41
 800362c:	4618      	mov	r0, r3
 800362e:	f000 fc3a 	bl	8003ea6 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2201      	movs	r2, #1
 8003638:	214a      	movs	r1, #74	@ 0x4a
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fc33 	bl	8003ea6 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2201      	movs	r2, #1
 8003646:	214b      	movs	r1, #75	@ 0x4b
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fc2c 	bl	8003ea6 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800364e:	88fb      	ldrh	r3, [r7, #6]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2200      	movs	r2, #0
 8003654:	214b      	movs	r1, #75	@ 0x4b
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fc25 	bl	8003ea6 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 800365c:	88fb      	ldrh	r3, [r7, #6]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2201      	movs	r2, #1
 8003662:	2156      	movs	r1, #86	@ 0x56
 8003664:	4618      	mov	r0, r3
 8003666:	f000 fc1e 	bl	8003ea6 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 800366a:	88fb      	ldrh	r3, [r7, #6]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2201      	movs	r2, #1
 8003670:	2158      	movs	r1, #88	@ 0x58
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fc17 	bl	8003ea6 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8003678:	88fb      	ldrh	r3, [r7, #6]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2201      	movs	r2, #1
 800367e:	2140      	movs	r1, #64	@ 0x40
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fc10 	bl	8003ea6 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	22ff      	movs	r2, #255	@ 0xff
 800368c:	210b      	movs	r1, #11
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fc09 	bl	8003ea6 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8003694:	2002      	movs	r0, #2
 8003696:	f000 fc42 	bl	8003f1e <IOE_Delay>
}
 800369a:	bf00      	nop
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	4603      	mov	r3, r0
 80036aa:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)STMPE811_TS_CTRL_STATUS);
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2140      	movs	r1, #64	@ 0x40
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fc08 	bl	8003ecc <IOE_Read>
 80036bc:	4603      	mov	r3, r0
 80036be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c2:	2b80      	cmp	r3, #128	@ 0x80
 80036c4:	bf0c      	ite	eq
 80036c6:	2301      	moveq	r3, #1
 80036c8:	2300      	movne	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 80036ce:	7bbb      	ldrb	r3, [r7, #14]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00b      	beq.n	80036ec <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	214c      	movs	r1, #76	@ 0x4c
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fbf6 	bl	8003ecc <IOE_Read>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d010      	beq.n	8003708 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 80036e6:	2301      	movs	r3, #1
 80036e8:	73fb      	strb	r3, [r7, #15]
 80036ea:	e00d      	b.n	8003708 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80036ec:	88fb      	ldrh	r3, [r7, #6]
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2201      	movs	r2, #1
 80036f2:	214b      	movs	r1, #75	@ 0x4b
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fbd6 	bl	8003ea6 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2200      	movs	r2, #0
 8003700:	214b      	movs	r1, #75	@ 0x4b
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fbcf 	bl	8003ea6 <IOE_Write>
  }
  
  return ret;
 8003708:	7bfb      	ldrb	r3, [r7, #15]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b086      	sub	sp, #24
 8003716:	af00      	add	r7, sp, #0
 8003718:	4603      	mov	r3, r0
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8003720:	89fb      	ldrh	r3, [r7, #14]
 8003722:	b2d8      	uxtb	r0, r3
 8003724:	f107 0210 	add.w	r2, r7, #16
 8003728:	2304      	movs	r3, #4
 800372a:	21d7      	movs	r1, #215	@ 0xd7
 800372c:	f000 fbe1 	bl	8003ef2 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8003730:	7c3b      	ldrb	r3, [r7, #16]
 8003732:	061a      	lsls	r2, r3, #24
 8003734:	7c7b      	ldrb	r3, [r7, #17]
 8003736:	041b      	lsls	r3, r3, #16
 8003738:	431a      	orrs	r2, r3
 800373a:	7cbb      	ldrb	r3, [r7, #18]
 800373c:	021b      	lsls	r3, r3, #8
 800373e:	4313      	orrs	r3, r2
 8003740:	7cfa      	ldrb	r2, [r7, #19]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	0d1b      	lsrs	r3, r3, #20
 800374a:	b29a      	uxth	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	0a1b      	lsrs	r3, r3, #8
 8003754:	b29b      	uxth	r3, r3
 8003756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800375a:	b29a      	uxth	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003760:	89fb      	ldrh	r3, [r7, #14]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2201      	movs	r2, #1
 8003766:	214b      	movs	r1, #75	@ 0x4b
 8003768:	4618      	mov	r0, r3
 800376a:	f000 fb9c 	bl	8003ea6 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800376e:	89fb      	ldrh	r3, [r7, #14]
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2200      	movs	r2, #0
 8003774:	214b      	movs	r1, #75	@ 0x4b
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fb95 	bl	8003ea6 <IOE_Write>
}
 800377c:	bf00      	nop
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800378e:	f000 fb84 	bl	8003e9a <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	211f      	movs	r1, #31
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff fe76 	bl	8003488 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff fe36 	bl	8003410 <stmpe811_EnableGlobalIT>
}
 80037a4:	bf00      	nop
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 80037b6:	88fb      	ldrh	r3, [r7, #6]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff fe47 	bl	800344c <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80037be:	88fb      	ldrh	r3, [r7, #6]
 80037c0:	211f      	movs	r1, #31
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff fe81 	bl	80034ca <stmpe811_DisableITSource>
}
 80037c8:	bf00      	nop
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80037da:	88fb      	ldrh	r3, [r7, #6]
 80037dc:	211f      	movs	r1, #31
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff fe99 	bl	8003516 <stmpe811_ReadGITStatus>
 80037e4:	4603      	mov	r3, r0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b082      	sub	sp, #8
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	4603      	mov	r3, r0
 80037f6:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80037f8:	88fb      	ldrh	r3, [r7, #6]
 80037fa:	211f      	movs	r1, #31
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff fea1 	bl	8003544 <stmpe811_ClearGlobalIT>
}
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800381a:	2300      	movs	r3, #0
 800381c:	73fb      	strb	r3, [r7, #15]
 800381e:	e00b      	b.n	8003838 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	4a0a      	ldr	r2, [pc, #40]	@ (800384c <stmpe811_GetInstance+0x40>)
 8003824:	5cd3      	ldrb	r3, [r2, r3]
 8003826:	461a      	mov	r2, r3
 8003828:	88fb      	ldrh	r3, [r7, #6]
 800382a:	4293      	cmp	r3, r2
 800382c:	d101      	bne.n	8003832 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	e006      	b.n	8003840 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8003832:	7bfb      	ldrb	r3, [r7, #15]
 8003834:	3301      	adds	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d9f0      	bls.n	8003820 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800383e:	23ff      	movs	r3, #255	@ 0xff
}
 8003840:	4618      	mov	r0, r3
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	20008244 	.word	0x20008244

08003850 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08a      	sub	sp, #40	@ 0x28
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]

  I2C_HandleTypeDef *pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a33      	ldr	r2, [pc, #204]	@ (800392c <I2Cx_MspInit+0xdc>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d15f      	bne.n	8003922 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	4b32      	ldr	r3, [pc, #200]	@ (8003930 <I2Cx_MspInit+0xe0>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386a:	4a31      	ldr	r2, [pc, #196]	@ (8003930 <I2Cx_MspInit+0xe0>)
 800386c:	f043 0304 	orr.w	r3, r3, #4
 8003870:	6313      	str	r3, [r2, #48]	@ 0x30
 8003872:	4b2f      	ldr	r3, [pc, #188]	@ (8003930 <I2Cx_MspInit+0xe0>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	4b2b      	ldr	r3, [pc, #172]	@ (8003930 <I2Cx_MspInit+0xe0>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003886:	4a2a      	ldr	r2, [pc, #168]	@ (8003930 <I2Cx_MspInit+0xe0>)
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	6313      	str	r3, [r2, #48]	@ 0x30
 800388e:	4b28      	ldr	r3, [pc, #160]	@ (8003930 <I2Cx_MspInit+0xe0>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]

    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 800389a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800389e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80038a0:	2312      	movs	r3, #18
 80038a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80038a8:	2302      	movs	r3, #2
 80038aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80038ac:	2304      	movs	r3, #4
 80038ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80038b0:	f107 0314 	add.w	r3, r7, #20
 80038b4:	4619      	mov	r1, r3
 80038b6:	481f      	ldr	r0, [pc, #124]	@ (8003934 <I2Cx_MspInit+0xe4>)
 80038b8:	f002 fb68 	bl	8005f8c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80038bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038c0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80038c2:	f107 0314 	add.w	r3, r7, #20
 80038c6:	4619      	mov	r1, r3
 80038c8:	481b      	ldr	r0, [pc, #108]	@ (8003938 <I2Cx_MspInit+0xe8>)
 80038ca:	f002 fb5f 	bl	8005f8c <HAL_GPIO_Init>


    /* Configure the Discovery I2Cx peripheral -------------------------------*/
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80038ce:	2300      	movs	r3, #0
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	4b17      	ldr	r3, [pc, #92]	@ (8003930 <I2Cx_MspInit+0xe0>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d6:	4a16      	ldr	r2, [pc, #88]	@ (8003930 <I2Cx_MspInit+0xe0>)
 80038d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80038de:	4b14      	ldr	r3, [pc, #80]	@ (8003930 <I2Cx_MspInit+0xe0>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038e6:	60bb      	str	r3, [r7, #8]
 80038e8:	68bb      	ldr	r3, [r7, #8]

    /* Force the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_FORCE_RESET();
 80038ea:	4b11      	ldr	r3, [pc, #68]	@ (8003930 <I2Cx_MspInit+0xe0>)
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	4a10      	ldr	r2, [pc, #64]	@ (8003930 <I2Cx_MspInit+0xe0>)
 80038f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038f4:	6213      	str	r3, [r2, #32]

    /* Release the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_RELEASE_RESET();
 80038f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003930 <I2Cx_MspInit+0xe0>)
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	4a0d      	ldr	r2, [pc, #52]	@ (8003930 <I2Cx_MspInit+0xe0>)
 80038fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003900:	6213      	str	r3, [r2, #32]

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003902:	2200      	movs	r2, #0
 8003904:	210f      	movs	r1, #15
 8003906:	2048      	movs	r0, #72	@ 0x48
 8003908:	f001 fb8c 	bl	8005024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800390c:	2048      	movs	r0, #72	@ 0x48
 800390e:	f001 fba5 	bl	800505c <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003912:	2200      	movs	r2, #0
 8003914:	210f      	movs	r1, #15
 8003916:	2049      	movs	r0, #73	@ 0x49
 8003918:	f001 fb84 	bl	8005024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800391c:	2049      	movs	r0, #73	@ 0x49
 800391e:	f001 fb9d 	bl	800505c <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8003922:	bf00      	nop
 8003924:	3728      	adds	r7, #40	@ 0x28
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40005c00 	.word	0x40005c00
 8003930:	40023800 	.word	0x40023800
 8003934:	40020000 	.word	0x40020000
 8003938:	40020800 	.word	0x40020800

0800393c <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8003940:	4814      	ldr	r0, [pc, #80]	@ (8003994 <I2Cx_Init+0x58>)
 8003942:	f005 fbc9 	bl	80090d8 <HAL_I2C_GetState>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d121      	bne.n	8003990 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 800394c:	4b11      	ldr	r3, [pc, #68]	@ (8003994 <I2Cx_Init+0x58>)
 800394e:	4a12      	ldr	r2, [pc, #72]	@ (8003998 <I2Cx_Init+0x5c>)
 8003950:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8003952:	4b10      	ldr	r3, [pc, #64]	@ (8003994 <I2Cx_Init+0x58>)
 8003954:	4a11      	ldr	r2, [pc, #68]	@ (800399c <I2Cx_Init+0x60>)
 8003956:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8003958:	4b0e      	ldr	r3, [pc, #56]	@ (8003994 <I2Cx_Init+0x58>)
 800395a:	2200      	movs	r2, #0
 800395c:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 800395e:	4b0d      	ldr	r3, [pc, #52]	@ (8003994 <I2Cx_Init+0x58>)
 8003960:	2200      	movs	r2, #0
 8003962:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003964:	4b0b      	ldr	r3, [pc, #44]	@ (8003994 <I2Cx_Init+0x58>)
 8003966:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800396a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 800396c:	4b09      	ldr	r3, [pc, #36]	@ (8003994 <I2Cx_Init+0x58>)
 800396e:	2200      	movs	r2, #0
 8003970:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8003972:	4b08      	ldr	r3, [pc, #32]	@ (8003994 <I2Cx_Init+0x58>)
 8003974:	2200      	movs	r2, #0
 8003976:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8003978:	4b06      	ldr	r3, [pc, #24]	@ (8003994 <I2Cx_Init+0x58>)
 800397a:	2200      	movs	r2, #0
 800397c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;
 800397e:	4b05      	ldr	r3, [pc, #20]	@ (8003994 <I2Cx_Init+0x58>)
 8003980:	2200      	movs	r2, #0
 8003982:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8003984:	4803      	ldr	r0, [pc, #12]	@ (8003994 <I2Cx_Init+0x58>)
 8003986:	f7ff ff63 	bl	8003850 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800398a:	4802      	ldr	r0, [pc, #8]	@ (8003994 <I2Cx_Init+0x58>)
 800398c:	f004 ff04 	bl	8008798 <HAL_I2C_Init>
  }
}
 8003990:	bf00      	nop
 8003992:	bd80      	pop	{r7, pc}
 8003994:	20008248 	.word	0x20008248
 8003998:	40005c00 	.word	0x40005c00
 800399c:	000186a0 	.word	0x000186a0

080039a0 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	603b      	str	r3, [r7, #0]
 80039aa:	4b13      	ldr	r3, [pc, #76]	@ (80039f8 <I2Cx_ITConfig+0x58>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ae:	4a12      	ldr	r2, [pc, #72]	@ (80039f8 <I2Cx_ITConfig+0x58>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80039b6:	4b10      	ldr	r3, [pc, #64]	@ (80039f8 <I2Cx_ITConfig+0x58>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80039c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80039c8:	2301      	movs	r3, #1
 80039ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80039cc:	2300      	movs	r3, #0
 80039ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80039d0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80039d4:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80039d6:	1d3b      	adds	r3, r7, #4
 80039d8:	4619      	mov	r1, r3
 80039da:	4808      	ldr	r0, [pc, #32]	@ (80039fc <I2Cx_ITConfig+0x5c>)
 80039dc:	f002 fad6 	bl	8005f8c <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80039e0:	2200      	movs	r2, #0
 80039e2:	210f      	movs	r1, #15
 80039e4:	2028      	movs	r0, #40	@ 0x28
 80039e6:	f001 fb1d 	bl	8005024 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80039ea:	2028      	movs	r0, #40	@ 0x28
 80039ec:	f001 fb36 	bl	800505c <HAL_NVIC_EnableIRQ>
}
 80039f0:	bf00      	nop
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40020000 	.word	0x40020000

08003a00 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af04      	add	r7, sp, #16
 8003a06:	4603      	mov	r3, r0
 8003a08:	71fb      	strb	r3, [r7, #7]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	71bb      	strb	r3, [r7, #6]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	b299      	uxth	r1, r3
 8003a1a:	79bb      	ldrb	r3, [r7, #6]
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a4c <I2Cx_WriteData+0x4c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	9302      	str	r3, [sp, #8]
 8003a24:	2301      	movs	r3, #1
 8003a26:	9301      	str	r3, [sp, #4]
 8003a28:	1d7b      	adds	r3, r7, #5
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	4808      	ldr	r0, [pc, #32]	@ (8003a50 <I2Cx_WriteData+0x50>)
 8003a30:	f005 f826 	bl	8008a80 <HAL_I2C_Mem_Write>
 8003a34:	4603      	mov	r3, r0
 8003a36:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003a3e:	f000 f863 	bl	8003b08 <I2Cx_Error>
  }
}
 8003a42:	bf00      	nop
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	200001c8 	.word	0x200001c8
 8003a50:	20008248 	.word	0x20008248

08003a54 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b088      	sub	sp, #32
 8003a58:	af04      	add	r7, sp, #16
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	460a      	mov	r2, r1
 8003a5e:	71fb      	strb	r3, [r7, #7]
 8003a60:	4613      	mov	r3, r2
 8003a62:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	b299      	uxth	r1, r3
 8003a70:	79bb      	ldrb	r3, [r7, #6]
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa4 <I2Cx_ReadData+0x50>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	9302      	str	r3, [sp, #8]
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	9301      	str	r3, [sp, #4]
 8003a7e:	f107 030e 	add.w	r3, r7, #14
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	2301      	movs	r3, #1
 8003a86:	4808      	ldr	r0, [pc, #32]	@ (8003aa8 <I2Cx_ReadData+0x54>)
 8003a88:	f005 f8f4 	bl	8008c74 <HAL_I2C_Mem_Read>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003a96:	f000 f837 	bl	8003b08 <I2Cx_Error>

  }
  return value;
 8003a9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	200001c8 	.word	0x200001c8
 8003aa8:	20008248 	.word	0x20008248

08003aac <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af04      	add	r7, sp, #16
 8003ab2:	603a      	str	r2, [r7, #0]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	71fb      	strb	r3, [r7, #7]
 8003aba:	460b      	mov	r3, r1
 8003abc:	71bb      	strb	r3, [r7, #6]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	b299      	uxth	r1, r3
 8003aca:	79bb      	ldrb	r3, [r7, #6]
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	4b0c      	ldr	r3, [pc, #48]	@ (8003b00 <I2Cx_ReadBuffer+0x54>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	9302      	str	r3, [sp, #8]
 8003ad4:	88bb      	ldrh	r3, [r7, #4]
 8003ad6:	9301      	str	r3, [sp, #4]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	2301      	movs	r3, #1
 8003ade:	4809      	ldr	r0, [pc, #36]	@ (8003b04 <I2Cx_ReadBuffer+0x58>)
 8003ae0:	f005 f8c8 	bl	8008c74 <HAL_I2C_Mem_Read>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status == HAL_OK)
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8003aee:	2300      	movs	r3, #0
 8003af0:	e002      	b.n	8003af8 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003af2:	f000 f809 	bl	8003b08 <I2Cx_Error>

    return 1;
 8003af6:	2301      	movs	r3, #1
  }
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	200001c8 	.word	0x200001c8
 8003b04:	20008248 	.word	0x20008248

08003b08 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8003b0c:	4803      	ldr	r0, [pc, #12]	@ (8003b1c <I2Cx_Error+0x14>)
 8003b0e:	f004 ff87 	bl	8008a20 <HAL_I2C_DeInit>

  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8003b12:	f7ff ff13 	bl	800393c <I2Cx_Init>
}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20008248 	.word	0x20008248

08003b20 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003b24:	4819      	ldr	r0, [pc, #100]	@ (8003b8c <SPIx_Init+0x6c>)
 8003b26:	f007 fe79 	bl	800b81c <HAL_SPI_GetState>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d12b      	bne.n	8003b88 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8003b30:	4b16      	ldr	r3, [pc, #88]	@ (8003b8c <SPIx_Init+0x6c>)
 8003b32:	4a17      	ldr	r2, [pc, #92]	@ (8003b90 <SPIx_Init+0x70>)
 8003b34:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003b36:	4b15      	ldr	r3, [pc, #84]	@ (8003b8c <SPIx_Init+0x6c>)
 8003b38:	2218      	movs	r2, #24
 8003b3a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003b3c:	4b13      	ldr	r3, [pc, #76]	@ (8003b8c <SPIx_Init+0x6c>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003b42:	4b12      	ldr	r3, [pc, #72]	@ (8003b8c <SPIx_Init+0x6c>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003b48:	4b10      	ldr	r3, [pc, #64]	@ (8003b8c <SPIx_Init+0x6c>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b8c <SPIx_Init+0x6c>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003b54:	4b0d      	ldr	r3, [pc, #52]	@ (8003b8c <SPIx_Init+0x6c>)
 8003b56:	2207      	movs	r2, #7
 8003b58:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b8c <SPIx_Init+0x6c>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003b60:	4b0a      	ldr	r3, [pc, #40]	@ (8003b8c <SPIx_Init+0x6c>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003b66:	4b09      	ldr	r3, [pc, #36]	@ (8003b8c <SPIx_Init+0x6c>)
 8003b68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b6c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003b6e:	4b07      	ldr	r3, [pc, #28]	@ (8003b8c <SPIx_Init+0x6c>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003b74:	4b05      	ldr	r3, [pc, #20]	@ (8003b8c <SPIx_Init+0x6c>)
 8003b76:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b7a:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8003b7c:	4803      	ldr	r0, [pc, #12]	@ (8003b8c <SPIx_Init+0x6c>)
 8003b7e:	f000 f853 	bl	8003c28 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8003b82:	4802      	ldr	r0, [pc, #8]	@ (8003b8c <SPIx_Init+0x6c>)
 8003b84:	f007 f993 	bl	800aeae <HAL_SPI_Init>
  }
}
 8003b88:	bf00      	nop
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	2000829c 	.word	0x2000829c
 8003b90:	40015000 	.word	0x40015000

08003b94 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	4b09      	ldr	r3, [pc, #36]	@ (8003bcc <SPIx_Read+0x38>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f107 0108 	add.w	r1, r7, #8
 8003bae:	4808      	ldr	r0, [pc, #32]	@ (8003bd0 <SPIx_Read+0x3c>)
 8003bb0:	f007 fb72 	bl	800b298 <HAL_SPI_Receive>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003bbe:	f000 f827 	bl	8003c10 <SPIx_Error>
  }

  return readvalue;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	200001cc 	.word	0x200001cc
 8003bd0:	2000829c 	.word	0x2000829c

08003bd4 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 8003be2:	4b09      	ldr	r3, [pc, #36]	@ (8003c08 <SPIx_Write+0x34>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	1db9      	adds	r1, r7, #6
 8003be8:	2201      	movs	r2, #1
 8003bea:	4808      	ldr	r0, [pc, #32]	@ (8003c0c <SPIx_Write+0x38>)
 8003bec:	f007 fa10 	bl	800b010 <HAL_SPI_Transmit>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003bfa:	f000 f809 	bl	8003c10 <SPIx_Error>
  }
}
 8003bfe:	bf00      	nop
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	200001cc 	.word	0x200001cc
 8003c0c:	2000829c 	.word	0x2000829c

08003c10 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003c14:	4803      	ldr	r0, [pc, #12]	@ (8003c24 <SPIx_Error+0x14>)
 8003c16:	f007 f9d3 	bl	800afc0 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8003c1a:	f7ff ff81 	bl	8003b20 <SPIx_Init>
}
 8003c1e:	bf00      	nop
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	2000829c 	.word	0x2000829c

08003c28 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08a      	sub	sp, #40	@ 0x28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8003c30:	2300      	movs	r3, #0
 8003c32:	613b      	str	r3, [r7, #16]
 8003c34:	4b17      	ldr	r3, [pc, #92]	@ (8003c94 <SPIx_MspInit+0x6c>)
 8003c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c38:	4a16      	ldr	r2, [pc, #88]	@ (8003c94 <SPIx_MspInit+0x6c>)
 8003c3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c40:	4b14      	ldr	r3, [pc, #80]	@ (8003c94 <SPIx_MspInit+0x6c>)
 8003c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	4b10      	ldr	r3, [pc, #64]	@ (8003c94 <SPIx_MspInit+0x6c>)
 8003c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c54:	4a0f      	ldr	r2, [pc, #60]	@ (8003c94 <SPIx_MspInit+0x6c>)
 8003c56:	f043 0320 	orr.w	r3, r3, #32
 8003c5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c94 <SPIx_MspInit+0x6c>)
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c60:	f003 0320 	and.w	r3, r3, #32
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8003c68:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003c72:	2302      	movs	r3, #2
 8003c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003c76:	2301      	movs	r3, #1
 8003c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8003c7a:	2305      	movs	r3, #5
 8003c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8003c7e:	f107 0314 	add.w	r3, r7, #20
 8003c82:	4619      	mov	r1, r3
 8003c84:	4804      	ldr	r0, [pc, #16]	@ (8003c98 <SPIx_MspInit+0x70>)
 8003c86:	f002 f981 	bl	8005f8c <HAL_GPIO_Init>
}
 8003c8a:	bf00      	nop
 8003c8c:	3728      	adds	r7, #40	@ 0x28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40021400 	.word	0x40021400

08003c9c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 8003ca2:	4b36      	ldr	r3, [pc, #216]	@ (8003d7c <LCD_IO_Init+0xe0>)
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d164      	bne.n	8003d74 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8003caa:	4b34      	ldr	r3, [pc, #208]	@ (8003d7c <LCD_IO_Init+0xe0>)
 8003cac:	2201      	movs	r2, #1
 8003cae:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60bb      	str	r3, [r7, #8]
 8003cb4:	4b32      	ldr	r3, [pc, #200]	@ (8003d80 <LCD_IO_Init+0xe4>)
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb8:	4a31      	ldr	r2, [pc, #196]	@ (8003d80 <LCD_IO_Init+0xe4>)
 8003cba:	f043 0308 	orr.w	r3, r3, #8
 8003cbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cc0:	4b2f      	ldr	r3, [pc, #188]	@ (8003d80 <LCD_IO_Init+0xe4>)
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003ccc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003cd0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003cde:	f107 030c 	add.w	r3, r7, #12
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4827      	ldr	r0, [pc, #156]	@ (8003d84 <LCD_IO_Init+0xe8>)
 8003ce6:	f002 f951 	bl	8005f8c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8003cea:	2300      	movs	r3, #0
 8003cec:	607b      	str	r3, [r7, #4]
 8003cee:	4b24      	ldr	r3, [pc, #144]	@ (8003d80 <LCD_IO_Init+0xe4>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	4a23      	ldr	r2, [pc, #140]	@ (8003d80 <LCD_IO_Init+0xe4>)
 8003cf4:	f043 0308 	orr.w	r3, r3, #8
 8003cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cfa:	4b21      	ldr	r3, [pc, #132]	@ (8003d80 <LCD_IO_Init+0xe4>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	607b      	str	r3, [r7, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003d06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003d14:	2302      	movs	r3, #2
 8003d16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003d18:	f107 030c 	add.w	r3, r7, #12
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4819      	ldr	r0, [pc, #100]	@ (8003d84 <LCD_IO_Init+0xe8>)
 8003d20:	f002 f934 	bl	8005f8c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003d24:	2300      	movs	r3, #0
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	4b15      	ldr	r3, [pc, #84]	@ (8003d80 <LCD_IO_Init+0xe4>)
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2c:	4a14      	ldr	r2, [pc, #80]	@ (8003d80 <LCD_IO_Init+0xe4>)
 8003d2e:	f043 0304 	orr.w	r3, r3, #4
 8003d32:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d34:	4b12      	ldr	r3, [pc, #72]	@ (8003d80 <LCD_IO_Init+0xe4>)
 8003d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	603b      	str	r3, [r7, #0]
 8003d3e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003d40:	2304      	movs	r3, #4
 8003d42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003d44:	2301      	movs	r3, #1
 8003d46:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003d50:	f107 030c 	add.w	r3, r7, #12
 8003d54:	4619      	mov	r1, r3
 8003d56:	480c      	ldr	r0, [pc, #48]	@ (8003d88 <LCD_IO_Init+0xec>)
 8003d58:	f002 f918 	bl	8005f8c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	2104      	movs	r1, #4
 8003d60:	4809      	ldr	r0, [pc, #36]	@ (8003d88 <LCD_IO_Init+0xec>)
 8003d62:	f002 fbcb 	bl	80064fc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003d66:	2201      	movs	r2, #1
 8003d68:	2104      	movs	r1, #4
 8003d6a:	4807      	ldr	r0, [pc, #28]	@ (8003d88 <LCD_IO_Init+0xec>)
 8003d6c:	f002 fbc6 	bl	80064fc <HAL_GPIO_WritePin>

    SPIx_Init();
 8003d70:	f7ff fed6 	bl	8003b20 <SPIx_Init>
  }
}
 8003d74:	bf00      	nop
 8003d76:	3720      	adds	r7, #32
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	200082f4 	.word	0x200082f4
 8003d80:	40023800 	.word	0x40023800
 8003d84:	40020c00 	.word	0x40020c00
 8003d88:	40020800 	.word	0x40020800

08003d8c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003d96:	2201      	movs	r2, #1
 8003d98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003d9c:	480a      	ldr	r0, [pc, #40]	@ (8003dc8 <LCD_IO_WriteData+0x3c>)
 8003d9e:	f002 fbad 	bl	80064fc <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8003da2:	2200      	movs	r2, #0
 8003da4:	2104      	movs	r1, #4
 8003da6:	4809      	ldr	r0, [pc, #36]	@ (8003dcc <LCD_IO_WriteData+0x40>)
 8003da8:	f002 fba8 	bl	80064fc <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003dac:	88fb      	ldrh	r3, [r7, #6]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff ff10 	bl	8003bd4 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003db4:	2201      	movs	r2, #1
 8003db6:	2104      	movs	r1, #4
 8003db8:	4804      	ldr	r0, [pc, #16]	@ (8003dcc <LCD_IO_WriteData+0x40>)
 8003dba:	f002 fb9f 	bl	80064fc <HAL_GPIO_WritePin>
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40020c00 	.word	0x40020c00
 8003dcc:	40020800 	.word	0x40020800

08003dd0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003de0:	480a      	ldr	r0, [pc, #40]	@ (8003e0c <LCD_IO_WriteReg+0x3c>)
 8003de2:	f002 fb8b 	bl	80064fc <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003de6:	2200      	movs	r2, #0
 8003de8:	2104      	movs	r1, #4
 8003dea:	4809      	ldr	r0, [pc, #36]	@ (8003e10 <LCD_IO_WriteReg+0x40>)
 8003dec:	f002 fb86 	bl	80064fc <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003df0:	79fb      	ldrb	r3, [r7, #7]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff feed 	bl	8003bd4 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	2104      	movs	r1, #4
 8003dfe:	4804      	ldr	r0, [pc, #16]	@ (8003e10 <LCD_IO_WriteReg+0x40>)
 8003e00:	f002 fb7c 	bl	80064fc <HAL_GPIO_WritePin>
}
 8003e04:	bf00      	nop
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40020c00 	.word	0x40020c00
 8003e10:	40020800 	.word	0x40020800

08003e14 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	460a      	mov	r2, r1
 8003e1e:	80fb      	strh	r3, [r7, #6]
 8003e20:	4613      	mov	r3, r2
 8003e22:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2104      	movs	r1, #4
 8003e2c:	4810      	ldr	r0, [pc, #64]	@ (8003e70 <LCD_IO_ReadData+0x5c>)
 8003e2e:	f002 fb65 	bl	80064fc <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003e32:	2200      	movs	r2, #0
 8003e34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e38:	480e      	ldr	r0, [pc, #56]	@ (8003e74 <LCD_IO_ReadData+0x60>)
 8003e3a:	f002 fb5f 	bl	80064fc <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff fec7 	bl	8003bd4 <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 8003e46:	797b      	ldrb	r3, [r7, #5]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff fea3 	bl	8003b94 <SPIx_Read>
 8003e4e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003e50:	2201      	movs	r2, #1
 8003e52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e56:	4807      	ldr	r0, [pc, #28]	@ (8003e74 <LCD_IO_ReadData+0x60>)
 8003e58:	f002 fb50 	bl	80064fc <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	2104      	movs	r1, #4
 8003e60:	4803      	ldr	r0, [pc, #12]	@ (8003e70 <LCD_IO_ReadData+0x5c>)
 8003e62:	f002 fb4b 	bl	80064fc <HAL_GPIO_WritePin>

  return readvalue;
 8003e66:	68fb      	ldr	r3, [r7, #12]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40020800 	.word	0x40020800
 8003e74:	40020c00 	.word	0x40020c00

08003e78 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fff3 	bl	8004e6c <HAL_Delay>
}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8003e92:	f7ff fd53 	bl	800393c <I2Cx_Init>
}
 8003e96:	bf00      	nop
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8003e9e:	f7ff fd7f 	bl	80039a0 <I2Cx_ITConfig>
}
 8003ea2:	bf00      	nop
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	4603      	mov	r3, r0
 8003eae:	71fb      	strb	r3, [r7, #7]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	71bb      	strb	r3, [r7, #6]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8003eb8:	797a      	ldrb	r2, [r7, #5]
 8003eba:	79b9      	ldrb	r1, [r7, #6]
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff fd9e 	bl	8003a00 <I2Cx_WriteData>
}
 8003ec4:	bf00      	nop
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	460a      	mov	r2, r1
 8003ed6:	71fb      	strb	r3, [r7, #7]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8003edc:	79ba      	ldrb	r2, [r7, #6]
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	4611      	mov	r1, r2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff fdb6 	bl	8003a54 <I2Cx_ReadData>
 8003ee8:	4603      	mov	r3, r0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	603a      	str	r2, [r7, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	4603      	mov	r3, r0
 8003efe:	71fb      	strb	r3, [r7, #7]
 8003f00:	460b      	mov	r3, r1
 8003f02:	71bb      	strb	r3, [r7, #6]
 8003f04:	4613      	mov	r3, r2
 8003f06:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8003f08:	88bb      	ldrh	r3, [r7, #4]
 8003f0a:	79b9      	ldrb	r1, [r7, #6]
 8003f0c:	79f8      	ldrb	r0, [r7, #7]
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	f7ff fdcc 	bl	8003aac <I2Cx_ReadBuffer>
 8003f14:	4603      	mov	r3, r0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 ffa0 	bl	8004e6c <HAL_Delay>
}
 8003f2c:	bf00      	nop
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 8003f38:	4b2d      	ldr	r3, [pc, #180]	@ (8003ff0 <BSP_LCD_Init+0xbc>)
 8003f3a:	4a2e      	ldr	r2, [pc, #184]	@ (8003ff4 <BSP_LCD_Init+0xc0>)
 8003f3c:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8003f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ff0 <BSP_LCD_Init+0xbc>)
 8003f40:	2209      	movs	r2, #9
 8003f42:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8003f44:	4b2a      	ldr	r3, [pc, #168]	@ (8003ff0 <BSP_LCD_Init+0xbc>)
 8003f46:	2201      	movs	r2, #1
 8003f48:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8003f4a:	4b29      	ldr	r3, [pc, #164]	@ (8003ff0 <BSP_LCD_Init+0xbc>)
 8003f4c:	221d      	movs	r2, #29
 8003f4e:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8003f50:	4b27      	ldr	r3, [pc, #156]	@ (8003ff0 <BSP_LCD_Init+0xbc>)
 8003f52:	2203      	movs	r2, #3
 8003f54:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 8003f56:	4b26      	ldr	r3, [pc, #152]	@ (8003ff0 <BSP_LCD_Init+0xbc>)
 8003f58:	f240 120d 	movw	r2, #269	@ 0x10d
 8003f5c:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 8003f5e:	4b24      	ldr	r3, [pc, #144]	@ (8003ff0 <BSP_LCD_Init+0xbc>)
 8003f60:	f240 1243 	movw	r2, #323	@ 0x143
 8003f64:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 8003f66:	4b22      	ldr	r3, [pc, #136]	@ (8003ff0 <BSP_LCD_Init+0xbc>)
 8003f68:	f240 1217 	movw	r2, #279	@ 0x117
 8003f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 8003f6e:	4b20      	ldr	r3, [pc, #128]	@ (8003ff0 <BSP_LCD_Init+0xbc>)
 8003f70:	f240 1247 	movw	r2, #327	@ 0x147
 8003f74:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 8003f76:	4b1e      	ldr	r3, [pc, #120]	@ (8003ff0 <BSP_LCD_Init+0xbc>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 8003f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ff0 <BSP_LCD_Init+0xbc>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 8003f86:	4b1a      	ldr	r3, [pc, #104]	@ (8003ff0 <BSP_LCD_Init+0xbc>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ff8 <BSP_LCD_Init+0xc4>)
 8003f90:	2208      	movs	r2, #8
 8003f92:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003f94:	4b18      	ldr	r3, [pc, #96]	@ (8003ff8 <BSP_LCD_Init+0xc4>)
 8003f96:	22c0      	movs	r2, #192	@ 0xc0
 8003f98:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003f9a:	4b17      	ldr	r3, [pc, #92]	@ (8003ff8 <BSP_LCD_Init+0xc4>)
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003fa0:	4b15      	ldr	r3, [pc, #84]	@ (8003ff8 <BSP_LCD_Init+0xc4>)
 8003fa2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003fa6:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003fa8:	4813      	ldr	r0, [pc, #76]	@ (8003ff8 <BSP_LCD_Init+0xc4>)
 8003faa:	f006 fd2f 	bl	800aa0c <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003fae:	4b10      	ldr	r3, [pc, #64]	@ (8003ff0 <BSP_LCD_Init+0xbc>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff0 <BSP_LCD_Init+0xbc>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003fba:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff0 <BSP_LCD_Init+0xbc>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff0 <BSP_LCD_Init+0xbc>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 8003fc6:	f000 fa6b 	bl	80044a0 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 8003fca:	4809      	ldr	r0, [pc, #36]	@ (8003ff0 <BSP_LCD_Init+0xbc>)
 8003fcc:	f005 fcc2 	bl	8009954 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ffc <BSP_LCD_Init+0xc8>)
 8003fd2:	4a0b      	ldr	r2, [pc, #44]	@ (8004000 <BSP_LCD_Init+0xcc>)
 8003fd4:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 8003fd6:	4b09      	ldr	r3, [pc, #36]	@ (8003ffc <BSP_LCD_Init+0xc8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8003fde:	f000 fc4d 	bl	800487c <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003fe2:	4808      	ldr	r0, [pc, #32]	@ (8004004 <BSP_LCD_Init+0xd0>)
 8003fe4:	f000 f8be 	bl	8004164 <BSP_LCD_SetFont>

  return LCD_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	200082f8 	.word	0x200082f8
 8003ff4:	40016800 	.word	0x40016800
 8003ff8:	200083e0 	.word	0x200083e0
 8003ffc:	2000842c 	.word	0x2000842c
 8004000:	20000168 	.word	0x20000168
 8004004:	200001d0 	.word	0x200001d0

08004008 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 800400c:	4b03      	ldr	r3, [pc, #12]	@ (800401c <BSP_LCD_GetXSize+0x14>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004012:	4798      	blx	r3
 8004014:	4603      	mov	r3, r0
}
 8004016:	4618      	mov	r0, r3
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	2000842c 	.word	0x2000842c

08004020 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8004024:	4b03      	ldr	r3, [pc, #12]	@ (8004034 <BSP_LCD_GetYSize+0x14>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402a:	4798      	blx	r3
 800402c:	4603      	mov	r3, r0
}
 800402e:	4618      	mov	r0, r3
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	2000842c 	.word	0x2000842c

08004038 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b090      	sub	sp, #64	@ 0x40
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	6039      	str	r1, [r7, #0]
 8004042:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8004044:	2300      	movs	r3, #0
 8004046:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8004048:	f7ff ffde 	bl	8004008 <BSP_LCD_GetXSize>
 800404c:	4603      	mov	r3, r0
 800404e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8004050:	2300      	movs	r3, #0
 8004052:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8004054:	f7ff ffe4 	bl	8004020 <BSP_LCD_GetYSize>
 8004058:	4603      	mov	r3, r0
 800405a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800405c:	2300      	movs	r3, #0
 800405e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8004064:	23ff      	movs	r3, #255	@ 0xff
 8004066:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8004068:	2300      	movs	r3, #0
 800406a:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 800406c:	2300      	movs	r3, #0
 800406e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8004072:	2300      	movs	r3, #0
 8004074:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8004078:	2300      	movs	r3, #0
 800407a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800407e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004082:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004084:	2307      	movs	r3, #7
 8004086:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8004088:	f7ff ffbe 	bl	8004008 <BSP_LCD_GetXSize>
 800408c:	4603      	mov	r3, r0
 800408e:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8004090:	f7ff ffc6 	bl	8004020 <BSP_LCD_GetYSize>
 8004094:	4603      	mov	r3, r0
 8004096:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 8004098:	88fa      	ldrh	r2, [r7, #6]
 800409a:	f107 030c 	add.w	r3, r7, #12
 800409e:	4619      	mov	r1, r3
 80040a0:	4814      	ldr	r0, [pc, #80]	@ (80040f4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80040a2:	f005 fde9 	bl	8009c78 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80040a6:	88fa      	ldrh	r2, [r7, #6]
 80040a8:	4913      	ldr	r1, [pc, #76]	@ (80040f8 <BSP_LCD_LayerDefaultInit+0xc0>)
 80040aa:	4613      	mov	r3, r2
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	4413      	add	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	3304      	adds	r3, #4
 80040b6:	f04f 32ff 	mov.w	r2, #4294967295
 80040ba:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80040bc:	88fa      	ldrh	r2, [r7, #6]
 80040be:	490e      	ldr	r1, [pc, #56]	@ (80040f8 <BSP_LCD_LayerDefaultInit+0xc0>)
 80040c0:	4613      	mov	r3, r2
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	4413      	add	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	3308      	adds	r3, #8
 80040cc:	4a0b      	ldr	r2, [pc, #44]	@ (80040fc <BSP_LCD_LayerDefaultInit+0xc4>)
 80040ce:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80040d0:	88fa      	ldrh	r2, [r7, #6]
 80040d2:	4909      	ldr	r1, [pc, #36]	@ (80040f8 <BSP_LCD_LayerDefaultInit+0xc0>)
 80040d4:	4613      	mov	r3, r2
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80040e2:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80040e4:	4803      	ldr	r0, [pc, #12]	@ (80040f4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80040e6:	f005 fe05 	bl	8009cf4 <HAL_LTDC_EnableDither>
}
 80040ea:	bf00      	nop
 80040ec:	3740      	adds	r7, #64	@ 0x40
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	200082f8 	.word	0x200082f8
 80040f8:	20008414 	.word	0x20008414
 80040fc:	200001d0 	.word	0x200001d0

08004100 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004108:	4b07      	ldr	r3, [pc, #28]	@ (8004128 <BSP_LCD_SetTextColor+0x28>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	4907      	ldr	r1, [pc, #28]	@ (800412c <BSP_LCD_SetTextColor+0x2c>)
 800410e:	4613      	mov	r3, r2
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	4413      	add	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	440b      	add	r3, r1
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	601a      	str	r2, [r3, #0]
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	20008410 	.word	0x20008410
 800412c:	20008414 	.word	0x20008414

08004130 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8004138:	4b08      	ldr	r3, [pc, #32]	@ (800415c <BSP_LCD_SetBackColor+0x2c>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	4908      	ldr	r1, [pc, #32]	@ (8004160 <BSP_LCD_SetBackColor+0x30>)
 800413e:	4613      	mov	r3, r2
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	4413      	add	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	440b      	add	r3, r1
 8004148:	3304      	adds	r3, #4
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	601a      	str	r2, [r3, #0]
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	20008410 	.word	0x20008410
 8004160:	20008414 	.word	0x20008414

08004164 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 800416c:	4b08      	ldr	r3, [pc, #32]	@ (8004190 <BSP_LCD_SetFont+0x2c>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4908      	ldr	r1, [pc, #32]	@ (8004194 <BSP_LCD_SetFont+0x30>)
 8004172:	4613      	mov	r3, r2
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	4413      	add	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	3308      	adds	r3, #8
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	601a      	str	r2, [r3, #0]
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	20008410 	.word	0x20008410
 8004194:	20008414 	.word	0x20008414

08004198 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8004198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800419a:	b085      	sub	sp, #20
 800419c:	af02      	add	r7, sp, #8
 800419e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 80041a0:	4b0f      	ldr	r3, [pc, #60]	@ (80041e0 <BSP_LCD_Clear+0x48>)
 80041a2:	681c      	ldr	r4, [r3, #0]
 80041a4:	4b0e      	ldr	r3, [pc, #56]	@ (80041e0 <BSP_LCD_Clear+0x48>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a0e      	ldr	r2, [pc, #56]	@ (80041e4 <BSP_LCD_Clear+0x4c>)
 80041aa:	2134      	movs	r1, #52	@ 0x34
 80041ac:	fb01 f303 	mul.w	r3, r1, r3
 80041b0:	4413      	add	r3, r2
 80041b2:	335c      	adds	r3, #92	@ 0x5c
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	461e      	mov	r6, r3
 80041b8:	f7ff ff26 	bl	8004008 <BSP_LCD_GetXSize>
 80041bc:	4605      	mov	r5, r0
 80041be:	f7ff ff2f 	bl	8004020 <BSP_LCD_GetYSize>
 80041c2:	4602      	mov	r2, r0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	9301      	str	r3, [sp, #4]
 80041c8:	2300      	movs	r3, #0
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	4613      	mov	r3, r2
 80041ce:	462a      	mov	r2, r5
 80041d0:	4631      	mov	r1, r6
 80041d2:	4620      	mov	r0, r4
 80041d4:	f000 fb1a 	bl	800480c <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041e0:	20008410 	.word	0x20008410
 80041e4:	200082f8 	.word	0x200082f8

080041e8 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80041e8:	b590      	push	{r4, r7, lr}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	80fb      	strh	r3, [r7, #6]
 80041f2:	460b      	mov	r3, r1
 80041f4:	80bb      	strh	r3, [r7, #4]
 80041f6:	4613      	mov	r3, r2
 80041f8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 80041fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004268 <BSP_LCD_DisplayChar+0x80>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	491b      	ldr	r1, [pc, #108]	@ (800426c <BSP_LCD_DisplayChar+0x84>)
 8004200:	4613      	mov	r3, r2
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	3308      	adds	r3, #8
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6819      	ldr	r1, [r3, #0]
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004216:	4b14      	ldr	r3, [pc, #80]	@ (8004268 <BSP_LCD_DisplayChar+0x80>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4c14      	ldr	r4, [pc, #80]	@ (800426c <BSP_LCD_DisplayChar+0x84>)
 800421c:	4613      	mov	r3, r2
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4423      	add	r3, r4
 8004226:	3308      	adds	r3, #8
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 800422c:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004230:	4b0d      	ldr	r3, [pc, #52]	@ (8004268 <BSP_LCD_DisplayChar+0x80>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	4c0d      	ldr	r4, [pc, #52]	@ (800426c <BSP_LCD_DisplayChar+0x84>)
 8004236:	4613      	mov	r3, r2
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	4413      	add	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4423      	add	r3, r4
 8004240:	3308      	adds	r3, #8
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	889b      	ldrh	r3, [r3, #4]
 8004246:	3307      	adds	r3, #7
 8004248:	2b00      	cmp	r3, #0
 800424a:	da00      	bge.n	800424e <BSP_LCD_DisplayChar+0x66>
 800424c:	3307      	adds	r3, #7
 800424e:	10db      	asrs	r3, r3, #3
 8004250:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8004254:	18ca      	adds	r2, r1, r3
 8004256:	88b9      	ldrh	r1, [r7, #4]
 8004258:	88fb      	ldrh	r3, [r7, #6]
 800425a:	4618      	mov	r0, r3
 800425c:	f000 fa1c 	bl	8004698 <DrawChar>
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	bd90      	pop	{r4, r7, pc}
 8004268:	20008410 	.word	0x20008410
 800426c:	20008414 	.word	0x20008414

08004270 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8004270:	b5b0      	push	{r4, r5, r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af00      	add	r7, sp, #0
 8004276:	60ba      	str	r2, [r7, #8]
 8004278:	461a      	mov	r2, r3
 800427a:	4603      	mov	r3, r0
 800427c:	81fb      	strh	r3, [r7, #14]
 800427e:	460b      	mov	r3, r1
 8004280:	81bb      	strh	r3, [r7, #12]
 8004282:	4613      	mov	r3, r2
 8004284:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8004286:	2301      	movs	r3, #1
 8004288:	83fb      	strh	r3, [r7, #30]
 800428a:	2300      	movs	r3, #0
 800428c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	2300      	movs	r3, #0
 8004294:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 800429a:	e002      	b.n	80042a2 <BSP_LCD_DisplayStringAt+0x32>
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	3301      	adds	r3, #1
 80042a0:	61bb      	str	r3, [r7, #24]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	617a      	str	r2, [r7, #20]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f6      	bne.n	800429c <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 80042ae:	f7ff feab 	bl	8004008 <BSP_LCD_GetXSize>
 80042b2:	4601      	mov	r1, r0
 80042b4:	4b4b      	ldr	r3, [pc, #300]	@ (80043e4 <BSP_LCD_DisplayStringAt+0x174>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	484b      	ldr	r0, [pc, #300]	@ (80043e8 <BSP_LCD_DisplayStringAt+0x178>)
 80042ba:	4613      	mov	r3, r2
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4403      	add	r3, r0
 80042c4:	3308      	adds	r3, #8
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	889b      	ldrh	r3, [r3, #4]
 80042ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80042ce:	613b      	str	r3, [r7, #16]

  switch (mode)
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d01c      	beq.n	8004310 <BSP_LCD_DisplayStringAt+0xa0>
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	dc33      	bgt.n	8004342 <BSP_LCD_DisplayStringAt+0xd2>
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d002      	beq.n	80042e4 <BSP_LCD_DisplayStringAt+0x74>
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d019      	beq.n	8004316 <BSP_LCD_DisplayStringAt+0xa6>
 80042e2:	e02e      	b.n	8004342 <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	1ad1      	subs	r1, r2, r3
 80042ea:	4b3e      	ldr	r3, [pc, #248]	@ (80043e4 <BSP_LCD_DisplayStringAt+0x174>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	483e      	ldr	r0, [pc, #248]	@ (80043e8 <BSP_LCD_DisplayStringAt+0x178>)
 80042f0:	4613      	mov	r3, r2
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	4413      	add	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4403      	add	r3, r0
 80042fa:	3308      	adds	r3, #8
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	889b      	ldrh	r3, [r3, #4]
 8004300:	fb01 f303 	mul.w	r3, r1, r3
 8004304:	085b      	lsrs	r3, r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	89fb      	ldrh	r3, [r7, #14]
 800430a:	4413      	add	r3, r2
 800430c:	83fb      	strh	r3, [r7, #30]
      break;
 800430e:	e01b      	b.n	8004348 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 8004310:	89fb      	ldrh	r3, [r7, #14]
 8004312:	83fb      	strh	r3, [r7, #30]
      break;
 8004314:	e018      	b.n	8004348 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	b299      	uxth	r1, r3
 800431e:	4b31      	ldr	r3, [pc, #196]	@ (80043e4 <BSP_LCD_DisplayStringAt+0x174>)
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	4831      	ldr	r0, [pc, #196]	@ (80043e8 <BSP_LCD_DisplayStringAt+0x178>)
 8004324:	4613      	mov	r3, r2
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4403      	add	r3, r0
 800432e:	3308      	adds	r3, #8
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	889b      	ldrh	r3, [r3, #4]
 8004334:	fb11 f303 	smulbb	r3, r1, r3
 8004338:	b29a      	uxth	r2, r3
 800433a:	89fb      	ldrh	r3, [r7, #14]
 800433c:	4413      	add	r3, r2
 800433e:	83fb      	strh	r3, [r7, #30]
      break;
 8004340:	e002      	b.n	8004348 <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 8004342:	89fb      	ldrh	r3, [r7, #14]
 8004344:	83fb      	strh	r3, [r7, #30]
      break;
 8004346:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8004348:	e01a      	b.n	8004380 <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	781a      	ldrb	r2, [r3, #0]
 800434e:	89b9      	ldrh	r1, [r7, #12]
 8004350:	8bfb      	ldrh	r3, [r7, #30]
 8004352:	4618      	mov	r0, r3
 8004354:	f7ff ff48 	bl	80041e8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8004358:	4b22      	ldr	r3, [pc, #136]	@ (80043e4 <BSP_LCD_DisplayStringAt+0x174>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	4922      	ldr	r1, [pc, #136]	@ (80043e8 <BSP_LCD_DisplayStringAt+0x178>)
 800435e:	4613      	mov	r3, r2
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	4413      	add	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	3308      	adds	r3, #8
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	889a      	ldrh	r2, [r3, #4]
 800436e:	8bfb      	ldrh	r3, [r7, #30]
 8004370:	4413      	add	r3, r2
 8004372:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	3301      	adds	r3, #1
 8004378:	60bb      	str	r3, [r7, #8]
    i++;
 800437a:	8bbb      	ldrh	r3, [r7, #28]
 800437c:	3301      	adds	r3, #1
 800437e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	bf14      	ite	ne
 8004388:	2301      	movne	r3, #1
 800438a:	2300      	moveq	r3, #0
 800438c:	b2dc      	uxtb	r4, r3
 800438e:	f7ff fe3b 	bl	8004008 <BSP_LCD_GetXSize>
 8004392:	8bb9      	ldrh	r1, [r7, #28]
 8004394:	4b13      	ldr	r3, [pc, #76]	@ (80043e4 <BSP_LCD_DisplayStringAt+0x174>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	4d13      	ldr	r5, [pc, #76]	@ (80043e8 <BSP_LCD_DisplayStringAt+0x178>)
 800439a:	4613      	mov	r3, r2
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	4413      	add	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	442b      	add	r3, r5
 80043a4:	3308      	adds	r3, #8
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	889b      	ldrh	r3, [r3, #4]
 80043aa:	fb01 f303 	mul.w	r3, r1, r3
 80043ae:	1ac3      	subs	r3, r0, r3
 80043b0:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 80043b2:	4b0c      	ldr	r3, [pc, #48]	@ (80043e4 <BSP_LCD_DisplayStringAt+0x174>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	480c      	ldr	r0, [pc, #48]	@ (80043e8 <BSP_LCD_DisplayStringAt+0x178>)
 80043b8:	4613      	mov	r3, r2
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4403      	add	r3, r0
 80043c2:	3308      	adds	r3, #8
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80043c8:	4299      	cmp	r1, r3
 80043ca:	bf2c      	ite	cs
 80043cc:	2301      	movcs	r3, #1
 80043ce:	2300      	movcc	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	4023      	ands	r3, r4
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1b7      	bne.n	800434a <BSP_LCD_DisplayStringAt+0xda>
  }
}
 80043da:	bf00      	nop
 80043dc:	bf00      	nop
 80043de:	3720      	adds	r7, #32
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bdb0      	pop	{r4, r5, r7, pc}
 80043e4:	20008410 	.word	0x20008410
 80043e8:	20008414 	.word	0x20008414

080043ec <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80043ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043f0:	b086      	sub	sp, #24
 80043f2:	af02      	add	r7, sp, #8
 80043f4:	4604      	mov	r4, r0
 80043f6:	4608      	mov	r0, r1
 80043f8:	4611      	mov	r1, r2
 80043fa:	461a      	mov	r2, r3
 80043fc:	4623      	mov	r3, r4
 80043fe:	80fb      	strh	r3, [r7, #6]
 8004400:	4603      	mov	r3, r0
 8004402:	80bb      	strh	r3, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	807b      	strh	r3, [r7, #2]
 8004408:	4613      	mov	r3, r2
 800440a:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 800440c:	2300      	movs	r3, #0
 800440e:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004410:	4b20      	ldr	r3, [pc, #128]	@ (8004494 <BSP_LCD_FillRect+0xa8>)
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	4920      	ldr	r1, [pc, #128]	@ (8004498 <BSP_LCD_FillRect+0xac>)
 8004416:	4613      	mov	r3, r2
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff fe6c 	bl	8004100 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8004428:	4b1a      	ldr	r3, [pc, #104]	@ (8004494 <BSP_LCD_FillRect+0xa8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a1b      	ldr	r2, [pc, #108]	@ (800449c <BSP_LCD_FillRect+0xb0>)
 800442e:	2134      	movs	r1, #52	@ 0x34
 8004430:	fb01 f303 	mul.w	r3, r1, r3
 8004434:	4413      	add	r3, r2
 8004436:	335c      	adds	r3, #92	@ 0x5c
 8004438:	681c      	ldr	r4, [r3, #0]
 800443a:	f7ff fde5 	bl	8004008 <BSP_LCD_GetXSize>
 800443e:	4602      	mov	r2, r0
 8004440:	88bb      	ldrh	r3, [r7, #4]
 8004442:	fb03 f202 	mul.w	r2, r3, r2
 8004446:	88fb      	ldrh	r3, [r7, #6]
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4423      	add	r3, r4
 800444e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width),
 8004450:	4b10      	ldr	r3, [pc, #64]	@ (8004494 <BSP_LCD_FillRect+0xa8>)
 8004452:	681c      	ldr	r4, [r3, #0]
 8004454:	68fd      	ldr	r5, [r7, #12]
 8004456:	887e      	ldrh	r6, [r7, #2]
 8004458:	f8b7 8000 	ldrh.w	r8, [r7]
 800445c:	f7ff fdd4 	bl	8004008 <BSP_LCD_GetXSize>
 8004460:	4602      	mov	r2, r0
 8004462:	887b      	ldrh	r3, [r7, #2]
 8004464:	1ad1      	subs	r1, r2, r3
 8004466:	4b0b      	ldr	r3, [pc, #44]	@ (8004494 <BSP_LCD_FillRect+0xa8>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	480b      	ldr	r0, [pc, #44]	@ (8004498 <BSP_LCD_FillRect+0xac>)
 800446c:	4613      	mov	r3, r2
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4403      	add	r3, r0
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	9301      	str	r3, [sp, #4]
 800447a:	9100      	str	r1, [sp, #0]
 800447c:	4643      	mov	r3, r8
 800447e:	4632      	mov	r2, r6
 8004480:	4629      	mov	r1, r5
 8004482:	4620      	mov	r0, r4
 8004484:	f000 f9c2 	bl	800480c <FillBuffer>
             DrawProp[ActiveLayer].TextColor);
}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004492:	bf00      	nop
 8004494:	20008410 	.word	0x20008410
 8004498:	20008414 	.word	0x20008414
 800449c:	200082f8 	.word	0x200082f8

080044a0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08e      	sub	sp, #56	@ 0x38
 80044a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80044a6:	2300      	movs	r3, #0
 80044a8:	623b      	str	r3, [r7, #32]
 80044aa:	4b61      	ldr	r3, [pc, #388]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 80044ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ae:	4a60      	ldr	r2, [pc, #384]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 80044b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80044b6:	4b5e      	ldr	r3, [pc, #376]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 80044b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80044be:	623b      	str	r3, [r7, #32]
 80044c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	61fb      	str	r3, [r7, #28]
 80044c6:	4b5a      	ldr	r3, [pc, #360]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 80044c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ca:	4a59      	ldr	r2, [pc, #356]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 80044cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80044d2:	4b57      	ldr	r3, [pc, #348]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 80044d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044da:	61fb      	str	r3, [r7, #28]
 80044dc:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	61bb      	str	r3, [r7, #24]
 80044e2:	4b53      	ldr	r3, [pc, #332]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e6:	4a52      	ldr	r2, [pc, #328]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ee:	4b50      	ldr	r3, [pc, #320]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	61bb      	str	r3, [r7, #24]
 80044f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	4b4c      	ldr	r3, [pc, #304]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004502:	4a4b      	ldr	r2, [pc, #300]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 8004504:	f043 0302 	orr.w	r3, r3, #2
 8004508:	6313      	str	r3, [r2, #48]	@ 0x30
 800450a:	4b49      	ldr	r3, [pc, #292]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004516:	2300      	movs	r3, #0
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	4b45      	ldr	r3, [pc, #276]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451e:	4a44      	ldr	r2, [pc, #272]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 8004520:	f043 0304 	orr.w	r3, r3, #4
 8004524:	6313      	str	r3, [r2, #48]	@ 0x30
 8004526:	4b42      	ldr	r3, [pc, #264]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	4b3e      	ldr	r3, [pc, #248]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453a:	4a3d      	ldr	r2, [pc, #244]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 800453c:	f043 0308 	orr.w	r3, r3, #8
 8004540:	6313      	str	r3, [r2, #48]	@ 0x30
 8004542:	4b3b      	ldr	r3, [pc, #236]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	60bb      	str	r3, [r7, #8]
 8004552:	4b37      	ldr	r3, [pc, #220]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004556:	4a36      	ldr	r2, [pc, #216]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 8004558:	f043 0320 	orr.w	r3, r3, #32
 800455c:	6313      	str	r3, [r2, #48]	@ 0x30
 800455e:	4b34      	ldr	r3, [pc, #208]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	60bb      	str	r3, [r7, #8]
 8004568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800456a:	2300      	movs	r3, #0
 800456c:	607b      	str	r3, [r7, #4]
 800456e:	4b30      	ldr	r3, [pc, #192]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004572:	4a2f      	ldr	r2, [pc, #188]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 8004574:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004578:	6313      	str	r3, [r2, #48]	@ 0x30
 800457a:	4b2d      	ldr	r3, [pc, #180]	@ (8004630 <BSP_LCD_MspInit+0x190>)
 800457c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004582:	607b      	str	r3, [r7, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8004586:	f641 0358 	movw	r3, #6232	@ 0x1858
 800458a:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800458c:	2302      	movs	r3, #2
 800458e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004590:	2300      	movs	r3, #0
 8004592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004594:	2302      	movs	r3, #2
 8004596:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 8004598:	230e      	movs	r3, #14
 800459a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800459c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045a0:	4619      	mov	r1, r3
 80045a2:	4824      	ldr	r0, [pc, #144]	@ (8004634 <BSP_LCD_MspInit+0x194>)
 80045a4:	f001 fcf2 	bl	8005f8c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80045a8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80045ac:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80045ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045b2:	4619      	mov	r1, r3
 80045b4:	4820      	ldr	r0, [pc, #128]	@ (8004638 <BSP_LCD_MspInit+0x198>)
 80045b6:	f001 fce9 	bl	8005f8c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80045ba:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80045be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80045c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045c4:	4619      	mov	r1, r3
 80045c6:	481d      	ldr	r0, [pc, #116]	@ (800463c <BSP_LCD_MspInit+0x19c>)
 80045c8:	f001 fce0 	bl	8005f8c <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80045cc:	2348      	movs	r3, #72	@ 0x48
 80045ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80045d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045d4:	4619      	mov	r1, r3
 80045d6:	481a      	ldr	r0, [pc, #104]	@ (8004640 <BSP_LCD_MspInit+0x1a0>)
 80045d8:	f001 fcd8 	bl	8005f8c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80045dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80045e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045e6:	4619      	mov	r1, r3
 80045e8:	4816      	ldr	r0, [pc, #88]	@ (8004644 <BSP_LCD_MspInit+0x1a4>)
 80045ea:	f001 fccf 	bl	8005f8c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80045ee:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80045f2:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80045f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045f8:	4619      	mov	r1, r3
 80045fa:	4813      	ldr	r0, [pc, #76]	@ (8004648 <BSP_LCD_MspInit+0x1a8>)
 80045fc:	f001 fcc6 	bl	8005f8c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004600:	2303      	movs	r3, #3
 8004602:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 8004604:	2309      	movs	r3, #9
 8004606:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800460c:	4619      	mov	r1, r3
 800460e:	480a      	ldr	r0, [pc, #40]	@ (8004638 <BSP_LCD_MspInit+0x198>)
 8004610:	f001 fcbc 	bl	8005f8c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8004614:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004618:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800461a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800461e:	4619      	mov	r1, r3
 8004620:	4809      	ldr	r0, [pc, #36]	@ (8004648 <BSP_LCD_MspInit+0x1a8>)
 8004622:	f001 fcb3 	bl	8005f8c <HAL_GPIO_Init>
}
 8004626:	bf00      	nop
 8004628:	3738      	adds	r7, #56	@ 0x38
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	40023800 	.word	0x40023800
 8004634:	40020000 	.word	0x40020000
 8004638:	40020400 	.word	0x40020400
 800463c:	40020800 	.word	0x40020800
 8004640:	40020c00 	.word	0x40020c00
 8004644:	40021400 	.word	0x40021400
 8004648:	40021800 	.word	0x40021800

0800464c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800464c:	b5b0      	push	{r4, r5, r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	4603      	mov	r3, r0
 8004654:	603a      	str	r2, [r7, #0]
 8004656:	80fb      	strh	r3, [r7, #6]
 8004658:	460b      	mov	r3, r1
 800465a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800465c:	4b0c      	ldr	r3, [pc, #48]	@ (8004690 <BSP_LCD_DrawPixel+0x44>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a0c      	ldr	r2, [pc, #48]	@ (8004694 <BSP_LCD_DrawPixel+0x48>)
 8004662:	2134      	movs	r1, #52	@ 0x34
 8004664:	fb01 f303 	mul.w	r3, r1, r3
 8004668:	4413      	add	r3, r2
 800466a:	335c      	adds	r3, #92	@ 0x5c
 800466c:	681c      	ldr	r4, [r3, #0]
 800466e:	88bd      	ldrh	r5, [r7, #4]
 8004670:	f7ff fcca 	bl	8004008 <BSP_LCD_GetXSize>
 8004674:	4603      	mov	r3, r0
 8004676:	fb03 f205 	mul.w	r2, r3, r5
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4423      	add	r3, r4
 8004682:	461a      	mov	r2, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	6013      	str	r3, [r2, #0]
}
 8004688:	bf00      	nop
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bdb0      	pop	{r4, r5, r7, pc}
 8004690:	20008410 	.word	0x20008410
 8004694:	200082f8 	.word	0x200082f8

08004698 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b088      	sub	sp, #32
 800469c:	af00      	add	r7, sp, #0
 800469e:	4603      	mov	r3, r0
 80046a0:	603a      	str	r2, [r7, #0]
 80046a2:	80fb      	strh	r3, [r7, #6]
 80046a4:	460b      	mov	r3, r1
 80046a6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61fb      	str	r3, [r7, #28]
 80046ac:	2300      	movs	r3, #0
 80046ae:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80046b4:	4b53      	ldr	r3, [pc, #332]	@ (8004804 <DrawChar+0x16c>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	4953      	ldr	r1, [pc, #332]	@ (8004808 <DrawChar+0x170>)
 80046ba:	4613      	mov	r3, r2
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	3308      	adds	r3, #8
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	88db      	ldrh	r3, [r3, #6]
 80046ca:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80046cc:	4b4d      	ldr	r3, [pc, #308]	@ (8004804 <DrawChar+0x16c>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	494d      	ldr	r1, [pc, #308]	@ (8004808 <DrawChar+0x170>)
 80046d2:	4613      	mov	r3, r2
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	3308      	adds	r3, #8
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	889b      	ldrh	r3, [r3, #4]
 80046e2:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 80046e4:	8a3b      	ldrh	r3, [r7, #16]
 80046e6:	3307      	adds	r3, #7
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	da00      	bge.n	80046ee <DrawChar+0x56>
 80046ec:	3307      	adds	r3, #7
 80046ee:	10db      	asrs	r3, r3, #3
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	8a3b      	ldrh	r3, [r7, #16]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
 8004702:	e076      	b.n	80047f2 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 8004704:	8a3b      	ldrh	r3, [r7, #16]
 8004706:	3307      	adds	r3, #7
 8004708:	2b00      	cmp	r3, #0
 800470a:	da00      	bge.n	800470e <DrawChar+0x76>
 800470c:	3307      	adds	r3, #7
 800470e:	10db      	asrs	r3, r3, #3
 8004710:	461a      	mov	r2, r3
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	fb02 f303 	mul.w	r3, r2, r3
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	4413      	add	r3, r2
 800471c:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 800471e:	8a3b      	ldrh	r3, [r7, #16]
 8004720:	3307      	adds	r3, #7
 8004722:	2b00      	cmp	r3, #0
 8004724:	da00      	bge.n	8004728 <DrawChar+0x90>
 8004726:	3307      	adds	r3, #7
 8004728:	10db      	asrs	r3, r3, #3
 800472a:	2b01      	cmp	r3, #1
 800472c:	d002      	beq.n	8004734 <DrawChar+0x9c>
 800472e:	2b02      	cmp	r3, #2
 8004730:	d004      	beq.n	800473c <DrawChar+0xa4>
 8004732:	e00c      	b.n	800474e <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	617b      	str	r3, [r7, #20]
        break;
 800473a:	e016      	b.n	800476a <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	3201      	adds	r2, #1
 8004746:	7812      	ldrb	r2, [r2, #0]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]
        break;
 800474c:	e00d      	b.n	800476a <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	041a      	lsls	r2, r3, #16
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	3301      	adds	r3, #1
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	021b      	lsls	r3, r3, #8
 800475c:	4313      	orrs	r3, r2
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	3202      	adds	r2, #2
 8004762:	7812      	ldrb	r2, [r2, #0]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]
        break;
 8004768:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800476a:	2300      	movs	r3, #0
 800476c:	61bb      	str	r3, [r7, #24]
 800476e:	e036      	b.n	80047de <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 8004770:	8a3a      	ldrh	r2, [r7, #16]
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	1ad2      	subs	r2, r2, r3
 8004776:	7bfb      	ldrb	r3, [r7, #15]
 8004778:	4413      	add	r3, r2
 800477a:	3b01      	subs	r3, #1
 800477c:	2201      	movs	r2, #1
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	461a      	mov	r2, r3
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	4013      	ands	r3, r2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d012      	beq.n	80047b2 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	b29a      	uxth	r2, r3
 8004790:	88fb      	ldrh	r3, [r7, #6]
 8004792:	4413      	add	r3, r2
 8004794:	b298      	uxth	r0, r3
 8004796:	4b1b      	ldr	r3, [pc, #108]	@ (8004804 <DrawChar+0x16c>)
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	491b      	ldr	r1, [pc, #108]	@ (8004808 <DrawChar+0x170>)
 800479c:	4613      	mov	r3, r2
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	88bb      	ldrh	r3, [r7, #4]
 80047aa:	4619      	mov	r1, r3
 80047ac:	f7ff ff4e 	bl	800464c <BSP_LCD_DrawPixel>
 80047b0:	e012      	b.n	80047d8 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	4413      	add	r3, r2
 80047ba:	b298      	uxth	r0, r3
 80047bc:	4b11      	ldr	r3, [pc, #68]	@ (8004804 <DrawChar+0x16c>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	4911      	ldr	r1, [pc, #68]	@ (8004808 <DrawChar+0x170>)
 80047c2:	4613      	mov	r3, r2
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	3304      	adds	r3, #4
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	88bb      	ldrh	r3, [r7, #4]
 80047d2:	4619      	mov	r1, r3
 80047d4:	f7ff ff3a 	bl	800464c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	3301      	adds	r3, #1
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	8a3b      	ldrh	r3, [r7, #16]
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d3c4      	bcc.n	8004770 <DrawChar+0xd8>
      }
    }
    Ypos++;
 80047e6:	88bb      	ldrh	r3, [r7, #4]
 80047e8:	3301      	adds	r3, #1
 80047ea:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	3301      	adds	r3, #1
 80047f0:	61fb      	str	r3, [r7, #28]
 80047f2:	8a7b      	ldrh	r3, [r7, #18]
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d384      	bcc.n	8004704 <DrawChar+0x6c>
  }
}
 80047fa:	bf00      	nop
 80047fc:	bf00      	nop
 80047fe:	3720      	adds	r7, #32
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	20008410 	.word	0x20008410
 8004808:	20008414 	.word	0x20008414

0800480c <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af02      	add	r7, sp, #8
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
 8004818:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800481a:	4b16      	ldr	r3, [pc, #88]	@ (8004874 <FillBuffer+0x68>)
 800481c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004820:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004822:	4b14      	ldr	r3, [pc, #80]	@ (8004874 <FillBuffer+0x68>)
 8004824:	2200      	movs	r2, #0
 8004826:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 8004828:	4a12      	ldr	r2, [pc, #72]	@ (8004874 <FillBuffer+0x68>)
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 800482e:	4b11      	ldr	r3, [pc, #68]	@ (8004874 <FillBuffer+0x68>)
 8004830:	4a11      	ldr	r2, [pc, #68]	@ (8004878 <FillBuffer+0x6c>)
 8004832:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 8004834:	480f      	ldr	r0, [pc, #60]	@ (8004874 <FillBuffer+0x68>)
 8004836:	f000 fdf9 	bl	800542c <HAL_DMA2D_Init>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d115      	bne.n	800486c <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 8004840:	68f9      	ldr	r1, [r7, #12]
 8004842:	480c      	ldr	r0, [pc, #48]	@ (8004874 <FillBuffer+0x68>)
 8004844:	f001 f860 	bl	8005908 <HAL_DMA2D_ConfigLayer>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10e      	bne.n	800486c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69f9      	ldr	r1, [r7, #28]
 8004858:	4806      	ldr	r0, [pc, #24]	@ (8004874 <FillBuffer+0x68>)
 800485a:	f000 fe30 	bl	80054be <HAL_DMA2D_Start>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d103      	bne.n	800486c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8004864:	210a      	movs	r1, #10
 8004866:	4803      	ldr	r0, [pc, #12]	@ (8004874 <FillBuffer+0x68>)
 8004868:	f000 fe54 	bl	8005514 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 800486c:	bf00      	nop
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	200083a0 	.word	0x200083a0
 8004878:	4002b000 	.word	0x4002b000

0800487c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004880:	4b29      	ldr	r3, [pc, #164]	@ (8004928 <BSP_SDRAM_Init+0xac>)
 8004882:	4a2a      	ldr	r2, [pc, #168]	@ (800492c <BSP_SDRAM_Init+0xb0>)
 8004884:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8004886:	4b2a      	ldr	r3, [pc, #168]	@ (8004930 <BSP_SDRAM_Init+0xb4>)
 8004888:	2202      	movs	r2, #2
 800488a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800488c:	4b28      	ldr	r3, [pc, #160]	@ (8004930 <BSP_SDRAM_Init+0xb4>)
 800488e:	2207      	movs	r2, #7
 8004890:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8004892:	4b27      	ldr	r3, [pc, #156]	@ (8004930 <BSP_SDRAM_Init+0xb4>)
 8004894:	2204      	movs	r2, #4
 8004896:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8004898:	4b25      	ldr	r3, [pc, #148]	@ (8004930 <BSP_SDRAM_Init+0xb4>)
 800489a:	2207      	movs	r2, #7
 800489c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800489e:	4b24      	ldr	r3, [pc, #144]	@ (8004930 <BSP_SDRAM_Init+0xb4>)
 80048a0:	2202      	movs	r2, #2
 80048a2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80048a4:	4b22      	ldr	r3, [pc, #136]	@ (8004930 <BSP_SDRAM_Init+0xb4>)
 80048a6:	2202      	movs	r2, #2
 80048a8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80048aa:	4b21      	ldr	r3, [pc, #132]	@ (8004930 <BSP_SDRAM_Init+0xb4>)
 80048ac:	2202      	movs	r2, #2
 80048ae:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80048b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004928 <BSP_SDRAM_Init+0xac>)
 80048b2:	2201      	movs	r2, #1
 80048b4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80048b6:	4b1c      	ldr	r3, [pc, #112]	@ (8004928 <BSP_SDRAM_Init+0xac>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80048bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004928 <BSP_SDRAM_Init+0xac>)
 80048be:	2204      	movs	r2, #4
 80048c0:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80048c2:	4b19      	ldr	r3, [pc, #100]	@ (8004928 <BSP_SDRAM_Init+0xac>)
 80048c4:	2210      	movs	r2, #16
 80048c6:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80048c8:	4b17      	ldr	r3, [pc, #92]	@ (8004928 <BSP_SDRAM_Init+0xac>)
 80048ca:	2240      	movs	r2, #64	@ 0x40
 80048cc:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80048ce:	4b16      	ldr	r3, [pc, #88]	@ (8004928 <BSP_SDRAM_Init+0xac>)
 80048d0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80048d4:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80048d6:	4b14      	ldr	r3, [pc, #80]	@ (8004928 <BSP_SDRAM_Init+0xac>)
 80048d8:	2200      	movs	r2, #0
 80048da:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80048dc:	4b12      	ldr	r3, [pc, #72]	@ (8004928 <BSP_SDRAM_Init+0xac>)
 80048de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80048e2:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80048e4:	4b10      	ldr	r3, [pc, #64]	@ (8004928 <BSP_SDRAM_Init+0xac>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80048ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004928 <BSP_SDRAM_Init+0xac>)
 80048ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80048f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80048f2:	2100      	movs	r1, #0
 80048f4:	480c      	ldr	r0, [pc, #48]	@ (8004928 <BSP_SDRAM_Init+0xac>)
 80048f6:	f000 f87f 	bl	80049f8 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80048fa:	490d      	ldr	r1, [pc, #52]	@ (8004930 <BSP_SDRAM_Init+0xb4>)
 80048fc:	480a      	ldr	r0, [pc, #40]	@ (8004928 <BSP_SDRAM_Init+0xac>)
 80048fe:	f006 fa45 	bl	800ad8c <HAL_SDRAM_Init>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004908:	4b0a      	ldr	r3, [pc, #40]	@ (8004934 <BSP_SDRAM_Init+0xb8>)
 800490a:	2201      	movs	r2, #1
 800490c:	701a      	strb	r2, [r3, #0]
 800490e:	e002      	b.n	8004916 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004910:	4b08      	ldr	r3, [pc, #32]	@ (8004934 <BSP_SDRAM_Init+0xb8>)
 8004912:	2200      	movs	r2, #0
 8004914:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004916:	f240 506a 	movw	r0, #1386	@ 0x56a
 800491a:	f000 f80d 	bl	8004938 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 800491e:	4b05      	ldr	r3, [pc, #20]	@ (8004934 <BSP_SDRAM_Init+0xb8>)
 8004920:	781b      	ldrb	r3, [r3, #0]
}
 8004922:	4618      	mov	r0, r3
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20008430 	.word	0x20008430
 800492c:	a0000140 	.word	0xa0000140
 8004930:	20008464 	.word	0x20008464
 8004934:	200001e8 	.word	0x200001e8

08004938 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004944:	4b2a      	ldr	r3, [pc, #168]	@ (80049f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004946:	2201      	movs	r2, #1
 8004948:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800494a:	4b29      	ldr	r3, [pc, #164]	@ (80049f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800494c:	2208      	movs	r2, #8
 800494e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004950:	4b27      	ldr	r3, [pc, #156]	@ (80049f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004952:	2201      	movs	r2, #1
 8004954:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004956:	4b26      	ldr	r3, [pc, #152]	@ (80049f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004958:	2200      	movs	r2, #0
 800495a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800495c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004960:	4923      	ldr	r1, [pc, #140]	@ (80049f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004962:	4824      	ldr	r0, [pc, #144]	@ (80049f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004964:	f006 fa46 	bl	800adf4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004968:	2001      	movs	r0, #1
 800496a:	f000 fa7f 	bl	8004e6c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800496e:	4b20      	ldr	r3, [pc, #128]	@ (80049f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004970:	2202      	movs	r2, #2
 8004972:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004974:	4b1e      	ldr	r3, [pc, #120]	@ (80049f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004976:	2208      	movs	r2, #8
 8004978:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800497a:	4b1d      	ldr	r3, [pc, #116]	@ (80049f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800497c:	2201      	movs	r2, #1
 800497e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004980:	4b1b      	ldr	r3, [pc, #108]	@ (80049f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004982:	2200      	movs	r2, #0
 8004984:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004986:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800498a:	4919      	ldr	r1, [pc, #100]	@ (80049f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800498c:	4819      	ldr	r0, [pc, #100]	@ (80049f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800498e:	f006 fa31 	bl	800adf4 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004992:	4b17      	ldr	r3, [pc, #92]	@ (80049f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004994:	2203      	movs	r2, #3
 8004996:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004998:	4b15      	ldr	r3, [pc, #84]	@ (80049f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800499a:	2208      	movs	r2, #8
 800499c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800499e:	4b14      	ldr	r3, [pc, #80]	@ (80049f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80049a0:	2204      	movs	r2, #4
 80049a2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80049a4:	4b12      	ldr	r3, [pc, #72]	@ (80049f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80049aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049ae:	4910      	ldr	r1, [pc, #64]	@ (80049f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80049b0:	4810      	ldr	r0, [pc, #64]	@ (80049f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80049b2:	f006 fa1f 	bl	800adf4 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80049b6:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80049ba:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80049bc:	4b0c      	ldr	r3, [pc, #48]	@ (80049f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80049be:	2204      	movs	r2, #4
 80049c0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80049c2:	4b0b      	ldr	r3, [pc, #44]	@ (80049f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80049c4:	2208      	movs	r2, #8
 80049c6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80049c8:	4b09      	ldr	r3, [pc, #36]	@ (80049f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80049ca:	2201      	movs	r2, #1
 80049cc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4a07      	ldr	r2, [pc, #28]	@ (80049f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80049d2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80049d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049d8:	4905      	ldr	r1, [pc, #20]	@ (80049f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80049da:	4806      	ldr	r0, [pc, #24]	@ (80049f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80049dc:	f006 fa0a 	bl	800adf4 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	4804      	ldr	r0, [pc, #16]	@ (80049f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80049e4:	f006 fa3b 	bl	800ae5e <HAL_SDRAM_ProgramRefreshRate>
}
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	20008480 	.word	0x20008480
 80049f4:	20008430 	.word	0x20008430

080049f8 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b090      	sub	sp, #64	@ 0x40
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 80ec 	beq.w	8004be2 <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a0e:	4b77      	ldr	r3, [pc, #476]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a12:	4a76      	ldr	r2, [pc, #472]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004a14:	f043 0301 	orr.w	r3, r3, #1
 8004a18:	6393      	str	r3, [r2, #56]	@ 0x38
 8004a1a:	4b74      	ldr	r3, [pc, #464]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8004a26:	2300      	movs	r3, #0
 8004a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a2a:	4b70      	ldr	r3, [pc, #448]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2e:	4a6f      	ldr	r2, [pc, #444]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004a30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a36:	4b6d      	ldr	r3, [pc, #436]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a42:	2300      	movs	r3, #0
 8004a44:	623b      	str	r3, [r7, #32]
 8004a46:	4b69      	ldr	r3, [pc, #420]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4a:	4a68      	ldr	r2, [pc, #416]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004a4c:	f043 0302 	orr.w	r3, r3, #2
 8004a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a52:	4b66      	ldr	r3, [pc, #408]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	623b      	str	r3, [r7, #32]
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61fb      	str	r3, [r7, #28]
 8004a62:	4b62      	ldr	r3, [pc, #392]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a66:	4a61      	ldr	r2, [pc, #388]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004a68:	f043 0304 	orr.w	r3, r3, #4
 8004a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a6e:	4b5f      	ldr	r3, [pc, #380]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	61fb      	str	r3, [r7, #28]
 8004a78:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61bb      	str	r3, [r7, #24]
 8004a7e:	4b5b      	ldr	r3, [pc, #364]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a82:	4a5a      	ldr	r2, [pc, #360]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004a84:	f043 0308 	orr.w	r3, r3, #8
 8004a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a8a:	4b58      	ldr	r3, [pc, #352]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	61bb      	str	r3, [r7, #24]
 8004a94:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	4b54      	ldr	r3, [pc, #336]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9e:	4a53      	ldr	r2, [pc, #332]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004aa0:	f043 0310 	orr.w	r3, r3, #16
 8004aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aa6:	4b51      	ldr	r3, [pc, #324]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aaa:	f003 0310 	and.w	r3, r3, #16
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	4b4d      	ldr	r3, [pc, #308]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aba:	4a4c      	ldr	r2, [pc, #304]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004abc:	f043 0320 	orr.w	r3, r3, #32
 8004ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	4b46      	ldr	r3, [pc, #280]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad6:	4a45      	ldr	r2, [pc, #276]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004ad8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ade:	4b43      	ldr	r3, [pc, #268]	@ (8004bec <BSP_SDRAM_MspInit+0x1f4>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8004aea:	2302      	movs	r3, #2
 8004aec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004aee:	2302      	movs	r3, #2
 8004af0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004af2:	2300      	movs	r3, #0
 8004af4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8004af6:	230c      	movs	r3, #12
 8004af8:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8004afa:	2360      	movs	r3, #96	@ 0x60
 8004afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004afe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004b02:	4619      	mov	r1, r3
 8004b04:	483a      	ldr	r0, [pc, #232]	@ (8004bf0 <BSP_SDRAM_MspInit+0x1f8>)
 8004b06:	f001 fa41 	bl	8005f8c <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004b12:	4619      	mov	r1, r3
 8004b14:	4837      	ldr	r0, [pc, #220]	@ (8004bf4 <BSP_SDRAM_MspInit+0x1fc>)
 8004b16:	f001 fa39 	bl	8005f8c <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8004b1a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004b20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004b24:	4619      	mov	r1, r3
 8004b26:	4834      	ldr	r0, [pc, #208]	@ (8004bf8 <BSP_SDRAM_MspInit+0x200>)
 8004b28:	f001 fa30 	bl	8005f8c <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8004b2c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8004b32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004b36:	4619      	mov	r1, r3
 8004b38:	4830      	ldr	r0, [pc, #192]	@ (8004bfc <BSP_SDRAM_MspInit+0x204>)
 8004b3a:	f001 fa27 	bl	8005f8c <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 8004b3e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004b44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004b48:	4619      	mov	r1, r3
 8004b4a:	482d      	ldr	r0, [pc, #180]	@ (8004c00 <BSP_SDRAM_MspInit+0x208>)
 8004b4c:	f001 fa1e 	bl	8005f8c <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8004b50:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004b56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4829      	ldr	r0, [pc, #164]	@ (8004c04 <BSP_SDRAM_MspInit+0x20c>)
 8004b5e:	f001 fa15 	bl	8005f8c <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004b62:	4b29      	ldr	r3, [pc, #164]	@ (8004c08 <BSP_SDRAM_MspInit+0x210>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004b68:	4b27      	ldr	r3, [pc, #156]	@ (8004c08 <BSP_SDRAM_MspInit+0x210>)
 8004b6a:	2280      	movs	r2, #128	@ 0x80
 8004b6c:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004b6e:	4b26      	ldr	r3, [pc, #152]	@ (8004c08 <BSP_SDRAM_MspInit+0x210>)
 8004b70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b74:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004b76:	4b24      	ldr	r3, [pc, #144]	@ (8004c08 <BSP_SDRAM_MspInit+0x210>)
 8004b78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b7c:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004b7e:	4b22      	ldr	r3, [pc, #136]	@ (8004c08 <BSP_SDRAM_MspInit+0x210>)
 8004b80:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004b84:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004b86:	4b20      	ldr	r3, [pc, #128]	@ (8004c08 <BSP_SDRAM_MspInit+0x210>)
 8004b88:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004b8c:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 8004b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004c08 <BSP_SDRAM_MspInit+0x210>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004b94:	4b1c      	ldr	r3, [pc, #112]	@ (8004c08 <BSP_SDRAM_MspInit+0x210>)
 8004b96:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004b9a:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8004c08 <BSP_SDRAM_MspInit+0x210>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004ba2:	4b19      	ldr	r3, [pc, #100]	@ (8004c08 <BSP_SDRAM_MspInit+0x210>)
 8004ba4:	2203      	movs	r2, #3
 8004ba6:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004ba8:	4b17      	ldr	r3, [pc, #92]	@ (8004c08 <BSP_SDRAM_MspInit+0x210>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8004bae:	4b16      	ldr	r3, [pc, #88]	@ (8004c08 <BSP_SDRAM_MspInit+0x210>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004bb4:	4b14      	ldr	r3, [pc, #80]	@ (8004c08 <BSP_SDRAM_MspInit+0x210>)
 8004bb6:	4a15      	ldr	r2, [pc, #84]	@ (8004c0c <BSP_SDRAM_MspInit+0x214>)
 8004bb8:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a12      	ldr	r2, [pc, #72]	@ (8004c08 <BSP_SDRAM_MspInit+0x210>)
 8004bbe:	631a      	str	r2, [r3, #48]	@ 0x30
 8004bc0:	4a11      	ldr	r2, [pc, #68]	@ (8004c08 <BSP_SDRAM_MspInit+0x210>)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8004bc6:	4810      	ldr	r0, [pc, #64]	@ (8004c08 <BSP_SDRAM_MspInit+0x210>)
 8004bc8:	f000 fb20 	bl	800520c <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 8004bcc:	480e      	ldr	r0, [pc, #56]	@ (8004c08 <BSP_SDRAM_MspInit+0x210>)
 8004bce:	f000 fa6f 	bl	80050b0 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	210f      	movs	r1, #15
 8004bd6:	2038      	movs	r0, #56	@ 0x38
 8004bd8:	f000 fa24 	bl	8005024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004bdc:	2038      	movs	r0, #56	@ 0x38
 8004bde:	f000 fa3d 	bl	800505c <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8004be2:	bf00      	nop
 8004be4:	3740      	adds	r7, #64	@ 0x40
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	40020400 	.word	0x40020400
 8004bf4:	40020800 	.word	0x40020800
 8004bf8:	40020c00 	.word	0x40020c00
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	40021400 	.word	0x40021400
 8004c04:	40021800 	.word	0x40021800
 8004c08:	20008490 	.word	0x20008490
 8004c0c:	40026410 	.word	0x40026410

08004c10 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	4603      	mov	r3, r0
 8004c18:	460a      	mov	r2, r1
 8004c1a:	80fb      	strh	r3, [r7, #6]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8004c24:	4a13      	ldr	r2, [pc, #76]	@ (8004c74 <BSP_TS_Init+0x64>)
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8004c2a:	4a13      	ldr	r2, [pc, #76]	@ (8004c78 <BSP_TS_Init+0x68>)
 8004c2c:	88bb      	ldrh	r3, [r7, #4]
 8004c2e:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8004c30:	4b12      	ldr	r3, [pc, #72]	@ (8004c7c <BSP_TS_Init+0x6c>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	2082      	movs	r0, #130	@ 0x82
 8004c36:	4798      	blx	r3
 8004c38:	4603      	mov	r3, r0
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	f640 0311 	movw	r3, #2065	@ 0x811
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d104      	bne.n	8004c4e <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8004c44:	4b0e      	ldr	r3, [pc, #56]	@ (8004c80 <BSP_TS_Init+0x70>)
 8004c46:	4a0d      	ldr	r2, [pc, #52]	@ (8004c7c <BSP_TS_Init+0x6c>)
 8004c48:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == TS_OK)
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d109      	bne.n	8004c68 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8004c54:	4b0a      	ldr	r3, [pc, #40]	@ (8004c80 <BSP_TS_Init+0x70>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2082      	movs	r0, #130	@ 0x82
 8004c5c:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8004c5e:	4b08      	ldr	r3, [pc, #32]	@ (8004c80 <BSP_TS_Init+0x70>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	2082      	movs	r0, #130	@ 0x82
 8004c66:	4798      	blx	r3
  }

  return ret;
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	200084f4 	.word	0x200084f4
 8004c78:	200084f6 	.word	0x200084f6
 8004c7c:	200001a0 	.word	0x200001a0
 8004c80:	200084f0 	.word	0x200084f0

08004c84 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef *TsState)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff, x, y, xr, yr;

  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8004c8c:	4b4f      	ldr	r3, [pc, #316]	@ (8004dcc <BSP_TS_GetState+0x148>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	2082      	movs	r0, #130	@ 0x82
 8004c94:	4798      	blx	r3
 8004c96:	4603      	mov	r3, r0
 8004c98:	461a      	mov	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	801a      	strh	r2, [r3, #0]

  if (TsState->TouchDetected)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 808d 	beq.w	8004dc2 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8004ca8:	4b48      	ldr	r3, [pc, #288]	@ (8004dcc <BSP_TS_GetState+0x148>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	f107 020c 	add.w	r2, r7, #12
 8004cb2:	f107 010e 	add.w	r1, r7, #14
 8004cb6:	2082      	movs	r0, #130	@ 0x82
 8004cb8:	4798      	blx	r3
    /* Y value first correction */
    y = 3700 - y;
#else

    /* Y value first correction */
    y -= 360;
 8004cba:	89bb      	ldrh	r3, [r7, #12]
 8004cbc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	81bb      	strh	r3, [r7, #12]

#endif

    /* Y value second correction */
    yr = y / 11;
 8004cc4:	89bb      	ldrh	r3, [r7, #12]
 8004cc6:	4a42      	ldr	r2, [pc, #264]	@ (8004dd0 <BSP_TS_GetState+0x14c>)
 8004cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ccc:	08db      	lsrs	r3, r3, #3
 8004cce:	82bb      	strh	r3, [r7, #20]

    /* Return y position value */
    if (yr <= 0)
 8004cd0:	8abb      	ldrh	r3, [r7, #20]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d102      	bne.n	8004cdc <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	82bb      	strh	r3, [r7, #20]
 8004cda:	e008      	b.n	8004cee <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8004cdc:	4b3d      	ldr	r3, [pc, #244]	@ (8004dd4 <BSP_TS_GetState+0x150>)
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	8aba      	ldrh	r2, [r7, #20]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d903      	bls.n	8004cee <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8004ce6:	4b3b      	ldr	r3, [pc, #236]	@ (8004dd4 <BSP_TS_GetState+0x150>)
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8004cee:	8abb      	ldrh	r3, [r7, #20]
 8004cf0:	81bb      	strh	r3, [r7, #12]

    /* X value first correction */
    if (x <= 3000)
 8004cf2:	89fb      	ldrh	r3, [r7, #14]
 8004cf4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d806      	bhi.n	8004d0a <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8004cfc:	89fb      	ldrh	r3, [r7, #14]
 8004cfe:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 8004d02:	330e      	adds	r3, #14
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	81fb      	strh	r3, [r7, #14]
 8004d08:	e005      	b.n	8004d16 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8004d0a:	89fb      	ldrh	r3, [r7, #14]
 8004d0c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8004d10:	3308      	adds	r3, #8
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	81fb      	strh	r3, [r7, #14]
    }

    /* X value second correction */
    xr = x / 15;
 8004d16:	89fb      	ldrh	r3, [r7, #14]
 8004d18:	4a2f      	ldr	r2, [pc, #188]	@ (8004dd8 <BSP_TS_GetState+0x154>)
 8004d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1e:	08db      	lsrs	r3, r3, #3
 8004d20:	82fb      	strh	r3, [r7, #22]

    /* Return X position value */
    if (xr <= 0)
 8004d22:	8afb      	ldrh	r3, [r7, #22]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d102      	bne.n	8004d2e <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	82fb      	strh	r3, [r7, #22]
 8004d2c:	e008      	b.n	8004d40 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8004d2e:	4b2b      	ldr	r3, [pc, #172]	@ (8004ddc <BSP_TS_GetState+0x158>)
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	8afa      	ldrh	r2, [r7, #22]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d903      	bls.n	8004d40 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8004d38:	4b28      	ldr	r3, [pc, #160]	@ (8004ddc <BSP_TS_GetState+0x158>)
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	82fb      	strh	r3, [r7, #22]
    }
    else
    {}

    x = xr;
 8004d40:	8afb      	ldrh	r3, [r7, #22]
 8004d42:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x ? (x - _x): (_x - x);
 8004d44:	89fb      	ldrh	r3, [r7, #14]
 8004d46:	461a      	mov	r2, r3
 8004d48:	4b25      	ldr	r3, [pc, #148]	@ (8004de0 <BSP_TS_GetState+0x15c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d906      	bls.n	8004d5e <BSP_TS_GetState+0xda>
 8004d50:	89fa      	ldrh	r2, [r7, #14]
 8004d52:	4b23      	ldr	r3, [pc, #140]	@ (8004de0 <BSP_TS_GetState+0x15c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	e005      	b.n	8004d6a <BSP_TS_GetState+0xe6>
 8004d5e:	4b20      	ldr	r3, [pc, #128]	@ (8004de0 <BSP_TS_GetState+0x15c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	89fb      	ldrh	r3, [r7, #14]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y ? (y - _y) : (_y - y);
 8004d6c:	89bb      	ldrh	r3, [r7, #12]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	4b1c      	ldr	r3, [pc, #112]	@ (8004de4 <BSP_TS_GetState+0x160>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d906      	bls.n	8004d86 <BSP_TS_GetState+0x102>
 8004d78:	89ba      	ldrh	r2, [r7, #12]
 8004d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8004de4 <BSP_TS_GetState+0x160>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	e005      	b.n	8004d92 <BSP_TS_GetState+0x10e>
 8004d86:	4b17      	ldr	r3, [pc, #92]	@ (8004de4 <BSP_TS_GetState+0x160>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	89bb      	ldrh	r3, [r7, #12]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	823b      	strh	r3, [r7, #16]

    if (xDiff + yDiff > 5)
 8004d94:	8a7a      	ldrh	r2, [r7, #18]
 8004d96:	8a3b      	ldrh	r3, [r7, #16]
 8004d98:	4413      	add	r3, r2
 8004d9a:	2b05      	cmp	r3, #5
 8004d9c:	dd07      	ble.n	8004dae <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8004d9e:	89fb      	ldrh	r3, [r7, #14]
 8004da0:	461a      	mov	r2, r3
 8004da2:	4b0f      	ldr	r3, [pc, #60]	@ (8004de0 <BSP_TS_GetState+0x15c>)
 8004da4:	601a      	str	r2, [r3, #0]
      _y = y;
 8004da6:	89bb      	ldrh	r3, [r7, #12]
 8004da8:	461a      	mov	r2, r3
 8004daa:	4b0e      	ldr	r3, [pc, #56]	@ (8004de4 <BSP_TS_GetState+0x160>)
 8004dac:	601a      	str	r2, [r3, #0]
    }

    /* Update the X position */
    TsState->X = _x;
 8004dae:	4b0c      	ldr	r3, [pc, #48]	@ (8004de0 <BSP_TS_GetState+0x15c>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	805a      	strh	r2, [r3, #2]

    /* Update the Y position */
    TsState->Y = _y;
 8004db8:	4b0a      	ldr	r3, [pc, #40]	@ (8004de4 <BSP_TS_GetState+0x160>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	809a      	strh	r2, [r3, #4]
  }
}
 8004dc2:	bf00      	nop
 8004dc4:	3718      	adds	r7, #24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	200084f0 	.word	0x200084f0
 8004dd0:	ba2e8ba3 	.word	0xba2e8ba3
 8004dd4:	200084f6 	.word	0x200084f6
 8004dd8:	88888889 	.word	0x88888889
 8004ddc:	200084f4 	.word	0x200084f4
 8004de0:	200084f8 	.word	0x200084f8
 8004de4:	200084fc 	.word	0x200084fc

08004de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004dec:	4b0e      	ldr	r3, [pc, #56]	@ (8004e28 <HAL_Init+0x40>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a0d      	ldr	r2, [pc, #52]	@ (8004e28 <HAL_Init+0x40>)
 8004df2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004df8:	4b0b      	ldr	r3, [pc, #44]	@ (8004e28 <HAL_Init+0x40>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8004e28 <HAL_Init+0x40>)
 8004dfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e04:	4b08      	ldr	r3, [pc, #32]	@ (8004e28 <HAL_Init+0x40>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a07      	ldr	r2, [pc, #28]	@ (8004e28 <HAL_Init+0x40>)
 8004e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e10:	2003      	movs	r0, #3
 8004e12:	f000 f8fc 	bl	800500e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e16:	200f      	movs	r0, #15
 8004e18:	f7fd ff4e 	bl	8002cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e1c:	f7fd fb8a 	bl	8002534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40023c00 	.word	0x40023c00

08004e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e30:	4b06      	ldr	r3, [pc, #24]	@ (8004e4c <HAL_IncTick+0x20>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	461a      	mov	r2, r3
 8004e36:	4b06      	ldr	r3, [pc, #24]	@ (8004e50 <HAL_IncTick+0x24>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	4a04      	ldr	r2, [pc, #16]	@ (8004e50 <HAL_IncTick+0x24>)
 8004e3e:	6013      	str	r3, [r2, #0]
}
 8004e40:	bf00      	nop
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	200001f0 	.word	0x200001f0
 8004e50:	20008500 	.word	0x20008500

08004e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
  return uwTick;
 8004e58:	4b03      	ldr	r3, [pc, #12]	@ (8004e68 <HAL_GetTick+0x14>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	20008500 	.word	0x20008500

08004e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e74:	f7ff ffee 	bl	8004e54 <HAL_GetTick>
 8004e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e84:	d005      	beq.n	8004e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e86:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb0 <HAL_Delay+0x44>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004e92:	bf00      	nop
 8004e94:	f7ff ffde 	bl	8004e54 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d8f7      	bhi.n	8004e94 <HAL_Delay+0x28>
  {
  }
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	200001f0 	.word	0x200001f0

08004eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004edc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ee6:	4a04      	ldr	r2, [pc, #16]	@ (8004ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	60d3      	str	r3, [r2, #12]
}
 8004eec:	bf00      	nop
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	e000ed00 	.word	0xe000ed00

08004efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f00:	4b04      	ldr	r3, [pc, #16]	@ (8004f14 <__NVIC_GetPriorityGrouping+0x18>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	0a1b      	lsrs	r3, r3, #8
 8004f06:	f003 0307 	and.w	r3, r3, #7
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	e000ed00 	.word	0xe000ed00

08004f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	4603      	mov	r3, r0
 8004f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	db0b      	blt.n	8004f42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	f003 021f 	and.w	r2, r3, #31
 8004f30:	4907      	ldr	r1, [pc, #28]	@ (8004f50 <__NVIC_EnableIRQ+0x38>)
 8004f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	2001      	movs	r0, #1
 8004f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	e000e100 	.word	0xe000e100

08004f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	6039      	str	r1, [r7, #0]
 8004f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	db0a      	blt.n	8004f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	490c      	ldr	r1, [pc, #48]	@ (8004fa0 <__NVIC_SetPriority+0x4c>)
 8004f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f72:	0112      	lsls	r2, r2, #4
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	440b      	add	r3, r1
 8004f78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f7c:	e00a      	b.n	8004f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	4908      	ldr	r1, [pc, #32]	@ (8004fa4 <__NVIC_SetPriority+0x50>)
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	f003 030f 	and.w	r3, r3, #15
 8004f8a:	3b04      	subs	r3, #4
 8004f8c:	0112      	lsls	r2, r2, #4
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	440b      	add	r3, r1
 8004f92:	761a      	strb	r2, [r3, #24]
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	e000e100 	.word	0xe000e100
 8004fa4:	e000ed00 	.word	0xe000ed00

08004fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b089      	sub	sp, #36	@ 0x24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	f1c3 0307 	rsb	r3, r3, #7
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	bf28      	it	cs
 8004fc6:	2304      	movcs	r3, #4
 8004fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	2b06      	cmp	r3, #6
 8004fd0:	d902      	bls.n	8004fd8 <NVIC_EncodePriority+0x30>
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	3b03      	subs	r3, #3
 8004fd6:	e000      	b.n	8004fda <NVIC_EncodePriority+0x32>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	43da      	mvns	r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	401a      	ands	r2, r3
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffa:	43d9      	mvns	r1, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005000:	4313      	orrs	r3, r2
         );
}
 8005002:	4618      	mov	r0, r3
 8005004:	3724      	adds	r7, #36	@ 0x24
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b082      	sub	sp, #8
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7ff ff4c 	bl	8004eb4 <__NVIC_SetPriorityGrouping>
}
 800501c:	bf00      	nop
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	4603      	mov	r3, r0
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
 8005030:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005036:	f7ff ff61 	bl	8004efc <__NVIC_GetPriorityGrouping>
 800503a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	6978      	ldr	r0, [r7, #20]
 8005042:	f7ff ffb1 	bl	8004fa8 <NVIC_EncodePriority>
 8005046:	4602      	mov	r2, r0
 8005048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800504c:	4611      	mov	r1, r2
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff ff80 	bl	8004f54 <__NVIC_SetPriority>
}
 8005054:	bf00      	nop
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	4603      	mov	r3, r0
 8005064:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506a:	4618      	mov	r0, r3
 800506c:	f7ff ff54 	bl	8004f18 <__NVIC_EnableIRQ>
}
 8005070:	bf00      	nop
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e00e      	b.n	80050a8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	795b      	ldrb	r3, [r3, #5]
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d105      	bne.n	80050a0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fd fa72 	bl	8002584 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80050bc:	f7ff feca 	bl	8004e54 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e099      	b.n	8005200 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0201 	bic.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050ec:	e00f      	b.n	800510e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050ee:	f7ff feb1 	bl	8004e54 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b05      	cmp	r3, #5
 80050fa:	d908      	bls.n	800510e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2220      	movs	r2, #32
 8005100:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2203      	movs	r2, #3
 8005106:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e078      	b.n	8005200 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e8      	bne.n	80050ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	4b38      	ldr	r3, [pc, #224]	@ (8005208 <HAL_DMA_Init+0x158>)
 8005128:	4013      	ands	r3, r2
 800512a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800513a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005146:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005152:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005164:	2b04      	cmp	r3, #4
 8005166:	d107      	bne.n	8005178 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005170:	4313      	orrs	r3, r2
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f023 0307 	bic.w	r3, r3, #7
 800518e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d117      	bne.n	80051d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00e      	beq.n	80051d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f8bd 	bl	8005334 <DMA_CheckFifoParam>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d008      	beq.n	80051d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2240      	movs	r2, #64	@ 0x40
 80051c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80051ce:	2301      	movs	r3, #1
 80051d0:	e016      	b.n	8005200 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f874 	bl	80052c8 <DMA_CalcBaseAndBitshift>
 80051e0:	4603      	mov	r3, r0
 80051e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e8:	223f      	movs	r2, #63	@ 0x3f
 80051ea:	409a      	lsls	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	f010803f 	.word	0xf010803f

0800520c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e050      	b.n	80052c0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d101      	bne.n	800522e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800522a:	2302      	movs	r3, #2
 800522c:	e048      	b.n	80052c0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0201 	bic.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2200      	movs	r2, #0
 800524c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2200      	movs	r2, #0
 8005254:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2200      	movs	r2, #0
 800525c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2200      	movs	r2, #0
 8005264:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2221      	movs	r2, #33	@ 0x21
 800526c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f82a 	bl	80052c8 <DMA_CalcBaseAndBitshift>
 8005274:	4603      	mov	r3, r0
 8005276:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a0:	223f      	movs	r2, #63	@ 0x3f
 80052a2:	409a      	lsls	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	3b10      	subs	r3, #16
 80052d8:	4a14      	ldr	r2, [pc, #80]	@ (800532c <DMA_CalcBaseAndBitshift+0x64>)
 80052da:	fba2 2303 	umull	r2, r3, r2, r3
 80052de:	091b      	lsrs	r3, r3, #4
 80052e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80052e2:	4a13      	ldr	r2, [pc, #76]	@ (8005330 <DMA_CalcBaseAndBitshift+0x68>)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	d909      	bls.n	800530a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80052fe:	f023 0303 	bic.w	r3, r3, #3
 8005302:	1d1a      	adds	r2, r3, #4
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	659a      	str	r2, [r3, #88]	@ 0x58
 8005308:	e007      	b.n	800531a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005312:	f023 0303 	bic.w	r3, r3, #3
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	aaaaaaab 	.word	0xaaaaaaab
 8005330:	080163d8 	.word	0x080163d8

08005334 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005344:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d11f      	bne.n	800538e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2b03      	cmp	r3, #3
 8005352:	d856      	bhi.n	8005402 <DMA_CheckFifoParam+0xce>
 8005354:	a201      	add	r2, pc, #4	@ (adr r2, 800535c <DMA_CheckFifoParam+0x28>)
 8005356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535a:	bf00      	nop
 800535c:	0800536d 	.word	0x0800536d
 8005360:	0800537f 	.word	0x0800537f
 8005364:	0800536d 	.word	0x0800536d
 8005368:	08005403 	.word	0x08005403
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005370:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d046      	beq.n	8005406 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800537c:	e043      	b.n	8005406 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005382:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005386:	d140      	bne.n	800540a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800538c:	e03d      	b.n	800540a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005396:	d121      	bne.n	80053dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b03      	cmp	r3, #3
 800539c:	d837      	bhi.n	800540e <DMA_CheckFifoParam+0xda>
 800539e:	a201      	add	r2, pc, #4	@ (adr r2, 80053a4 <DMA_CheckFifoParam+0x70>)
 80053a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a4:	080053b5 	.word	0x080053b5
 80053a8:	080053bb 	.word	0x080053bb
 80053ac:	080053b5 	.word	0x080053b5
 80053b0:	080053cd 	.word	0x080053cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	73fb      	strb	r3, [r7, #15]
      break;
 80053b8:	e030      	b.n	800541c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d025      	beq.n	8005412 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ca:	e022      	b.n	8005412 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80053d4:	d11f      	bne.n	8005416 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80053da:	e01c      	b.n	8005416 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d903      	bls.n	80053ea <DMA_CheckFifoParam+0xb6>
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b03      	cmp	r3, #3
 80053e6:	d003      	beq.n	80053f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80053e8:	e018      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	73fb      	strb	r3, [r7, #15]
      break;
 80053ee:	e015      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00e      	beq.n	800541a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005400:	e00b      	b.n	800541a <DMA_CheckFifoParam+0xe6>
      break;
 8005402:	bf00      	nop
 8005404:	e00a      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      break;
 8005406:	bf00      	nop
 8005408:	e008      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      break;
 800540a:	bf00      	nop
 800540c:	e006      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      break;
 800540e:	bf00      	nop
 8005410:	e004      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      break;
 8005412:	bf00      	nop
 8005414:	e002      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      break;   
 8005416:	bf00      	nop
 8005418:	e000      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      break;
 800541a:	bf00      	nop
    }
  } 
  
  return status; 
 800541c:	7bfb      	ldrb	r3, [r7, #15]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop

0800542c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e03b      	b.n	80054b6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fd f8b8 	bl	80025c8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800547c:	f023 0107 	bic.w	r1, r3, #7
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005492:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005496:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	68d1      	ldr	r1, [r2, #12]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6812      	ldr	r2, [r2, #0]
 80054a2:	430b      	orrs	r3, r1
 80054a4:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b086      	sub	sp, #24
 80054c2:	af02      	add	r7, sp, #8
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	607a      	str	r2, [r7, #4]
 80054ca:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <HAL_DMA2D_Start+0x1c>
 80054d6:	2302      	movs	r3, #2
 80054d8:	e018      	b.n	800550c <HAL_DMA2D_Start+0x4e>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2202      	movs	r2, #2
 80054e6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	68b9      	ldr	r1, [r7, #8]
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 fa99 	bl	8005a2c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 0201 	orr.w	r2, r2, #1
 8005508:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800551e:	2300      	movs	r3, #0
 8005520:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b00      	cmp	r3, #0
 800552e:	d056      	beq.n	80055de <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005530:	f7ff fc90 	bl	8004e54 <HAL_GetTick>
 8005534:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005536:	e04b      	b.n	80055d0 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005546:	2b00      	cmp	r3, #0
 8005548:	d023      	beq.n	8005592 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f003 0320 	and.w	r3, r3, #32
 8005550:	2b00      	cmp	r3, #0
 8005552:	d005      	beq.n	8005560 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005558:	f043 0202 	orr.w	r2, r3, #2
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800556e:	f043 0201 	orr.w	r2, r3, #1
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2221      	movs	r2, #33	@ 0x21
 800557c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2204      	movs	r2, #4
 8005582:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e0a5      	b.n	80056de <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005598:	d01a      	beq.n	80055d0 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800559a:	f7ff fc5b 	bl	8004e54 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d302      	bcc.n	80055b0 <HAL_DMA2D_PollForTransfer+0x9c>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10f      	bne.n	80055d0 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b4:	f043 0220 	orr.w	r2, r3, #32
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2203      	movs	r2, #3
 80055c0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e086      	b.n	80056de <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0ac      	beq.n	8005538 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	f003 0320 	and.w	r3, r3, #32
 80055e8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f0:	f003 0320 	and.w	r3, r3, #32
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d061      	beq.n	80056c4 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005600:	f7ff fc28 	bl	8004e54 <HAL_GetTick>
 8005604:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005606:	e056      	b.n	80056b6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8005616:	2b00      	cmp	r3, #0
 8005618:	d02e      	beq.n	8005678 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f003 0308 	and.w	r3, r3, #8
 8005620:	2b00      	cmp	r3, #0
 8005622:	d005      	beq.n	8005630 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005628:	f043 0204 	orr.w	r2, r3, #4
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f003 0320 	and.w	r3, r3, #32
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800563e:	f043 0202 	orr.w	r2, r3, #2
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d005      	beq.n	800565c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005654:	f043 0201 	orr.w	r2, r3, #1
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2229      	movs	r2, #41	@ 0x29
 8005662:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2204      	movs	r2, #4
 8005668:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e032      	b.n	80056de <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567e:	d01a      	beq.n	80056b6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005680:	f7ff fbe8 	bl	8004e54 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	429a      	cmp	r2, r3
 800568e:	d302      	bcc.n	8005696 <HAL_DMA2D_PollForTransfer+0x182>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10f      	bne.n	80056b6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800569a:	f043 0220 	orr.w	r2, r3, #32
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2203      	movs	r2, #3
 80056a6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e013      	b.n	80056de <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f003 0310 	and.w	r3, r3, #16
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0a1      	beq.n	8005608 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2212      	movs	r2, #18
 80056ca:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d026      	beq.n	8005756 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800570e:	2b00      	cmp	r3, #0
 8005710:	d021      	beq.n	8005756 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005720:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005726:	f043 0201 	orr.w	r2, r3, #1
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2201      	movs	r2, #1
 8005734:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2204      	movs	r2, #4
 800573a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f003 0320 	and.w	r3, r3, #32
 800575c:	2b00      	cmp	r3, #0
 800575e:	d026      	beq.n	80057ae <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d021      	beq.n	80057ae <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005778:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2220      	movs	r2, #32
 8005780:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005786:	f043 0202 	orr.w	r2, r3, #2
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2204      	movs	r2, #4
 8005792:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f003 0308 	and.w	r3, r3, #8
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d026      	beq.n	8005806 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d021      	beq.n	8005806 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057d0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2208      	movs	r2, #8
 80057d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057de:	f043 0204 	orr.w	r2, r3, #4
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2204      	movs	r2, #4
 80057ea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d013      	beq.n	8005838 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00e      	beq.n	8005838 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005828:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2204      	movs	r2, #4
 8005830:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f853 	bl	80058de <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d024      	beq.n	800588c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01f      	beq.n	800588c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800585a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2202      	movs	r2, #2
 8005862:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f003 0310 	and.w	r3, r3, #16
 8005892:	2b00      	cmp	r3, #0
 8005894:	d01f      	beq.n	80058d6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01a      	beq.n	80058d6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80058ae:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2210      	movs	r2, #16
 80058b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f80e 	bl	80058f2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80058d6:	bf00      	nop
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80058de:	b480      	push	{r7}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
	...

08005908 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005920:	2b01      	cmp	r3, #1
 8005922:	d101      	bne.n	8005928 <HAL_DMA2D_ConfigLayer+0x20>
 8005924:	2302      	movs	r3, #2
 8005926:	e079      	b.n	8005a1c <HAL_DMA2D_ConfigLayer+0x114>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	3318      	adds	r3, #24
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	4413      	add	r3, r2
 8005942:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	041b      	lsls	r3, r3, #16
 800594e:	4313      	orrs	r3, r2
 8005950:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005952:	4b35      	ldr	r3, [pc, #212]	@ (8005a28 <HAL_DMA2D_ConfigLayer+0x120>)
 8005954:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b0a      	cmp	r3, #10
 800595c:	d003      	beq.n	8005966 <HAL_DMA2D_ConfigLayer+0x5e>
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2b09      	cmp	r3, #9
 8005964:	d107      	bne.n	8005976 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	4313      	orrs	r3, r2
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	e005      	b.n	8005982 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	061b      	lsls	r3, r3, #24
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	4313      	orrs	r3, r2
 8005980:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d120      	bne.n	80059ca <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	43db      	mvns	r3, r3
 8005992:	ea02 0103 	and.w	r1, r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	430a      	orrs	r2, r1
 800599e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	6812      	ldr	r2, [r2, #0]
 80059a8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2b0a      	cmp	r3, #10
 80059b0:	d003      	beq.n	80059ba <HAL_DMA2D_ConfigLayer+0xb2>
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2b09      	cmp	r3, #9
 80059b8:	d127      	bne.n	8005a0a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	68da      	ldr	r2, [r3, #12]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80059c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80059c8:	e01f      	b.n	8005a0a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	69da      	ldr	r2, [r3, #28]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	43db      	mvns	r3, r3
 80059d4:	ea02 0103 	and.w	r1, r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	430a      	orrs	r2, r1
 80059e0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	6812      	ldr	r2, [r2, #0]
 80059ea:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	2b0a      	cmp	r3, #10
 80059f2:	d003      	beq.n	80059fc <HAL_DMA2D_ConfigLayer+0xf4>
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	2b09      	cmp	r3, #9
 80059fa:	d106      	bne.n	8005a0a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005a08:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	371c      	adds	r7, #28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	ff03000f 	.word	0xff03000f

08005a2c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b08b      	sub	sp, #44	@ 0x2c
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
 8005a38:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a40:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	041a      	lsls	r2, r3, #16
 8005a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a64:	d174      	bne.n	8005b50 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005a6c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005a74:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005a7c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d108      	bne.n	8005a9e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	431a      	orrs	r2, r3
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a9c:	e053      	b.n	8005b46 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d106      	bne.n	8005ab4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ab2:	e048      	b.n	8005b46 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d111      	bne.n	8005ae0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	0cdb      	lsrs	r3, r3, #19
 8005ac0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	0a9b      	lsrs	r3, r3, #10
 8005ac6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	08db      	lsrs	r3, r3, #3
 8005acc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	02db      	lsls	r3, r3, #11
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ade:	e032      	b.n	8005b46 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	d117      	bne.n	8005b18 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	0fdb      	lsrs	r3, r3, #31
 8005aec:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	0cdb      	lsrs	r3, r3, #19
 8005af2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	0adb      	lsrs	r3, r3, #11
 8005af8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	08db      	lsrs	r3, r3, #3
 8005afe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	029b      	lsls	r3, r3, #10
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	03db      	lsls	r3, r3, #15
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b16:	e016      	b.n	8005b46 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	0f1b      	lsrs	r3, r3, #28
 8005b1c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	0d1b      	lsrs	r3, r3, #20
 8005b22:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	0b1b      	lsrs	r3, r3, #12
 8005b28:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	091b      	lsrs	r3, r3, #4
 8005b2e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	011a      	lsls	r2, r3, #4
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	021b      	lsls	r3, r3, #8
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	031b      	lsls	r3, r3, #12
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b4c:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005b4e:	e003      	b.n	8005b58 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	60da      	str	r2, [r3, #12]
}
 8005b58:	bf00      	nop
 8005b5a:	372c      	adds	r7, #44	@ 0x2c
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005b76:	4b23      	ldr	r3, [pc, #140]	@ (8005c04 <HAL_FLASH_Program+0xa0>)
 8005b78:	7e1b      	ldrb	r3, [r3, #24]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d101      	bne.n	8005b82 <HAL_FLASH_Program+0x1e>
 8005b7e:	2302      	movs	r3, #2
 8005b80:	e03b      	b.n	8005bfa <HAL_FLASH_Program+0x96>
 8005b82:	4b20      	ldr	r3, [pc, #128]	@ (8005c04 <HAL_FLASH_Program+0xa0>)
 8005b84:	2201      	movs	r2, #1
 8005b86:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b88:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005b8c:	f000 f870 	bl	8005c70 <FLASH_WaitForLastOperation>
 8005b90:	4603      	mov	r3, r0
 8005b92:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d12b      	bne.n	8005bf2 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d105      	bne.n	8005bac <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005ba0:	783b      	ldrb	r3, [r7, #0]
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	68b8      	ldr	r0, [r7, #8]
 8005ba6:	f000 f91b 	bl	8005de0 <FLASH_Program_Byte>
 8005baa:	e016      	b.n	8005bda <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d105      	bne.n	8005bbe <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005bb2:	883b      	ldrh	r3, [r7, #0]
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	68b8      	ldr	r0, [r7, #8]
 8005bb8:	f000 f8ee 	bl	8005d98 <FLASH_Program_HalfWord>
 8005bbc:	e00d      	b.n	8005bda <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d105      	bne.n	8005bd0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	68b8      	ldr	r0, [r7, #8]
 8005bca:	f000 f8c3 	bl	8005d54 <FLASH_Program_Word>
 8005bce:	e004      	b.n	8005bda <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bd4:	68b8      	ldr	r0, [r7, #8]
 8005bd6:	f000 f88b 	bl	8005cf0 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005bda:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005bde:	f000 f847 	bl	8005c70 <FLASH_WaitForLastOperation>
 8005be2:	4603      	mov	r3, r0
 8005be4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8005be6:	4b08      	ldr	r3, [pc, #32]	@ (8005c08 <HAL_FLASH_Program+0xa4>)
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	4a07      	ldr	r2, [pc, #28]	@ (8005c08 <HAL_FLASH_Program+0xa4>)
 8005bec:	f023 0301 	bic.w	r3, r3, #1
 8005bf0:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005bf2:	4b04      	ldr	r3, [pc, #16]	@ (8005c04 <HAL_FLASH_Program+0xa0>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	761a      	strb	r2, [r3, #24]

  return status;
 8005bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3718      	adds	r7, #24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20008504 	.word	0x20008504
 8005c08:	40023c00 	.word	0x40023c00

08005c0c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005c16:	4b0b      	ldr	r3, [pc, #44]	@ (8005c44 <HAL_FLASH_Unlock+0x38>)
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	da0b      	bge.n	8005c36 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005c1e:	4b09      	ldr	r3, [pc, #36]	@ (8005c44 <HAL_FLASH_Unlock+0x38>)
 8005c20:	4a09      	ldr	r2, [pc, #36]	@ (8005c48 <HAL_FLASH_Unlock+0x3c>)
 8005c22:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005c24:	4b07      	ldr	r3, [pc, #28]	@ (8005c44 <HAL_FLASH_Unlock+0x38>)
 8005c26:	4a09      	ldr	r2, [pc, #36]	@ (8005c4c <HAL_FLASH_Unlock+0x40>)
 8005c28:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005c2a:	4b06      	ldr	r3, [pc, #24]	@ (8005c44 <HAL_FLASH_Unlock+0x38>)
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	da01      	bge.n	8005c36 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005c36:	79fb      	ldrb	r3, [r7, #7]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	40023c00 	.word	0x40023c00
 8005c48:	45670123 	.word	0x45670123
 8005c4c:	cdef89ab 	.word	0xcdef89ab

08005c50 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005c54:	4b05      	ldr	r3, [pc, #20]	@ (8005c6c <HAL_FLASH_Lock+0x1c>)
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	4a04      	ldr	r2, [pc, #16]	@ (8005c6c <HAL_FLASH_Lock+0x1c>)
 8005c5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c5e:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	40023c00 	.word	0x40023c00

08005c70 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ce8 <FLASH_WaitForLastOperation+0x78>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005c82:	f7ff f8e7 	bl	8004e54 <HAL_GetTick>
 8005c86:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8005c88:	e010      	b.n	8005cac <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c90:	d00c      	beq.n	8005cac <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d007      	beq.n	8005ca8 <FLASH_WaitForLastOperation+0x38>
 8005c98:	f7ff f8dc 	bl	8004e54 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d201      	bcs.n	8005cac <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e019      	b.n	8005ce0 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8005cac:	4b0f      	ldr	r3, [pc, #60]	@ (8005cec <FLASH_WaitForLastOperation+0x7c>)
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1e8      	bne.n	8005c8a <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8005cec <FLASH_WaitForLastOperation+0x7c>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005cc4:	4b09      	ldr	r3, [pc, #36]	@ (8005cec <FLASH_WaitForLastOperation+0x7c>)
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005cca:	4b08      	ldr	r3, [pc, #32]	@ (8005cec <FLASH_WaitForLastOperation+0x7c>)
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005cd6:	f000 f8a5 	bl	8005e24 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e000      	b.n	8005ce0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005cde:	2300      	movs	r3, #0

}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	20008504 	.word	0x20008504
 8005cec:	40023c00 	.word	0x40023c00

08005cf0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005cfc:	4b14      	ldr	r3, [pc, #80]	@ (8005d50 <FLASH_Program_DoubleWord+0x60>)
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	4a13      	ldr	r2, [pc, #76]	@ (8005d50 <FLASH_Program_DoubleWord+0x60>)
 8005d02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005d08:	4b11      	ldr	r3, [pc, #68]	@ (8005d50 <FLASH_Program_DoubleWord+0x60>)
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	4a10      	ldr	r2, [pc, #64]	@ (8005d50 <FLASH_Program_DoubleWord+0x60>)
 8005d0e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8005d12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005d14:	4b0e      	ldr	r3, [pc, #56]	@ (8005d50 <FLASH_Program_DoubleWord+0x60>)
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	4a0d      	ldr	r2, [pc, #52]	@ (8005d50 <FLASH_Program_DoubleWord+0x60>)
 8005d1a:	f043 0301 	orr.w	r3, r3, #1
 8005d1e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005d26:	f3bf 8f6f 	isb	sy
}
 8005d2a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8005d2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d30:	f04f 0200 	mov.w	r2, #0
 8005d34:	f04f 0300 	mov.w	r3, #0
 8005d38:	000a      	movs	r2, r1
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	68f9      	ldr	r1, [r7, #12]
 8005d3e:	3104      	adds	r1, #4
 8005d40:	4613      	mov	r3, r2
 8005d42:	600b      	str	r3, [r1, #0]
}
 8005d44:	bf00      	nop
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	40023c00 	.word	0x40023c00

08005d54 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d94 <FLASH_Program_Word+0x40>)
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	4a0c      	ldr	r2, [pc, #48]	@ (8005d94 <FLASH_Program_Word+0x40>)
 8005d64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d68:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d94 <FLASH_Program_Word+0x40>)
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	4a09      	ldr	r2, [pc, #36]	@ (8005d94 <FLASH_Program_Word+0x40>)
 8005d70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d74:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005d76:	4b07      	ldr	r3, [pc, #28]	@ (8005d94 <FLASH_Program_Word+0x40>)
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	4a06      	ldr	r2, [pc, #24]	@ (8005d94 <FLASH_Program_Word+0x40>)
 8005d7c:	f043 0301 	orr.w	r3, r3, #1
 8005d80:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	601a      	str	r2, [r3, #0]
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	40023c00 	.word	0x40023c00

08005d98 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005da4:	4b0d      	ldr	r3, [pc, #52]	@ (8005ddc <FLASH_Program_HalfWord+0x44>)
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	4a0c      	ldr	r2, [pc, #48]	@ (8005ddc <FLASH_Program_HalfWord+0x44>)
 8005daa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005db0:	4b0a      	ldr	r3, [pc, #40]	@ (8005ddc <FLASH_Program_HalfWord+0x44>)
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	4a09      	ldr	r2, [pc, #36]	@ (8005ddc <FLASH_Program_HalfWord+0x44>)
 8005db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005dbc:	4b07      	ldr	r3, [pc, #28]	@ (8005ddc <FLASH_Program_HalfWord+0x44>)
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	4a06      	ldr	r2, [pc, #24]	@ (8005ddc <FLASH_Program_HalfWord+0x44>)
 8005dc2:	f043 0301 	orr.w	r3, r3, #1
 8005dc6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	887a      	ldrh	r2, [r7, #2]
 8005dcc:	801a      	strh	r2, [r3, #0]
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	40023c00 	.word	0x40023c00

08005de0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	460b      	mov	r3, r1
 8005dea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005dec:	4b0c      	ldr	r3, [pc, #48]	@ (8005e20 <FLASH_Program_Byte+0x40>)
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	4a0b      	ldr	r2, [pc, #44]	@ (8005e20 <FLASH_Program_Byte+0x40>)
 8005df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005df6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005df8:	4b09      	ldr	r3, [pc, #36]	@ (8005e20 <FLASH_Program_Byte+0x40>)
 8005dfa:	4a09      	ldr	r2, [pc, #36]	@ (8005e20 <FLASH_Program_Byte+0x40>)
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005e00:	4b07      	ldr	r3, [pc, #28]	@ (8005e20 <FLASH_Program_Byte+0x40>)
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	4a06      	ldr	r2, [pc, #24]	@ (8005e20 <FLASH_Program_Byte+0x40>)
 8005e06:	f043 0301 	orr.w	r3, r3, #1
 8005e0a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	78fa      	ldrb	r2, [r7, #3]
 8005e10:	701a      	strb	r2, [r3, #0]
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	40023c00 	.word	0x40023c00

08005e24 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005e28:	4b2f      	ldr	r3, [pc, #188]	@ (8005ee8 <FLASH_SetErrorCode+0xc4>)
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f003 0310 	and.w	r3, r3, #16
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d008      	beq.n	8005e46 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005e34:	4b2d      	ldr	r3, [pc, #180]	@ (8005eec <FLASH_SetErrorCode+0xc8>)
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	f043 0310 	orr.w	r3, r3, #16
 8005e3c:	4a2b      	ldr	r2, [pc, #172]	@ (8005eec <FLASH_SetErrorCode+0xc8>)
 8005e3e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005e40:	4b29      	ldr	r3, [pc, #164]	@ (8005ee8 <FLASH_SetErrorCode+0xc4>)
 8005e42:	2210      	movs	r2, #16
 8005e44:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005e46:	4b28      	ldr	r3, [pc, #160]	@ (8005ee8 <FLASH_SetErrorCode+0xc4>)
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d008      	beq.n	8005e64 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005e52:	4b26      	ldr	r3, [pc, #152]	@ (8005eec <FLASH_SetErrorCode+0xc8>)
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	f043 0308 	orr.w	r3, r3, #8
 8005e5a:	4a24      	ldr	r2, [pc, #144]	@ (8005eec <FLASH_SetErrorCode+0xc8>)
 8005e5c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005e5e:	4b22      	ldr	r3, [pc, #136]	@ (8005ee8 <FLASH_SetErrorCode+0xc4>)
 8005e60:	2220      	movs	r2, #32
 8005e62:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005e64:	4b20      	ldr	r3, [pc, #128]	@ (8005ee8 <FLASH_SetErrorCode+0xc4>)
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d008      	beq.n	8005e82 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005e70:	4b1e      	ldr	r3, [pc, #120]	@ (8005eec <FLASH_SetErrorCode+0xc8>)
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	f043 0304 	orr.w	r3, r3, #4
 8005e78:	4a1c      	ldr	r2, [pc, #112]	@ (8005eec <FLASH_SetErrorCode+0xc8>)
 8005e7a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ee8 <FLASH_SetErrorCode+0xc4>)
 8005e7e:	2240      	movs	r2, #64	@ 0x40
 8005e80:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005e82:	4b19      	ldr	r3, [pc, #100]	@ (8005ee8 <FLASH_SetErrorCode+0xc4>)
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d008      	beq.n	8005ea0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005e8e:	4b17      	ldr	r3, [pc, #92]	@ (8005eec <FLASH_SetErrorCode+0xc8>)
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	f043 0302 	orr.w	r3, r3, #2
 8005e96:	4a15      	ldr	r2, [pc, #84]	@ (8005eec <FLASH_SetErrorCode+0xc8>)
 8005e98:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005e9a:	4b13      	ldr	r3, [pc, #76]	@ (8005ee8 <FLASH_SetErrorCode+0xc4>)
 8005e9c:	2280      	movs	r2, #128	@ 0x80
 8005e9e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005ea0:	4b11      	ldr	r3, [pc, #68]	@ (8005ee8 <FLASH_SetErrorCode+0xc4>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d009      	beq.n	8005ec0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005eac:	4b0f      	ldr	r3, [pc, #60]	@ (8005eec <FLASH_SetErrorCode+0xc8>)
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	f043 0301 	orr.w	r3, r3, #1
 8005eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8005eec <FLASH_SetErrorCode+0xc8>)
 8005eb6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee8 <FLASH_SetErrorCode+0xc4>)
 8005eba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ebe:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005ec0:	4b09      	ldr	r3, [pc, #36]	@ (8005ee8 <FLASH_SetErrorCode+0xc4>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d008      	beq.n	8005ede <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005ecc:	4b07      	ldr	r3, [pc, #28]	@ (8005eec <FLASH_SetErrorCode+0xc8>)
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	f043 0320 	orr.w	r3, r3, #32
 8005ed4:	4a05      	ldr	r2, [pc, #20]	@ (8005eec <FLASH_SetErrorCode+0xc8>)
 8005ed6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005ed8:	4b03      	ldr	r3, [pc, #12]	@ (8005ee8 <FLASH_SetErrorCode+0xc4>)
 8005eda:	2202      	movs	r2, #2
 8005edc:	60da      	str	r2, [r3, #12]
  }
}
 8005ede:	bf00      	nop
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	40023c00 	.word	0x40023c00
 8005eec:	20008504 	.word	0x20008504

08005ef0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005f00:	78fb      	ldrb	r3, [r7, #3]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d102      	bne.n	8005f0c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005f06:	2300      	movs	r3, #0
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	e010      	b.n	8005f2e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005f0c:	78fb      	ldrb	r3, [r7, #3]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d103      	bne.n	8005f1a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005f12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	e009      	b.n	8005f2e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005f1a:	78fb      	ldrb	r3, [r7, #3]
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d103      	bne.n	8005f28 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005f20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	e002      	b.n	8005f2e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005f28:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005f2c:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b0b      	cmp	r3, #11
 8005f32:	d902      	bls.n	8005f3a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3304      	adds	r3, #4
 8005f38:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005f3a:	4b13      	ldr	r3, [pc, #76]	@ (8005f88 <FLASH_Erase_Sector+0x98>)
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	4a12      	ldr	r2, [pc, #72]	@ (8005f88 <FLASH_Erase_Sector+0x98>)
 8005f40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005f46:	4b10      	ldr	r3, [pc, #64]	@ (8005f88 <FLASH_Erase_Sector+0x98>)
 8005f48:	691a      	ldr	r2, [r3, #16]
 8005f4a:	490f      	ldr	r1, [pc, #60]	@ (8005f88 <FLASH_Erase_Sector+0x98>)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005f52:	4b0d      	ldr	r3, [pc, #52]	@ (8005f88 <FLASH_Erase_Sector+0x98>)
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	4a0c      	ldr	r2, [pc, #48]	@ (8005f88 <FLASH_Erase_Sector+0x98>)
 8005f58:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005f5c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8005f88 <FLASH_Erase_Sector+0x98>)
 8005f60:	691a      	ldr	r2, [r3, #16]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	4313      	orrs	r3, r2
 8005f68:	4a07      	ldr	r2, [pc, #28]	@ (8005f88 <FLASH_Erase_Sector+0x98>)
 8005f6a:	f043 0302 	orr.w	r3, r3, #2
 8005f6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005f70:	4b05      	ldr	r3, [pc, #20]	@ (8005f88 <FLASH_Erase_Sector+0x98>)
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	4a04      	ldr	r2, [pc, #16]	@ (8005f88 <FLASH_Erase_Sector+0x98>)
 8005f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f7a:	6113      	str	r3, [r2, #16]
}
 8005f7c:	bf00      	nop
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	40023c00 	.word	0x40023c00

08005f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b089      	sub	sp, #36	@ 0x24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61fb      	str	r3, [r7, #28]
 8005fa6:	e177      	b.n	8006298 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005fa8:	2201      	movs	r2, #1
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	f040 8166 	bne.w	8006292 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f003 0303 	and.w	r3, r3, #3
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d005      	beq.n	8005fde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d130      	bne.n	8006040 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	2203      	movs	r2, #3
 8005fea:	fa02 f303 	lsl.w	r3, r2, r3
 8005fee:	43db      	mvns	r3, r3
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68da      	ldr	r2, [r3, #12]
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	4313      	orrs	r3, r2
 8006006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	69ba      	ldr	r2, [r7, #24]
 800600c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006014:	2201      	movs	r2, #1
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	fa02 f303 	lsl.w	r3, r2, r3
 800601c:	43db      	mvns	r3, r3
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	4013      	ands	r3, r2
 8006022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	091b      	lsrs	r3, r3, #4
 800602a:	f003 0201 	and.w	r2, r3, #1
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	fa02 f303 	lsl.w	r3, r2, r3
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	4313      	orrs	r3, r2
 8006038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f003 0303 	and.w	r3, r3, #3
 8006048:	2b03      	cmp	r3, #3
 800604a:	d017      	beq.n	800607c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	005b      	lsls	r3, r3, #1
 8006056:	2203      	movs	r2, #3
 8006058:	fa02 f303 	lsl.w	r3, r2, r3
 800605c:	43db      	mvns	r3, r3
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	4013      	ands	r3, r2
 8006062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	689a      	ldr	r2, [r3, #8]
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	fa02 f303 	lsl.w	r3, r2, r3
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	4313      	orrs	r3, r2
 8006074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f003 0303 	and.w	r3, r3, #3
 8006084:	2b02      	cmp	r3, #2
 8006086:	d123      	bne.n	80060d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	08da      	lsrs	r2, r3, #3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	3208      	adds	r2, #8
 8006090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	220f      	movs	r2, #15
 80060a0:	fa02 f303 	lsl.w	r3, r2, r3
 80060a4:	43db      	mvns	r3, r3
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	4013      	ands	r3, r2
 80060aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	691a      	ldr	r2, [r3, #16]
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	f003 0307 	and.w	r3, r3, #7
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	4313      	orrs	r3, r2
 80060c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	08da      	lsrs	r2, r3, #3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3208      	adds	r2, #8
 80060ca:	69b9      	ldr	r1, [r7, #24]
 80060cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	005b      	lsls	r3, r3, #1
 80060da:	2203      	movs	r2, #3
 80060dc:	fa02 f303 	lsl.w	r3, r2, r3
 80060e0:	43db      	mvns	r3, r3
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	4013      	ands	r3, r2
 80060e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f003 0203 	and.w	r2, r3, #3
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	fa02 f303 	lsl.w	r3, r2, r3
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 80c0 	beq.w	8006292 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006112:	2300      	movs	r3, #0
 8006114:	60fb      	str	r3, [r7, #12]
 8006116:	4b66      	ldr	r3, [pc, #408]	@ (80062b0 <HAL_GPIO_Init+0x324>)
 8006118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800611a:	4a65      	ldr	r2, [pc, #404]	@ (80062b0 <HAL_GPIO_Init+0x324>)
 800611c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006120:	6453      	str	r3, [r2, #68]	@ 0x44
 8006122:	4b63      	ldr	r3, [pc, #396]	@ (80062b0 <HAL_GPIO_Init+0x324>)
 8006124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800612e:	4a61      	ldr	r2, [pc, #388]	@ (80062b4 <HAL_GPIO_Init+0x328>)
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	089b      	lsrs	r3, r3, #2
 8006134:	3302      	adds	r3, #2
 8006136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800613a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	f003 0303 	and.w	r3, r3, #3
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	220f      	movs	r2, #15
 8006146:	fa02 f303 	lsl.w	r3, r2, r3
 800614a:	43db      	mvns	r3, r3
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	4013      	ands	r3, r2
 8006150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a58      	ldr	r2, [pc, #352]	@ (80062b8 <HAL_GPIO_Init+0x32c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d037      	beq.n	80061ca <HAL_GPIO_Init+0x23e>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a57      	ldr	r2, [pc, #348]	@ (80062bc <HAL_GPIO_Init+0x330>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d031      	beq.n	80061c6 <HAL_GPIO_Init+0x23a>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a56      	ldr	r2, [pc, #344]	@ (80062c0 <HAL_GPIO_Init+0x334>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d02b      	beq.n	80061c2 <HAL_GPIO_Init+0x236>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a55      	ldr	r2, [pc, #340]	@ (80062c4 <HAL_GPIO_Init+0x338>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d025      	beq.n	80061be <HAL_GPIO_Init+0x232>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a54      	ldr	r2, [pc, #336]	@ (80062c8 <HAL_GPIO_Init+0x33c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d01f      	beq.n	80061ba <HAL_GPIO_Init+0x22e>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a53      	ldr	r2, [pc, #332]	@ (80062cc <HAL_GPIO_Init+0x340>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d019      	beq.n	80061b6 <HAL_GPIO_Init+0x22a>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a52      	ldr	r2, [pc, #328]	@ (80062d0 <HAL_GPIO_Init+0x344>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d013      	beq.n	80061b2 <HAL_GPIO_Init+0x226>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a51      	ldr	r2, [pc, #324]	@ (80062d4 <HAL_GPIO_Init+0x348>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d00d      	beq.n	80061ae <HAL_GPIO_Init+0x222>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a50      	ldr	r2, [pc, #320]	@ (80062d8 <HAL_GPIO_Init+0x34c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d007      	beq.n	80061aa <HAL_GPIO_Init+0x21e>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a4f      	ldr	r2, [pc, #316]	@ (80062dc <HAL_GPIO_Init+0x350>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d101      	bne.n	80061a6 <HAL_GPIO_Init+0x21a>
 80061a2:	2309      	movs	r3, #9
 80061a4:	e012      	b.n	80061cc <HAL_GPIO_Init+0x240>
 80061a6:	230a      	movs	r3, #10
 80061a8:	e010      	b.n	80061cc <HAL_GPIO_Init+0x240>
 80061aa:	2308      	movs	r3, #8
 80061ac:	e00e      	b.n	80061cc <HAL_GPIO_Init+0x240>
 80061ae:	2307      	movs	r3, #7
 80061b0:	e00c      	b.n	80061cc <HAL_GPIO_Init+0x240>
 80061b2:	2306      	movs	r3, #6
 80061b4:	e00a      	b.n	80061cc <HAL_GPIO_Init+0x240>
 80061b6:	2305      	movs	r3, #5
 80061b8:	e008      	b.n	80061cc <HAL_GPIO_Init+0x240>
 80061ba:	2304      	movs	r3, #4
 80061bc:	e006      	b.n	80061cc <HAL_GPIO_Init+0x240>
 80061be:	2303      	movs	r3, #3
 80061c0:	e004      	b.n	80061cc <HAL_GPIO_Init+0x240>
 80061c2:	2302      	movs	r3, #2
 80061c4:	e002      	b.n	80061cc <HAL_GPIO_Init+0x240>
 80061c6:	2301      	movs	r3, #1
 80061c8:	e000      	b.n	80061cc <HAL_GPIO_Init+0x240>
 80061ca:	2300      	movs	r3, #0
 80061cc:	69fa      	ldr	r2, [r7, #28]
 80061ce:	f002 0203 	and.w	r2, r2, #3
 80061d2:	0092      	lsls	r2, r2, #2
 80061d4:	4093      	lsls	r3, r2
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	4313      	orrs	r3, r2
 80061da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061dc:	4935      	ldr	r1, [pc, #212]	@ (80062b4 <HAL_GPIO_Init+0x328>)
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	089b      	lsrs	r3, r3, #2
 80061e2:	3302      	adds	r3, #2
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80061ea:	4b3d      	ldr	r3, [pc, #244]	@ (80062e0 <HAL_GPIO_Init+0x354>)
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	43db      	mvns	r3, r3
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	4013      	ands	r3, r2
 80061f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	4313      	orrs	r3, r2
 800620c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800620e:	4a34      	ldr	r2, [pc, #208]	@ (80062e0 <HAL_GPIO_Init+0x354>)
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006214:	4b32      	ldr	r3, [pc, #200]	@ (80062e0 <HAL_GPIO_Init+0x354>)
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	43db      	mvns	r3, r3
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	4013      	ands	r3, r2
 8006222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	4313      	orrs	r3, r2
 8006236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006238:	4a29      	ldr	r2, [pc, #164]	@ (80062e0 <HAL_GPIO_Init+0x354>)
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800623e:	4b28      	ldr	r3, [pc, #160]	@ (80062e0 <HAL_GPIO_Init+0x354>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	43db      	mvns	r3, r3
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	4013      	ands	r3, r2
 800624c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	4313      	orrs	r3, r2
 8006260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006262:	4a1f      	ldr	r2, [pc, #124]	@ (80062e0 <HAL_GPIO_Init+0x354>)
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006268:	4b1d      	ldr	r3, [pc, #116]	@ (80062e0 <HAL_GPIO_Init+0x354>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	43db      	mvns	r3, r3
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	4013      	ands	r3, r2
 8006276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	4313      	orrs	r3, r2
 800628a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800628c:	4a14      	ldr	r2, [pc, #80]	@ (80062e0 <HAL_GPIO_Init+0x354>)
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	3301      	adds	r3, #1
 8006296:	61fb      	str	r3, [r7, #28]
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	2b0f      	cmp	r3, #15
 800629c:	f67f ae84 	bls.w	8005fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80062a0:	bf00      	nop
 80062a2:	bf00      	nop
 80062a4:	3724      	adds	r7, #36	@ 0x24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	40023800 	.word	0x40023800
 80062b4:	40013800 	.word	0x40013800
 80062b8:	40020000 	.word	0x40020000
 80062bc:	40020400 	.word	0x40020400
 80062c0:	40020800 	.word	0x40020800
 80062c4:	40020c00 	.word	0x40020c00
 80062c8:	40021000 	.word	0x40021000
 80062cc:	40021400 	.word	0x40021400
 80062d0:	40021800 	.word	0x40021800
 80062d4:	40021c00 	.word	0x40021c00
 80062d8:	40022000 	.word	0x40022000
 80062dc:	40022400 	.word	0x40022400
 80062e0:	40013c00 	.word	0x40013c00

080062e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062fa:	2300      	movs	r3, #0
 80062fc:	617b      	str	r3, [r7, #20]
 80062fe:	e0d9      	b.n	80064b4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006300:	2201      	movs	r2, #1
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	fa02 f303 	lsl.w	r3, r2, r3
 8006308:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	4013      	ands	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	429a      	cmp	r2, r3
 8006318:	f040 80c9 	bne.w	80064ae <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800631c:	4a6b      	ldr	r2, [pc, #428]	@ (80064cc <HAL_GPIO_DeInit+0x1e8>)
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	089b      	lsrs	r3, r3, #2
 8006322:	3302      	adds	r3, #2
 8006324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006328:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f003 0303 	and.w	r3, r3, #3
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	220f      	movs	r2, #15
 8006334:	fa02 f303 	lsl.w	r3, r2, r3
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	4013      	ands	r3, r2
 800633c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a63      	ldr	r2, [pc, #396]	@ (80064d0 <HAL_GPIO_DeInit+0x1ec>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d037      	beq.n	80063b6 <HAL_GPIO_DeInit+0xd2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a62      	ldr	r2, [pc, #392]	@ (80064d4 <HAL_GPIO_DeInit+0x1f0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d031      	beq.n	80063b2 <HAL_GPIO_DeInit+0xce>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a61      	ldr	r2, [pc, #388]	@ (80064d8 <HAL_GPIO_DeInit+0x1f4>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d02b      	beq.n	80063ae <HAL_GPIO_DeInit+0xca>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a60      	ldr	r2, [pc, #384]	@ (80064dc <HAL_GPIO_DeInit+0x1f8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d025      	beq.n	80063aa <HAL_GPIO_DeInit+0xc6>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a5f      	ldr	r2, [pc, #380]	@ (80064e0 <HAL_GPIO_DeInit+0x1fc>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d01f      	beq.n	80063a6 <HAL_GPIO_DeInit+0xc2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a5e      	ldr	r2, [pc, #376]	@ (80064e4 <HAL_GPIO_DeInit+0x200>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d019      	beq.n	80063a2 <HAL_GPIO_DeInit+0xbe>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a5d      	ldr	r2, [pc, #372]	@ (80064e8 <HAL_GPIO_DeInit+0x204>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d013      	beq.n	800639e <HAL_GPIO_DeInit+0xba>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a5c      	ldr	r2, [pc, #368]	@ (80064ec <HAL_GPIO_DeInit+0x208>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00d      	beq.n	800639a <HAL_GPIO_DeInit+0xb6>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a5b      	ldr	r2, [pc, #364]	@ (80064f0 <HAL_GPIO_DeInit+0x20c>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d007      	beq.n	8006396 <HAL_GPIO_DeInit+0xb2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a5a      	ldr	r2, [pc, #360]	@ (80064f4 <HAL_GPIO_DeInit+0x210>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d101      	bne.n	8006392 <HAL_GPIO_DeInit+0xae>
 800638e:	2309      	movs	r3, #9
 8006390:	e012      	b.n	80063b8 <HAL_GPIO_DeInit+0xd4>
 8006392:	230a      	movs	r3, #10
 8006394:	e010      	b.n	80063b8 <HAL_GPIO_DeInit+0xd4>
 8006396:	2308      	movs	r3, #8
 8006398:	e00e      	b.n	80063b8 <HAL_GPIO_DeInit+0xd4>
 800639a:	2307      	movs	r3, #7
 800639c:	e00c      	b.n	80063b8 <HAL_GPIO_DeInit+0xd4>
 800639e:	2306      	movs	r3, #6
 80063a0:	e00a      	b.n	80063b8 <HAL_GPIO_DeInit+0xd4>
 80063a2:	2305      	movs	r3, #5
 80063a4:	e008      	b.n	80063b8 <HAL_GPIO_DeInit+0xd4>
 80063a6:	2304      	movs	r3, #4
 80063a8:	e006      	b.n	80063b8 <HAL_GPIO_DeInit+0xd4>
 80063aa:	2303      	movs	r3, #3
 80063ac:	e004      	b.n	80063b8 <HAL_GPIO_DeInit+0xd4>
 80063ae:	2302      	movs	r3, #2
 80063b0:	e002      	b.n	80063b8 <HAL_GPIO_DeInit+0xd4>
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <HAL_GPIO_DeInit+0xd4>
 80063b6:	2300      	movs	r3, #0
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	f002 0203 	and.w	r2, r2, #3
 80063be:	0092      	lsls	r2, r2, #2
 80063c0:	4093      	lsls	r3, r2
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d132      	bne.n	800642e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80063c8:	4b4b      	ldr	r3, [pc, #300]	@ (80064f8 <HAL_GPIO_DeInit+0x214>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	43db      	mvns	r3, r3
 80063d0:	4949      	ldr	r1, [pc, #292]	@ (80064f8 <HAL_GPIO_DeInit+0x214>)
 80063d2:	4013      	ands	r3, r2
 80063d4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80063d6:	4b48      	ldr	r3, [pc, #288]	@ (80064f8 <HAL_GPIO_DeInit+0x214>)
 80063d8:	685a      	ldr	r2, [r3, #4]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	43db      	mvns	r3, r3
 80063de:	4946      	ldr	r1, [pc, #280]	@ (80064f8 <HAL_GPIO_DeInit+0x214>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80063e4:	4b44      	ldr	r3, [pc, #272]	@ (80064f8 <HAL_GPIO_DeInit+0x214>)
 80063e6:	68da      	ldr	r2, [r3, #12]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	43db      	mvns	r3, r3
 80063ec:	4942      	ldr	r1, [pc, #264]	@ (80064f8 <HAL_GPIO_DeInit+0x214>)
 80063ee:	4013      	ands	r3, r2
 80063f0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80063f2:	4b41      	ldr	r3, [pc, #260]	@ (80064f8 <HAL_GPIO_DeInit+0x214>)
 80063f4:	689a      	ldr	r2, [r3, #8]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	43db      	mvns	r3, r3
 80063fa:	493f      	ldr	r1, [pc, #252]	@ (80064f8 <HAL_GPIO_DeInit+0x214>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	220f      	movs	r2, #15
 800640a:	fa02 f303 	lsl.w	r3, r2, r3
 800640e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006410:	4a2e      	ldr	r2, [pc, #184]	@ (80064cc <HAL_GPIO_DeInit+0x1e8>)
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	089b      	lsrs	r3, r3, #2
 8006416:	3302      	adds	r3, #2
 8006418:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	43da      	mvns	r2, r3
 8006420:	482a      	ldr	r0, [pc, #168]	@ (80064cc <HAL_GPIO_DeInit+0x1e8>)
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	089b      	lsrs	r3, r3, #2
 8006426:	400a      	ands	r2, r1
 8006428:	3302      	adds	r3, #2
 800642a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	2103      	movs	r1, #3
 8006438:	fa01 f303 	lsl.w	r3, r1, r3
 800643c:	43db      	mvns	r3, r3
 800643e:	401a      	ands	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	08da      	lsrs	r2, r3, #3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3208      	adds	r2, #8
 800644c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f003 0307 	and.w	r3, r3, #7
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	220f      	movs	r2, #15
 800645a:	fa02 f303 	lsl.w	r3, r2, r3
 800645e:	43db      	mvns	r3, r3
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	08d2      	lsrs	r2, r2, #3
 8006464:	4019      	ands	r1, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	3208      	adds	r2, #8
 800646a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68da      	ldr	r2, [r3, #12]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	2103      	movs	r1, #3
 8006478:	fa01 f303 	lsl.w	r3, r1, r3
 800647c:	43db      	mvns	r3, r3
 800647e:	401a      	ands	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	2101      	movs	r1, #1
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	fa01 f303 	lsl.w	r3, r1, r3
 8006490:	43db      	mvns	r3, r3
 8006492:	401a      	ands	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	2103      	movs	r1, #3
 80064a2:	fa01 f303 	lsl.w	r3, r1, r3
 80064a6:	43db      	mvns	r3, r3
 80064a8:	401a      	ands	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	3301      	adds	r3, #1
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	2b0f      	cmp	r3, #15
 80064b8:	f67f af22 	bls.w	8006300 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80064bc:	bf00      	nop
 80064be:	bf00      	nop
 80064c0:	371c      	adds	r7, #28
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	40013800 	.word	0x40013800
 80064d0:	40020000 	.word	0x40020000
 80064d4:	40020400 	.word	0x40020400
 80064d8:	40020800 	.word	0x40020800
 80064dc:	40020c00 	.word	0x40020c00
 80064e0:	40021000 	.word	0x40021000
 80064e4:	40021400 	.word	0x40021400
 80064e8:	40021800 	.word	0x40021800
 80064ec:	40021c00 	.word	0x40021c00
 80064f0:	40022000 	.word	0x40022000
 80064f4:	40022400 	.word	0x40022400
 80064f8:	40013c00 	.word	0x40013c00

080064fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	460b      	mov	r3, r1
 8006506:	807b      	strh	r3, [r7, #2]
 8006508:	4613      	mov	r3, r2
 800650a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800650c:	787b      	ldrb	r3, [r7, #1]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006512:	887a      	ldrh	r2, [r7, #2]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006518:	e003      	b.n	8006522 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800651a:	887b      	ldrh	r3, [r7, #2]
 800651c:	041a      	lsls	r2, r3, #16
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	619a      	str	r2, [r3, #24]
}
 8006522:	bf00      	nop
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b086      	sub	sp, #24
 8006532:	af02      	add	r7, sp, #8
 8006534:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e059      	b.n	80065f4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d106      	bne.n	8006560 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f00a fbfe 	bl	8010d5c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2203      	movs	r2, #3
 8006564:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800656e:	d102      	bne.n	8006576 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4618      	mov	r0, r3
 800657c:	f006 fcaf 	bl	800cede <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	7c1a      	ldrb	r2, [r3, #16]
 8006588:	f88d 2000 	strb.w	r2, [sp]
 800658c:	3304      	adds	r3, #4
 800658e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006590:	f006 fc30 	bl	800cdf4 <USB_CoreInit>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d005      	beq.n	80065a6 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2202      	movs	r2, #2
 800659e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e026      	b.n	80065f4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2101      	movs	r1, #1
 80065ac:	4618      	mov	r0, r3
 80065ae:	f006 fca7 	bl	800cf00 <USB_SetCurrentMode>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d005      	beq.n	80065c4 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2202      	movs	r2, #2
 80065bc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e017      	b.n	80065f4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6818      	ldr	r0, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	7c1a      	ldrb	r2, [r3, #16]
 80065cc:	f88d 2000 	strb.w	r2, [sp]
 80065d0:	3304      	adds	r3, #4
 80065d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80065d4:	f006 fe4a 	bl	800d26c <USB_HostInit>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d005      	beq.n	80065ea <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2202      	movs	r2, #2
 80065e2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e004      	b.n	80065f4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80065fc:	b590      	push	{r4, r7, lr}
 80065fe:	b08b      	sub	sp, #44	@ 0x2c
 8006600:	af04      	add	r7, sp, #16
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	4608      	mov	r0, r1
 8006606:	4611      	mov	r1, r2
 8006608:	461a      	mov	r2, r3
 800660a:	4603      	mov	r3, r0
 800660c:	70fb      	strb	r3, [r7, #3]
 800660e:	460b      	mov	r3, r1
 8006610:	70bb      	strb	r3, [r7, #2]
 8006612:	4613      	mov	r3, r2
 8006614:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8006616:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006618:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006620:	2b01      	cmp	r3, #1
 8006622:	d101      	bne.n	8006628 <HAL_HCD_HC_Init+0x2c>
 8006624:	2302      	movs	r3, #2
 8006626:	e09d      	b.n	8006764 <HAL_HCD_HC_Init+0x168>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8006630:	78fa      	ldrb	r2, [r7, #3]
 8006632:	6879      	ldr	r1, [r7, #4]
 8006634:	4613      	mov	r3, r2
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	1a9b      	subs	r3, r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	440b      	add	r3, r1
 800663e:	3319      	adds	r3, #25
 8006640:	2200      	movs	r2, #0
 8006642:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8006644:	78fa      	ldrb	r2, [r7, #3]
 8006646:	6879      	ldr	r1, [r7, #4]
 8006648:	4613      	mov	r3, r2
 800664a:	011b      	lsls	r3, r3, #4
 800664c:	1a9b      	subs	r3, r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	440b      	add	r3, r1
 8006652:	3314      	adds	r3, #20
 8006654:	787a      	ldrb	r2, [r7, #1]
 8006656:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006658:	78fa      	ldrb	r2, [r7, #3]
 800665a:	6879      	ldr	r1, [r7, #4]
 800665c:	4613      	mov	r3, r2
 800665e:	011b      	lsls	r3, r3, #4
 8006660:	1a9b      	subs	r3, r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	440b      	add	r3, r1
 8006666:	3315      	adds	r3, #21
 8006668:	78fa      	ldrb	r2, [r7, #3]
 800666a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800666c:	78fa      	ldrb	r2, [r7, #3]
 800666e:	6879      	ldr	r1, [r7, #4]
 8006670:	4613      	mov	r3, r2
 8006672:	011b      	lsls	r3, r3, #4
 8006674:	1a9b      	subs	r3, r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	440b      	add	r3, r1
 800667a:	3326      	adds	r3, #38	@ 0x26
 800667c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8006680:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006682:	78fa      	ldrb	r2, [r7, #3]
 8006684:	78bb      	ldrb	r3, [r7, #2]
 8006686:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800668a:	b2d8      	uxtb	r0, r3
 800668c:	6879      	ldr	r1, [r7, #4]
 800668e:	4613      	mov	r3, r2
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	1a9b      	subs	r3, r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	440b      	add	r3, r1
 8006698:	3316      	adds	r3, #22
 800669a:	4602      	mov	r2, r0
 800669c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800669e:	78fb      	ldrb	r3, [r7, #3]
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fbc8 	bl	8006e38 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80066a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	da0a      	bge.n	80066c6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80066b0:	78fa      	ldrb	r2, [r7, #3]
 80066b2:	6879      	ldr	r1, [r7, #4]
 80066b4:	4613      	mov	r3, r2
 80066b6:	011b      	lsls	r3, r3, #4
 80066b8:	1a9b      	subs	r3, r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	440b      	add	r3, r1
 80066be:	3317      	adds	r3, #23
 80066c0:	2201      	movs	r2, #1
 80066c2:	701a      	strb	r2, [r3, #0]
 80066c4:	e009      	b.n	80066da <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80066c6:	78fa      	ldrb	r2, [r7, #3]
 80066c8:	6879      	ldr	r1, [r7, #4]
 80066ca:	4613      	mov	r3, r2
 80066cc:	011b      	lsls	r3, r3, #4
 80066ce:	1a9b      	subs	r3, r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	440b      	add	r3, r1
 80066d4:	3317      	adds	r3, #23
 80066d6:	2200      	movs	r2, #0
 80066d8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4618      	mov	r0, r3
 80066e0:	f006 ff28 	bl	800d534 <USB_GetHostSpeed>
 80066e4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80066e6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d10b      	bne.n	8006706 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80066ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d107      	bne.n	8006706 <HAL_HCD_HC_Init+0x10a>
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d104      	bne.n	8006706 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2bbc      	cmp	r3, #188	@ 0xbc
 8006700:	d901      	bls.n	8006706 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8006702:	23bc      	movs	r3, #188	@ 0xbc
 8006704:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8006706:	78fa      	ldrb	r2, [r7, #3]
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	4613      	mov	r3, r2
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	1a9b      	subs	r3, r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	440b      	add	r3, r1
 8006714:	3318      	adds	r3, #24
 8006716:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800671a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800671c:	78fa      	ldrb	r2, [r7, #3]
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	b298      	uxth	r0, r3
 8006722:	6879      	ldr	r1, [r7, #4]
 8006724:	4613      	mov	r3, r2
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	1a9b      	subs	r3, r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	440b      	add	r3, r1
 800672e:	3328      	adds	r3, #40	@ 0x28
 8006730:	4602      	mov	r2, r0
 8006732:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6818      	ldr	r0, [r3, #0]
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	b29b      	uxth	r3, r3
 800673c:	787c      	ldrb	r4, [r7, #1]
 800673e:	78ba      	ldrb	r2, [r7, #2]
 8006740:	78f9      	ldrb	r1, [r7, #3]
 8006742:	9302      	str	r3, [sp, #8]
 8006744:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006748:	9301      	str	r3, [sp, #4]
 800674a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	4623      	mov	r3, r4
 8006752:	f006 ff17 	bl	800d584 <USB_HC_Init>
 8006756:	4603      	mov	r3, r0
 8006758:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8006762:	7bfb      	ldrb	r3, [r7, #15]
}
 8006764:	4618      	mov	r0, r3
 8006766:	371c      	adds	r7, #28
 8006768:	46bd      	mov	sp, r7
 800676a:	bd90      	pop	{r4, r7, pc}

0800676c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006778:	2300      	movs	r3, #0
 800677a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006782:	2b01      	cmp	r3, #1
 8006784:	d101      	bne.n	800678a <HAL_HCD_HC_Halt+0x1e>
 8006786:	2302      	movs	r3, #2
 8006788:	e00f      	b.n	80067aa <HAL_HCD_HC_Halt+0x3e>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	78fa      	ldrb	r2, [r7, #3]
 8006798:	4611      	mov	r1, r2
 800679a:	4618      	mov	r0, r3
 800679c:	f007 faa9 	bl	800dcf2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
	...

080067b4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	4608      	mov	r0, r1
 80067be:	4611      	mov	r1, r2
 80067c0:	461a      	mov	r2, r3
 80067c2:	4603      	mov	r3, r0
 80067c4:	70fb      	strb	r3, [r7, #3]
 80067c6:	460b      	mov	r3, r1
 80067c8:	70bb      	strb	r3, [r7, #2]
 80067ca:	4613      	mov	r3, r2
 80067cc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80067ce:	78fa      	ldrb	r2, [r7, #3]
 80067d0:	6879      	ldr	r1, [r7, #4]
 80067d2:	4613      	mov	r3, r2
 80067d4:	011b      	lsls	r3, r3, #4
 80067d6:	1a9b      	subs	r3, r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	440b      	add	r3, r1
 80067dc:	3317      	adds	r3, #23
 80067de:	78ba      	ldrb	r2, [r7, #2]
 80067e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80067e2:	78fa      	ldrb	r2, [r7, #3]
 80067e4:	6879      	ldr	r1, [r7, #4]
 80067e6:	4613      	mov	r3, r2
 80067e8:	011b      	lsls	r3, r3, #4
 80067ea:	1a9b      	subs	r3, r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	440b      	add	r3, r1
 80067f0:	3326      	adds	r3, #38	@ 0x26
 80067f2:	787a      	ldrb	r2, [r7, #1]
 80067f4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80067f6:	7c3b      	ldrb	r3, [r7, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d114      	bne.n	8006826 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80067fc:	78fa      	ldrb	r2, [r7, #3]
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	4613      	mov	r3, r2
 8006802:	011b      	lsls	r3, r3, #4
 8006804:	1a9b      	subs	r3, r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	440b      	add	r3, r1
 800680a:	332a      	adds	r3, #42	@ 0x2a
 800680c:	2203      	movs	r2, #3
 800680e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006810:	78fa      	ldrb	r2, [r7, #3]
 8006812:	6879      	ldr	r1, [r7, #4]
 8006814:	4613      	mov	r3, r2
 8006816:	011b      	lsls	r3, r3, #4
 8006818:	1a9b      	subs	r3, r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	440b      	add	r3, r1
 800681e:	3319      	adds	r3, #25
 8006820:	7f3a      	ldrb	r2, [r7, #28]
 8006822:	701a      	strb	r2, [r3, #0]
 8006824:	e009      	b.n	800683a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006826:	78fa      	ldrb	r2, [r7, #3]
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	4613      	mov	r3, r2
 800682c:	011b      	lsls	r3, r3, #4
 800682e:	1a9b      	subs	r3, r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	440b      	add	r3, r1
 8006834:	332a      	adds	r3, #42	@ 0x2a
 8006836:	2202      	movs	r2, #2
 8006838:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800683a:	787b      	ldrb	r3, [r7, #1]
 800683c:	2b03      	cmp	r3, #3
 800683e:	f200 8102 	bhi.w	8006a46 <HAL_HCD_HC_SubmitRequest+0x292>
 8006842:	a201      	add	r2, pc, #4	@ (adr r2, 8006848 <HAL_HCD_HC_SubmitRequest+0x94>)
 8006844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006848:	08006859 	.word	0x08006859
 800684c:	08006a31 	.word	0x08006a31
 8006850:	0800691d 	.word	0x0800691d
 8006854:	080069a7 	.word	0x080069a7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8006858:	7c3b      	ldrb	r3, [r7, #16]
 800685a:	2b01      	cmp	r3, #1
 800685c:	f040 80f5 	bne.w	8006a4a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8006860:	78bb      	ldrb	r3, [r7, #2]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d12d      	bne.n	80068c2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8006866:	8b3b      	ldrh	r3, [r7, #24]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d109      	bne.n	8006880 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800686c:	78fa      	ldrb	r2, [r7, #3]
 800686e:	6879      	ldr	r1, [r7, #4]
 8006870:	4613      	mov	r3, r2
 8006872:	011b      	lsls	r3, r3, #4
 8006874:	1a9b      	subs	r3, r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	440b      	add	r3, r1
 800687a:	333d      	adds	r3, #61	@ 0x3d
 800687c:	2201      	movs	r2, #1
 800687e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8006880:	78fa      	ldrb	r2, [r7, #3]
 8006882:	6879      	ldr	r1, [r7, #4]
 8006884:	4613      	mov	r3, r2
 8006886:	011b      	lsls	r3, r3, #4
 8006888:	1a9b      	subs	r3, r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	440b      	add	r3, r1
 800688e:	333d      	adds	r3, #61	@ 0x3d
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10a      	bne.n	80068ac <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006896:	78fa      	ldrb	r2, [r7, #3]
 8006898:	6879      	ldr	r1, [r7, #4]
 800689a:	4613      	mov	r3, r2
 800689c:	011b      	lsls	r3, r3, #4
 800689e:	1a9b      	subs	r3, r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	440b      	add	r3, r1
 80068a4:	332a      	adds	r3, #42	@ 0x2a
 80068a6:	2200      	movs	r2, #0
 80068a8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80068aa:	e0ce      	b.n	8006a4a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80068ac:	78fa      	ldrb	r2, [r7, #3]
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	4613      	mov	r3, r2
 80068b2:	011b      	lsls	r3, r3, #4
 80068b4:	1a9b      	subs	r3, r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	440b      	add	r3, r1
 80068ba:	332a      	adds	r3, #42	@ 0x2a
 80068bc:	2202      	movs	r2, #2
 80068be:	701a      	strb	r2, [r3, #0]
      break;
 80068c0:	e0c3      	b.n	8006a4a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80068c2:	78fa      	ldrb	r2, [r7, #3]
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	4613      	mov	r3, r2
 80068c8:	011b      	lsls	r3, r3, #4
 80068ca:	1a9b      	subs	r3, r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	440b      	add	r3, r1
 80068d0:	331a      	adds	r3, #26
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	f040 80b8 	bne.w	8006a4a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80068da:	78fa      	ldrb	r2, [r7, #3]
 80068dc:	6879      	ldr	r1, [r7, #4]
 80068de:	4613      	mov	r3, r2
 80068e0:	011b      	lsls	r3, r3, #4
 80068e2:	1a9b      	subs	r3, r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	440b      	add	r3, r1
 80068e8:	333c      	adds	r3, #60	@ 0x3c
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10a      	bne.n	8006906 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80068f0:	78fa      	ldrb	r2, [r7, #3]
 80068f2:	6879      	ldr	r1, [r7, #4]
 80068f4:	4613      	mov	r3, r2
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	1a9b      	subs	r3, r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	440b      	add	r3, r1
 80068fe:	332a      	adds	r3, #42	@ 0x2a
 8006900:	2200      	movs	r2, #0
 8006902:	701a      	strb	r2, [r3, #0]
      break;
 8006904:	e0a1      	b.n	8006a4a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006906:	78fa      	ldrb	r2, [r7, #3]
 8006908:	6879      	ldr	r1, [r7, #4]
 800690a:	4613      	mov	r3, r2
 800690c:	011b      	lsls	r3, r3, #4
 800690e:	1a9b      	subs	r3, r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	440b      	add	r3, r1
 8006914:	332a      	adds	r3, #42	@ 0x2a
 8006916:	2202      	movs	r2, #2
 8006918:	701a      	strb	r2, [r3, #0]
      break;
 800691a:	e096      	b.n	8006a4a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800691c:	78bb      	ldrb	r3, [r7, #2]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d120      	bne.n	8006964 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006922:	78fa      	ldrb	r2, [r7, #3]
 8006924:	6879      	ldr	r1, [r7, #4]
 8006926:	4613      	mov	r3, r2
 8006928:	011b      	lsls	r3, r3, #4
 800692a:	1a9b      	subs	r3, r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	440b      	add	r3, r1
 8006930:	333d      	adds	r3, #61	@ 0x3d
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10a      	bne.n	800694e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006938:	78fa      	ldrb	r2, [r7, #3]
 800693a:	6879      	ldr	r1, [r7, #4]
 800693c:	4613      	mov	r3, r2
 800693e:	011b      	lsls	r3, r3, #4
 8006940:	1a9b      	subs	r3, r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	440b      	add	r3, r1
 8006946:	332a      	adds	r3, #42	@ 0x2a
 8006948:	2200      	movs	r2, #0
 800694a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800694c:	e07e      	b.n	8006a4c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800694e:	78fa      	ldrb	r2, [r7, #3]
 8006950:	6879      	ldr	r1, [r7, #4]
 8006952:	4613      	mov	r3, r2
 8006954:	011b      	lsls	r3, r3, #4
 8006956:	1a9b      	subs	r3, r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	440b      	add	r3, r1
 800695c:	332a      	adds	r3, #42	@ 0x2a
 800695e:	2202      	movs	r2, #2
 8006960:	701a      	strb	r2, [r3, #0]
      break;
 8006962:	e073      	b.n	8006a4c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006964:	78fa      	ldrb	r2, [r7, #3]
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	4613      	mov	r3, r2
 800696a:	011b      	lsls	r3, r3, #4
 800696c:	1a9b      	subs	r3, r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	440b      	add	r3, r1
 8006972:	333c      	adds	r3, #60	@ 0x3c
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10a      	bne.n	8006990 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800697a:	78fa      	ldrb	r2, [r7, #3]
 800697c:	6879      	ldr	r1, [r7, #4]
 800697e:	4613      	mov	r3, r2
 8006980:	011b      	lsls	r3, r3, #4
 8006982:	1a9b      	subs	r3, r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	440b      	add	r3, r1
 8006988:	332a      	adds	r3, #42	@ 0x2a
 800698a:	2200      	movs	r2, #0
 800698c:	701a      	strb	r2, [r3, #0]
      break;
 800698e:	e05d      	b.n	8006a4c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006990:	78fa      	ldrb	r2, [r7, #3]
 8006992:	6879      	ldr	r1, [r7, #4]
 8006994:	4613      	mov	r3, r2
 8006996:	011b      	lsls	r3, r3, #4
 8006998:	1a9b      	subs	r3, r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	440b      	add	r3, r1
 800699e:	332a      	adds	r3, #42	@ 0x2a
 80069a0:	2202      	movs	r2, #2
 80069a2:	701a      	strb	r2, [r3, #0]
      break;
 80069a4:	e052      	b.n	8006a4c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80069a6:	78bb      	ldrb	r3, [r7, #2]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d120      	bne.n	80069ee <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80069ac:	78fa      	ldrb	r2, [r7, #3]
 80069ae:	6879      	ldr	r1, [r7, #4]
 80069b0:	4613      	mov	r3, r2
 80069b2:	011b      	lsls	r3, r3, #4
 80069b4:	1a9b      	subs	r3, r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	440b      	add	r3, r1
 80069ba:	333d      	adds	r3, #61	@ 0x3d
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10a      	bne.n	80069d8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80069c2:	78fa      	ldrb	r2, [r7, #3]
 80069c4:	6879      	ldr	r1, [r7, #4]
 80069c6:	4613      	mov	r3, r2
 80069c8:	011b      	lsls	r3, r3, #4
 80069ca:	1a9b      	subs	r3, r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	440b      	add	r3, r1
 80069d0:	332a      	adds	r3, #42	@ 0x2a
 80069d2:	2200      	movs	r2, #0
 80069d4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80069d6:	e039      	b.n	8006a4c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80069d8:	78fa      	ldrb	r2, [r7, #3]
 80069da:	6879      	ldr	r1, [r7, #4]
 80069dc:	4613      	mov	r3, r2
 80069de:	011b      	lsls	r3, r3, #4
 80069e0:	1a9b      	subs	r3, r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	440b      	add	r3, r1
 80069e6:	332a      	adds	r3, #42	@ 0x2a
 80069e8:	2202      	movs	r2, #2
 80069ea:	701a      	strb	r2, [r3, #0]
      break;
 80069ec:	e02e      	b.n	8006a4c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80069ee:	78fa      	ldrb	r2, [r7, #3]
 80069f0:	6879      	ldr	r1, [r7, #4]
 80069f2:	4613      	mov	r3, r2
 80069f4:	011b      	lsls	r3, r3, #4
 80069f6:	1a9b      	subs	r3, r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	440b      	add	r3, r1
 80069fc:	333c      	adds	r3, #60	@ 0x3c
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10a      	bne.n	8006a1a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006a04:	78fa      	ldrb	r2, [r7, #3]
 8006a06:	6879      	ldr	r1, [r7, #4]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	011b      	lsls	r3, r3, #4
 8006a0c:	1a9b      	subs	r3, r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	440b      	add	r3, r1
 8006a12:	332a      	adds	r3, #42	@ 0x2a
 8006a14:	2200      	movs	r2, #0
 8006a16:	701a      	strb	r2, [r3, #0]
      break;
 8006a18:	e018      	b.n	8006a4c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006a1a:	78fa      	ldrb	r2, [r7, #3]
 8006a1c:	6879      	ldr	r1, [r7, #4]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	011b      	lsls	r3, r3, #4
 8006a22:	1a9b      	subs	r3, r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	440b      	add	r3, r1
 8006a28:	332a      	adds	r3, #42	@ 0x2a
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	701a      	strb	r2, [r3, #0]
      break;
 8006a2e:	e00d      	b.n	8006a4c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006a30:	78fa      	ldrb	r2, [r7, #3]
 8006a32:	6879      	ldr	r1, [r7, #4]
 8006a34:	4613      	mov	r3, r2
 8006a36:	011b      	lsls	r3, r3, #4
 8006a38:	1a9b      	subs	r3, r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	440b      	add	r3, r1
 8006a3e:	332a      	adds	r3, #42	@ 0x2a
 8006a40:	2200      	movs	r2, #0
 8006a42:	701a      	strb	r2, [r3, #0]
      break;
 8006a44:	e002      	b.n	8006a4c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8006a46:	bf00      	nop
 8006a48:	e000      	b.n	8006a4c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8006a4a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006a4c:	78fa      	ldrb	r2, [r7, #3]
 8006a4e:	6879      	ldr	r1, [r7, #4]
 8006a50:	4613      	mov	r3, r2
 8006a52:	011b      	lsls	r3, r3, #4
 8006a54:	1a9b      	subs	r3, r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	440b      	add	r3, r1
 8006a5a:	332c      	adds	r3, #44	@ 0x2c
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006a60:	78fa      	ldrb	r2, [r7, #3]
 8006a62:	8b39      	ldrh	r1, [r7, #24]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	4613      	mov	r3, r2
 8006a68:	011b      	lsls	r3, r3, #4
 8006a6a:	1a9b      	subs	r3, r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4403      	add	r3, r0
 8006a70:	3334      	adds	r3, #52	@ 0x34
 8006a72:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006a74:	78fa      	ldrb	r2, [r7, #3]
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	011b      	lsls	r3, r3, #4
 8006a7c:	1a9b      	subs	r3, r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	440b      	add	r3, r1
 8006a82:	334c      	adds	r3, #76	@ 0x4c
 8006a84:	2200      	movs	r2, #0
 8006a86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006a88:	78fa      	ldrb	r2, [r7, #3]
 8006a8a:	6879      	ldr	r1, [r7, #4]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	011b      	lsls	r3, r3, #4
 8006a90:	1a9b      	subs	r3, r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	440b      	add	r3, r1
 8006a96:	3338      	adds	r3, #56	@ 0x38
 8006a98:	2200      	movs	r2, #0
 8006a9a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006a9c:	78fa      	ldrb	r2, [r7, #3]
 8006a9e:	6879      	ldr	r1, [r7, #4]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	011b      	lsls	r3, r3, #4
 8006aa4:	1a9b      	subs	r3, r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	440b      	add	r3, r1
 8006aaa:	3315      	adds	r3, #21
 8006aac:	78fa      	ldrb	r2, [r7, #3]
 8006aae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006ab0:	78fa      	ldrb	r2, [r7, #3]
 8006ab2:	6879      	ldr	r1, [r7, #4]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	011b      	lsls	r3, r3, #4
 8006ab8:	1a9b      	subs	r3, r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	440b      	add	r3, r1
 8006abe:	334d      	adds	r3, #77	@ 0x4d
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6818      	ldr	r0, [r3, #0]
 8006ac8:	78fa      	ldrb	r2, [r7, #3]
 8006aca:	4613      	mov	r3, r2
 8006acc:	011b      	lsls	r3, r3, #4
 8006ace:	1a9b      	subs	r3, r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	3310      	adds	r3, #16
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	1d19      	adds	r1, r3, #4
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	799b      	ldrb	r3, [r3, #6]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	f006 fe7c 	bl	800d7dc <USB_HC_StartXfer>
 8006ae4:	4603      	mov	r3, r0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop

08006af0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f006 fb70 	bl	800d1ec <USB_GetMode>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	f040 80fb 	bne.w	8006d0a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f006 fb33 	bl	800d184 <USB_ReadInterrupts>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 80f1 	beq.w	8006d08 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f006 fb2a 	bl	800d184 <USB_ReadInterrupts>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b3a:	d104      	bne.n	8006b46 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8006b44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f006 fb1a 	bl	800d184 <USB_ReadInterrupts>
 8006b50:	4603      	mov	r3, r0
 8006b52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b5a:	d104      	bne.n	8006b66 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006b64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f006 fb0a 	bl	800d184 <USB_ReadInterrupts>
 8006b70:	4603      	mov	r3, r0
 8006b72:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b7a:	d104      	bne.n	8006b86 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006b84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f006 fafa 	bl	800d184 <USB_ReadInterrupts>
 8006b90:	4603      	mov	r3, r0
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d103      	bne.n	8006ba2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f006 faec 	bl	800d184 <USB_ReadInterrupts>
 8006bac:	4603      	mov	r3, r0
 8006bae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006bb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bb6:	d120      	bne.n	8006bfa <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8006bc0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d113      	bne.n	8006bfa <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8006bd2:	2110      	movs	r1, #16
 8006bd4:	6938      	ldr	r0, [r7, #16]
 8006bd6:	f006 f9df 	bl	800cf98 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8006bda:	6938      	ldr	r0, [r7, #16]
 8006bdc:	f006 fa0e 	bl	800cffc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	7a5b      	ldrb	r3, [r3, #9]
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d105      	bne.n	8006bf4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2101      	movs	r1, #1
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f006 fc00 	bl	800d3f4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f00a f92b 	bl	8010e50 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f006 fac0 	bl	800d184 <USB_ReadInterrupts>
 8006c04:	4603      	mov	r3, r0
 8006c06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c0e:	d102      	bne.n	8006c16 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 fd4d 	bl	80086b0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f006 fab2 	bl	800d184 <USB_ReadInterrupts>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f003 0308 	and.w	r3, r3, #8
 8006c26:	2b08      	cmp	r3, #8
 8006c28:	d106      	bne.n	8006c38 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f00a f8f4 	bl	8010e18 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2208      	movs	r2, #8
 8006c36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f006 faa1 	bl	800d184 <USB_ReadInterrupts>
 8006c42:	4603      	mov	r3, r0
 8006c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c4c:	d139      	bne.n	8006cc2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f007 f83c 	bl	800dcd0 <USB_HC_ReadInterrupt>
 8006c58:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	617b      	str	r3, [r7, #20]
 8006c5e:	e025      	b.n	8006cac <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f003 030f 	and.w	r3, r3, #15
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	fa22 f303 	lsr.w	r3, r2, r3
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d018      	beq.n	8006ca6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c8a:	d106      	bne.n	8006c9a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	4619      	mov	r1, r3
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f905 	bl	8006ea2 <HCD_HC_IN_IRQHandler>
 8006c98:	e005      	b.n	8006ca6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 ff67 	bl	8007b74 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	617b      	str	r3, [r7, #20]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	795b      	ldrb	r3, [r3, #5]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d3d3      	bcc.n	8006c60 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006cc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f006 fa5c 	bl	800d184 <USB_ReadInterrupts>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	f003 0310 	and.w	r3, r3, #16
 8006cd2:	2b10      	cmp	r3, #16
 8006cd4:	d101      	bne.n	8006cda <HAL_HCD_IRQHandler+0x1ea>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e000      	b.n	8006cdc <HAL_HCD_IRQHandler+0x1ec>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d014      	beq.n	8006d0a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	699a      	ldr	r2, [r3, #24]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0210 	bic.w	r2, r2, #16
 8006cee:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f001 fbfe 	bl	80084f2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	699a      	ldr	r2, [r3, #24]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f042 0210 	orr.w	r2, r2, #16
 8006d04:	619a      	str	r2, [r3, #24]
 8006d06:	e000      	b.n	8006d0a <HAL_HCD_IRQHandler+0x21a>
      return;
 8006d08:	bf00      	nop
    }
  }
}
 8006d0a:	3718      	adds	r7, #24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d101      	bne.n	8006d26 <HAL_HCD_Start+0x16>
 8006d22:	2302      	movs	r3, #2
 8006d24:	e013      	b.n	8006d4e <HAL_HCD_Start+0x3e>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2101      	movs	r1, #1
 8006d34:	4618      	mov	r0, r3
 8006d36:	f006 fbc4 	bl	800d4c2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f006 f8bc 	bl	800cebc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b082      	sub	sp, #8
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d101      	bne.n	8006d6c <HAL_HCD_Stop+0x16>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e00d      	b.n	8006d88 <HAL_HCD_Stop+0x32>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f007 f917 	bl	800dfac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f006 fb66 	bl	800d46e <USB_ResetPort>
 8006da2:	4603      	mov	r3, r0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	460b      	mov	r3, r1
 8006db6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006db8:	78fa      	ldrb	r2, [r7, #3]
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	011b      	lsls	r3, r3, #4
 8006dc0:	1a9b      	subs	r3, r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	440b      	add	r3, r1
 8006dc6:	334c      	adds	r3, #76	@ 0x4c
 8006dc8:	781b      	ldrb	r3, [r3, #0]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	460b      	mov	r3, r1
 8006de0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006de2:	78fa      	ldrb	r2, [r7, #3]
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	4613      	mov	r3, r2
 8006de8:	011b      	lsls	r3, r3, #4
 8006dea:	1a9b      	subs	r3, r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	440b      	add	r3, r1
 8006df0:	3338      	adds	r3, #56	@ 0x38
 8006df2:	681b      	ldr	r3, [r3, #0]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f006 fba8 	bl	800d562 <USB_GetCurrentFrame>
 8006e12:	4603      	mov	r3, r0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f006 fb83 	bl	800d534 <USB_GetHostSpeed>
 8006e2e:	4603      	mov	r3, r0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	460b      	mov	r3, r1
 8006e42:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8006e44:	78fa      	ldrb	r2, [r7, #3]
 8006e46:	6879      	ldr	r1, [r7, #4]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	011b      	lsls	r3, r3, #4
 8006e4c:	1a9b      	subs	r3, r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	440b      	add	r3, r1
 8006e52:	331a      	adds	r3, #26
 8006e54:	2200      	movs	r2, #0
 8006e56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8006e58:	78fa      	ldrb	r2, [r7, #3]
 8006e5a:	6879      	ldr	r1, [r7, #4]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	011b      	lsls	r3, r3, #4
 8006e60:	1a9b      	subs	r3, r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	440b      	add	r3, r1
 8006e66:	331b      	adds	r3, #27
 8006e68:	2200      	movs	r2, #0
 8006e6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8006e6c:	78fa      	ldrb	r2, [r7, #3]
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	4613      	mov	r3, r2
 8006e72:	011b      	lsls	r3, r3, #4
 8006e74:	1a9b      	subs	r3, r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	440b      	add	r3, r1
 8006e7a:	3325      	adds	r3, #37	@ 0x25
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8006e80:	78fa      	ldrb	r2, [r7, #3]
 8006e82:	6879      	ldr	r1, [r7, #4]
 8006e84:	4613      	mov	r3, r2
 8006e86:	011b      	lsls	r3, r3, #4
 8006e88:	1a9b      	subs	r3, r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	440b      	add	r3, r1
 8006e8e:	3324      	adds	r3, #36	@ 0x24
 8006e90:	2200      	movs	r2, #0
 8006e92:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b086      	sub	sp, #24
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	460b      	mov	r3, r1
 8006eac:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	78fa      	ldrb	r2, [r7, #3]
 8006ebe:	4611      	mov	r1, r2
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f006 f972 	bl	800d1aa <USB_ReadChInterrupts>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f003 0304 	and.w	r3, r3, #4
 8006ecc:	2b04      	cmp	r3, #4
 8006ece:	d11a      	bne.n	8006f06 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006ed0:	78fb      	ldrb	r3, [r7, #3]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006edc:	461a      	mov	r2, r3
 8006ede:	2304      	movs	r3, #4
 8006ee0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006ee2:	78fa      	ldrb	r2, [r7, #3]
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	011b      	lsls	r3, r3, #4
 8006eea:	1a9b      	subs	r3, r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	440b      	add	r3, r1
 8006ef0:	334d      	adds	r3, #77	@ 0x4d
 8006ef2:	2207      	movs	r2, #7
 8006ef4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	78fa      	ldrb	r2, [r7, #3]
 8006efc:	4611      	mov	r1, r2
 8006efe:	4618      	mov	r0, r3
 8006f00:	f006 fef7 	bl	800dcf2 <USB_HC_Halt>
 8006f04:	e09e      	b.n	8007044 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	78fa      	ldrb	r2, [r7, #3]
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f006 f94b 	bl	800d1aa <USB_ReadChInterrupts>
 8006f14:	4603      	mov	r3, r0
 8006f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f1e:	d11b      	bne.n	8006f58 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8006f20:	78fb      	ldrb	r3, [r7, #3]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006f32:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8006f34:	78fa      	ldrb	r2, [r7, #3]
 8006f36:	6879      	ldr	r1, [r7, #4]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	011b      	lsls	r3, r3, #4
 8006f3c:	1a9b      	subs	r3, r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	440b      	add	r3, r1
 8006f42:	334d      	adds	r3, #77	@ 0x4d
 8006f44:	2208      	movs	r2, #8
 8006f46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	78fa      	ldrb	r2, [r7, #3]
 8006f4e:	4611      	mov	r1, r2
 8006f50:	4618      	mov	r0, r3
 8006f52:	f006 fece 	bl	800dcf2 <USB_HC_Halt>
 8006f56:	e075      	b.n	8007044 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	78fa      	ldrb	r2, [r7, #3]
 8006f5e:	4611      	mov	r1, r2
 8006f60:	4618      	mov	r0, r3
 8006f62:	f006 f922 	bl	800d1aa <USB_ReadChInterrupts>
 8006f66:	4603      	mov	r3, r0
 8006f68:	f003 0308 	and.w	r3, r3, #8
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d11a      	bne.n	8006fa6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006f70:	78fb      	ldrb	r3, [r7, #3]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	2308      	movs	r3, #8
 8006f80:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006f82:	78fa      	ldrb	r2, [r7, #3]
 8006f84:	6879      	ldr	r1, [r7, #4]
 8006f86:	4613      	mov	r3, r2
 8006f88:	011b      	lsls	r3, r3, #4
 8006f8a:	1a9b      	subs	r3, r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	440b      	add	r3, r1
 8006f90:	334d      	adds	r3, #77	@ 0x4d
 8006f92:	2206      	movs	r2, #6
 8006f94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	78fa      	ldrb	r2, [r7, #3]
 8006f9c:	4611      	mov	r1, r2
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f006 fea7 	bl	800dcf2 <USB_HC_Halt>
 8006fa4:	e04e      	b.n	8007044 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	78fa      	ldrb	r2, [r7, #3]
 8006fac:	4611      	mov	r1, r2
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f006 f8fb 	bl	800d1aa <USB_ReadChInterrupts>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fbe:	d11b      	bne.n	8006ff8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006fc0:	78fb      	ldrb	r3, [r7, #3]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fcc:	461a      	mov	r2, r3
 8006fce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006fd4:	78fa      	ldrb	r2, [r7, #3]
 8006fd6:	6879      	ldr	r1, [r7, #4]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	011b      	lsls	r3, r3, #4
 8006fdc:	1a9b      	subs	r3, r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	440b      	add	r3, r1
 8006fe2:	334d      	adds	r3, #77	@ 0x4d
 8006fe4:	2209      	movs	r2, #9
 8006fe6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	78fa      	ldrb	r2, [r7, #3]
 8006fee:	4611      	mov	r1, r2
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f006 fe7e 	bl	800dcf2 <USB_HC_Halt>
 8006ff6:	e025      	b.n	8007044 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	78fa      	ldrb	r2, [r7, #3]
 8006ffe:	4611      	mov	r1, r2
 8007000:	4618      	mov	r0, r3
 8007002:	f006 f8d2 	bl	800d1aa <USB_ReadChInterrupts>
 8007006:	4603      	mov	r3, r0
 8007008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800700c:	2b80      	cmp	r3, #128	@ 0x80
 800700e:	d119      	bne.n	8007044 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8007010:	78fb      	ldrb	r3, [r7, #3]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	4413      	add	r3, r2
 8007018:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800701c:	461a      	mov	r2, r3
 800701e:	2380      	movs	r3, #128	@ 0x80
 8007020:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007022:	78fa      	ldrb	r2, [r7, #3]
 8007024:	6879      	ldr	r1, [r7, #4]
 8007026:	4613      	mov	r3, r2
 8007028:	011b      	lsls	r3, r3, #4
 800702a:	1a9b      	subs	r3, r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	440b      	add	r3, r1
 8007030:	334d      	adds	r3, #77	@ 0x4d
 8007032:	2207      	movs	r2, #7
 8007034:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	78fa      	ldrb	r2, [r7, #3]
 800703c:	4611      	mov	r1, r2
 800703e:	4618      	mov	r0, r3
 8007040:	f006 fe57 	bl	800dcf2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	78fa      	ldrb	r2, [r7, #3]
 800704a:	4611      	mov	r1, r2
 800704c:	4618      	mov	r0, r3
 800704e:	f006 f8ac 	bl	800d1aa <USB_ReadChInterrupts>
 8007052:	4603      	mov	r3, r0
 8007054:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800705c:	d112      	bne.n	8007084 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	78fa      	ldrb	r2, [r7, #3]
 8007064:	4611      	mov	r1, r2
 8007066:	4618      	mov	r0, r3
 8007068:	f006 fe43 	bl	800dcf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800706c:	78fb      	ldrb	r3, [r7, #3]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	4413      	add	r3, r2
 8007074:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007078:	461a      	mov	r2, r3
 800707a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800707e:	6093      	str	r3, [r2, #8]
 8007080:	f000 bd75 	b.w	8007b6e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	78fa      	ldrb	r2, [r7, #3]
 800708a:	4611      	mov	r1, r2
 800708c:	4618      	mov	r0, r3
 800708e:	f006 f88c 	bl	800d1aa <USB_ReadChInterrupts>
 8007092:	4603      	mov	r3, r0
 8007094:	f003 0301 	and.w	r3, r3, #1
 8007098:	2b01      	cmp	r3, #1
 800709a:	f040 8128 	bne.w	80072ee <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800709e:	78fb      	ldrb	r3, [r7, #3]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070aa:	461a      	mov	r2, r3
 80070ac:	2320      	movs	r3, #32
 80070ae:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80070b0:	78fa      	ldrb	r2, [r7, #3]
 80070b2:	6879      	ldr	r1, [r7, #4]
 80070b4:	4613      	mov	r3, r2
 80070b6:	011b      	lsls	r3, r3, #4
 80070b8:	1a9b      	subs	r3, r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	440b      	add	r3, r1
 80070be:	331b      	adds	r3, #27
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d119      	bne.n	80070fa <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80070c6:	78fa      	ldrb	r2, [r7, #3]
 80070c8:	6879      	ldr	r1, [r7, #4]
 80070ca:	4613      	mov	r3, r2
 80070cc:	011b      	lsls	r3, r3, #4
 80070ce:	1a9b      	subs	r3, r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	440b      	add	r3, r1
 80070d4:	331b      	adds	r3, #27
 80070d6:	2200      	movs	r2, #0
 80070d8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80070da:	78fb      	ldrb	r3, [r7, #3]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	78fa      	ldrb	r2, [r7, #3]
 80070ea:	0151      	lsls	r1, r2, #5
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	440a      	add	r2, r1
 80070f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070f8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	799b      	ldrb	r3, [r3, #6]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d01b      	beq.n	800713a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007102:	78fa      	ldrb	r2, [r7, #3]
 8007104:	6879      	ldr	r1, [r7, #4]
 8007106:	4613      	mov	r3, r2
 8007108:	011b      	lsls	r3, r3, #4
 800710a:	1a9b      	subs	r3, r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	440b      	add	r3, r1
 8007110:	3330      	adds	r3, #48	@ 0x30
 8007112:	6819      	ldr	r1, [r3, #0]
 8007114:	78fb      	ldrb	r3, [r7, #3]
 8007116:	015a      	lsls	r2, r3, #5
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	4413      	add	r3, r2
 800711c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007126:	78fa      	ldrb	r2, [r7, #3]
 8007128:	1ac9      	subs	r1, r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	4613      	mov	r3, r2
 800712e:	011b      	lsls	r3, r3, #4
 8007130:	1a9b      	subs	r3, r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4403      	add	r3, r0
 8007136:	3338      	adds	r3, #56	@ 0x38
 8007138:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800713a:	78fa      	ldrb	r2, [r7, #3]
 800713c:	6879      	ldr	r1, [r7, #4]
 800713e:	4613      	mov	r3, r2
 8007140:	011b      	lsls	r3, r3, #4
 8007142:	1a9b      	subs	r3, r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	440b      	add	r3, r1
 8007148:	334d      	adds	r3, #77	@ 0x4d
 800714a:	2201      	movs	r2, #1
 800714c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800714e:	78fa      	ldrb	r2, [r7, #3]
 8007150:	6879      	ldr	r1, [r7, #4]
 8007152:	4613      	mov	r3, r2
 8007154:	011b      	lsls	r3, r3, #4
 8007156:	1a9b      	subs	r3, r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	440b      	add	r3, r1
 800715c:	3344      	adds	r3, #68	@ 0x44
 800715e:	2200      	movs	r2, #0
 8007160:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8007162:	78fb      	ldrb	r3, [r7, #3]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	4413      	add	r3, r2
 800716a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800716e:	461a      	mov	r2, r3
 8007170:	2301      	movs	r3, #1
 8007172:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007174:	78fa      	ldrb	r2, [r7, #3]
 8007176:	6879      	ldr	r1, [r7, #4]
 8007178:	4613      	mov	r3, r2
 800717a:	011b      	lsls	r3, r3, #4
 800717c:	1a9b      	subs	r3, r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	440b      	add	r3, r1
 8007182:	3326      	adds	r3, #38	@ 0x26
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800718a:	78fa      	ldrb	r2, [r7, #3]
 800718c:	6879      	ldr	r1, [r7, #4]
 800718e:	4613      	mov	r3, r2
 8007190:	011b      	lsls	r3, r3, #4
 8007192:	1a9b      	subs	r3, r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	440b      	add	r3, r1
 8007198:	3326      	adds	r3, #38	@ 0x26
 800719a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800719c:	2b02      	cmp	r3, #2
 800719e:	d110      	bne.n	80071c2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	78fa      	ldrb	r2, [r7, #3]
 80071a6:	4611      	mov	r1, r2
 80071a8:	4618      	mov	r0, r3
 80071aa:	f006 fda2 	bl	800dcf2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80071ae:	78fb      	ldrb	r3, [r7, #3]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071ba:	461a      	mov	r2, r3
 80071bc:	2310      	movs	r3, #16
 80071be:	6093      	str	r3, [r2, #8]
 80071c0:	e03d      	b.n	800723e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80071c2:	78fa      	ldrb	r2, [r7, #3]
 80071c4:	6879      	ldr	r1, [r7, #4]
 80071c6:	4613      	mov	r3, r2
 80071c8:	011b      	lsls	r3, r3, #4
 80071ca:	1a9b      	subs	r3, r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	440b      	add	r3, r1
 80071d0:	3326      	adds	r3, #38	@ 0x26
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2b03      	cmp	r3, #3
 80071d6:	d00a      	beq.n	80071ee <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80071d8:	78fa      	ldrb	r2, [r7, #3]
 80071da:	6879      	ldr	r1, [r7, #4]
 80071dc:	4613      	mov	r3, r2
 80071de:	011b      	lsls	r3, r3, #4
 80071e0:	1a9b      	subs	r3, r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	440b      	add	r3, r1
 80071e6:	3326      	adds	r3, #38	@ 0x26
 80071e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d127      	bne.n	800723e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80071ee:	78fb      	ldrb	r3, [r7, #3]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	78fa      	ldrb	r2, [r7, #3]
 80071fe:	0151      	lsls	r1, r2, #5
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	440a      	add	r2, r1
 8007204:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007208:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800720c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800720e:	78fa      	ldrb	r2, [r7, #3]
 8007210:	6879      	ldr	r1, [r7, #4]
 8007212:	4613      	mov	r3, r2
 8007214:	011b      	lsls	r3, r3, #4
 8007216:	1a9b      	subs	r3, r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	440b      	add	r3, r1
 800721c:	334c      	adds	r3, #76	@ 0x4c
 800721e:	2201      	movs	r2, #1
 8007220:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007222:	78fa      	ldrb	r2, [r7, #3]
 8007224:	6879      	ldr	r1, [r7, #4]
 8007226:	4613      	mov	r3, r2
 8007228:	011b      	lsls	r3, r3, #4
 800722a:	1a9b      	subs	r3, r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	440b      	add	r3, r1
 8007230:	334c      	adds	r3, #76	@ 0x4c
 8007232:	781a      	ldrb	r2, [r3, #0]
 8007234:	78fb      	ldrb	r3, [r7, #3]
 8007236:	4619      	mov	r1, r3
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f009 fe17 	bl	8010e6c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	799b      	ldrb	r3, [r3, #6]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d13b      	bne.n	80072be <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8007246:	78fa      	ldrb	r2, [r7, #3]
 8007248:	6879      	ldr	r1, [r7, #4]
 800724a:	4613      	mov	r3, r2
 800724c:	011b      	lsls	r3, r3, #4
 800724e:	1a9b      	subs	r3, r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	440b      	add	r3, r1
 8007254:	3338      	adds	r3, #56	@ 0x38
 8007256:	6819      	ldr	r1, [r3, #0]
 8007258:	78fa      	ldrb	r2, [r7, #3]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	4613      	mov	r3, r2
 800725e:	011b      	lsls	r3, r3, #4
 8007260:	1a9b      	subs	r3, r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4403      	add	r3, r0
 8007266:	3328      	adds	r3, #40	@ 0x28
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	440b      	add	r3, r1
 800726c:	1e59      	subs	r1, r3, #1
 800726e:	78fa      	ldrb	r2, [r7, #3]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	4613      	mov	r3, r2
 8007274:	011b      	lsls	r3, r3, #4
 8007276:	1a9b      	subs	r3, r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4403      	add	r3, r0
 800727c:	3328      	adds	r3, #40	@ 0x28
 800727e:	881b      	ldrh	r3, [r3, #0]
 8007280:	fbb1 f3f3 	udiv	r3, r1, r3
 8007284:	f003 0301 	and.w	r3, r3, #1
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 8470 	beq.w	8007b6e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800728e:	78fa      	ldrb	r2, [r7, #3]
 8007290:	6879      	ldr	r1, [r7, #4]
 8007292:	4613      	mov	r3, r2
 8007294:	011b      	lsls	r3, r3, #4
 8007296:	1a9b      	subs	r3, r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	440b      	add	r3, r1
 800729c:	333c      	adds	r3, #60	@ 0x3c
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	78fa      	ldrb	r2, [r7, #3]
 80072a2:	f083 0301 	eor.w	r3, r3, #1
 80072a6:	b2d8      	uxtb	r0, r3
 80072a8:	6879      	ldr	r1, [r7, #4]
 80072aa:	4613      	mov	r3, r2
 80072ac:	011b      	lsls	r3, r3, #4
 80072ae:	1a9b      	subs	r3, r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	440b      	add	r3, r1
 80072b4:	333c      	adds	r3, #60	@ 0x3c
 80072b6:	4602      	mov	r2, r0
 80072b8:	701a      	strb	r2, [r3, #0]
 80072ba:	f000 bc58 	b.w	8007b6e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80072be:	78fa      	ldrb	r2, [r7, #3]
 80072c0:	6879      	ldr	r1, [r7, #4]
 80072c2:	4613      	mov	r3, r2
 80072c4:	011b      	lsls	r3, r3, #4
 80072c6:	1a9b      	subs	r3, r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	440b      	add	r3, r1
 80072cc:	333c      	adds	r3, #60	@ 0x3c
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	78fa      	ldrb	r2, [r7, #3]
 80072d2:	f083 0301 	eor.w	r3, r3, #1
 80072d6:	b2d8      	uxtb	r0, r3
 80072d8:	6879      	ldr	r1, [r7, #4]
 80072da:	4613      	mov	r3, r2
 80072dc:	011b      	lsls	r3, r3, #4
 80072de:	1a9b      	subs	r3, r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	440b      	add	r3, r1
 80072e4:	333c      	adds	r3, #60	@ 0x3c
 80072e6:	4602      	mov	r2, r0
 80072e8:	701a      	strb	r2, [r3, #0]
 80072ea:	f000 bc40 	b.w	8007b6e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	78fa      	ldrb	r2, [r7, #3]
 80072f4:	4611      	mov	r1, r2
 80072f6:	4618      	mov	r0, r3
 80072f8:	f005 ff57 	bl	800d1aa <USB_ReadChInterrupts>
 80072fc:	4603      	mov	r3, r0
 80072fe:	f003 0320 	and.w	r3, r3, #32
 8007302:	2b20      	cmp	r3, #32
 8007304:	d131      	bne.n	800736a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007306:	78fb      	ldrb	r3, [r7, #3]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	4413      	add	r3, r2
 800730e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007312:	461a      	mov	r2, r3
 8007314:	2320      	movs	r3, #32
 8007316:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8007318:	78fa      	ldrb	r2, [r7, #3]
 800731a:	6879      	ldr	r1, [r7, #4]
 800731c:	4613      	mov	r3, r2
 800731e:	011b      	lsls	r3, r3, #4
 8007320:	1a9b      	subs	r3, r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	440b      	add	r3, r1
 8007326:	331a      	adds	r3, #26
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	2b01      	cmp	r3, #1
 800732c:	f040 841f 	bne.w	8007b6e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8007330:	78fa      	ldrb	r2, [r7, #3]
 8007332:	6879      	ldr	r1, [r7, #4]
 8007334:	4613      	mov	r3, r2
 8007336:	011b      	lsls	r3, r3, #4
 8007338:	1a9b      	subs	r3, r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	440b      	add	r3, r1
 800733e:	331b      	adds	r3, #27
 8007340:	2201      	movs	r2, #1
 8007342:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8007344:	78fa      	ldrb	r2, [r7, #3]
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	4613      	mov	r3, r2
 800734a:	011b      	lsls	r3, r3, #4
 800734c:	1a9b      	subs	r3, r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	440b      	add	r3, r1
 8007352:	334d      	adds	r3, #77	@ 0x4d
 8007354:	2203      	movs	r2, #3
 8007356:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	78fa      	ldrb	r2, [r7, #3]
 800735e:	4611      	mov	r1, r2
 8007360:	4618      	mov	r0, r3
 8007362:	f006 fcc6 	bl	800dcf2 <USB_HC_Halt>
 8007366:	f000 bc02 	b.w	8007b6e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	78fa      	ldrb	r2, [r7, #3]
 8007370:	4611      	mov	r1, r2
 8007372:	4618      	mov	r0, r3
 8007374:	f005 ff19 	bl	800d1aa <USB_ReadChInterrupts>
 8007378:	4603      	mov	r3, r0
 800737a:	f003 0302 	and.w	r3, r3, #2
 800737e:	2b02      	cmp	r3, #2
 8007380:	f040 8305 	bne.w	800798e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8007384:	78fb      	ldrb	r3, [r7, #3]
 8007386:	015a      	lsls	r2, r3, #5
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	4413      	add	r3, r2
 800738c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007390:	461a      	mov	r2, r3
 8007392:	2302      	movs	r3, #2
 8007394:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8007396:	78fa      	ldrb	r2, [r7, #3]
 8007398:	6879      	ldr	r1, [r7, #4]
 800739a:	4613      	mov	r3, r2
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	1a9b      	subs	r3, r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	440b      	add	r3, r1
 80073a4:	334d      	adds	r3, #77	@ 0x4d
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d114      	bne.n	80073d6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80073ac:	78fa      	ldrb	r2, [r7, #3]
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	4613      	mov	r3, r2
 80073b2:	011b      	lsls	r3, r3, #4
 80073b4:	1a9b      	subs	r3, r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	440b      	add	r3, r1
 80073ba:	334d      	adds	r3, #77	@ 0x4d
 80073bc:	2202      	movs	r2, #2
 80073be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80073c0:	78fa      	ldrb	r2, [r7, #3]
 80073c2:	6879      	ldr	r1, [r7, #4]
 80073c4:	4613      	mov	r3, r2
 80073c6:	011b      	lsls	r3, r3, #4
 80073c8:	1a9b      	subs	r3, r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	440b      	add	r3, r1
 80073ce:	334c      	adds	r3, #76	@ 0x4c
 80073d0:	2201      	movs	r2, #1
 80073d2:	701a      	strb	r2, [r3, #0]
 80073d4:	e2cc      	b.n	8007970 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80073d6:	78fa      	ldrb	r2, [r7, #3]
 80073d8:	6879      	ldr	r1, [r7, #4]
 80073da:	4613      	mov	r3, r2
 80073dc:	011b      	lsls	r3, r3, #4
 80073de:	1a9b      	subs	r3, r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	440b      	add	r3, r1
 80073e4:	334d      	adds	r3, #77	@ 0x4d
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	2b06      	cmp	r3, #6
 80073ea:	d114      	bne.n	8007416 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80073ec:	78fa      	ldrb	r2, [r7, #3]
 80073ee:	6879      	ldr	r1, [r7, #4]
 80073f0:	4613      	mov	r3, r2
 80073f2:	011b      	lsls	r3, r3, #4
 80073f4:	1a9b      	subs	r3, r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	440b      	add	r3, r1
 80073fa:	334d      	adds	r3, #77	@ 0x4d
 80073fc:	2202      	movs	r2, #2
 80073fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8007400:	78fa      	ldrb	r2, [r7, #3]
 8007402:	6879      	ldr	r1, [r7, #4]
 8007404:	4613      	mov	r3, r2
 8007406:	011b      	lsls	r3, r3, #4
 8007408:	1a9b      	subs	r3, r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	440b      	add	r3, r1
 800740e:	334c      	adds	r3, #76	@ 0x4c
 8007410:	2205      	movs	r2, #5
 8007412:	701a      	strb	r2, [r3, #0]
 8007414:	e2ac      	b.n	8007970 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007416:	78fa      	ldrb	r2, [r7, #3]
 8007418:	6879      	ldr	r1, [r7, #4]
 800741a:	4613      	mov	r3, r2
 800741c:	011b      	lsls	r3, r3, #4
 800741e:	1a9b      	subs	r3, r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	440b      	add	r3, r1
 8007424:	334d      	adds	r3, #77	@ 0x4d
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b07      	cmp	r3, #7
 800742a:	d00b      	beq.n	8007444 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800742c:	78fa      	ldrb	r2, [r7, #3]
 800742e:	6879      	ldr	r1, [r7, #4]
 8007430:	4613      	mov	r3, r2
 8007432:	011b      	lsls	r3, r3, #4
 8007434:	1a9b      	subs	r3, r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	440b      	add	r3, r1
 800743a:	334d      	adds	r3, #77	@ 0x4d
 800743c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800743e:	2b09      	cmp	r3, #9
 8007440:	f040 80a6 	bne.w	8007590 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007444:	78fa      	ldrb	r2, [r7, #3]
 8007446:	6879      	ldr	r1, [r7, #4]
 8007448:	4613      	mov	r3, r2
 800744a:	011b      	lsls	r3, r3, #4
 800744c:	1a9b      	subs	r3, r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	440b      	add	r3, r1
 8007452:	334d      	adds	r3, #77	@ 0x4d
 8007454:	2202      	movs	r2, #2
 8007456:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007458:	78fa      	ldrb	r2, [r7, #3]
 800745a:	6879      	ldr	r1, [r7, #4]
 800745c:	4613      	mov	r3, r2
 800745e:	011b      	lsls	r3, r3, #4
 8007460:	1a9b      	subs	r3, r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	440b      	add	r3, r1
 8007466:	3344      	adds	r3, #68	@ 0x44
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	1c59      	adds	r1, r3, #1
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	4613      	mov	r3, r2
 8007470:	011b      	lsls	r3, r3, #4
 8007472:	1a9b      	subs	r3, r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4403      	add	r3, r0
 8007478:	3344      	adds	r3, #68	@ 0x44
 800747a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800747c:	78fa      	ldrb	r2, [r7, #3]
 800747e:	6879      	ldr	r1, [r7, #4]
 8007480:	4613      	mov	r3, r2
 8007482:	011b      	lsls	r3, r3, #4
 8007484:	1a9b      	subs	r3, r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	440b      	add	r3, r1
 800748a:	3344      	adds	r3, #68	@ 0x44
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2b02      	cmp	r3, #2
 8007490:	d943      	bls.n	800751a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8007492:	78fa      	ldrb	r2, [r7, #3]
 8007494:	6879      	ldr	r1, [r7, #4]
 8007496:	4613      	mov	r3, r2
 8007498:	011b      	lsls	r3, r3, #4
 800749a:	1a9b      	subs	r3, r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	440b      	add	r3, r1
 80074a0:	3344      	adds	r3, #68	@ 0x44
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80074a6:	78fa      	ldrb	r2, [r7, #3]
 80074a8:	6879      	ldr	r1, [r7, #4]
 80074aa:	4613      	mov	r3, r2
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	1a9b      	subs	r3, r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	440b      	add	r3, r1
 80074b4:	331a      	adds	r3, #26
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d123      	bne.n	8007504 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80074bc:	78fa      	ldrb	r2, [r7, #3]
 80074be:	6879      	ldr	r1, [r7, #4]
 80074c0:	4613      	mov	r3, r2
 80074c2:	011b      	lsls	r3, r3, #4
 80074c4:	1a9b      	subs	r3, r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	440b      	add	r3, r1
 80074ca:	331b      	adds	r3, #27
 80074cc:	2200      	movs	r2, #0
 80074ce:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80074d0:	78fa      	ldrb	r2, [r7, #3]
 80074d2:	6879      	ldr	r1, [r7, #4]
 80074d4:	4613      	mov	r3, r2
 80074d6:	011b      	lsls	r3, r3, #4
 80074d8:	1a9b      	subs	r3, r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	440b      	add	r3, r1
 80074de:	331c      	adds	r3, #28
 80074e0:	2200      	movs	r2, #0
 80074e2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80074e4:	78fb      	ldrb	r3, [r7, #3]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	78fa      	ldrb	r2, [r7, #3]
 80074f4:	0151      	lsls	r1, r2, #5
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	440a      	add	r2, r1
 80074fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007502:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8007504:	78fa      	ldrb	r2, [r7, #3]
 8007506:	6879      	ldr	r1, [r7, #4]
 8007508:	4613      	mov	r3, r2
 800750a:	011b      	lsls	r3, r3, #4
 800750c:	1a9b      	subs	r3, r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	440b      	add	r3, r1
 8007512:	334c      	adds	r3, #76	@ 0x4c
 8007514:	2204      	movs	r2, #4
 8007516:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007518:	e229      	b.n	800796e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800751a:	78fa      	ldrb	r2, [r7, #3]
 800751c:	6879      	ldr	r1, [r7, #4]
 800751e:	4613      	mov	r3, r2
 8007520:	011b      	lsls	r3, r3, #4
 8007522:	1a9b      	subs	r3, r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	440b      	add	r3, r1
 8007528:	334c      	adds	r3, #76	@ 0x4c
 800752a:	2202      	movs	r2, #2
 800752c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800752e:	78fa      	ldrb	r2, [r7, #3]
 8007530:	6879      	ldr	r1, [r7, #4]
 8007532:	4613      	mov	r3, r2
 8007534:	011b      	lsls	r3, r3, #4
 8007536:	1a9b      	subs	r3, r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	440b      	add	r3, r1
 800753c:	3326      	adds	r3, #38	@ 0x26
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00b      	beq.n	800755c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007544:	78fa      	ldrb	r2, [r7, #3]
 8007546:	6879      	ldr	r1, [r7, #4]
 8007548:	4613      	mov	r3, r2
 800754a:	011b      	lsls	r3, r3, #4
 800754c:	1a9b      	subs	r3, r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	440b      	add	r3, r1
 8007552:	3326      	adds	r3, #38	@ 0x26
 8007554:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007556:	2b02      	cmp	r3, #2
 8007558:	f040 8209 	bne.w	800796e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800755c:	78fb      	ldrb	r3, [r7, #3]
 800755e:	015a      	lsls	r2, r3, #5
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	4413      	add	r3, r2
 8007564:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007572:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800757a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800757c:	78fb      	ldrb	r3, [r7, #3]
 800757e:	015a      	lsls	r2, r3, #5
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	4413      	add	r3, r2
 8007584:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007588:	461a      	mov	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800758e:	e1ee      	b.n	800796e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8007590:	78fa      	ldrb	r2, [r7, #3]
 8007592:	6879      	ldr	r1, [r7, #4]
 8007594:	4613      	mov	r3, r2
 8007596:	011b      	lsls	r3, r3, #4
 8007598:	1a9b      	subs	r3, r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	440b      	add	r3, r1
 800759e:	334d      	adds	r3, #77	@ 0x4d
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	2b05      	cmp	r3, #5
 80075a4:	f040 80c8 	bne.w	8007738 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80075a8:	78fa      	ldrb	r2, [r7, #3]
 80075aa:	6879      	ldr	r1, [r7, #4]
 80075ac:	4613      	mov	r3, r2
 80075ae:	011b      	lsls	r3, r3, #4
 80075b0:	1a9b      	subs	r3, r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	440b      	add	r3, r1
 80075b6:	334d      	adds	r3, #77	@ 0x4d
 80075b8:	2202      	movs	r2, #2
 80075ba:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80075bc:	78fa      	ldrb	r2, [r7, #3]
 80075be:	6879      	ldr	r1, [r7, #4]
 80075c0:	4613      	mov	r3, r2
 80075c2:	011b      	lsls	r3, r3, #4
 80075c4:	1a9b      	subs	r3, r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	440b      	add	r3, r1
 80075ca:	331b      	adds	r3, #27
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	f040 81ce 	bne.w	8007970 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80075d4:	78fa      	ldrb	r2, [r7, #3]
 80075d6:	6879      	ldr	r1, [r7, #4]
 80075d8:	4613      	mov	r3, r2
 80075da:	011b      	lsls	r3, r3, #4
 80075dc:	1a9b      	subs	r3, r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	440b      	add	r3, r1
 80075e2:	3326      	adds	r3, #38	@ 0x26
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d16b      	bne.n	80076c2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80075ea:	78fa      	ldrb	r2, [r7, #3]
 80075ec:	6879      	ldr	r1, [r7, #4]
 80075ee:	4613      	mov	r3, r2
 80075f0:	011b      	lsls	r3, r3, #4
 80075f2:	1a9b      	subs	r3, r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	440b      	add	r3, r1
 80075f8:	3348      	adds	r3, #72	@ 0x48
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	1c59      	adds	r1, r3, #1
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	4613      	mov	r3, r2
 8007602:	011b      	lsls	r3, r3, #4
 8007604:	1a9b      	subs	r3, r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4403      	add	r3, r0
 800760a:	3348      	adds	r3, #72	@ 0x48
 800760c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800760e:	78fa      	ldrb	r2, [r7, #3]
 8007610:	6879      	ldr	r1, [r7, #4]
 8007612:	4613      	mov	r3, r2
 8007614:	011b      	lsls	r3, r3, #4
 8007616:	1a9b      	subs	r3, r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	440b      	add	r3, r1
 800761c:	3348      	adds	r3, #72	@ 0x48
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b02      	cmp	r3, #2
 8007622:	d943      	bls.n	80076ac <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8007624:	78fa      	ldrb	r2, [r7, #3]
 8007626:	6879      	ldr	r1, [r7, #4]
 8007628:	4613      	mov	r3, r2
 800762a:	011b      	lsls	r3, r3, #4
 800762c:	1a9b      	subs	r3, r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	440b      	add	r3, r1
 8007632:	3348      	adds	r3, #72	@ 0x48
 8007634:	2200      	movs	r2, #0
 8007636:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8007638:	78fa      	ldrb	r2, [r7, #3]
 800763a:	6879      	ldr	r1, [r7, #4]
 800763c:	4613      	mov	r3, r2
 800763e:	011b      	lsls	r3, r3, #4
 8007640:	1a9b      	subs	r3, r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	440b      	add	r3, r1
 8007646:	331b      	adds	r3, #27
 8007648:	2200      	movs	r2, #0
 800764a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800764c:	78fa      	ldrb	r2, [r7, #3]
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	4613      	mov	r3, r2
 8007652:	011b      	lsls	r3, r3, #4
 8007654:	1a9b      	subs	r3, r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	440b      	add	r3, r1
 800765a:	3344      	adds	r3, #68	@ 0x44
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b02      	cmp	r3, #2
 8007660:	d809      	bhi.n	8007676 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8007662:	78fa      	ldrb	r2, [r7, #3]
 8007664:	6879      	ldr	r1, [r7, #4]
 8007666:	4613      	mov	r3, r2
 8007668:	011b      	lsls	r3, r3, #4
 800766a:	1a9b      	subs	r3, r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	440b      	add	r3, r1
 8007670:	331c      	adds	r3, #28
 8007672:	2201      	movs	r2, #1
 8007674:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007676:	78fb      	ldrb	r3, [r7, #3]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	4413      	add	r3, r2
 800767e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	78fa      	ldrb	r2, [r7, #3]
 8007686:	0151      	lsls	r1, r2, #5
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	440a      	add	r2, r1
 800768c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007690:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007694:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8007696:	78fa      	ldrb	r2, [r7, #3]
 8007698:	6879      	ldr	r1, [r7, #4]
 800769a:	4613      	mov	r3, r2
 800769c:	011b      	lsls	r3, r3, #4
 800769e:	1a9b      	subs	r3, r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	440b      	add	r3, r1
 80076a4:	334c      	adds	r3, #76	@ 0x4c
 80076a6:	2204      	movs	r2, #4
 80076a8:	701a      	strb	r2, [r3, #0]
 80076aa:	e014      	b.n	80076d6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80076ac:	78fa      	ldrb	r2, [r7, #3]
 80076ae:	6879      	ldr	r1, [r7, #4]
 80076b0:	4613      	mov	r3, r2
 80076b2:	011b      	lsls	r3, r3, #4
 80076b4:	1a9b      	subs	r3, r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	440b      	add	r3, r1
 80076ba:	334c      	adds	r3, #76	@ 0x4c
 80076bc:	2202      	movs	r2, #2
 80076be:	701a      	strb	r2, [r3, #0]
 80076c0:	e009      	b.n	80076d6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80076c2:	78fa      	ldrb	r2, [r7, #3]
 80076c4:	6879      	ldr	r1, [r7, #4]
 80076c6:	4613      	mov	r3, r2
 80076c8:	011b      	lsls	r3, r3, #4
 80076ca:	1a9b      	subs	r3, r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	440b      	add	r3, r1
 80076d0:	334c      	adds	r3, #76	@ 0x4c
 80076d2:	2202      	movs	r2, #2
 80076d4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80076d6:	78fa      	ldrb	r2, [r7, #3]
 80076d8:	6879      	ldr	r1, [r7, #4]
 80076da:	4613      	mov	r3, r2
 80076dc:	011b      	lsls	r3, r3, #4
 80076de:	1a9b      	subs	r3, r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	440b      	add	r3, r1
 80076e4:	3326      	adds	r3, #38	@ 0x26
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00b      	beq.n	8007704 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80076ec:	78fa      	ldrb	r2, [r7, #3]
 80076ee:	6879      	ldr	r1, [r7, #4]
 80076f0:	4613      	mov	r3, r2
 80076f2:	011b      	lsls	r3, r3, #4
 80076f4:	1a9b      	subs	r3, r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	440b      	add	r3, r1
 80076fa:	3326      	adds	r3, #38	@ 0x26
 80076fc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80076fe:	2b02      	cmp	r3, #2
 8007700:	f040 8136 	bne.w	8007970 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007704:	78fb      	ldrb	r3, [r7, #3]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	4413      	add	r3, r2
 800770c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800771a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007722:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8007724:	78fb      	ldrb	r3, [r7, #3]
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	4413      	add	r3, r2
 800772c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007730:	461a      	mov	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6013      	str	r3, [r2, #0]
 8007736:	e11b      	b.n	8007970 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8007738:	78fa      	ldrb	r2, [r7, #3]
 800773a:	6879      	ldr	r1, [r7, #4]
 800773c:	4613      	mov	r3, r2
 800773e:	011b      	lsls	r3, r3, #4
 8007740:	1a9b      	subs	r3, r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	440b      	add	r3, r1
 8007746:	334d      	adds	r3, #77	@ 0x4d
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b03      	cmp	r3, #3
 800774c:	f040 8081 	bne.w	8007852 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007750:	78fa      	ldrb	r2, [r7, #3]
 8007752:	6879      	ldr	r1, [r7, #4]
 8007754:	4613      	mov	r3, r2
 8007756:	011b      	lsls	r3, r3, #4
 8007758:	1a9b      	subs	r3, r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	440b      	add	r3, r1
 800775e:	334d      	adds	r3, #77	@ 0x4d
 8007760:	2202      	movs	r2, #2
 8007762:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007764:	78fa      	ldrb	r2, [r7, #3]
 8007766:	6879      	ldr	r1, [r7, #4]
 8007768:	4613      	mov	r3, r2
 800776a:	011b      	lsls	r3, r3, #4
 800776c:	1a9b      	subs	r3, r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	440b      	add	r3, r1
 8007772:	331b      	adds	r3, #27
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	2b01      	cmp	r3, #1
 8007778:	f040 80fa 	bne.w	8007970 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800777c:	78fa      	ldrb	r2, [r7, #3]
 800777e:	6879      	ldr	r1, [r7, #4]
 8007780:	4613      	mov	r3, r2
 8007782:	011b      	lsls	r3, r3, #4
 8007784:	1a9b      	subs	r3, r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	440b      	add	r3, r1
 800778a:	334c      	adds	r3, #76	@ 0x4c
 800778c:	2202      	movs	r2, #2
 800778e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007790:	78fb      	ldrb	r3, [r7, #3]
 8007792:	015a      	lsls	r2, r3, #5
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	4413      	add	r3, r2
 8007798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	78fa      	ldrb	r2, [r7, #3]
 80077a0:	0151      	lsls	r1, r2, #5
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	440a      	add	r2, r1
 80077a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077ae:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	015a      	lsls	r2, r3, #5
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	4413      	add	r3, r2
 80077b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	78fa      	ldrb	r2, [r7, #3]
 80077c0:	0151      	lsls	r1, r2, #5
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	440a      	add	r2, r1
 80077c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077ce:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80077d0:	78fb      	ldrb	r3, [r7, #3]
 80077d2:	015a      	lsls	r2, r3, #5
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	4413      	add	r3, r2
 80077d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	78fa      	ldrb	r2, [r7, #3]
 80077e0:	0151      	lsls	r1, r2, #5
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	440a      	add	r2, r1
 80077e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077ea:	f023 0320 	bic.w	r3, r3, #32
 80077ee:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80077f0:	78fa      	ldrb	r2, [r7, #3]
 80077f2:	6879      	ldr	r1, [r7, #4]
 80077f4:	4613      	mov	r3, r2
 80077f6:	011b      	lsls	r3, r3, #4
 80077f8:	1a9b      	subs	r3, r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	440b      	add	r3, r1
 80077fe:	3326      	adds	r3, #38	@ 0x26
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00b      	beq.n	800781e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007806:	78fa      	ldrb	r2, [r7, #3]
 8007808:	6879      	ldr	r1, [r7, #4]
 800780a:	4613      	mov	r3, r2
 800780c:	011b      	lsls	r3, r3, #4
 800780e:	1a9b      	subs	r3, r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	440b      	add	r3, r1
 8007814:	3326      	adds	r3, #38	@ 0x26
 8007816:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007818:	2b02      	cmp	r3, #2
 800781a:	f040 80a9 	bne.w	8007970 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800781e:	78fb      	ldrb	r3, [r7, #3]
 8007820:	015a      	lsls	r2, r3, #5
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	4413      	add	r3, r2
 8007826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007834:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800783c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800783e:	78fb      	ldrb	r3, [r7, #3]
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	4413      	add	r3, r2
 8007846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800784a:	461a      	mov	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6013      	str	r3, [r2, #0]
 8007850:	e08e      	b.n	8007970 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8007852:	78fa      	ldrb	r2, [r7, #3]
 8007854:	6879      	ldr	r1, [r7, #4]
 8007856:	4613      	mov	r3, r2
 8007858:	011b      	lsls	r3, r3, #4
 800785a:	1a9b      	subs	r3, r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	440b      	add	r3, r1
 8007860:	334d      	adds	r3, #77	@ 0x4d
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	2b04      	cmp	r3, #4
 8007866:	d143      	bne.n	80078f0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007868:	78fa      	ldrb	r2, [r7, #3]
 800786a:	6879      	ldr	r1, [r7, #4]
 800786c:	4613      	mov	r3, r2
 800786e:	011b      	lsls	r3, r3, #4
 8007870:	1a9b      	subs	r3, r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	440b      	add	r3, r1
 8007876:	334d      	adds	r3, #77	@ 0x4d
 8007878:	2202      	movs	r2, #2
 800787a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800787c:	78fa      	ldrb	r2, [r7, #3]
 800787e:	6879      	ldr	r1, [r7, #4]
 8007880:	4613      	mov	r3, r2
 8007882:	011b      	lsls	r3, r3, #4
 8007884:	1a9b      	subs	r3, r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	440b      	add	r3, r1
 800788a:	334c      	adds	r3, #76	@ 0x4c
 800788c:	2202      	movs	r2, #2
 800788e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007890:	78fa      	ldrb	r2, [r7, #3]
 8007892:	6879      	ldr	r1, [r7, #4]
 8007894:	4613      	mov	r3, r2
 8007896:	011b      	lsls	r3, r3, #4
 8007898:	1a9b      	subs	r3, r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	440b      	add	r3, r1
 800789e:	3326      	adds	r3, #38	@ 0x26
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00a      	beq.n	80078bc <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80078a6:	78fa      	ldrb	r2, [r7, #3]
 80078a8:	6879      	ldr	r1, [r7, #4]
 80078aa:	4613      	mov	r3, r2
 80078ac:	011b      	lsls	r3, r3, #4
 80078ae:	1a9b      	subs	r3, r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	440b      	add	r3, r1
 80078b4:	3326      	adds	r3, #38	@ 0x26
 80078b6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d159      	bne.n	8007970 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80078bc:	78fb      	ldrb	r3, [r7, #3]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80078d2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80078da:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80078dc:	78fb      	ldrb	r3, [r7, #3]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078e8:	461a      	mov	r2, r3
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6013      	str	r3, [r2, #0]
 80078ee:	e03f      	b.n	8007970 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80078f0:	78fa      	ldrb	r2, [r7, #3]
 80078f2:	6879      	ldr	r1, [r7, #4]
 80078f4:	4613      	mov	r3, r2
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	1a9b      	subs	r3, r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	440b      	add	r3, r1
 80078fe:	334d      	adds	r3, #77	@ 0x4d
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	2b08      	cmp	r3, #8
 8007904:	d126      	bne.n	8007954 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007906:	78fa      	ldrb	r2, [r7, #3]
 8007908:	6879      	ldr	r1, [r7, #4]
 800790a:	4613      	mov	r3, r2
 800790c:	011b      	lsls	r3, r3, #4
 800790e:	1a9b      	subs	r3, r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	440b      	add	r3, r1
 8007914:	334d      	adds	r3, #77	@ 0x4d
 8007916:	2202      	movs	r2, #2
 8007918:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800791a:	78fa      	ldrb	r2, [r7, #3]
 800791c:	6879      	ldr	r1, [r7, #4]
 800791e:	4613      	mov	r3, r2
 8007920:	011b      	lsls	r3, r3, #4
 8007922:	1a9b      	subs	r3, r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	440b      	add	r3, r1
 8007928:	3344      	adds	r3, #68	@ 0x44
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	1c59      	adds	r1, r3, #1
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	4613      	mov	r3, r2
 8007932:	011b      	lsls	r3, r3, #4
 8007934:	1a9b      	subs	r3, r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4403      	add	r3, r0
 800793a:	3344      	adds	r3, #68	@ 0x44
 800793c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800793e:	78fa      	ldrb	r2, [r7, #3]
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	4613      	mov	r3, r2
 8007944:	011b      	lsls	r3, r3, #4
 8007946:	1a9b      	subs	r3, r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	440b      	add	r3, r1
 800794c:	334c      	adds	r3, #76	@ 0x4c
 800794e:	2204      	movs	r2, #4
 8007950:	701a      	strb	r2, [r3, #0]
 8007952:	e00d      	b.n	8007970 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8007954:	78fa      	ldrb	r2, [r7, #3]
 8007956:	6879      	ldr	r1, [r7, #4]
 8007958:	4613      	mov	r3, r2
 800795a:	011b      	lsls	r3, r3, #4
 800795c:	1a9b      	subs	r3, r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	440b      	add	r3, r1
 8007962:	334d      	adds	r3, #77	@ 0x4d
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	2b02      	cmp	r3, #2
 8007968:	f000 8100 	beq.w	8007b6c <HCD_HC_IN_IRQHandler+0xcca>
 800796c:	e000      	b.n	8007970 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800796e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007970:	78fa      	ldrb	r2, [r7, #3]
 8007972:	6879      	ldr	r1, [r7, #4]
 8007974:	4613      	mov	r3, r2
 8007976:	011b      	lsls	r3, r3, #4
 8007978:	1a9b      	subs	r3, r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	440b      	add	r3, r1
 800797e:	334c      	adds	r3, #76	@ 0x4c
 8007980:	781a      	ldrb	r2, [r3, #0]
 8007982:	78fb      	ldrb	r3, [r7, #3]
 8007984:	4619      	mov	r1, r3
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f009 fa70 	bl	8010e6c <HAL_HCD_HC_NotifyURBChange_Callback>
 800798c:	e0ef      	b.n	8007b6e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	78fa      	ldrb	r2, [r7, #3]
 8007994:	4611      	mov	r1, r2
 8007996:	4618      	mov	r0, r3
 8007998:	f005 fc07 	bl	800d1aa <USB_ReadChInterrupts>
 800799c:	4603      	mov	r3, r0
 800799e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079a2:	2b40      	cmp	r3, #64	@ 0x40
 80079a4:	d12f      	bne.n	8007a06 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80079a6:	78fb      	ldrb	r3, [r7, #3]
 80079a8:	015a      	lsls	r2, r3, #5
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079b2:	461a      	mov	r2, r3
 80079b4:	2340      	movs	r3, #64	@ 0x40
 80079b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80079b8:	78fa      	ldrb	r2, [r7, #3]
 80079ba:	6879      	ldr	r1, [r7, #4]
 80079bc:	4613      	mov	r3, r2
 80079be:	011b      	lsls	r3, r3, #4
 80079c0:	1a9b      	subs	r3, r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	440b      	add	r3, r1
 80079c6:	334d      	adds	r3, #77	@ 0x4d
 80079c8:	2205      	movs	r2, #5
 80079ca:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80079cc:	78fa      	ldrb	r2, [r7, #3]
 80079ce:	6879      	ldr	r1, [r7, #4]
 80079d0:	4613      	mov	r3, r2
 80079d2:	011b      	lsls	r3, r3, #4
 80079d4:	1a9b      	subs	r3, r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	440b      	add	r3, r1
 80079da:	331a      	adds	r3, #26
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d109      	bne.n	80079f6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80079e2:	78fa      	ldrb	r2, [r7, #3]
 80079e4:	6879      	ldr	r1, [r7, #4]
 80079e6:	4613      	mov	r3, r2
 80079e8:	011b      	lsls	r3, r3, #4
 80079ea:	1a9b      	subs	r3, r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	440b      	add	r3, r1
 80079f0:	3344      	adds	r3, #68	@ 0x44
 80079f2:	2200      	movs	r2, #0
 80079f4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	78fa      	ldrb	r2, [r7, #3]
 80079fc:	4611      	mov	r1, r2
 80079fe:	4618      	mov	r0, r3
 8007a00:	f006 f977 	bl	800dcf2 <USB_HC_Halt>
 8007a04:	e0b3      	b.n	8007b6e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	78fa      	ldrb	r2, [r7, #3]
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f005 fbcb 	bl	800d1aa <USB_ReadChInterrupts>
 8007a14:	4603      	mov	r3, r0
 8007a16:	f003 0310 	and.w	r3, r3, #16
 8007a1a:	2b10      	cmp	r3, #16
 8007a1c:	f040 80a7 	bne.w	8007b6e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8007a20:	78fa      	ldrb	r2, [r7, #3]
 8007a22:	6879      	ldr	r1, [r7, #4]
 8007a24:	4613      	mov	r3, r2
 8007a26:	011b      	lsls	r3, r3, #4
 8007a28:	1a9b      	subs	r3, r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	440b      	add	r3, r1
 8007a2e:	3326      	adds	r3, #38	@ 0x26
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d11b      	bne.n	8007a6e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8007a36:	78fa      	ldrb	r2, [r7, #3]
 8007a38:	6879      	ldr	r1, [r7, #4]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	011b      	lsls	r3, r3, #4
 8007a3e:	1a9b      	subs	r3, r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	440b      	add	r3, r1
 8007a44:	3344      	adds	r3, #68	@ 0x44
 8007a46:	2200      	movs	r2, #0
 8007a48:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8007a4a:	78fa      	ldrb	r2, [r7, #3]
 8007a4c:	6879      	ldr	r1, [r7, #4]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	011b      	lsls	r3, r3, #4
 8007a52:	1a9b      	subs	r3, r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	440b      	add	r3, r1
 8007a58:	334d      	adds	r3, #77	@ 0x4d
 8007a5a:	2204      	movs	r2, #4
 8007a5c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	78fa      	ldrb	r2, [r7, #3]
 8007a64:	4611      	mov	r1, r2
 8007a66:	4618      	mov	r0, r3
 8007a68:	f006 f943 	bl	800dcf2 <USB_HC_Halt>
 8007a6c:	e03f      	b.n	8007aee <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007a6e:	78fa      	ldrb	r2, [r7, #3]
 8007a70:	6879      	ldr	r1, [r7, #4]
 8007a72:	4613      	mov	r3, r2
 8007a74:	011b      	lsls	r3, r3, #4
 8007a76:	1a9b      	subs	r3, r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	440b      	add	r3, r1
 8007a7c:	3326      	adds	r3, #38	@ 0x26
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00a      	beq.n	8007a9a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007a84:	78fa      	ldrb	r2, [r7, #3]
 8007a86:	6879      	ldr	r1, [r7, #4]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	011b      	lsls	r3, r3, #4
 8007a8c:	1a9b      	subs	r3, r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	440b      	add	r3, r1
 8007a92:	3326      	adds	r3, #38	@ 0x26
 8007a94:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d129      	bne.n	8007aee <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8007a9a:	78fa      	ldrb	r2, [r7, #3]
 8007a9c:	6879      	ldr	r1, [r7, #4]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	011b      	lsls	r3, r3, #4
 8007aa2:	1a9b      	subs	r3, r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	440b      	add	r3, r1
 8007aa8:	3344      	adds	r3, #68	@ 0x44
 8007aaa:	2200      	movs	r2, #0
 8007aac:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	799b      	ldrb	r3, [r3, #6]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00a      	beq.n	8007acc <HCD_HC_IN_IRQHandler+0xc2a>
 8007ab6:	78fa      	ldrb	r2, [r7, #3]
 8007ab8:	6879      	ldr	r1, [r7, #4]
 8007aba:	4613      	mov	r3, r2
 8007abc:	011b      	lsls	r3, r3, #4
 8007abe:	1a9b      	subs	r3, r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	440b      	add	r3, r1
 8007ac4:	331b      	adds	r3, #27
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d110      	bne.n	8007aee <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8007acc:	78fa      	ldrb	r2, [r7, #3]
 8007ace:	6879      	ldr	r1, [r7, #4]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	011b      	lsls	r3, r3, #4
 8007ad4:	1a9b      	subs	r3, r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	440b      	add	r3, r1
 8007ada:	334d      	adds	r3, #77	@ 0x4d
 8007adc:	2204      	movs	r2, #4
 8007ade:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	78fa      	ldrb	r2, [r7, #3]
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f006 f902 	bl	800dcf2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8007aee:	78fa      	ldrb	r2, [r7, #3]
 8007af0:	6879      	ldr	r1, [r7, #4]
 8007af2:	4613      	mov	r3, r2
 8007af4:	011b      	lsls	r3, r3, #4
 8007af6:	1a9b      	subs	r3, r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	440b      	add	r3, r1
 8007afc:	331b      	adds	r3, #27
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d129      	bne.n	8007b58 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8007b04:	78fa      	ldrb	r2, [r7, #3]
 8007b06:	6879      	ldr	r1, [r7, #4]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	011b      	lsls	r3, r3, #4
 8007b0c:	1a9b      	subs	r3, r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	440b      	add	r3, r1
 8007b12:	331b      	adds	r3, #27
 8007b14:	2200      	movs	r2, #0
 8007b16:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007b18:	78fb      	ldrb	r3, [r7, #3]
 8007b1a:	015a      	lsls	r2, r3, #5
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	78fa      	ldrb	r2, [r7, #3]
 8007b28:	0151      	lsls	r1, r2, #5
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	440a      	add	r2, r1
 8007b2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b36:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8007b38:	78fb      	ldrb	r3, [r7, #3]
 8007b3a:	015a      	lsls	r2, r3, #5
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	4413      	add	r3, r2
 8007b40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	78fa      	ldrb	r2, [r7, #3]
 8007b48:	0151      	lsls	r1, r2, #5
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	440a      	add	r2, r1
 8007b4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b52:	f043 0320 	orr.w	r3, r3, #32
 8007b56:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007b58:	78fb      	ldrb	r3, [r7, #3]
 8007b5a:	015a      	lsls	r2, r3, #5
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	4413      	add	r3, r2
 8007b60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b64:	461a      	mov	r2, r3
 8007b66:	2310      	movs	r3, #16
 8007b68:	6093      	str	r3, [r2, #8]
 8007b6a:	e000      	b.n	8007b6e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8007b6c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	78fa      	ldrb	r2, [r7, #3]
 8007b90:	4611      	mov	r1, r2
 8007b92:	4618      	mov	r0, r3
 8007b94:	f005 fb09 	bl	800d1aa <USB_ReadChInterrupts>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	f003 0304 	and.w	r3, r3, #4
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	d11b      	bne.n	8007bda <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8007ba2:	78fb      	ldrb	r3, [r7, #3]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bae:	461a      	mov	r2, r3
 8007bb0:	2304      	movs	r3, #4
 8007bb2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007bb4:	78fa      	ldrb	r2, [r7, #3]
 8007bb6:	6879      	ldr	r1, [r7, #4]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	011b      	lsls	r3, r3, #4
 8007bbc:	1a9b      	subs	r3, r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	440b      	add	r3, r1
 8007bc2:	334d      	adds	r3, #77	@ 0x4d
 8007bc4:	2207      	movs	r2, #7
 8007bc6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	78fa      	ldrb	r2, [r7, #3]
 8007bce:	4611      	mov	r1, r2
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f006 f88e 	bl	800dcf2 <USB_HC_Halt>
 8007bd6:	f000 bc89 	b.w	80084ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	78fa      	ldrb	r2, [r7, #3]
 8007be0:	4611      	mov	r1, r2
 8007be2:	4618      	mov	r0, r3
 8007be4:	f005 fae1 	bl	800d1aa <USB_ReadChInterrupts>
 8007be8:	4603      	mov	r3, r0
 8007bea:	f003 0320 	and.w	r3, r3, #32
 8007bee:	2b20      	cmp	r3, #32
 8007bf0:	f040 8082 	bne.w	8007cf8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007bf4:	78fb      	ldrb	r3, [r7, #3]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c00:	461a      	mov	r2, r3
 8007c02:	2320      	movs	r3, #32
 8007c04:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8007c06:	78fa      	ldrb	r2, [r7, #3]
 8007c08:	6879      	ldr	r1, [r7, #4]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	011b      	lsls	r3, r3, #4
 8007c0e:	1a9b      	subs	r3, r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	440b      	add	r3, r1
 8007c14:	3319      	adds	r3, #25
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d124      	bne.n	8007c66 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8007c1c:	78fa      	ldrb	r2, [r7, #3]
 8007c1e:	6879      	ldr	r1, [r7, #4]
 8007c20:	4613      	mov	r3, r2
 8007c22:	011b      	lsls	r3, r3, #4
 8007c24:	1a9b      	subs	r3, r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	440b      	add	r3, r1
 8007c2a:	3319      	adds	r3, #25
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007c30:	78fa      	ldrb	r2, [r7, #3]
 8007c32:	6879      	ldr	r1, [r7, #4]
 8007c34:	4613      	mov	r3, r2
 8007c36:	011b      	lsls	r3, r3, #4
 8007c38:	1a9b      	subs	r3, r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	440b      	add	r3, r1
 8007c3e:	334c      	adds	r3, #76	@ 0x4c
 8007c40:	2202      	movs	r2, #2
 8007c42:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8007c44:	78fa      	ldrb	r2, [r7, #3]
 8007c46:	6879      	ldr	r1, [r7, #4]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	011b      	lsls	r3, r3, #4
 8007c4c:	1a9b      	subs	r3, r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	440b      	add	r3, r1
 8007c52:	334d      	adds	r3, #77	@ 0x4d
 8007c54:	2203      	movs	r2, #3
 8007c56:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	78fa      	ldrb	r2, [r7, #3]
 8007c5e:	4611      	mov	r1, r2
 8007c60:	4618      	mov	r0, r3
 8007c62:	f006 f846 	bl	800dcf2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8007c66:	78fa      	ldrb	r2, [r7, #3]
 8007c68:	6879      	ldr	r1, [r7, #4]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	011b      	lsls	r3, r3, #4
 8007c6e:	1a9b      	subs	r3, r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	440b      	add	r3, r1
 8007c74:	331a      	adds	r3, #26
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	f040 8437 	bne.w	80084ec <HCD_HC_OUT_IRQHandler+0x978>
 8007c7e:	78fa      	ldrb	r2, [r7, #3]
 8007c80:	6879      	ldr	r1, [r7, #4]
 8007c82:	4613      	mov	r3, r2
 8007c84:	011b      	lsls	r3, r3, #4
 8007c86:	1a9b      	subs	r3, r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	440b      	add	r3, r1
 8007c8c:	331b      	adds	r3, #27
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f040 842b 	bne.w	80084ec <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8007c96:	78fa      	ldrb	r2, [r7, #3]
 8007c98:	6879      	ldr	r1, [r7, #4]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	011b      	lsls	r3, r3, #4
 8007c9e:	1a9b      	subs	r3, r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	440b      	add	r3, r1
 8007ca4:	3326      	adds	r3, #38	@ 0x26
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d009      	beq.n	8007cc0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8007cac:	78fa      	ldrb	r2, [r7, #3]
 8007cae:	6879      	ldr	r1, [r7, #4]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	011b      	lsls	r3, r3, #4
 8007cb4:	1a9b      	subs	r3, r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	440b      	add	r3, r1
 8007cba:	331b      	adds	r3, #27
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8007cc0:	78fa      	ldrb	r2, [r7, #3]
 8007cc2:	6879      	ldr	r1, [r7, #4]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	1a9b      	subs	r3, r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	440b      	add	r3, r1
 8007cce:	334d      	adds	r3, #77	@ 0x4d
 8007cd0:	2203      	movs	r2, #3
 8007cd2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	78fa      	ldrb	r2, [r7, #3]
 8007cda:	4611      	mov	r1, r2
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f006 f808 	bl	800dcf2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8007ce2:	78fa      	ldrb	r2, [r7, #3]
 8007ce4:	6879      	ldr	r1, [r7, #4]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	011b      	lsls	r3, r3, #4
 8007cea:	1a9b      	subs	r3, r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	440b      	add	r3, r1
 8007cf0:	3344      	adds	r3, #68	@ 0x44
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	e3f9      	b.n	80084ec <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	78fa      	ldrb	r2, [r7, #3]
 8007cfe:	4611      	mov	r1, r2
 8007d00:	4618      	mov	r0, r3
 8007d02:	f005 fa52 	bl	800d1aa <USB_ReadChInterrupts>
 8007d06:	4603      	mov	r3, r0
 8007d08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d10:	d111      	bne.n	8007d36 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8007d12:	78fb      	ldrb	r3, [r7, #3]
 8007d14:	015a      	lsls	r2, r3, #5
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	4413      	add	r3, r2
 8007d1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d1e:	461a      	mov	r2, r3
 8007d20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d24:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	78fa      	ldrb	r2, [r7, #3]
 8007d2c:	4611      	mov	r1, r2
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f005 ffdf 	bl	800dcf2 <USB_HC_Halt>
 8007d34:	e3da      	b.n	80084ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	78fa      	ldrb	r2, [r7, #3]
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f005 fa33 	bl	800d1aa <USB_ReadChInterrupts>
 8007d44:	4603      	mov	r3, r0
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d168      	bne.n	8007e20 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8007d4e:	78fa      	ldrb	r2, [r7, #3]
 8007d50:	6879      	ldr	r1, [r7, #4]
 8007d52:	4613      	mov	r3, r2
 8007d54:	011b      	lsls	r3, r3, #4
 8007d56:	1a9b      	subs	r3, r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	440b      	add	r3, r1
 8007d5c:	3344      	adds	r3, #68	@ 0x44
 8007d5e:	2200      	movs	r2, #0
 8007d60:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	78fa      	ldrb	r2, [r7, #3]
 8007d68:	4611      	mov	r1, r2
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f005 fa1d 	bl	800d1aa <USB_ReadChInterrupts>
 8007d70:	4603      	mov	r3, r0
 8007d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d76:	2b40      	cmp	r3, #64	@ 0x40
 8007d78:	d112      	bne.n	8007da0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8007d7a:	78fa      	ldrb	r2, [r7, #3]
 8007d7c:	6879      	ldr	r1, [r7, #4]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	011b      	lsls	r3, r3, #4
 8007d82:	1a9b      	subs	r3, r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	440b      	add	r3, r1
 8007d88:	3319      	adds	r3, #25
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007d8e:	78fb      	ldrb	r3, [r7, #3]
 8007d90:	015a      	lsls	r2, r3, #5
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	4413      	add	r3, r2
 8007d96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	2340      	movs	r3, #64	@ 0x40
 8007d9e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8007da0:	78fa      	ldrb	r2, [r7, #3]
 8007da2:	6879      	ldr	r1, [r7, #4]
 8007da4:	4613      	mov	r3, r2
 8007da6:	011b      	lsls	r3, r3, #4
 8007da8:	1a9b      	subs	r3, r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	440b      	add	r3, r1
 8007dae:	331b      	adds	r3, #27
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d019      	beq.n	8007dea <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8007db6:	78fa      	ldrb	r2, [r7, #3]
 8007db8:	6879      	ldr	r1, [r7, #4]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	011b      	lsls	r3, r3, #4
 8007dbe:	1a9b      	subs	r3, r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	440b      	add	r3, r1
 8007dc4:	331b      	adds	r3, #27
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007dca:	78fb      	ldrb	r3, [r7, #3]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	78fa      	ldrb	r2, [r7, #3]
 8007dda:	0151      	lsls	r1, r2, #5
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	440a      	add	r2, r1
 8007de0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007de4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007de8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8007dea:	78fb      	ldrb	r3, [r7, #3]
 8007dec:	015a      	lsls	r2, r3, #5
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007df6:	461a      	mov	r2, r3
 8007df8:	2301      	movs	r3, #1
 8007dfa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8007dfc:	78fa      	ldrb	r2, [r7, #3]
 8007dfe:	6879      	ldr	r1, [r7, #4]
 8007e00:	4613      	mov	r3, r2
 8007e02:	011b      	lsls	r3, r3, #4
 8007e04:	1a9b      	subs	r3, r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	440b      	add	r3, r1
 8007e0a:	334d      	adds	r3, #77	@ 0x4d
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	78fa      	ldrb	r2, [r7, #3]
 8007e16:	4611      	mov	r1, r2
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f005 ff6a 	bl	800dcf2 <USB_HC_Halt>
 8007e1e:	e365      	b.n	80084ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	78fa      	ldrb	r2, [r7, #3]
 8007e26:	4611      	mov	r1, r2
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f005 f9be 	bl	800d1aa <USB_ReadChInterrupts>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e34:	2b40      	cmp	r3, #64	@ 0x40
 8007e36:	d139      	bne.n	8007eac <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8007e38:	78fa      	ldrb	r2, [r7, #3]
 8007e3a:	6879      	ldr	r1, [r7, #4]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	011b      	lsls	r3, r3, #4
 8007e40:	1a9b      	subs	r3, r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	440b      	add	r3, r1
 8007e46:	334d      	adds	r3, #77	@ 0x4d
 8007e48:	2205      	movs	r2, #5
 8007e4a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8007e4c:	78fa      	ldrb	r2, [r7, #3]
 8007e4e:	6879      	ldr	r1, [r7, #4]
 8007e50:	4613      	mov	r3, r2
 8007e52:	011b      	lsls	r3, r3, #4
 8007e54:	1a9b      	subs	r3, r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	440b      	add	r3, r1
 8007e5a:	331a      	adds	r3, #26
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d109      	bne.n	8007e76 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8007e62:	78fa      	ldrb	r2, [r7, #3]
 8007e64:	6879      	ldr	r1, [r7, #4]
 8007e66:	4613      	mov	r3, r2
 8007e68:	011b      	lsls	r3, r3, #4
 8007e6a:	1a9b      	subs	r3, r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	440b      	add	r3, r1
 8007e70:	3319      	adds	r3, #25
 8007e72:	2201      	movs	r2, #1
 8007e74:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8007e76:	78fa      	ldrb	r2, [r7, #3]
 8007e78:	6879      	ldr	r1, [r7, #4]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	011b      	lsls	r3, r3, #4
 8007e7e:	1a9b      	subs	r3, r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	440b      	add	r3, r1
 8007e84:	3344      	adds	r3, #68	@ 0x44
 8007e86:	2200      	movs	r2, #0
 8007e88:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	78fa      	ldrb	r2, [r7, #3]
 8007e90:	4611      	mov	r1, r2
 8007e92:	4618      	mov	r0, r3
 8007e94:	f005 ff2d 	bl	800dcf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007e98:	78fb      	ldrb	r3, [r7, #3]
 8007e9a:	015a      	lsls	r2, r3, #5
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	2340      	movs	r3, #64	@ 0x40
 8007ea8:	6093      	str	r3, [r2, #8]
 8007eaa:	e31f      	b.n	80084ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	78fa      	ldrb	r2, [r7, #3]
 8007eb2:	4611      	mov	r1, r2
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f005 f978 	bl	800d1aa <USB_ReadChInterrupts>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	f003 0308 	and.w	r3, r3, #8
 8007ec0:	2b08      	cmp	r3, #8
 8007ec2:	d11a      	bne.n	8007efa <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8007ec4:	78fb      	ldrb	r3, [r7, #3]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	2308      	movs	r3, #8
 8007ed4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8007ed6:	78fa      	ldrb	r2, [r7, #3]
 8007ed8:	6879      	ldr	r1, [r7, #4]
 8007eda:	4613      	mov	r3, r2
 8007edc:	011b      	lsls	r3, r3, #4
 8007ede:	1a9b      	subs	r3, r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	440b      	add	r3, r1
 8007ee4:	334d      	adds	r3, #77	@ 0x4d
 8007ee6:	2206      	movs	r2, #6
 8007ee8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	78fa      	ldrb	r2, [r7, #3]
 8007ef0:	4611      	mov	r1, r2
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f005 fefd 	bl	800dcf2 <USB_HC_Halt>
 8007ef8:	e2f8      	b.n	80084ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	78fa      	ldrb	r2, [r7, #3]
 8007f00:	4611      	mov	r1, r2
 8007f02:	4618      	mov	r0, r3
 8007f04:	f005 f951 	bl	800d1aa <USB_ReadChInterrupts>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	f003 0310 	and.w	r3, r3, #16
 8007f0e:	2b10      	cmp	r3, #16
 8007f10:	d144      	bne.n	8007f9c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8007f12:	78fa      	ldrb	r2, [r7, #3]
 8007f14:	6879      	ldr	r1, [r7, #4]
 8007f16:	4613      	mov	r3, r2
 8007f18:	011b      	lsls	r3, r3, #4
 8007f1a:	1a9b      	subs	r3, r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	440b      	add	r3, r1
 8007f20:	3344      	adds	r3, #68	@ 0x44
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8007f26:	78fa      	ldrb	r2, [r7, #3]
 8007f28:	6879      	ldr	r1, [r7, #4]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	011b      	lsls	r3, r3, #4
 8007f2e:	1a9b      	subs	r3, r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	440b      	add	r3, r1
 8007f34:	334d      	adds	r3, #77	@ 0x4d
 8007f36:	2204      	movs	r2, #4
 8007f38:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8007f3a:	78fa      	ldrb	r2, [r7, #3]
 8007f3c:	6879      	ldr	r1, [r7, #4]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	011b      	lsls	r3, r3, #4
 8007f42:	1a9b      	subs	r3, r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	440b      	add	r3, r1
 8007f48:	3319      	adds	r3, #25
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d114      	bne.n	8007f7a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8007f50:	78fa      	ldrb	r2, [r7, #3]
 8007f52:	6879      	ldr	r1, [r7, #4]
 8007f54:	4613      	mov	r3, r2
 8007f56:	011b      	lsls	r3, r3, #4
 8007f58:	1a9b      	subs	r3, r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	440b      	add	r3, r1
 8007f5e:	3318      	adds	r3, #24
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d109      	bne.n	8007f7a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8007f66:	78fa      	ldrb	r2, [r7, #3]
 8007f68:	6879      	ldr	r1, [r7, #4]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	011b      	lsls	r3, r3, #4
 8007f6e:	1a9b      	subs	r3, r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	440b      	add	r3, r1
 8007f74:	3319      	adds	r3, #25
 8007f76:	2201      	movs	r2, #1
 8007f78:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	78fa      	ldrb	r2, [r7, #3]
 8007f80:	4611      	mov	r1, r2
 8007f82:	4618      	mov	r0, r3
 8007f84:	f005 feb5 	bl	800dcf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007f88:	78fb      	ldrb	r3, [r7, #3]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f94:	461a      	mov	r2, r3
 8007f96:	2310      	movs	r3, #16
 8007f98:	6093      	str	r3, [r2, #8]
 8007f9a:	e2a7      	b.n	80084ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	78fa      	ldrb	r2, [r7, #3]
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f005 f900 	bl	800d1aa <USB_ReadChInterrupts>
 8007faa:	4603      	mov	r3, r0
 8007fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fb0:	2b80      	cmp	r3, #128	@ 0x80
 8007fb2:	f040 8083 	bne.w	80080bc <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	799b      	ldrb	r3, [r3, #6]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d111      	bne.n	8007fe2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8007fbe:	78fa      	ldrb	r2, [r7, #3]
 8007fc0:	6879      	ldr	r1, [r7, #4]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	011b      	lsls	r3, r3, #4
 8007fc6:	1a9b      	subs	r3, r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	440b      	add	r3, r1
 8007fcc:	334d      	adds	r3, #77	@ 0x4d
 8007fce:	2207      	movs	r2, #7
 8007fd0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	78fa      	ldrb	r2, [r7, #3]
 8007fd8:	4611      	mov	r1, r2
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f005 fe89 	bl	800dcf2 <USB_HC_Halt>
 8007fe0:	e062      	b.n	80080a8 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8007fe2:	78fa      	ldrb	r2, [r7, #3]
 8007fe4:	6879      	ldr	r1, [r7, #4]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	011b      	lsls	r3, r3, #4
 8007fea:	1a9b      	subs	r3, r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	440b      	add	r3, r1
 8007ff0:	3344      	adds	r3, #68	@ 0x44
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	1c59      	adds	r1, r3, #1
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	011b      	lsls	r3, r3, #4
 8007ffc:	1a9b      	subs	r3, r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4403      	add	r3, r0
 8008002:	3344      	adds	r3, #68	@ 0x44
 8008004:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008006:	78fa      	ldrb	r2, [r7, #3]
 8008008:	6879      	ldr	r1, [r7, #4]
 800800a:	4613      	mov	r3, r2
 800800c:	011b      	lsls	r3, r3, #4
 800800e:	1a9b      	subs	r3, r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	440b      	add	r3, r1
 8008014:	3344      	adds	r3, #68	@ 0x44
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b02      	cmp	r3, #2
 800801a:	d922      	bls.n	8008062 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800801c:	78fa      	ldrb	r2, [r7, #3]
 800801e:	6879      	ldr	r1, [r7, #4]
 8008020:	4613      	mov	r3, r2
 8008022:	011b      	lsls	r3, r3, #4
 8008024:	1a9b      	subs	r3, r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	440b      	add	r3, r1
 800802a:	3344      	adds	r3, #68	@ 0x44
 800802c:	2200      	movs	r2, #0
 800802e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008030:	78fa      	ldrb	r2, [r7, #3]
 8008032:	6879      	ldr	r1, [r7, #4]
 8008034:	4613      	mov	r3, r2
 8008036:	011b      	lsls	r3, r3, #4
 8008038:	1a9b      	subs	r3, r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	440b      	add	r3, r1
 800803e:	334c      	adds	r3, #76	@ 0x4c
 8008040:	2204      	movs	r2, #4
 8008042:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008044:	78fa      	ldrb	r2, [r7, #3]
 8008046:	6879      	ldr	r1, [r7, #4]
 8008048:	4613      	mov	r3, r2
 800804a:	011b      	lsls	r3, r3, #4
 800804c:	1a9b      	subs	r3, r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	440b      	add	r3, r1
 8008052:	334c      	adds	r3, #76	@ 0x4c
 8008054:	781a      	ldrb	r2, [r3, #0]
 8008056:	78fb      	ldrb	r3, [r7, #3]
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f008 ff06 	bl	8010e6c <HAL_HCD_HC_NotifyURBChange_Callback>
 8008060:	e022      	b.n	80080a8 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008062:	78fa      	ldrb	r2, [r7, #3]
 8008064:	6879      	ldr	r1, [r7, #4]
 8008066:	4613      	mov	r3, r2
 8008068:	011b      	lsls	r3, r3, #4
 800806a:	1a9b      	subs	r3, r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	440b      	add	r3, r1
 8008070:	334c      	adds	r3, #76	@ 0x4c
 8008072:	2202      	movs	r2, #2
 8008074:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008076:	78fb      	ldrb	r3, [r7, #3]
 8008078:	015a      	lsls	r2, r3, #5
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	4413      	add	r3, r2
 800807e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800808c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008094:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008096:	78fb      	ldrb	r3, [r7, #3]
 8008098:	015a      	lsls	r2, r3, #5
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	4413      	add	r3, r2
 800809e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080a2:	461a      	mov	r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80080a8:	78fb      	ldrb	r3, [r7, #3]
 80080aa:	015a      	lsls	r2, r3, #5
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	4413      	add	r3, r2
 80080b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080b4:	461a      	mov	r2, r3
 80080b6:	2380      	movs	r3, #128	@ 0x80
 80080b8:	6093      	str	r3, [r2, #8]
 80080ba:	e217      	b.n	80084ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	78fa      	ldrb	r2, [r7, #3]
 80080c2:	4611      	mov	r1, r2
 80080c4:	4618      	mov	r0, r3
 80080c6:	f005 f870 	bl	800d1aa <USB_ReadChInterrupts>
 80080ca:	4603      	mov	r3, r0
 80080cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080d4:	d11b      	bne.n	800810e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80080d6:	78fa      	ldrb	r2, [r7, #3]
 80080d8:	6879      	ldr	r1, [r7, #4]
 80080da:	4613      	mov	r3, r2
 80080dc:	011b      	lsls	r3, r3, #4
 80080de:	1a9b      	subs	r3, r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	440b      	add	r3, r1
 80080e4:	334d      	adds	r3, #77	@ 0x4d
 80080e6:	2209      	movs	r2, #9
 80080e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	78fa      	ldrb	r2, [r7, #3]
 80080f0:	4611      	mov	r1, r2
 80080f2:	4618      	mov	r0, r3
 80080f4:	f005 fdfd 	bl	800dcf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80080f8:	78fb      	ldrb	r3, [r7, #3]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008104:	461a      	mov	r2, r3
 8008106:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800810a:	6093      	str	r3, [r2, #8]
 800810c:	e1ee      	b.n	80084ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	78fa      	ldrb	r2, [r7, #3]
 8008114:	4611      	mov	r1, r2
 8008116:	4618      	mov	r0, r3
 8008118:	f005 f847 	bl	800d1aa <USB_ReadChInterrupts>
 800811c:	4603      	mov	r3, r0
 800811e:	f003 0302 	and.w	r3, r3, #2
 8008122:	2b02      	cmp	r3, #2
 8008124:	f040 81df 	bne.w	80084e6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008128:	78fb      	ldrb	r3, [r7, #3]
 800812a:	015a      	lsls	r2, r3, #5
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	4413      	add	r3, r2
 8008130:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008134:	461a      	mov	r2, r3
 8008136:	2302      	movs	r3, #2
 8008138:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800813a:	78fa      	ldrb	r2, [r7, #3]
 800813c:	6879      	ldr	r1, [r7, #4]
 800813e:	4613      	mov	r3, r2
 8008140:	011b      	lsls	r3, r3, #4
 8008142:	1a9b      	subs	r3, r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	440b      	add	r3, r1
 8008148:	334d      	adds	r3, #77	@ 0x4d
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	2b01      	cmp	r3, #1
 800814e:	f040 8093 	bne.w	8008278 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008152:	78fa      	ldrb	r2, [r7, #3]
 8008154:	6879      	ldr	r1, [r7, #4]
 8008156:	4613      	mov	r3, r2
 8008158:	011b      	lsls	r3, r3, #4
 800815a:	1a9b      	subs	r3, r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	440b      	add	r3, r1
 8008160:	334d      	adds	r3, #77	@ 0x4d
 8008162:	2202      	movs	r2, #2
 8008164:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008166:	78fa      	ldrb	r2, [r7, #3]
 8008168:	6879      	ldr	r1, [r7, #4]
 800816a:	4613      	mov	r3, r2
 800816c:	011b      	lsls	r3, r3, #4
 800816e:	1a9b      	subs	r3, r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	440b      	add	r3, r1
 8008174:	334c      	adds	r3, #76	@ 0x4c
 8008176:	2201      	movs	r2, #1
 8008178:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800817a:	78fa      	ldrb	r2, [r7, #3]
 800817c:	6879      	ldr	r1, [r7, #4]
 800817e:	4613      	mov	r3, r2
 8008180:	011b      	lsls	r3, r3, #4
 8008182:	1a9b      	subs	r3, r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	440b      	add	r3, r1
 8008188:	3326      	adds	r3, #38	@ 0x26
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	2b02      	cmp	r3, #2
 800818e:	d00b      	beq.n	80081a8 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8008190:	78fa      	ldrb	r2, [r7, #3]
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	4613      	mov	r3, r2
 8008196:	011b      	lsls	r3, r3, #4
 8008198:	1a9b      	subs	r3, r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	440b      	add	r3, r1
 800819e:	3326      	adds	r3, #38	@ 0x26
 80081a0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80081a2:	2b03      	cmp	r3, #3
 80081a4:	f040 8190 	bne.w	80084c8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	799b      	ldrb	r3, [r3, #6]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d115      	bne.n	80081dc <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80081b0:	78fa      	ldrb	r2, [r7, #3]
 80081b2:	6879      	ldr	r1, [r7, #4]
 80081b4:	4613      	mov	r3, r2
 80081b6:	011b      	lsls	r3, r3, #4
 80081b8:	1a9b      	subs	r3, r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	440b      	add	r3, r1
 80081be:	333d      	adds	r3, #61	@ 0x3d
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	78fa      	ldrb	r2, [r7, #3]
 80081c4:	f083 0301 	eor.w	r3, r3, #1
 80081c8:	b2d8      	uxtb	r0, r3
 80081ca:	6879      	ldr	r1, [r7, #4]
 80081cc:	4613      	mov	r3, r2
 80081ce:	011b      	lsls	r3, r3, #4
 80081d0:	1a9b      	subs	r3, r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	440b      	add	r3, r1
 80081d6:	333d      	adds	r3, #61	@ 0x3d
 80081d8:	4602      	mov	r2, r0
 80081da:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	799b      	ldrb	r3, [r3, #6]
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	f040 8171 	bne.w	80084c8 <HCD_HC_OUT_IRQHandler+0x954>
 80081e6:	78fa      	ldrb	r2, [r7, #3]
 80081e8:	6879      	ldr	r1, [r7, #4]
 80081ea:	4613      	mov	r3, r2
 80081ec:	011b      	lsls	r3, r3, #4
 80081ee:	1a9b      	subs	r3, r3, r2
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	440b      	add	r3, r1
 80081f4:	3334      	adds	r3, #52	@ 0x34
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 8165 	beq.w	80084c8 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80081fe:	78fa      	ldrb	r2, [r7, #3]
 8008200:	6879      	ldr	r1, [r7, #4]
 8008202:	4613      	mov	r3, r2
 8008204:	011b      	lsls	r3, r3, #4
 8008206:	1a9b      	subs	r3, r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	440b      	add	r3, r1
 800820c:	3334      	adds	r3, #52	@ 0x34
 800820e:	6819      	ldr	r1, [r3, #0]
 8008210:	78fa      	ldrb	r2, [r7, #3]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	4613      	mov	r3, r2
 8008216:	011b      	lsls	r3, r3, #4
 8008218:	1a9b      	subs	r3, r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4403      	add	r3, r0
 800821e:	3328      	adds	r3, #40	@ 0x28
 8008220:	881b      	ldrh	r3, [r3, #0]
 8008222:	440b      	add	r3, r1
 8008224:	1e59      	subs	r1, r3, #1
 8008226:	78fa      	ldrb	r2, [r7, #3]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	4613      	mov	r3, r2
 800822c:	011b      	lsls	r3, r3, #4
 800822e:	1a9b      	subs	r3, r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4403      	add	r3, r0
 8008234:	3328      	adds	r3, #40	@ 0x28
 8008236:	881b      	ldrh	r3, [r3, #0]
 8008238:	fbb1 f3f3 	udiv	r3, r1, r3
 800823c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	2b00      	cmp	r3, #0
 8008246:	f000 813f 	beq.w	80084c8 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800824a:	78fa      	ldrb	r2, [r7, #3]
 800824c:	6879      	ldr	r1, [r7, #4]
 800824e:	4613      	mov	r3, r2
 8008250:	011b      	lsls	r3, r3, #4
 8008252:	1a9b      	subs	r3, r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	440b      	add	r3, r1
 8008258:	333d      	adds	r3, #61	@ 0x3d
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	78fa      	ldrb	r2, [r7, #3]
 800825e:	f083 0301 	eor.w	r3, r3, #1
 8008262:	b2d8      	uxtb	r0, r3
 8008264:	6879      	ldr	r1, [r7, #4]
 8008266:	4613      	mov	r3, r2
 8008268:	011b      	lsls	r3, r3, #4
 800826a:	1a9b      	subs	r3, r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	440b      	add	r3, r1
 8008270:	333d      	adds	r3, #61	@ 0x3d
 8008272:	4602      	mov	r2, r0
 8008274:	701a      	strb	r2, [r3, #0]
 8008276:	e127      	b.n	80084c8 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8008278:	78fa      	ldrb	r2, [r7, #3]
 800827a:	6879      	ldr	r1, [r7, #4]
 800827c:	4613      	mov	r3, r2
 800827e:	011b      	lsls	r3, r3, #4
 8008280:	1a9b      	subs	r3, r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	440b      	add	r3, r1
 8008286:	334d      	adds	r3, #77	@ 0x4d
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	2b03      	cmp	r3, #3
 800828c:	d120      	bne.n	80082d0 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800828e:	78fa      	ldrb	r2, [r7, #3]
 8008290:	6879      	ldr	r1, [r7, #4]
 8008292:	4613      	mov	r3, r2
 8008294:	011b      	lsls	r3, r3, #4
 8008296:	1a9b      	subs	r3, r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	440b      	add	r3, r1
 800829c:	334d      	adds	r3, #77	@ 0x4d
 800829e:	2202      	movs	r2, #2
 80082a0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80082a2:	78fa      	ldrb	r2, [r7, #3]
 80082a4:	6879      	ldr	r1, [r7, #4]
 80082a6:	4613      	mov	r3, r2
 80082a8:	011b      	lsls	r3, r3, #4
 80082aa:	1a9b      	subs	r3, r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	440b      	add	r3, r1
 80082b0:	331b      	adds	r3, #27
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	f040 8107 	bne.w	80084c8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80082ba:	78fa      	ldrb	r2, [r7, #3]
 80082bc:	6879      	ldr	r1, [r7, #4]
 80082be:	4613      	mov	r3, r2
 80082c0:	011b      	lsls	r3, r3, #4
 80082c2:	1a9b      	subs	r3, r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	440b      	add	r3, r1
 80082c8:	334c      	adds	r3, #76	@ 0x4c
 80082ca:	2202      	movs	r2, #2
 80082cc:	701a      	strb	r2, [r3, #0]
 80082ce:	e0fb      	b.n	80084c8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80082d0:	78fa      	ldrb	r2, [r7, #3]
 80082d2:	6879      	ldr	r1, [r7, #4]
 80082d4:	4613      	mov	r3, r2
 80082d6:	011b      	lsls	r3, r3, #4
 80082d8:	1a9b      	subs	r3, r3, r2
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	440b      	add	r3, r1
 80082de:	334d      	adds	r3, #77	@ 0x4d
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	2b04      	cmp	r3, #4
 80082e4:	d13a      	bne.n	800835c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80082e6:	78fa      	ldrb	r2, [r7, #3]
 80082e8:	6879      	ldr	r1, [r7, #4]
 80082ea:	4613      	mov	r3, r2
 80082ec:	011b      	lsls	r3, r3, #4
 80082ee:	1a9b      	subs	r3, r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	440b      	add	r3, r1
 80082f4:	334d      	adds	r3, #77	@ 0x4d
 80082f6:	2202      	movs	r2, #2
 80082f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80082fa:	78fa      	ldrb	r2, [r7, #3]
 80082fc:	6879      	ldr	r1, [r7, #4]
 80082fe:	4613      	mov	r3, r2
 8008300:	011b      	lsls	r3, r3, #4
 8008302:	1a9b      	subs	r3, r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	440b      	add	r3, r1
 8008308:	334c      	adds	r3, #76	@ 0x4c
 800830a:	2202      	movs	r2, #2
 800830c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800830e:	78fa      	ldrb	r2, [r7, #3]
 8008310:	6879      	ldr	r1, [r7, #4]
 8008312:	4613      	mov	r3, r2
 8008314:	011b      	lsls	r3, r3, #4
 8008316:	1a9b      	subs	r3, r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	440b      	add	r3, r1
 800831c:	331b      	adds	r3, #27
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	2b01      	cmp	r3, #1
 8008322:	f040 80d1 	bne.w	80084c8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8008326:	78fa      	ldrb	r2, [r7, #3]
 8008328:	6879      	ldr	r1, [r7, #4]
 800832a:	4613      	mov	r3, r2
 800832c:	011b      	lsls	r3, r3, #4
 800832e:	1a9b      	subs	r3, r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	440b      	add	r3, r1
 8008334:	331b      	adds	r3, #27
 8008336:	2200      	movs	r2, #0
 8008338:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800833a:	78fb      	ldrb	r3, [r7, #3]
 800833c:	015a      	lsls	r2, r3, #5
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	4413      	add	r3, r2
 8008342:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	78fa      	ldrb	r2, [r7, #3]
 800834a:	0151      	lsls	r1, r2, #5
 800834c:	693a      	ldr	r2, [r7, #16]
 800834e:	440a      	add	r2, r1
 8008350:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008354:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008358:	6053      	str	r3, [r2, #4]
 800835a:	e0b5      	b.n	80084c8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800835c:	78fa      	ldrb	r2, [r7, #3]
 800835e:	6879      	ldr	r1, [r7, #4]
 8008360:	4613      	mov	r3, r2
 8008362:	011b      	lsls	r3, r3, #4
 8008364:	1a9b      	subs	r3, r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	440b      	add	r3, r1
 800836a:	334d      	adds	r3, #77	@ 0x4d
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	2b05      	cmp	r3, #5
 8008370:	d114      	bne.n	800839c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008372:	78fa      	ldrb	r2, [r7, #3]
 8008374:	6879      	ldr	r1, [r7, #4]
 8008376:	4613      	mov	r3, r2
 8008378:	011b      	lsls	r3, r3, #4
 800837a:	1a9b      	subs	r3, r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	440b      	add	r3, r1
 8008380:	334d      	adds	r3, #77	@ 0x4d
 8008382:	2202      	movs	r2, #2
 8008384:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8008386:	78fa      	ldrb	r2, [r7, #3]
 8008388:	6879      	ldr	r1, [r7, #4]
 800838a:	4613      	mov	r3, r2
 800838c:	011b      	lsls	r3, r3, #4
 800838e:	1a9b      	subs	r3, r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	440b      	add	r3, r1
 8008394:	334c      	adds	r3, #76	@ 0x4c
 8008396:	2202      	movs	r2, #2
 8008398:	701a      	strb	r2, [r3, #0]
 800839a:	e095      	b.n	80084c8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800839c:	78fa      	ldrb	r2, [r7, #3]
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	4613      	mov	r3, r2
 80083a2:	011b      	lsls	r3, r3, #4
 80083a4:	1a9b      	subs	r3, r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	440b      	add	r3, r1
 80083aa:	334d      	adds	r3, #77	@ 0x4d
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	2b06      	cmp	r3, #6
 80083b0:	d114      	bne.n	80083dc <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80083b2:	78fa      	ldrb	r2, [r7, #3]
 80083b4:	6879      	ldr	r1, [r7, #4]
 80083b6:	4613      	mov	r3, r2
 80083b8:	011b      	lsls	r3, r3, #4
 80083ba:	1a9b      	subs	r3, r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	440b      	add	r3, r1
 80083c0:	334d      	adds	r3, #77	@ 0x4d
 80083c2:	2202      	movs	r2, #2
 80083c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80083c6:	78fa      	ldrb	r2, [r7, #3]
 80083c8:	6879      	ldr	r1, [r7, #4]
 80083ca:	4613      	mov	r3, r2
 80083cc:	011b      	lsls	r3, r3, #4
 80083ce:	1a9b      	subs	r3, r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	440b      	add	r3, r1
 80083d4:	334c      	adds	r3, #76	@ 0x4c
 80083d6:	2205      	movs	r2, #5
 80083d8:	701a      	strb	r2, [r3, #0]
 80083da:	e075      	b.n	80084c8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80083dc:	78fa      	ldrb	r2, [r7, #3]
 80083de:	6879      	ldr	r1, [r7, #4]
 80083e0:	4613      	mov	r3, r2
 80083e2:	011b      	lsls	r3, r3, #4
 80083e4:	1a9b      	subs	r3, r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	440b      	add	r3, r1
 80083ea:	334d      	adds	r3, #77	@ 0x4d
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	2b07      	cmp	r3, #7
 80083f0:	d00a      	beq.n	8008408 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80083f2:	78fa      	ldrb	r2, [r7, #3]
 80083f4:	6879      	ldr	r1, [r7, #4]
 80083f6:	4613      	mov	r3, r2
 80083f8:	011b      	lsls	r3, r3, #4
 80083fa:	1a9b      	subs	r3, r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	440b      	add	r3, r1
 8008400:	334d      	adds	r3, #77	@ 0x4d
 8008402:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008404:	2b09      	cmp	r3, #9
 8008406:	d170      	bne.n	80084ea <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008408:	78fa      	ldrb	r2, [r7, #3]
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	4613      	mov	r3, r2
 800840e:	011b      	lsls	r3, r3, #4
 8008410:	1a9b      	subs	r3, r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	440b      	add	r3, r1
 8008416:	334d      	adds	r3, #77	@ 0x4d
 8008418:	2202      	movs	r2, #2
 800841a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800841c:	78fa      	ldrb	r2, [r7, #3]
 800841e:	6879      	ldr	r1, [r7, #4]
 8008420:	4613      	mov	r3, r2
 8008422:	011b      	lsls	r3, r3, #4
 8008424:	1a9b      	subs	r3, r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	440b      	add	r3, r1
 800842a:	3344      	adds	r3, #68	@ 0x44
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	1c59      	adds	r1, r3, #1
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	4613      	mov	r3, r2
 8008434:	011b      	lsls	r3, r3, #4
 8008436:	1a9b      	subs	r3, r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4403      	add	r3, r0
 800843c:	3344      	adds	r3, #68	@ 0x44
 800843e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008440:	78fa      	ldrb	r2, [r7, #3]
 8008442:	6879      	ldr	r1, [r7, #4]
 8008444:	4613      	mov	r3, r2
 8008446:	011b      	lsls	r3, r3, #4
 8008448:	1a9b      	subs	r3, r3, r2
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	440b      	add	r3, r1
 800844e:	3344      	adds	r3, #68	@ 0x44
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2b02      	cmp	r3, #2
 8008454:	d914      	bls.n	8008480 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008456:	78fa      	ldrb	r2, [r7, #3]
 8008458:	6879      	ldr	r1, [r7, #4]
 800845a:	4613      	mov	r3, r2
 800845c:	011b      	lsls	r3, r3, #4
 800845e:	1a9b      	subs	r3, r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	440b      	add	r3, r1
 8008464:	3344      	adds	r3, #68	@ 0x44
 8008466:	2200      	movs	r2, #0
 8008468:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800846a:	78fa      	ldrb	r2, [r7, #3]
 800846c:	6879      	ldr	r1, [r7, #4]
 800846e:	4613      	mov	r3, r2
 8008470:	011b      	lsls	r3, r3, #4
 8008472:	1a9b      	subs	r3, r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	440b      	add	r3, r1
 8008478:	334c      	adds	r3, #76	@ 0x4c
 800847a:	2204      	movs	r2, #4
 800847c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800847e:	e022      	b.n	80084c6 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008480:	78fa      	ldrb	r2, [r7, #3]
 8008482:	6879      	ldr	r1, [r7, #4]
 8008484:	4613      	mov	r3, r2
 8008486:	011b      	lsls	r3, r3, #4
 8008488:	1a9b      	subs	r3, r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	440b      	add	r3, r1
 800848e:	334c      	adds	r3, #76	@ 0x4c
 8008490:	2202      	movs	r2, #2
 8008492:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008494:	78fb      	ldrb	r3, [r7, #3]
 8008496:	015a      	lsls	r2, r3, #5
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	4413      	add	r3, r2
 800849c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80084aa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084b2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80084b4:	78fb      	ldrb	r3, [r7, #3]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084c0:	461a      	mov	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80084c6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80084c8:	78fa      	ldrb	r2, [r7, #3]
 80084ca:	6879      	ldr	r1, [r7, #4]
 80084cc:	4613      	mov	r3, r2
 80084ce:	011b      	lsls	r3, r3, #4
 80084d0:	1a9b      	subs	r3, r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	440b      	add	r3, r1
 80084d6:	334c      	adds	r3, #76	@ 0x4c
 80084d8:	781a      	ldrb	r2, [r3, #0]
 80084da:	78fb      	ldrb	r3, [r7, #3]
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f008 fcc4 	bl	8010e6c <HAL_HCD_HC_NotifyURBChange_Callback>
 80084e4:	e002      	b.n	80084ec <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80084e6:	bf00      	nop
 80084e8:	e000      	b.n	80084ec <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80084ea:	bf00      	nop
  }
}
 80084ec:	3718      	adds	r7, #24
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b08a      	sub	sp, #40	@ 0x28
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008502:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	f003 030f 	and.w	r3, r3, #15
 8008512:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	0c5b      	lsrs	r3, r3, #17
 8008518:	f003 030f 	and.w	r3, r3, #15
 800851c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	091b      	lsrs	r3, r3, #4
 8008522:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008526:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	2b02      	cmp	r3, #2
 800852c:	d004      	beq.n	8008538 <HCD_RXQLVL_IRQHandler+0x46>
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2b05      	cmp	r3, #5
 8008532:	f000 80b6 	beq.w	80086a2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8008536:	e0b7      	b.n	80086a8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	2b00      	cmp	r3, #0
 800853c:	f000 80b3 	beq.w	80086a6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8008540:	6879      	ldr	r1, [r7, #4]
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	4613      	mov	r3, r2
 8008546:	011b      	lsls	r3, r3, #4
 8008548:	1a9b      	subs	r3, r3, r2
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	440b      	add	r3, r1
 800854e:	332c      	adds	r3, #44	@ 0x2c
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	f000 80a7 	beq.w	80086a6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8008558:	6879      	ldr	r1, [r7, #4]
 800855a:	69ba      	ldr	r2, [r7, #24]
 800855c:	4613      	mov	r3, r2
 800855e:	011b      	lsls	r3, r3, #4
 8008560:	1a9b      	subs	r3, r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	440b      	add	r3, r1
 8008566:	3338      	adds	r3, #56	@ 0x38
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	18d1      	adds	r1, r2, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	69ba      	ldr	r2, [r7, #24]
 8008572:	4613      	mov	r3, r2
 8008574:	011b      	lsls	r3, r3, #4
 8008576:	1a9b      	subs	r3, r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4403      	add	r3, r0
 800857c:	3334      	adds	r3, #52	@ 0x34
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4299      	cmp	r1, r3
 8008582:	f200 8083 	bhi.w	800868c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6818      	ldr	r0, [r3, #0]
 800858a:	6879      	ldr	r1, [r7, #4]
 800858c:	69ba      	ldr	r2, [r7, #24]
 800858e:	4613      	mov	r3, r2
 8008590:	011b      	lsls	r3, r3, #4
 8008592:	1a9b      	subs	r3, r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	440b      	add	r3, r1
 8008598:	332c      	adds	r3, #44	@ 0x2c
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	693a      	ldr	r2, [r7, #16]
 800859e:	b292      	uxth	r2, r2
 80085a0:	4619      	mov	r1, r3
 80085a2:	f004 fd97 	bl	800d0d4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80085a6:	6879      	ldr	r1, [r7, #4]
 80085a8:	69ba      	ldr	r2, [r7, #24]
 80085aa:	4613      	mov	r3, r2
 80085ac:	011b      	lsls	r3, r3, #4
 80085ae:	1a9b      	subs	r3, r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	440b      	add	r3, r1
 80085b4:	332c      	adds	r3, #44	@ 0x2c
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	18d1      	adds	r1, r2, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	69ba      	ldr	r2, [r7, #24]
 80085c0:	4613      	mov	r3, r2
 80085c2:	011b      	lsls	r3, r3, #4
 80085c4:	1a9b      	subs	r3, r3, r2
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4403      	add	r3, r0
 80085ca:	332c      	adds	r3, #44	@ 0x2c
 80085cc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80085ce:	6879      	ldr	r1, [r7, #4]
 80085d0:	69ba      	ldr	r2, [r7, #24]
 80085d2:	4613      	mov	r3, r2
 80085d4:	011b      	lsls	r3, r3, #4
 80085d6:	1a9b      	subs	r3, r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	440b      	add	r3, r1
 80085dc:	3338      	adds	r3, #56	@ 0x38
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	18d1      	adds	r1, r2, r3
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	69ba      	ldr	r2, [r7, #24]
 80085e8:	4613      	mov	r3, r2
 80085ea:	011b      	lsls	r3, r3, #4
 80085ec:	1a9b      	subs	r3, r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4403      	add	r3, r0
 80085f2:	3338      	adds	r3, #56	@ 0x38
 80085f4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	015a      	lsls	r2, r3, #5
 80085fa:	6a3b      	ldr	r3, [r7, #32]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	0cdb      	lsrs	r3, r3, #19
 8008606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800860a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800860c:	6879      	ldr	r1, [r7, #4]
 800860e:	69ba      	ldr	r2, [r7, #24]
 8008610:	4613      	mov	r3, r2
 8008612:	011b      	lsls	r3, r3, #4
 8008614:	1a9b      	subs	r3, r3, r2
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	440b      	add	r3, r1
 800861a:	3328      	adds	r3, #40	@ 0x28
 800861c:	881b      	ldrh	r3, [r3, #0]
 800861e:	461a      	mov	r2, r3
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	4293      	cmp	r3, r2
 8008624:	d13f      	bne.n	80086a6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d03c      	beq.n	80086a6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	015a      	lsls	r2, r3, #5
 8008630:	6a3b      	ldr	r3, [r7, #32]
 8008632:	4413      	add	r3, r2
 8008634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008642:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800864a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	015a      	lsls	r2, r3, #5
 8008650:	6a3b      	ldr	r3, [r7, #32]
 8008652:	4413      	add	r3, r2
 8008654:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008658:	461a      	mov	r2, r3
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800865e:	6879      	ldr	r1, [r7, #4]
 8008660:	69ba      	ldr	r2, [r7, #24]
 8008662:	4613      	mov	r3, r2
 8008664:	011b      	lsls	r3, r3, #4
 8008666:	1a9b      	subs	r3, r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	440b      	add	r3, r1
 800866c:	333c      	adds	r3, #60	@ 0x3c
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	f083 0301 	eor.w	r3, r3, #1
 8008674:	b2d8      	uxtb	r0, r3
 8008676:	6879      	ldr	r1, [r7, #4]
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	4613      	mov	r3, r2
 800867c:	011b      	lsls	r3, r3, #4
 800867e:	1a9b      	subs	r3, r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	440b      	add	r3, r1
 8008684:	333c      	adds	r3, #60	@ 0x3c
 8008686:	4602      	mov	r2, r0
 8008688:	701a      	strb	r2, [r3, #0]
      break;
 800868a:	e00c      	b.n	80086a6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800868c:	6879      	ldr	r1, [r7, #4]
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	4613      	mov	r3, r2
 8008692:	011b      	lsls	r3, r3, #4
 8008694:	1a9b      	subs	r3, r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	440b      	add	r3, r1
 800869a:	334c      	adds	r3, #76	@ 0x4c
 800869c:	2204      	movs	r2, #4
 800869e:	701a      	strb	r2, [r3, #0]
      break;
 80086a0:	e001      	b.n	80086a6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80086a2:	bf00      	nop
 80086a4:	e000      	b.n	80086a8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80086a6:	bf00      	nop
  }
}
 80086a8:	bf00      	nop
 80086aa:	3728      	adds	r7, #40	@ 0x28
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80086dc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f003 0302 	and.w	r3, r3, #2
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d10b      	bne.n	8008700 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f003 0301 	and.w	r3, r3, #1
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d102      	bne.n	80086f8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f008 fb9e 	bl	8010e34 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	f043 0302 	orr.w	r3, r3, #2
 80086fe:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f003 0308 	and.w	r3, r3, #8
 8008706:	2b08      	cmp	r3, #8
 8008708:	d132      	bne.n	8008770 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	f043 0308 	orr.w	r3, r3, #8
 8008710:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f003 0304 	and.w	r3, r3, #4
 8008718:	2b04      	cmp	r3, #4
 800871a:	d126      	bne.n	800876a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	7a5b      	ldrb	r3, [r3, #9]
 8008720:	2b02      	cmp	r3, #2
 8008722:	d113      	bne.n	800874c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800872a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800872e:	d106      	bne.n	800873e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2102      	movs	r1, #2
 8008736:	4618      	mov	r0, r3
 8008738:	f004 fe5c 	bl	800d3f4 <USB_InitFSLSPClkSel>
 800873c:	e011      	b.n	8008762 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2101      	movs	r1, #1
 8008744:	4618      	mov	r0, r3
 8008746:	f004 fe55 	bl	800d3f4 <USB_InitFSLSPClkSel>
 800874a:	e00a      	b.n	8008762 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	79db      	ldrb	r3, [r3, #7]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d106      	bne.n	8008762 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800875a:	461a      	mov	r2, r3
 800875c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8008760:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f008 fb90 	bl	8010e88 <HAL_HCD_PortEnabled_Callback>
 8008768:	e002      	b.n	8008770 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f008 fb9a 	bl	8010ea4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f003 0320 	and.w	r3, r3, #32
 8008776:	2b20      	cmp	r3, #32
 8008778:	d103      	bne.n	8008782 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	f043 0320 	orr.w	r3, r3, #32
 8008780:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008788:	461a      	mov	r2, r3
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	6013      	str	r3, [r2, #0]
}
 800878e:	bf00      	nop
 8008790:	3718      	adds	r7, #24
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
	...

08008798 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d101      	bne.n	80087aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e12b      	b.n	8008a02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d106      	bne.n	80087c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f7f9 ff2a 	bl	8002618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2224      	movs	r2, #36	@ 0x24
 80087c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f022 0201 	bic.w	r2, r2, #1
 80087da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80087ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80087fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80087fc:	f002 f8ac 	bl	800a958 <HAL_RCC_GetPCLK1Freq>
 8008800:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	4a81      	ldr	r2, [pc, #516]	@ (8008a0c <HAL_I2C_Init+0x274>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d807      	bhi.n	800881c <HAL_I2C_Init+0x84>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4a80      	ldr	r2, [pc, #512]	@ (8008a10 <HAL_I2C_Init+0x278>)
 8008810:	4293      	cmp	r3, r2
 8008812:	bf94      	ite	ls
 8008814:	2301      	movls	r3, #1
 8008816:	2300      	movhi	r3, #0
 8008818:	b2db      	uxtb	r3, r3
 800881a:	e006      	b.n	800882a <HAL_I2C_Init+0x92>
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4a7d      	ldr	r2, [pc, #500]	@ (8008a14 <HAL_I2C_Init+0x27c>)
 8008820:	4293      	cmp	r3, r2
 8008822:	bf94      	ite	ls
 8008824:	2301      	movls	r3, #1
 8008826:	2300      	movhi	r3, #0
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d001      	beq.n	8008832 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e0e7      	b.n	8008a02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	4a78      	ldr	r2, [pc, #480]	@ (8008a18 <HAL_I2C_Init+0x280>)
 8008836:	fba2 2303 	umull	r2, r3, r2, r3
 800883a:	0c9b      	lsrs	r3, r3, #18
 800883c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	430a      	orrs	r2, r1
 8008850:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6a1b      	ldr	r3, [r3, #32]
 8008858:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	4a6a      	ldr	r2, [pc, #424]	@ (8008a0c <HAL_I2C_Init+0x274>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d802      	bhi.n	800886c <HAL_I2C_Init+0xd4>
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	3301      	adds	r3, #1
 800886a:	e009      	b.n	8008880 <HAL_I2C_Init+0xe8>
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008872:	fb02 f303 	mul.w	r3, r2, r3
 8008876:	4a69      	ldr	r2, [pc, #420]	@ (8008a1c <HAL_I2C_Init+0x284>)
 8008878:	fba2 2303 	umull	r2, r3, r2, r3
 800887c:	099b      	lsrs	r3, r3, #6
 800887e:	3301      	adds	r3, #1
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	6812      	ldr	r2, [r2, #0]
 8008884:	430b      	orrs	r3, r1
 8008886:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008892:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	495c      	ldr	r1, [pc, #368]	@ (8008a0c <HAL_I2C_Init+0x274>)
 800889c:	428b      	cmp	r3, r1
 800889e:	d819      	bhi.n	80088d4 <HAL_I2C_Init+0x13c>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	1e59      	subs	r1, r3, #1
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	005b      	lsls	r3, r3, #1
 80088aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80088ae:	1c59      	adds	r1, r3, #1
 80088b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80088b4:	400b      	ands	r3, r1
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00a      	beq.n	80088d0 <HAL_I2C_Init+0x138>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	1e59      	subs	r1, r3, #1
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	005b      	lsls	r3, r3, #1
 80088c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80088c8:	3301      	adds	r3, #1
 80088ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088ce:	e051      	b.n	8008974 <HAL_I2C_Init+0x1dc>
 80088d0:	2304      	movs	r3, #4
 80088d2:	e04f      	b.n	8008974 <HAL_I2C_Init+0x1dc>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d111      	bne.n	8008900 <HAL_I2C_Init+0x168>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	1e58      	subs	r0, r3, #1
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6859      	ldr	r1, [r3, #4]
 80088e4:	460b      	mov	r3, r1
 80088e6:	005b      	lsls	r3, r3, #1
 80088e8:	440b      	add	r3, r1
 80088ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80088ee:	3301      	adds	r3, #1
 80088f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	bf0c      	ite	eq
 80088f8:	2301      	moveq	r3, #1
 80088fa:	2300      	movne	r3, #0
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	e012      	b.n	8008926 <HAL_I2C_Init+0x18e>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	1e58      	subs	r0, r3, #1
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6859      	ldr	r1, [r3, #4]
 8008908:	460b      	mov	r3, r1
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	440b      	add	r3, r1
 800890e:	0099      	lsls	r1, r3, #2
 8008910:	440b      	add	r3, r1
 8008912:	fbb0 f3f3 	udiv	r3, r0, r3
 8008916:	3301      	adds	r3, #1
 8008918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800891c:	2b00      	cmp	r3, #0
 800891e:	bf0c      	ite	eq
 8008920:	2301      	moveq	r3, #1
 8008922:	2300      	movne	r3, #0
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b00      	cmp	r3, #0
 8008928:	d001      	beq.n	800892e <HAL_I2C_Init+0x196>
 800892a:	2301      	movs	r3, #1
 800892c:	e022      	b.n	8008974 <HAL_I2C_Init+0x1dc>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10e      	bne.n	8008954 <HAL_I2C_Init+0x1bc>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	1e58      	subs	r0, r3, #1
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6859      	ldr	r1, [r3, #4]
 800893e:	460b      	mov	r3, r1
 8008940:	005b      	lsls	r3, r3, #1
 8008942:	440b      	add	r3, r1
 8008944:	fbb0 f3f3 	udiv	r3, r0, r3
 8008948:	3301      	adds	r3, #1
 800894a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800894e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008952:	e00f      	b.n	8008974 <HAL_I2C_Init+0x1dc>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	1e58      	subs	r0, r3, #1
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6859      	ldr	r1, [r3, #4]
 800895c:	460b      	mov	r3, r1
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	440b      	add	r3, r1
 8008962:	0099      	lsls	r1, r3, #2
 8008964:	440b      	add	r3, r1
 8008966:	fbb0 f3f3 	udiv	r3, r0, r3
 800896a:	3301      	adds	r3, #1
 800896c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008970:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008974:	6879      	ldr	r1, [r7, #4]
 8008976:	6809      	ldr	r1, [r1, #0]
 8008978:	4313      	orrs	r3, r2
 800897a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	69da      	ldr	r2, [r3, #28]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	431a      	orrs	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	430a      	orrs	r2, r1
 8008996:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80089a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	6911      	ldr	r1, [r2, #16]
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	68d2      	ldr	r2, [r2, #12]
 80089ae:	4311      	orrs	r1, r2
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	6812      	ldr	r2, [r2, #0]
 80089b4:	430b      	orrs	r3, r1
 80089b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	695a      	ldr	r2, [r3, #20]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	699b      	ldr	r3, [r3, #24]
 80089ca:	431a      	orrs	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	430a      	orrs	r2, r1
 80089d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f042 0201 	orr.w	r2, r2, #1
 80089e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2220      	movs	r2, #32
 80089ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	000186a0 	.word	0x000186a0
 8008a10:	001e847f 	.word	0x001e847f
 8008a14:	003d08ff 	.word	0x003d08ff
 8008a18:	431bde83 	.word	0x431bde83
 8008a1c:	10624dd3 	.word	0x10624dd3

08008a20 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d101      	bne.n	8008a32 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e021      	b.n	8008a76 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2224      	movs	r2, #36	@ 0x24
 8008a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f022 0201 	bic.w	r2, r2, #1
 8008a48:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7f9 fe4e 	bl	80026ec <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3708      	adds	r7, #8
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
	...

08008a80 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b088      	sub	sp, #32
 8008a84:	af02      	add	r7, sp, #8
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	4608      	mov	r0, r1
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	4603      	mov	r3, r0
 8008a90:	817b      	strh	r3, [r7, #10]
 8008a92:	460b      	mov	r3, r1
 8008a94:	813b      	strh	r3, [r7, #8]
 8008a96:	4613      	mov	r3, r2
 8008a98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008a9a:	f7fc f9db 	bl	8004e54 <HAL_GetTick>
 8008a9e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	2b20      	cmp	r3, #32
 8008aaa:	f040 80d9 	bne.w	8008c60 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	2319      	movs	r3, #25
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	496d      	ldr	r1, [pc, #436]	@ (8008c6c <HAL_I2C_Mem_Write+0x1ec>)
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f000 fc99 	bl	80093f0 <I2C_WaitOnFlagUntilTimeout>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	e0cc      	b.n	8008c62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d101      	bne.n	8008ad6 <HAL_I2C_Mem_Write+0x56>
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	e0c5      	b.n	8008c62 <HAL_I2C_Mem_Write+0x1e2>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0301 	and.w	r3, r3, #1
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d007      	beq.n	8008afc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f042 0201 	orr.w	r2, r2, #1
 8008afa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008b0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2221      	movs	r2, #33	@ 0x21
 8008b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2240      	movs	r2, #64	@ 0x40
 8008b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6a3a      	ldr	r2, [r7, #32]
 8008b26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	4a4d      	ldr	r2, [pc, #308]	@ (8008c70 <HAL_I2C_Mem_Write+0x1f0>)
 8008b3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008b3e:	88f8      	ldrh	r0, [r7, #6]
 8008b40:	893a      	ldrh	r2, [r7, #8]
 8008b42:	8979      	ldrh	r1, [r7, #10]
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	9301      	str	r3, [sp, #4]
 8008b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f000 fad0 	bl	80090f4 <I2C_RequestMemoryWrite>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d052      	beq.n	8008c00 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e081      	b.n	8008c62 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f000 fd5e 	bl	8009624 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00d      	beq.n	8008b8a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b72:	2b04      	cmp	r3, #4
 8008b74:	d107      	bne.n	8008b86 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e06b      	b.n	8008c62 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b8e:	781a      	ldrb	r2, [r3, #0]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b9a:	1c5a      	adds	r2, r3, #1
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	695b      	ldr	r3, [r3, #20]
 8008bc0:	f003 0304 	and.w	r3, r3, #4
 8008bc4:	2b04      	cmp	r3, #4
 8008bc6:	d11b      	bne.n	8008c00 <HAL_I2C_Mem_Write+0x180>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d017      	beq.n	8008c00 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bd4:	781a      	ldrb	r2, [r3, #0]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be0:	1c5a      	adds	r2, r3, #1
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bea:	3b01      	subs	r3, #1
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1aa      	bne.n	8008b5e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c08:	697a      	ldr	r2, [r7, #20]
 8008c0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f000 fd51 	bl	80096b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00d      	beq.n	8008c34 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c1c:	2b04      	cmp	r3, #4
 8008c1e:	d107      	bne.n	8008c30 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c2e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e016      	b.n	8008c62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2220      	movs	r2, #32
 8008c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	e000      	b.n	8008c62 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008c60:	2302      	movs	r3, #2
  }
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3718      	adds	r7, #24
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	00100002 	.word	0x00100002
 8008c70:	ffff0000 	.word	0xffff0000

08008c74 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b08c      	sub	sp, #48	@ 0x30
 8008c78:	af02      	add	r7, sp, #8
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	4608      	mov	r0, r1
 8008c7e:	4611      	mov	r1, r2
 8008c80:	461a      	mov	r2, r3
 8008c82:	4603      	mov	r3, r0
 8008c84:	817b      	strh	r3, [r7, #10]
 8008c86:	460b      	mov	r3, r1
 8008c88:	813b      	strh	r3, [r7, #8]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008c8e:	f7fc f8e1 	bl	8004e54 <HAL_GetTick>
 8008c92:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	2b20      	cmp	r3, #32
 8008c9e:	f040 8214 	bne.w	80090ca <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	2319      	movs	r3, #25
 8008ca8:	2201      	movs	r2, #1
 8008caa:	497b      	ldr	r1, [pc, #492]	@ (8008e98 <HAL_I2C_Mem_Read+0x224>)
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f000 fb9f 	bl	80093f0 <I2C_WaitOnFlagUntilTimeout>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008cb8:	2302      	movs	r3, #2
 8008cba:	e207      	b.n	80090cc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d101      	bne.n	8008cca <HAL_I2C_Mem_Read+0x56>
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	e200      	b.n	80090cc <HAL_I2C_Mem_Read+0x458>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0301 	and.w	r3, r3, #1
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d007      	beq.n	8008cf0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f042 0201 	orr.w	r2, r2, #1
 8008cee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008cfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2222      	movs	r2, #34	@ 0x22
 8008d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2240      	movs	r2, #64	@ 0x40
 8008d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008d20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	4a5b      	ldr	r2, [pc, #364]	@ (8008e9c <HAL_I2C_Mem_Read+0x228>)
 8008d30:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008d32:	88f8      	ldrh	r0, [r7, #6]
 8008d34:	893a      	ldrh	r2, [r7, #8]
 8008d36:	8979      	ldrh	r1, [r7, #10]
 8008d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d3a:	9301      	str	r3, [sp, #4]
 8008d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	4603      	mov	r3, r0
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f000 fa6c 	bl	8009220 <I2C_RequestMemoryRead>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d001      	beq.n	8008d52 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e1bc      	b.n	80090cc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d113      	bne.n	8008d82 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	623b      	str	r3, [r7, #32]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	695b      	ldr	r3, [r3, #20]
 8008d64:	623b      	str	r3, [r7, #32]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	699b      	ldr	r3, [r3, #24]
 8008d6c:	623b      	str	r3, [r7, #32]
 8008d6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	e190      	b.n	80090a4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d11b      	bne.n	8008dc2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	61fb      	str	r3, [r7, #28]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	695b      	ldr	r3, [r3, #20]
 8008da4:	61fb      	str	r3, [r7, #28]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	61fb      	str	r3, [r7, #28]
 8008dae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008dbe:	601a      	str	r2, [r3, #0]
 8008dc0:	e170      	b.n	80090a4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d11b      	bne.n	8008e02 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008dd8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008de8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dea:	2300      	movs	r3, #0
 8008dec:	61bb      	str	r3, [r7, #24]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	695b      	ldr	r3, [r3, #20]
 8008df4:	61bb      	str	r3, [r7, #24]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	61bb      	str	r3, [r7, #24]
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	e150      	b.n	80090a4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e02:	2300      	movs	r3, #0
 8008e04:	617b      	str	r3, [r7, #20]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	695b      	ldr	r3, [r3, #20]
 8008e0c:	617b      	str	r3, [r7, #20]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	617b      	str	r3, [r7, #20]
 8008e16:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008e18:	e144      	b.n	80090a4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e1e:	2b03      	cmp	r3, #3
 8008e20:	f200 80f1 	bhi.w	8009006 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d123      	bne.n	8008e74 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e2e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f000 fc87 	bl	8009744 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e145      	b.n	80090cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	691a      	ldr	r2, [r3, #16]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e4a:	b2d2      	uxtb	r2, r2
 8008e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e52:	1c5a      	adds	r2, r3, #1
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008e72:	e117      	b.n	80090a4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d14e      	bne.n	8008f1a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e82:	2200      	movs	r2, #0
 8008e84:	4906      	ldr	r1, [pc, #24]	@ (8008ea0 <HAL_I2C_Mem_Read+0x22c>)
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f000 fab2 	bl	80093f0 <I2C_WaitOnFlagUntilTimeout>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d008      	beq.n	8008ea4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e11a      	b.n	80090cc <HAL_I2C_Mem_Read+0x458>
 8008e96:	bf00      	nop
 8008e98:	00100002 	.word	0x00100002
 8008e9c:	ffff0000 	.word	0xffff0000
 8008ea0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008eb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	691a      	ldr	r2, [r3, #16]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ebe:	b2d2      	uxtb	r2, r2
 8008ec0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ec6:	1c5a      	adds	r2, r3, #1
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	691a      	ldr	r2, [r3, #16]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ef0:	b2d2      	uxtb	r2, r2
 8008ef2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ef8:	1c5a      	adds	r2, r3, #1
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f02:	3b01      	subs	r3, #1
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	3b01      	subs	r3, #1
 8008f12:	b29a      	uxth	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008f18:	e0c4      	b.n	80090a4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f20:	2200      	movs	r2, #0
 8008f22:	496c      	ldr	r1, [pc, #432]	@ (80090d4 <HAL_I2C_Mem_Read+0x460>)
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f000 fa63 	bl	80093f0 <I2C_WaitOnFlagUntilTimeout>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d001      	beq.n	8008f34 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	e0cb      	b.n	80090cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	691a      	ldr	r2, [r3, #16]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f4e:	b2d2      	uxtb	r2, r2
 8008f50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f56:	1c5a      	adds	r2, r3, #1
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f60:	3b01      	subs	r3, #1
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	4955      	ldr	r1, [pc, #340]	@ (80090d4 <HAL_I2C_Mem_Read+0x460>)
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f000 fa35 	bl	80093f0 <I2C_WaitOnFlagUntilTimeout>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d001      	beq.n	8008f90 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e09d      	b.n	80090cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	691a      	ldr	r2, [r3, #16]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008faa:	b2d2      	uxtb	r2, r2
 8008fac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb2:	1c5a      	adds	r2, r3, #1
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	691a      	ldr	r2, [r3, #16]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fdc:	b2d2      	uxtb	r2, r2
 8008fde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe4:	1c5a      	adds	r2, r3, #1
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009004:	e04e      	b.n	80090a4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009008:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f000 fb9a 	bl	8009744 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d001      	beq.n	800901a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	e058      	b.n	80090cc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	691a      	ldr	r2, [r3, #16]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009024:	b2d2      	uxtb	r2, r2
 8009026:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800902c:	1c5a      	adds	r2, r3, #1
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009036:	3b01      	subs	r3, #1
 8009038:	b29a      	uxth	r2, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009042:	b29b      	uxth	r3, r3
 8009044:	3b01      	subs	r3, #1
 8009046:	b29a      	uxth	r2, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	695b      	ldr	r3, [r3, #20]
 8009052:	f003 0304 	and.w	r3, r3, #4
 8009056:	2b04      	cmp	r3, #4
 8009058:	d124      	bne.n	80090a4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800905e:	2b03      	cmp	r3, #3
 8009060:	d107      	bne.n	8009072 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009070:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	691a      	ldr	r2, [r3, #16]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800907c:	b2d2      	uxtb	r2, r2
 800907e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009084:	1c5a      	adds	r2, r3, #1
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800908e:	3b01      	subs	r3, #1
 8009090:	b29a      	uxth	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800909a:	b29b      	uxth	r3, r3
 800909c:	3b01      	subs	r3, #1
 800909e:	b29a      	uxth	r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f47f aeb6 	bne.w	8008e1a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2220      	movs	r2, #32
 80090b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80090c6:	2300      	movs	r3, #0
 80090c8:	e000      	b.n	80090cc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80090ca:	2302      	movs	r3, #2
  }
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3728      	adds	r7, #40	@ 0x28
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	00010004 	.word	0x00010004

080090d8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090e6:	b2db      	uxtb	r3, r3
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b088      	sub	sp, #32
 80090f8:	af02      	add	r7, sp, #8
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	4608      	mov	r0, r1
 80090fe:	4611      	mov	r1, r2
 8009100:	461a      	mov	r2, r3
 8009102:	4603      	mov	r3, r0
 8009104:	817b      	strh	r3, [r7, #10]
 8009106:	460b      	mov	r3, r1
 8009108:	813b      	strh	r3, [r7, #8]
 800910a:	4613      	mov	r3, r2
 800910c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800911c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800911e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	6a3b      	ldr	r3, [r7, #32]
 8009124:	2200      	movs	r2, #0
 8009126:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f000 f960 	bl	80093f0 <I2C_WaitOnFlagUntilTimeout>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00d      	beq.n	8009152 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009140:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009144:	d103      	bne.n	800914e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800914c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800914e:	2303      	movs	r3, #3
 8009150:	e05f      	b.n	8009212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009152:	897b      	ldrh	r3, [r7, #10]
 8009154:	b2db      	uxtb	r3, r3
 8009156:	461a      	mov	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009160:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009164:	6a3a      	ldr	r2, [r7, #32]
 8009166:	492d      	ldr	r1, [pc, #180]	@ (800921c <I2C_RequestMemoryWrite+0x128>)
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f000 f9bb 	bl	80094e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e04c      	b.n	8009212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009178:	2300      	movs	r3, #0
 800917a:	617b      	str	r3, [r7, #20]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	695b      	ldr	r3, [r3, #20]
 8009182:	617b      	str	r3, [r7, #20]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	617b      	str	r3, [r7, #20]
 800918c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800918e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009190:	6a39      	ldr	r1, [r7, #32]
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f000 fa46 	bl	8009624 <I2C_WaitOnTXEFlagUntilTimeout>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00d      	beq.n	80091ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091a2:	2b04      	cmp	r3, #4
 80091a4:	d107      	bne.n	80091b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80091b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e02b      	b.n	8009212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80091ba:	88fb      	ldrh	r3, [r7, #6]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d105      	bne.n	80091cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80091c0:	893b      	ldrh	r3, [r7, #8]
 80091c2:	b2da      	uxtb	r2, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	611a      	str	r2, [r3, #16]
 80091ca:	e021      	b.n	8009210 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80091cc:	893b      	ldrh	r3, [r7, #8]
 80091ce:	0a1b      	lsrs	r3, r3, #8
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	b2da      	uxtb	r2, r3
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091dc:	6a39      	ldr	r1, [r7, #32]
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f000 fa20 	bl	8009624 <I2C_WaitOnTXEFlagUntilTimeout>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00d      	beq.n	8009206 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ee:	2b04      	cmp	r3, #4
 80091f0:	d107      	bne.n	8009202 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009200:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e005      	b.n	8009212 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009206:	893b      	ldrh	r3, [r7, #8]
 8009208:	b2da      	uxtb	r2, r3
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3718      	adds	r7, #24
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	00010002 	.word	0x00010002

08009220 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b088      	sub	sp, #32
 8009224:	af02      	add	r7, sp, #8
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	4608      	mov	r0, r1
 800922a:	4611      	mov	r1, r2
 800922c:	461a      	mov	r2, r3
 800922e:	4603      	mov	r3, r0
 8009230:	817b      	strh	r3, [r7, #10]
 8009232:	460b      	mov	r3, r1
 8009234:	813b      	strh	r3, [r7, #8]
 8009236:	4613      	mov	r3, r2
 8009238:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009248:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009258:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800925a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	6a3b      	ldr	r3, [r7, #32]
 8009260:	2200      	movs	r2, #0
 8009262:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f000 f8c2 	bl	80093f0 <I2C_WaitOnFlagUntilTimeout>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00d      	beq.n	800928e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800927c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009280:	d103      	bne.n	800928a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009288:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800928a:	2303      	movs	r3, #3
 800928c:	e0aa      	b.n	80093e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800928e:	897b      	ldrh	r3, [r7, #10]
 8009290:	b2db      	uxtb	r3, r3
 8009292:	461a      	mov	r2, r3
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800929c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800929e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a0:	6a3a      	ldr	r2, [r7, #32]
 80092a2:	4952      	ldr	r1, [pc, #328]	@ (80093ec <I2C_RequestMemoryRead+0x1cc>)
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f000 f91d 	bl	80094e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d001      	beq.n	80092b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e097      	b.n	80093e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092b4:	2300      	movs	r3, #0
 80092b6:	617b      	str	r3, [r7, #20]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	695b      	ldr	r3, [r3, #20]
 80092be:	617b      	str	r3, [r7, #20]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	617b      	str	r3, [r7, #20]
 80092c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80092ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092cc:	6a39      	ldr	r1, [r7, #32]
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f000 f9a8 	bl	8009624 <I2C_WaitOnTXEFlagUntilTimeout>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00d      	beq.n	80092f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092de:	2b04      	cmp	r3, #4
 80092e0:	d107      	bne.n	80092f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e076      	b.n	80093e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80092f6:	88fb      	ldrh	r3, [r7, #6]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d105      	bne.n	8009308 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80092fc:	893b      	ldrh	r3, [r7, #8]
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	611a      	str	r2, [r3, #16]
 8009306:	e021      	b.n	800934c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009308:	893b      	ldrh	r3, [r7, #8]
 800930a:	0a1b      	lsrs	r3, r3, #8
 800930c:	b29b      	uxth	r3, r3
 800930e:	b2da      	uxtb	r2, r3
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009318:	6a39      	ldr	r1, [r7, #32]
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f000 f982 	bl	8009624 <I2C_WaitOnTXEFlagUntilTimeout>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00d      	beq.n	8009342 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800932a:	2b04      	cmp	r3, #4
 800932c:	d107      	bne.n	800933e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800933c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e050      	b.n	80093e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009342:	893b      	ldrh	r3, [r7, #8]
 8009344:	b2da      	uxtb	r2, r3
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800934c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800934e:	6a39      	ldr	r1, [r7, #32]
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f000 f967 	bl	8009624 <I2C_WaitOnTXEFlagUntilTimeout>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d00d      	beq.n	8009378 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009360:	2b04      	cmp	r3, #4
 8009362:	d107      	bne.n	8009374 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009372:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	e035      	b.n	80093e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009386:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	6a3b      	ldr	r3, [r7, #32]
 800938e:	2200      	movs	r2, #0
 8009390:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f000 f82b 	bl	80093f0 <I2C_WaitOnFlagUntilTimeout>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00d      	beq.n	80093bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093ae:	d103      	bne.n	80093b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80093b8:	2303      	movs	r3, #3
 80093ba:	e013      	b.n	80093e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80093bc:	897b      	ldrh	r3, [r7, #10]
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	f043 0301 	orr.w	r3, r3, #1
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80093cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ce:	6a3a      	ldr	r2, [r7, #32]
 80093d0:	4906      	ldr	r1, [pc, #24]	@ (80093ec <I2C_RequestMemoryRead+0x1cc>)
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f000 f886 	bl	80094e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d001      	beq.n	80093e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e000      	b.n	80093e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3718      	adds	r7, #24
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	00010002 	.word	0x00010002

080093f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	603b      	str	r3, [r7, #0]
 80093fc:	4613      	mov	r3, r2
 80093fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009400:	e048      	b.n	8009494 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009408:	d044      	beq.n	8009494 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800940a:	f7fb fd23 	bl	8004e54 <HAL_GetTick>
 800940e:	4602      	mov	r2, r0
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	1ad3      	subs	r3, r2, r3
 8009414:	683a      	ldr	r2, [r7, #0]
 8009416:	429a      	cmp	r2, r3
 8009418:	d302      	bcc.n	8009420 <I2C_WaitOnFlagUntilTimeout+0x30>
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d139      	bne.n	8009494 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	0c1b      	lsrs	r3, r3, #16
 8009424:	b2db      	uxtb	r3, r3
 8009426:	2b01      	cmp	r3, #1
 8009428:	d10d      	bne.n	8009446 <I2C_WaitOnFlagUntilTimeout+0x56>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	695b      	ldr	r3, [r3, #20]
 8009430:	43da      	mvns	r2, r3
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	4013      	ands	r3, r2
 8009436:	b29b      	uxth	r3, r3
 8009438:	2b00      	cmp	r3, #0
 800943a:	bf0c      	ite	eq
 800943c:	2301      	moveq	r3, #1
 800943e:	2300      	movne	r3, #0
 8009440:	b2db      	uxtb	r3, r3
 8009442:	461a      	mov	r2, r3
 8009444:	e00c      	b.n	8009460 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	43da      	mvns	r2, r3
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	4013      	ands	r3, r2
 8009452:	b29b      	uxth	r3, r3
 8009454:	2b00      	cmp	r3, #0
 8009456:	bf0c      	ite	eq
 8009458:	2301      	moveq	r3, #1
 800945a:	2300      	movne	r3, #0
 800945c:	b2db      	uxtb	r3, r3
 800945e:	461a      	mov	r2, r3
 8009460:	79fb      	ldrb	r3, [r7, #7]
 8009462:	429a      	cmp	r2, r3
 8009464:	d116      	bne.n	8009494 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2200      	movs	r2, #0
 800946a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2220      	movs	r2, #32
 8009470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009480:	f043 0220 	orr.w	r2, r3, #32
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e023      	b.n	80094dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	0c1b      	lsrs	r3, r3, #16
 8009498:	b2db      	uxtb	r3, r3
 800949a:	2b01      	cmp	r3, #1
 800949c:	d10d      	bne.n	80094ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	43da      	mvns	r2, r3
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	4013      	ands	r3, r2
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	bf0c      	ite	eq
 80094b0:	2301      	moveq	r3, #1
 80094b2:	2300      	movne	r3, #0
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	461a      	mov	r2, r3
 80094b8:	e00c      	b.n	80094d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	43da      	mvns	r2, r3
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	4013      	ands	r3, r2
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	bf0c      	ite	eq
 80094cc:	2301      	moveq	r3, #1
 80094ce:	2300      	movne	r3, #0
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	461a      	mov	r2, r3
 80094d4:	79fb      	ldrb	r3, [r7, #7]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d093      	beq.n	8009402 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094da:	2300      	movs	r3, #0
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3710      	adds	r7, #16
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
 80094f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80094f2:	e071      	b.n	80095d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	695b      	ldr	r3, [r3, #20]
 80094fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009502:	d123      	bne.n	800954c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009512:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800951c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2220      	movs	r2, #32
 8009528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009538:	f043 0204 	orr.w	r2, r3, #4
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	e067      	b.n	800961c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009552:	d041      	beq.n	80095d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009554:	f7fb fc7e 	bl	8004e54 <HAL_GetTick>
 8009558:	4602      	mov	r2, r0
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	429a      	cmp	r2, r3
 8009562:	d302      	bcc.n	800956a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d136      	bne.n	80095d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	0c1b      	lsrs	r3, r3, #16
 800956e:	b2db      	uxtb	r3, r3
 8009570:	2b01      	cmp	r3, #1
 8009572:	d10c      	bne.n	800958e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	695b      	ldr	r3, [r3, #20]
 800957a:	43da      	mvns	r2, r3
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	4013      	ands	r3, r2
 8009580:	b29b      	uxth	r3, r3
 8009582:	2b00      	cmp	r3, #0
 8009584:	bf14      	ite	ne
 8009586:	2301      	movne	r3, #1
 8009588:	2300      	moveq	r3, #0
 800958a:	b2db      	uxtb	r3, r3
 800958c:	e00b      	b.n	80095a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	699b      	ldr	r3, [r3, #24]
 8009594:	43da      	mvns	r2, r3
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	4013      	ands	r3, r2
 800959a:	b29b      	uxth	r3, r3
 800959c:	2b00      	cmp	r3, #0
 800959e:	bf14      	ite	ne
 80095a0:	2301      	movne	r3, #1
 80095a2:	2300      	moveq	r3, #0
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d016      	beq.n	80095d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2220      	movs	r2, #32
 80095b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095c4:	f043 0220 	orr.w	r2, r3, #32
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	e021      	b.n	800961c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	0c1b      	lsrs	r3, r3, #16
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d10c      	bne.n	80095fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	695b      	ldr	r3, [r3, #20]
 80095e8:	43da      	mvns	r2, r3
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	4013      	ands	r3, r2
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	bf14      	ite	ne
 80095f4:	2301      	movne	r3, #1
 80095f6:	2300      	moveq	r3, #0
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	e00b      	b.n	8009614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	43da      	mvns	r2, r3
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	4013      	ands	r3, r2
 8009608:	b29b      	uxth	r3, r3
 800960a:	2b00      	cmp	r3, #0
 800960c:	bf14      	ite	ne
 800960e:	2301      	movne	r3, #1
 8009610:	2300      	moveq	r3, #0
 8009612:	b2db      	uxtb	r3, r3
 8009614:	2b00      	cmp	r3, #0
 8009616:	f47f af6d 	bne.w	80094f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009630:	e034      	b.n	800969c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f000 f8e3 	bl	80097fe <I2C_IsAcknowledgeFailed>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d001      	beq.n	8009642 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	e034      	b.n	80096ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009648:	d028      	beq.n	800969c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800964a:	f7fb fc03 	bl	8004e54 <HAL_GetTick>
 800964e:	4602      	mov	r2, r0
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	1ad3      	subs	r3, r2, r3
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	429a      	cmp	r2, r3
 8009658:	d302      	bcc.n	8009660 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d11d      	bne.n	800969c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	695b      	ldr	r3, [r3, #20]
 8009666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800966a:	2b80      	cmp	r3, #128	@ 0x80
 800966c:	d016      	beq.n	800969c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2220      	movs	r2, #32
 8009678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009688:	f043 0220 	orr.w	r2, r3, #32
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	e007      	b.n	80096ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096a6:	2b80      	cmp	r3, #128	@ 0x80
 80096a8:	d1c3      	bne.n	8009632 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80096c0:	e034      	b.n	800972c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	f000 f89b 	bl	80097fe <I2C_IsAcknowledgeFailed>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	e034      	b.n	800973c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d8:	d028      	beq.n	800972c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096da:	f7fb fbbb 	bl	8004e54 <HAL_GetTick>
 80096de:	4602      	mov	r2, r0
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	1ad3      	subs	r3, r2, r3
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d302      	bcc.n	80096f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d11d      	bne.n	800972c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	695b      	ldr	r3, [r3, #20]
 80096f6:	f003 0304 	and.w	r3, r3, #4
 80096fa:	2b04      	cmp	r3, #4
 80096fc:	d016      	beq.n	800972c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2200      	movs	r2, #0
 8009702:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2220      	movs	r2, #32
 8009708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009718:	f043 0220 	orr.w	r2, r3, #32
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	e007      	b.n	800973c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	695b      	ldr	r3, [r3, #20]
 8009732:	f003 0304 	and.w	r3, r3, #4
 8009736:	2b04      	cmp	r3, #4
 8009738:	d1c3      	bne.n	80096c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800973a:	2300      	movs	r3, #0
}
 800973c:	4618      	mov	r0, r3
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009750:	e049      	b.n	80097e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	695b      	ldr	r3, [r3, #20]
 8009758:	f003 0310 	and.w	r3, r3, #16
 800975c:	2b10      	cmp	r3, #16
 800975e:	d119      	bne.n	8009794 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f06f 0210 	mvn.w	r2, #16
 8009768:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2200      	movs	r2, #0
 800976e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2220      	movs	r2, #32
 8009774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2200      	movs	r2, #0
 800977c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	e030      	b.n	80097f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009794:	f7fb fb5e 	bl	8004e54 <HAL_GetTick>
 8009798:	4602      	mov	r2, r0
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d302      	bcc.n	80097aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d11d      	bne.n	80097e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	695b      	ldr	r3, [r3, #20]
 80097b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097b4:	2b40      	cmp	r3, #64	@ 0x40
 80097b6:	d016      	beq.n	80097e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2220      	movs	r2, #32
 80097c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097d2:	f043 0220 	orr.w	r2, r3, #32
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	e007      	b.n	80097f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	695b      	ldr	r3, [r3, #20]
 80097ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097f0:	2b40      	cmp	r3, #64	@ 0x40
 80097f2:	d1ae      	bne.n	8009752 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80097fe:	b480      	push	{r7}
 8009800:	b083      	sub	sp, #12
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	695b      	ldr	r3, [r3, #20]
 800980c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009810:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009814:	d11b      	bne.n	800984e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800981e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2220      	movs	r2, #32
 800982a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800983a:	f043 0204 	orr.w	r2, r3, #4
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e000      	b.n	8009850 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800986c:	b2db      	uxtb	r3, r3
 800986e:	2b20      	cmp	r3, #32
 8009870:	d129      	bne.n	80098c6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2224      	movs	r2, #36	@ 0x24
 8009876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f022 0201 	bic.w	r2, r2, #1
 8009888:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f022 0210 	bic.w	r2, r2, #16
 8009898:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	683a      	ldr	r2, [r7, #0]
 80098a6:	430a      	orrs	r2, r1
 80098a8:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f042 0201 	orr.w	r2, r2, #1
 80098b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2220      	movs	r2, #32
 80098be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	e000      	b.n	80098c8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80098c6:	2302      	movs	r3, #2
  }
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80098de:	2300      	movs	r3, #0
 80098e0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	2b20      	cmp	r3, #32
 80098ec:	d12a      	bne.n	8009944 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2224      	movs	r2, #36	@ 0x24
 80098f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f022 0201 	bic.w	r2, r2, #1
 8009904:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800990c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800990e:	89fb      	ldrh	r3, [r7, #14]
 8009910:	f023 030f 	bic.w	r3, r3, #15
 8009914:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	b29a      	uxth	r2, r3
 800991a:	89fb      	ldrh	r3, [r7, #14]
 800991c:	4313      	orrs	r3, r2
 800991e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	89fa      	ldrh	r2, [r7, #14]
 8009926:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f042 0201 	orr.w	r2, r2, #1
 8009936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2220      	movs	r2, #32
 800993c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8009940:	2300      	movs	r3, #0
 8009942:	e000      	b.n	8009946 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8009944:	2302      	movs	r3, #2
  }
}
 8009946:	4618      	mov	r0, r3
 8009948:	3714      	adds	r7, #20
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
	...

08009954 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d101      	bne.n	8009966 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e0bf      	b.n	8009ae6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d106      	bne.n	8009980 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7f8 fedc 	bl	8002738 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2202      	movs	r2, #2
 8009984:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	699a      	ldr	r2, [r3, #24]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009996:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	6999      	ldr	r1, [r3, #24]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	685a      	ldr	r2, [r3, #4]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80099ac:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	430a      	orrs	r2, r1
 80099ba:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	6899      	ldr	r1, [r3, #8]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	4b4a      	ldr	r3, [pc, #296]	@ (8009af0 <HAL_LTDC_Init+0x19c>)
 80099c8:	400b      	ands	r3, r1
 80099ca:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	695b      	ldr	r3, [r3, #20]
 80099d0:	041b      	lsls	r3, r3, #16
 80099d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6899      	ldr	r1, [r3, #8]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	699a      	ldr	r2, [r3, #24]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	431a      	orrs	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	430a      	orrs	r2, r1
 80099e8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68d9      	ldr	r1, [r3, #12]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	4b3e      	ldr	r3, [pc, #248]	@ (8009af0 <HAL_LTDC_Init+0x19c>)
 80099f6:	400b      	ands	r3, r1
 80099f8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	69db      	ldr	r3, [r3, #28]
 80099fe:	041b      	lsls	r3, r3, #16
 8009a00:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	68d9      	ldr	r1, [r3, #12]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a1a      	ldr	r2, [r3, #32]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	431a      	orrs	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	430a      	orrs	r2, r1
 8009a16:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6919      	ldr	r1, [r3, #16]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	4b33      	ldr	r3, [pc, #204]	@ (8009af0 <HAL_LTDC_Init+0x19c>)
 8009a24:	400b      	ands	r3, r1
 8009a26:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a2c:	041b      	lsls	r3, r3, #16
 8009a2e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6919      	ldr	r1, [r3, #16]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	431a      	orrs	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	430a      	orrs	r2, r1
 8009a44:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	6959      	ldr	r1, [r3, #20]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	4b27      	ldr	r3, [pc, #156]	@ (8009af0 <HAL_LTDC_Init+0x19c>)
 8009a52:	400b      	ands	r3, r1
 8009a54:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a5a:	041b      	lsls	r3, r3, #16
 8009a5c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	6959      	ldr	r1, [r3, #20]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	431a      	orrs	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	430a      	orrs	r2, r1
 8009a72:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009a7a:	021b      	lsls	r3, r3, #8
 8009a7c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009a84:	041b      	lsls	r3, r3, #16
 8009a86:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009a96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8009aaa:	431a      	orrs	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	430a      	orrs	r2, r1
 8009ab2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f042 0206 	orr.w	r2, r2, #6
 8009ac2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	699a      	ldr	r2, [r3, #24]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f042 0201 	orr.w	r2, r2, #1
 8009ad2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	f000f800 	.word	0xf000f800

08009af4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b02:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b0a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f003 0304 	and.w	r3, r3, #4
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d023      	beq.n	8009b5e <HAL_LTDC_IRQHandler+0x6a>
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	f003 0304 	and.w	r3, r3, #4
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d01e      	beq.n	8009b5e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f022 0204 	bic.w	r2, r2, #4
 8009b2e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2204      	movs	r2, #4
 8009b36:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009b3e:	f043 0201 	orr.w	r2, r3, #1
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2204      	movs	r2, #4
 8009b4c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f86f 	bl	8009c3c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f003 0302 	and.w	r3, r3, #2
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d023      	beq.n	8009bb0 <HAL_LTDC_IRQHandler+0xbc>
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	f003 0302 	and.w	r3, r3, #2
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d01e      	beq.n	8009bb0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f022 0202 	bic.w	r2, r2, #2
 8009b80:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2202      	movs	r2, #2
 8009b88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009b90:	f043 0202 	orr.w	r2, r3, #2
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2204      	movs	r2, #4
 8009b9e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 f846 	bl	8009c3c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f003 0301 	and.w	r3, r3, #1
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d01b      	beq.n	8009bf2 <HAL_LTDC_IRQHandler+0xfe>
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	f003 0301 	and.w	r3, r3, #1
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d016      	beq.n	8009bf2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f022 0201 	bic.w	r2, r2, #1
 8009bd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 f82f 	bl	8009c50 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f003 0308 	and.w	r3, r3, #8
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d01b      	beq.n	8009c34 <HAL_LTDC_IRQHandler+0x140>
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	f003 0308 	and.w	r3, r3, #8
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d016      	beq.n	8009c34 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f022 0208 	bic.w	r2, r2, #8
 8009c14:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2208      	movs	r2, #8
 8009c1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2201      	movs	r2, #1
 8009c22:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 f818 	bl	8009c64 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009c34:	bf00      	nop
 8009c36:	3710      	adds	r7, #16
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009c44:	bf00      	nop
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009c58:	bf00      	nop
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009c78:	b5b0      	push	{r4, r5, r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d101      	bne.n	8009c92 <HAL_LTDC_ConfigLayer+0x1a>
 8009c8e:	2302      	movs	r3, #2
 8009c90:	e02c      	b.n	8009cec <HAL_LTDC_ConfigLayer+0x74>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2201      	movs	r2, #1
 8009c96:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2202      	movs	r2, #2
 8009c9e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2134      	movs	r1, #52	@ 0x34
 8009ca8:	fb01 f303 	mul.w	r3, r1, r3
 8009cac:	4413      	add	r3, r2
 8009cae:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	4614      	mov	r4, r2
 8009cb6:	461d      	mov	r5, r3
 8009cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009cc4:	682b      	ldr	r3, [r5, #0]
 8009cc6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	68b9      	ldr	r1, [r7, #8]
 8009ccc:	68f8      	ldr	r0, [r7, #12]
 8009cce:	f000 f83b 	bl	8009d48 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8009cea:	2300      	movs	r3, #0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bdb0      	pop	{r4, r5, r7, pc}

08009cf4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d101      	bne.n	8009d0a <HAL_LTDC_EnableDither+0x16>
 8009d06:	2302      	movs	r3, #2
 8009d08:	e016      	b.n	8009d38 <HAL_LTDC_EnableDither+0x44>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2202      	movs	r2, #2
 8009d16:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8009d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8009d44 <HAL_LTDC_EnableDither+0x50>)
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	4a09      	ldr	r2, [pc, #36]	@ (8009d44 <HAL_LTDC_EnableDither+0x50>)
 8009d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d24:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2201      	movs	r2, #1
 8009d2a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr
 8009d44:	40016800 	.word	0x40016800

08009d48 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b089      	sub	sp, #36	@ 0x24
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	685a      	ldr	r2, [r3, #4]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	0c1b      	lsrs	r3, r3, #16
 8009d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d64:	4413      	add	r3, r2
 8009d66:	041b      	lsls	r3, r3, #16
 8009d68:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	01db      	lsls	r3, r3, #7
 8009d74:	4413      	add	r3, r2
 8009d76:	3384      	adds	r3, #132	@ 0x84
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	6812      	ldr	r2, [r2, #0]
 8009d7e:	4611      	mov	r1, r2
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	01d2      	lsls	r2, r2, #7
 8009d84:	440a      	add	r2, r1
 8009d86:	3284      	adds	r2, #132	@ 0x84
 8009d88:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009d8c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	0c1b      	lsrs	r3, r3, #16
 8009d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009d9e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009da0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4619      	mov	r1, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	01db      	lsls	r3, r3, #7
 8009dac:	440b      	add	r3, r1
 8009dae:	3384      	adds	r3, #132	@ 0x84
 8009db0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009db6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	68da      	ldr	r2, [r3, #12]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009dc6:	4413      	add	r3, r2
 8009dc8:	041b      	lsls	r3, r3, #16
 8009dca:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	01db      	lsls	r3, r3, #7
 8009dd6:	4413      	add	r3, r2
 8009dd8:	3384      	adds	r3, #132	@ 0x84
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	6812      	ldr	r2, [r2, #0]
 8009de0:	4611      	mov	r1, r2
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	01d2      	lsls	r2, r2, #7
 8009de6:	440a      	add	r2, r1
 8009de8:	3284      	adds	r2, #132	@ 0x84
 8009dea:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009dee:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	689a      	ldr	r2, [r3, #8]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009dfe:	4413      	add	r3, r2
 8009e00:	1c5a      	adds	r2, r3, #1
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4619      	mov	r1, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	01db      	lsls	r3, r3, #7
 8009e0c:	440b      	add	r3, r1
 8009e0e:	3384      	adds	r3, #132	@ 0x84
 8009e10:	4619      	mov	r1, r3
 8009e12:	69fb      	ldr	r3, [r7, #28]
 8009e14:	4313      	orrs	r3, r2
 8009e16:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	01db      	lsls	r3, r3, #7
 8009e22:	4413      	add	r3, r2
 8009e24:	3384      	adds	r3, #132	@ 0x84
 8009e26:	691b      	ldr	r3, [r3, #16]
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	6812      	ldr	r2, [r2, #0]
 8009e2c:	4611      	mov	r1, r2
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	01d2      	lsls	r2, r2, #7
 8009e32:	440a      	add	r2, r1
 8009e34:	3284      	adds	r2, #132	@ 0x84
 8009e36:	f023 0307 	bic.w	r3, r3, #7
 8009e3a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	461a      	mov	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	01db      	lsls	r3, r3, #7
 8009e46:	4413      	add	r3, r2
 8009e48:	3384      	adds	r3, #132	@ 0x84
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009e58:	021b      	lsls	r3, r3, #8
 8009e5a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009e62:	041b      	lsls	r3, r3, #16
 8009e64:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	061b      	lsls	r3, r3, #24
 8009e6c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	461a      	mov	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	01db      	lsls	r3, r3, #7
 8009e78:	4413      	add	r3, r2
 8009e7a:	3384      	adds	r3, #132	@ 0x84
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	461a      	mov	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	01db      	lsls	r3, r3, #7
 8009e88:	4413      	add	r3, r2
 8009e8a:	3384      	adds	r3, #132	@ 0x84
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	2300      	movs	r3, #0
 8009e90:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009e98:	461a      	mov	r2, r3
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	431a      	orrs	r2, r3
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	431a      	orrs	r2, r3
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	01db      	lsls	r3, r3, #7
 8009eac:	440b      	add	r3, r1
 8009eae:	3384      	adds	r3, #132	@ 0x84
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	01db      	lsls	r3, r3, #7
 8009ec2:	4413      	add	r3, r2
 8009ec4:	3384      	adds	r3, #132	@ 0x84
 8009ec6:	695b      	ldr	r3, [r3, #20]
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	6812      	ldr	r2, [r2, #0]
 8009ecc:	4611      	mov	r1, r2
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	01d2      	lsls	r2, r2, #7
 8009ed2:	440a      	add	r2, r1
 8009ed4:	3284      	adds	r2, #132	@ 0x84
 8009ed6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009eda:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	01db      	lsls	r3, r3, #7
 8009ee6:	4413      	add	r3, r2
 8009ee8:	3384      	adds	r3, #132	@ 0x84
 8009eea:	461a      	mov	r2, r3
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	695b      	ldr	r3, [r3, #20]
 8009ef0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	01db      	lsls	r3, r3, #7
 8009efc:	4413      	add	r3, r2
 8009efe:	3384      	adds	r3, #132	@ 0x84
 8009f00:	69db      	ldr	r3, [r3, #28]
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	6812      	ldr	r2, [r2, #0]
 8009f06:	4611      	mov	r1, r2
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	01d2      	lsls	r2, r2, #7
 8009f0c:	440a      	add	r2, r1
 8009f0e:	3284      	adds	r2, #132	@ 0x84
 8009f10:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8009f14:	f023 0307 	bic.w	r3, r3, #7
 8009f18:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	69da      	ldr	r2, [r3, #28]
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	6a1b      	ldr	r3, [r3, #32]
 8009f22:	68f9      	ldr	r1, [r7, #12]
 8009f24:	6809      	ldr	r1, [r1, #0]
 8009f26:	4608      	mov	r0, r1
 8009f28:	6879      	ldr	r1, [r7, #4]
 8009f2a:	01c9      	lsls	r1, r1, #7
 8009f2c:	4401      	add	r1, r0
 8009f2e:	3184      	adds	r1, #132	@ 0x84
 8009f30:	4313      	orrs	r3, r2
 8009f32:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	461a      	mov	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	01db      	lsls	r3, r3, #7
 8009f3e:	4413      	add	r3, r2
 8009f40:	3384      	adds	r3, #132	@ 0x84
 8009f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	461a      	mov	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	01db      	lsls	r3, r3, #7
 8009f4e:	4413      	add	r3, r2
 8009f50:	3384      	adds	r3, #132	@ 0x84
 8009f52:	461a      	mov	r2, r3
 8009f54:	2300      	movs	r3, #0
 8009f56:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	01db      	lsls	r3, r3, #7
 8009f62:	4413      	add	r3, r2
 8009f64:	3384      	adds	r3, #132	@ 0x84
 8009f66:	461a      	mov	r2, r3
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f6c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d102      	bne.n	8009f7c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8009f76:	2304      	movs	r3, #4
 8009f78:	61fb      	str	r3, [r7, #28]
 8009f7a:	e01b      	b.n	8009fb4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d102      	bne.n	8009f8a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8009f84:	2303      	movs	r3, #3
 8009f86:	61fb      	str	r3, [r7, #28]
 8009f88:	e014      	b.n	8009fb4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	2b04      	cmp	r3, #4
 8009f90:	d00b      	beq.n	8009faa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009f96:	2b02      	cmp	r3, #2
 8009f98:	d007      	beq.n	8009faa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009f9e:	2b03      	cmp	r3, #3
 8009fa0:	d003      	beq.n	8009faa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009fa6:	2b07      	cmp	r3, #7
 8009fa8:	d102      	bne.n	8009fb0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8009faa:	2302      	movs	r3, #2
 8009fac:	61fb      	str	r3, [r7, #28]
 8009fae:	e001      	b.n	8009fb4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	461a      	mov	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	01db      	lsls	r3, r3, #7
 8009fbe:	4413      	add	r3, r2
 8009fc0:	3384      	adds	r3, #132	@ 0x84
 8009fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	6812      	ldr	r2, [r2, #0]
 8009fc8:	4611      	mov	r1, r2
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	01d2      	lsls	r2, r2, #7
 8009fce:	440a      	add	r2, r1
 8009fd0:	3284      	adds	r2, #132	@ 0x84
 8009fd2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8009fd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fdc:	69fa      	ldr	r2, [r7, #28]
 8009fde:	fb02 f303 	mul.w	r3, r2, r3
 8009fe2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	6859      	ldr	r1, [r3, #4]
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	1acb      	subs	r3, r1, r3
 8009fee:	69f9      	ldr	r1, [r7, #28]
 8009ff0:	fb01 f303 	mul.w	r3, r1, r3
 8009ff4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009ff6:	68f9      	ldr	r1, [r7, #12]
 8009ff8:	6809      	ldr	r1, [r1, #0]
 8009ffa:	4608      	mov	r0, r1
 8009ffc:	6879      	ldr	r1, [r7, #4]
 8009ffe:	01c9      	lsls	r1, r1, #7
 800a000:	4401      	add	r1, r0
 800a002:	3184      	adds	r1, #132	@ 0x84
 800a004:	4313      	orrs	r3, r2
 800a006:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	461a      	mov	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	01db      	lsls	r3, r3, #7
 800a012:	4413      	add	r3, r2
 800a014:	3384      	adds	r3, #132	@ 0x84
 800a016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	6812      	ldr	r2, [r2, #0]
 800a01c:	4611      	mov	r1, r2
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	01d2      	lsls	r2, r2, #7
 800a022:	440a      	add	r2, r1
 800a024:	3284      	adds	r2, #132	@ 0x84
 800a026:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a02a:	f023 0307 	bic.w	r3, r3, #7
 800a02e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	461a      	mov	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	01db      	lsls	r3, r3, #7
 800a03a:	4413      	add	r3, r2
 800a03c:	3384      	adds	r3, #132	@ 0x84
 800a03e:	461a      	mov	r2, r3
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a044:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	461a      	mov	r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	01db      	lsls	r3, r3, #7
 800a050:	4413      	add	r3, r2
 800a052:	3384      	adds	r3, #132	@ 0x84
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	6812      	ldr	r2, [r2, #0]
 800a05a:	4611      	mov	r1, r2
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	01d2      	lsls	r2, r2, #7
 800a060:	440a      	add	r2, r1
 800a062:	3284      	adds	r2, #132	@ 0x84
 800a064:	f043 0301 	orr.w	r3, r3, #1
 800a068:	6013      	str	r3, [r2, #0]
}
 800a06a:	bf00      	nop
 800a06c:	3724      	adds	r7, #36	@ 0x24
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
	...

0800a078 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d101      	bne.n	800a08a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e267      	b.n	800a55a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f003 0301 	and.w	r3, r3, #1
 800a092:	2b00      	cmp	r3, #0
 800a094:	d075      	beq.n	800a182 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a096:	4b88      	ldr	r3, [pc, #544]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	f003 030c 	and.w	r3, r3, #12
 800a09e:	2b04      	cmp	r3, #4
 800a0a0:	d00c      	beq.n	800a0bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a0a2:	4b85      	ldr	r3, [pc, #532]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a0aa:	2b08      	cmp	r3, #8
 800a0ac:	d112      	bne.n	800a0d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a0ae:	4b82      	ldr	r3, [pc, #520]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a0ba:	d10b      	bne.n	800a0d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0bc:	4b7e      	ldr	r3, [pc, #504]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d05b      	beq.n	800a180 <HAL_RCC_OscConfig+0x108>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d157      	bne.n	800a180 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e242      	b.n	800a55a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0dc:	d106      	bne.n	800a0ec <HAL_RCC_OscConfig+0x74>
 800a0de:	4b76      	ldr	r3, [pc, #472]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a75      	ldr	r2, [pc, #468]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a0e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a0e8:	6013      	str	r3, [r2, #0]
 800a0ea:	e01d      	b.n	800a128 <HAL_RCC_OscConfig+0xb0>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a0f4:	d10c      	bne.n	800a110 <HAL_RCC_OscConfig+0x98>
 800a0f6:	4b70      	ldr	r3, [pc, #448]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a6f      	ldr	r2, [pc, #444]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a0fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a100:	6013      	str	r3, [r2, #0]
 800a102:	4b6d      	ldr	r3, [pc, #436]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a6c      	ldr	r2, [pc, #432]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a10c:	6013      	str	r3, [r2, #0]
 800a10e:	e00b      	b.n	800a128 <HAL_RCC_OscConfig+0xb0>
 800a110:	4b69      	ldr	r3, [pc, #420]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a68      	ldr	r2, [pc, #416]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a116:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a11a:	6013      	str	r3, [r2, #0]
 800a11c:	4b66      	ldr	r3, [pc, #408]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a65      	ldr	r2, [pc, #404]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a122:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d013      	beq.n	800a158 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a130:	f7fa fe90 	bl	8004e54 <HAL_GetTick>
 800a134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a136:	e008      	b.n	800a14a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a138:	f7fa fe8c 	bl	8004e54 <HAL_GetTick>
 800a13c:	4602      	mov	r2, r0
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	2b64      	cmp	r3, #100	@ 0x64
 800a144:	d901      	bls.n	800a14a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a146:	2303      	movs	r3, #3
 800a148:	e207      	b.n	800a55a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a14a:	4b5b      	ldr	r3, [pc, #364]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a152:	2b00      	cmp	r3, #0
 800a154:	d0f0      	beq.n	800a138 <HAL_RCC_OscConfig+0xc0>
 800a156:	e014      	b.n	800a182 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a158:	f7fa fe7c 	bl	8004e54 <HAL_GetTick>
 800a15c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a15e:	e008      	b.n	800a172 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a160:	f7fa fe78 	bl	8004e54 <HAL_GetTick>
 800a164:	4602      	mov	r2, r0
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	2b64      	cmp	r3, #100	@ 0x64
 800a16c:	d901      	bls.n	800a172 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a16e:	2303      	movs	r3, #3
 800a170:	e1f3      	b.n	800a55a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a172:	4b51      	ldr	r3, [pc, #324]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d1f0      	bne.n	800a160 <HAL_RCC_OscConfig+0xe8>
 800a17e:	e000      	b.n	800a182 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f003 0302 	and.w	r3, r3, #2
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d063      	beq.n	800a256 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a18e:	4b4a      	ldr	r3, [pc, #296]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	f003 030c 	and.w	r3, r3, #12
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00b      	beq.n	800a1b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a19a:	4b47      	ldr	r3, [pc, #284]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a1a2:	2b08      	cmp	r3, #8
 800a1a4:	d11c      	bne.n	800a1e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a1a6:	4b44      	ldr	r3, [pc, #272]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d116      	bne.n	800a1e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a1b2:	4b41      	ldr	r3, [pc, #260]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f003 0302 	and.w	r3, r3, #2
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d005      	beq.n	800a1ca <HAL_RCC_OscConfig+0x152>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d001      	beq.n	800a1ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e1c7      	b.n	800a55a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1ca:	4b3b      	ldr	r3, [pc, #236]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	00db      	lsls	r3, r3, #3
 800a1d8:	4937      	ldr	r1, [pc, #220]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a1de:	e03a      	b.n	800a256 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d020      	beq.n	800a22a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a1e8:	4b34      	ldr	r3, [pc, #208]	@ (800a2bc <HAL_RCC_OscConfig+0x244>)
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1ee:	f7fa fe31 	bl	8004e54 <HAL_GetTick>
 800a1f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1f4:	e008      	b.n	800a208 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1f6:	f7fa fe2d 	bl	8004e54 <HAL_GetTick>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	1ad3      	subs	r3, r2, r3
 800a200:	2b02      	cmp	r3, #2
 800a202:	d901      	bls.n	800a208 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a204:	2303      	movs	r3, #3
 800a206:	e1a8      	b.n	800a55a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a208:	4b2b      	ldr	r3, [pc, #172]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 0302 	and.w	r3, r3, #2
 800a210:	2b00      	cmp	r3, #0
 800a212:	d0f0      	beq.n	800a1f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a214:	4b28      	ldr	r3, [pc, #160]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	00db      	lsls	r3, r3, #3
 800a222:	4925      	ldr	r1, [pc, #148]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a224:	4313      	orrs	r3, r2
 800a226:	600b      	str	r3, [r1, #0]
 800a228:	e015      	b.n	800a256 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a22a:	4b24      	ldr	r3, [pc, #144]	@ (800a2bc <HAL_RCC_OscConfig+0x244>)
 800a22c:	2200      	movs	r2, #0
 800a22e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a230:	f7fa fe10 	bl	8004e54 <HAL_GetTick>
 800a234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a236:	e008      	b.n	800a24a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a238:	f7fa fe0c 	bl	8004e54 <HAL_GetTick>
 800a23c:	4602      	mov	r2, r0
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	2b02      	cmp	r3, #2
 800a244:	d901      	bls.n	800a24a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a246:	2303      	movs	r3, #3
 800a248:	e187      	b.n	800a55a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a24a:	4b1b      	ldr	r3, [pc, #108]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f003 0302 	and.w	r3, r3, #2
 800a252:	2b00      	cmp	r3, #0
 800a254:	d1f0      	bne.n	800a238 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f003 0308 	and.w	r3, r3, #8
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d036      	beq.n	800a2d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	695b      	ldr	r3, [r3, #20]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d016      	beq.n	800a298 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a26a:	4b15      	ldr	r3, [pc, #84]	@ (800a2c0 <HAL_RCC_OscConfig+0x248>)
 800a26c:	2201      	movs	r2, #1
 800a26e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a270:	f7fa fdf0 	bl	8004e54 <HAL_GetTick>
 800a274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a276:	e008      	b.n	800a28a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a278:	f7fa fdec 	bl	8004e54 <HAL_GetTick>
 800a27c:	4602      	mov	r2, r0
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	2b02      	cmp	r3, #2
 800a284:	d901      	bls.n	800a28a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	e167      	b.n	800a55a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a28a:	4b0b      	ldr	r3, [pc, #44]	@ (800a2b8 <HAL_RCC_OscConfig+0x240>)
 800a28c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a28e:	f003 0302 	and.w	r3, r3, #2
 800a292:	2b00      	cmp	r3, #0
 800a294:	d0f0      	beq.n	800a278 <HAL_RCC_OscConfig+0x200>
 800a296:	e01b      	b.n	800a2d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a298:	4b09      	ldr	r3, [pc, #36]	@ (800a2c0 <HAL_RCC_OscConfig+0x248>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a29e:	f7fa fdd9 	bl	8004e54 <HAL_GetTick>
 800a2a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a2a4:	e00e      	b.n	800a2c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a2a6:	f7fa fdd5 	bl	8004e54 <HAL_GetTick>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d907      	bls.n	800a2c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	e150      	b.n	800a55a <HAL_RCC_OscConfig+0x4e2>
 800a2b8:	40023800 	.word	0x40023800
 800a2bc:	42470000 	.word	0x42470000
 800a2c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a2c4:	4b88      	ldr	r3, [pc, #544]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a2c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2c8:	f003 0302 	and.w	r3, r3, #2
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d1ea      	bne.n	800a2a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f003 0304 	and.w	r3, r3, #4
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f000 8097 	beq.w	800a40c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a2e2:	4b81      	ldr	r3, [pc, #516]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a2e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d10f      	bne.n	800a30e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	60bb      	str	r3, [r7, #8]
 800a2f2:	4b7d      	ldr	r3, [pc, #500]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a2f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2f6:	4a7c      	ldr	r2, [pc, #496]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a2f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2fc:	6413      	str	r3, [r2, #64]	@ 0x40
 800a2fe:	4b7a      	ldr	r3, [pc, #488]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a306:	60bb      	str	r3, [r7, #8]
 800a308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a30a:	2301      	movs	r3, #1
 800a30c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a30e:	4b77      	ldr	r3, [pc, #476]	@ (800a4ec <HAL_RCC_OscConfig+0x474>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a316:	2b00      	cmp	r3, #0
 800a318:	d118      	bne.n	800a34c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a31a:	4b74      	ldr	r3, [pc, #464]	@ (800a4ec <HAL_RCC_OscConfig+0x474>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a73      	ldr	r2, [pc, #460]	@ (800a4ec <HAL_RCC_OscConfig+0x474>)
 800a320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a326:	f7fa fd95 	bl	8004e54 <HAL_GetTick>
 800a32a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a32c:	e008      	b.n	800a340 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a32e:	f7fa fd91 	bl	8004e54 <HAL_GetTick>
 800a332:	4602      	mov	r2, r0
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	1ad3      	subs	r3, r2, r3
 800a338:	2b02      	cmp	r3, #2
 800a33a:	d901      	bls.n	800a340 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a33c:	2303      	movs	r3, #3
 800a33e:	e10c      	b.n	800a55a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a340:	4b6a      	ldr	r3, [pc, #424]	@ (800a4ec <HAL_RCC_OscConfig+0x474>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d0f0      	beq.n	800a32e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d106      	bne.n	800a362 <HAL_RCC_OscConfig+0x2ea>
 800a354:	4b64      	ldr	r3, [pc, #400]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a358:	4a63      	ldr	r2, [pc, #396]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a35a:	f043 0301 	orr.w	r3, r3, #1
 800a35e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a360:	e01c      	b.n	800a39c <HAL_RCC_OscConfig+0x324>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	2b05      	cmp	r3, #5
 800a368:	d10c      	bne.n	800a384 <HAL_RCC_OscConfig+0x30c>
 800a36a:	4b5f      	ldr	r3, [pc, #380]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a36c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a36e:	4a5e      	ldr	r2, [pc, #376]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a370:	f043 0304 	orr.w	r3, r3, #4
 800a374:	6713      	str	r3, [r2, #112]	@ 0x70
 800a376:	4b5c      	ldr	r3, [pc, #368]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a37a:	4a5b      	ldr	r2, [pc, #364]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a37c:	f043 0301 	orr.w	r3, r3, #1
 800a380:	6713      	str	r3, [r2, #112]	@ 0x70
 800a382:	e00b      	b.n	800a39c <HAL_RCC_OscConfig+0x324>
 800a384:	4b58      	ldr	r3, [pc, #352]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a388:	4a57      	ldr	r2, [pc, #348]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a38a:	f023 0301 	bic.w	r3, r3, #1
 800a38e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a390:	4b55      	ldr	r3, [pc, #340]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a394:	4a54      	ldr	r2, [pc, #336]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a396:	f023 0304 	bic.w	r3, r3, #4
 800a39a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d015      	beq.n	800a3d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3a4:	f7fa fd56 	bl	8004e54 <HAL_GetTick>
 800a3a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a3aa:	e00a      	b.n	800a3c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3ac:	f7fa fd52 	bl	8004e54 <HAL_GetTick>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	1ad3      	subs	r3, r2, r3
 800a3b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d901      	bls.n	800a3c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a3be:	2303      	movs	r3, #3
 800a3c0:	e0cb      	b.n	800a55a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a3c2:	4b49      	ldr	r3, [pc, #292]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a3c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3c6:	f003 0302 	and.w	r3, r3, #2
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d0ee      	beq.n	800a3ac <HAL_RCC_OscConfig+0x334>
 800a3ce:	e014      	b.n	800a3fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a3d0:	f7fa fd40 	bl	8004e54 <HAL_GetTick>
 800a3d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a3d6:	e00a      	b.n	800a3ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3d8:	f7fa fd3c 	bl	8004e54 <HAL_GetTick>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d901      	bls.n	800a3ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	e0b5      	b.n	800a55a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a3ee:	4b3e      	ldr	r3, [pc, #248]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a3f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3f2:	f003 0302 	and.w	r3, r3, #2
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d1ee      	bne.n	800a3d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a3fa:	7dfb      	ldrb	r3, [r7, #23]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d105      	bne.n	800a40c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a400:	4b39      	ldr	r3, [pc, #228]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a404:	4a38      	ldr	r2, [pc, #224]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a406:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a40a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	699b      	ldr	r3, [r3, #24]
 800a410:	2b00      	cmp	r3, #0
 800a412:	f000 80a1 	beq.w	800a558 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a416:	4b34      	ldr	r3, [pc, #208]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	f003 030c 	and.w	r3, r3, #12
 800a41e:	2b08      	cmp	r3, #8
 800a420:	d05c      	beq.n	800a4dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	699b      	ldr	r3, [r3, #24]
 800a426:	2b02      	cmp	r3, #2
 800a428:	d141      	bne.n	800a4ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a42a:	4b31      	ldr	r3, [pc, #196]	@ (800a4f0 <HAL_RCC_OscConfig+0x478>)
 800a42c:	2200      	movs	r2, #0
 800a42e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a430:	f7fa fd10 	bl	8004e54 <HAL_GetTick>
 800a434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a436:	e008      	b.n	800a44a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a438:	f7fa fd0c 	bl	8004e54 <HAL_GetTick>
 800a43c:	4602      	mov	r2, r0
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	1ad3      	subs	r3, r2, r3
 800a442:	2b02      	cmp	r3, #2
 800a444:	d901      	bls.n	800a44a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a446:	2303      	movs	r3, #3
 800a448:	e087      	b.n	800a55a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a44a:	4b27      	ldr	r3, [pc, #156]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a452:	2b00      	cmp	r3, #0
 800a454:	d1f0      	bne.n	800a438 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	69da      	ldr	r2, [r3, #28]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a1b      	ldr	r3, [r3, #32]
 800a45e:	431a      	orrs	r2, r3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a464:	019b      	lsls	r3, r3, #6
 800a466:	431a      	orrs	r2, r3
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a46c:	085b      	lsrs	r3, r3, #1
 800a46e:	3b01      	subs	r3, #1
 800a470:	041b      	lsls	r3, r3, #16
 800a472:	431a      	orrs	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a478:	061b      	lsls	r3, r3, #24
 800a47a:	491b      	ldr	r1, [pc, #108]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a47c:	4313      	orrs	r3, r2
 800a47e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a480:	4b1b      	ldr	r3, [pc, #108]	@ (800a4f0 <HAL_RCC_OscConfig+0x478>)
 800a482:	2201      	movs	r2, #1
 800a484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a486:	f7fa fce5 	bl	8004e54 <HAL_GetTick>
 800a48a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a48c:	e008      	b.n	800a4a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a48e:	f7fa fce1 	bl	8004e54 <HAL_GetTick>
 800a492:	4602      	mov	r2, r0
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	1ad3      	subs	r3, r2, r3
 800a498:	2b02      	cmp	r3, #2
 800a49a:	d901      	bls.n	800a4a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a49c:	2303      	movs	r3, #3
 800a49e:	e05c      	b.n	800a55a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a4a0:	4b11      	ldr	r3, [pc, #68]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d0f0      	beq.n	800a48e <HAL_RCC_OscConfig+0x416>
 800a4ac:	e054      	b.n	800a558 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a4ae:	4b10      	ldr	r3, [pc, #64]	@ (800a4f0 <HAL_RCC_OscConfig+0x478>)
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4b4:	f7fa fcce 	bl	8004e54 <HAL_GetTick>
 800a4b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4ba:	e008      	b.n	800a4ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4bc:	f7fa fcca 	bl	8004e54 <HAL_GetTick>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	1ad3      	subs	r3, r2, r3
 800a4c6:	2b02      	cmp	r3, #2
 800a4c8:	d901      	bls.n	800a4ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	e045      	b.n	800a55a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4ce:	4b06      	ldr	r3, [pc, #24]	@ (800a4e8 <HAL_RCC_OscConfig+0x470>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1f0      	bne.n	800a4bc <HAL_RCC_OscConfig+0x444>
 800a4da:	e03d      	b.n	800a558 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	699b      	ldr	r3, [r3, #24]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d107      	bne.n	800a4f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e038      	b.n	800a55a <HAL_RCC_OscConfig+0x4e2>
 800a4e8:	40023800 	.word	0x40023800
 800a4ec:	40007000 	.word	0x40007000
 800a4f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a4f4:	4b1b      	ldr	r3, [pc, #108]	@ (800a564 <HAL_RCC_OscConfig+0x4ec>)
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	699b      	ldr	r3, [r3, #24]
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d028      	beq.n	800a554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d121      	bne.n	800a554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d11a      	bne.n	800a554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a524:	4013      	ands	r3, r2
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a52a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d111      	bne.n	800a554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a53a:	085b      	lsrs	r3, r3, #1
 800a53c:	3b01      	subs	r3, #1
 800a53e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a540:	429a      	cmp	r2, r3
 800a542:	d107      	bne.n	800a554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a54e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a550:	429a      	cmp	r2, r3
 800a552:	d001      	beq.n	800a558 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	e000      	b.n	800a55a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3718      	adds	r7, #24
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	40023800 	.word	0x40023800

0800a568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d101      	bne.n	800a57c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	e0cc      	b.n	800a716 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a57c:	4b68      	ldr	r3, [pc, #416]	@ (800a720 <HAL_RCC_ClockConfig+0x1b8>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f003 030f 	and.w	r3, r3, #15
 800a584:	683a      	ldr	r2, [r7, #0]
 800a586:	429a      	cmp	r2, r3
 800a588:	d90c      	bls.n	800a5a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a58a:	4b65      	ldr	r3, [pc, #404]	@ (800a720 <HAL_RCC_ClockConfig+0x1b8>)
 800a58c:	683a      	ldr	r2, [r7, #0]
 800a58e:	b2d2      	uxtb	r2, r2
 800a590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a592:	4b63      	ldr	r3, [pc, #396]	@ (800a720 <HAL_RCC_ClockConfig+0x1b8>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f003 030f 	and.w	r3, r3, #15
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d001      	beq.n	800a5a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	e0b8      	b.n	800a716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f003 0302 	and.w	r3, r3, #2
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d020      	beq.n	800a5f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 0304 	and.w	r3, r3, #4
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d005      	beq.n	800a5c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a5bc:	4b59      	ldr	r3, [pc, #356]	@ (800a724 <HAL_RCC_ClockConfig+0x1bc>)
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	4a58      	ldr	r2, [pc, #352]	@ (800a724 <HAL_RCC_ClockConfig+0x1bc>)
 800a5c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a5c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 0308 	and.w	r3, r3, #8
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d005      	beq.n	800a5e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a5d4:	4b53      	ldr	r3, [pc, #332]	@ (800a724 <HAL_RCC_ClockConfig+0x1bc>)
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	4a52      	ldr	r2, [pc, #328]	@ (800a724 <HAL_RCC_ClockConfig+0x1bc>)
 800a5da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a5de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a5e0:	4b50      	ldr	r3, [pc, #320]	@ (800a724 <HAL_RCC_ClockConfig+0x1bc>)
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	494d      	ldr	r1, [pc, #308]	@ (800a724 <HAL_RCC_ClockConfig+0x1bc>)
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 0301 	and.w	r3, r3, #1
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d044      	beq.n	800a688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	2b01      	cmp	r3, #1
 800a604:	d107      	bne.n	800a616 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a606:	4b47      	ldr	r3, [pc, #284]	@ (800a724 <HAL_RCC_ClockConfig+0x1bc>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d119      	bne.n	800a646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	e07f      	b.n	800a716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	2b02      	cmp	r3, #2
 800a61c:	d003      	beq.n	800a626 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a622:	2b03      	cmp	r3, #3
 800a624:	d107      	bne.n	800a636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a626:	4b3f      	ldr	r3, [pc, #252]	@ (800a724 <HAL_RCC_ClockConfig+0x1bc>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d109      	bne.n	800a646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a632:	2301      	movs	r3, #1
 800a634:	e06f      	b.n	800a716 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a636:	4b3b      	ldr	r3, [pc, #236]	@ (800a724 <HAL_RCC_ClockConfig+0x1bc>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f003 0302 	and.w	r3, r3, #2
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d101      	bne.n	800a646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a642:	2301      	movs	r3, #1
 800a644:	e067      	b.n	800a716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a646:	4b37      	ldr	r3, [pc, #220]	@ (800a724 <HAL_RCC_ClockConfig+0x1bc>)
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	f023 0203 	bic.w	r2, r3, #3
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	4934      	ldr	r1, [pc, #208]	@ (800a724 <HAL_RCC_ClockConfig+0x1bc>)
 800a654:	4313      	orrs	r3, r2
 800a656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a658:	f7fa fbfc 	bl	8004e54 <HAL_GetTick>
 800a65c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a65e:	e00a      	b.n	800a676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a660:	f7fa fbf8 	bl	8004e54 <HAL_GetTick>
 800a664:	4602      	mov	r2, r0
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	1ad3      	subs	r3, r2, r3
 800a66a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a66e:	4293      	cmp	r3, r2
 800a670:	d901      	bls.n	800a676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a672:	2303      	movs	r3, #3
 800a674:	e04f      	b.n	800a716 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a676:	4b2b      	ldr	r3, [pc, #172]	@ (800a724 <HAL_RCC_ClockConfig+0x1bc>)
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	f003 020c 	and.w	r2, r3, #12
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	429a      	cmp	r2, r3
 800a686:	d1eb      	bne.n	800a660 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a688:	4b25      	ldr	r3, [pc, #148]	@ (800a720 <HAL_RCC_ClockConfig+0x1b8>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f003 030f 	and.w	r3, r3, #15
 800a690:	683a      	ldr	r2, [r7, #0]
 800a692:	429a      	cmp	r2, r3
 800a694:	d20c      	bcs.n	800a6b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a696:	4b22      	ldr	r3, [pc, #136]	@ (800a720 <HAL_RCC_ClockConfig+0x1b8>)
 800a698:	683a      	ldr	r2, [r7, #0]
 800a69a:	b2d2      	uxtb	r2, r2
 800a69c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a69e:	4b20      	ldr	r3, [pc, #128]	@ (800a720 <HAL_RCC_ClockConfig+0x1b8>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 030f 	and.w	r3, r3, #15
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d001      	beq.n	800a6b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e032      	b.n	800a716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 0304 	and.w	r3, r3, #4
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d008      	beq.n	800a6ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a6bc:	4b19      	ldr	r3, [pc, #100]	@ (800a724 <HAL_RCC_ClockConfig+0x1bc>)
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	4916      	ldr	r1, [pc, #88]	@ (800a724 <HAL_RCC_ClockConfig+0x1bc>)
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f003 0308 	and.w	r3, r3, #8
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d009      	beq.n	800a6ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a6da:	4b12      	ldr	r3, [pc, #72]	@ (800a724 <HAL_RCC_ClockConfig+0x1bc>)
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	00db      	lsls	r3, r3, #3
 800a6e8:	490e      	ldr	r1, [pc, #56]	@ (800a724 <HAL_RCC_ClockConfig+0x1bc>)
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a6ee:	f000 f821 	bl	800a734 <HAL_RCC_GetSysClockFreq>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	4b0b      	ldr	r3, [pc, #44]	@ (800a724 <HAL_RCC_ClockConfig+0x1bc>)
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	091b      	lsrs	r3, r3, #4
 800a6fa:	f003 030f 	and.w	r3, r3, #15
 800a6fe:	490a      	ldr	r1, [pc, #40]	@ (800a728 <HAL_RCC_ClockConfig+0x1c0>)
 800a700:	5ccb      	ldrb	r3, [r1, r3]
 800a702:	fa22 f303 	lsr.w	r3, r2, r3
 800a706:	4a09      	ldr	r2, [pc, #36]	@ (800a72c <HAL_RCC_ClockConfig+0x1c4>)
 800a708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a70a:	4b09      	ldr	r3, [pc, #36]	@ (800a730 <HAL_RCC_ClockConfig+0x1c8>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4618      	mov	r0, r3
 800a710:	f7f8 fad2 	bl	8002cb8 <HAL_InitTick>

  return HAL_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	40023c00 	.word	0x40023c00
 800a724:	40023800 	.word	0x40023800
 800a728:	08012e50 	.word	0x08012e50
 800a72c:	20000164 	.word	0x20000164
 800a730:	200001ec 	.word	0x200001ec

0800a734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a738:	b094      	sub	sp, #80	@ 0x50
 800a73a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a73c:	2300      	movs	r3, #0
 800a73e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800a740:	2300      	movs	r3, #0
 800a742:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800a744:	2300      	movs	r3, #0
 800a746:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800a748:	2300      	movs	r3, #0
 800a74a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a74c:	4b79      	ldr	r3, [pc, #484]	@ (800a934 <HAL_RCC_GetSysClockFreq+0x200>)
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	f003 030c 	and.w	r3, r3, #12
 800a754:	2b08      	cmp	r3, #8
 800a756:	d00d      	beq.n	800a774 <HAL_RCC_GetSysClockFreq+0x40>
 800a758:	2b08      	cmp	r3, #8
 800a75a:	f200 80e1 	bhi.w	800a920 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d002      	beq.n	800a768 <HAL_RCC_GetSysClockFreq+0x34>
 800a762:	2b04      	cmp	r3, #4
 800a764:	d003      	beq.n	800a76e <HAL_RCC_GetSysClockFreq+0x3a>
 800a766:	e0db      	b.n	800a920 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a768:	4b73      	ldr	r3, [pc, #460]	@ (800a938 <HAL_RCC_GetSysClockFreq+0x204>)
 800a76a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a76c:	e0db      	b.n	800a926 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a76e:	4b73      	ldr	r3, [pc, #460]	@ (800a93c <HAL_RCC_GetSysClockFreq+0x208>)
 800a770:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a772:	e0d8      	b.n	800a926 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a774:	4b6f      	ldr	r3, [pc, #444]	@ (800a934 <HAL_RCC_GetSysClockFreq+0x200>)
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a77c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a77e:	4b6d      	ldr	r3, [pc, #436]	@ (800a934 <HAL_RCC_GetSysClockFreq+0x200>)
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a786:	2b00      	cmp	r3, #0
 800a788:	d063      	beq.n	800a852 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a78a:	4b6a      	ldr	r3, [pc, #424]	@ (800a934 <HAL_RCC_GetSysClockFreq+0x200>)
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	099b      	lsrs	r3, r3, #6
 800a790:	2200      	movs	r2, #0
 800a792:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a794:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a79c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a79e:	2300      	movs	r3, #0
 800a7a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a7a6:	4622      	mov	r2, r4
 800a7a8:	462b      	mov	r3, r5
 800a7aa:	f04f 0000 	mov.w	r0, #0
 800a7ae:	f04f 0100 	mov.w	r1, #0
 800a7b2:	0159      	lsls	r1, r3, #5
 800a7b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a7b8:	0150      	lsls	r0, r2, #5
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	4621      	mov	r1, r4
 800a7c0:	1a51      	subs	r1, r2, r1
 800a7c2:	6139      	str	r1, [r7, #16]
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	eb63 0301 	sbc.w	r3, r3, r1
 800a7ca:	617b      	str	r3, [r7, #20]
 800a7cc:	f04f 0200 	mov.w	r2, #0
 800a7d0:	f04f 0300 	mov.w	r3, #0
 800a7d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a7d8:	4659      	mov	r1, fp
 800a7da:	018b      	lsls	r3, r1, #6
 800a7dc:	4651      	mov	r1, sl
 800a7de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a7e2:	4651      	mov	r1, sl
 800a7e4:	018a      	lsls	r2, r1, #6
 800a7e6:	4651      	mov	r1, sl
 800a7e8:	ebb2 0801 	subs.w	r8, r2, r1
 800a7ec:	4659      	mov	r1, fp
 800a7ee:	eb63 0901 	sbc.w	r9, r3, r1
 800a7f2:	f04f 0200 	mov.w	r2, #0
 800a7f6:	f04f 0300 	mov.w	r3, #0
 800a7fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a7fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a802:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a806:	4690      	mov	r8, r2
 800a808:	4699      	mov	r9, r3
 800a80a:	4623      	mov	r3, r4
 800a80c:	eb18 0303 	adds.w	r3, r8, r3
 800a810:	60bb      	str	r3, [r7, #8]
 800a812:	462b      	mov	r3, r5
 800a814:	eb49 0303 	adc.w	r3, r9, r3
 800a818:	60fb      	str	r3, [r7, #12]
 800a81a:	f04f 0200 	mov.w	r2, #0
 800a81e:	f04f 0300 	mov.w	r3, #0
 800a822:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a826:	4629      	mov	r1, r5
 800a828:	024b      	lsls	r3, r1, #9
 800a82a:	4621      	mov	r1, r4
 800a82c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a830:	4621      	mov	r1, r4
 800a832:	024a      	lsls	r2, r1, #9
 800a834:	4610      	mov	r0, r2
 800a836:	4619      	mov	r1, r3
 800a838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a83a:	2200      	movs	r2, #0
 800a83c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a83e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a840:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a844:	f7f5 fd2c 	bl	80002a0 <__aeabi_uldivmod>
 800a848:	4602      	mov	r2, r0
 800a84a:	460b      	mov	r3, r1
 800a84c:	4613      	mov	r3, r2
 800a84e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a850:	e058      	b.n	800a904 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a852:	4b38      	ldr	r3, [pc, #224]	@ (800a934 <HAL_RCC_GetSysClockFreq+0x200>)
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	099b      	lsrs	r3, r3, #6
 800a858:	2200      	movs	r2, #0
 800a85a:	4618      	mov	r0, r3
 800a85c:	4611      	mov	r1, r2
 800a85e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a862:	623b      	str	r3, [r7, #32]
 800a864:	2300      	movs	r3, #0
 800a866:	627b      	str	r3, [r7, #36]	@ 0x24
 800a868:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a86c:	4642      	mov	r2, r8
 800a86e:	464b      	mov	r3, r9
 800a870:	f04f 0000 	mov.w	r0, #0
 800a874:	f04f 0100 	mov.w	r1, #0
 800a878:	0159      	lsls	r1, r3, #5
 800a87a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a87e:	0150      	lsls	r0, r2, #5
 800a880:	4602      	mov	r2, r0
 800a882:	460b      	mov	r3, r1
 800a884:	4641      	mov	r1, r8
 800a886:	ebb2 0a01 	subs.w	sl, r2, r1
 800a88a:	4649      	mov	r1, r9
 800a88c:	eb63 0b01 	sbc.w	fp, r3, r1
 800a890:	f04f 0200 	mov.w	r2, #0
 800a894:	f04f 0300 	mov.w	r3, #0
 800a898:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a89c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a8a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a8a4:	ebb2 040a 	subs.w	r4, r2, sl
 800a8a8:	eb63 050b 	sbc.w	r5, r3, fp
 800a8ac:	f04f 0200 	mov.w	r2, #0
 800a8b0:	f04f 0300 	mov.w	r3, #0
 800a8b4:	00eb      	lsls	r3, r5, #3
 800a8b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a8ba:	00e2      	lsls	r2, r4, #3
 800a8bc:	4614      	mov	r4, r2
 800a8be:	461d      	mov	r5, r3
 800a8c0:	4643      	mov	r3, r8
 800a8c2:	18e3      	adds	r3, r4, r3
 800a8c4:	603b      	str	r3, [r7, #0]
 800a8c6:	464b      	mov	r3, r9
 800a8c8:	eb45 0303 	adc.w	r3, r5, r3
 800a8cc:	607b      	str	r3, [r7, #4]
 800a8ce:	f04f 0200 	mov.w	r2, #0
 800a8d2:	f04f 0300 	mov.w	r3, #0
 800a8d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a8da:	4629      	mov	r1, r5
 800a8dc:	028b      	lsls	r3, r1, #10
 800a8de:	4621      	mov	r1, r4
 800a8e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a8e4:	4621      	mov	r1, r4
 800a8e6:	028a      	lsls	r2, r1, #10
 800a8e8:	4610      	mov	r0, r2
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	61bb      	str	r3, [r7, #24]
 800a8f2:	61fa      	str	r2, [r7, #28]
 800a8f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a8f8:	f7f5 fcd2 	bl	80002a0 <__aeabi_uldivmod>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	460b      	mov	r3, r1
 800a900:	4613      	mov	r3, r2
 800a902:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a904:	4b0b      	ldr	r3, [pc, #44]	@ (800a934 <HAL_RCC_GetSysClockFreq+0x200>)
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	0c1b      	lsrs	r3, r3, #16
 800a90a:	f003 0303 	and.w	r3, r3, #3
 800a90e:	3301      	adds	r3, #1
 800a910:	005b      	lsls	r3, r3, #1
 800a912:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800a914:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a918:	fbb2 f3f3 	udiv	r3, r2, r3
 800a91c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a91e:	e002      	b.n	800a926 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a920:	4b05      	ldr	r3, [pc, #20]	@ (800a938 <HAL_RCC_GetSysClockFreq+0x204>)
 800a922:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a924:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3750      	adds	r7, #80	@ 0x50
 800a92c:	46bd      	mov	sp, r7
 800a92e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a932:	bf00      	nop
 800a934:	40023800 	.word	0x40023800
 800a938:	00f42400 	.word	0x00f42400
 800a93c:	007a1200 	.word	0x007a1200

0800a940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a940:	b480      	push	{r7}
 800a942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a944:	4b03      	ldr	r3, [pc, #12]	@ (800a954 <HAL_RCC_GetHCLKFreq+0x14>)
 800a946:	681b      	ldr	r3, [r3, #0]
}
 800a948:	4618      	mov	r0, r3
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	20000164 	.word	0x20000164

0800a958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a95c:	f7ff fff0 	bl	800a940 <HAL_RCC_GetHCLKFreq>
 800a960:	4602      	mov	r2, r0
 800a962:	4b05      	ldr	r3, [pc, #20]	@ (800a978 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	0a9b      	lsrs	r3, r3, #10
 800a968:	f003 0307 	and.w	r3, r3, #7
 800a96c:	4903      	ldr	r1, [pc, #12]	@ (800a97c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a96e:	5ccb      	ldrb	r3, [r1, r3]
 800a970:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a974:	4618      	mov	r0, r3
 800a976:	bd80      	pop	{r7, pc}
 800a978:	40023800 	.word	0x40023800
 800a97c:	08012e60 	.word	0x08012e60

0800a980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a984:	f7ff ffdc 	bl	800a940 <HAL_RCC_GetHCLKFreq>
 800a988:	4602      	mov	r2, r0
 800a98a:	4b05      	ldr	r3, [pc, #20]	@ (800a9a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	0b5b      	lsrs	r3, r3, #13
 800a990:	f003 0307 	and.w	r3, r3, #7
 800a994:	4903      	ldr	r1, [pc, #12]	@ (800a9a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a996:	5ccb      	ldrb	r3, [r1, r3]
 800a998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	40023800 	.word	0x40023800
 800a9a4:	08012e60 	.word	0x08012e60

0800a9a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	220f      	movs	r2, #15
 800a9b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a9b8:	4b12      	ldr	r3, [pc, #72]	@ (800aa04 <HAL_RCC_GetClockConfig+0x5c>)
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	f003 0203 	and.w	r2, r3, #3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a9c4:	4b0f      	ldr	r3, [pc, #60]	@ (800aa04 <HAL_RCC_GetClockConfig+0x5c>)
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a9d0:	4b0c      	ldr	r3, [pc, #48]	@ (800aa04 <HAL_RCC_GetClockConfig+0x5c>)
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a9dc:	4b09      	ldr	r3, [pc, #36]	@ (800aa04 <HAL_RCC_GetClockConfig+0x5c>)
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	08db      	lsrs	r3, r3, #3
 800a9e2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a9ea:	4b07      	ldr	r3, [pc, #28]	@ (800aa08 <HAL_RCC_GetClockConfig+0x60>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f003 020f 	and.w	r2, r3, #15
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	601a      	str	r2, [r3, #0]
}
 800a9f6:	bf00      	nop
 800a9f8:	370c      	adds	r7, #12
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	40023800 	.word	0x40023800
 800aa08:	40023c00 	.word	0x40023c00

0800aa0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b086      	sub	sp, #24
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aa14:	2300      	movs	r3, #0
 800aa16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 0301 	and.w	r3, r3, #1
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d10b      	bne.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d105      	bne.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d075      	beq.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800aa40:	4b91      	ldr	r3, [pc, #580]	@ (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800aa42:	2200      	movs	r2, #0
 800aa44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800aa46:	f7fa fa05 	bl	8004e54 <HAL_GetTick>
 800aa4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aa4c:	e008      	b.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800aa4e:	f7fa fa01 	bl	8004e54 <HAL_GetTick>
 800aa52:	4602      	mov	r2, r0
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	1ad3      	subs	r3, r2, r3
 800aa58:	2b02      	cmp	r3, #2
 800aa5a:	d901      	bls.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aa5c:	2303      	movs	r3, #3
 800aa5e:	e189      	b.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aa60:	4b8a      	ldr	r3, [pc, #552]	@ (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d1f0      	bne.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f003 0301 	and.w	r3, r3, #1
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d009      	beq.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	019a      	lsls	r2, r3, #6
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	071b      	lsls	r3, r3, #28
 800aa84:	4981      	ldr	r1, [pc, #516]	@ (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aa86:	4313      	orrs	r3, r2
 800aa88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f003 0302 	and.w	r3, r3, #2
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d01f      	beq.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800aa98:	4b7c      	ldr	r3, [pc, #496]	@ (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aa9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa9e:	0f1b      	lsrs	r3, r3, #28
 800aaa0:	f003 0307 	and.w	r3, r3, #7
 800aaa4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	019a      	lsls	r2, r3, #6
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	68db      	ldr	r3, [r3, #12]
 800aab0:	061b      	lsls	r3, r3, #24
 800aab2:	431a      	orrs	r2, r3
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	071b      	lsls	r3, r3, #28
 800aab8:	4974      	ldr	r1, [pc, #464]	@ (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aaba:	4313      	orrs	r3, r2
 800aabc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800aac0:	4b72      	ldr	r3, [pc, #456]	@ (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aac6:	f023 021f 	bic.w	r2, r3, #31
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	69db      	ldr	r3, [r3, #28]
 800aace:	3b01      	subs	r3, #1
 800aad0:	496e      	ldr	r1, [pc, #440]	@ (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aad2:	4313      	orrs	r3, r2
 800aad4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d00d      	beq.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	019a      	lsls	r2, r3, #6
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	061b      	lsls	r3, r3, #24
 800aaf0:	431a      	orrs	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	071b      	lsls	r3, r3, #28
 800aaf8:	4964      	ldr	r1, [pc, #400]	@ (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aafa:	4313      	orrs	r3, r2
 800aafc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ab00:	4b61      	ldr	r3, [pc, #388]	@ (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800ab02:	2201      	movs	r2, #1
 800ab04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ab06:	f7fa f9a5 	bl	8004e54 <HAL_GetTick>
 800ab0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ab0c:	e008      	b.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ab0e:	f7fa f9a1 	bl	8004e54 <HAL_GetTick>
 800ab12:	4602      	mov	r2, r0
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	1ad3      	subs	r3, r2, r3
 800ab18:	2b02      	cmp	r3, #2
 800ab1a:	d901      	bls.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ab1c:	2303      	movs	r3, #3
 800ab1e:	e129      	b.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ab20:	4b5a      	ldr	r3, [pc, #360]	@ (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d0f0      	beq.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f003 0304 	and.w	r3, r3, #4
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d105      	bne.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d079      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ab44:	4b52      	ldr	r3, [pc, #328]	@ (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800ab46:	2200      	movs	r2, #0
 800ab48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ab4a:	f7fa f983 	bl	8004e54 <HAL_GetTick>
 800ab4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ab50:	e008      	b.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ab52:	f7fa f97f 	bl	8004e54 <HAL_GetTick>
 800ab56:	4602      	mov	r2, r0
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	1ad3      	subs	r3, r2, r3
 800ab5c:	2b02      	cmp	r3, #2
 800ab5e:	d901      	bls.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ab60:	2303      	movs	r3, #3
 800ab62:	e107      	b.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ab64:	4b49      	ldr	r3, [pc, #292]	@ (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab70:	d0ef      	beq.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f003 0304 	and.w	r3, r3, #4
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d020      	beq.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ab7e:	4b43      	ldr	r3, [pc, #268]	@ (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800ab80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab84:	0f1b      	lsrs	r3, r3, #28
 800ab86:	f003 0307 	and.w	r3, r3, #7
 800ab8a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	019a      	lsls	r2, r3, #6
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	695b      	ldr	r3, [r3, #20]
 800ab96:	061b      	lsls	r3, r3, #24
 800ab98:	431a      	orrs	r2, r3
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	071b      	lsls	r3, r3, #28
 800ab9e:	493b      	ldr	r1, [pc, #236]	@ (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aba0:	4313      	orrs	r3, r2
 800aba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800aba6:	4b39      	ldr	r3, [pc, #228]	@ (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abac:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6a1b      	ldr	r3, [r3, #32]
 800abb4:	3b01      	subs	r3, #1
 800abb6:	021b      	lsls	r3, r3, #8
 800abb8:	4934      	ldr	r1, [pc, #208]	@ (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800abba:	4313      	orrs	r3, r2
 800abbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f003 0308 	and.w	r3, r3, #8
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d01e      	beq.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800abcc:	4b2f      	ldr	r3, [pc, #188]	@ (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800abce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abd2:	0e1b      	lsrs	r3, r3, #24
 800abd4:	f003 030f 	and.w	r3, r3, #15
 800abd8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	019a      	lsls	r2, r3, #6
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	061b      	lsls	r3, r3, #24
 800abe4:	431a      	orrs	r2, r3
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	699b      	ldr	r3, [r3, #24]
 800abea:	071b      	lsls	r3, r3, #28
 800abec:	4927      	ldr	r1, [pc, #156]	@ (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800abee:	4313      	orrs	r3, r2
 800abf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800abf4:	4b25      	ldr	r3, [pc, #148]	@ (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800abf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abfa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac02:	4922      	ldr	r1, [pc, #136]	@ (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800ac04:	4313      	orrs	r3, r2
 800ac06:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800ac0a:	4b21      	ldr	r3, [pc, #132]	@ (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ac10:	f7fa f920 	bl	8004e54 <HAL_GetTick>
 800ac14:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ac16:	e008      	b.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ac18:	f7fa f91c 	bl	8004e54 <HAL_GetTick>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	1ad3      	subs	r3, r2, r3
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d901      	bls.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ac26:	2303      	movs	r3, #3
 800ac28:	e0a4      	b.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ac2a:	4b18      	ldr	r3, [pc, #96]	@ (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac36:	d1ef      	bne.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f003 0320 	and.w	r3, r3, #32
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f000 808b 	beq.w	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ac46:	2300      	movs	r3, #0
 800ac48:	60fb      	str	r3, [r7, #12]
 800ac4a:	4b10      	ldr	r3, [pc, #64]	@ (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800ac4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac4e:	4a0f      	ldr	r2, [pc, #60]	@ (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800ac50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac54:	6413      	str	r3, [r2, #64]	@ 0x40
 800ac56:	4b0d      	ldr	r3, [pc, #52]	@ (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800ac58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ac5e:	60fb      	str	r3, [r7, #12]
 800ac60:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800ac62:	4b0c      	ldr	r3, [pc, #48]	@ (800ac94 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4a0b      	ldr	r2, [pc, #44]	@ (800ac94 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800ac68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ac6e:	f7fa f8f1 	bl	8004e54 <HAL_GetTick>
 800ac72:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800ac74:	e010      	b.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac76:	f7fa f8ed 	bl	8004e54 <HAL_GetTick>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	1ad3      	subs	r3, r2, r3
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	d909      	bls.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800ac84:	2303      	movs	r3, #3
 800ac86:	e075      	b.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800ac88:	42470068 	.word	0x42470068
 800ac8c:	40023800 	.word	0x40023800
 800ac90:	42470070 	.word	0x42470070
 800ac94:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800ac98:	4b38      	ldr	r3, [pc, #224]	@ (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d0e8      	beq.n	800ac76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800aca4:	4b36      	ldr	r3, [pc, #216]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800aca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aca8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800acac:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d02f      	beq.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800acbc:	693a      	ldr	r2, [r7, #16]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d028      	beq.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800acc2:	4b2f      	ldr	r3, [pc, #188]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800acc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800acca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800accc:	4b2d      	ldr	r3, [pc, #180]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800acce:	2201      	movs	r2, #1
 800acd0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800acd2:	4b2c      	ldr	r3, [pc, #176]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800acd4:	2200      	movs	r2, #0
 800acd6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800acd8:	4a29      	ldr	r2, [pc, #164]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800acde:	4b28      	ldr	r3, [pc, #160]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ace0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ace2:	f003 0301 	and.w	r3, r3, #1
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	d114      	bne.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800acea:	f7fa f8b3 	bl	8004e54 <HAL_GetTick>
 800acee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800acf0:	e00a      	b.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acf2:	f7fa f8af 	bl	8004e54 <HAL_GetTick>
 800acf6:	4602      	mov	r2, r0
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	1ad3      	subs	r3, r2, r3
 800acfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d901      	bls.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800ad04:	2303      	movs	r3, #3
 800ad06:	e035      	b.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad08:	4b1d      	ldr	r3, [pc, #116]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ad0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad0c:	f003 0302 	and.w	r3, r3, #2
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d0ee      	beq.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad20:	d10d      	bne.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x332>
 800ad22:	4b17      	ldr	r3, [pc, #92]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad2e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ad32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad36:	4912      	ldr	r1, [pc, #72]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	608b      	str	r3, [r1, #8]
 800ad3c:	e005      	b.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800ad3e:	4b10      	ldr	r3, [pc, #64]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	4a0f      	ldr	r2, [pc, #60]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ad44:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800ad48:	6093      	str	r3, [r2, #8]
 800ad4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ad4c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad56:	490a      	ldr	r1, [pc, #40]	@ (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f003 0310 	and.w	r3, r3, #16
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d004      	beq.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800ad6e:	4b06      	ldr	r3, [pc, #24]	@ (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800ad70:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800ad72:	2300      	movs	r3, #0
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3718      	adds	r7, #24
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	40007000 	.word	0x40007000
 800ad80:	40023800 	.word	0x40023800
 800ad84:	42470e40 	.word	0x42470e40
 800ad88:	424711e0 	.word	0x424711e0

0800ad8c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d101      	bne.n	800ada0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	e025      	b.n	800adec <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d106      	bne.n	800adba <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7f7 ff75 	bl	8002ca4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2202      	movs	r2, #2
 800adbe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	3304      	adds	r3, #4
 800adca:	4619      	mov	r1, r3
 800adcc:	4610      	mov	r0, r2
 800adce:	f001 fef7 	bl	800cbc0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6818      	ldr	r0, [r3, #0]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	461a      	mov	r2, r3
 800addc:	6839      	ldr	r1, [r7, #0]
 800adde:	f001 ff4c 	bl	800cc7a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2201      	movs	r2, #1
 800ade6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b086      	sub	sp, #24
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ae06:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800ae08:	7dfb      	ldrb	r3, [r7, #23]
 800ae0a:	2b02      	cmp	r3, #2
 800ae0c:	d101      	bne.n	800ae12 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800ae0e:	2302      	movs	r3, #2
 800ae10:	e021      	b.n	800ae56 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800ae12:	7dfb      	ldrb	r3, [r7, #23]
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d002      	beq.n	800ae1e <HAL_SDRAM_SendCommand+0x2a>
 800ae18:	7dfb      	ldrb	r3, [r7, #23]
 800ae1a:	2b05      	cmp	r3, #5
 800ae1c:	d118      	bne.n	800ae50 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2202      	movs	r2, #2
 800ae22:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	68b9      	ldr	r1, [r7, #8]
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f001 ff8c 	bl	800cd4c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	d104      	bne.n	800ae46 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2205      	movs	r2, #5
 800ae40:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ae44:	e006      	b.n	800ae54 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ae4e:	e001      	b.n	800ae54 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800ae50:	2301      	movs	r3, #1
 800ae52:	e000      	b.n	800ae56 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3718      	adds	r7, #24
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b082      	sub	sp, #8
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	d101      	bne.n	800ae78 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800ae74:	2302      	movs	r3, #2
 800ae76:	e016      	b.n	800aea6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d10f      	bne.n	800aea4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2202      	movs	r2, #2
 800ae88:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	6839      	ldr	r1, [r7, #0]
 800ae92:	4618      	mov	r0, r3
 800ae94:	f001 ff97 	bl	800cdc6 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800aea0:	2300      	movs	r3, #0
 800aea2:	e000      	b.n	800aea6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800aea4:	2301      	movs	r3, #1
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3708      	adds	r7, #8
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b082      	sub	sp, #8
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d101      	bne.n	800aec0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	e07b      	b.n	800afb8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d108      	bne.n	800aeda <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aed0:	d009      	beq.n	800aee6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	61da      	str	r2, [r3, #28]
 800aed8:	e005      	b.n	800aee6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d106      	bne.n	800af06 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7f7 fd49 	bl	8002998 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2202      	movs	r2, #2
 800af0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800af1c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800af2e:	431a      	orrs	r2, r3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	68db      	ldr	r3, [r3, #12]
 800af34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af38:	431a      	orrs	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	691b      	ldr	r3, [r3, #16]
 800af3e:	f003 0302 	and.w	r3, r3, #2
 800af42:	431a      	orrs	r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	f003 0301 	and.w	r3, r3, #1
 800af4c:	431a      	orrs	r2, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	699b      	ldr	r3, [r3, #24]
 800af52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af56:	431a      	orrs	r2, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	69db      	ldr	r3, [r3, #28]
 800af5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800af60:	431a      	orrs	r2, r3
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6a1b      	ldr	r3, [r3, #32]
 800af66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af6a:	ea42 0103 	orr.w	r1, r2, r3
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af72:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	430a      	orrs	r2, r1
 800af7c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	0c1b      	lsrs	r3, r3, #16
 800af84:	f003 0104 	and.w	r1, r3, #4
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af8c:	f003 0210 	and.w	r2, r3, #16
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	430a      	orrs	r2, r1
 800af96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	69da      	ldr	r2, [r3, #28]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800afa6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2200      	movs	r2, #0
 800afac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2201      	movs	r2, #1
 800afb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800afb6:	2300      	movs	r3, #0
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3708      	adds	r7, #8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d101      	bne.n	800afd2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	e01a      	b.n	800b008 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2202      	movs	r2, #2
 800afd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	681a      	ldr	r2, [r3, #0]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800afe8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f7f7 fd1c 	bl	8002a28 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3708      	adds	r7, #8
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b088      	sub	sp, #32
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	603b      	str	r3, [r7, #0]
 800b01c:	4613      	mov	r3, r2
 800b01e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b020:	f7f9 ff18 	bl	8004e54 <HAL_GetTick>
 800b024:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800b026:	88fb      	ldrh	r3, [r7, #6]
 800b028:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b030:	b2db      	uxtb	r3, r3
 800b032:	2b01      	cmp	r3, #1
 800b034:	d001      	beq.n	800b03a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800b036:	2302      	movs	r3, #2
 800b038:	e12a      	b.n	800b290 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d002      	beq.n	800b046 <HAL_SPI_Transmit+0x36>
 800b040:	88fb      	ldrh	r3, [r7, #6]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d101      	bne.n	800b04a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800b046:	2301      	movs	r3, #1
 800b048:	e122      	b.n	800b290 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b050:	2b01      	cmp	r3, #1
 800b052:	d101      	bne.n	800b058 <HAL_SPI_Transmit+0x48>
 800b054:	2302      	movs	r3, #2
 800b056:	e11b      	b.n	800b290 <HAL_SPI_Transmit+0x280>
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2201      	movs	r2, #1
 800b05c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2203      	movs	r2, #3
 800b064:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2200      	movs	r2, #0
 800b06c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	68ba      	ldr	r2, [r7, #8]
 800b072:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	88fa      	ldrh	r2, [r7, #6]
 800b078:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	88fa      	ldrh	r2, [r7, #6]
 800b07e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2200      	movs	r2, #0
 800b08a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2200      	movs	r2, #0
 800b090:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2200      	movs	r2, #0
 800b096:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2200      	movs	r2, #0
 800b09c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	689b      	ldr	r3, [r3, #8]
 800b0a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b0a6:	d10f      	bne.n	800b0c8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b0b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b0c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0d2:	2b40      	cmp	r3, #64	@ 0x40
 800b0d4:	d007      	beq.n	800b0e6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b0e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0ee:	d152      	bne.n	800b196 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d002      	beq.n	800b0fe <HAL_SPI_Transmit+0xee>
 800b0f8:	8b7b      	ldrh	r3, [r7, #26]
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d145      	bne.n	800b18a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b102:	881a      	ldrh	r2, [r3, #0]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b10e:	1c9a      	adds	r2, r3, #2
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b118:	b29b      	uxth	r3, r3
 800b11a:	3b01      	subs	r3, #1
 800b11c:	b29a      	uxth	r2, r3
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b122:	e032      	b.n	800b18a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	689b      	ldr	r3, [r3, #8]
 800b12a:	f003 0302 	and.w	r3, r3, #2
 800b12e:	2b02      	cmp	r3, #2
 800b130:	d112      	bne.n	800b158 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b136:	881a      	ldrh	r2, [r3, #0]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b142:	1c9a      	adds	r2, r3, #2
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	3b01      	subs	r3, #1
 800b150:	b29a      	uxth	r2, r3
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b156:	e018      	b.n	800b18a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b158:	f7f9 fe7c 	bl	8004e54 <HAL_GetTick>
 800b15c:	4602      	mov	r2, r0
 800b15e:	69fb      	ldr	r3, [r7, #28]
 800b160:	1ad3      	subs	r3, r2, r3
 800b162:	683a      	ldr	r2, [r7, #0]
 800b164:	429a      	cmp	r2, r3
 800b166:	d803      	bhi.n	800b170 <HAL_SPI_Transmit+0x160>
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b16e:	d102      	bne.n	800b176 <HAL_SPI_Transmit+0x166>
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d109      	bne.n	800b18a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2201      	movs	r2, #1
 800b17a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2200      	movs	r2, #0
 800b182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b186:	2303      	movs	r3, #3
 800b188:	e082      	b.n	800b290 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b18e:	b29b      	uxth	r3, r3
 800b190:	2b00      	cmp	r3, #0
 800b192:	d1c7      	bne.n	800b124 <HAL_SPI_Transmit+0x114>
 800b194:	e053      	b.n	800b23e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d002      	beq.n	800b1a4 <HAL_SPI_Transmit+0x194>
 800b19e:	8b7b      	ldrh	r3, [r7, #26]
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d147      	bne.n	800b234 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	330c      	adds	r3, #12
 800b1ae:	7812      	ldrb	r2, [r2, #0]
 800b1b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1b6:	1c5a      	adds	r2, r3, #1
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	3b01      	subs	r3, #1
 800b1c4:	b29a      	uxth	r2, r3
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b1ca:	e033      	b.n	800b234 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	f003 0302 	and.w	r3, r3, #2
 800b1d6:	2b02      	cmp	r3, #2
 800b1d8:	d113      	bne.n	800b202 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	330c      	adds	r3, #12
 800b1e4:	7812      	ldrb	r2, [r2, #0]
 800b1e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1ec:	1c5a      	adds	r2, r3, #1
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	3b01      	subs	r3, #1
 800b1fa:	b29a      	uxth	r2, r3
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b200:	e018      	b.n	800b234 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b202:	f7f9 fe27 	bl	8004e54 <HAL_GetTick>
 800b206:	4602      	mov	r2, r0
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	1ad3      	subs	r3, r2, r3
 800b20c:	683a      	ldr	r2, [r7, #0]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d803      	bhi.n	800b21a <HAL_SPI_Transmit+0x20a>
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b218:	d102      	bne.n	800b220 <HAL_SPI_Transmit+0x210>
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d109      	bne.n	800b234 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2201      	movs	r2, #1
 800b224:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b230:	2303      	movs	r3, #3
 800b232:	e02d      	b.n	800b290 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b238:	b29b      	uxth	r3, r3
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1c6      	bne.n	800b1cc <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b23e:	69fa      	ldr	r2, [r7, #28]
 800b240:	6839      	ldr	r1, [r7, #0]
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f000 fbe6 	bl	800ba14 <SPI_EndRxTxTransaction>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d002      	beq.n	800b254 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2220      	movs	r2, #32
 800b252:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d10a      	bne.n	800b272 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b25c:	2300      	movs	r3, #0
 800b25e:	617b      	str	r3, [r7, #20]
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	68db      	ldr	r3, [r3, #12]
 800b266:	617b      	str	r3, [r7, #20]
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	689b      	ldr	r3, [r3, #8]
 800b26e:	617b      	str	r3, [r7, #20]
 800b270:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2201      	movs	r2, #1
 800b276:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b286:	2b00      	cmp	r3, #0
 800b288:	d001      	beq.n	800b28e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800b28a:	2301      	movs	r3, #1
 800b28c:	e000      	b.n	800b290 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800b28e:	2300      	movs	r3, #0
  }
}
 800b290:	4618      	mov	r0, r3
 800b292:	3720      	adds	r7, #32
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b088      	sub	sp, #32
 800b29c:	af02      	add	r7, sp, #8
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	603b      	str	r3, [r7, #0]
 800b2a4:	4613      	mov	r3, r2
 800b2a6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d001      	beq.n	800b2b8 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800b2b4:	2302      	movs	r3, #2
 800b2b6:	e104      	b.n	800b4c2 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b2c0:	d112      	bne.n	800b2e8 <HAL_SPI_Receive+0x50>
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10e      	bne.n	800b2e8 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2204      	movs	r2, #4
 800b2ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b2d2:	88fa      	ldrh	r2, [r7, #6]
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	9300      	str	r3, [sp, #0]
 800b2d8:	4613      	mov	r3, r2
 800b2da:	68ba      	ldr	r2, [r7, #8]
 800b2dc:	68b9      	ldr	r1, [r7, #8]
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	f000 f8f3 	bl	800b4ca <HAL_SPI_TransmitReceive>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	e0ec      	b.n	800b4c2 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b2e8:	f7f9 fdb4 	bl	8004e54 <HAL_GetTick>
 800b2ec:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d002      	beq.n	800b2fa <HAL_SPI_Receive+0x62>
 800b2f4:	88fb      	ldrh	r3, [r7, #6]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d101      	bne.n	800b2fe <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	e0e1      	b.n	800b4c2 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b304:	2b01      	cmp	r3, #1
 800b306:	d101      	bne.n	800b30c <HAL_SPI_Receive+0x74>
 800b308:	2302      	movs	r3, #2
 800b30a:	e0da      	b.n	800b4c2 <HAL_SPI_Receive+0x22a>
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2201      	movs	r2, #1
 800b310:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2204      	movs	r2, #4
 800b318:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2200      	movs	r2, #0
 800b320:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	68ba      	ldr	r2, [r7, #8]
 800b326:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	88fa      	ldrh	r2, [r7, #6]
 800b32c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	88fa      	ldrh	r2, [r7, #6]
 800b332:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2200      	movs	r2, #0
 800b338:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2200      	movs	r2, #0
 800b33e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2200      	movs	r2, #0
 800b344:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2200      	movs	r2, #0
 800b34a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2200      	movs	r2, #0
 800b350:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b35a:	d10f      	bne.n	800b37c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b36a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b37a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b386:	2b40      	cmp	r3, #64	@ 0x40
 800b388:	d007      	beq.n	800b39a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b398:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d170      	bne.n	800b484 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b3a2:	e035      	b.n	800b410 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	689b      	ldr	r3, [r3, #8]
 800b3aa:	f003 0301 	and.w	r3, r3, #1
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d115      	bne.n	800b3de <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f103 020c 	add.w	r2, r3, #12
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3be:	7812      	ldrb	r2, [r2, #0]
 800b3c0:	b2d2      	uxtb	r2, r2
 800b3c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3c8:	1c5a      	adds	r2, r3, #1
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	3b01      	subs	r3, #1
 800b3d6:	b29a      	uxth	r2, r3
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b3dc:	e018      	b.n	800b410 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b3de:	f7f9 fd39 	bl	8004e54 <HAL_GetTick>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	1ad3      	subs	r3, r2, r3
 800b3e8:	683a      	ldr	r2, [r7, #0]
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d803      	bhi.n	800b3f6 <HAL_SPI_Receive+0x15e>
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f4:	d102      	bne.n	800b3fc <HAL_SPI_Receive+0x164>
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d109      	bne.n	800b410 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2201      	movs	r2, #1
 800b400:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2200      	movs	r2, #0
 800b408:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b40c:	2303      	movs	r3, #3
 800b40e:	e058      	b.n	800b4c2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b414:	b29b      	uxth	r3, r3
 800b416:	2b00      	cmp	r3, #0
 800b418:	d1c4      	bne.n	800b3a4 <HAL_SPI_Receive+0x10c>
 800b41a:	e038      	b.n	800b48e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	689b      	ldr	r3, [r3, #8]
 800b422:	f003 0301 	and.w	r3, r3, #1
 800b426:	2b01      	cmp	r3, #1
 800b428:	d113      	bne.n	800b452 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	68da      	ldr	r2, [r3, #12]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b434:	b292      	uxth	r2, r2
 800b436:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b43c:	1c9a      	adds	r2, r3, #2
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b446:	b29b      	uxth	r3, r3
 800b448:	3b01      	subs	r3, #1
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b450:	e018      	b.n	800b484 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b452:	f7f9 fcff 	bl	8004e54 <HAL_GetTick>
 800b456:	4602      	mov	r2, r0
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	1ad3      	subs	r3, r2, r3
 800b45c:	683a      	ldr	r2, [r7, #0]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d803      	bhi.n	800b46a <HAL_SPI_Receive+0x1d2>
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b468:	d102      	bne.n	800b470 <HAL_SPI_Receive+0x1d8>
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d109      	bne.n	800b484 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2201      	movs	r2, #1
 800b474:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b480:	2303      	movs	r3, #3
 800b482:	e01e      	b.n	800b4c2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b488:	b29b      	uxth	r3, r3
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d1c6      	bne.n	800b41c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b48e:	697a      	ldr	r2, [r7, #20]
 800b490:	6839      	ldr	r1, [r7, #0]
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	f000 fa58 	bl	800b948 <SPI_EndRxTransaction>
 800b498:	4603      	mov	r3, r0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d002      	beq.n	800b4a4 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2220      	movs	r2, #32
 800b4a2:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d001      	beq.n	800b4c0 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e000      	b.n	800b4c2 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800b4c0:	2300      	movs	r3, #0
  }
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3718      	adds	r7, #24
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b08a      	sub	sp, #40	@ 0x28
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	60f8      	str	r0, [r7, #12]
 800b4d2:	60b9      	str	r1, [r7, #8]
 800b4d4:	607a      	str	r2, [r7, #4]
 800b4d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b4dc:	f7f9 fcba 	bl	8004e54 <HAL_GetTick>
 800b4e0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b4e8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b4f0:	887b      	ldrh	r3, [r7, #2]
 800b4f2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b4f4:	7ffb      	ldrb	r3, [r7, #31]
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d00c      	beq.n	800b514 <HAL_SPI_TransmitReceive+0x4a>
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b500:	d106      	bne.n	800b510 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d102      	bne.n	800b510 <HAL_SPI_TransmitReceive+0x46>
 800b50a:	7ffb      	ldrb	r3, [r7, #31]
 800b50c:	2b04      	cmp	r3, #4
 800b50e:	d001      	beq.n	800b514 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800b510:	2302      	movs	r3, #2
 800b512:	e17f      	b.n	800b814 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d005      	beq.n	800b526 <HAL_SPI_TransmitReceive+0x5c>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d002      	beq.n	800b526 <HAL_SPI_TransmitReceive+0x5c>
 800b520:	887b      	ldrh	r3, [r7, #2]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d101      	bne.n	800b52a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800b526:	2301      	movs	r3, #1
 800b528:	e174      	b.n	800b814 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b530:	2b01      	cmp	r3, #1
 800b532:	d101      	bne.n	800b538 <HAL_SPI_TransmitReceive+0x6e>
 800b534:	2302      	movs	r3, #2
 800b536:	e16d      	b.n	800b814 <HAL_SPI_TransmitReceive+0x34a>
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2201      	movs	r2, #1
 800b53c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b546:	b2db      	uxtb	r3, r3
 800b548:	2b04      	cmp	r3, #4
 800b54a:	d003      	beq.n	800b554 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2205      	movs	r2, #5
 800b550:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2200      	movs	r2, #0
 800b558:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	887a      	ldrh	r2, [r7, #2]
 800b564:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	887a      	ldrh	r2, [r7, #2]
 800b56a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	68ba      	ldr	r2, [r7, #8]
 800b570:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	887a      	ldrh	r2, [r7, #2]
 800b576:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	887a      	ldrh	r2, [r7, #2]
 800b57c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2200      	movs	r2, #0
 800b582:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2200      	movs	r2, #0
 800b588:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b594:	2b40      	cmp	r3, #64	@ 0x40
 800b596:	d007      	beq.n	800b5a8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b5a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	68db      	ldr	r3, [r3, #12]
 800b5ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b5b0:	d17e      	bne.n	800b6b0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d002      	beq.n	800b5c0 <HAL_SPI_TransmitReceive+0xf6>
 800b5ba:	8afb      	ldrh	r3, [r7, #22]
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d16c      	bne.n	800b69a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5c4:	881a      	ldrh	r2, [r3, #0]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5d0:	1c9a      	adds	r2, r3, #2
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b5e4:	e059      	b.n	800b69a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	f003 0302 	and.w	r3, r3, #2
 800b5f0:	2b02      	cmp	r3, #2
 800b5f2:	d11b      	bne.n	800b62c <HAL_SPI_TransmitReceive+0x162>
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d016      	beq.n	800b62c <HAL_SPI_TransmitReceive+0x162>
 800b5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b600:	2b01      	cmp	r3, #1
 800b602:	d113      	bne.n	800b62c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b608:	881a      	ldrh	r2, [r3, #0]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b614:	1c9a      	adds	r2, r3, #2
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b61e:	b29b      	uxth	r3, r3
 800b620:	3b01      	subs	r3, #1
 800b622:	b29a      	uxth	r2, r3
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b628:	2300      	movs	r3, #0
 800b62a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	f003 0301 	and.w	r3, r3, #1
 800b636:	2b01      	cmp	r3, #1
 800b638:	d119      	bne.n	800b66e <HAL_SPI_TransmitReceive+0x1a4>
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b63e:	b29b      	uxth	r3, r3
 800b640:	2b00      	cmp	r3, #0
 800b642:	d014      	beq.n	800b66e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	68da      	ldr	r2, [r3, #12]
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b64e:	b292      	uxth	r2, r2
 800b650:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b656:	1c9a      	adds	r2, r3, #2
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b660:	b29b      	uxth	r3, r3
 800b662:	3b01      	subs	r3, #1
 800b664:	b29a      	uxth	r2, r3
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b66a:	2301      	movs	r3, #1
 800b66c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b66e:	f7f9 fbf1 	bl	8004e54 <HAL_GetTick>
 800b672:	4602      	mov	r2, r0
 800b674:	6a3b      	ldr	r3, [r7, #32]
 800b676:	1ad3      	subs	r3, r2, r3
 800b678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d80d      	bhi.n	800b69a <HAL_SPI_TransmitReceive+0x1d0>
 800b67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b684:	d009      	beq.n	800b69a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2201      	movs	r2, #1
 800b68a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2200      	movs	r2, #0
 800b692:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800b696:	2303      	movs	r3, #3
 800b698:	e0bc      	b.n	800b814 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1a0      	bne.n	800b5e6 <HAL_SPI_TransmitReceive+0x11c>
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d19b      	bne.n	800b5e6 <HAL_SPI_TransmitReceive+0x11c>
 800b6ae:	e082      	b.n	800b7b6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d002      	beq.n	800b6be <HAL_SPI_TransmitReceive+0x1f4>
 800b6b8:	8afb      	ldrh	r3, [r7, #22]
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d171      	bne.n	800b7a2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	330c      	adds	r3, #12
 800b6c8:	7812      	ldrb	r2, [r2, #0]
 800b6ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6d0:	1c5a      	adds	r2, r3, #1
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b6da:	b29b      	uxth	r3, r3
 800b6dc:	3b01      	subs	r3, #1
 800b6de:	b29a      	uxth	r2, r3
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b6e4:	e05d      	b.n	800b7a2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	689b      	ldr	r3, [r3, #8]
 800b6ec:	f003 0302 	and.w	r3, r3, #2
 800b6f0:	2b02      	cmp	r3, #2
 800b6f2:	d11c      	bne.n	800b72e <HAL_SPI_TransmitReceive+0x264>
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d017      	beq.n	800b72e <HAL_SPI_TransmitReceive+0x264>
 800b6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b700:	2b01      	cmp	r3, #1
 800b702:	d114      	bne.n	800b72e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	330c      	adds	r3, #12
 800b70e:	7812      	ldrb	r2, [r2, #0]
 800b710:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b716:	1c5a      	adds	r2, r3, #1
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b720:	b29b      	uxth	r3, r3
 800b722:	3b01      	subs	r3, #1
 800b724:	b29a      	uxth	r2, r3
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b72a:	2300      	movs	r3, #0
 800b72c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	689b      	ldr	r3, [r3, #8]
 800b734:	f003 0301 	and.w	r3, r3, #1
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d119      	bne.n	800b770 <HAL_SPI_TransmitReceive+0x2a6>
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b740:	b29b      	uxth	r3, r3
 800b742:	2b00      	cmp	r3, #0
 800b744:	d014      	beq.n	800b770 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	68da      	ldr	r2, [r3, #12]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b750:	b2d2      	uxtb	r2, r2
 800b752:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b758:	1c5a      	adds	r2, r3, #1
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b762:	b29b      	uxth	r3, r3
 800b764:	3b01      	subs	r3, #1
 800b766:	b29a      	uxth	r2, r3
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b76c:	2301      	movs	r3, #1
 800b76e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b770:	f7f9 fb70 	bl	8004e54 <HAL_GetTick>
 800b774:	4602      	mov	r2, r0
 800b776:	6a3b      	ldr	r3, [r7, #32]
 800b778:	1ad3      	subs	r3, r2, r3
 800b77a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d803      	bhi.n	800b788 <HAL_SPI_TransmitReceive+0x2be>
 800b780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b782:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b786:	d102      	bne.n	800b78e <HAL_SPI_TransmitReceive+0x2c4>
 800b788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d109      	bne.n	800b7a2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2201      	movs	r2, #1
 800b792:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2200      	movs	r2, #0
 800b79a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800b79e:	2303      	movs	r3, #3
 800b7a0:	e038      	b.n	800b814 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d19c      	bne.n	800b6e6 <HAL_SPI_TransmitReceive+0x21c>
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d197      	bne.n	800b6e6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b7b6:	6a3a      	ldr	r2, [r7, #32]
 800b7b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	f000 f92a 	bl	800ba14 <SPI_EndRxTxTransaction>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d008      	beq.n	800b7d8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2220      	movs	r2, #32
 800b7ca:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	e01d      	b.n	800b814 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d10a      	bne.n	800b7f6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	613b      	str	r3, [r7, #16]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	68db      	ldr	r3, [r3, #12]
 800b7ea:	613b      	str	r3, [r7, #16]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	613b      	str	r3, [r7, #16]
 800b7f4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2200      	movs	r2, #0
 800b802:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d001      	beq.n	800b812 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800b80e:	2301      	movs	r3, #1
 800b810:	e000      	b.n	800b814 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800b812:	2300      	movs	r3, #0
  }
}
 800b814:	4618      	mov	r0, r3
 800b816:	3728      	adds	r7, #40	@ 0x28
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b82a:	b2db      	uxtb	r3, r3
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b088      	sub	sp, #32
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	603b      	str	r3, [r7, #0]
 800b844:	4613      	mov	r3, r2
 800b846:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b848:	f7f9 fb04 	bl	8004e54 <HAL_GetTick>
 800b84c:	4602      	mov	r2, r0
 800b84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b850:	1a9b      	subs	r3, r3, r2
 800b852:	683a      	ldr	r2, [r7, #0]
 800b854:	4413      	add	r3, r2
 800b856:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b858:	f7f9 fafc 	bl	8004e54 <HAL_GetTick>
 800b85c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b85e:	4b39      	ldr	r3, [pc, #228]	@ (800b944 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	015b      	lsls	r3, r3, #5
 800b864:	0d1b      	lsrs	r3, r3, #20
 800b866:	69fa      	ldr	r2, [r7, #28]
 800b868:	fb02 f303 	mul.w	r3, r2, r3
 800b86c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b86e:	e054      	b.n	800b91a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b876:	d050      	beq.n	800b91a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b878:	f7f9 faec 	bl	8004e54 <HAL_GetTick>
 800b87c:	4602      	mov	r2, r0
 800b87e:	69bb      	ldr	r3, [r7, #24]
 800b880:	1ad3      	subs	r3, r2, r3
 800b882:	69fa      	ldr	r2, [r7, #28]
 800b884:	429a      	cmp	r2, r3
 800b886:	d902      	bls.n	800b88e <SPI_WaitFlagStateUntilTimeout+0x56>
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d13d      	bne.n	800b90a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	685a      	ldr	r2, [r3, #4]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b89c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b8a6:	d111      	bne.n	800b8cc <SPI_WaitFlagStateUntilTimeout+0x94>
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b8b0:	d004      	beq.n	800b8bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b8ba:	d107      	bne.n	800b8cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b8ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b8d4:	d10f      	bne.n	800b8f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b8e4:	601a      	str	r2, [r3, #0]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b8f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2200      	movs	r2, #0
 800b902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800b906:	2303      	movs	r3, #3
 800b908:	e017      	b.n	800b93a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d101      	bne.n	800b914 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b910:	2300      	movs	r3, #0
 800b912:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	3b01      	subs	r3, #1
 800b918:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	689a      	ldr	r2, [r3, #8]
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	4013      	ands	r3, r2
 800b924:	68ba      	ldr	r2, [r7, #8]
 800b926:	429a      	cmp	r2, r3
 800b928:	bf0c      	ite	eq
 800b92a:	2301      	moveq	r3, #1
 800b92c:	2300      	movne	r3, #0
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	461a      	mov	r2, r3
 800b932:	79fb      	ldrb	r3, [r7, #7]
 800b934:	429a      	cmp	r2, r3
 800b936:	d19b      	bne.n	800b870 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b938:	2300      	movs	r3, #0
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3720      	adds	r7, #32
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	20000164 	.word	0x20000164

0800b948 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b086      	sub	sp, #24
 800b94c:	af02      	add	r7, sp, #8
 800b94e:	60f8      	str	r0, [r7, #12]
 800b950:	60b9      	str	r1, [r7, #8]
 800b952:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b95c:	d111      	bne.n	800b982 <SPI_EndRxTransaction+0x3a>
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b966:	d004      	beq.n	800b972 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b970:	d107      	bne.n	800b982 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b980:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b98a:	d12a      	bne.n	800b9e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	689b      	ldr	r3, [r3, #8]
 800b990:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b994:	d012      	beq.n	800b9bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	9300      	str	r3, [sp, #0]
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	2200      	movs	r2, #0
 800b99e:	2180      	movs	r1, #128	@ 0x80
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f7ff ff49 	bl	800b838 <SPI_WaitFlagStateUntilTimeout>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d02d      	beq.n	800ba08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9b0:	f043 0220 	orr.w	r2, r3, #32
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800b9b8:	2303      	movs	r3, #3
 800b9ba:	e026      	b.n	800ba0a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	2101      	movs	r1, #1
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f7ff ff36 	bl	800b838 <SPI_WaitFlagStateUntilTimeout>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d01a      	beq.n	800ba08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9d6:	f043 0220 	orr.w	r2, r3, #32
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800b9de:	2303      	movs	r3, #3
 800b9e0:	e013      	b.n	800ba0a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	9300      	str	r3, [sp, #0]
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	2101      	movs	r1, #1
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	f7ff ff23 	bl	800b838 <SPI_WaitFlagStateUntilTimeout>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d007      	beq.n	800ba08 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9fc:	f043 0220 	orr.w	r2, r3, #32
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800ba04:	2303      	movs	r3, #3
 800ba06:	e000      	b.n	800ba0a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3710      	adds	r7, #16
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
	...

0800ba14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b088      	sub	sp, #32
 800ba18:	af02      	add	r7, sp, #8
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	60b9      	str	r1, [r7, #8]
 800ba1e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	9300      	str	r3, [sp, #0]
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	2201      	movs	r2, #1
 800ba28:	2102      	movs	r1, #2
 800ba2a:	68f8      	ldr	r0, [r7, #12]
 800ba2c:	f7ff ff04 	bl	800b838 <SPI_WaitFlagStateUntilTimeout>
 800ba30:	4603      	mov	r3, r0
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d007      	beq.n	800ba46 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba3a:	f043 0220 	orr.w	r2, r3, #32
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800ba42:	2303      	movs	r3, #3
 800ba44:	e032      	b.n	800baac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ba46:	4b1b      	ldr	r3, [pc, #108]	@ (800bab4 <SPI_EndRxTxTransaction+0xa0>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a1b      	ldr	r2, [pc, #108]	@ (800bab8 <SPI_EndRxTxTransaction+0xa4>)
 800ba4c:	fba2 2303 	umull	r2, r3, r2, r3
 800ba50:	0d5b      	lsrs	r3, r3, #21
 800ba52:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ba56:	fb02 f303 	mul.w	r3, r2, r3
 800ba5a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ba64:	d112      	bne.n	800ba8c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	9300      	str	r3, [sp, #0]
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	2180      	movs	r1, #128	@ 0x80
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f7ff fee1 	bl	800b838 <SPI_WaitFlagStateUntilTimeout>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d016      	beq.n	800baaa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba80:	f043 0220 	orr.w	r2, r3, #32
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800ba88:	2303      	movs	r3, #3
 800ba8a:	e00f      	b.n	800baac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d00a      	beq.n	800baa8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	3b01      	subs	r3, #1
 800ba96:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800baa2:	2b80      	cmp	r3, #128	@ 0x80
 800baa4:	d0f2      	beq.n	800ba8c <SPI_EndRxTxTransaction+0x78>
 800baa6:	e000      	b.n	800baaa <SPI_EndRxTxTransaction+0x96>
        break;
 800baa8:	bf00      	nop
  }

  return HAL_OK;
 800baaa:	2300      	movs	r3, #0
}
 800baac:	4618      	mov	r0, r3
 800baae:	3718      	adds	r7, #24
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	20000164 	.word	0x20000164
 800bab8:	165e9f81 	.word	0x165e9f81

0800babc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d101      	bne.n	800bace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800baca:	2301      	movs	r3, #1
 800bacc:	e041      	b.n	800bb52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d106      	bne.n	800bae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2200      	movs	r2, #0
 800bade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f7f6 ffbe 	bl	8002a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2202      	movs	r2, #2
 800baec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	3304      	adds	r3, #4
 800baf8:	4619      	mov	r1, r3
 800bafa:	4610      	mov	r0, r2
 800bafc:	f000 fa7e 	bl	800bffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2201      	movs	r2, #1
 800bb14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2201      	movs	r2, #1
 800bb24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2201      	movs	r2, #1
 800bb44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bb50:	2300      	movs	r3, #0
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3708      	adds	r7, #8
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
	...

0800bb5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b085      	sub	sp, #20
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb6a:	b2db      	uxtb	r3, r3
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	d001      	beq.n	800bb74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bb70:	2301      	movs	r3, #1
 800bb72:	e04e      	b.n	800bc12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2202      	movs	r2, #2
 800bb78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	68da      	ldr	r2, [r3, #12]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f042 0201 	orr.w	r2, r2, #1
 800bb8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a23      	ldr	r2, [pc, #140]	@ (800bc20 <HAL_TIM_Base_Start_IT+0xc4>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d022      	beq.n	800bbdc <HAL_TIM_Base_Start_IT+0x80>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb9e:	d01d      	beq.n	800bbdc <HAL_TIM_Base_Start_IT+0x80>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4a1f      	ldr	r2, [pc, #124]	@ (800bc24 <HAL_TIM_Base_Start_IT+0xc8>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d018      	beq.n	800bbdc <HAL_TIM_Base_Start_IT+0x80>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4a1e      	ldr	r2, [pc, #120]	@ (800bc28 <HAL_TIM_Base_Start_IT+0xcc>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d013      	beq.n	800bbdc <HAL_TIM_Base_Start_IT+0x80>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4a1c      	ldr	r2, [pc, #112]	@ (800bc2c <HAL_TIM_Base_Start_IT+0xd0>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d00e      	beq.n	800bbdc <HAL_TIM_Base_Start_IT+0x80>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a1b      	ldr	r2, [pc, #108]	@ (800bc30 <HAL_TIM_Base_Start_IT+0xd4>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d009      	beq.n	800bbdc <HAL_TIM_Base_Start_IT+0x80>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a19      	ldr	r2, [pc, #100]	@ (800bc34 <HAL_TIM_Base_Start_IT+0xd8>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d004      	beq.n	800bbdc <HAL_TIM_Base_Start_IT+0x80>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4a18      	ldr	r2, [pc, #96]	@ (800bc38 <HAL_TIM_Base_Start_IT+0xdc>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d111      	bne.n	800bc00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	689b      	ldr	r3, [r3, #8]
 800bbe2:	f003 0307 	and.w	r3, r3, #7
 800bbe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2b06      	cmp	r3, #6
 800bbec:	d010      	beq.n	800bc10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	681a      	ldr	r2, [r3, #0]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f042 0201 	orr.w	r2, r2, #1
 800bbfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbfe:	e007      	b.n	800bc10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f042 0201 	orr.w	r2, r2, #1
 800bc0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3714      	adds	r7, #20
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr
 800bc1e:	bf00      	nop
 800bc20:	40010000 	.word	0x40010000
 800bc24:	40000400 	.word	0x40000400
 800bc28:	40000800 	.word	0x40000800
 800bc2c:	40000c00 	.word	0x40000c00
 800bc30:	40010400 	.word	0x40010400
 800bc34:	40014000 	.word	0x40014000
 800bc38:	40001800 	.word	0x40001800

0800bc3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	691b      	ldr	r3, [r3, #16]
 800bc52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	f003 0302 	and.w	r3, r3, #2
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d020      	beq.n	800bca0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f003 0302 	and.w	r3, r3, #2
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d01b      	beq.n	800bca0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f06f 0202 	mvn.w	r2, #2
 800bc70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2201      	movs	r2, #1
 800bc76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	699b      	ldr	r3, [r3, #24]
 800bc7e:	f003 0303 	and.w	r3, r3, #3
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d003      	beq.n	800bc8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 f999 	bl	800bfbe <HAL_TIM_IC_CaptureCallback>
 800bc8c:	e005      	b.n	800bc9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 f98b 	bl	800bfaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 f99c 	bl	800bfd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	f003 0304 	and.w	r3, r3, #4
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d020      	beq.n	800bcec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f003 0304 	and.w	r3, r3, #4
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d01b      	beq.n	800bcec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f06f 0204 	mvn.w	r2, #4
 800bcbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2202      	movs	r2, #2
 800bcc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	699b      	ldr	r3, [r3, #24]
 800bcca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d003      	beq.n	800bcda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 f973 	bl	800bfbe <HAL_TIM_IC_CaptureCallback>
 800bcd8:	e005      	b.n	800bce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 f965 	bl	800bfaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f000 f976 	bl	800bfd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2200      	movs	r2, #0
 800bcea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	f003 0308 	and.w	r3, r3, #8
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d020      	beq.n	800bd38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f003 0308 	and.w	r3, r3, #8
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d01b      	beq.n	800bd38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f06f 0208 	mvn.w	r2, #8
 800bd08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2204      	movs	r2, #4
 800bd0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	69db      	ldr	r3, [r3, #28]
 800bd16:	f003 0303 	and.w	r3, r3, #3
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d003      	beq.n	800bd26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 f94d 	bl	800bfbe <HAL_TIM_IC_CaptureCallback>
 800bd24:	e005      	b.n	800bd32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f000 f93f 	bl	800bfaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 f950 	bl	800bfd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2200      	movs	r2, #0
 800bd36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	f003 0310 	and.w	r3, r3, #16
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d020      	beq.n	800bd84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f003 0310 	and.w	r3, r3, #16
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d01b      	beq.n	800bd84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f06f 0210 	mvn.w	r2, #16
 800bd54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2208      	movs	r2, #8
 800bd5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	69db      	ldr	r3, [r3, #28]
 800bd62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d003      	beq.n	800bd72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 f927 	bl	800bfbe <HAL_TIM_IC_CaptureCallback>
 800bd70:	e005      	b.n	800bd7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 f919 	bl	800bfaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 f92a 	bl	800bfd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2200      	movs	r2, #0
 800bd82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	f003 0301 	and.w	r3, r3, #1
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d00c      	beq.n	800bda8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f003 0301 	and.w	r3, r3, #1
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d007      	beq.n	800bda8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f06f 0201 	mvn.w	r2, #1
 800bda0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f7f6 fb90 	bl	80024c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d00c      	beq.n	800bdcc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d007      	beq.n	800bdcc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800bdc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fae4 	bl	800c394 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d00c      	beq.n	800bdf0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d007      	beq.n	800bdf0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bde8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 f8fb 	bl	800bfe6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	f003 0320 	and.w	r3, r3, #32
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d00c      	beq.n	800be14 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	f003 0320 	and.w	r3, r3, #32
 800be00:	2b00      	cmp	r3, #0
 800be02:	d007      	beq.n	800be14 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f06f 0220 	mvn.w	r2, #32
 800be0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 fab6 	bl	800c380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800be14:	bf00      	nop
 800be16:	3710      	adds	r7, #16
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be26:	2300      	movs	r3, #0
 800be28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be30:	2b01      	cmp	r3, #1
 800be32:	d101      	bne.n	800be38 <HAL_TIM_ConfigClockSource+0x1c>
 800be34:	2302      	movs	r3, #2
 800be36:	e0b4      	b.n	800bfa2 <HAL_TIM_ConfigClockSource+0x186>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2201      	movs	r2, #1
 800be3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2202      	movs	r2, #2
 800be44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	689b      	ldr	r3, [r3, #8]
 800be4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800be56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800be5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	68ba      	ldr	r2, [r7, #8]
 800be66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be70:	d03e      	beq.n	800bef0 <HAL_TIM_ConfigClockSource+0xd4>
 800be72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be76:	f200 8087 	bhi.w	800bf88 <HAL_TIM_ConfigClockSource+0x16c>
 800be7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be7e:	f000 8086 	beq.w	800bf8e <HAL_TIM_ConfigClockSource+0x172>
 800be82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be86:	d87f      	bhi.n	800bf88 <HAL_TIM_ConfigClockSource+0x16c>
 800be88:	2b70      	cmp	r3, #112	@ 0x70
 800be8a:	d01a      	beq.n	800bec2 <HAL_TIM_ConfigClockSource+0xa6>
 800be8c:	2b70      	cmp	r3, #112	@ 0x70
 800be8e:	d87b      	bhi.n	800bf88 <HAL_TIM_ConfigClockSource+0x16c>
 800be90:	2b60      	cmp	r3, #96	@ 0x60
 800be92:	d050      	beq.n	800bf36 <HAL_TIM_ConfigClockSource+0x11a>
 800be94:	2b60      	cmp	r3, #96	@ 0x60
 800be96:	d877      	bhi.n	800bf88 <HAL_TIM_ConfigClockSource+0x16c>
 800be98:	2b50      	cmp	r3, #80	@ 0x50
 800be9a:	d03c      	beq.n	800bf16 <HAL_TIM_ConfigClockSource+0xfa>
 800be9c:	2b50      	cmp	r3, #80	@ 0x50
 800be9e:	d873      	bhi.n	800bf88 <HAL_TIM_ConfigClockSource+0x16c>
 800bea0:	2b40      	cmp	r3, #64	@ 0x40
 800bea2:	d058      	beq.n	800bf56 <HAL_TIM_ConfigClockSource+0x13a>
 800bea4:	2b40      	cmp	r3, #64	@ 0x40
 800bea6:	d86f      	bhi.n	800bf88 <HAL_TIM_ConfigClockSource+0x16c>
 800bea8:	2b30      	cmp	r3, #48	@ 0x30
 800beaa:	d064      	beq.n	800bf76 <HAL_TIM_ConfigClockSource+0x15a>
 800beac:	2b30      	cmp	r3, #48	@ 0x30
 800beae:	d86b      	bhi.n	800bf88 <HAL_TIM_ConfigClockSource+0x16c>
 800beb0:	2b20      	cmp	r3, #32
 800beb2:	d060      	beq.n	800bf76 <HAL_TIM_ConfigClockSource+0x15a>
 800beb4:	2b20      	cmp	r3, #32
 800beb6:	d867      	bhi.n	800bf88 <HAL_TIM_ConfigClockSource+0x16c>
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d05c      	beq.n	800bf76 <HAL_TIM_ConfigClockSource+0x15a>
 800bebc:	2b10      	cmp	r3, #16
 800bebe:	d05a      	beq.n	800bf76 <HAL_TIM_ConfigClockSource+0x15a>
 800bec0:	e062      	b.n	800bf88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bed2:	f000 f9b9 	bl	800c248 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bee4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	68ba      	ldr	r2, [r7, #8]
 800beec:	609a      	str	r2, [r3, #8]
      break;
 800beee:	e04f      	b.n	800bf90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bf00:	f000 f9a2 	bl	800c248 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	689a      	ldr	r2, [r3, #8]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bf12:	609a      	str	r2, [r3, #8]
      break;
 800bf14:	e03c      	b.n	800bf90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf22:	461a      	mov	r2, r3
 800bf24:	f000 f916 	bl	800c154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2150      	movs	r1, #80	@ 0x50
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f000 f96f 	bl	800c212 <TIM_ITRx_SetConfig>
      break;
 800bf34:	e02c      	b.n	800bf90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf42:	461a      	mov	r2, r3
 800bf44:	f000 f935 	bl	800c1b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	2160      	movs	r1, #96	@ 0x60
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f000 f95f 	bl	800c212 <TIM_ITRx_SetConfig>
      break;
 800bf54:	e01c      	b.n	800bf90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf62:	461a      	mov	r2, r3
 800bf64:	f000 f8f6 	bl	800c154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	2140      	movs	r1, #64	@ 0x40
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f000 f94f 	bl	800c212 <TIM_ITRx_SetConfig>
      break;
 800bf74:	e00c      	b.n	800bf90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4619      	mov	r1, r3
 800bf80:	4610      	mov	r0, r2
 800bf82:	f000 f946 	bl	800c212 <TIM_ITRx_SetConfig>
      break;
 800bf86:	e003      	b.n	800bf90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	73fb      	strb	r3, [r7, #15]
      break;
 800bf8c:	e000      	b.n	800bf90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bf8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2201      	movs	r2, #1
 800bf94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bfaa:	b480      	push	{r7}
 800bfac:	b083      	sub	sp, #12
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bfb2:	bf00      	nop
 800bfb4:	370c      	adds	r7, #12
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr

0800bfbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bfbe:	b480      	push	{r7}
 800bfc0:	b083      	sub	sp, #12
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bfc6:	bf00      	nop
 800bfc8:	370c      	adds	r7, #12
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr

0800bfd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bfd2:	b480      	push	{r7}
 800bfd4:	b083      	sub	sp, #12
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bfda:	bf00      	nop
 800bfdc:	370c      	adds	r7, #12
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr

0800bfe6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bfe6:	b480      	push	{r7}
 800bfe8:	b083      	sub	sp, #12
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bfee:	bf00      	nop
 800bff0:	370c      	adds	r7, #12
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr
	...

0800bffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b085      	sub	sp, #20
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	4a46      	ldr	r2, [pc, #280]	@ (800c128 <TIM_Base_SetConfig+0x12c>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d013      	beq.n	800c03c <TIM_Base_SetConfig+0x40>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c01a:	d00f      	beq.n	800c03c <TIM_Base_SetConfig+0x40>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4a43      	ldr	r2, [pc, #268]	@ (800c12c <TIM_Base_SetConfig+0x130>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d00b      	beq.n	800c03c <TIM_Base_SetConfig+0x40>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	4a42      	ldr	r2, [pc, #264]	@ (800c130 <TIM_Base_SetConfig+0x134>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d007      	beq.n	800c03c <TIM_Base_SetConfig+0x40>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4a41      	ldr	r2, [pc, #260]	@ (800c134 <TIM_Base_SetConfig+0x138>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d003      	beq.n	800c03c <TIM_Base_SetConfig+0x40>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	4a40      	ldr	r2, [pc, #256]	@ (800c138 <TIM_Base_SetConfig+0x13c>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d108      	bne.n	800c04e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	68fa      	ldr	r2, [r7, #12]
 800c04a:	4313      	orrs	r3, r2
 800c04c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	4a35      	ldr	r2, [pc, #212]	@ (800c128 <TIM_Base_SetConfig+0x12c>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d02b      	beq.n	800c0ae <TIM_Base_SetConfig+0xb2>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c05c:	d027      	beq.n	800c0ae <TIM_Base_SetConfig+0xb2>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	4a32      	ldr	r2, [pc, #200]	@ (800c12c <TIM_Base_SetConfig+0x130>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d023      	beq.n	800c0ae <TIM_Base_SetConfig+0xb2>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4a31      	ldr	r2, [pc, #196]	@ (800c130 <TIM_Base_SetConfig+0x134>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d01f      	beq.n	800c0ae <TIM_Base_SetConfig+0xb2>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	4a30      	ldr	r2, [pc, #192]	@ (800c134 <TIM_Base_SetConfig+0x138>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d01b      	beq.n	800c0ae <TIM_Base_SetConfig+0xb2>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	4a2f      	ldr	r2, [pc, #188]	@ (800c138 <TIM_Base_SetConfig+0x13c>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d017      	beq.n	800c0ae <TIM_Base_SetConfig+0xb2>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	4a2e      	ldr	r2, [pc, #184]	@ (800c13c <TIM_Base_SetConfig+0x140>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d013      	beq.n	800c0ae <TIM_Base_SetConfig+0xb2>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	4a2d      	ldr	r2, [pc, #180]	@ (800c140 <TIM_Base_SetConfig+0x144>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d00f      	beq.n	800c0ae <TIM_Base_SetConfig+0xb2>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4a2c      	ldr	r2, [pc, #176]	@ (800c144 <TIM_Base_SetConfig+0x148>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d00b      	beq.n	800c0ae <TIM_Base_SetConfig+0xb2>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	4a2b      	ldr	r2, [pc, #172]	@ (800c148 <TIM_Base_SetConfig+0x14c>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d007      	beq.n	800c0ae <TIM_Base_SetConfig+0xb2>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	4a2a      	ldr	r2, [pc, #168]	@ (800c14c <TIM_Base_SetConfig+0x150>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d003      	beq.n	800c0ae <TIM_Base_SetConfig+0xb2>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	4a29      	ldr	r2, [pc, #164]	@ (800c150 <TIM_Base_SetConfig+0x154>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d108      	bne.n	800c0c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c0b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	68db      	ldr	r3, [r3, #12]
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	695b      	ldr	r3, [r3, #20]
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	68fa      	ldr	r2, [r7, #12]
 800c0d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	689a      	ldr	r2, [r3, #8]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	681a      	ldr	r2, [r3, #0]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a10      	ldr	r2, [pc, #64]	@ (800c128 <TIM_Base_SetConfig+0x12c>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d003      	beq.n	800c0f4 <TIM_Base_SetConfig+0xf8>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4a12      	ldr	r2, [pc, #72]	@ (800c138 <TIM_Base_SetConfig+0x13c>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d103      	bne.n	800c0fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	691a      	ldr	r2, [r3, #16]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2201      	movs	r2, #1
 800c100:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	691b      	ldr	r3, [r3, #16]
 800c106:	f003 0301 	and.w	r3, r3, #1
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d105      	bne.n	800c11a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	691b      	ldr	r3, [r3, #16]
 800c112:	f023 0201 	bic.w	r2, r3, #1
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	611a      	str	r2, [r3, #16]
  }
}
 800c11a:	bf00      	nop
 800c11c:	3714      	adds	r7, #20
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr
 800c126:	bf00      	nop
 800c128:	40010000 	.word	0x40010000
 800c12c:	40000400 	.word	0x40000400
 800c130:	40000800 	.word	0x40000800
 800c134:	40000c00 	.word	0x40000c00
 800c138:	40010400 	.word	0x40010400
 800c13c:	40014000 	.word	0x40014000
 800c140:	40014400 	.word	0x40014400
 800c144:	40014800 	.word	0x40014800
 800c148:	40001800 	.word	0x40001800
 800c14c:	40001c00 	.word	0x40001c00
 800c150:	40002000 	.word	0x40002000

0800c154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c154:	b480      	push	{r7}
 800c156:	b087      	sub	sp, #28
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	6a1b      	ldr	r3, [r3, #32]
 800c164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	6a1b      	ldr	r3, [r3, #32]
 800c16a:	f023 0201 	bic.w	r2, r3, #1
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	699b      	ldr	r3, [r3, #24]
 800c176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c17e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	011b      	lsls	r3, r3, #4
 800c184:	693a      	ldr	r2, [r7, #16]
 800c186:	4313      	orrs	r3, r2
 800c188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	f023 030a 	bic.w	r3, r3, #10
 800c190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c192:	697a      	ldr	r2, [r7, #20]
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	4313      	orrs	r3, r2
 800c198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	693a      	ldr	r2, [r7, #16]
 800c19e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	697a      	ldr	r2, [r7, #20]
 800c1a4:	621a      	str	r2, [r3, #32]
}
 800c1a6:	bf00      	nop
 800c1a8:	371c      	adds	r7, #28
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr

0800c1b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c1b2:	b480      	push	{r7}
 800c1b4:	b087      	sub	sp, #28
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	60f8      	str	r0, [r7, #12]
 800c1ba:	60b9      	str	r1, [r7, #8]
 800c1bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	6a1b      	ldr	r3, [r3, #32]
 800c1c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	6a1b      	ldr	r3, [r3, #32]
 800c1c8:	f023 0210 	bic.w	r2, r3, #16
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	699b      	ldr	r3, [r3, #24]
 800c1d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c1dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	031b      	lsls	r3, r3, #12
 800c1e2:	693a      	ldr	r2, [r7, #16]
 800c1e4:	4313      	orrs	r3, r2
 800c1e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c1ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	011b      	lsls	r3, r3, #4
 800c1f4:	697a      	ldr	r2, [r7, #20]
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	693a      	ldr	r2, [r7, #16]
 800c1fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	697a      	ldr	r2, [r7, #20]
 800c204:	621a      	str	r2, [r3, #32]
}
 800c206:	bf00      	nop
 800c208:	371c      	adds	r7, #28
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr

0800c212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c212:	b480      	push	{r7}
 800c214:	b085      	sub	sp, #20
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
 800c21a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	689b      	ldr	r3, [r3, #8]
 800c220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c22a:	683a      	ldr	r2, [r7, #0]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	4313      	orrs	r3, r2
 800c230:	f043 0307 	orr.w	r3, r3, #7
 800c234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	68fa      	ldr	r2, [r7, #12]
 800c23a:	609a      	str	r2, [r3, #8]
}
 800c23c:	bf00      	nop
 800c23e:	3714      	adds	r7, #20
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr

0800c248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c248:	b480      	push	{r7}
 800c24a:	b087      	sub	sp, #28
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	607a      	str	r2, [r7, #4]
 800c254:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c262:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	021a      	lsls	r2, r3, #8
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	431a      	orrs	r2, r3
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	4313      	orrs	r3, r2
 800c270:	697a      	ldr	r2, [r7, #20]
 800c272:	4313      	orrs	r3, r2
 800c274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	697a      	ldr	r2, [r7, #20]
 800c27a:	609a      	str	r2, [r3, #8]
}
 800c27c:	bf00      	nop
 800c27e:	371c      	adds	r7, #28
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr

0800c288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d101      	bne.n	800c2a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c29c:	2302      	movs	r3, #2
 800c29e:	e05a      	b.n	800c356 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2202      	movs	r2, #2
 800c2ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	685b      	ldr	r3, [r3, #4]
 800c2b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	689b      	ldr	r3, [r3, #8]
 800c2be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	68fa      	ldr	r2, [r7, #12]
 800c2d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4a21      	ldr	r2, [pc, #132]	@ (800c364 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d022      	beq.n	800c32a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2ec:	d01d      	beq.n	800c32a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	4a1d      	ldr	r2, [pc, #116]	@ (800c368 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d018      	beq.n	800c32a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4a1b      	ldr	r2, [pc, #108]	@ (800c36c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d013      	beq.n	800c32a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a1a      	ldr	r2, [pc, #104]	@ (800c370 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d00e      	beq.n	800c32a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4a18      	ldr	r2, [pc, #96]	@ (800c374 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d009      	beq.n	800c32a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4a17      	ldr	r2, [pc, #92]	@ (800c378 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d004      	beq.n	800c32a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4a15      	ldr	r2, [pc, #84]	@ (800c37c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d10c      	bne.n	800c344 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c330:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	68ba      	ldr	r2, [r7, #8]
 800c338:	4313      	orrs	r3, r2
 800c33a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	68ba      	ldr	r2, [r7, #8]
 800c342:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2201      	movs	r2, #1
 800c348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2200      	movs	r2, #0
 800c350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c354:	2300      	movs	r3, #0
}
 800c356:	4618      	mov	r0, r3
 800c358:	3714      	adds	r7, #20
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr
 800c362:	bf00      	nop
 800c364:	40010000 	.word	0x40010000
 800c368:	40000400 	.word	0x40000400
 800c36c:	40000800 	.word	0x40000800
 800c370:	40000c00 	.word	0x40000c00
 800c374:	40010400 	.word	0x40010400
 800c378:	40014000 	.word	0x40014000
 800c37c:	40001800 	.word	0x40001800

0800c380 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c388:	bf00      	nop
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c39c:	bf00      	nop
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d101      	bne.n	800c3ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	e042      	b.n	800c440 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d106      	bne.n	800c3d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f7f6 fb8e 	bl	8002af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2224      	movs	r2, #36	@ 0x24
 800c3d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	68da      	ldr	r2, [r3, #12]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c3ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 f973 	bl	800c6d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	691a      	ldr	r2, [r3, #16]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c400:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	695a      	ldr	r2, [r3, #20]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c410:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	68da      	ldr	r2, [r3, #12]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c420:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2200      	movs	r2, #0
 800c426:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2220      	movs	r2, #32
 800c42c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2220      	movs	r2, #32
 800c434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2200      	movs	r2, #0
 800c43c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c43e:	2300      	movs	r3, #0
}
 800c440:	4618      	mov	r0, r3
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b08a      	sub	sp, #40	@ 0x28
 800c44c:	af02      	add	r7, sp, #8
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	603b      	str	r3, [r7, #0]
 800c454:	4613      	mov	r3, r2
 800c456:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c458:	2300      	movs	r3, #0
 800c45a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c462:	b2db      	uxtb	r3, r3
 800c464:	2b20      	cmp	r3, #32
 800c466:	d175      	bne.n	800c554 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d002      	beq.n	800c474 <HAL_UART_Transmit+0x2c>
 800c46e:	88fb      	ldrh	r3, [r7, #6]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d101      	bne.n	800c478 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c474:	2301      	movs	r3, #1
 800c476:	e06e      	b.n	800c556 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2200      	movs	r2, #0
 800c47c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2221      	movs	r2, #33	@ 0x21
 800c482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c486:	f7f8 fce5 	bl	8004e54 <HAL_GetTick>
 800c48a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	88fa      	ldrh	r2, [r7, #6]
 800c490:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	88fa      	ldrh	r2, [r7, #6]
 800c496:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	689b      	ldr	r3, [r3, #8]
 800c49c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4a0:	d108      	bne.n	800c4b4 <HAL_UART_Transmit+0x6c>
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	691b      	ldr	r3, [r3, #16]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d104      	bne.n	800c4b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	61bb      	str	r3, [r7, #24]
 800c4b2:	e003      	b.n	800c4bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c4bc:	e02e      	b.n	800c51c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	9300      	str	r3, [sp, #0]
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	2180      	movs	r1, #128	@ 0x80
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	f000 f848 	bl	800c55e <UART_WaitOnFlagUntilTimeout>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d005      	beq.n	800c4e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2220      	movs	r2, #32
 800c4d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800c4dc:	2303      	movs	r3, #3
 800c4de:	e03a      	b.n	800c556 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d10b      	bne.n	800c4fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	881b      	ldrh	r3, [r3, #0]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c4f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c4f6:	69bb      	ldr	r3, [r7, #24]
 800c4f8:	3302      	adds	r3, #2
 800c4fa:	61bb      	str	r3, [r7, #24]
 800c4fc:	e007      	b.n	800c50e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c4fe:	69fb      	ldr	r3, [r7, #28]
 800c500:	781a      	ldrb	r2, [r3, #0]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	3301      	adds	r3, #1
 800c50c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c512:	b29b      	uxth	r3, r3
 800c514:	3b01      	subs	r3, #1
 800c516:	b29a      	uxth	r2, r3
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c520:	b29b      	uxth	r3, r3
 800c522:	2b00      	cmp	r3, #0
 800c524:	d1cb      	bne.n	800c4be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	9300      	str	r3, [sp, #0]
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	2200      	movs	r2, #0
 800c52e:	2140      	movs	r1, #64	@ 0x40
 800c530:	68f8      	ldr	r0, [r7, #12]
 800c532:	f000 f814 	bl	800c55e <UART_WaitOnFlagUntilTimeout>
 800c536:	4603      	mov	r3, r0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d005      	beq.n	800c548 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2220      	movs	r2, #32
 800c540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800c544:	2303      	movs	r3, #3
 800c546:	e006      	b.n	800c556 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2220      	movs	r2, #32
 800c54c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800c550:	2300      	movs	r3, #0
 800c552:	e000      	b.n	800c556 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c554:	2302      	movs	r3, #2
  }
}
 800c556:	4618      	mov	r0, r3
 800c558:	3720      	adds	r7, #32
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}

0800c55e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c55e:	b580      	push	{r7, lr}
 800c560:	b086      	sub	sp, #24
 800c562:	af00      	add	r7, sp, #0
 800c564:	60f8      	str	r0, [r7, #12]
 800c566:	60b9      	str	r1, [r7, #8]
 800c568:	603b      	str	r3, [r7, #0]
 800c56a:	4613      	mov	r3, r2
 800c56c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c56e:	e03b      	b.n	800c5e8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c570:	6a3b      	ldr	r3, [r7, #32]
 800c572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c576:	d037      	beq.n	800c5e8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c578:	f7f8 fc6c 	bl	8004e54 <HAL_GetTick>
 800c57c:	4602      	mov	r2, r0
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	1ad3      	subs	r3, r2, r3
 800c582:	6a3a      	ldr	r2, [r7, #32]
 800c584:	429a      	cmp	r2, r3
 800c586:	d302      	bcc.n	800c58e <UART_WaitOnFlagUntilTimeout+0x30>
 800c588:	6a3b      	ldr	r3, [r7, #32]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d101      	bne.n	800c592 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c58e:	2303      	movs	r3, #3
 800c590:	e03a      	b.n	800c608 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	f003 0304 	and.w	r3, r3, #4
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d023      	beq.n	800c5e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	2b80      	cmp	r3, #128	@ 0x80
 800c5a4:	d020      	beq.n	800c5e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	2b40      	cmp	r3, #64	@ 0x40
 800c5aa:	d01d      	beq.n	800c5e8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f003 0308 	and.w	r3, r3, #8
 800c5b6:	2b08      	cmp	r3, #8
 800c5b8:	d116      	bne.n	800c5e8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	617b      	str	r3, [r7, #20]
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	617b      	str	r3, [r7, #20]
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	617b      	str	r3, [r7, #20]
 800c5ce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c5d0:	68f8      	ldr	r0, [r7, #12]
 800c5d2:	f000 f81d 	bl	800c610 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2208      	movs	r2, #8
 800c5da:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	e00f      	b.n	800c608 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	4013      	ands	r3, r2
 800c5f2:	68ba      	ldr	r2, [r7, #8]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	bf0c      	ite	eq
 800c5f8:	2301      	moveq	r3, #1
 800c5fa:	2300      	movne	r3, #0
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	461a      	mov	r2, r3
 800c600:	79fb      	ldrb	r3, [r7, #7]
 800c602:	429a      	cmp	r2, r3
 800c604:	d0b4      	beq.n	800c570 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c606:	2300      	movs	r3, #0
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3718      	adds	r7, #24
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c610:	b480      	push	{r7}
 800c612:	b095      	sub	sp, #84	@ 0x54
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	330c      	adds	r3, #12
 800c61e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c622:	e853 3f00 	ldrex	r3, [r3]
 800c626:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c62a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c62e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	330c      	adds	r3, #12
 800c636:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c638:	643a      	str	r2, [r7, #64]	@ 0x40
 800c63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c63c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c63e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c640:	e841 2300 	strex	r3, r2, [r1]
 800c644:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d1e5      	bne.n	800c618 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	3314      	adds	r3, #20
 800c652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c654:	6a3b      	ldr	r3, [r7, #32]
 800c656:	e853 3f00 	ldrex	r3, [r3]
 800c65a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c65c:	69fb      	ldr	r3, [r7, #28]
 800c65e:	f023 0301 	bic.w	r3, r3, #1
 800c662:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	3314      	adds	r3, #20
 800c66a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c66c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c66e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c670:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c672:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c674:	e841 2300 	strex	r3, r2, [r1]
 800c678:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d1e5      	bne.n	800c64c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c684:	2b01      	cmp	r3, #1
 800c686:	d119      	bne.n	800c6bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	330c      	adds	r3, #12
 800c68e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	e853 3f00 	ldrex	r3, [r3]
 800c696:	60bb      	str	r3, [r7, #8]
   return(result);
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	f023 0310 	bic.w	r3, r3, #16
 800c69e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	330c      	adds	r3, #12
 800c6a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c6a8:	61ba      	str	r2, [r7, #24]
 800c6aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ac:	6979      	ldr	r1, [r7, #20]
 800c6ae:	69ba      	ldr	r2, [r7, #24]
 800c6b0:	e841 2300 	strex	r3, r2, [r1]
 800c6b4:	613b      	str	r3, [r7, #16]
   return(result);
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d1e5      	bne.n	800c688 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2220      	movs	r2, #32
 800c6c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c6ca:	bf00      	nop
 800c6cc:	3754      	adds	r7, #84	@ 0x54
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr
	...

0800c6d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c6dc:	b0c0      	sub	sp, #256	@ 0x100
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c6e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	691b      	ldr	r3, [r3, #16]
 800c6ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c6f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6f4:	68d9      	ldr	r1, [r3, #12]
 800c6f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	ea40 0301 	orr.w	r3, r0, r1
 800c700:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c706:	689a      	ldr	r2, [r3, #8]
 800c708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c70c:	691b      	ldr	r3, [r3, #16]
 800c70e:	431a      	orrs	r2, r3
 800c710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c714:	695b      	ldr	r3, [r3, #20]
 800c716:	431a      	orrs	r2, r3
 800c718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c71c:	69db      	ldr	r3, [r3, #28]
 800c71e:	4313      	orrs	r3, r2
 800c720:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c730:	f021 010c 	bic.w	r1, r1, #12
 800c734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c73e:	430b      	orrs	r3, r1
 800c740:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	695b      	ldr	r3, [r3, #20]
 800c74a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c74e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c752:	6999      	ldr	r1, [r3, #24]
 800c754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c758:	681a      	ldr	r2, [r3, #0]
 800c75a:	ea40 0301 	orr.w	r3, r0, r1
 800c75e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	4b8f      	ldr	r3, [pc, #572]	@ (800c9a4 <UART_SetConfig+0x2cc>)
 800c768:	429a      	cmp	r2, r3
 800c76a:	d005      	beq.n	800c778 <UART_SetConfig+0xa0>
 800c76c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	4b8d      	ldr	r3, [pc, #564]	@ (800c9a8 <UART_SetConfig+0x2d0>)
 800c774:	429a      	cmp	r2, r3
 800c776:	d104      	bne.n	800c782 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c778:	f7fe f902 	bl	800a980 <HAL_RCC_GetPCLK2Freq>
 800c77c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c780:	e003      	b.n	800c78a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c782:	f7fe f8e9 	bl	800a958 <HAL_RCC_GetPCLK1Freq>
 800c786:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c78a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c78e:	69db      	ldr	r3, [r3, #28]
 800c790:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c794:	f040 810c 	bne.w	800c9b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c79c:	2200      	movs	r2, #0
 800c79e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c7a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c7a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c7aa:	4622      	mov	r2, r4
 800c7ac:	462b      	mov	r3, r5
 800c7ae:	1891      	adds	r1, r2, r2
 800c7b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c7b2:	415b      	adcs	r3, r3
 800c7b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c7b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c7ba:	4621      	mov	r1, r4
 800c7bc:	eb12 0801 	adds.w	r8, r2, r1
 800c7c0:	4629      	mov	r1, r5
 800c7c2:	eb43 0901 	adc.w	r9, r3, r1
 800c7c6:	f04f 0200 	mov.w	r2, #0
 800c7ca:	f04f 0300 	mov.w	r3, #0
 800c7ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c7d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c7d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c7da:	4690      	mov	r8, r2
 800c7dc:	4699      	mov	r9, r3
 800c7de:	4623      	mov	r3, r4
 800c7e0:	eb18 0303 	adds.w	r3, r8, r3
 800c7e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c7e8:	462b      	mov	r3, r5
 800c7ea:	eb49 0303 	adc.w	r3, r9, r3
 800c7ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c7f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c7fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c802:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c806:	460b      	mov	r3, r1
 800c808:	18db      	adds	r3, r3, r3
 800c80a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c80c:	4613      	mov	r3, r2
 800c80e:	eb42 0303 	adc.w	r3, r2, r3
 800c812:	657b      	str	r3, [r7, #84]	@ 0x54
 800c814:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c818:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c81c:	f7f3 fd40 	bl	80002a0 <__aeabi_uldivmod>
 800c820:	4602      	mov	r2, r0
 800c822:	460b      	mov	r3, r1
 800c824:	4b61      	ldr	r3, [pc, #388]	@ (800c9ac <UART_SetConfig+0x2d4>)
 800c826:	fba3 2302 	umull	r2, r3, r3, r2
 800c82a:	095b      	lsrs	r3, r3, #5
 800c82c:	011c      	lsls	r4, r3, #4
 800c82e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c832:	2200      	movs	r2, #0
 800c834:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c838:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c83c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c840:	4642      	mov	r2, r8
 800c842:	464b      	mov	r3, r9
 800c844:	1891      	adds	r1, r2, r2
 800c846:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c848:	415b      	adcs	r3, r3
 800c84a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c84c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c850:	4641      	mov	r1, r8
 800c852:	eb12 0a01 	adds.w	sl, r2, r1
 800c856:	4649      	mov	r1, r9
 800c858:	eb43 0b01 	adc.w	fp, r3, r1
 800c85c:	f04f 0200 	mov.w	r2, #0
 800c860:	f04f 0300 	mov.w	r3, #0
 800c864:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c868:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c86c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c870:	4692      	mov	sl, r2
 800c872:	469b      	mov	fp, r3
 800c874:	4643      	mov	r3, r8
 800c876:	eb1a 0303 	adds.w	r3, sl, r3
 800c87a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c87e:	464b      	mov	r3, r9
 800c880:	eb4b 0303 	adc.w	r3, fp, r3
 800c884:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c894:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c898:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c89c:	460b      	mov	r3, r1
 800c89e:	18db      	adds	r3, r3, r3
 800c8a0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c8a2:	4613      	mov	r3, r2
 800c8a4:	eb42 0303 	adc.w	r3, r2, r3
 800c8a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c8ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c8b2:	f7f3 fcf5 	bl	80002a0 <__aeabi_uldivmod>
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	4611      	mov	r1, r2
 800c8bc:	4b3b      	ldr	r3, [pc, #236]	@ (800c9ac <UART_SetConfig+0x2d4>)
 800c8be:	fba3 2301 	umull	r2, r3, r3, r1
 800c8c2:	095b      	lsrs	r3, r3, #5
 800c8c4:	2264      	movs	r2, #100	@ 0x64
 800c8c6:	fb02 f303 	mul.w	r3, r2, r3
 800c8ca:	1acb      	subs	r3, r1, r3
 800c8cc:	00db      	lsls	r3, r3, #3
 800c8ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c8d2:	4b36      	ldr	r3, [pc, #216]	@ (800c9ac <UART_SetConfig+0x2d4>)
 800c8d4:	fba3 2302 	umull	r2, r3, r3, r2
 800c8d8:	095b      	lsrs	r3, r3, #5
 800c8da:	005b      	lsls	r3, r3, #1
 800c8dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c8e0:	441c      	add	r4, r3
 800c8e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c8ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c8f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c8f4:	4642      	mov	r2, r8
 800c8f6:	464b      	mov	r3, r9
 800c8f8:	1891      	adds	r1, r2, r2
 800c8fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c8fc:	415b      	adcs	r3, r3
 800c8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c900:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c904:	4641      	mov	r1, r8
 800c906:	1851      	adds	r1, r2, r1
 800c908:	6339      	str	r1, [r7, #48]	@ 0x30
 800c90a:	4649      	mov	r1, r9
 800c90c:	414b      	adcs	r3, r1
 800c90e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c910:	f04f 0200 	mov.w	r2, #0
 800c914:	f04f 0300 	mov.w	r3, #0
 800c918:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c91c:	4659      	mov	r1, fp
 800c91e:	00cb      	lsls	r3, r1, #3
 800c920:	4651      	mov	r1, sl
 800c922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c926:	4651      	mov	r1, sl
 800c928:	00ca      	lsls	r2, r1, #3
 800c92a:	4610      	mov	r0, r2
 800c92c:	4619      	mov	r1, r3
 800c92e:	4603      	mov	r3, r0
 800c930:	4642      	mov	r2, r8
 800c932:	189b      	adds	r3, r3, r2
 800c934:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c938:	464b      	mov	r3, r9
 800c93a:	460a      	mov	r2, r1
 800c93c:	eb42 0303 	adc.w	r3, r2, r3
 800c940:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	2200      	movs	r2, #0
 800c94c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c950:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c954:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c958:	460b      	mov	r3, r1
 800c95a:	18db      	adds	r3, r3, r3
 800c95c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c95e:	4613      	mov	r3, r2
 800c960:	eb42 0303 	adc.w	r3, r2, r3
 800c964:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c966:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c96a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c96e:	f7f3 fc97 	bl	80002a0 <__aeabi_uldivmod>
 800c972:	4602      	mov	r2, r0
 800c974:	460b      	mov	r3, r1
 800c976:	4b0d      	ldr	r3, [pc, #52]	@ (800c9ac <UART_SetConfig+0x2d4>)
 800c978:	fba3 1302 	umull	r1, r3, r3, r2
 800c97c:	095b      	lsrs	r3, r3, #5
 800c97e:	2164      	movs	r1, #100	@ 0x64
 800c980:	fb01 f303 	mul.w	r3, r1, r3
 800c984:	1ad3      	subs	r3, r2, r3
 800c986:	00db      	lsls	r3, r3, #3
 800c988:	3332      	adds	r3, #50	@ 0x32
 800c98a:	4a08      	ldr	r2, [pc, #32]	@ (800c9ac <UART_SetConfig+0x2d4>)
 800c98c:	fba2 2303 	umull	r2, r3, r2, r3
 800c990:	095b      	lsrs	r3, r3, #5
 800c992:	f003 0207 	and.w	r2, r3, #7
 800c996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4422      	add	r2, r4
 800c99e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c9a0:	e106      	b.n	800cbb0 <UART_SetConfig+0x4d8>
 800c9a2:	bf00      	nop
 800c9a4:	40011000 	.word	0x40011000
 800c9a8:	40011400 	.word	0x40011400
 800c9ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c9b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c9ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c9be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c9c2:	4642      	mov	r2, r8
 800c9c4:	464b      	mov	r3, r9
 800c9c6:	1891      	adds	r1, r2, r2
 800c9c8:	6239      	str	r1, [r7, #32]
 800c9ca:	415b      	adcs	r3, r3
 800c9cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c9d2:	4641      	mov	r1, r8
 800c9d4:	1854      	adds	r4, r2, r1
 800c9d6:	4649      	mov	r1, r9
 800c9d8:	eb43 0501 	adc.w	r5, r3, r1
 800c9dc:	f04f 0200 	mov.w	r2, #0
 800c9e0:	f04f 0300 	mov.w	r3, #0
 800c9e4:	00eb      	lsls	r3, r5, #3
 800c9e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c9ea:	00e2      	lsls	r2, r4, #3
 800c9ec:	4614      	mov	r4, r2
 800c9ee:	461d      	mov	r5, r3
 800c9f0:	4643      	mov	r3, r8
 800c9f2:	18e3      	adds	r3, r4, r3
 800c9f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c9f8:	464b      	mov	r3, r9
 800c9fa:	eb45 0303 	adc.w	r3, r5, r3
 800c9fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ca02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ca0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ca12:	f04f 0200 	mov.w	r2, #0
 800ca16:	f04f 0300 	mov.w	r3, #0
 800ca1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ca1e:	4629      	mov	r1, r5
 800ca20:	008b      	lsls	r3, r1, #2
 800ca22:	4621      	mov	r1, r4
 800ca24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ca28:	4621      	mov	r1, r4
 800ca2a:	008a      	lsls	r2, r1, #2
 800ca2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ca30:	f7f3 fc36 	bl	80002a0 <__aeabi_uldivmod>
 800ca34:	4602      	mov	r2, r0
 800ca36:	460b      	mov	r3, r1
 800ca38:	4b60      	ldr	r3, [pc, #384]	@ (800cbbc <UART_SetConfig+0x4e4>)
 800ca3a:	fba3 2302 	umull	r2, r3, r3, r2
 800ca3e:	095b      	lsrs	r3, r3, #5
 800ca40:	011c      	lsls	r4, r3, #4
 800ca42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ca46:	2200      	movs	r2, #0
 800ca48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ca4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ca50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ca54:	4642      	mov	r2, r8
 800ca56:	464b      	mov	r3, r9
 800ca58:	1891      	adds	r1, r2, r2
 800ca5a:	61b9      	str	r1, [r7, #24]
 800ca5c:	415b      	adcs	r3, r3
 800ca5e:	61fb      	str	r3, [r7, #28]
 800ca60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ca64:	4641      	mov	r1, r8
 800ca66:	1851      	adds	r1, r2, r1
 800ca68:	6139      	str	r1, [r7, #16]
 800ca6a:	4649      	mov	r1, r9
 800ca6c:	414b      	adcs	r3, r1
 800ca6e:	617b      	str	r3, [r7, #20]
 800ca70:	f04f 0200 	mov.w	r2, #0
 800ca74:	f04f 0300 	mov.w	r3, #0
 800ca78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ca7c:	4659      	mov	r1, fp
 800ca7e:	00cb      	lsls	r3, r1, #3
 800ca80:	4651      	mov	r1, sl
 800ca82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ca86:	4651      	mov	r1, sl
 800ca88:	00ca      	lsls	r2, r1, #3
 800ca8a:	4610      	mov	r0, r2
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	4603      	mov	r3, r0
 800ca90:	4642      	mov	r2, r8
 800ca92:	189b      	adds	r3, r3, r2
 800ca94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ca98:	464b      	mov	r3, r9
 800ca9a:	460a      	mov	r2, r1
 800ca9c:	eb42 0303 	adc.w	r3, r2, r3
 800caa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800caa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	2200      	movs	r2, #0
 800caac:	67bb      	str	r3, [r7, #120]	@ 0x78
 800caae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800cab0:	f04f 0200 	mov.w	r2, #0
 800cab4:	f04f 0300 	mov.w	r3, #0
 800cab8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800cabc:	4649      	mov	r1, r9
 800cabe:	008b      	lsls	r3, r1, #2
 800cac0:	4641      	mov	r1, r8
 800cac2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cac6:	4641      	mov	r1, r8
 800cac8:	008a      	lsls	r2, r1, #2
 800caca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800cace:	f7f3 fbe7 	bl	80002a0 <__aeabi_uldivmod>
 800cad2:	4602      	mov	r2, r0
 800cad4:	460b      	mov	r3, r1
 800cad6:	4611      	mov	r1, r2
 800cad8:	4b38      	ldr	r3, [pc, #224]	@ (800cbbc <UART_SetConfig+0x4e4>)
 800cada:	fba3 2301 	umull	r2, r3, r3, r1
 800cade:	095b      	lsrs	r3, r3, #5
 800cae0:	2264      	movs	r2, #100	@ 0x64
 800cae2:	fb02 f303 	mul.w	r3, r2, r3
 800cae6:	1acb      	subs	r3, r1, r3
 800cae8:	011b      	lsls	r3, r3, #4
 800caea:	3332      	adds	r3, #50	@ 0x32
 800caec:	4a33      	ldr	r2, [pc, #204]	@ (800cbbc <UART_SetConfig+0x4e4>)
 800caee:	fba2 2303 	umull	r2, r3, r2, r3
 800caf2:	095b      	lsrs	r3, r3, #5
 800caf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800caf8:	441c      	add	r4, r3
 800cafa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cafe:	2200      	movs	r2, #0
 800cb00:	673b      	str	r3, [r7, #112]	@ 0x70
 800cb02:	677a      	str	r2, [r7, #116]	@ 0x74
 800cb04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800cb08:	4642      	mov	r2, r8
 800cb0a:	464b      	mov	r3, r9
 800cb0c:	1891      	adds	r1, r2, r2
 800cb0e:	60b9      	str	r1, [r7, #8]
 800cb10:	415b      	adcs	r3, r3
 800cb12:	60fb      	str	r3, [r7, #12]
 800cb14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cb18:	4641      	mov	r1, r8
 800cb1a:	1851      	adds	r1, r2, r1
 800cb1c:	6039      	str	r1, [r7, #0]
 800cb1e:	4649      	mov	r1, r9
 800cb20:	414b      	adcs	r3, r1
 800cb22:	607b      	str	r3, [r7, #4]
 800cb24:	f04f 0200 	mov.w	r2, #0
 800cb28:	f04f 0300 	mov.w	r3, #0
 800cb2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cb30:	4659      	mov	r1, fp
 800cb32:	00cb      	lsls	r3, r1, #3
 800cb34:	4651      	mov	r1, sl
 800cb36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cb3a:	4651      	mov	r1, sl
 800cb3c:	00ca      	lsls	r2, r1, #3
 800cb3e:	4610      	mov	r0, r2
 800cb40:	4619      	mov	r1, r3
 800cb42:	4603      	mov	r3, r0
 800cb44:	4642      	mov	r2, r8
 800cb46:	189b      	adds	r3, r3, r2
 800cb48:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cb4a:	464b      	mov	r3, r9
 800cb4c:	460a      	mov	r2, r1
 800cb4e:	eb42 0303 	adc.w	r3, r2, r3
 800cb52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cb54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	663b      	str	r3, [r7, #96]	@ 0x60
 800cb5e:	667a      	str	r2, [r7, #100]	@ 0x64
 800cb60:	f04f 0200 	mov.w	r2, #0
 800cb64:	f04f 0300 	mov.w	r3, #0
 800cb68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800cb6c:	4649      	mov	r1, r9
 800cb6e:	008b      	lsls	r3, r1, #2
 800cb70:	4641      	mov	r1, r8
 800cb72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cb76:	4641      	mov	r1, r8
 800cb78:	008a      	lsls	r2, r1, #2
 800cb7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800cb7e:	f7f3 fb8f 	bl	80002a0 <__aeabi_uldivmod>
 800cb82:	4602      	mov	r2, r0
 800cb84:	460b      	mov	r3, r1
 800cb86:	4b0d      	ldr	r3, [pc, #52]	@ (800cbbc <UART_SetConfig+0x4e4>)
 800cb88:	fba3 1302 	umull	r1, r3, r3, r2
 800cb8c:	095b      	lsrs	r3, r3, #5
 800cb8e:	2164      	movs	r1, #100	@ 0x64
 800cb90:	fb01 f303 	mul.w	r3, r1, r3
 800cb94:	1ad3      	subs	r3, r2, r3
 800cb96:	011b      	lsls	r3, r3, #4
 800cb98:	3332      	adds	r3, #50	@ 0x32
 800cb9a:	4a08      	ldr	r2, [pc, #32]	@ (800cbbc <UART_SetConfig+0x4e4>)
 800cb9c:	fba2 2303 	umull	r2, r3, r2, r3
 800cba0:	095b      	lsrs	r3, r3, #5
 800cba2:	f003 020f 	and.w	r2, r3, #15
 800cba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4422      	add	r2, r4
 800cbae:	609a      	str	r2, [r3, #8]
}
 800cbb0:	bf00      	nop
 800cbb2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cbbc:	51eb851f 	.word	0x51eb851f

0800cbc0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b083      	sub	sp, #12
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d123      	bne.n	800cc1a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800cbda:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cbde:	683a      	ldr	r2, [r7, #0]
 800cbe0:	6851      	ldr	r1, [r2, #4]
 800cbe2:	683a      	ldr	r2, [r7, #0]
 800cbe4:	6892      	ldr	r2, [r2, #8]
 800cbe6:	4311      	orrs	r1, r2
 800cbe8:	683a      	ldr	r2, [r7, #0]
 800cbea:	68d2      	ldr	r2, [r2, #12]
 800cbec:	4311      	orrs	r1, r2
 800cbee:	683a      	ldr	r2, [r7, #0]
 800cbf0:	6912      	ldr	r2, [r2, #16]
 800cbf2:	4311      	orrs	r1, r2
 800cbf4:	683a      	ldr	r2, [r7, #0]
 800cbf6:	6952      	ldr	r2, [r2, #20]
 800cbf8:	4311      	orrs	r1, r2
 800cbfa:	683a      	ldr	r2, [r7, #0]
 800cbfc:	6992      	ldr	r2, [r2, #24]
 800cbfe:	4311      	orrs	r1, r2
 800cc00:	683a      	ldr	r2, [r7, #0]
 800cc02:	69d2      	ldr	r2, [r2, #28]
 800cc04:	4311      	orrs	r1, r2
 800cc06:	683a      	ldr	r2, [r7, #0]
 800cc08:	6a12      	ldr	r2, [r2, #32]
 800cc0a:	4311      	orrs	r1, r2
 800cc0c:	683a      	ldr	r2, [r7, #0]
 800cc0e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800cc10:	430a      	orrs	r2, r1
 800cc12:	431a      	orrs	r2, r3
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	601a      	str	r2, [r3, #0]
 800cc18:	e028      	b.n	800cc6c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	69d9      	ldr	r1, [r3, #28]
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	6a1b      	ldr	r3, [r3, #32]
 800cc2a:	4319      	orrs	r1, r3
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc30:	430b      	orrs	r3, r1
 800cc32:	431a      	orrs	r2, r3
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800cc40:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cc44:	683a      	ldr	r2, [r7, #0]
 800cc46:	6851      	ldr	r1, [r2, #4]
 800cc48:	683a      	ldr	r2, [r7, #0]
 800cc4a:	6892      	ldr	r2, [r2, #8]
 800cc4c:	4311      	orrs	r1, r2
 800cc4e:	683a      	ldr	r2, [r7, #0]
 800cc50:	68d2      	ldr	r2, [r2, #12]
 800cc52:	4311      	orrs	r1, r2
 800cc54:	683a      	ldr	r2, [r7, #0]
 800cc56:	6912      	ldr	r2, [r2, #16]
 800cc58:	4311      	orrs	r1, r2
 800cc5a:	683a      	ldr	r2, [r7, #0]
 800cc5c:	6952      	ldr	r2, [r2, #20]
 800cc5e:	4311      	orrs	r1, r2
 800cc60:	683a      	ldr	r2, [r7, #0]
 800cc62:	6992      	ldr	r2, [r2, #24]
 800cc64:	430a      	orrs	r2, r1
 800cc66:	431a      	orrs	r2, r3
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800cc6c:	2300      	movs	r3, #0
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	370c      	adds	r7, #12
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr

0800cc7a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800cc7a:	b480      	push	{r7}
 800cc7c:	b085      	sub	sp, #20
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	60f8      	str	r0, [r7, #12]
 800cc82:	60b9      	str	r1, [r7, #8]
 800cc84:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d128      	bne.n	800ccde <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	689b      	ldr	r3, [r3, #8]
 800cc90:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	1e59      	subs	r1, r3, #1
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	3b01      	subs	r3, #1
 800cca0:	011b      	lsls	r3, r3, #4
 800cca2:	4319      	orrs	r1, r3
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	3b01      	subs	r3, #1
 800ccaa:	021b      	lsls	r3, r3, #8
 800ccac:	4319      	orrs	r1, r3
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	68db      	ldr	r3, [r3, #12]
 800ccb2:	3b01      	subs	r3, #1
 800ccb4:	031b      	lsls	r3, r3, #12
 800ccb6:	4319      	orrs	r1, r3
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	691b      	ldr	r3, [r3, #16]
 800ccbc:	3b01      	subs	r3, #1
 800ccbe:	041b      	lsls	r3, r3, #16
 800ccc0:	4319      	orrs	r1, r3
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	695b      	ldr	r3, [r3, #20]
 800ccc6:	3b01      	subs	r3, #1
 800ccc8:	051b      	lsls	r3, r3, #20
 800ccca:	4319      	orrs	r1, r3
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	699b      	ldr	r3, [r3, #24]
 800ccd0:	3b01      	subs	r3, #1
 800ccd2:	061b      	lsls	r3, r3, #24
 800ccd4:	430b      	orrs	r3, r1
 800ccd6:	431a      	orrs	r2, r3
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	609a      	str	r2, [r3, #8]
 800ccdc:	e02f      	b.n	800cd3e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	689b      	ldr	r3, [r3, #8]
 800cce2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cce6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ccea:	68ba      	ldr	r2, [r7, #8]
 800ccec:	68d2      	ldr	r2, [r2, #12]
 800ccee:	3a01      	subs	r2, #1
 800ccf0:	0311      	lsls	r1, r2, #12
 800ccf2:	68ba      	ldr	r2, [r7, #8]
 800ccf4:	6952      	ldr	r2, [r2, #20]
 800ccf6:	3a01      	subs	r2, #1
 800ccf8:	0512      	lsls	r2, r2, #20
 800ccfa:	430a      	orrs	r2, r1
 800ccfc:	431a      	orrs	r2, r3
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	68db      	ldr	r3, [r3, #12]
 800cd06:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	1e59      	subs	r1, r3, #1
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	3b01      	subs	r3, #1
 800cd16:	011b      	lsls	r3, r3, #4
 800cd18:	4319      	orrs	r1, r3
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	689b      	ldr	r3, [r3, #8]
 800cd1e:	3b01      	subs	r3, #1
 800cd20:	021b      	lsls	r3, r3, #8
 800cd22:	4319      	orrs	r1, r3
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	691b      	ldr	r3, [r3, #16]
 800cd28:	3b01      	subs	r3, #1
 800cd2a:	041b      	lsls	r3, r3, #16
 800cd2c:	4319      	orrs	r1, r3
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	699b      	ldr	r3, [r3, #24]
 800cd32:	3b01      	subs	r3, #1
 800cd34:	061b      	lsls	r3, r3, #24
 800cd36:	430b      	orrs	r3, r1
 800cd38:	431a      	orrs	r2, r3
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800cd3e:	2300      	movs	r3, #0
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3714      	adds	r7, #20
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b086      	sub	sp, #24
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	691b      	ldr	r3, [r3, #16]
 800cd60:	0d9b      	lsrs	r3, r3, #22
 800cd62:	059b      	lsls	r3, r3, #22
 800cd64:	68ba      	ldr	r2, [r7, #8]
 800cd66:	6811      	ldr	r1, [r2, #0]
 800cd68:	68ba      	ldr	r2, [r7, #8]
 800cd6a:	6852      	ldr	r2, [r2, #4]
 800cd6c:	4311      	orrs	r1, r2
 800cd6e:	68ba      	ldr	r2, [r7, #8]
 800cd70:	6892      	ldr	r2, [r2, #8]
 800cd72:	3a01      	subs	r2, #1
 800cd74:	0152      	lsls	r2, r2, #5
 800cd76:	4311      	orrs	r1, r2
 800cd78:	68ba      	ldr	r2, [r7, #8]
 800cd7a:	68d2      	ldr	r2, [r2, #12]
 800cd7c:	0252      	lsls	r2, r2, #9
 800cd7e:	430a      	orrs	r2, r1
 800cd80:	431a      	orrs	r2, r3
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800cd86:	f7f8 f865 	bl	8004e54 <HAL_GetTick>
 800cd8a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800cd8c:	e010      	b.n	800cdb0 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd94:	d00c      	beq.n	800cdb0 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d007      	beq.n	800cdac <FMC_SDRAM_SendCommand+0x60>
 800cd9c:	f7f8 f85a 	bl	8004e54 <HAL_GetTick>
 800cda0:	4602      	mov	r2, r0
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	1ad3      	subs	r3, r2, r3
 800cda6:	687a      	ldr	r2, [r7, #4]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d201      	bcs.n	800cdb0 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800cdac:	2303      	movs	r3, #3
 800cdae:	e006      	b.n	800cdbe <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	699b      	ldr	r3, [r3, #24]
 800cdb4:	f003 0320 	and.w	r3, r3, #32
 800cdb8:	2b20      	cmp	r3, #32
 800cdba:	d0e8      	beq.n	800cd8e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800cdbc:	2300      	movs	r3, #0
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3718      	adds	r7, #24
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}

0800cdc6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800cdc6:	b480      	push	{r7}
 800cdc8:	b083      	sub	sp, #12
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
 800cdce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	695b      	ldr	r3, [r3, #20]
 800cdd4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800cdd8:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800cddc:	683a      	ldr	r2, [r7, #0]
 800cdde:	0052      	lsls	r2, r2, #1
 800cde0:	431a      	orrs	r2, r3
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800cde6:	2300      	movs	r3, #0
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	370c      	adds	r7, #12
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr

0800cdf4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cdf4:	b084      	sub	sp, #16
 800cdf6:	b580      	push	{r7, lr}
 800cdf8:	b084      	sub	sp, #16
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]
 800cdfe:	f107 001c 	add.w	r0, r7, #28
 800ce02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ce06:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ce0a:	2b01      	cmp	r3, #1
 800ce0c:	d123      	bne.n	800ce56 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce12:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	68db      	ldr	r3, [r3, #12]
 800ce1e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800ce22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ce26:	687a      	ldr	r2, [r7, #4]
 800ce28:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ce36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	d105      	bne.n	800ce4a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	68db      	ldr	r3, [r3, #12]
 800ce42:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f000 f9dc 	bl	800d208 <USB_CoreReset>
 800ce50:	4603      	mov	r3, r0
 800ce52:	73fb      	strb	r3, [r7, #15]
 800ce54:	e01b      	b.n	800ce8e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	68db      	ldr	r3, [r3, #12]
 800ce5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f000 f9d0 	bl	800d208 <USB_CoreReset>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ce6c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d106      	bne.n	800ce82 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce78:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	639a      	str	r2, [r3, #56]	@ 0x38
 800ce80:	e005      	b.n	800ce8e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ce8e:	7fbb      	ldrb	r3, [r7, #30]
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d10b      	bne.n	800ceac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	689b      	ldr	r3, [r3, #8]
 800ce98:	f043 0206 	orr.w	r2, r3, #6
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	689b      	ldr	r3, [r3, #8]
 800cea4:	f043 0220 	orr.w	r2, r3, #32
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ceac:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3710      	adds	r7, #16
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ceb8:	b004      	add	sp, #16
 800ceba:	4770      	bx	lr

0800cebc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	689b      	ldr	r3, [r3, #8]
 800cec8:	f043 0201 	orr.w	r2, r3, #1
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ced0:	2300      	movs	r3, #0
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	370c      	adds	r7, #12
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr

0800cede <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cede:	b480      	push	{r7}
 800cee0:	b083      	sub	sp, #12
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	689b      	ldr	r3, [r3, #8]
 800ceea:	f023 0201 	bic.w	r2, r3, #1
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cef2:	2300      	movs	r3, #0
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	370c      	adds	r7, #12
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr

0800cf00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b084      	sub	sp, #16
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	460b      	mov	r3, r1
 800cf0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	68db      	ldr	r3, [r3, #12]
 800cf14:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cf1c:	78fb      	ldrb	r3, [r7, #3]
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d115      	bne.n	800cf4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	68db      	ldr	r3, [r3, #12]
 800cf26:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800cf2e:	200a      	movs	r0, #10
 800cf30:	f7f7 ff9c 	bl	8004e6c <HAL_Delay>
      ms += 10U;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	330a      	adds	r3, #10
 800cf38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 f956 	bl	800d1ec <USB_GetMode>
 800cf40:	4603      	mov	r3, r0
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d01e      	beq.n	800cf84 <USB_SetCurrentMode+0x84>
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2bc7      	cmp	r3, #199	@ 0xc7
 800cf4a:	d9f0      	bls.n	800cf2e <USB_SetCurrentMode+0x2e>
 800cf4c:	e01a      	b.n	800cf84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cf4e:	78fb      	ldrb	r3, [r7, #3]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d115      	bne.n	800cf80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	68db      	ldr	r3, [r3, #12]
 800cf58:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800cf60:	200a      	movs	r0, #10
 800cf62:	f7f7 ff83 	bl	8004e6c <HAL_Delay>
      ms += 10U;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	330a      	adds	r3, #10
 800cf6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f000 f93d 	bl	800d1ec <USB_GetMode>
 800cf72:	4603      	mov	r3, r0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d005      	beq.n	800cf84 <USB_SetCurrentMode+0x84>
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	2bc7      	cmp	r3, #199	@ 0xc7
 800cf7c:	d9f0      	bls.n	800cf60 <USB_SetCurrentMode+0x60>
 800cf7e:	e001      	b.n	800cf84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cf80:	2301      	movs	r3, #1
 800cf82:	e005      	b.n	800cf90 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2bc8      	cmp	r3, #200	@ 0xc8
 800cf88:	d101      	bne.n	800cf8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e000      	b.n	800cf90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800cf8e:	2300      	movs	r3, #0
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3710      	adds	r7, #16
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b085      	sub	sp, #20
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cfb2:	d901      	bls.n	800cfb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cfb4:	2303      	movs	r3, #3
 800cfb6:	e01b      	b.n	800cff0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	691b      	ldr	r3, [r3, #16]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	daf2      	bge.n	800cfa6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	019b      	lsls	r3, r3, #6
 800cfc8:	f043 0220 	orr.w	r2, r3, #32
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cfdc:	d901      	bls.n	800cfe2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cfde:	2303      	movs	r3, #3
 800cfe0:	e006      	b.n	800cff0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	691b      	ldr	r3, [r3, #16]
 800cfe6:	f003 0320 	and.w	r3, r3, #32
 800cfea:	2b20      	cmp	r3, #32
 800cfec:	d0f0      	beq.n	800cfd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cfee:	2300      	movs	r3, #0
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3714      	adds	r7, #20
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr

0800cffc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b085      	sub	sp, #20
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d004:	2300      	movs	r3, #0
 800d006:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	3301      	adds	r3, #1
 800d00c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d014:	d901      	bls.n	800d01a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d016:	2303      	movs	r3, #3
 800d018:	e018      	b.n	800d04c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	691b      	ldr	r3, [r3, #16]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	daf2      	bge.n	800d008 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d022:	2300      	movs	r3, #0
 800d024:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2210      	movs	r2, #16
 800d02a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	3301      	adds	r3, #1
 800d030:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d038:	d901      	bls.n	800d03e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d03a:	2303      	movs	r3, #3
 800d03c:	e006      	b.n	800d04c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	691b      	ldr	r3, [r3, #16]
 800d042:	f003 0310 	and.w	r3, r3, #16
 800d046:	2b10      	cmp	r3, #16
 800d048:	d0f0      	beq.n	800d02c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d04a:	2300      	movs	r3, #0
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3714      	adds	r7, #20
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr

0800d058 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d058:	b480      	push	{r7}
 800d05a:	b089      	sub	sp, #36	@ 0x24
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	4611      	mov	r1, r2
 800d064:	461a      	mov	r2, r3
 800d066:	460b      	mov	r3, r1
 800d068:	71fb      	strb	r3, [r7, #7]
 800d06a:	4613      	mov	r3, r2
 800d06c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d076:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d123      	bne.n	800d0c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d07e:	88bb      	ldrh	r3, [r7, #4]
 800d080:	3303      	adds	r3, #3
 800d082:	089b      	lsrs	r3, r3, #2
 800d084:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d086:	2300      	movs	r3, #0
 800d088:	61bb      	str	r3, [r7, #24]
 800d08a:	e018      	b.n	800d0be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d08c:	79fb      	ldrb	r3, [r7, #7]
 800d08e:	031a      	lsls	r2, r3, #12
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	4413      	add	r3, r2
 800d094:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d098:	461a      	mov	r2, r3
 800d09a:	69fb      	ldr	r3, [r7, #28]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d0a0:	69fb      	ldr	r3, [r7, #28]
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d0a6:	69fb      	ldr	r3, [r7, #28]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d0ac:	69fb      	ldr	r3, [r7, #28]
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d0b2:	69fb      	ldr	r3, [r7, #28]
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d0b8:	69bb      	ldr	r3, [r7, #24]
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	61bb      	str	r3, [r7, #24]
 800d0be:	69ba      	ldr	r2, [r7, #24]
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d3e2      	bcc.n	800d08c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d0c6:	2300      	movs	r3, #0
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3724      	adds	r7, #36	@ 0x24
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr

0800d0d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b08b      	sub	sp, #44	@ 0x2c
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	60f8      	str	r0, [r7, #12]
 800d0dc:	60b9      	str	r1, [r7, #8]
 800d0de:	4613      	mov	r3, r2
 800d0e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d0ea:	88fb      	ldrh	r3, [r7, #6]
 800d0ec:	089b      	lsrs	r3, r3, #2
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d0f2:	88fb      	ldrh	r3, [r7, #6]
 800d0f4:	f003 0303 	and.w	r3, r3, #3
 800d0f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	623b      	str	r3, [r7, #32]
 800d0fe:	e014      	b.n	800d12a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d100:	69bb      	ldr	r3, [r7, #24]
 800d102:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d10a:	601a      	str	r2, [r3, #0]
    pDest++;
 800d10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d10e:	3301      	adds	r3, #1
 800d110:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d114:	3301      	adds	r3, #1
 800d116:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11a:	3301      	adds	r3, #1
 800d11c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d120:	3301      	adds	r3, #1
 800d122:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800d124:	6a3b      	ldr	r3, [r7, #32]
 800d126:	3301      	adds	r3, #1
 800d128:	623b      	str	r3, [r7, #32]
 800d12a:	6a3a      	ldr	r2, [r7, #32]
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	429a      	cmp	r2, r3
 800d130:	d3e6      	bcc.n	800d100 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d132:	8bfb      	ldrh	r3, [r7, #30]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d01e      	beq.n	800d176 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d138:	2300      	movs	r3, #0
 800d13a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d13c:	69bb      	ldr	r3, [r7, #24]
 800d13e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d142:	461a      	mov	r2, r3
 800d144:	f107 0310 	add.w	r3, r7, #16
 800d148:	6812      	ldr	r2, [r2, #0]
 800d14a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d14c:	693a      	ldr	r2, [r7, #16]
 800d14e:	6a3b      	ldr	r3, [r7, #32]
 800d150:	b2db      	uxtb	r3, r3
 800d152:	00db      	lsls	r3, r3, #3
 800d154:	fa22 f303 	lsr.w	r3, r2, r3
 800d158:	b2da      	uxtb	r2, r3
 800d15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d15c:	701a      	strb	r2, [r3, #0]
      i++;
 800d15e:	6a3b      	ldr	r3, [r7, #32]
 800d160:	3301      	adds	r3, #1
 800d162:	623b      	str	r3, [r7, #32]
      pDest++;
 800d164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d166:	3301      	adds	r3, #1
 800d168:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800d16a:	8bfb      	ldrh	r3, [r7, #30]
 800d16c:	3b01      	subs	r3, #1
 800d16e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d170:	8bfb      	ldrh	r3, [r7, #30]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d1ea      	bne.n	800d14c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d178:	4618      	mov	r0, r3
 800d17a:	372c      	adds	r7, #44	@ 0x2c
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800d184:	b480      	push	{r7}
 800d186:	b085      	sub	sp, #20
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	695b      	ldr	r3, [r3, #20]
 800d190:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	699b      	ldr	r3, [r3, #24]
 800d196:	68fa      	ldr	r2, [r7, #12]
 800d198:	4013      	ands	r3, r2
 800d19a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d19c:	68fb      	ldr	r3, [r7, #12]
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3714      	adds	r7, #20
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr

0800d1aa <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800d1aa:	b480      	push	{r7}
 800d1ac:	b085      	sub	sp, #20
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	6078      	str	r0, [r7, #4]
 800d1b2:	460b      	mov	r3, r1
 800d1b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800d1ba:	78fb      	ldrb	r3, [r7, #3]
 800d1bc:	015a      	lsls	r2, r3, #5
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	4413      	add	r3, r2
 800d1c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d1c6:	689b      	ldr	r3, [r3, #8]
 800d1c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800d1ca:	78fb      	ldrb	r3, [r7, #3]
 800d1cc:	015a      	lsls	r2, r3, #5
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	4413      	add	r3, r2
 800d1d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d1d6:	68db      	ldr	r3, [r3, #12]
 800d1d8:	68ba      	ldr	r2, [r7, #8]
 800d1da:	4013      	ands	r3, r2
 800d1dc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d1de:	68bb      	ldr	r3, [r7, #8]
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3714      	adds	r7, #20
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr

0800d1ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b083      	sub	sp, #12
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	695b      	ldr	r3, [r3, #20]
 800d1f8:	f003 0301 	and.w	r3, r3, #1
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	370c      	adds	r7, #12
 800d200:	46bd      	mov	sp, r7
 800d202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d206:	4770      	bx	lr

0800d208 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d208:	b480      	push	{r7}
 800d20a:	b085      	sub	sp, #20
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d210:	2300      	movs	r3, #0
 800d212:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	3301      	adds	r3, #1
 800d218:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d220:	d901      	bls.n	800d226 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d222:	2303      	movs	r3, #3
 800d224:	e01b      	b.n	800d25e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	691b      	ldr	r3, [r3, #16]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	daf2      	bge.n	800d214 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d22e:	2300      	movs	r3, #0
 800d230:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	691b      	ldr	r3, [r3, #16]
 800d236:	f043 0201 	orr.w	r2, r3, #1
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	3301      	adds	r3, #1
 800d242:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d24a:	d901      	bls.n	800d250 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d24c:	2303      	movs	r3, #3
 800d24e:	e006      	b.n	800d25e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	691b      	ldr	r3, [r3, #16]
 800d254:	f003 0301 	and.w	r3, r3, #1
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d0f0      	beq.n	800d23e <USB_CoreReset+0x36>

  return HAL_OK;
 800d25c:	2300      	movs	r3, #0
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3714      	adds	r7, #20
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr
	...

0800d26c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d26c:	b084      	sub	sp, #16
 800d26e:	b580      	push	{r7, lr}
 800d270:	b086      	sub	sp, #24
 800d272:	af00      	add	r7, sp, #0
 800d274:	6078      	str	r0, [r7, #4]
 800d276:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d27a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d27e:	2300      	movs	r3, #0
 800d280:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d28c:	461a      	mov	r2, r3
 800d28e:	2300      	movs	r3, #0
 800d290:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d296:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2a2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2ae:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	68db      	ldr	r3, [r3, #12]
 800d2ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d119      	bne.n	800d2f6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d2c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d10a      	bne.n	800d2e0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	68fa      	ldr	r2, [r7, #12]
 800d2d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d2d8:	f043 0304 	orr.w	r3, r3, #4
 800d2dc:	6013      	str	r3, [r2, #0]
 800d2de:	e014      	b.n	800d30a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	68fa      	ldr	r2, [r7, #12]
 800d2ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d2ee:	f023 0304 	bic.w	r3, r3, #4
 800d2f2:	6013      	str	r3, [r2, #0]
 800d2f4:	e009      	b.n	800d30a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	68fa      	ldr	r2, [r7, #12]
 800d300:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d304:	f023 0304 	bic.w	r3, r3, #4
 800d308:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d30a:	2110      	movs	r1, #16
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f7ff fe43 	bl	800cf98 <USB_FlushTxFifo>
 800d312:	4603      	mov	r3, r0
 800d314:	2b00      	cmp	r3, #0
 800d316:	d001      	beq.n	800d31c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800d318:	2301      	movs	r3, #1
 800d31a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f7ff fe6d 	bl	800cffc <USB_FlushRxFifo>
 800d322:	4603      	mov	r3, r0
 800d324:	2b00      	cmp	r3, #0
 800d326:	d001      	beq.n	800d32c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800d328:	2301      	movs	r3, #1
 800d32a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d32c:	2300      	movs	r3, #0
 800d32e:	613b      	str	r3, [r7, #16]
 800d330:	e015      	b.n	800d35e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	015a      	lsls	r2, r3, #5
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	4413      	add	r3, r2
 800d33a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d33e:	461a      	mov	r2, r3
 800d340:	f04f 33ff 	mov.w	r3, #4294967295
 800d344:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	015a      	lsls	r2, r3, #5
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	4413      	add	r3, r2
 800d34e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d352:	461a      	mov	r2, r3
 800d354:	2300      	movs	r3, #0
 800d356:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	3301      	adds	r3, #1
 800d35c:	613b      	str	r3, [r7, #16]
 800d35e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d362:	461a      	mov	r2, r3
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	4293      	cmp	r3, r2
 800d368:	d3e3      	bcc.n	800d332 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2200      	movs	r2, #0
 800d36e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f04f 32ff 	mov.w	r2, #4294967295
 800d376:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	4a18      	ldr	r2, [pc, #96]	@ (800d3dc <USB_HostInit+0x170>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d10b      	bne.n	800d398 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d386:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	4a15      	ldr	r2, [pc, #84]	@ (800d3e0 <USB_HostInit+0x174>)
 800d38c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	4a14      	ldr	r2, [pc, #80]	@ (800d3e4 <USB_HostInit+0x178>)
 800d392:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800d396:	e009      	b.n	800d3ac <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2280      	movs	r2, #128	@ 0x80
 800d39c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	4a11      	ldr	r2, [pc, #68]	@ (800d3e8 <USB_HostInit+0x17c>)
 800d3a2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	4a11      	ldr	r2, [pc, #68]	@ (800d3ec <USB_HostInit+0x180>)
 800d3a8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d3ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d105      	bne.n	800d3c0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	699b      	ldr	r3, [r3, #24]
 800d3b8:	f043 0210 	orr.w	r2, r3, #16
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	699a      	ldr	r2, [r3, #24]
 800d3c4:	4b0a      	ldr	r3, [pc, #40]	@ (800d3f0 <USB_HostInit+0x184>)
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800d3cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3718      	adds	r7, #24
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d3d8:	b004      	add	sp, #16
 800d3da:	4770      	bx	lr
 800d3dc:	40040000 	.word	0x40040000
 800d3e0:	01000200 	.word	0x01000200
 800d3e4:	00e00300 	.word	0x00e00300
 800d3e8:	00600080 	.word	0x00600080
 800d3ec:	004000e0 	.word	0x004000e0
 800d3f0:	a3200008 	.word	0xa3200008

0800d3f4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b085      	sub	sp, #20
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	460b      	mov	r3, r1
 800d3fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	68fa      	ldr	r2, [r7, #12]
 800d40e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d412:	f023 0303 	bic.w	r3, r3, #3
 800d416:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d41e:	681a      	ldr	r2, [r3, #0]
 800d420:	78fb      	ldrb	r3, [r7, #3]
 800d422:	f003 0303 	and.w	r3, r3, #3
 800d426:	68f9      	ldr	r1, [r7, #12]
 800d428:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800d42c:	4313      	orrs	r3, r2
 800d42e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d430:	78fb      	ldrb	r3, [r7, #3]
 800d432:	2b01      	cmp	r3, #1
 800d434:	d107      	bne.n	800d446 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d43c:	461a      	mov	r2, r3
 800d43e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d442:	6053      	str	r3, [r2, #4]
 800d444:	e00c      	b.n	800d460 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800d446:	78fb      	ldrb	r3, [r7, #3]
 800d448:	2b02      	cmp	r3, #2
 800d44a:	d107      	bne.n	800d45c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d452:	461a      	mov	r2, r3
 800d454:	f241 7370 	movw	r3, #6000	@ 0x1770
 800d458:	6053      	str	r3, [r2, #4]
 800d45a:	e001      	b.n	800d460 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800d45c:	2301      	movs	r3, #1
 800d45e:	e000      	b.n	800d462 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800d460:	2300      	movs	r3, #0
}
 800d462:	4618      	mov	r0, r3
 800d464:	3714      	adds	r7, #20
 800d466:	46bd      	mov	sp, r7
 800d468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46c:	4770      	bx	lr

0800d46e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800d46e:	b580      	push	{r7, lr}
 800d470:	b084      	sub	sp, #16
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d47a:	2300      	movs	r3, #0
 800d47c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800d48e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	68fa      	ldr	r2, [r7, #12]
 800d494:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800d498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d49c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d49e:	2064      	movs	r0, #100	@ 0x64
 800d4a0:	f7f7 fce4 	bl	8004e6c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	68fa      	ldr	r2, [r7, #12]
 800d4a8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800d4ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d4b0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d4b2:	200a      	movs	r0, #10
 800d4b4:	f7f7 fcda 	bl	8004e6c <HAL_Delay>

  return HAL_OK;
 800d4b8:	2300      	movs	r3, #0
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3710      	adds	r7, #16
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}

0800d4c2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d4c2:	b480      	push	{r7}
 800d4c4:	b085      	sub	sp, #20
 800d4c6:	af00      	add	r7, sp, #0
 800d4c8:	6078      	str	r0, [r7, #4]
 800d4ca:	460b      	mov	r3, r1
 800d4cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800d4e6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d109      	bne.n	800d506 <USB_DriveVbus+0x44>
 800d4f2:	78fb      	ldrb	r3, [r7, #3]
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d106      	bne.n	800d506 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	68fa      	ldr	r2, [r7, #12]
 800d4fc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800d500:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d504:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d50c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d510:	d109      	bne.n	800d526 <USB_DriveVbus+0x64>
 800d512:	78fb      	ldrb	r3, [r7, #3]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d106      	bne.n	800d526 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	68fa      	ldr	r2, [r7, #12]
 800d51c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800d520:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d524:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d526:	2300      	movs	r3, #0
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3714      	adds	r7, #20
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr

0800d534 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800d534:	b480      	push	{r7}
 800d536:	b085      	sub	sp, #20
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d540:	2300      	movs	r3, #0
 800d542:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	0c5b      	lsrs	r3, r3, #17
 800d552:	f003 0303 	and.w	r3, r3, #3
}
 800d556:	4618      	mov	r0, r3
 800d558:	3714      	adds	r7, #20
 800d55a:	46bd      	mov	sp, r7
 800d55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d560:	4770      	bx	lr

0800d562 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800d562:	b480      	push	{r7}
 800d564:	b085      	sub	sp, #20
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d574:	689b      	ldr	r3, [r3, #8]
 800d576:	b29b      	uxth	r3, r3
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3714      	adds	r7, #20
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b088      	sub	sp, #32
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	4608      	mov	r0, r1
 800d58e:	4611      	mov	r1, r2
 800d590:	461a      	mov	r2, r3
 800d592:	4603      	mov	r3, r0
 800d594:	70fb      	strb	r3, [r7, #3]
 800d596:	460b      	mov	r3, r1
 800d598:	70bb      	strb	r3, [r7, #2]
 800d59a:	4613      	mov	r3, r2
 800d59c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800d5a6:	78fb      	ldrb	r3, [r7, #3]
 800d5a8:	015a      	lsls	r2, r3, #5
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	4413      	add	r3, r2
 800d5ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d5b8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d5ba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d5be:	2b03      	cmp	r3, #3
 800d5c0:	d87c      	bhi.n	800d6bc <USB_HC_Init+0x138>
 800d5c2:	a201      	add	r2, pc, #4	@ (adr r2, 800d5c8 <USB_HC_Init+0x44>)
 800d5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c8:	0800d5d9 	.word	0x0800d5d9
 800d5cc:	0800d67f 	.word	0x0800d67f
 800d5d0:	0800d5d9 	.word	0x0800d5d9
 800d5d4:	0800d641 	.word	0x0800d641
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d5d8:	78fb      	ldrb	r3, [r7, #3]
 800d5da:	015a      	lsls	r2, r3, #5
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	4413      	add	r3, r2
 800d5e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	f240 439d 	movw	r3, #1181	@ 0x49d
 800d5ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d5ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	da10      	bge.n	800d616 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d5f4:	78fb      	ldrb	r3, [r7, #3]
 800d5f6:	015a      	lsls	r2, r3, #5
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	4413      	add	r3, r2
 800d5fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d600:	68db      	ldr	r3, [r3, #12]
 800d602:	78fa      	ldrb	r2, [r7, #3]
 800d604:	0151      	lsls	r1, r2, #5
 800d606:	693a      	ldr	r2, [r7, #16]
 800d608:	440a      	add	r2, r1
 800d60a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d60e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d612:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800d614:	e055      	b.n	800d6c2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	4a6f      	ldr	r2, [pc, #444]	@ (800d7d8 <USB_HC_Init+0x254>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d151      	bne.n	800d6c2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800d61e:	78fb      	ldrb	r3, [r7, #3]
 800d620:	015a      	lsls	r2, r3, #5
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	4413      	add	r3, r2
 800d626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d62a:	68db      	ldr	r3, [r3, #12]
 800d62c:	78fa      	ldrb	r2, [r7, #3]
 800d62e:	0151      	lsls	r1, r2, #5
 800d630:	693a      	ldr	r2, [r7, #16]
 800d632:	440a      	add	r2, r1
 800d634:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d638:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800d63c:	60d3      	str	r3, [r2, #12]
      break;
 800d63e:	e040      	b.n	800d6c2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d640:	78fb      	ldrb	r3, [r7, #3]
 800d642:	015a      	lsls	r2, r3, #5
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	4413      	add	r3, r2
 800d648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d64c:	461a      	mov	r2, r3
 800d64e:	f240 639d 	movw	r3, #1693	@ 0x69d
 800d652:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d654:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	da34      	bge.n	800d6c6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d65c:	78fb      	ldrb	r3, [r7, #3]
 800d65e:	015a      	lsls	r2, r3, #5
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	4413      	add	r3, r2
 800d664:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d668:	68db      	ldr	r3, [r3, #12]
 800d66a:	78fa      	ldrb	r2, [r7, #3]
 800d66c:	0151      	lsls	r1, r2, #5
 800d66e:	693a      	ldr	r2, [r7, #16]
 800d670:	440a      	add	r2, r1
 800d672:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d67a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d67c:	e023      	b.n	800d6c6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d67e:	78fb      	ldrb	r3, [r7, #3]
 800d680:	015a      	lsls	r2, r3, #5
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	4413      	add	r3, r2
 800d686:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d68a:	461a      	mov	r2, r3
 800d68c:	f240 2325 	movw	r3, #549	@ 0x225
 800d690:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d692:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d696:	2b00      	cmp	r3, #0
 800d698:	da17      	bge.n	800d6ca <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d69a:	78fb      	ldrb	r3, [r7, #3]
 800d69c:	015a      	lsls	r2, r3, #5
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	4413      	add	r3, r2
 800d6a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	78fa      	ldrb	r2, [r7, #3]
 800d6aa:	0151      	lsls	r1, r2, #5
 800d6ac:	693a      	ldr	r2, [r7, #16]
 800d6ae:	440a      	add	r2, r1
 800d6b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d6b4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800d6b8:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d6ba:	e006      	b.n	800d6ca <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	77fb      	strb	r3, [r7, #31]
      break;
 800d6c0:	e004      	b.n	800d6cc <USB_HC_Init+0x148>
      break;
 800d6c2:	bf00      	nop
 800d6c4:	e002      	b.n	800d6cc <USB_HC_Init+0x148>
      break;
 800d6c6:	bf00      	nop
 800d6c8:	e000      	b.n	800d6cc <USB_HC_Init+0x148>
      break;
 800d6ca:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800d6cc:	78fb      	ldrb	r3, [r7, #3]
 800d6ce:	015a      	lsls	r2, r3, #5
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	4413      	add	r3, r2
 800d6d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d6d8:	461a      	mov	r2, r3
 800d6da:	2300      	movs	r3, #0
 800d6dc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800d6de:	78fb      	ldrb	r3, [r7, #3]
 800d6e0:	015a      	lsls	r2, r3, #5
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	4413      	add	r3, r2
 800d6e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	78fa      	ldrb	r2, [r7, #3]
 800d6ee:	0151      	lsls	r1, r2, #5
 800d6f0:	693a      	ldr	r2, [r7, #16]
 800d6f2:	440a      	add	r2, r1
 800d6f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d6f8:	f043 0302 	orr.w	r3, r3, #2
 800d6fc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d704:	699a      	ldr	r2, [r3, #24]
 800d706:	78fb      	ldrb	r3, [r7, #3]
 800d708:	f003 030f 	and.w	r3, r3, #15
 800d70c:	2101      	movs	r1, #1
 800d70e:	fa01 f303 	lsl.w	r3, r1, r3
 800d712:	6939      	ldr	r1, [r7, #16]
 800d714:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800d718:	4313      	orrs	r3, r2
 800d71a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	699b      	ldr	r3, [r3, #24]
 800d720:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d728:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	da03      	bge.n	800d738 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d730:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d734:	61bb      	str	r3, [r7, #24]
 800d736:	e001      	b.n	800d73c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800d738:	2300      	movs	r3, #0
 800d73a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f7ff fef9 	bl	800d534 <USB_GetHostSpeed>
 800d742:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800d744:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d748:	2b02      	cmp	r3, #2
 800d74a:	d106      	bne.n	800d75a <USB_HC_Init+0x1d6>
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2b02      	cmp	r3, #2
 800d750:	d003      	beq.n	800d75a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d752:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d756:	617b      	str	r3, [r7, #20]
 800d758:	e001      	b.n	800d75e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d75a:	2300      	movs	r3, #0
 800d75c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d75e:	787b      	ldrb	r3, [r7, #1]
 800d760:	059b      	lsls	r3, r3, #22
 800d762:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d766:	78bb      	ldrb	r3, [r7, #2]
 800d768:	02db      	lsls	r3, r3, #11
 800d76a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d76e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d770:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d774:	049b      	lsls	r3, r3, #18
 800d776:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d77a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800d77c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d77e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d782:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800d784:	69bb      	ldr	r3, [r7, #24]
 800d786:	431a      	orrs	r2, r3
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d78c:	78fa      	ldrb	r2, [r7, #3]
 800d78e:	0151      	lsls	r1, r2, #5
 800d790:	693a      	ldr	r2, [r7, #16]
 800d792:	440a      	add	r2, r1
 800d794:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800d798:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d79c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800d79e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d7a2:	2b03      	cmp	r3, #3
 800d7a4:	d003      	beq.n	800d7ae <USB_HC_Init+0x22a>
 800d7a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d7aa:	2b01      	cmp	r3, #1
 800d7ac:	d10f      	bne.n	800d7ce <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800d7ae:	78fb      	ldrb	r3, [r7, #3]
 800d7b0:	015a      	lsls	r2, r3, #5
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	4413      	add	r3, r2
 800d7b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	78fa      	ldrb	r2, [r7, #3]
 800d7be:	0151      	lsls	r1, r2, #5
 800d7c0:	693a      	ldr	r2, [r7, #16]
 800d7c2:	440a      	add	r2, r1
 800d7c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d7c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d7cc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d7ce:	7ffb      	ldrb	r3, [r7, #31]
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3720      	adds	r7, #32
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}
 800d7d8:	40040000 	.word	0x40040000

0800d7dc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b08c      	sub	sp, #48	@ 0x30
 800d7e0:	af02      	add	r7, sp, #8
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	4613      	mov	r3, r2
 800d7e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	785b      	ldrb	r3, [r3, #1]
 800d7f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800d7f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d7f8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	4a5d      	ldr	r2, [pc, #372]	@ (800d974 <USB_HC_StartXfer+0x198>)
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d12f      	bne.n	800d862 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800d802:	79fb      	ldrb	r3, [r7, #7]
 800d804:	2b01      	cmp	r3, #1
 800d806:	d11c      	bne.n	800d842 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	7c9b      	ldrb	r3, [r3, #18]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d003      	beq.n	800d818 <USB_HC_StartXfer+0x3c>
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	7c9b      	ldrb	r3, [r3, #18]
 800d814:	2b02      	cmp	r3, #2
 800d816:	d124      	bne.n	800d862 <USB_HC_StartXfer+0x86>
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	799b      	ldrb	r3, [r3, #6]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d120      	bne.n	800d862 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	015a      	lsls	r2, r3, #5
 800d824:	6a3b      	ldr	r3, [r7, #32]
 800d826:	4413      	add	r3, r2
 800d828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d82c:	68db      	ldr	r3, [r3, #12]
 800d82e:	69fa      	ldr	r2, [r7, #28]
 800d830:	0151      	lsls	r1, r2, #5
 800d832:	6a3a      	ldr	r2, [r7, #32]
 800d834:	440a      	add	r2, r1
 800d836:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d83a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d83e:	60d3      	str	r3, [r2, #12]
 800d840:	e00f      	b.n	800d862 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	791b      	ldrb	r3, [r3, #4]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d10b      	bne.n	800d862 <USB_HC_StartXfer+0x86>
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	795b      	ldrb	r3, [r3, #5]
 800d84e:	2b01      	cmp	r3, #1
 800d850:	d107      	bne.n	800d862 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	785b      	ldrb	r3, [r3, #1]
 800d856:	4619      	mov	r1, r3
 800d858:	68f8      	ldr	r0, [r7, #12]
 800d85a:	f000 fb6b 	bl	800df34 <USB_DoPing>
        return HAL_OK;
 800d85e:	2300      	movs	r3, #0
 800d860:	e232      	b.n	800dcc8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	799b      	ldrb	r3, [r3, #6]
 800d866:	2b01      	cmp	r3, #1
 800d868:	d158      	bne.n	800d91c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800d86a:	2301      	movs	r3, #1
 800d86c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	78db      	ldrb	r3, [r3, #3]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d007      	beq.n	800d886 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d876:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d878:	68ba      	ldr	r2, [r7, #8]
 800d87a:	8a92      	ldrh	r2, [r2, #20]
 800d87c:	fb03 f202 	mul.w	r2, r3, r2
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	61da      	str	r2, [r3, #28]
 800d884:	e07c      	b.n	800d980 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	7c9b      	ldrb	r3, [r3, #18]
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d130      	bne.n	800d8f0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	6a1b      	ldr	r3, [r3, #32]
 800d892:	2bbc      	cmp	r3, #188	@ 0xbc
 800d894:	d918      	bls.n	800d8c8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	8a9b      	ldrh	r3, [r3, #20]
 800d89a:	461a      	mov	r2, r3
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	69da      	ldr	r2, [r3, #28]
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	68db      	ldr	r3, [r3, #12]
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	d003      	beq.n	800d8b8 <USB_HC_StartXfer+0xdc>
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	68db      	ldr	r3, [r3, #12]
 800d8b4:	2b02      	cmp	r3, #2
 800d8b6:	d103      	bne.n	800d8c0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	2202      	movs	r2, #2
 800d8bc:	60da      	str	r2, [r3, #12]
 800d8be:	e05f      	b.n	800d980 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	60da      	str	r2, [r3, #12]
 800d8c6:	e05b      	b.n	800d980 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	6a1a      	ldr	r2, [r3, #32]
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	68db      	ldr	r3, [r3, #12]
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d007      	beq.n	800d8e8 <USB_HC_StartXfer+0x10c>
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	68db      	ldr	r3, [r3, #12]
 800d8dc:	2b02      	cmp	r3, #2
 800d8de:	d003      	beq.n	800d8e8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	2204      	movs	r2, #4
 800d8e4:	60da      	str	r2, [r3, #12]
 800d8e6:	e04b      	b.n	800d980 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	2203      	movs	r2, #3
 800d8ec:	60da      	str	r2, [r3, #12]
 800d8ee:	e047      	b.n	800d980 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800d8f0:	79fb      	ldrb	r3, [r7, #7]
 800d8f2:	2b01      	cmp	r3, #1
 800d8f4:	d10d      	bne.n	800d912 <USB_HC_StartXfer+0x136>
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	6a1b      	ldr	r3, [r3, #32]
 800d8fa:	68ba      	ldr	r2, [r7, #8]
 800d8fc:	8a92      	ldrh	r2, [r2, #20]
 800d8fe:	4293      	cmp	r3, r2
 800d900:	d907      	bls.n	800d912 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d902:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d904:	68ba      	ldr	r2, [r7, #8]
 800d906:	8a92      	ldrh	r2, [r2, #20]
 800d908:	fb03 f202 	mul.w	r2, r3, r2
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	61da      	str	r2, [r3, #28]
 800d910:	e036      	b.n	800d980 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	6a1a      	ldr	r2, [r3, #32]
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	61da      	str	r2, [r3, #28]
 800d91a:	e031      	b.n	800d980 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	6a1b      	ldr	r3, [r3, #32]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d018      	beq.n	800d956 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	6a1b      	ldr	r3, [r3, #32]
 800d928:	68ba      	ldr	r2, [r7, #8]
 800d92a:	8a92      	ldrh	r2, [r2, #20]
 800d92c:	4413      	add	r3, r2
 800d92e:	3b01      	subs	r3, #1
 800d930:	68ba      	ldr	r2, [r7, #8]
 800d932:	8a92      	ldrh	r2, [r2, #20]
 800d934:	fbb3 f3f2 	udiv	r3, r3, r2
 800d938:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800d93a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d93c:	8b7b      	ldrh	r3, [r7, #26]
 800d93e:	429a      	cmp	r2, r3
 800d940:	d90b      	bls.n	800d95a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800d942:	8b7b      	ldrh	r3, [r7, #26]
 800d944:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d946:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d948:	68ba      	ldr	r2, [r7, #8]
 800d94a:	8a92      	ldrh	r2, [r2, #20]
 800d94c:	fb03 f202 	mul.w	r2, r3, r2
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	61da      	str	r2, [r3, #28]
 800d954:	e001      	b.n	800d95a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800d956:	2301      	movs	r3, #1
 800d958:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	78db      	ldrb	r3, [r3, #3]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d00a      	beq.n	800d978 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d962:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d964:	68ba      	ldr	r2, [r7, #8]
 800d966:	8a92      	ldrh	r2, [r2, #20]
 800d968:	fb03 f202 	mul.w	r2, r3, r2
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	61da      	str	r2, [r3, #28]
 800d970:	e006      	b.n	800d980 <USB_HC_StartXfer+0x1a4>
 800d972:	bf00      	nop
 800d974:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	6a1a      	ldr	r2, [r3, #32]
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	69db      	ldr	r3, [r3, #28]
 800d984:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d988:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d98a:	04d9      	lsls	r1, r3, #19
 800d98c:	4ba3      	ldr	r3, [pc, #652]	@ (800dc1c <USB_HC_StartXfer+0x440>)
 800d98e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d990:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	7d9b      	ldrb	r3, [r3, #22]
 800d996:	075b      	lsls	r3, r3, #29
 800d998:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d99c:	69f9      	ldr	r1, [r7, #28]
 800d99e:	0148      	lsls	r0, r1, #5
 800d9a0:	6a39      	ldr	r1, [r7, #32]
 800d9a2:	4401      	add	r1, r0
 800d9a4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d9a8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d9aa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d9ac:	79fb      	ldrb	r3, [r7, #7]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d009      	beq.n	800d9c6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	6999      	ldr	r1, [r3, #24]
 800d9b6:	69fb      	ldr	r3, [r7, #28]
 800d9b8:	015a      	lsls	r2, r3, #5
 800d9ba:	6a3b      	ldr	r3, [r7, #32]
 800d9bc:	4413      	add	r3, r2
 800d9be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d9c2:	460a      	mov	r2, r1
 800d9c4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d9c6:	6a3b      	ldr	r3, [r7, #32]
 800d9c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d9cc:	689b      	ldr	r3, [r3, #8]
 800d9ce:	f003 0301 	and.w	r3, r3, #1
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	bf0c      	ite	eq
 800d9d6:	2301      	moveq	r3, #1
 800d9d8:	2300      	movne	r3, #0
 800d9da:	b2db      	uxtb	r3, r3
 800d9dc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	015a      	lsls	r2, r3, #5
 800d9e2:	6a3b      	ldr	r3, [r7, #32]
 800d9e4:	4413      	add	r3, r2
 800d9e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	69fa      	ldr	r2, [r7, #28]
 800d9ee:	0151      	lsls	r1, r2, #5
 800d9f0:	6a3a      	ldr	r2, [r7, #32]
 800d9f2:	440a      	add	r2, r1
 800d9f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d9f8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d9fc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	015a      	lsls	r2, r3, #5
 800da02:	6a3b      	ldr	r3, [r7, #32]
 800da04:	4413      	add	r3, r2
 800da06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800da0a:	681a      	ldr	r2, [r3, #0]
 800da0c:	7e7b      	ldrb	r3, [r7, #25]
 800da0e:	075b      	lsls	r3, r3, #29
 800da10:	69f9      	ldr	r1, [r7, #28]
 800da12:	0148      	lsls	r0, r1, #5
 800da14:	6a39      	ldr	r1, [r7, #32]
 800da16:	4401      	add	r1, r0
 800da18:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800da1c:	4313      	orrs	r3, r2
 800da1e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	799b      	ldrb	r3, [r3, #6]
 800da24:	2b01      	cmp	r3, #1
 800da26:	f040 80c3 	bne.w	800dbb0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	7c5b      	ldrb	r3, [r3, #17]
 800da2e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800da30:	68ba      	ldr	r2, [r7, #8]
 800da32:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800da34:	4313      	orrs	r3, r2
 800da36:	69fa      	ldr	r2, [r7, #28]
 800da38:	0151      	lsls	r1, r2, #5
 800da3a:	6a3a      	ldr	r2, [r7, #32]
 800da3c:	440a      	add	r2, r1
 800da3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800da42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800da46:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800da48:	69fb      	ldr	r3, [r7, #28]
 800da4a:	015a      	lsls	r2, r3, #5
 800da4c:	6a3b      	ldr	r3, [r7, #32]
 800da4e:	4413      	add	r3, r2
 800da50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800da54:	68db      	ldr	r3, [r3, #12]
 800da56:	69fa      	ldr	r2, [r7, #28]
 800da58:	0151      	lsls	r1, r2, #5
 800da5a:	6a3a      	ldr	r2, [r7, #32]
 800da5c:	440a      	add	r2, r1
 800da5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800da62:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800da66:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	79db      	ldrb	r3, [r3, #7]
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d123      	bne.n	800dab8 <USB_HC_StartXfer+0x2dc>
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	78db      	ldrb	r3, [r3, #3]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d11f      	bne.n	800dab8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800da78:	69fb      	ldr	r3, [r7, #28]
 800da7a:	015a      	lsls	r2, r3, #5
 800da7c:	6a3b      	ldr	r3, [r7, #32]
 800da7e:	4413      	add	r3, r2
 800da80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800da84:	685b      	ldr	r3, [r3, #4]
 800da86:	69fa      	ldr	r2, [r7, #28]
 800da88:	0151      	lsls	r1, r2, #5
 800da8a:	6a3a      	ldr	r2, [r7, #32]
 800da8c:	440a      	add	r2, r1
 800da8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800da92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800da96:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800da98:	69fb      	ldr	r3, [r7, #28]
 800da9a:	015a      	lsls	r2, r3, #5
 800da9c:	6a3b      	ldr	r3, [r7, #32]
 800da9e:	4413      	add	r3, r2
 800daa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800daa4:	68db      	ldr	r3, [r3, #12]
 800daa6:	69fa      	ldr	r2, [r7, #28]
 800daa8:	0151      	lsls	r1, r2, #5
 800daaa:	6a3a      	ldr	r2, [r7, #32]
 800daac:	440a      	add	r2, r1
 800daae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dab6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	7c9b      	ldrb	r3, [r3, #18]
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d003      	beq.n	800dac8 <USB_HC_StartXfer+0x2ec>
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	7c9b      	ldrb	r3, [r3, #18]
 800dac4:	2b03      	cmp	r3, #3
 800dac6:	d117      	bne.n	800daf8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d113      	bne.n	800daf8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	78db      	ldrb	r3, [r3, #3]
 800dad4:	2b01      	cmp	r3, #1
 800dad6:	d10f      	bne.n	800daf8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800dad8:	69fb      	ldr	r3, [r7, #28]
 800dada:	015a      	lsls	r2, r3, #5
 800dadc:	6a3b      	ldr	r3, [r7, #32]
 800dade:	4413      	add	r3, r2
 800dae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	69fa      	ldr	r2, [r7, #28]
 800dae8:	0151      	lsls	r1, r2, #5
 800daea:	6a3a      	ldr	r2, [r7, #32]
 800daec:	440a      	add	r2, r1
 800daee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800daf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800daf6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	7c9b      	ldrb	r3, [r3, #18]
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d162      	bne.n	800dbc6 <USB_HC_StartXfer+0x3ea>
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	78db      	ldrb	r3, [r3, #3]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d15e      	bne.n	800dbc6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	68db      	ldr	r3, [r3, #12]
 800db0c:	3b01      	subs	r3, #1
 800db0e:	2b03      	cmp	r3, #3
 800db10:	d858      	bhi.n	800dbc4 <USB_HC_StartXfer+0x3e8>
 800db12:	a201      	add	r2, pc, #4	@ (adr r2, 800db18 <USB_HC_StartXfer+0x33c>)
 800db14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db18:	0800db29 	.word	0x0800db29
 800db1c:	0800db4b 	.word	0x0800db4b
 800db20:	0800db6d 	.word	0x0800db6d
 800db24:	0800db8f 	.word	0x0800db8f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800db28:	69fb      	ldr	r3, [r7, #28]
 800db2a:	015a      	lsls	r2, r3, #5
 800db2c:	6a3b      	ldr	r3, [r7, #32]
 800db2e:	4413      	add	r3, r2
 800db30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	69fa      	ldr	r2, [r7, #28]
 800db38:	0151      	lsls	r1, r2, #5
 800db3a:	6a3a      	ldr	r2, [r7, #32]
 800db3c:	440a      	add	r2, r1
 800db3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800db42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db46:	6053      	str	r3, [r2, #4]
          break;
 800db48:	e03d      	b.n	800dbc6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	015a      	lsls	r2, r3, #5
 800db4e:	6a3b      	ldr	r3, [r7, #32]
 800db50:	4413      	add	r3, r2
 800db52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	69fa      	ldr	r2, [r7, #28]
 800db5a:	0151      	lsls	r1, r2, #5
 800db5c:	6a3a      	ldr	r2, [r7, #32]
 800db5e:	440a      	add	r2, r1
 800db60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800db64:	f043 030e 	orr.w	r3, r3, #14
 800db68:	6053      	str	r3, [r2, #4]
          break;
 800db6a:	e02c      	b.n	800dbc6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800db6c:	69fb      	ldr	r3, [r7, #28]
 800db6e:	015a      	lsls	r2, r3, #5
 800db70:	6a3b      	ldr	r3, [r7, #32]
 800db72:	4413      	add	r3, r2
 800db74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	69fa      	ldr	r2, [r7, #28]
 800db7c:	0151      	lsls	r1, r2, #5
 800db7e:	6a3a      	ldr	r2, [r7, #32]
 800db80:	440a      	add	r2, r1
 800db82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800db86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800db8a:	6053      	str	r3, [r2, #4]
          break;
 800db8c:	e01b      	b.n	800dbc6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800db8e:	69fb      	ldr	r3, [r7, #28]
 800db90:	015a      	lsls	r2, r3, #5
 800db92:	6a3b      	ldr	r3, [r7, #32]
 800db94:	4413      	add	r3, r2
 800db96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	69fa      	ldr	r2, [r7, #28]
 800db9e:	0151      	lsls	r1, r2, #5
 800dba0:	6a3a      	ldr	r2, [r7, #32]
 800dba2:	440a      	add	r2, r1
 800dba4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dba8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dbac:	6053      	str	r3, [r2, #4]
          break;
 800dbae:	e00a      	b.n	800dbc6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800dbb0:	69fb      	ldr	r3, [r7, #28]
 800dbb2:	015a      	lsls	r2, r3, #5
 800dbb4:	6a3b      	ldr	r3, [r7, #32]
 800dbb6:	4413      	add	r3, r2
 800dbb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dbbc:	461a      	mov	r2, r3
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	6053      	str	r3, [r2, #4]
 800dbc2:	e000      	b.n	800dbc6 <USB_HC_StartXfer+0x3ea>
          break;
 800dbc4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800dbc6:	69fb      	ldr	r3, [r7, #28]
 800dbc8:	015a      	lsls	r2, r3, #5
 800dbca:	6a3b      	ldr	r3, [r7, #32]
 800dbcc:	4413      	add	r3, r2
 800dbce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800dbdc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	78db      	ldrb	r3, [r3, #3]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d004      	beq.n	800dbf0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dbec:	613b      	str	r3, [r7, #16]
 800dbee:	e003      	b.n	800dbf8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800dbf6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800dbfe:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	015a      	lsls	r2, r3, #5
 800dc04:	6a3b      	ldr	r3, [r7, #32]
 800dc06:	4413      	add	r3, r2
 800dc08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	693b      	ldr	r3, [r7, #16]
 800dc10:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800dc12:	79fb      	ldrb	r3, [r7, #7]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d003      	beq.n	800dc20 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	e055      	b.n	800dcc8 <USB_HC_StartXfer+0x4ec>
 800dc1c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	78db      	ldrb	r3, [r3, #3]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d14e      	bne.n	800dcc6 <USB_HC_StartXfer+0x4ea>
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	6a1b      	ldr	r3, [r3, #32]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d04a      	beq.n	800dcc6 <USB_HC_StartXfer+0x4ea>
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	79db      	ldrb	r3, [r3, #7]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d146      	bne.n	800dcc6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	7c9b      	ldrb	r3, [r3, #18]
 800dc3c:	2b03      	cmp	r3, #3
 800dc3e:	d831      	bhi.n	800dca4 <USB_HC_StartXfer+0x4c8>
 800dc40:	a201      	add	r2, pc, #4	@ (adr r2, 800dc48 <USB_HC_StartXfer+0x46c>)
 800dc42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc46:	bf00      	nop
 800dc48:	0800dc59 	.word	0x0800dc59
 800dc4c:	0800dc7d 	.word	0x0800dc7d
 800dc50:	0800dc59 	.word	0x0800dc59
 800dc54:	0800dc7d 	.word	0x0800dc7d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	6a1b      	ldr	r3, [r3, #32]
 800dc5c:	3303      	adds	r3, #3
 800dc5e:	089b      	lsrs	r3, r3, #2
 800dc60:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800dc62:	8afa      	ldrh	r2, [r7, #22]
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc68:	b29b      	uxth	r3, r3
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d91c      	bls.n	800dca8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	699b      	ldr	r3, [r3, #24]
 800dc72:	f043 0220 	orr.w	r2, r3, #32
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	619a      	str	r2, [r3, #24]
        }
        break;
 800dc7a:	e015      	b.n	800dca8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	6a1b      	ldr	r3, [r3, #32]
 800dc80:	3303      	adds	r3, #3
 800dc82:	089b      	lsrs	r3, r3, #2
 800dc84:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800dc86:	8afa      	ldrh	r2, [r7, #22]
 800dc88:	6a3b      	ldr	r3, [r7, #32]
 800dc8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dc8e:	691b      	ldr	r3, [r3, #16]
 800dc90:	b29b      	uxth	r3, r3
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d90a      	bls.n	800dcac <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	699b      	ldr	r3, [r3, #24]
 800dc9a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	619a      	str	r2, [r3, #24]
        }
        break;
 800dca2:	e003      	b.n	800dcac <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800dca4:	bf00      	nop
 800dca6:	e002      	b.n	800dcae <USB_HC_StartXfer+0x4d2>
        break;
 800dca8:	bf00      	nop
 800dcaa:	e000      	b.n	800dcae <USB_HC_StartXfer+0x4d2>
        break;
 800dcac:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	6999      	ldr	r1, [r3, #24]
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	785a      	ldrb	r2, [r3, #1]
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	6a1b      	ldr	r3, [r3, #32]
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	2000      	movs	r0, #0
 800dcbe:	9000      	str	r0, [sp, #0]
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	f7ff f9c9 	bl	800d058 <USB_WritePacket>
  }

  return HAL_OK;
 800dcc6:	2300      	movs	r3, #0
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3728      	adds	r7, #40	@ 0x28
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b085      	sub	sp, #20
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dce2:	695b      	ldr	r3, [r3, #20]
 800dce4:	b29b      	uxth	r3, r3
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3714      	adds	r7, #20
 800dcea:	46bd      	mov	sp, r7
 800dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf0:	4770      	bx	lr

0800dcf2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800dcf2:	b480      	push	{r7}
 800dcf4:	b089      	sub	sp, #36	@ 0x24
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6078      	str	r0, [r7, #4]
 800dcfa:	460b      	mov	r3, r1
 800dcfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800dd02:	78fb      	ldrb	r3, [r7, #3]
 800dd04:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800dd06:	2300      	movs	r3, #0
 800dd08:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	015a      	lsls	r2, r3, #5
 800dd0e:	69fb      	ldr	r3, [r7, #28]
 800dd10:	4413      	add	r3, r2
 800dd12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	0c9b      	lsrs	r3, r3, #18
 800dd1a:	f003 0303 	and.w	r3, r3, #3
 800dd1e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800dd20:	69bb      	ldr	r3, [r7, #24]
 800dd22:	015a      	lsls	r2, r3, #5
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	4413      	add	r3, r2
 800dd28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	0fdb      	lsrs	r3, r3, #31
 800dd30:	f003 0301 	and.w	r3, r3, #1
 800dd34:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800dd36:	69bb      	ldr	r3, [r7, #24]
 800dd38:	015a      	lsls	r2, r3, #5
 800dd3a:	69fb      	ldr	r3, [r7, #28]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	0fdb      	lsrs	r3, r3, #31
 800dd46:	f003 0301 	and.w	r3, r3, #1
 800dd4a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	689b      	ldr	r3, [r3, #8]
 800dd50:	f003 0320 	and.w	r3, r3, #32
 800dd54:	2b20      	cmp	r3, #32
 800dd56:	d10d      	bne.n	800dd74 <USB_HC_Halt+0x82>
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d10a      	bne.n	800dd74 <USB_HC_Halt+0x82>
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d005      	beq.n	800dd70 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	2b01      	cmp	r3, #1
 800dd68:	d002      	beq.n	800dd70 <USB_HC_Halt+0x7e>
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	2b03      	cmp	r3, #3
 800dd6e:	d101      	bne.n	800dd74 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800dd70:	2300      	movs	r3, #0
 800dd72:	e0d8      	b.n	800df26 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d002      	beq.n	800dd80 <USB_HC_Halt+0x8e>
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	2b02      	cmp	r3, #2
 800dd7e:	d173      	bne.n	800de68 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800dd80:	69bb      	ldr	r3, [r7, #24]
 800dd82:	015a      	lsls	r2, r3, #5
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	4413      	add	r3, r2
 800dd88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	69ba      	ldr	r2, [r7, #24]
 800dd90:	0151      	lsls	r1, r2, #5
 800dd92:	69fa      	ldr	r2, [r7, #28]
 800dd94:	440a      	add	r2, r1
 800dd96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dd9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dd9e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	689b      	ldr	r3, [r3, #8]
 800dda4:	f003 0320 	and.w	r3, r3, #32
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d14a      	bne.n	800de42 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddb0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d133      	bne.n	800de20 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ddb8:	69bb      	ldr	r3, [r7, #24]
 800ddba:	015a      	lsls	r2, r3, #5
 800ddbc:	69fb      	ldr	r3, [r7, #28]
 800ddbe:	4413      	add	r3, r2
 800ddc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	69ba      	ldr	r2, [r7, #24]
 800ddc8:	0151      	lsls	r1, r2, #5
 800ddca:	69fa      	ldr	r2, [r7, #28]
 800ddcc:	440a      	add	r2, r1
 800ddce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ddd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ddd6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ddd8:	69bb      	ldr	r3, [r7, #24]
 800ddda:	015a      	lsls	r2, r3, #5
 800dddc:	69fb      	ldr	r3, [r7, #28]
 800ddde:	4413      	add	r3, r2
 800dde0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	69ba      	ldr	r2, [r7, #24]
 800dde8:	0151      	lsls	r1, r2, #5
 800ddea:	69fa      	ldr	r2, [r7, #28]
 800ddec:	440a      	add	r2, r1
 800ddee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ddf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ddf6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800de04:	d82e      	bhi.n	800de64 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800de06:	69bb      	ldr	r3, [r7, #24]
 800de08:	015a      	lsls	r2, r3, #5
 800de0a:	69fb      	ldr	r3, [r7, #28]
 800de0c:	4413      	add	r3, r2
 800de0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800de18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800de1c:	d0ec      	beq.n	800ddf8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800de1e:	e081      	b.n	800df24 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800de20:	69bb      	ldr	r3, [r7, #24]
 800de22:	015a      	lsls	r2, r3, #5
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	4413      	add	r3, r2
 800de28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	69ba      	ldr	r2, [r7, #24]
 800de30:	0151      	lsls	r1, r2, #5
 800de32:	69fa      	ldr	r2, [r7, #28]
 800de34:	440a      	add	r2, r1
 800de36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800de3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800de3e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800de40:	e070      	b.n	800df24 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800de42:	69bb      	ldr	r3, [r7, #24]
 800de44:	015a      	lsls	r2, r3, #5
 800de46:	69fb      	ldr	r3, [r7, #28]
 800de48:	4413      	add	r3, r2
 800de4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	69ba      	ldr	r2, [r7, #24]
 800de52:	0151      	lsls	r1, r2, #5
 800de54:	69fa      	ldr	r2, [r7, #28]
 800de56:	440a      	add	r2, r1
 800de58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800de5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800de60:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800de62:	e05f      	b.n	800df24 <USB_HC_Halt+0x232>
            break;
 800de64:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800de66:	e05d      	b.n	800df24 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800de68:	69bb      	ldr	r3, [r7, #24]
 800de6a:	015a      	lsls	r2, r3, #5
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	4413      	add	r3, r2
 800de70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	69ba      	ldr	r2, [r7, #24]
 800de78:	0151      	lsls	r1, r2, #5
 800de7a:	69fa      	ldr	r2, [r7, #28]
 800de7c:	440a      	add	r2, r1
 800de7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800de82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800de86:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800de88:	69fb      	ldr	r3, [r7, #28]
 800de8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800de8e:	691b      	ldr	r3, [r3, #16]
 800de90:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800de94:	2b00      	cmp	r3, #0
 800de96:	d133      	bne.n	800df00 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800de98:	69bb      	ldr	r3, [r7, #24]
 800de9a:	015a      	lsls	r2, r3, #5
 800de9c:	69fb      	ldr	r3, [r7, #28]
 800de9e:	4413      	add	r3, r2
 800dea0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	69ba      	ldr	r2, [r7, #24]
 800dea8:	0151      	lsls	r1, r2, #5
 800deaa:	69fa      	ldr	r2, [r7, #28]
 800deac:	440a      	add	r2, r1
 800deae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800deb2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800deb6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800deb8:	69bb      	ldr	r3, [r7, #24]
 800deba:	015a      	lsls	r2, r3, #5
 800debc:	69fb      	ldr	r3, [r7, #28]
 800debe:	4413      	add	r3, r2
 800dec0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	69ba      	ldr	r2, [r7, #24]
 800dec8:	0151      	lsls	r1, r2, #5
 800deca:	69fa      	ldr	r2, [r7, #28]
 800decc:	440a      	add	r2, r1
 800dece:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ded2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ded6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	3301      	adds	r3, #1
 800dedc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dee4:	d81d      	bhi.n	800df22 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dee6:	69bb      	ldr	r3, [r7, #24]
 800dee8:	015a      	lsls	r2, r3, #5
 800deea:	69fb      	ldr	r3, [r7, #28]
 800deec:	4413      	add	r3, r2
 800deee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800def8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800defc:	d0ec      	beq.n	800ded8 <USB_HC_Halt+0x1e6>
 800defe:	e011      	b.n	800df24 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800df00:	69bb      	ldr	r3, [r7, #24]
 800df02:	015a      	lsls	r2, r3, #5
 800df04:	69fb      	ldr	r3, [r7, #28]
 800df06:	4413      	add	r3, r2
 800df08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	69ba      	ldr	r2, [r7, #24]
 800df10:	0151      	lsls	r1, r2, #5
 800df12:	69fa      	ldr	r2, [r7, #28]
 800df14:	440a      	add	r2, r1
 800df16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800df1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800df1e:	6013      	str	r3, [r2, #0]
 800df20:	e000      	b.n	800df24 <USB_HC_Halt+0x232>
          break;
 800df22:	bf00      	nop
    }
  }

  return HAL_OK;
 800df24:	2300      	movs	r3, #0
}
 800df26:	4618      	mov	r0, r3
 800df28:	3724      	adds	r7, #36	@ 0x24
 800df2a:	46bd      	mov	sp, r7
 800df2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df30:	4770      	bx	lr
	...

0800df34 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800df34:	b480      	push	{r7}
 800df36:	b087      	sub	sp, #28
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	460b      	mov	r3, r1
 800df3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800df44:	78fb      	ldrb	r3, [r7, #3]
 800df46:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800df48:	2301      	movs	r3, #1
 800df4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	04da      	lsls	r2, r3, #19
 800df50:	4b15      	ldr	r3, [pc, #84]	@ (800dfa8 <USB_DoPing+0x74>)
 800df52:	4013      	ands	r3, r2
 800df54:	693a      	ldr	r2, [r7, #16]
 800df56:	0151      	lsls	r1, r2, #5
 800df58:	697a      	ldr	r2, [r7, #20]
 800df5a:	440a      	add	r2, r1
 800df5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800df60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800df64:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800df66:	693b      	ldr	r3, [r7, #16]
 800df68:	015a      	lsls	r2, r3, #5
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	4413      	add	r3, r2
 800df6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800df7c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800df84:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	015a      	lsls	r2, r3, #5
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	4413      	add	r3, r2
 800df8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800df92:	461a      	mov	r2, r3
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800df98:	2300      	movs	r3, #0
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	371c      	adds	r7, #28
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa4:	4770      	bx	lr
 800dfa6:	bf00      	nop
 800dfa8:	1ff80000 	.word	0x1ff80000

0800dfac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b088      	sub	sp, #32
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f7fe ff8c 	bl	800cede <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dfc6:	2110      	movs	r1, #16
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f7fe ffe5 	bl	800cf98 <USB_FlushTxFifo>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d001      	beq.n	800dfd8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f7ff f80f 	bl	800cffc <USB_FlushRxFifo>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d001      	beq.n	800dfe8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800dfe8:	2300      	movs	r3, #0
 800dfea:	61bb      	str	r3, [r7, #24]
 800dfec:	e01f      	b.n	800e02e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800dfee:	69bb      	ldr	r3, [r7, #24]
 800dff0:	015a      	lsls	r2, r3, #5
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	4413      	add	r3, r2
 800dff6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e004:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e00c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e014:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e016:	69bb      	ldr	r3, [r7, #24]
 800e018:	015a      	lsls	r2, r3, #5
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	4413      	add	r3, r2
 800e01e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e022:	461a      	mov	r2, r3
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e028:	69bb      	ldr	r3, [r7, #24]
 800e02a:	3301      	adds	r3, #1
 800e02c:	61bb      	str	r3, [r7, #24]
 800e02e:	69bb      	ldr	r3, [r7, #24]
 800e030:	2b0f      	cmp	r3, #15
 800e032:	d9dc      	bls.n	800dfee <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e034:	2300      	movs	r3, #0
 800e036:	61bb      	str	r3, [r7, #24]
 800e038:	e034      	b.n	800e0a4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800e03a:	69bb      	ldr	r3, [r7, #24]
 800e03c:	015a      	lsls	r2, r3, #5
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	4413      	add	r3, r2
 800e042:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e050:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e058:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e05a:	693b      	ldr	r3, [r7, #16]
 800e05c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e060:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e062:	69bb      	ldr	r3, [r7, #24]
 800e064:	015a      	lsls	r2, r3, #5
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	4413      	add	r3, r2
 800e06a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e06e:	461a      	mov	r2, r3
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	3301      	adds	r3, #1
 800e078:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e080:	d80c      	bhi.n	800e09c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e082:	69bb      	ldr	r3, [r7, #24]
 800e084:	015a      	lsls	r2, r3, #5
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	4413      	add	r3, r2
 800e08a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e094:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e098:	d0ec      	beq.n	800e074 <USB_StopHost+0xc8>
 800e09a:	e000      	b.n	800e09e <USB_StopHost+0xf2>
        break;
 800e09c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e09e:	69bb      	ldr	r3, [r7, #24]
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	61bb      	str	r3, [r7, #24]
 800e0a4:	69bb      	ldr	r3, [r7, #24]
 800e0a6:	2b0f      	cmp	r3, #15
 800e0a8:	d9c7      	bls.n	800e03a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e0b0:	461a      	mov	r2, r3
 800e0b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e0b6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f04f 32ff 	mov.w	r2, #4294967295
 800e0be:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f7fe fefb 	bl	800cebc <USB_EnableGlobalInt>

  return ret;
 800e0c6:	7ffb      	ldrb	r3, [r7, #31]
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3720      	adds	r7, #32
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800e0d0:	b590      	push	{r4, r7, lr}
 800e0d2:	b08b      	sub	sp, #44	@ 0x2c
 800e0d4:	af04      	add	r7, sp, #16
 800e0d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint16_t ep_mps;
  uint8_t max_ep;
  uint8_t num = 0U;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e0e2:	7919      	ldrb	r1, [r3, #4]
 800e0e4:	23ff      	movs	r3, #255	@ 0xff
 800e0e6:	2201      	movs	r2, #1
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f001 f87b 	bl	800f1e4 <USBH_FindInterface>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e0f2:	7dbb      	ldrb	r3, [r7, #22]
 800e0f4:	2bff      	cmp	r3, #255	@ 0xff
 800e0f6:	d002      	beq.n	800e0fe <USBH_HID_InterfaceInit+0x2e>
 800e0f8:	7dbb      	ldrb	r3, [r7, #22]
 800e0fa:	2b01      	cmp	r3, #1
 800e0fc:	d90f      	bls.n	800e11e <USBH_HID_InterfaceInit+0x4e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 800e0fe:	48a9      	ldr	r0, [pc, #676]	@ (800e3a4 <USBH_HID_InterfaceInit+0x2d4>)
 800e100:	f003 fa5e 	bl	80115c0 <iprintf>
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4619      	mov	r1, r3
 800e10e:	48a6      	ldr	r0, [pc, #664]	@ (800e3a8 <USBH_HID_InterfaceInit+0x2d8>)
 800e110:	f003 fa56 	bl	80115c0 <iprintf>
 800e114:	200a      	movs	r0, #10
 800e116:	f003 fa65 	bl	80115e4 <putchar>
    return USBH_FAIL;
 800e11a:	2302      	movs	r3, #2
 800e11c:	e13d      	b.n	800e39a <USBH_HID_InterfaceInit+0x2ca>
  }

  status = USBH_SelectInterface(phost, interface);
 800e11e:	7dbb      	ldrb	r3, [r7, #22]
 800e120:	4619      	mov	r1, r3
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f000 fff6 	bl	800f114 <USBH_SelectInterface>
 800e128:	4603      	mov	r3, r0
 800e12a:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 800e12c:	7d7b      	ldrb	r3, [r7, #21]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d001      	beq.n	800e136 <USBH_HID_InterfaceInit+0x66>
  {
    return USBH_FAIL;
 800e132:	2302      	movs	r3, #2
 800e134:	e131      	b.n	800e39a <USBH_HID_InterfaceInit+0x2ca>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f8d3 4d34 	ldr.w	r4, [r3, #3380]	@ 0xd34
 800e13c:	2034      	movs	r0, #52	@ 0x34
 800e13e:	f003 f8bf 	bl	80112c0 <malloc>
 800e142:	4603      	mov	r3, r0
 800e144:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e14c:	69db      	ldr	r3, [r3, #28]
 800e14e:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d10a      	bne.n	800e16c <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
 800e156:	4893      	ldr	r0, [pc, #588]	@ (800e3a4 <USBH_HID_InterfaceInit+0x2d4>)
 800e158:	f003 fa32 	bl	80115c0 <iprintf>
 800e15c:	4893      	ldr	r0, [pc, #588]	@ (800e3ac <USBH_HID_InterfaceInit+0x2dc>)
 800e15e:	f003 fa2f 	bl	80115c0 <iprintf>
 800e162:	200a      	movs	r0, #10
 800e164:	f003 fa3e 	bl	80115e4 <putchar>
    return USBH_FAIL;
 800e168:	2302      	movs	r3, #2
 800e16a:	e116      	b.n	800e39a <USBH_HID_InterfaceInit+0x2ca>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 800e16c:	2234      	movs	r2, #52	@ 0x34
 800e16e:	2100      	movs	r1, #0
 800e170:	6938      	ldr	r0, [r7, #16]
 800e172:	f003 fb95 	bl	80118a0 <memset>

  HID_Handle->state = USBH_HID_ERROR;
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	2207      	movs	r2, #7
 800e17a:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800e17c:	7dbb      	ldrb	r3, [r7, #22]
 800e17e:	687a      	ldr	r2, [r7, #4]
 800e180:	211a      	movs	r1, #26
 800e182:	fb01 f303 	mul.w	r3, r1, r3
 800e186:	4413      	add	r3, r2
 800e188:	f603 5301 	addw	r3, r3, #3329	@ 0xd01
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d109      	bne.n	800e1a6 <USBH_HID_InterfaceInit+0xd6>
  {
    USBH_UsrLog("KeyBoard device found!");
 800e192:	4887      	ldr	r0, [pc, #540]	@ (800e3b0 <USBH_HID_InterfaceInit+0x2e0>)
 800e194:	f003 fa14 	bl	80115c0 <iprintf>
 800e198:	200a      	movs	r0, #10
 800e19a:	f003 fa23 	bl	80115e4 <putchar>
    HID_Handle->Init = USBH_HID_KeybdInit;
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	4a84      	ldr	r2, [pc, #528]	@ (800e3b4 <USBH_HID_InterfaceInit+0x2e4>)
 800e1a2:	631a      	str	r2, [r3, #48]	@ 0x30
 800e1a4:	e01c      	b.n	800e1e0 <USBH_HID_InterfaceInit+0x110>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 800e1a6:	7dbb      	ldrb	r3, [r7, #22]
 800e1a8:	687a      	ldr	r2, [r7, #4]
 800e1aa:	211a      	movs	r1, #26
 800e1ac:	fb01 f303 	mul.w	r3, r1, r3
 800e1b0:	4413      	add	r3, r2
 800e1b2:	f603 5301 	addw	r3, r3, #3329	@ 0xd01
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	2b02      	cmp	r3, #2
 800e1ba:	d109      	bne.n	800e1d0 <USBH_HID_InterfaceInit+0x100>
  {
    USBH_UsrLog("Mouse device found!");
 800e1bc:	487e      	ldr	r0, [pc, #504]	@ (800e3b8 <USBH_HID_InterfaceInit+0x2e8>)
 800e1be:	f003 f9ff 	bl	80115c0 <iprintf>
 800e1c2:	200a      	movs	r0, #10
 800e1c4:	f003 fa0e 	bl	80115e4 <putchar>
    HID_Handle->Init = USBH_HID_MouseInit;
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	4a7c      	ldr	r2, [pc, #496]	@ (800e3bc <USBH_HID_InterfaceInit+0x2ec>)
 800e1cc:	631a      	str	r2, [r3, #48]	@ 0x30
 800e1ce:	e007      	b.n	800e1e0 <USBH_HID_InterfaceInit+0x110>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
 800e1d0:	487b      	ldr	r0, [pc, #492]	@ (800e3c0 <USBH_HID_InterfaceInit+0x2f0>)
 800e1d2:	f003 f9f5 	bl	80115c0 <iprintf>
 800e1d6:	200a      	movs	r0, #10
 800e1d8:	f003 fa04 	bl	80115e4 <putchar>
    return USBH_FAIL;
 800e1dc:	2302      	movs	r3, #2
 800e1de:	e0dc      	b.n	800e39a <USBH_HID_InterfaceInit+0x2ca>
  }

  HID_Handle->state     = USBH_HID_INIT;
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = USBH_HID_REQ_INIT;
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e1ec:	7dbb      	ldrb	r3, [r7, #22]
 800e1ee:	687a      	ldr	r2, [r7, #4]
 800e1f0:	211a      	movs	r1, #26
 800e1f2:	fb01 f303 	mul.w	r3, r1, r3
 800e1f6:	4413      	add	r3, r2
 800e1f8:	f603 5306 	addw	r3, r3, #3334	@ 0xd06
 800e1fc:	781a      	ldrb	r2, [r3, #0]
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e202:	7dbb      	ldrb	r3, [r7, #22]
 800e204:	687a      	ldr	r2, [r7, #4]
 800e206:	211a      	movs	r1, #26
 800e208:	fb01 f303 	mul.w	r3, r1, r3
 800e20c:	4413      	add	r3, r2
 800e20e:	f603 5308 	addw	r3, r3, #3336	@ 0xd08
 800e212:	881a      	ldrh	r2, [r3, #0]
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800e218:	7dbb      	ldrb	r3, [r7, #22]
 800e21a:	687a      	ldr	r2, [r7, #4]
 800e21c:	211a      	movs	r1, #26
 800e21e:	fb01 f303 	mul.w	r3, r1, r3
 800e222:	4413      	add	r3, r2
 800e224:	f603 530a 	addw	r3, r3, #3338	@ 0xd0a
 800e228:	781b      	ldrb	r3, [r3, #0]
 800e22a:	461a      	mov	r2, r3
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll < HID_MIN_POLL)
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	8b9b      	ldrh	r3, [r3, #28]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d102      	bne.n	800e23e <USBH_HID_InterfaceInit+0x16e>
  {
    HID_Handle->poll = HID_MIN_POLL;
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	2201      	movs	r2, #1
 800e23c:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 800e23e:	7dbb      	ldrb	r3, [r7, #22]
 800e240:	687a      	ldr	r2, [r7, #4]
 800e242:	211a      	movs	r1, #26
 800e244:	fb01 f303 	mul.w	r3, r1, r3
 800e248:	4413      	add	r3, r2
 800e24a:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	2b02      	cmp	r3, #2
 800e252:	bf28      	it	cs
 800e254:	2302      	movcs	r3, #2
 800e256:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 800e258:	2300      	movs	r3, #0
 800e25a:	75fb      	strb	r3, [r7, #23]
 800e25c:	e097      	b.n	800e38e <USBH_HID_InterfaceInit+0x2be>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 800e25e:	7dbb      	ldrb	r3, [r7, #22]
 800e260:	7df9      	ldrb	r1, [r7, #23]
 800e262:	687a      	ldr	r2, [r7, #4]
 800e264:	3101      	adds	r1, #1
 800e266:	00c9      	lsls	r1, r1, #3
 800e268:	201a      	movs	r0, #26
 800e26a:	fb00 f303 	mul.w	r3, r0, r3
 800e26e:	440b      	add	r3, r1
 800e270:	4413      	add	r3, r2
 800e272:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	b25b      	sxtb	r3, r3
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	da42      	bge.n	800e304 <USBH_HID_InterfaceInit+0x234>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800e27e:	7dbb      	ldrb	r3, [r7, #22]
 800e280:	7df9      	ldrb	r1, [r7, #23]
 800e282:	687a      	ldr	r2, [r7, #4]
 800e284:	3101      	adds	r1, #1
 800e286:	00c9      	lsls	r1, r1, #3
 800e288:	201a      	movs	r0, #26
 800e28a:	fb00 f303 	mul.w	r3, r0, r3
 800e28e:	440b      	add	r3, r1
 800e290:	4413      	add	r3, r2
 800e292:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800e296:	781a      	ldrb	r2, [r3, #0]
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800e29c:	693b      	ldr	r3, [r7, #16]
 800e29e:	791b      	ldrb	r3, [r3, #4]
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f002 fc95 	bl	8010bd2 <USBH_AllocPipe>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	461a      	mov	r2, r3
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	705a      	strb	r2, [r3, #1]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800e2b0:	7dbb      	ldrb	r3, [r7, #22]
 800e2b2:	7df9      	ldrb	r1, [r7, #23]
 800e2b4:	687a      	ldr	r2, [r7, #4]
 800e2b6:	3101      	adds	r1, #1
 800e2b8:	00c9      	lsls	r1, r1, #3
 800e2ba:	201a      	movs	r0, #26
 800e2bc:	fb00 f303 	mul.w	r3, r0, r3
 800e2c0:	440b      	add	r3, r1
 800e2c2:	4413      	add	r3, r2
 800e2c4:	f503 6350 	add.w	r3, r3, #3328	@ 0xd00
 800e2c8:	881b      	ldrh	r3, [r3, #0]
 800e2ca:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	7859      	ldrb	r1, [r3, #1]
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	7918      	ldrb	r0, [r3, #4]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f893 4cd4 	ldrb.w	r4, [r3, #3284]	@ 0xcd4
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800e2e0:	89ba      	ldrh	r2, [r7, #12]
 800e2e2:	9202      	str	r2, [sp, #8]
 800e2e4:	2203      	movs	r2, #3
 800e2e6:	9201      	str	r2, [sp, #4]
 800e2e8:	9300      	str	r3, [sp, #0]
 800e2ea:	4623      	mov	r3, r4
 800e2ec:	4602      	mov	r2, r0
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f002 fc40 	bl	8010b74 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	785b      	ldrb	r3, [r3, #1]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f002 ff59 	bl	80111b4 <USBH_LL_SetToggle>
 800e302:	e041      	b.n	800e388 <USBH_HID_InterfaceInit+0x2b8>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800e304:	7dbb      	ldrb	r3, [r7, #22]
 800e306:	7df9      	ldrb	r1, [r7, #23]
 800e308:	687a      	ldr	r2, [r7, #4]
 800e30a:	3101      	adds	r1, #1
 800e30c:	00c9      	lsls	r1, r1, #3
 800e30e:	201a      	movs	r0, #26
 800e310:	fb00 f303 	mul.w	r3, r0, r3
 800e314:	440b      	add	r3, r1
 800e316:	4413      	add	r3, r2
 800e318:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800e31c:	781a      	ldrb	r2, [r3, #0]
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe = USBH_AllocPipe(phost, HID_Handle->OutEp);
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	78db      	ldrb	r3, [r3, #3]
 800e326:	4619      	mov	r1, r3
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f002 fc52 	bl	8010bd2 <USBH_AllocPipe>
 800e32e:	4603      	mov	r3, r0
 800e330:	461a      	mov	r2, r3
 800e332:	693b      	ldr	r3, [r7, #16]
 800e334:	701a      	strb	r2, [r3, #0]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800e336:	7dbb      	ldrb	r3, [r7, #22]
 800e338:	7df9      	ldrb	r1, [r7, #23]
 800e33a:	687a      	ldr	r2, [r7, #4]
 800e33c:	3101      	adds	r1, #1
 800e33e:	00c9      	lsls	r1, r1, #3
 800e340:	201a      	movs	r0, #26
 800e342:	fb00 f303 	mul.w	r3, r0, r3
 800e346:	440b      	add	r3, r1
 800e348:	4413      	add	r3, r2
 800e34a:	f503 6350 	add.w	r3, r3, #3328	@ 0xd00
 800e34e:	881b      	ldrh	r3, [r3, #0]
 800e350:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	7819      	ldrb	r1, [r3, #0]
 800e356:	693b      	ldr	r3, [r7, #16]
 800e358:	78d8      	ldrb	r0, [r3, #3]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f893 4cd4 	ldrb.w	r4, [r3, #3284]	@ 0xcd4
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800e366:	89ba      	ldrh	r2, [r7, #12]
 800e368:	9202      	str	r2, [sp, #8]
 800e36a:	2203      	movs	r2, #3
 800e36c:	9201      	str	r2, [sp, #4]
 800e36e:	9300      	str	r3, [sp, #0]
 800e370:	4623      	mov	r3, r4
 800e372:	4602      	mov	r2, r0
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f002 fbfd 	bl	8010b74 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	2200      	movs	r2, #0
 800e380:	4619      	mov	r1, r3
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f002 ff16 	bl	80111b4 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 800e388:	7dfb      	ldrb	r3, [r7, #23]
 800e38a:	3301      	adds	r3, #1
 800e38c:	75fb      	strb	r3, [r7, #23]
 800e38e:	7dfa      	ldrb	r2, [r7, #23]
 800e390:	7bfb      	ldrb	r3, [r7, #15]
 800e392:	429a      	cmp	r2, r3
 800e394:	f4ff af63 	bcc.w	800e25e <USBH_HID_InterfaceInit+0x18e>
    }
  }

  return USBH_OK;
 800e398:	2300      	movs	r3, #0
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	371c      	adds	r7, #28
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd90      	pop	{r4, r7, pc}
 800e3a2:	bf00      	nop
 800e3a4:	08012728 	.word	0x08012728
 800e3a8:	08012734 	.word	0x08012734
 800e3ac:	0801275c 	.word	0x0801275c
 800e3b0:	08012784 	.word	0x08012784
 800e3b4:	0800eaf9 	.word	0x0800eaf9
 800e3b8:	0801279c 	.word	0x0801279c
 800e3bc:	0800ed49 	.word	0x0800ed49
 800e3c0:	080127b0 	.word	0x080127b0

0800e3c4 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b084      	sub	sp, #16
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e3d2:	69db      	ldr	r3, [r3, #28]
 800e3d4:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	785b      	ldrb	r3, [r3, #1]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d00e      	beq.n	800e3fc <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	785b      	ldrb	r3, [r3, #1]
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f002 fbe4 	bl	8010bb2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	785b      	ldrb	r3, [r3, #1]
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f002 fc10 	bl	8010c16 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	781b      	ldrb	r3, [r3, #0]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d00e      	beq.n	800e422 <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	4619      	mov	r1, r3
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f002 fbd1 	bl	8010bb2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	4619      	mov	r1, r3
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f002 fbfd 	bl	8010c16 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2200      	movs	r2, #0
 800e420:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e428:	69db      	ldr	r3, [r3, #28]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d00b      	beq.n	800e446 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e434:	69db      	ldr	r3, [r3, #28]
 800e436:	4618      	mov	r0, r3
 800e438:	f002 ff4a 	bl	80112d0 <free>
    phost->pActiveClass->pData = 0U;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e442:	2200      	movs	r2, #0
 800e444:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e446:	2300      	movs	r3, #0
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3710      	adds	r7, #16
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 800e458:	2301      	movs	r3, #1
 800e45a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 800e45c:	2301      	movs	r3, #1
 800e45e:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e466:	69db      	ldr	r3, [r3, #28]
 800e468:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	795b      	ldrb	r3, [r3, #5]
 800e46e:	2b05      	cmp	r3, #5
 800e470:	d872      	bhi.n	800e558 <USBH_HID_ClassRequest+0x108>
 800e472:	a201      	add	r2, pc, #4	@ (adr r2, 800e478 <USBH_HID_ClassRequest+0x28>)
 800e474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e478:	0800e491 	.word	0x0800e491
 800e47c:	0800e559 	.word	0x0800e559
 800e480:	0800e4ab 	.word	0x0800e4ab
 800e484:	0800e491 	.word	0x0800e491
 800e488:	0800e4e7 	.word	0x0800e4e7
 800e48c:	0800e511 	.word	0x0800e511
  {
    case USBH_HID_REQ_INIT:
    case USBH_HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	331c      	adds	r3, #28
 800e49a:	4619      	mov	r1, r3
 800e49c:	4610      	mov	r0, r2
 800e49e:	f000 fa17 	bl	800e8d0 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = USBH_HID_REQ_GET_REPORT_DESC;
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	2202      	movs	r2, #2
 800e4a6:	715a      	strb	r2, [r3, #5]

      break;
 800e4a8:	e05d      	b.n	800e566 <USBH_HID_ClassRequest+0x116>
    case USBH_HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f000 f965 	bl	800e780 <USBH_HID_GetHIDReportDescriptor>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800e4ba:	7bbb      	ldrb	r3, [r7, #14]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d103      	bne.n	800e4c8 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = USBH_HID_REQ_SET_IDLE;
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	2204      	movs	r2, #4
 800e4c4:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 800e4c6:	e049      	b.n	800e55c <USBH_HID_ClassRequest+0x10c>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800e4c8:	7bbb      	ldrb	r3, [r7, #14]
 800e4ca:	2b03      	cmp	r3, #3
 800e4cc:	d146      	bne.n	800e55c <USBH_HID_ClassRequest+0x10c>
        USBH_ErrLog("Control error: HID: Device Get Report Descriptor request failed");
 800e4ce:	4828      	ldr	r0, [pc, #160]	@ (800e570 <USBH_HID_ClassRequest+0x120>)
 800e4d0:	f003 f876 	bl	80115c0 <iprintf>
 800e4d4:	4827      	ldr	r0, [pc, #156]	@ (800e574 <USBH_HID_ClassRequest+0x124>)
 800e4d6:	f003 f873 	bl	80115c0 <iprintf>
 800e4da:	200a      	movs	r0, #10
 800e4dc:	f003 f882 	bl	80115e4 <putchar>
        status = USBH_FAIL;
 800e4e0:	2302      	movs	r3, #2
 800e4e2:	73fb      	strb	r3, [r7, #15]
      break;
 800e4e4:	e03a      	b.n	800e55c <USBH_HID_ClassRequest+0x10c>

    case USBH_HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	2100      	movs	r1, #0
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f000 f976 	bl	800e7dc <USBH_HID_SetIdle>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 800e4f4:	7bbb      	ldrb	r3, [r7, #14]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d103      	bne.n	800e502 <USBH_HID_ClassRequest+0xb2>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	2205      	movs	r2, #5
 800e4fe:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 800e500:	e02e      	b.n	800e560 <USBH_HID_ClassRequest+0x110>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 800e502:	7bbb      	ldrb	r3, [r7, #14]
 800e504:	2b03      	cmp	r3, #3
 800e506:	d12b      	bne.n	800e560 <USBH_HID_ClassRequest+0x110>
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	2205      	movs	r2, #5
 800e50c:	715a      	strb	r2, [r3, #5]
      break;
 800e50e:	e027      	b.n	800e560 <USBH_HID_ClassRequest+0x110>

    case USBH_HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 800e510:	2100      	movs	r1, #0
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f000 f9b6 	bl	800e884 <USBH_HID_SetProtocol>
 800e518:	4603      	mov	r3, r0
 800e51a:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800e51c:	7bbb      	ldrb	r3, [r7, #14]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d10b      	bne.n	800e53a <USBH_HID_ClassRequest+0xea>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_IDLE;
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	2201      	movs	r2, #1
 800e526:	715a      	strb	r2, [r3, #5]

        /* all requests performed */
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800e52e:	2102      	movs	r1, #2
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	4798      	blx	r3
        status = USBH_OK;
 800e534:	2300      	movs	r3, #0
 800e536:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 800e538:	e014      	b.n	800e564 <USBH_HID_ClassRequest+0x114>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800e53a:	7bbb      	ldrb	r3, [r7, #14]
 800e53c:	2b03      	cmp	r3, #3
 800e53e:	d111      	bne.n	800e564 <USBH_HID_ClassRequest+0x114>
        USBH_ErrLog("Control error: HID: Device Set protocol request failed");
 800e540:	480b      	ldr	r0, [pc, #44]	@ (800e570 <USBH_HID_ClassRequest+0x120>)
 800e542:	f003 f83d 	bl	80115c0 <iprintf>
 800e546:	480c      	ldr	r0, [pc, #48]	@ (800e578 <USBH_HID_ClassRequest+0x128>)
 800e548:	f003 f83a 	bl	80115c0 <iprintf>
 800e54c:	200a      	movs	r0, #10
 800e54e:	f003 f849 	bl	80115e4 <putchar>
        status = USBH_FAIL;
 800e552:	2302      	movs	r3, #2
 800e554:	73fb      	strb	r3, [r7, #15]
      break;
 800e556:	e005      	b.n	800e564 <USBH_HID_ClassRequest+0x114>

    case USBH_HID_REQ_IDLE:
    default:
      break;
 800e558:	bf00      	nop
 800e55a:	e004      	b.n	800e566 <USBH_HID_ClassRequest+0x116>
      break;
 800e55c:	bf00      	nop
 800e55e:	e002      	b.n	800e566 <USBH_HID_ClassRequest+0x116>
      break;
 800e560:	bf00      	nop
 800e562:	e000      	b.n	800e566 <USBH_HID_ClassRequest+0x116>
      break;
 800e564:	bf00      	nop
  }

  return status;
 800e566:	7bfb      	ldrb	r3, [r7, #15]
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3710      	adds	r7, #16
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}
 800e570:	080127c8 	.word	0x080127c8
 800e574:	080127d0 	.word	0x080127d0
 800e578:	08012810 	.word	0x08012810

0800e57c <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b088      	sub	sp, #32
 800e580:	af02      	add	r7, sp, #8
 800e582:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800e584:	2300      	movs	r3, #0
 800e586:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e58e:	69db      	ldr	r3, [r3, #28]
 800e590:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	789b      	ldrb	r3, [r3, #2]
 800e596:	2b06      	cmp	r3, #6
 800e598:	f200 80c1 	bhi.w	800e71e <USBH_HID_Process+0x1a2>
 800e59c:	a201      	add	r2, pc, #4	@ (adr r2, 800e5a4 <USBH_HID_Process+0x28>)
 800e59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5a2:	bf00      	nop
 800e5a4:	0800e5c1 	.word	0x0800e5c1
 800e5a8:	0800e5f9 	.word	0x0800e5f9
 800e5ac:	0800e71f 	.word	0x0800e71f
 800e5b0:	0800e71f 	.word	0x0800e71f
 800e5b4:	0800e669 	.word	0x0800e669
 800e5b8:	0800e653 	.word	0x0800e653
 800e5bc:	0800e697 	.word	0x0800e697
  {
    case USBH_HID_INIT:
      status = HID_Handle->Init(phost);
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	4798      	blx	r3
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800e5cc:	7dfb      	ldrb	r3, [r7, #23]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d103      	bne.n	800e5da <USBH_HID_Process+0x5e>
      {
        HID_Handle->state = USBH_HID_IDLE;
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e5d8:	e0a6      	b.n	800e728 <USBH_HID_Process+0x1ac>
        USBH_ErrLog("HID Class Init failed");
 800e5da:	4856      	ldr	r0, [pc, #344]	@ (800e734 <USBH_HID_Process+0x1b8>)
 800e5dc:	f002 fff0 	bl	80115c0 <iprintf>
 800e5e0:	4855      	ldr	r0, [pc, #340]	@ (800e738 <USBH_HID_Process+0x1bc>)
 800e5e2:	f002 ffed 	bl	80115c0 <iprintf>
 800e5e6:	200a      	movs	r0, #10
 800e5e8:	f002 fffc 	bl	80115e4 <putchar>
        HID_Handle->state = USBH_HID_ERROR;
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	2207      	movs	r2, #7
 800e5f0:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800e5f2:	2302      	movs	r3, #2
 800e5f4:	75fb      	strb	r3, [r7, #23]
      break;
 800e5f6:	e097      	b.n	800e728 <USBH_HID_Process+0x1ac>

    case USBH_HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	695a      	ldr	r2, [r3, #20]
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	8b1b      	ldrh	r3, [r3, #24]
 800e600:	b2db      	uxtb	r3, r3
 800e602:	9300      	str	r3, [sp, #0]
 800e604:	4613      	mov	r3, r2
 800e606:	2200      	movs	r2, #0
 800e608:	2101      	movs	r1, #1
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f000 f90e 	bl	800e82c <USBH_HID_GetReport>
 800e610:	4603      	mov	r3, r0
 800e612:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800e614:	7dfb      	ldrb	r3, [r7, #23]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d103      	bne.n	800e622 <USBH_HID_Process+0xa6>
      {
        HID_Handle->state = USBH_HID_SYNC;
 800e61a:	693b      	ldr	r3, [r7, #16]
 800e61c:	2205      	movs	r2, #5
 800e61e:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e620:	e082      	b.n	800e728 <USBH_HID_Process+0x1ac>
      else if (status == USBH_BUSY)
 800e622:	7dfb      	ldrb	r3, [r7, #23]
 800e624:	2b01      	cmp	r3, #1
 800e626:	d105      	bne.n	800e634 <USBH_HID_Process+0xb8>
        HID_Handle->state = USBH_HID_IDLE;
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	2201      	movs	r2, #1
 800e62c:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800e62e:	2300      	movs	r3, #0
 800e630:	75fb      	strb	r3, [r7, #23]
      break;
 800e632:	e079      	b.n	800e728 <USBH_HID_Process+0x1ac>
      else if (status == USBH_NOT_SUPPORTED)
 800e634:	7dfb      	ldrb	r3, [r7, #23]
 800e636:	2b03      	cmp	r3, #3
 800e638:	d105      	bne.n	800e646 <USBH_HID_Process+0xca>
        HID_Handle->state = USBH_HID_SYNC;
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	2205      	movs	r2, #5
 800e63e:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800e640:	2300      	movs	r3, #0
 800e642:	75fb      	strb	r3, [r7, #23]
      break;
 800e644:	e070      	b.n	800e728 <USBH_HID_Process+0x1ac>
        HID_Handle->state = USBH_HID_ERROR;
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	2207      	movs	r2, #7
 800e64a:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800e64c:	2302      	movs	r3, #2
 800e64e:	75fb      	strb	r3, [r7, #23]
      break;
 800e650:	e06a      	b.n	800e728 <USBH_HID_Process+0x1ac>

    case USBH_HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 800e658:	f003 0301 	and.w	r3, r3, #1
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d060      	beq.n	800e722 <USBH_HID_Process+0x1a6>
      {
        HID_Handle->state = USBH_HID_GET_DATA;
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	2204      	movs	r2, #4
 800e664:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e666:	e05c      	b.n	800e722 <USBH_HID_Process+0x1a6>

    case USBH_HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800e668:	693b      	ldr	r3, [r7, #16]
 800e66a:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 800e66c:	693b      	ldr	r3, [r7, #16]
 800e66e:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800e670:	b2da      	uxtb	r2, r3
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	785b      	ldrb	r3, [r3, #1]
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f002 fa5d 	bl	8010b36 <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = USBH_HID_POLL;
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	2206      	movs	r2, #6
 800e680:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f8d3 2d7c 	ldr.w	r2, [r3, #3452]	@ 0xd7c
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 800e68c:	693b      	ldr	r3, [r7, #16]
 800e68e:	2200      	movs	r2, #0
 800e690:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      break;
 800e694:	e048      	b.n	800e728 <USBH_HID_Process+0x1ac>

    case USBH_HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	785b      	ldrb	r3, [r3, #1]
 800e69a:	4619      	mov	r1, r3
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f002 fd5f 	bl	8011160 <USBH_LL_GetURBState>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	2b01      	cmp	r3, #1
 800e6a6:	d124      	bne.n	800e6f2 <USBH_HID_Process+0x176>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	785b      	ldrb	r3, [r3, #1]
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f002 fcc4 	bl	801103c <USBH_LL_GetLastXferSize>
 800e6b4:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U) && (HID_Handle->fifo.buf != NULL))
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d132      	bne.n	800e726 <USBH_HID_Process+0x1aa>
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d02f      	beq.n	800e726 <USBH_HID_Process+0x1aa>
 800e6c6:	693b      	ldr	r3, [r7, #16]
 800e6c8:	689b      	ldr	r3, [r3, #8]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d02b      	beq.n	800e726 <USBH_HID_Process+0x1aa>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	f103 0008 	add.w	r0, r3, #8
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	6959      	ldr	r1, [r3, #20]
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	8b1b      	ldrh	r3, [r3, #24]
 800e6dc:	461a      	mov	r2, r3
 800e6de:	f000 f9b7 	bl	800ea50 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	2201      	movs	r2, #1
 800e6e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          USBH_HID_EventCallback(phost);
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f7f1 ff50 	bl	8000590 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = USBH_HID_GET_DATA;
          }
        }
      }
      break;
 800e6f0:	e019      	b.n	800e726 <USBH_HID_Process+0x1aa>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	785b      	ldrb	r3, [r3, #1]
 800e6f6:	4619      	mov	r1, r3
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f002 fd31 	bl	8011160 <USBH_LL_GetURBState>
 800e6fe:	4603      	mov	r3, r0
 800e700:	2b05      	cmp	r3, #5
 800e702:	d110      	bne.n	800e726 <USBH_HID_Process+0x1aa>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	7e9b      	ldrb	r3, [r3, #26]
 800e708:	4619      	mov	r1, r3
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f001 fcc0 	bl	8010090 <USBH_ClrFeature>
 800e710:	4603      	mov	r3, r0
 800e712:	2b00      	cmp	r3, #0
 800e714:	d107      	bne.n	800e726 <USBH_HID_Process+0x1aa>
            HID_Handle->state = USBH_HID_GET_DATA;
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	2204      	movs	r2, #4
 800e71a:	709a      	strb	r2, [r3, #2]
      break;
 800e71c:	e003      	b.n	800e726 <USBH_HID_Process+0x1aa>

    default:
      break;
 800e71e:	bf00      	nop
 800e720:	e002      	b.n	800e728 <USBH_HID_Process+0x1ac>
      break;
 800e722:	bf00      	nop
 800e724:	e000      	b.n	800e728 <USBH_HID_Process+0x1ac>
      break;
 800e726:	bf00      	nop
  }

  return status;
 800e728:	7dfb      	ldrb	r3, [r7, #23]
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3718      	adds	r7, #24
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}
 800e732:	bf00      	nop
 800e734:	080127c8 	.word	0x080127c8
 800e738:	08012848 	.word	0x08012848

0800e73c <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 800e73c:	b480      	push	{r7}
 800e73e:	b085      	sub	sp, #20
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e74a:	69db      	ldr	r3, [r3, #28]
 800e74c:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == USBH_HID_POLL)
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	789b      	ldrb	r3, [r3, #2]
 800e752:	2b06      	cmp	r3, #6
 800e754:	d10c      	bne.n	800e770 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f8d3 2d7c 	ldr.w	r2, [r3, #3452]	@ 0xd7c
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	6a1b      	ldr	r3, [r3, #32]
 800e760:	1ad3      	subs	r3, r2, r3
 800e762:	68fa      	ldr	r2, [r7, #12]
 800e764:	8b92      	ldrh	r2, [r2, #28]
 800e766:	4293      	cmp	r3, r2
 800e768:	d302      	bcc.n	800e770 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = USBH_HID_GET_DATA;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	2204      	movs	r2, #4
 800e76e:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 800e770:	2300      	movs	r3, #0
}
 800e772:	4618      	mov	r0, r3
 800e774:	3714      	adds	r7, #20
 800e776:	46bd      	mov	sp, r7
 800e778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77c:	4770      	bx	lr
	...

0800e780 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b086      	sub	sp, #24
 800e784:	af02      	add	r7, sp, #8
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	460b      	mov	r3, r1
 800e78a:	807b      	strh	r3, [r7, #2]

  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800e78c:	887b      	ldrh	r3, [r7, #2]
 800e78e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800e792:	4293      	cmp	r3, r2
 800e794:	d90a      	bls.n	800e7ac <USBH_HID_GetHIDReportDescriptor+0x2c>
  {
    USBH_ErrLog("Control error: Get HID Report Descriptor failed, data buffer size issue");
 800e796:	480f      	ldr	r0, [pc, #60]	@ (800e7d4 <USBH_HID_GetHIDReportDescriptor+0x54>)
 800e798:	f002 ff12 	bl	80115c0 <iprintf>
 800e79c:	480e      	ldr	r0, [pc, #56]	@ (800e7d8 <USBH_HID_GetHIDReportDescriptor+0x58>)
 800e79e:	f002 ff0f 	bl	80115c0 <iprintf>
 800e7a2:	200a      	movs	r0, #10
 800e7a4:	f002 ff1e 	bl	80115e4 <putchar>
    return USBH_NOT_SUPPORTED;
 800e7a8:	2303      	movs	r3, #3
 800e7aa:	e00e      	b.n	800e7ca <USBH_HID_GetHIDReportDescriptor+0x4a>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800e7b2:	887b      	ldrh	r3, [r7, #2]
 800e7b4:	9300      	str	r3, [sp, #0]
 800e7b6:	4613      	mov	r3, r2
 800e7b8:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
 800e7bc:	2101      	movs	r1, #1
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f001 fbc6 	bl	800ff50 <USBH_GetDescriptor>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800e7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3710      	adds	r7, #16
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	080127c8 	.word	0x080127c8
 800e7d8:	08012860 	.word	0x08012860

0800e7dc <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	460b      	mov	r3, r1
 800e7e6:	70fb      	strb	r3, [r7, #3]
 800e7e8:	4613      	mov	r3, r2
 800e7ea:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2221      	movs	r2, #33	@ 0x21
 800e7f0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	220a      	movs	r2, #10
 800e7f6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 800e7f8:	78fb      	ldrb	r3, [r7, #3]
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	021b      	lsls	r3, r3, #8
 800e7fe:	b29a      	uxth	r2, r3
 800e800:	78bb      	ldrb	r3, [r7, #2]
 800e802:	b29b      	uxth	r3, r3
 800e804:	4313      	orrs	r3, r2
 800e806:	b29a      	uxth	r2, r3
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2200      	movs	r2, #0
 800e810:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2200      	movs	r2, #0
 800e816:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800e818:	2200      	movs	r2, #0
 800e81a:	2100      	movs	r1, #0
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f001 ff6d 	bl	80106fc <USBH_CtlReq>
 800e822:	4603      	mov	r3, r0
}
 800e824:	4618      	mov	r0, r3
 800e826:	3708      	adds	r7, #8
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}

0800e82c <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b084      	sub	sp, #16
 800e830:	af00      	add	r7, sp, #0
 800e832:	60f8      	str	r0, [r7, #12]
 800e834:	607b      	str	r3, [r7, #4]
 800e836:	460b      	mov	r3, r1
 800e838:	72fb      	strb	r3, [r7, #11]
 800e83a:	4613      	mov	r3, r2
 800e83c:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	22a1      	movs	r2, #161	@ 0xa1
 800e842:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	2201      	movs	r2, #1
 800e848:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800e84a:	7afb      	ldrb	r3, [r7, #11]
 800e84c:	b29b      	uxth	r3, r3
 800e84e:	021b      	lsls	r3, r3, #8
 800e850:	b29a      	uxth	r2, r3
 800e852:	7abb      	ldrb	r3, [r7, #10]
 800e854:	b29b      	uxth	r3, r3
 800e856:	4313      	orrs	r3, r2
 800e858:	b29a      	uxth	r2, r3
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	2200      	movs	r2, #0
 800e862:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800e864:	7e3b      	ldrb	r3, [r7, #24]
 800e866:	b29a      	uxth	r2, r3
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800e86c:	7e3b      	ldrb	r3, [r7, #24]
 800e86e:	b29b      	uxth	r3, r3
 800e870:	461a      	mov	r2, r3
 800e872:	6879      	ldr	r1, [r7, #4]
 800e874:	68f8      	ldr	r0, [r7, #12]
 800e876:	f001 ff41 	bl	80106fc <USBH_CtlReq>
 800e87a:	4603      	mov	r3, r0
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3710      	adds	r7, #16
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	460b      	mov	r3, r1
 800e88e:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2221      	movs	r2, #33	@ 0x21
 800e894:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	220b      	movs	r2, #11
 800e89a:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 800e89c:	78fb      	ldrb	r3, [r7, #3]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d003      	beq.n	800e8aa <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	825a      	strh	r2, [r3, #18]
 800e8a8:	e002      	b.n	800e8b0 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800e8bc:	2200      	movs	r2, #0
 800e8be:	2100      	movs	r1, #0
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f001 ff1b 	bl	80106fc <USBH_CtlReq>
 800e8c6:	4603      	mov	r3, r0

}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3708      	adds	r7, #8
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}

0800e8d0 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b084      	sub	sp, #16
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	3302      	adds	r3, #2
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	3303      	adds	r3, #3
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	021b      	lsls	r3, r3, #8
 800e8ee:	b29b      	uxth	r3, r3
 800e8f0:	4313      	orrs	r3, r2
 800e8f2:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800e8f4:	897b      	ldrh	r3, [r7, #10]
 800e8f6:	2b09      	cmp	r3, #9
 800e8f8:	d941      	bls.n	800e97e <USBH_HID_ParseHIDDesc+0xae>
  {
    ptr = USB_LEN_CFG_DESC;
 800e8fa:	2309      	movs	r3, #9
 800e8fc:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 800e8fe:	e03a      	b.n	800e976 <USBH_HID_ParseHIDDesc+0xa6>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e900:	f107 0308 	add.w	r3, r7, #8
 800e904:	4619      	mov	r1, r3
 800e906:	68f8      	ldr	r0, [r7, #12]
 800e908:	f001 fede 	bl	80106c8 <USBH_GetNextDesc>
 800e90c:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	785b      	ldrb	r3, [r3, #1]
 800e912:	2b21      	cmp	r3, #33	@ 0x21
 800e914:	d12f      	bne.n	800e976 <USBH_HID_ParseHIDDesc+0xa6>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	781a      	ldrb	r2, [r3, #0]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	785a      	ldrb	r2, [r3, #1]
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	3302      	adds	r3, #2
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	461a      	mov	r2, r3
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	3303      	adds	r3, #3
 800e932:	781b      	ldrb	r3, [r3, #0]
 800e934:	021b      	lsls	r3, r3, #8
 800e936:	b29b      	uxth	r3, r3
 800e938:	4313      	orrs	r3, r2
 800e93a:	b29a      	uxth	r2, r3
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	791a      	ldrb	r2, [r3, #4]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	795a      	ldrb	r2, [r3, #5]
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	799a      	ldrb	r2, [r3, #6]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	3307      	adds	r3, #7
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	461a      	mov	r2, r3
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	3308      	adds	r3, #8
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	021b      	lsls	r3, r3, #8
 800e968:	b29b      	uxth	r3, r3
 800e96a:	4313      	orrs	r3, r2
 800e96c:	b29a      	uxth	r2, r3
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	811a      	strh	r2, [r3, #8]
        break;
 800e972:	bf00      	nop
      }
    }
  }
}
 800e974:	e003      	b.n	800e97e <USBH_HID_ParseHIDDesc+0xae>
    while (ptr < CfgDescLen)
 800e976:	893b      	ldrh	r3, [r7, #8]
 800e978:	897a      	ldrh	r2, [r7, #10]
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d8c0      	bhi.n	800e900 <USBH_HID_ParseHIDDesc+0x30>
}
 800e97e:	bf00      	nop
 800e980:	3710      	adds	r7, #16
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}

0800e986 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 800e986:	b480      	push	{r7}
 800e988:	b085      	sub	sp, #20
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	60f8      	str	r0, [r7, #12]
 800e98e:	60b9      	str	r1, [r7, #8]
 800e990:	4613      	mov	r3, r2
 800e992:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2200      	movs	r2, #0
 800e998:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	2200      	movs	r2, #0
 800e99e:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	88fa      	ldrh	r2, [r7, #6]
 800e9aa:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	68ba      	ldr	r2, [r7, #8]
 800e9b0:	601a      	str	r2, [r3, #0]
}
 800e9b2:	bf00      	nop
 800e9b4:	3714      	adds	r7, #20
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9bc:	4770      	bx	lr

0800e9be <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 800e9be:	b480      	push	{r7}
 800e9c0:	b087      	sub	sp, #28
 800e9c2:	af00      	add	r7, sp, #0
 800e9c4:	60f8      	str	r0, [r7, #12]
 800e9c6:	60b9      	str	r1, [r7, #8]
 800e9c8:	4613      	mov	r3, r2
 800e9ca:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	7a9b      	ldrb	r3, [r3, #10]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d131      	bne.n	800ea3c <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2201      	movs	r2, #1
 800e9dc:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800e9de:	2300      	movs	r3, #0
 800e9e0:	82fb      	strh	r3, [r7, #22]
 800e9e2:	e027      	b.n	800ea34 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	88da      	ldrh	r2, [r3, #6]
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	889b      	ldrh	r3, [r3, #4]
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d019      	beq.n	800ea24 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	68fa      	ldr	r2, [r7, #12]
 800e9f6:	88d2      	ldrh	r2, [r2, #6]
 800e9f8:	441a      	add	r2, r3
 800e9fa:	693b      	ldr	r3, [r7, #16]
 800e9fc:	1c59      	adds	r1, r3, #1
 800e9fe:	6139      	str	r1, [r7, #16]
 800ea00:	7812      	ldrb	r2, [r2, #0]
 800ea02:	701a      	strb	r2, [r3, #0]
        f->tail++;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	88db      	ldrh	r3, [r3, #6]
 800ea08:	3301      	adds	r3, #1
 800ea0a:	b29a      	uxth	r2, r3
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	88da      	ldrh	r2, [r3, #6]
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	891b      	ldrh	r3, [r3, #8]
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	d108      	bne.n	800ea2e <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	80da      	strh	r2, [r3, #6]
 800ea22:	e004      	b.n	800ea2e <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	2200      	movs	r2, #0
 800ea28:	729a      	strb	r2, [r3, #10]
        return i;
 800ea2a:	8afb      	ldrh	r3, [r7, #22]
 800ea2c:	e00a      	b.n	800ea44 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 800ea2e:	8afb      	ldrh	r3, [r7, #22]
 800ea30:	3301      	adds	r3, #1
 800ea32:	82fb      	strh	r3, [r7, #22]
 800ea34:	8afa      	ldrh	r2, [r7, #22]
 800ea36:	88fb      	ldrh	r3, [r7, #6]
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d3d3      	bcc.n	800e9e4 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2200      	movs	r2, #0
 800ea40:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800ea42:	88fb      	ldrh	r3, [r7, #6]
}
 800ea44:	4618      	mov	r0, r3
 800ea46:	371c      	adds	r7, #28
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4e:	4770      	bx	lr

0800ea50 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b087      	sub	sp, #28
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	60f8      	str	r0, [r7, #12]
 800ea58:	60b9      	str	r1, [r7, #8]
 800ea5a:	4613      	mov	r3, r2
 800ea5c:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	7a9b      	ldrb	r3, [r3, #10]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d13c      	bne.n	800eae4 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800ea70:	2300      	movs	r3, #0
 800ea72:	82fb      	strh	r3, [r7, #22]
 800ea74:	e032      	b.n	800eadc <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	889b      	ldrh	r3, [r3, #4]
 800ea7a:	3301      	adds	r3, #1
 800ea7c:	68fa      	ldr	r2, [r7, #12]
 800ea7e:	88d2      	ldrh	r2, [r2, #6]
 800ea80:	4293      	cmp	r3, r2
 800ea82:	d00a      	beq.n	800ea9a <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	889b      	ldrh	r3, [r3, #4]
 800ea88:	3301      	adds	r3, #1
 800ea8a:	68fa      	ldr	r2, [r7, #12]
 800ea8c:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 800ea8e:	4293      	cmp	r3, r2
 800ea90:	d108      	bne.n	800eaa4 <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	88db      	ldrh	r3, [r3, #6]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d104      	bne.n	800eaa4 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	729a      	strb	r2, [r3, #10]
        return i;
 800eaa0:	8afb      	ldrh	r3, [r7, #22]
 800eaa2:	e023      	b.n	800eaec <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	1c5a      	adds	r2, r3, #1
 800eaa8:	613a      	str	r2, [r7, #16]
 800eaaa:	68fa      	ldr	r2, [r7, #12]
 800eaac:	6812      	ldr	r2, [r2, #0]
 800eaae:	68f9      	ldr	r1, [r7, #12]
 800eab0:	8889      	ldrh	r1, [r1, #4]
 800eab2:	440a      	add	r2, r1
 800eab4:	781b      	ldrb	r3, [r3, #0]
 800eab6:	7013      	strb	r3, [r2, #0]
        f->head++;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	889b      	ldrh	r3, [r3, #4]
 800eabc:	3301      	adds	r3, #1
 800eabe:	b29a      	uxth	r2, r3
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	889a      	ldrh	r2, [r3, #4]
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	891b      	ldrh	r3, [r3, #8]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d102      	bne.n	800ead6 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2200      	movs	r2, #0
 800ead4:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 800ead6:	8afb      	ldrh	r3, [r7, #22]
 800ead8:	3301      	adds	r3, #1
 800eada:	82fb      	strh	r3, [r7, #22]
 800eadc:	8afa      	ldrh	r2, [r7, #22]
 800eade:	88fb      	ldrh	r3, [r7, #6]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d3c8      	bcc.n	800ea76 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	2200      	movs	r2, #0
 800eae8:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800eaea:	88fb      	ldrh	r3, [r7, #6]
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	371c      	adds	r7, #28
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr

0800eaf8 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b084      	sub	sp, #16
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800eb06:	69db      	ldr	r3, [r3, #28]
 800eb08:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 800eb0a:	4b22      	ldr	r3, [pc, #136]	@ (800eb94 <USBH_HID_KeybdInit+0x9c>)
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 800eb10:	4b20      	ldr	r3, [pc, #128]	@ (800eb94 <USBH_HID_KeybdInit+0x9c>)
 800eb12:	2200      	movs	r2, #0
 800eb14:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 800eb16:	4b1f      	ldr	r3, [pc, #124]	@ (800eb94 <USBH_HID_KeybdInit+0x9c>)
 800eb18:	2200      	movs	r2, #0
 800eb1a:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 800eb1c:	4b1d      	ldr	r3, [pc, #116]	@ (800eb94 <USBH_HID_KeybdInit+0x9c>)
 800eb1e:	2200      	movs	r2, #0
 800eb20:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 800eb22:	4b1c      	ldr	r3, [pc, #112]	@ (800eb94 <USBH_HID_KeybdInit+0x9c>)
 800eb24:	2200      	movs	r2, #0
 800eb26:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 800eb28:	4b1a      	ldr	r3, [pc, #104]	@ (800eb94 <USBH_HID_KeybdInit+0x9c>)
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 800eb2e:	4b19      	ldr	r3, [pc, #100]	@ (800eb94 <USBH_HID_KeybdInit+0x9c>)
 800eb30:	2200      	movs	r2, #0
 800eb32:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 800eb34:	4b17      	ldr	r3, [pc, #92]	@ (800eb94 <USBH_HID_KeybdInit+0x9c>)
 800eb36:	2200      	movs	r2, #0
 800eb38:	721a      	strb	r2, [r3, #8]

  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	60fb      	str	r3, [r7, #12]
 800eb3e:	e00c      	b.n	800eb5a <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 800eb40:	4a15      	ldr	r2, [pc, #84]	@ (800eb98 <USBH_HID_KeybdInit+0xa0>)
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	4413      	add	r3, r2
 800eb46:	2200      	movs	r2, #0
 800eb48:	701a      	strb	r2, [r3, #0]
    keybd_rx_report_buf[x] = 0U;
 800eb4a:	4a14      	ldr	r2, [pc, #80]	@ (800eb9c <USBH_HID_KeybdInit+0xa4>)
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	4413      	add	r3, r2
 800eb50:	2200      	movs	r2, #0
 800eb52:	701a      	strb	r2, [r3, #0]
  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	3301      	adds	r3, #1
 800eb58:	60fb      	str	r3, [r7, #12]
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	2b07      	cmp	r3, #7
 800eb5e:	d9ef      	bls.n	800eb40 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	8b1b      	ldrh	r3, [r3, #24]
 800eb64:	2b08      	cmp	r3, #8
 800eb66:	d902      	bls.n	800eb6e <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	2208      	movs	r2, #8
 800eb6c:	831a      	strh	r2, [r3, #24]
  }

  HID_Handle->pData = keybd_rx_report_buf;
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	4a0a      	ldr	r2, [pc, #40]	@ (800eb9c <USBH_HID_KeybdInit+0xa4>)
 800eb72:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	f103 0008 	add.w	r0, r3, #8
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800eb80:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800eb84:	4619      	mov	r1, r3
 800eb86:	f7ff fefe 	bl	800e986 <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800eb8a:	2300      	movs	r3, #0
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3710      	adds	r7, #16
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}
 800eb94:	20008524 	.word	0x20008524
 800eb98:	2000853c 	.word	0x2000853c
 800eb9c:	20008534 	.word	0x20008534

0800eba0 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b082      	sub	sp, #8
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f000 f80d 	bl	800ebc8 <USBH_HID_KeybdDecode>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d101      	bne.n	800ebb8 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 800ebb4:	4b03      	ldr	r3, [pc, #12]	@ (800ebc4 <USBH_HID_GetKeybdInfo+0x24>)
 800ebb6:	e000      	b.n	800ebba <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800ebb8:	2300      	movs	r3, #0
  }
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3708      	adds	r7, #8
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	20008524 	.word	0x20008524

0800ebc8 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b084      	sub	sp, #16
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800ebd6:	69db      	ldr	r3, [r3, #28]
 800ebd8:	60bb      	str	r3, [r7, #8]

  if ((HID_Handle->length == 0U) || (HID_Handle->fifo.buf == NULL))
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	8b1b      	ldrh	r3, [r3, #24]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d003      	beq.n	800ebea <USBH_HID_KeybdDecode+0x22>
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	689b      	ldr	r3, [r3, #8]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d101      	bne.n	800ebee <USBH_HID_KeybdDecode+0x26>
  {
    return USBH_FAIL;
 800ebea:	2302      	movs	r3, #2
 800ebec:	e066      	b.n	800ecbc <USBH_HID_KeybdDecode+0xf4>
  }

  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	f103 0008 	add.w	r0, r3, #8
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	8b1b      	ldrh	r3, [r3, #24]
 800ebf8:	461a      	mov	r2, r3
 800ebfa:	4932      	ldr	r1, [pc, #200]	@ (800ecc4 <USBH_HID_KeybdDecode+0xfc>)
 800ebfc:	f7ff fedf 	bl	800e9be <USBH_HID_FifoRead>
 800ec00:	4603      	mov	r3, r0
 800ec02:	461a      	mov	r2, r3
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	8b1b      	ldrh	r3, [r3, #24]
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d156      	bne.n	800ecba <USBH_HID_KeybdDecode+0xf2>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 800ec0c:	2100      	movs	r1, #0
 800ec0e:	482e      	ldr	r0, [pc, #184]	@ (800ecc8 <USBH_HID_KeybdDecode+0x100>)
 800ec10:	f000 f8e6 	bl	800ede0 <HID_ReadItem>
 800ec14:	4603      	mov	r3, r0
 800ec16:	b2da      	uxtb	r2, r3
 800ec18:	4b2c      	ldr	r3, [pc, #176]	@ (800eccc <USBH_HID_KeybdDecode+0x104>)
 800ec1a:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800ec1c:	2100      	movs	r1, #0
 800ec1e:	482c      	ldr	r0, [pc, #176]	@ (800ecd0 <USBH_HID_KeybdDecode+0x108>)
 800ec20:	f000 f8de 	bl	800ede0 <HID_ReadItem>
 800ec24:	4603      	mov	r3, r0
 800ec26:	b2da      	uxtb	r2, r3
 800ec28:	4b28      	ldr	r3, [pc, #160]	@ (800eccc <USBH_HID_KeybdDecode+0x104>)
 800ec2a:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 800ec2c:	2100      	movs	r1, #0
 800ec2e:	4829      	ldr	r0, [pc, #164]	@ (800ecd4 <USBH_HID_KeybdDecode+0x10c>)
 800ec30:	f000 f8d6 	bl	800ede0 <HID_ReadItem>
 800ec34:	4603      	mov	r3, r0
 800ec36:	b2da      	uxtb	r2, r3
 800ec38:	4b24      	ldr	r3, [pc, #144]	@ (800eccc <USBH_HID_KeybdDecode+0x104>)
 800ec3a:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800ec3c:	2100      	movs	r1, #0
 800ec3e:	4826      	ldr	r0, [pc, #152]	@ (800ecd8 <USBH_HID_KeybdDecode+0x110>)
 800ec40:	f000 f8ce 	bl	800ede0 <HID_ReadItem>
 800ec44:	4603      	mov	r3, r0
 800ec46:	b2da      	uxtb	r2, r3
 800ec48:	4b20      	ldr	r3, [pc, #128]	@ (800eccc <USBH_HID_KeybdDecode+0x104>)
 800ec4a:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800ec4c:	2100      	movs	r1, #0
 800ec4e:	4823      	ldr	r0, [pc, #140]	@ (800ecdc <USBH_HID_KeybdDecode+0x114>)
 800ec50:	f000 f8c6 	bl	800ede0 <HID_ReadItem>
 800ec54:	4603      	mov	r3, r0
 800ec56:	b2da      	uxtb	r2, r3
 800ec58:	4b1c      	ldr	r3, [pc, #112]	@ (800eccc <USBH_HID_KeybdDecode+0x104>)
 800ec5a:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 800ec5c:	2100      	movs	r1, #0
 800ec5e:	4820      	ldr	r0, [pc, #128]	@ (800ece0 <USBH_HID_KeybdDecode+0x118>)
 800ec60:	f000 f8be 	bl	800ede0 <HID_ReadItem>
 800ec64:	4603      	mov	r3, r0
 800ec66:	b2da      	uxtb	r2, r3
 800ec68:	4b18      	ldr	r3, [pc, #96]	@ (800eccc <USBH_HID_KeybdDecode+0x104>)
 800ec6a:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 800ec6c:	2100      	movs	r1, #0
 800ec6e:	481d      	ldr	r0, [pc, #116]	@ (800ece4 <USBH_HID_KeybdDecode+0x11c>)
 800ec70:	f000 f8b6 	bl	800ede0 <HID_ReadItem>
 800ec74:	4603      	mov	r3, r0
 800ec76:	b2da      	uxtb	r2, r3
 800ec78:	4b14      	ldr	r3, [pc, #80]	@ (800eccc <USBH_HID_KeybdDecode+0x104>)
 800ec7a:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 800ec7c:	2100      	movs	r1, #0
 800ec7e:	481a      	ldr	r0, [pc, #104]	@ (800ece8 <USBH_HID_KeybdDecode+0x120>)
 800ec80:	f000 f8ae 	bl	800ede0 <HID_ReadItem>
 800ec84:	4603      	mov	r3, r0
 800ec86:	b2da      	uxtb	r2, r3
 800ec88:	4b10      	ldr	r3, [pc, #64]	@ (800eccc <USBH_HID_KeybdDecode+0x104>)
 800ec8a:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	73fb      	strb	r3, [r7, #15]
 800ec90:	e00e      	b.n	800ecb0 <USBH_HID_KeybdDecode+0xe8>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800ec92:	7bfb      	ldrb	r3, [r7, #15]
 800ec94:	4619      	mov	r1, r3
 800ec96:	4815      	ldr	r0, [pc, #84]	@ (800ecec <USBH_HID_KeybdDecode+0x124>)
 800ec98:	f000 f8a2 	bl	800ede0 <HID_ReadItem>
 800ec9c:	4602      	mov	r2, r0
 800ec9e:	7bfb      	ldrb	r3, [r7, #15]
 800eca0:	b2d1      	uxtb	r1, r2
 800eca2:	4a0a      	ldr	r2, [pc, #40]	@ (800eccc <USBH_HID_KeybdDecode+0x104>)
 800eca4:	4413      	add	r3, r2
 800eca6:	460a      	mov	r2, r1
 800eca8:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800ecaa:	7bfb      	ldrb	r3, [r7, #15]
 800ecac:	3301      	adds	r3, #1
 800ecae:	73fb      	strb	r3, [r7, #15]
 800ecb0:	7bfb      	ldrb	r3, [r7, #15]
 800ecb2:	2b05      	cmp	r3, #5
 800ecb4:	d9ed      	bls.n	800ec92 <USBH_HID_KeybdDecode+0xca>
    }

    return USBH_OK;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	e000      	b.n	800ecbc <USBH_HID_KeybdDecode+0xf4>
  }
  return   USBH_FAIL;
 800ecba:	2302      	movs	r3, #2
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3710      	adds	r7, #16
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}
 800ecc4:	2000853c 	.word	0x2000853c
 800ecc8:	080163e0 	.word	0x080163e0
 800eccc:	20008524 	.word	0x20008524
 800ecd0:	08016400 	.word	0x08016400
 800ecd4:	08016420 	.word	0x08016420
 800ecd8:	08016440 	.word	0x08016440
 800ecdc:	08016460 	.word	0x08016460
 800ece0:	08016480 	.word	0x08016480
 800ece4:	080164a0 	.word	0x080164a0
 800ece8:	080164c0 	.word	0x080164c0
 800ecec:	080164e0 	.word	0x080164e0

0800ecf0 <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b085      	sub	sp, #20
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	789b      	ldrb	r3, [r3, #2]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d103      	bne.n	800ed08 <USBH_HID_GetASCIICode+0x18>
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	799b      	ldrb	r3, [r3, #6]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d009      	beq.n	800ed1c <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	7a5b      	ldrb	r3, [r3, #9]
 800ed0c:	461a      	mov	r2, r3
 800ed0e:	4b0b      	ldr	r3, [pc, #44]	@ (800ed3c <USBH_HID_GetASCIICode+0x4c>)
 800ed10:	5c9b      	ldrb	r3, [r3, r2]
 800ed12:	461a      	mov	r2, r3
 800ed14:	4b0a      	ldr	r3, [pc, #40]	@ (800ed40 <USBH_HID_GetASCIICode+0x50>)
 800ed16:	5c9b      	ldrb	r3, [r3, r2]
 800ed18:	73fb      	strb	r3, [r7, #15]
 800ed1a:	e008      	b.n	800ed2e <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	7a5b      	ldrb	r3, [r3, #9]
 800ed20:	461a      	mov	r2, r3
 800ed22:	4b06      	ldr	r3, [pc, #24]	@ (800ed3c <USBH_HID_GetASCIICode+0x4c>)
 800ed24:	5c9b      	ldrb	r3, [r3, r2]
 800ed26:	461a      	mov	r2, r3
 800ed28:	4b06      	ldr	r3, [pc, #24]	@ (800ed44 <USBH_HID_GetASCIICode+0x54>)
 800ed2a:	5c9b      	ldrb	r3, [r3, r2]
 800ed2c:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 800ed2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3714      	adds	r7, #20
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr
 800ed3c:	08016608 	.word	0x08016608
 800ed40:	08016584 	.word	0x08016584
 800ed44:	08016500 	.word	0x08016500

0800ed48 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b084      	sub	sp, #16
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800ed56:	69db      	ldr	r3, [r3, #28]
 800ed58:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 800ed5a:	4b1e      	ldr	r3, [pc, #120]	@ (800edd4 <USBH_HID_MouseInit+0x8c>)
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 800ed60:	4b1c      	ldr	r3, [pc, #112]	@ (800edd4 <USBH_HID_MouseInit+0x8c>)
 800ed62:	2200      	movs	r2, #0
 800ed64:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 800ed66:	4b1b      	ldr	r3, [pc, #108]	@ (800edd4 <USBH_HID_MouseInit+0x8c>)
 800ed68:	2200      	movs	r2, #0
 800ed6a:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 800ed6c:	4b19      	ldr	r3, [pc, #100]	@ (800edd4 <USBH_HID_MouseInit+0x8c>)
 800ed6e:	2200      	movs	r2, #0
 800ed70:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 800ed72:	4b18      	ldr	r3, [pc, #96]	@ (800edd4 <USBH_HID_MouseInit+0x8c>)
 800ed74:	2200      	movs	r2, #0
 800ed76:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800ed78:	2300      	movs	r3, #0
 800ed7a:	60fb      	str	r3, [r7, #12]
 800ed7c:	e00c      	b.n	800ed98 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 800ed7e:	4a16      	ldr	r2, [pc, #88]	@ (800edd8 <USBH_HID_MouseInit+0x90>)
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	4413      	add	r3, r2
 800ed84:	2200      	movs	r2, #0
 800ed86:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 800ed88:	4a14      	ldr	r2, [pc, #80]	@ (800eddc <USBH_HID_MouseInit+0x94>)
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	4413      	add	r3, r2
 800ed8e:	2200      	movs	r2, #0
 800ed90:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	3301      	adds	r3, #1
 800ed96:	60fb      	str	r3, [r7, #12]
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2b07      	cmp	r3, #7
 800ed9c:	d9ef      	bls.n	800ed7e <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	8b1b      	ldrh	r3, [r3, #24]
 800eda2:	2b08      	cmp	r3, #8
 800eda4:	d902      	bls.n	800edac <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	2208      	movs	r2, #8
 800edaa:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = mouse_rx_report_buf;
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	4a0b      	ldr	r2, [pc, #44]	@ (800eddc <USBH_HID_MouseInit+0x94>)
 800edb0:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	f103 0008 	add.w	r0, r3, #8
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800edbe:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800edc2:	4619      	mov	r1, r3
 800edc4:	f7ff fddf 	bl	800e986 <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800edc8:	2300      	movs	r3, #0
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3710      	adds	r7, #16
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}
 800edd2:	bf00      	nop
 800edd4:	20008544 	.word	0x20008544
 800edd8:	2000854c 	.word	0x2000854c
 800eddc:	20008554 	.word	0x20008554

0800ede0 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b089      	sub	sp, #36	@ 0x24
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	460b      	mov	r3, r1
 800edea:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 800edec:	2300      	movs	r3, #0
 800edee:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 800edf0:	2300      	movs	r3, #0
 800edf2:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	7a1b      	ldrb	r3, [r3, #8]
 800edfe:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, we may need to offset ri->data.*/
  if (ri->count > 0U)
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	7a5b      	ldrb	r3, [r3, #9]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d01a      	beq.n	800ee3e <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	7a5b      	ldrb	r3, [r3, #9]
 800ee0c:	78fa      	ldrb	r2, [r7, #3]
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d301      	bcc.n	800ee16 <HID_ReadItem+0x36>
    {
      return (0U);
 800ee12:	2300      	movs	r3, #0
 800ee14:	e078      	b.n	800ef08 <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800ee16:	78fb      	ldrb	r3, [r7, #3]
 800ee18:	687a      	ldr	r2, [r7, #4]
 800ee1a:	6852      	ldr	r2, [r2, #4]
 800ee1c:	fb02 f303 	mul.w	r3, r2, r3
 800ee20:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800ee22:	7cfb      	ldrb	r3, [r7, #19]
 800ee24:	68fa      	ldr	r2, [r7, #12]
 800ee26:	4413      	add	r3, r2
 800ee28:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	08db      	lsrs	r3, r3, #3
 800ee2e:	697a      	ldr	r2, [r7, #20]
 800ee30:	4413      	add	r3, r2
 800ee32:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	b2db      	uxtb	r3, r3
 800ee38:	f003 0307 	and.w	r3, r3, #7
 800ee3c:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800ee3e:	2300      	movs	r3, #0
 800ee40:	61bb      	str	r3, [r7, #24]
 800ee42:	e00a      	b.n	800ee5a <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	461a      	mov	r2, r3
 800ee4a:	69bb      	ldr	r3, [r7, #24]
 800ee4c:	00db      	lsls	r3, r3, #3
 800ee4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ee52:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800ee54:	69bb      	ldr	r3, [r7, #24]
 800ee56:	3301      	adds	r3, #1
 800ee58:	61bb      	str	r3, [r7, #24]
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	685b      	ldr	r3, [r3, #4]
 800ee5e:	f003 0307 	and.w	r3, r3, #7
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d004      	beq.n	800ee70 <HID_ReadItem+0x90>
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	685b      	ldr	r3, [r3, #4]
 800ee6a:	08db      	lsrs	r3, r3, #3
 800ee6c:	3301      	adds	r3, #1
 800ee6e:	e002      	b.n	800ee76 <HID_ReadItem+0x96>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	08db      	lsrs	r3, r3, #3
 800ee76:	69ba      	ldr	r2, [r7, #24]
 800ee78:	4293      	cmp	r3, r2
 800ee7a:	d8e3      	bhi.n	800ee44 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 800ee7c:	7cfb      	ldrb	r3, [r7, #19]
 800ee7e:	69fa      	ldr	r2, [r7, #28]
 800ee80:	40da      	lsrs	r2, r3
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	685b      	ldr	r3, [r3, #4]
 800ee86:	f04f 31ff 	mov.w	r1, #4294967295
 800ee8a:	fa01 f303 	lsl.w	r3, r1, r3
 800ee8e:	43db      	mvns	r3, r3
 800ee90:	4013      	ands	r3, r2
 800ee92:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	68db      	ldr	r3, [r3, #12]
 800ee98:	69fa      	ldr	r2, [r7, #28]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d304      	bcc.n	800eea8 <HID_ReadItem+0xc8>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	691b      	ldr	r3, [r3, #16]
 800eea2:	69fa      	ldr	r2, [r7, #28]
 800eea4:	429a      	cmp	r2, r3
 800eea6:	d901      	bls.n	800eeac <HID_ReadItem+0xcc>
  {
    return (0U);
 800eea8:	2300      	movs	r3, #0
 800eeaa:	e02d      	b.n	800ef08 <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	7a9b      	ldrb	r3, [r3, #10]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d01e      	beq.n	800eef2 <HID_ReadItem+0x112>
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	685b      	ldr	r3, [r3, #4]
 800eeb8:	3b01      	subs	r3, #1
 800eeba:	69fa      	ldr	r2, [r7, #28]
 800eebc:	fa22 f303 	lsr.w	r3, r2, r3
 800eec0:	f003 0301 	and.w	r3, r3, #1
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d014      	beq.n	800eef2 <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	685b      	ldr	r3, [r3, #4]
 800eecc:	2201      	movs	r2, #1
 800eece:	fa02 f303 	lsl.w	r3, r2, r3
 800eed2:	425b      	negs	r3, r3
 800eed4:	69fa      	ldr	r2, [r7, #28]
 800eed6:	4313      	orrs	r3, r2
 800eed8:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	69db      	ldr	r3, [r3, #28]
 800eede:	2b01      	cmp	r3, #1
 800eee0:	d101      	bne.n	800eee6 <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	e010      	b.n	800ef08 <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	69db      	ldr	r3, [r3, #28]
 800eeea:	68ba      	ldr	r2, [r7, #8]
 800eeec:	fb02 f303 	mul.w	r3, r2, r3
 800eef0:	e00a      	b.n	800ef08 <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	69db      	ldr	r3, [r3, #28]
 800eef6:	2b01      	cmp	r3, #1
 800eef8:	d101      	bne.n	800eefe <HID_ReadItem+0x11e>
    {
      return (val);
 800eefa:	69fb      	ldr	r3, [r7, #28]
 800eefc:	e004      	b.n	800ef08 <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	69db      	ldr	r3, [r3, #28]
 800ef02:	69fa      	ldr	r2, [r7, #28]
 800ef04:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3724      	adds	r7, #36	@ 0x24
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr

0800ef14 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b084      	sub	sp, #16
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	60f8      	str	r0, [r7, #12]
 800ef1c:	60b9      	str	r1, [r7, #8]
 800ef1e:	4613      	mov	r3, r2
 800ef20:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d10a      	bne.n	800ef3e <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800ef28:	481c      	ldr	r0, [pc, #112]	@ (800ef9c <USBH_Init+0x88>)
 800ef2a:	f002 fb49 	bl	80115c0 <iprintf>
 800ef2e:	481c      	ldr	r0, [pc, #112]	@ (800efa0 <USBH_Init+0x8c>)
 800ef30:	f002 fb46 	bl	80115c0 <iprintf>
 800ef34:	200a      	movs	r0, #10
 800ef36:	f002 fb55 	bl	80115e4 <putchar>
    return USBH_FAIL;
 800ef3a:	2302      	movs	r3, #2
 800ef3c:	e029      	b.n	800ef92 <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	79fa      	ldrb	r2, [r7, #7]
 800ef42:	f883 2d84 	strb.w	r2, [r3, #3460]	@ 0xd84

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
  phost->ClassNumber = 0U;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	2200      	movs	r2, #0
 800ef52:	f8c3 2d38 	str.w	r2, [r3, #3384]	@ 0xd38

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ef56:	68f8      	ldr	r0, [r7, #12]
 800ef58:	f000 f824 	bl	800efa4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb
  phost->device.is_connected = 0U;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	2200      	movs	r2, #0
 800ef68:	f883 2cd8 	strb.w	r2, [r3, #3288]	@ 0xcd8
  phost->device.is_disconnected = 0U;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9
  phost->device.is_ReEnumerated = 0U;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2200      	movs	r2, #0
 800ef78:	f883 2cda 	strb.w	r2, [r3, #3290]	@ 0xcda

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d003      	beq.n	800ef8a <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	68ba      	ldr	r2, [r7, #8]
 800ef86:	f8c3 2d8c 	str.w	r2, [r3, #3468]	@ 0xd8c

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800ef8a:	68f8      	ldr	r0, [r7, #12]
 800ef8c:	f001 ff98 	bl	8010ec0 <USBH_LL_Init>

  return USBH_OK;
 800ef90:	2300      	movs	r3, #0
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3710      	adds	r7, #16
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	080128ec 	.word	0x080128ec
 800efa0:	080128f4 	.word	0x080128f4

0800efa4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800efac:	2300      	movs	r3, #0
 800efae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800efb0:	2300      	movs	r3, #0
 800efb2:	60fb      	str	r3, [r7, #12]
 800efb4:	e00a      	b.n	800efcc <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 800efb6:	687a      	ldr	r2, [r7, #4]
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800efbe:	009b      	lsls	r3, r3, #2
 800efc0:	4413      	add	r3, r2
 800efc2:	2200      	movs	r2, #0
 800efc4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	3301      	adds	r3, #1
 800efca:	60fb      	str	r3, [r7, #12]
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	2b0f      	cmp	r3, #15
 800efd0:	d9f1      	bls.n	800efb6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800efd2:	2300      	movs	r3, #0
 800efd4:	60fb      	str	r3, [r7, #12]
 800efd6:	e009      	b.n	800efec <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800efd8:	687a      	ldr	r2, [r7, #4]
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	4413      	add	r3, r2
 800efde:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800efe2:	2200      	movs	r2, #0
 800efe4:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	3301      	adds	r3, #1
 800efea:	60fb      	str	r3, [r7, #12]
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d9f0      	bls.n	800efd8 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2200      	movs	r2, #0
 800effa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2200      	movs	r2, #0
 800f000:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2201      	movs	r2, #1
 800f006:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2200      	movs	r2, #0
 800f00c:	f8c3 2d7c 	str.w	r2, [r3, #3452]	@ 0xd7c

  phost->Control.state = CTRL_SETUP;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2201      	movs	r2, #1
 800f014:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2240      	movs	r2, #64	@ 0x40
 800f01a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2200      	movs	r2, #0
 800f020:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	2200      	movs	r2, #0
 800f026:	f883 2cd4 	strb.w	r2, [r3, #3284]	@ 0xcd4
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2201      	movs	r2, #1
 800f02e:	f883 2cd5 	strb.w	r2, [r3, #3285]	@ 0xcd5
  phost->device.RstCnt = 0U;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2200      	movs	r2, #0
 800f036:	f883 2cd7 	strb.w	r2, [r3, #3287]	@ 0xcd7
  phost->device.EnumCnt = 0U;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2200      	movs	r2, #0
 800f03e:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	331c      	adds	r3, #28
 800f046:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f04a:	2100      	movs	r1, #0
 800f04c:	4618      	mov	r0, r3
 800f04e:	f002 fc27 	bl	80118a0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f058:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800f05c:	2100      	movs	r1, #0
 800f05e:	4618      	mov	r0, r3
 800f060:	f002 fc1e 	bl	80118a0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f603 43de 	addw	r3, r3, #3294	@ 0xcde
 800f06a:	2212      	movs	r2, #18
 800f06c:	2100      	movs	r1, #0
 800f06e:	4618      	mov	r0, r3
 800f070:	f002 fc16 	bl	80118a0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 800f07a:	223e      	movs	r2, #62	@ 0x3e
 800f07c:	2100      	movs	r1, #0
 800f07e:	4618      	mov	r0, r3
 800f080:	f002 fc0e 	bl	80118a0 <memset>

  return USBH_OK;
 800f084:	2300      	movs	r3, #0
}
 800f086:	4618      	mov	r0, r3
 800f088:	3710      	adds	r7, #16
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
	...

0800f090 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800f09a:	2300      	movs	r3, #0
 800f09c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d020      	beq.n	800f0e6 <USBH_RegisterClass+0x56>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	@ 0xd38
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d10f      	bne.n	800f0ce <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	@ 0xd38
 800f0b4:	1c59      	adds	r1, r3, #1
 800f0b6:	687a      	ldr	r2, [r7, #4]
 800f0b8:	f8c2 1d38 	str.w	r1, [r2, #3384]	@ 0xd38
 800f0bc:	687a      	ldr	r2, [r7, #4]
 800f0be:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 800f0c2:	6839      	ldr	r1, [r7, #0]
 800f0c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	73fb      	strb	r3, [r7, #15]
 800f0cc:	e016      	b.n	800f0fc <USBH_RegisterClass+0x6c>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800f0ce:	480e      	ldr	r0, [pc, #56]	@ (800f108 <USBH_RegisterClass+0x78>)
 800f0d0:	f002 fa76 	bl	80115c0 <iprintf>
 800f0d4:	480d      	ldr	r0, [pc, #52]	@ (800f10c <USBH_RegisterClass+0x7c>)
 800f0d6:	f002 fa73 	bl	80115c0 <iprintf>
 800f0da:	200a      	movs	r0, #10
 800f0dc:	f002 fa82 	bl	80115e4 <putchar>
      status = USBH_FAIL;
 800f0e0:	2302      	movs	r3, #2
 800f0e2:	73fb      	strb	r3, [r7, #15]
 800f0e4:	e00a      	b.n	800f0fc <USBH_RegisterClass+0x6c>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800f0e6:	4808      	ldr	r0, [pc, #32]	@ (800f108 <USBH_RegisterClass+0x78>)
 800f0e8:	f002 fa6a 	bl	80115c0 <iprintf>
 800f0ec:	4808      	ldr	r0, [pc, #32]	@ (800f110 <USBH_RegisterClass+0x80>)
 800f0ee:	f002 fa67 	bl	80115c0 <iprintf>
 800f0f2:	200a      	movs	r0, #10
 800f0f4:	f002 fa76 	bl	80115e4 <putchar>
    status = USBH_FAIL;
 800f0f8:	2302      	movs	r3, #2
 800f0fa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3710      	adds	r7, #16
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}
 800f106:	bf00      	nop
 800f108:	080128ec 	.word	0x080128ec
 800f10c:	08012908 	.word	0x08012908
 800f110:	08012924 	.word	0x08012924

0800f114 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b084      	sub	sp, #16
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	460b      	mov	r3, r1
 800f11e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800f120:	2300      	movs	r3, #0
 800f122:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f893 3cf4 	ldrb.w	r3, [r3, #3316]	@ 0xcf4
 800f12a:	78fa      	ldrb	r2, [r7, #3]
 800f12c:	429a      	cmp	r2, r3
 800f12e:	d23c      	bcs.n	800f1aa <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	78fa      	ldrb	r2, [r7, #3]
 800f134:	f883 2cdc 	strb.w	r2, [r3, #3292]	@ 0xcdc
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800f138:	78fb      	ldrb	r3, [r7, #3]
 800f13a:	4619      	mov	r1, r3
 800f13c:	4823      	ldr	r0, [pc, #140]	@ (800f1cc <USBH_SelectInterface+0xb8>)
 800f13e:	f002 fa3f 	bl	80115c0 <iprintf>
 800f142:	200a      	movs	r0, #10
 800f144:	f002 fa4e 	bl	80115e4 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800f148:	78fb      	ldrb	r3, [r7, #3]
 800f14a:	687a      	ldr	r2, [r7, #4]
 800f14c:	211a      	movs	r1, #26
 800f14e:	fb01 f303 	mul.w	r3, r1, r3
 800f152:	4413      	add	r3, r2
 800f154:	f603 43ff 	addw	r3, r3, #3327	@ 0xcff
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	4619      	mov	r1, r3
 800f15c:	481c      	ldr	r0, [pc, #112]	@ (800f1d0 <USBH_SelectInterface+0xbc>)
 800f15e:	f002 fa2f 	bl	80115c0 <iprintf>
 800f162:	200a      	movs	r0, #10
 800f164:	f002 fa3e 	bl	80115e4 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800f168:	78fb      	ldrb	r3, [r7, #3]
 800f16a:	687a      	ldr	r2, [r7, #4]
 800f16c:	211a      	movs	r1, #26
 800f16e:	fb01 f303 	mul.w	r3, r1, r3
 800f172:	4413      	add	r3, r2
 800f174:	f503 6350 	add.w	r3, r3, #3328	@ 0xd00
 800f178:	781b      	ldrb	r3, [r3, #0]
 800f17a:	4619      	mov	r1, r3
 800f17c:	4815      	ldr	r0, [pc, #84]	@ (800f1d4 <USBH_SelectInterface+0xc0>)
 800f17e:	f002 fa1f 	bl	80115c0 <iprintf>
 800f182:	200a      	movs	r0, #10
 800f184:	f002 fa2e 	bl	80115e4 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800f188:	78fb      	ldrb	r3, [r7, #3]
 800f18a:	687a      	ldr	r2, [r7, #4]
 800f18c:	211a      	movs	r1, #26
 800f18e:	fb01 f303 	mul.w	r3, r1, r3
 800f192:	4413      	add	r3, r2
 800f194:	f603 5301 	addw	r3, r3, #3329	@ 0xd01
 800f198:	781b      	ldrb	r3, [r3, #0]
 800f19a:	4619      	mov	r1, r3
 800f19c:	480e      	ldr	r0, [pc, #56]	@ (800f1d8 <USBH_SelectInterface+0xc4>)
 800f19e:	f002 fa0f 	bl	80115c0 <iprintf>
 800f1a2:	200a      	movs	r0, #10
 800f1a4:	f002 fa1e 	bl	80115e4 <putchar>
 800f1a8:	e00a      	b.n	800f1c0 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800f1aa:	480c      	ldr	r0, [pc, #48]	@ (800f1dc <USBH_SelectInterface+0xc8>)
 800f1ac:	f002 fa08 	bl	80115c0 <iprintf>
 800f1b0:	480b      	ldr	r0, [pc, #44]	@ (800f1e0 <USBH_SelectInterface+0xcc>)
 800f1b2:	f002 fa05 	bl	80115c0 <iprintf>
 800f1b6:	200a      	movs	r0, #10
 800f1b8:	f002 fa14 	bl	80115e4 <putchar>
    status = USBH_FAIL;
 800f1bc:	2302      	movs	r3, #2
 800f1be:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3710      	adds	r7, #16
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	0801293c 	.word	0x0801293c
 800f1d0:	0801295c 	.word	0x0801295c
 800f1d4:	0801296c 	.word	0x0801296c
 800f1d8:	0801297c 	.word	0x0801297c
 800f1dc:	080128ec 	.word	0x080128ec
 800f1e0:	0801298c 	.word	0x0801298c

0800f1e4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b087      	sub	sp, #28
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	4608      	mov	r0, r1
 800f1ee:	4611      	mov	r1, r2
 800f1f0:	461a      	mov	r2, r3
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	70fb      	strb	r3, [r7, #3]
 800f1f6:	460b      	mov	r3, r1
 800f1f8:	70bb      	strb	r3, [r7, #2]
 800f1fa:	4613      	mov	r3, r2
 800f1fc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800f1fe:	2300      	movs	r3, #0
 800f200:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800f202:	2300      	movs	r3, #0
 800f204:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 800f20c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f20e:	e025      	b.n	800f25c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800f210:	7dfb      	ldrb	r3, [r7, #23]
 800f212:	221a      	movs	r2, #26
 800f214:	fb02 f303 	mul.w	r3, r2, r3
 800f218:	3308      	adds	r3, #8
 800f21a:	68fa      	ldr	r2, [r7, #12]
 800f21c:	4413      	add	r3, r2
 800f21e:	3302      	adds	r3, #2
 800f220:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f222:	693b      	ldr	r3, [r7, #16]
 800f224:	795b      	ldrb	r3, [r3, #5]
 800f226:	78fa      	ldrb	r2, [r7, #3]
 800f228:	429a      	cmp	r2, r3
 800f22a:	d002      	beq.n	800f232 <USBH_FindInterface+0x4e>
 800f22c:	78fb      	ldrb	r3, [r7, #3]
 800f22e:	2bff      	cmp	r3, #255	@ 0xff
 800f230:	d111      	bne.n	800f256 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f232:	693b      	ldr	r3, [r7, #16]
 800f234:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f236:	78ba      	ldrb	r2, [r7, #2]
 800f238:	429a      	cmp	r2, r3
 800f23a:	d002      	beq.n	800f242 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f23c:	78bb      	ldrb	r3, [r7, #2]
 800f23e:	2bff      	cmp	r3, #255	@ 0xff
 800f240:	d109      	bne.n	800f256 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f246:	787a      	ldrb	r2, [r7, #1]
 800f248:	429a      	cmp	r2, r3
 800f24a:	d002      	beq.n	800f252 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f24c:	787b      	ldrb	r3, [r7, #1]
 800f24e:	2bff      	cmp	r3, #255	@ 0xff
 800f250:	d101      	bne.n	800f256 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800f252:	7dfb      	ldrb	r3, [r7, #23]
 800f254:	e006      	b.n	800f264 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800f256:	7dfb      	ldrb	r3, [r7, #23]
 800f258:	3301      	adds	r3, #1
 800f25a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f25c:	7dfb      	ldrb	r3, [r7, #23]
 800f25e:	2b01      	cmp	r3, #1
 800f260:	d9d6      	bls.n	800f210 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800f262:	23ff      	movs	r3, #255	@ 0xff
}
 800f264:	4618      	mov	r0, r3
 800f266:	371c      	adds	r7, #28
 800f268:	46bd      	mov	sp, r7
 800f26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26e:	4770      	bx	lr

0800f270 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b082      	sub	sp, #8
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f001 fe67 	bl	8010f4c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800f27e:	2101      	movs	r1, #1
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f001 ff80 	bl	8011186 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800f286:	2300      	movs	r3, #0
}
 800f288:	4618      	mov	r0, r3
 800f28a:	3708      	adds	r7, #8
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}

0800f290 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b088      	sub	sp, #32
 800f294:	af04      	add	r7, sp, #16
 800f296:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f298:	2302      	movs	r3, #2
 800f29a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800f29c:	2300      	movs	r3, #0
 800f29e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f893 3cd9 	ldrb.w	r3, [r3, #3289]	@ 0xcd9
 800f2a6:	b2db      	uxtb	r3, r3
 800f2a8:	2b01      	cmp	r3, #1
 800f2aa:	d102      	bne.n	800f2b2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2203      	movs	r2, #3
 800f2b0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	781b      	ldrb	r3, [r3, #0]
 800f2b6:	b2db      	uxtb	r3, r3
 800f2b8:	2b0b      	cmp	r3, #11
 800f2ba:	f200 8239 	bhi.w	800f730 <USBH_Process+0x4a0>
 800f2be:	a201      	add	r2, pc, #4	@ (adr r2, 800f2c4 <USBH_Process+0x34>)
 800f2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2c4:	0800f2f5 	.word	0x0800f2f5
 800f2c8:	0800f333 	.word	0x0800f333
 800f2cc:	0800f3b3 	.word	0x0800f3b3
 800f2d0:	0800f6bf 	.word	0x0800f6bf
 800f2d4:	0800f731 	.word	0x0800f731
 800f2d8:	0800f453 	.word	0x0800f453
 800f2dc:	0800f641 	.word	0x0800f641
 800f2e0:	0800f4a1 	.word	0x0800f4a1
 800f2e4:	0800f4c1 	.word	0x0800f4c1
 800f2e8:	0800f4eb 	.word	0x0800f4eb
 800f2ec:	0800f547 	.word	0x0800f547
 800f2f0:	0800f6a7 	.word	0x0800f6a7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f893 3cd8 	ldrb.w	r3, [r3, #3288]	@ 0xcd8
 800f2fa:	b2db      	uxtb	r3, r3
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	f000 8219 	beq.w	800f734 <USBH_Process+0x4a4>
      {
        USBH_UsrLog("USB Device Connected");
 800f302:	48a5      	ldr	r0, [pc, #660]	@ (800f598 <USBH_Process+0x308>)
 800f304:	f002 f95c 	bl	80115c0 <iprintf>
 800f308:	200a      	movs	r0, #10
 800f30a:	f002 f96b 	bl	80115e4 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2201      	movs	r2, #1
 800f312:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800f314:	20c8      	movs	r0, #200	@ 0xc8
 800f316:	f001 ff80 	bl	801121a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f001 fe73 	bl	8011006 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2200      	movs	r2, #0
 800f324:	f883 2cd4 	strb.w	r2, [r3, #3284]	@ 0xcd4
        phost->Timeout = 0U;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2200      	movs	r2, #0
 800f32c:	f8c3 2d80 	str.w	r2, [r3, #3456]	@ 0xd80
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f330:	e200      	b.n	800f734 <USBH_Process+0x4a4>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f893 3cdb 	ldrb.w	r3, [r3, #3291]	@ 0xcdb
 800f338:	2b01      	cmp	r3, #1
 800f33a:	d10d      	bne.n	800f358 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800f33c:	4897      	ldr	r0, [pc, #604]	@ (800f59c <USBH_Process+0x30c>)
 800f33e:	f002 f93f 	bl	80115c0 <iprintf>
 800f342:	200a      	movs	r0, #10
 800f344:	f002 f94e 	bl	80115e4 <putchar>
        phost->device.RstCnt = 0U;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2200      	movs	r2, #0
 800f34c:	f883 2cd7 	strb.w	r2, [r3, #3287]	@ 0xcd7
        phost->gState = HOST_DEV_ATTACHED;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2202      	movs	r2, #2
 800f354:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f356:	e1fa      	b.n	800f74e <USBH_Process+0x4be>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8d3 3d80 	ldr.w	r3, [r3, #3456]	@ 0xd80
 800f35e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f362:	d91a      	bls.n	800f39a <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f893 3cd7 	ldrb.w	r3, [r3, #3287]	@ 0xcd7
 800f36a:	3301      	adds	r3, #1
 800f36c:	b2da      	uxtb	r2, r3
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f883 2cd7 	strb.w	r2, [r3, #3287]	@ 0xcd7
          if (phost->device.RstCnt > 3U)
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f893 3cd7 	ldrb.w	r3, [r3, #3287]	@ 0xcd7
 800f37a:	2b03      	cmp	r3, #3
 800f37c:	d909      	bls.n	800f392 <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800f37e:	4888      	ldr	r0, [pc, #544]	@ (800f5a0 <USBH_Process+0x310>)
 800f380:	f002 f91e 	bl	80115c0 <iprintf>
 800f384:	200a      	movs	r0, #10
 800f386:	f002 f92d 	bl	80115e4 <putchar>
            phost->gState = HOST_ABORT_STATE;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	220d      	movs	r2, #13
 800f38e:	701a      	strb	r2, [r3, #0]
      break;
 800f390:	e1dd      	b.n	800f74e <USBH_Process+0x4be>
            phost->gState = HOST_IDLE;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	2200      	movs	r2, #0
 800f396:	701a      	strb	r2, [r3, #0]
      break;
 800f398:	e1d9      	b.n	800f74e <USBH_Process+0x4be>
          phost->Timeout += 10U;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f8d3 3d80 	ldr.w	r3, [r3, #3456]	@ 0xd80
 800f3a0:	f103 020a 	add.w	r2, r3, #10
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f8c3 2d80 	str.w	r2, [r3, #3456]	@ 0xd80
          USBH_Delay(10U);
 800f3aa:	200a      	movs	r0, #10
 800f3ac:	f001 ff35 	bl	801121a <USBH_Delay>
      break;
 800f3b0:	e1cd      	b.n	800f74e <USBH_Process+0x4be>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d005      	beq.n	800f3c8 <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800f3c2:	2104      	movs	r1, #4
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800f3c8:	2064      	movs	r0, #100	@ 0x64
 800f3ca:	f001 ff26 	bl	801121a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f001 fdf2 	bl	8010fb8 <USBH_LL_GetSpeed>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	461a      	mov	r2, r3
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f883 2cd5 	strb.w	r2, [r3, #3285]	@ 0xcd5

      phost->gState = HOST_ENUMERATION;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2205      	movs	r2, #5
 800f3e2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f3e4:	2100      	movs	r1, #0
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f001 fbf3 	bl	8010bd2 <USBH_AllocPipe>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f3f4:	2180      	movs	r1, #128	@ 0x80
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f001 fbeb 	bl	8010bd2 <USBH_AllocPipe>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	461a      	mov	r2, r3
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	7919      	ldrb	r1, [r3, #4]
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f414:	687a      	ldr	r2, [r7, #4]
 800f416:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f418:	9202      	str	r2, [sp, #8]
 800f41a:	2200      	movs	r2, #0
 800f41c:	9201      	str	r2, [sp, #4]
 800f41e:	9300      	str	r3, [sp, #0]
 800f420:	4603      	mov	r3, r0
 800f422:	2280      	movs	r2, #128	@ 0x80
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f001 fba5 	bl	8010b74 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	7959      	ldrb	r1, [r3, #5]
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f43a:	687a      	ldr	r2, [r7, #4]
 800f43c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f43e:	9202      	str	r2, [sp, #8]
 800f440:	2200      	movs	r2, #0
 800f442:	9201      	str	r2, [sp, #4]
 800f444:	9300      	str	r3, [sp, #0]
 800f446:	4603      	mov	r3, r0
 800f448:	2200      	movs	r2, #0
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f001 fb92 	bl	8010b74 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f450:	e17d      	b.n	800f74e <USBH_Process+0x4be>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f000 f98e 	bl	800f774 <USBH_HandleEnum>
 800f458:	4603      	mov	r3, r0
 800f45a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800f45c:	7bbb      	ldrb	r3, [r7, #14]
 800f45e:	b2db      	uxtb	r3, r3
 800f460:	2b00      	cmp	r3, #0
 800f462:	f040 8169 	bne.w	800f738 <USBH_Process+0x4a8>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800f466:	484f      	ldr	r0, [pc, #316]	@ (800f5a4 <USBH_Process+0x314>)
 800f468:	f002 f8aa 	bl	80115c0 <iprintf>
 800f46c:	200a      	movs	r0, #10
 800f46e:	f002 f8b9 	bl	80115e4 <putchar>

        phost->device.current_interface = 0U;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2200      	movs	r2, #0
 800f476:	f883 2cdc 	strb.w	r2, [r3, #3292]	@ 0xcdc

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f893 3cef 	ldrb.w	r3, [r3, #3311]	@ 0xcef
 800f480:	2b01      	cmp	r3, #1
 800f482:	d109      	bne.n	800f498 <USBH_Process+0x208>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800f484:	4848      	ldr	r0, [pc, #288]	@ (800f5a8 <USBH_Process+0x318>)
 800f486:	f002 f89b 	bl	80115c0 <iprintf>
 800f48a:	200a      	movs	r0, #10
 800f48c:	f002 f8aa 	bl	80115e4 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2208      	movs	r2, #8
 800f494:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f496:	e14f      	b.n	800f738 <USBH_Process+0x4a8>
          phost->gState = HOST_INPUT;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2207      	movs	r2, #7
 800f49c:	701a      	strb	r2, [r3, #0]
      break;
 800f49e:	e14b      	b.n	800f738 <USBH_Process+0x4a8>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	f000 8148 	beq.w	800f73c <USBH_Process+0x4ac>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800f4b2:	2101      	movs	r1, #1
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2208      	movs	r2, #8
 800f4bc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800f4be:	e13d      	b.n	800f73c <USBH_Process+0x4ac>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f893 3cf5 	ldrb.w	r3, [r3, #3317]	@ 0xcf5
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f000 fd9a 	bl	8010002 <USBH_SetCfg>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	f040 8135 	bne.w	800f740 <USBH_Process+0x4b0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	2209      	movs	r2, #9
 800f4da:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800f4dc:	4833      	ldr	r0, [pc, #204]	@ (800f5ac <USBH_Process+0x31c>)
 800f4de:	f002 f86f 	bl	80115c0 <iprintf>
 800f4e2:	200a      	movs	r0, #10
 800f4e4:	f002 f87e 	bl	80115e4 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f4e8:	e12a      	b.n	800f740 <USBH_Process+0x4b0>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f893 3cf7 	ldrb.w	r3, [r3, #3319]	@ 0xcf7
 800f4f0:	f003 0320 	and.w	r3, r3, #32
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d022      	beq.n	800f53e <USBH_Process+0x2ae>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800f4f8:	2101      	movs	r1, #1
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f000 fda4 	bl	8010048 <USBH_SetFeature>
 800f500:	4603      	mov	r3, r0
 800f502:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f504:	7bbb      	ldrb	r3, [r7, #14]
 800f506:	b2db      	uxtb	r3, r3
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d109      	bne.n	800f520 <USBH_Process+0x290>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800f50c:	4828      	ldr	r0, [pc, #160]	@ (800f5b0 <USBH_Process+0x320>)
 800f50e:	f002 f857 	bl	80115c0 <iprintf>
 800f512:	200a      	movs	r0, #10
 800f514:	f002 f866 	bl	80115e4 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	220a      	movs	r2, #10
 800f51c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f51e:	e111      	b.n	800f744 <USBH_Process+0x4b4>
        else if (status == USBH_NOT_SUPPORTED)
 800f520:	7bbb      	ldrb	r3, [r7, #14]
 800f522:	b2db      	uxtb	r3, r3
 800f524:	2b03      	cmp	r3, #3
 800f526:	f040 810d 	bne.w	800f744 <USBH_Process+0x4b4>
          USBH_UsrLog("Remote wakeup not supported by the device");
 800f52a:	4822      	ldr	r0, [pc, #136]	@ (800f5b4 <USBH_Process+0x324>)
 800f52c:	f002 f848 	bl	80115c0 <iprintf>
 800f530:	200a      	movs	r0, #10
 800f532:	f002 f857 	bl	80115e4 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	220a      	movs	r2, #10
 800f53a:	701a      	strb	r2, [r3, #0]
      break;
 800f53c:	e102      	b.n	800f744 <USBH_Process+0x4b4>
        phost->gState = HOST_CHECK_CLASS;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	220a      	movs	r2, #10
 800f542:	701a      	strb	r2, [r3, #0]
      break;
 800f544:	e0fe      	b.n	800f744 <USBH_Process+0x4b4>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	@ 0xd38
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d106      	bne.n	800f55e <USBH_Process+0x2ce>
      {
        USBH_UsrLog("No Class has been registered.");
 800f550:	4819      	ldr	r0, [pc, #100]	@ (800f5b8 <USBH_Process+0x328>)
 800f552:	f002 f835 	bl	80115c0 <iprintf>
 800f556:	200a      	movs	r0, #10
 800f558:	f002 f844 	bl	80115e4 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f55c:	e0f7      	b.n	800f74e <USBH_Process+0x4be>
        phost->pActiveClass = NULL;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2200      	movs	r2, #0
 800f562:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f566:	2300      	movs	r3, #0
 800f568:	73fb      	strb	r3, [r7, #15]
 800f56a:	e02a      	b.n	800f5c2 <USBH_Process+0x332>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800f56c:	7bfa      	ldrb	r2, [r7, #15]
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f502 7253 	add.w	r2, r2, #844	@ 0x34c
 800f574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f578:	791a      	ldrb	r2, [r3, #4]
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f893 3cff 	ldrb.w	r3, [r3, #3327]	@ 0xcff
 800f580:	429a      	cmp	r2, r3
 800f582:	d11b      	bne.n	800f5bc <USBH_Process+0x32c>
            phost->pActiveClass = phost->pClass[idx];
 800f584:	7bfa      	ldrb	r2, [r7, #15]
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f502 7253 	add.w	r2, r2, #844	@ 0x34c
 800f58c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
            break;
 800f596:	e017      	b.n	800f5c8 <USBH_Process+0x338>
 800f598:	080129ac 	.word	0x080129ac
 800f59c:	080129c4 	.word	0x080129c4
 800f5a0:	080129e0 	.word	0x080129e0
 800f5a4:	08012a0c 	.word	0x08012a0c
 800f5a8:	08012a20 	.word	0x08012a20
 800f5ac:	08012a48 	.word	0x08012a48
 800f5b0:	08012a64 	.word	0x08012a64
 800f5b4:	08012a84 	.word	0x08012a84
 800f5b8:	08012ab0 	.word	0x08012ab0
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f5bc:	7bfb      	ldrb	r3, [r7, #15]
 800f5be:	3301      	adds	r3, #1
 800f5c0:	73fb      	strb	r3, [r7, #15]
 800f5c2:	7bfb      	ldrb	r3, [r7, #15]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d0d1      	beq.n	800f56c <USBH_Process+0x2dc>
        if (phost->pActiveClass != NULL)
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d02c      	beq.n	800f62c <USBH_Process+0x39c>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f5d8:	689b      	ldr	r3, [r3, #8]
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	4798      	blx	r3
 800f5de:	4603      	mov	r3, r0
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d114      	bne.n	800f60e <USBH_Process+0x37e>
            phost->gState = HOST_CLASS_REQUEST;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2206      	movs	r2, #6
 800f5e8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	4619      	mov	r1, r3
 800f5f4:	4858      	ldr	r0, [pc, #352]	@ (800f758 <USBH_Process+0x4c8>)
 800f5f6:	f001 ffe3 	bl	80115c0 <iprintf>
 800f5fa:	200a      	movs	r0, #10
 800f5fc:	f001 fff2 	bl	80115e4 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800f606:	2103      	movs	r1, #3
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	4798      	blx	r3
      break;
 800f60c:	e09f      	b.n	800f74e <USBH_Process+0x4be>
            phost->gState = HOST_ABORT_STATE;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	220d      	movs	r2, #13
 800f612:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	4619      	mov	r1, r3
 800f61e:	484f      	ldr	r0, [pc, #316]	@ (800f75c <USBH_Process+0x4cc>)
 800f620:	f001 ffce 	bl	80115c0 <iprintf>
 800f624:	200a      	movs	r0, #10
 800f626:	f001 ffdd 	bl	80115e4 <putchar>
      break;
 800f62a:	e090      	b.n	800f74e <USBH_Process+0x4be>
          phost->gState = HOST_ABORT_STATE;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	220d      	movs	r2, #13
 800f630:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800f632:	484b      	ldr	r0, [pc, #300]	@ (800f760 <USBH_Process+0x4d0>)
 800f634:	f001 ffc4 	bl	80115c0 <iprintf>
 800f638:	200a      	movs	r0, #10
 800f63a:	f001 ffd3 	bl	80115e4 <putchar>
      break;
 800f63e:	e086      	b.n	800f74e <USBH_Process+0x4be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f646:	2b00      	cmp	r3, #0
 800f648:	d020      	beq.n	800f68c <USBH_Process+0x3fc>
      {
        status = phost->pActiveClass->Requests(phost);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f650:	691b      	ldr	r3, [r3, #16]
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	4798      	blx	r3
 800f656:	4603      	mov	r3, r0
 800f658:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f65a:	7bbb      	ldrb	r3, [r7, #14]
 800f65c:	b2db      	uxtb	r3, r3
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d103      	bne.n	800f66a <USBH_Process+0x3da>
        {
          phost->gState = HOST_CLASS;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	220b      	movs	r2, #11
 800f666:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f668:	e06e      	b.n	800f748 <USBH_Process+0x4b8>
        else if (status == USBH_FAIL)
 800f66a:	7bbb      	ldrb	r3, [r7, #14]
 800f66c:	b2db      	uxtb	r3, r3
 800f66e:	2b02      	cmp	r3, #2
 800f670:	d16a      	bne.n	800f748 <USBH_Process+0x4b8>
          phost->gState = HOST_ABORT_STATE;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	220d      	movs	r2, #13
 800f676:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800f678:	483a      	ldr	r0, [pc, #232]	@ (800f764 <USBH_Process+0x4d4>)
 800f67a:	f001 ffa1 	bl	80115c0 <iprintf>
 800f67e:	483a      	ldr	r0, [pc, #232]	@ (800f768 <USBH_Process+0x4d8>)
 800f680:	f001 ff9e 	bl	80115c0 <iprintf>
 800f684:	200a      	movs	r0, #10
 800f686:	f001 ffad 	bl	80115e4 <putchar>
      break;
 800f68a:	e05d      	b.n	800f748 <USBH_Process+0x4b8>
        phost->gState = HOST_ABORT_STATE;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	220d      	movs	r2, #13
 800f690:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800f692:	4834      	ldr	r0, [pc, #208]	@ (800f764 <USBH_Process+0x4d4>)
 800f694:	f001 ff94 	bl	80115c0 <iprintf>
 800f698:	4834      	ldr	r0, [pc, #208]	@ (800f76c <USBH_Process+0x4dc>)
 800f69a:	f001 ff91 	bl	80115c0 <iprintf>
 800f69e:	200a      	movs	r0, #10
 800f6a0:	f001 ffa0 	bl	80115e4 <putchar>
      break;
 800f6a4:	e050      	b.n	800f748 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d04d      	beq.n	800f74c <USBH_Process+0x4bc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f6b6:	695b      	ldr	r3, [r3, #20]
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	4798      	blx	r3
      }
      break;
 800f6bc:	e046      	b.n	800f74c <USBH_Process+0x4bc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9

      (void)DeInitStateMachine(phost);
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	f7ff fc6c 	bl	800efa4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d009      	beq.n	800f6ea <USBH_Process+0x45a>
      {
        phost->pActiveClass->DeInit(phost);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f6dc:	68db      	ldr	r3, [r3, #12]
 800f6de:	6878      	ldr	r0, [r7, #4]
 800f6e0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
      }

      if (phost->pUser != NULL)
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d005      	beq.n	800f700 <USBH_Process+0x470>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800f6fa:	2105      	movs	r1, #5
 800f6fc:	6878      	ldr	r0, [r7, #4]
 800f6fe:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800f700:	481b      	ldr	r0, [pc, #108]	@ (800f770 <USBH_Process+0x4e0>)
 800f702:	f001 ff5d 	bl	80115c0 <iprintf>
 800f706:	200a      	movs	r0, #10
 800f708:	f001 ff6c 	bl	80115e4 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f893 3cda 	ldrb.w	r3, [r3, #3290]	@ 0xcda
 800f712:	b2db      	uxtb	r3, r3
 800f714:	2b01      	cmp	r3, #1
 800f716:	d107      	bne.n	800f728 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2200      	movs	r2, #0
 800f71c:	f883 2cda 	strb.w	r2, [r3, #3290]	@ 0xcda

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f7ff fda5 	bl	800f270 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f726:	e012      	b.n	800f74e <USBH_Process+0x4be>
        (void)USBH_LL_Start(phost);
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f001 fc0f 	bl	8010f4c <USBH_LL_Start>
      break;
 800f72e:	e00e      	b.n	800f74e <USBH_Process+0x4be>

    case HOST_ABORT_STATE:
    default :
      break;
 800f730:	bf00      	nop
 800f732:	e00c      	b.n	800f74e <USBH_Process+0x4be>
      break;
 800f734:	bf00      	nop
 800f736:	e00a      	b.n	800f74e <USBH_Process+0x4be>
      break;
 800f738:	bf00      	nop
 800f73a:	e008      	b.n	800f74e <USBH_Process+0x4be>
    break;
 800f73c:	bf00      	nop
 800f73e:	e006      	b.n	800f74e <USBH_Process+0x4be>
      break;
 800f740:	bf00      	nop
 800f742:	e004      	b.n	800f74e <USBH_Process+0x4be>
      break;
 800f744:	bf00      	nop
 800f746:	e002      	b.n	800f74e <USBH_Process+0x4be>
      break;
 800f748:	bf00      	nop
 800f74a:	e000      	b.n	800f74e <USBH_Process+0x4be>
      break;
 800f74c:	bf00      	nop
  }
  return USBH_OK;
 800f74e:	2300      	movs	r3, #0
}
 800f750:	4618      	mov	r0, r3
 800f752:	3710      	adds	r7, #16
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}
 800f758:	08012ad0 	.word	0x08012ad0
 800f75c:	08012ae4 	.word	0x08012ae4
 800f760:	08012b04 	.word	0x08012b04
 800f764:	080128ec 	.word	0x080128ec
 800f768:	08012b2c 	.word	0x08012b2c
 800f76c:	08012b54 	.word	0x08012b54
 800f770:	08012b6c 	.word	0x08012b6c

0800f774 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b088      	sub	sp, #32
 800f778:	af04      	add	r7, sp, #16
 800f77a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f77c:	2301      	movs	r3, #1
 800f77e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800f780:	2301      	movs	r3, #1
 800f782:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	785b      	ldrb	r3, [r3, #1]
 800f788:	2b07      	cmp	r3, #7
 800f78a:	f200 827b 	bhi.w	800fc84 <USBH_HandleEnum+0x510>
 800f78e:	a201      	add	r2, pc, #4	@ (adr r2, 800f794 <USBH_HandleEnum+0x20>)
 800f790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f794:	0800f7b5 	.word	0x0800f7b5
 800f798:	0800f88d 	.word	0x0800f88d
 800f79c:	0800f93d 	.word	0x0800f93d
 800f7a0:	0800f9f9 	.word	0x0800f9f9
 800f7a4:	0800fa81 	.word	0x0800fa81
 800f7a8:	0800fb33 	.word	0x0800fb33
 800f7ac:	0800fba7 	.word	0x0800fba7
 800f7b0:	0800fc19 	.word	0x0800fc19
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800f7b4:	2108      	movs	r1, #8
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f000 fb16 	bl	800fde8 <USBH_Get_DevDesc>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f7c0:	7bbb      	ldrb	r3, [r7, #14]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d12e      	bne.n	800f824 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	f893 2ce5 	ldrb.w	r2, [r3, #3301]	@ 0xce5
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2201      	movs	r2, #1
 800f7d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	7919      	ldrb	r1, [r3, #4]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f7e6:	687a      	ldr	r2, [r7, #4]
 800f7e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f7ea:	9202      	str	r2, [sp, #8]
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	9201      	str	r2, [sp, #4]
 800f7f0:	9300      	str	r3, [sp, #0]
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	2280      	movs	r2, #128	@ 0x80
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	f001 f9bc 	bl	8010b74 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	7959      	ldrb	r1, [r3, #5]
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f80c:	687a      	ldr	r2, [r7, #4]
 800f80e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f810:	9202      	str	r2, [sp, #8]
 800f812:	2200      	movs	r2, #0
 800f814:	9201      	str	r2, [sp, #4]
 800f816:	9300      	str	r3, [sp, #0]
 800f818:	4603      	mov	r3, r0
 800f81a:	2200      	movs	r2, #0
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f001 f9a9 	bl	8010b74 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f822:	e231      	b.n	800fc88 <USBH_HandleEnum+0x514>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f824:	7bbb      	ldrb	r3, [r7, #14]
 800f826:	2b03      	cmp	r3, #3
 800f828:	f040 822e 	bne.w	800fc88 <USBH_HandleEnum+0x514>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800f82c:	48ae      	ldr	r0, [pc, #696]	@ (800fae8 <USBH_HandleEnum+0x374>)
 800f82e:	f001 fec7 	bl	80115c0 <iprintf>
 800f832:	48ae      	ldr	r0, [pc, #696]	@ (800faec <USBH_HandleEnum+0x378>)
 800f834:	f001 fec4 	bl	80115c0 <iprintf>
 800f838:	200a      	movs	r0, #10
 800f83a:	f001 fed3 	bl	80115e4 <putchar>
        phost->device.EnumCnt++;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800f844:	3301      	adds	r3, #1
 800f846:	b2da      	uxtb	r2, r3
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800f854:	2b03      	cmp	r3, #3
 800f856:	d909      	bls.n	800f86c <USBH_HandleEnum+0xf8>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800f858:	48a5      	ldr	r0, [pc, #660]	@ (800faf0 <USBH_HandleEnum+0x37c>)
 800f85a:	f001 feb1 	bl	80115c0 <iprintf>
 800f85e:	200a      	movs	r0, #10
 800f860:	f001 fec0 	bl	80115e4 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	220d      	movs	r2, #13
 800f868:	701a      	strb	r2, [r3, #0]
      break;
 800f86a:	e20d      	b.n	800fc88 <USBH_HandleEnum+0x514>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	795b      	ldrb	r3, [r3, #5]
 800f870:	4619      	mov	r1, r3
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f001 f9cf 	bl	8010c16 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	791b      	ldrb	r3, [r3, #4]
 800f87c:	4619      	mov	r1, r3
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f001 f9c9 	bl	8010c16 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2200      	movs	r2, #0
 800f888:	701a      	strb	r2, [r3, #0]
      break;
 800f88a:	e1fd      	b.n	800fc88 <USBH_HandleEnum+0x514>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800f88c:	2112      	movs	r1, #18
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	f000 faaa 	bl	800fde8 <USBH_Get_DevDesc>
 800f894:	4603      	mov	r3, r0
 800f896:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f898:	7bbb      	ldrb	r3, [r7, #14]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d117      	bne.n	800f8ce <USBH_HandleEnum+0x15a>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f8b3 3ce8 	ldrh.w	r3, [r3, #3304]	@ 0xce8
 800f8a4:	4619      	mov	r1, r3
 800f8a6:	4893      	ldr	r0, [pc, #588]	@ (800faf4 <USBH_HandleEnum+0x380>)
 800f8a8:	f001 fe8a 	bl	80115c0 <iprintf>
 800f8ac:	200a      	movs	r0, #10
 800f8ae:	f001 fe99 	bl	80115e4 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f8b3 3ce6 	ldrh.w	r3, [r3, #3302]	@ 0xce6
 800f8b8:	4619      	mov	r1, r3
 800f8ba:	488f      	ldr	r0, [pc, #572]	@ (800faf8 <USBH_HandleEnum+0x384>)
 800f8bc:	f001 fe80 	bl	80115c0 <iprintf>
 800f8c0:	200a      	movs	r0, #10
 800f8c2:	f001 fe8f 	bl	80115e4 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2202      	movs	r2, #2
 800f8ca:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f8cc:	e1de      	b.n	800fc8c <USBH_HandleEnum+0x518>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f8ce:	7bbb      	ldrb	r3, [r7, #14]
 800f8d0:	2b03      	cmp	r3, #3
 800f8d2:	f040 81db 	bne.w	800fc8c <USBH_HandleEnum+0x518>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800f8d6:	4884      	ldr	r0, [pc, #528]	@ (800fae8 <USBH_HandleEnum+0x374>)
 800f8d8:	f001 fe72 	bl	80115c0 <iprintf>
 800f8dc:	4887      	ldr	r0, [pc, #540]	@ (800fafc <USBH_HandleEnum+0x388>)
 800f8de:	f001 fe6f 	bl	80115c0 <iprintf>
 800f8e2:	200a      	movs	r0, #10
 800f8e4:	f001 fe7e 	bl	80115e4 <putchar>
        phost->device.EnumCnt++;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	b2da      	uxtb	r2, r3
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800f8fe:	2b03      	cmp	r3, #3
 800f900:	d909      	bls.n	800f916 <USBH_HandleEnum+0x1a2>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800f902:	487b      	ldr	r0, [pc, #492]	@ (800faf0 <USBH_HandleEnum+0x37c>)
 800f904:	f001 fe5c 	bl	80115c0 <iprintf>
 800f908:	200a      	movs	r0, #10
 800f90a:	f001 fe6b 	bl	80115e4 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	220d      	movs	r2, #13
 800f912:	701a      	strb	r2, [r3, #0]
      break;
 800f914:	e1ba      	b.n	800fc8c <USBH_HandleEnum+0x518>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	795b      	ldrb	r3, [r3, #5]
 800f91a:	4619      	mov	r1, r3
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f001 f97a 	bl	8010c16 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	791b      	ldrb	r3, [r3, #4]
 800f926:	4619      	mov	r1, r3
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f001 f974 	bl	8010c16 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2200      	movs	r2, #0
 800f932:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2200      	movs	r2, #0
 800f938:	701a      	strb	r2, [r3, #0]
      break;
 800f93a:	e1a7      	b.n	800fc8c <USBH_HandleEnum+0x518>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800f93c:	2101      	movs	r1, #1
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f000 fb3b 	bl	800ffba <USBH_SetAddress>
 800f944:	4603      	mov	r3, r0
 800f946:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f948:	7bbb      	ldrb	r3, [r7, #14]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d13a      	bne.n	800f9c4 <USBH_HandleEnum+0x250>
      {
        USBH_Delay(2U);
 800f94e:	2002      	movs	r0, #2
 800f950:	f001 fc63 	bl	801121a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2201      	movs	r2, #1
 800f958:	f883 2cd4 	strb.w	r2, [r3, #3284]	@ 0xcd4

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f893 3cd4 	ldrb.w	r3, [r3, #3284]	@ 0xcd4
 800f962:	4619      	mov	r1, r3
 800f964:	4866      	ldr	r0, [pc, #408]	@ (800fb00 <USBH_HandleEnum+0x38c>)
 800f966:	f001 fe2b 	bl	80115c0 <iprintf>
 800f96a:	200a      	movs	r0, #10
 800f96c:	f001 fe3a 	bl	80115e4 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2203      	movs	r2, #3
 800f974:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	7919      	ldrb	r1, [r3, #4]
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f986:	687a      	ldr	r2, [r7, #4]
 800f988:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f98a:	9202      	str	r2, [sp, #8]
 800f98c:	2200      	movs	r2, #0
 800f98e:	9201      	str	r2, [sp, #4]
 800f990:	9300      	str	r3, [sp, #0]
 800f992:	4603      	mov	r3, r0
 800f994:	2280      	movs	r2, #128	@ 0x80
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f001 f8ec 	bl	8010b74 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	7959      	ldrb	r1, [r3, #5]
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f9ac:	687a      	ldr	r2, [r7, #4]
 800f9ae:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f9b0:	9202      	str	r2, [sp, #8]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	9201      	str	r2, [sp, #4]
 800f9b6:	9300      	str	r3, [sp, #0]
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f001 f8d9 	bl	8010b74 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f9c2:	e165      	b.n	800fc90 <USBH_HandleEnum+0x51c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f9c4:	7bbb      	ldrb	r3, [r7, #14]
 800f9c6:	2b03      	cmp	r3, #3
 800f9c8:	f040 8162 	bne.w	800fc90 <USBH_HandleEnum+0x51c>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800f9cc:	4846      	ldr	r0, [pc, #280]	@ (800fae8 <USBH_HandleEnum+0x374>)
 800f9ce:	f001 fdf7 	bl	80115c0 <iprintf>
 800f9d2:	484c      	ldr	r0, [pc, #304]	@ (800fb04 <USBH_HandleEnum+0x390>)
 800f9d4:	f001 fdf4 	bl	80115c0 <iprintf>
 800f9d8:	200a      	movs	r0, #10
 800f9da:	f001 fe03 	bl	80115e4 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800f9de:	4844      	ldr	r0, [pc, #272]	@ (800faf0 <USBH_HandleEnum+0x37c>)
 800f9e0:	f001 fdee 	bl	80115c0 <iprintf>
 800f9e4:	200a      	movs	r0, #10
 800f9e6:	f001 fdfd 	bl	80115e4 <putchar>
        phost->gState = HOST_ABORT_STATE;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	220d      	movs	r2, #13
 800f9ee:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	705a      	strb	r2, [r3, #1]
      break;
 800f9f6:	e14b      	b.n	800fc90 <USBH_HandleEnum+0x51c>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f9f8:	2109      	movs	r1, #9
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f000 fa2e 	bl	800fe5c <USBH_Get_CfgDesc>
 800fa00:	4603      	mov	r3, r0
 800fa02:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fa04:	7bbb      	ldrb	r3, [r7, #14]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d103      	bne.n	800fa12 <USBH_HandleEnum+0x29e>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2204      	movs	r2, #4
 800fa0e:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fa10:	e140      	b.n	800fc94 <USBH_HandleEnum+0x520>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fa12:	7bbb      	ldrb	r3, [r7, #14]
 800fa14:	2b03      	cmp	r3, #3
 800fa16:	f040 813d 	bne.w	800fc94 <USBH_HandleEnum+0x520>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800fa1a:	4833      	ldr	r0, [pc, #204]	@ (800fae8 <USBH_HandleEnum+0x374>)
 800fa1c:	f001 fdd0 	bl	80115c0 <iprintf>
 800fa20:	4839      	ldr	r0, [pc, #228]	@ (800fb08 <USBH_HandleEnum+0x394>)
 800fa22:	f001 fdcd 	bl	80115c0 <iprintf>
 800fa26:	200a      	movs	r0, #10
 800fa28:	f001 fddc 	bl	80115e4 <putchar>
        phost->device.EnumCnt++;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800fa32:	3301      	adds	r3, #1
 800fa34:	b2da      	uxtb	r2, r3
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800fa42:	2b03      	cmp	r3, #3
 800fa44:	d909      	bls.n	800fa5a <USBH_HandleEnum+0x2e6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800fa46:	482a      	ldr	r0, [pc, #168]	@ (800faf0 <USBH_HandleEnum+0x37c>)
 800fa48:	f001 fdba 	bl	80115c0 <iprintf>
 800fa4c:	200a      	movs	r0, #10
 800fa4e:	f001 fdc9 	bl	80115e4 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	220d      	movs	r2, #13
 800fa56:	701a      	strb	r2, [r3, #0]
      break;
 800fa58:	e11c      	b.n	800fc94 <USBH_HandleEnum+0x520>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	795b      	ldrb	r3, [r3, #5]
 800fa5e:	4619      	mov	r1, r3
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f001 f8d8 	bl	8010c16 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	791b      	ldrb	r3, [r3, #4]
 800fa6a:	4619      	mov	r1, r3
 800fa6c:	6878      	ldr	r0, [r7, #4]
 800fa6e:	f001 f8d2 	bl	8010c16 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2200      	movs	r2, #0
 800fa76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	701a      	strb	r2, [r3, #0]
      break;
 800fa7e:	e109      	b.n	800fc94 <USBH_HandleEnum+0x520>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f8b3 3cf2 	ldrh.w	r3, [r3, #3314]	@ 0xcf2
 800fa86:	4619      	mov	r1, r3
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f000 f9e7 	bl	800fe5c <USBH_Get_CfgDesc>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fa92:	7bbb      	ldrb	r3, [r7, #14]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d103      	bne.n	800faa0 <USBH_HandleEnum+0x32c>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2205      	movs	r2, #5
 800fa9c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fa9e:	e0fb      	b.n	800fc98 <USBH_HandleEnum+0x524>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800faa0:	7bbb      	ldrb	r3, [r7, #14]
 800faa2:	2b03      	cmp	r3, #3
 800faa4:	f040 80f8 	bne.w	800fc98 <USBH_HandleEnum+0x524>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800faa8:	480f      	ldr	r0, [pc, #60]	@ (800fae8 <USBH_HandleEnum+0x374>)
 800faaa:	f001 fd89 	bl	80115c0 <iprintf>
 800faae:	4816      	ldr	r0, [pc, #88]	@ (800fb08 <USBH_HandleEnum+0x394>)
 800fab0:	f001 fd86 	bl	80115c0 <iprintf>
 800fab4:	200a      	movs	r0, #10
 800fab6:	f001 fd95 	bl	80115e4 <putchar>
        phost->device.EnumCnt++;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800fac0:	3301      	adds	r3, #1
 800fac2:	b2da      	uxtb	r2, r3
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800fad0:	2b03      	cmp	r3, #3
 800fad2:	d91b      	bls.n	800fb0c <USBH_HandleEnum+0x398>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800fad4:	4806      	ldr	r0, [pc, #24]	@ (800faf0 <USBH_HandleEnum+0x37c>)
 800fad6:	f001 fd73 	bl	80115c0 <iprintf>
 800fada:	200a      	movs	r0, #10
 800fadc:	f001 fd82 	bl	80115e4 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	220d      	movs	r2, #13
 800fae4:	701a      	strb	r2, [r3, #0]
      break;
 800fae6:	e0d7      	b.n	800fc98 <USBH_HandleEnum+0x524>
 800fae8:	080128ec 	.word	0x080128ec
 800faec:	08012b84 	.word	0x08012b84
 800faf0:	08012bb8 	.word	0x08012bb8
 800faf4:	08012bf8 	.word	0x08012bf8
 800faf8:	08012c04 	.word	0x08012c04
 800fafc:	08012c10 	.word	0x08012c10
 800fb00:	08012c4c 	.word	0x08012c4c
 800fb04:	08012c64 	.word	0x08012c64
 800fb08:	08012c98 	.word	0x08012c98
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	795b      	ldrb	r3, [r3, #5]
 800fb10:	4619      	mov	r1, r3
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f001 f87f 	bl	8010c16 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	791b      	ldrb	r3, [r3, #4]
 800fb1c:	4619      	mov	r1, r3
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	f001 f879 	bl	8010c16 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2200      	movs	r2, #0
 800fb28:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	701a      	strb	r2, [r3, #0]
      break;
 800fb30:	e0b2      	b.n	800fc98 <USBH_HandleEnum+0x524>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f893 3cec 	ldrb.w	r3, [r3, #3308]	@ 0xcec
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d02a      	beq.n	800fb92 <USBH_HandleEnum+0x41e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f893 1cec 	ldrb.w	r1, [r3, #3308]	@ 0xcec
                                        phost->device.Data, 0xFFU);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800fb48:	23ff      	movs	r3, #255	@ 0xff
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f000 f9be 	bl	800fecc <USBH_Get_StringDesc>
 800fb50:	4603      	mov	r3, r0
 800fb52:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800fb54:	7bbb      	ldrb	r3, [r7, #14]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d10d      	bne.n	800fb76 <USBH_HandleEnum+0x402>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800fb60:	4619      	mov	r1, r3
 800fb62:	4853      	ldr	r0, [pc, #332]	@ (800fcb0 <USBH_HandleEnum+0x53c>)
 800fb64:	f001 fd2c 	bl	80115c0 <iprintf>
 800fb68:	200a      	movs	r0, #10
 800fb6a:	f001 fd3b 	bl	80115e4 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2206      	movs	r2, #6
 800fb72:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800fb74:	e092      	b.n	800fc9c <USBH_HandleEnum+0x528>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fb76:	7bbb      	ldrb	r3, [r7, #14]
 800fb78:	2b03      	cmp	r3, #3
 800fb7a:	f040 808f 	bne.w	800fc9c <USBH_HandleEnum+0x528>
          USBH_UsrLog("Manufacturer : N/A");
 800fb7e:	484d      	ldr	r0, [pc, #308]	@ (800fcb4 <USBH_HandleEnum+0x540>)
 800fb80:	f001 fd1e 	bl	80115c0 <iprintf>
 800fb84:	200a      	movs	r0, #10
 800fb86:	f001 fd2d 	bl	80115e4 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2206      	movs	r2, #6
 800fb8e:	705a      	strb	r2, [r3, #1]
      break;
 800fb90:	e084      	b.n	800fc9c <USBH_HandleEnum+0x528>
        USBH_UsrLog("Manufacturer : N/A");
 800fb92:	4848      	ldr	r0, [pc, #288]	@ (800fcb4 <USBH_HandleEnum+0x540>)
 800fb94:	f001 fd14 	bl	80115c0 <iprintf>
 800fb98:	200a      	movs	r0, #10
 800fb9a:	f001 fd23 	bl	80115e4 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2206      	movs	r2, #6
 800fba2:	705a      	strb	r2, [r3, #1]
      break;
 800fba4:	e07a      	b.n	800fc9c <USBH_HandleEnum+0x528>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f893 3ced 	ldrb.w	r3, [r3, #3309]	@ 0xced
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d029      	beq.n	800fc04 <USBH_HandleEnum+0x490>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f893 1ced 	ldrb.w	r1, [r3, #3309]	@ 0xced
                                        phost->device.Data, 0xFFU);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800fbbc:	23ff      	movs	r3, #255	@ 0xff
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f000 f984 	bl	800fecc <USBH_Get_StringDesc>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800fbc8:	7bbb      	ldrb	r3, [r7, #14]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d10d      	bne.n	800fbea <USBH_HandleEnum+0x476>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	4838      	ldr	r0, [pc, #224]	@ (800fcb8 <USBH_HandleEnum+0x544>)
 800fbd8:	f001 fcf2 	bl	80115c0 <iprintf>
 800fbdc:	200a      	movs	r0, #10
 800fbde:	f001 fd01 	bl	80115e4 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2207      	movs	r2, #7
 800fbe6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800fbe8:	e05a      	b.n	800fca0 <USBH_HandleEnum+0x52c>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fbea:	7bbb      	ldrb	r3, [r7, #14]
 800fbec:	2b03      	cmp	r3, #3
 800fbee:	d157      	bne.n	800fca0 <USBH_HandleEnum+0x52c>
          USBH_UsrLog("Product : N/A");
 800fbf0:	4832      	ldr	r0, [pc, #200]	@ (800fcbc <USBH_HandleEnum+0x548>)
 800fbf2:	f001 fce5 	bl	80115c0 <iprintf>
 800fbf6:	200a      	movs	r0, #10
 800fbf8:	f001 fcf4 	bl	80115e4 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2207      	movs	r2, #7
 800fc00:	705a      	strb	r2, [r3, #1]
      break;
 800fc02:	e04d      	b.n	800fca0 <USBH_HandleEnum+0x52c>
        USBH_UsrLog("Product : N/A");
 800fc04:	482d      	ldr	r0, [pc, #180]	@ (800fcbc <USBH_HandleEnum+0x548>)
 800fc06:	f001 fcdb 	bl	80115c0 <iprintf>
 800fc0a:	200a      	movs	r0, #10
 800fc0c:	f001 fcea 	bl	80115e4 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2207      	movs	r2, #7
 800fc14:	705a      	strb	r2, [r3, #1]
      break;
 800fc16:	e043      	b.n	800fca0 <USBH_HandleEnum+0x52c>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f893 3cee 	ldrb.w	r3, [r3, #3310]	@ 0xcee
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d027      	beq.n	800fc72 <USBH_HandleEnum+0x4fe>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f893 1cee 	ldrb.w	r1, [r3, #3310]	@ 0xcee
                                        phost->device.Data, 0xFFU);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800fc2e:	23ff      	movs	r3, #255	@ 0xff
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f000 f94b 	bl	800fecc <USBH_Get_StringDesc>
 800fc36:	4603      	mov	r3, r0
 800fc38:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800fc3a:	7bbb      	ldrb	r3, [r7, #14]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d10c      	bne.n	800fc5a <USBH_HandleEnum+0x4e6>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800fc46:	4619      	mov	r1, r3
 800fc48:	481d      	ldr	r0, [pc, #116]	@ (800fcc0 <USBH_HandleEnum+0x54c>)
 800fc4a:	f001 fcb9 	bl	80115c0 <iprintf>
 800fc4e:	200a      	movs	r0, #10
 800fc50:	f001 fcc8 	bl	80115e4 <putchar>
          Status = USBH_OK;
 800fc54:	2300      	movs	r3, #0
 800fc56:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800fc58:	e024      	b.n	800fca4 <USBH_HandleEnum+0x530>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fc5a:	7bbb      	ldrb	r3, [r7, #14]
 800fc5c:	2b03      	cmp	r3, #3
 800fc5e:	d121      	bne.n	800fca4 <USBH_HandleEnum+0x530>
          USBH_UsrLog("Serial Number : N/A");
 800fc60:	4818      	ldr	r0, [pc, #96]	@ (800fcc4 <USBH_HandleEnum+0x550>)
 800fc62:	f001 fcad 	bl	80115c0 <iprintf>
 800fc66:	200a      	movs	r0, #10
 800fc68:	f001 fcbc 	bl	80115e4 <putchar>
          Status = USBH_OK;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	73fb      	strb	r3, [r7, #15]
      break;
 800fc70:	e018      	b.n	800fca4 <USBH_HandleEnum+0x530>
        USBH_UsrLog("Serial Number : N/A");
 800fc72:	4814      	ldr	r0, [pc, #80]	@ (800fcc4 <USBH_HandleEnum+0x550>)
 800fc74:	f001 fca4 	bl	80115c0 <iprintf>
 800fc78:	200a      	movs	r0, #10
 800fc7a:	f001 fcb3 	bl	80115e4 <putchar>
        Status = USBH_OK;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	73fb      	strb	r3, [r7, #15]
      break;
 800fc82:	e00f      	b.n	800fca4 <USBH_HandleEnum+0x530>

    default:
      break;
 800fc84:	bf00      	nop
 800fc86:	e00e      	b.n	800fca6 <USBH_HandleEnum+0x532>
      break;
 800fc88:	bf00      	nop
 800fc8a:	e00c      	b.n	800fca6 <USBH_HandleEnum+0x532>
      break;
 800fc8c:	bf00      	nop
 800fc8e:	e00a      	b.n	800fca6 <USBH_HandleEnum+0x532>
      break;
 800fc90:	bf00      	nop
 800fc92:	e008      	b.n	800fca6 <USBH_HandleEnum+0x532>
      break;
 800fc94:	bf00      	nop
 800fc96:	e006      	b.n	800fca6 <USBH_HandleEnum+0x532>
      break;
 800fc98:	bf00      	nop
 800fc9a:	e004      	b.n	800fca6 <USBH_HandleEnum+0x532>
      break;
 800fc9c:	bf00      	nop
 800fc9e:	e002      	b.n	800fca6 <USBH_HandleEnum+0x532>
      break;
 800fca0:	bf00      	nop
 800fca2:	e000      	b.n	800fca6 <USBH_HandleEnum+0x532>
      break;
 800fca4:	bf00      	nop
  }
  return Status;
 800fca6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3710      	adds	r7, #16
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}
 800fcb0:	08012cdc 	.word	0x08012cdc
 800fcb4:	08012cf0 	.word	0x08012cf0
 800fcb8:	08012d04 	.word	0x08012d04
 800fcbc:	08012d14 	.word	0x08012d14
 800fcc0:	08012d24 	.word	0x08012d24
 800fcc4:	08012d38 	.word	0x08012d38

0800fcc8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800fcc8:	b480      	push	{r7}
 800fcca:	b083      	sub	sp, #12
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
 800fcd0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	683a      	ldr	r2, [r7, #0]
 800fcd6:	f8c3 2d7c 	str.w	r2, [r3, #3452]	@ 0xd7c
}
 800fcda:	bf00      	nop
 800fcdc:	370c      	adds	r7, #12
 800fcde:	46bd      	mov	sp, r7
 800fce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce4:	4770      	bx	lr

0800fce6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800fce6:	b580      	push	{r7, lr}
 800fce8:	b082      	sub	sp, #8
 800fcea:	af00      	add	r7, sp, #0
 800fcec:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 800fcf4:	1c5a      	adds	r2, r3, #1
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	f8c3 2d7c 	str.w	r2, [r3, #3452]	@ 0xd7c
  USBH_HandleSof(phost);
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f000 f804 	bl	800fd0a <USBH_HandleSof>
}
 800fd02:	bf00      	nop
 800fd04:	3708      	adds	r7, #8
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}

0800fd0a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800fd0a:	b580      	push	{r7, lr}
 800fd0c:	b082      	sub	sp, #8
 800fd0e:	af00      	add	r7, sp, #0
 800fd10:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	781b      	ldrb	r3, [r3, #0]
 800fd16:	b2db      	uxtb	r3, r3
 800fd18:	2b0b      	cmp	r3, #11
 800fd1a:	d10a      	bne.n	800fd32 <USBH_HandleSof+0x28>
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d005      	beq.n	800fd32 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fd2c:	699b      	ldr	r3, [r3, #24]
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	4798      	blx	r3
  }
}
 800fd32:	bf00      	nop
 800fd34:	3708      	adds	r7, #8
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}

0800fd3a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800fd3a:	b480      	push	{r7}
 800fd3c:	b083      	sub	sp, #12
 800fd3e:	af00      	add	r7, sp, #0
 800fd40:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2201      	movs	r2, #1
 800fd46:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800fd4a:	bf00      	nop
}
 800fd4c:	370c      	adds	r7, #12
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd54:	4770      	bx	lr

0800fd56 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800fd56:	b480      	push	{r7}
 800fd58:	b083      	sub	sp, #12
 800fd5a:	af00      	add	r7, sp, #0
 800fd5c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2200      	movs	r2, #0
 800fd62:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb

  return;
 800fd66:	bf00      	nop
}
 800fd68:	370c      	adds	r7, #12
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd70:	4770      	bx	lr

0800fd72 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800fd72:	b480      	push	{r7}
 800fd74:	b083      	sub	sp, #12
 800fd76:	af00      	add	r7, sp, #0
 800fd78:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2201      	movs	r2, #1
 800fd7e:	f883 2cd8 	strb.w	r2, [r3, #3288]	@ 0xcd8
  phost->device.is_disconnected = 0U;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2200      	movs	r2, #0
 800fd86:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9
  phost->device.is_ReEnumerated = 0U;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	f883 2cda 	strb.w	r2, [r3, #3290]	@ 0xcda
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800fd92:	2300      	movs	r3, #0
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	370c      	adds	r7, #12
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9e:	4770      	bx	lr

0800fda0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2201      	movs	r2, #1
 800fdac:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9
  phost->device.is_connected = 0U;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	f883 2cd8 	strb.w	r2, [r3, #3288]	@ 0xcd8
  phost->device.PortEnabled = 0U;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2200      	movs	r2, #0
 800fdbc:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800fdc0:	6878      	ldr	r0, [r7, #4]
 800fdc2:	f001 f8de 	bl	8010f82 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	791b      	ldrb	r3, [r3, #4]
 800fdca:	4619      	mov	r1, r3
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f000 ff22 	bl	8010c16 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	795b      	ldrb	r3, [r3, #5]
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f000 ff1c 	bl	8010c16 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800fdde:	2300      	movs	r3, #0
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	3708      	adds	r7, #8
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}

0800fde8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b086      	sub	sp, #24
 800fdec:	af02      	add	r7, sp, #8
 800fdee:	6078      	str	r0, [r7, #4]
 800fdf0:	460b      	mov	r3, r1
 800fdf2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800fdf4:	887b      	ldrh	r3, [r7, #2]
 800fdf6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800fdfa:	4293      	cmp	r3, r2
 800fdfc:	d90a      	bls.n	800fe14 <USBH_Get_DevDesc+0x2c>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
 800fdfe:	4815      	ldr	r0, [pc, #84]	@ (800fe54 <USBH_Get_DevDesc+0x6c>)
 800fe00:	f001 fbde 	bl	80115c0 <iprintf>
 800fe04:	4814      	ldr	r0, [pc, #80]	@ (800fe58 <USBH_Get_DevDesc+0x70>)
 800fe06:	f001 fbdb 	bl	80115c0 <iprintf>
 800fe0a:	200a      	movs	r0, #10
 800fe0c:	f001 fbea 	bl	80115e4 <putchar>
    return USBH_NOT_SUPPORTED;
 800fe10:	2303      	movs	r3, #3
 800fe12:	e01b      	b.n	800fe4c <USBH_Get_DevDesc+0x64>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800fe1a:	887b      	ldrh	r3, [r7, #2]
 800fe1c:	9300      	str	r3, [sp, #0]
 800fe1e:	4613      	mov	r3, r2
 800fe20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fe24:	2100      	movs	r1, #0
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f000 f892 	bl	800ff50 <USBH_GetDescriptor>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800fe30:	7bfb      	ldrb	r3, [r7, #15]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d109      	bne.n	800fe4a <USBH_Get_DevDesc+0x62>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800fe3c:	887a      	ldrh	r2, [r7, #2]
 800fe3e:	4619      	mov	r1, r3
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f000 f949 	bl	80100d8 <USBH_ParseDevDesc>
 800fe46:	4603      	mov	r3, r0
 800fe48:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fe4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3710      	adds	r7, #16
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}
 800fe54:	08012d4c 	.word	0x08012d4c
 800fe58:	08012d54 	.word	0x08012d54

0800fe5c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b086      	sub	sp, #24
 800fe60:	af02      	add	r7, sp, #8
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	460b      	mov	r3, r1
 800fe66:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	331c      	adds	r3, #28
 800fe6c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800fe6e:	887b      	ldrh	r3, [r7, #2]
 800fe70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fe74:	d90a      	bls.n	800fe8c <USBH_Get_CfgDesc+0x30>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
 800fe76:	4813      	ldr	r0, [pc, #76]	@ (800fec4 <USBH_Get_CfgDesc+0x68>)
 800fe78:	f001 fba2 	bl	80115c0 <iprintf>
 800fe7c:	4812      	ldr	r0, [pc, #72]	@ (800fec8 <USBH_Get_CfgDesc+0x6c>)
 800fe7e:	f001 fb9f 	bl	80115c0 <iprintf>
 800fe82:	200a      	movs	r0, #10
 800fe84:	f001 fbae 	bl	80115e4 <putchar>
    return USBH_NOT_SUPPORTED;
 800fe88:	2303      	movs	r3, #3
 800fe8a:	e016      	b.n	800feba <USBH_Get_CfgDesc+0x5e>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800fe8c:	887b      	ldrh	r3, [r7, #2]
 800fe8e:	9300      	str	r3, [sp, #0]
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe96:	2100      	movs	r1, #0
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f000 f859 	bl	800ff50 <USBH_GetDescriptor>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800fea2:	7bfb      	ldrb	r3, [r7, #15]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d107      	bne.n	800feb8 <USBH_Get_CfgDesc+0x5c>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800fea8:	887b      	ldrh	r3, [r7, #2]
 800feaa:	461a      	mov	r2, r3
 800feac:	68b9      	ldr	r1, [r7, #8]
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f000 f9c2 	bl	8010238 <USBH_ParseCfgDesc>
 800feb4:	4603      	mov	r3, r0
 800feb6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800feb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800feba:	4618      	mov	r0, r3
 800febc:	3710      	adds	r7, #16
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}
 800fec2:	bf00      	nop
 800fec4:	08012d4c 	.word	0x08012d4c
 800fec8:	08012d98 	.word	0x08012d98

0800fecc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b088      	sub	sp, #32
 800fed0:	af02      	add	r7, sp, #8
 800fed2:	60f8      	str	r0, [r7, #12]
 800fed4:	607a      	str	r2, [r7, #4]
 800fed6:	461a      	mov	r2, r3
 800fed8:	460b      	mov	r3, r1
 800feda:	72fb      	strb	r3, [r7, #11]
 800fedc:	4613      	mov	r3, r2
 800fede:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800fee0:	893b      	ldrh	r3, [r7, #8]
 800fee2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800fee6:	4293      	cmp	r3, r2
 800fee8:	d802      	bhi.n	800fef0 <USBH_Get_StringDesc+0x24>
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d10a      	bne.n	800ff06 <USBH_Get_StringDesc+0x3a>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
 800fef0:	4815      	ldr	r0, [pc, #84]	@ (800ff48 <USBH_Get_StringDesc+0x7c>)
 800fef2:	f001 fb65 	bl	80115c0 <iprintf>
 800fef6:	4815      	ldr	r0, [pc, #84]	@ (800ff4c <USBH_Get_StringDesc+0x80>)
 800fef8:	f001 fb62 	bl	80115c0 <iprintf>
 800fefc:	200a      	movs	r0, #10
 800fefe:	f001 fb71 	bl	80115e4 <putchar>
    return USBH_NOT_SUPPORTED;
 800ff02:	2303      	movs	r3, #3
 800ff04:	e01c      	b.n	800ff40 <USBH_Get_StringDesc+0x74>
  }

  status = USBH_GetDescriptor(phost,
 800ff06:	7afb      	ldrb	r3, [r7, #11]
 800ff08:	b29b      	uxth	r3, r3
 800ff0a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800ff0e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ff16:	893b      	ldrh	r3, [r7, #8]
 800ff18:	9300      	str	r3, [sp, #0]
 800ff1a:	460b      	mov	r3, r1
 800ff1c:	2100      	movs	r1, #0
 800ff1e:	68f8      	ldr	r0, [r7, #12]
 800ff20:	f000 f816 	bl	800ff50 <USBH_GetDescriptor>
 800ff24:	4603      	mov	r3, r0
 800ff26:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ff28:	7dfb      	ldrb	r3, [r7, #23]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d107      	bne.n	800ff3e <USBH_Get_StringDesc+0x72>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ff34:	893a      	ldrh	r2, [r7, #8]
 800ff36:	6879      	ldr	r1, [r7, #4]
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f000 fb92 	bl	8010662 <USBH_ParseStringDesc>
  }

  return status;
 800ff3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff40:	4618      	mov	r0, r3
 800ff42:	3718      	adds	r7, #24
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}
 800ff48:	08012d4c 	.word	0x08012d4c
 800ff4c:	08012de4 	.word	0x08012de4

0800ff50 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b084      	sub	sp, #16
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	60f8      	str	r0, [r7, #12]
 800ff58:	607b      	str	r3, [r7, #4]
 800ff5a:	460b      	mov	r3, r1
 800ff5c:	72fb      	strb	r3, [r7, #11]
 800ff5e:	4613      	mov	r3, r2
 800ff60:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	789b      	ldrb	r3, [r3, #2]
 800ff66:	2b01      	cmp	r3, #1
 800ff68:	d11c      	bne.n	800ffa4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ff6a:	7afb      	ldrb	r3, [r7, #11]
 800ff6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ff70:	b2da      	uxtb	r2, r3
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	2206      	movs	r2, #6
 800ff7a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	893a      	ldrh	r2, [r7, #8]
 800ff80:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ff82:	893b      	ldrh	r3, [r7, #8]
 800ff84:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ff88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ff8c:	d104      	bne.n	800ff98 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	f240 4209 	movw	r2, #1033	@ 0x409
 800ff94:	829a      	strh	r2, [r3, #20]
 800ff96:	e002      	b.n	800ff9e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	8b3a      	ldrh	r2, [r7, #24]
 800ffa2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ffa4:	8b3b      	ldrh	r3, [r7, #24]
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	6879      	ldr	r1, [r7, #4]
 800ffaa:	68f8      	ldr	r0, [r7, #12]
 800ffac:	f000 fba6 	bl	80106fc <USBH_CtlReq>
 800ffb0:	4603      	mov	r3, r0
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3710      	adds	r7, #16
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}

0800ffba <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ffba:	b580      	push	{r7, lr}
 800ffbc:	b082      	sub	sp, #8
 800ffbe:	af00      	add	r7, sp, #0
 800ffc0:	6078      	str	r0, [r7, #4]
 800ffc2:	460b      	mov	r3, r1
 800ffc4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	789b      	ldrb	r3, [r3, #2]
 800ffca:	2b01      	cmp	r3, #1
 800ffcc:	d10f      	bne.n	800ffee <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2205      	movs	r2, #5
 800ffd8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ffda:	78fb      	ldrb	r3, [r7, #3]
 800ffdc:	b29a      	uxth	r2, r3
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2200      	movs	r2, #0
 800ffec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ffee:	2200      	movs	r2, #0
 800fff0:	2100      	movs	r1, #0
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f000 fb82 	bl	80106fc <USBH_CtlReq>
 800fff8:	4603      	mov	r3, r0
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	3708      	adds	r7, #8
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}

08010002 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8010002:	b580      	push	{r7, lr}
 8010004:	b082      	sub	sp, #8
 8010006:	af00      	add	r7, sp, #0
 8010008:	6078      	str	r0, [r7, #4]
 801000a:	460b      	mov	r3, r1
 801000c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	789b      	ldrb	r3, [r3, #2]
 8010012:	2b01      	cmp	r3, #1
 8010014:	d10e      	bne.n	8010034 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2200      	movs	r2, #0
 801001a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2209      	movs	r2, #9
 8010020:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	887a      	ldrh	r2, [r7, #2]
 8010026:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	2200      	movs	r2, #0
 801002c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2200      	movs	r2, #0
 8010032:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010034:	2200      	movs	r2, #0
 8010036:	2100      	movs	r1, #0
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f000 fb5f 	bl	80106fc <USBH_CtlReq>
 801003e:	4603      	mov	r3, r0
}
 8010040:	4618      	mov	r0, r3
 8010042:	3708      	adds	r7, #8
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}

08010048 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b082      	sub	sp, #8
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
 8010050:	460b      	mov	r3, r1
 8010052:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	789b      	ldrb	r3, [r3, #2]
 8010058:	2b01      	cmp	r3, #1
 801005a:	d10f      	bne.n	801007c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2200      	movs	r2, #0
 8010060:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2203      	movs	r2, #3
 8010066:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8010068:	78fb      	ldrb	r3, [r7, #3]
 801006a:	b29a      	uxth	r2, r3
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2200      	movs	r2, #0
 8010074:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2200      	movs	r2, #0
 801007a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801007c:	2200      	movs	r2, #0
 801007e:	2100      	movs	r1, #0
 8010080:	6878      	ldr	r0, [r7, #4]
 8010082:	f000 fb3b 	bl	80106fc <USBH_CtlReq>
 8010086:	4603      	mov	r3, r0
}
 8010088:	4618      	mov	r0, r3
 801008a:	3708      	adds	r7, #8
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}

08010090 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b082      	sub	sp, #8
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	460b      	mov	r3, r1
 801009a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	789b      	ldrb	r3, [r3, #2]
 80100a0:	2b01      	cmp	r3, #1
 80100a2:	d10f      	bne.n	80100c4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2202      	movs	r2, #2
 80100a8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2201      	movs	r2, #1
 80100ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2200      	movs	r2, #0
 80100b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80100b6:	78fb      	ldrb	r3, [r7, #3]
 80100b8:	b29a      	uxth	r2, r3
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	2200      	movs	r2, #0
 80100c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80100c4:	2200      	movs	r2, #0
 80100c6:	2100      	movs	r1, #0
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f000 fb17 	bl	80106fc <USBH_CtlReq>
 80100ce:	4603      	mov	r3, r0
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3708      	adds	r7, #8
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}

080100d8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80100d8:	b480      	push	{r7}
 80100da:	b087      	sub	sp, #28
 80100dc:	af00      	add	r7, sp, #0
 80100de:	60f8      	str	r0, [r7, #12]
 80100e0:	60b9      	str	r1, [r7, #8]
 80100e2:	4613      	mov	r3, r2
 80100e4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	f603 43de 	addw	r3, r3, #3294	@ 0xcde
 80100ec:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80100ee:	2300      	movs	r3, #0
 80100f0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d101      	bne.n	80100fc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80100f8:	2302      	movs	r3, #2
 80100fa:	e094      	b.n	8010226 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	781a      	ldrb	r2, [r3, #0]
 8010100:	693b      	ldr	r3, [r7, #16]
 8010102:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	785a      	ldrb	r2, [r3, #1]
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	3302      	adds	r3, #2
 8010110:	781b      	ldrb	r3, [r3, #0]
 8010112:	461a      	mov	r2, r3
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	3303      	adds	r3, #3
 8010118:	781b      	ldrb	r3, [r3, #0]
 801011a:	021b      	lsls	r3, r3, #8
 801011c:	b29b      	uxth	r3, r3
 801011e:	4313      	orrs	r3, r2
 8010120:	b29a      	uxth	r2, r3
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	791a      	ldrb	r2, [r3, #4]
 801012a:	693b      	ldr	r3, [r7, #16]
 801012c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	795a      	ldrb	r2, [r3, #5]
 8010132:	693b      	ldr	r3, [r7, #16]
 8010134:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	799a      	ldrb	r2, [r3, #6]
 801013a:	693b      	ldr	r3, [r7, #16]
 801013c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	79da      	ldrb	r2, [r3, #7]
 8010142:	693b      	ldr	r3, [r7, #16]
 8010144:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 801014c:	2b00      	cmp	r3, #0
 801014e:	d004      	beq.n	801015a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8010156:	2b01      	cmp	r3, #1
 8010158:	d11b      	bne.n	8010192 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 801015a:	693b      	ldr	r3, [r7, #16]
 801015c:	79db      	ldrb	r3, [r3, #7]
 801015e:	2b20      	cmp	r3, #32
 8010160:	dc0f      	bgt.n	8010182 <USBH_ParseDevDesc+0xaa>
 8010162:	2b08      	cmp	r3, #8
 8010164:	db0f      	blt.n	8010186 <USBH_ParseDevDesc+0xae>
 8010166:	3b08      	subs	r3, #8
 8010168:	4a32      	ldr	r2, [pc, #200]	@ (8010234 <USBH_ParseDevDesc+0x15c>)
 801016a:	fa22 f303 	lsr.w	r3, r2, r3
 801016e:	f003 0301 	and.w	r3, r3, #1
 8010172:	2b00      	cmp	r3, #0
 8010174:	bf14      	ite	ne
 8010176:	2301      	movne	r3, #1
 8010178:	2300      	moveq	r3, #0
 801017a:	b2db      	uxtb	r3, r3
 801017c:	2b00      	cmp	r3, #0
 801017e:	d106      	bne.n	801018e <USBH_ParseDevDesc+0xb6>
 8010180:	e001      	b.n	8010186 <USBH_ParseDevDesc+0xae>
 8010182:	2b40      	cmp	r3, #64	@ 0x40
 8010184:	d003      	beq.n	801018e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8010186:	693b      	ldr	r3, [r7, #16]
 8010188:	2208      	movs	r2, #8
 801018a:	71da      	strb	r2, [r3, #7]
        break;
 801018c:	e000      	b.n	8010190 <USBH_ParseDevDesc+0xb8>
        break;
 801018e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8010190:	e00e      	b.n	80101b0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 8010198:	2b02      	cmp	r3, #2
 801019a:	d107      	bne.n	80101ac <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	79db      	ldrb	r3, [r3, #7]
 80101a0:	2b08      	cmp	r3, #8
 80101a2:	d005      	beq.n	80101b0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80101a4:	693b      	ldr	r3, [r7, #16]
 80101a6:	2208      	movs	r2, #8
 80101a8:	71da      	strb	r2, [r3, #7]
 80101aa:	e001      	b.n	80101b0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80101ac:	2303      	movs	r3, #3
 80101ae:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80101b0:	88fb      	ldrh	r3, [r7, #6]
 80101b2:	2b08      	cmp	r3, #8
 80101b4:	d936      	bls.n	8010224 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80101b6:	68bb      	ldr	r3, [r7, #8]
 80101b8:	3308      	adds	r3, #8
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	461a      	mov	r2, r3
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	3309      	adds	r3, #9
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	021b      	lsls	r3, r3, #8
 80101c6:	b29b      	uxth	r3, r3
 80101c8:	4313      	orrs	r3, r2
 80101ca:	b29a      	uxth	r2, r3
 80101cc:	693b      	ldr	r3, [r7, #16]
 80101ce:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	330a      	adds	r3, #10
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	461a      	mov	r2, r3
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	330b      	adds	r3, #11
 80101dc:	781b      	ldrb	r3, [r3, #0]
 80101de:	021b      	lsls	r3, r3, #8
 80101e0:	b29b      	uxth	r3, r3
 80101e2:	4313      	orrs	r3, r2
 80101e4:	b29a      	uxth	r2, r3
 80101e6:	693b      	ldr	r3, [r7, #16]
 80101e8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80101ea:	68bb      	ldr	r3, [r7, #8]
 80101ec:	330c      	adds	r3, #12
 80101ee:	781b      	ldrb	r3, [r3, #0]
 80101f0:	461a      	mov	r2, r3
 80101f2:	68bb      	ldr	r3, [r7, #8]
 80101f4:	330d      	adds	r3, #13
 80101f6:	781b      	ldrb	r3, [r3, #0]
 80101f8:	021b      	lsls	r3, r3, #8
 80101fa:	b29b      	uxth	r3, r3
 80101fc:	4313      	orrs	r3, r2
 80101fe:	b29a      	uxth	r2, r3
 8010200:	693b      	ldr	r3, [r7, #16]
 8010202:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	7b9a      	ldrb	r2, [r3, #14]
 8010208:	693b      	ldr	r3, [r7, #16]
 801020a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	7bda      	ldrb	r2, [r3, #15]
 8010210:	693b      	ldr	r3, [r7, #16]
 8010212:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	7c1a      	ldrb	r2, [r3, #16]
 8010218:	693b      	ldr	r3, [r7, #16]
 801021a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	7c5a      	ldrb	r2, [r3, #17]
 8010220:	693b      	ldr	r3, [r7, #16]
 8010222:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8010224:	7dfb      	ldrb	r3, [r7, #23]
}
 8010226:	4618      	mov	r0, r3
 8010228:	371c      	adds	r7, #28
 801022a:	46bd      	mov	sp, r7
 801022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010230:	4770      	bx	lr
 8010232:	bf00      	nop
 8010234:	01000101 	.word	0x01000101

08010238 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b08c      	sub	sp, #48	@ 0x30
 801023c:	af00      	add	r7, sp, #0
 801023e:	60f8      	str	r0, [r7, #12]
 8010240:	60b9      	str	r1, [r7, #8]
 8010242:	4613      	mov	r3, r2
 8010244:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 801024c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 801024e:	2300      	movs	r3, #0
 8010250:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8010254:	2300      	movs	r3, #0
 8010256:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 801025a:	2300      	movs	r3, #0
 801025c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8010260:	68bb      	ldr	r3, [r7, #8]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d101      	bne.n	801026a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8010266:	2302      	movs	r3, #2
 8010268:	e0da      	b.n	8010420 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 801026e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010270:	781b      	ldrb	r3, [r3, #0]
 8010272:	2b09      	cmp	r3, #9
 8010274:	d002      	beq.n	801027c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8010276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010278:	2209      	movs	r2, #9
 801027a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	781a      	ldrb	r2, [r3, #0]
 8010280:	6a3b      	ldr	r3, [r7, #32]
 8010282:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	785a      	ldrb	r2, [r3, #1]
 8010288:	6a3b      	ldr	r3, [r7, #32]
 801028a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	3302      	adds	r3, #2
 8010290:	781b      	ldrb	r3, [r3, #0]
 8010292:	461a      	mov	r2, r3
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	3303      	adds	r3, #3
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	021b      	lsls	r3, r3, #8
 801029c:	b29b      	uxth	r3, r3
 801029e:	4313      	orrs	r3, r2
 80102a0:	b29b      	uxth	r3, r3
 80102a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80102a6:	bf28      	it	cs
 80102a8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80102ac:	b29a      	uxth	r2, r3
 80102ae:	6a3b      	ldr	r3, [r7, #32]
 80102b0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	791a      	ldrb	r2, [r3, #4]
 80102b6:	6a3b      	ldr	r3, [r7, #32]
 80102b8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	795a      	ldrb	r2, [r3, #5]
 80102be:	6a3b      	ldr	r3, [r7, #32]
 80102c0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	799a      	ldrb	r2, [r3, #6]
 80102c6:	6a3b      	ldr	r3, [r7, #32]
 80102c8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	79da      	ldrb	r2, [r3, #7]
 80102ce:	6a3b      	ldr	r3, [r7, #32]
 80102d0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	7a1a      	ldrb	r2, [r3, #8]
 80102d6:	6a3b      	ldr	r3, [r7, #32]
 80102d8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80102da:	88fb      	ldrh	r3, [r7, #6]
 80102dc:	2b09      	cmp	r3, #9
 80102de:	f240 809d 	bls.w	801041c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80102e2:	2309      	movs	r3, #9
 80102e4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80102e6:	2300      	movs	r3, #0
 80102e8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80102ea:	e081      	b.n	80103f0 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80102ec:	f107 0316 	add.w	r3, r7, #22
 80102f0:	4619      	mov	r1, r3
 80102f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80102f4:	f000 f9e8 	bl	80106c8 <USBH_GetNextDesc>
 80102f8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80102fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102fc:	785b      	ldrb	r3, [r3, #1]
 80102fe:	2b04      	cmp	r3, #4
 8010300:	d176      	bne.n	80103f0 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8010302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010304:	781b      	ldrb	r3, [r3, #0]
 8010306:	2b09      	cmp	r3, #9
 8010308:	d002      	beq.n	8010310 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 801030a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801030c:	2209      	movs	r2, #9
 801030e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8010310:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010314:	221a      	movs	r2, #26
 8010316:	fb02 f303 	mul.w	r3, r2, r3
 801031a:	3308      	adds	r3, #8
 801031c:	6a3a      	ldr	r2, [r7, #32]
 801031e:	4413      	add	r3, r2
 8010320:	3302      	adds	r3, #2
 8010322:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8010324:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010326:	69f8      	ldr	r0, [r7, #28]
 8010328:	f000 f87e 	bl	8010428 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 801032c:	2300      	movs	r3, #0
 801032e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8010332:	2300      	movs	r3, #0
 8010334:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010336:	e043      	b.n	80103c0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010338:	f107 0316 	add.w	r3, r7, #22
 801033c:	4619      	mov	r1, r3
 801033e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010340:	f000 f9c2 	bl	80106c8 <USBH_GetNextDesc>
 8010344:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010348:	785b      	ldrb	r3, [r3, #1]
 801034a:	2b05      	cmp	r3, #5
 801034c:	d138      	bne.n	80103c0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 801034e:	69fb      	ldr	r3, [r7, #28]
 8010350:	795b      	ldrb	r3, [r3, #5]
 8010352:	2b01      	cmp	r3, #1
 8010354:	d113      	bne.n	801037e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8010356:	69fb      	ldr	r3, [r7, #28]
 8010358:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 801035a:	2b02      	cmp	r3, #2
 801035c:	d003      	beq.n	8010366 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 801035e:	69fb      	ldr	r3, [r7, #28]
 8010360:	799b      	ldrb	r3, [r3, #6]
 8010362:	2b03      	cmp	r3, #3
 8010364:	d10b      	bne.n	801037e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010366:	69fb      	ldr	r3, [r7, #28]
 8010368:	79db      	ldrb	r3, [r3, #7]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d10b      	bne.n	8010386 <USBH_ParseCfgDesc+0x14e>
 801036e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010370:	781b      	ldrb	r3, [r3, #0]
 8010372:	2b09      	cmp	r3, #9
 8010374:	d007      	beq.n	8010386 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8010376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010378:	2209      	movs	r2, #9
 801037a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801037c:	e003      	b.n	8010386 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 801037e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010380:	2207      	movs	r2, #7
 8010382:	701a      	strb	r2, [r3, #0]
 8010384:	e000      	b.n	8010388 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010386:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8010388:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801038c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010390:	3201      	adds	r2, #1
 8010392:	00d2      	lsls	r2, r2, #3
 8010394:	211a      	movs	r1, #26
 8010396:	fb01 f303 	mul.w	r3, r1, r3
 801039a:	4413      	add	r3, r2
 801039c:	3308      	adds	r3, #8
 801039e:	6a3a      	ldr	r2, [r7, #32]
 80103a0:	4413      	add	r3, r2
 80103a2:	3304      	adds	r3, #4
 80103a4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80103a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80103a8:	69b9      	ldr	r1, [r7, #24]
 80103aa:	68f8      	ldr	r0, [r7, #12]
 80103ac:	f000 f870 	bl	8010490 <USBH_ParseEPDesc>
 80103b0:	4603      	mov	r3, r0
 80103b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80103b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80103ba:	3301      	adds	r3, #1
 80103bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80103c0:	69fb      	ldr	r3, [r7, #28]
 80103c2:	791b      	ldrb	r3, [r3, #4]
 80103c4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80103c8:	429a      	cmp	r2, r3
 80103ca:	d204      	bcs.n	80103d6 <USBH_ParseCfgDesc+0x19e>
 80103cc:	6a3b      	ldr	r3, [r7, #32]
 80103ce:	885a      	ldrh	r2, [r3, #2]
 80103d0:	8afb      	ldrh	r3, [r7, #22]
 80103d2:	429a      	cmp	r2, r3
 80103d4:	d8b0      	bhi.n	8010338 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80103d6:	69fb      	ldr	r3, [r7, #28]
 80103d8:	791b      	ldrb	r3, [r3, #4]
 80103da:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80103de:	429a      	cmp	r2, r3
 80103e0:	d201      	bcs.n	80103e6 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80103e2:	2303      	movs	r3, #3
 80103e4:	e01c      	b.n	8010420 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80103e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80103ea:	3301      	adds	r3, #1
 80103ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80103f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80103f4:	2b01      	cmp	r3, #1
 80103f6:	d805      	bhi.n	8010404 <USBH_ParseCfgDesc+0x1cc>
 80103f8:	6a3b      	ldr	r3, [r7, #32]
 80103fa:	885a      	ldrh	r2, [r3, #2]
 80103fc:	8afb      	ldrh	r3, [r7, #22]
 80103fe:	429a      	cmp	r2, r3
 8010400:	f63f af74 	bhi.w	80102ec <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8010404:	6a3b      	ldr	r3, [r7, #32]
 8010406:	791b      	ldrb	r3, [r3, #4]
 8010408:	2b02      	cmp	r3, #2
 801040a:	bf28      	it	cs
 801040c:	2302      	movcs	r3, #2
 801040e:	b2db      	uxtb	r3, r3
 8010410:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010414:	429a      	cmp	r2, r3
 8010416:	d201      	bcs.n	801041c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8010418:	2303      	movs	r3, #3
 801041a:	e001      	b.n	8010420 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 801041c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010420:	4618      	mov	r0, r3
 8010422:	3730      	adds	r7, #48	@ 0x30
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8010428:	b480      	push	{r7}
 801042a:	b083      	sub	sp, #12
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	781a      	ldrb	r2, [r3, #0]
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	785a      	ldrb	r2, [r3, #1]
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	789a      	ldrb	r2, [r3, #2]
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	78da      	ldrb	r2, [r3, #3]
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	3304      	adds	r3, #4
 8010456:	781b      	ldrb	r3, [r3, #0]
 8010458:	2b02      	cmp	r3, #2
 801045a:	bf28      	it	cs
 801045c:	2302      	movcs	r3, #2
 801045e:	b2da      	uxtb	r2, r3
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	795a      	ldrb	r2, [r3, #5]
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	799a      	ldrb	r2, [r3, #6]
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	79da      	ldrb	r2, [r3, #7]
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	7a1a      	ldrb	r2, [r3, #8]
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	721a      	strb	r2, [r3, #8]
}
 8010484:	bf00      	nop
 8010486:	370c      	adds	r7, #12
 8010488:	46bd      	mov	sp, r7
 801048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048e:	4770      	bx	lr

08010490 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8010490:	b480      	push	{r7}
 8010492:	b087      	sub	sp, #28
 8010494:	af00      	add	r7, sp, #0
 8010496:	60f8      	str	r0, [r7, #12]
 8010498:	60b9      	str	r1, [r7, #8]
 801049a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 801049c:	2300      	movs	r3, #0
 801049e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	781a      	ldrb	r2, [r3, #0]
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	785a      	ldrb	r2, [r3, #1]
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	789a      	ldrb	r2, [r3, #2]
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	78da      	ldrb	r2, [r3, #3]
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	3304      	adds	r3, #4
 80104c4:	781b      	ldrb	r3, [r3, #0]
 80104c6:	461a      	mov	r2, r3
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	3305      	adds	r3, #5
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	021b      	lsls	r3, r3, #8
 80104d0:	b29b      	uxth	r3, r3
 80104d2:	4313      	orrs	r3, r2
 80104d4:	b29a      	uxth	r2, r3
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	799a      	ldrb	r2, [r3, #6]
 80104de:	68bb      	ldr	r3, [r7, #8]
 80104e0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	889b      	ldrh	r3, [r3, #4]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d00a      	beq.n	8010500 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80104ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80104f2:	d805      	bhi.n	8010500 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80104f8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80104fc:	4293      	cmp	r3, r2
 80104fe:	d901      	bls.n	8010504 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8010500:	2303      	movs	r3, #3
 8010502:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 801050a:	2b00      	cmp	r3, #0
 801050c:	d136      	bne.n	801057c <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 801050e:	68bb      	ldr	r3, [r7, #8]
 8010510:	78db      	ldrb	r3, [r3, #3]
 8010512:	f003 0303 	and.w	r3, r3, #3
 8010516:	2b02      	cmp	r3, #2
 8010518:	d108      	bne.n	801052c <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	889b      	ldrh	r3, [r3, #4]
 801051e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010522:	f240 8097 	bls.w	8010654 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010526:	2303      	movs	r3, #3
 8010528:	75fb      	strb	r3, [r7, #23]
 801052a:	e093      	b.n	8010654 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	78db      	ldrb	r3, [r3, #3]
 8010530:	f003 0303 	and.w	r3, r3, #3
 8010534:	2b00      	cmp	r3, #0
 8010536:	d107      	bne.n	8010548 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010538:	68bb      	ldr	r3, [r7, #8]
 801053a:	889b      	ldrh	r3, [r3, #4]
 801053c:	2b40      	cmp	r3, #64	@ 0x40
 801053e:	f240 8089 	bls.w	8010654 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010542:	2303      	movs	r3, #3
 8010544:	75fb      	strb	r3, [r7, #23]
 8010546:	e085      	b.n	8010654 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	78db      	ldrb	r3, [r3, #3]
 801054c:	f003 0303 	and.w	r3, r3, #3
 8010550:	2b01      	cmp	r3, #1
 8010552:	d005      	beq.n	8010560 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	78db      	ldrb	r3, [r3, #3]
 8010558:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 801055c:	2b03      	cmp	r3, #3
 801055e:	d10a      	bne.n	8010576 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	799b      	ldrb	r3, [r3, #6]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d003      	beq.n	8010570 <USBH_ParseEPDesc+0xe0>
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	799b      	ldrb	r3, [r3, #6]
 801056c:	2b10      	cmp	r3, #16
 801056e:	d970      	bls.n	8010652 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010570:	2303      	movs	r3, #3
 8010572:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010574:	e06d      	b.n	8010652 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010576:	2303      	movs	r3, #3
 8010578:	75fb      	strb	r3, [r7, #23]
 801057a:	e06b      	b.n	8010654 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 8010582:	2b01      	cmp	r3, #1
 8010584:	d13c      	bne.n	8010600 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	78db      	ldrb	r3, [r3, #3]
 801058a:	f003 0303 	and.w	r3, r3, #3
 801058e:	2b02      	cmp	r3, #2
 8010590:	d005      	beq.n	801059e <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	78db      	ldrb	r3, [r3, #3]
 8010596:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 801059a:	2b00      	cmp	r3, #0
 801059c:	d106      	bne.n	80105ac <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	889b      	ldrh	r3, [r3, #4]
 80105a2:	2b40      	cmp	r3, #64	@ 0x40
 80105a4:	d956      	bls.n	8010654 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80105a6:	2303      	movs	r3, #3
 80105a8:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80105aa:	e053      	b.n	8010654 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	78db      	ldrb	r3, [r3, #3]
 80105b0:	f003 0303 	and.w	r3, r3, #3
 80105b4:	2b01      	cmp	r3, #1
 80105b6:	d10e      	bne.n	80105d6 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	799b      	ldrb	r3, [r3, #6]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d007      	beq.n	80105d0 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80105c4:	2b10      	cmp	r3, #16
 80105c6:	d803      	bhi.n	80105d0 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80105cc:	2b40      	cmp	r3, #64	@ 0x40
 80105ce:	d941      	bls.n	8010654 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80105d0:	2303      	movs	r3, #3
 80105d2:	75fb      	strb	r3, [r7, #23]
 80105d4:	e03e      	b.n	8010654 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	78db      	ldrb	r3, [r3, #3]
 80105da:	f003 0303 	and.w	r3, r3, #3
 80105de:	2b03      	cmp	r3, #3
 80105e0:	d10b      	bne.n	80105fa <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	799b      	ldrb	r3, [r3, #6]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d004      	beq.n	80105f4 <USBH_ParseEPDesc+0x164>
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	889b      	ldrh	r3, [r3, #4]
 80105ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80105f2:	d32f      	bcc.n	8010654 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80105f4:	2303      	movs	r3, #3
 80105f6:	75fb      	strb	r3, [r7, #23]
 80105f8:	e02c      	b.n	8010654 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80105fa:	2303      	movs	r3, #3
 80105fc:	75fb      	strb	r3, [r7, #23]
 80105fe:	e029      	b.n	8010654 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 8010606:	2b02      	cmp	r3, #2
 8010608:	d120      	bne.n	801064c <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	78db      	ldrb	r3, [r3, #3]
 801060e:	f003 0303 	and.w	r3, r3, #3
 8010612:	2b00      	cmp	r3, #0
 8010614:	d106      	bne.n	8010624 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	889b      	ldrh	r3, [r3, #4]
 801061a:	2b08      	cmp	r3, #8
 801061c:	d01a      	beq.n	8010654 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 801061e:	2303      	movs	r3, #3
 8010620:	75fb      	strb	r3, [r7, #23]
 8010622:	e017      	b.n	8010654 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	78db      	ldrb	r3, [r3, #3]
 8010628:	f003 0303 	and.w	r3, r3, #3
 801062c:	2b03      	cmp	r3, #3
 801062e:	d10a      	bne.n	8010646 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	799b      	ldrb	r3, [r3, #6]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d003      	beq.n	8010640 <USBH_ParseEPDesc+0x1b0>
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	889b      	ldrh	r3, [r3, #4]
 801063c:	2b08      	cmp	r3, #8
 801063e:	d909      	bls.n	8010654 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010640:	2303      	movs	r3, #3
 8010642:	75fb      	strb	r3, [r7, #23]
 8010644:	e006      	b.n	8010654 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010646:	2303      	movs	r3, #3
 8010648:	75fb      	strb	r3, [r7, #23]
 801064a:	e003      	b.n	8010654 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 801064c:	2303      	movs	r3, #3
 801064e:	75fb      	strb	r3, [r7, #23]
 8010650:	e000      	b.n	8010654 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010652:	bf00      	nop
  }

  return status;
 8010654:	7dfb      	ldrb	r3, [r7, #23]
}
 8010656:	4618      	mov	r0, r3
 8010658:	371c      	adds	r7, #28
 801065a:	46bd      	mov	sp, r7
 801065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010660:	4770      	bx	lr

08010662 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8010662:	b480      	push	{r7}
 8010664:	b087      	sub	sp, #28
 8010666:	af00      	add	r7, sp, #0
 8010668:	60f8      	str	r0, [r7, #12]
 801066a:	60b9      	str	r1, [r7, #8]
 801066c:	4613      	mov	r3, r2
 801066e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	3301      	adds	r3, #1
 8010674:	781b      	ldrb	r3, [r3, #0]
 8010676:	2b03      	cmp	r3, #3
 8010678:	d120      	bne.n	80106bc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	781b      	ldrb	r3, [r3, #0]
 801067e:	1e9a      	subs	r2, r3, #2
 8010680:	88fb      	ldrh	r3, [r7, #6]
 8010682:	4293      	cmp	r3, r2
 8010684:	bf28      	it	cs
 8010686:	4613      	movcs	r3, r2
 8010688:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	3302      	adds	r3, #2
 801068e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8010690:	2300      	movs	r3, #0
 8010692:	82fb      	strh	r3, [r7, #22]
 8010694:	e00b      	b.n	80106ae <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8010696:	8afb      	ldrh	r3, [r7, #22]
 8010698:	68fa      	ldr	r2, [r7, #12]
 801069a:	4413      	add	r3, r2
 801069c:	781a      	ldrb	r2, [r3, #0]
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	701a      	strb	r2, [r3, #0]
      pdest++;
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	3301      	adds	r3, #1
 80106a6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80106a8:	8afb      	ldrh	r3, [r7, #22]
 80106aa:	3302      	adds	r3, #2
 80106ac:	82fb      	strh	r3, [r7, #22]
 80106ae:	8afa      	ldrh	r2, [r7, #22]
 80106b0:	8abb      	ldrh	r3, [r7, #20]
 80106b2:	429a      	cmp	r2, r3
 80106b4:	d3ef      	bcc.n	8010696 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	2200      	movs	r2, #0
 80106ba:	701a      	strb	r2, [r3, #0]
  }
}
 80106bc:	bf00      	nop
 80106be:	371c      	adds	r7, #28
 80106c0:	46bd      	mov	sp, r7
 80106c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c6:	4770      	bx	lr

080106c8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80106c8:	b480      	push	{r7}
 80106ca:	b085      	sub	sp, #20
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
 80106d0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	881b      	ldrh	r3, [r3, #0]
 80106d6:	687a      	ldr	r2, [r7, #4]
 80106d8:	7812      	ldrb	r2, [r2, #0]
 80106da:	4413      	add	r3, r2
 80106dc:	b29a      	uxth	r2, r3
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	781b      	ldrb	r3, [r3, #0]
 80106e6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	4413      	add	r3, r2
 80106ec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80106ee:	68fb      	ldr	r3, [r7, #12]
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	3714      	adds	r7, #20
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr

080106fc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b086      	sub	sp, #24
 8010700:	af00      	add	r7, sp, #0
 8010702:	60f8      	str	r0, [r7, #12]
 8010704:	60b9      	str	r1, [r7, #8]
 8010706:	4613      	mov	r3, r2
 8010708:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 801070a:	2301      	movs	r3, #1
 801070c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	789b      	ldrb	r3, [r3, #2]
 8010712:	2b01      	cmp	r3, #1
 8010714:	d002      	beq.n	801071c <USBH_CtlReq+0x20>
 8010716:	2b02      	cmp	r3, #2
 8010718:	d00f      	beq.n	801073a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 801071a:	e027      	b.n	801076c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	68ba      	ldr	r2, [r7, #8]
 8010720:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	88fa      	ldrh	r2, [r7, #6]
 8010726:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	2201      	movs	r2, #1
 801072c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	2202      	movs	r2, #2
 8010732:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8010734:	2301      	movs	r3, #1
 8010736:	75fb      	strb	r3, [r7, #23]
      break;
 8010738:	e018      	b.n	801076c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 801073a:	68f8      	ldr	r0, [r7, #12]
 801073c:	f000 f81c 	bl	8010778 <USBH_HandleControl>
 8010740:	4603      	mov	r3, r0
 8010742:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8010744:	7dfb      	ldrb	r3, [r7, #23]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d002      	beq.n	8010750 <USBH_CtlReq+0x54>
 801074a:	7dfb      	ldrb	r3, [r7, #23]
 801074c:	2b03      	cmp	r3, #3
 801074e:	d106      	bne.n	801075e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	2201      	movs	r2, #1
 8010754:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	2200      	movs	r2, #0
 801075a:	761a      	strb	r2, [r3, #24]
      break;
 801075c:	e005      	b.n	801076a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 801075e:	7dfb      	ldrb	r3, [r7, #23]
 8010760:	2b02      	cmp	r3, #2
 8010762:	d102      	bne.n	801076a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	2201      	movs	r2, #1
 8010768:	709a      	strb	r2, [r3, #2]
      break;
 801076a:	bf00      	nop
  }
  return status;
 801076c:	7dfb      	ldrb	r3, [r7, #23]
}
 801076e:	4618      	mov	r0, r3
 8010770:	3718      	adds	r7, #24
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}
	...

08010778 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b086      	sub	sp, #24
 801077c:	af02      	add	r7, sp, #8
 801077e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8010780:	2301      	movs	r3, #1
 8010782:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010784:	2300      	movs	r3, #0
 8010786:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	7e1b      	ldrb	r3, [r3, #24]
 801078c:	3b01      	subs	r3, #1
 801078e:	2b0a      	cmp	r3, #10
 8010790:	f200 815f 	bhi.w	8010a52 <USBH_HandleControl+0x2da>
 8010794:	a201      	add	r2, pc, #4	@ (adr r2, 801079c <USBH_HandleControl+0x24>)
 8010796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801079a:	bf00      	nop
 801079c:	080107c9 	.word	0x080107c9
 80107a0:	080107e3 	.word	0x080107e3
 80107a4:	0801084d 	.word	0x0801084d
 80107a8:	08010873 	.word	0x08010873
 80107ac:	080108ab 	.word	0x080108ab
 80107b0:	080108d5 	.word	0x080108d5
 80107b4:	08010927 	.word	0x08010927
 80107b8:	08010949 	.word	0x08010949
 80107bc:	08010985 	.word	0x08010985
 80107c0:	080109ab 	.word	0x080109ab
 80107c4:	080109e9 	.word	0x080109e9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f103 0110 	add.w	r1, r3, #16
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	795b      	ldrb	r3, [r3, #5]
 80107d2:	461a      	mov	r2, r3
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f000 f951 	bl	8010a7c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2202      	movs	r2, #2
 80107de:	761a      	strb	r2, [r3, #24]
      break;
 80107e0:	e142      	b.n	8010a68 <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	795b      	ldrb	r3, [r3, #5]
 80107e6:	4619      	mov	r1, r3
 80107e8:	6878      	ldr	r0, [r7, #4]
 80107ea:	f000 fcb9 	bl	8011160 <USBH_LL_GetURBState>
 80107ee:	4603      	mov	r3, r0
 80107f0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80107f2:	7bbb      	ldrb	r3, [r7, #14]
 80107f4:	2b01      	cmp	r3, #1
 80107f6:	d11e      	bne.n	8010836 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	7c1b      	ldrb	r3, [r3, #16]
 80107fc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010800:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	8adb      	ldrh	r3, [r3, #22]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d00a      	beq.n	8010820 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801080a:	7b7b      	ldrb	r3, [r7, #13]
 801080c:	2b80      	cmp	r3, #128	@ 0x80
 801080e:	d103      	bne.n	8010818 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2203      	movs	r2, #3
 8010814:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010816:	e11e      	b.n	8010a56 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2205      	movs	r2, #5
 801081c:	761a      	strb	r2, [r3, #24]
      break;
 801081e:	e11a      	b.n	8010a56 <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 8010820:	7b7b      	ldrb	r3, [r7, #13]
 8010822:	2b80      	cmp	r3, #128	@ 0x80
 8010824:	d103      	bne.n	801082e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	2209      	movs	r2, #9
 801082a:	761a      	strb	r2, [r3, #24]
      break;
 801082c:	e113      	b.n	8010a56 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2207      	movs	r2, #7
 8010832:	761a      	strb	r2, [r3, #24]
      break;
 8010834:	e10f      	b.n	8010a56 <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8010836:	7bbb      	ldrb	r3, [r7, #14]
 8010838:	2b04      	cmp	r3, #4
 801083a:	d003      	beq.n	8010844 <USBH_HandleControl+0xcc>
 801083c:	7bbb      	ldrb	r3, [r7, #14]
 801083e:	2b02      	cmp	r3, #2
 8010840:	f040 8109 	bne.w	8010a56 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	220b      	movs	r2, #11
 8010848:	761a      	strb	r2, [r3, #24]
      break;
 801084a:	e104      	b.n	8010a56 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 8010852:	b29a      	uxth	r2, r3
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6899      	ldr	r1, [r3, #8]
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	899a      	ldrh	r2, [r3, #12]
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	791b      	ldrb	r3, [r3, #4]
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f000 f948 	bl	8010afa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2204      	movs	r2, #4
 801086e:	761a      	strb	r2, [r3, #24]
      break;
 8010870:	e0fa      	b.n	8010a68 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	791b      	ldrb	r3, [r3, #4]
 8010876:	4619      	mov	r1, r3
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f000 fc71 	bl	8011160 <USBH_LL_GetURBState>
 801087e:	4603      	mov	r3, r0
 8010880:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8010882:	7bbb      	ldrb	r3, [r7, #14]
 8010884:	2b01      	cmp	r3, #1
 8010886:	d102      	bne.n	801088e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2209      	movs	r2, #9
 801088c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 801088e:	7bbb      	ldrb	r3, [r7, #14]
 8010890:	2b05      	cmp	r3, #5
 8010892:	d102      	bne.n	801089a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8010894:	2303      	movs	r3, #3
 8010896:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010898:	e0df      	b.n	8010a5a <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 801089a:	7bbb      	ldrb	r3, [r7, #14]
 801089c:	2b04      	cmp	r3, #4
 801089e:	f040 80dc 	bne.w	8010a5a <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	220b      	movs	r2, #11
 80108a6:	761a      	strb	r2, [r3, #24]
      break;
 80108a8:	e0d7      	b.n	8010a5a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	6899      	ldr	r1, [r3, #8]
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	899a      	ldrh	r2, [r3, #12]
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	795b      	ldrb	r3, [r3, #5]
 80108b6:	2001      	movs	r0, #1
 80108b8:	9000      	str	r0, [sp, #0]
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f000 f8f8 	bl	8010ab0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 80108c6:	b29a      	uxth	r2, r3
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2206      	movs	r2, #6
 80108d0:	761a      	strb	r2, [r3, #24]
      break;
 80108d2:	e0c9      	b.n	8010a68 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	795b      	ldrb	r3, [r3, #5]
 80108d8:	4619      	mov	r1, r3
 80108da:	6878      	ldr	r0, [r7, #4]
 80108dc:	f000 fc40 	bl	8011160 <USBH_LL_GetURBState>
 80108e0:	4603      	mov	r3, r0
 80108e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80108e4:	7bbb      	ldrb	r3, [r7, #14]
 80108e6:	2b01      	cmp	r3, #1
 80108e8:	d103      	bne.n	80108f2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2207      	movs	r2, #7
 80108ee:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80108f0:	e0b5      	b.n	8010a5e <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 80108f2:	7bbb      	ldrb	r3, [r7, #14]
 80108f4:	2b05      	cmp	r3, #5
 80108f6:	d105      	bne.n	8010904 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	220c      	movs	r2, #12
 80108fc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80108fe:	2303      	movs	r3, #3
 8010900:	73fb      	strb	r3, [r7, #15]
      break;
 8010902:	e0ac      	b.n	8010a5e <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010904:	7bbb      	ldrb	r3, [r7, #14]
 8010906:	2b02      	cmp	r3, #2
 8010908:	d103      	bne.n	8010912 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	2205      	movs	r2, #5
 801090e:	761a      	strb	r2, [r3, #24]
      break;
 8010910:	e0a5      	b.n	8010a5e <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 8010912:	7bbb      	ldrb	r3, [r7, #14]
 8010914:	2b04      	cmp	r3, #4
 8010916:	f040 80a2 	bne.w	8010a5e <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	220b      	movs	r2, #11
 801091e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8010920:	2302      	movs	r3, #2
 8010922:	73fb      	strb	r3, [r7, #15]
      break;
 8010924:	e09b      	b.n	8010a5e <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	791b      	ldrb	r3, [r3, #4]
 801092a:	2200      	movs	r2, #0
 801092c:	2100      	movs	r1, #0
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	f000 f8e3 	bl	8010afa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 801093a:	b29a      	uxth	r2, r3
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2208      	movs	r2, #8
 8010944:	761a      	strb	r2, [r3, #24]

      break;
 8010946:	e08f      	b.n	8010a68 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	791b      	ldrb	r3, [r3, #4]
 801094c:	4619      	mov	r1, r3
 801094e:	6878      	ldr	r0, [r7, #4]
 8010950:	f000 fc06 	bl	8011160 <USBH_LL_GetURBState>
 8010954:	4603      	mov	r3, r0
 8010956:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010958:	7bbb      	ldrb	r3, [r7, #14]
 801095a:	2b01      	cmp	r3, #1
 801095c:	d105      	bne.n	801096a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	220d      	movs	r2, #13
 8010962:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8010964:	2300      	movs	r3, #0
 8010966:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010968:	e07b      	b.n	8010a62 <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 801096a:	7bbb      	ldrb	r3, [r7, #14]
 801096c:	2b04      	cmp	r3, #4
 801096e:	d103      	bne.n	8010978 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	220b      	movs	r2, #11
 8010974:	761a      	strb	r2, [r3, #24]
      break;
 8010976:	e074      	b.n	8010a62 <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 8010978:	7bbb      	ldrb	r3, [r7, #14]
 801097a:	2b05      	cmp	r3, #5
 801097c:	d171      	bne.n	8010a62 <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 801097e:	2303      	movs	r3, #3
 8010980:	73fb      	strb	r3, [r7, #15]
      break;
 8010982:	e06e      	b.n	8010a62 <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	795b      	ldrb	r3, [r3, #5]
 8010988:	2201      	movs	r2, #1
 801098a:	9200      	str	r2, [sp, #0]
 801098c:	2200      	movs	r2, #0
 801098e:	2100      	movs	r1, #0
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	f000 f88d 	bl	8010ab0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 801099c:	b29a      	uxth	r2, r3
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	220a      	movs	r2, #10
 80109a6:	761a      	strb	r2, [r3, #24]
      break;
 80109a8:	e05e      	b.n	8010a68 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	795b      	ldrb	r3, [r3, #5]
 80109ae:	4619      	mov	r1, r3
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f000 fbd5 	bl	8011160 <USBH_LL_GetURBState>
 80109b6:	4603      	mov	r3, r0
 80109b8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80109ba:	7bbb      	ldrb	r3, [r7, #14]
 80109bc:	2b01      	cmp	r3, #1
 80109be:	d105      	bne.n	80109cc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80109c0:	2300      	movs	r3, #0
 80109c2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	220d      	movs	r2, #13
 80109c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80109ca:	e04c      	b.n	8010a66 <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 80109cc:	7bbb      	ldrb	r3, [r7, #14]
 80109ce:	2b02      	cmp	r3, #2
 80109d0:	d103      	bne.n	80109da <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2209      	movs	r2, #9
 80109d6:	761a      	strb	r2, [r3, #24]
      break;
 80109d8:	e045      	b.n	8010a66 <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 80109da:	7bbb      	ldrb	r3, [r7, #14]
 80109dc:	2b04      	cmp	r3, #4
 80109de:	d142      	bne.n	8010a66 <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	220b      	movs	r2, #11
 80109e4:	761a      	strb	r2, [r3, #24]
      break;
 80109e6:	e03e      	b.n	8010a66 <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	7e5b      	ldrb	r3, [r3, #25]
 80109ec:	3301      	adds	r3, #1
 80109ee:	b2da      	uxtb	r2, r3
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	765a      	strb	r2, [r3, #25]
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	7e5b      	ldrb	r3, [r3, #25]
 80109f8:	2b02      	cmp	r3, #2
 80109fa:	d806      	bhi.n	8010a0a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2201      	movs	r2, #1
 8010a00:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2201      	movs	r2, #1
 8010a06:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8010a08:	e02e      	b.n	8010a68 <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 8010a10:	2106      	movs	r1, #6
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 8010a1c:	4815      	ldr	r0, [pc, #84]	@ (8010a74 <USBH_HandleControl+0x2fc>)
 8010a1e:	f000 fdcf 	bl	80115c0 <iprintf>
 8010a22:	4815      	ldr	r0, [pc, #84]	@ (8010a78 <USBH_HandleControl+0x300>)
 8010a24:	f000 fdcc 	bl	80115c0 <iprintf>
 8010a28:	200a      	movs	r0, #10
 8010a2a:	f000 fddb 	bl	80115e4 <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	795b      	ldrb	r3, [r3, #5]
 8010a32:	4619      	mov	r1, r3
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f000 f8ee 	bl	8010c16 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	791b      	ldrb	r3, [r3, #4]
 8010a3e:	4619      	mov	r1, r3
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f000 f8e8 	bl	8010c16 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2200      	movs	r2, #0
 8010a4a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8010a4c:	2302      	movs	r3, #2
 8010a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8010a50:	e00a      	b.n	8010a68 <USBH_HandleControl+0x2f0>

    default:
      break;
 8010a52:	bf00      	nop
 8010a54:	e008      	b.n	8010a68 <USBH_HandleControl+0x2f0>
      break;
 8010a56:	bf00      	nop
 8010a58:	e006      	b.n	8010a68 <USBH_HandleControl+0x2f0>
      break;
 8010a5a:	bf00      	nop
 8010a5c:	e004      	b.n	8010a68 <USBH_HandleControl+0x2f0>
      break;
 8010a5e:	bf00      	nop
 8010a60:	e002      	b.n	8010a68 <USBH_HandleControl+0x2f0>
      break;
 8010a62:	bf00      	nop
 8010a64:	e000      	b.n	8010a68 <USBH_HandleControl+0x2f0>
      break;
 8010a66:	bf00      	nop
  }

  return status;
 8010a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3710      	adds	r7, #16
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}
 8010a72:	bf00      	nop
 8010a74:	08012d4c 	.word	0x08012d4c
 8010a78:	08012e28 	.word	0x08012e28

08010a7c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b088      	sub	sp, #32
 8010a80:	af04      	add	r7, sp, #16
 8010a82:	60f8      	str	r0, [r7, #12]
 8010a84:	60b9      	str	r1, [r7, #8]
 8010a86:	4613      	mov	r3, r2
 8010a88:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010a8a:	79f9      	ldrb	r1, [r7, #7]
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	9303      	str	r3, [sp, #12]
 8010a90:	2308      	movs	r3, #8
 8010a92:	9302      	str	r3, [sp, #8]
 8010a94:	68bb      	ldr	r3, [r7, #8]
 8010a96:	9301      	str	r3, [sp, #4]
 8010a98:	2300      	movs	r3, #0
 8010a9a:	9300      	str	r3, [sp, #0]
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	68f8      	ldr	r0, [r7, #12]
 8010aa2:	f000 fb2c 	bl	80110fe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8010aa6:	2300      	movs	r3, #0
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3710      	adds	r7, #16
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}

08010ab0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b088      	sub	sp, #32
 8010ab4:	af04      	add	r7, sp, #16
 8010ab6:	60f8      	str	r0, [r7, #12]
 8010ab8:	60b9      	str	r1, [r7, #8]
 8010aba:	4611      	mov	r1, r2
 8010abc:	461a      	mov	r2, r3
 8010abe:	460b      	mov	r3, r1
 8010ac0:	80fb      	strh	r3, [r7, #6]
 8010ac2:	4613      	mov	r3, r2
 8010ac4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d001      	beq.n	8010ad4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010ad4:	7979      	ldrb	r1, [r7, #5]
 8010ad6:	7e3b      	ldrb	r3, [r7, #24]
 8010ad8:	9303      	str	r3, [sp, #12]
 8010ada:	88fb      	ldrh	r3, [r7, #6]
 8010adc:	9302      	str	r3, [sp, #8]
 8010ade:	68bb      	ldr	r3, [r7, #8]
 8010ae0:	9301      	str	r3, [sp, #4]
 8010ae2:	2301      	movs	r3, #1
 8010ae4:	9300      	str	r3, [sp, #0]
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	2200      	movs	r2, #0
 8010aea:	68f8      	ldr	r0, [r7, #12]
 8010aec:	f000 fb07 	bl	80110fe <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8010af0:	2300      	movs	r3, #0
}
 8010af2:	4618      	mov	r0, r3
 8010af4:	3710      	adds	r7, #16
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}

08010afa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8010afa:	b580      	push	{r7, lr}
 8010afc:	b088      	sub	sp, #32
 8010afe:	af04      	add	r7, sp, #16
 8010b00:	60f8      	str	r0, [r7, #12]
 8010b02:	60b9      	str	r1, [r7, #8]
 8010b04:	4611      	mov	r1, r2
 8010b06:	461a      	mov	r2, r3
 8010b08:	460b      	mov	r3, r1
 8010b0a:	80fb      	strh	r3, [r7, #6]
 8010b0c:	4613      	mov	r3, r2
 8010b0e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010b10:	7979      	ldrb	r1, [r7, #5]
 8010b12:	2300      	movs	r3, #0
 8010b14:	9303      	str	r3, [sp, #12]
 8010b16:	88fb      	ldrh	r3, [r7, #6]
 8010b18:	9302      	str	r3, [sp, #8]
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	9301      	str	r3, [sp, #4]
 8010b1e:	2301      	movs	r3, #1
 8010b20:	9300      	str	r3, [sp, #0]
 8010b22:	2300      	movs	r3, #0
 8010b24:	2201      	movs	r2, #1
 8010b26:	68f8      	ldr	r0, [r7, #12]
 8010b28:	f000 fae9 	bl	80110fe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8010b2c:	2300      	movs	r3, #0

}
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3710      	adds	r7, #16
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}

08010b36 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8010b36:	b580      	push	{r7, lr}
 8010b38:	b088      	sub	sp, #32
 8010b3a:	af04      	add	r7, sp, #16
 8010b3c:	60f8      	str	r0, [r7, #12]
 8010b3e:	60b9      	str	r1, [r7, #8]
 8010b40:	4611      	mov	r1, r2
 8010b42:	461a      	mov	r2, r3
 8010b44:	460b      	mov	r3, r1
 8010b46:	71fb      	strb	r3, [r7, #7]
 8010b48:	4613      	mov	r3, r2
 8010b4a:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010b4c:	79fb      	ldrb	r3, [r7, #7]
 8010b4e:	b29b      	uxth	r3, r3
 8010b50:	79b9      	ldrb	r1, [r7, #6]
 8010b52:	2200      	movs	r2, #0
 8010b54:	9203      	str	r2, [sp, #12]
 8010b56:	9302      	str	r3, [sp, #8]
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	9301      	str	r3, [sp, #4]
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	9300      	str	r3, [sp, #0]
 8010b60:	2303      	movs	r3, #3
 8010b62:	2201      	movs	r2, #1
 8010b64:	68f8      	ldr	r0, [r7, #12]
 8010b66:	f000 faca 	bl	80110fe <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 8010b6a:	2300      	movs	r3, #0
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	3710      	adds	r7, #16
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd80      	pop	{r7, pc}

08010b74 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b086      	sub	sp, #24
 8010b78:	af04      	add	r7, sp, #16
 8010b7a:	6078      	str	r0, [r7, #4]
 8010b7c:	4608      	mov	r0, r1
 8010b7e:	4611      	mov	r1, r2
 8010b80:	461a      	mov	r2, r3
 8010b82:	4603      	mov	r3, r0
 8010b84:	70fb      	strb	r3, [r7, #3]
 8010b86:	460b      	mov	r3, r1
 8010b88:	70bb      	strb	r3, [r7, #2]
 8010b8a:	4613      	mov	r3, r2
 8010b8c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8010b8e:	7878      	ldrb	r0, [r7, #1]
 8010b90:	78ba      	ldrb	r2, [r7, #2]
 8010b92:	78f9      	ldrb	r1, [r7, #3]
 8010b94:	8b3b      	ldrh	r3, [r7, #24]
 8010b96:	9302      	str	r3, [sp, #8]
 8010b98:	7d3b      	ldrb	r3, [r7, #20]
 8010b9a:	9301      	str	r3, [sp, #4]
 8010b9c:	7c3b      	ldrb	r3, [r7, #16]
 8010b9e:	9300      	str	r3, [sp, #0]
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f000 fa5d 	bl	8011062 <USBH_LL_OpenPipe>

  return USBH_OK;
 8010ba8:	2300      	movs	r3, #0
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	3708      	adds	r7, #8
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}

08010bb2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8010bb2:	b580      	push	{r7, lr}
 8010bb4:	b082      	sub	sp, #8
 8010bb6:	af00      	add	r7, sp, #0
 8010bb8:	6078      	str	r0, [r7, #4]
 8010bba:	460b      	mov	r3, r1
 8010bbc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8010bbe:	78fb      	ldrb	r3, [r7, #3]
 8010bc0:	4619      	mov	r1, r3
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f000 fa7c 	bl	80110c0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8010bc8:	2300      	movs	r3, #0
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3708      	adds	r7, #8
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}

08010bd2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8010bd2:	b580      	push	{r7, lr}
 8010bd4:	b084      	sub	sp, #16
 8010bd6:	af00      	add	r7, sp, #0
 8010bd8:	6078      	str	r0, [r7, #4]
 8010bda:	460b      	mov	r3, r1
 8010bdc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f000 f839 	bl	8010c56 <USBH_GetFreePipe>
 8010be4:	4603      	mov	r3, r0
 8010be6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8010be8:	89fb      	ldrh	r3, [r7, #14]
 8010bea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010bee:	4293      	cmp	r3, r2
 8010bf0:	d00b      	beq.n	8010c0a <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8010bf2:	78fa      	ldrb	r2, [r7, #3]
 8010bf4:	89fb      	ldrh	r3, [r7, #14]
 8010bf6:	f003 030f 	and.w	r3, r3, #15
 8010bfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8010bfe:	6879      	ldr	r1, [r7, #4]
 8010c00:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8010c04:	009b      	lsls	r3, r3, #2
 8010c06:	440b      	add	r3, r1
 8010c08:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8010c0a:	89fb      	ldrh	r3, [r7, #14]
 8010c0c:	b2db      	uxtb	r3, r3
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	3710      	adds	r7, #16
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bd80      	pop	{r7, pc}

08010c16 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8010c16:	b480      	push	{r7}
 8010c18:	b083      	sub	sp, #12
 8010c1a:	af00      	add	r7, sp, #0
 8010c1c:	6078      	str	r0, [r7, #4]
 8010c1e:	460b      	mov	r3, r1
 8010c20:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8010c22:	78fb      	ldrb	r3, [r7, #3]
 8010c24:	2b0f      	cmp	r3, #15
 8010c26:	d80f      	bhi.n	8010c48 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8010c28:	78fb      	ldrb	r3, [r7, #3]
 8010c2a:	687a      	ldr	r2, [r7, #4]
 8010c2c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8010c30:	009b      	lsls	r3, r3, #2
 8010c32:	4413      	add	r3, r2
 8010c34:	685a      	ldr	r2, [r3, #4]
 8010c36:	78fb      	ldrb	r3, [r7, #3]
 8010c38:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8010c3c:	6879      	ldr	r1, [r7, #4]
 8010c3e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8010c42:	009b      	lsls	r3, r3, #2
 8010c44:	440b      	add	r3, r1
 8010c46:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8010c48:	2300      	movs	r3, #0
}
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	370c      	adds	r7, #12
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c54:	4770      	bx	lr

08010c56 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8010c56:	b480      	push	{r7}
 8010c58:	b085      	sub	sp, #20
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8010c62:	2300      	movs	r3, #0
 8010c64:	73fb      	strb	r3, [r7, #15]
 8010c66:	e010      	b.n	8010c8a <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010c68:	7bfb      	ldrb	r3, [r7, #15]
 8010c6a:	687a      	ldr	r2, [r7, #4]
 8010c6c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8010c70:	009b      	lsls	r3, r3, #2
 8010c72:	4413      	add	r3, r2
 8010c74:	685b      	ldr	r3, [r3, #4]
 8010c76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d102      	bne.n	8010c84 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 8010c7e:	7bfb      	ldrb	r3, [r7, #15]
 8010c80:	b29b      	uxth	r3, r3
 8010c82:	e007      	b.n	8010c94 <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8010c84:	7bfb      	ldrb	r3, [r7, #15]
 8010c86:	3301      	adds	r3, #1
 8010c88:	73fb      	strb	r3, [r7, #15]
 8010c8a:	7bfb      	ldrb	r3, [r7, #15]
 8010c8c:	2b0f      	cmp	r3, #15
 8010c8e:	d9eb      	bls.n	8010c68 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8010c90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	3714      	adds	r7, #20
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9e:	4770      	bx	lr

08010ca0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	490e      	ldr	r1, [pc, #56]	@ (8010ce0 <MX_USB_HOST_Init+0x40>)
 8010ca8:	480e      	ldr	r0, [pc, #56]	@ (8010ce4 <MX_USB_HOST_Init+0x44>)
 8010caa:	f7fe f933 	bl	800ef14 <USBH_Init>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d001      	beq.n	8010cb8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010cb4:	f7f1 fc38 	bl	8002528 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_HID_CLASS) != USBH_OK)
 8010cb8:	490b      	ldr	r1, [pc, #44]	@ (8010ce8 <MX_USB_HOST_Init+0x48>)
 8010cba:	480a      	ldr	r0, [pc, #40]	@ (8010ce4 <MX_USB_HOST_Init+0x44>)
 8010cbc:	f7fe f9e8 	bl	800f090 <USBH_RegisterClass>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d001      	beq.n	8010cca <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010cc6:	f7f1 fc2f 	bl	8002528 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8010cca:	4806      	ldr	r0, [pc, #24]	@ (8010ce4 <MX_USB_HOST_Init+0x44>)
 8010ccc:	f7fe fad0 	bl	800f270 <USBH_Start>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d001      	beq.n	8010cda <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010cd6:	f7f1 fc27 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010cda:	bf00      	nop
 8010cdc:	bd80      	pop	{r7, pc}
 8010cde:	bf00      	nop
 8010ce0:	08010d01 	.word	0x08010d01
 8010ce4:	2000855c 	.word	0x2000855c
 8010ce8:	200001f4 	.word	0x200001f4

08010cec <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 8010cf0:	4802      	ldr	r0, [pc, #8]	@ (8010cfc <MX_USB_HOST_Process+0x10>)
 8010cf2:	f7fe facd 	bl	800f290 <USBH_Process>
}
 8010cf6:	bf00      	nop
 8010cf8:	bd80      	pop	{r7, pc}
 8010cfa:	bf00      	nop
 8010cfc:	2000855c 	.word	0x2000855c

08010d00 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010d00:	b480      	push	{r7}
 8010d02:	b083      	sub	sp, #12
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
 8010d08:	460b      	mov	r3, r1
 8010d0a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010d0c:	78fb      	ldrb	r3, [r7, #3]
 8010d0e:	3b01      	subs	r3, #1
 8010d10:	2b04      	cmp	r3, #4
 8010d12:	d819      	bhi.n	8010d48 <USBH_UserProcess+0x48>
 8010d14:	a201      	add	r2, pc, #4	@ (adr r2, 8010d1c <USBH_UserProcess+0x1c>)
 8010d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d1a:	bf00      	nop
 8010d1c:	08010d49 	.word	0x08010d49
 8010d20:	08010d39 	.word	0x08010d39
 8010d24:	08010d49 	.word	0x08010d49
 8010d28:	08010d41 	.word	0x08010d41
 8010d2c:	08010d31 	.word	0x08010d31
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010d30:	4b09      	ldr	r3, [pc, #36]	@ (8010d58 <USBH_UserProcess+0x58>)
 8010d32:	2203      	movs	r2, #3
 8010d34:	701a      	strb	r2, [r3, #0]
  break;
 8010d36:	e008      	b.n	8010d4a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010d38:	4b07      	ldr	r3, [pc, #28]	@ (8010d58 <USBH_UserProcess+0x58>)
 8010d3a:	2202      	movs	r2, #2
 8010d3c:	701a      	strb	r2, [r3, #0]
  break;
 8010d3e:	e004      	b.n	8010d4a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010d40:	4b05      	ldr	r3, [pc, #20]	@ (8010d58 <USBH_UserProcess+0x58>)
 8010d42:	2201      	movs	r2, #1
 8010d44:	701a      	strb	r2, [r3, #0]
  break;
 8010d46:	e000      	b.n	8010d4a <USBH_UserProcess+0x4a>

  default:
  break;
 8010d48:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010d4a:	bf00      	nop
 8010d4c:	370c      	adds	r7, #12
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d54:	4770      	bx	lr
 8010d56:	bf00      	nop
 8010d58:	200092ec 	.word	0x200092ec

08010d5c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b08a      	sub	sp, #40	@ 0x28
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010d64:	f107 0314 	add.w	r3, r7, #20
 8010d68:	2200      	movs	r2, #0
 8010d6a:	601a      	str	r2, [r3, #0]
 8010d6c:	605a      	str	r2, [r3, #4]
 8010d6e:	609a      	str	r2, [r3, #8]
 8010d70:	60da      	str	r2, [r3, #12]
 8010d72:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	4a24      	ldr	r2, [pc, #144]	@ (8010e0c <HAL_HCD_MspInit+0xb0>)
 8010d7a:	4293      	cmp	r3, r2
 8010d7c:	d141      	bne.n	8010e02 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010d7e:	2300      	movs	r3, #0
 8010d80:	613b      	str	r3, [r7, #16]
 8010d82:	4b23      	ldr	r3, [pc, #140]	@ (8010e10 <HAL_HCD_MspInit+0xb4>)
 8010d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d86:	4a22      	ldr	r2, [pc, #136]	@ (8010e10 <HAL_HCD_MspInit+0xb4>)
 8010d88:	f043 0302 	orr.w	r3, r3, #2
 8010d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8010d8e:	4b20      	ldr	r3, [pc, #128]	@ (8010e10 <HAL_HCD_MspInit+0xb4>)
 8010d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d92:	f003 0302 	and.w	r3, r3, #2
 8010d96:	613b      	str	r3, [r7, #16]
 8010d98:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8010d9a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8010d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010da0:	2302      	movs	r3, #2
 8010da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010da4:	2300      	movs	r3, #0
 8010da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010da8:	2300      	movs	r3, #0
 8010daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8010dac:	230c      	movs	r3, #12
 8010dae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010db0:	f107 0314 	add.w	r3, r7, #20
 8010db4:	4619      	mov	r1, r3
 8010db6:	4817      	ldr	r0, [pc, #92]	@ (8010e14 <HAL_HCD_MspInit+0xb8>)
 8010db8:	f7f5 f8e8 	bl	8005f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8010dbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8010dca:	f107 0314 	add.w	r3, r7, #20
 8010dce:	4619      	mov	r1, r3
 8010dd0:	4810      	ldr	r0, [pc, #64]	@ (8010e14 <HAL_HCD_MspInit+0xb8>)
 8010dd2:	f7f5 f8db 	bl	8005f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	60fb      	str	r3, [r7, #12]
 8010dda:	4b0d      	ldr	r3, [pc, #52]	@ (8010e10 <HAL_HCD_MspInit+0xb4>)
 8010ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010dde:	4a0c      	ldr	r2, [pc, #48]	@ (8010e10 <HAL_HCD_MspInit+0xb4>)
 8010de0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8010de6:	4b0a      	ldr	r3, [pc, #40]	@ (8010e10 <HAL_HCD_MspInit+0xb4>)
 8010de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010dea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010dee:	60fb      	str	r3, [r7, #12]
 8010df0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8010df2:	2200      	movs	r2, #0
 8010df4:	2100      	movs	r1, #0
 8010df6:	204d      	movs	r0, #77	@ 0x4d
 8010df8:	f7f4 f914 	bl	8005024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8010dfc:	204d      	movs	r0, #77	@ 0x4d
 8010dfe:	f7f4 f92d 	bl	800505c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8010e02:	bf00      	nop
 8010e04:	3728      	adds	r7, #40	@ 0x28
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}
 8010e0a:	bf00      	nop
 8010e0c:	40040000 	.word	0x40040000
 8010e10:	40023800 	.word	0x40023800
 8010e14:	40020400 	.word	0x40020400

08010e18 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b082      	sub	sp, #8
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010e26:	4618      	mov	r0, r3
 8010e28:	f7fe ff5d 	bl	800fce6 <USBH_LL_IncTimer>
}
 8010e2c:	bf00      	nop
 8010e2e:	3708      	adds	r7, #8
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b082      	sub	sp, #8
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7fe ff95 	bl	800fd72 <USBH_LL_Connect>
}
 8010e48:	bf00      	nop
 8010e4a:	3708      	adds	r7, #8
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}

08010e50 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b082      	sub	sp, #8
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7fe ff9e 	bl	800fda0 <USBH_LL_Disconnect>
}
 8010e64:	bf00      	nop
 8010e66:	3708      	adds	r7, #8
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}

08010e6c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010e6c:	b480      	push	{r7}
 8010e6e:	b083      	sub	sp, #12
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
 8010e74:	460b      	mov	r3, r1
 8010e76:	70fb      	strb	r3, [r7, #3]
 8010e78:	4613      	mov	r3, r2
 8010e7a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010e7c:	bf00      	nop
 8010e7e:	370c      	adds	r7, #12
 8010e80:	46bd      	mov	sp, r7
 8010e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e86:	4770      	bx	lr

08010e88 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b082      	sub	sp, #8
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7fe ff4f 	bl	800fd3a <USBH_LL_PortEnabled>
}
 8010e9c:	bf00      	nop
 8010e9e:	3708      	adds	r7, #8
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd80      	pop	{r7, pc}

08010ea4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b082      	sub	sp, #8
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7fe ff4f 	bl	800fd56 <USBH_LL_PortDisabled>
}
 8010eb8:	bf00      	nop
 8010eba:	3708      	adds	r7, #8
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}

08010ec0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b082      	sub	sp, #8
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	f893 3d84 	ldrb.w	r3, [r3, #3460]	@ 0xd84
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d132      	bne.n	8010f38 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8010ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8010f44 <USBH_LL_Init+0x84>)
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	4a19      	ldr	r2, [pc, #100]	@ (8010f44 <USBH_LL_Init+0x84>)
 8010ede:	f8c3 2d88 	str.w	r2, [r3, #3464]	@ 0xd88

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8010ee2:	4b18      	ldr	r3, [pc, #96]	@ (8010f44 <USBH_LL_Init+0x84>)
 8010ee4:	4a18      	ldr	r2, [pc, #96]	@ (8010f48 <USBH_LL_Init+0x88>)
 8010ee6:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8010ee8:	4b16      	ldr	r3, [pc, #88]	@ (8010f44 <USBH_LL_Init+0x84>)
 8010eea:	220c      	movs	r2, #12
 8010eec:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8010eee:	4b15      	ldr	r3, [pc, #84]	@ (8010f44 <USBH_LL_Init+0x84>)
 8010ef0:	2201      	movs	r2, #1
 8010ef2:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8010ef4:	4b13      	ldr	r3, [pc, #76]	@ (8010f44 <USBH_LL_Init+0x84>)
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8010efa:	4b12      	ldr	r3, [pc, #72]	@ (8010f44 <USBH_LL_Init+0x84>)
 8010efc:	2202      	movs	r2, #2
 8010efe:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8010f00:	4b10      	ldr	r3, [pc, #64]	@ (8010f44 <USBH_LL_Init+0x84>)
 8010f02:	2200      	movs	r2, #0
 8010f04:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8010f06:	4b0f      	ldr	r3, [pc, #60]	@ (8010f44 <USBH_LL_Init+0x84>)
 8010f08:	2200      	movs	r2, #0
 8010f0a:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8010f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8010f44 <USBH_LL_Init+0x84>)
 8010f0e:	2200      	movs	r2, #0
 8010f10:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8010f12:	4b0c      	ldr	r3, [pc, #48]	@ (8010f44 <USBH_LL_Init+0x84>)
 8010f14:	2200      	movs	r2, #0
 8010f16:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8010f18:	480a      	ldr	r0, [pc, #40]	@ (8010f44 <USBH_LL_Init+0x84>)
 8010f1a:	f7f5 fb08 	bl	800652e <HAL_HCD_Init>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d001      	beq.n	8010f28 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8010f24:	f7f1 fb00 	bl	8002528 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8010f28:	4806      	ldr	r0, [pc, #24]	@ (8010f44 <USBH_LL_Init+0x84>)
 8010f2a:	f7f5 ff69 	bl	8006e00 <HAL_HCD_GetCurrentFrame>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	4619      	mov	r1, r3
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f7fe fec8 	bl	800fcc8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010f38:	2300      	movs	r3, #0
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	3708      	adds	r7, #8
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	bd80      	pop	{r7, pc}
 8010f42:	bf00      	nop
 8010f44:	200092f0 	.word	0x200092f0
 8010f48:	40040000 	.word	0x40040000

08010f4c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b084      	sub	sp, #16
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f54:	2300      	movs	r3, #0
 8010f56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7f5 fed4 	bl	8006d10 <HAL_HCD_Start>
 8010f68:	4603      	mov	r3, r0
 8010f6a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010f6c:	7bfb      	ldrb	r3, [r7, #15]
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f000 f95e 	bl	8011230 <USBH_Get_USB_Status>
 8010f74:	4603      	mov	r3, r0
 8010f76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f78:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	3710      	adds	r7, #16
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}

08010f82 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010f82:	b580      	push	{r7, lr}
 8010f84:	b084      	sub	sp, #16
 8010f86:	af00      	add	r7, sp, #0
 8010f88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010f8e:	2300      	movs	r3, #0
 8010f90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f7f5 fedc 	bl	8006d56 <HAL_HCD_Stop>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010fa2:	7bfb      	ldrb	r3, [r7, #15]
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f000 f943 	bl	8011230 <USBH_Get_USB_Status>
 8010faa:	4603      	mov	r3, r0
 8010fac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010fae:	7bbb      	ldrb	r3, [r7, #14]
}
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	3710      	adds	r7, #16
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	bd80      	pop	{r7, pc}

08010fb8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b084      	sub	sp, #16
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f7f5 ff26 	bl	8006e1c <HAL_HCD_GetCurrentSpeed>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	2b02      	cmp	r3, #2
 8010fd4:	d00c      	beq.n	8010ff0 <USBH_LL_GetSpeed+0x38>
 8010fd6:	2b02      	cmp	r3, #2
 8010fd8:	d80d      	bhi.n	8010ff6 <USBH_LL_GetSpeed+0x3e>
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d002      	beq.n	8010fe4 <USBH_LL_GetSpeed+0x2c>
 8010fde:	2b01      	cmp	r3, #1
 8010fe0:	d003      	beq.n	8010fea <USBH_LL_GetSpeed+0x32>
 8010fe2:	e008      	b.n	8010ff6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	73fb      	strb	r3, [r7, #15]
    break;
 8010fe8:	e008      	b.n	8010ffc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010fea:	2301      	movs	r3, #1
 8010fec:	73fb      	strb	r3, [r7, #15]
    break;
 8010fee:	e005      	b.n	8010ffc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010ff0:	2302      	movs	r3, #2
 8010ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8010ff4:	e002      	b.n	8010ffc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	73fb      	strb	r3, [r7, #15]
    break;
 8010ffa:	bf00      	nop
  }
  return  speed;
 8010ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ffe:	4618      	mov	r0, r3
 8011000:	3710      	adds	r7, #16
 8011002:	46bd      	mov	sp, r7
 8011004:	bd80      	pop	{r7, pc}

08011006 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011006:	b580      	push	{r7, lr}
 8011008:	b084      	sub	sp, #16
 801100a:	af00      	add	r7, sp, #0
 801100c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801100e:	2300      	movs	r3, #0
 8011010:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011012:	2300      	movs	r3, #0
 8011014:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 801101c:	4618      	mov	r0, r3
 801101e:	f7f5 feb7 	bl	8006d90 <HAL_HCD_ResetPort>
 8011022:	4603      	mov	r3, r0
 8011024:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011026:	7bfb      	ldrb	r3, [r7, #15]
 8011028:	4618      	mov	r0, r3
 801102a:	f000 f901 	bl	8011230 <USBH_Get_USB_Status>
 801102e:	4603      	mov	r3, r0
 8011030:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011032:	7bbb      	ldrb	r3, [r7, #14]
}
 8011034:	4618      	mov	r0, r3
 8011036:	3710      	adds	r7, #16
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}

0801103c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b082      	sub	sp, #8
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
 8011044:	460b      	mov	r3, r1
 8011046:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 801104e:	78fa      	ldrb	r2, [r7, #3]
 8011050:	4611      	mov	r1, r2
 8011052:	4618      	mov	r0, r3
 8011054:	f7f5 febf 	bl	8006dd6 <HAL_HCD_HC_GetXferCount>
 8011058:	4603      	mov	r3, r0
}
 801105a:	4618      	mov	r0, r3
 801105c:	3708      	adds	r7, #8
 801105e:	46bd      	mov	sp, r7
 8011060:	bd80      	pop	{r7, pc}

08011062 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011062:	b590      	push	{r4, r7, lr}
 8011064:	b089      	sub	sp, #36	@ 0x24
 8011066:	af04      	add	r7, sp, #16
 8011068:	6078      	str	r0, [r7, #4]
 801106a:	4608      	mov	r0, r1
 801106c:	4611      	mov	r1, r2
 801106e:	461a      	mov	r2, r3
 8011070:	4603      	mov	r3, r0
 8011072:	70fb      	strb	r3, [r7, #3]
 8011074:	460b      	mov	r3, r1
 8011076:	70bb      	strb	r3, [r7, #2]
 8011078:	4613      	mov	r3, r2
 801107a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801107c:	2300      	movs	r3, #0
 801107e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011080:	2300      	movs	r3, #0
 8011082:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8d3 0d88 	ldr.w	r0, [r3, #3464]	@ 0xd88
 801108a:	787c      	ldrb	r4, [r7, #1]
 801108c:	78ba      	ldrb	r2, [r7, #2]
 801108e:	78f9      	ldrb	r1, [r7, #3]
 8011090:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011092:	9302      	str	r3, [sp, #8]
 8011094:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011098:	9301      	str	r3, [sp, #4]
 801109a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801109e:	9300      	str	r3, [sp, #0]
 80110a0:	4623      	mov	r3, r4
 80110a2:	f7f5 faab 	bl	80065fc <HAL_HCD_HC_Init>
 80110a6:	4603      	mov	r3, r0
 80110a8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80110aa:	7bfb      	ldrb	r3, [r7, #15]
 80110ac:	4618      	mov	r0, r3
 80110ae:	f000 f8bf 	bl	8011230 <USBH_Get_USB_Status>
 80110b2:	4603      	mov	r3, r0
 80110b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80110b8:	4618      	mov	r0, r3
 80110ba:	3714      	adds	r7, #20
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd90      	pop	{r4, r7, pc}

080110c0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b084      	sub	sp, #16
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
 80110c8:	460b      	mov	r3, r1
 80110ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110cc:	2300      	movs	r3, #0
 80110ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80110d0:	2300      	movs	r3, #0
 80110d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 80110da:	78fa      	ldrb	r2, [r7, #3]
 80110dc:	4611      	mov	r1, r2
 80110de:	4618      	mov	r0, r3
 80110e0:	f7f5 fb44 	bl	800676c <HAL_HCD_HC_Halt>
 80110e4:	4603      	mov	r3, r0
 80110e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80110e8:	7bfb      	ldrb	r3, [r7, #15]
 80110ea:	4618      	mov	r0, r3
 80110ec:	f000 f8a0 	bl	8011230 <USBH_Get_USB_Status>
 80110f0:	4603      	mov	r3, r0
 80110f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	3710      	adds	r7, #16
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}

080110fe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80110fe:	b590      	push	{r4, r7, lr}
 8011100:	b089      	sub	sp, #36	@ 0x24
 8011102:	af04      	add	r7, sp, #16
 8011104:	6078      	str	r0, [r7, #4]
 8011106:	4608      	mov	r0, r1
 8011108:	4611      	mov	r1, r2
 801110a:	461a      	mov	r2, r3
 801110c:	4603      	mov	r3, r0
 801110e:	70fb      	strb	r3, [r7, #3]
 8011110:	460b      	mov	r3, r1
 8011112:	70bb      	strb	r3, [r7, #2]
 8011114:	4613      	mov	r3, r2
 8011116:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011118:	2300      	movs	r3, #0
 801111a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801111c:	2300      	movs	r3, #0
 801111e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f8d3 0d88 	ldr.w	r0, [r3, #3464]	@ 0xd88
 8011126:	787c      	ldrb	r4, [r7, #1]
 8011128:	78ba      	ldrb	r2, [r7, #2]
 801112a:	78f9      	ldrb	r1, [r7, #3]
 801112c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011130:	9303      	str	r3, [sp, #12]
 8011132:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011134:	9302      	str	r3, [sp, #8]
 8011136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011138:	9301      	str	r3, [sp, #4]
 801113a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801113e:	9300      	str	r3, [sp, #0]
 8011140:	4623      	mov	r3, r4
 8011142:	f7f5 fb37 	bl	80067b4 <HAL_HCD_HC_SubmitRequest>
 8011146:	4603      	mov	r3, r0
 8011148:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801114a:	7bfb      	ldrb	r3, [r7, #15]
 801114c:	4618      	mov	r0, r3
 801114e:	f000 f86f 	bl	8011230 <USBH_Get_USB_Status>
 8011152:	4603      	mov	r3, r0
 8011154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011156:	7bbb      	ldrb	r3, [r7, #14]
}
 8011158:	4618      	mov	r0, r3
 801115a:	3714      	adds	r7, #20
 801115c:	46bd      	mov	sp, r7
 801115e:	bd90      	pop	{r4, r7, pc}

08011160 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b082      	sub	sp, #8
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
 8011168:	460b      	mov	r3, r1
 801116a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 8011172:	78fa      	ldrb	r2, [r7, #3]
 8011174:	4611      	mov	r1, r2
 8011176:	4618      	mov	r0, r3
 8011178:	f7f5 fe18 	bl	8006dac <HAL_HCD_HC_GetURBState>
 801117c:	4603      	mov	r3, r0
}
 801117e:	4618      	mov	r0, r3
 8011180:	3708      	adds	r7, #8
 8011182:	46bd      	mov	sp, r7
 8011184:	bd80      	pop	{r7, pc}

08011186 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8011186:	b580      	push	{r7, lr}
 8011188:	b082      	sub	sp, #8
 801118a:	af00      	add	r7, sp, #0
 801118c:	6078      	str	r0, [r7, #4]
 801118e:	460b      	mov	r3, r1
 8011190:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	f893 3d84 	ldrb.w	r3, [r3, #3460]	@ 0xd84
 8011198:	2b00      	cmp	r3, #0
 801119a:	d103      	bne.n	80111a4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 801119c:	78fb      	ldrb	r3, [r7, #3]
 801119e:	4618      	mov	r0, r3
 80111a0:	f000 f872 	bl	8011288 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80111a4:	20c8      	movs	r0, #200	@ 0xc8
 80111a6:	f7f3 fe61 	bl	8004e6c <HAL_Delay>
  return USBH_OK;
 80111aa:	2300      	movs	r3, #0
}
 80111ac:	4618      	mov	r0, r3
 80111ae:	3708      	adds	r7, #8
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}

080111b4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80111b4:	b480      	push	{r7}
 80111b6:	b085      	sub	sp, #20
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
 80111bc:	460b      	mov	r3, r1
 80111be:	70fb      	strb	r3, [r7, #3]
 80111c0:	4613      	mov	r3, r2
 80111c2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 80111ca:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80111cc:	78fa      	ldrb	r2, [r7, #3]
 80111ce:	68f9      	ldr	r1, [r7, #12]
 80111d0:	4613      	mov	r3, r2
 80111d2:	011b      	lsls	r3, r3, #4
 80111d4:	1a9b      	subs	r3, r3, r2
 80111d6:	009b      	lsls	r3, r3, #2
 80111d8:	440b      	add	r3, r1
 80111da:	3317      	adds	r3, #23
 80111dc:	781b      	ldrb	r3, [r3, #0]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d00a      	beq.n	80111f8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80111e2:	78fa      	ldrb	r2, [r7, #3]
 80111e4:	68f9      	ldr	r1, [r7, #12]
 80111e6:	4613      	mov	r3, r2
 80111e8:	011b      	lsls	r3, r3, #4
 80111ea:	1a9b      	subs	r3, r3, r2
 80111ec:	009b      	lsls	r3, r3, #2
 80111ee:	440b      	add	r3, r1
 80111f0:	333c      	adds	r3, #60	@ 0x3c
 80111f2:	78ba      	ldrb	r2, [r7, #2]
 80111f4:	701a      	strb	r2, [r3, #0]
 80111f6:	e009      	b.n	801120c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80111f8:	78fa      	ldrb	r2, [r7, #3]
 80111fa:	68f9      	ldr	r1, [r7, #12]
 80111fc:	4613      	mov	r3, r2
 80111fe:	011b      	lsls	r3, r3, #4
 8011200:	1a9b      	subs	r3, r3, r2
 8011202:	009b      	lsls	r3, r3, #2
 8011204:	440b      	add	r3, r1
 8011206:	333d      	adds	r3, #61	@ 0x3d
 8011208:	78ba      	ldrb	r2, [r7, #2]
 801120a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801120c:	2300      	movs	r3, #0
}
 801120e:	4618      	mov	r0, r3
 8011210:	3714      	adds	r7, #20
 8011212:	46bd      	mov	sp, r7
 8011214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011218:	4770      	bx	lr

0801121a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801121a:	b580      	push	{r7, lr}
 801121c:	b082      	sub	sp, #8
 801121e:	af00      	add	r7, sp, #0
 8011220:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011222:	6878      	ldr	r0, [r7, #4]
 8011224:	f7f3 fe22 	bl	8004e6c <HAL_Delay>
}
 8011228:	bf00      	nop
 801122a:	3708      	adds	r7, #8
 801122c:	46bd      	mov	sp, r7
 801122e:	bd80      	pop	{r7, pc}

08011230 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011230:	b480      	push	{r7}
 8011232:	b085      	sub	sp, #20
 8011234:	af00      	add	r7, sp, #0
 8011236:	4603      	mov	r3, r0
 8011238:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801123a:	2300      	movs	r3, #0
 801123c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801123e:	79fb      	ldrb	r3, [r7, #7]
 8011240:	2b03      	cmp	r3, #3
 8011242:	d817      	bhi.n	8011274 <USBH_Get_USB_Status+0x44>
 8011244:	a201      	add	r2, pc, #4	@ (adr r2, 801124c <USBH_Get_USB_Status+0x1c>)
 8011246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801124a:	bf00      	nop
 801124c:	0801125d 	.word	0x0801125d
 8011250:	08011263 	.word	0x08011263
 8011254:	08011269 	.word	0x08011269
 8011258:	0801126f 	.word	0x0801126f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801125c:	2300      	movs	r3, #0
 801125e:	73fb      	strb	r3, [r7, #15]
    break;
 8011260:	e00b      	b.n	801127a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011262:	2302      	movs	r3, #2
 8011264:	73fb      	strb	r3, [r7, #15]
    break;
 8011266:	e008      	b.n	801127a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011268:	2301      	movs	r3, #1
 801126a:	73fb      	strb	r3, [r7, #15]
    break;
 801126c:	e005      	b.n	801127a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801126e:	2302      	movs	r3, #2
 8011270:	73fb      	strb	r3, [r7, #15]
    break;
 8011272:	e002      	b.n	801127a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011274:	2302      	movs	r3, #2
 8011276:	73fb      	strb	r3, [r7, #15]
    break;
 8011278:	bf00      	nop
  }
  return usb_status;
 801127a:	7bfb      	ldrb	r3, [r7, #15]
}
 801127c:	4618      	mov	r0, r3
 801127e:	3714      	adds	r7, #20
 8011280:	46bd      	mov	sp, r7
 8011282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011286:	4770      	bx	lr

08011288 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b084      	sub	sp, #16
 801128c:	af00      	add	r7, sp, #0
 801128e:	4603      	mov	r3, r0
 8011290:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8011292:	79fb      	ldrb	r3, [r7, #7]
 8011294:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8011296:	79fb      	ldrb	r3, [r7, #7]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d102      	bne.n	80112a2 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 801129c:	2301      	movs	r3, #1
 801129e:	73fb      	strb	r3, [r7, #15]
 80112a0:	e001      	b.n	80112a6 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80112a2:	2300      	movs	r3, #0
 80112a4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 80112a6:	7bfb      	ldrb	r3, [r7, #15]
 80112a8:	461a      	mov	r2, r3
 80112aa:	2110      	movs	r1, #16
 80112ac:	4803      	ldr	r0, [pc, #12]	@ (80112bc <MX_DriverVbusHS+0x34>)
 80112ae:	f7f5 f925 	bl	80064fc <HAL_GPIO_WritePin>
}
 80112b2:	bf00      	nop
 80112b4:	3710      	adds	r7, #16
 80112b6:	46bd      	mov	sp, r7
 80112b8:	bd80      	pop	{r7, pc}
 80112ba:	bf00      	nop
 80112bc:	40020800 	.word	0x40020800

080112c0 <malloc>:
 80112c0:	4b02      	ldr	r3, [pc, #8]	@ (80112cc <malloc+0xc>)
 80112c2:	4601      	mov	r1, r0
 80112c4:	6818      	ldr	r0, [r3, #0]
 80112c6:	f000 b82d 	b.w	8011324 <_malloc_r>
 80112ca:	bf00      	nop
 80112cc:	20000220 	.word	0x20000220

080112d0 <free>:
 80112d0:	4b02      	ldr	r3, [pc, #8]	@ (80112dc <free+0xc>)
 80112d2:	4601      	mov	r1, r0
 80112d4:	6818      	ldr	r0, [r3, #0]
 80112d6:	f000 bb77 	b.w	80119c8 <_free_r>
 80112da:	bf00      	nop
 80112dc:	20000220 	.word	0x20000220

080112e0 <sbrk_aligned>:
 80112e0:	b570      	push	{r4, r5, r6, lr}
 80112e2:	4e0f      	ldr	r6, [pc, #60]	@ (8011320 <sbrk_aligned+0x40>)
 80112e4:	460c      	mov	r4, r1
 80112e6:	6831      	ldr	r1, [r6, #0]
 80112e8:	4605      	mov	r5, r0
 80112ea:	b911      	cbnz	r1, 80112f2 <sbrk_aligned+0x12>
 80112ec:	f000 fb14 	bl	8011918 <_sbrk_r>
 80112f0:	6030      	str	r0, [r6, #0]
 80112f2:	4621      	mov	r1, r4
 80112f4:	4628      	mov	r0, r5
 80112f6:	f000 fb0f 	bl	8011918 <_sbrk_r>
 80112fa:	1c43      	adds	r3, r0, #1
 80112fc:	d103      	bne.n	8011306 <sbrk_aligned+0x26>
 80112fe:	f04f 34ff 	mov.w	r4, #4294967295
 8011302:	4620      	mov	r0, r4
 8011304:	bd70      	pop	{r4, r5, r6, pc}
 8011306:	1cc4      	adds	r4, r0, #3
 8011308:	f024 0403 	bic.w	r4, r4, #3
 801130c:	42a0      	cmp	r0, r4
 801130e:	d0f8      	beq.n	8011302 <sbrk_aligned+0x22>
 8011310:	1a21      	subs	r1, r4, r0
 8011312:	4628      	mov	r0, r5
 8011314:	f000 fb00 	bl	8011918 <_sbrk_r>
 8011318:	3001      	adds	r0, #1
 801131a:	d1f2      	bne.n	8011302 <sbrk_aligned+0x22>
 801131c:	e7ef      	b.n	80112fe <sbrk_aligned+0x1e>
 801131e:	bf00      	nop
 8011320:	200096d0 	.word	0x200096d0

08011324 <_malloc_r>:
 8011324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011328:	1ccd      	adds	r5, r1, #3
 801132a:	f025 0503 	bic.w	r5, r5, #3
 801132e:	3508      	adds	r5, #8
 8011330:	2d0c      	cmp	r5, #12
 8011332:	bf38      	it	cc
 8011334:	250c      	movcc	r5, #12
 8011336:	2d00      	cmp	r5, #0
 8011338:	4606      	mov	r6, r0
 801133a:	db01      	blt.n	8011340 <_malloc_r+0x1c>
 801133c:	42a9      	cmp	r1, r5
 801133e:	d904      	bls.n	801134a <_malloc_r+0x26>
 8011340:	230c      	movs	r3, #12
 8011342:	6033      	str	r3, [r6, #0]
 8011344:	2000      	movs	r0, #0
 8011346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801134a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011420 <_malloc_r+0xfc>
 801134e:	f000 f869 	bl	8011424 <__malloc_lock>
 8011352:	f8d8 3000 	ldr.w	r3, [r8]
 8011356:	461c      	mov	r4, r3
 8011358:	bb44      	cbnz	r4, 80113ac <_malloc_r+0x88>
 801135a:	4629      	mov	r1, r5
 801135c:	4630      	mov	r0, r6
 801135e:	f7ff ffbf 	bl	80112e0 <sbrk_aligned>
 8011362:	1c43      	adds	r3, r0, #1
 8011364:	4604      	mov	r4, r0
 8011366:	d158      	bne.n	801141a <_malloc_r+0xf6>
 8011368:	f8d8 4000 	ldr.w	r4, [r8]
 801136c:	4627      	mov	r7, r4
 801136e:	2f00      	cmp	r7, #0
 8011370:	d143      	bne.n	80113fa <_malloc_r+0xd6>
 8011372:	2c00      	cmp	r4, #0
 8011374:	d04b      	beq.n	801140e <_malloc_r+0xea>
 8011376:	6823      	ldr	r3, [r4, #0]
 8011378:	4639      	mov	r1, r7
 801137a:	4630      	mov	r0, r6
 801137c:	eb04 0903 	add.w	r9, r4, r3
 8011380:	f000 faca 	bl	8011918 <_sbrk_r>
 8011384:	4581      	cmp	r9, r0
 8011386:	d142      	bne.n	801140e <_malloc_r+0xea>
 8011388:	6821      	ldr	r1, [r4, #0]
 801138a:	1a6d      	subs	r5, r5, r1
 801138c:	4629      	mov	r1, r5
 801138e:	4630      	mov	r0, r6
 8011390:	f7ff ffa6 	bl	80112e0 <sbrk_aligned>
 8011394:	3001      	adds	r0, #1
 8011396:	d03a      	beq.n	801140e <_malloc_r+0xea>
 8011398:	6823      	ldr	r3, [r4, #0]
 801139a:	442b      	add	r3, r5
 801139c:	6023      	str	r3, [r4, #0]
 801139e:	f8d8 3000 	ldr.w	r3, [r8]
 80113a2:	685a      	ldr	r2, [r3, #4]
 80113a4:	bb62      	cbnz	r2, 8011400 <_malloc_r+0xdc>
 80113a6:	f8c8 7000 	str.w	r7, [r8]
 80113aa:	e00f      	b.n	80113cc <_malloc_r+0xa8>
 80113ac:	6822      	ldr	r2, [r4, #0]
 80113ae:	1b52      	subs	r2, r2, r5
 80113b0:	d420      	bmi.n	80113f4 <_malloc_r+0xd0>
 80113b2:	2a0b      	cmp	r2, #11
 80113b4:	d917      	bls.n	80113e6 <_malloc_r+0xc2>
 80113b6:	1961      	adds	r1, r4, r5
 80113b8:	42a3      	cmp	r3, r4
 80113ba:	6025      	str	r5, [r4, #0]
 80113bc:	bf18      	it	ne
 80113be:	6059      	strne	r1, [r3, #4]
 80113c0:	6863      	ldr	r3, [r4, #4]
 80113c2:	bf08      	it	eq
 80113c4:	f8c8 1000 	streq.w	r1, [r8]
 80113c8:	5162      	str	r2, [r4, r5]
 80113ca:	604b      	str	r3, [r1, #4]
 80113cc:	4630      	mov	r0, r6
 80113ce:	f000 f82f 	bl	8011430 <__malloc_unlock>
 80113d2:	f104 000b 	add.w	r0, r4, #11
 80113d6:	1d23      	adds	r3, r4, #4
 80113d8:	f020 0007 	bic.w	r0, r0, #7
 80113dc:	1ac2      	subs	r2, r0, r3
 80113de:	bf1c      	itt	ne
 80113e0:	1a1b      	subne	r3, r3, r0
 80113e2:	50a3      	strne	r3, [r4, r2]
 80113e4:	e7af      	b.n	8011346 <_malloc_r+0x22>
 80113e6:	6862      	ldr	r2, [r4, #4]
 80113e8:	42a3      	cmp	r3, r4
 80113ea:	bf0c      	ite	eq
 80113ec:	f8c8 2000 	streq.w	r2, [r8]
 80113f0:	605a      	strne	r2, [r3, #4]
 80113f2:	e7eb      	b.n	80113cc <_malloc_r+0xa8>
 80113f4:	4623      	mov	r3, r4
 80113f6:	6864      	ldr	r4, [r4, #4]
 80113f8:	e7ae      	b.n	8011358 <_malloc_r+0x34>
 80113fa:	463c      	mov	r4, r7
 80113fc:	687f      	ldr	r7, [r7, #4]
 80113fe:	e7b6      	b.n	801136e <_malloc_r+0x4a>
 8011400:	461a      	mov	r2, r3
 8011402:	685b      	ldr	r3, [r3, #4]
 8011404:	42a3      	cmp	r3, r4
 8011406:	d1fb      	bne.n	8011400 <_malloc_r+0xdc>
 8011408:	2300      	movs	r3, #0
 801140a:	6053      	str	r3, [r2, #4]
 801140c:	e7de      	b.n	80113cc <_malloc_r+0xa8>
 801140e:	230c      	movs	r3, #12
 8011410:	6033      	str	r3, [r6, #0]
 8011412:	4630      	mov	r0, r6
 8011414:	f000 f80c 	bl	8011430 <__malloc_unlock>
 8011418:	e794      	b.n	8011344 <_malloc_r+0x20>
 801141a:	6005      	str	r5, [r0, #0]
 801141c:	e7d6      	b.n	80113cc <_malloc_r+0xa8>
 801141e:	bf00      	nop
 8011420:	200096d4 	.word	0x200096d4

08011424 <__malloc_lock>:
 8011424:	4801      	ldr	r0, [pc, #4]	@ (801142c <__malloc_lock+0x8>)
 8011426:	f000 bac4 	b.w	80119b2 <__retarget_lock_acquire_recursive>
 801142a:	bf00      	nop
 801142c:	20009818 	.word	0x20009818

08011430 <__malloc_unlock>:
 8011430:	4801      	ldr	r0, [pc, #4]	@ (8011438 <__malloc_unlock+0x8>)
 8011432:	f000 babf 	b.w	80119b4 <__retarget_lock_release_recursive>
 8011436:	bf00      	nop
 8011438:	20009818 	.word	0x20009818

0801143c <std>:
 801143c:	2300      	movs	r3, #0
 801143e:	b510      	push	{r4, lr}
 8011440:	4604      	mov	r4, r0
 8011442:	e9c0 3300 	strd	r3, r3, [r0]
 8011446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801144a:	6083      	str	r3, [r0, #8]
 801144c:	8181      	strh	r1, [r0, #12]
 801144e:	6643      	str	r3, [r0, #100]	@ 0x64
 8011450:	81c2      	strh	r2, [r0, #14]
 8011452:	6183      	str	r3, [r0, #24]
 8011454:	4619      	mov	r1, r3
 8011456:	2208      	movs	r2, #8
 8011458:	305c      	adds	r0, #92	@ 0x5c
 801145a:	f000 fa21 	bl	80118a0 <memset>
 801145e:	4b0d      	ldr	r3, [pc, #52]	@ (8011494 <std+0x58>)
 8011460:	6263      	str	r3, [r4, #36]	@ 0x24
 8011462:	4b0d      	ldr	r3, [pc, #52]	@ (8011498 <std+0x5c>)
 8011464:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011466:	4b0d      	ldr	r3, [pc, #52]	@ (801149c <std+0x60>)
 8011468:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801146a:	4b0d      	ldr	r3, [pc, #52]	@ (80114a0 <std+0x64>)
 801146c:	6323      	str	r3, [r4, #48]	@ 0x30
 801146e:	4b0d      	ldr	r3, [pc, #52]	@ (80114a4 <std+0x68>)
 8011470:	6224      	str	r4, [r4, #32]
 8011472:	429c      	cmp	r4, r3
 8011474:	d006      	beq.n	8011484 <std+0x48>
 8011476:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801147a:	4294      	cmp	r4, r2
 801147c:	d002      	beq.n	8011484 <std+0x48>
 801147e:	33d0      	adds	r3, #208	@ 0xd0
 8011480:	429c      	cmp	r4, r3
 8011482:	d105      	bne.n	8011490 <std+0x54>
 8011484:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801148c:	f000 ba90 	b.w	80119b0 <__retarget_lock_init_recursive>
 8011490:	bd10      	pop	{r4, pc}
 8011492:	bf00      	nop
 8011494:	080116f1 	.word	0x080116f1
 8011498:	08011713 	.word	0x08011713
 801149c:	0801174b 	.word	0x0801174b
 80114a0:	0801176f 	.word	0x0801176f
 80114a4:	200096d8 	.word	0x200096d8

080114a8 <stdio_exit_handler>:
 80114a8:	4a02      	ldr	r2, [pc, #8]	@ (80114b4 <stdio_exit_handler+0xc>)
 80114aa:	4903      	ldr	r1, [pc, #12]	@ (80114b8 <stdio_exit_handler+0x10>)
 80114ac:	4803      	ldr	r0, [pc, #12]	@ (80114bc <stdio_exit_handler+0x14>)
 80114ae:	f000 b869 	b.w	8011584 <_fwalk_sglue>
 80114b2:	bf00      	nop
 80114b4:	20000214 	.word	0x20000214
 80114b8:	080123b5 	.word	0x080123b5
 80114bc:	20000224 	.word	0x20000224

080114c0 <cleanup_stdio>:
 80114c0:	6841      	ldr	r1, [r0, #4]
 80114c2:	4b0c      	ldr	r3, [pc, #48]	@ (80114f4 <cleanup_stdio+0x34>)
 80114c4:	4299      	cmp	r1, r3
 80114c6:	b510      	push	{r4, lr}
 80114c8:	4604      	mov	r4, r0
 80114ca:	d001      	beq.n	80114d0 <cleanup_stdio+0x10>
 80114cc:	f000 ff72 	bl	80123b4 <_fflush_r>
 80114d0:	68a1      	ldr	r1, [r4, #8]
 80114d2:	4b09      	ldr	r3, [pc, #36]	@ (80114f8 <cleanup_stdio+0x38>)
 80114d4:	4299      	cmp	r1, r3
 80114d6:	d002      	beq.n	80114de <cleanup_stdio+0x1e>
 80114d8:	4620      	mov	r0, r4
 80114da:	f000 ff6b 	bl	80123b4 <_fflush_r>
 80114de:	68e1      	ldr	r1, [r4, #12]
 80114e0:	4b06      	ldr	r3, [pc, #24]	@ (80114fc <cleanup_stdio+0x3c>)
 80114e2:	4299      	cmp	r1, r3
 80114e4:	d004      	beq.n	80114f0 <cleanup_stdio+0x30>
 80114e6:	4620      	mov	r0, r4
 80114e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114ec:	f000 bf62 	b.w	80123b4 <_fflush_r>
 80114f0:	bd10      	pop	{r4, pc}
 80114f2:	bf00      	nop
 80114f4:	200096d8 	.word	0x200096d8
 80114f8:	20009740 	.word	0x20009740
 80114fc:	200097a8 	.word	0x200097a8

08011500 <global_stdio_init.part.0>:
 8011500:	b510      	push	{r4, lr}
 8011502:	4b0b      	ldr	r3, [pc, #44]	@ (8011530 <global_stdio_init.part.0+0x30>)
 8011504:	4c0b      	ldr	r4, [pc, #44]	@ (8011534 <global_stdio_init.part.0+0x34>)
 8011506:	4a0c      	ldr	r2, [pc, #48]	@ (8011538 <global_stdio_init.part.0+0x38>)
 8011508:	601a      	str	r2, [r3, #0]
 801150a:	4620      	mov	r0, r4
 801150c:	2200      	movs	r2, #0
 801150e:	2104      	movs	r1, #4
 8011510:	f7ff ff94 	bl	801143c <std>
 8011514:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011518:	2201      	movs	r2, #1
 801151a:	2109      	movs	r1, #9
 801151c:	f7ff ff8e 	bl	801143c <std>
 8011520:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011524:	2202      	movs	r2, #2
 8011526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801152a:	2112      	movs	r1, #18
 801152c:	f7ff bf86 	b.w	801143c <std>
 8011530:	20009810 	.word	0x20009810
 8011534:	200096d8 	.word	0x200096d8
 8011538:	080114a9 	.word	0x080114a9

0801153c <__sfp_lock_acquire>:
 801153c:	4801      	ldr	r0, [pc, #4]	@ (8011544 <__sfp_lock_acquire+0x8>)
 801153e:	f000 ba38 	b.w	80119b2 <__retarget_lock_acquire_recursive>
 8011542:	bf00      	nop
 8011544:	20009819 	.word	0x20009819

08011548 <__sfp_lock_release>:
 8011548:	4801      	ldr	r0, [pc, #4]	@ (8011550 <__sfp_lock_release+0x8>)
 801154a:	f000 ba33 	b.w	80119b4 <__retarget_lock_release_recursive>
 801154e:	bf00      	nop
 8011550:	20009819 	.word	0x20009819

08011554 <__sinit>:
 8011554:	b510      	push	{r4, lr}
 8011556:	4604      	mov	r4, r0
 8011558:	f7ff fff0 	bl	801153c <__sfp_lock_acquire>
 801155c:	6a23      	ldr	r3, [r4, #32]
 801155e:	b11b      	cbz	r3, 8011568 <__sinit+0x14>
 8011560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011564:	f7ff bff0 	b.w	8011548 <__sfp_lock_release>
 8011568:	4b04      	ldr	r3, [pc, #16]	@ (801157c <__sinit+0x28>)
 801156a:	6223      	str	r3, [r4, #32]
 801156c:	4b04      	ldr	r3, [pc, #16]	@ (8011580 <__sinit+0x2c>)
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d1f5      	bne.n	8011560 <__sinit+0xc>
 8011574:	f7ff ffc4 	bl	8011500 <global_stdio_init.part.0>
 8011578:	e7f2      	b.n	8011560 <__sinit+0xc>
 801157a:	bf00      	nop
 801157c:	080114c1 	.word	0x080114c1
 8011580:	20009810 	.word	0x20009810

08011584 <_fwalk_sglue>:
 8011584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011588:	4607      	mov	r7, r0
 801158a:	4688      	mov	r8, r1
 801158c:	4614      	mov	r4, r2
 801158e:	2600      	movs	r6, #0
 8011590:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011594:	f1b9 0901 	subs.w	r9, r9, #1
 8011598:	d505      	bpl.n	80115a6 <_fwalk_sglue+0x22>
 801159a:	6824      	ldr	r4, [r4, #0]
 801159c:	2c00      	cmp	r4, #0
 801159e:	d1f7      	bne.n	8011590 <_fwalk_sglue+0xc>
 80115a0:	4630      	mov	r0, r6
 80115a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115a6:	89ab      	ldrh	r3, [r5, #12]
 80115a8:	2b01      	cmp	r3, #1
 80115aa:	d907      	bls.n	80115bc <_fwalk_sglue+0x38>
 80115ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80115b0:	3301      	adds	r3, #1
 80115b2:	d003      	beq.n	80115bc <_fwalk_sglue+0x38>
 80115b4:	4629      	mov	r1, r5
 80115b6:	4638      	mov	r0, r7
 80115b8:	47c0      	blx	r8
 80115ba:	4306      	orrs	r6, r0
 80115bc:	3568      	adds	r5, #104	@ 0x68
 80115be:	e7e9      	b.n	8011594 <_fwalk_sglue+0x10>

080115c0 <iprintf>:
 80115c0:	b40f      	push	{r0, r1, r2, r3}
 80115c2:	b507      	push	{r0, r1, r2, lr}
 80115c4:	4906      	ldr	r1, [pc, #24]	@ (80115e0 <iprintf+0x20>)
 80115c6:	ab04      	add	r3, sp, #16
 80115c8:	6808      	ldr	r0, [r1, #0]
 80115ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80115ce:	6881      	ldr	r1, [r0, #8]
 80115d0:	9301      	str	r3, [sp, #4]
 80115d2:	f000 fbc5 	bl	8011d60 <_vfiprintf_r>
 80115d6:	b003      	add	sp, #12
 80115d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80115dc:	b004      	add	sp, #16
 80115de:	4770      	bx	lr
 80115e0:	20000220 	.word	0x20000220

080115e4 <putchar>:
 80115e4:	4b02      	ldr	r3, [pc, #8]	@ (80115f0 <putchar+0xc>)
 80115e6:	4601      	mov	r1, r0
 80115e8:	6818      	ldr	r0, [r3, #0]
 80115ea:	6882      	ldr	r2, [r0, #8]
 80115ec:	f000 bf6c 	b.w	80124c8 <_putc_r>
 80115f0:	20000220 	.word	0x20000220

080115f4 <_puts_r>:
 80115f4:	6a03      	ldr	r3, [r0, #32]
 80115f6:	b570      	push	{r4, r5, r6, lr}
 80115f8:	6884      	ldr	r4, [r0, #8]
 80115fa:	4605      	mov	r5, r0
 80115fc:	460e      	mov	r6, r1
 80115fe:	b90b      	cbnz	r3, 8011604 <_puts_r+0x10>
 8011600:	f7ff ffa8 	bl	8011554 <__sinit>
 8011604:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011606:	07db      	lsls	r3, r3, #31
 8011608:	d405      	bmi.n	8011616 <_puts_r+0x22>
 801160a:	89a3      	ldrh	r3, [r4, #12]
 801160c:	0598      	lsls	r0, r3, #22
 801160e:	d402      	bmi.n	8011616 <_puts_r+0x22>
 8011610:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011612:	f000 f9ce 	bl	80119b2 <__retarget_lock_acquire_recursive>
 8011616:	89a3      	ldrh	r3, [r4, #12]
 8011618:	0719      	lsls	r1, r3, #28
 801161a:	d502      	bpl.n	8011622 <_puts_r+0x2e>
 801161c:	6923      	ldr	r3, [r4, #16]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d135      	bne.n	801168e <_puts_r+0x9a>
 8011622:	4621      	mov	r1, r4
 8011624:	4628      	mov	r0, r5
 8011626:	f000 f8e5 	bl	80117f4 <__swsetup_r>
 801162a:	b380      	cbz	r0, 801168e <_puts_r+0x9a>
 801162c:	f04f 35ff 	mov.w	r5, #4294967295
 8011630:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011632:	07da      	lsls	r2, r3, #31
 8011634:	d405      	bmi.n	8011642 <_puts_r+0x4e>
 8011636:	89a3      	ldrh	r3, [r4, #12]
 8011638:	059b      	lsls	r3, r3, #22
 801163a:	d402      	bmi.n	8011642 <_puts_r+0x4e>
 801163c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801163e:	f000 f9b9 	bl	80119b4 <__retarget_lock_release_recursive>
 8011642:	4628      	mov	r0, r5
 8011644:	bd70      	pop	{r4, r5, r6, pc}
 8011646:	2b00      	cmp	r3, #0
 8011648:	da04      	bge.n	8011654 <_puts_r+0x60>
 801164a:	69a2      	ldr	r2, [r4, #24]
 801164c:	429a      	cmp	r2, r3
 801164e:	dc17      	bgt.n	8011680 <_puts_r+0x8c>
 8011650:	290a      	cmp	r1, #10
 8011652:	d015      	beq.n	8011680 <_puts_r+0x8c>
 8011654:	6823      	ldr	r3, [r4, #0]
 8011656:	1c5a      	adds	r2, r3, #1
 8011658:	6022      	str	r2, [r4, #0]
 801165a:	7019      	strb	r1, [r3, #0]
 801165c:	68a3      	ldr	r3, [r4, #8]
 801165e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011662:	3b01      	subs	r3, #1
 8011664:	60a3      	str	r3, [r4, #8]
 8011666:	2900      	cmp	r1, #0
 8011668:	d1ed      	bne.n	8011646 <_puts_r+0x52>
 801166a:	2b00      	cmp	r3, #0
 801166c:	da11      	bge.n	8011692 <_puts_r+0x9e>
 801166e:	4622      	mov	r2, r4
 8011670:	210a      	movs	r1, #10
 8011672:	4628      	mov	r0, r5
 8011674:	f000 f87f 	bl	8011776 <__swbuf_r>
 8011678:	3001      	adds	r0, #1
 801167a:	d0d7      	beq.n	801162c <_puts_r+0x38>
 801167c:	250a      	movs	r5, #10
 801167e:	e7d7      	b.n	8011630 <_puts_r+0x3c>
 8011680:	4622      	mov	r2, r4
 8011682:	4628      	mov	r0, r5
 8011684:	f000 f877 	bl	8011776 <__swbuf_r>
 8011688:	3001      	adds	r0, #1
 801168a:	d1e7      	bne.n	801165c <_puts_r+0x68>
 801168c:	e7ce      	b.n	801162c <_puts_r+0x38>
 801168e:	3e01      	subs	r6, #1
 8011690:	e7e4      	b.n	801165c <_puts_r+0x68>
 8011692:	6823      	ldr	r3, [r4, #0]
 8011694:	1c5a      	adds	r2, r3, #1
 8011696:	6022      	str	r2, [r4, #0]
 8011698:	220a      	movs	r2, #10
 801169a:	701a      	strb	r2, [r3, #0]
 801169c:	e7ee      	b.n	801167c <_puts_r+0x88>
	...

080116a0 <puts>:
 80116a0:	4b02      	ldr	r3, [pc, #8]	@ (80116ac <puts+0xc>)
 80116a2:	4601      	mov	r1, r0
 80116a4:	6818      	ldr	r0, [r3, #0]
 80116a6:	f7ff bfa5 	b.w	80115f4 <_puts_r>
 80116aa:	bf00      	nop
 80116ac:	20000220 	.word	0x20000220

080116b0 <siprintf>:
 80116b0:	b40e      	push	{r1, r2, r3}
 80116b2:	b500      	push	{lr}
 80116b4:	b09c      	sub	sp, #112	@ 0x70
 80116b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80116b8:	9002      	str	r0, [sp, #8]
 80116ba:	9006      	str	r0, [sp, #24]
 80116bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80116c0:	4809      	ldr	r0, [pc, #36]	@ (80116e8 <siprintf+0x38>)
 80116c2:	9107      	str	r1, [sp, #28]
 80116c4:	9104      	str	r1, [sp, #16]
 80116c6:	4909      	ldr	r1, [pc, #36]	@ (80116ec <siprintf+0x3c>)
 80116c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80116cc:	9105      	str	r1, [sp, #20]
 80116ce:	6800      	ldr	r0, [r0, #0]
 80116d0:	9301      	str	r3, [sp, #4]
 80116d2:	a902      	add	r1, sp, #8
 80116d4:	f000 fa1e 	bl	8011b14 <_svfiprintf_r>
 80116d8:	9b02      	ldr	r3, [sp, #8]
 80116da:	2200      	movs	r2, #0
 80116dc:	701a      	strb	r2, [r3, #0]
 80116de:	b01c      	add	sp, #112	@ 0x70
 80116e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80116e4:	b003      	add	sp, #12
 80116e6:	4770      	bx	lr
 80116e8:	20000220 	.word	0x20000220
 80116ec:	ffff0208 	.word	0xffff0208

080116f0 <__sread>:
 80116f0:	b510      	push	{r4, lr}
 80116f2:	460c      	mov	r4, r1
 80116f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116f8:	f000 f8fc 	bl	80118f4 <_read_r>
 80116fc:	2800      	cmp	r0, #0
 80116fe:	bfab      	itete	ge
 8011700:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011702:	89a3      	ldrhlt	r3, [r4, #12]
 8011704:	181b      	addge	r3, r3, r0
 8011706:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801170a:	bfac      	ite	ge
 801170c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801170e:	81a3      	strhlt	r3, [r4, #12]
 8011710:	bd10      	pop	{r4, pc}

08011712 <__swrite>:
 8011712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011716:	461f      	mov	r7, r3
 8011718:	898b      	ldrh	r3, [r1, #12]
 801171a:	05db      	lsls	r3, r3, #23
 801171c:	4605      	mov	r5, r0
 801171e:	460c      	mov	r4, r1
 8011720:	4616      	mov	r6, r2
 8011722:	d505      	bpl.n	8011730 <__swrite+0x1e>
 8011724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011728:	2302      	movs	r3, #2
 801172a:	2200      	movs	r2, #0
 801172c:	f000 f8d0 	bl	80118d0 <_lseek_r>
 8011730:	89a3      	ldrh	r3, [r4, #12]
 8011732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011736:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801173a:	81a3      	strh	r3, [r4, #12]
 801173c:	4632      	mov	r2, r6
 801173e:	463b      	mov	r3, r7
 8011740:	4628      	mov	r0, r5
 8011742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011746:	f000 b8f7 	b.w	8011938 <_write_r>

0801174a <__sseek>:
 801174a:	b510      	push	{r4, lr}
 801174c:	460c      	mov	r4, r1
 801174e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011752:	f000 f8bd 	bl	80118d0 <_lseek_r>
 8011756:	1c43      	adds	r3, r0, #1
 8011758:	89a3      	ldrh	r3, [r4, #12]
 801175a:	bf15      	itete	ne
 801175c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801175e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011762:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011766:	81a3      	strheq	r3, [r4, #12]
 8011768:	bf18      	it	ne
 801176a:	81a3      	strhne	r3, [r4, #12]
 801176c:	bd10      	pop	{r4, pc}

0801176e <__sclose>:
 801176e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011772:	f000 b89d 	b.w	80118b0 <_close_r>

08011776 <__swbuf_r>:
 8011776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011778:	460e      	mov	r6, r1
 801177a:	4614      	mov	r4, r2
 801177c:	4605      	mov	r5, r0
 801177e:	b118      	cbz	r0, 8011788 <__swbuf_r+0x12>
 8011780:	6a03      	ldr	r3, [r0, #32]
 8011782:	b90b      	cbnz	r3, 8011788 <__swbuf_r+0x12>
 8011784:	f7ff fee6 	bl	8011554 <__sinit>
 8011788:	69a3      	ldr	r3, [r4, #24]
 801178a:	60a3      	str	r3, [r4, #8]
 801178c:	89a3      	ldrh	r3, [r4, #12]
 801178e:	071a      	lsls	r2, r3, #28
 8011790:	d501      	bpl.n	8011796 <__swbuf_r+0x20>
 8011792:	6923      	ldr	r3, [r4, #16]
 8011794:	b943      	cbnz	r3, 80117a8 <__swbuf_r+0x32>
 8011796:	4621      	mov	r1, r4
 8011798:	4628      	mov	r0, r5
 801179a:	f000 f82b 	bl	80117f4 <__swsetup_r>
 801179e:	b118      	cbz	r0, 80117a8 <__swbuf_r+0x32>
 80117a0:	f04f 37ff 	mov.w	r7, #4294967295
 80117a4:	4638      	mov	r0, r7
 80117a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117a8:	6823      	ldr	r3, [r4, #0]
 80117aa:	6922      	ldr	r2, [r4, #16]
 80117ac:	1a98      	subs	r0, r3, r2
 80117ae:	6963      	ldr	r3, [r4, #20]
 80117b0:	b2f6      	uxtb	r6, r6
 80117b2:	4283      	cmp	r3, r0
 80117b4:	4637      	mov	r7, r6
 80117b6:	dc05      	bgt.n	80117c4 <__swbuf_r+0x4e>
 80117b8:	4621      	mov	r1, r4
 80117ba:	4628      	mov	r0, r5
 80117bc:	f000 fdfa 	bl	80123b4 <_fflush_r>
 80117c0:	2800      	cmp	r0, #0
 80117c2:	d1ed      	bne.n	80117a0 <__swbuf_r+0x2a>
 80117c4:	68a3      	ldr	r3, [r4, #8]
 80117c6:	3b01      	subs	r3, #1
 80117c8:	60a3      	str	r3, [r4, #8]
 80117ca:	6823      	ldr	r3, [r4, #0]
 80117cc:	1c5a      	adds	r2, r3, #1
 80117ce:	6022      	str	r2, [r4, #0]
 80117d0:	701e      	strb	r6, [r3, #0]
 80117d2:	6962      	ldr	r2, [r4, #20]
 80117d4:	1c43      	adds	r3, r0, #1
 80117d6:	429a      	cmp	r2, r3
 80117d8:	d004      	beq.n	80117e4 <__swbuf_r+0x6e>
 80117da:	89a3      	ldrh	r3, [r4, #12]
 80117dc:	07db      	lsls	r3, r3, #31
 80117de:	d5e1      	bpl.n	80117a4 <__swbuf_r+0x2e>
 80117e0:	2e0a      	cmp	r6, #10
 80117e2:	d1df      	bne.n	80117a4 <__swbuf_r+0x2e>
 80117e4:	4621      	mov	r1, r4
 80117e6:	4628      	mov	r0, r5
 80117e8:	f000 fde4 	bl	80123b4 <_fflush_r>
 80117ec:	2800      	cmp	r0, #0
 80117ee:	d0d9      	beq.n	80117a4 <__swbuf_r+0x2e>
 80117f0:	e7d6      	b.n	80117a0 <__swbuf_r+0x2a>
	...

080117f4 <__swsetup_r>:
 80117f4:	b538      	push	{r3, r4, r5, lr}
 80117f6:	4b29      	ldr	r3, [pc, #164]	@ (801189c <__swsetup_r+0xa8>)
 80117f8:	4605      	mov	r5, r0
 80117fa:	6818      	ldr	r0, [r3, #0]
 80117fc:	460c      	mov	r4, r1
 80117fe:	b118      	cbz	r0, 8011808 <__swsetup_r+0x14>
 8011800:	6a03      	ldr	r3, [r0, #32]
 8011802:	b90b      	cbnz	r3, 8011808 <__swsetup_r+0x14>
 8011804:	f7ff fea6 	bl	8011554 <__sinit>
 8011808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801180c:	0719      	lsls	r1, r3, #28
 801180e:	d422      	bmi.n	8011856 <__swsetup_r+0x62>
 8011810:	06da      	lsls	r2, r3, #27
 8011812:	d407      	bmi.n	8011824 <__swsetup_r+0x30>
 8011814:	2209      	movs	r2, #9
 8011816:	602a      	str	r2, [r5, #0]
 8011818:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801181c:	81a3      	strh	r3, [r4, #12]
 801181e:	f04f 30ff 	mov.w	r0, #4294967295
 8011822:	e033      	b.n	801188c <__swsetup_r+0x98>
 8011824:	0758      	lsls	r0, r3, #29
 8011826:	d512      	bpl.n	801184e <__swsetup_r+0x5a>
 8011828:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801182a:	b141      	cbz	r1, 801183e <__swsetup_r+0x4a>
 801182c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011830:	4299      	cmp	r1, r3
 8011832:	d002      	beq.n	801183a <__swsetup_r+0x46>
 8011834:	4628      	mov	r0, r5
 8011836:	f000 f8c7 	bl	80119c8 <_free_r>
 801183a:	2300      	movs	r3, #0
 801183c:	6363      	str	r3, [r4, #52]	@ 0x34
 801183e:	89a3      	ldrh	r3, [r4, #12]
 8011840:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011844:	81a3      	strh	r3, [r4, #12]
 8011846:	2300      	movs	r3, #0
 8011848:	6063      	str	r3, [r4, #4]
 801184a:	6923      	ldr	r3, [r4, #16]
 801184c:	6023      	str	r3, [r4, #0]
 801184e:	89a3      	ldrh	r3, [r4, #12]
 8011850:	f043 0308 	orr.w	r3, r3, #8
 8011854:	81a3      	strh	r3, [r4, #12]
 8011856:	6923      	ldr	r3, [r4, #16]
 8011858:	b94b      	cbnz	r3, 801186e <__swsetup_r+0x7a>
 801185a:	89a3      	ldrh	r3, [r4, #12]
 801185c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011864:	d003      	beq.n	801186e <__swsetup_r+0x7a>
 8011866:	4621      	mov	r1, r4
 8011868:	4628      	mov	r0, r5
 801186a:	f000 fdf1 	bl	8012450 <__smakebuf_r>
 801186e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011872:	f013 0201 	ands.w	r2, r3, #1
 8011876:	d00a      	beq.n	801188e <__swsetup_r+0x9a>
 8011878:	2200      	movs	r2, #0
 801187a:	60a2      	str	r2, [r4, #8]
 801187c:	6962      	ldr	r2, [r4, #20]
 801187e:	4252      	negs	r2, r2
 8011880:	61a2      	str	r2, [r4, #24]
 8011882:	6922      	ldr	r2, [r4, #16]
 8011884:	b942      	cbnz	r2, 8011898 <__swsetup_r+0xa4>
 8011886:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801188a:	d1c5      	bne.n	8011818 <__swsetup_r+0x24>
 801188c:	bd38      	pop	{r3, r4, r5, pc}
 801188e:	0799      	lsls	r1, r3, #30
 8011890:	bf58      	it	pl
 8011892:	6962      	ldrpl	r2, [r4, #20]
 8011894:	60a2      	str	r2, [r4, #8]
 8011896:	e7f4      	b.n	8011882 <__swsetup_r+0x8e>
 8011898:	2000      	movs	r0, #0
 801189a:	e7f7      	b.n	801188c <__swsetup_r+0x98>
 801189c:	20000220 	.word	0x20000220

080118a0 <memset>:
 80118a0:	4402      	add	r2, r0
 80118a2:	4603      	mov	r3, r0
 80118a4:	4293      	cmp	r3, r2
 80118a6:	d100      	bne.n	80118aa <memset+0xa>
 80118a8:	4770      	bx	lr
 80118aa:	f803 1b01 	strb.w	r1, [r3], #1
 80118ae:	e7f9      	b.n	80118a4 <memset+0x4>

080118b0 <_close_r>:
 80118b0:	b538      	push	{r3, r4, r5, lr}
 80118b2:	4d06      	ldr	r5, [pc, #24]	@ (80118cc <_close_r+0x1c>)
 80118b4:	2300      	movs	r3, #0
 80118b6:	4604      	mov	r4, r0
 80118b8:	4608      	mov	r0, r1
 80118ba:	602b      	str	r3, [r5, #0]
 80118bc:	f7f1 fafb 	bl	8002eb6 <_close>
 80118c0:	1c43      	adds	r3, r0, #1
 80118c2:	d102      	bne.n	80118ca <_close_r+0x1a>
 80118c4:	682b      	ldr	r3, [r5, #0]
 80118c6:	b103      	cbz	r3, 80118ca <_close_r+0x1a>
 80118c8:	6023      	str	r3, [r4, #0]
 80118ca:	bd38      	pop	{r3, r4, r5, pc}
 80118cc:	20009814 	.word	0x20009814

080118d0 <_lseek_r>:
 80118d0:	b538      	push	{r3, r4, r5, lr}
 80118d2:	4d07      	ldr	r5, [pc, #28]	@ (80118f0 <_lseek_r+0x20>)
 80118d4:	4604      	mov	r4, r0
 80118d6:	4608      	mov	r0, r1
 80118d8:	4611      	mov	r1, r2
 80118da:	2200      	movs	r2, #0
 80118dc:	602a      	str	r2, [r5, #0]
 80118de:	461a      	mov	r2, r3
 80118e0:	f7f1 fb10 	bl	8002f04 <_lseek>
 80118e4:	1c43      	adds	r3, r0, #1
 80118e6:	d102      	bne.n	80118ee <_lseek_r+0x1e>
 80118e8:	682b      	ldr	r3, [r5, #0]
 80118ea:	b103      	cbz	r3, 80118ee <_lseek_r+0x1e>
 80118ec:	6023      	str	r3, [r4, #0]
 80118ee:	bd38      	pop	{r3, r4, r5, pc}
 80118f0:	20009814 	.word	0x20009814

080118f4 <_read_r>:
 80118f4:	b538      	push	{r3, r4, r5, lr}
 80118f6:	4d07      	ldr	r5, [pc, #28]	@ (8011914 <_read_r+0x20>)
 80118f8:	4604      	mov	r4, r0
 80118fa:	4608      	mov	r0, r1
 80118fc:	4611      	mov	r1, r2
 80118fe:	2200      	movs	r2, #0
 8011900:	602a      	str	r2, [r5, #0]
 8011902:	461a      	mov	r2, r3
 8011904:	f7f1 faba 	bl	8002e7c <_read>
 8011908:	1c43      	adds	r3, r0, #1
 801190a:	d102      	bne.n	8011912 <_read_r+0x1e>
 801190c:	682b      	ldr	r3, [r5, #0]
 801190e:	b103      	cbz	r3, 8011912 <_read_r+0x1e>
 8011910:	6023      	str	r3, [r4, #0]
 8011912:	bd38      	pop	{r3, r4, r5, pc}
 8011914:	20009814 	.word	0x20009814

08011918 <_sbrk_r>:
 8011918:	b538      	push	{r3, r4, r5, lr}
 801191a:	4d06      	ldr	r5, [pc, #24]	@ (8011934 <_sbrk_r+0x1c>)
 801191c:	2300      	movs	r3, #0
 801191e:	4604      	mov	r4, r0
 8011920:	4608      	mov	r0, r1
 8011922:	602b      	str	r3, [r5, #0]
 8011924:	f7f1 fafc 	bl	8002f20 <_sbrk>
 8011928:	1c43      	adds	r3, r0, #1
 801192a:	d102      	bne.n	8011932 <_sbrk_r+0x1a>
 801192c:	682b      	ldr	r3, [r5, #0]
 801192e:	b103      	cbz	r3, 8011932 <_sbrk_r+0x1a>
 8011930:	6023      	str	r3, [r4, #0]
 8011932:	bd38      	pop	{r3, r4, r5, pc}
 8011934:	20009814 	.word	0x20009814

08011938 <_write_r>:
 8011938:	b538      	push	{r3, r4, r5, lr}
 801193a:	4d07      	ldr	r5, [pc, #28]	@ (8011958 <_write_r+0x20>)
 801193c:	4604      	mov	r4, r0
 801193e:	4608      	mov	r0, r1
 8011940:	4611      	mov	r1, r2
 8011942:	2200      	movs	r2, #0
 8011944:	602a      	str	r2, [r5, #0]
 8011946:	461a      	mov	r2, r3
 8011948:	f7ef faaa 	bl	8000ea0 <_write>
 801194c:	1c43      	adds	r3, r0, #1
 801194e:	d102      	bne.n	8011956 <_write_r+0x1e>
 8011950:	682b      	ldr	r3, [r5, #0]
 8011952:	b103      	cbz	r3, 8011956 <_write_r+0x1e>
 8011954:	6023      	str	r3, [r4, #0]
 8011956:	bd38      	pop	{r3, r4, r5, pc}
 8011958:	20009814 	.word	0x20009814

0801195c <__errno>:
 801195c:	4b01      	ldr	r3, [pc, #4]	@ (8011964 <__errno+0x8>)
 801195e:	6818      	ldr	r0, [r3, #0]
 8011960:	4770      	bx	lr
 8011962:	bf00      	nop
 8011964:	20000220 	.word	0x20000220

08011968 <__libc_init_array>:
 8011968:	b570      	push	{r4, r5, r6, lr}
 801196a:	4d0d      	ldr	r5, [pc, #52]	@ (80119a0 <__libc_init_array+0x38>)
 801196c:	4c0d      	ldr	r4, [pc, #52]	@ (80119a4 <__libc_init_array+0x3c>)
 801196e:	1b64      	subs	r4, r4, r5
 8011970:	10a4      	asrs	r4, r4, #2
 8011972:	2600      	movs	r6, #0
 8011974:	42a6      	cmp	r6, r4
 8011976:	d109      	bne.n	801198c <__libc_init_array+0x24>
 8011978:	4d0b      	ldr	r5, [pc, #44]	@ (80119a8 <__libc_init_array+0x40>)
 801197a:	4c0c      	ldr	r4, [pc, #48]	@ (80119ac <__libc_init_array+0x44>)
 801197c:	f000 fe58 	bl	8012630 <_init>
 8011980:	1b64      	subs	r4, r4, r5
 8011982:	10a4      	asrs	r4, r4, #2
 8011984:	2600      	movs	r6, #0
 8011986:	42a6      	cmp	r6, r4
 8011988:	d105      	bne.n	8011996 <__libc_init_array+0x2e>
 801198a:	bd70      	pop	{r4, r5, r6, pc}
 801198c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011990:	4798      	blx	r3
 8011992:	3601      	adds	r6, #1
 8011994:	e7ee      	b.n	8011974 <__libc_init_array+0xc>
 8011996:	f855 3b04 	ldr.w	r3, [r5], #4
 801199a:	4798      	blx	r3
 801199c:	3601      	adds	r6, #1
 801199e:	e7f2      	b.n	8011986 <__libc_init_array+0x1e>
 80119a0:	0801672c 	.word	0x0801672c
 80119a4:	0801672c 	.word	0x0801672c
 80119a8:	0801672c 	.word	0x0801672c
 80119ac:	08016730 	.word	0x08016730

080119b0 <__retarget_lock_init_recursive>:
 80119b0:	4770      	bx	lr

080119b2 <__retarget_lock_acquire_recursive>:
 80119b2:	4770      	bx	lr

080119b4 <__retarget_lock_release_recursive>:
 80119b4:	4770      	bx	lr

080119b6 <strcpy>:
 80119b6:	4603      	mov	r3, r0
 80119b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80119bc:	f803 2b01 	strb.w	r2, [r3], #1
 80119c0:	2a00      	cmp	r2, #0
 80119c2:	d1f9      	bne.n	80119b8 <strcpy+0x2>
 80119c4:	4770      	bx	lr
	...

080119c8 <_free_r>:
 80119c8:	b538      	push	{r3, r4, r5, lr}
 80119ca:	4605      	mov	r5, r0
 80119cc:	2900      	cmp	r1, #0
 80119ce:	d041      	beq.n	8011a54 <_free_r+0x8c>
 80119d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119d4:	1f0c      	subs	r4, r1, #4
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	bfb8      	it	lt
 80119da:	18e4      	addlt	r4, r4, r3
 80119dc:	f7ff fd22 	bl	8011424 <__malloc_lock>
 80119e0:	4a1d      	ldr	r2, [pc, #116]	@ (8011a58 <_free_r+0x90>)
 80119e2:	6813      	ldr	r3, [r2, #0]
 80119e4:	b933      	cbnz	r3, 80119f4 <_free_r+0x2c>
 80119e6:	6063      	str	r3, [r4, #4]
 80119e8:	6014      	str	r4, [r2, #0]
 80119ea:	4628      	mov	r0, r5
 80119ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119f0:	f7ff bd1e 	b.w	8011430 <__malloc_unlock>
 80119f4:	42a3      	cmp	r3, r4
 80119f6:	d908      	bls.n	8011a0a <_free_r+0x42>
 80119f8:	6820      	ldr	r0, [r4, #0]
 80119fa:	1821      	adds	r1, r4, r0
 80119fc:	428b      	cmp	r3, r1
 80119fe:	bf01      	itttt	eq
 8011a00:	6819      	ldreq	r1, [r3, #0]
 8011a02:	685b      	ldreq	r3, [r3, #4]
 8011a04:	1809      	addeq	r1, r1, r0
 8011a06:	6021      	streq	r1, [r4, #0]
 8011a08:	e7ed      	b.n	80119e6 <_free_r+0x1e>
 8011a0a:	461a      	mov	r2, r3
 8011a0c:	685b      	ldr	r3, [r3, #4]
 8011a0e:	b10b      	cbz	r3, 8011a14 <_free_r+0x4c>
 8011a10:	42a3      	cmp	r3, r4
 8011a12:	d9fa      	bls.n	8011a0a <_free_r+0x42>
 8011a14:	6811      	ldr	r1, [r2, #0]
 8011a16:	1850      	adds	r0, r2, r1
 8011a18:	42a0      	cmp	r0, r4
 8011a1a:	d10b      	bne.n	8011a34 <_free_r+0x6c>
 8011a1c:	6820      	ldr	r0, [r4, #0]
 8011a1e:	4401      	add	r1, r0
 8011a20:	1850      	adds	r0, r2, r1
 8011a22:	4283      	cmp	r3, r0
 8011a24:	6011      	str	r1, [r2, #0]
 8011a26:	d1e0      	bne.n	80119ea <_free_r+0x22>
 8011a28:	6818      	ldr	r0, [r3, #0]
 8011a2a:	685b      	ldr	r3, [r3, #4]
 8011a2c:	6053      	str	r3, [r2, #4]
 8011a2e:	4408      	add	r0, r1
 8011a30:	6010      	str	r0, [r2, #0]
 8011a32:	e7da      	b.n	80119ea <_free_r+0x22>
 8011a34:	d902      	bls.n	8011a3c <_free_r+0x74>
 8011a36:	230c      	movs	r3, #12
 8011a38:	602b      	str	r3, [r5, #0]
 8011a3a:	e7d6      	b.n	80119ea <_free_r+0x22>
 8011a3c:	6820      	ldr	r0, [r4, #0]
 8011a3e:	1821      	adds	r1, r4, r0
 8011a40:	428b      	cmp	r3, r1
 8011a42:	bf04      	itt	eq
 8011a44:	6819      	ldreq	r1, [r3, #0]
 8011a46:	685b      	ldreq	r3, [r3, #4]
 8011a48:	6063      	str	r3, [r4, #4]
 8011a4a:	bf04      	itt	eq
 8011a4c:	1809      	addeq	r1, r1, r0
 8011a4e:	6021      	streq	r1, [r4, #0]
 8011a50:	6054      	str	r4, [r2, #4]
 8011a52:	e7ca      	b.n	80119ea <_free_r+0x22>
 8011a54:	bd38      	pop	{r3, r4, r5, pc}
 8011a56:	bf00      	nop
 8011a58:	200096d4 	.word	0x200096d4

08011a5c <__ssputs_r>:
 8011a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a60:	688e      	ldr	r6, [r1, #8]
 8011a62:	461f      	mov	r7, r3
 8011a64:	42be      	cmp	r6, r7
 8011a66:	680b      	ldr	r3, [r1, #0]
 8011a68:	4682      	mov	sl, r0
 8011a6a:	460c      	mov	r4, r1
 8011a6c:	4690      	mov	r8, r2
 8011a6e:	d82d      	bhi.n	8011acc <__ssputs_r+0x70>
 8011a70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011a74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011a78:	d026      	beq.n	8011ac8 <__ssputs_r+0x6c>
 8011a7a:	6965      	ldr	r5, [r4, #20]
 8011a7c:	6909      	ldr	r1, [r1, #16]
 8011a7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011a82:	eba3 0901 	sub.w	r9, r3, r1
 8011a86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011a8a:	1c7b      	adds	r3, r7, #1
 8011a8c:	444b      	add	r3, r9
 8011a8e:	106d      	asrs	r5, r5, #1
 8011a90:	429d      	cmp	r5, r3
 8011a92:	bf38      	it	cc
 8011a94:	461d      	movcc	r5, r3
 8011a96:	0553      	lsls	r3, r2, #21
 8011a98:	d527      	bpl.n	8011aea <__ssputs_r+0x8e>
 8011a9a:	4629      	mov	r1, r5
 8011a9c:	f7ff fc42 	bl	8011324 <_malloc_r>
 8011aa0:	4606      	mov	r6, r0
 8011aa2:	b360      	cbz	r0, 8011afe <__ssputs_r+0xa2>
 8011aa4:	6921      	ldr	r1, [r4, #16]
 8011aa6:	464a      	mov	r2, r9
 8011aa8:	f000 fd7e 	bl	80125a8 <memcpy>
 8011aac:	89a3      	ldrh	r3, [r4, #12]
 8011aae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ab6:	81a3      	strh	r3, [r4, #12]
 8011ab8:	6126      	str	r6, [r4, #16]
 8011aba:	6165      	str	r5, [r4, #20]
 8011abc:	444e      	add	r6, r9
 8011abe:	eba5 0509 	sub.w	r5, r5, r9
 8011ac2:	6026      	str	r6, [r4, #0]
 8011ac4:	60a5      	str	r5, [r4, #8]
 8011ac6:	463e      	mov	r6, r7
 8011ac8:	42be      	cmp	r6, r7
 8011aca:	d900      	bls.n	8011ace <__ssputs_r+0x72>
 8011acc:	463e      	mov	r6, r7
 8011ace:	6820      	ldr	r0, [r4, #0]
 8011ad0:	4632      	mov	r2, r6
 8011ad2:	4641      	mov	r1, r8
 8011ad4:	f000 fd2c 	bl	8012530 <memmove>
 8011ad8:	68a3      	ldr	r3, [r4, #8]
 8011ada:	1b9b      	subs	r3, r3, r6
 8011adc:	60a3      	str	r3, [r4, #8]
 8011ade:	6823      	ldr	r3, [r4, #0]
 8011ae0:	4433      	add	r3, r6
 8011ae2:	6023      	str	r3, [r4, #0]
 8011ae4:	2000      	movs	r0, #0
 8011ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011aea:	462a      	mov	r2, r5
 8011aec:	f000 fd6a 	bl	80125c4 <_realloc_r>
 8011af0:	4606      	mov	r6, r0
 8011af2:	2800      	cmp	r0, #0
 8011af4:	d1e0      	bne.n	8011ab8 <__ssputs_r+0x5c>
 8011af6:	6921      	ldr	r1, [r4, #16]
 8011af8:	4650      	mov	r0, sl
 8011afa:	f7ff ff65 	bl	80119c8 <_free_r>
 8011afe:	230c      	movs	r3, #12
 8011b00:	f8ca 3000 	str.w	r3, [sl]
 8011b04:	89a3      	ldrh	r3, [r4, #12]
 8011b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b0a:	81a3      	strh	r3, [r4, #12]
 8011b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b10:	e7e9      	b.n	8011ae6 <__ssputs_r+0x8a>
	...

08011b14 <_svfiprintf_r>:
 8011b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b18:	4698      	mov	r8, r3
 8011b1a:	898b      	ldrh	r3, [r1, #12]
 8011b1c:	061b      	lsls	r3, r3, #24
 8011b1e:	b09d      	sub	sp, #116	@ 0x74
 8011b20:	4607      	mov	r7, r0
 8011b22:	460d      	mov	r5, r1
 8011b24:	4614      	mov	r4, r2
 8011b26:	d510      	bpl.n	8011b4a <_svfiprintf_r+0x36>
 8011b28:	690b      	ldr	r3, [r1, #16]
 8011b2a:	b973      	cbnz	r3, 8011b4a <_svfiprintf_r+0x36>
 8011b2c:	2140      	movs	r1, #64	@ 0x40
 8011b2e:	f7ff fbf9 	bl	8011324 <_malloc_r>
 8011b32:	6028      	str	r0, [r5, #0]
 8011b34:	6128      	str	r0, [r5, #16]
 8011b36:	b930      	cbnz	r0, 8011b46 <_svfiprintf_r+0x32>
 8011b38:	230c      	movs	r3, #12
 8011b3a:	603b      	str	r3, [r7, #0]
 8011b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b40:	b01d      	add	sp, #116	@ 0x74
 8011b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b46:	2340      	movs	r3, #64	@ 0x40
 8011b48:	616b      	str	r3, [r5, #20]
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b4e:	2320      	movs	r3, #32
 8011b50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011b54:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b58:	2330      	movs	r3, #48	@ 0x30
 8011b5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011cf8 <_svfiprintf_r+0x1e4>
 8011b5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011b62:	f04f 0901 	mov.w	r9, #1
 8011b66:	4623      	mov	r3, r4
 8011b68:	469a      	mov	sl, r3
 8011b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b6e:	b10a      	cbz	r2, 8011b74 <_svfiprintf_r+0x60>
 8011b70:	2a25      	cmp	r2, #37	@ 0x25
 8011b72:	d1f9      	bne.n	8011b68 <_svfiprintf_r+0x54>
 8011b74:	ebba 0b04 	subs.w	fp, sl, r4
 8011b78:	d00b      	beq.n	8011b92 <_svfiprintf_r+0x7e>
 8011b7a:	465b      	mov	r3, fp
 8011b7c:	4622      	mov	r2, r4
 8011b7e:	4629      	mov	r1, r5
 8011b80:	4638      	mov	r0, r7
 8011b82:	f7ff ff6b 	bl	8011a5c <__ssputs_r>
 8011b86:	3001      	adds	r0, #1
 8011b88:	f000 80a7 	beq.w	8011cda <_svfiprintf_r+0x1c6>
 8011b8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b8e:	445a      	add	r2, fp
 8011b90:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b92:	f89a 3000 	ldrb.w	r3, [sl]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	f000 809f 	beq.w	8011cda <_svfiprintf_r+0x1c6>
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8011ba2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ba6:	f10a 0a01 	add.w	sl, sl, #1
 8011baa:	9304      	str	r3, [sp, #16]
 8011bac:	9307      	str	r3, [sp, #28]
 8011bae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011bb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8011bb4:	4654      	mov	r4, sl
 8011bb6:	2205      	movs	r2, #5
 8011bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bbc:	484e      	ldr	r0, [pc, #312]	@ (8011cf8 <_svfiprintf_r+0x1e4>)
 8011bbe:	f7ee fb1f 	bl	8000200 <memchr>
 8011bc2:	9a04      	ldr	r2, [sp, #16]
 8011bc4:	b9d8      	cbnz	r0, 8011bfe <_svfiprintf_r+0xea>
 8011bc6:	06d0      	lsls	r0, r2, #27
 8011bc8:	bf44      	itt	mi
 8011bca:	2320      	movmi	r3, #32
 8011bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011bd0:	0711      	lsls	r1, r2, #28
 8011bd2:	bf44      	itt	mi
 8011bd4:	232b      	movmi	r3, #43	@ 0x2b
 8011bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011bda:	f89a 3000 	ldrb.w	r3, [sl]
 8011bde:	2b2a      	cmp	r3, #42	@ 0x2a
 8011be0:	d015      	beq.n	8011c0e <_svfiprintf_r+0xfa>
 8011be2:	9a07      	ldr	r2, [sp, #28]
 8011be4:	4654      	mov	r4, sl
 8011be6:	2000      	movs	r0, #0
 8011be8:	f04f 0c0a 	mov.w	ip, #10
 8011bec:	4621      	mov	r1, r4
 8011bee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011bf2:	3b30      	subs	r3, #48	@ 0x30
 8011bf4:	2b09      	cmp	r3, #9
 8011bf6:	d94b      	bls.n	8011c90 <_svfiprintf_r+0x17c>
 8011bf8:	b1b0      	cbz	r0, 8011c28 <_svfiprintf_r+0x114>
 8011bfa:	9207      	str	r2, [sp, #28]
 8011bfc:	e014      	b.n	8011c28 <_svfiprintf_r+0x114>
 8011bfe:	eba0 0308 	sub.w	r3, r0, r8
 8011c02:	fa09 f303 	lsl.w	r3, r9, r3
 8011c06:	4313      	orrs	r3, r2
 8011c08:	9304      	str	r3, [sp, #16]
 8011c0a:	46a2      	mov	sl, r4
 8011c0c:	e7d2      	b.n	8011bb4 <_svfiprintf_r+0xa0>
 8011c0e:	9b03      	ldr	r3, [sp, #12]
 8011c10:	1d19      	adds	r1, r3, #4
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	9103      	str	r1, [sp, #12]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	bfbb      	ittet	lt
 8011c1a:	425b      	neglt	r3, r3
 8011c1c:	f042 0202 	orrlt.w	r2, r2, #2
 8011c20:	9307      	strge	r3, [sp, #28]
 8011c22:	9307      	strlt	r3, [sp, #28]
 8011c24:	bfb8      	it	lt
 8011c26:	9204      	strlt	r2, [sp, #16]
 8011c28:	7823      	ldrb	r3, [r4, #0]
 8011c2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8011c2c:	d10a      	bne.n	8011c44 <_svfiprintf_r+0x130>
 8011c2e:	7863      	ldrb	r3, [r4, #1]
 8011c30:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c32:	d132      	bne.n	8011c9a <_svfiprintf_r+0x186>
 8011c34:	9b03      	ldr	r3, [sp, #12]
 8011c36:	1d1a      	adds	r2, r3, #4
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	9203      	str	r2, [sp, #12]
 8011c3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011c40:	3402      	adds	r4, #2
 8011c42:	9305      	str	r3, [sp, #20]
 8011c44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011d08 <_svfiprintf_r+0x1f4>
 8011c48:	7821      	ldrb	r1, [r4, #0]
 8011c4a:	2203      	movs	r2, #3
 8011c4c:	4650      	mov	r0, sl
 8011c4e:	f7ee fad7 	bl	8000200 <memchr>
 8011c52:	b138      	cbz	r0, 8011c64 <_svfiprintf_r+0x150>
 8011c54:	9b04      	ldr	r3, [sp, #16]
 8011c56:	eba0 000a 	sub.w	r0, r0, sl
 8011c5a:	2240      	movs	r2, #64	@ 0x40
 8011c5c:	4082      	lsls	r2, r0
 8011c5e:	4313      	orrs	r3, r2
 8011c60:	3401      	adds	r4, #1
 8011c62:	9304      	str	r3, [sp, #16]
 8011c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c68:	4824      	ldr	r0, [pc, #144]	@ (8011cfc <_svfiprintf_r+0x1e8>)
 8011c6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011c6e:	2206      	movs	r2, #6
 8011c70:	f7ee fac6 	bl	8000200 <memchr>
 8011c74:	2800      	cmp	r0, #0
 8011c76:	d036      	beq.n	8011ce6 <_svfiprintf_r+0x1d2>
 8011c78:	4b21      	ldr	r3, [pc, #132]	@ (8011d00 <_svfiprintf_r+0x1ec>)
 8011c7a:	bb1b      	cbnz	r3, 8011cc4 <_svfiprintf_r+0x1b0>
 8011c7c:	9b03      	ldr	r3, [sp, #12]
 8011c7e:	3307      	adds	r3, #7
 8011c80:	f023 0307 	bic.w	r3, r3, #7
 8011c84:	3308      	adds	r3, #8
 8011c86:	9303      	str	r3, [sp, #12]
 8011c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c8a:	4433      	add	r3, r6
 8011c8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c8e:	e76a      	b.n	8011b66 <_svfiprintf_r+0x52>
 8011c90:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c94:	460c      	mov	r4, r1
 8011c96:	2001      	movs	r0, #1
 8011c98:	e7a8      	b.n	8011bec <_svfiprintf_r+0xd8>
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	3401      	adds	r4, #1
 8011c9e:	9305      	str	r3, [sp, #20]
 8011ca0:	4619      	mov	r1, r3
 8011ca2:	f04f 0c0a 	mov.w	ip, #10
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011cac:	3a30      	subs	r2, #48	@ 0x30
 8011cae:	2a09      	cmp	r2, #9
 8011cb0:	d903      	bls.n	8011cba <_svfiprintf_r+0x1a6>
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d0c6      	beq.n	8011c44 <_svfiprintf_r+0x130>
 8011cb6:	9105      	str	r1, [sp, #20]
 8011cb8:	e7c4      	b.n	8011c44 <_svfiprintf_r+0x130>
 8011cba:	fb0c 2101 	mla	r1, ip, r1, r2
 8011cbe:	4604      	mov	r4, r0
 8011cc0:	2301      	movs	r3, #1
 8011cc2:	e7f0      	b.n	8011ca6 <_svfiprintf_r+0x192>
 8011cc4:	ab03      	add	r3, sp, #12
 8011cc6:	9300      	str	r3, [sp, #0]
 8011cc8:	462a      	mov	r2, r5
 8011cca:	4b0e      	ldr	r3, [pc, #56]	@ (8011d04 <_svfiprintf_r+0x1f0>)
 8011ccc:	a904      	add	r1, sp, #16
 8011cce:	4638      	mov	r0, r7
 8011cd0:	f3af 8000 	nop.w
 8011cd4:	1c42      	adds	r2, r0, #1
 8011cd6:	4606      	mov	r6, r0
 8011cd8:	d1d6      	bne.n	8011c88 <_svfiprintf_r+0x174>
 8011cda:	89ab      	ldrh	r3, [r5, #12]
 8011cdc:	065b      	lsls	r3, r3, #25
 8011cde:	f53f af2d 	bmi.w	8011b3c <_svfiprintf_r+0x28>
 8011ce2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011ce4:	e72c      	b.n	8011b40 <_svfiprintf_r+0x2c>
 8011ce6:	ab03      	add	r3, sp, #12
 8011ce8:	9300      	str	r3, [sp, #0]
 8011cea:	462a      	mov	r2, r5
 8011cec:	4b05      	ldr	r3, [pc, #20]	@ (8011d04 <_svfiprintf_r+0x1f0>)
 8011cee:	a904      	add	r1, sp, #16
 8011cf0:	4638      	mov	r0, r7
 8011cf2:	f000 f9bb 	bl	801206c <_printf_i>
 8011cf6:	e7ed      	b.n	8011cd4 <_svfiprintf_r+0x1c0>
 8011cf8:	080166f0 	.word	0x080166f0
 8011cfc:	080166fa 	.word	0x080166fa
 8011d00:	00000000 	.word	0x00000000
 8011d04:	08011a5d 	.word	0x08011a5d
 8011d08:	080166f6 	.word	0x080166f6

08011d0c <__sfputc_r>:
 8011d0c:	6893      	ldr	r3, [r2, #8]
 8011d0e:	3b01      	subs	r3, #1
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	b410      	push	{r4}
 8011d14:	6093      	str	r3, [r2, #8]
 8011d16:	da08      	bge.n	8011d2a <__sfputc_r+0x1e>
 8011d18:	6994      	ldr	r4, [r2, #24]
 8011d1a:	42a3      	cmp	r3, r4
 8011d1c:	db01      	blt.n	8011d22 <__sfputc_r+0x16>
 8011d1e:	290a      	cmp	r1, #10
 8011d20:	d103      	bne.n	8011d2a <__sfputc_r+0x1e>
 8011d22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d26:	f7ff bd26 	b.w	8011776 <__swbuf_r>
 8011d2a:	6813      	ldr	r3, [r2, #0]
 8011d2c:	1c58      	adds	r0, r3, #1
 8011d2e:	6010      	str	r0, [r2, #0]
 8011d30:	7019      	strb	r1, [r3, #0]
 8011d32:	4608      	mov	r0, r1
 8011d34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d38:	4770      	bx	lr

08011d3a <__sfputs_r>:
 8011d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d3c:	4606      	mov	r6, r0
 8011d3e:	460f      	mov	r7, r1
 8011d40:	4614      	mov	r4, r2
 8011d42:	18d5      	adds	r5, r2, r3
 8011d44:	42ac      	cmp	r4, r5
 8011d46:	d101      	bne.n	8011d4c <__sfputs_r+0x12>
 8011d48:	2000      	movs	r0, #0
 8011d4a:	e007      	b.n	8011d5c <__sfputs_r+0x22>
 8011d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d50:	463a      	mov	r2, r7
 8011d52:	4630      	mov	r0, r6
 8011d54:	f7ff ffda 	bl	8011d0c <__sfputc_r>
 8011d58:	1c43      	adds	r3, r0, #1
 8011d5a:	d1f3      	bne.n	8011d44 <__sfputs_r+0xa>
 8011d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011d60 <_vfiprintf_r>:
 8011d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d64:	460d      	mov	r5, r1
 8011d66:	b09d      	sub	sp, #116	@ 0x74
 8011d68:	4614      	mov	r4, r2
 8011d6a:	4698      	mov	r8, r3
 8011d6c:	4606      	mov	r6, r0
 8011d6e:	b118      	cbz	r0, 8011d78 <_vfiprintf_r+0x18>
 8011d70:	6a03      	ldr	r3, [r0, #32]
 8011d72:	b90b      	cbnz	r3, 8011d78 <_vfiprintf_r+0x18>
 8011d74:	f7ff fbee 	bl	8011554 <__sinit>
 8011d78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d7a:	07d9      	lsls	r1, r3, #31
 8011d7c:	d405      	bmi.n	8011d8a <_vfiprintf_r+0x2a>
 8011d7e:	89ab      	ldrh	r3, [r5, #12]
 8011d80:	059a      	lsls	r2, r3, #22
 8011d82:	d402      	bmi.n	8011d8a <_vfiprintf_r+0x2a>
 8011d84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d86:	f7ff fe14 	bl	80119b2 <__retarget_lock_acquire_recursive>
 8011d8a:	89ab      	ldrh	r3, [r5, #12]
 8011d8c:	071b      	lsls	r3, r3, #28
 8011d8e:	d501      	bpl.n	8011d94 <_vfiprintf_r+0x34>
 8011d90:	692b      	ldr	r3, [r5, #16]
 8011d92:	b99b      	cbnz	r3, 8011dbc <_vfiprintf_r+0x5c>
 8011d94:	4629      	mov	r1, r5
 8011d96:	4630      	mov	r0, r6
 8011d98:	f7ff fd2c 	bl	80117f4 <__swsetup_r>
 8011d9c:	b170      	cbz	r0, 8011dbc <_vfiprintf_r+0x5c>
 8011d9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011da0:	07dc      	lsls	r4, r3, #31
 8011da2:	d504      	bpl.n	8011dae <_vfiprintf_r+0x4e>
 8011da4:	f04f 30ff 	mov.w	r0, #4294967295
 8011da8:	b01d      	add	sp, #116	@ 0x74
 8011daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dae:	89ab      	ldrh	r3, [r5, #12]
 8011db0:	0598      	lsls	r0, r3, #22
 8011db2:	d4f7      	bmi.n	8011da4 <_vfiprintf_r+0x44>
 8011db4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011db6:	f7ff fdfd 	bl	80119b4 <__retarget_lock_release_recursive>
 8011dba:	e7f3      	b.n	8011da4 <_vfiprintf_r+0x44>
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8011dc0:	2320      	movs	r3, #32
 8011dc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011dc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8011dca:	2330      	movs	r3, #48	@ 0x30
 8011dcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011f7c <_vfiprintf_r+0x21c>
 8011dd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011dd4:	f04f 0901 	mov.w	r9, #1
 8011dd8:	4623      	mov	r3, r4
 8011dda:	469a      	mov	sl, r3
 8011ddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011de0:	b10a      	cbz	r2, 8011de6 <_vfiprintf_r+0x86>
 8011de2:	2a25      	cmp	r2, #37	@ 0x25
 8011de4:	d1f9      	bne.n	8011dda <_vfiprintf_r+0x7a>
 8011de6:	ebba 0b04 	subs.w	fp, sl, r4
 8011dea:	d00b      	beq.n	8011e04 <_vfiprintf_r+0xa4>
 8011dec:	465b      	mov	r3, fp
 8011dee:	4622      	mov	r2, r4
 8011df0:	4629      	mov	r1, r5
 8011df2:	4630      	mov	r0, r6
 8011df4:	f7ff ffa1 	bl	8011d3a <__sfputs_r>
 8011df8:	3001      	adds	r0, #1
 8011dfa:	f000 80a7 	beq.w	8011f4c <_vfiprintf_r+0x1ec>
 8011dfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e00:	445a      	add	r2, fp
 8011e02:	9209      	str	r2, [sp, #36]	@ 0x24
 8011e04:	f89a 3000 	ldrb.w	r3, [sl]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	f000 809f 	beq.w	8011f4c <_vfiprintf_r+0x1ec>
 8011e0e:	2300      	movs	r3, #0
 8011e10:	f04f 32ff 	mov.w	r2, #4294967295
 8011e14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e18:	f10a 0a01 	add.w	sl, sl, #1
 8011e1c:	9304      	str	r3, [sp, #16]
 8011e1e:	9307      	str	r3, [sp, #28]
 8011e20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011e24:	931a      	str	r3, [sp, #104]	@ 0x68
 8011e26:	4654      	mov	r4, sl
 8011e28:	2205      	movs	r2, #5
 8011e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e2e:	4853      	ldr	r0, [pc, #332]	@ (8011f7c <_vfiprintf_r+0x21c>)
 8011e30:	f7ee f9e6 	bl	8000200 <memchr>
 8011e34:	9a04      	ldr	r2, [sp, #16]
 8011e36:	b9d8      	cbnz	r0, 8011e70 <_vfiprintf_r+0x110>
 8011e38:	06d1      	lsls	r1, r2, #27
 8011e3a:	bf44      	itt	mi
 8011e3c:	2320      	movmi	r3, #32
 8011e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e42:	0713      	lsls	r3, r2, #28
 8011e44:	bf44      	itt	mi
 8011e46:	232b      	movmi	r3, #43	@ 0x2b
 8011e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8011e50:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e52:	d015      	beq.n	8011e80 <_vfiprintf_r+0x120>
 8011e54:	9a07      	ldr	r2, [sp, #28]
 8011e56:	4654      	mov	r4, sl
 8011e58:	2000      	movs	r0, #0
 8011e5a:	f04f 0c0a 	mov.w	ip, #10
 8011e5e:	4621      	mov	r1, r4
 8011e60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e64:	3b30      	subs	r3, #48	@ 0x30
 8011e66:	2b09      	cmp	r3, #9
 8011e68:	d94b      	bls.n	8011f02 <_vfiprintf_r+0x1a2>
 8011e6a:	b1b0      	cbz	r0, 8011e9a <_vfiprintf_r+0x13a>
 8011e6c:	9207      	str	r2, [sp, #28]
 8011e6e:	e014      	b.n	8011e9a <_vfiprintf_r+0x13a>
 8011e70:	eba0 0308 	sub.w	r3, r0, r8
 8011e74:	fa09 f303 	lsl.w	r3, r9, r3
 8011e78:	4313      	orrs	r3, r2
 8011e7a:	9304      	str	r3, [sp, #16]
 8011e7c:	46a2      	mov	sl, r4
 8011e7e:	e7d2      	b.n	8011e26 <_vfiprintf_r+0xc6>
 8011e80:	9b03      	ldr	r3, [sp, #12]
 8011e82:	1d19      	adds	r1, r3, #4
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	9103      	str	r1, [sp, #12]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	bfbb      	ittet	lt
 8011e8c:	425b      	neglt	r3, r3
 8011e8e:	f042 0202 	orrlt.w	r2, r2, #2
 8011e92:	9307      	strge	r3, [sp, #28]
 8011e94:	9307      	strlt	r3, [sp, #28]
 8011e96:	bfb8      	it	lt
 8011e98:	9204      	strlt	r2, [sp, #16]
 8011e9a:	7823      	ldrb	r3, [r4, #0]
 8011e9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8011e9e:	d10a      	bne.n	8011eb6 <_vfiprintf_r+0x156>
 8011ea0:	7863      	ldrb	r3, [r4, #1]
 8011ea2:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ea4:	d132      	bne.n	8011f0c <_vfiprintf_r+0x1ac>
 8011ea6:	9b03      	ldr	r3, [sp, #12]
 8011ea8:	1d1a      	adds	r2, r3, #4
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	9203      	str	r2, [sp, #12]
 8011eae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011eb2:	3402      	adds	r4, #2
 8011eb4:	9305      	str	r3, [sp, #20]
 8011eb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011f8c <_vfiprintf_r+0x22c>
 8011eba:	7821      	ldrb	r1, [r4, #0]
 8011ebc:	2203      	movs	r2, #3
 8011ebe:	4650      	mov	r0, sl
 8011ec0:	f7ee f99e 	bl	8000200 <memchr>
 8011ec4:	b138      	cbz	r0, 8011ed6 <_vfiprintf_r+0x176>
 8011ec6:	9b04      	ldr	r3, [sp, #16]
 8011ec8:	eba0 000a 	sub.w	r0, r0, sl
 8011ecc:	2240      	movs	r2, #64	@ 0x40
 8011ece:	4082      	lsls	r2, r0
 8011ed0:	4313      	orrs	r3, r2
 8011ed2:	3401      	adds	r4, #1
 8011ed4:	9304      	str	r3, [sp, #16]
 8011ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011eda:	4829      	ldr	r0, [pc, #164]	@ (8011f80 <_vfiprintf_r+0x220>)
 8011edc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011ee0:	2206      	movs	r2, #6
 8011ee2:	f7ee f98d 	bl	8000200 <memchr>
 8011ee6:	2800      	cmp	r0, #0
 8011ee8:	d03f      	beq.n	8011f6a <_vfiprintf_r+0x20a>
 8011eea:	4b26      	ldr	r3, [pc, #152]	@ (8011f84 <_vfiprintf_r+0x224>)
 8011eec:	bb1b      	cbnz	r3, 8011f36 <_vfiprintf_r+0x1d6>
 8011eee:	9b03      	ldr	r3, [sp, #12]
 8011ef0:	3307      	adds	r3, #7
 8011ef2:	f023 0307 	bic.w	r3, r3, #7
 8011ef6:	3308      	adds	r3, #8
 8011ef8:	9303      	str	r3, [sp, #12]
 8011efa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011efc:	443b      	add	r3, r7
 8011efe:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f00:	e76a      	b.n	8011dd8 <_vfiprintf_r+0x78>
 8011f02:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f06:	460c      	mov	r4, r1
 8011f08:	2001      	movs	r0, #1
 8011f0a:	e7a8      	b.n	8011e5e <_vfiprintf_r+0xfe>
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	3401      	adds	r4, #1
 8011f10:	9305      	str	r3, [sp, #20]
 8011f12:	4619      	mov	r1, r3
 8011f14:	f04f 0c0a 	mov.w	ip, #10
 8011f18:	4620      	mov	r0, r4
 8011f1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f1e:	3a30      	subs	r2, #48	@ 0x30
 8011f20:	2a09      	cmp	r2, #9
 8011f22:	d903      	bls.n	8011f2c <_vfiprintf_r+0x1cc>
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d0c6      	beq.n	8011eb6 <_vfiprintf_r+0x156>
 8011f28:	9105      	str	r1, [sp, #20]
 8011f2a:	e7c4      	b.n	8011eb6 <_vfiprintf_r+0x156>
 8011f2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f30:	4604      	mov	r4, r0
 8011f32:	2301      	movs	r3, #1
 8011f34:	e7f0      	b.n	8011f18 <_vfiprintf_r+0x1b8>
 8011f36:	ab03      	add	r3, sp, #12
 8011f38:	9300      	str	r3, [sp, #0]
 8011f3a:	462a      	mov	r2, r5
 8011f3c:	4b12      	ldr	r3, [pc, #72]	@ (8011f88 <_vfiprintf_r+0x228>)
 8011f3e:	a904      	add	r1, sp, #16
 8011f40:	4630      	mov	r0, r6
 8011f42:	f3af 8000 	nop.w
 8011f46:	4607      	mov	r7, r0
 8011f48:	1c78      	adds	r0, r7, #1
 8011f4a:	d1d6      	bne.n	8011efa <_vfiprintf_r+0x19a>
 8011f4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011f4e:	07d9      	lsls	r1, r3, #31
 8011f50:	d405      	bmi.n	8011f5e <_vfiprintf_r+0x1fe>
 8011f52:	89ab      	ldrh	r3, [r5, #12]
 8011f54:	059a      	lsls	r2, r3, #22
 8011f56:	d402      	bmi.n	8011f5e <_vfiprintf_r+0x1fe>
 8011f58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011f5a:	f7ff fd2b 	bl	80119b4 <__retarget_lock_release_recursive>
 8011f5e:	89ab      	ldrh	r3, [r5, #12]
 8011f60:	065b      	lsls	r3, r3, #25
 8011f62:	f53f af1f 	bmi.w	8011da4 <_vfiprintf_r+0x44>
 8011f66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011f68:	e71e      	b.n	8011da8 <_vfiprintf_r+0x48>
 8011f6a:	ab03      	add	r3, sp, #12
 8011f6c:	9300      	str	r3, [sp, #0]
 8011f6e:	462a      	mov	r2, r5
 8011f70:	4b05      	ldr	r3, [pc, #20]	@ (8011f88 <_vfiprintf_r+0x228>)
 8011f72:	a904      	add	r1, sp, #16
 8011f74:	4630      	mov	r0, r6
 8011f76:	f000 f879 	bl	801206c <_printf_i>
 8011f7a:	e7e4      	b.n	8011f46 <_vfiprintf_r+0x1e6>
 8011f7c:	080166f0 	.word	0x080166f0
 8011f80:	080166fa 	.word	0x080166fa
 8011f84:	00000000 	.word	0x00000000
 8011f88:	08011d3b 	.word	0x08011d3b
 8011f8c:	080166f6 	.word	0x080166f6

08011f90 <_printf_common>:
 8011f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f94:	4616      	mov	r6, r2
 8011f96:	4698      	mov	r8, r3
 8011f98:	688a      	ldr	r2, [r1, #8]
 8011f9a:	690b      	ldr	r3, [r1, #16]
 8011f9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011fa0:	4293      	cmp	r3, r2
 8011fa2:	bfb8      	it	lt
 8011fa4:	4613      	movlt	r3, r2
 8011fa6:	6033      	str	r3, [r6, #0]
 8011fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011fac:	4607      	mov	r7, r0
 8011fae:	460c      	mov	r4, r1
 8011fb0:	b10a      	cbz	r2, 8011fb6 <_printf_common+0x26>
 8011fb2:	3301      	adds	r3, #1
 8011fb4:	6033      	str	r3, [r6, #0]
 8011fb6:	6823      	ldr	r3, [r4, #0]
 8011fb8:	0699      	lsls	r1, r3, #26
 8011fba:	bf42      	ittt	mi
 8011fbc:	6833      	ldrmi	r3, [r6, #0]
 8011fbe:	3302      	addmi	r3, #2
 8011fc0:	6033      	strmi	r3, [r6, #0]
 8011fc2:	6825      	ldr	r5, [r4, #0]
 8011fc4:	f015 0506 	ands.w	r5, r5, #6
 8011fc8:	d106      	bne.n	8011fd8 <_printf_common+0x48>
 8011fca:	f104 0a19 	add.w	sl, r4, #25
 8011fce:	68e3      	ldr	r3, [r4, #12]
 8011fd0:	6832      	ldr	r2, [r6, #0]
 8011fd2:	1a9b      	subs	r3, r3, r2
 8011fd4:	42ab      	cmp	r3, r5
 8011fd6:	dc26      	bgt.n	8012026 <_printf_common+0x96>
 8011fd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011fdc:	6822      	ldr	r2, [r4, #0]
 8011fde:	3b00      	subs	r3, #0
 8011fe0:	bf18      	it	ne
 8011fe2:	2301      	movne	r3, #1
 8011fe4:	0692      	lsls	r2, r2, #26
 8011fe6:	d42b      	bmi.n	8012040 <_printf_common+0xb0>
 8011fe8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011fec:	4641      	mov	r1, r8
 8011fee:	4638      	mov	r0, r7
 8011ff0:	47c8      	blx	r9
 8011ff2:	3001      	adds	r0, #1
 8011ff4:	d01e      	beq.n	8012034 <_printf_common+0xa4>
 8011ff6:	6823      	ldr	r3, [r4, #0]
 8011ff8:	6922      	ldr	r2, [r4, #16]
 8011ffa:	f003 0306 	and.w	r3, r3, #6
 8011ffe:	2b04      	cmp	r3, #4
 8012000:	bf02      	ittt	eq
 8012002:	68e5      	ldreq	r5, [r4, #12]
 8012004:	6833      	ldreq	r3, [r6, #0]
 8012006:	1aed      	subeq	r5, r5, r3
 8012008:	68a3      	ldr	r3, [r4, #8]
 801200a:	bf0c      	ite	eq
 801200c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012010:	2500      	movne	r5, #0
 8012012:	4293      	cmp	r3, r2
 8012014:	bfc4      	itt	gt
 8012016:	1a9b      	subgt	r3, r3, r2
 8012018:	18ed      	addgt	r5, r5, r3
 801201a:	2600      	movs	r6, #0
 801201c:	341a      	adds	r4, #26
 801201e:	42b5      	cmp	r5, r6
 8012020:	d11a      	bne.n	8012058 <_printf_common+0xc8>
 8012022:	2000      	movs	r0, #0
 8012024:	e008      	b.n	8012038 <_printf_common+0xa8>
 8012026:	2301      	movs	r3, #1
 8012028:	4652      	mov	r2, sl
 801202a:	4641      	mov	r1, r8
 801202c:	4638      	mov	r0, r7
 801202e:	47c8      	blx	r9
 8012030:	3001      	adds	r0, #1
 8012032:	d103      	bne.n	801203c <_printf_common+0xac>
 8012034:	f04f 30ff 	mov.w	r0, #4294967295
 8012038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801203c:	3501      	adds	r5, #1
 801203e:	e7c6      	b.n	8011fce <_printf_common+0x3e>
 8012040:	18e1      	adds	r1, r4, r3
 8012042:	1c5a      	adds	r2, r3, #1
 8012044:	2030      	movs	r0, #48	@ 0x30
 8012046:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801204a:	4422      	add	r2, r4
 801204c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012050:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012054:	3302      	adds	r3, #2
 8012056:	e7c7      	b.n	8011fe8 <_printf_common+0x58>
 8012058:	2301      	movs	r3, #1
 801205a:	4622      	mov	r2, r4
 801205c:	4641      	mov	r1, r8
 801205e:	4638      	mov	r0, r7
 8012060:	47c8      	blx	r9
 8012062:	3001      	adds	r0, #1
 8012064:	d0e6      	beq.n	8012034 <_printf_common+0xa4>
 8012066:	3601      	adds	r6, #1
 8012068:	e7d9      	b.n	801201e <_printf_common+0x8e>
	...

0801206c <_printf_i>:
 801206c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012070:	7e0f      	ldrb	r7, [r1, #24]
 8012072:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012074:	2f78      	cmp	r7, #120	@ 0x78
 8012076:	4691      	mov	r9, r2
 8012078:	4680      	mov	r8, r0
 801207a:	460c      	mov	r4, r1
 801207c:	469a      	mov	sl, r3
 801207e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012082:	d807      	bhi.n	8012094 <_printf_i+0x28>
 8012084:	2f62      	cmp	r7, #98	@ 0x62
 8012086:	d80a      	bhi.n	801209e <_printf_i+0x32>
 8012088:	2f00      	cmp	r7, #0
 801208a:	f000 80d2 	beq.w	8012232 <_printf_i+0x1c6>
 801208e:	2f58      	cmp	r7, #88	@ 0x58
 8012090:	f000 80b9 	beq.w	8012206 <_printf_i+0x19a>
 8012094:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012098:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801209c:	e03a      	b.n	8012114 <_printf_i+0xa8>
 801209e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80120a2:	2b15      	cmp	r3, #21
 80120a4:	d8f6      	bhi.n	8012094 <_printf_i+0x28>
 80120a6:	a101      	add	r1, pc, #4	@ (adr r1, 80120ac <_printf_i+0x40>)
 80120a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80120ac:	08012105 	.word	0x08012105
 80120b0:	08012119 	.word	0x08012119
 80120b4:	08012095 	.word	0x08012095
 80120b8:	08012095 	.word	0x08012095
 80120bc:	08012095 	.word	0x08012095
 80120c0:	08012095 	.word	0x08012095
 80120c4:	08012119 	.word	0x08012119
 80120c8:	08012095 	.word	0x08012095
 80120cc:	08012095 	.word	0x08012095
 80120d0:	08012095 	.word	0x08012095
 80120d4:	08012095 	.word	0x08012095
 80120d8:	08012219 	.word	0x08012219
 80120dc:	08012143 	.word	0x08012143
 80120e0:	080121d3 	.word	0x080121d3
 80120e4:	08012095 	.word	0x08012095
 80120e8:	08012095 	.word	0x08012095
 80120ec:	0801223b 	.word	0x0801223b
 80120f0:	08012095 	.word	0x08012095
 80120f4:	08012143 	.word	0x08012143
 80120f8:	08012095 	.word	0x08012095
 80120fc:	08012095 	.word	0x08012095
 8012100:	080121db 	.word	0x080121db
 8012104:	6833      	ldr	r3, [r6, #0]
 8012106:	1d1a      	adds	r2, r3, #4
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	6032      	str	r2, [r6, #0]
 801210c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012110:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012114:	2301      	movs	r3, #1
 8012116:	e09d      	b.n	8012254 <_printf_i+0x1e8>
 8012118:	6833      	ldr	r3, [r6, #0]
 801211a:	6820      	ldr	r0, [r4, #0]
 801211c:	1d19      	adds	r1, r3, #4
 801211e:	6031      	str	r1, [r6, #0]
 8012120:	0606      	lsls	r6, r0, #24
 8012122:	d501      	bpl.n	8012128 <_printf_i+0xbc>
 8012124:	681d      	ldr	r5, [r3, #0]
 8012126:	e003      	b.n	8012130 <_printf_i+0xc4>
 8012128:	0645      	lsls	r5, r0, #25
 801212a:	d5fb      	bpl.n	8012124 <_printf_i+0xb8>
 801212c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012130:	2d00      	cmp	r5, #0
 8012132:	da03      	bge.n	801213c <_printf_i+0xd0>
 8012134:	232d      	movs	r3, #45	@ 0x2d
 8012136:	426d      	negs	r5, r5
 8012138:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801213c:	4859      	ldr	r0, [pc, #356]	@ (80122a4 <_printf_i+0x238>)
 801213e:	230a      	movs	r3, #10
 8012140:	e011      	b.n	8012166 <_printf_i+0xfa>
 8012142:	6821      	ldr	r1, [r4, #0]
 8012144:	6833      	ldr	r3, [r6, #0]
 8012146:	0608      	lsls	r0, r1, #24
 8012148:	f853 5b04 	ldr.w	r5, [r3], #4
 801214c:	d402      	bmi.n	8012154 <_printf_i+0xe8>
 801214e:	0649      	lsls	r1, r1, #25
 8012150:	bf48      	it	mi
 8012152:	b2ad      	uxthmi	r5, r5
 8012154:	2f6f      	cmp	r7, #111	@ 0x6f
 8012156:	4853      	ldr	r0, [pc, #332]	@ (80122a4 <_printf_i+0x238>)
 8012158:	6033      	str	r3, [r6, #0]
 801215a:	bf14      	ite	ne
 801215c:	230a      	movne	r3, #10
 801215e:	2308      	moveq	r3, #8
 8012160:	2100      	movs	r1, #0
 8012162:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012166:	6866      	ldr	r6, [r4, #4]
 8012168:	60a6      	str	r6, [r4, #8]
 801216a:	2e00      	cmp	r6, #0
 801216c:	bfa2      	ittt	ge
 801216e:	6821      	ldrge	r1, [r4, #0]
 8012170:	f021 0104 	bicge.w	r1, r1, #4
 8012174:	6021      	strge	r1, [r4, #0]
 8012176:	b90d      	cbnz	r5, 801217c <_printf_i+0x110>
 8012178:	2e00      	cmp	r6, #0
 801217a:	d04b      	beq.n	8012214 <_printf_i+0x1a8>
 801217c:	4616      	mov	r6, r2
 801217e:	fbb5 f1f3 	udiv	r1, r5, r3
 8012182:	fb03 5711 	mls	r7, r3, r1, r5
 8012186:	5dc7      	ldrb	r7, [r0, r7]
 8012188:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801218c:	462f      	mov	r7, r5
 801218e:	42bb      	cmp	r3, r7
 8012190:	460d      	mov	r5, r1
 8012192:	d9f4      	bls.n	801217e <_printf_i+0x112>
 8012194:	2b08      	cmp	r3, #8
 8012196:	d10b      	bne.n	80121b0 <_printf_i+0x144>
 8012198:	6823      	ldr	r3, [r4, #0]
 801219a:	07df      	lsls	r7, r3, #31
 801219c:	d508      	bpl.n	80121b0 <_printf_i+0x144>
 801219e:	6923      	ldr	r3, [r4, #16]
 80121a0:	6861      	ldr	r1, [r4, #4]
 80121a2:	4299      	cmp	r1, r3
 80121a4:	bfde      	ittt	le
 80121a6:	2330      	movle	r3, #48	@ 0x30
 80121a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80121ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80121b0:	1b92      	subs	r2, r2, r6
 80121b2:	6122      	str	r2, [r4, #16]
 80121b4:	f8cd a000 	str.w	sl, [sp]
 80121b8:	464b      	mov	r3, r9
 80121ba:	aa03      	add	r2, sp, #12
 80121bc:	4621      	mov	r1, r4
 80121be:	4640      	mov	r0, r8
 80121c0:	f7ff fee6 	bl	8011f90 <_printf_common>
 80121c4:	3001      	adds	r0, #1
 80121c6:	d14a      	bne.n	801225e <_printf_i+0x1f2>
 80121c8:	f04f 30ff 	mov.w	r0, #4294967295
 80121cc:	b004      	add	sp, #16
 80121ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121d2:	6823      	ldr	r3, [r4, #0]
 80121d4:	f043 0320 	orr.w	r3, r3, #32
 80121d8:	6023      	str	r3, [r4, #0]
 80121da:	4833      	ldr	r0, [pc, #204]	@ (80122a8 <_printf_i+0x23c>)
 80121dc:	2778      	movs	r7, #120	@ 0x78
 80121de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80121e2:	6823      	ldr	r3, [r4, #0]
 80121e4:	6831      	ldr	r1, [r6, #0]
 80121e6:	061f      	lsls	r7, r3, #24
 80121e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80121ec:	d402      	bmi.n	80121f4 <_printf_i+0x188>
 80121ee:	065f      	lsls	r7, r3, #25
 80121f0:	bf48      	it	mi
 80121f2:	b2ad      	uxthmi	r5, r5
 80121f4:	6031      	str	r1, [r6, #0]
 80121f6:	07d9      	lsls	r1, r3, #31
 80121f8:	bf44      	itt	mi
 80121fa:	f043 0320 	orrmi.w	r3, r3, #32
 80121fe:	6023      	strmi	r3, [r4, #0]
 8012200:	b11d      	cbz	r5, 801220a <_printf_i+0x19e>
 8012202:	2310      	movs	r3, #16
 8012204:	e7ac      	b.n	8012160 <_printf_i+0xf4>
 8012206:	4827      	ldr	r0, [pc, #156]	@ (80122a4 <_printf_i+0x238>)
 8012208:	e7e9      	b.n	80121de <_printf_i+0x172>
 801220a:	6823      	ldr	r3, [r4, #0]
 801220c:	f023 0320 	bic.w	r3, r3, #32
 8012210:	6023      	str	r3, [r4, #0]
 8012212:	e7f6      	b.n	8012202 <_printf_i+0x196>
 8012214:	4616      	mov	r6, r2
 8012216:	e7bd      	b.n	8012194 <_printf_i+0x128>
 8012218:	6833      	ldr	r3, [r6, #0]
 801221a:	6825      	ldr	r5, [r4, #0]
 801221c:	6961      	ldr	r1, [r4, #20]
 801221e:	1d18      	adds	r0, r3, #4
 8012220:	6030      	str	r0, [r6, #0]
 8012222:	062e      	lsls	r6, r5, #24
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	d501      	bpl.n	801222c <_printf_i+0x1c0>
 8012228:	6019      	str	r1, [r3, #0]
 801222a:	e002      	b.n	8012232 <_printf_i+0x1c6>
 801222c:	0668      	lsls	r0, r5, #25
 801222e:	d5fb      	bpl.n	8012228 <_printf_i+0x1bc>
 8012230:	8019      	strh	r1, [r3, #0]
 8012232:	2300      	movs	r3, #0
 8012234:	6123      	str	r3, [r4, #16]
 8012236:	4616      	mov	r6, r2
 8012238:	e7bc      	b.n	80121b4 <_printf_i+0x148>
 801223a:	6833      	ldr	r3, [r6, #0]
 801223c:	1d1a      	adds	r2, r3, #4
 801223e:	6032      	str	r2, [r6, #0]
 8012240:	681e      	ldr	r6, [r3, #0]
 8012242:	6862      	ldr	r2, [r4, #4]
 8012244:	2100      	movs	r1, #0
 8012246:	4630      	mov	r0, r6
 8012248:	f7ed ffda 	bl	8000200 <memchr>
 801224c:	b108      	cbz	r0, 8012252 <_printf_i+0x1e6>
 801224e:	1b80      	subs	r0, r0, r6
 8012250:	6060      	str	r0, [r4, #4]
 8012252:	6863      	ldr	r3, [r4, #4]
 8012254:	6123      	str	r3, [r4, #16]
 8012256:	2300      	movs	r3, #0
 8012258:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801225c:	e7aa      	b.n	80121b4 <_printf_i+0x148>
 801225e:	6923      	ldr	r3, [r4, #16]
 8012260:	4632      	mov	r2, r6
 8012262:	4649      	mov	r1, r9
 8012264:	4640      	mov	r0, r8
 8012266:	47d0      	blx	sl
 8012268:	3001      	adds	r0, #1
 801226a:	d0ad      	beq.n	80121c8 <_printf_i+0x15c>
 801226c:	6823      	ldr	r3, [r4, #0]
 801226e:	079b      	lsls	r3, r3, #30
 8012270:	d413      	bmi.n	801229a <_printf_i+0x22e>
 8012272:	68e0      	ldr	r0, [r4, #12]
 8012274:	9b03      	ldr	r3, [sp, #12]
 8012276:	4298      	cmp	r0, r3
 8012278:	bfb8      	it	lt
 801227a:	4618      	movlt	r0, r3
 801227c:	e7a6      	b.n	80121cc <_printf_i+0x160>
 801227e:	2301      	movs	r3, #1
 8012280:	4632      	mov	r2, r6
 8012282:	4649      	mov	r1, r9
 8012284:	4640      	mov	r0, r8
 8012286:	47d0      	blx	sl
 8012288:	3001      	adds	r0, #1
 801228a:	d09d      	beq.n	80121c8 <_printf_i+0x15c>
 801228c:	3501      	adds	r5, #1
 801228e:	68e3      	ldr	r3, [r4, #12]
 8012290:	9903      	ldr	r1, [sp, #12]
 8012292:	1a5b      	subs	r3, r3, r1
 8012294:	42ab      	cmp	r3, r5
 8012296:	dcf2      	bgt.n	801227e <_printf_i+0x212>
 8012298:	e7eb      	b.n	8012272 <_printf_i+0x206>
 801229a:	2500      	movs	r5, #0
 801229c:	f104 0619 	add.w	r6, r4, #25
 80122a0:	e7f5      	b.n	801228e <_printf_i+0x222>
 80122a2:	bf00      	nop
 80122a4:	08016701 	.word	0x08016701
 80122a8:	08016712 	.word	0x08016712

080122ac <__sflush_r>:
 80122ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80122b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122b4:	0716      	lsls	r6, r2, #28
 80122b6:	4605      	mov	r5, r0
 80122b8:	460c      	mov	r4, r1
 80122ba:	d454      	bmi.n	8012366 <__sflush_r+0xba>
 80122bc:	684b      	ldr	r3, [r1, #4]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	dc02      	bgt.n	80122c8 <__sflush_r+0x1c>
 80122c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	dd48      	ble.n	801235a <__sflush_r+0xae>
 80122c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80122ca:	2e00      	cmp	r6, #0
 80122cc:	d045      	beq.n	801235a <__sflush_r+0xae>
 80122ce:	2300      	movs	r3, #0
 80122d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80122d4:	682f      	ldr	r7, [r5, #0]
 80122d6:	6a21      	ldr	r1, [r4, #32]
 80122d8:	602b      	str	r3, [r5, #0]
 80122da:	d030      	beq.n	801233e <__sflush_r+0x92>
 80122dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80122de:	89a3      	ldrh	r3, [r4, #12]
 80122e0:	0759      	lsls	r1, r3, #29
 80122e2:	d505      	bpl.n	80122f0 <__sflush_r+0x44>
 80122e4:	6863      	ldr	r3, [r4, #4]
 80122e6:	1ad2      	subs	r2, r2, r3
 80122e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80122ea:	b10b      	cbz	r3, 80122f0 <__sflush_r+0x44>
 80122ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80122ee:	1ad2      	subs	r2, r2, r3
 80122f0:	2300      	movs	r3, #0
 80122f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80122f4:	6a21      	ldr	r1, [r4, #32]
 80122f6:	4628      	mov	r0, r5
 80122f8:	47b0      	blx	r6
 80122fa:	1c43      	adds	r3, r0, #1
 80122fc:	89a3      	ldrh	r3, [r4, #12]
 80122fe:	d106      	bne.n	801230e <__sflush_r+0x62>
 8012300:	6829      	ldr	r1, [r5, #0]
 8012302:	291d      	cmp	r1, #29
 8012304:	d82b      	bhi.n	801235e <__sflush_r+0xb2>
 8012306:	4a2a      	ldr	r2, [pc, #168]	@ (80123b0 <__sflush_r+0x104>)
 8012308:	410a      	asrs	r2, r1
 801230a:	07d6      	lsls	r6, r2, #31
 801230c:	d427      	bmi.n	801235e <__sflush_r+0xb2>
 801230e:	2200      	movs	r2, #0
 8012310:	6062      	str	r2, [r4, #4]
 8012312:	04d9      	lsls	r1, r3, #19
 8012314:	6922      	ldr	r2, [r4, #16]
 8012316:	6022      	str	r2, [r4, #0]
 8012318:	d504      	bpl.n	8012324 <__sflush_r+0x78>
 801231a:	1c42      	adds	r2, r0, #1
 801231c:	d101      	bne.n	8012322 <__sflush_r+0x76>
 801231e:	682b      	ldr	r3, [r5, #0]
 8012320:	b903      	cbnz	r3, 8012324 <__sflush_r+0x78>
 8012322:	6560      	str	r0, [r4, #84]	@ 0x54
 8012324:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012326:	602f      	str	r7, [r5, #0]
 8012328:	b1b9      	cbz	r1, 801235a <__sflush_r+0xae>
 801232a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801232e:	4299      	cmp	r1, r3
 8012330:	d002      	beq.n	8012338 <__sflush_r+0x8c>
 8012332:	4628      	mov	r0, r5
 8012334:	f7ff fb48 	bl	80119c8 <_free_r>
 8012338:	2300      	movs	r3, #0
 801233a:	6363      	str	r3, [r4, #52]	@ 0x34
 801233c:	e00d      	b.n	801235a <__sflush_r+0xae>
 801233e:	2301      	movs	r3, #1
 8012340:	4628      	mov	r0, r5
 8012342:	47b0      	blx	r6
 8012344:	4602      	mov	r2, r0
 8012346:	1c50      	adds	r0, r2, #1
 8012348:	d1c9      	bne.n	80122de <__sflush_r+0x32>
 801234a:	682b      	ldr	r3, [r5, #0]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d0c6      	beq.n	80122de <__sflush_r+0x32>
 8012350:	2b1d      	cmp	r3, #29
 8012352:	d001      	beq.n	8012358 <__sflush_r+0xac>
 8012354:	2b16      	cmp	r3, #22
 8012356:	d11e      	bne.n	8012396 <__sflush_r+0xea>
 8012358:	602f      	str	r7, [r5, #0]
 801235a:	2000      	movs	r0, #0
 801235c:	e022      	b.n	80123a4 <__sflush_r+0xf8>
 801235e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012362:	b21b      	sxth	r3, r3
 8012364:	e01b      	b.n	801239e <__sflush_r+0xf2>
 8012366:	690f      	ldr	r7, [r1, #16]
 8012368:	2f00      	cmp	r7, #0
 801236a:	d0f6      	beq.n	801235a <__sflush_r+0xae>
 801236c:	0793      	lsls	r3, r2, #30
 801236e:	680e      	ldr	r6, [r1, #0]
 8012370:	bf08      	it	eq
 8012372:	694b      	ldreq	r3, [r1, #20]
 8012374:	600f      	str	r7, [r1, #0]
 8012376:	bf18      	it	ne
 8012378:	2300      	movne	r3, #0
 801237a:	eba6 0807 	sub.w	r8, r6, r7
 801237e:	608b      	str	r3, [r1, #8]
 8012380:	f1b8 0f00 	cmp.w	r8, #0
 8012384:	dde9      	ble.n	801235a <__sflush_r+0xae>
 8012386:	6a21      	ldr	r1, [r4, #32]
 8012388:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801238a:	4643      	mov	r3, r8
 801238c:	463a      	mov	r2, r7
 801238e:	4628      	mov	r0, r5
 8012390:	47b0      	blx	r6
 8012392:	2800      	cmp	r0, #0
 8012394:	dc08      	bgt.n	80123a8 <__sflush_r+0xfc>
 8012396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801239a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801239e:	81a3      	strh	r3, [r4, #12]
 80123a0:	f04f 30ff 	mov.w	r0, #4294967295
 80123a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123a8:	4407      	add	r7, r0
 80123aa:	eba8 0800 	sub.w	r8, r8, r0
 80123ae:	e7e7      	b.n	8012380 <__sflush_r+0xd4>
 80123b0:	dfbffffe 	.word	0xdfbffffe

080123b4 <_fflush_r>:
 80123b4:	b538      	push	{r3, r4, r5, lr}
 80123b6:	690b      	ldr	r3, [r1, #16]
 80123b8:	4605      	mov	r5, r0
 80123ba:	460c      	mov	r4, r1
 80123bc:	b913      	cbnz	r3, 80123c4 <_fflush_r+0x10>
 80123be:	2500      	movs	r5, #0
 80123c0:	4628      	mov	r0, r5
 80123c2:	bd38      	pop	{r3, r4, r5, pc}
 80123c4:	b118      	cbz	r0, 80123ce <_fflush_r+0x1a>
 80123c6:	6a03      	ldr	r3, [r0, #32]
 80123c8:	b90b      	cbnz	r3, 80123ce <_fflush_r+0x1a>
 80123ca:	f7ff f8c3 	bl	8011554 <__sinit>
 80123ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d0f3      	beq.n	80123be <_fflush_r+0xa>
 80123d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80123d8:	07d0      	lsls	r0, r2, #31
 80123da:	d404      	bmi.n	80123e6 <_fflush_r+0x32>
 80123dc:	0599      	lsls	r1, r3, #22
 80123de:	d402      	bmi.n	80123e6 <_fflush_r+0x32>
 80123e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80123e2:	f7ff fae6 	bl	80119b2 <__retarget_lock_acquire_recursive>
 80123e6:	4628      	mov	r0, r5
 80123e8:	4621      	mov	r1, r4
 80123ea:	f7ff ff5f 	bl	80122ac <__sflush_r>
 80123ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80123f0:	07da      	lsls	r2, r3, #31
 80123f2:	4605      	mov	r5, r0
 80123f4:	d4e4      	bmi.n	80123c0 <_fflush_r+0xc>
 80123f6:	89a3      	ldrh	r3, [r4, #12]
 80123f8:	059b      	lsls	r3, r3, #22
 80123fa:	d4e1      	bmi.n	80123c0 <_fflush_r+0xc>
 80123fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80123fe:	f7ff fad9 	bl	80119b4 <__retarget_lock_release_recursive>
 8012402:	e7dd      	b.n	80123c0 <_fflush_r+0xc>

08012404 <__swhatbuf_r>:
 8012404:	b570      	push	{r4, r5, r6, lr}
 8012406:	460c      	mov	r4, r1
 8012408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801240c:	2900      	cmp	r1, #0
 801240e:	b096      	sub	sp, #88	@ 0x58
 8012410:	4615      	mov	r5, r2
 8012412:	461e      	mov	r6, r3
 8012414:	da0d      	bge.n	8012432 <__swhatbuf_r+0x2e>
 8012416:	89a3      	ldrh	r3, [r4, #12]
 8012418:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801241c:	f04f 0100 	mov.w	r1, #0
 8012420:	bf14      	ite	ne
 8012422:	2340      	movne	r3, #64	@ 0x40
 8012424:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012428:	2000      	movs	r0, #0
 801242a:	6031      	str	r1, [r6, #0]
 801242c:	602b      	str	r3, [r5, #0]
 801242e:	b016      	add	sp, #88	@ 0x58
 8012430:	bd70      	pop	{r4, r5, r6, pc}
 8012432:	466a      	mov	r2, sp
 8012434:	f000 f896 	bl	8012564 <_fstat_r>
 8012438:	2800      	cmp	r0, #0
 801243a:	dbec      	blt.n	8012416 <__swhatbuf_r+0x12>
 801243c:	9901      	ldr	r1, [sp, #4]
 801243e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012442:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012446:	4259      	negs	r1, r3
 8012448:	4159      	adcs	r1, r3
 801244a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801244e:	e7eb      	b.n	8012428 <__swhatbuf_r+0x24>

08012450 <__smakebuf_r>:
 8012450:	898b      	ldrh	r3, [r1, #12]
 8012452:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012454:	079d      	lsls	r5, r3, #30
 8012456:	4606      	mov	r6, r0
 8012458:	460c      	mov	r4, r1
 801245a:	d507      	bpl.n	801246c <__smakebuf_r+0x1c>
 801245c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012460:	6023      	str	r3, [r4, #0]
 8012462:	6123      	str	r3, [r4, #16]
 8012464:	2301      	movs	r3, #1
 8012466:	6163      	str	r3, [r4, #20]
 8012468:	b003      	add	sp, #12
 801246a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801246c:	ab01      	add	r3, sp, #4
 801246e:	466a      	mov	r2, sp
 8012470:	f7ff ffc8 	bl	8012404 <__swhatbuf_r>
 8012474:	9f00      	ldr	r7, [sp, #0]
 8012476:	4605      	mov	r5, r0
 8012478:	4639      	mov	r1, r7
 801247a:	4630      	mov	r0, r6
 801247c:	f7fe ff52 	bl	8011324 <_malloc_r>
 8012480:	b948      	cbnz	r0, 8012496 <__smakebuf_r+0x46>
 8012482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012486:	059a      	lsls	r2, r3, #22
 8012488:	d4ee      	bmi.n	8012468 <__smakebuf_r+0x18>
 801248a:	f023 0303 	bic.w	r3, r3, #3
 801248e:	f043 0302 	orr.w	r3, r3, #2
 8012492:	81a3      	strh	r3, [r4, #12]
 8012494:	e7e2      	b.n	801245c <__smakebuf_r+0xc>
 8012496:	89a3      	ldrh	r3, [r4, #12]
 8012498:	6020      	str	r0, [r4, #0]
 801249a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801249e:	81a3      	strh	r3, [r4, #12]
 80124a0:	9b01      	ldr	r3, [sp, #4]
 80124a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80124a6:	b15b      	cbz	r3, 80124c0 <__smakebuf_r+0x70>
 80124a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80124ac:	4630      	mov	r0, r6
 80124ae:	f000 f86b 	bl	8012588 <_isatty_r>
 80124b2:	b128      	cbz	r0, 80124c0 <__smakebuf_r+0x70>
 80124b4:	89a3      	ldrh	r3, [r4, #12]
 80124b6:	f023 0303 	bic.w	r3, r3, #3
 80124ba:	f043 0301 	orr.w	r3, r3, #1
 80124be:	81a3      	strh	r3, [r4, #12]
 80124c0:	89a3      	ldrh	r3, [r4, #12]
 80124c2:	431d      	orrs	r5, r3
 80124c4:	81a5      	strh	r5, [r4, #12]
 80124c6:	e7cf      	b.n	8012468 <__smakebuf_r+0x18>

080124c8 <_putc_r>:
 80124c8:	b570      	push	{r4, r5, r6, lr}
 80124ca:	460d      	mov	r5, r1
 80124cc:	4614      	mov	r4, r2
 80124ce:	4606      	mov	r6, r0
 80124d0:	b118      	cbz	r0, 80124da <_putc_r+0x12>
 80124d2:	6a03      	ldr	r3, [r0, #32]
 80124d4:	b90b      	cbnz	r3, 80124da <_putc_r+0x12>
 80124d6:	f7ff f83d 	bl	8011554 <__sinit>
 80124da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80124dc:	07d8      	lsls	r0, r3, #31
 80124de:	d405      	bmi.n	80124ec <_putc_r+0x24>
 80124e0:	89a3      	ldrh	r3, [r4, #12]
 80124e2:	0599      	lsls	r1, r3, #22
 80124e4:	d402      	bmi.n	80124ec <_putc_r+0x24>
 80124e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80124e8:	f7ff fa63 	bl	80119b2 <__retarget_lock_acquire_recursive>
 80124ec:	68a3      	ldr	r3, [r4, #8]
 80124ee:	3b01      	subs	r3, #1
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	60a3      	str	r3, [r4, #8]
 80124f4:	da05      	bge.n	8012502 <_putc_r+0x3a>
 80124f6:	69a2      	ldr	r2, [r4, #24]
 80124f8:	4293      	cmp	r3, r2
 80124fa:	db12      	blt.n	8012522 <_putc_r+0x5a>
 80124fc:	b2eb      	uxtb	r3, r5
 80124fe:	2b0a      	cmp	r3, #10
 8012500:	d00f      	beq.n	8012522 <_putc_r+0x5a>
 8012502:	6823      	ldr	r3, [r4, #0]
 8012504:	1c5a      	adds	r2, r3, #1
 8012506:	6022      	str	r2, [r4, #0]
 8012508:	701d      	strb	r5, [r3, #0]
 801250a:	b2ed      	uxtb	r5, r5
 801250c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801250e:	07da      	lsls	r2, r3, #31
 8012510:	d405      	bmi.n	801251e <_putc_r+0x56>
 8012512:	89a3      	ldrh	r3, [r4, #12]
 8012514:	059b      	lsls	r3, r3, #22
 8012516:	d402      	bmi.n	801251e <_putc_r+0x56>
 8012518:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801251a:	f7ff fa4b 	bl	80119b4 <__retarget_lock_release_recursive>
 801251e:	4628      	mov	r0, r5
 8012520:	bd70      	pop	{r4, r5, r6, pc}
 8012522:	4629      	mov	r1, r5
 8012524:	4622      	mov	r2, r4
 8012526:	4630      	mov	r0, r6
 8012528:	f7ff f925 	bl	8011776 <__swbuf_r>
 801252c:	4605      	mov	r5, r0
 801252e:	e7ed      	b.n	801250c <_putc_r+0x44>

08012530 <memmove>:
 8012530:	4288      	cmp	r0, r1
 8012532:	b510      	push	{r4, lr}
 8012534:	eb01 0402 	add.w	r4, r1, r2
 8012538:	d902      	bls.n	8012540 <memmove+0x10>
 801253a:	4284      	cmp	r4, r0
 801253c:	4623      	mov	r3, r4
 801253e:	d807      	bhi.n	8012550 <memmove+0x20>
 8012540:	1e43      	subs	r3, r0, #1
 8012542:	42a1      	cmp	r1, r4
 8012544:	d008      	beq.n	8012558 <memmove+0x28>
 8012546:	f811 2b01 	ldrb.w	r2, [r1], #1
 801254a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801254e:	e7f8      	b.n	8012542 <memmove+0x12>
 8012550:	4402      	add	r2, r0
 8012552:	4601      	mov	r1, r0
 8012554:	428a      	cmp	r2, r1
 8012556:	d100      	bne.n	801255a <memmove+0x2a>
 8012558:	bd10      	pop	{r4, pc}
 801255a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801255e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012562:	e7f7      	b.n	8012554 <memmove+0x24>

08012564 <_fstat_r>:
 8012564:	b538      	push	{r3, r4, r5, lr}
 8012566:	4d07      	ldr	r5, [pc, #28]	@ (8012584 <_fstat_r+0x20>)
 8012568:	2300      	movs	r3, #0
 801256a:	4604      	mov	r4, r0
 801256c:	4608      	mov	r0, r1
 801256e:	4611      	mov	r1, r2
 8012570:	602b      	str	r3, [r5, #0]
 8012572:	f7f0 fcac 	bl	8002ece <_fstat>
 8012576:	1c43      	adds	r3, r0, #1
 8012578:	d102      	bne.n	8012580 <_fstat_r+0x1c>
 801257a:	682b      	ldr	r3, [r5, #0]
 801257c:	b103      	cbz	r3, 8012580 <_fstat_r+0x1c>
 801257e:	6023      	str	r3, [r4, #0]
 8012580:	bd38      	pop	{r3, r4, r5, pc}
 8012582:	bf00      	nop
 8012584:	20009814 	.word	0x20009814

08012588 <_isatty_r>:
 8012588:	b538      	push	{r3, r4, r5, lr}
 801258a:	4d06      	ldr	r5, [pc, #24]	@ (80125a4 <_isatty_r+0x1c>)
 801258c:	2300      	movs	r3, #0
 801258e:	4604      	mov	r4, r0
 8012590:	4608      	mov	r0, r1
 8012592:	602b      	str	r3, [r5, #0]
 8012594:	f7f0 fcab 	bl	8002eee <_isatty>
 8012598:	1c43      	adds	r3, r0, #1
 801259a:	d102      	bne.n	80125a2 <_isatty_r+0x1a>
 801259c:	682b      	ldr	r3, [r5, #0]
 801259e:	b103      	cbz	r3, 80125a2 <_isatty_r+0x1a>
 80125a0:	6023      	str	r3, [r4, #0]
 80125a2:	bd38      	pop	{r3, r4, r5, pc}
 80125a4:	20009814 	.word	0x20009814

080125a8 <memcpy>:
 80125a8:	440a      	add	r2, r1
 80125aa:	4291      	cmp	r1, r2
 80125ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80125b0:	d100      	bne.n	80125b4 <memcpy+0xc>
 80125b2:	4770      	bx	lr
 80125b4:	b510      	push	{r4, lr}
 80125b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80125ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80125be:	4291      	cmp	r1, r2
 80125c0:	d1f9      	bne.n	80125b6 <memcpy+0xe>
 80125c2:	bd10      	pop	{r4, pc}

080125c4 <_realloc_r>:
 80125c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125c8:	4680      	mov	r8, r0
 80125ca:	4615      	mov	r5, r2
 80125cc:	460c      	mov	r4, r1
 80125ce:	b921      	cbnz	r1, 80125da <_realloc_r+0x16>
 80125d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125d4:	4611      	mov	r1, r2
 80125d6:	f7fe bea5 	b.w	8011324 <_malloc_r>
 80125da:	b92a      	cbnz	r2, 80125e8 <_realloc_r+0x24>
 80125dc:	f7ff f9f4 	bl	80119c8 <_free_r>
 80125e0:	2400      	movs	r4, #0
 80125e2:	4620      	mov	r0, r4
 80125e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125e8:	f000 f81a 	bl	8012620 <_malloc_usable_size_r>
 80125ec:	4285      	cmp	r5, r0
 80125ee:	4606      	mov	r6, r0
 80125f0:	d802      	bhi.n	80125f8 <_realloc_r+0x34>
 80125f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80125f6:	d8f4      	bhi.n	80125e2 <_realloc_r+0x1e>
 80125f8:	4629      	mov	r1, r5
 80125fa:	4640      	mov	r0, r8
 80125fc:	f7fe fe92 	bl	8011324 <_malloc_r>
 8012600:	4607      	mov	r7, r0
 8012602:	2800      	cmp	r0, #0
 8012604:	d0ec      	beq.n	80125e0 <_realloc_r+0x1c>
 8012606:	42b5      	cmp	r5, r6
 8012608:	462a      	mov	r2, r5
 801260a:	4621      	mov	r1, r4
 801260c:	bf28      	it	cs
 801260e:	4632      	movcs	r2, r6
 8012610:	f7ff ffca 	bl	80125a8 <memcpy>
 8012614:	4621      	mov	r1, r4
 8012616:	4640      	mov	r0, r8
 8012618:	f7ff f9d6 	bl	80119c8 <_free_r>
 801261c:	463c      	mov	r4, r7
 801261e:	e7e0      	b.n	80125e2 <_realloc_r+0x1e>

08012620 <_malloc_usable_size_r>:
 8012620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012624:	1f18      	subs	r0, r3, #4
 8012626:	2b00      	cmp	r3, #0
 8012628:	bfbc      	itt	lt
 801262a:	580b      	ldrlt	r3, [r1, r0]
 801262c:	18c0      	addlt	r0, r0, r3
 801262e:	4770      	bx	lr

08012630 <_init>:
 8012630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012632:	bf00      	nop
 8012634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012636:	bc08      	pop	{r3}
 8012638:	469e      	mov	lr, r3
 801263a:	4770      	bx	lr

0801263c <_fini>:
 801263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801263e:	bf00      	nop
 8012640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012642:	bc08      	pop	{r3}
 8012644:	469e      	mov	lr, r3
 8012646:	4770      	bx	lr
